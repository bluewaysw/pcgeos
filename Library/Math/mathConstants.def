COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1991 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		
FILE:		mathConstant.def

AUTHOR:		jimmy

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jimmy	4/22/92		Initial version.

DESCRIPTION:
	contains definitions for the math library

	$Id: mathConstants.def,v 1.1 97/04/05 01:23:30 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


; there will be a set of entry points at the beginning of the
; relocation table that will not get overwritten
MATH_LIBRARY_FIRST_ENTRY_POINT_TO_OVERWRITE = 7

MATH_LIBRARY_FIRST_TABLE_ENTRY_COUNT = 142
MATH_LIBRARY_SECOND_TABLE_ENTRY_COUNT = 10

MATH_LIBRARY_SECOND_TABLE_SKIP_ENTRY_COUNT = 62

; ThreadListHeader is the header of the block containing the
; the ThreadList, it keeps track of how many Threads are active and
; how many spaces have been allocated in the list
;
MathThreadListHeader	struct
	MTLH_numberOfElements	word
	MTLH_numberAllocated	word
MathThreadListHeader	ends

; ImpexThreadList is the structure of each element in the active thread list
; it has a filed for the owning App, the thread handle itself and
; the ThreadAttributes field
;

; if the totalDepth ever exceeds eight, then the bottom of the stack
; gets copied over to the software stack, so that the top eight
; elements will be on the chip, when the depth falls back to
; eight of less all the stuff from the software chip will be
; copied back onto the hardware stack

MathThreadList		struct
	MTL_threadHandle	hptr	; thread handle for client
	MTL_softwareStackHandle	hptr	; handle of software stack
	MTL_hardwareStackHandle	hptr	; handle of hardware stack
	MTL_stackDepth		word	; total depth of stack
	MTL_stackHardwareDepth	word	; depth of hardware stack
MathThreadList		end


idata segment
global	threadListHan:hptr
global	stackHanOffset:word
idata	ends


FLOAT_STACK_TYPE_BOUND	enum	FloatStackType
FLOAT_STACK_GROW_AMOUNT equ	20

MathRoutines	etype	word

MR_FLOAT_INIT				enum MathRoutines, 0
MR_FLOAT_COMP				enum MathRoutines, 23
MR_FLOAT_FLOAT_TO_ASCII			enum MathRoutines, 38
MR_FLOAT_FLOAT_TO_ASCII_STD_FORMAT	enum MathRoutines, 39
MR_FLOAT_POP_NUMBER			enum MathRoutines, 66
MR_FLOAT_PUSH_NUMBER			enum MathRoutines, 67
MR_FLOAT_ASCII_TO_FLOAT			enum MathRoutines, 80
MR_FLOAT_STRING_GET_DATE_NUMBER		enum MathRoutines, 96
MR_FLOAT_STRING_GET_TIME_NUMBER		enum MathRoutines, 97


CoProcessorRoutines	etype	word, 0, 1

MR_OVERFLOW			enum	CoProcessorRoutines
;	 pass:	cx = stack handle
;		di = how much to overflow
;	return: nothing

MR_UNDERFLOW			enum	CoProcessorRoutines
;	pass:	cx = stack handle
;		di = how much to underflow
;	return: nothing

MR_SAVE_STATE			enum	CoProcessorRoutines
;	pass:	si = handle of block in which to save state
; 	return: nothing

MR_RESTORE_STATE		enum	CoProcessorRoutines
;	pass:	si = handle of block in which to save state
; 	return: nothing

MR_GET_HARDWARE_STACK_SIZE	enum	CoProcessorRoutines
;	pass:	nothing
;	return: cx = hardware stack size

MR_GET_ENV_SIZE			enum	CoProcessorRoutines
;	pass:	nothing
;	return: cx = environment size in bytes
;		the environment contains the entire state and stack

MR_DO_HARDWARE_INIT		enum	CoProcessorRoutines
;	pass:	nothing
;	return: nothing

;-------------------------------------------------------------------------------
;	FATAL ERRORS
;-------------------------------------------------------------------------------

FLOAT_FORMAT_BAD_FORMAT_INFO_STRUC		enum	FatalErrors
FLOAT_FORMAT_ZERO_OFFSET_EXPECTED		enum	FatalErrors

BAD_NUMBER_OF_ENTRY_POINTS			enum	FatalErrors
COPROCESSOR_BAD_EXIT				enum	FatalErrors
NO_THREAD_LIST_SEMAFORE				enum	FatalErrors
BAD_HARDWARE_EXIT				enum	FatalErrors
BAD_FLOAT_STACK_TYPE				enum	FatalErrors
TOO_MANY_CLIENT_THREADS				enum    FatalErrors
FLOAT_STACK_SIZE_TOO_LARGE			enum	FatalErrors

FLOAT_RESIZE_TOO_SMALL_TO_HOLD_CURRENT_STACK_ELEMENTS	enum FatalErrors
FLOAT_CALL_TO_SET_STACK_SIZE_BEFORE_CALL_TO_FLOAT_INIT  enum FatalErrors

FLOAT_FORMAT_BAD_PARAMS			enum	FatalErrors
FLOAT_FORMAT_BAD_ENTRY_SIGNATURE	enum	FatalErrors
FLOAT_FORMAT_BAD_PRE_DEF_TOKEN		enum	FatalErrors
FLOAT_FORMAT_BAD_USER_DEF_TOKEN		enum	FatalErrors
FLOAT_FORMAT_BAD_FORMAT_ARRAY		enum	FatalErrors
FLOAT_FORMAT_BAD_FORMAT_ENTRY		enum	FatalErrors
FLOAT_FORMAT_BAD_FORMAT_LIST		enum	FatalErrors
FLOAT_FORMAT_ASSERTION_FAILED		enum	FatalErrors
FLOAT_FORMAT_OBJECT_ERROR		enum	FatalErrors

if FULL_EXECUTE_IN_PLACE
NOT_DGROUP				enum	FatalErrors
endif
