/***********************************************************************
 *
 *	FileManager Tool Demo
 *
 *	This sample explains how to write a FileManager tool plugin for the utilities menu.
 *	By default, the source of these plugins are located at
 *	pcgeos/Library/FMTools. More examples can be found there.
 *	The compiled geode has to be copied to ensemble/system/filemgr
 *	
 *	The structures and messages used here can be found in the file fmtool.goh.
 *	This file also contains further options and explanations.
 *
 *	Our tool only fetches the selected files and displays their names in a list.
 *	This demonstrates some common strategies used in file manger tools.
 *
 *	R. Bettsteller 04/2024
 *	
 ***********************************************************************/

@include <stdapp.goh>
@include <fmtool.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include <fmtdemo.goh>

/*  local.mk flag check mit swat

/***********************************************************************
Resources
***********************************************************************/
@start FMTData, data;
    /*
     *	Place your localizable chunks here
     */ 
    @visMoniker ToolEntryMoniker = "Demo Tool";
    
@end FMTData;

@start DialogUI, notDetachable;
    /*
     *	Place your UI objects here.
     *  In this demo we have a dialog box with an dynamic list
     */ 

    @object FMTDemoInteractionClass SelectDialog = {
        GI_visMoniker = "Demo File Mananger Tool";
        GI_comp =   @SelectFileList,
        	    @SelectReplyBar;
        GI_states = (@default & (~GS_USABLE));
        GII_visibility = GIV_DIALOG;
        GII_attrs = @default | GIA_NOT_USER_INITIATABLE | GIA_MODAL;
        HINT_PLACE_MONIKER_ABOVE;
        HINT_ORIENT_CHILDREN_VERTICALLY;
    }

    @object GenDynamicListClass SelectFileList = {
   	GI_visMoniker = "List of selected files";
	HINT_PLACE_MONIKER_ABOVE;
	HINT_ITEM_GROUP_SCROLLABLE;
	HINT_FIXED_SIZE = { SST_AVG_CHAR_WIDTHS | 33,
			SST_LINES_OF_TEXT | 8, 8};
   	GDLI_queryMsg = MSG_FMT_DEMO_QUERY_FILE;
   	GDLI_numItems = 0;
    }

    @object GenInteractionClass SelectReplyBar ={
        GI_comp =   @SelectOkTrigger,
                    @SelectCancelTrigger;
        HINT_MAKE_REPLY_BAR;
    }

    @object GenTriggerClass SelectOkTrigger = {
    	GI_visMoniker = "OK";
    	GTI_actionMsg = MSG_FMT_DEMO_QUIT_DIALOG;
        ATTR_GEN_TRIGGER_ACTION_DATA = IC_OK;
        HINT_SEEK_REPLY_BAR;
        HINT_DEFAULT_DEFAULT_ACTION;
    }

    @object GenTriggerClass SelectCancelTrigger = {
    	GI_visMoniker = "Cancel";
    	GTI_actionMsg = MSG_FMT_DEMO_QUIT_DIALOG;
        ATTR_GEN_TRIGGER_ACTION_DATA = IC_DISMISS;
        HINT_SEEK_REPLY_BAR;
    }

@end DialogUI;


/*-------------------------------------------------------------
 *	API Struct	- tell the file manager infos about our tools
 *	MUST be global
-------------------------------------------------------------*/
FMToolStruct FMToolInfo[1] = {
    {
        @ToolEntryMoniker, (FMTF_SELECTED_ONLY | FMTT_DIALOG), 1
        	/* Moniker for Tool Entry
        	 * FMTF_SELECTED_ONLY: active, onyl if at least a file/folder is selected
        	 * FMTT_DIALOG: a dialog will come up (see FMToolType). 
        	 * 1: number of the tool in our list (we have only one)
        	 */
    }
};

static	optr		g_dialog = NullOptr;	/* Our dialog object */
static	MemHandle 	g_mh;			/* List of selected files when the tool was activated */


/*-------------------------------------------------------------
 *	FMFetchToolsProc GetThoseTools
 *-------------------------------------------------------------
 *	FileManager API Function - fetch Tools
-------------------------------------------------------------*/

word _pascal _export GetThoseTools(FMToolStruct **tablePtr)
{
    *tablePtr = (FMToolStruct*) &FMToolInfo;
    return 1;	/* number of tools we have */
}


/*-------------------------------------------------------------
 *	FMToolProc DemoToolStart()
 *-------------------------------------------------------------
 *	GeodeHandle filemgr => Process that is subclass of FileManagerClass
 *	word toolNum =>	Entry # of activated tool within table returned by
 *                FMTF_FETCH_TOOLS
 *	word entryNum
 *
 *	The user has clicked on our Utilities menu item: "Demo Tool"
-------------------------------------------------------------*/
// for swat: stop in fmtdemo::DemoToolStart
void _pascal _export DemoToolStart(
    GeodeHandle filemgr,
    word toolNum,
    word entryNum
)
{
SelectedFilesStruct	*fileInfo;

{word x = toolNum; x = entryNum;}	/* suppress compiler warnings for unused parameters */

    /*
     * Copy our dialog template and add it to the application object
     * g_dialog = @call ConstructOptr(filemgr, 0)::MSG_FM_DUP_AND_ADD(@SelectDialog, FMP_APPLICATION);
     * can be used alternatively
     */
    g_dialog = UserCreateDialog(@SelectDialog);
    	
    /*
     * Initialize duplicated dialog objects
     */
    @send @DialogObj(@SelectOkTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectCancelTrigger)::MSG_GEN_TRIGGER_SET_DESTINATION(g_dialog);
    @send @DialogObj(@SelectFileList)::MSG_GEN_ITEM_GROUP_SET_DESTINATION(g_dialog);

    /*
     * Figure out the selected files and initialize the file list
     */
    g_mh = @call ConstructOptr(filemgr, 0)::MSG_FM_GET_SELECTED_FILES();
    if ( !g_mh ) return;	// be save to avoid crash, but this should not occur.
    
    fileInfo = MemLock(g_mh);
    @send @DialogObj(@SelectFileList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE(fileInfo->header.FQTH_numFiles);

	/*
	 * Note: fileInfo->header.FQTH_nextBlock may contain the next block with the next file list.
	 * If your tool can hande a large number of files, you should check and handle it here.
	 * But in my tests I could not find any non-zero FQTH_nextBlock.
	 */

    MemUnlock(g_mh);

    /*
     * Finally, open dialog box
     * The box will be closed in MSG_FMT_DEMO_QUIT_DIALOG
     * We cannot use UserDoDialog() because this will block our thread an the list will not be updated.
     */
    @send g_dialog::MSG_GEN_INTERACTION_INITIATE();


}

/*-------------------------------------------------------------
 * Methods for FMTDemoInteractionClass
 *-------------------------------------------------------------*/
 
@classdecl FMTDemoInteractionClass;

/*-------------------------------------------------------------
 * void MSG_FMT_DEMO_QUIT_DIALOG(int cmd);	
 *-------------------------------------------------------------
 *	Perform tool operation, close and destroy dialog box
 *
 *
-------------------------------------------------------------*/
// for swat: stop in fmtdemo::FMTDemoInteractionFMT_DEMO_QUIT_DIALOG
@method FMTDemoInteractionClass, MSG_FMT_DEMO_QUIT_DIALOG {
SelectedFilesStruct	*fileInfo;

    if(cmd == IC_OK) {
	fileInfo = MemLock(g_mh);
    	UserStandardDialog((char*)0,
			    (char*)0,
			    (char*)0,
			    fileInfo->header.FQTH_pathname,
			    "Perform your tool operation in folder '\001'.",
			    ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			     (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ); 
    	MemUnlock(g_mh);
    	
    }

    UserDestroyDialog(g_dialog); // close and destroy the dialog
    if (g_mh) {
	/*
	 * Note: fileInfo->header.FQTH_nextBlock may contain the next block with the next file list.
	 * So, we free it recursively. But in my tests I could not find any non-zero 
	 * FQTH_nextBlock, so this code is not really tested for this case.
	 */
	word	block, nextBlock; 
	block = g_mh;
	while (block) {
	    fileInfo = MemLock(block);
	    nextBlock = fileInfo->header.FQTH_nextBlock;
	    MemUnlock(block);
	    MemFree(block);
	    block = nextBlock;
    	}
    }
    
}


/*-------------------------------------------------------------
 * MSG_FMT_DEMO_QUERY_FILE	
 *-------------------------------------------------------------
 *	void GEN_DYNAMIC_LIST_QUERY_MSG (optr list, word item);
 *	Update item moniker in the file list
-------------------------------------------------------------*/
// for swat: stop in fmtdemo::FMTDemoInteractionFMT_DEMO_QUERY_FILE
@method FMTDemoInteractionClass, MSG_FMT_DEMO_QUERY_FILE {
FileLongName		fName;
SelectedFilesStruct	*fileInfo;

    if (!g_mh) strcpy(fName, "---");
    else {
	fileInfo = MemLock(g_mh);
	strcpy(fName, fileInfo->entry[item].FOIE_name);
	MemUnlock(g_mh);	
    }
    @send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, fName);
}
