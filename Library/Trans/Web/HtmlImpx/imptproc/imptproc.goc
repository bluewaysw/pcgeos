/***********************************************************************
 *
 * PROJECT:       ImptProc
 * FILE:          ImptProc.goc
 *
 * AUTHOR:        Marcus Grï¿½ber
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>
@include <Objects/clipbrd.goh>
@include <impex.goh>
#include <vm.h>
#include <xlatLib.h>
#include <Ansi/string.h>
#include <localize.h>

@include <html4par.goh>

/* size of buffer at beginning of file which is scanned for <HTML> tag */
#define TEST_SIZE 1024

/*
 * Add page layout structure to import format.
 */
void AddPageLayout(VMFileHandle vmf,VMBlockHandle bh)
{
    VMBlockHandle h;
    MemHandle mh;
    TextTransferBlockHeader *ttbh;
    PageSetupInfo *psi;

    h = VMAlloc(vmf,sizeof(PageSetupInfo),0);
    psi = VMLock(vmf,h,&mh);
    VMDirty(mh);
    memset(psi,0,sizeof(*psi));         /* preset with zeroes */
    psi->PSI_page.XYS_width = 0x264;    /* default page size */
    psi->PSI_page.XYS_height = 0x318;
    psi->PSI_numColumns = 1;            /* one column only */
    psi->PSI_leftMargin = psi->PSI_rightMargin = psi->PSI_topMargin =
     psi->PSI_bottomMargin = 0x240;     /* margins */
    VMUnlock(mh);

    ttbh = VMLock(vmf,bh,&mh);
    ttbh->TTBH_pageSetup = VMCHAIN_MAKE_FROM_VM_BLOCK(h);
    VMDirty(mh);
    VMUnlock(mh);
}

/*
 * Data block passed between TransGet???portOptions and Trans???port
 */
struct ie_uidata {
  word booleanOptions;
};

dword _pascal _export ImportProcedure(ImportFrame *ieb,VMChain *vmc)
{
    struct ie_uidata *uidata;
    VMBlockHandle transferItem;
    int cif,ret;
    MemHandle mh;
    HTMLextra ext;
    HypertextTransferBlockHeader *htbh;

    /*
     * Set default font/size
     */
    ext.HE_pointSize = MakeWWFixed(12);
    ext.HE_plainFont = FID_DTC_URW_SANS;
    ext.HE_exampleFont = FID_DTC_URW_MONO;
    ext.HE_marginWidth = HTML_EXTRA_MARGIN_USE_DEFAULT;
    ext.HE_marginHeight = HTML_EXTRA_MARGIN_USE_DEFAULT;
    ext.HE_decodeUtf8 = FALSE;
    ext.HE_vmFile = ieb->IF_transferVMFile;

    if( ieb->IF_importOptions )
    {
      uidata = (struct ie_uidata *)MemLock( ieb->IF_importOptions );
                                        /* lock structure with option data */
      ext.HE_options = uidata->booleanOptions;
                                        /* get options */

      MemUnlock( ieb->IF_importOptions );
                                        /* unlocked passed options block */
    }
    else
      ext.HE_options = 0;               /* default options */

    ext.HE_namePool = NamePoolCreate( ieb->IF_transferVMFile );

    /* call parser to process file and create an HTML transfer item */
    ret = ParseHTMLFile( NULL, ieb->IF_sourceFile, &ext, &transferItem );

    NamePoolFree( ext.HE_namePool );
    if(ret)                             /* error returned by parser */
      return TE_ERROR;                  /* general error... */

    /* extract basic text transfer item from HTML transfer item */
    htbh = VMLock( ieb->IF_transferVMFile, transferItem, &mh );
    *vmc = htbh->HTBH_transferItem;
    htbh->HTBH_transferItem = NullHandle;
    VMDirty(mh);
    VMUnlock(mh);

    /* free remaining HTML-specific transfer structures */
    FreeHTMLTransferItem( ieb->IF_transferVMFile,
      VMCHAIN_MAKE_FROM_VM_BLOCK(transferItem) );

    AddPageLayout( ieb->IF_transferVMFile, VMCHAIN_GET_VM_BLOCK(*vmc) );
                                        /* add simple page layout to the file */

    cif = CIF_TEXT;                     /* we have created a text item */
    return TE_NO_ERROR+(((dword)cif)<<16);
}

sword _pascal GetFormat(FileHandle fh)
{
    sword size,i,brackets;
    char *p;
    MemHandle mh;
    word format;

    mh = MemAlloc( TEST_SIZE, HF_DYNAMIC, 0 );
                                        /* allocate buffer for testing */
    if(!mh) return NO_IDEA_FORMAT;      /* no buffer: can't identify */

    p = MemLock( mh );                  /* lock buffer */
    size = FileRead( fh, p, TEST_SIZE, FALSE );
                                        /* get start of file to be tested */

    format = NO_IDEA_FORMAT;            /* default: unknown format */

    brackets = 0;                       /* outside of any angle brackets */
    for( i=0; i<size-4; i++,p++)
      if(*p=='<')                       /* opening bracket: entered new level */
      {
        brackets++;                     /* increase level count */
        if( brackets==1 && LocalCmpStringsNoCase( p+1, "HTML", 4 )==0 )
        {                               /* encountered <HTML... at top level? */
          format = 0;                   /* yes: its HTML */
          break;
        }
      }
      else if(*p=='>')                  /* closing bracket decreases level */
        brackets--;
      else if( !brackets && *p!=' ' && *p!='\t' && *p!='\n' && *p!='\r' )
        break;                          /* non-whitespace outside <...> before
                                           <HTML> tag - cannot be HTML */

    MemFree(mh);                        /* release sample buffer */

    return format;                      /* return result of test */
}
