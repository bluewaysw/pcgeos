/***********************************************************************
 *
 * PROJECT:       ImptProc
 * FILE:          ImptProc.goc
 *
 * AUTHOR:        Marcus Grï¿½ber
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>
@include <Objects/clipbrd.goh>
@include <impex.goh>
#include <vm.h>
#include <xlatLib.h>
#include <Ansi/string.h>
#include <localize.h>

@include <htmlpars.goh>

/* size of buffer at beginning of file which is scanned for <HTML> tag */
#define TEST_SIZE 1024

@ifdef DO_ERROR_CHECKING
  #define DO_GRAPHICS
@endif

/*
 * Add page layout structure to import format.
 */
void AddPageLayout(VMFileHandle vmf,VMBlockHandle bh)
{
    VMBlockHandle h;
    MemHandle mh;
    TextTransferBlockHeader *ttbh;
    PageSetupInfo *psi;

    h = VMAlloc(vmf,sizeof(PageSetupInfo),0);
    psi = VMLock(vmf,h,&mh);
    VMDirty(mh);
    memset(psi,0,sizeof(*psi));         /* preset with zeroes */
    psi->PSI_page.XYS_width = 0x264;    /* default page size */
    psi->PSI_page.XYS_height = 0x318;
    psi->PSI_numColumns = 1;            /* one column only */
    psi->PSI_leftMargin = psi->PSI_rightMargin = psi->PSI_topMargin =
     psi->PSI_bottomMargin = 0x240;     /* margins */
    VMUnlock(mh);

    ttbh = VMLock(vmf,bh,&mh);
    ttbh->TTBH_pageSetup = VMCHAIN_MAKE_FROM_VM_BLOCK(h);
    VMDirty(mh);
    VMUnlock(mh);
}

#ifdef DO_GRAPHICS
void ProcessGraphics(optr obj, VMFileHandle vmf, char *current,
  MemHandle mh, ChunkHandle imageArray)
{
    GStateHandle gstate;
    VMBlockHandle dataVMBlock;
    VisTextGraphic vtg;

    gstate = GrCreateGString(vmf, GST_VMEM, &dataVMBlock);
    GrSetLineColor(gstate,C_BLACK,CF_INDEX,0,0);
    GrDrawRect(gstate,0,0,19,9);
    GrEndGString(gstate);
    GrDestroyGString(gstate, 0, GSKT_LEAVE_DATA);

    memset(&vtg,0,sizeof(VisTextGraphic));
    vtg.VTG_type = VTGT_GSTRING;
    vtg.VTG_flags = 0;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e11.WWF_int = 1;
    vtg.VTG_data.VTGD_gstring.VTGG_tmatrix.TM_e22.WWF_int = 1;
    vtg.VTG_vmChain = VMCHAIN_MAKE_FROM_VM_BLOCK(dataVMBlock);
    vtg.VTG_size.XYS_width = 20;
    vtg.VTG_size.XYS_height = 10;

    @call obj::MSG_VIS_TEXT_REPLACE_WITH_GRAPHIC(vtg, vmf, 0, 0, 0);
}
#endif

/*
 * Data block passed between TransGet???portOptions and Trans???port
 */
struct ie_uidata {
  word booleanOptions;
};

dword _pascal _export ImportProcedure(ImportFrame *ieb,VMChain *vmc)
{
    struct ie_uidata *uidata;
    optr textObj;
    VMBlockHandle transferItem;
    int cif,ret;
    MemHandle mh;
    HTMLextra ext;
#ifdef DO_GRAPHICS
    char *p;
    char fullname[PATH_BUFFER_SIZE];
#endif

    textObj = TextAllocClipboardObject(ieb->IF_transferVMFile,
      VTSF_MULTIPLE_CHAR_ATTRS | VTSF_MULTIPLE_PARA_ATTRS |
#ifdef DO_GRAPHICS
        VTSF_GRAPHICS |
#endif
        VTSF_TYPES,
      0);

    if(!textObj) return TE_ERROR;       /* return error if alloc fails */

    /*
     * Set default font/size
     */
    ext.HE_pointSize = MakeWWFixed(12);
    ext.HE_plainFont = FID_DTC_URW_SANS;
    ext.HE_exampleFont = FID_DTC_URW_MONO;

    if( ieb->IF_importOptions )
    {
      uidata = (struct ie_uidata *)MemLock( ieb->IF_importOptions );
                                        /* lock structure with option data */
      ext.HE_options = uidata->booleanOptions;
                                        /* get options */

      MemUnlock( ieb->IF_importOptions );
                                        /* unlocked passed options block */
    }
    else
      ext.HE_options = 0;               /* default options */

    mh = MemAllocLMem(LMEM_TYPE_GENERAL,0);
                                        /* allocate block for more data */
    ext.HE_block = mh;                  /* put all arrays into this block */

    MemLock(mh);                        /* lock block for additional data */

    /* call parser to process file and import it into the text object */
    ret = ParseHTMLFile( NULL, ieb->IF_sourceFile, textObj, &ext );

    if(ret)                             /* error returned by parser */
    {
      MemFree(mh);                      /* release additional data block */
      TextFinishWithClipboardObject(
        textObj,
        TCO_RETURN_NOTHING,
        HandleToOptr(GeodeGetProcessHandle()),
        "");
      return TE_ERROR;                  /* general error... */
    }

#ifdef DO_GRAPHICS
    p=fullname;                         /* make double indirection clean */
    FileConstructFullPath( &p, PATH_BUFFER_SIZE,
      ieb->IF_sourcePathDisk, ieb->IF_sourcePathName, TRUE );

    /* process additional HTML features */
    ProcessGraphics( textObj, ieb->IF_transferVMFile, fullname,
      mh, ext.HE_imageArray );          /* process images in array */
#endif

    MemFree(mh);                        /* release additional data block */

    transferItem = TextFinishWithClipboardObject(
      textObj,
      TCO_RETURN_TRANSFER_FORMAT,
      HandleToOptr(GeodeGetProcessHandle()),
      "");

    AddPageLayout( ieb->IF_transferVMFile, transferItem );
                                        /* add simple page layout to the file */

    *vmc = VMCHAIN_MAKE_FROM_VM_BLOCK( transferItem );

    cif = CIF_TEXT;                     /* we have created a text item */
    return TE_NO_ERROR+(((dword)cif)<<16);
}

sword _pascal GetFormat(FileHandle fh)
{
    sword size,i,brackets;
    char *p;
    MemHandle mh;
    word format;

    mh = MemAlloc( TEST_SIZE, HF_DYNAMIC, 0 );
                                        /* allocate buffer for testing */
    if(!mh) return NO_IDEA_FORMAT;      /* no buffer: can't identify */

    p = MemLock( mh );                  /* lock buffer */
    size = FileRead( fh, p, TEST_SIZE, FALSE );
                                        /* get start of file to be tested */

    format = NO_IDEA_FORMAT;            /* default: unknown format */

    brackets = 0;                       /* outside of any angle brackets */
    for( i=0; i<size-4; i++,p++)
      if(*p=='<')                       /* opening bracket: entered new level */
      {
        brackets++;                     /* increase level count */
        if( brackets==1 && LocalCmpStringsNoCase( p+1, "HTML", 4 )==0 )
        {                               /* encountered <HTML... at top level? */
          format = 0;                   /* yes: its HTML */
          break;
        }
      }
      else if(*p=='>')                  /* closing bracket decreases level */
        brackets--;
      else if( !brackets && *p!=' ' && *p!='\t' && *p!='\n' && *p!='\r' )
        break;                          /* non-whitespace outside <...> before
                                           <HTML> tag - cannot be HTML */

    MemFree(mh);                        /* release sample buffer */

    return format;                      /* return result of test */
}
