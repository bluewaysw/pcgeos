/*
 *
 * Project:	PC GEOS
 * Module:	CommonUI/CSpec (common code for all specific UIs)
 * File:	cspecCUAS.ui
 *
 * Author:	Doug Fults
 *
 *	This file contains User Interface descriptions for standard
 *	components in CUA-style user interfaces.
 *
 *	$Id: cspecCUAS.ui,v 1.7 98/05/15 17:57:47 joon Exp $
 *
 */

specificUI;		/* allows us to use F-keys, misc */
#include "generic.uih"

#include "Objects/eMenuC.uih"	/* for Express Menu */


#include "../CommonUI/cGeode.uih"	/* defines compiler constants */

#include "../CommonUI/CSpec/cspecFile.ui"
#include "../CommonUI/CSpec/mkrExit.ui"

			/* MOTIF only uses the color & CGA versions */

#if _MOTIF
 #if _MENUS_PINNABLE
 #include "../CommonUI/CSpec/bmPin.ui"
 #endif
#include "../CommonUI/CSpec/mkrMinimize.ui"
#include "../CommonUI/CSpec/mkrMaximize.ui"
#include "../CommonUI/CSpec/mkrRestore.ui"
#include "../CommonUI/CSpec/mkrWindowMenu.ui"
#include "../CommonUI/CSpec/mkrDisplayWindowMenu.ui"
#include "../CommonUI/CSpec/mkrWindowMenuButton.ui"
#include "../CommonUI/CSpec/mkrExpressMenu.ui"
#endif	/* if _MOTIF */

#if _ISUI
 #if _MENUS_PINNABLE
 #include "../CommonUI/CSpec/bmPin.ui"
 #endif
start AppSCMonikerResource, data;
#include "./../ISUI/Art/mkrMinimize.ui"
#include "./../ISUI/Art/mkrMaximize.ui"
#include "./../ISUI/Art/mkrRestore.ui"
end AppSCMonikerResource;
#include "../CommonUI/CSpec/mkrWindowMenu.ui"
#include "../CommonUI/CSpec/mkrDisplayWindowMenu.ui"
#include "../CommonUI/CSpec/mkrWindowMenuButton.ui"
#include "../CommonUI/CSpec/mkrExpressMenu.ui"
#endif	/* if _ISUI */

#if INCLUDE_SC_MONIKERS
start AppFileSCMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0IC.ui"
#include "../CommonUI/CArt/mkrLevel1IC.ui"
#include "../CommonUI/CArt/mkrLevel2IC.ui"
#include "../CommonUI/CArt/mkrLevel3IC.ui"
end AppFileSCMonikerResource;
#endif

#if INCLUDE_SM_MONIKERS
start AppFileSMMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0IM.ui"
#include "../CommonUI/CArt/mkrLevel1IM.ui"
#include "../CommonUI/CArt/mkrLevel2IM.ui"
#include "../CommonUI/CArt/mkrLevel3IM.ui"
end AppFileSMMonikerResource;
#endif

#if INCLUDE_CGA_MONIKERS
start AppFileSCGAMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0ICGA.ui"
#include "../CommonUI/CArt/mkrLevel1ICGA.ui"
#include "../CommonUI/CArt/mkrLevel2ICGA.ui"
#include "../CommonUI/CArt/mkrLevel3ICGA.ui"
end AppFileSCGAMonikerResource;
#endif

#if INCLUDE_SC_MONIKERS
start AppSCMonikerResource, data;
#if !INCLUDE_SM_MONIKERS
#include "../CommonUI/CArt/mkrHelpTrigSM.ui"	/* include here if no SM_MON */
#endif
#if _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpPrimarySC.ui"
#else
#include "../CommonUI/CArt/mkrHelpPrimarySC.ui"
#endif
end AppSCMonikerResource;
#endif	/* INCLUDE_SC_MONIKERS */

#if INCLUDE_SM_MONIKERS
start AppSMMonikerResource, data;
#if _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpTrigSM.ui"
#else
#include "../CommonUI/CArt/mkrHelpTrigSM.ui"
#endif
#if _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpPrimarySM.ui"
#else
#include "../CommonUI/CArt/mkrHelpPrimarySM.ui"
#endif
end AppSMMonikerResource;
#endif	/* INCLUDE_SM_MONIKERS */

#if INCLUDE_CGA_MONIKERS
start AppSCGAMonikerResource, data;
#include "../CommonUI/CArt/mkrHelpTrigSCGA.ui"
#include "../CommonUI/CArt/mkrHelpPrimarySCGA.ui"
end AppSCGAMonikerResource;
#endif	/* INCLUDE_CGA_MONIKERS */

#if NOTEBOOK_INTERACTION
start AppSCMonikerResource, data;
#include "./Art/mkrNotebookRings.ui"
end AppSCMonikerResource;
#endif

#if MENU_BAR_IS_A_MENU
start AppSCMonikerResource, data;
#include "./Art/mkrMenuBar.ui"
end AppSCMonikerResource;
#endif

#if SELECTION_BOX
start AppSCMonikerResource, data;
#include "./Art/mkrLArrow.ui"
#include "./Art/mkrRArrow.ui"
#include "./Art/mkrDArrow.ui"
#include "./Art/mkrUArrow.ui"
end AppSCMonikerResource;
#endif

#if RADIO_STATUS_ICON_ON_PRIMARY
start AppSCMonikerResource, data;
#include "./Art/mkrRadioStatusOff.ui"
#include "./Art/mkrRadioStatusOn1.ui"
#include "./Art/mkrRadioStatusOn2.ui"
#include "./Art/mkrRadioStatusOn3.ui"
end AppSCMonikerResource;
#endif

start AppSCMonikerResource2, data;
end AppSCMonikerResource2;

/*-----------------------------------------------------------------------------
	Dialog-related
-----------------------------------------------------------------------------*/

start StandardMonikers, data;

visMoniker StandardCloseMoniker = "VMO_CANCEL", "Close";
visMoniker StandardCancelMoniker = "VMO_CANCEL", "Cancel";

#if KEYBOARD_ONLY_UI
visMoniker StandardApplyMoniker = 'A',"Apply";
#else
visMoniker StandardApplyMoniker = "Apply";
#endif

visMoniker StandardResetMoniker = "Reset";

#if KEYBOARD_ONLY_UI
visMoniker StandardOKMoniker = 'O', "OK";
#else
visMoniker StandardOKMoniker = "OK";
#endif

visMoniker StandardYesMoniker = 'Y', "Yes";
visMoniker StandardNoMoniker = 'N', "No";
visMoniker StandardStopMoniker = "Stop";
visMoniker StandardKeyboardCloseMoniker = "VMO_CANCEL", "Esc - Close";
visMoniker StandardKeyboardCancelMoniker = "VMO_CANCEL", "Esc - Cancel";
visMoniker GroupTypeFileMoniker = 'F', "File";
visMoniker GroupTypeEditMoniker = 'E', "Edit";
visMoniker GroupTypeViewMoniker = 'V', "View";
visMoniker GroupTypeOptionsMoniker = 'O', "Options";
visMoniker GroupTypeWindowMoniker = 'W', "Window";
visMoniker GroupTypeHelpMoniker = 'H', "Help";
visMoniker GroupTypePrintMoniker = 'P', "Print";
visMoniker StandardNextMoniker = "Next";
visMoniker StandardPrevMoniker = "Previous";
visMoniker FileExitMoniker = 'x', "Exit";

#if _ISUI
visMoniker MOWindowMenuTextMoniker = 'W', "Window";
#endif

/*
 * Definitions for standard levels monikers
 */
#include "../CommonUI/CSpec/cspecLevels.ui"
/*
 * Definitions for standard help UI monikers
 */
#include "../CommonUI/CSpec/cspecHelp.ui"


#if _MENUS_PINNABLE
#if _MOTIF

#if INCLUDE_SC_MONIKERS
visMoniker MOPinColorMoniker = {
        size = standard;
        color = color4;
        aspectRatio = normal;
	cachedSize = 32, 14;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinColorBitmap
		GSEndString
	}
}
#endif	/* INCLUDE_SC_MONIKERS */

#if INCLUDE_SM_MONIKERS
visMoniker MOPinBWMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = normal;
	cachedSize = 30, 12;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinBWBitmap
		GSEndString
	}
}
#endif	/* INCLUDE_SM_MONIKERS */

#if INCLUDE_CGA_MONIKERS
visMoniker MOPinCGAMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = verySquished;
	cachedSize = 32, 10;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinCGABitmap
		GSEndString
	}
}
#endif	/* INCLUDE_CGA_MONIKERS */

visMoniker PinMoniker = list {
#if INCLUDE_SC_MONIKERS
 		MOPinColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
 		MOPinBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
 		MOPinCGAMoniker
#endif
}

#elif _ISUI					/* elif of if _MOTIF */

visMoniker MOPinColorMoniker = {
        size = standard;
        color = color4;
        aspectRatio = normal;
	cachedSize = 32, 14;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinColorBitmap
		GSEndString
	}
}

visMoniker PinMoniker = list {
 		MOPinColorMoniker
}

#else						/* else of if _MOTIF */

visMoniker PinMoniker = {
	    cachedSize = 32, 14;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndPinTriggerBM-StartPinTriggerBM)>
		StartPinTriggerBM	label	byte
			Bitmap < 32, 14, 0, <BMF_MONO> >
			byte	00000000b, 00000000b, 00000000b, 00000000b
			byte	00000000b, 00000000b, 00000000b, 00000000b
			byte	00000000b, 00000111b, 00000000b, 00000000b
			byte	00000000b, 00000111b, 10000001b, 10000000b
			byte	00000000b, 00000111b, 10000011b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	00001111b, 11111111b, 11111111b, 11000000b
			byte	00000111b, 11111111b, 11111111b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	01100000b, 00000111b, 11111111b, 11000000b
			byte	11110000b, 00000111b, 10000011b, 11000000b
			byte	11110000b, 00000111b, 10000001b, 10000000b
			byte	01100000b, 00000111b, 00000000b, 00000000b
		EndPinTriggerBM	label	byte
		GSEndString
	    }
	}
#endif						/* end of else of if _MOTIF */
#endif						/* end of if _MENUS_PINNABLE */

#if _GCM
visMoniker GCMHeaderExitMoniker = list {
		ExitSCMoniker,
		ExitSMMoniker,
		ExitSCGAMoniker
	}
#endif						/* if _GCM */

end StandardMonikers;



/*-----------------------------------------------------------------------------
	Window menu used for Primary's & non-modal dialogs
-----------------------------------------------------------------------------*/

start StandardWindowMenuResource, notDetachable;

/* VERY IMPORTANT: if you change the order of these GenTriggers in this	  */
/* menu, update the MO_SYS_MENU_***_INDEX constants in cwinClassCUAS.asm */

StandardWindowMenu = GenInteraction {
	kbdAccelerator = shift ESCAPE;
	/* NOTE: this moniker is used by the OLMenuButton object which	*/
	/* is created to drive this menu. 				*/
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuCGAMoniker
#endif
	}
#elif _ISUI					/* elif of _MOTIF */
	moniker = list {
		MOWindowMenuColorMoniker,
		MOWindowMenuTextMoniker
	}
#else						/* else of _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */

	children = SMI_Restore, SMI_Move, SMI_Size, SMI_Minimize,
		SMI_Maximize, SMI_Close;

	visibility = popup;
	hints = {
#if _ISUI
		ATTR_GEN_FOCUS_HELP {
			optr	MenuHelpString
		},
#endif
		HINT_SYS_MENU,			/* force below GenPrimary */
		HINT_INFREQUENTLY_USED		/* not pinnable */
	}
}


SMI_Restore = GenTrigger {
	moniker = 'R', "Restore";
	kbdAccelerator = F5;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
}

SMI_Move = GenTrigger {
	moniker = 'M', "Move";
	kbdAccelerator = F7;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_MOVE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

SMI_Size = GenTrigger {
	moniker = 'S', "Size";
	kbdAccelerator = F8;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_SIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

SMI_Minimize = GenTrigger {
	moniker = 'n', "Minimize";
	kbdAccelerator = F9;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

SMI_Maximize = GenTrigger {
	moniker = 'x', "Maximize";
	kbdAccelerator = F10;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
}

SMI_Close = GenTrigger {
	CLOSE_TRIGGER_VALUES
	kbdAccelerator = F4;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		/* allow enabling even if menu disabled */
		ATTR_SYSTEM_MENU_CLOSE
	}
}

#if _MOTIF

SMI_MinimizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MinimizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MinimizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MinimizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MaximizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MaximizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MaximizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		RestoreColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		RestoreBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		RestoreCGAMoniker
#endif
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#elif _ISUI					/* elif of if _MOTIF */

SMI_MinimizeIcon = GenTrigger {
	moniker = list {
		MinimizeColorMoniker
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		},
		ATTR_GEN_FOCUS_HELP {
			optr	MinimizeHelpString
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = list {
		MaximizeColorMoniker
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		},
		ATTR_GEN_FOCUS_HELP {
			optr	MaximizeHelpString
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = list {
		RestoreColorMoniker
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_FOCUS_HELP {
			optr	RestoreHelpString
		}
	}
}

SMI_CloseIcon = GenTrigger {
	moniker = list {
		CloseColorMoniker
	}
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		HINT_CENTER_MONIKER,
		ATTR_GEN_FOCUS_HELP {
			optr	CloseHelpString
		},
		ATTR_GEN_TRIGGER_RGB_COLOR {
		    ColorQuad <24, CF_RGB, 150, 45>
		}
	}
}

#else						/* else of if _MOTIF */

SMI_MinimizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMiniButtonBM-StartMiniButtonBM)>
		StartMiniButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00011111b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 01000000b, 01110000b
			db	00000000b, 00100000b, 11100000b
			db	00000000b, 00010001b, 11000000b
			db	00000000b, 00001011b, 10000000b
			db	00000000b, 00000111b, 00000000b
			db	00000000b, 00000010b, 00000000b
		EndMiniButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMaxButtonBM-StartMaxButtonBM)>
		StartMaxButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000100b, 00000000b
			db	00000000b, 00001011b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00100000b, 11000000b
			db	00000000b, 01000000b, 01100000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 00010001b, 11100000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00011111b, 10000000b
		EndMaxButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndRestoreButtonBM-StartRestoreButtonBM)>
		StartRestoreButtonBM	label	byte
			Bitmap < 24, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11100000b, 01000000b
			db	00000010b, 00110000b, 10110000b
			db	00000010b, 00110001b, 00011000b
			db	00000010b, 00110010b, 00001100b
			db	00000010b, 00110100b, 00000110b
			db	00011110b, 00111111b, 00011111b
			db	00001000b, 00001111b, 00011110b
			db	00000100b, 00011101b, 00011000b
			db	00000010b, 00111001b, 00011000b
			db	00000001b, 01110001b, 00011000b
			db	00000000b, 11100001b, 11111000b
			db	00000000b, 01000000b, 11111000b
		EndRestoreButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of if _MOTIF */


#if !_ISUI

StandardWindowMenuButton = GenTrigger {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuButtonColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuButtonBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuButtonCGAMoniker
#endif
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
#if _STYLUS
		HINT_CLOSE_BUTTON,
#endif
	 }
}

#endif						/* end of if !_ISUI */

end StandardWindowMenuResource;


/*-----------------------------------------------------------------------------
	Window menu for Displays only
-----------------------------------------------------------------------------*/

start DisplayWindowMenuResource, notDetachable;

/* VERY IMPORTANT: keep everything in the same order as the regular System */
/* Menu!								   */


DisplayWindowMenu = GenInteraction {
	kbdAccelerator = alt MINUS;
	/* NOTE: this moniker is used by the OLMenuButton object which	*/
	/* is created to drive this menu. 				*/
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MODisplayWindowMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MODisplayWindowMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MODisplayWindowMenuCGAMoniker
#endif
	}
#elif _ISUI					/* elif of if _MOTIF */
	moniker = list {
		MODisplayWindowMenuColorMoniker
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndDispSysMenuBM-StartDispSysMenuBM)>
		StartDispSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11111111b, 11110000b
			db	00000010b, 00000000b, 00011000b
			db	00000011b, 11111111b, 11111000b
			db	00000001b, 11111111b, 11111000b
		EndDispSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif					/* end of else of if _MOTIF */
	children = DSMI_Restore, DSMI_Move, DSMI_Size, DSMI_Minimize,
		DSMI_Maximize, DSMI_Close, DSMI_Next;
	visibility = popup;
	hints = {
#if _ISUI
		ATTR_GEN_FOCUS_HELP {
			optr	MenuHelpString
		},
#endif
		HINT_SYS_MENU,			/* force below GenPrimary */
		HINT_INFREQUENTLY_USED		/* not pinnable */
	}
}

DSMI_Restore = GenTrigger {
	moniker = 'R', "Restore";
	kbdAccelerator = F5;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
}

DSMI_Move = GenTrigger {
	moniker = 'M', "Move";
	kbdAccelerator = F7;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_MOVE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

DSMI_Size = GenTrigger {
	moniker = 'S', "Size";
	kbdAccelerator = F8;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_SIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

DSMI_Minimize = GenTrigger {
	moniker = 'n', "Minimize";
	kbdAccelerator = F9;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled;
}

DSMI_Maximize = GenTrigger {
	moniker = 'x', "Maximize";
	kbdAccelerator = F10;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
}

DSMI_Close = GenTrigger {
	CLOSE_TRIGGER_VALUES
	kbdAccelerator = F4;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		/* allow enabling even if menu disabled */
		ATTR_SYSTEM_MENU_CLOSE
	}
}


#if _MOTIF

DSMI_MinimizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MinimizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MinimizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MinimizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MaximizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MaximizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MaximizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		RestoreColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		RestoreBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		RestoreCGAMoniker
#endif
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#elif _ISUI					/* elif of _MOTIF */

DSMI_MinimizeIcon = GenTrigger {
	moniker = list {
		MinimizeColorMoniker
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_FOCUS_HELP {
			optr	MinimizeHelpString
		}
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = list {
		MaximizeColorMoniker
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_FOCUS_HELP {
			optr	MaximizeHelpString
		}
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = list {
		RestoreColorMoniker
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_FOCUS_HELP {
			optr	RestoreHelpString
		}
	}
}

DSMI_CloseIcon = GenTrigger {
	moniker = list {
		CloseColorMoniker
	}
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_FOCUS_HELP {
			optr	CloseHelpString
		}
	}
}

#else						/* else of if _MOTIF */

DSMI_MinimizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMiniDButtonBM-StartMiniDButtonBM)>
		StartMiniDButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00011111b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 01000000b, 01110000b
			db	00000000b, 00100000b, 11100000b
			db	00000000b, 00010001b, 11000000b
			db	00000000b, 00001011b, 10000000b
			db	00000000b, 00000111b, 00000000b
			db	00000000b, 00000010b, 00000000b
		EndMiniDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMaxDButtonBM-StartMaxDButtonBM)>
		StartMaxDButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000100b, 00000000b
			db	00000000b, 00001011b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00100000b, 11000000b
			db	00000000b, 01000000b, 01100000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 00010001b, 11100000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00011111b, 10000000b
		EndMaxDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndRestoreDButtonBM-StartRestoreDButtonBM)>
		StartRestoreDButtonBM	label	byte
			Bitmap < 24, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11100000b, 01000000b
			db	00000010b, 00110000b, 10110000b
			db	00000010b, 00110001b, 00011000b
			db	00000010b, 00110010b, 00001100b
			db	00000010b, 00110100b, 00000110b
			db	00011110b, 00111111b, 00011111b
			db	00001000b, 00001111b, 00011110b
			db	00000100b, 00011101b, 00011000b
			db	00000010b, 00111001b, 00011000b
			db	00000001b, 01110001b, 00011000b
			db	00000000b, 11100001b, 11111000b
			db	00000000b, 01000000b, 11111000b
		EndRestoreDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of else of if _MOTIF */

DSMI_Next = GenTrigger {
	moniker = 'N', "Next";
	kbdAccelerator = F6;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_NEXT_WIN, "TO_OBJ_BLOCK_OUTPUT";
}


#if !_ISUI

DisplayWindowMenuButton = GenTrigger {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuButtonColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuButtonBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuButtonCGAMoniker
#endif
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of if !_ISUI */

end DisplayWindowMenuResource;


/*-----------------------------------------------------------------------------
	Express menu
-----------------------------------------------------------------------------*/

start ExpressMenuResource, notDetachable;

/*
 *	ToolAreaClass (implemented in cwinField.asm)
 */

class ToolArea = GenInteraction {
	TAI_state = byteComp : 0;
	TAI_autoHideTimerID = wordComp : 0;
	TAI_autoHideTimerHandle = hptrComp : null;
}

FloatingToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
#if TOOL_AREA_IS_TASK_BAR
	/* If you reorder this, change OLFieldEnsureToolArea to match */
	children = TaskList, SysTray;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
#if _ISUI
		HINT_WINDOW_NO_TITLE_BAR,
#endif
#if _MOTIF
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
#endif
#if EVENT_MENU
		HINT_DRAW_STYLE_FLAT,
		HINT_DONT_KEEP_PARTIALLY_ONSCREEN,
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
	     	      SpecWinSizePair < mask SWSS_RATIO or PCT_100, \
					mask SWSS_RATIO or PCT_100>
		},
#endif
#if TOOL_AREA_IS_TASK_BAR
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
			SpecWinSizePair < mask SWSS_RATIO or PCT_0, mask SWSS_RATIO or PCT_0 >
		},
		HINT_WINDOW_NO_CONSTRAINTS,
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
		    word LAYER_PRIO_ON_TOP-1
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
		    word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
		    word WIN_PRIO_STD-1
		}
#else
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
		HINT_STAGGER_WINDOW,
		HINT_DONT_KEEP_INITIALLY_ONSCREEN
#endif
	}
}

#if TOOL_AREA_IS_TASK_BAR
class SysTrayInteraction = GenInteraction {
}

class TaskBarList = GenDynamicList {
}

TaskList = TaskBarList
{
	genStates = default -usable;
	queryMsg = MSG_WINDOW_LIST_LIST_QUERY_TASK_BAR_ITEM_MONIKER;
	applyMsg = MSG_WINDOW_LIST_LIST_SELECT_ITEM;
	hints = {
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word	0
		},
		HINT_ITEM_GROUP_TOOLBOX_STYLE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DIVIDE_WIDTH_EQUALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#if _MOTIF
		HINT_CUSTOM_EXTRA_MARGINS {
			Rectangle	<0, 1, 0, 1> /* left, top, right, bottom */
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <>
			SpecHeight <SST_PIXELS, 20>
			word 0
		},
#endif
#if _ISUI
		HINT_CUSTOM_CHILD_SPACING {
			word	2
		},
#endif
	}
}
#endif

#if TOOL_AREA_IS_TASK_BAR
SysTray = SysTrayInteraction
{
	genStates = default -usable;
	/* If you reorder this, change OLFieldEnsureToolArea to match */
	children = SysTrayExpress;
	hints = {
		HINT_CUSTOM_CHILD_SPACING {
			word	0
		},
		HINT_TOOLBOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_CUSTOM_EXTRA_MARGINS {
			Rectangle	<5, 1, 5, 1>
		},
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT
	}
}
#endif

#if EVENT_MENU
EventToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
		HINT_DRAW_STYLE_FLAT,
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
	     	      SpecWinSizePair < mask SWSS_RATIO or PCT_100, \
					mask SWSS_RATIO or PCT_100>
		},
		HINT_DONT_KEEP_INITIALLY_ONSCREEN,
		HINT_DONT_KEEP_PARTIALLY_ONSCREEN,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

ExpressMenu = ExpressMenuControl {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		ExpressMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		ExpressMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		ExpressMenuCGAMoniker
#endif
	}
#elif _ISUI					/* elif of if _MOTIF */
	moniker = list {
		ExpressMenuColorMoniker
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 13;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndAppMenuBM-StartAppMenuBM)>
		StartAppMenuBM	label	byte
		    Bitmap < 23, 13, 0, <BMF_MONO> >
		    db	00000000b, 00000000b, 00000000b
		    db	00000000b, 00000111b, 11111110b
		    db	00000000b, 00000111b, 11111100b
		    db	00000111b, 11111000b, 11111000b
		    db	00000000b, 00001111b, 00000000b
		    db	00000000b, 00011111b, 11100000b
		    db	00011111b, 11100011b, 11000000b
		    db	00000000b, 00111111b, 10000000b
		    db	00000000b, 01111100b, 00000000b
		    db	01111111b, 10001000b, 01110000b
		    db	00000000b, 11111111b, 11100000b
		    db	00000001b, 11111111b, 11000000b
		    db	00000001b, 11111111b, 10000000b
		EndAppMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	visibility = popup;
	kbdAccelerator = control ESCAPE;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			word LAYER_PRIO_ON_TOP-1
		},
		HINT_AVOID_MENU_BAR,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,	/* will be overwritten in OLFieldEnsureExpressMenu */
		HINT_KEEP_INITIALLY_ONSCREEN,
		HINT_CENTER_MONIKER,
		HINT_EXPRESS_MENU,
		ATTR_GEN_CONTROL_REQUIRE_UI { word 0 }, /* These will be filled in, depending on user level and .ini file settings */
		ATTR_GEN_CONTROL_PROHIBIT_UI { word 0 }, /* These will be filled in, depending on user level and .ini file settings */
		ATTR_EMC_SET_NOT_USABLE_ON_DETACH,
#if _ISUI
		HINT_INFREQUENTLY_USED			/* not pinnable */
#endif
#if _MOTIF
		HINT_CAN_CLIP_MONIKER_HEIGHT
#endif
	}
}

#if TOOL_AREA_IS_TASK_BAR
SysTrayExpress = ExpressMenuControl {
	hints = {
			ATTR_GEN_CONTROL_REQUIRE_UI { word 0 },
			ATTR_GEN_CONTROL_PROHIBIT_UI { word -1 },
			HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
			HINT_ORIENT_CHILDREN_HORIZONTALLY,
			ATTR_EMC_SET_NOT_USABLE_ON_DETACH,
			ATTR_EMC_SYSTEM_TRAY,
			HINT_TOOLBOX
	}
}
#endif

end ExpressMenuResource;


#if WINDOW_LIST_ACTIVE
start WindowListResource, notDetachable;

/*-----------------------------------------------------------------------------
	Window list dialog
-----------------------------------------------------------------------------*/

class WindowListDialog = GenInteraction {
	OLWLDI_flag	= byteComp : 0;
}

class WindowListList = GenItemGroup {
}

WinListDialog = WindowListDialog {
	moniker = "Window List";
	children = WindowList;
	visibility = dialog;
	attributes = default +notUserInitiatable;
	genAttributes = default +targetable;
	kbdAccelerator = control alt ESCAPE;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			word LAYER_PRIO_ON_TOP-1
		},
		HINT_INTERACTION_MAKE_RESIZABLE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_INTERACTION_MAXIMIZABLE
	}
}

WindowList = WindowListList {
	destination = "OLTPT_FIELD";
	hints = {
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 16>
			SpecHeight <SST_LINES_OF_TEXT, 4>
			word	4
		},
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word	MSG_OL_FIELD_SELECT_WINDOW_LIST_ENTRY
		}
	}
}

end WindowListResource;
#endif

#if _ISUI
/*-----------------------------------------------------------------------------
	Exit dialog
-----------------------------------------------------------------------------*/

start ExitResource, notDetachable;

ExitDialog = GenInteraction {
	moniker = "Exit";
	children = ExitIcon, ExitGroup, ExitOK;
	genStates = default -usable;
	type = command;
	visibility = dialog;
	attributes = default +sysModal, +initiatedViaUserDoDialog;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 15>
		},
		HINT_CUSTOM_EXTRA_MARGINS {
			Rectangle <10, 10, 10, 10>
		}
	}
}

ExitIcon = GenGlyph {
	moniker = list {
		ExitComputerSCMoniker
	}
}

ExitGroup = GenInteraction {
	children = ExitText, ExitTypeList;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 10>
		}
	}
}

ExitText = GenGlyph {
	moniker = "Do you want to:";
}

ExitTypeList = GenItemGroup {
	children = ExitComputer, ExitToDOS, ExitReboot;
	selection = SST_CLEAN;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

ExitComputer = GenItem {
	moniker = 'S', "Shut down the Computer?";
	identifier = SST_POWER_OFF;
}

ExitToDOS = GenItem {
	moniker = 'E', "Exit to DOS or Windows?";
	identifier = SST_CLEAN;
}

ExitReboot = GenItem {
	moniker = 'R', "Reboot the Computer?";
	identifier = SST_CLEAN_REBOOT;
}

ExitOK = GenTrigger {
	moniker = 'O', "OK";
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION, HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND { word IC_OK }
	}
}


end ExitResource;

start AppSCMonikerResource, data;
#include "../CommonUI/CArt/mkrExit.ui"
end AppSCMonikerResource;

#endif	/* end of if _ISUI */
