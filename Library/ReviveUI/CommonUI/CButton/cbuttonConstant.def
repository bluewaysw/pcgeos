COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		CommonUI/COpen (common code for several specific UIs)
FILE:		copenConstant.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Tony	2/89		Initial version

DESCRIPTION:
	This file contains constants for the Open module.

	$Id: cbuttonConstant.def,v 1.41 96/12/27 21:16:27 brianc Exp $

------------------------------------------------------------------------------@

DOUBLE_BORDERED_GADGETS	=	TRUE		;makes button draw double

;------------------------------------------------------------------------------
;			Button Constants
;------------------------------------------------------------------------------




;Misc:

MO_CHECKMARK_WIDTH	= 7		;width of checkmark (in menu items)
MO_CHECKMARK_HEIGHT	= 8		;height of checkmark (in menu items)
MO_MENU_ITEM_DOTS_WIDTH	= 19		;"..." following menu item
					;(depends upon font)

;For normal or default buttons:

if _PM or _ODIE
BUTTON_TOOLBOX_X_INSET		= 3
BUTTON_TOOLBOX_Y_INSET		= 3

BUTTON_BW_TOOLBOX_X_INSET	= 2
BUTTON_BW_TOOLBOX_Y_INSET	= 2

else	; not _PM
BUTTON_TOOLBOX_X_INSET		= 2	;requires 3 if allowing a pixel inset
BUTTON_TOOLBOX_Y_INSET		= 2	;  on the colored icons

BUTTON_BW_TOOLBOX_X_INSET	= 2
BUTTON_BW_TOOLBOX_Y_INSET	= 2
endif


if	_ROUND_NORMAL_BW_BUTTONS
    ST_NORMAL_BUTTON_INSET_Y_CGA	= 3
endif

if	_THICK_DROP_MENU_BW_BUTTONS
    ST_THICK_DROP_MENU_BUTTON_INSET_Y_CGA	= 3
endif

if _ODIE
;
; Makes IC_OK buttons a bit wider.
;
IC_OK_BUTTON_MIN_WIDTH		= 50
endif
	
if	_MOTIF
  if	DOUBLE_BORDERED_GADGETS
    if _JEDIMOTIF
     MO_BUTTON_INSET_Y		= 1	;tighter buttons in JEDI
     MO_BUTTON_INSET_Y_CGA	= 1
    elseif _RUDY
     MO_BUTTON_INSET_Y		= 0	;Rudy values
     MO_BUTTON_INSET_Y_CGA	= 0
    else
     MO_BUTTON_INSET_Y		= 3	;distance from very top or bottom of 
     MO_BUTTON_INSET_Y_CGA	= 2	;y inset for CGA
    endif
     MO_BUTTON_MIN_WIDTH	= 5	;something reasonable		     
     MO_BUTTON_MIN_HEIGHT	= 5	;something reasonable		     
  else
    if _JEDIMOTIF
     MO_BUTTON_INSET_Y		= 1	;tighter buttons in JEDI
     MO_BUTTON_INSET_Y_CGA	= 1
    elseif _RUDY
     MO_BUTTON_INSET_Y		= 0	;Rudy values
     MO_BUTTON_INSET_Y_CGA	= 0
    else
     MO_BUTTON_INSET_Y		= 2	;distance from very top or bottom of 
     MO_BUTTON_INSET_Y_CGA	= 2	;y inset for CGA
    endif
     MO_BUTTON_MIN_WIDTH	= 4	;something reasonable		     
     MO_BUTTON_MIN_HEIGHT	= 5	;something reasonable		     
  endif
  
;  MO_BUTTON_INSET_X		= 6	;distance from left or right edge of 
   					;  (in cConstant.def now)
  MO_REPLY_BUTTON_INSET_X	= MO_BUTTON_INSET_X			     
  MO_REPLY_BUTTON_INSET_Y	= MO_BUTTON_INSET_Y
  MO_REPLY_BUTTON_MIN_HEIGHT	= 10	;keeps regions from blowing up       
  MO_REPLY_BUTTON_MIN_WIDTH	= 10	;keeps regions from blowing up       
  
  MO_CGA_REPLY_BUTTON_INSET_Y	= (MO_BUTTON_INSET_Y/2) + 1
  MO_CGA_REPLY_BUTTON_INSET_X	= (MO_BUTTON_INSET_X/2) + 1

elseif	_PM
  if	DOUBLE_BORDERED_GADGETS
     MO_BUTTON_INSET_Y		= 3	;distance from very top or bottom of 
     MO_BUTTON_INSET_Y_CGA	= 2	;y inset for CGA
     MO_BUTTON_MIN_WIDTH	= 7	;something reasonable		     
     MO_BUTTON_MIN_HEIGHT	= 7	;something reasonable		     
  else
     MO_BUTTON_INSET_Y		= 3	;distance from very top or bottom of 
     MO_BUTTON_INSET_Y_CGA	= 2	;y inset for CGA
     MO_BUTTON_MIN_WIDTH	= 7	;something reasonable		     
     MO_BUTTON_MIN_HEIGHT	= 7	;something reasonable		     
  endif
  
;  MO_BUTTON_INSET_X		= 6	;distance from left or right edge of 
   					;  (in cConstant.def now)
  MO_REPLY_BUTTON_INSET_X	= MO_BUTTON_INSET_X			     
  MO_REPLY_BUTTON_INSET_Y	= MO_BUTTON_INSET_Y
  MO_REPLY_BUTTON_MIN_HEIGHT	= 10	;keeps regions from blowing up       
  MO_REPLY_BUTTON_MIN_WIDTH	= 10	;keeps regions from blowing up       
  
  MO_CGA_REPLY_BUTTON_INSET_Y	= (MO_BUTTON_INSET_Y/2) + 1
  MO_CGA_REPLY_BUTTON_INSET_X	= (MO_BUTTON_INSET_X/2) + 1

else ;Non-motif, non-pm
	
  MO_BUTTON_INSET_X		= 8	;distance from left or right edge of 
  MO_BUTTON_INSET_Y		= 4	;distance from very top or bottom of 
  MO_BUTTON_INSET_Y_CGA		= 3	;y inset for CGA
  CUA_BUTTON_MIN_WIDTH		= 12	;minimum width for region to work    
  CUA_BUTTON_MIN_HEIGHT		= 11	;minimum height for region to work   

  MO_REPLY_BUTTON_INSET_X	= MO_BUTTON_INSET_X			     
  MO_REPLY_BUTTON_INSET_Y	= MO_BUTTON_INSET_Y
  MO_CGA_REPLY_BUTTON_INSET_Y	= (MO_BUTTON_INSET_Y/2) + 1
  MO_CGA_REPLY_BUTTON_INSET_X	= (MO_BUTTON_INSET_X/2) + 1

endif

					; insets to compensate for the larger
					; size of buttons in reply bars

;For menu items (buttons and menu buttons inside a menu)

if _JEDIMOTIF
MO_MENU_ITEM_INSET_X	= 12	; leave big gap for symbol gutter
elif _ODIE
MO_MENU_ITEM_INSET_X	= 2	; leave small gap (should match INSET_Y)
else
MO_MENU_ITEM_INSET_X	= 7	;changed from  5 + MO_CHECKMARK_WIDTH + 4
				;to line up with left edge, rather than item
				;monikers.  6/23/92 cbh
endif

MO_MENU_ITEM_INSET_X_NARROW = 4

					;distance from left edge of
					;menu item region to text
MO_MENU_ITEM_INSET_Y	= 2		;distance from top edge of
					;menu item region to text

if	 _ADDITIONAL_VERTICAL_SPACE_IN_MENUS
MO_MENU_ITEM_INSET_Y_CGA =_HEIGHT_OF_ADDITIONAL_VERTICAL_SPACE_IN_MENUS / 2 + 1
else	;_ADDITIONAL_VERTICAL_SPACE_IN_MENUS is FALSE
MO_MENU_ITEM_INSET_Y_CGA = 1		;inset for CGA (changed to 1 from 0 to
					;  fix a mnemonic drawing problem.
					;  -2/ 7/92 cbh)
endif	;_ADDITIONAL_VERTICAL_SPACE_IN_MENUS

MO_MENU_ITEM_MIN_WIDTH	= 4		;something reasonable
MO_MENU_ITEM_MIN_HEIGHT	= 5		;something reasonable

;For menu buttons (in the menu bar)  (now in cConstant.def)

;MO_MENU_BUTTON_INSET_X	= 7		;distance from left edge of
					;menu button region to text
;MO_MENU_BUTTON_INSET_Y	= 2		;distance from top edge of
					;menu button region to text

if _JEDIMOTIF
MO_MENU_BUTTON_INSET_Y_CGA = 7		;manually center moniker in menu button
else
MO_MENU_BUTTON_INSET_Y_CGA = 0		
endif

MO_MENU_BUTTON_MIN_WIDTH = 5
MO_MENU_BUTTON_MIN_HEIGHT = 5

if _RUDY
;
; Offsets to where to put the boxed right mark, after the moniker.
;
   BUTTON_RIGHT_MARK_Y_OFFSET	equ	6
   BUTTON_RIGHT_MARK_X_OFFSET	equ	1

;
; Try to make a best guess at where to point the arrow point, based on 
; where properties buttons usually are.   We'll say a couple of pixels
; to the left of where the left edge of the right arrow is expected to be.
;
    ; Include the actual bitmap size constants created from the convert
    ; script.
    include Art/mkrSettingsTriggerSize.def	;contains RUDY_SETTINGS_TRIGGER
						;  _WIDTH

   GET_PAST_ARROW_AMOUNT	equ	RUDY_SETTINGS_TRIGGER_WIDTH + \
					MO_CONTROL_MKR_X_SPACING + 2

endif

if	SELECTION_BOX

; Item groups with HINT_MINIMIZE_SIZE are made to be
; selection boxes.  These constants describe the size of the arrows
; drawn at the ends of the selection box.  If it's a horizontal
; selection box, the we need the arrow width, and vice versa for
; a vertical selection box.
;
SELECTION_BOX_ARROW_WIDTH	equ	19
SELECTION_BOX_ARROW_HEIGHT	equ	20

; The border & black wire frame sizes for selection boxes.  If a 
; selection box has a 3-D lowered look it will use the border.
; If not, then the outside of the selection box will only be the
; black outline inset.
;
SELECTION_BOX_BORDER			equ	2
SELECTION_BOX_INSET			equ	1

; Minimum height of the selection box including the text,
; the outside cursor, top/bottom insets, and top/bottom lines.
;
SELECTION_BOX_MIN_HEIGHT		equ	26

; Height of the left/right arrows.  Width of the up/down arrow
; bitmaps.  These are used to figure out how to center these bitmaps.
; These should be changed if the arrow bitmaps are changed.
;
HORIZONTAL_ARROW_BITMAP_HEIGHT		equ	12
VERTICAL_ARROW_BITMAP_WIDTH		equ	16

; Enumerated type passed as a parameter to certain functions to
; tell them we are dealing with either the next arrow box or previous
; arrow box within the selection box.  We also use these enumerations
; to pass info on whether the button is depressed or not.
;
ArrowType	etype	byte

AT_NEXT_ARROW		enum	ArrowType
AT_PREV_ARROW		enum	ArrowType
AT_ARROW_DEPRESSED	enum 	ArrowType
AT_ARROW_NOT_DEPRESSED	enum 	ArrowType

SelectionBoxBackground	etype	byte

SBBG_MONIKER_BACKGROUND	enum	SelectionBoxBackground
SBBG_ARROW_BOX		enum	SelectionBoxBackground
SBBG_ARROW_BOX_SELECTED	enum	SelectionBoxBackground


endif		; if SELECTION_BOX

;------------------------------------------------------------------------------
;			Global symbols
;------------------------------------------------------------------------------

global UpdateButtonState:far

if	SELECTION_BOX
global SelectionBoxGetNextArrowBoundsFar:far
global SelectionBoxGetPrevArrowBoundsFar:far
global RedrawSelectionBoxFar:far
endif


