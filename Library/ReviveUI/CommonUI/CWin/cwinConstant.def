COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1988 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		OpenLook/Win
FILE:		winConstant.def

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Doug	6/89		Initial version

DESCRIPTION:
	This file contains constants for the Win module.

	$Id: cwinConstant.def,v 2.51 96/09/24 20:47:16 brianc Exp $

------------------------------------------------------------------------------@

AppCommon	segment resource
global AppCommonFarRet:far
AppCommon	ends

MDICommon	segment resource
global MDICommonFarRet:far
MDICommon	ends

USE_EVERY_OTHER_SLOT_IF_POSSIBLE	=	TRUE
	;Skips a slot when distributing icons, if available on the row, to
	;help keep application names from overlapping as much as possible.
	
;-----------------------------------------------------------------------------
;		Structures
;-----------------------------------------------------------------------------

;	Structure of data of block on active list

OLActiveEntry	struct
    OLAE_bounds		Rectangle <>
OLActiveEntry	ends

;This structure definition is used in cwinData.asm to hold offsets of
;bitmaps for each color plane.

BitmapPlaneDefs	struct
    BPD_width		word	;width and height for centering
    BPD_height		word
    BPD_light		word	;light bitmap used for color and black&white
    BPD_bwDark		word	;dark bitmap used for black&white
    BPD_colorDark	word	;dark bitmap used for color
    BPD_colorWhite	word	;white bitmap used for color
    BPD_colorBlack	word	;black bitmap used for color
BitmapPlaneDefs	ends

;-----------------------------------------------------------------------------
;		Constants for screen sizes
;-----------------------------------------------------------------------------

					; Minimum # of pixels in UI window
					; that must remain on-screen
MINIMUM_WINDOW_EDGE_ON_SCREEN	=	12

;position of first staggered window

FIRST_BASE_X_POS	=	10
FIRST_BASE_Y_POS	=	8

TINY_FIRST_BASE_X_POS	=	6
TINY_FIRST_BASE_Y_POS	=	4

;absolute minimum size for windows (only currently needed for popup list 
;				    buttons)
ABSOLUTE_WIN_MIN_SIZE	=	7

;-----------------------------------------------------------------------------
;		GCM header font constants 
;-----------------------------------------------------------------------------
if _RUDY
GCM_TITLE_FONT			=	FID_DTC_URW_SANS
GCM_TITLE_FONT_SIZE		=	14
else
GCM_CGA_TITLE_FONT_SIZE		=	12
GCM_TITLE_FONT			=	FID_BERKELEY
GCM_TITLE_FONT_SIZE		=	18
endif

  
;-----------------------------------------------------------------------------
;		OpenLook constants
;-----------------------------------------------------------------------------

if _OL_STYLE	;START of OPEN LOOK specific code -----------------------------

;*** WINDOW GEOMETRY PART I ***
;To determine the bounds of a portion of a window, start by calling
;VisGetSize to find the basic bounds of the window: (0,0) - (cx-1, dx-1).

;1) If the window has a shadow (as pinned menus do), then subtract its width
;from the bottom right corner of the basic bounds, to get the
;"InsideShadowBounds".

OLS_WIN_SHADOW_SIZE	=	6	;shadows are 6 pixels wide and high

;2A) All windows have a thin-line border. Add margins for it. Move inside this
;margin to get the "InsideLineBorderBounds".

OLS_WIN_LINE_BORDER_X_MARGIN =	5	;was 4. Increase so that we don't draw
OLS_WIN_LINE_BORDER_Y_MARGIN =	4	;on the resize marks.

;2.5) If the window has a thick-line border, then there is a margin on all four
;sides of the window, in which this line border is drawn. The line is
;not as wide as the margin. Move inside this margin to get update values for
;"InsideLineBorderBounds".

OLS_WIN_THICK_BORDER_EXTRA_X_MARGIN = 5 - OLS_WIN_LINE_BORDER_X_MARGIN
OLS_WIN_THICK_BORDER_EXTRA_Y_MARGIN = 5 - OLS_WIN_LINE_BORDER_Y_MARGIN

;If the window is resizable, these constants specify the sizing of the
;"L"-shaped resize marks which are drawn on the corners of the window's
;line border.

OLS_WIN_RESIZE_SEGMENT_THICKNESS=3	;thickness of each segment of the "L"

OLS_WIN_RESIZE_SEGMENT_LENGTH = 9	;length of each segment of the "L".

OLS_WIN_RESIZE_BOTTOM_MARGIN =	8	;If a window does not have a footer,
					;need this much room for resize area
					;at the bottom.

;3) If the window has a header, its left, right, and top bounds are
;the same as the InsideLineBorderBounds. Anything drawn inside the header
;is drawn inside a margin specified by these constants: Examples of objects
;drawn inside header: Close mark, Pin, title, Application Menu button.
;Note that the 2-pixel wide white/black line at the bottom of the header is
;considered OUTSIDE the header and title areas.

OLS_WIN_HEADER_Y_SPACING =	5	;total amount of margin above and below
					;title text in header area.
OLS_WIN_HEADER_BOTTOM_LINE_HEIGHT = 2
OLS_WIN_HEADER_BELOW_LINE_MARGIN = 5	;children of the window appear 5 lines
					;below the header line

;These constants specify the spacing between the Close mark and the pin,
;and between the Application and Workspace Menu Buttons.

OLS_WIN_HEADER_MARK_X_POSITION = 8	;location of first mark (Close mark)
OLS_WIN_HEADER_MARK_Y_POSITION = 2

OLS_WIN_HEADER_MARK_SPACING =	8	;spacing between Close mark and Pin

OLS_WIN_HEADER_FIELD_ICON_RIGHT_MARGIN=8 ;margin between rightmost field icon
					 ;and edge of header
OLS_WIN_HEADER_FIELD_ICON_SPACING = 8	;spacing between Field icons

;These constants specify the size of the Close mark
;(Is centered vertically within the header, ignoring the header margins.)

OLS_CLOSE_MARK_WIDTH	=	16	;bitmap is 16 wide also
OLS_CLOSE_MARK_HEIGHT	=	15
OLS_CLOSE_MARK_SPACING	=	9

;These constants specify the size of a pushpin
;(Is centered vertically within the header, ignoring the header margins.)

OLS_PUSHPIN_MAX_WIDTH	= 	26
OLS_PUSHPIN_UNPINNED_WIDTH=	26	;bitmap is actually 32 wide
OLS_PUSHPIN_PINNED_WIDTH =	14	;bitmap is actually 16 wide
OLS_PUSHPIN_HEIGHT	=	14

;4) If the window has a footer, its left, right, and bottom bounds are
;the same as the InsideLineBorderBounds. Anything drawn inside the footer
;is drawn inside a margin specified by these constants.

OLS_WIN_FOOTER_X_MARGIN	=	12
OLS_WIN_FOOTER_Y_MARGIN	=	5

;*** WINDOW GEOMETRY PART II ***
				
;margin at left and right of notices

OLWIN_NOTICE_X_MARGIN	=	16	; Extra margins for notices
OLWIN_NOTICE_Y_MARGIN	=	12	; Extra margins for notices
				
;*** WINDOW GEOMETRY PART III ***

;MOVED TO cConstant.def because is required by copenMenuItemGroup.asm
;;Space between children objects which are in window (below header)
;
;OLS_BASE_WIN_CHILD_SPACING =	3	;for base windows
;OLS_WIN_CHILD_SPACING	=	5	;for non-base windows

;Space between wrapping lines of child objects below header

OLS_WIN_CHILD_WRAP_SPACING =	5

;*** WINDOW GEOMETRY PART IV ***

;this is the distance between staggered windows: just enough ensure that
;the system menu buttons are visible. We don't care that some windows
;don't have a resize border.

STAGGER_X_OFFSET = OLS_WIN_LINE_BORDER_X_MARGIN
STAGGER_Y_OFFSET = OLS_WIN_LINE_BORDER_Y_MARGIN

endif		;END of OPEN LOOK specific code -------------------------------


;-----------------------------------------------------------------------------
;		CUA-Style constants
;-----------------------------------------------------------------------------

if _CUA_STYLE	;--------------------------------------------------------------

;*** WINDOW GEOMETRY PART I ***
;To determine the bounds of a portion of a window, start by calling
;VisGetSize to find the basic bounds of the window: (0,0) - (cx-1, dx-1).

;1) If the window is resizable, then subtract the width of the resize
;border from all four sides, to get the "InsideResizeBorderBounds".

if _PM
CUAS_WIN_RESIZE_BORDER_SIZE		= 4
CUAS_WIN_RESIZE_BORDER_TINY_SIZE	= 3
elseif _RUDY
CUAS_WIN_RESIZE_BORDER_SIZE		= 4	
CUAS_WIN_RESIZE_BORDER_TINY_SIZE	= 3
elseif _ODIE
CUAS_WIN_RESIZE_BORDER_SIZE		= 3
CUAS_WIN_RESIZE_BORDER_TINY_SIZE	= 3
else
CUAS_WIN_RESIZE_BORDER_SIZE		= 5	
CUAS_WIN_RESIZE_BORDER_TINY_SIZE	= 3
endif

;2A) All windows have a thin-line border. Add margins for it. Move inside this
;margin to get the "InsideLineBorderBounds". NOTE: frame to children and
;inter-children spacing is -1, so frame lines overlap.   (Actually, now kids
;are placed far inside the border if KIDS_INSIDE_BORDER is set. -cbh 5/17/91)

if _RUDY
CUAS_WIN_LINE_BORDER_SIZE =	2
else
CUAS_WIN_LINE_BORDER_SIZE =	1
endif
			  
;2AA) Most (non-primary, non-menu) windows want to have some real margins for 
;their children.  This is how they get them.
       
CUAS_REAL_MARGIN_SIZE	  =	3	;normal margins
CUAS_REAL_MARGIN_SIZE_CGA = 	1	;top and bottom margins in CGA

CUAS_REAL_MARGIN_CGA_DIFF = CUAS_REAL_MARGIN_SIZE - CUAS_REAL_MARGIN_SIZE_CGA


;2B) If the window has a thick-line border, then there is a margin on all four
;sides of the window, in which this line border is drawn. The line is
;not as wide as the margin. Move inside this margin to get adjusted values for
;"InsideLineBorderBounds".

					;inset from OLWinClass frame line
MO <CUAS_NOTICE_FRAME_INSET	=	8				    >
PMAN <CUAS_NOTICE_FRAME_INSET	=	3				    >
NOT_MO<CUAS_NOTICE_FRAME_INSET	=	3				    >

MO <CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN = 3 - CUAS_WIN_LINE_BORDER_SIZE    >
MO <CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN = 3 - CUAS_WIN_LINE_BORDER_SIZE    >
PMAN <CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN = 0				    >
PMAN <CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN = 0				    >
NOT_MO<CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN = 4 - CUAS_WIN_LINE_BORDER_SIZE >
NOT_MO<CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN = 4 - CUAS_WIN_LINE_BORDER_SIZE >


NOT_MO<CUAS_NOTICE_FRAME_X_SPACE = CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN+1+\
				    CUAS_NOTICE_FRAME_INSET		>
NOT_MO<CUAS_NOTICE_FRAME_Y_SPACE = CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN+1+\
				    CUAS_NOTICE_FRAME_INSET		>
				    
MO <CUAS_NOTICE_FRAME_X_SPACE	 = (CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN)+\
				    CUAS_NOTICE_FRAME_INSET		>
MO <CUAS_NOTICE_FRAME_Y_SPACE	 = (CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN)+\
				    CUAS_NOTICE_FRAME_INSET		>

PMAN <CUAS_NOTICE_FRAME_X_SPACE	 = (CUAS_WIN_THICK_BORDER_EXTRA_X_MARGIN)+\
				    CUAS_NOTICE_FRAME_INSET		>
PMAN <CUAS_NOTICE_FRAME_Y_SPACE	 = (CUAS_WIN_THICK_BORDER_EXTRA_Y_MARGIN)+\
				    CUAS_NOTICE_FRAME_INSET		>

;
; MOTIF CGA variations on the above constants.
MO <MO_CGA_NOTICE_FRAME_X_INSET	=	6				>
MO <MO_CGA_NOTICE_FRAME_INSET_TOP	=	3			>
MO <MO_CGA_NOTICE_FRAME_INSET_BOTTOM	=	0			>
MO <MO_CGA_NOTICE_FRAME_X_INSET_DIFF = CUAS_NOTICE_FRAME_INSET - \
					MO_CGA_NOTICE_FRAME_X_INSET	>
MO <MO_CGA_NOTICE_FRAME_INSET_TOP_DIFF = CUAS_NOTICE_FRAME_INSET - \
					MO_CGA_NOTICE_FRAME_INSET_TOP	>
MO <MO_CGA_NOTICE_FRAME_INSET_BOTTOM_DIFF = CUAS_NOTICE_FRAME_INSET - \
					MO_CGA_NOTICE_FRAME_INSET_BOTTOM >


;
; PM CGA variations on the above constants.
PMAN <MO_CGA_NOTICE_FRAME_X_INSET	=	6			>
PMAN <MO_CGA_NOTICE_FRAME_INSET_TOP	=	3			>
PMAN <MO_CGA_NOTICE_FRAME_INSET_BOTTOM	=	0			>
PMAN <MO_CGA_NOTICE_FRAME_X_INSET_DIFF	= CUAS_NOTICE_FRAME_INSET - \
					  MO_CGA_NOTICE_FRAME_X_INSET	>
PMAN <MO_CGA_NOTICE_FRAME_INSET_TOP_DIFF = CUAS_NOTICE_FRAME_INSET - \
					   MO_CGA_NOTICE_FRAME_INSET_TOP>
PMAN <MO_CGA_NOTICE_FRAME_INSET_BOTTOM_DIFF = CUAS_NOTICE_FRAME_INSET - \
					MO_CGA_NOTICE_FRAME_INSET_BOTTOM >

;3) If the window has a header, its left, right, and top bounds are
;the same as the InsideLineBorderBounds. Anything drawn inside the header
;is drawn inside a margin specified by these constants: Examples of objects
;drawn inside header: System menu icon, title, Application Menu button.

if _JEDIMOTIF or THREE_DIMENSIONAL_BORDERS
;slighty tighter spacing in JEDI
CUAS_WIN_HEADER_Y_SPACING =	6	;total amount of margin above and below
else
CUAS_WIN_HEADER_Y_SPACING =	8	;total amount of margin above and below
endif

if _PM or _ODIE
CUAS_TITLE_TEXT_MARGIN	=	8	;title text in header area.
else
CUAS_TITLE_TEXT_MARGIN	=	3	;title text in header area.
endif

CUAS_CGA_WIN_HEADER_Y_SPACING =	4	;total amount of margin above and below

if _ODIE
ODIE_PRIMARY_WIN_HEADER_Y_SPACING = 24	;total height of header
endif

;*** WINDOW GEOMETRY PART IV ***

;this is the distance between staggered windows: just enough ensure that
;the system menu buttons are visible. We don't care that some windows
;don't have a resize border.

STAGGER_X_OFFSET = CUAS_WIN_RESIZE_BORDER_SIZE + CUAS_WIN_ICON_WIDTH - 1
STAGGER_Y_OFFSET = CUAS_WIN_RESIZE_BORDER_SIZE + CUAS_WIN_ICON_HEIGHT - 1

CGA_TYPICAL_SYSTEM_FONT_HEIGHT_DIFF = 12 - 9

TINY_STAGGER_X_OFFSET = CUAS_WIN_RESIZE_BORDER_TINY_SIZE+CUAS_WIN_ICON_WIDTH -\
				(1 + 7)

TINY_STAGGER_Y_OFFSET = CUAS_WIN_RESIZE_BORDER_TINY_SIZE+CUAS_WIN_ICON_HEIGHT-\
				(1 + CGA_TYPICAL_SYSTEM_FONT_HEIGHT_DIFF + \
				 CUAS_WIN_HEADER_Y_SPACING - \
				 CUAS_CGA_WIN_HEADER_Y_SPACING)

endif		;--------------------------------------------------------------


;-----------------------------------------------------------------------------
;		These constants will be split to specific UIs eventually
;-----------------------------------------------------------------------------

;Each icon (no matter how small) is allocated an "Icon Plot" - a rectangular
;area of the Field window to sit in. If the icon is smaller than its plot,
;it is positioned in the upper-left corner of the area. For any given Field
;size, there is a grid of Icon Plots which begins in the lower-left corner of
;the Field. The first icons fill up the lowest row, from left to right;
;successive icons fill the upper rows from left to right.

WIN_ICON_PLOT_WIDTH		= 50
CGA_WIN_ICON_PLOT_HEIGHT	= 35
NON_CGA_WIN_ICON_PLOT_HEIGHT	= 50
			
WIN_ICON_PLOT_MARGIN_X		= 10	;distance from left edge to 1st column
CGA_WIN_ICON_PLOT_MARGIN_Y	= -4	;distance from bottom edge to 1st row
NON_CGA_WIN_ICON_PLOT_MARGIN_Y	= 16	;distance from bottom edge to 1st row


;When the specific UI (or application) indicates that a window is to be opened
;such that its bottom-right corner is NEAR the parent windows bottom-right
;corner, we use this constant:

EXTEND_NEAR_PARENT_MARGIN_X	= 0	;changed from 2 (12/12/91 cbh) I can't
					;  figure out the point of a non-zero
					;  value here.
NON_CGA_EXTEND_NEAR_PARENT_MARGIN_Y	= NON_CGA_WIN_ICON_PLOT_MARGIN_Y + \
						NON_CGA_WIN_ICON_PLOT_HEIGHT+4
CGA_EXTEND_NEAR_PARENT_MARGIN_Y	= 6


;-----------------------------------------------------------------------------
;		Motif-only constants
;-----------------------------------------------------------------------------

if _MOTIF	;-------------------------------------------------------------

MO_WIN_HIGHLIGHT_INSET_X	= 1
MO_WIN_HIGHLIGHT_INSET_Y	= 1

endif		;-------------------------------------------------------------

;-----------------------------------------------------------------------------
;		PM-only constants
;-----------------------------------------------------------------------------

if _PM		;-------------------------------------------------------------

MO_WIN_HIGHLIGHT_INSET_X	= 1
MO_WIN_HIGHLIGHT_INSET_Y	= 1

endif		;-------------------------------------------------------------

;-----------------------------------------------------------------------------
;		RUDY-only constants
;-----------------------------------------------------------------------------


if _RUDY

; Margins recommended by parent for windows which are extending to NEAR
; parent size.  These are normally returned from
; MSG_SPEC_VUP_GET_WIN_SIZE_INFO, but that uses some strange convoluted mess
; of constants to return the value.  Since the hack was already in
; UpdateWinSize for RUDY, I thought I'd make it a real constant so I could
; use it elsewhere..  --JimG 7/27/95
;
RUDY_POPUP_TOP_INSET		=	1
RUDY_POPUP_BOTTOM_INSET		=	1
RUDY_POPUP_RIGHT_INSET		=	1

endif

if	 BUBBLE_DIALOGS

OL_BUBBLE_DIALOG_BOUNDS_MISMATCH__INTERNAL_ERROR	enum	FatalErrors
    ; When we have a bubble dialog that is actually drawing its spout, the
    ; left margin of the bubble dialog (VI_bounds.R_left) needs to be equal
    ; to the spout's X origin (spoutOriginX).  If this is not the case,
    ; something is screwy and it is most like an internal error.  Please see
    ; JimG for more info.
    
endif	;BUBBLE_DIALOGS

if DIALOG_SHADOWS
;
; number of points in polygon describing window region for shadowed dialog
;
NUM_DIALOG_SHADOW_REGION_POINTS		=	8

;
; offset of shadow on dialogs
;
DIALOG_SHADOW_OFFSET	equ	2
endif
