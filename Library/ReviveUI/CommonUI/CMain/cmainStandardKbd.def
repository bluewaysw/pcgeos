COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		CMain
FILE:		cmainStandardKbd.def

AUTHOR:		Gene Anderson, Sep 11, 1989

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	eca	9/11/89		Initial revision
	dlitwin	4/12/94		Moved to SPUI from UI
	dlitwin	5/5/94		Renamed from standardKbd.def, broke out
				into separate product keyboard files for
				Standard, Zoomer and Stylus.

DESCRIPTION:
	Contains pictorial definition of a non-extended 56 key keyboard
	for the Standard (bullet) keyboard.
		
	$Id: cmainStandardKbd.def,v 1.1 94/05/26 18:04:41 dlitwin Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Standard Floating Keyboard
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

; Row offsets:
;
STD_KEY_WIDTH		equ	20			;size of keys
STD_KEY_HEIGHT		equ	19			;size of keys

STD_ROW_1_T		equ	5					;numbers
STD_ROW_1_B		equ	STD_ROW_1_T + STD_KEY_HEIGHT

STD_ROW_2_T		equ	STD_ROW_1_T + STD_KEY_HEIGHT		;qwerty
STD_ROW_2_B		equ	STD_ROW_2_T + STD_KEY_HEIGHT

STD_ROW_3_T		equ	STD_ROW_2_T + STD_KEY_HEIGHT		;asdfgh
STD_ROW_3_B		equ	STD_ROW_3_T + STD_KEY_HEIGHT

STD_ROW_4_T		equ	STD_ROW_3_T + STD_KEY_HEIGHT		;zxcvbn
STD_ROW_4_B		equ	STD_ROW_4_T + STD_KEY_HEIGHT

STD_ROW_5_T		equ	STD_ROW_4_T + STD_KEY_HEIGHT		;<space>
STD_ROW_5_B		equ	STD_ROW_5_T + STD_KEY_HEIGHT

; Left and right sides for each row:
;
STD_LEFT_MARGIN		equ	1
STD_ROW_1_L		equ	7 + STD_LEFT_MARGIN
STD_ROW_1_R		equ	STD_ROW_1_L + STD_KEY_WIDTH

STD_ROW_2_L		equ	STD_ROW_1_L + 8
STD_ROW_2_R		equ	STD_ROW_2_L + STD_KEY_WIDTH

STD_ROW_3_L		equ	STD_ROW_2_L + 8
STD_ROW_3_R		equ	STD_ROW_3_L + STD_KEY_WIDTH

STD_ROW_4_L		equ	STD_ROW_3_L + 8
STD_ROW_4_R		equ	STD_ROW_4_L + STD_KEY_WIDTH

STD_ROW_5_L		equ	STD_ROW_4_L + 9
STD_ROW_5_R		equ	STD_ROW_5_L + STD_KEY_WIDTH

STD_MAIN_RIGHT		equ	15 * STD_KEY_WIDTH + STD_ROW_1_L

; These values are used to force the VisContent which contains
; the keyboard and char tables to be big enough for the keyboard,
; if it happens to be bigger than the char tables.
;
KEYBOARD_WIDTH		equ	STD_MAIN_RIGHT + STD_LEFT_MARGIN
KEYBOARD_HEIGHT		equ	STD_ROW_5_B

KEYBOARD_LAYOUT_OFFSET	equ	offset StdKeyboardLayout
KEYBOARD_LAYOUT_LENGTH	equ	length StdKeyboardLayout

if INITFILE_KEYBOARD
KEYBOARD_DRAW_OUTLINES_ROUTINE_OFFSET		\
		equ	offset VisKeyboardCode:KeyboardDrawInitFileKeyOutlines
else
KEYBOARD_DRAW_OUTLINES_ROUTINE_OFFSET		\
		equ	offset VisKeyboardCode:KeyboardDrawStdOrZmrKeyOutlines
endif

STANDARD_GUESSTIMATE_OF_FLOATING_KBD_WIDTH	equ	334


KEYBOARD_KEY_HEIGHT	equ	STD_KEY_HEIGHT
KEYBOARD_ROW_1_T	equ	STD_ROW_1_T
KEYBOARD_ROW_2_T	equ	STD_ROW_2_T
KEYBOARD_ROW_3_T	equ	STD_ROW_3_T
KEYBOARD_ROW_4_T	equ	STD_ROW_4_T
KEYBOARD_ROW_5_T	equ	STD_ROW_5_T
KEYBOARD_ROW_5_B	equ	STD_ROW_5_B
KEYBOARD_LEFT_MARGIN	equ	STD_LEFT_MARGIN
KEYBOARD_MAIN_RIGHT	equ	STD_MAIN_RIGHT
KEYBOARD_GUESSTIMATE_OF_FLOATING_KBD_WIDTH equ \
			STANDARD_GUESSTIMATE_OF_FLOATING_KBD_WIDTH


;
; Definition of the keyboard itself
;
VisKeyboardCode segment resource

StdKeyboardLayout KeyPic <		
	0,0,							;01 (escape)
	0,0,
	FALSE							;no ESC key
	>,<							;02
	STD_ROW_1_T, STD_KEY_WIDTH*1 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*1 + STD_ROW_1_R,
	TRUE
	>,<							;03
	STD_ROW_1_T, STD_KEY_WIDTH*2 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*2 + STD_ROW_1_R,
	TRUE
	>,<							;04
	STD_ROW_1_T, STD_KEY_WIDTH*3 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*3 + STD_ROW_1_R,
	TRUE
	>,<							;05
	STD_ROW_1_T, STD_KEY_WIDTH*4 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*4 + STD_ROW_1_R,
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*5 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*5 + STD_ROW_1_R,		;06,
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*6 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*6 + STD_ROW_1_R,		;07,
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*7 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*7 + STD_ROW_1_R,		;08
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*8 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*8 + STD_ROW_1_R,		;09
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*9 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*9 + STD_ROW_1_R,		;0a
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*10 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*10 + STD_ROW_1_R,	;0b
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*11 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*11 + STD_ROW_1_R,	;0c
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*12 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*12 + STD_ROW_1_R,	;0d
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*14 + STD_ROW_1_L,
	STD_ROW_1_B, STD_MAIN_RIGHT,				;0e (backspace)
	TRUE
	>,<
	STD_ROW_2_T, STD_LEFT_MARGIN,
	STD_ROW_2_B, STD_KEY_WIDTH*1 + STD_ROW_2_L, 
	TRUE							;0f	(TAB)
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*1 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*1 + STD_ROW_2_R,		;10
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*2 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*2 + STD_ROW_2_R,		;11
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*3 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*3 + STD_ROW_2_R,		;12
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*4 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*4 + STD_ROW_2_R,		;13
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*5 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*5 + STD_ROW_2_R,		;14
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*6 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*6 + STD_ROW_2_R,		;15
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*7 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*7 + STD_ROW_2_R,		;16
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*8 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*8 + STD_ROW_2_R,		;17
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*9 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*9 + STD_ROW_2_R,		;18
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*10 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*10 + STD_ROW_2_R,	;19
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*11 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*11 + STD_ROW_2_R,	;1a
	TRUE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*12 + STD_ROW_2_L,
	STD_ROW_2_B, STD_KEY_WIDTH*12 + STD_ROW_2_R,	;1b
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*12 + STD_ROW_3_L,
	STD_ROW_3_B, STD_MAIN_RIGHT,				;1c (ENTER)
	TRUE
	>,<
	STD_ROW_5_T, STD_LEFT_MARGIN,				;
	STD_ROW_5_B, STD_KEY_WIDTH*4 + STD_ROW_1_L,
	TRUE							;1d (CTRL)
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*1 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*1 + STD_ROW_3_R,		;1e
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*2 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*2 + STD_ROW_3_R,		;1f
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*3 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*3 + STD_ROW_3_R,		;20
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*4 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*4 + STD_ROW_3_R,		;21
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*5 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*5 + STD_ROW_3_R,		;22
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*6 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*6 + STD_ROW_3_R,		;23
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*7 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*7 + STD_ROW_3_R,		;24
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*8 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*8 + STD_ROW_3_R,		;25
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*9 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*9 + STD_ROW_3_R,		;26
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*10 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*10 + STD_ROW_3_R,	;27
	TRUE
	>,<
	STD_ROW_3_T, STD_KEY_WIDTH*11 + STD_ROW_3_L,
	STD_ROW_3_B, STD_KEY_WIDTH*11 + STD_ROW_3_R,	;28
	TRUE
	>,<
	STD_ROW_1_T, STD_LEFT_MARGIN,				;29 (`~)
	STD_ROW_1_B, STD_KEY_WIDTH*1 + STD_ROW_1_L,
	TRUE
	>,<
	STD_ROW_4_T, STD_LEFT_MARGIN,
	STD_ROW_4_B, STD_ROW_4_R,				;2a (left shift)
	TRUE
	>,<
	STD_ROW_1_T, STD_KEY_WIDTH*13 + STD_ROW_1_L,
	STD_ROW_1_B, STD_KEY_WIDTH*13 + STD_ROW_1_R,	;2b (\|)
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*1 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*1 + STD_ROW_4_R,		;2c
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*2 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*2 + STD_ROW_4_R,		;2d
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*3 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*3 + STD_ROW_4_R,		;2e
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*4 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*4 + STD_ROW_4_R,		;2f
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*5 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*5 + STD_ROW_4_R,		;30
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*6 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*6 + STD_ROW_4_R,		;31
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*7 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*7 + STD_ROW_4_R,		;32
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*8 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*8 + STD_ROW_4_R,		;33
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*9 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*9 + STD_ROW_4_R,		;34
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*10 + STD_ROW_4_L,
	STD_ROW_4_B, STD_KEY_WIDTH*10 + STD_ROW_4_R,	;35
	TRUE
	>,<
	STD_ROW_4_T, STD_KEY_WIDTH*11 + STD_ROW_4_L,
	STD_ROW_4_B, STD_MAIN_RIGHT	,		;36 (right shift)
	TRUE
	>,<
	0,0,
	0,0,							;37 (print scrn)
	FALSE							;no print scrn
	>,<
	0,0,							;38 (no LALT)
	0,0,
	FALSE
	>,<
	STD_ROW_5_T, STD_KEY_WIDTH*4 + STD_ROW_1_L,		;39 (space)
	STD_ROW_5_B, STD_KEY_WIDTH*9 + STD_ROW_5_R,
	TRUE
	>,<
	STD_ROW_3_T, STD_LEFT_MARGIN,
	STD_ROW_3_B, STD_ROW_3_L + STD_KEY_WIDTH,	
	TRUE							;3a (caps lock)
	>,<
	0, 0,	;3b
	0, 0,
	FALSE
	>,<
	0, 0,	;3c
	0, 0,
	FALSE
	>,<
	0, 0,	;3d
	0, 0,
	FALSE
	>,<
	0, 0,	;3e
	0, 0,
	FALSE
	>,<
	0, 0,	;3f
	0, 0,
	FALSE
	>,<
	0, 0,	;40
	0, 0,
	FALSE
	>,<
	0, 0,	;41
	0, 0,
	FALSE
	>,<
	0, 0,	;42
	0, 0,
	FALSE
	>,<
	0, 0,	;43
	0, 0,
	FALSE
	>,<
	0, 0,	;44
	0, 0,
	FALSE
	>,<
	0, 0,	;45
	0, 0,
	FALSE
	>,<
	0, 0,	;46
	0, 0,
	FALSE
	>,<
	0, 0,	;47
	0, 0,
	FALSE
	>,<
	0, 0,	;48
	0, 0,
	FALSE
	>,<
	0, 0,	;49
	0, 0,
	FALSE
	>,<
	0, 0,	;4a
	0, 0,
	FALSE
	>,<
	0, 0,	;4b
	0, 0,
	FALSE
	>,<
	0, 0,	;4c
	0, 0,
	FALSE
	>,<
	0, 0,	;4d
	0, 0,
	FALSE
	>,<
	0, 0,	;4e
	0, 0,
	FALSE
	>,<
	0, 0,	;4f
	0, 0,
	FALSE
	>,<
	0, 0,	;50
	0, 0,
	FALSE
	>,<
	0, 0,	;51
	0, 0,
	FALSE
	>,<
	0, 0,	;52
	0, 0,
	FALSE
	>,<
	STD_ROW_2_T, STD_KEY_WIDTH*13 + STD_ROW_2_L, ;53	(Delete)
	STD_ROW_2_B, STD_MAIN_RIGHT,
	TRUE
	>,<
	0, 0,	;54
	0, 0,
	FALSE
	>,<
	0, 0,	;55
	0, 0,
	FALSE
	>,<
	0, 0,	;56
	0, 0,
	FALSE
	>,<
	0, 0,	;57
	0, 0,
	FALSE
	>,<
	0, 0,	;58
	0, 0,
	FALSE
	>,<
	0, 0,	;59
	0, 0,
	FALSE
	>,<
	0, 0,	;5A
	0, 0,
	FALSE
	>,<
	0, 0,	;5B
	0, 0,
	FALSE
	>,<
	0, 0,	;5C
	0, 0,
	FALSE
	>,<
	0, 0,	;5D
	0, 0,
	FALSE
	>,<
	0, 0,	;5E
	0, 0,
	FALSE
	>,<
	0, 0,	;5F
	0, 0,
	FALSE
	>,<
	0, 0,	;60
	0, 0,
	FALSE
	>,<
	0, 0,	;61
	0, 0,
	FALSE
	>,<
	0, 0,	;62
	0, 0,
	FALSE
	>,<
	0, 0,	;63
	0, 0,
	FALSE
	>,<
	0, 0,	;64
	0, 0,
	FALSE
	>,<
	0, 0,	;65
	0, 0,
	FALSE
	>,<
	0, 0,	;66
	0, 0,
	FALSE
	>,<
	0, 0,	;67
	0, 0,
	FALSE
	>,<
	0, 0,	;68
	0, 0,
	FALSE
	>,<
	0, 0,	;69
	0, 0,
	FALSE
	>,<
	0, 0,	;6A
	0, 0,
	FALSE
	>,<
	0, 0,	;6B
	0, 0,
	FALSE
	>,<
	0, 0,	;6C
	0, 0,
	FALSE
	>,<
	0, 0,	;6D
	0, 0,
	FALSE
	>,<
	0, 0,	;6E
	0, 0,
	FALSE
	>,<
	0, 0,	;6F
	0, 0,
	FALSE
	>,<
	0, 0,	;70
	0, 0,
	FALSE
	>,<
	0, 0,	;71
	0, 0,
	FALSE
	>,<
	0, 0,	;72
	0, 0,
	FALSE
	>,<
	0, 0,	;73
	0, 0,
	FALSE
	>,<
	0, 0,	;74
	0, 0,
	FALSE
	>,<
	0, 0,	;75
	0, 0,
	FALSE
	>,<
	STD_ROW_5_T, STD_KEY_WIDTH*9 + STD_ROW_5_R,
	STD_ROW_5_B, STD_MAIN_RIGHT,
	TRUE							;76 (RALT)
	>

;
;	Other potentially interesting scancodes:
;	0x77 : Right control
;
VisKeyboardCode	ends
