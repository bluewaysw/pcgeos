/*
 *
 * Project:	PC GEOS
 * Module:	OpenLook
 * File:	cspecFile.ui
 *
 * Author:	Tony
 *
 *	This file contains the user Interface description for file
 *	dialog box stuff
 *
 *	$Id: cspecFile.ui,v 1.159 97/03/04 21:39:16 cassie Exp $
 *
 */

#if _RUDY
#include "foam.uih"
#endif

#if _JEDIMOTIF
#include "Objects/table.uih"
#include "Internal/Jedi/jtable.uih"
#endif

/* -------------------------------------------------------------------------
 *		Local compile-time variables
 *
 * _MINIMAL_STANDARD_DIALOGS makes the standard dialogs have no title bar
 *   and no "Cute Glyphs".  This variable has an analog for asm in
 *   cConstant.def.
 * -------------------------------------------------------------------------
 */
#if      _STYLUS
#  define _MINIMAL_STANDARD_DIALOGS -1
#else
#  define _MINIMAL_STANDARD_DIALOGS  0
#endif /* _STYLUS */

/* -------------------------------------------------------------------------
 *		Standard dialog box stuff
 * -------------------------------------------------------------------------
 */
 
/*
 * Leave this block with only StandardDialog stuff as it is duplicated for
 * each standard dialog put up
 */

start StandardDialogUI, notDetachable;

StandardDialogSummons = GenInteraction {
	genStates = default -usable;
#if 	_RUDY
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog,
			+sysModal;
	children = StdDialogCuteGlyph;
#else
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog,
			+modal;
	children = StdDialogTopGroup;
#endif
	/* type is set dynamically */
#if	_RUDY
	visibility = popup;
#else
	visibility = dialog;
#endif
	hints = {
#if       _MINIMAL_STANDARD_DIALOGS || _JEDIMOTIF
		    HINT_WINDOW_NO_TITLE_BAR,
#endif /* _MINIMAL_STANDARD_DIALOGS || _JEDIMOTIF */
#if	_RUDY
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			LayerPriority	LAYER_PRIO_MODAL-1
		},
#endif
        }
}

#if !_RUDY	/* not needed at all */
StdDialogTopGroup = GenInteraction {
	children = 
#if       ! _MINIMAL_STANDARD_DIALOGS
		   StdDialogCuteGlyph,
#endif /* ! _MINIMAL_STANDARD_DIALOGS */
		   StdDialogTextDisplay;
	hints = {
#if _ODIE
		HINT_CENTER_CHILDREN_VERTICALLY,
#endif
#if       _MINIMAL_STANDARD_DIALOGS
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_AVG_CHAR_WIDTHS, 2>
		},
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING,
#endif /* _MINIMAL_STANDARD_DIALOGS */

		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#if !_RUDY
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#else
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}
#endif /* !_RUDY */

/*
 * Don't need glyph or visMonikers if _MINIMAL_STANDARD_DIALOGS is true.
 */
#if       ! _MINIMAL_STANDARD_DIALOGS

#if _RUDY
/* yes, this isn't really a glyph in _RUDY */
StdDialogCuteGlyph = ComplexMoniker {
	ComplexMoniker = GenInteraction;
	textStyle = default +italic;
	fontSize = FOAM_NORMAL_FONT_SIZE;
	children = StdDialogTextInteraction;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_PLACE_MONIKER_ABOVE,
		ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_COMPLEX_MONIKER_DONT_DRAW_SEPARATOR
	}
}

#else
StdDialogCuteGlyph = GenGlyph {
}
#endif

/*
 *	WARNING! LEAVE THESE MONIKERS IN THIS ORDER (SC,SM,SCGA) BECAUSE
 *	WE HAVE TO UNRELOCATE THEM BY HAND
 *		(SEE OLApplicationBuildStandardDialog)
 */

#if _RUDY

#include "Art/mkrStandardDialog.ui"

chunk StdDialogQuestionMoniker = "Confirm:";
chunk StdDialogWarningMoniker = "Note:";
/* Error and Notification dialog types have the same moniker as Warning */

#elif _ODIE

/* no moniker for standard dialog question  */
visMoniker StdDialogQuestionMoniker = "";

visMoniker StdDialogNotificationMoniker = {
	size = standard;
	style = icon;
	aspectRatio = normal;
	color = color4;
	cachedSize = 21, 26;
	gstring {
		GSBeginString
		GSRelMoveTo 5, 0
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP 58
		Bitmap <11, 26, 0, BMF_MONO>
		db	00000001b, 11000000b
		db	00000011b, 11100000b
		db	00000111b, 11100000b
		db	00000111b, 11000000b
		db	00000011b, 10000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000111b, 00000000b
		db	00011111b, 10000000b
		db	00111111b, 10000000b
		db	01111111b, 00000000b
		db	11101111b, 00000000b
		db	00001111b, 00000000b
		db	00011110b, 00000000b
		db	00011110b, 00000000b
		db	00011110b, 00000000b
		db	00111100b, 00000000b
		db	00111100b, 00000000b
		db	00111100b, 00000000b
		db	01111100b, 00000000b
		db	01111110b, 11100000b
		db	11111111b, 11000000b
		db	11111111b, 00000000b
		db	11111110b, 00000000b
		db	01111000b, 00000000b
		GSSetAreaColorIndex	C_DARK_GREY
		GSFillBitmapAtCP 58
		Bitmap <11, 26, 0, BMF_MONO>
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00001000b, 10000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 10000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000001b, 00000000b
		db	00000000b, 00000000b
		db	00100000b, 00000000b
		db	00000010b, 00000000b
		db	00000000b, 00000000b
		db	01000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 00000000b
		db	00000000b, 10000000b
		db	00000000b, 00000000b
		db	00000100b, 00000000b
		GSEndString
	}
}

/* no moniker for standard dialog question  */
visMoniker StdDialogWarningMoniker = "";

visMoniker StdDialogErrorMoniker = {
	size = standard;
	style = icon;
	aspectRatio = normal;
	color = color4;
	cachedSize = 16, 32;
	gstring {
		GSBeginString
		GSRelMoveTo 5, 0
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP 38
		Bitmap <6, 32, 0, BMF_MONO>
		db	00110000b
		db	01111000b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	01111000b
		db	01111000b
		db	01111000b
		db	01111000b
		db	01111000b
		db	01111000b
		db	01111000b
		db	00110000b
		db	00110000b
		db	00110000b
		db	00110000b
		db	00110000b
		db	00000000b
		db	00000000b
		db	01111000b
		db	11111100b
		db	11111100b
		db	11111100b
		db	11111100b
		db	01111000b
		GSSetAreaColorIndex	C_DARK_GREY
		GSFillBitmapAtCP 38
		Bitmap <6, 32, 0, BMF_MONO>
		db	01001000b
		db	10000100b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	10000100b
		db	10000100b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	01001000b
		db	01001000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		db	00000000b
		GSEndString
	}
}

#else  /* !_RUDY */

visMoniker StdDialogQuestionMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogQuestionSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogQuestionSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogQuestionSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogQuestionYMMoniker
#endif
}

visMoniker StdDialogWarningMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogWarningSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogWarningSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogWarningSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogWarningYMMoniker
#endif
}

visMoniker StdDialogNotificationMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogNotificationSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogNotificationSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogNotificationSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogNotificationYMMoniker
#endif
}

visMoniker StdDialogErrorMoniker = list {
#if INCLUDE_SC_MONIKERS
	StdDialogErrorSCMoniker,
#endif
#if INCLUDE_SM_MONIKERS
	StdDialogErrorSMMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
	StdDialogErrorSCGAMoniker,
#endif
#if INCLUDE_YM_MONIKERS
	StdDialogErrorYMMoniker
#endif
}

#endif  /* _RUDY */

#endif /* ! _MINIMAL_STANDARD_DIALOGS */


chunk StdDialogText = "";

#if _RUDY
StdDialogTextInteraction = GenInteraction {
	children = StdDialogTextDisplay;
	hints = {
		HINT_INDENT_CHILDREN {
		    SpecWidth <SST_PIXELS, 30>
		}
	}
}
#endif

StdDialogTextDisplay = GenText {
	genAttributes = readOnly;
	text = StdDialogText;
	textDisplayAttributes =
		useTabForNavigation;
	hints = {
#if _ODIE
		HINT_DRAW_STYLE_3D_LOWERED,
		ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {
			word DEF_PARA_ATTR_CENTER
		},
#endif
#if _RUDY
		HINT_FIXED_SIZE {
			SpecWidth<SST_PIXELS, 245>
/*			SpecHeight<SST_LINES_OF_TEXT, 5>*/
			SpecHeight<>
		},
		ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
			VisTextDefaultCharAttr <
				0, 0, 1,
				C_BLACK,
				VTDS_FOAM_NORMAL,
				VTDF_RESPONDER
			>
		},
#endif
#if !_ODIE
		  HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#endif
#if !_RUDY
		  HINT_MAXIMUM_SIZE {
#if _JEDIMOTIF
			SpecWidth <SST_AVG_CHAR_WIDTHS, 35>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, 50>
#endif
			SpecHeight <>
		  }
#endif /* !_RUDY */
	}

}

end StandardDialogUI;

/***/

start StringsUI, data;

chunk RangeUnitStrings =
	"pt"	/* points */
	"in"	/* inches */
	"cm"	/* centimeters */
	"mm"	/* millimeters */
	"pi"	/* picas */
	"ep"	/* european points */
	"ci";	/* ciceros */

/*
chunk DiskNotFoundString =
	"The disk \\\"\\1\\\" could not be found.  Please insert it in"
	" drive \\\"\\2\\\" and click OK to continue, or click Cancel"
	" to exit.";
*/
/* NO PARAMS YET */

#if !SINGLE_DRIVE_DOCUMENT_DIR
#if _RUDY
chunk DiskNotFoundString =
	"Disk not found.  Please insert a disk and try again";
#else
chunk DiskNotFoundString =
	"The disk could not be found.  Please insert it in the"
	" drive and try again.";
#endif /* _RUDY */
#else
chunk DiskNotFoundString =
	"A disk could not be found.  Please insert one in the"
	" drive and try again.";

visMoniker DiskNotFound_OK = "OK";

#if _NIKE
  visMoniker DiskNotFound_Cancel = "VMO_CANCEL", "Cancel";
#else
  visMoniker DiskNotFound_Cancel = "VMO_CANCEL", "Esc - Cancel";
#endif

#endif



/* moniker for Change Drive button in File Selectors */

#if FSEL_HAS_CHANGE_DRIVE_POPUP
visMoniker ChangeDriveMoniker = 'v', "Drives";
#endif


#if _NIKE
chunk OneDeskAccessoryString =
	"Only one Desk Accessory may be used at a time.";
#endif

#if _RUDY
chunk NoFilesMoniker		= "No documents";
#endif

end StringsUI;


/*
 *	Art for the glyph in the standard DB
 */

/*
 * Don't need most artwork if _MINIMAL_STANDARD_DIALOGS is true.
 * CMain/cmainLowDisk.ui uses StdDialogErrorSCMoniker, so leave it included.
 */

#if _PM

#if       ! _MINIMAL_STANDARD_DIALOGS

#include "./../PM/Art/mkrStdDialogQuestion.ui"
#include "./../PM/Art/mkrStdDialogWarning.ui"
#include "./../PM/Art/mkrStdDialogNotification.ui"

#endif /* ! _MINIMAL_STANDARD_DIALOGS */

#include "./../PM/Art/mkrStdDialogError.ui"

#elif _RUDY					/* elif of if _PM */

#include "../CommonUI/CArt/mkrStdDialogError.ui"

#elif _ODIE

/* nothing needed */

#else						/* else of if _PM */

#if       ! _MINIMAL_STANDARD_DIALOGS

#include "./../CommonUI/CArt/mkrStdDialogQuestion.ui"
#include "./../CommonUI/CArt/mkrStdDialogWarning.ui"
#include "./../CommonUI/CArt/mkrStdDialogNotification.ui"

#endif /* ! _MINIMAL_STANDARD_DIALOGS */

#include "./../CommonUI/CArt/mkrStdDialogError.ui"

#endif						/* end of else of if _PM */


/*-----------------------------------------------------------------------------
	File Selector objects
-----------------------------------------------------------------------------*/

	/*
	 * This object block is duplicated when an OLFileSelector is vis built.
	 * It must be notDetachable so the thing doesn't get saved to the
	 * application's state file, but gets nuked when the app goes away.
	 */

start FileSelectorUI, notDetachable;

#if _RUDY
class OLFSDynamicList = FilterList {
#else
class OLFSDynamicList = GenDynamicList {
#endif
}

#if _JEDIMOTIF

class OLFSTable = JTable {
	queryMsg = wordComp : 0;
	redrawCount = byteComp : 0;
}

class OLFSTableHeading = Table {
	headingBHandle = hptrComp : null;
	headingCHandle = nptrComp : null;
}

class OLFSFileContent = TableContent {
}

class OLFSFileLocator = Locator {
}

class OLFSTableView = GenView {
}

#endif							/* if _JEDIMOTIF */

OLFileSelectorGroup = GenInteraction ignoreDirty {
#if _JEDIMOTIF
	children = OLFileSelectorControlGroup,
			OLFileSelectorFileView;
#else /* not _JEDIMOTIF */
#if _RUDY
	children = OLFileSelectorControlGroup,
			OLFileSelectorFileList,
			OLFileSelectorSearchTextGroup;
#else /* not _RUDY */
	children = OLFileSelectorControlGroup,
#if _DUI
			OLFileSelectorFileCount,
#endif
			OLFileSelectorFileList;
#endif /* not _RUDY */
#endif /* not _JEDIMOTIF */
	hints = {
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
#if _DUI
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#endif
		HINT_ORIENT_CHILDREN_VERTICALLY,
#if _RUDY
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING,
#endif
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		}
	}
}

OLFileSelectorControlGroup = GenInteraction ignoreDirty {
#if SINGLE_DRIVE_DOCUMENT_DIR
	children =
		OLFileSelectorDocumentButton;
#else
 #if FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_CHANGE_DIRECTORY_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorChangeDirectoryPopup,
		OLFileSelectorDocumentButton,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_CHANGE_DIRECTORY_POPUP
	children =
		OLFileSelectorChangeDirectoryPopup,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorDocumentButton,
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DIRECTORY_POPUP && FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorChangeDirectoryPopup,
		OLFileSelectorDocumentButton;
 #elif FSEL_HAS_CHANGE_DRIVE_POPUP
	children =
 		OLFileSelectorChangeDrivePopup;
 #elif FSEL_HAS_CHANGE_DIRECTORY_POPUP
	children =
		OLFileSelectorChangeDirectoryPopup;
 #elif FSEL_HAS_DOCUMENT_BUTTON
	children =
		OLFileSelectorDocumentButton;
 #endif
#endif
#if _JEDIMOTIF
	genStates = default -usable;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

#if FSEL_HAS_DOCUMENT_BUTTON

OLFileSelectorDocumentButton = GenTrigger ignoreDirty {
#if _RUDY
	genStates = default -usable;
#endif
#if _WIZARDBA
	moniker = 'e', "Home";
#else						/* else of if _WIZARDBA */
 #if SINGLE_DRIVE_DOCUMENT_DIR
  #if _NIKE
	moniker = 'w', "New Disk";
  #else
	moniker = 'N', "New Disk";
  #endif
 #else
 	moniker = 'u', "Go to Document";
 #endif
#endif					/* end of else of if _WIZARDBA */

	action = MSG_OL_FILE_SELECTOR_DOCUMENT_BUTTON, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_DONT_SHOW_SHORTCUT
	}
}
#endif


#if !SINGLE_DRIVE_DOCUMENT_DIR && FSEL_HAS_CHANGE_DIRECTORY_POPUP

OLFileSelectorChangeDirectoryPopup = GenItemGroup {
#if _RUDY
	genStates = default -usable;
#endif
	moniker = 'P', "Path";
	destination = "TO_OBJ_BLOCK_OUTPUT";
	applyMsg = MSG_OL_FILE_SELECTOR_CHANGE_DIRECTORY_POPUP;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION,
		HINT_DONT_SHOW_SHORTCUT
	}
}

#endif


#if FSEL_HAS_CHANGE_DRIVE_POPUP

OLFileSelectorChangeDrivePopup = GenItemGroup {
#if _WIZARDBA
	genStates = default -usable;
#endif
	moniker = 'v', "Drives";
	destination = "TO_OBJ_BLOCK_OUTPUT";
	applyMsg = MSG_OL_FILE_SELECTOR_CHANGE_DRIVE_POPUP;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION,
		HINT_DONT_SHOW_SHORTCUT
	}
}

#endif




#if _FILE_TABLE

OLFileSelectorFileView = OLFSTableView {
	output = OLFileSelectorFileContent;
	viewAttributes = default +noWinFrame, +sendAllKbdChars;
	horizAttributes = noSmallerThanContent, noLargerThanContent;
	vertAttributes  = scrollable, noSmallerThanContent, noLargerThanContent;
}

OLFileSelectorFileContent = OLFSFileContent {
	children =	OLFileSelectorFileLocator,
			OLFileSelectorFileHeading,
			OLFileSelectorFileList;
	visCompGeoAttrs = orientChildrenVertically;
}

OLFileSelectorFileLocator = OLFSFileLocator {
}

OLFileSelectorFileList = OLFSTable {
	rows = 0;
	columns = "FILE_TABLE_NAME_COL + 1";	/* changed for show filesize */
	visibleRows = 10;
	tableFlags = enableAutoScrolling, selectionAlwaysVisible, \
		    exitDragDropUponCompletion, notifySelectionChanged, mainTable;
	columnDefinitions = FileTableDefs;	/* changed for show filesize */
	rowHeight = 16;
	queryMsg = MSG_OL_FILE_SELECTOR_ITEM_QUERY;
	tableRangeInversion = TRIT_ROW;
	selectionDrawStyle = TSDST_FILLED_RECT;
	redrawCount = 0;
}

OLFileSelectorFileHeading = OLFSTableHeading {
	rows = 1;
	columns = "FILE_TABLE_NAME_COL + 1";	/* changed for show filesize */
	visibleRows = 1;
	rowHeight = 16;
 	rowFlags = drawRowSeparator;
	columnDefinitions = TableHeadingDefs;	/* changed for show filesize */
	tableBorderFlags = boxBorders;
	headingCHandle = FileTitleHeading;
}

chunk	FileDateHeading = " Date";
chunk	FileTitleHeading = "     Document";



chunk	FileTableDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,61>,
		< mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,180>
}

localize not;

chunk	TableHeadingDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR, 60>,
		< 0, 179>
}

localize not;

chunk	FileSizeHeading	= " Size";

chunk	FileSizeTableDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,56>,
		< mask TCF_DRAW_RIGHT_SEPARATOR or \
		  mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or		\
		  TRIT_ROW,147>,
		< mask TCF_START_SELECT or         \
		  mask TCF_DRAG_SELECT or	\
		  mask TCF_END_SELECT or         \
		  mask TCF_DOUBLE_SELECT or	   \
		  mask TCF_RESELECT or 		\
		  TRIT_ROW,38>
}

localize not;

chunk	FileSizeTableHeaderDefs = data {
	TableColumnDefinition \
		< mask TCF_DRAW_RIGHT_SEPARATOR, 55>,
		< mask TCF_DRAW_RIGHT_SEPARATOR, 147>,
		< 0, 37>
}

localize not;

#else /* not _JEDIMOTIF */

#if _DUI
OLFileSelectorFileCount = GenText {
	genStates = default -usable;	/* turn on/off dynamically */
	genAttributes = readOnly;
	text = "";
	textDisplayAttributes = default +singleLineText;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

OLFileSelectorFileList = OLFSDynamicList {
#if KEYBOARD_ONLY_UI
	moniker = 'D', "Disk Contents";
#endif
#if _RUDY
	applyMsg = MSG_OL_FILE_SELECTOR_REAL_LIST_MESSAGE;
#else
	applyMsg = MSG_OL_FILE_SELECTOR_LIST_MESSAGE;
#endif
	queryMsg = MSG_OL_FILE_SELECTOR_ITEM_QUERY;
	destination = "TO_OBJ_BLOCK_OUTPUT";
#if _RUDY
	noMatchMoniker = "        No matching documents";
localize "Put 8 spaces at the start of this string to indent it";
#endif
	hints = {
#if KEYBOARD_ONLY_UI
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
#endif
#if _RUDY
		HINT_ITEM_GROUP_SHOW_SELECTION_EVEN_WHEN_NOT_FOCUS,
		ATTR_FILTER_LIST_CUSTOM_IDENTIFIERS {
		    FilterListCustomIdentifiers <GIGS_NONE,
						 OLFS_NO_MATCH_ENTRY_NUM>
		},
#endif
		HINT_ITEM_GROUP_SCROLLABLE,
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word	MSG_OL_FILE_SELECTOR_DOUBLE_PRESS	
		},
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION,
		HINT_DEFAULT_FOCUS,
	}
}

#if _RUDY

/* Search text input box for Responder, if enabled by foam's
** ExtendedFileSelectorClass
*/
chunk OLFSNullSearchText = "";
localize not;

OLFileSelectorSearchTextGroup = ComplexMoniker {
	ComplexMoniker = GreyFrame;
	genStates = default -usable;
	iconBitmap = CMB_SEARCH;
	topText = CMT_SEARCH;
	textStyle = default -bold;
	fontSize = "FOAM_NORMAL_FONT_SIZE";
	children = OLFileSelectorSearchText;
	hints = {
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_CENTER_MONIKER,
		ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT,
		HINT_PLACE_MONIKER_TO_RIGHT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	}
}

OLFileSelectorSearchText = FilterText {
	maxLength = FILE_LONGNAME_LENGTH;
	destination = "TO_OBJ_BLOCK_OUTPUT";
	filterMsg = MSG_OL_FILE_SELECTOR_SEARCH;
	listObj = OLFileSelectorFileList;
	hints = {
		HINT_DEFAULT_FOCUS,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	}
}

#endif /* _RUDY */

#endif		/* if _JEDIMOTIF */




end FileSelectorUI;


#if _DUI
start StringsUI;
chunk FSFileCountDefaultName = "Items";
end StringsUI;
#endif

/*-----------------------------------------------------------------------------
	Keyboard moniker text expansions
-----------------------------------------------------------------------------*/
start MonikerExpandUI, data;

#if _NIKE
  #if _NIKE_EUROPE
    chunk ctrlString = "\\1";
    chunk altString = "\\2";
    chunk shiftString = "\\3";
    chunk spaceString = "Space";
    chunk tabString = "\\4";
    chunk ctrlHString = "\\5";
    chunk backspaceString = "\\5";
    chunk enterString = "\\6";
    chunk ActivateMenuKey = "\\2";
    #if _NIKE_UK
      chunk escString = "ESC";
      chunk delString = "DELETE";
      chunk insString = "INSERT";
      chunk pageUpString = "PAGE UP";
      chunk pageDownString = "PAGE DOWN";
      chunk homeString = "HOME";
      chunk endString = "END";
      chunk helpString = "HELP";		/* F1  --> HELP		*/
    #else
      chunk escString = "\\7";
      chunk delString = "\\10";
      chunk insString = "\\11";
      chunk pageUpString = "\\12";
      chunk pageDownString = "\\13";
      chunk homeString = "\\14";
      chunk endString = "\\15";
      chunk helpString = "\\16";		/* F1  --> HELP		*/
    #endif
    chunk SaveAccStr = "SAVE";			/* F2  --> SAVE		*/
    chunk ExitAccStr = "EXIT";			/* F3  --> EXIT		*/
    chunk PrintAccStr = "PRINT";		/* F4  --> PRINT	*/
    chunk SpellCheckAccStr = "SPELL CHECK";	/* F5  --> SPELL CHECK	*/
    chunk CutAccStr = "CUT";			/* F6  --> CUT		*/
    chunk CopyAccStr = "COPY";			/* F7  --> COPY		*/
    chunk PasteAccStr = "PASTE";		/* F8  --> PASTE	*/
    chunk inkChangeString = "\\17";		/* F11 --> INK CHANGE	*/
    chunk paperInsertString = "\\20";		/* F12 --> PAPER INSERT */
  #else
    chunk ctrlString = "CODE ";
    chunk altString = "Menu ";
    chunk shiftString = "Shift ";
    chunk escString = "Esc";
    chunk spaceString = "Space";
    chunk ctrlHString = "Ctrl H";
    chunk backspaceString = "Backspace";
    chunk delString = "DELETE";
    chunk insString = "Ins";
    chunk enterString = "Enter";
    chunk pageUpString = "Page Up";
    chunk pageDownString = "Page Down";
    chunk ActivateMenuKey = "Alt";
    chunk SaveAccStr = "SAVE";			/* F2 --> SAVE		*/
    chunk ExitAccStr = "EXIT";			/* F3 --> EXIT		*/
    chunk PrintAccStr = "PRINT";		/* F4 --> PRINT		*/
    chunk SpellCheckAccStr = "SPELL CHECK";	/* F5 --> SPELL CHECK	*/
    chunk CutAccStr = "CUT";			/* F6 --> CUT		*/
    chunk CopyAccStr = "COPY";			/* F7 --> COPY		*/
    chunk PasteAccStr = "PASTE";		/* F8 --> PASTE		*/
  #endif
#else					/* else of if _NIKE */
  #if _REDMOTIF
    chunk ctrlString = "Ctrl+";
    chunk altString = "Alt+";
    chunk shiftString = "Shift+";
    chunk escString = "Esc";
    chunk spaceString = "Space";
    chunk ctrlHString = "Ctrl+H";
    chunk backspaceString = "Backspace";
    chunk delString = "Del";
    chunk insString = "Ins";
    chunk enterString = "Enter";
    chunk pageUpString = "Page Up";
    chunk pageDownString = "Page Down";
    chunk ActivateMenuKey = "Alt";
  #else					/* else of if _REDMOTIF */
    #if _RUDY
    chunk ctrlString = "Ctrl-";
    #else
    chunk ctrlString = "Ctrl ";
    #endif				/* end of _RUDY */
    chunk altString = "Alt ";
    chunk shiftString = "Shift ";
    chunk escString = "Esc";
    chunk spaceString = "Space";
    chunk ctrlHString = "Ctrl H";
    chunk backspaceString = "Backspace";
    chunk delString = "Del";
    chunk insString = "Ins";
    chunk enterString = "Enter";
    chunk pageUpString = "Page Up";
    chunk pageDownString = "Page Down";
    chunk ActivateMenuKey = "Alt";
  #endif				/* end of else of if _REDMOTIF */
#endif					/* end of else of if _NIKE */

end MonikerExpandUI;

/*-----------------------------------------------------------------------------
	GIV_POPOUT GenInteraction stuff
-----------------------------------------------------------------------------*/
start PopoutUI, notDetachable;

PopoutDialogTemplate = GenInteraction ignoreDirty {
	children = PopoutDialogGroup, PopoutPopInTrigger;
	visibility = dialog;
	attributes = default +notUserInitiatable;
	genStates = default -usable;		/* set USABLE dynamically */
	hints = {
		HINT_INTERACTION_NO_DISTURB,
		HINT_INTERACTION_MAKE_RESIZABLE,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

PopoutDialogGroup = GenInteraction ignoreDirty {
	/* Expand hints nuked to allow windows to only be as large as the
	   children need. -cbh 3/12/93.   Added back in, removing the no-larger
	   hints in PopoutDialogTemplate.  This did nice things for menu bars,
	   not so nice for the icon editor's popout view. -cbh 4/27/93 */
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT
	}
	/* size hints added dynamically */
}

PopoutPopInTrigger = GenTrigger ignoreDirty {
	moniker = list {
		PopoutColorMoniker,
		PopoutBWMoniker,
		PopoutCGAMoniker
	}
	action = MSG_GEN_INTERACTION_POP_IN, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SEEK_TITLE_BAR_RIGHT
	}
}

visMoniker PopoutColorMoniker = {
	size = standard;
	color = color4;
	aspectRatio = normal;
	cachedSize = 21, 11;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_WHITE
		GSFillBitmapAtCP <(EndPopoutLCM-StartPopoutLCM)>
		StartPopoutLCM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000000b, 10100000b
			db	00000001b, 00010000b
			db	00000010b, 00001000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
		EndPopoutLCM	label	byte
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutDCM-StartPopoutDCM)>
		StartPopoutDCM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00000001b, 11110000b
			db	00000000b, 00000000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
		EndPopoutDCM	label	byte
		GSEndString
	}
}

visMoniker PopoutBWMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 21, 11;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutBWM-StartPopoutBWM)>
		StartPopoutBWM	label	byte
			Bitmap < 16, 11, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000000b, 11100000b
			db	00000001b, 11110000b
			db	00000011b, 11111000b
			db	00000011b, 11111000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
			db	00011111b, 11111111b
		EndPopoutBWM	label	byte
		GSEndString
	}
}

visMoniker PopoutCGAMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = verySquished;
	cachedSize = 21, 7;
	style = tool;
	gstring {
		GSBeginString
		GSSetAreaColorIndex	C_BLACK
		GSFillBitmapAtCP <(EndPopoutCGAM-StartPopoutCGAM)>
		StartPopoutCGAM	label	byte
			Bitmap < 16, 7, 0, <BMF_MONO> >
			db	00011111b, 11111111b
			db	00000000b, 00000000b
			db	00000000b, 01000000b
			db	00000001b, 11110000b
			db	00000011b, 11111000b
			db	00000000b, 00000000b
			db	00011111b, 11111111b
		EndPopoutCGAM	label	byte
		GSEndString
	}
}

end PopoutUI;
