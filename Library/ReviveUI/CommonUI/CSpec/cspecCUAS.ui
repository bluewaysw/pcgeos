/*
 *
 * Project:	PC GEOS
 * Module:	CommonUI/CSpec (common code for all specific UIs)
 * File:	cspecCUAS.ui
 *
 * Author:	Doug Fults 
 *
 *	This file contains User Interface descriptions for standard
 *	components in CUA-style user interfaces.
 *
 *	$Id: cspecCUAS.ui,v 2.205 97/03/28 02:11:09 joon Exp $
 *
 */

specificUI;		/* allows us to use F-keys, misc */
#include "generic.uih"

#include "Objects/eMenuC.uih"	/* for Express Menu */


#include "../CommonUI/cGeode.uih"	/* defines compiler constants */

#include "../CommonUI/CSpec/cspecFile.ui"
#include "../CommonUI/CSpec/mkrExit.ui"

			/* MOTIF only uses the color & CGA versions */

#if _MOTIF
 #if _MENUS_PINNABLE
 #include "../CommonUI/CSpec/bmPin.ui"
 #endif
#include "../CommonUI/CSpec/mkrMinimize.ui"
#include "../CommonUI/CSpec/mkrMaximize.ui"
#include "../CommonUI/CSpec/mkrRestore.ui"
#include "../CommonUI/CSpec/mkrWindowMenu.ui"
#include "../CommonUI/CSpec/mkrDisplayWindowMenu.ui"
#include "../CommonUI/CSpec/mkrWindowMenuButton.ui"
#if !_NIKE
#include "../CommonUI/CSpec/mkrExpressMenu.ui"
#endif
#endif	/* if _MOTIF */

#if _PM
 #if _MENUS_PINNABLE
 #include "../CommonUI/CSpec/bmPin.ui"
 #endif
#include "../CommonUI/CSpec/mkrMinimize.ui"
#include "../CommonUI/CSpec/mkrMaximize.ui"
#include "../CommonUI/CSpec/mkrRestore.ui"
#include "../CommonUI/CSpec/mkrWindowMenu.ui"
#include "../CommonUI/CSpec/mkrDisplayWindowMenu.ui"
#include "../CommonUI/CSpec/mkrExpressMenu.ui"
#endif	/* if _PM */

#if INCLUDE_SC_MONIKERS
start AppFileSCMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0IC.ui"
#include "../CommonUI/CArt/mkrLevel1IC.ui"
#include "../CommonUI/CArt/mkrLevel2IC.ui"
#include "../CommonUI/CArt/mkrLevel3IC.ui"
end AppFileSCMonikerResource;
#endif

#if INCLUDE_SM_MONIKERS
start AppFileSMMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0IM.ui"
#include "../CommonUI/CArt/mkrLevel1IM.ui"
#include "../CommonUI/CArt/mkrLevel2IM.ui"
#include "../CommonUI/CArt/mkrLevel3IM.ui"
end AppFileSMMonikerResource;
#endif

#if INCLUDE_CGA_MONIKERS
start AppFileSCGAMonikerResource, data;
#include "../CommonUI/CArt/mkrLevel0ICGA.ui"
#include "../CommonUI/CArt/mkrLevel1ICGA.ui"
#include "../CommonUI/CArt/mkrLevel2ICGA.ui"
#include "../CommonUI/CArt/mkrLevel3ICGA.ui"
end AppFileSCGAMonikerResource;
#endif

#if INCLUDE_SC_MONIKERS
start AppSCMonikerResource, data;
#if !INCLUDE_SM_MONIKERS
#include "../CommonUI/CArt/mkrHelpTrigSM.ui"	/* include here if no SM_MON */
#endif
#if _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpPrimarySC.ui"
#else
#include "../CommonUI/CArt/mkrHelpPrimarySC.ui"
#endif
end AppSCMonikerResource;
#endif	/* INCLUDE_SC_MONIKERS */

#if INCLUDE_SM_MONIKERS
start AppSMMonikerResource, data;
#if _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpTrigSM.ui"
#else
#include "../CommonUI/CArt/mkrHelpTrigSM.ui"
#endif						
#if _JEDIMOTIF || _NIKE_GERMAN || _NIKE_DUTCH
#include "./Art/mkrHelpPrimarySM.ui"
#else
#include "../CommonUI/CArt/mkrHelpPrimarySM.ui"
#endif
end AppSMMonikerResource;
#endif	/* INCLUDE_SM_MONIKERS */

#if INCLUDE_CGA_MONIKERS
start AppSCGAMonikerResource, data;
#include "../CommonUI/CArt/mkrHelpTrigSCGA.ui"
#include "../CommonUI/CArt/mkrHelpPrimarySCGA.ui"
end AppSCGAMonikerResource;
#endif	/* INCLUDE_CGA_MONIKERS */

#if NOTEBOOK_INTERACTION
start AppSCMonikerResource, data;
#include "./Art/mkrNotebookRings.ui"
end AppSCMonikerResource;
#endif

#if MENU_BAR_IS_A_MENU
start AppSCMonikerResource, data;
#include "./Art/mkrMenuBar.ui"
end AppSCMonikerResource;
#endif

#if SELECTION_BOX
start AppSCMonikerResource, data;
#include "./Art/mkrLArrow.ui"
#include "./Art/mkrRArrow.ui"
#include "./Art/mkrDArrow.ui"
#include "./Art/mkrUArrow.ui"
end AppSCMonikerResource;
#endif

#if RADIO_STATUS_ICON_ON_PRIMARY
start AppSCMonikerResource, data;
#include "./Art/mkrRadioStatusOff.ui"
#include "./Art/mkrRadioStatusOn1.ui"
#include "./Art/mkrRadioStatusOn2.ui"
#include "./Art/mkrRadioStatusOn3.ui"
end AppSCMonikerResource;
#endif

/*-----------------------------------------------------------------------------
	Dialog-related
-----------------------------------------------------------------------------*/

start StandardMonikers, data;

#if _RUDY

visMoniker StandardCloseMoniker = "Close";
visMoniker StandardCancelMoniker = "VMO_CANCEL", "Cancel";
visMoniker StandardApplyMoniker = "Accept";
visMoniker StandardResetMoniker = "Reset";
visMoniker StandardOKMoniker = "OK";
visMoniker StandardYesMoniker = "Yes";
visMoniker StandardNoMoniker = "No";
visMoniker StandardStopMoniker = "Stop";
visMoniker GroupTypeFileMoniker = "File";
visMoniker GroupTypeEditMoniker = "Edit";
visMoniker GroupTypeViewMoniker = "View";
visMoniker GroupTypeOptionsMoniker = "Options";
visMoniker GroupTypeWindowMoniker = "Window";
visMoniker GroupTypeHelpMoniker = "Help";
visMoniker GroupTypePrintMoniker = "Print";
visMoniker FileExitMoniker = "Exit";
visMoniker StandardChangeMoniker = "Change";

visMoniker StandardOnMoniker = "On";
visMoniker StandardOffMoniker = "Off";

visMoniker StandardNextMoniker = "Next";
visMoniker StandardPrevMoniker = "Previous";

#else	/* else of if _RUDY */

#if _JEDIMOTIF
visMoniker StandardCloseMoniker = 'C', "Cancel";
visMoniker StandardCancelMoniker = 'C', "Cancel";
#else
visMoniker StandardCloseMoniker = "VMO_CANCEL", "Close";
visMoniker StandardCancelMoniker = "VMO_CANCEL", "Cancel";
#endif

#if KEYBOARD_ONLY_UI
#if _JEDIMOTIF
visMoniker StandardApplyMoniker = 'O',"OK";
#else
visMoniker StandardApplyMoniker = 'A',"Apply";
#endif
#else
visMoniker StandardApplyMoniker = "Apply";
#endif

visMoniker StandardResetMoniker = "Reset";

#if KEYBOARD_ONLY_UI || _JEDIMOTIF
visMoniker StandardOKMoniker = 'O', "OK";
#else
visMoniker StandardOKMoniker = "OK";
#endif

visMoniker StandardYesMoniker = 'Y', "Yes";
visMoniker StandardNoMoniker = 'N', "No";
visMoniker StandardStopMoniker = "Stop";
visMoniker StandardKeyboardCloseMoniker = "VMO_CANCEL", "Esc - Close";
visMoniker StandardKeyboardCancelMoniker = "VMO_CANCEL", "Esc - Cancel";
visMoniker GroupTypeFileMoniker = 'F', "File";
visMoniker GroupTypeEditMoniker = 'E', "Edit";
visMoniker GroupTypeViewMoniker = 'V', "View";
visMoniker GroupTypeOptionsMoniker = 'O', "Options";
visMoniker GroupTypeWindowMoniker = 'W', "Window";
visMoniker GroupTypeHelpMoniker = 'H', "Help";
visMoniker GroupTypePrintMoniker = 'P', "Print";

#if _ODIE
/* replace with bitmaps */
visMoniker StandardNextMoniker = {
	size = standard;
	style = icon;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 24, 12;
	gstring {
		GSBeginString
		GSFillBitmapAtCP <42>
		Bitmap <24, 12, BMC_UNCOMPACTED, BMF_MONO>
		db	11000000b, 00001100b, 00000000b
		db	11110000b, 00001111b, 00000000b
		db	11111100b, 00001111b, 11000000b
		db	11111111b, 00001111b, 11110000b
		db	11111111b, 11001111b, 11111100b
		db	11111111b, 11101111b, 11111111b
		db	11111111b, 11101111b, 11111111b
		db	11111111b, 11001111b, 11111100b
		db	11111111b, 00001111b, 11110000b
		db	11111100b, 00001111b, 11000000b
		db	11110000b, 00001111b, 00000000b
		db	11000000b, 00001100b, 00000000b
		GSEndString
	}
}
visMoniker StandardPrevMoniker = {
	size = standard;
	style = icon;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 24, 12;
	gstring {
		GSBeginString
		GSFillBitmapAtCP <42>
		Bitmap <24, 12, BMC_UNCOMPACTED, BMF_MONO>
		db	00000000b, 00110000b, 00000011b
		db	00000000b, 11110000b, 00001111b
		db	00000011b, 11110000b, 00111111b
		db	00001111b, 11110000b, 11111111b
		db	00111111b, 11110011b, 11111111b
		db	11111111b, 11110111b, 11111111b
		db	11111111b, 11110111b, 11111111b
		db	00111111b, 11110011b, 11111111b
		db	00001111b, 11110000b, 11111111b
		db	00000011b, 11110000b, 00111111b
		db	00000000b, 11110000b, 00001111b
		db	00000000b, 00110000b, 00000011b
		GSEndString
	}
}
#else
visMoniker StandardNextMoniker = "Next";
visMoniker StandardPrevMoniker = "Previous";
#endif

visMoniker FileExitMoniker = 'x', "Exit";

#if _JEDIMOTIF
visMoniker PrintScreenMoniker = 'S', "Print Screen";
#endif

#if _PM
visMoniker MOWindowMenuTextMoniker = 'W', "Window";
#endif

#endif	/* end of else of if _RUDY */

/*
 * Definitions for standard levels monikers
 */
#include "../CommonUI/CSpec/cspecLevels.ui"
/*
 * Definitions for standard help UI monikers
 */
#include "../CommonUI/CSpec/cspecHelp.ui"


#if _MENUS_PINNABLE
#if _MOTIF

#if INCLUDE_SC_MONIKERS
visMoniker MOPinColorMoniker = {
        size = standard;
        color = color4;
        aspectRatio = normal;
	cachedSize = 32, 14;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinColorBitmap
		GSEndString
	}
}
#endif	/* INCLUDE_SC_MONIKERS */

#if INCLUDE_SM_MONIKERS
visMoniker MOPinBWMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = normal;
	cachedSize = 30, 12;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinBWBitmap
		GSEndString
	}
}
#endif	/* INCLUDE_SM_MONIKERS */

#if INCLUDE_CGA_MONIKERS
visMoniker MOPinCGAMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = verySquished;
	cachedSize = 32, 10;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinCGABitmap
		GSEndString
	}
}
#endif	/* INCLUDE_CGA_MONIKERS */

visMoniker PinMoniker = list {
#if INCLUDE_SC_MONIKERS
 		MOPinColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
 		MOPinBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
 		MOPinCGAMoniker
#endif
}

#elif _PM					/* elif of if _MOTIF */

visMoniker MOPinColorMoniker = {
        size = standard;
        color = color4;
        aspectRatio = normal;
	cachedSize = 32, 14;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinColorBitmap
		GSEndString
	}
}

visMoniker MOPinBWMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = normal;
	cachedSize = 32, 14;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinBWBitmap
		GSEndString
	}
}

visMoniker MOPinCGAMoniker = {
        size = standard;
        color = gray1;
        aspectRatio = verySquished;
	cachedSize = 32, 10;
	gstring {
		GSBeginString
		byte	GR_DRAW_BITMAP_OPTR
		word	0, 0
		optr	MOPinCGABitmap
		GSEndString
	}
}

visMoniker PinMoniker = list {
 		MOPinColorMoniker,
 		MOPinBWMoniker,
 		MOPinCGAMoniker
}

#else						/* else of if _MOTIF */

visMoniker PinMoniker = {
	    cachedSize = 32, 14;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndPinTriggerBM-StartPinTriggerBM)>
		StartPinTriggerBM	label	byte
			Bitmap < 32, 14, 0, <BMF_MONO> >
			byte	00000000b, 00000000b, 00000000b, 00000000b
			byte	00000000b, 00000000b, 00000000b, 00000000b
			byte	00000000b, 00000111b, 00000000b, 00000000b
			byte	00000000b, 00000111b, 10000001b, 10000000b
			byte	00000000b, 00000111b, 10000011b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	00001111b, 11111111b, 11111111b, 11000000b
			byte	00000111b, 11111111b, 11111111b, 11000000b
			byte	00000000b, 00000111b, 11111111b, 11000000b
			byte	01100000b, 00000111b, 11111111b, 11000000b
			byte	11110000b, 00000111b, 10000011b, 11000000b
			byte	11110000b, 00000111b, 10000001b, 10000000b
			byte	01100000b, 00000111b, 00000000b, 00000000b
		EndPinTriggerBM	label	byte
		GSEndString
	    }
	}
#endif						/* end of else of if _MOTIF */
#endif						/* end of if _MENUS_PINNABLE */

#if _GCM
visMoniker GCMHeaderExitMoniker = list {
		ExitSCMoniker,
		ExitSMMoniker,
		ExitSCGAMoniker
	}
#endif						/* if _GCM */

#if _JEDIMOTIF

visMoniker JediAppMenuMoniker = {
	size = standard;
	style = icon;
	color = gray1;
	aspectRatio = normal;
#if 0		/* just use null moniker and let menu mark draw */
	cachedSize = 11, 14;
	gstring {
		GSBeginString
		GSFillBitmapAtCP <34>
		Bitmap <11,14,BMC_UNCOMPACTED,BMF_MONO>
		db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80
		db	0x20, 0x80, 0x2e, 0x80, 0x20, 0x80, 0x2e, 0x80
		db	0x20, 0x80, 0x3f, 0x80, 0x07, 0x80, 0x00, 0x00
		db	0x00, 0x00, 0x00, 0x00
		GSEndString
	}
#else
	cachedSize = 0, 14;
	gstring {
		GSBeginString
		GSEndString
	}
#endif
}

visMoniker JediMoreTriggerMoniker = "More";

#endif

end StandardMonikers;



/*-----------------------------------------------------------------------------
	Window menu used for Primary's & non-modal dialogs
-----------------------------------------------------------------------------*/

#if !_REDMOTIF

start StandardWindowMenuResource, notDetachable;

/* VERY IMPORTANT: if you change the order of these GenTriggers in this	  */
/* menu, update the MO_SYS_MENU_***_INDEX constants in cwinClassCUAS.asm */

StandardWindowMenu = GenInteraction {
	kbdAccelerator = shift ESCAPE;
	/* NOTE: this moniker is used by the OLMenuButton object which	*/
	/* is created to drive this menu. 				*/
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuCGAMoniker
#endif
	}
#elif _PM					/* elif of _MOTIF */
	moniker = list {
		MOWindowMenuColorMoniker,
		MOWindowMenuBWMoniker,
		MOWindowMenuCGAMoniker,
		MOWindowMenuTextMoniker
	}
#else						/* else of _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */

#if _NO_WIN_ICONS
	children = SMI_Restore, SMI_Move, SMI_Size,
		SMI_Maximize, SMI_Minimize, SMI_Close;
#else
	children = SMI_Restore, SMI_Move, SMI_Size, SMI_Minimize,
		SMI_Maximize, SMI_Close;
#endif

	visibility = popup;
	hints = {
		HINT_SYS_MENU,			/* force below GenPrimary */
		HINT_INFREQUENTLY_USED		/* not pinnable */
	}
}


SMI_Restore = GenTrigger {
	moniker = 'R', "Restore";
	kbdAccelerator = F5;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
}

SMI_Move = GenTrigger {
	moniker = 'M', "Move";
	kbdAccelerator = F7;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_MOVE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

SMI_Size = GenTrigger {
	moniker = 'S', "Size";
	kbdAccelerator = F8;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_SIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

SMI_Minimize = GenTrigger {
#if _NO_WIN_ICONS
	moniker = 'H', "Hide";
	kbdAccelerator = F11;		/* modifier set in CustomizeSysMenu */
#else
	moniker = 'n', "Minimize";
	kbdAccelerator = F9;		/* modifier set in CustomizeSysMenu */
#endif
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

SMI_Maximize = GenTrigger {
	moniker = 'x', "Maximize";
	kbdAccelerator = F10;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
}

SMI_Close = GenTrigger {
	CLOSE_TRIGGER_VALUES
	kbdAccelerator = F4;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		/* allow enabling even if menu disabled */
		ATTR_SYSTEM_MENU_CLOSE
	}
}

#if _MOTIF

SMI_MinimizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MinimizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MinimizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MinimizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MaximizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MaximizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MaximizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		RestoreColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		RestoreBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		RestoreCGAMoniker
#endif
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#elif _PM					/* elif of if _MOTIF */

SMI_MinimizeIcon = GenTrigger {
	moniker = list {
		MinimizeColorMoniker,
		MinimizeBWMoniker,
		MinimizeCGAMoniker
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = list {
		MaximizeColorMoniker,
		MaximizeBWMoniker,
		MaximizeCGAMoniker
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = list {
		RestoreColorMoniker,
		RestoreBWMoniker,
		RestoreCGAMoniker
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#else						/* else of if _MOTIF */

SMI_MinimizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMiniButtonBM-StartMiniButtonBM)>
		StartMiniButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00011111b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 01000000b, 01110000b
			db	00000000b, 00100000b, 11100000b
			db	00000000b, 00010001b, 11000000b
			db	00000000b, 00001011b, 10000000b
			db	00000000b, 00000111b, 00000000b
			db	00000000b, 00000010b, 00000000b
		EndMiniButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_MaximizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMaxButtonBM-StartMaxButtonBM)>
		StartMaxButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000100b, 00000000b
			db	00000000b, 00001011b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00100000b, 11000000b
			db	00000000b, 01000000b, 01100000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 00010001b, 11100000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00011111b, 10000000b
		EndMaxButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON,			/* force below GenPrimary */
		ATTR_GEN_TRIGGER_ACTION_DATA {
			word 	0, VUM_NOW
		}
	}
}

SMI_RestoreIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndRestoreButtonBM-StartRestoreButtonBM)>
		StartRestoreButtonBM	label	byte
			Bitmap < 24, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11100000b, 01000000b
			db	00000010b, 00110000b, 10110000b
			db	00000010b, 00110001b, 00011000b
			db	00000010b, 00110010b, 00001100b
			db	00000010b, 00110100b, 00000110b
			db	00011110b, 00111111b, 00011111b
			db	00001000b, 00001111b, 00011110b
			db	00000100b, 00011101b, 00011000b
			db	00000010b, 00111001b, 00011000b
			db	00000001b, 01110001b, 00011000b
			db	00000000b, 11100001b, 11111000b
			db	00000000b, 01000000b, 11111000b
		EndRestoreButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of if _MOTIF */


#if !_PM

StandardWindowMenuButton = GenTrigger {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuButtonColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuButtonBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuButtonCGAMoniker
#endif
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON,			/* force below GenPrimary */
#if _JEDIMOTIF || _STYLUS || _ODIE
		HINT_CLOSE_BUTTON,
#endif
	 }
}

#endif						/* end of if !_PM */

end StandardWindowMenuResource;

#endif						/* if !_REDMOTIF */



/*-----------------------------------------------------------------------------
	Window menu for Displays only
-----------------------------------------------------------------------------*/

#if !_REDMOTIF

start DisplayWindowMenuResource, notDetachable;

/* VERY IMPORTANT: keep everything in the same order as the regular System */
/* Menu!								   */


DisplayWindowMenu = GenInteraction {
	kbdAccelerator = alt MINUS;
	/* NOTE: this moniker is used by the OLMenuButton object which	*/
	/* is created to drive this menu. 				*/
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MODisplayWindowMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MODisplayWindowMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MODisplayWindowMenuCGAMoniker
#endif
	}
#elif _PM					/* elif of if _MOTIF */
	moniker = list {
		MODisplayWindowMenuColorMoniker,
		MODisplayWindowMenuBWMoniker,
		MODisplayWindowMenuCGAMoniker
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndDispSysMenuBM-StartDispSysMenuBM)>
		StartDispSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11111111b, 11110000b
			db	00000010b, 00000000b, 00011000b
			db	00000011b, 11111111b, 11111000b
			db	00000001b, 11111111b, 11111000b
		EndDispSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif					/* end of else of if _MOTIF */
	children = DSMI_Restore, DSMI_Move, DSMI_Size, DSMI_Minimize,
		DSMI_Maximize, DSMI_Close, DSMI_Next;
	visibility = popup;
	hints = {
		HINT_SYS_MENU,			/* force below GenPrimary */
		HINT_INFREQUENTLY_USED		/* not pinnable */
	}
}

DSMI_Restore = GenTrigger {
	moniker = 'R', "Restore";
	kbdAccelerator = F5;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
}

DSMI_Move = GenTrigger {
	moniker = 'M', "Move";
	kbdAccelerator = F7;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_MOVE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

DSMI_Size = GenTrigger {
	moniker = 'S', "Size";
	kbdAccelerator = F8;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_SYSMENU_SIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

DSMI_Minimize = GenTrigger {
	moniker = 'n', "Minimize";
	kbdAccelerator = F9;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	genStates = default -enabled; 
}

DSMI_Maximize = GenTrigger {
	moniker = 'x', "Maximize";
	kbdAccelerator = F10;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
}

DSMI_Close = GenTrigger {
	CLOSE_TRIGGER_VALUES
	kbdAccelerator = F4;		/* modifier set in CustomizeSysMenu */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		/* allow enabling even if menu disabled */
		ATTR_SYSTEM_MENU_CLOSE
	}
}


#if _MOTIF

DSMI_MinimizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MinimizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MinimizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MinimizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MaximizeColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MaximizeBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MaximizeCGAMoniker
#endif
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = list {
#if INCLUDE_SC_MONIKERS
		RestoreColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		RestoreBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		RestoreCGAMoniker
#endif
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#elif _PM					/* elif of _MOTIF */

DSMI_MinimizeIcon = GenTrigger {
	moniker = list {
		MinimizeColorMoniker,
		MinimizeBWMoniker,
		MinimizeCGAMoniker
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = list {
		MaximizeColorMoniker,
		MaximizeBWMoniker,
		MaximizeCGAMoniker
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = list {
		RestoreColorMoniker,
		RestoreBWMoniker,
		RestoreCGAMoniker
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#else						/* else of if _MOTIF */

DSMI_MinimizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMiniDButtonBM-StartMiniDButtonBM)>
		StartMiniDButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00011111b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 01000000b, 01110000b
			db	00000000b, 00100000b, 11100000b
			db	00000000b, 00010001b, 11000000b
			db	00000000b, 00001011b, 10000000b
			db	00000000b, 00000111b, 00000000b
			db	00000000b, 00000010b, 00000000b
		EndMiniDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MINIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_MaximizeIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndMaxDButtonBM-StartMaxDButtonBM)>
		StartMaxDButtonBM	label	byte
			Bitmap < 20, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000100b, 00000000b
			db	00000000b, 00001011b, 00000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00100000b, 11000000b
			db	00000000b, 01000000b, 01100000b
			db	00000000b, 11110001b, 11110000b
			db	00000000b, 00010001b, 11100000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00010001b, 10000000b
			db	00000000b, 00011111b, 10000000b
		EndMaxDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_WIN_MAXIMIZE, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

DSMI_RestoreIcon = GenTrigger {
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndRestoreDButtonBM-StartRestoreDButtonBM)>
		StartRestoreDButtonBM	label	byte
			Bitmap < 24, 14, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000011b, 11100000b, 01000000b
			db	00000010b, 00110000b, 10110000b
			db	00000010b, 00110001b, 00011000b
			db	00000010b, 00110010b, 00001100b
			db	00000010b, 00110100b, 00000110b
			db	00011110b, 00111111b, 00011111b
			db	00001000b, 00001111b, 00011110b
			db	00000100b, 00011101b, 00011000b
			db	00000010b, 00111001b, 00011000b
			db	00000001b, 01110001b, 00011000b
			db	00000000b, 11100001b, 11111000b
			db	00000000b, 01000000b, 11111000b
		EndRestoreDButtonBM	label	byte
		GSEndString
	    }
	}
	action = MSG_OL_RESTORE_WIN, "TO_OBJ_BLOCK_OUTPUT";
	hints = { 
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of else of if _MOTIF */

DSMI_Next = GenTrigger {
	moniker = 'N', "Next";
	kbdAccelerator = F6;		/* modifier set in CustomizeSysMenu */
	action = MSG_MO_NEXT_WIN, "TO_OBJ_BLOCK_OUTPUT";
}


#if !_PM

DisplayWindowMenuButton = GenTrigger {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		MOWindowMenuButtonColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		MOWindowMenuButtonBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		MOWindowMenuButtonCGAMoniker
#endif
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 15;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndSysMenuBM-StartSysMenuBM)>
		StartSysMenuBM	label	byte
			Bitmap < 24, 10, 0, <BMF_MONO> >
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00000000b, 00000000b, 00000000b
			db	00011111b, 11111111b, 11111110b
			db	00010000b, 00000000b, 00000011b
			db	00011111b, 11111111b, 11111111b
			db	00001111b, 11111111b, 11111111b
		EndSysMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	action = MSG_OL_WIN_CLOSE, "TO_OBJ_BLOCK_OUTPUT";
	hints = {
		HINT_SYS_ICON			/* force below GenPrimary */
	}
}

#endif						/* end of if !_PM */

end DisplayWindowMenuResource;

#endif						/* if !_REDMOTIF */




/*
 *	The ExpressMenuResource is pretty different for _REDMOTIF, so
 * we have it defined separately for this flag, instead of hacking up
 * the internals of it.
 *
 *	We define the _REDMOTIF version first, and then define all others
 * in the "else" clause.
 *
 */

#if _REDMOTIF

/*-----------------------------------------------------------------------------
	Express menu
-----------------------------------------------------------------------------*/

start ExpressMenuResource, notDetachable;

/* 
 *	ToolAreaClass (implemented in cwinField.asm)
 */

class ToolArea = GenInteraction {
}

class LauncherInteraction = GenInteraction {
	field = optrComp : null;
}

FloatingToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = {
/*		HINT_TOOLBOX,			*/
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
		HINT_STAGGER_WINDOW
	}
}

ExpressMenu = LauncherInteraction {
	moniker = list {
		ExpressMenuColorMoniker
	}
	children = WordAndType, AddressCalcAndSched, ScrapAndDisk,
		   Spreadsheet, Draw, ExpressMenu2;
/*
	ExpressMenu2 *MUST* be child number 5.  If moved, also change
	OLFieldEnsureExpressMenu in cwinField.asm.
*/
	visibility = popup;
	kbdAccelerator = control ESCAPE;

	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			word LAYER_PRIO_ON_TOP-1
		},
		HINT_AVOID_MENU_BAR,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CAN_CLIP_MONIKER_HEIGHT,
		HINT_KEEP_INITIALLY_ONSCREEN,
		HINT_EXPRESS_MENU,
		ATTR_GEN_CONTROL_REQUIRE_UI { word 0 },
		ATTR_GEN_CONTROL_PROHIBIT_UI { word 0 }
	}
}

WordAndType = GenInteraction {
	children = WordProcessor, Typewriter;
}

/*
SpreadAndDraw = GenInteraction {
	children = Spreadsheet, Draw;
}
*/

AddressCalcAndSched = GenInteraction {
	children = AddressBook, Calculator, Scheduler;
}

ScrapAndDisk = GenInteraction {
	children = Scrapbook, DiskManager;
}

WordProcessor = GenTrigger {
	moniker = '1', "1. Word Processor";
	action = MSG_LAUNCHER_LAUNCH_WRITE, "OLTPT_WINDOW";
}

Typewriter = GenTrigger {
	moniker = '2', "2. Typewriter";
	action = MSG_LAUNCHER_LAUNCH_TYPE, "OLTPT_WINDOW";
}

AddressBook = GenTrigger {
	moniker = '3', "3. Address Book";
	action = MSG_LAUNCHER_LAUNCH_GEODEX, "OLTPT_WINDOW";
}

Calculator = GenTrigger {
	moniker = '4', "4. Calculator";
	action = MSG_LAUNCHER_LAUNCH_BIGCALC, "OLTPT_WINDOW";
}

Scheduler = GenTrigger {
	moniker = '5', "5. Appointment Manager";
	action = MSG_LAUNCHER_LAUNCH_PLANNER, "OLTPT_WINDOW";
}

Scrapbook = GenTrigger {
	moniker = '6', "6. Scrapbook";
	action = MSG_LAUNCHER_LAUNCH_SCRAPBOOK, "OLTPT_WINDOW";
}

DiskManager = GenTrigger {
	moniker = '7', "7. Disk Manager";
	action = MSG_LAUNCHER_LAUNCH_GEOMANAGER, "OLTPT_WINDOW";
}

Spreadsheet = GenTrigger {
	moniker = '8', "8. Spreadsheet";
	action = MSG_LAUNCHER_LAUNCH_GEOCALC, "OLTPT_WINDOW";
}

Draw = GenTrigger {
	moniker = '9', "9. Draw";
	action = MSG_LAUNCHER_LAUNCH_DRAW, "OLTPT_WINDOW";
}

ExpressMenu2 = ExpressMenuControl {
	hints = {
		ATTR_GEN_CONTROL_REQUIRE_UI {
			word	mask EMCF_UTILITIES_PANEL
		},
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	mask EMCF_CONTROL_PANEL or \
				mask EMCF_GEOS_TASKS_LIST or \
				mask EMCF_DESK_ACCESSORY_LIST or \
				mask EMCF_MAIN_APPS_LIST or \
				mask EMCF_OTHER_APPS_LIST or \
				mask EMCF_DOS_TASKS_LIST or \
				mask EMCF_EXIT_TO_DOS
		},
		ATTR_EMC_SET_NOT_USABLE_ON_DETACH
	}
}

end ExpressMenuResource;

#elif _NIKE					/* else of if _REDMOTIF */

/*-----------------------------------------------------------------------------
	Nike Express menu
-----------------------------------------------------------------------------*/

start ExpressMenuResource, notDetachable;

/* 
 *	ToolAreaClass (implemented in cwinField.asm)
 */

class ToolArea = GenInteraction {
}

FloatingToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
		HINT_STAGGER_WINDOW,
		HINT_DONT_KEEP_PARTIALLY_ONSCREEN,
		HINT_DONT_KEEP_INITIALLY_ONSCREEN
	}
}

ExpressMenu = GenBooleanGroup {
	applyMsg = MSG_OL_FIELD_TOGGLE_KBD_STATUS_BUTTON;
	destination = "OLTPT_FIELD";
	children = CapsLockItem, NumLockItem, InsOverItem;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CAN_CLIP_MONIKER_HEIGHT,
		HINT_TOOLBOX,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 0>
		},
		ATTR_GEN_CONTROL_REQUIRE_UI { word 0 },
		ATTR_GEN_CONTROL_PROHIBIT_UI { word 0 }
	}
}

CapsLockItem = GenBoolean {
#if _NIKE_EUROPE
	moniker = CapsLockItemMoniker;
#else
	moniker = "CAP";
#endif
	identifier = "mask KSF_CAPSLOCK";
	hints = {
		HINT_CENTER_MONIKER,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

#if _NIKE_EUROPE
visMoniker CapsLockItemMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 11, 13;
	gstring {
	GSBeginString
	GSFillBitmapAtCP <(EndCapsButtonBM-StartCapsButtonBM)>
	StartCapsButtonBM	label	byte
		Bitmap < 11, 13, 0, <BMF_MONO> >
		db	00000100b, 00000000b
		db	00001110b, 00000000b
		db	00011011b, 00000000b
		db	00110001b, 10000000b
		db	01100000b, 11000000b
		db	11111111b, 11100000b
		db	00010001b, 00000000b
		db	00010001b, 00000000b
		db	00010001b, 00000000b
		db	00010001b, 00000000b
		db	01110001b, 11000000b
		db	01000000b, 01000000b
		db	01111111b, 11000000b
	EndCapsButtonBM	label	byte
	GSEndString
	}
}
#endif	/* _NIKE_EUROPE */

NumLockItem = GenBoolean {
#if _NIKE_EUROPE
	moniker = NumLockItemMoniker;
#else
	moniker = "NUM";
#endif
	identifier = "mask KSF_NUMLOCK";
	hints = {
		HINT_CENTER_MONIKER,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

#if _NIKE_EUROPE
visMoniker NumLockItemMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 11, 13;
	gstring {
	GSBeginString
	GSFillBitmapAtCP <(EndNumButtonBM-StartNumButtonBM)>
	StartNumButtonBM	label	byte
		Bitmap < 11, 13, 0, <BMF_MONO> >
		db	00000100b, 00000000b
		db	00001110b, 00000000b
		db	00011111b, 00000000b
		db	00110101b, 10000000b
		db	01100100b, 11000000b
		db	11110101b, 11100000b
		db	00010101b, 00000000b
		db	00010101b, 00000000b
		db	00010101b, 00000000b
		db	00010101b, 00000000b
		db	01110101b, 11000000b
		db	01000100b, 01000000b
		db	01111111b, 11000000b
	EndNumButtonBM	label	byte
	GSEndString
	}
}
#endif	/* _NIKE_EUROPE */

InsOverItem = GenBoolean {
#if _NIKE_GERMAN || _NIKE_DUTCH
	moniker = InsOverItemMoniker;
#else
	moniker = "INS";
#endif
	identifier = "mask KSF_INS_OVER";
	hints = {
		HINT_CENTER_MONIKER,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <>
		}
	}
}

#if _NIKE_GERMAN || _NIKE_DUTCH
visMoniker InsOverItemMoniker = {
	size = standard;
	color = gray1;
	aspectRatio = normal;
	cachedSize = 17, 12;
	gstring {
	GSBeginString
	GSFillBitmapAtCP <(EndInsOverButtonBM-StartInsOverButtonBM)>
	StartInsOverButtonBM	label	byte
		Bitmap < 17, 12, 0, <BMF_MONO> >
		db	00000001b, 11000000b, 00000000b
		db	00000000b, 00100000b, 00000000b
		db	00000001b, 11100000b, 00000000b
		db	10000010b, 00100000b, 10000000b
		db	01000010b, 00100001b, 00000000b
		db	00100001b, 11010010b, 00000000b
		db	00010000b, 00000100b, 00000000b
		db	00001000b, 00001000b, 00000000b
		db	00000100b, 00010000b, 00000000b
		db	00000010b, 00100000b, 00000000b
		db	00000001b, 01000000b, 00000000b
		db	00000000b, 10000000b, 00000000b
	EndInsOverButtonBM	label	byte
	GSEndString
	}
}
#endif	/* NIKE_GERMAN || _NIKE_DUTCH */

end ExpressMenuResource;

#else						/* else of #elif _NIKE */

/*
 *	OK, here is the non _REDMOTIF, non _NIKE express menu
 */


/*-----------------------------------------------------------------------------
	Express menu
-----------------------------------------------------------------------------*/

start ExpressMenuResource, notDetachable;

/* 
 *	ToolAreaClass (implemented in cwinField.asm)
 */

class ToolArea = GenInteraction {
}




FloatingToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = {
/*		HINT_TOOLBOX,			*/
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
#if _RUDY || EVENT_MENU
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
	     	      SpecWinSizePair < mask SWSS_RATIO or PCT_100, \
					mask SWSS_RATIO or PCT_100>
		},
#else		
		HINT_STAGGER_WINDOW,
#endif
#if EVENT_MENU
		HINT_DRAW_STYLE_FLAT,
		HINT_DONT_KEEP_PARTIALLY_ONSCREEN,
#endif
		HINT_DONT_KEEP_INITIALLY_ONSCREEN
	}
}

#if EVENT_MENU
EventToolArea = ToolArea {
	visibility = dialog;
	attributes = default +notUserInitiatable;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_WINDOW,
		ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY {
			word WIN_PRIO_STD-1
		},
		HINT_DRAW_STYLE_FLAT,
		HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT {
	     	      SpecWinSizePair < mask SWSS_RATIO or PCT_100, \
					mask SWSS_RATIO or PCT_100>
		},
		HINT_DONT_KEEP_INITIALLY_ONSCREEN,
		HINT_DONT_KEEP_PARTIALLY_ONSCREEN,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

ExpressMenu = ExpressMenuControl {
#if _MOTIF
	moniker = list {
#if INCLUDE_SC_MONIKERS
		ExpressMenuColorMoniker,
#endif
#if INCLUDE_SM_MONIKERS
		ExpressMenuBWMoniker,
#endif
#if INCLUDE_CGA_MONIKERS
		ExpressMenuCGAMoniker
#endif
	}
#elif _PM					/* elif of if _MOTIF */
	moniker = list {
		ExpressMenuColorMoniker,
		ExpressMenuBWMoniker,
		ExpressMenuCGAMoniker
	}
#else						/* else of if _MOTIF */
	moniker = {
	    cachedSize = 26, 13;		/* full size of icon */
	    gstring {
		GSBeginString
		GSFillBitmapAtCP <(EndAppMenuBM-StartAppMenuBM)>
		StartAppMenuBM	label	byte
		    Bitmap < 23, 13, 0, <BMF_MONO> >
		    db	00000000b, 00000000b, 00000000b
		    db	00000000b, 00000111b, 11111110b
		    db	00000000b, 00000111b, 11111100b
		    db	00000111b, 11111000b, 11111000b
		    db	00000000b, 00001111b, 00000000b
		    db	00000000b, 00011111b, 11100000b
		    db	00011111b, 11100011b, 11000000b
		    db	00000000b, 00111111b, 10000000b
		    db	00000000b, 01111100b, 00000000b
		    db	01111111b, 10001000b, 01110000b
		    db	00000000b, 11111111b, 11100000b
		    db	00000001b, 11111111b, 11000000b
		    db	00000001b, 11111111b, 10000000b
		EndAppMenuBM	label	byte
		GSEndString
	    }
	}
#endif						/* if _MOTIF */
	visibility = popup;
#if _PM	/* PM uses Ctrl-ESC to bring up Window List dialog */
	kbdAccelerator = control shift ESCAPE;
#elif _ODIE
	kbdAccelerator = F7;
#else
	kbdAccelerator = control ESCAPE;
#endif

	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			word LAYER_PRIO_ON_TOP-1
		},
#if _WIZARDBA
		HINT_INFREQUENTLY_USED,		/* Not pinnable */
#endif
		HINT_AVOID_MENU_BAR,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CAN_CLIP_MONIKER_HEIGHT,
		HINT_KEEP_INITIALLY_ONSCREEN,
		HINT_EXPRESS_MENU,
		/* These will be filled in, depending on user level and
		   .ini file settings */
		ATTR_GEN_CONTROL_REQUIRE_UI { word 0 },
		ATTR_GEN_CONTROL_PROHIBIT_UI { word 0 },
		ATTR_EMC_SET_NOT_USABLE_ON_DETACH
	}
}

end ExpressMenuResource;

#endif					/* end of else of if _REDMOTIF */



#if _PM

start WindowListResource, notDetachable;

/*-----------------------------------------------------------------------------
	Window list dialog
-----------------------------------------------------------------------------*/

class WindowListDialog = GenInteraction {
	OLWLDI_flag	= byteComp : 0;
}

WinListDialog = WindowListDialog {
	moniker = "Window List";
#if _WIZARDBA
	children = WindowList, WindowListControlPanel, ActionBar;
#else
	children = WindowList;
#endif
	visibility = dialog;
	attributes = default +notUserInitiatable;
	genAttributes = default +targetable;
	kbdAccelerator = control ESCAPE;
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			word 0
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			word LAYER_PRIO_ON_TOP-1
		},
#if _WIZARDBA
		ATTR_GEN_HELP_FILE {
			char "e help t",0
		},
		ATTR_GEN_HELP_TYPE {
			byte HT_SIMPLE_HELP
		},
		ATTR_GEN_HELP_CONTEXT {
			char "oWinL", 0
		},
#endif						/* end of if _WIZARDBA */
		HINT_INTERACTION_MAKE_RESIZABLE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_INTERACTION_MAXIMIZABLE
	}
}

WindowList = GenItemGroup {
	destination = "OLTPT_FIELD";
	hints = {
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 16>
			SpecHeight <SST_LINES_OF_TEXT, 4>
			word	4
		},
		ATTR_GEN_ITEM_GROUP_CUSTOM_DOUBLE_PRESS {
			word	MSG_OL_FIELD_SELECT_WINDOW_LIST_ENTRY
		}
	}
}



#if _WIZARDBA

class EMCControlPanel = ExpressMenuControl {
}

WindowListControlPanel = EMCControlPanel {
	hints = {
		ATTR_GEN_CONTROL_REQUIRE_UI {
			word	mask EMCF_CONTROL_PANEL or \
				mask EMCF_UTILITIES_PANEL
		},
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	mask EMCF_GEOS_TASKS_LIST or \
				mask EMCF_DESK_ACCESSORY_LIST or \
				mask EMCF_MAIN_APPS_LIST or \
				mask EMCF_OTHER_APPS_LIST or \
				mask EMCF_DOS_TASKS_LIST or \
				mask EMCF_EXIT_TO_DOS
		},
		ATTR_EMC_SET_NOT_USABLE_ON_DETACH,
		ATTR_EMC_TRIGGERS_SIGNAL_INTERACTION_COMPLETE
	}
}

ActionBar = GenInteraction {
	children = SelectWindow, WindowListClose;

	hints = {
		HINT_MAKE_REPLY_BAR,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

SelectWindow = GenTrigger {
	moniker = 'S', "Select";
	action = MSG_OL_FIELD_SELECT_WINDOW_LIST_ENTRY, "OLTPT_FIELD";
}

WindowListClose = GenTrigger {
	moniker = 'C', "Close";
	action = MSG_OL_FIELD_CLOSE_WINDOW_LIST, "OLTPT_FIELD";
}

#endif						/* end of if _WIZARDBA */

end WindowListResource;

#endif						/* end of if _PM */


#if _WIZARDBA

start SimpleHelpResource, notDetachable;

SimpleHelp = HelpControl {
	genStates = default -usable;
	moniker = "Help";
	helpType = "HT_SIMPLE_HELP";
	attributes = default +modal;
}

end SimpleHelpResource;

#endif						/* end of if _WIZARDBA */
