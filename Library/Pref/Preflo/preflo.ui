/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  
 * MODULE:	  UI Specification
 * FILE:	  preflo.ui
 *
 * AUTHOR:  	  Adam de Boor: Dec  7, 1992
 *
 * REVISION HISTORY:
 *	Name	  Date	    Description
 *	----	  ----	    -----------
 *	ardeb	  12/ 7/92	    Initial version
 *
 * DESCRIPTION:
 *	UI for Lights Out preferences module
 *
 *
 * 	$Id: preflo.ui,v 1.2 98/03/24 22:01:59 gene Exp $
 *
 ***********************************************************************/


#include "generic.uih"
#include "config.uih"

#ifdef GPC_VERSION
#include "Art/mkrPrefGPC.ui"
#else
#include "Art/mkrLightsOut.ui"
#endif

/*---------------------------------------------------------------------------
	PRODUCT CONSTANTS
---------------------------------------------------------------------------*/

#define _NIKE	0


class PrefLODialog = PrefDialog {
	static /* resetOnClose */ byteComp : 0;
}

class PrefLOPasswordText = PrefText {
    passwordState = bitFieldComp byte {
	passwordVerified, amMaster, replaceAll, wasReplaceAll
    } : {};
    pair = nptrComp : null;

    default Pref = GenText;

    default genAttributes = default -readOnly, -targetable;
    default textDisplayAttributes = singleLineText, noWordWrapping,
		useTabForNavigation;
    default maxLength = SAVER_MAX_PASSWORD;
}

/**************************************************************************
 *	UI FOR Lights Out
 **************************************************************************/ 
start	LightsOutUI;

PrefLORoot = PrefLODialog {
#ifdef GPC_VERSION
	moniker = "Screen Saver";
#else
	moniker = "Lights Out";
#endif
	attributes = default +notUserInitiatable;
	visibility = dialog;
	type = properties;
	genStates = default -usable;
#ifdef GPC_VERSION
	children = LOTitleGroup, LOEnableList, LOSubgroup,
#ifdef GPC_ONLY
	           PrefTriggerGroup,
#endif
	           FirstTime;
#else
	children = LOTitleGroup, LOEnableList, LOSubgroup;
#endif
	hints = {
		ATTR_GEN_INIT_FILE_CATEGORY {
			char	"Lights Out", 0
		},
		HINT_INTERACTION_SINGLE_USAGE,
#ifndef GPC_ONLY
		HINT_INTERACTION_COMPLEX_PROPERTIES,
#endif
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_HELP_CONTEXT {
			char "dbLightsOut",0
		}
	}
}


#ifdef GPC_ONLY
PrefTriggerGroup = GenInteraction {
    children = PrefLOOK, PrefLOClose;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

PrefLOOK = GenTrigger {
    moniker = 'C', "Change";
    genStates = default -enabled;
    genAttributes = signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_APPLY
	}
    }
}

PrefLOClose = GenTrigger {
    moniker = 'D', "Don't Change";
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_DISMISS
	}
    }
}
#endif

#ifdef GPC_VERSION
FirstTime = GenInteraction {
    visibility = dialog;
    attributes = default +modal, +initiatedViaUserDoDialog;
    type = notification;
    children = FirstTimeText;
}

FirstTimeText = GenText {
    genAttributes = default +readOnly;
    text = "You have turned on the screen saver.  Now when you leave your computer unused for the number of minutes that you specified, the screen saver you chose will automatically start up.  To stop the screen saver, move your mouse, press the mouse button, or press a key on the keyboard.";
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
	    SpecHeight <>
	}
    }
}

#endif


LOTitleGroup = GenInteraction {
	children = LOTitle, LOHelp;
	hints = {HINT_ORIENT_CHILDREN_HORIZONTALLY}
}

LOTitle = TitledGlyph {
	moniker = list {
		LOTextMoniker,
#ifdef GPC_VERSION
		PrefGPCMoniker
#else
		LightsOutHCMoniker,
		LightsOutLCMoniker,
		LightsOutLMMoniker,
		LightsOutLCGAMoniker
#endif
	}
}

LOHelp = GenText {
	genAttributes = readOnly;
#ifdef GPC_VERSION
	text = "Select the settings for your screen saver here.  The screen saver protects your monitor from a condition called screen burn-in -- if you leave the same image displayed on your screen long enough, a pale version of it will eventually become permanently visible on the screen.";
#else
	text = "Select the way you want your screen saved.";
#endif
	hints = {
		  HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 425>
			SpecHeight <>
		  }
	}
}

LOEnableList = PrefItemGroup {
	moniker = 'a', "Screen Saving:";
	children = ScreenBlankerEnable, ScreenBlankerDisable;
	selection = FALSE;
	numSelections = 1;
	applyMsg = MSG_PLOD_AUTO_SCREEN_BLANK;
	destination = PrefLORoot;
	hints = {
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui", 0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "screenBlanker",0
		},
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <TRUE, LOSubgroup>
		},
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN
	}
}

ScreenBlankerEnable = GenItem {
	identifier = TRUE;
	moniker = "On";
}

ScreenBlankerDisable = GenItem {
	identifier = FALSE;
	moniker = "Off";
}



LOSubgroup = PrefInteraction {
	genStates = default -enabled;
	children = 	LOTimeoutValue, 
			LOList 
			, LOEtcGroup
			;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX
	}
}

LOTimeoutValue = PrefValue {
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "screenBlankerTimeout", 0
		},
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui", 0
		}
	}
	moniker = 'T',"Time (minutes):";
	value = 15;
	minimum = 1;
	maximum = 30;
	increment = 1;
	displayFormat = integer;
	applyMsg = MSG_PLOD_SET_TIMEOUT;
	destination = PrefLORoot;
}

chunk LODefaultSaver = {Default Screen Blanker}

LOList = PrefTocList vardataReloc {
	numSelections  = 1;
	selection = 0;
	moniker = 'S', "Screen Saver:";
	tokenChars = "'SSAV'";
	applyMsg = MSG_PLOD_CHANGE_SAVER;
	destination = PrefLORoot;
        hints = {
		ATTR_GEN_PATH_DATA {
			GenFilePath <SP_SYSTEM, <C_BACKSLASH, "SAVERS", 0>>
		},		
                HINT_ITEM_GROUP_SCROLLABLE,
		ATTR_GEN_INIT_FILE_KEY {
			char "specific",0
		},
                HINT_FIXED_SIZE {
                        SpecWidth <SST_AVG_CHAR_WIDTHS, 50>
                        SpecHeight <SST_LINES_OF_TEXT, 5>
                        word    5
                },
		ATTR_PREF_TOC_LIST_CONTAINER {
			I_OPTR	LOContainer
		},
		ATTR_PREF_TOC_LIST_EXTRA_ENTRY_1 {
			PrefTocExtraEntry <LODefaultSaver>
		}
        }
}

LOContainer = PrefContainer {
	prefInteractionAttrs = default +loadOptionsOnInitiate,
			+saveOptionsOnApply;

	templateMoniker = "\\1";
	type = properties;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
#ifndef GPC_ONLY
		HINT_INTERACTION_COMPLEX_PROPERTIES,
#endif
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

LOEtcGroup = PrefInteraction {
#ifdef GPC_ONLY
	children = LOGeneralOptions, LOContainer;
#else
	children = LOGeneralOptions, LOContainer, LOPasswordOptions;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING
	}
}

/******************************************************************************
 *
 *			   GENERAL OPTIONS
 *
 ******************************************************************************/
LOGeneralOptions = PrefDialog {
	attributes = default -notUserInitiatable;
	prefInteractionAttrs = default +loadOptionsOnInitiate;
	moniker = 'G', "General Options";
	type = properties;
	visibility = dialog;

	children = WakeupOptions, InputOptions;

	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
#ifndef GPC_ONLY
		HINT_INTERACTION_COMPLEX_PROPERTIES,
#endif
		ATTR_GEN_HELP_CONTEXT {
			char "dbLOGenOpts",0
		}
	}
}

/*----------------------------------------*/

#ifdef GPC_ONLY

WakeupOptions = PrefItemGroup {
	moniker = "Wakeup Options";
	selection = "mask SWO_KEY_PRESS or \
				mask SWO_MOUSE_MOVE or \
				mask SWO_MOUSE_PRESS";
	children =
		MouseOrKeyboardUseEntry,
		MouseUseEntry,
		KeyboardUseEntry;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "wakeupOptions", 0
		},
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

MouseOrKeyboardUseEntry = GenItem {
	moniker = 'o', "Wake on Mouse or Keyboard use";
	identifier = "mask SWO_MOUSE_MOVE or mask SWO_MOUSE_PRESS or \
				mask SWO_KEY_PRESS";
}

MouseUseEntry = GenItem {
	moniker = 'M', "Wake on Mouse use only";
	identifier = "mask SWO_MOUSE_MOVE or mask SWO_MOUSE_PRESS";
}

KeyboardUseEntry = GenItem {
	moniker = 'K', "Wake on Keyboard use only";
	identifier = "mask SWO_KEY_PRESS";
}

#else

WakeupOptions = PrefBooleanGroup {
	moniker = "Wakeup Options";
	selectedBooleans = "mask SWO_KEY_PRESS or \
				mask SWO_MOUSE_MOVE or \
				mask SWO_MOUSE_PRESS";
	children =
		KeypressEntry,
		MouseMoveEntry,
		MousePressEntry;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "wakeupOptions", 0
		},
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

KeypressEntry = GenBoolean {
	moniker = 'k', "Wake on key presses";
	identifier = "mask SWO_KEY_PRESS";
}

MouseMoveEntry = GenBoolean {
	moniker = 'v', "Wake on mouse movement";
	identifier = "mask SWO_MOUSE_MOVE";
}

MousePressEntry = GenBoolean {
	moniker = 'b', "Wake on mouse button presses";
	identifier = "mask SWO_MOUSE_PRESS";
}

#endif /* GPC_ONLY */


/*----------------------------------------*/

InputOptions = PrefBooleanGroup {
	moniker = "Miscellaneous Options";
	children =
		ReducePriorityEntry,
		NeverOnEntry,
		SwallowKeypressesEntry;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "inputOptions", 0
		},
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

NeverOnEntry = GenBoolean {
#ifdef GPC_ONLY
	moniker = 'D', "Disable Screen Saver when mouse is in lower right corner";
#else
	moniker = 'm', "Disable blanking when mouse is in lower right corner";
#endif
	identifier = "mask SIO_NEVER_ON";
}

SwallowKeypressesEntry = GenBoolean {
#ifdef GPC_ONLY
	moniker = 'I', "Ignore key presses when waking";
#else
	moniker = 'p', "Consume key presses when unblanking";
#endif
	identifier = "mask SIO_CONSUME_KEYPRESSES";
}

ReducePriorityEntry = GenBoolean {
#ifdef GPC_ONLY
	moniker = 'p', "Keep printing speed fast when saving screen";
#else
	moniker = 'R', "Reduce priority when saving screen";
#endif
	identifier = "mask SIO_REDUCE_PRIORITY";
}

/******************************************************************************
 *
 *			   PASSWORD OPTIONS
 *
 ******************************************************************************/
LOPasswordOptions = PrefDialog {
	attributes = default -notUserInitiatable;
	prefInteractionAttrs = default +loadOptionsOnInitiate,
					+completeInteractionOnApply;
	moniker = 'P', "Password Options";
	type = properties;
	visibility = dialog;

	children =
		SaverPasswordGroup,
		UseNetPassword,
		LockScreenList;


	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		ATTR_GEN_HELP_CONTEXT {
			char "dbLOPwdOpts",0
		}
	}
}


chunk PrefLOPasswordStyle = data {
	CHAR_ATTR_FONT_SIZE_STYLE_COLOR(2, FID_BISON, 13, 0, C_BLACK)
}

SaverPasswordGroup = PrefInteraction {
	genStates = default -enabled;
	moniker = 'P', "Password:";
	children = SaverPassword, VerifyPassword;
	hints = { HINT_ORIENT_CHILDREN_VERTICALLY }
}

SaverPassword = PrefLOPasswordText {
	text = "";
	passwordState = amMaster;
	pair = VerifyPassword;
	hints = {
		ATTR_GEN_TEXT_CHAR_ATTR {
			word	PrefLOPasswordStyle
		},
#ifdef DO_PIZZA
		ATTR_GEN_TEXT_NO_FEP,
#endif
		ATTR_GEN_INIT_FILE_KEY {
			char	"password", 0
		}
	}
}

UseNetPassword	= PrefItemGroup {
	moniker = "Use Network Password";
	selection = TRUE;
	numSelections = 1;
	children = UseNetYes, UseNetNo;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"use net", 0
		},
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <FALSE, SaverPasswordGroup>
		}
	}
}

UseNetYes = GenItem {
	moniker = 'Y', "Yes";
	identifier = TRUE;
}

UseNetNo = GenItem {
	moniker = 'N', "No";
	identifier = FALSE;
}

VerifyPassword = PrefLOPasswordText {
	moniker = 'C', "Confirm:";
	text = "";
	genStates = default -enabled;
	pair = SaverPassword;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		ATTR_GEN_TEXT_CHAR_ATTR {
			word	PrefLOPasswordStyle
		},
#ifdef DO_PIZZA
		ATTR_GEN_TEXT_NO_FEP,
#endif
		ATTR_GEN_INIT_FILE_KEY {
			char	"password", 0
		}
	}
}

LockScreenList = PrefItemGroup {
	moniker = "Lock Screen:";
	children = LockAutomaticEntry, LockManualEntry;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_KEY {
			char "lockScreen", 0
		}
	}
	selection = SLM_MANUAL;
	numSelections = 1;
}

LockAutomaticEntry = GenItem {
	moniker = 'A', "Automatic (every time screen is saved)";
	identifier = SLM_AUTOMATIC;
}

LockManualEntry = GenItem {
	moniker = 'M', "Manual (must use Security Lock button)";
	identifier = SLM_MANUAL;
}


end	LightsOutUI;

start	Strings, data;

chunk	MismatchStr = "Password and Confirm do not match -- please make sure they contain the exact same text";

#ifdef GPC_VERSION
visMoniker LOTextMoniker = "Screen Saver";
chunk HowItWorks = "HowItWorks";
#else
visMoniker LOTextMoniker = "Lights Out";
#endif

visMoniker LOMonikerList = list {
		LOTextMoniker,
#ifdef GPC_VERSION
		PrefGPCMoniker
#else
		LightsOutHCMoniker,
		LightsOutLCMoniker,
		LightsOutLMMoniker,
		LightsOutLCGAMoniker
#endif
}

end	Strings;
