/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  prefintl
 * FILE:	  prefintl.ui
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *
 * DESCRIPTION:
 *	UI for International module
 *
 *
 * 	$Id: prefintl.ui,v 1.1 97/04/05 01:39:21 newdeal Exp $
 *
 ***********************************************************************/

#include "generic.uih"
#include "config.uih"
#include "Art/mkrPrefIntl.ui"

class PrefIntlDialog = PrefDialog {
}

class	CustomSpin = GenDynamicList {
	firstMoniker	= nptrComp : null;
	maxTextLen	= byteComp : 100;
	minimum		= wordComp : 0;
	maximum		= wordComp : 0;
}

#ifdef DO_PIZZA	/* Gengo classes */
class	PrefGengoInteraction = GenInteraction {
	gengo	= typeComp "GengoNameData" : "";
}
#endif

start	PrefIntlUI;


PrefIntlTitle = TitledGlyph {
	moniker = list {
		PrefIntlTextMoniker,
		PrefIntlHCMoniker,
		PrefIntlLCMoniker,
		PrefIntlLMMoniker,
		PrefIntlLCGAMoniker
	}
}


PrefIntlRoot = PrefIntlDialog {
	moniker = "International";
	attributes = default +modal, +notUserInitiatable;
	visibility = dialog;
	genStates = default -usable;
	type = command;
	children = IntlTitleGroup, IntlSubgroup,
			IntlEdit, IntlClose;
	hints = {
#ifdef PRODUCT_NDO2000
		ATTR_GEN_HELP_CONTEXT {
			char "dbIntl",0
		} 
#endif
	}
}

IntlTitleGroup = GenInteraction {
	children = PrefIntlTitle, IntlHelp;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#ifdef DO_PIZZA
		, HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}

IntlHelp = GenText {
	genAttributes = readOnly;
	text = "Use these options to change your time and date display formats, currency and number formats, and other default characters.";
	hints = {
		  HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, 375>
			SpecHeight <>
		  },
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

IntlSubgroup = GenInteraction {
#ifdef DO_PIZZA	/* Gengo dialog box */
	children = IntlListGroup, IntlExampleGroup;
#else
	children = IntlList, IntlExampleGroup;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY, 
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

IntlClose = GenTrigger {
	moniker = "VMO_CANCEL", "Close";
	action = MSG_PREF_INTL_DIALOG_DONE, PrefIntlRoot;
	/* no signalInteractionComplete, done manually */
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

#ifdef DO_PIZZA	/* Gengo dialog box */
IntlListGroup = GenInteraction {
	children = IntlList, DefineGengoSummons;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}
#endif

IntlList = GenItemGroup {
	numSelections  = 1;
	selection = DTF_CURRENCY;
	moniker = "Choose format to edit";
	children = CurrencyItem, NumericItem, QuotesItem,
		   LongItem, ShortItem, HMSItem;
	destination = PrefIntlRoot;
	hints = {
		HINT_DEFAULT_FOCUS,
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_PREF_INTL_DIALOG_SELECT_FORMAT
		},
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 22>
			SpecHeight <SST_LINES_OF_TEXT, 8>
			word	8
		}
	}
}

/*
 * Yes, please keep these monikers together.
 */

visMoniker	LongItemMkr		= "Long date";
visMoniker	ShortItemMkr		= "Short date";
visMoniker	HMSItemMkr		= "Time";
visMoniker	CurrencyItemMkr		= "Currency";
visMoniker	NumericItemMkr		= "Number";
visMoniker	QuotesItemMkr		= "Quotation marks";



LongItem = GenItem {
	moniker = LongItemMkr;
	identifier = DTF_LONG;
}
ShortItem = GenItem {
	moniker = ShortItemMkr;
	identifier = DTF_SHORT;
}
HMSItem = GenItem {
	moniker = HMSItemMkr;
	identifier = DTF_HMS;
}
CurrencyItem = GenItem {
	moniker = CurrencyItemMkr;
	identifier = DTF_CURRENCY;
}
NumericItem = GenItem {
	moniker = NumericItemMkr;
	identifier = DTF_DECIMAL;
}
QuotesItem = GenItem {
	moniker = QuotesItemMkr;
	identifier = DTF_QUOTES;
}


/* Keep examples together! */

IntlExampleGroup = GenInteraction {
	moniker = "Examples";
	children = IntlExample,  IntlExample2, IntlExample3, 
		   IntlExample4, IntlExample5, IntlExample6,
		   IntlExample7;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX
	}
}


IntlExample = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample2 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample3 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample4 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample5 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample6 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

IntlExample7 = GenText {
	genAttributes = readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {	
			word 	DEF_PARA_ATTR_CENTER
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}


IntlEdit = PrefInteraction {
	moniker = 'E', "Edit";
	children = IntlEditTitleGroup, IntlEditInteraction, ExampleText,
			IntlEditOK, IntlEditCancel;
	type = command;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE, 
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR
	}
	
}

IntlEditTitleGroup = GenInteraction {
	children = EditGlyph, IntlEditTitle, FormatGlyph;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		},
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 50>
			SpecHeight <>
			word	3
		}
	}
}

EditGlyph = GenGlyph {
	moniker = "Edit ";
}

IntlEditTitle = GenGlyph {
}

FormatGlyph = GenGlyph {
	moniker = " format:";
}

IntlEditInteraction = GenInteraction {
	children = CurrencyInteraction, DecimalInteraction, 
		   QuotesInteraction, TimeDateInteraction;
}


QuotesInteraction = GenInteraction {
	children = FirstSingleText, LastSingleText, FirstDoubleText, 
		   LastDoubleText;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

FirstSingleText = GenText {
	moniker = "First single quote:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 2>
		SpecHeight <>
	    }
	}
}

LastSingleText = GenText {
	moniker = "Last single quote:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 2>
		SpecHeight <>
	    }
	}
}

FirstDoubleText = GenText {
	moniker = "First double quote:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 2>
		SpecHeight <>
	    }
	}
}

LastDoubleText = GenText {
	moniker = "Last double quote:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 2>
		SpecHeight <>
	    }
	}
}

CurrencyInteraction = GenInteraction {
	children = PlacementGroup, SpaceAroundGroup, SymbolText, \
		   CurrLeadingZeroGroup, CurrencyDigitsValue;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

chunk	NoSpaceMoniker 		= "$1 or 1$";
chunk	SpaceMoniker		= "$ 1 or 1 $";

SpaceAroundGroup = GenInteraction {
	moniker = "Space around symbol:";
	children = SpaceAroundSpin;
}

SpaceAroundSpin = CustomSpin {
	maximum = 1;
	numItems = 2;
	firstMoniker = NoSpaceMoniker;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

chunk	CurrFormat0		= "($199.00)";
chunk	CurrFormat1		= "(199.00$)";
chunk	CurrFormat2		= "-$199.00";
chunk	CurrFormat3		= "$-199.00";
chunk	CurrFormat4		= "$199.00-";
chunk	CurrFormat5		= "-199.00$";
chunk	CurrFormat6		= "199.00-$";
chunk	CurrFormat7		= "199.00$-";

PlacementGroup = GenInteraction {
	moniker = "Symbol & Negative Placement:";
	children = PlacementSpin;
}

PlacementSpin = CustomSpin {
	maximum = 7;
	numItems = 8;
	firstMoniker = CurrFormat0;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

SymbolText = GenText {
	moniker = "Symbol:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 8;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;  
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 8>
		SpecHeight <>
	    }
	}
}



CurrencyDigitsValue = GenValue {
	moniker = "Decimal Digits:";
	minimum = 0;
	maximum = 9;
	destination = PrefIntlRoot;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
}

chunk	LeadingZeroOff		= ".99";
chunk	LeadingZeroOn		= "0.99";

CurrLeadingZeroGroup = GenInteraction {
	moniker = "Leading zero:";
	children = CurrLeadingZeroSpin;
}

CurrLeadingZeroSpin = CustomSpin {
	maximum = 1;
	numItems = 2;
	firstMoniker = LeadingZeroOff;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}


DecimalInteraction = GenInteraction {
	children = ThousandsSepText, DecimalSepText, DecimalDigitsValue,
		   LeadingZeroGroup, ListSeparatorText, MeasurementGroup;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_LEFT_JUSTIFY_MONIKERS
	}
}

ThousandsSepText = GenText {
	moniker = "1000 separator:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;  
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 1>
		SpecHeight <>
	    }
	}
}

DecimalSepText = GenText {
	moniker = "Decimal separator:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;  
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 1>
		SpecHeight <>
	    }
	}
}

ListSeparatorText = GenText {
	moniker = "List separator:";
	textDisplayAttributes = default +singleLineText;
	maxLength = 1;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;  
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 1>
		SpecHeight <>
	    }
	}
}

DecimalDigitsValue = GenValue {
	moniker = "Decimal Digits:";
	minimum = 0;
	maximum = 9;
	destination = PrefIntlRoot;
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
}

LeadingZeroGroup = GenInteraction {
	moniker = "Leading zero:";
	children = LeadingZeroSpin;
}

LeadingZeroSpin = CustomSpin {
	maximum = 1;
	numItems = 2;
	firstMoniker = LeadingZeroOff;
	hints = {
		HINT_LEFT_JUSTIFY_MONIKERS,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 5>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}


TimeDateInteraction = GenInteraction {
#ifdef	DO_PIZZA	/* Koji */
	children = TimeDateEditInteraction, DateLanguageGroup;
#else
	children = TimeDateEditInteraction;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_KEEP_INITIALLY_ONSCREEN
	}
}

TimeDateEditInteraction = GenInteraction {
	moniker = "Format elements:";
	children = FormatElement1, FormatElement2, FormatElement3, 
		   FormatElement4, FormatElement5, FormatElement6, 
		   FormatElement7, FormatElement8;
	hints = {
	    HINT_PLACE_MONIKER_ABOVE, 
	    HINT_ORIENT_CHILDREN_HORIZONTALLY,
	    HINT_ALLOW_CHILDREN_TO_WRAP
	}
}

/* DO NOT REARRANGE!  dateTokenTable depends on it.  */

chunk	NoneMoniker	= " ";
#ifdef	DO_PIZZA	/* Koji */
chunk	LBMoniker	= "Getuyobi  ";
chunk	SBMoniker	= "(Getu)  ";
#endif
chunk	LWMoniker	= "Monday    ";
chunk	SWMoniker	= "Mon       ";
chunk	LDMoniker	= "9th (date)";
chunk	SDMoniker	= "9   (date)";
chunk	ZDMoniker	= "09  (date)";
chunk	PDMoniker	= " 9  (date)";
chunk	LMMoniker	= "March     ";
chunk	SMMoniker	= "Mar       ";
chunk	NMMoniker	= "3  (month)";
chunk	ZMMoniker	= "03 (month)";
chunk	PMMoniker	= " 3 (month)";
chunk	LYMoniker	= "1994      ";
chunk	SYMoniker	= "94        ";
#ifdef	DO_PIZZA	/* Koji */
chunk	LGMoniker	= "Heisei6   ";
chunk	SGMoniker	= "H6        ";
#endif
chunk	NoneMoniker2	= "             ";
chunk	APMoniker	= "am           ";
chunk	APMoniker3	= "AM           ";
chunk	HHMoniker	= "8  (12 hr)";
chunk	ZHMoniker	= "08 (12 hr)";
chunk	SHMoniker	= " 8 (12 hr)";
chunk	HHMoniker24	= "8  (24 hr)";
chunk	ZHMoniker24	= "08 (24 hr)";
chunk	SHMoniker24	= " 8 (24 hr)";
chunk	MMMoniker2	= "5  (min)  ";
chunk	ZMMoniker2	= "05 (min)  ";
chunk	SMMoniker2	= " 5 (min)  ";
chunk	SSMoniker	= "4  (sec)  ";
chunk	ZSMoniker	= "04 (sec)  ";
chunk	PSMoniker	= " 4 (sec)  ";


/*
 *  Keep the following element values together.  The preference manager assumes
 *  that they're grouped together.  And don't add any monikers, text, etc. to
 *  them aren't already defined.  (Yes, I'm a dork.)
 */

FormatElement1 = GenText {
	textDisplayAttributes = default +singleLineText;
	maxLength = "MAX_SEPARATOR_LENGTH";
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_PIXELS, SEPARATOR_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

FormatElement2 = CustomSpin {
	firstMoniker = NoneMoniker;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS,11>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

FormatElement3 = GenText {
	textDisplayAttributes = default +singleLineText;
	maxLength = "MAX_SEPARATOR_LENGTH";
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_PIXELS, SEPARATOR_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

FormatElement4 = CustomSpin {
	maximum = "DATE_TOKEN_COUNT";
	numItems = "DATE_TOKEN_COUNT+1";
	firstMoniker = NoneMoniker;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

FormatElement5 = GenText {
	textDisplayAttributes = default +singleLineText;
	maxLength = "MAX_SEPARATOR_LENGTH";
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_PIXELS, SEPARATOR_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}


FormatElement6 = CustomSpin {
	maximum = "DATE_TOKEN_COUNT";
	numItems = "DATE_TOKEN_COUNT+1";
	firstMoniker = NoneMoniker;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

FormatElement7 = GenText {
	textDisplayAttributes = default +singleLineText;
	maxLength = "MAX_SEPARATOR_LENGTH";
	applyMsg = MSG_PREF_INTL_DIALOG_UPDATE_CURRENT;
	destination = PrefIntlRoot;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_PIXELS, SEPARATOR_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

FormatElement8 = CustomSpin {
	maximum = "DATE_TOKEN_COUNT";
	numItems = "DATE_TOKEN_COUNT+1";
	firstMoniker = NoneMoniker;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}

#ifdef	DO_PIZZA	/* Koji */
DateLanguageGroup = GenItemGroup {
	applyMsg = MSG_PREF_INTL_DATE_SELECT_LANGUAGE;
	destination = PrefIntlRoot;	
	children = DateLanguageJapanese, DateLanguageEnglish;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
}

DateLanguageJapanese = GenItem {
	moniker = "Japanese";
	identifier = TRUE;
}

DateLanguageEnglish = GenItem {
	moniker = "English";
	identifier = FALSE;
}
#endif

ExampleText = GenText {
	genAttributes = readOnly;
	moniker = "Example:";
	textDisplayAttributes = default +singleLineText;
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, EXAMPLE_TEXT_WIDTH>
		SpecHeight <>
	    }
	}
}

chunk	EnglishSystem		= "English";
chunk	MetricSystem		= "Metric";

MeasurementGroup = GenInteraction {
	moniker = "Measurement system:";
	children = MeasurementSpin;
}

MeasurementSpin = CustomSpin {
	maximum = 1;
	numItems = 2;
	firstMoniker = EnglishSystem;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 7>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PREF_INTL_DIALOG_UPDATE_CURRENT
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
	destination = PrefIntlRoot;	
}


IntlEditOK = GenTrigger {
	moniker = "OK";
	action = MSG_PREF_INTL_EDIT_APPLY, PrefIntlRoot;
	/* no signalInteractionComplete, done manually */
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR
	}
}

IntlEditCancel = GenTrigger {
	/* moniker set by specific UI */
	action = MSG_PREF_INTL_DIALOG_RESET, PrefIntlRoot;
	genAttributes = signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

#ifdef DO_PIZZA	/* Gengo Dialog box */
DefineGengoSummons = PrefGengoInteraction {
	moniker = 'G', "Define Gengo";
	children =
		GengoList,
		GengoItemInteraction,
		AddGengoTrigger,
		DeleteGengoTrigger,
		CloseGengoTrigger;
	type = properties;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_INTERACTION_FAST_RESPONSE_PROPERTIES,
		HINT_CENTER_CHILDREN_HORIZONTALLY
#ifdef PRODUCT_NDO2000
		,ATTR_GEN_HELP_CONTEXT {
		    char "dbDefineGengo",0
		}
#endif
	}
}

CloseGengoTrigger = GenTrigger {
	moniker = 'C', "Close";
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_DISMISS
		},
		HINT_SEEK_REPLY_BAR
	}
}

GengoList = GenDynamicList {
	moniker = "Currently installed Gengos:";
	genStates = default +enabled;
	behaviorType = exclusiveNone;
	numSelections = 0;
	numItems = 0;
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_LIST_SELECTED;
	queryMsg = MSG_PREF_GENGO_REQUEST_LIST_MONIKER;
	hints = {
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

GengoItemInteraction = GenInteraction {
	children = GengoLongNameText, GengoShortNameText,
		GengoYearValue, GengoMonthValue,
		GengoDayValue;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

GengoLongNameText = GenText vardataReloc {
	moniker = "Long Gengo Name:";
	text = "";
	textDisplayAttributes = default +singleLineText;
	maxLength = "GENGO_LONG_NAME_LENGTH";
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_ITEM_CHANGED;
	hints = {
	    ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
		I_OPTR AddGengoTrigger
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, GENGO_LONG_NAME_LENGTH>
		SpecHeight <>
	    }
	}
}

GengoShortNameText = GenText vardataReloc {
	moniker = "Short Gengo Name:";
	text = "";
	textDisplayAttributes = default +singleLineText;
	maxLength = "GENGO_SHORT_NAME_LENGTH";
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_ITEM_CHANGED;
	hints = {
	    ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS {
		I_OPTR AddGengoTrigger
	    },
	    HINT_FIXED_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, GENGO_SHORT_NAME_LENGTH>
		SpecHeight <>
	    }
	}
}

GengoYearValue = GenValue {
	moniker = "Starting Year:";
	value = 1995;
	minimum = LOW_YEAR;
	maximum = HIGH_YEAR;
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_ITEM_CHANGED;
}

GengoMonthValue = GenValue {
	moniker = "Starting Month:";
	value = 1;
	minimum = LOW_MONTH;
	maximum = HIGH_MONTH;
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_ITEM_CHANGED;
}

GengoDayValue = GenValue {
	moniker = "Starting Day:";
	value = 1;
	minimum = LOW_DAY;
	maximum = HIGH_DAY;
	destination = DefineGengoSummons;
	applyMsg = MSG_PREF_GENGO_ITEM_CHANGED;
}

AddGengoTrigger = GenTrigger {
	moniker = 'A', "Add Gengo";
	genStates = default -enabled;
	action = MSG_PREF_GENGO_ADD, DefineGengoSummons;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

DeleteGengoTrigger = GenTrigger {
	moniker = 'D', "Delete Gengo";
	genStates = default -enabled;
	action = MSG_PREF_GENGO_DELETE, DefineGengoSummons;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}
#endif /* DO_PIZZA */

end	PrefIntlUI;

start	Strings, data;


visMoniker PrefIntlTextMoniker = "International";

visMoniker PrefIntlMonikerList = list {
		PrefIntlTextMoniker,
		PrefIntlHCMoniker,
		PrefIntlLCMoniker,
		PrefIntlLMMoniker,
		PrefIntlLCGAMoniker
}

#if DO_DBCS
chunk badSeparatorString = data {
	wchar	'The decimal and list separators must be '
	wchar	'different.\r\rError Code: PR-04', 0
}

chunk badFormatString = data {
        wchar    'Your format cannot contain two months, days,'
        wchar    ' or years.\r\rError Code: PR-05', 0
}

chunk noAMPMString = data {
        wchar    'You cannot use a 12 hour time format without '
        wchar    'an \"am\" and \"pm.\"\r\rError Code: PR-06', 0
}
#else
chunk badSeparatorString = data {
	byte	'The decimal and list separators must be '
	byte	'different.\r\rError Code: PR-04', 0
}

chunk badFormatString = data {
        byte    'Your format cannot contain two months, days,'
        byte    ' or years.\r\rError Code: PR-05', 0
}

chunk noAMPMString = data {
        byte    'You cannot use a 12 hour time format without '
        byte    'an \"am\" and \"pm.\"\r\rError Code: PR-06', 0
}
#endif

chunk formatChangeConfirmation = "Some of your format changes may not take effect until the system software is shut down and restarted.  Do you want to shut down and restart right now?";

chunk	inText = {in}
chunk	cmText = {cm}

#ifdef DO_PIZZA	/* Koji */
chunk	JpDateSeparator1 = data {
	wchar	"Nen ", 0;
}
chunk	JpDateSeparator2 = data {
	wchar	"Gatu ", 0;
}
chunk	JpDateSeparator3 = data {
	wchar	"Ka ", 0;
}
chunk	UsDateSeparator1 = data {
	wchar	", ", 0;
}
chunk	UsDateSeparator2 = data {
	wchar	" ", 0;
}

/* Gengo warning messages */
chunk badAddGengoString = data {
        wchar    'You cannot add new Gengo before an existing '
        wchar    'year.\r\rError Code: PR-10', 0
}

chunk badDeleteGengoString = data {
        wchar    'You cannot delete the pre-defined Gengo '
        wchar    'before Heisei.\r\rError Code: PR-11', 0
}

chunk badGengoItemString = data {
        wchar    'You cannot define a Gengo without long-name '
        wchar    'and short-name, or the date is incorrect.'
	wchar	 '\r\rError Code: PR-13', 0
}
#endif	/* DO_PIZZA */

end	Strings;
