/*
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved

*
 * PROJECT:	PC GEOS 
 * MODULE:	
 * FILE:	preflf.ui
 *
 * AUTHOR:	Chris Boyke
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *      chrisb	2/ 8/93   	Initial version.
 *	JimG	3/8/94		Added support for "editable text"
 *
 * DESCRIPTION:
 *
 *	UI for the Look & Feel module of preferences.
 *
 * 	$Id: preflf.ui,v 1.1 97/04/05 01:29:22 newdeal Exp $
 *
 */


/*
 * Header files and ArtWork
 */

#include "generic.uih"
#include "config.uih"

#ifdef GPC_VERSION
#include "Art/mkrPrefGPC.ui"
#else
#include "Art/mkrPrefLF.ui"
#endif

/*__------------------------------------------------------------------------
	PRODUCT CONSTANTS
---------------------------------------------------------------------------*/

#define _NIKE	0

/*
 * Class declarations
 */
 
class	PrefMinuteValue = PrefValue {
}

class	PrefWidthValue = PrefValue {
}

class	PrefLFDialog = PrefDialog {
}


class	PrefFontItemGroup = PrefItemGroup {
	targetSampleText = optrComp : null;
	writeCategory = nptrComp : null;
	writeFontIDKey = nptrComp : null;
	writeFontSizeKey = nptrComp : null;
	writeToSystemDefaults = byteComp : "FALSE";
	mirroredObject = nptrComp : null;
}

class	PrefLFSameBooleanGroup = PrefBooleanGroup {
}

/*
 * Begin UI description
 */

start	PrefLFUI;


PrefLFTitleGroup = GenInteraction {
	children =
		PrefLFTitle,
		PrefLFHelp;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

PrefLFTitle = TitledGlyph {
	moniker = list {
		PrefLFTextMoniker,
#ifdef GPC_VERSION
		PrefGPCMoniker
#else
		PrefLFHCMoniker,
		PrefLFLCMoniker,
		PrefLFLMMoniker,
		PrefLFLCGAMoniker
#endif
	}
}

PrefLFRoot = PrefLFDialog {
	moniker = "Look & Feel";
	type = properties;
	attributes = default +modal;
	visibility = dialog;
	genStates = default -usable;
	children = PrefLFTitleGroup,
		   PrefLFSubgroup, 
#ifdef GPC_VERSION
	           PrefTriggerGroup,
		   WizardStartupItemGroup;
#else
		   WizardStartupItemGroup;
#endif
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_INTERACTION_RELATED_PROPERTIES,
#ifndef GPC_VERSION
		HINT_INTERACTION_COMPLEX_PROPERTIES,
#endif
		HINT_NO_WIDER_THAN_CHILDREN_REQUIRE,
		ATTR_GEN_HELP_CONTEXT {
			char "dbLook&Feel",0
		} 
	}
}

#ifdef GPC_VERSION
PrefTriggerGroup = GenInteraction {
    children = PrefLFOK, PrefLFClose;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}

PrefLFOK = GenTrigger {
    moniker = 'C', "Change";
    genStates = default -enabled;
    genAttributes = signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_APPLY
	}
    }
}

PrefLFClose = GenTrigger {
    moniker = 'D', "Don't Change";
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    word IC_DISMISS
	}
    }
}
#endif

PrefLFHelp = GenText {
	genAttributes = readOnly;
	text = "Use these options to configure the look & feel of your applications.";
	hints = {
		  HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 50>
			SpecHeight <>
		  },
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}


PrefLFSubgroup = PrefInteraction {
	children = PrefLFComp1, 
		   PrefLFComp2;
	hints = {
		 HINT_ORIENT_CHILDREN_HORIZONTALLY,
		 HINT_NO_WIDER_THAN_CHILDREN_REQUIRE,
		 HINT_NO_TALLER_THAN_CHILDREN_REQUIRE
		}
}

#if 0
PrefLFSubgroup = PrefInteraction {
	children = PrefLFComp1, PrefLFComp2;
	hints = {
		 HINT_ORIENT_CHILDREN_VERTICALLY,
		 HINT_NO_WIDER_THAN_CHILDREN_REQUIRE
		}
}

PrefLFComp1 = PrefInteraction {
	children = PrefLFFontGroup, PrefLFEditableFontGroup;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

PrefLFComp2 = PrefInteraction {
	children = AutosaveGroup, OverstrikeModeItemGroup;
	hints = {
		HINT_DIVIDE_WIDTH_EQUALLY,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif

PrefLFComp1 = PrefInteraction {
	children = 
		   PrefLFFontGroup, 
		   AutosaveGroup,
		   PenWidthGroup;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

PrefLFComp2 = PrefInteraction {
	children = 
		  PrefLFEditableFontGroup, 
		  OverstrikeModeItemGroup;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}


PrefLFFontGroup = PrefInteraction {
        moniker = "Font Size";
	children = PrefLFFontItemGroup, PrefLFSampleText;
#if DO_PIZZA
	genStates = default -usable;
#endif
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		ATTR_PREF_REQUIRED_FEATURES {
			word mask PMF_OTHER
		},
	}
}

PrefLFEditableFontGroup = PrefInteraction {
        moniker = "Editable Text Size";
	children = PrefLFEditableFontItemGroup,
		   PrefLFEditableFontSameAsSystemGroup,
		   PrefLFSampleEditableText;
#if DO_PIZZA
	genStates = default -usable;
#endif
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		ATTR_PREF_REQUIRED_FEATURES {
			word mask PMF_OTHER
		},
	}
}

PrefLFEditableFontSameAsSystemGroup = PrefLFSameBooleanGroup {
	children = PrefLFEditableFontSameAsSystemItem;
	applyMsg = MSG_PREFLF_SAME_BOOLEAN_GROUP_UPDATE;
	destination = PrefLFEditableFontSameAsSystemGroup;
	hints = {
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word MSG_PREFLF_SAME_BOOLEAN_GROUP_UPDATE
		}
	}
}
	
PrefLFEditableFontSameAsSystemItem = GenBoolean {
	moniker = "Same as system text size";
	identifier = "mask PLFSBS_SAME_AS_SYSTEM_TEXT_SIZE";
}

PrefLFFontItemGroup = PrefFontItemGroup vardataReloc {
	selection = FID_SIZE_SMALL;
	numSelections = 1;
	prefAttrs = default +rebootIfChanged, +saveIfChanged;
        moniker = "The size of the system text is:";
	children = SmallFontItem, MediumFontItem, LargeFontItem;
	destination = PrefLFFontItemGroup;
	applyMsg = MSG_PREF_FONT_ITEM_GROUP_APPLY;
	mirroredObject = PrefLFEditableFontItemGroup;
	targetSampleText = PrefLFSampleText;
	writeCategory = "ui";
	writeFontIDKey = "fontid";
	writeFontSizeKey = "fontsize";
	writeToSystemDefaults = "TRUE";
	hints = {
		ATTR_PREF_REBOOT_STRING {
			UN_OPTR fontSizeString;
		},
		HINT_PLACE_MONIKER_ABOVE,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui",0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "fontSize",0
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG	{
			word MSG_PREF_FONT_ITEM_GROUP_APPLY
		}
	}
}

SmallFontItem = GenItem {
	moniker = "Small";
	identifier = FID_SIZE_SMALL;
}

MediumFontItem = GenItem {
	moniker = "Medium";
	identifier = FID_SIZE_MEDIUM;
}

LargeFontItem = GenItem {
	moniker = "Large";
	identifier = FID_SIZE_LARGE;
}

PrefLFSampleText = GenText {
	genAttributes = readOnly;
#ifdef GPC_VERSION
	text = "This is an example of text in the selected font size.";
#else
	text = "Sample text in selected font size.";
#endif
	hints = {
		ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
		     word DEF_CHAR_ATTR_FONT_SIZE(VTDF_BERKELEY, VTDS_10)
		},
		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 200>
			SpecHeight <SST_PIXELS, 4*FID_SIZE_LARGE>
		}
	}
}

PrefLFEditableFontItemGroup = PrefFontItemGroup vardataReloc {
	selection = FID_SIZE_SMALL;
	numSelections = 1;
	prefAttrs = default +rebootIfChanged, +saveIfChanged;
        moniker = "The size of editable text is:";
	children = EditableSmallFontItem, EditableMediumFontItem,
		   EditableLargeFontItem;
	destination = PrefLFEditableFontItemGroup;
	applyMsg = MSG_PREF_FONT_ITEM_GROUP_APPLY;
	mirroredObject = PrefLFFontItemGroup;
	targetSampleText = PrefLFSampleEditableText;
	writeCategory = "ui";
	writeFontIDKey = "editableTextFontID";
	writeFontSizeKey = "editableTextFontsize";
	writeToSystemDefaults = "FALSE";
	hints = {
		ATTR_PREF_REBOOT_STRING {
			UN_OPTR fontSizeString;
		},
		HINT_PLACE_MONIKER_ABOVE,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui",0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "editableTextFontsize",0
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG	{
			word MSG_PREF_FONT_ITEM_GROUP_APPLY
		}
	}
}

EditableSmallFontItem = GenItem {
	moniker = "Small";
	identifier = FID_SIZE_SMALL;
}

EditableMediumFontItem = GenItem {
	moniker = "Medium";
	identifier = FID_SIZE_MEDIUM;
}

EditableLargeFontItem = GenItem {
	moniker = "Large";
	identifier = FID_SIZE_LARGE;
}

PrefLFSampleEditableText = GenText {
	genAttributes = readOnly;
	text = "Sample text in selected font size.";
	hints = {
		ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR {
		     word DEF_CHAR_ATTR_FONT_SIZE(VTDF_BERKELEY, VTDS_10)
		},
		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 200>
			SpecHeight <SST_PIXELS, 4*FID_SIZE_LARGE>
		}
	}
}

#if 0

PrefLFStartupItemGroup = PrefItemGroup {
	moniker = "When GEOS starts, automatically start up in:";
	numSelections  = 1;
	selection = 0;
	children = StartupRoom0Item,
			StartupRoom1Item,
			StartupRoom2Item,
			StartupRoom3Item;
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "welcome",0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "startupRoom",0
		}
	}
}

StartupRoom0Item = GenItem {
	moniker = "Welcome screen";
	identifier = 0;
}

StartupRoom1Item = GenItem {
	moniker = "Intro";
	identifier = 1;
}

StartupRoom2Item = PrefStringItem {
	moniker = "Beginner";
	identifier = 2;
}

StartupRoom3Item = PrefStringItem {
	moniker = "Advanced";
	identifier = 3;
}
#endif

WizardStartupItemGroup = PrefItemGroup {
	genStates = default -usable;
	moniker = "Automatically start up in:";
	numSelections  = 1;
	selection = 0;
	children = WizardStartupRoom0Item,
			WizardStartupRoom1Item,
			WizardStartupRoom2Item;

	hints = {
		HINT_DRAW_IN_BOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "startup",0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "startupRoom",0
		}
	}
}

WizardStartupRoom0Item = GenItem {
	moniker = "Startup screen";
	identifier = 0;
}

WizardStartupRoom1Item = GenItem {
	moniker = "Guided";
	identifier = 2;
}

WizardStartupRoom2Item = PrefStringItem {
	moniker = "Unguided";
	identifier = 3;
}

AutosaveGroup = PrefInteraction vardataReloc {
	moniker = "Document Safeguarding";
	children = AutosaveEnableItemGroup, AutosaveSpin;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		},
		 HINT_CENTER_CHILDREN_HORIZONTALLY, 
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui",0
		},
		ATTR_PREF_REBOOT_STRING {
			UN_OPTR autosaveString;
		}
	}
}

AutosaveEnableItemGroup = PrefItemGroup {
	numSelections  = 1;
	selection = TRUE;
	moniker = 'S',"Safeguarding:";
	children = AutosaveEnable, AutosaveDisable;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_KEY {
			char "autosave",0
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <TRUE,AutosaveSpin>
		},
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN
	}
}

AutosaveEnable = GenItem {
	moniker = "On";
	identifier = TRUE;
}

AutosaveDisable = GenItem {
	moniker = "Off";
	identifier = FALSE;
}

AutosaveSpin = PrefMinuteValue {
	moniker = 'T',"Time (minutes):";
	value = 1;
	minimum = 1;
	maximum = 18;
	increment = 1;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "autosaveTime",0
		}
	}
}

OverstrikeModeItemGroup = PrefItemGroup {
	moniker = "Overstrike mode";
	numSelections  = 1;
	selection = FALSE;
	children = OverstrikeModeEnable, 
		OverstrikeModeDisable;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "ui",0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char "overstrikeMode",0
		},
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN
	}
}

OverstrikeModeEnable = GenItem {
	moniker = "Via insert key";
	identifier = TRUE;
}

OverstrikeModeDisable = GenItem {
	moniker = "Always disabled";
	identifier = FALSE;
}


PenWidthGroup = PrefInteraction vardataReloc {
	genStates = default -usable;
	moniker = "Ink Thickness";
	children = PenWidthSpin;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX,
		HINT_CUSTOM_CHILD_SPACING {
			SpecSizeSpec <SST_PIXELS, 1>
		},
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "system",0
		},
		ATTR_PREF_REBOOT_STRING {
			UN_OPTR penWidthString;
		}
	}
}

PenWidthSpin = PrefWidthValue {
	moniker = "Thickness:";
	value = 1;
	minimum = 1;
	maximum = 5;
	increment = 1;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char "penWidth",0
		}
	}
}

end	PrefLFUI;

start	Strings, data;


chunk fontSizeString = "font size";
chunk autosaveString = "document safeguarding parameters";

chunk penWidthString = data {
	byte	'pen width parameters', 0
}

visMoniker PrefLFTextMoniker = "Look & Feel";

visMoniker PrefLFMonikerList = list {
		PrefLFTextMoniker,
#ifdef GPC_VERSION
		PrefGPCMoniker
#else
		PrefLFHCMoniker,
		PrefLFLCMoniker,
		PrefLFLMMoniker,
		PrefLFLCGAMoniker
#endif
}

chunk fontChangeString = "Since the font size has changed, the system will reboot, and all currently running applications will need to be restarted.  Do you wish to proceed?";
end	Strings;












