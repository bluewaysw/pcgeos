/***************************************************************************
 *
 *	File-Tool-Library
 *	Module: SelectDirOrFileDialogClass
 *	(c) by RABE-Soft 12/99
 *
 * 	Note: Comments were translated from German to English with AI assistance
 *	and were not checked in detail. Therefore, they may occasionally sound a bit odd.
 *
 ***************************************************************************/
@include <stdapp.goh>
#include <fileEnum.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fileEnum.h>
#include <file.h>

@include "rsftool.goh"
@include "UI/toolui.goh"
@include "Main/ftlocals.goh"
@include "Main/macros.goh"

@classdecl SelectDirOrFileDialogClass;

/*###########################################################################
 #	Implementation of the methods
 ###########################################################################*/


/*--------------------- MSG_SDOF_SEL_DIR_NOTIFICATION ---------------------
 *	Parameter	void	(word	entryNum,
 *				GenFileSelectorEntryFlags entryFlags);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_SEL_DIR_NOTIFICATION  {
char    fullPath[PATH_BUFFER_SIZE];
optr	fsel, child;


	if ( entryFlags & GFSEF_OPEN ) {
		return;
		}
	fsel = @GetChildOptr(DIALOG_CHILD_FILE_SELECTOR);

	/* Build selection string and display it */
	FileToolGetFileSelectorFullPath(fullPath,fsel,TRUE);

	child = @GetChildOptr(DIALOG_CHILD_PATH_TEXT);
	@call child::MSG_VIS_TEXT_REPLACE_ALL_PTR(fullPath,0);

	}

/*--------------------- MSG_SDOF_SEL_FILE_NOTIFICATION ---------------------
 *	Parameter	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_SDOF_SEL_FILE_NOTIFICATION;
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_SEL_FILE_NOTIFICATION  {
char    fullPath[PATH_BUFFER_SIZE],
	statusBuffer[40];
FileLongName	selection;
optr	fsel, child, okTrigger, customTrigger, statusText;

	okTrigger = @GetChildOptr(DIALOG_CHILD_OK_TRIGGER);

	if ( entryFlags & GFSEF_OPEN ) {
		@send okTrigger::MSG_GEN_TRIGGER_SEND_ACTION(FALSE);
		return;
		}

	customTrigger = @GetChildOptr(DIALOG_CHILD_CUSTOM_TRIGGER);
	fsel = @GetChildOptr(DIALOG_CHILD_FILE_SELECTOR);
	statusText = @GetChildOptr(DIALOG_CHILD_STATUS_TEXT);

	if ( (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
	    && !(entryFlags & GFSEF_NO_ENTRIES) ) {
		@send okTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send customTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@call fsel::MSG_GEN_FILE_SELECTOR_GET_SELECTION(selection);
		FilePushDir();
		FileToolSetCurrentPathFromFileSelector(fsel);
		FileToolPrintDateAndSize(statusBuffer,selection);
		FilePopDir();
		@call statusText::MSG_VIS_TEXT_REPLACE_ALL_PTR(statusBuffer,0);
		}
	else	{
		*statusBuffer = 0;
		@call statusText::MSG_VIS_TEXT_REPLACE_ALL_PTR(statusBuffer,0);
		@send okTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		if ( pself->SDI_customFileOnly)
			@send customTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}

	/* Build selection string and display it */
	FileToolGetFileSelectorFullPath(fullPath,fsel,TRUE);

	child = @GetChildOptr(DIALOG_CHILD_PATH_TEXT);
	@call child::MSG_VIS_TEXT_REPLACE_ALL_PTR(fullPath,0);

	}
/*--------------------- MSG_SDOF_SET_INFO_TEXT ---------------------
 *	Task:	Enable and assign the info text
 *	Parameter	void	(void *text, Boolean isOptr );
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_SET_INFO_TEXT {
optr child;
	child = @GetChildOptr(DIALOG_CHILD_INFO_TEXT);
	if ( isOptr ) @call child::MSG_VIS_TEXT_REPLACE_ALL_OPTR((optr)text,0);
		else  @call child::MSG_VIS_TEXT_REPLACE_ALL_PTR(text,0);
	@call child::MSG_GEN_SET_USABLE(VUM_NOW);
	}
/*--------------------- MSG_SDOF_ENABLE_CANCEL_TRIGGER ---------------------
 * 	Task:	Enable cancel trigger
 *	Parameter	void	();
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_ENABLE_CANCEL_TRIGGER  {
optr child;
	child = @GetChildOptr(DIALOG_CHILD_CANCEL_TRIGGER);
	@call child::MSG_GEN_SET_USABLE(VUM_NOW);
	}
/*--------------------- MSG_SDOF_ENABLE_CUSTOM_TRIGGER ---------------------
 *	Task:	Assign and enable custom trigger
 *	Parameter	void	(char * moniker,Boolean enableOnlyIfFileSelected);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_ENABLE_CUSTOM_TRIGGER  {
optr child;
	child = @GetChildOptr(DIALOG_CHILD_CUSTOM_TRIGGER);
	if ( enableOnlyIfFileSelected ) {
		@call child::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		pself->SDI_customFileOnly = TRUE;
		}
	@call child::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(moniker, VUM_NOW);
	@call child::MSG_GEN_SET_USABLE(VUM_NOW);
	}

/*--------------------- MSG_SDOF_SET_FSEL_TO_PATH ---------------------
 *	Task:	Set file selector to path
 *	Parameter	void	(char *path, DiskHandle dh);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_SET_FSEL_TO_PATH {
optr child;
	child = @GetChildOptr(DIALOG_CHILD_FILE_SELECTOR);
	@call child::MSG_GEN_PATH_SET(path,dh);
	}

/*--------------------- MSG_SDOF_GET_FILE_SELECTOR ---------------------
 *	Task:	Return file selector optr so main routine can modify or query it
 *	Parameter	optr	(void);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_GET_FILE_SELECTOR {
optr child;
	child = @GetChildOptr(DIALOG_CHILD_FILE_SELECTOR);
	return child;
	}

/*--------------------- MSG_SDOF_CONFIGURE_INPUT_FILENAME_TEXT ---------------
 *	Task:	Configure input text for filename
 *	Parameter	void	(char *startText,
 *				FTInputFileNameInputFlags inputFlags,
 *				Boolean visMonikerNewFileName);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass,  MSG_SDOF_CONFIGURE_INPUT_FILENAME_TEXT {
optr textObj;
char fileName[50]; /* 32 + "Copy of " + reserve */

   textObj = @GetChildOptr(DIALOG_CHILD_INPUT_TEXT);

   if ( inputFlags & IFNIF_DOS_FILE ) {
	@send textObj::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	@send textObj::MSG_META_DELETE_VAR_DATA(ATTR_GEN_TEXT_LEGAL_FILENAMES);
	@send textObj::MSG_META_ADD_VAR_DATA(
			ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES, 0, 0);
	@send textObj::MSG_VIS_TEXT_SET_MAX_LENGTH(8+1+3);
	@send textObj::MSG_GEN_SET_USABLE(VUM_NOW);
	}

   if ( inputFlags & IFNIF_AUTO_RENAME ) {
	char *dotPtr;
	if (inputFlags & IFNIF_DOS_FILE ) {
		// FILENAME.EXT --> FILENAME
		strcpy(fileName, startText);
		dotPtr = FileToolFindLastDotChar(fileName);
		if (dotPtr) *dotPtr = 0;  // shorten to body
		// 1. FILENAME ---> FILENA_1
		if (strlen(fileName) >= 6 ) {
			fileName[6] = '_';
			fileName[7] = '1';
			fileName[8] = 0;
			}
		  else  {
			dotPtr = strchr(fileName, 0);	// temporary use
			dotPtr[0] = '_';
			dotPtr[1] = '1';
			dotPtr[2] = 0;
			}
		// 2. Possibly re-attach extension
		dotPtr = FileToolFindLastDotChar(startText);
		if (dotPtr ) strcat(fileName, dotPtr);
		}

	  else	{	// GEOS files. That’s a bit easier.
		MemLock(HandleOf(@CopyOfText));
		strcpy(fileName, LMemDeref(@CopyOfText));
		MemUnlock(HandleOf(@CopyOfText));
		strcat(fileName, startText);	// max 32 + "Copy of", < 50
		if ( strlen(fileName) > 32 ) {
			fileName[31] = '~';
			fileName[32] = 0;	// shorten to FileLongName
			}
		}
	}
   else strcpy(fileName, startText);

   @call textObj::MSG_VIS_TEXT_REPLACE_ALL_PTR(fileName, 0);

   if ( inputFlags & IFNIF_SELECT_DOS_BODY) {
	int len;
	char *p = FileToolFindLastDotChar(fileName); // pointer to '.'
	if ( p && (p>fileName) ) // body exists
		{
		len = p - fileName;		// without the dot
		@send textObj::	MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, len);
		}
	   // otherwise: select all
	   else @send textObj::MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, strlen(fileName));
	}

     if ( inputFlags & IFNIF_SELECT_ALL )
		@send textObj::MSG_VIS_TEXT_SELECT_RANGE_SMALL(0, strlen(fileName));
/**/

   if ( visMonikerNewFileName ) {
	@send textObj::MSG_GEN_USE_VIS_MONIKER(ChunkOf(NewNameInputTextMoniker), VUM_NOW);
	}

   }

/*--------------------- MSG_SDOF_CONFIGURE_INPUT_FILENAME_UI ---------------
 *	Task:	Configure input text for filename
 *	Parameter	void	(FTInputFileNameFlags inputFlags,
 *				FTInputFileNameDialogType dialogType);
 ---------------------------------------------------------------------------*/
/*
@method SelectDirOrFileDialogClass,  MSG_SDOF_CONFIGURE_INPUT_FILENAME_UI {
optr textObj;
	textObj = @GetChildOptr(DIALOG_CHILD_INPUT_TEXT);

	switch ( inputFlags ) {
	case FTSFF_SAVE_AS:
		@send textObj::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(@SaveFileAsTextMoniker, VUM_NOW);
		@send oself::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(@SaveFileAsTitelMoniker, VUM_NOW);
		break;
	}
*/
/*--------------------- MSG_SDOF_GET_INPUT_TEXT ---------------------
 *	Task:        Retrieve text entered by user
 *	Parameter	void	(char *text);
 ---------------------------------------------------------------------------*/
@method SelectDirOrFileDialogClass, MSG_SDOF_GET_INPUT_TEXT {
optr textObj;
	textObj = @GetChildOptr(DIALOG_CHILD_INPUT_TEXT);
	@call textObj::MSG_VIS_TEXT_GET_ALL_PTR(text);
	}


/*---------------------  ---------------------
 *
 ---------------------------------------------------------------------------*/

/*###########################################################################
 #
 ###########################################################################*/
