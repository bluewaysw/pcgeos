COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:    	Navigation Library	
MODULE:		Documentation
FILE:		README

AUTHOR:		Alvin Cham, Sep 26, 1994

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	9/26/94   	Initial revision


DESCRIPTION:
	Documentation for the navigation library

	$Id: README,v 1.2.3.1 97/03/29 06:04:28 canavese Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Contents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Contents
Synopsis
Todo
The Navigate Controller (class hierarchy)
How to use (the library's and application's responsibilities)
Misc notes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Synopsis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The navigate library provides a convenient way of including some navigation
features that an application may find useful.  These features include 
handling the manipulations (go backward/forward of entries) of a history 
list, jumping back to the main title display entry, and/or providing 
handlers that can scan (backward/forward) pages within each entry items. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Todo
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(1)  As for now, we are using the same set of icons for both 'go forward' 
and 'go backward'  This library still needs an artist to create a 
'go forward' icon.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The Navigate Controller (class hierarchy)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

			GenControlClass
			       	|
			       	|
				|
			NavigateControlClass

A controller class is supported for this library in order to provide the
application that uses this library a more flexible and convenient way to
use this library.  Because it was built as a controller, an application can
include the applicable features and filter out extraneous ones as it wishes.
We call this class the "NavigateControlClass."  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
How to use (the library's and application's responsibilities)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The NavigateControlClass has simplified many things for the application.
However, to make this library generic, there is a limit as to what the
controller can provide.   Thus, there is a boundary that separates between
the library's responsibilies and the application's responsibilities.

The Library Side:
-----------------

In general, the library handles messages that are triggered by the built-in
UI (accompanied with the controller).  It then remembers the data that are 
passed in from the application and stores it into a chunk array (app. users
don't need to know this) ,sends notification after a change in the entry 
has taken place, and finally spits out relevant information that the 
application would need.  There are basically 2 types of information that the
application needs: 

(1) Information about a history list entry

This is done by calling the controller's output object with message 
MSG_META_NOTIFY_WITH_DATA_BLOCK, and the information is all copied into the
block

(2) Information about the page triggers

This is done by calling the controller's output object with message
MSG_META_NOTIFY, and the information is copied into the word of data.

For more details about the messages that the library handles, please refer 
to file Include/navigate.def (or CInclude/navigate.goh for goc).

The Application Side:
---------------------

Several major things that the application must/should provide:

1)  The output object of the controller.  This object is the one that the 
library will talk to after a notification has been sent and received.  The
application must provide this information because the library has no 
way of knowing what the application wants to do with the library.

2)  As in the case of managing the history list, the application must 
provide the information to pass into the history list entry.  This includes
the moniker for the entry, and also a chunk handle that has the information
of the entry.  This way, it's up to the application to determine what kind
of information that the chunk will contain.  It can either be a structure 
or it can be as simple as an integer.  But the application is responsible 
in filling in the contents of the chunk, because all the library does is 
storing that chunk handle, and after notification has been received, it 
would spit out the chunk handle corresponding to the history list entry 
selected.

3)  As in the case of managing the main title display entry (the home page),
the application should set things up so that the information regarding this
entry will be inserted as the first entry of the history list.  Other than
that, way of inserting is identical to the case of managing the history
list.

4)  As in the case of managing pages within an entry, the application 
has more responsibilities.  Because of different ways of handling pages
in different applications, the library can only send a message to the output
object (after receiving notification), telling the application which button
has been triggered and allow the application to handle whatever necessary
suitable.

5)  The output object of the controller needs to subclass the following 
messages in order to receive information sent from the library:

	(a)  To obtain history entry information:

	It needs to subclass MSG_META_NOTIFY_WITH_DATA_BLOCK, and the data
	is stored in the block that is passed along with the message.  There 
	are two different types of notifications though.  One is 
	GWNT_NAVIGATE_ENTRY_CHANGE, this will be sent out whenever there is 
	a change on the navigate list.  Another one is 
	GWNT_NAVIGATE_DELETE_ENTRY, this will be sent every time when there 
	is an entry that got deleted.  This one is intended for 
	memory management of the application, allowing the application to 
	free certain materials, since the entry is no longer in the list.

	(b)  To obtain information concerning the "page" triggers:

	It needs to subclass MSG_META_NOTIFY, and the data (telling whether
	the "previous trigger" or the "next page" trigger has been 
	activated) is passed along with the message.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Misc notes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(1)  There is a sample application in /pcgeos/acham/Appl/nav

(2)  When inserting an entry, make sure that the moniker parameter will not
overflow a buffer of size 'FileLongName' (which is 64 characters) 








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The Navigate Library
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Contents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Contents
Synopsis
The Navigate Controller (class hierarchy)
How to use (the library's and application's responsibilities)
Misc notes

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Synopsis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The navigate library provides a convenient way of including some navigation
features that an application may find useful.  These features include 
handling the manipulations (go backward/forward of entries) of a history 
list, jumping back to the main title display entry, and/or providing 
handlers that can scan (backward/forward) pages within each entry items. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
The Navigate Controller (class hierarchy)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

			GenControlClass
			       	|
			       	|
				|
			NavigateControlClass

A controller class is supported for this library in order to provide the
application that uses this library a more flexible and convenient way to
use this library.  Because it was built as a controller, an application can
include the applicable features and filter out extraneous ones as it wishes.
We call this class the "NavigateControlClass."  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
How to use (the library's and application's responsibilities)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The NavigateControlClass has simplified many things for the application.
However, to make this library generic, there is a limit as to what the
controller can provide.   Thus, there is a boundary that separates between
the library's responsibilies and the application's responsibilities.

The Library Side:
-----------------

In general, the library handles messages that are triggered by the built-in
UI (accompanied with the controller).  It then remembers the data that are 
passed in from the application and stores it into a chunk array (app. users
don't need to know this) ,sends notification after a change in the entry 
has taken place, and finally spits out relevant information that the 
application would need.  There are basically 2 types of information that the
application needs: 

(1) Information about a history list entry

This is done by calling the controller's output object with message 
MSG_META_NOTIFY_WITH_DATA_BLOCK, and the information is all copied into the
block

(2) Information about the page triggers

This is done by calling the controller's output object with message
MSG_META_NOTIFY, and the information is copied into the word of data.

For more details about the messages that the library handles, please refer 
to file Include/navigate.def (or CInclude/navigate.goh for goc).

The Application Side:
---------------------

Several major things that the application must/should provide:

1)  The output object of the controller.  This object is the one that the 
library will talk to after a notification has been sent and received.  The
application must provide this information because the library has no 
way of knowing what the application wants to do with the library.

2)  As in the case of managing the history list, the application must 
provide the information to pass into the history list entry.  This includes
the moniker for the entry, and also a chunk handle that has the information
of the entry.  This way, it's up to the application to determine what kind
of information that the chunk will contain.  It can either be a structure 
or it can be as simple as an integer.  But the application is responsible 
in filling in the contents of the chunk, because all the library does is 
storing that chunk handle, and after notification has been received, it 
would spit out the chunk handle corresponding to the history list entry 
selected.

3)  As in the case of managing the main title display entry (the home page),
the application should set things up so that the information regarding this
entry will be inserted as the first entry of the history list.  Other than
that, way of inserting is identical to the case of managing the history
list.

4)  As in the case of managing pages within an entry, the application 
has more responsibilities.  Because of different ways of handling pages
in different applications, the library can only send a message to the output
object (after receiving notification), telling the application which button
has been triggered and allow the application to handle whatever necessary
suitable.

5)  The output object of the controller needs to subclass the following 
messages in order to receive information sent from the library:

	(a)  To obtain history entry information:

	It needs to subclass MSG_META_NOTIFY_WITH_DATA_BLOCK, and the data
	is stored in the block that is passed along with the message.  There 
	are two different types of notifications though.  One is 
	GWNT_NAVIGATE_ENTRY_CHANGE, this will be sent out whenever there is 
	a change on the navigate list.  Another one is 
	GWNT_NAVIGATE_DELETE_ENTRY, this will be sent every time when there 
	is an entry that got deleted.  This one is intended for 
	memory management of the application, allowing the application to 
	free certain materials, since the entry is no longer in the list.

	(b)  To obtain information concerning the "page" triggers:

	It needs to subclass MSG_META_NOTIFY, and the data (telling whether
	the "previous trigger" or the "next page" trigger has been 
	activated) is passed along with the message.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Misc notes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(1)  There is a sample application in /pcgeos/acham/Appl/nav

(2)  When inserting an entry, make sure that the moniker parameter will not
overflow a buffer of size 'FileLongName' (which is 64 characters) 








