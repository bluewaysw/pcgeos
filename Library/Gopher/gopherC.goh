/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Gopher Library
MODULE:		GopherClass definitions
FILE:		gopherC.goh

AUTHOR:		Alvin Cham, Aug  8, 1994

ROUTINES:
	Name			Description
	----			-----------
	MSG_GOPHER_INITIALIZE	
				Initializes the states of the gopher object

	MSG_GOPHER_FETCH_NEW_DISPLAY
				Performs tasks that need to be done before 
				doing the fetching of the next item.

	MSG_GOPHER_SHUT_DOWN
				Shuts down the gopher object for the 
				application

	MSG_GOPHER_RECV_DATA
				Receiving the incoming stream of data from
				the communication medium

	MSG_GOPHER_PARSE_ITEM
				Parses a stream of data (coming in from
				certain communication medium) and organizes
				the data into a well-structured format so
				that the gopher object would know how to 
				display it to the user

	MSG_GOPHER_DISPLAY	
				A Handler for displaying a fetched item from
				the server, which in turn sends messages to
				other handlers to handle specific item types  

	MSG_GOPHER_DISPLAY_DIRECTORY
				Handler for displaying a directory item

	MSG_GOPHER_DISPLAY_TEXT_FILE
				Handler for displaying a text item

	MSG_GOPHER_DISPLAY_GOPHER_PLUS_INFO
				Handler for displaying gopher+ information

	MSG_GOPHER_CONSTRUCT_REQUEST
				Constructs a client's request into a gopher
				language, something the server would know
				how to respond.  

	MSG_GOPHER_SEND_REQUEST
				Actual sending the client's request through
				the communication channel.

	MSG_GOPHER_CHANNEL_SET_UP	
				Handler for setting up the communication
				channel

	MSG_GOPHER_CHANNEL_TEAR_DOWN	
				Handler for tearing down the communication
				channel

	MSG_GOPHER_SET_LANGUAGE
				set the language used

	MSG_GOPHER_GET_LANGUAGE
				get the language used

	MSG_GOPHER_SET_DATA_BUFFER_CHUNK
				set the chunk for the data buffer

	MSG_GOPHER_GET_DATA_BUFFER_CHUNK
				get the chunk for the data buffer

	MSG_GOPHER_SET_DATA_BUFFER_POS
				set the position for the data buffer

	MSG_GOPHER_GET_DATA_BUFFER_POS
				get the position for the data buffer

	MSG_GOPHER_SET_INFO_BLOCK
				set the information block handle

	MSG_GOPHER_GET_INFO_BLOCK
				get the information block handle

	MSG_GOPHER_SET_MENU_ITEM_ARRAY_CHUNK
				set the chunk for menu item array

	MSG_GOPHER_GET_MENU_ITEM_ARRAY_CHUNK
				get the chunk for menu item array

	MSG_GOPHER_SET_CUR_MENU_TYPE
				set the current menu type

	MSG_GOPHER_GET_CUR_MENU_TYPE
				get the current menu type

	MSG_GOPHER_SET_CACHE_FILE_ARRAY_CHUNK
				set the chunk for cache file array

	MSG_GOPHER_GET_CACHE_FILE_ARRAY_CHUNK
				get the chunk for cache file array

	MSG_GOPHER_SET_CACHE_FILE_INDEX
				set the index for cache file array

	MSG_GOPHER_GET_CACHE_FILE_INDEX
				get the index for cache file array

	MSG_GOPHER_SET_CACHE_FILE_ID
				set the ID for cache file array

	MSG_GOPHER_GET_CACHE_FILE_ID
				get the ID for cache file array

	MSG_GOPHER_SET_CUR_CACHE_FILE_NAME
				set the current cache file name

	MSG_GOPHER_GET_CUR_CACHE_FILE_NAME_CHUNK
				get the chunk of the current cache file name

	MSG_GOPHER_INC_ITEM_PARSED
				increment the # of item parsed

	MSG_GOPHER_SET_EOF
				set the EOF flag

	MSG_GOPHER_GET_EOF
				get the EOF flag

	MSG_GOPHER_PLUS_UPDATE_INFO_ATTR
				update various fields for the gopher+ +INFO
				attributes

	MSG_GOPHER_PLUS_GET_INFO_ATTR
				get various fields for the gopher+ +INFO
				attributes

	MSG_GOPHER_PLUS_UPDATE_ADMIN_ATTR
				update various fields for the gopher+ +ADMIN
				attributes

	MSG_GOPHER_PLUS_GET_ADMIN_ATTR
				get various fields for the gopher+ +ADMIN
				attributes

	MSG_GOPHER_PLUS_SET_VIEW_CHUNK
				set the chunk for the +VIEW array

	MSG_GOPHER_PLUS_GET_VIEW_CHUNK
				get the chunk for the +VIEW array

	MSG_GOPHER_PLUS_UPDATE_ABSTRACT_ATTR
				update the gopher+ +ABSTRACT attributes

	MSG_GOPHER_PLUS_GET_ABSTRACT_ATTR
				get the gopher+ +ABSTRACT attributes

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	8/ 8/94   	Initial version.

DESCRIPTION:
	This file contains the class definitions of the GopherClass.

	$Id: gopherC.goh,v 1.1 97/04/04 18:04:54 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@ifndef __GOPHER_CLASS_GOH
@define __GOPHER_CLASS_GOH

@deflib gopher

#include <gopher.h>
@include <stdapp.goh>
#include <Ansi/string.h>
#include <Ansi/stdlib.h>

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Procedure prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/* -------------------------utility ------------------------ */
extern ChunkHandle GopherInitCacheFileArray(MemHandle);
extern void GopherUpdateCacheFileArray(char *, optr);
extern void GopherDeleteCacheFileAtIndex(MemHandle, ChunkHandle, word);
extern Boolean GopherCacheFileFound(word, optr);
extern word GopherCacheStreamToFile(byte *, word, optr, const char *);
extern ChunkHandle GopherCreateStringChunk(optr, byte *, word);
extern FileHandle GopherCacheFileSetUp
	(const char *, dword *, FileAccessFlags);
extern word GopherCacheFileEnd(FileHandle);
extern MemHandle GopherCopyFileToBlock(FileHandle, word);
extern MemHandle GopherAllocBlockWithLock(word);
extern word GopherPlusFindBlockType(byte *, GopherPlusItemAttrInfoType *); 
extern word GopherLookForNextLine(byte *);
extern word GopherFindTokenLength(byte *);
extern MemHandle GopherGetCachedFileLine(word, const char *);
extern void GopherPlusFreeInfoChunks(optr);
extern void GopherLanguageMapToString(GopherLanguageType, char *);

/* --------------------- gopher parsing ------------------------- */
word GopherScanNextTabPos(byte *);
word GopherDirectorySeparatorFound(byte *, word, optr);
word GopherExtractVisibleName(byte *, optr, GopherItem *);
word GopherExtractSelectorString(byte *, optr, GopherItem *);
word GopherExtractHostname(byte *, optr, GopherItem *);
word GopherExtractPortNumber(byte *, optr, GopherItem *);
word GopherExtractGopherPlusInfo(byte *, optr, GopherItem *);
word GopherParseDirectoryItem(byte *, optr, GopherItem *);
void GopherParseDirectory(byte *, dword, optr);
void GopherLineFeedToEnter(byte *, word);
void GopherShiftBufferContent(byte *, word, word);

/* ------------------------ gopher+ parsing ------------------------*/
void GopherParseGopherPlus(byte *, dword, optr);

/* the +INFO block */
word GopherPlusParseInfo(byte *, optr);

/* the +ADMIN block */
word GopherPlusExtractEmailAddr(byte *, optr, GopherPlusItemAttrAdmin *);
word GopherPlusExtractModDate(byte *, optr, GopherPlusItemAttrAdmin *);
word GopherPlusExtractModDateInfo(byte *, word);
word GopherPlusParseAdmin(byte *, optr);

/* the +VIEW block */
word GopherPlusParseView(byte *, optr);

/* the +ABSTRACT block */
word GopherPlusParseAbstract(byte *, optr);

/* ------------------- construction request procedures --------------------*/
void GopherConstructNormalRequest(word, optr);
void GopherConstructGetAttrInfoRequest(word, optr);
void GopherConstructGopherPlusRequest(word, word, optr);

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Gopher Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@class	GopherClass, MetaClass;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Messages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 * Initializing the states of the gopher object.  Establishment of the
 * communication between the client and server should be done here, in 
 * one of its subclasses, GopherSerialClass or GopherSocketClass, depending
 * on the communication medium.  Initializing the chunk array of item
 * menu, the data buffer, and the cache file array are the default behaviors
 * for this message in GopherClass.  Application can intercept this message 
 * to initialize other attributes of the gopher object.
 *
 * Context:		Message meant to be sent when the application using
 *			it first opens.
 * Source:		Any object
 * Destination:		Gopher object
 * Interception:	likely to be subclassed 
 */
@message	void
	MSG_GOPHER_INITIALIZE();

/*
 * The default action for this message is to free the information stored for
 * the last display, and re-initializes spaces to store the information for 
 * the next display.  Its subclasses will intercept the message and perform
 * further additional duties, esp. managing the UI, etc....
 *
 * Context:		Message meant to be sent when a new response has been 
 *			received by the client
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	likely to be subclassed
 */
@message	void
	MSG_GOPHER_FETCH_NEW_DISPLAY(GopherParseItemType newType);

/*
 * Shutting down the states of the gopher object.  Freeing the memory
 * of the cache file created, and freeing the information block is being done
 * here.  Also, for its subclasses, disconnecting from the gopher server 
 * should also be done here. Additional tasks can be handled by its subclasses.
 *
 * Context:		Message meant to be sent when the application using
			the library closes.
 * Source:		Any object
 * Destination:		Gopher object
 * Interception:	likely to be subclassed
 */
@message	void
	MSG_GOPHER_SHUT_DOWN();

/*
 * Receiving the stream of data from a communication channel.  This message 
 * is only used by its subclasses, depending on the type of communication
 * medium that the application is using.  Its subclasses would have to
 * handle reading in the stream of bytes themselves.  There is no default
 * behavior here in the GopherClass.
 *
 * Context:		Message meant to be sent to receive data
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by its subclasses.
 */
@message void 
	MSG_GOPHER_RECV_DATA(byte *data, word bytesRead);

/*
 * Parsing a string sent from the server and convert it into a well-
 * organized structure.  
 *
 * Context:		Message meant to be sent after receiving a server 
 *			response
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	unlikely to be intercepted by its subclasses, 
 *			unless the application wants to parse some kind of
 *			user-defined gopher items or there are other
 *			tasks that the application wants to handle
 */
@message	word
	MSG_GOPHER_PARSE_ITEM(byte* buffer, 
			      dword numBytes, 
			      const char* filename,
			      Boolean cached);

/*
 * Handler for displaying a newly fetched item from the server.  Based on the
 * item type, it will then call other message handlers for displaying 
 * specific type of items.
 *
 * Context:		Message meant to be sent when we have finished 
 *			fetching a response from the server.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Can be intercepted by its subclasses, if the 
 *			application wants to handle extra tasks (extra 
 *			menu types) when displaying.
 */
@message	void	MSG_GOPHER_DISPLAY();

/*
 * Handler for displaying a directory item.
 *
 * Context:		Message meant to be sent when we have finished 
 *			fetching a directory item.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by its subclasses to perform
 *			the actual task
 */
@message	void	MSG_GOPHER_DISPLAY_DIRECTORY();

/*
 * Handler for displaying a text file.
 *
 * Context:		Message meant to be sent when we have finished 
 *			fetching a text file.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by its subclasses to perform
 *			the actual task.
 */
@message	void	MSG_GOPHER_DISPLAY_TEXT_FILE();

/*
 * Handler for displaying gopher+ information.
 *
 * Context:		Message meant to be sent when we have finished 
 *			fetching a gopher+ information response.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by its subclasses to perform
 *			the actual task.
 */
@message	void	MSG_GOPHER_DISPLAY_GOPHER_PLUS_INFO();

/*
 * Constructing the request sent by the client into a stream so that the
 * gopher server would understand.  Need to pass in the type of request and 
 * also the selection on the item menu.
 *
 * Context:		Message meant to be sent after a user command
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	unlikely to be intercepted by its subclasses,
 * 			unless the application (the server side) can handle
 *			some new type of selector strings
 */
@message	void
	MSG_GOPHER_CONSTRUCT_REQUEST
		(GopherClientRequest requestRecord, 
		 word itemSelection,
		 word viewSelection);

/*
 * This message is sent after the client's request has been constructed into
 * something that the gopher server understands.  Two direct subclasses of
 * the GopherClass, GopherSocketClass and GopherSerialClass will subclass 
 * this message, since they will have different ways of sending the client's
 * request to the gopher server.
 *
 * Context:		Message to be send after constructing a client command
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	must be intercepted by its subclasses.
 */
@message	void
	MSG_GOPHER_SEND_REQUEST(char* request, char* hostname, word port);

/*
 * This message serves as the handler for setting up the communication
 * channel for its subclasses.  It would either set up a socket or a serial
 * channel, depending  on its subclass.  
 *
 * Context:		Gopher communication API
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by its subclasses.
 */
@message	void
	MSG_GOPHER_CHANNEL_SET_UP();

/*
 * This message serves as the handler for tearing down the communication
 * channel for its subclasses.  It would either tear down a socket or a 
 * serial channel, depending on its subclass.
 *
 * Context:		Gopher communication API
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	Must be intercepted by one of its subclasses.
 */
@message	void
	MSG_GOPHER_CHANNEL_TEAR_DOWN();

/* get's and set's */

/*
 * Set the language that gopher is using.
 *
 * Context:		Gopher languages
 * Source:		Any object/App UI
 * Destination:		Gopher object
 * Interception:	unlikely
 */
@message void MSG_GOPHER_SET_LANGUAGE(GopherLanguageType language);

/*
 * Get the language that gopher is using.
 *
 * Context:		Gopher languages
 * Source:		Any object/App UI
 * Destination:		Gopher object
 * Interception:	unlikely
 */
@message GopherLanguageType MSG_GOPHER_GET_LANGUAGE();

/*
 * Get the infomation block for the object
 *
 * Context:		Gopher information storage 
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	MemHandle
	MSG_GOPHER_GET_INFO_BLOCK();

/*
 * Set the information block of the object.
 *
 * Context:		Gopher information storage
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_INFO_BLOCK(MemHandle block);

/*
 * set the position to where we should read the next character 
 *
 * Context:		Message involving the data being received from the
 *			communication channel.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	unlikely to be subclassed 
 */
@message void 
	MSG_GOPHER_SET_DATA_BUFFER_POS(word position);

/*
 * get the position to where we should read the next character 
 *
 * Context:		Message involving the data being received from the
 *			communication channel.
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	unlikely to be subclassed 
 */
@message word
	MSG_GOPHER_GET_DATA_BUFFER_POS();

/*
 * Set the chunk of the data buffer
 *
 * Context:		Message involving the data being received from the
 *			communication channel.
 *			client. 
 * Source:		Gopher object	
 * Destination:		Gopher object
 * Interception:	unlikely to be subclassed 
 */
@message void 
	MSG_GOPHER_SET_DATA_BUFFER_CHUNK(ChunkHandle chunk);

/*
 * get the chunk of the text buffer
 *
 * Context:		Message involving the data being received from the
 *			communication channel.
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	unlikely to be subclassed 
 */
@message ChunkHandle 
	MSG_GOPHER_GET_DATA_BUFFER_CHUNK();

/*
 * Get the Chunk of the chunk array that stores all of the information
 * about the menu items.
 *
 * Context:		Gopher menu item chunk array.
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	ChunkHandle
	MSG_GOPHER_GET_MENU_ITEM_ARRAY_CHUNK();

/*
 * Set the chunk of the chunk array that stores all of the information
 * about the menu items.
 *
 * Context:		Gopher menu item chunk array
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_MENU_ITEM_ARRAY_CHUNK(ChunkHandle array);

/*
 * Get the current menu item type.
 *
 * Context:		Gopher menu information
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	GopherParseItemType
	MSG_GOPHER_GET_CUR_MENU_TYPE();

/*
 * Set the current menu item type
 *
 * Context:		Gopher menu information
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_CUR_MENU_TYPE(GopherParseItemType type);

/*
 * set the chunk for the cache file array
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_CACHE_FILE_ARRAY_CHUNK(ChunkHandle cacheFileArray);

/*
 * get the chunk for the cache file array 
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	ChunkHandle
	MSG_GOPHER_GET_CACHE_FILE_ARRAY_CHUNK();

/*
 * set the index for the cache file array
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_CACHE_FILE_INDEX(word newIndex);

/*
 * get the index for the cache file array 
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	word
	MSG_GOPHER_GET_CACHE_FILE_INDEX();

/*
 * increment the ID for cache file
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_INC_CACHE_FILE_ID();

/*
 * get the next available ID for a cache file
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	word
	MSG_GOPHER_GET_CACHE_FILE_ID();

/*
 * set the filename of the current menu cached file
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_CUR_CACHE_FILE_NAME(const char *filename);

/*
 * get the chunk that has the filename of the current menu cached file
 *
 * Context:		Gopher cached file module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	ChunkHandle
	MSG_GOPHER_GET_CUR_CACHE_FILE_NAME_CHUNK();

/*
 * Increment the number of parsed items 
 *
 * Context:		Gopher parsing module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_INC_ITEM_PARSED();

/*
 * Set the EOF flag.
 *
 * Context:		Gopher parsing module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_SET_EOF(Boolean EOF_flag);

/*
 * Get the EOF flag.
 *
 * Context:		Gopher parsing module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	Boolean
	MSG_GOPHER_GET_EOF();

/*
 * Set the chunk handle for the view chunk array
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_SET_VIEW_CHUNK(GopherPlusViewChunkArray chunk);

/*
 * Get the chunk handle for the view chunk array
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	GopherPlusViewChunkArray
	MSG_GOPHER_PLUS_GET_VIEW_CHUNK();

/*
 * Update the various fields for a +INFO attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_UPDATE_INFO_ATTR(GopherPlusItemAttrInfo record);

/*
 * Obtain the various fields for a +INFO attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_GET_INFO_ATTR(GopherPlusItemAttrInfo *record);

/*
 * Update the various fields for a +ADMIN attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_UPDATE_ADMIN_ATTR(GopherPlusItemAttrAdmin record);
/*
 * Obtain the various fields for a +ADMIN attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_GET_ADMIN_ATTR(GopherPlusItemAttrAdmin *record);

/*
 * Update the various fields for a +ABSTRACT attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_UPDATE_ABSTRACT_ATTR(GopherPlusItemAttrAbstract chunk);

/*
 * Obtain the various fields for a +ABSTRACT attribute of a gopher+ item
 *
 * Context:		Gopher+ attribute module
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message	void
	MSG_GOPHER_PLUS_GET_ABSTRACT_ATTR(GopherPlusItemAttrAbstract *chunk);

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Instance data and defaults
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * Context:  	Language
 * Usage: 	Keep track of the luaguage one is using.
 */
	@instance	GopherLanguageType	GI_language = GLT_ENGLISH;

/*
 * Context:	Information storage for the object
 * Usage:	keep the MemHandle of the chunks for the instance data 
 */
	@instance	MemHandle	GI_infoBlock;

/*
 * Context:  	Receiving data from incoming stream
 * Usage: 	Keeps the offset to where we should append incoming data
 */
	@instance	word	GI_dataBufferPos = 0;

/*
 * Context:  	Receiving data from incoming stream
 * Usage: 	Store the data that are being received
 */
	@instance	ChunkHandle	GI_dataBuffer = 0;

/*
 * Context:	Information storage for the object
 * Usage:	Store the attributes of each menu item
 */
	@instance	ChunkHandle	GI_menuItemArray = 0;

/*
 * Context:	Menu type
 * Usage:	know which menu type to expect (displaying, parsing, etc)
 */
	@instance	GopherParseItemType	GI_curMenuType 
							= GPIT_DIRECTORY;

/*
 * Context:	Information storage for cache files
 * Usage:	Keep track of existing cache files 
 */
	@instance	ChunkHandle	GI_cacheFileArray = 0;

/*
 * Context:	Cache file array management
 * Usage:	keeps the index of where we should add next in the array.
 */
	@instance	word	GI_cacheFileIndex = 0;

/*
 * Context:	Cache file ID, cache file array storage
 * Usage:	Keep each cache file ever created unique
 */
	@instance	word	GI_cacheFileID = 0;

/*
 * Context:	Stores the file name of the current menu being display
 * Usage:	Easy item description retrieval in cached file.
 */
	@instance	ChunkHandle	GI_curCacheFileName = 0;

/*
 * Context:	Status of parsing
 * Usage:	notify the application if an item has just been finish parsing
 */
	@instance	word		GI_itemParsed = 0;

/*
 * Context:  	Status of parsing
 * Usage: 	Keeps the status of whether we have reached the end of a server
 *		response.
 */
	@instance	Boolean	GI_eof = TRUE;

/*
 * Context:	The INFO field of a gopher+ attribute item.	
 * Usage:	Use to store that information.
 */
	@instance	GopherPlusItemAttrInfo	GI_info = 
				{GPIT_FILE, 0, 0, 0, 0, 0};

/*
 * Context:	The ADMIN field of a gopher+ attribute item.	
 * Usage:	Use to store that information.
 */
	@instance	GopherPlusItemAttrAdmin	GI_admin =
				{0, {0,0,0,0,0,0}};

/*
 * Context:	The VIEW field of a gopher+ attribute item.	
 * Usage:	A chunk array of type GopherPlusItemAttrView will be used 
 *		to store that information.
 */
	@instance	GopherPlusViewChunkArray	GI_view = 0;

/*
 * Context:	The ABSTRACT field of a gopher+ attribute item.	
 * Usage:	Use to store that information.
 */
	@instance	GopherPlusItemAttrAbstract	GI_abstract = 0;

@endc	/* GopherClass */

@endlib	/* gopher */

@endif /* __GOPHER_CLASS_GOH */






