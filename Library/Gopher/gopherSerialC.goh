/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Gopher Client	
MODULE:		Gopher Library -- serial testing
FILE:		gopherSerialC.goh

AUTHOR:		Alvin Cham, Aug 22, 1994

ROUTINES:
	Name			Description
	----			-----------

	MSG_GOPHER_SERIAL_SET_DRIVER
				- set the serial driver	

	MSG_GOPHER_SERIAL_GET_DRIVER
				- get the serial driver	

	MSG_GOPHER_SERIAL_SET_PORT_OPEN
				- set the status of the serial port

	MSG_GOPHER_SERIAL_GET_PORT_OPEN
				- get the status of the serial port

	MSG_GOPHER_SERIAL_SET_COM_PORT
				- set the com port

	MSG_GOPHER_SERIAL_GET_COM_PORT
				- get the com port

	MSG_GOPHER_SERIAL_SET_BAUD_RATE
				- set the baud rate

	MSG_GOPHER_SERIAL_GET_BAUD_RATE
				- get the baud rate

	MSG_GOPHER_SERIAL_SET_LENGTH
				- set the bit length

	MSG_GOPHER_SERIAL_GET_LENGTH
				- get the bit length

	MSG_GOPHER_SERIAL_SET_PARITY
				- set the parity bit

	MSG_GOPHER_SERIAL_GET_PARITY
				- get the parity bit

	MSG_GOPHER_SERIAL_SET_XSTOP_BITS
				- set the xstop bits

	MSG_GOPHER_SERIAL_GET_XSTOP_BITS
				- get the xstop bits

	MSG_GOPHER_SERIAL_SET_MODE
				- set the mode

	MSG_GOPHER_SERIAL_GET_MODE
				- get the mode

	MSG_GOPHER_SERIAL_SET_FLOW_CONTROL
				- set the flow control

	MSG_GOPHER_SERIAL_GET_FLOW_CONTROL
				- get the flow control

	MSG_GOPHER_SERIAL_SET_MODEM
				- set the modem

	MSG_GOPHER_SERIAL_GET_MODEM
				- get the modem

	MSG_GOPHER_SERIAL_SET_MODEM_STATUS
				- set the modem status

	MSG_GOPHER_SERIAL_GET_MODEM_STATUS
				- get the modem status

	MSG_GOPHER_SERIAL_SET_TIMER_HANDLE
				- set the timer handle

	MSG_GOPHER_SERIAL_GET_TIMER_HANDLE
				- get the timer handle

	MSG_GOPHER_SERIAL_SET_TIMER_ID
				- set the timer ID

	MSG_GOPHER_SERIAL_GET_TIMER_ID
				- get the timer ID

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	8/22/94   	Initial version.

DESCRIPTION:
	This file contains the class definitions of the GopherSerialClass.

	$Id: gopherSerialC.goh,v 1.1 97/04/04 18:04:58 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifndef __GOPHER_SERIAL_CLASS_GOH
#define __GOPHER_SERIAL_CLASS_GOH

@deflib gopher

#include <gopherSerial.h>
@include <gopherC.goh>

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Gopher Serial Class
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@class	GopherSerialClass, GopherClass;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Messages	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * This message sets up the format for our serial communication channel to 
 * function properly. 
 *
 * Context:		Gopher communication API
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	unlikely
 */
@message	void
	MSG_GOPHER_SERIAL_CHANNEL_SET_FORMAT();

/* get's and set's */

/*
 * set the handle for serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_DRIVER(Handle driver);

/*
 * get the handle for the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object
 * Destination:		Gopher object
 * Interception:	none
 */
@message Handle
	MSG_GOPHER_SERIAL_GET_DRIVER();

/*
 * set the serial port open status
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_PORT_OPEN(Boolean status);

/*
 * get the serial port open status
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message Boolean
	MSG_GOPHER_SERIAL_GET_PORT_OPEN();

/*
 * set the com port of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_COM_PORT(word comPort);

/*
 * get the com port of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_COM_PORT();

/*
 * set the baud rate of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_BAUD_RATE(word baudRate);

/*
 * get the baud rate of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_BAUD_RATE();

/*
 * set the length of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_LENGTH(word length);

/*
 * get the length of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_LENGTH();

/*
 * set the parity of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_PARITY(word parity);

/*
 * get the parity of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_PARITY();

/*
 * set the x-stop bits of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_XSTOP_BITS(word xStopBits);

/*
 * get the x-stop bits of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_XSTOP_BITS();

/*
 * set the mode of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_MODE(word mode);

/*
 * get the mode of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_MODE();

/*
 * set the flow control of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_FLOW_CONTROL(word flowControl);

/*
 * get the flow control of the serial driver
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_FLOW_CONTROL();

/*
 * set the serial modem
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_MODEM(word modem);

/*
 * get the serial modem
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_MODEM();

/*
 * set the serial modem status
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_MODEM_STATUS(word modemStatus);

/*
 * get the serial modem status
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_MODEM_STATUS();

/*
 * set the timer handle
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_TIMER_HANDLE(Handle timerHandle);

/*
 * get the timer handle
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message Handle
	MSG_GOPHER_SERIAL_GET_TIMER_HANDLE();

/*
 * set the timer ID
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message void 
	MSG_GOPHER_SERIAL_SET_TIMER_ID(word id);

/*
 * get the timer ID
 *
 * Context:		Message involving the serial testing of the gopher
 *			client. 
 * Source:		Gopher object		
 * Destination:		Gopher object
 * Interception:	none
 */
@message word
	MSG_GOPHER_SERIAL_GET_TIMER_ID();

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	Instance data + defaults
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 * Context:  	The serial driver
 * Usage: 	Needed for serial driver communication establishment
 */
	@instance	Handle	GSI_driver = NullHandle;

/*
 * Context:  	The opening status of serial driver
 * Usage: 	Needed for checking the status of the communication
 */
	@instance	Boolean	GSI_portOpen = FALSE;

/*
 * Context:  	The communication port of serial driver
 * Usage: 	Needed to specify which port to use in serial communication
 */
	@instance	word	GSI_comPort = GOPHER_SERIAL_COM_PORT_DEFAULT;

/*
 * Context:  	The baud rate of serial driver
 * Usage: 	Needed to specify which baud rate to use in serial 
 *		communication
 */
	@instance	word	GSI_baudRate = GOPHER_SERIAL_BAUD_RATE_DEFAULT;

/*
 * Context:  	The length of serial driver
 * Usage: 	Needed to specify which length to use in serial communication
 */
	@instance	word	GSI_length = GOPHER_SERIAL_LENGTH_DEFAULT;

/*
 * Context:  	The parity of serial driver
 * Usage: 	Needed to specify which parity to use in serial communication
 */
	@instance	word	GSI_parity = GOPHER_SERIAL_PARITY_DEFAULT;

/*
 * Context:  	The stop bits of serial driver
 * Usage: 	Needed to specify which stop bits to use in serial 
 *		communication
 */
	@instance	word	GSI_xStopBits =	
					GOPHER_SERIAL_XSTOP_BITS_DEFAULT;

/*
 * Context:  	The mode of serial driver
 * Usage: 	Needed to specify which mode to use in serial communication
 */
	@instance	word	GSI_mode = GOPHER_SERIAL_MODE_DEFAULT;

/*
 * Context:  	The flow control of serial driver
 * Usage: 	Needed to specify which flow control to use in 
 *		serial communication
 */
	@instance	word	GSI_flowControl = 
					GOPHER_SERIAL_FLOW_CONTROL_DEFAULT;

/*
 * Context:  	The modem of serial driver
 * Usage: 	Needed to specify which modem to use in serial communication
 */
	@instance	word	GSI_modem = 0; 
					
/*
 * Context:  	The modem status of serial driver
 * Usage: 	Needed to check the modem status for the serial communication
 */
	@instance	word	GSI_modemStatus = 0; 

/*
 * Context:  	The timer of serial driver, for reading
 * Usage: 	Needed to keep the handle of the timer for reading text
 */
	@instance	Handle	GSI_timerHandle	= NullHandle;

/*
 * Context:  	The timer ID of serial driver, for reading
 * Usage: 	Needed to keep the handle of the timer for reading text
 */
	@instance	word	GSI_timerID	= 0;

@endc

@endlib	/* gopher */

#endif /* __GOPHER_SERIAL_CLASS_GOH */






































