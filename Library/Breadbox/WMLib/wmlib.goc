@deflib wmlib

@include <stdapp.goh>
@include <library.h>
@include <compress.h>
@include <Ansi/ctype.h>
@include "wmlib.h"

VMBlockHandle near WMI_CreateLib(
                      VMFileHandle file) ;

void near WMI_ResizeBlockInMem(
              MemHandle mem,
              word newSize) ;

VMBlockHandle near WMI_GetIndex(
                       VMFileHandle file,
                       word lengthWord) ;

void near WMI_SetIndex(
              VMFileHandle file,
              word lengthWord,
              VMBlockHandle index) ;

VMBlockHandle near WMI_CreateBlock(VMFileHandle file) ;

word near WMI_GetBlockSize(
              VMFileHandle file,
              VMBlockHandle block) ;

VMBlockHandle near WMI_GetNextOfBlock(
                       VMFileHandle file,
                       VMBlockHandle block) ;

void near WMI_SetNextOfBlock(
               VMFileHandle file,
               VMBlockHandle block,
               VMBlockHandle next) ;

Boolean near WMI_FindWord(WMParamsStruct *wmStruct, Boolean newSearch) ;

#define WMI_SIZE_BLOCKS 6000

#define BHF_dirty 0x80

typedef struct {
    VMBlockHandle next ;
    word size ;            /* Uncompressed size incl. WMI_BlockHeader */
    word compressedSize ;
} WMI_SavedBlockHeader ;

typedef struct {
    VMBlockHandle next ;
    word size ;            /* Uncompressed size incl. WMI_BlockHeader */
    VMFileHandle  vmFile;
    VMBlockHandle vmBlock;
    word flags;
} WMI_BlockHeader ;

/*=========================================================================*/
MemHandle   currentMemBlock = NullHandle;


void * _export WMI_LockCompressed(
    VMFileHandle file,
    VMBlockHandle block,
    MemHandle *mh )
{
    WMI_SavedBlockHeader* ptr;
    MemHandle mem;
    WMI_BlockHeader* newPtr;


    if ( NullHandle != currentMemBlock )
    {
        newPtr = MemLock( currentMemBlock );
        if (( file == newPtr->vmFile ) && ( block == newPtr->vmBlock ))
        {
            /* The block is already in memory. */
            *mh = currentMemBlock;
            return newPtr;
        }
        else
        {
            /* We need an other block, so free current one. */
            MemFree( currentMemBlock );
        }
    }

    ptr = VMLock( file, block, &mem );
    currentMemBlock = MemAlloc( ptr->size, HF_SWAPABLE, HAF_LOCK );
    newPtr = MemDeref( currentMemBlock );

    newPtr->next = ptr->next;
    newPtr->size = ptr->size;
    newPtr->vmFile  = file;
    newPtr->vmBlock = block;
    newPtr->flags   = 0;

    if ( ptr->size > sizeof( WMI_BlockHeader ) )
    {
        CompressDecompress( (CLF_SOURCE_IS_BUFFER | CLF_DEST_IS_BUFFER |
                            CLF_DECOMPRESS | CLF_MOSTLY_ASCII ),
                            NullHandle,
                            (byte*) ptr + sizeof( WMI_SavedBlockHeader ),
                            ptr->compressedSize,
                            NullHandle,
                            (byte*) newPtr + sizeof( WMI_BlockHeader ));
    }
    VMUnlock( mem );
    *mh = currentMemBlock;
    return newPtr;

} /* WMI_LockCompressed */

/* Compress block if changed, but keep in Memory. */
void _export WMI_UnlockCompressed(
    MemHandle newMem
    )
{
    WMI_BlockHeader* newPtr;
    MemHandle mem;
    WMI_SavedBlockHeader * ptr;
    word size;

    newPtr = MemDeref( newMem );

    if ( BHF_dirty & newPtr->flags )
    {
        ptr = VMLock( newPtr->vmFile, newPtr->vmBlock, &mem );

        ptr->next = newPtr->next;
        ptr->size = newPtr->size;

        if ( newPtr->size > sizeof( WMI_BlockHeader ) )
        {
            MemReAlloc( mem, newPtr->size + 16, 0 );
            ptr = MemDeref( mem );

            size = CompressDecompress( (CLF_SOURCE_IS_BUFFER | CLF_DEST_IS_BUFFER |
                                CLF_MOSTLY_ASCII ),
                                NullHandle,
                                (byte*) newPtr + sizeof( WMI_BlockHeader ),
                                newPtr->size - sizeof( WMI_BlockHeader ),
                                NullHandle,
                                (byte*) ptr + sizeof( WMI_SavedBlockHeader ));
            MemReAlloc( mem, size + sizeof( WMI_SavedBlockHeader ), 0 );
            ptr = MemDeref( mem );
            ptr->compressedSize = size;
        }

        VMDirty( mem );
        VMUnlock( mem );
    }

    /* This is kinda important. -DH 9/2/99 */
    MemUnlock( newMem );

} /* WMI_UnlockCompressed */


void WMI_DirtyCompressed(
    MemHandle   newMem
    )
{
    WMI_BlockHeader* newPtr;

    newPtr = MemDeref( newMem );
    newPtr->flags |= BHF_dirty;

} /* WMI_DirtyCompressed */


/*=========================================================================*/

/*-------------------------------------------------------------------------*/
Boolean _pascal _export WordMatcherCEntry(LibraryCallType ty, GeodeHandle client)
{
    if ( LCT_ATTACH == ty )
    {
        currentMemBlock = NullHandle;
    }
    else if ( LCT_CLIENT_EXIT == ty )
    {
        if ( NullHandle != currentMemBlock )
        {
            /* Just to be sure. */
            MemFree( currentMemBlock );
            currentMemBlock = NullHandle;
        }
    }
    return FALSE;
}

/*-------------------------------------------------------------------------*/
VMBlockHandle near WMI_CreateLib(VMFileHandle file)
{
    VMBlockHandle map ;
    VMBlockHandle *ptr ;
    MemHandle mem ;
    word i, dummy = 0 ;

    map = VMAlloc(file, (WM_MAX_SIZE_WORD+1)*sizeof(VMBlockHandle), 0x10) ;
    ptr = (VMBlockHandle *)VMLock(file, map, &mem) ;
	 for (i=0; i<(WM_MAX_SIZE_WORD+1); i++) {
		  ptr[i] = NullHandle ;
        /* jfh 1/20/04 my compiler doesn't like 1 line for loops */
		  dummy++;
		  }
    VMDirty(mem) ;
    VMUnlock(mem) ;
    VMSetMapBlock(file, map) ;

    return map ;
}
/*-------------------------------------------------------------------------*/
VMBlockHandle near WMI_GetIndex(VMFileHandle file, word lengthWord)
{
    VMBlockHandle map ;
    VMBlockHandle *ptr ;
    MemHandle mem ;
    VMBlockHandle index ;

    if (lengthWord > WM_MAX_SIZE_WORD)
        return NullHandle ;

    map = VMGetMapBlock(file) ;
    if (map == NullHandle)
        map = WMI_CreateLib(file) ;
    ptr = (VMBlockHandle *)VMLock(file, map, &mem) ;
    index = ptr[lengthWord] ;
    VMUnlock(mem) ;

    return index ;
}
/*-------------------------------------------------------------------------*/
void near WMI_SetIndex(VMFileHandle file, word lengthWord, VMBlockHandle index)
{
    VMBlockHandle map ;
    VMBlockHandle *ptr ;
    MemHandle mem ;

    if (lengthWord > WM_MAX_SIZE_WORD)
        return ;

    map = VMGetMapBlock(file) ;
    if (map == NullHandle)
        map = WMI_CreateLib(file) ;
    ptr = (VMBlockHandle *)VMLock(file, map, &mem) ;
    ptr[lengthWord] = index ;
    VMDirty(mem) ;
    VMUnlock(mem) ;
}
/*-------------------------------------------------------------------------*/
VMBlockHandle near WMI_CreateBlock(VMFileHandle file)
{
    VMBlockHandle block ;
    MemHandle mem ;
    WMI_BlockHeader *ptr ;

    block = VMAlloc(file, sizeof(WMI_SavedBlockHeader), 0x10) ;
    ptr = (WMI_BlockHeader *)VMLock(file, block, &mem) ;
    ptr->next = NullHandle ;  /* Clear out next pointer. */
    ptr->size = sizeof( WMI_BlockHeader );
    VMDirty(mem) ;
    VMUnlock(mem) ;

    return block ;
}
/*-------------------------------------------------------------------------*/
word near WMI_GetBlockSize(VMFileHandle file, VMBlockHandle block)
{
    WMI_BlockHeader *header ;
    MemHandle mem ;
    word size ;

    header = (WMI_BlockHeader *)VMLock(file, block, &mem) ;
    size = header->size;
    VMUnlock(mem) ;

    return size ;
}
/*-------------------------------------------------------------------------*/
VMBlockHandle near WMI_GetNextOfBlock(VMFileHandle file, VMBlockHandle block)
{
    VMBlockHandle next ;
    MemHandle mem ;
    WMI_BlockHeader *ptr ;

    ptr = (WMI_BlockHeader *)VMLock(file, block, &mem) ;
    next = ptr->next ;
    VMUnlock(mem) ;

    return next ;
}
/*-------------------------------------------------------------------------*/
void near WMI_ResizeBlockInMem(
              MemHandle mem,
              word newSize)
{
    WMI_BlockHeader *header ;

    /* Go ahead and resize the block in memory. */
    MemReAlloc(mem, newSize, 0) ;
    header = (WMI_BlockHeader *)MemDeref(mem) ;
    header->size = newSize ;
    VMDirty(mem) ;
}
/*-------------------------------------------------------------------------*/
void near WMI_SetNextOfBlock(
              VMFileHandle file,
              VMBlockHandle block,
              VMBlockHandle next)
{
    MemHandle mem ;
    WMI_BlockHeader *ptr ;

    ptr = (WMI_BlockHeader *)VMLock(file, block, &mem) ;
    ptr->next = next ;
    VMDirty(mem) ;
    VMUnlock(mem) ;
}
/*-------------------------------------------------------------------------*/
Boolean near WMI_WordCompare(char *ptr, WMParamsStruct *wmStruct)
{
    word i ;
    word len ;

    len = wmStruct->WMPS_lengthWord ;

    /* Do a character by character search. */
    for (i=0; i<len; i++)  {
        if (wmStruct->WMPS_search[i] != '?')  {
            /* If not a ?, then we have to compare. */
            if (toupper(wmStruct->WMPS_search[i]) != ptr[i])
                return FALSE ;   /* If different upper case chars, quit. */
        }
    }

    /* If we got here, then that must be a match! */
    return TRUE ;
}
/*-------------------------------------------------------------------------*/
word WMAddWord(WMParamsStruct *wmStruct)
{
    word lenWord ;
    VMBlockHandle block ;
    VMBlockHandle next ;
    word maxSize ;
    word blockSize ;
    VMFileHandle file ;
    char *ptr ;
    word i ;
    MemHandle mem ;

    file = wmStruct->WMPS_file ;
    if (file == NullHandle)
		  return (WME_NO_FILE) ;   /* No file, no adding. */

    lenWord = wmStruct->WMPS_lengthWord ;

    /* Make sure we are adding a word of a legal length. */
	 if (lenWord == 0)
		  return (WME_TOO_SMALL);
	 if (lenWord > WM_MAX_SIZE_WORD)
		  return (WME_TOO_BIG);

    /* Make sure we are adding an upper case word. */
    for (i=0; i<lenWord; i++)
        wmStruct->WMPS_search[i] = toupper(wmStruct->WMPS_search[i]) ;

    maxSize = (lenWord * (WMI_SIZE_BLOCKS/lenWord))+sizeof(WMI_BlockHeader) ;
    block = WMI_GetIndex(file, lenWord) ;
    if (block == NullHandle)  {
        /* No words of that size exist.  Create a new block and continue. */
        block = WMI_CreateBlock(file) ;
        WMI_SetIndex(file, lenWord, block) ;
    }

    /* Find a block that can hold another word. Do this by sequential
       following the block chain.  If you get to the end, create a new
       block and follow over to it.  Since that new block is blank, there
       should be room for a new word ... and thus the search finds a block. */
    blockSize = WMI_GetBlockSize(file, block) ;
    while (blockSize >= maxSize)  {
        next = WMI_GetNextOfBlock(file, block) ;
        if (next == NullHandle)  {
            next = WMI_CreateBlock(file) ;
            WMI_SetNextOfBlock(file, block, next) ;
        }
        block = next ;
        blockSize = WMI_GetBlockSize(file, block) ;
    }

    /* General error check here: */
    if (block == NullHandle)
		  return (WME_NO_BLOCK);

    /* Now we have found a block, let's add the word to it. */
    WMI_LockCompressed(file, block, &mem) ;

    /* Expand the block for an additional word size. */
    WMI_ResizeBlockInMem(mem, blockSize+lenWord) ;

    /* Block may have moved, so get where it is now. */
    ptr = (char *)MemDeref(mem) ;
    /* Move to the end of the old block size and the position of where
       the newly added word will start. */
    ptr += blockSize ;
    /* Now copy the word in ... use a quick and dirty copy. */
    for (i=0; i<lenWord; i++)
        *(ptr++) = wmStruct->WMPS_search[i] ;
    /* Note that there has been a change and unlock the block. */
    WMI_DirtyCompressed(mem) ;
    WMI_UnlockCompressed(mem) ;

	 /* We're done. */
	 return (WME_NONE);

}
/*-------------------------------------------------------------------------*/
/* Returned Boolean tells if a word was found or not. */
Boolean near WMI_FindWord(WMParamsStruct *wmStruct, Boolean newSearch)
{
    VMFileHandle file ;
    VMBlockHandle block ;
    MemHandle mem ;
    word lenWord ;
    word blockSize ;
    word offset ;
    char *ptr ;
    word i ;

    file = wmStruct->WMPS_file ;
    if (file == NullHandle)   /* No file, no search. */
        return FALSE ;

    lenWord = wmStruct->WMPS_lengthWord ;

    if (newSearch)  {
        wmStruct->WMPS_currentBlock = WMI_GetIndex(file, lenWord) ;
        wmStruct->WMPS_currentOffset = sizeof(WMI_BlockHeader) ;
        wmStruct->WMPS_searchDone = FALSE ;
    } else {
        /* If we are contining, we had best jump over the currently
           already matching word. */
        wmStruct->WMPS_currentOffset += lenWord ;
    }

    if (wmStruct->WMPS_currentBlock == NullHandle)
        wmStruct->WMPS_searchDone = TRUE ;

    if (wmStruct->WMPS_searchDone)
        return FALSE ;   /* Search is done, no words searched. */

    /* Make local so I don't have to type as much. */
    block = wmStruct->WMPS_currentBlock ;
    offset = wmStruct->WMPS_currentOffset ;

    do {
        /* Find size of current block. */
        blockSize = WMI_GetBlockSize(file, block) ;

        /* If offset is past size of block, let's try finding the
           next block. */
        while (offset >= blockSize)  {
            /* Find the next block */
            block = WMI_GetNextOfBlock(file, block) ;

            /* If its NULL, then we have no more blocks and must quit. */
            if (block == NullHandle)  {
                wmStruct->WMPS_currentBlock = block ;
                wmStruct->WMPS_searchDone = TRUE ;
                return FALSE ;
            }

            /* Otherwise, reset the offset to the start of the block, */
            offset = sizeof(WMI_BlockHeader) ;

            /* and find the size of the block we're now on.  We'll loop
               just in case there are some empty blocks on the list. */
            blockSize = WMI_GetBlockSize(file, block) ;
        }

        ptr = (char *)WMI_LockCompressed(file, block, &mem) ;
        ptr += offset ;   /* Skip to where we need to be. */

        /* Let's now search that block for a match. */
        while (offset < blockSize)  {
            if (WMI_WordCompare(ptr, wmStruct)==TRUE)  {
                /* Copy what we found. */
                for (i=0; i<lenWord; i++)
                    wmStruct->WMPS_found[i] = ptr[i] ;

                /* Yeah! We finally found a word! Clean up everything
                   and return with a positive result. */
                WMI_UnlockCompressed(mem) ;
                /* Be sure to save where we are at. */
                wmStruct->WMPS_currentBlock = block ;
                wmStruct->WMPS_currentOffset = offset ;
                /* We'll flag that we're not sure if there are more words
                   to be found. */
                wmStruct->WMPS_searchDone = FALSE ;
                return TRUE ;
            }
            offset += lenWord ;
            ptr += lenWord ;
        }
        WMI_UnlockCompressed(mem) ;

    } while (1==1) ;

    /* Actually, we'll never get here. */
    /* return FALSE ; */
}
/*-------------------------------------------------------------------------*/
Boolean WMFindWord(WMParamsStruct *wmStruct, Boolean newSearch)
{
    return WMI_FindWord(wmStruct, newSearch) ;
}
/*-------------------------------------------------------------------------*/
void WMRenameWord(WMParamsStruct *wmStruct, Boolean doSearch)
{
    WMParamsStruct renameSearch ;
    word lenWord ;
    word offset ;
    VMBlockHandle block ;
    MemHandle mem ;
    char *ptr ;
    word i ;
    VMFileHandle file ;

    lenWord = wmStruct->WMPS_lengthWord ;
    file = wmStruct->WMPS_file ;

    /* Make a copy so we don't destroy what's already there. */
    renameSearch = *wmStruct ;

    if (doSearch == TRUE)  {
        /* Search for the word. */
        if (WMI_FindWord(&renameSearch, TRUE) == FALSE)
            /* If the word is not found, don't do anything and return. */
            return ;
    }

    /* Make my fingers have a little help and shorten the words. */
    offset = renameSearch.WMPS_currentOffset ;
    block = renameSearch.WMPS_currentBlock ;

    /* Let's rename the word now. */
    ptr = (char *)WMI_LockCompressed(file, block, &mem) ;

    /* Skip to where the word is located. */
    ptr += offset ;

    /* Copy the uppercase version of the word. */
    for (i=0; i<lenWord; i++)
        ptr[i] = toupper(wmStruct->WMPS_found[i]) ;

    /* Now mark the block as changed and unlock it. */
    WMI_DirtyCompressed(mem) ;
    WMI_UnlockCompressed(mem) ;
}
/*-------------------------------------------------------------------------*/
void WMDeleteWord(WMParamsStruct *wmStruct, Boolean doSearch)
{
    WMParamsStruct deleteSearch ;
    word lenWord ;
    word offset ;
    VMBlockHandle block ;
    char *ptr ;
    char *ptr2 ;
    word blockSize ;
    VMFileHandle file ;
    MemHandle mem ;
    word i ;

    lenWord = wmStruct->WMPS_lengthWord ;
    /* Make a copy so we don't destroy what's already there. */
    deleteSearch = *wmStruct ;

    if (doSearch == TRUE)  {
        /* Search for the word. */
        if (WMI_FindWord(&deleteSearch, TRUE) == FALSE)
            /* If the word is not found, don't do anything and return. */
            return ;
    }

    /* Make my fingers have a little help and shorten the words. */
    offset = deleteSearch.WMPS_currentOffset ;
    block = deleteSearch.WMPS_currentBlock ;
    file = deleteSearch.WMPS_file ;

    /* Let's delete the word now. */
    blockSize = WMI_GetBlockSize(file, block) ;
    ptr = (char *)WMI_LockCompressed(file, block, &mem) ;

    /* Skip to where the word is located. */
    ptr += offset ;
    /* Skip over to the data that is to overwrite the word. */
    ptr2 = ptr + lenWord ;

    /* Copy over the word to be deleted. */
    for (i=0; i<(blockSize-offset-lenWord); i++)
        ptr[i] = ptr2[i] ;

    /* Since we deleted the word, we need to shrink the block size. */
    WMI_ResizeBlockInMem(mem, blockSize-lenWord) ;

    /* We need to adjust our last search location if we are to do continued
       searches after deletes. */
    if (wmStruct->WMPS_currentBlock == block)
        if (wmStruct->WMPS_currentOffset >= offset)
            wmStruct->WMPS_currentOffset -= lenWord ;

    /* Now mark the block as changed and unlock it. */
    WMI_DirtyCompressed(mem) ;
    WMI_UnlockCompressed(mem) ;
}
/*-------------------------------------------------------------------------*/

@endlib
