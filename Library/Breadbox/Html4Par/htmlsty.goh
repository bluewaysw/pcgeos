/***********************************************************************
 *
 * PROJECT:       HTML3Par
 * FILE:          htmlsty.goh
 *
 * AUTHOR:    Marcus Grï¿½ber
 *
 * NOTES:         Default style sheet and parsing table for HTML.
 *                Also includes ISO Latin character set and color table.
 *
 ***********************************************************************/

@start StyleResource, data;

@chunk CharStyleDelta vcdNone =        {0,0,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdReset =       {CSD_RESET,0,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdH1 =          {CSD_SIZE,0,7,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH2 =          {CSD_SIZE,0,6,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH3 =          {CSD_SIZE,0,5,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH4 =          {CSD_SIZE,0,4,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH5 =          {CSD_SIZE,0,3,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH6 =          {CSD_SIZE,0,2,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdBold =        {0,0,0,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdItalic =      {0,0,0,{0,0,0,0},TS_ITALIC,0};
@chunk CharStyleDelta vcdUnderline =   {0,0,0,{0,0,0,0},TS_UNDERLINE,0};
@chunk CharStyleDelta vcdStrike =      {0,0,0,{0,0,0,0},TS_STRIKE_THRU,0};
@chunk CharStyleDelta vcdSuperscript = {0,0,0,{0,0,0,0},TS_SUPERSCRIPT,0};
@chunk CharStyleDelta vcdSubscript =   {0,0,0,{0,0,0,0},TS_SUBSCRIPT,0};
@chunk CharStyleDelta vcdBig =         {CSD_SIZE,0,4,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdSmall =       {CSD_SIZE,0,2,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdMono =  {CSD_BASE,CSD_BASE_EXAMPLE,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdNOBR =  {CSD_EXTENDED,0,0,{0,0,0,0},0,VTES_NOWRAP};

/******************************************************************************/

@chunk ParaStyleDelta vpdNone       = {0,0,0,0,0};
@chunk ParaStyleDelta vpdReset      = {PSD_RESET,0,0,0,0};
@chunk ParaStyleDelta vpdPre        = {PSD_SPACING,0,0,0,0};
@chunk ParaStyleDelta vpdHeading    = {PSD_SPACING,0,0,0,
                                       VTPAA_KEEP_PARA_WITH_NEXT};
@chunk ParaStyleDelta vpdCenter     = {PSD_JUSTIFY,0,0,0,
                                       J_CENTER<<VTPAA_JUSTIFICATION_OFFSET};
@chunk ParaStyleDelta vpdBlockquote = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,5*PIXELS_PER_INCH,0,0};
@chunk ParaStyleDelta vpdDefList    = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdDefTerm    = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,VTPAA_KEEP_PARA_WITH_NEXT};
@chunk ParaStyleDelta vpdDefDef     = {PSD_MARGINS_ADD|PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdMenu       = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdListItem   = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdList       = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,
                                       -3*PIXELS_PER_INCH,0};
@chunk ParaStyleDelta vpdUList      = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,-3*PIXELS_PER_INCH,0};

/******************************************************************************/

@chunk HTMLStylesTable HTMLStylesChunk[] =
{
  {"",          OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_PAR_SPACING,
        },

  {"A",         OptrToChunk(@vcdNone),   OptrToChunk(@vpdNone),
    SPEC_A,
    TAG_IS_CHAR_STYLE,
        },

  /*** ABBR: ignored ***/
  /*** ACRONYM: ignored ***/

  {"ADDRESS",   OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"APPLET",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"AREA",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_AREA,
        0,
        },
  {"B",         OptrToChunk(@vcdBold),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"BASE",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BASE,
        0,
        },
  {"BASEFONT",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BASEFONT,
        0,
        },

  /*** BDO: ignored ***/

  {"BIG",       OptrToChunk(@vcdBig), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"BLOCKQUOTE",OptrToChunk(@vcdNone), OptrToChunk(@vpdBlockquote),
    SPEC_BLOCKQUOTE,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE,
        },
  {"BODY",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_BODY,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"BR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BR,
        0,
        },

  /*** BUTTON: to be implemented ***/
  /*** CAPTION: to be implemented ***/

  {"CENTER",    OptrToChunk(@vcdNone), OptrToChunk(@vpdCenter),
    SPEC_NONE,
    TAG_IS_PAR_STYLE,
        },
  {"CITE",      OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"CODE",      OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

  /*** COL: to be implemented ***/
  /*** COLGROUP: to be implemented ***/

  {"DD",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefDef),
        SPEC_DTDD,
        TAG_IS_PAR_STYLE,
        },

  /*** DEL: to be implemented ***/

  {"DFN",       OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"DIR",       OptrToChunk(@vcdNone), OptrToChunk(@vpdMenu),
    SPEC_NONE,
    TAG_IS_PAR_STYLE,
        },
  {"DIV",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_DIV,
        TAG_IS_PAR_STYLE,
        },
  {"DL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefList),
        SPEC_DL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE,
        },
  {"DT",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefTerm),
        SPEC_DTDD,
        TAG_IS_PAR_STYLE,
        },
  {"EM",        OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
#if EMBED_SUPPORT
  {"EMBED",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_EMBED,
        TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
#endif

  /*** FIELDSET: to be implemented ***/

  {"FONT",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FONT,
    TAG_IS_CHAR_STYLE,
        },
  {"FORM",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FORM,
        TAG_IS_PAR_STYLE,
        },
  {"FRAME",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FRAME,
        0,
        },
  {"FRAMESET",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FRAMESET,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"H1",        OptrToChunk(@vcdH1),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H2",        OptrToChunk(@vcdH2),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H3",        OptrToChunk(@vcdH3),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H4",        OptrToChunk(@vcdH4),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H5",        OptrToChunk(@vcdH5),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H6",        OptrToChunk(@vcdH6),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"HEAD",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HEAD,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"HR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HR,
    0,
        },
  {"HTML",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HTML,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"I",         OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

#if 0  /* ignore IFRAME tag, but obeying
	  contained HTML is the correct behavior */
  {"IFRAME",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },
#endif

  {"IMAGE",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_IMG,
    0,
        },
  {"IMG",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_IMG,
    0,
        },
  {"INPUT",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_INPUT,
    0,
        },

  /*** INS: to be implemented ***/
  /*** ISINDEX: to be implemented. ***/

  {"KBD",       OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

  /*** LABEL: to be implemented ***/
  /*** LEGEND: to be implemented ***/

  {"LI",        OptrToChunk(@vcdNone), OptrToChunk(@vpdListItem),
    SPEC_LI,
        TAG_IS_PAR_STYLE|TAG_PREPEND,
        },
  {"LISTING",   OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },

  /*** LINK: to be implemented? ***/

  {"MAP",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_MAP,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"MENU",      OptrToChunk(@vcdNone), OptrToChunk(@vpdMenu),
    SPEC_MENU,
    TAG_IS_PAR_STYLE,
        },
  {"META",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_META,
        0,
        },

  {"NOBR",         OptrToChunk(@vcdNOBR),   OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_CHAR_STYLE,
        },

  /* if inside OBJECT, ignore NOEMBED */
  {"NOEMBED",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_NOEMBED,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },

  /*** NOFRAME: ignored ***/

  {"NOSCRIPT",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_NOSCRIPT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },

  /* just keep track of being in OBJECT state */
  {"OBJECT",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_OBJECT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },

  {"OL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdList),
        SPEC_OL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_PREPEND,
        },                            /* ensure it's indented even w/o <LI> */

  /*** OPTGROUP: to be implemented ***/

  {"OPTION",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_OPTION,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"P",         OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_P,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_IMPLICIT_TERM|TAG_PREPEND_MAYBE,
        },

  /*** PARAM: ignored ***/

  {"PLAINTEXT", OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PLAINTEXT,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"PRE",       OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"Q",         OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_Q,
    TAG_IS_CHAR_STYLE,
        },
  {"S",         OptrToChunk(@vcdStrike), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SAMP",      OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SCRIPT",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_SCRIPT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },
  {"SELECT",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_SELECT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"SMALL",     OptrToChunk(@vcdSmall), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SPAN",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_CONTAIN,
    TAG_IS_CHAR_STYLE,
        },
  {"STRIKE",    OptrToChunk(@vcdStrike), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"STRONG",    OptrToChunk(@vcdBold),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"STYLE",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_STYLE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"SUB",       OptrToChunk(@vcdSubscript), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SUP",       OptrToChunk(@vcdSuperscript), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SVG",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },				/* ignore because of <title> inside */

   {"TABLE",     OptrToChunk(@vcdReset), OptrToChunk(@vpdReset),
        SPEC_TABLE,
        TAG_IS_PAR_STYLE,
        },

  /*** TBODY: to be implemented ***/

  {"TD",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TD,
        TAG_IS_PAR_STYLE,
        },
  {"TEMPLATE",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },
  {"TEXTAREA",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TEXTAREA,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },

  /*** TFOOT: to be implemented ***/

  {"TH",        OptrToChunk(@vcdBold), OptrToChunk(@vpdCenter),
        SPEC_TD,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_IS_CHAR_STYLE,
        },

  /*** THEAD: to be implemented ***/

  {"TITLE",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_TITLE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"TR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TR,
        TAG_IS_PAR_STYLE,
        },
  {"TT",        OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"U",         OptrToChunk(@vcdUnderline), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"UL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdUList),
        SPEC_UL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_PREPEND,
        },                            /* ensure it's indented even w/o <LI> */
  {"VAR",       OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"XMP",       OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },

  /*** End Of List */
  {"*", OptrToChunk(@vcdNone), OptrToChunk(@vpdNone), SPEC_NONE, 0, }
};

@end StyleResource;


/**************************************************************************
 *              Entity names
 * 11/2022: Adding some more recent entity names to the table
 * https://www.key-shortcut.com/html-entities/alle-entitaeten/
 * https://www.w3.org/wiki/Common_HTML_entities_used_for_typography
 * https://www.code-knacker.de/ansi.htm
 *
 * Note: Table must be lexically sorted by entity names
 *
 **************************************************************************/

@start EntityResource, data;

@chunk HTMLEntityTable xlateTable[] =
{
@ifdef DO_DBCS
  {"",      130, 0xE2},   /* single opening quote, low */
  {"",      131, 0xC4},   /* italic "f" currency symbol (?) */
  {"",      132, 0xE3},   /* double opening quote, low */
  {"",      133, C_HORIZONTAL_ELLIPSIS},   /* ellipsis */
  {"",      134, C_DAGGER},   /* dagger */
  {"",      135, C_DOUBLE_DAGGER},   /* double dagger */
  {"",      136, 0xF6},   /* circonflex */
  {"",      137, C_PER_MILLE_SIGN},   /* "per mille" symbol */
  {"",      138, C_LATIN_CAPITAL_LETTER_S_HACEK },   /* S-hacek */
  {"",      139, 0xDC},   /* single opening french quote */
  {"",      140, C_LATIN_CAPITAL_LETTER_O_E},   /* OE ligature */
  {"",      145, C_SINGLE_TURNED_COMMA_QUOTATION_MARK},   /* single opening quote, high */
  {"",      146, C_SINGLE_COMMA_QUOTATION_MARK},   /* single closing quote, high */
  {"",      147, C_DOUBLE_TURNED_COMMA_QUOTATION_MARK},   /* double opening quote, high */
  {"",      148, C_DOUBLE_COMMA_QUOTATION_MARK},   /* double closing quote */
  {"",      149, C_KATAKANA_MIDDLE_DOT},   /* C_BULLET don't exist in DBCS encodings, use alternative */
  {"",      150, C_EN_DASH},   /* En dash */
  {"",      151, C_EM_DASH},   /* Em dash */
  {"",      152, 0xF7},   /* tilde accent (?) */
  {"",      153, C_TRADEMARK},   /* trademark symbol */
  {"",      154, C_LATIN_SMALL_LETTER_S_HACEK },   /* s-hacek */
  {"",      155, 0xDD},   /* single closing french quote */
  {"",      156, C_LATIN_SMALL_LETTER_O_E},   /* oe ligature */
  {"",      159, C_LATIN_CAPITAL_LETTER_Y_DIAERESIS},   /* Y-umlaut (?) */
  {"",      8212,C_EM_DASH},   /* additional Em dash */
  {"",      8217,C_SINGLE_COMMA_QUOTATION_MARK},   /* add'l single closing quote, high (apostrophe) */
  {"",      8226,C_KATAKANA_MIDDLE_DOT},   /* additional bullet */
  {"AElig", 198, C_LATIN_CAPITAL_LETTER_A_E},
  {"Aacute",193, C_LATIN_CAPITAL_LETTER_A_ACUTE},
  {"Acirc", 194, C_LATIN_CAPITAL_LETTER_A_CIRCUMFLEX},
  {"Agrave",192, C_LATIN_CAPITAL_LETTER_A_GRAVE},
  {"Aring", 197, C_LATIN_CAPITAL_LETTER_A_RING},
  {"Atilde",195, C_LATIN_CAPITAL_LETTER_A_TILDE},
  {"Auml",  196, C_LATIN_CAPITAL_LETTER_A_DIAERESIS},
  {"Ccedil",199, C_LATIN_CAPITAL_LETTER_C_CEDILLA},
  {"ETH",   208, HTML_SPECIAL_ENTITY_BASE+8},
  {"Eacute",201, C_LATIN_CAPITAL_LETTER_E_ACUTE},
  {"Ecirc", 202, C_LATIN_CAPITAL_LETTER_E_CIRCUMFLEX},
  {"Egrave",200, C_LATIN_CAPITAL_LETTER_E_GRAVE},
  {"Euml",  203, C_LATIN_CAPITAL_LETTER_E_DIAERESIS},
  {"Iacute",205, C_LATIN_CAPITAL_LETTER_I_ACUTE},
  {"Icirc", 206, C_LATIN_CAPITAL_LETTER_I_CIRCUMFLEX},
  {"Igrave",204, C_LATIN_CAPITAL_LETTER_I_GRAVE},
  {"Iuml",  207, C_LATIN_CAPITAL_LETTER_I_DIAERESIS},
  {"Ntilde",209, C_LATIN_CAPITAL_LETTER_N_TILDE},
  {"Oacute",211, C_LATIN_CAPITAL_LETTER_O_ACUTE},
  {"Ocirc", 212, C_LATIN_CAPITAL_LETTER_O_CIRCUMFLEX},
  {"Ograve",210, C_LATIN_CAPITAL_LETTER_O_GRAVE},
  {"Oslash",216, C_LATIN_CAPITAL_LETTER_O_SLASH},
  {"Otilde",213, C_LATIN_CAPITAL_LETTER_O_TILDE},
  {"Ouml",  214, C_LATIN_CAPITAL_LETTER_O_DIAERESIS},
  {"THORN", 222, HTML_SPECIAL_ENTITY_BASE+10},
  {"Uacute",218, C_LATIN_CAPITAL_LETTER_U_ACUTE},
  {"Ucirc", 219, C_LATIN_CAPITAL_LETTER_U_CIRCUMFLEX},
  {"Ugrave",217, C_LATIN_CAPITAL_LETTER_O_GRAVE},
  {"Uuml",  220, C_LATIN_CAPITAL_LETTER_U_DIAERESIS},
  {"Yacute",221, C_LATIN_CAPITAL_LETTER_Y_ACUTE},
  {"aacute",225, C_LATIN_SMALL_LETTER_A_ACUTE},
  {"acirc", 226, C_LATIN_SMALL_LETTER_A_CIRCUMFLEX},
  {"acute", 180, C_SPACING_ACUTE},
  {"aelig", 230, C_LATIN_SMALL_LETTER_A_E},
  {"agrave",224, C_LATIN_SMALL_LETTER_A_GRAVE},
  {"amp",   38,  C_AMPERSAND },
  {"apos",  39,  C_APOSTROPHE_QUOTE },
  {"aring", 229, C_LATIN_SMALL_LETTER_A_RING},
  {"atilde",227, C_LATIN_SMALL_LETTER_A_TILDE},
  {"auml",  228, C_LATIN_SMALL_LETTER_A_DIAERESIS},
  {"brvbar",166, C_BROKEN_VERTICAL_BAR},
  {"ccedil",231, C_LATIN_SMALL_LETTER_C_CEDILLA},
  {"cedil", 184, C_SPACING_CEDILLA},
  {"cent",  162, C_CENT_SIGN},
  {"copy",  169, C_COPYRIGHT_SIGN},
  {"curren",164, C_CURRENCY_SIGN},
  {"deg",   176, C_DEGREE_SIGN},
  {"divide",247, C_DIVISION_SIGN},
  {"eacute",233, C_LATIN_SMALL_LETTER_E_ACUTE},
  {"ecirc", 234, C_LATIN_SMALL_LETTER_E_CIRCUMFLEX},
  {"egrave",232, C_LATIN_SMALL_LETTER_E_GRAVE},
  {"eth",   240, HTML_SPECIAL_ENTITY_BASE+9},
  {"euml",  235, C_LATIN_SMALL_LETTER_E_DIAERESIS},
  {"frac12",189, HTML_SPECIAL_ENTITY_BASE+6},
  {"frac14",188, HTML_SPECIAL_ENTITY_BASE+5},
  {"frac34",190, HTML_SPECIAL_ENTITY_BASE+7},
  {"gt",    62,  C_GREATER_THAN_SIGN },
  {"iacute",237, C_LATIN_SMALL_LETTER_I_ACUTE},
  {"icirc", 238, C_LATIN_SMALL_LETTER_I_CIRCUMFLEX},
  {"iexcl", 161, C_INVERTED_EXCLAMATION_MARK},
  {"igrave",236, C_LATIN_SMALL_LETTER_I_GRAVE},
  {"iquest",191, C_INVERTED_QUESTION_MARK},
  {"iuml",  239, C_LATIN_SMALL_LETTER_I_DIAERESIS},
  {"laquo", 171, C_LEFT_POINTING_GUILLEMET},
  {"lt",    60,  C_LESS_THAN_SIGN },
  {"macr",  175, C_SPACING_MACRON},
  {"micro", 181, C_MICRO_SIGN},
  {"middot",183, C_MIDDLE_DOT},
  {"nbsp",  160, C_NON_BREAKING_SPACE},
  {"not",   172, C_NOT_SIGN},
  {"ntilde",241, C_LATIN_SMALL_LETTER_N_TILDE},
  {"oacute",243, C_LATIN_SMALL_LETTER_O_ACUTE},
  {"ocirc", 244, C_LATIN_SMALL_LETTER_O_CIRCUMFLEX},
  {"ograve",242, C_LATIN_SMALL_LETTER_O_GRAVE},
  {"ordf",  170, C_FEMININE_ORDINAL_INDICATOR},
  {"ordm",  186, C_MASCULINE_ORDINAL_INDICATOR},
  {"oslash",248, C_LATIN_SMALL_LETTER_O_SLASH},
  {"otilde",245, C_LATIN_SMALL_LETTER_O_TILDE},
  {"ouml",  246, C_LATIN_SMALL_LETTER_O_DIAERESIS},
  {"para",  182, C_PARAGRAPH_SIGN},
  {"plusm", 177, C_PLUS_OR_MINUS_SIGN},
  {"pound", 163, C_POUND_SIGN},
  {"quot",  34,  C_QUOTATION_MARK },
  {"raquo", 187, C_RIGHT_POINTING_GUILLEMET},
  {"reg",   174, C_REGISTERED_TRADE_MARK_SIGN},
  {"sect",  167, C_SECTION_SIGN},
  {"shy",   173, C_SOFT_HYPHEN},
  {"sup1",  185, HTML_SPECIAL_ENTITY_BASE+2},
  {"sup2",  178, HTML_SPECIAL_ENTITY_BASE+3},
  {"sup3",  179, HTML_SPECIAL_ENTITY_BASE+4},
  {"szlig", 223, C_LATIN_SMALL_LETTER_SHARP_S},
  {"tab",   9,   C_HORIZONTAL_TABULATION },
  {"thorn", 254, HTML_SPECIAL_ENTITY_BASE+11},
  {"times", 215, HTML_SPECIAL_ENTITY_BASE+12},
  {"uacute",250, C_LATIN_SMALL_LETTER_U_ACUTE},
  {"ucirc", 251, C_LATIN_SMALL_LETTER_U_CIRCUMFLEX},
  {"ugrave",249, C_LATIN_SMALL_LETTER_U_GRAVE},
  {"uml",   168, C_SPACING_DIAERESIS},
  {"uuml",  252, C_LATIN_SMALL_LETTER_U_DIAERESIS},
  {"yacute",253, C_LATIN_SMALL_LETTER_Y_ACUTE},
  {"yen",   165, C_YEN_SIGN},
  {"yuml",  255, C_LATIN_SMALL_LETTER_Y_DIAERESIS},
@else
  {"",	    8212,0xD1},   /* additional Em dash */
  {"",      8217,0xD5},   /* add'l single closing quote, high (apostrophe) */
  {"",      8226,0xA5},   /* additional bullet */
  {"AElig", 198, 0xAE},
  {"Aacute",193, 0xE7},
  {"Acirc", 194, 0xE5},
  {"Agrave",192, 0xCB},
  {"Aring", 197, 0x81},
  {"Atilde",195, 0xCC},
  {"Auml",  196, 0x80},
  {"Ccedil",199, 0x82},
  {"Dagger",135, 0xE0},   /* double dagger */
  {"ETH",   208, HTML_SPECIAL_ENTITY_BASE+8},
  {"Eacute",201, 0x83},
  {"Ecirc", 202, 0xE6},
  {"Egrave",200, 0xE9},
  {"Euml",  203, 0xE8},
  {"Iacute",205, 0xEA},
  {"Icirc", 206, 0xEB},
  {"Igrave",204, 0xED},
  {"Iuml",  207, 0xEC},
  {"Ntilde",209, 0x84},
  {"OElig", 140, 0xCE},   /* OE ligature */
  {"Oacute",211, 0xEE},
  {"Ocirc", 212, 0xEF},
  {"Ograve",210, 0xF1},
  {"Oslash",216, 0xAF},
  {"Otilde",213, 0xCD},
  {"Ouml",  214, 0x85},
  {"THORN", 222, HTML_SPECIAL_ENTITY_BASE+10},
  {"Uacute",218, 0xF2},
  {"Ucirc", 219, 0xF3},
  {"Ugrave",217, 0xF4},
  {"Uuml",  220, 0x86},
  {"Yacute",221, 0xDF},
  {"Yuml",  159, 0xD9},   /* Y-umlaut (?) */
  {"aacute",225, 0x87},
  {"acirc", 226, 0x89},
  {"acute", 180, 0xAB},
  {"aelig", 230, 0xBE},
  {"agrave",224, 0x88},
  {"apos",  39,  '\'' },
  {"amp",   38,  '&' },
  {"aring", 229, 0x8C},
  {"atilde",227, 0x8B},
  {"auml",  228, 0x8A},
  {"bdquo", 132, 0xE3},   /* double opening quote, low */
  {"brvbar",166, 0x7C},
  {"bull",  149, 0xA5},   /* bullet */
  {"ccedil",231, 0x8D},
  {"cedil", 184, 0xFE},
  {"cent",  162, 0xA2},
  {"circ",  136, 0xF6},   /* circonflex */
  {"copy",  169, 0xA9},
  {"curren",164, 0xDB},
  {"dagger",134, 0xA0},   /* dagger */
  {"deg",   176, 0xA1},
  {"divide",247, 0xD6},
  {"eacute",233, 0x8E},
  {"ecirc", 234, 0x90},
  {"egrave",232, 0x8F},
  {"eth",   240, HTML_SPECIAL_ENTITY_BASE+9},
  {"euml",  235, 0x91},
  {"fnof",  131, 0xC4},   /* italic "f" currency symbol (?) */
  {"frac12",189, HTML_SPECIAL_ENTITY_BASE+6},
  {"frac14",188, HTML_SPECIAL_ENTITY_BASE+5},
  {"frac34",190, HTML_SPECIAL_ENTITY_BASE+7},
  {"gt",    62,  '>' },
  {"hellip",133, 0xC9},   /* ellipsis */
  {"iacute",237, 0x92},
  {"icirc", 238, 0x94},
  {"iexcl", 161, 0xC1},
  {"igrave",236, 0x93},
  {"iquest",191, 0xC0},
  {"iuml",  239, 0x95},
  {"laquo", 171, 0xC7},
  {"ldquo", 147, 0xD2},   /* double opening quote, high */
  {"lsaquo",139, 0xDC},   /* single opening french quote */
  {"lsquo", 145, 0xD4},   /* single opening quote, high */
  {"lt",    60,  '<' },
  {"macr",  175, 0xF8},
  {"mdash", 151, 0xD1},   /* Em dash */
  {"micro", 181, 0xB5},
  {"middot",183, 0xE1},
  {"nbsp",  160, 0xCA},
  {"ndash", 150, 0xD0},   /* En dash */
  {"not",   172, 0xC2},
  {"ntilde",241, 0x96},
  {"oacute",243, 0x97},
  {"ocirc", 244, 0x99},
  {"oelig", 156, 0xCF},   /* oe ligature */
  {"ograve",242, 0x98},
  {"ordf",  170, 0xBB},
  {"ordm",  186, 0xBC},
  {"oslash",248, 0xBF},
  {"otilde",245, 0x9B},
  {"ouml",  246, 0x9A},
  {"para",  182, 0xA6},
  {"permil",137, 0xE4},   /* "per mille" symbol */
  {"plusm", 177, 0xB1},
  {"pound", 163, 0xA3},
  {"quot",  34,  '"' },
  {"raquo", 187, 0xC8},
  {"rdquo", 148, 0xD3},   /* double closing quote */
  {"reg",   174, 0xA8},
  {"rsaquo",155, 0xDD},   /* single closing french quote */
  {"rsquo", 146, 0xD5},   /* single closing quote, high */
  {"sbquo", 130, 0xE2},   /* single opening quote, low */
  {"sect",  167, 0xA4},
  {"shy",   173, 0x1F},
  {"sup1",  185, HTML_SPECIAL_ENTITY_BASE+2},
  {"sup2",  178, HTML_SPECIAL_ENTITY_BASE+3},
  {"sup3",  179, HTML_SPECIAL_ENTITY_BASE+4},
  {"szlig", 223, 0xA7},
  {"tab",   9,   9   },
  {"thorn", 254, HTML_SPECIAL_ENTITY_BASE+11},
  {"tilde", 152, 0xF7},   /* tilde accent (?) */
  {"times", 215, HTML_SPECIAL_ENTITY_BASE+12},
  {"trade", 153, 0xAA},   /* trademark symbol */
  {"uacute",250, 0x9C},
  {"ucirc", 251, 0x9E},
  {"ugrave",249, 0x9D},
  {"uml",   168, 0xFD},
  {"uuml",  252, 0x9F},
  {"yacute",253, 0xDE},
  {"yen",   165, 0xB4},
  {"yuml",  255, 0xD8},
@endif

  {"",      0,   0   }    /* end of list */
};

@chunk HTMLEntityString EntityStringArray[] = {
    { "-"   },   /* &macr */
    { "+/-" },   /* &plusmn */
    { "1"   },   /* &sup1 */
    { "2"   },   /* &sup2 */
    { "3"   },   /* &sup3 */
    { "1/4" },   /* &frac14 */
    { "1/2" },   /* &frac12 */
    { "3/4" },   /* &frac34 */
    { "D"   },   /* &ETH */
    { "d"   },   /* &eth */
    { "P"   },   /* &THORN */
    { "p"   },   /* &thorn */
    { "x"   }    /* &times */
} ;


@end EntityResource;
