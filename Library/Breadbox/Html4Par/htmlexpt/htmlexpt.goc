/***********************************************************************
 *
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 * PROJECT:       HTMLPars
 * FILE:          htmlexpt.goc
 *
 * AUTHOR:        Marcus Grï¿½ber
 *
 * NOTE:          To compile properly, this file requires the INCLUDE
 *                files from the OmniGo SDK or later, because the
 *                VisTextParaAttr structure is declared incorrectly in
 *                earlier versions.
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/ctype.h>
#include <geoMisc.h>

#include <xlatLib.h>

@include <html4par.goh>

/* for HTMLEntityTable, etc. */
#include "internal.h"


#define NUM_XLATE_ENTRIES 90
@extern chunk xlateTable;


#define HTML_FILE_PROLOG "<HTML>\r\n"
#define HTML_FILE_PARA "<P>\r\n"
#define HTML_FILE_EPILOG "\r\n</HTML>\r\n"


void UnTranslateChar(int ch,char *buf)
{
    HTMLEntityTable *xlate_table;
    int i;

    *buf = 0;

    MemLock( OptrToHandle(@xlateTable) );
    xlate_table = LMemDeref(@xlateTable);

    for(i=0; i<NUM_XLATE_ENTRIES; i++)
      if( ch==xlate_table[i].c )
      {
        SPRINTFSB( buf, "&%s;", xlate_table[i].name );
        break;
      }

@ifdef DO_DBCS
    if(!*buf)
    {
	word status;
	LocalGeosToDosChar((unsigned int*)&ch, HTMLext->HE_codePage,
	 		0, (DosToGeosStringStatus *)&status);
	buf[0] = ch & 0x00ff;
	buf[1] = ch & 0xff00;  /* could be null */
	buf[2] = 0;  /* in case two-byte char */
    }
@else
    if(!*buf && ch>=32 && ch<128)
    {
      buf[0] = (char)ch;
      buf[1] = 0;
    }
@endif

    MemUnlock( OptrToHandle(@xlateTable) );
}

int _export _pascal CreateHTMLFile(optr obj, FileHandle out)
{
    dword len,pos,diff;
    int i;
    TCHAR buf[512];
    char cbuf[20];

    FileWrite( out, HTML_FILE_PROLOG, sizeof(HTML_FILE_PROLOG)-1, FALSE);

    len = @call obj::MSG_VIS_TEXT_GET_TEXT_SIZE();

    pos = 0;
    while(len)
    {
      diff = (len>sizeof(buf))?sizeof(buf):len;
      @call obj::MSG_VIS_TEXT_SELECT_RANGE( (char*)pos+diff, pos );
      @call obj::MSG_VIS_TEXT_GET_SELECTION_PTR( (char*)buf );
      for(i=0; i<(int)diff; i++)
      {
        if(buf[i]=='\r')
          FileWrite( out, HTML_FILE_PARA, sizeof(HTML_FILE_PARA)-1, FALSE );
        else if(buf[i]<='A' || buf[i]>='z')
        {
@ifdef DO_DBCS
          UnTranslateChar( buf[i], cbuf );
@else
          UnTranslateChar( (unsigned char)buf[i], cbuf );
@endif
          FileWrite( out, cbuf, strlen((TCHAR*)cbuf), FALSE );
        }
        else
	    /* DBCS: writes low byte */
          FileWrite( out, &(buf[i]), 1, FALSE );
      }
      pos+=diff;
      len-=diff;
    }

    FileWrite( out, HTML_FILE_EPILOG, sizeof(HTML_FILE_EPILOG)-1, FALSE);

    return TE_NO_ERROR;                 /* export was successful */
}
