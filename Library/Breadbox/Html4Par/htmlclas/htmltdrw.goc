/***********************************************************************
 *
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
 * PROJECT:       HTMLView
 * FILE:          HTMLTDRW.goc  (HTML Table Drawing) Plus other msgs
 *
 * AUTHOR:        Lysle Shields
 * HISTORY:
 *   WHO:   WHEN:    WHAT:
 *   ------ -------- -------------
 *   LES    08/02/98 Split from HTMLTABL.GOC
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <Objects/Text/tCtrlC.goh>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>

@include "options.goh"
@include <html4par.goh>
#include <htmldrv.h>

#include "regiont.h"
#include "internal.h"
@include <extgraph.goh>
#include "tableint.h"

#define COLOR_TABLE_LINE_TOP_LEFT_QUAD       CF_INDEX, C_LIGHT_GREY, 0, 0
#define COLOR_TABLE_LINE_BOTTOM_RIGHT_QUAD   CF_INDEX, C_DARK_GREY, 0, 0

EGMosaicSourceType GetVarGraphic(HTMLimageData *iae, VMFileHandle *vmf, 
                                 VMBlockHandle *vmb, XYSize *size,
                                 Boolean *isTransparent) ;


/**************************************************************************
 * Routine:  IFastCellGetNextIndex
 **************************************************************************
 *
 * Description:
 *     Determines what the index is for the next cell of the same table
 *     level.  This is the same as ICellGetNextIndex, but it only handles
 *     the simple case of a cached next index.
 *     This routine exists for the sole purpose of avoiding costly inter-
 *     segment jumps (RCI) during table redrawing, which is crucial for the
 *     scrolling speed in complex pages.
 *
 **************************************************************************/
word IFastCellGetNextIndex(HTMLTextInstance *pself, word cellIndex)
{
    HTMLcellData *p_cell ;
    word size;
EC( ECCheckStack(); )
    CellLock(pself->HTI_cellArray, cellIndex, &p_cell, &size) ;
    if (p_cell->HCD_nextCellInTable != CELL_NEXT_IN_TABLE_UNKNOWN)  {
        cellIndex = p_cell->HCD_nextCellInTable ;
    } else {
        cellIndex = ICellGetNextIndex(pself, cellIndex);
    }
    CellUnlock(p_cell) ;
    return cellIndex ;
}


void DrawShadedRectangle(
         GStateHandle gstate,
         word left,
         word top,
         word right,
         word bottom,
         word thickness,
         Boolean inverted)
{
    Point ul[6] ;
    Point br[6] ;

    if (thickness)  {
        GrSaveState(gstate) ;
        if (thickness > 1)  {
            thickness-- ;

            ul[0].P_x = left ;
            ul[0].P_y = top ;
            ul[1].P_x = right ;
            ul[1].P_y = top ;
            ul[2].P_x = right - thickness ;
            ul[2].P_y = top + thickness ;
            ul[3].P_x = left + thickness ;
            ul[3].P_y = top + thickness ;
            ul[4].P_x = left + thickness ;
            ul[4].P_y = bottom - thickness ;
            ul[5].P_x = left ;
            ul[5].P_y = bottom ;

            br[0].P_x = right ;
            br[0].P_y = top ;
            br[1].P_x = right ;
            br[1].P_y = bottom ;
            br[2].P_x = left ;
            br[2].P_y = bottom ;
            br[3].P_x = left + thickness ;
            br[3].P_y = bottom - thickness ;
            br[4].P_x = right - thickness ;
            br[4].P_y = bottom - thickness ;
            br[5].P_x = right - thickness ;
            br[5].P_y = top + thickness ;

            GrSetLineColor(gstate, COLOR_TABLE_LINE_TOP_LEFT_QUAD) ;
            GrSetAreaColor(gstate, COLOR_TABLE_LINE_TOP_LEFT_QUAD) ;
            if (inverted)
                GrFillPolygon(gstate, ODD_EVEN, br, sizeof(br)/sizeof(br[0])) ;
            else
                GrFillPolygon(gstate, ODD_EVEN, ul, sizeof(ul)/sizeof(ul[0]));

            GrSetLineColor(gstate, COLOR_TABLE_LINE_BOTTOM_RIGHT_QUAD) ;
            GrSetAreaColor(gstate, COLOR_TABLE_LINE_BOTTOM_RIGHT_QUAD) ;
            if (inverted)
                GrFillPolygon(gstate, ODD_EVEN, ul, sizeof(ul)/sizeof(ul[0]));
            else
                GrFillPolygon(gstate, ODD_EVEN, br, sizeof(br)/sizeof(br[0])) ;
        } else {
            /* Thickness of 1 */
            if (inverted)
                GrSetLineColor(gstate, COLOR_TABLE_LINE_BOTTOM_RIGHT_QUAD) ;
            else
                GrSetLineColor(gstate, COLOR_TABLE_LINE_TOP_LEFT_QUAD) ;
            GrDrawRect(gstate, left, top, right, bottom) ;

            if (inverted)
                GrSetLineColor(gstate, COLOR_TABLE_LINE_TOP_LEFT_QUAD) ;
            else
                GrSetLineColor(gstate, COLOR_TABLE_LINE_BOTTOM_RIGHT_QUAD) ;
            GrDrawLine(gstate, left, bottom, right, bottom) ;
            GrDrawLine(gstate, right, top, right, bottom) ;
        }
        GrRestoreState(gstate) ;
    }
}

void LOCAL DrawArea(GStateHandle gstate, sword x1, dword y1, word x2, dword y2,
  word backFlag, ColorQuad *cq)
{
    if(backFlag)
    {
      GrSetAreaColor(gstate,
        cq->CQ_info, cq->CQ_redOrIndex, cq->CQ_green, cq->CQ_blue);
      GrFillRect(gstate, x1, y1, x2, y2);
    }
}

void DrawMosaicIntoClippedArea(
         GStateHandle gstate, 
         sdword left, 
         sdword top, 
         sdword right, 
         sdword bottom,
         VMFileHandle vmf,
         VMBlockHandle vmb,
         XYSize sizeXY,
         EGMosaicSourceType egmst)
{
    Rectangle clipSmall ;
    RectDWord clip;
    sdword lx, ly ;

    if ((vmf==NullHandle) || (vmb == NullHandle))
        return ;

    GrSaveState(gstate) ;
    GrApplyTranslationDWord(gstate, left, top) ;
    GrSetClipRect(gstate, PCT_INTERSECTION, 0, 0, right-left, bottom-top) ;
//    GrApplyTranslationDWord(gstate, -left, -top) ;

    /* Only process if there is an area to draw to */
    if (GrGetMaskBoundsDWord(gstate, &clip))  {
        /* Only draw if after clipping we have an area to draw */
        if ((clip.RD_left < clip.RD_right) &&
                (clip.RD_top < clip.RD_bottom))  {
            /* always need clipSmall (only 16-bit coordinate space too) */
            GrApplyTranslationDWord(gstate, clip.RD_left, clip.RD_top);

            clipSmall.R_left = 0 ;
            clipSmall.R_top = 0 ;
            clipSmall.R_bottom = clip.RD_bottom - clip.RD_top ;
            clipSmall.R_right = clip.RD_right - clip.RD_left ;

            lx = -clip.RD_left ;
            ly = -clip.RD_top ;

            /* Draw the tiled pattern */
            ExtGrFillMosaic(gstate, vmf, vmb,
              lx, ly,
              clipSmall.R_right, clipSmall.R_bottom,
              0, 0, FALSE, egmst);
        
        }
    }
    GrRestoreState(gstate) ;
}

/* Draw all the cells and their backgrounds for a given table */
void DrawTablesCells(
         HTMLTextInstance *pself,
         GStateHandle gstate,
         word tableIndex)
{
    word n, size ;
    dword left, right, top, bottom ;
    HTMLcellData *p_cell;
    HTMLtableData *p_table;
    word cellIndex ;
    T_cellArrayHandle cellArray = pself->HTI_cellArray;
    T_tableArrayHandle tableArray = pself->HTI_tableArray;
    word edge ;
    RectDWord clip;

    Boolean isTransparent;
    VMFileHandle vmf;
    VMBlockHandle vmb;
    XYSize sizeXY ;
    HTMLimageData *iae;
    EGMosaicSourceType egmst;
    WordFlags imageFlags ;

    if(!GrGetMaskBoundsDWord(gstate, &clip))
      return;

    n = CellArrayGetCount(cellArray);
    TableLock(tableArray, tableIndex, &p_table, &size);
    cellIndex = p_table->HTD_firstCell ;
    while (cellIndex < n)
    {
      CellLock(cellArray, cellIndex, &p_cell, &size);

      if (p_cell->HCD_table != tableIndex)  {
        CellUnlock(p_cell) ;
        break ;
      }

      edge = TABLE_GET_BORDER(p_table->HTD_flags) ;
      if (edge)
          edge++ ;

      if (!(p_cell->HCD_flags & HTML_CELL_CONTINUE))
      {
        left = p_cell->HCD_x ;
        right = left + p_cell->HCD_calcWidth-1 ;
        top = p_cell->HCD_y ;
        bottom = top + p_cell->HCD_calcHeight-1 ;

        /* only draw cell if visible */
        if(!(bottom < clip.RD_top || top > clip.RD_bottom))
        {
          /* Draw the table's color */
/* Don't do Netscape 4.7 style backgrounds (where setting up the table background color just affect the cells).  lshields 06/30/00
          DrawArea(gstate,
              left, top,
              right+1, bottom+1,
              (p_table->HTD_flags & HTML_TABLE_BACK_COLOR), &(p_table->HTD_backColor)) ;
*/

            /* Get info about the background image (if we have one) */
            if (p_cell->HCD_backgroundImage != HTML_IMAGE_INDEX_NONE)  {
                MemLock(OptrToHandle(pself->HTI_imageArray));
                iae = ChunkArrayElementToPtr(pself->HTI_imageArray, 
                  p_cell->HCD_backgroundImage, &size);
                                            // deference token to image record 
                imageFlags = iae->flags ;
                if (imageFlags & HTML_IDF_RESOLVED)  {
                    egmst = GetVarGraphic(iae, &vmf, &vmb, &sizeXY, &isTransparent);
                    if ((vmf == NullHandle) || (vmb == NullHandle))
                        isTransparent = TRUE ;
                } else  {
                    isTransparent = TRUE ;
                }
                MemUnlock(OptrToHandle(pself->HTI_imageArray));
            } else {
                /* No image?  Then we'll be allowed to draw the background color */
                isTransparent = TRUE ;
            }


            /* Draw the cell's color */
            if (isTransparent)
                DrawArea(gstate,
                  left, top,
                  right+1, bottom+1,
                  (p_cell->HCD_flags & HTML_CELL_BACK_COLOR), &(p_cell->HCD_backColor));

            /* Draw the background image */
            if ((p_cell->HCD_backgroundImage != HTML_IMAGE_INDEX_NONE) &&
                    (imageFlags & HTML_IDF_RESOLVED)) {
                DrawMosaicIntoClippedArea(
                    gstate,
                    left,
                    top,
                    right,
                    bottom,
                    vmf,
                    vmb,
                    sizeXY,
                    egmst);
            }

            if (((TABLE_GET_BORDER(p_table->HTD_flags)) &&
                (p_cell->HCD_flags & HTML_CELL_NOT_EMPTY)) /* ||
                (IFastCellGetNextIndex(pself, cellIndex) != cellIndex+1)*/ )  {
              DrawShadedRectangle(gstate,
                left,
                (word)(top),
                right,
                (word)(bottom),
                1,  /* LES 08/17/99 -- Thin borders please! */
                TRUE);
            }
        }
      }
      cellIndex = p_cell->HCD_nextCellInTable ;

      CellUnlock(p_cell) ;
    }
    TableUnlock(p_table) ;
}

@extern method HTMLTextClass, MSG_HTML_TEXT_DRAW_TABLE_FRAME
{
    word i, n, size ;
    dword left, right, top, bottom ;
    HTMLtableData *p_table;
    Boolean isTransparent;
    VMFileHandle vmf;
    VMBlockHandle vmb;
    XYSize sizeXY ;
    HTMLimageData *iae;
    EGMosaicSourceType egmst;
    WordFlags imageFlags ;
    RectDWord clip;

    T_cellArrayHandle cellArray = pself->HTI_cellArray;
    T_tableArrayHandle tableArray = pself->HTI_tableArray;

EC( ECCheckStack(); )

    /* nothing to do if page not built or no tables or cells or null mask. */
    if(!tableArray)                     
      return;
    if(!cellArray)
      return ;
    if(!GrGetMaskBoundsDWord(gstate, &clip))
      return;

    CellArrayStartAccess(cellArray) ;
    TableArrayStartAccess(tableArray);

    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);

    /* Draw table borders: */

    n = TableArrayGetCount(tableArray);
    for(i=0; i<n; i++)
    {
        TableLock(tableArray, i, &p_table, &size);

        /* Stop if we went out of range */
        /* This avoids us drawing anything that is not ready yet */
        if (p_table->HTD_firstCell >= pself->HTI_numFormattedCells)  {
            TableUnlock(p_table) ;
            break ;
        }

        /* Only bother with drawing the table if it has a frame or */
        /* a background color. */
        if(TABLE_GET_BORDER(p_table->HTD_flags) ||
           (p_table->HTD_flags & HTML_TABLE_BACK_COLOR) ||
           (p_table->HTD_backgroundImage != HTML_IMAGE_INDEX_NONE))
        {
            top = p_table->HTD_lastY ;
            bottom = top + p_table->HTD_lastHeight ;
            left = p_table->HTD_lastX + p_table->HTD_lastXOffset + p_table->HTD_insetAmount ;
            right = left + p_table->HTD_lastTableWidth ;

            /*
             * Ok, we have the bounds of the table
             * (Make sure we got something calculated, and that the table
             * isn't completely off screen...)
             */
            if (top != 0xFFFF &&
                 !(bottom < clip.RD_top || top > clip.RD_bottom) )  {

                /* Let give it more room for the cellspacing and border */
#if 0
                size = p_table->HTD_cellspacing + TABLE_GET_BORDER(p_table->HTD_flags) ;
                left -= size ;
                top -= size ;
                right += size ;
                bottom += size ;
#endif

                /* Draw the border (but only for valid cells) */
                if (p_table->HTD_firstCell < pself->HTI_numFormattedCells)  {
                    /* Get info about the background image (if we have one) */
                    if (p_table->HTD_backgroundImage != HTML_IMAGE_INDEX_NONE)  {
                        MemLock(OptrToHandle(pself->HTI_imageArray));
                        iae = ChunkArrayElementToPtr(pself->HTI_imageArray, 
                          p_table->HTD_backgroundImage, &size);
                                                    // deference token to image record 
                        imageFlags = iae->flags ;
                        if (imageFlags & HTML_IDF_RESOLVED)  {
                            egmst = GetVarGraphic(iae, &vmf, &vmb, &sizeXY, &isTransparent);
                            if ((vmf==NullHandle) || (vmb == NullHandle))
                                isTransparent = TRUE ;
                        } else  {
                            isTransparent = TRUE ;
                        }
                        MemUnlock(OptrToHandle(pself->HTI_imageArray));
                    } else {
                        /* No image?  Then we'll be allowed to draw the background color */
                        isTransparent = TRUE ;
                    }

                    /* Draw the background if we have one (not Netscape 4.7, but IE 5.0 style) */
                    /* and if we have a transparent image on top or none at all */
                    if ((p_table->HTD_flags & HTML_TABLE_BACK_COLOR) && (isTransparent))  {
                        DrawArea(gstate,
                            left, top,
                            right, bottom,
                            (p_table->HTD_flags & HTML_TABLE_BACK_COLOR), &(p_table->HTD_backColor)) ;
                    }

                    /* Draw the background image */
                    if ((p_table->HTD_backgroundImage != HTML_IMAGE_INDEX_NONE) &&
                            (imageFlags & HTML_IDF_RESOLVED)) {
                        DrawMosaicIntoClippedArea(
                            gstate,
                            left,
                            top,
                            right,
                            bottom,
                            vmf,
                            vmb,
                            sizeXY,
                            egmst);
                    }

                    /* And then draw the border on top of it all */
                    if (TABLE_GET_BORDER(p_table->HTD_flags))  {
                        DrawShadedRectangle(gstate,
                            left,
                            top,
                            right-1,
                            bottom-1,
                            TABLE_GET_BORDER(p_table->HTD_flags),
                            FALSE);
                    }
                }
            }
        }

        /* take care of the tables (that are in the valid formatted range) */
        if (p_table->HTD_firstCell < pself->HTI_numFormattedCells)
            DrawTablesCells(pself, gstate, i) ;
        TableUnlock(p_table) ;
    }

    TableArrayEndAccess(tableArray);
    CellArrayEndAccess(cellArray) ;
}


@extern method HTMLTextClass, MSG_VIS_LARGE_TEXT_REGION_IS_LAST
{
    VisLargeTextRegionArrayElement *p;
    word size, sect, regSect;
    T_regionArrayHandle regArray ;
    T_layoutStack *p_stack ;

    RegionPurgeCache(oself) ;
    regArray = RegionArrayConstruct(oself, pself) ;

    RegionLock(regArray, region, &p, &size);
    if(pself->HTI_cellArray)   {           /* already building a real page? */
      p->VLTRAE_size.XYS_height = MAX_REGION_HEIGHT;
      RegionDirty(p) ;
    }

    sect = p->VLTRAE_section;           /* which section are we last in? */
    RegionUnlock(p) ;

    while(region+1 < RegionArrayGetCount(regArray))
    {                                   /* remove rest of regions in section */
      RegionLock(regArray, region+1, &p, &size) ;
      regSect = p->VLTRAE_section ;
      RegionUnlock(p) ;
      if (sect == regSect)  {
        RegionDelete(regArray, region+1);
      } else  {
        break ;
      }
    }

    /* Update the count of regions */
    if (pself->HTI_layoutStack)  {
        p_stack = LayoutStackLock(pself->HTI_layoutStack) ;
        p_stack->LS_numRegions = RegionArrayGetCount(regArray) ;
        LayoutStackUnlock(p_stack) ;
    }

    /* Note that region layout has changed */
    pself->HTI_layoutState |= HTS_CELL_REGION_LINKS_INVALID ;
}

@extern method HTMLTextClass, MSG_VIS_TEXT_GENERATE_NOTIFY
{
    /* The standard text object refuses to update the Search/Replace control
       if it is not editable, but we still want the search part of it... */

    params->VTGNP_notificationTypes |= VTNF_SEARCH_ENABLE;

    @callsuper();
}

@extern method HTMLTextClass, MSG_HTML_TEXT_RECALC_PAGE
{
    @call oself::MSG_HTML_TEXT_INITIALIZE_LAYOUT() ;
    @call oself::MSG_HTML_TEXT_CALCULATE_LAYOUT() ;
}

@extern method HTMLTextClass, MSG_HTML_TEXT_RECALC_COLUMNS
{
}

@extern method HTMLTextClass, MSG_META_CONTENT_VIEW_SIZE_CHANGED
{
    optr viewObj = pself->HTI_myView ;
    WindowHandle win;

    /* make sure that all geometry is recalculated */

    @callsuper() ;
    if(pself->HTI_state & HTS_VIEW_SUSPENDED_FOR_OPEN)
      @call self::MSG_META_UNSUSPEND();

    /* Update the layout completely for this view's width */
    @call oself::MSG_HTML_TEXT_CALCULATE_LAYOUT() ;

    pself = ObjDerefVis(oself);

    /* the view is now certainly open, and we're no longer suspended */

    pself = ObjDerefVis(oself);
    pself->HTI_state &= ~(HTS_VIEW_NOT_OPENED | HTS_VIEW_SUSPENDED_FOR_OPEN);

    if(viewObj)
    {
       win = @call viewObj::MSG_GEN_VIEW_GET_WINDOW();
       if(win)                          /* set view's window to transparent */
         WinSetInfo(win, WIT_COLOR, WCF_TRANSPARENT<<8);
    }
}

/**************************************************************************
 * Method: HTMLTextClass::MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED
 **************************************************************************
 *
 * Description:
 *     Whenever the scale factor changes, the user has zoomed in or out.
 *     When this happens, we put the formatter in a special mode so that
 *     it causes any optimized sections of the view to still redraw even
 *     though they are not calculated again.
 *     We also get rid of an extra flash by turning off drawing.  This
 *     avoids the immediate redraw caused when zooming in or out -before-
 *     starting the recalculate (but the view will be erased).
 *
 * Inputs:
 *     Don't care.  JUst pass it on.
 *
 **************************************************************************/
@extern method HTMLTextClass, MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED
{
    if (pself->HTI_drawingOn == 0)  {
        /* Don't draw when zooming */
        @call oself::MSG_HTML_TEXT_DRAWING_ON_OFF(FALSE) ;
        pself->HTI_layoutState |= HTS_NEED_TO_REACTIVE_DRAWING ;
    }

    /* Put the formatter in a special mode that will cause it to */
    /* draw all sections regardless of any optimizations. */
    pself->HTI_layoutState |= HTS_LAYOUT_NEED_COMPLETE_PROGRESSIVE_REDRAW ;

    @callsuper() ;
}

/**************************************************************************
 * Routine:  IDrawRegions
 **************************************************************************
 *
 * Description:
 *     Draws the region outlines used by text library.
 *
 * Inputs:
 *     GStateHandle gstate        -- Drawing surface with correct coordinates
 *     T_regionArrayHandle regionArray
 *                                -- Array of
 *                                   VisLargeTextRegionArrayElement
 *                                   structures to draw
 *
 * Revision:
 *     Who  Date:     Comments:
 *     ---  --------  --------------------
 *     LES  08/20/99  Created.
 *
 **************************************************************************/
#if COMPILE_OPTION_REGION_OUTLINES
void IDrawRegions(GStateHandle gstate, T_regionArrayHandle regionArray)
{
    VisLargeTextRegionArrayElement *p_region ;
    word num ;
    word i;
    word size ;

    GrSaveState(gstate) ;
    num = RegionArrayGetCount(regionArray) ;
    for (i=0; i<num; i++)  {
        RegionLock(regionArray, i, &p_region, &size) ;
        GrSaveState(gstate) ;
        GrApplyTranslationDWord(
            gstate,
            p_region->VLTRAE_spatialPosition.PD_x,
            p_region->VLTRAE_spatialPosition.PD_y) ;
        GrSetLineMaskSys(gstate, SDM_100) ;
        GrSetLineColor(gstate, CF_INDEX, C_RED, 0, 0) ;
        GrDrawRect(
            gstate,
            0, 0,
            p_region->VLTRAE_size.XYS_width-1,
            p_region->VLTRAE_size.XYS_height-1) ;
        GrSetLineMaskSys(gstate, SDM_50) ;
        GrSetLineColor(gstate, CF_INDEX, C_GREEN, 0, 0) ;
        GrDrawRect(
            gstate,
            0, 0,
            p_region->VLTRAE_size.XYS_width-1,
            p_region->VLTRAE_size.XYS_height-1) ;
        GrRestoreState(gstate) ;
        RegionUnlock(p_region) ;
    }
    GrRestoreState(gstate) ;
}
#endif

/**************************************************************************
 * Routine:  IDrawPaths
 **************************************************************************
 *
 * Description:
 *     Draws the paths in region as greyed backgrounds
 *
 * Inputs:
 *     GStateHandle gstate        -- Drawing surface with correct coordinates
 *     T_regionArrayHandle regionArray
 *                                -- Array of
 *                                   VisLargeTextRegionArrayElement
 *                                   region structures to draw
 *
 * Revision:
 *     Who  Date:     Comments:
 *     ---  --------  --------------------
 *     LES  03/21/00  Created.
 *
 **************************************************************************/
#if COMPILE_OPTION_FILL_REGION_SHAPES
void IDrawPaths(GStateHandle gstate, T_regionArrayHandle regionArray, VMFileHandle file)
{
    VisLargeTextRegionArrayElement *p_region ;
    word num ;
    word i;
    word size ;
    word *p_path ;
    sword lastY ;
    sword x1, x2, y, limitY ;

    GrSaveState(gstate) ;
    GrSetAreaMaskSys(gstate, SDM_50) ;
    GrSetAreaColor(gstate, CF_INDEX, C_BROWN, 0, 0) ;

    num = RegionArrayGetCount(regionArray) ;
    for (i=0; i<num; i++)  {
        RegionLock(regionArray, i, &p_region, &size) ;
        if (p_region->VLTRAE_region)  {
            p_path = DBLockUngrouped(file, p_region->VLTRAE_region) ;
            GrSaveState(gstate) ;
            GrApplyTranslationDWord(
                gstate,
                p_region->VLTRAE_spatialPosition.PD_x,
                p_region->VLTRAE_spatialPosition.PD_y) ;

            /* Skip the bounds after drawing */
            limitY  = p_path[3] ;
            if (limitY > p_region->VLTRAE_size.XYS_height)
                limitY = p_region->VLTRAE_size.XYS_height ;
            GrDrawRect(gstate, p_path[0], p_path[1], p_path[2], limitY) ;
            GrDrawRect(gstate, p_path[0], p_path[1], p_region->VLTRAE_size.XYS_width, limitY) ;
            p_path += 4 ;
            lastY = *p_path ;
            p_path += 2 ;
            while (*p_path != EOREGREC)  {
                y = *(p_path++) ;
                x1 = *(p_path++) ;
                x2 = *(p_path++) ;
                p_path++ ;
                limitY = y ;
                if (limitY > p_region->VLTRAE_size.XYS_height)
                    limitY = p_region->VLTRAE_size.XYS_height ;
                GrFillRect(gstate, x1, lastY+1, x2, limitY+1) ;
                lastY = y ;
            }

            GrRestoreState(gstate) ;
            DBUnlock(p_path-1) ;
        }
        RegionUnlock(p_region) ;
    }
    GrRestoreState(gstate) ;
}
#endif

/**************************************************************************
 * Routine: GetVarGraphic
 **************************************************************************
 *
 * Description:
 *     Extracts information from the passed image data record in a form
 *     that can be used by ExtGrFillMosaic() for drawing the background.
 *
 *     Note that this implementation currently assumes the image to be
 *     unscaled (which is valid for backgrounds).
 *
 * Inputs:
 *     HTMLimageData *iae         -- Data of image to draw
 *
 * Outputs:
 *     EGMosaicSourceType         -- Whether it is a bitmap or a GString
 *     VMFileHandle *vmf          -- VMFile holding image
 *     VMBlockHandle *vmb         -- VMBlock of image's chain 
 *     XYSize *size               -- Size of image is returned here
 *     Boolean *isTransparent     -- FALSE if background is fully covered
 *
 **************************************************************************/
EGMosaicSourceType GetVarGraphic(HTMLimageData *iae, VMFileHandle *vmf, 
                                 VMBlockHandle *vmb, XYSize *size,
                                 Boolean *isTransparent)
{
    AnimationHeader *p_header ;
    word prevFrame ;
    AnimationFrame *p_frame ;
    MemHandle mem ;
    EGMosaicSourceType ret;
    typedef struct {
        HugeArrayDirectory dir ;
        CBitmap bitmap ;
    } HugeBitmapHeader ;
    HugeBitmapHeader *p_bitmapheader ;
  
    *isTransparent = TRUE;
    *size = iae->HID_size;

    switch(iae->HID_IADType)
    {
      case IAD_TYPE_GSTRING:
        ret = EGMST_GSTRING;
        *vmf = iae->HID_vmf;
        *vmb = iae->HID_vmb;
        break;
    
      case IAD_TYPE_ANIMATION:
        ret = EGMST_BITMAP;
        *vmf = iae->HID_vmf;

        p_header = VMLock(iae->HID_vmf, iae->HID_vmb, &mem) ;
        *vmb = (((VMChain *)(((byte *)p_header)+p_header->AH_tree.VMCT_offset))[0])>>16 ;

        /* Use transparency and invalidation information from the previous frame. */
        prevFrame = p_header->AH_tree.VMCT_count - 1;
        p_frame = ((AnimationFrame *)(&p_header[1]))+prevFrame ;

        if(p_frame->AF_flags & ANIMATION_FLAG_NOT_TRANSPARENT)
          *isTransparent = FALSE;

        VMUnlock(mem);
        break;

      case IAD_TYPE_BITMAP:
        ret = EGMST_BITMAP;
        *vmf = iae->HID_vmf;
        *vmb = iae->HID_vmb;

        // Can set *isTransparent to false if bitmap has no mask
        p_bitmapheader = (HugeBitmapHeader *)VMLock(iae->HID_vmf, iae->HID_vmb, &mem) ;
        if (!(p_bitmapheader->bitmap.CB_simple.B_type & BMT_MASK))
            *isTransparent = FALSE ;
        VMUnlock(mem) ;
        break;
    }

    return ret;
}

HTMLTextInstance *ISetRegionLimit(optr textObj, HTMLTextInstance *pself)
{
    word *p_limit ;
    word lastCell ;
    word lastRegion = 0 ;
    HTMLcellData *p_cell ;
    word size ;
    
    p_limit = ObjVarFindData(textObj, ATTR_VIS_LARGE_TEXT_ONLY_DRAW_X_REGIONS) ;
    if (!p_limit)  {
        p_limit = ObjVarAddData(textObj, ATTR_VIS_LARGE_TEXT_ONLY_DRAW_X_REGIONS, sizeof(word)) ;
        pself = ObjDerefVis(textObj) ;
    }
    if (p_limit)  {
        /* Do we have cells?  If we do, figure out the last valid region, else set to 0 */
        if (pself->HTI_cellArray)  {
            lastCell = pself->HTI_numFormattedCells ;

            /* Find the last cell with a region */
            while (lastCell)  {
                CellLock(pself->HTI_cellArray, lastCell-1, &p_cell, &size) ;
                lastRegion = p_cell->HCD_region+1 ;
                CellUnlock(p_cell) ;
                if (lastRegion)
                    break ;
                lastCell-- ;
            }
        }
        *p_limit = lastRegion ;
    }

    return pself ;
}

@extern method HTMLTextClass, MSG_VIS_DRAW
{
    sdword lx,ly;
    RectDWord clip;
    Rectangle clipSmall ;
    EGMosaicSourceType egmst;
    Boolean isTransparent;
    VMFileHandle vmf;
    VMBlockHandle vmb;
    XYSize size;
    HTMLimageData *iae;
    word elsize;

    ProfPoint("Unaccounted Time") ;
    /* Only draw if we allow it and its not suspended */
    if ((pself->HTI_drawingOn>=0) &&
        ((pself->VTI_intFlags & VTIF_SUSPENDED)==0))  {

        pself = ISetRegionLimit(oself, pself) ;

        /* Only draw the background if we are not printing and have */
        /* a background to draw. If the mask is null anyway, don't bother. */
        if((drawFlags & DF_PRINT)==0 && GrGetMaskBoundsDWord(gstate, &clip))
        {
          GrSaveState(gstate);

          if(pself->HTI_backgroundImage != CA_NULL_ELEMENT)
          {
            MemLock(OptrToHandle(pself->HTI_imageArray));
            iae = ChunkArrayElementToPtr(pself->HTI_imageArray, 
              pself->HTI_backgroundImage, &elsize);
                                        // deference token to image record 
            egmst = GetVarGraphic(iae, &vmf, &vmb, &size, &isTransparent);
            MemUnlock(OptrToHandle(pself->HTI_imageArray));
          }
          else
            isTransparent = TRUE;       // no background: always draw single color

	  /* always need clipSmall */
          GrApplyTranslationDWord(gstate, clip.RD_left, clip.RD_top);
          clipSmall.R_left = 0 ;
          clipSmall.R_top = 0 ;
          clipSmall.R_bottom = clip.RD_bottom - clip.RD_top ;
          clipSmall.R_right = clip.RD_right - clip.RD_left ;

          if (isTransparent)            // transparent images need a backdrop
          {
            GrSetAreaColor(gstate,
              pself->VTI_washColor.CQ_info, pself->VTI_washColor.CQ_redOrIndex,
              pself->VTI_washColor.CQ_green, pself->VTI_washColor.CQ_blue);
            GrFillRect(
              gstate,
              clipSmall.R_left,
              clipSmall.R_top,
              clipSmall.R_right,
              clipSmall.R_bottom);
	  }

          if(pself->HTI_backgroundImage != CA_NULL_ELEMENT)
          {
            lx = (clip.RD_left / (dword)size.XYS_width) * size.XYS_width;
            ly = (clip.RD_top / (dword)size.XYS_height) * size.XYS_height;
            lx -= clip.RD_left ;
            ly -= clip.RD_top ;

            ExtGrFillMosaic(gstate, vmf, vmb,
              (sword)lx, (sword)ly,
              clipSmall.R_right, clipSmall.R_bottom,
              0, 0, FALSE, egmst);
          }
          GrRestoreState(gstate);
        }

        @call self::MSG_HTML_TEXT_DRAW_TABLE_FRAME(gstate);

        RegionPurgeCache(oself) ;
#if COMPILE_OPTION_REGION_OUTLINES
        IDrawRegions(gstate, RegionArrayConstruct(oself, pself)) ;
#endif

        @callsuper() ;
#if COMPILE_OPTION_REGION_OUTLINES
        IDrawRegions(gstate, RegionArrayConstruct(oself, pself)) ;
#endif
#if COMPILE_OPTION_FILL_REGION_SHAPES
        IDrawPaths(gstate, RegionArrayConstruct(oself, pself), pself->VTI_vmFile) ;
#endif
    }
    ProfPoint("HTMLTextClass::MSG_VIS_DRAW") ;
}

/**************************************************************************
 * Method: HTMLTextClass::MSG_HTML_TEXT_INTERNAL_INIT_INVAL_AREA
 **************************************************************************
 *
 * Description:
 *     Start tracking invalidations to this text object.
 *
 * Inputs:
 *     word heightThreshold       -- How tall of an invalidation to hold
 *                                   until a flush must occur.
 *
 **************************************************************************/
@extern method HTMLTextClass, MSG_HTML_TEXT_INTERNAL_INIT_INVAL_AREA 
{
    word *p_value ;

    memset(&pself->HTI_invalArea, 0, sizeof(pself->HTI_invalArea)) ;
    pself->HTI_heightThreshold = heightThreshold ;
    if (!ObjVarFindData(oself, ATTR_HTML_TEXT_PREVIOUS_NUM_CELLS_FORMATTED))  {
        p_value = ObjVarAddData(
                      oself, 
                      ATTR_HTML_TEXT_PREVIOUS_NUM_CELLS_FORMATTED, 
                      sizeof(word)) ;
        *p_value = 0 ;
    }
}

/**************************************************************************
 * Method: HTMLTextClass::MSG_HTML_TEXT_INTERNAL_INIT_INVAL_AREA
 **************************************************************************
 *
 * Description:
 *     Add the rectangle to the invalidation area.  Stop if the total area
 *     is too big and flush.  Otherwise, hold until a flush is called.
 *
 * Inputs:
 *     dword startX, startY       -- Top left or rectangular area to inval
 *     dword endX, endY           -- Bottom right                
 *
 **************************************************************************/
@extern method HTMLTextClass, MSG_HTML_TEXT_INTERNAL_COLLECT_INVAL_AREA
{
    RectDWord *p_rect ;

    if (startY <= HTML_BODY_TAG_DEFAULT_TOP_MARGIN)
        startY = 0 ;

    /* Must have area of some sort */
    if ((endY > startY) && (endX > startX))  {
        p_rect = &pself->HTI_invalArea ;
        if (p_rect->RD_right == 0)  {
            /* No data yet.  Fill it */
            p_rect->RD_left = startX ;
            p_rect->RD_top = startY ;
            p_rect->RD_right = endX ;
            p_rect->RD_bottom = endY ;
        } else {
            /* Expand the region */
            if (startX < p_rect->RD_left)
                p_rect->RD_left = startX ;
            if (startY < p_rect->RD_top)
                p_rect->RD_top = startY ;
            if (endX > p_rect->RD_right)
                p_rect->RD_right = endX ;
            if (endY > p_rect->RD_bottom)
                p_rect->RD_bottom = endY ;
        }
    }

    /* If it's on the screen changing, then the boundary needs to be recalculated eventually */
    pself->HTI_layoutState |= HTS_NEED_BOUNDARY_CALCULATION ;
}

/**************************************************************************
 * Method: HTMLTextClass::MSG_HTML_TEXT_INTERNAL_FLUSH_INVAL_AREA
 **************************************************************************
 *
 * Description:
 *     Actually let the flush occur.  Also make sure all regions that can
 *     be seen is activated based on the current formating state.
 *
 **************************************************************************/
@extern method HTMLTextClass, MSG_HTML_TEXT_INTERNAL_FLUSH_INVAL_AREA
{
    GStateHandle gstate ;
    RectDWord *p_rect ;
    word *p_value ;

    p_rect = &pself->HTI_invalArea ;

    /* Position regions AND calculate boundaries */
    if (pself->HTI_cellArray)  {
        p_value = ObjVarFindData(oself, ATTR_HTML_TEXT_PREVIOUS_NUM_CELLS_FORMATTED) ;
        if (p_value)  {
            if (*p_value < pself->HTI_numFormattedCells)  {
                IAdjustRegions(oself, pself, *p_value, pself->HTI_numFormattedCells) ;
                *p_value = pself->HTI_numFormattedCells ;
            }
        }
        @call oself::MSG_HTML_TEXT_CALCULATE_BOUNDARIES() ;
    }

    /* Only process if we have something */
    if ((p_rect->RD_right > p_rect->RD_left) && 
            (p_rect->RD_bottom > p_rect->RD_top))  {
        /* Invalidate that large rectangle and reset */
        gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE() ;
        if (gstate)  {
            GrInvalRectDWord(gstate, p_rect);
            GrDestroyState(gstate) ;
        }
        @call oself::MSG_HTML_TEXT_INTERNAL_INIT_INVAL_AREA(
                 pself->HTI_heightThreshold) ;
    }
}


/***********************************************************************
 *  END OF FILE:  HTMLTDRW.GOC
 ***********************************************************************/
