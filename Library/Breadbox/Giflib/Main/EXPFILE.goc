#include <geos.h>

@include <Objects/winC.goh>
@include <Objects/inputC.goh>
@include <Objects/uiInputC.goh>
@include <Objects/metaC.goh>
@include <Objects/visC.goh>
@include "giflib.goh"
#include <extgraph.h>

#include <vm.h>
#include <file.h>
#include "config.h"
#include <Ansi/string.h>
#include <graphics.h>
#include <heap.h>
#include <hugearr.h>


/**********************************************************************
*	LOCAL TYPE DEFINITION
**********************************************************************/

#if 0
typedef struct
{
	int		GES_codeSize;
#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
	int		GES_hashShift;
	dword	GES_fCode;
	int		GES_hIndex;
	long	GES_hashTab[GIF_EXPORT_HASH_TAB_SIZE];
	word	GES_codeTab[GIF_EXPORT_HASH_TAB_SIZE];
#else
	int		GES_prefix[4096];
	int		GES_suffix[4096];
#endif
	int		GES_tabIndex;
	int		GES_freeCode;
	int		GES_clearCode;
	int		GES_maxCode;
	int		GES_initCodeSize;
	int		GES_firstFreeCode;
	dword	GES_outBuf;
	int		GES_outCount;
	FileHandle	GES_outFile;
	byte	GES_rasterOut;
	byte	GES_rasterData[256];
	int		GES_EOFcode;
	byte	GES_writeBuf[GIF_EXPORT_WRITE_BUF_SIZE];
	word	GES_writeBufLeft;
	word	GES_writeBufPos;
} gifExpStream;
#endif

/**********************************************************************
*	LOCAL FUNCTION DEFINITION
**********************************************************************/

GifError _pascal _export
gifExpBitmap(VMFileHandle srcfile, VMBlockHandle bmpblock,
			FileLongName destname, FileHandle destfile);

#if 0
GifError
gifExpFileWrite(gifExpStream *stream, byte *buf, word size);

GifError
gifExpFinishFileWrite(gifExpStream *stream);

GifError
gifExpWriteRasterBlock(gifExpStream *stream);

GifError
gifExpWriteRasterDataByte(gifExpStream *stream, byte data);

GifError
gifExpFinishRasterDataByteWriting(gifExpStream *stream);

GifError
gifExpWriteCode(gifExpStream *stream, int code);

GifError
gifExpFinishCodeWriting(gifExpStream *stream);

int
gifExpFindStringInTable(gifExpStream *stream, int pixel);

GifError
gifExpClearCode(gifExpStream *stream);

GifError
gifExpTableAddPixel(gifExpStream *stream, int code);

GifError
gifExpWritePixel(gifExpStream *stream, byte pixel);

GifError
gifExpWritePixelLine(gifExpStream *stream, BMFormat bitform, byte *lineptr, word width);
#endif

/**********************************************************************
*	LOCAL FUNCTION DECLARATION
**********************************************************************/

#if 0
GifError
gifExpFileWrite(gifExpStream *stream, byte *buf, word size)
{
	GifError stat = GE_NO_ERROR;
	word srcpos = 0;

	while((size != 0) && (stat == GE_NO_ERROR))
	{
		if(size >= stream->GES_writeBufLeft)
		{
			memcpy(&stream->GES_writeBuf[stream->GES_writeBufPos],
					&buf[srcpos], stream->GES_writeBufLeft);

			if(FileWrite(stream->GES_outFile, stream->GES_writeBuf,
				GIF_EXPORT_WRITE_BUF_SIZE, 0) != GIF_EXPORT_WRITE_BUF_SIZE)
				stat = GE_WRITE_PROBLEM;

			srcpos += stream->GES_writeBufLeft;
			size -= stream->GES_writeBufLeft;
			stream->GES_writeBufPos = 0;
			stream->GES_writeBufLeft = GIF_EXPORT_WRITE_BUF_SIZE;
		}
		else
		{
			memcpy(&stream->GES_writeBuf[stream->GES_writeBufPos],
					&buf[srcpos], size);

			stream->GES_writeBufPos += size;
			stream->GES_writeBufLeft -= size;
			size = 0;
		}
	}


	return(stat);
}

//*********************************************************************

GifError
gifExpFinishFileWrite(gifExpStream *stream)
{
	GifError stat = GE_NO_ERROR;

	if(stream->GES_writeBufPos)
	{
		if(
		FileWrite(stream->GES_outFile, stream->GES_writeBuf,
			stream->GES_writeBufPos, 0)
			!= stream->GES_writeBufPos)
			stat = GE_WRITE_PROBLEM;
	}

	return(stat);
}

//*********************************************************************

GifError
gifExpWriteRasterBlock(gifExpStream *stream)
{
	GifError stat = GE_NO_ERROR;

	// only write the block if data are available
	if(stream->GES_rasterOut > 0)
	{
		stat = gifExpFileWrite(stream, &(stream->GES_rasterOut), 1);

		if(stat == GE_NO_ERROR)
			stat = gifExpFileWrite(stream, stream->GES_rasterData,
				stream->GES_rasterOut);

		stream->GES_rasterOut = 0;
	}

	return(stat);
}

//*********************************************************************

GifError
gifExpWriteRasterDataByte(gifExpStream *stream, byte data)
{
	GifError stat = GE_NO_ERROR;

	stream->GES_rasterData[stream->GES_rasterOut] = data;
	stream->GES_rasterOut ++;

	if(stream->GES_rasterOut == 255)
		stat = gifExpWriteRasterBlock(stream);

	return(stat);
}

//*********************************************************************

GifError
gifExpFinishRasterDataByteWriting(gifExpStream *stream)
{
	return(gifExpWriteRasterBlock(stream));
}

//*********************************************************************

GifError
gifExpWriteCode(gifExpStream *stream, int code)
{
	static unsigned long masks[] = {
		0x0000, 0x0001, 0x0003, 0x0007, 0x000F,
		0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF,
		0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF,
		0x7FFF, 0xFFFF
	};
	GifError stat = GE_NO_ERROR;

	stream->GES_outBuf &= masks[stream->GES_outCount];
	if(stream->GES_outCount > 0)
		stream->GES_outBuf |= ((dword) code << stream->GES_outCount);
	else
		stream->GES_outBuf = code;

	stream->GES_outCount += stream->GES_codeSize;

	while(stream->GES_outCount > 7)
	{
		// put bytes out
		stat = gifExpWriteRasterDataByte(stream, stream->GES_outBuf & 0xFF);
		stream->GES_outBuf >>= 8;
		stream->GES_outCount -= 8;
	}

	return(stat);
}

//*********************************************************************

GifError
gifExpFinishCodeWriting(gifExpStream *stream)
{
	GifError stat = GE_NO_ERROR;

	if(stream->GES_outCount > 0)
		stat = gifExpWriteRasterDataByte(stream,
			(byte) stream->GES_outBuf << (8 - stream->GES_outCount));

	return(stat);
}

//*********************************************************************

int
gifExpFindStringInTable(gifExpStream *stream, int pixel)
{
#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
	long fcode;
	int hindex;

	fcode =
	stream->GES_fCode = (((long) pixel << 12) + stream->GES_tabIndex);
	hindex =
	stream->GES_hIndex = (((word) pixel << stream->GES_hashShift) ^ stream->GES_tabIndex);

	if(stream->GES_hashTab[hindex] == fcode)
	{
		return(stream->GES_codeTab[hindex]);
	}
	else
	{
		int disp;

		disp = GIF_EXPORT_HASH_TAB_SIZE - hindex;

		if(hindex == 0)
			disp = 1;

		while(stream->GES_hashTab[hindex] > 0)
		{
			if((hindex -= disp) < 0)
				hindex += GIF_EXPORT_HASH_TAB_SIZE;

			if(stream->GES_hashTab[hindex] == fcode)
				return(stream->GES_codeTab[hindex]);
		}
	}

	return(-1);
#else
	int foundIndex;
	int tempIndex = stream->GES_tabIndex + 1;

	foundIndex = -1;
	while(tempIndex < stream->GES_freeCode)
	{
		if(stream->GES_suffix[tempIndex] == pixel)
			if(stream->GES_prefix[tempIndex] == stream->GES_tabIndex)
			{
				foundIndex = tempIndex;
				break;
			}

		tempIndex ++;
	};

	return(foundIndex);
#endif
}

//*********************************************************************

GifError
gifExpClearCode(gifExpStream *stream)
{
	GifError stat = GE_NO_ERROR;

	// write clear code
	stat = gifExpWriteCode(stream, stream->GES_clearCode);

	if(stat == GE_NO_ERROR)
	{
		// reset vars and tables
		stream->GES_codeSize = stream->GES_initCodeSize;
		stream->GES_maxCode = stream->GES_clearCode * 2;
		stream->GES_freeCode = stream->GES_firstFreeCode;

#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
		{
			long *hTabPtr = stream->GES_hashTab + GIF_EXPORT_HASH_TAB_SIZE;

			long i;
			long m1 = -1;

			i = GIF_EXPORT_HASH_TAB_SIZE - 16;

			do {
				*(hTabPtr - 16) = m1;
				*(hTabPtr - 15) = m1;
				*(hTabPtr - 14) = m1;
				*(hTabPtr - 13) = m1;
				*(hTabPtr - 12) = m1;
				*(hTabPtr - 11) = m1;
				*(hTabPtr - 10) = m1;
				*(hTabPtr - 9) = m1;
				*(hTabPtr - 8) = m1;
				*(hTabPtr - 7) = m1;
				*(hTabPtr - 6) = m1;
				*(hTabPtr - 5) = m1;
				*(hTabPtr - 4) = m1;
				*(hTabPtr - 3) = m1;
				*(hTabPtr - 2) = m1;
				*(hTabPtr - 1) = m1;
				hTabPtr -= 16;
			}
			while((i -= 16) >= 0);

			for( i += 16; i > 0; --i)
				*--hTabPtr = m1;
		}
#else
		{
			int count;

			count = 0;
			while(count < 4096)
			{
				stream->GES_suffix[count] = -1;
				stream->GES_prefix[count] = -1;
				count ++;
			}
			count = 0;
			while(count < stream->GES_clearCode)
			{
				stream->GES_suffix[count] = count;
				count ++;
			}
			stream->GES_tabIndex = -1;
		}
#endif
	}
	return(stat);
}

//*********************************************************************

GifError
gifExpTableAddPixel(gifExpStream *stream, int code)
{
	GifError stat = GE_NO_ERROR;

	// if over then extend code size
	if(stream->GES_freeCode < stream->GES_maxCode)
	{
#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
		stream->GES_codeTab[stream->GES_hIndex] = stream->GES_freeCode;
		stream->GES_hashTab[stream->GES_hIndex] = stream->GES_fCode;
#else
		stream->GES_suffix[stream->GES_freeCode] = code;
		stream->GES_prefix[stream->GES_freeCode] = stream->GES_tabIndex;
#endif
		stream->GES_freeCode ++;
	}
	else
	{
		if(stream->GES_codeSize < 12)
		{
			stream->GES_codeSize ++;
			stream->GES_maxCode <<= 1;

#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
			stream->GES_codeTab[stream->GES_hIndex] = stream->GES_freeCode;
			stream->GES_hashTab[stream->GES_hIndex] = stream->GES_fCode;
#else
			stream->GES_suffix[stream->GES_freeCode] = code;
			stream->GES_prefix[stream->GES_freeCode] = stream->GES_tabIndex;
#endif
			stream->GES_freeCode ++;
		}
		else
		{
			stat = gifExpClearCode(stream);
		}
	}

	return(stat);
}

//*********************************************************************

GifError
gifExpWritePixel(gifExpStream *stream, byte pixel)
{
	int code;
	GifError stat = GE_NO_ERROR;

#ifdef GIF_EXPORT_HASH_TABLE_SUPPORT
	if(stream->GES_tabIndex == -1)
	{
		stream->GES_tabIndex = pixel;
		return(stat);
	}
#endif

	// if is in table
	code = gifExpFindStringInTable(stream, pixel);

	if(code != -1) // not in table
	{
		// save pointer to this item
		stream->GES_tabIndex = code;
	}
	else  // else insert new string into table
	{
		// write stored index
		stat = gifExpWriteCode(stream, stream->GES_tabIndex);

		if(stat == GE_NO_ERROR)
			gifExpTableAddPixel(stream, pixel);

		// save ptr to string K
		stream->GES_tabIndex = pixel;
	}

	return(stat);
}

//*********************************************************************

GifError
gifExpWritePixelLine(gifExpStream *stream, BMFormat bitform, byte *lineptr, word width)
{
	GifError stat = GE_NO_ERROR;

	if(bitform == BMF_8BIT)
	{
		while(width && (stat == GE_NO_ERROR))
		{
			stat = gifExpWritePixel(stream, *lineptr);
			lineptr ++;
			width --;
		}
	}
	else
	{
		if(bitform == BMF_4BIT)
		{
			while(width && (stat == GE_NO_ERROR))
			{
				byte data = *lineptr;

				stat = gifExpWritePixel(stream, data >> 4);
				width --;

				if(width && (stat == GE_NO_ERROR))
				{
					stat = gifExpWritePixel(stream, data & 0x0F);
					width --;
				}

				lineptr ++;
			}
		}
		else
		{
			while(width && (stat == GE_NO_ERROR))
			{
				char localCount;
				union {
					byte data_b[2];
					word data_w;
				} data;

				data.data_b[0] = *lineptr;
				data.data_b[1] = 0;

				localCount = 8;

				while(localCount && width && (stat == GE_NO_ERROR))
				{
					data.data_w <<= 1;
					stat = gifExpWritePixel(stream, data.data_b[1] & 1);

					localCount --;
					width --;
				}

				lineptr ++;
			}
		}
	}

	return(stat);
}
#endif

//*********************************************************************

GifError _pascal _export
gifExpBitmap(VMFileHandle srcfile, VMBlockHandle bmpblock,
			FileLongName destname, FileHandle destfile)
{
	void *lineptr;
	word size;
	GifStreamHandle handle;
	GifError stat = GE_NO_ERROR;
	int width, height;
	BMType bmptype;
	BMFormat bitform;
	SizeAsDWord size_xy;
	word y;

	// determine bitmap size
	size_xy = BmpGetBitmapSize(srcfile, bmpblock, &stat);
	if(stat != GE_NO_ERROR)
		return(stat);
	width = DWORD_WIDTH(size_xy);
	height = DWORD_HEIGHT(size_xy);

	// determine type
	bmptype = BmpGetBitmapType(srcfile, bmpblock, &stat);
	if(stat != GE_NO_ERROR)
		return(stat);
	bitform = bmptype & BMT_FORMAT;

	if(bmptype & BMT_PALETTE)
	{
		RGBValue *palptr;
		MemHandle palmem;

		// get palette of this bitmap here
		if(bitform == BMF_4BIT)
		{
			palmem = MemAlloc(sizeof(RGBValue) * 16,
						HF_FIXED, 0);

			if(palmem)
			{
				palptr = (RGBValue*) MemDeref(palmem);

				if(palptr)
					BmpGetBitmapPalette(
						srcfile, bmpblock, palptr, 16, &stat);
			}
		}
		else
		{
			palmem = MemAlloc(sizeof(RGBValue) * 256,
						HF_FIXED, 0);
			if(palmem)
			{
				palptr = (RGBValue*) MemDeref(palmem);

				if(palptr)
					BmpGetBitmapPalette(
						srcfile, bmpblock, palptr, 256, &stat);
			}
		}

		if((palmem) && (palptr))
		{
			if(stat == GE_NO_ERROR)
				handle = GifExportStreamCreate(bitform, width, height, destname, destfile,
							palptr, &stat);
			else
				stat = GE_BLOCK_LOCK_FAILURE;

			MemFree(palmem);
		}
		else
			return(GE_OUT_OF_MEMORY);
	}
	else
	{
		handle = GifExportStreamCreate(bitform, width, height, destname, destfile,
					0, &stat);
	}

	if(stat != GE_NO_ERROR)
		return(stat);

	// loop reading all pixels
	y = 0;
	while((y != height) && (stat == GE_NO_ERROR))
	{
		if(HAL_COUNT(HugeArrayLock(srcfile, bmpblock,
				  y,&lineptr,&size)))
		{
			stat =
				GifExportStreamWriteLine(handle, lineptr);

			HugeArrayUnlock(lineptr);
		}
		else
		{
			GifExportStreamDestroy(handle, TRUE);
			return(GE_INVALID_BITMAP);
		}

		y ++;
	}

	// finish writing the file
	stat = GifExportStreamDestroy(handle, FALSE);

	return(stat);
}

/**********************************************************************
*	GLOBAL FUNCTIONS
**********************************************************************/

GifError _pascal _export
GifExportBitmapFName(VMFileHandle srcfile, VMBlockHandle bmpblock,
			PathName destname)
{
	GifError stat = GE_NO_ERROR;

	stat = gifExpBitmap(srcfile, bmpblock, destname, 0);

	return(stat);
}

/*********************************************************************/

GifError _pascal _export
GifExportBitmapFHandle(VMFileHandle srcfile, VMBlockHandle bmpblock,
			FileHandle destfile)
{
	GifError stat = GE_NO_ERROR;

	stat = gifExpBitmap(srcfile, bmpblock, 0, destfile);

	return(stat);
}

/*********************************************************************/
