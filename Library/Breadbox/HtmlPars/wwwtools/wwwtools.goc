/***********************************************************************
 *
 * PROJECT:       HTMLView
 * FILE:          wwwtools.goc
 *
 * AUTHOR:        Marcus Grï¿½ber
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>
#include <initfile.h>
#include <resource.h>
#include <library.h>
#include <geoMisc.h>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/ctype.h>

#define min(a,b) ((a)<(b)?(a):(b))

@include "htmlpars.goh"


/***************************************************************************
 *      URL handling
 ***************************************************************************/

Boolean _export _pascal ToolsParseURL(
  char *url,char *type,char *server,char *path)
{
        int i;

        *type=*server=*path=0;          /* haven't read nothing yet... */

        for(i=0; isalpha(url[i]) && i<URL_MAX_TYPE-1; i++)
          type[i]=toupper(url[i]);      /* copy potential "type" to buffer */
        if(url[i]==':' && i>1 && i<=URL_MAX_TYPE-1)
        {                               /* looks like a valid type? */
          type[i]=0;                    /* terminate type string */
          url+=i+1;                     /* advance to position after ":" */
        }
        else
          *type=0;                      /* discard misread type info */

        if(url[0]=='/' && url[1]=='/')  /* server name follows */
        {                               
          url+=2;                       /* skip over "//" */
          for(i=0;
              url[i] && url[i]!='/' && i<URL_MAX_SERVER-1;
              i++)
            server[i]=url[i];           /* copy server name */
          server[i]=0;                  /* terminate server name */
          url+=i;                       /* skip over server name */
        }

        if(url[0])                      /* can only be a filename now... */
        {
          for(i=0;
              url[i] && i<URL_MAX_PATH-1;
              i++)
            path[i] = (url[i]=='\\') ? '/' : url[i];
                                        /* copy path normalizing slashes */
          path[i]=0;                    /* terminate path name */
          url+=i;
        }

        return TRUE;                    /* URL has been parsed */
}

char * _export _pascal ToolsMakeURL(
  char *type,char *server,char *path,char *url)
{
        *url=0;                         /* clear target buffer */

        if( strlen(type)+strlen(server)+strlen(path)+5 >= HTML_MAXBUF )
          return NULL;                  /* abort if string would be too long */

        if(*type)                       /* service type specified? */
          sprintf(url,"%s:",type);      /* prepend service type */
        if(*type || *server)            /* must specifiy server name? */
          sprintf(url+strlen(url),"//%s/",server);
        if(*path)                       /* add path if specified */
          sprintf(url+strlen(url),"%s",
            path + (*path=='/' && (*type || *server)?1:0) );

        return url;
}

/*
 *  Update pathname in "cur" with pathname in "new", where "new" may be
 *  either an absolute or a relative pathname. pathname in this context
 *  means a "unix-ified" form always starting with a "/" (if absolute),
 *  with a drive letter possibly following after that.
 */
char * _export _pascal ToolsResolvePathname(char *cur,char *new)
{
        char *p;

        p=strchr(new,':');              /* drive letter in new path? */
        if(!p)                          /* also supports "x|" drive letters */
          p = strchr(new,'|');
        if(p || *new=='/')              /* absolute path or path with drive? */
        {
          if(!p && cur[0]=='/' && cur[1] && (cur[2]==':' || cur[2]=='|'))
            p=cur+3;                    /* cur path w/drive, new path without */
          else
            p=cur;                      /* full path: overwrite old */
          strcpy(p,new);                
        }
        else
        {
          p=strrchr(cur,'/');
          while(new[0]=='.')            /* starts with relative directory? */
          {
            if(new[1]=='/')             /* "./" means current directory */
              new+=2;                   /* just skip ("null op") */
            else if(new[1]=='.')        /* more than one dot */
            {
              if(p==NULL || p==cur)
                return NULL;            /* no (more) slashes: abort */
              new++;                    /* remove one dot */
              p--;                      /* go one char back from last "/" */
              while(p!=cur && *p!='/')
                p--;                    /* go back one element */
            }
            else
              return NULL;              /* don't know what this is... */
          }

          if(p)                         /* cut off directory at position */
            p[1]=0;
          strcat(cur,new);              /* append new filename at end */
        }

        return cur;                     /* return new pathname */
}

/*
 * Convert a URL that may be relative or not into a URL which is absolute
 * (i.e. which contains all the components necessary to uniquely identify
 * the location without any further information) also taking into account the
 * current URL passed.
 */
int _export _pascal ToolsResolveRelativeURL(char *cur,char *url)
{
        char newType[URL_MAX_TYPE],newServer[URL_MAX_SERVER],
             newPath[URL_MAX_PATH];

        char curType[URL_MAX_TYPE],curServer[URL_MAX_SERVER],
             curPath[URL_MAX_PATH];

        ToolsParseURL(cur,curType,curServer,curPath);
        ToolsParseURL(url,newType,newServer,newPath);

        if(*newType)                    /* update service if specified */
        {
          strcpy(curType,newType);
          *curPath=*curServer=0;        /* path and port: forget old */
        }
        if(*newServer)                  /* update server if specified */
        {
          strcpy(curServer,newServer);
          *curPath=0;                   /* forget path on old server */
        }
        ToolsResolvePathname(curPath,newPath);
                                        /* update path */
        if(curPath[0] &&
            (curPath[1]==':' || curPath[1]=='|' ||
              (curPath[1] && (curPath[2]==':' || curPath[2]=='|'))))
          *curType=*curServer=0;        /* looks like local path */
        if(!*curType)                   /* default service type is FILE: */
          strcpy(curType,"FILE");       /* (local file) */

        ToolsMakeURL(curType,curServer,curPath,cur);
                                        /* assemble new url */
        return 0;                       /* no error */
}

Boolean _export _pascal ToolsMakeURLAbsolute(char *cur,char *url,char *urldst)
{
    char b[HTML_MAXBUF+1];
    Boolean ret;

    strcpy(b,cur);                      /* get current URL as base */
    ToolsResolveRelativeURL(b,url);     /* make URL absolute */
    ret = strcmp(b,cur);                /* effective URL changed? check now
                                           because urldst may be equal to cur */
    strcpy(urldst,b);                   /* update current URL */
    return ret;                         /* return changed or not */
}

void _export _pascal ToolsNormalizeURL(char *url)
{
    char urlType[URL_MAX_TYPE],urlServer[URL_MAX_SERVER],urlPath[URL_MAX_PATH];

    ToolsParseURL(url,urlType,urlServer,urlPath);
    strupr(urlType);
    strlwr(urlServer);
    ToolsMakeURL(urlType,urlServer,urlPath,url);
}

/***************************************************************************
 *      Various utility functions
 ***************************************************************************/

word _pascal _export ToolsStringSectionFindKey(char *sect, char *key,
  char *subKey, char *value, word bufSize, Boolean mapLeftToRight)
{
    char *p, *val1, *val2;
    word len1,len2,size;
    MemHandle str;
    word n,section;

    size = 0;
    if( InitFileReadStringBlock(sect, key, &str, IFCC_INTACT | IFRF_READ_ALL,
          &size) || size==0)            /* attempt to load list */
      return 0xFFFF;                    /* not found */

    section = 0xFFFF;                   /* not found anything yet */
    n = 0;                              /* section count */
    p = MemLock(str);                   /* lock string block */
    while(*p && section==0xFFFF)        /* while data left and no key found */
    {
      while(*p==' ' || *p=='\t') p++;   /* skip leading whites */
      val1 = p;                         /* start of value 1 */
      len1 = 0;                         /* found no data in first value yet */
      while(*p!='=' && *p) p++,len1++;  /* skip over first value */
      while(len1 && (val1[len1-1]==' ' || val1[len1-1]=='\t')) len1--;
                                        /* remove trailing whites */

      if(*p=='=') p++;                  /* skip over "=" */

      while(*p==' ' || *p=='\t') p++;   /* skip leading whites */
      val2 = p;                         /* start of value 2 */
      len2 = 0;                         /* found no data in second value yet */
      while((*p!='\r' && *p!='\n') && *p) p++,len2++;
                                        /* skip over second value */
      while(len2 && (val2[len2-1]==' ' || val2[len2-1]=='\t')) len2--;
                                        /* remove trailing whites */
      while(*p=='\r' || *p=='\n') p++;  /* skip over CR */

      if(mapLeftToRight)                /* key on left or right side of "="? */
      {
        if(LocalCmpStringsNoCase(val1,subKey,len1)==0 && len1==strlen(subKey))
        {
          xstrncpy(value,val2,min(len2+1,bufSize));
                                        /* return value, truncate if req'd */
          section = n;                  /* success */
        }
      }
      else
      {
        if(LocalCmpStringsNoCase(val2,subKey,len2)==0 && len2==strlen(subKey))
        {
          xstrncpy(value,val1,min(len1+1,bufSize));
                                        /* return value, truncate if req'd */
          section = n;                  /* success */
        }
      }
      n++;                              /* count section */
    }
    MemUnlock(str);
    MemFree(str);                       /* free memory with list */
    return section;                     /* return success state */
}

optr _export _pascal ToolsFormatMessage(optr msg,char *res)
{
    word size;
    MemHandle mh;
    char *dst;

    MemLock(OptrToHandle(msg));         /* copy message to new data block */

    size = strlen(LMemDeref(msg))+1;    /* basic size of HTML message */
    if(res)                             /* insert error message? */
      size += strlen((char *)res)+2;    /* leave room for message */

    mh = MemAlloc(size, HF_DYNAMIC, HAF_NO_ERR);
    dst = MemLock(mh);
    if(res)                             /* paste error message into block */
      sprintf(dst, LMemDeref(msg), (char *)res);
    else
      strcpy(dst, LMemDeref(msg));
    MemUnlock(mh);

    MemUnlock(OptrToHandle(msg));

    return ConstructOptr(mh,0);         /* return optr to data block */
}

DiskHandle _export _pascal ToolsParseDiskOrStandardPath(char **p)
{
    DiskHandle dh;
    word c = toupper(**p);              /* first letter of path */

    dh = FileParseStandardPath(0,p);

    if(dh==SP_NOT_STANDARD_PATH && c>='A' && c<='Z' && (*p)[1]==':')
    {
      dh = DiskRegisterDiskSilently(c-'A');
                                        /* get disk handle */
      (*p)+=2;                          /* skip over drive */
    }

    return dh;
}

/*
 * Safe extraction of extensions, which is not confused by extensions in
 * directory names...
 */
char * _export _pascal ToolsFindExtension(char *p)
{
    char *q;

    q = strrchr(p,'.');                 /* find last dot */
    if(q==NULL) return NULL;            /* no dot: no extension */
    q++;                                /* advance to point after dot */
    if(strchr(q,'/') || strchr(q,'\\')) /* already in other component: no ext */
      return NULL;
    return q;                           /* return pointer to extension */
}

/*
 * "Safe" strcpy, making sure that the buffer is zero-terminated and that
 * no more than bufsize bytes are transfered.
 */
char * _export _pascal xstrncpy(char *dst, char *src, word bufsize)
{
    strncpy(dst,src,bufsize-1);
    dst[bufsize-1] = 0;
    return dst;
}

typedef struct {
  VMChainLink HEH_link;                 /* always "end of chain" */
  char HEH_data[1];                     /* start of data area */
} ChunkListHeader;

VMBlockHandle ChunksToVMChainBlock(VMFileHandle vmf,MemHandle heap,
  ChunkHandle *chunks,word n_chunks)
{
    VMBlockHandle vmb;
    MemHandle mh;
    ChunkListHeader *exthdr;
    word i,size;
    char *p;

    size = 0;                           
    for(i=0; i<n_chunks; i++)           /* sum up total size of chunks */
      if(chunks[i])
        size+=LMemGetChunkSizeHandles(heap,chunks[i]);

    vmb = VMAlloc(vmf, sizeof(ChunkListHeader)+size+sizeof(word)*n_chunks-1,
      0xBEEF);
    exthdr = VMLock(vmf, vmb, &mh);
    exthdr->HEH_link.VMC_next = 0;
    p = exthdr->HEH_data;
    for(i=0; i<n_chunks; i++)           /* process all chunk */
      if(chunks[i])                     /* do we have a chunk? */
      {
        *(word *)p = size = LMemGetChunkSizeHandles(heap,chunks[i]);
        p += sizeof(word);              /* advance pointer */
        memcpy(p,LMemDerefHandles(heap,chunks[i]),size);
        p += size;                      /* advance pointer */
      }
      else
      {
        *(word *)p = 0xFFFF;            /* placeholder for a null handle */
        p += sizeof(word);              /* advance pointer */
      }
    VMDirty(mh);
    VMUnlock(mh);
    return vmb;
}

void VMChainBlockToChunks(VMFileHandle vmf,VMBlockHandle vmb,MemHandle heap,
  ChunkHandle *chunks,word n_chunks)
{
    MemHandle mh;
    ChunkListHeader *exthdr;
    word i,s;
    char *p;

    exthdr = VMLock(vmf, vmb, &mh);
    p = exthdr->HEH_data;
    for(i=0; i<n_chunks; i++)
    {
      s = *(word *)p;
      p += sizeof(word);
      if(s!=0xFFFF)
      {
        if(chunks[i])                   /* realloc existing block if passed */
          LMemReAllocHandles(heap,chunks[i],s);
        else
          chunks[i] = LMemAlloc(heap,s);/* allocate new block on heap */
        memcpy(LMemDerefHandles(heap,chunks[i]),p,s);
                                        /* get data into block */
        p += s;                         /* advance pointer */
      }
      else
        chunks[i] = 0;                  /* coded null chunk pointer */
    }
    VMUnlock(mh);
}
