/***********************************************************************
 *
 * PROJECT:       VConvert
 * FILE:          cgmraw.goc
 *
 * DESCRIPTION:   Low-level functions for CGM access
 *
 * AUTHOR:        Marcus Groeber
 *
 ***********************************************************************/

@include <stdapp.goh>

#include <ansi/string.h>
#include <ansi/stdio.h>
#include <ansi/stdlib.h>

#include <meta.h>

#include "cgm/cgm.h"

FileHandle fCGM;
#define READ(_buf,_size,_f) (FileRead(_f,_buf,_size,FALSE)!=(_size))

static MemHandle cgm_h_data,cgm_h_args; /* blocks for argument buffering */
static char *cgm_arg_data;              /* buffer for argument data stream */
static union U_args *cgm_argv;          /* buffer for separated arguments */

static word cgm_ColorSelectionMode;     /* 0=palette, 1=rgb tripletts */
static struct _cgm_rgb cgm_cvx_low,cgm_cvx_high,
                                        /* color value extent */
                       cgm_ColorTable[CGM_MAXCOLORTBL];
                                        /* color table for palette mode */
                                        
static word _cgm_prec_int,_cgm_prec_idx,_cgm_prec_col,_cgm_prec_cidx;
                                        /* precision for various data types */


/*----------------------------------------------------------------------------*/
word CGM_raw_Start(void)
{
        int i;
        static struct _cgm_rgb DefaultPalette[16]={
          0x00, 0x00,0x00,0x00,  /* 00 */
          0x00, 0x00,0x00,0x80,  /* 01 */
          0x00, 0x00,0x80,0x00,  /* 02 */
          0x00, 0x00,0x80,0x80,  /* 03 */
          0x00, 0x80,0x00,0x00,  /* 04 */
          0x00, 0x80,0x00,0x80,  /* 05 */
          0x00, 0x80,0x80,0x00,  /* 06 */
          0x00, 0x55,0x55,0x55,  /* 07 */
          0x00, 0x80,0x80,0x80,  /* 08 */
          0x00, 0x55,0x55,0xFF,  /* 09 */
          0x00, 0x55,0xFF,0x55,  /* 0A */
          0x00, 0x55,0xFF,0xFF,  /* 0B */
          0x00, 0xFF,0x55,0x55,  /* 0C */
          0x00, 0xFF,0x55,0xFF,  /* 0D */
          0x00, 0xFF,0xFF,0x55,  /* 0E */
          0x00, 0xFF,0xFF,0xFF,  /* 0F */
        };

        /* allocate space for argument data */
        cgm_h_data = MemAlloc(CGM_MAXARGSIZE, HF_DYNAMIC|HF_SHARABLE, 0);
        if(!cgm_h_data)
          return 1;
        cgm_h_args = MemAlloc(CGM_MAXARGNUM*sizeof(union U_args),
                        HF_DYNAMIC|HF_SHARABLE, 0);
        if(!cgm_h_args) {
          MemFree(cgm_h_data);
          return 1;
        }

        cgm_arg_data = (void *)MemLock(cgm_h_data);
        cgm_argv = (void *)MemLock(cgm_h_args);

        /* defaults for CGM metafiles in binary encoding */
        cgm_cvx_low.r=cgm_cvx_low.g=cgm_cvx_low.b=0;
        cgm_cvx_high.r=cgm_cvx_high.g=cgm_cvx_high.b=255;
                                        /* default color extent */
        cgm_ColorSelectionMode=0;       /* default is palette mode */
        _cgm_prec_int=16;               /* default precision settings */
        _cgm_prec_idx=16;
        _cgm_prec_col=8;
        _cgm_prec_cidx=8;

        for(i=0;i<CGM_MAXCOLORTBL;i++)  /* create a default palette */
          cgm_ColorTable[i]=DefaultPalette[i%16];

        return 0;                       /* no errors */
}

void CGM_raw_End(void)
{
        MemUnlock(cgm_h_args);          /* free argument buffers */
        MemUnlock(cgm_h_data);
        MemFree(cgm_h_args);
        MemFree(cgm_h_data);
}

/*----------------------------------------------------------------------------*/
word CGM_getrecord(word *argsize,void **arg)
{
        word w,len;
        int c;

        if(READ(&w,sizeof(w),fCGM)) return 0xFFFF;
        w=((w>>8)+(w<<8));              /* convert low and high byte */
        len=(w&0x1F);                   /* get "embedded" length in opcode */
        *arg=cgm_arg_data;              /* arguments always in the same place */
        if(len<31) {                    /* "embedded" length field sufficent? */
          *argsize=len;                 /* length is specified directly */
          if(READ(cgm_arg_data,*argsize,fCGM)) return 0xFFFF;
                                        /* get data from file */
          if(*argsize & 1)              /* skip one byte if odd argument size */
            if(READ(&c,1,fCGM)) return 0xFFFF;
                                        /* drop byte */
        }
        else {
          *argsize=0;                   /* assemble argument list */
          do {
            if(READ(&len,sizeof(len),fCGM)) return 0xFFFF;
            len=((len>>8)+(len<<8));    /* convert low and high byte */
            if(READ(cgm_arg_data+*argsize,(len&0x7FFF),fCGM)) return 0xFFFF;
                                        /* get data from file */
            *argsize+=(len&0x7FFF);     /* add to current list size */
            if(len & 1)                 /* skip one byte if odd argument size */
              if(READ(&c,1,fCGM)) return 0xFFFF;
                                        /* drop byte */
          } while(len & 0x8000);        /* while argument list continues */
        }
        return (w>>5);                  /* isolate opcode and return it */
}


word convstr(char *s)
{
        word len,i;

        len=*(unsigned char *)s;        /* get length byte of string */
        for(i=0;i<len;i++)              /* move string, make room at the end */
          s[i]=s[i+1];
        s[len]=0;                       /* fill it with terminator */
        return len+1;                   /* return length (in file) */
}

word CGM_decodeargs(word argsize,void **arg,char *argmask,union U_args *argptr)
{
        word n=0;                       /* no arguments yet */
        word argrep;                    /* number of repetitions of next arg */
        char *argstart=(char *)*arg;
#ifdef DUMP
        static char buf[512];
#endif

/*
 * some ugly macros to get arguments of different sizes from a byte stream
 * and convert the byte order in numeric values
 */
        #define getwarg(p) ( \
                             ((word *)(p))++,\
                             (*((word *)(p)-1) >> 8) + (*((word *)(p)-1) << 8)\
                           )
        #define getbarg(p) ( * (((byte *)(p))++) )
        #define getarg(p,prec)  ( (word)( ((prec)<=8)?getbarg(p):getwarg(p) ))
        #define getargs(p,prec) ((sword)( ((prec)<=8)?getbarg(p):getwarg(p) ))


        while(*argmask && (word)((char *)*arg-argstart)<argsize
              && n<CGM_MAXARGNUM) {     /* while still arguments left... */
          if(*argmask=='*') {           /* repeat next item? */
            argrep=CGM_MAXARGNUM;       /* repeat as often as possible */
            argmask++;                  /* repeat which item? */
          }
          else
            argrep=1;                   /* do item only once */
          for(;argrep && ((char *)*arg-argstart)<argsize && n<CGM_MAXARGNUM;
              argrep--) {               /* repeat if necessary */
#ifdef DUMP
            *buf=0;
#endif
            switch(*argmask) {

/*--- "Basic" data types - these values are not affected by settings ---------*/

              case 'r':                 /*** 'R': Real value ***/
                argptr[n  ].fval.WWF_int=getwarg(*arg);
                argptr[n++].fval.WWF_frac=getwarg(*arg);
                                        /* get signed integer argument */
#ifdef DUMP
                sprintf(buf,"%6.4f",(float)((sword)argptr[n-1].fval.WWF_int+
                                            argptr[n-1].fval.WWF_frac/65535.0F));
#endif
                break;

              case 'i':                 /*** 'i': Signed word value ***/
                argptr[n++].sval=(sword)getwarg(*arg);
                                        /* get signed integer argument */
#ifdef DUMP
                sprintf(buf,"%ld",argptr[n-1].sval);
#endif
                break;

              case 'u':                 /*** 'u': Unsigned word value ***/
                argptr[n++].uval=getwarg(*arg);
                                        /* get signed integer argument */
#ifdef DUMP
                sprintf(buf,"%lu",argptr[n-1].uval);
#endif
                break;

              case 's':                 /*** 's': String ***/
                argptr[n++].ptr=(char *)*arg;
                                        /* pointer to next argument */
                (char *)*arg+=convstr((char *)argptr[n-1].ptr);
                                        /* convert string from "length" type to
                                           null-terminated */
#ifdef DUMP
                sprintf(buf,"'%s'",argptr[n-1].ptr);
#endif
                break;

/*--- "Abstract" data types - their representation can vary ------------------*/

              case 'T':                 /*** 'T': Triple composite color ***/
                argptr[n  ].rgb.flag=0; /* set flag: color triplet */
                argptr[n  ].rgb.r=getarg(*arg,_cgm_prec_col);
                argptr[n  ].rgb.g=getarg(*arg,_cgm_prec_col);
                argptr[n++].rgb.b=getarg(*arg,_cgm_prec_col);
                                        /* get color components */
#ifdef DUMP
                sprintf(buf,"(%u,%u,%u)",
                  argptr[n-1].rgb.r,argptr[n-1].rgb.g,argptr[n-1].rgb.b);
#endif
                break;

              case 'X':                 /*** 'X': Color Index ***/
                argptr[n++].uval=getarg(*arg,_cgm_prec_cidx);
                                        /* get color index */
#ifdef DUMP
                sprintf(buf,"%lu",argptr[n-1].uval);
#endif
                break;

              case 'I':                 /*** 'I': Index ***/
                argptr[n++].sval=getargs(*arg,_cgm_prec_idx);
                                        /* get index value */
#ifdef DUMP
                sprintf(buf,"%ld",argptr[n-1].sval);
#endif
                break;

              case 'C':                 /*** 'C': Color ***/
                if(cgm_ColorSelectionMode) {
                  argptr[n].rgb.flag=0; /* set flag: rgb triplet */
                  argptr[n].rgb.r=getarg(*arg,_cgm_prec_col);
                  argptr[n].rgb.g=getarg(*arg,_cgm_prec_col);
                  argptr[n].rgb.b=getarg(*arg,_cgm_prec_col);
                                        /* get color components */
                }
                else {
                  argptr[n].rgb.flag=1; /* set flag: color index */
                  argptr[n].rgb.r=getarg(*arg,_cgm_prec_cidx);
                                        /* pick color from table */
                }
                n++;                    /* one argument has been read */
#ifdef DUMP
                sprintf(buf,"(%u,%u,%u)",
                  argptr[n-1].rgb.r,argptr[n-1].rgb.g,argptr[n-1].rgb.b);
#endif
                break;

              case 'P':                 /*** 'P': Point (two VDU coords) ***/
              case 'F':                 /*** 'F': Point and flag ***/
                argptr[n].point.p.x=getargs(*arg,_cgm_prec_int);
                argptr[n].point.p.y=getargs(*arg,_cgm_prec_int);
                                        /* get signed integer coords */
                if(*argmask=='F')       /* "flagged point" type */
                  argptr[n].point.flag=getwarg(*arg);
                                        /* get additional word flag */
                n++;                    /* one argument has been read */
#ifdef DUMP
                sprintf(buf,"(%ld,%ld)",argptr[n-1].point.p.x,argptr[n-1].point.p.y);
#endif
                break;

              case 'V':                 /*** 'V': Single VDU coordinate ***/
                argptr[n].point.p.x=argptr[n].point.p.y=
                  (int)getargs(*arg,_cgm_prec_int);
                                        /* get signed integer coord */
                n++;                    /* one argument has been read */
#ifdef DUMP
                sprintf(buf,"%ld",argptr[n-1].point.p.x);
#endif
                break;

/*----------------------------------------------------------------------------*/
            }

#ifdef DUMP
            if(*buf) {
              if(n>1) { fputc(',',fDump); } else { fputc(' ',fDump); }
              fwrite(buf,strlen(buf),1,fDump);
            }
#endif
          }
          if(*argmask) argmask++;       /* next argument */
        }

        if(*argmask && *argmask!='*')   /* still args left to parse: error */
          return 0xFFFF;                /* Repeated items occuring only 0 times
                                           must be resolved at higher level */

#ifdef DUMP
        sprintf(buf,"[%d]",n);
        fwrite(buf,strlen(buf),1,fDump);
        fputc(';',fDump);
#endif
        return n;
}

static struct _cgm_rgb _cgm_rgbbuf;     /* buffer for dereferenced colors */

struct _cgm_rgb *cgm_color_deref(struct _cgm_rgb *c)
{
        if(c->flag)                     /* indexed color? */
          _cgm_rgbbuf=cgm_ColorTable[c->r];
                                        /* yes: get entry from table */
        else
          _cgm_rgbbuf=*c;               /* no: directly use components */

        _cgm_rgbbuf.r=(word)((_cgm_rgbbuf.r-cgm_cvx_low.r)*255L/
           (cgm_cvx_high.r-cgm_cvx_low.r));
        _cgm_rgbbuf.g=(word)((_cgm_rgbbuf.g-cgm_cvx_low.g)*255L/
           (cgm_cvx_high.g-cgm_cvx_low.g));
        _cgm_rgbbuf.b=(word)((_cgm_rgbbuf.b-cgm_cvx_low.b)*255L/
           (cgm_cvx_high.b-cgm_cvx_low.b));
                                        /* normalize components to 0..255 */
        return &_cgm_rgbbuf;            /* return pointer to color buffer */
}

/*----------------------------------------------------------------------------*/
#pragma warn -par                       /* not all handlers have arguments */

int _pascal CGM_cmd_VDCType(word opcode,word argc,union U_args *_argv)
{
    if(argv(0)->uval)                   /* not "Integer VDC"? */
      return TE_INVALID_FORMAT;   /* we can't handle this... */
    return 0;
}

int _pascal CGM_cmd_IntegerPrecision(word opcode,word argc,union U_args *_argv)
{
	_cgm_prec_int=(word)argv(0)->uval;
	return 0;
}

int _pascal CGM_cmd_IndexPrecision(word opcode,word argc,union U_args *_argv)
{
	_cgm_prec_idx=(word)argv(0)->uval;
	return 0;
}

int _pascal CGM_cmd_ColorPrecision(word opcode,word argc,union U_args *_argv)
{
	_cgm_prec_col=(word)argv(0)->uval;
	return 0;
}

int _pascal CGM_cmd_ColorIdxPrecision(word opcode,word argc,union U_args *_argv)
{
	_cgm_prec_cidx=(word)argv(0)->uval;
	return 0;
}

int _pascal CGM_cmd_ColorValueExtent(word opcode,word argc,union U_args *_argv)
{
        cgm_cvx_low=argv(0)->rgb;        /* corner points in color space */
        cgm_cvx_high=argv(1)->rgb;
        return 0;                       /* no error */
}

int _pascal CGM_cmd_ColorSelectionMode(word opcode,word argc,union U_args *_argv)
{
        cgm_ColorSelectionMode=(word)argv(0)->uval;
        return 0;                       /* no error */
}

int _pascal CGM_cmd_BackColor(word opcode,word argc,union U_args *_argv)
{
        cgm_ColorTable[0]=argv(0)->rgb;
        return 0;                       /* no error */
}

int _pascal CGM_cmd_ColorTable(word opcode,word argc,union U_args *_argv)
{
        word i;

        for(i=1; i<CGM_MAXCOLORTBL && i<argc; i++)
          cgm_ColorTable[i-1+argv(0)->uval]=argv(i)->rgb;
                                        /* store RGB tripletts of color tbl */
        return 0;                       /* no error */
}

#pragma warn .par

/*----------------------------------------------------------------------------*/
struct _cgm_commands CGMsyscmds[] = {
  { OPCODE(1,3),  "u",         CGM_cmd_VDCType },
  { OPCODE(1,4),  "u",         CGM_cmd_IntegerPrecision },
  { OPCODE(1,6),  "u",         CGM_cmd_IndexPrecision },
  { OPCODE(1,7),  "u",         CGM_cmd_ColorPrecision },
  { OPCODE(1,8),  "u",         CGM_cmd_ColorIdxPrecision },
  { OPCODE(1,10), "TT",        CGM_cmd_ColorValueExtent },
  { OPCODE(2,2),  "u",         CGM_cmd_ColorSelectionMode },
  { OPCODE(2,7),  "T",         CGM_cmd_BackColor },
  { OPCODE(5,34), "X*T",       CGM_cmd_ColorTable }
};

/*----------------------------------------------------------------------------*/
int CGM_docommand(struct _cgm_commands *cmds,word n_cmds,int *ret)
{
        word rec_code,rec_argsize;
        void *rec_arg;
        word argc,i;
        struct _cgm_commands *cmd;

        rec_code=CGM_getrecord(&rec_argsize,&rec_arg);
        if(rec_code==0xFFFF) {          /* problems getting argument data? */
          *ret=TE_INVALID_FORMAT;      /* pass back error code */
          return 0;                     /* abort reading metafile */
        }

#ifdef DUMP
{
char buf[256];
sprintf(buf,"\n** %d/%d ** ",(rec_code>>7),(rec_code&0x7F));
fwrite(buf,strlen(buf),1,fDump);
}
#endif

          if(rec_code==OPCODE(0,2))
            return 0;

          cmd=NULL;                     /* no command found yet */
          for(i=n_cmds; i>0; i--)       /* scan graphics opcode table */
            if(cmds[i-1].opcode==rec_code) {
              cmd=&cmds[i-1];
              break;
            }
          if(!cmd)                      /* no success? scan "system" table */
            for(i=sizeof(CGMsyscmds)/sizeof(CGMsyscmds[0]); i>0; i--)
              if(CGMsyscmds[i-1].opcode==rec_code) {
                cmd=&CGMsyscmds[i-1];
                break;
              }

          if(cmd) {                     /* found a command? execute it! */
            argc=CGM_decodeargs(rec_argsize,&rec_arg,cmd->args,cgm_argv);
            if(argc==0xFFFF) {          /* error getting arguments? */
              *ret=TE_INVALID_FORMAT;  /* pass back error code */
              return 0;                 /* abort reading metafile */
            }
            *ret=((pcfm_CGM_handler *)ProcCallFixedOrMovable_pascal)
	      (rec_code,argc,cgm_argv,cmd->hdl);
                                        /* pass back return code */
          }

          return 1;                     /* continue with metafile */
}
