/************************************************************************
 *
 *                                 CDLib.GOC
 *
 *	Function:	Library with generic functions and data buffers
 *                      for CD player Access
 *
 *	161096	Jens-Michael Gross
 *              First implementation of basic access functions
 *      241096  Jens-Michael Gross
 *              Full implementation of all audio functions
 *      100397  cacheing functions for all static data (except CD length)
 *      170497  retry function and time value correction on drive busy
 *      281198  deleted subunit number bugfix (moved to cdados driver)
 *
 ************************************************************************/


#include <i86.h>


/*#define MK_FP( seg,ofs )( (void _seg * )( seg ) +( void near * )( ofs ))
  #define FP_SEG( fp )( (unsigned )( void _seg * )( void far * )( fp ))
  #define FP_OFF( fp )( (unsigned )( fp ))*/

@include <stdapp.goh>
#include <library.h>
#include <timer.h>
#include <geode.h>

@include "cdaudio.goh"


#ifdef __WATCOMC__

#ifndef PUSHDS
void _PUSHDS();
#pragma aux _PUSHDS = "push ds";
#define PUSHDS  _PUSHDS();
#endif

#ifndef POPDS
void _POPDS();
#pragma aux _POPDS = "pop ds";
#define POPDS   _POPDS();
#endif

#endif


#define MaxTracks 99

byte MSCDEX_CD_Drives = 0;
byte MSCDEX_Drive_Letters[26] ;
word MSCDEX_Version = 0;
byte CD_Drive_No = 0;
byte cdDemoMode = 1;

long CD_Play_End   = 0;
long CD_Play_Start = 0;

byte CD_Drive_Volume_Valid = 0;

byte trackdatvalid[MaxTracks+1];
long trackdata[MaxTracks+1];
byte tracktype[MaxTracks+1];

struct {
         byte subfunction ; /* 00 */
         struct {
           byte inchannel ;
           byte volume ;
         } outchannel[4];
       } CD_Drive_Volume ;


struct { byte   size;        /* 00 */
         byte   subunit;     /* 01 */
         byte   function;    /* 02 */
	 word   status;      /* 03 */
         byte   reserved[8]; /* 05 */
         char   mode;        /* 0d */
         union {
           struct {
             void far *pointer; /* 0e */
             word  length;      /* 12 */
             word  reserved1;   /* 14 */
             long  reserved2;   /* 16 */
           } table ;
           struct {
             long reserved1; /* 0e */
             int  reserved2; /* 12 */
             long position;  /* 14 */
           } seek ;
           struct {
             long start;     /* 0e */
             long number;    /* 12 */
             int  reserved1; /* 16 */
           } play ;
         } values;
       } CD_Driver_Table;



byte old_last = 0;
long old_length = 0;

struct { byte   function;   /* subfunction 0xa */
         byte   first;      /* number of first valid track */
         byte   last;       /* number of last valid track */
         long   length;     /* Position of lead-out == length */
       } CD_Info ;


struct { byte   subfunction;
         byte   control;
         byte   UPC[7];
         word   reserved;
       } CD_UPC_Code ;

byte CD_UPC_Code_Valid = 0;


void _pascal  CDLib_Reset_Valid_Flags (void)
{
  int i;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  CD_Drive_Volume_Valid = 0;
  CD_UPC_Code_Valid = 0;
  for (i=0;i<=MaxTracks;i++)
    trackdatvalid[i]=0;
  POPDS;
}


/* ***********************************************************************
   *                                                                     *
   *                              MSCDEX-routines                        *
   *                                                                     *
   *********************************************************************** */

GeodeHandle      cdDriverHandle  = 0;

extern byte _pascal CDAGetNumberOfDrives(word segm, word offs);
extern word _pascal CDAGetVersion(word segm, word offs);
extern word _pascal CDAGetDriveLetters(word segm, word offs, word segmBuf, word offsBuf);
extern word _pascal CDACallDevice(word segm, word offs, byte driveLetter, word segmTable, word offsTable);

word _pascal  MSCDEX_Get_Version (void)
/* returns MSCDEX_Version, major in high, minor in low byte; 0= not installed */
{
  word back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (MSCDEX_Version==0) {

    DriverInfoStruct * driverInfo;
    word segm;
    word offs;
    driverInfo = GeodeInfoDriver(cdDriverHandle);
    segm = FP_SEG(driverInfo) ;
    offs = FP_OFF(driverInfo) ;
    MSCDEX_CD_Drives = CDAGetNumberOfDrives(segm, offs);

    if (MSCDEX_CD_Drives !=0) {
      word segmBuf = FP_SEG(MSCDEX_Drive_Letters) ;
      word offsBuf = FP_OFF(MSCDEX_Drive_Letters) ;

      DriverInfoStruct * driverInfo;
      word segm;
      word offs;
      driverInfo = GeodeInfoDriver(cdDriverHandle);
      segm = FP_SEG(driverInfo) ;
      offs = FP_OFF(driverInfo) ;
      MSCDEX_Version = CDAGetVersion(segm, offs);
      CDAGetDriveLetters(segm, offs, segmBuf, offsBuf);

      MSCDEX_Drive_Letters[MSCDEX_CD_Drives]=0;
    }
  }
  if (MSCDEX_Version < 0x0201)
    cdDemoMode = 1;
  else
    cdDemoMode = 0;
  back = MSCDEX_Version ;
  POPDS;
  return back;
}


byte _pascal  MSCDEX_Get_Drives (void)
/* returns number of CD drives installed */
{
  byte back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (MSCDEX_Version == 0)
    MSCDEX_Get_Version();
  if (cdDemoMode)
    back = 1;
  else
    back = MSCDEX_CD_Drives;
  POPDS;
  return back;
}


byte _pascal  MSCDEX_Get_Drive_Letter (byte drive)
/* returns drive letter (A=0) of cdrom #drive */
{
  byte back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (MSCDEX_Version == 0)
    MSCDEX_Get_Version();
  if (cdDemoMode||(drive>=MSCDEX_Get_Drives()))
    back =  0;
  else
    back = MSCDEX_Drive_Letters[drive];
  POPDS;
  return back;
}


/* ***********************************************************************
   *                                                                     *
   *                              CD-driver calls                        *
   *                                                                     *
   *********************************************************************** */

int try = 0;
int Call_CD_Driver_X ( byte function)
/* calls CD driver using MSCDEX function 0x10 , returns <>-1:error, -1:ok */
{
  int back, segmTable, offsTable;
  byte driveLetter;

  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  segmTable = FP_SEG(&CD_Driver_Table);
  offsTable = FP_OFF(&CD_Driver_Table);
  driveLetter = MSCDEX_Drive_Letters[CD_Drive_No];
  if (cdDemoMode){
    POPDS;
    return -1;
  }
  CD_Driver_Table.size = 0x1a;
  CD_Driver_Table.function =function;

  {
    DriverInfoStruct * driverInfo;
    word segm;
    word offs;
    driverInfo = GeodeInfoDriver(cdDriverHandle);
    segm = FP_SEG(driverInfo) ;
    offs = FP_OFF(driverInfo) ;

    CDACallDevice(segm, offs, driveLetter, segmTable, offsTable);
  }
  if (CD_Driver_Table.status & 0x8000) {
    if (try <=3) {
      try++;   /* Fehler */
      TimerSleep(6);
      POPDS;
      return Call_CD_Driver_X (function);
    } else {
      back =  CD_Driver_Table.status & 0xff;
      POPDS;
      return back;
    }
  } else {
    POPDS;
    return -1;
  }
}


int Call_CD_Driver ( byte function, byte subfunction, void * structure, word size)
/* calls CD driver using MSCDEX function 0x10 , returns <=0:error, >0:ok */
{
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  ((byte *)(structure))[0] = subfunction;
  CD_Driver_Table.values.table.pointer = structure ;
  CD_Driver_Table.values.table.length = size;
  POPDS;
  return Call_CD_Driver_X(function) ;
}

/* ***********************************************************************
   *                                                                     *
   *                              CD-Drive functions                     *
   *                                                                     *
   *********************************************************************** */


char _pascal  CD_Drive_Set (byte drive)
/* sets the current CD drive number */
{
  int i ;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (drive == CD_Drive_No) {
    POPDS;
    return 0;
  }
  for (i=0;(i<MSCDEX_Get_Drives())&&(drive!=MSCDEX_Get_Drive_Letter(i));i++) ;
  if (i==MSCDEX_Get_Drives()) {
    POPDS;
    return -1;
  }
  CD_Drive_No = i ;
  CDLib_Reset_Valid_Flags();
  POPDS;
  return 0;
}


void _pascal  CD_Drive_Reset (void)
/* resets the CD drive and clears all drive status informations */
{
  byte subfunction = 2;
  CDLib_Reset_Valid_Flags();
  Call_CD_Driver (0xc,2,&subfunction,1) ;
}


word _pascal  CD_Drive_Get_Status (void)
/* returns status byte containing drive status informations */
/* returns dummy value if in demo mode or drive error */
{
  struct {
    byte subfunction;
    long status;
  } buffer;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return ( CD_STATUS_SUPPORTS_AUDIO
            |CD_STATUS_SUPPORTS_VOLUME
            |CD_STATUS_DRIVE_EMPTY
            |CD_STATUS_SUPPORTS_RED_BOOK);
  }
  Call_CD_Driver (0x3,6,&buffer,sizeof(buffer));
  POPDS;
  return (word)buffer.status ;
}


char _pascal  CD_Drive_Get_Change (void)
/* returns 1:changed since last call, 0:not changed
   this function uses the CD-length and trackinfo rather than
   the drivers media change function to check changes even if the
   UPC of old an new CD is the same (0).
*/
{
  char status = 0;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return 0;
  }
  if (old_last != CD_Get_Tracks()) status = 1;
  if (old_length != CD_Get_Length()) status = 1;
  if (status ==1) {
    old_last = CD_Info.last;
    old_length = CD_Info.length;
    CDLib_Reset_Valid_Flags();
  }
  POPDS;
  return status;
}


byte _pascal  CD_Drive_Get_Volume (byte channel)
/* returns the current volume setting for that channel */
{
  byte back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return 255;
  }
  if (CD_Drive_Volume_Valid == 0) {
    Call_CD_Driver (0x3,4,&CD_Drive_Volume,sizeof(CD_Drive_Volume)) ;
  }
  CD_Drive_Volume_Valid = 1;
  back = CD_Drive_Volume.outchannel[channel].volume ;
  POPDS;
  return back;
}


void _pascal  CD_Drive_Set_Volume ( byte channel, byte volume)
/* sets the audio volume for the given channel (0..255) */
{
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (CD_Drive_Volume_Valid ==0)
    CD_Drive_Get_Volume (0);
  CD_Drive_Volume.outchannel[channel].volume = volume;
  Call_CD_Driver (0xc,3,&CD_Drive_Volume,sizeof(CD_Drive_Volume)) ;
  POPDS;
}


void _pascal  CD_Drive_Lock (byte mode)
{
  struct {
    byte subfunction;
    byte mode;
  } lock ;
  lock.mode = mode;
  Call_CD_Driver (0xc,1,&lock,sizeof(lock));
}


void _pascal  CD_Drive_Door (byte mode)
/* 0:open door; 1:close door */
{
  byte subfunction;
  if (mode==0) subfunction = 0;
  if (mode==1) subfunction = 5;
  Call_CD_Driver (0xc,subfunction,&subfunction,sizeof(subfunction));
}


char _pascal  CD_Drive_Dos_Open (void)
/* tells the driver that another application is using it */
{
  CDLib_Reset_Valid_Flags();
  return Call_CD_Driver_X(0x0d);
}

char _pascal  CD_Drive_Dos_Close (void)
/* tell the driver that the application is no longer using it */
{
  CDLib_Reset_Valid_Flags();
  return Call_CD_Driver_X(0x0e);
}


/* ***********************************************************************
   *                                                                     *
   *                              CD-functions                           *
   *                                                                     *
   *********************************************************************** */


byte _pascal  CD_Get_UPC (byte digit, byte ignore)
/* returns one of the 14 UPC digits */
{
  byte value,i;
  long data;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode||!CD_Info.length) {
    POPDS;
    return 0;
  }
  if (!CD_UPC_Code_Valid||!digit) {
    for (i=0;i<8;i++)
      CD_UPC_Code.UPC[i]=0;
    CD_UPC_Code_Valid = 0;
    if (!ignore)
      Call_CD_Driver (0x3,14,&CD_UPC_Code,sizeof(CD_UPC_Code)) ;
    i=0;
    // check for '0'- UPC
    while ((i<7)&&(!CD_UPC_Code.UPC[i])) i++;
    if (i!=7)
      CD_UPC_Code_Valid = 1;
    // check for invalid UPC
    i=0;
    while ((i<7)&&((CD_UPC_Code.UPC[i]&0xf)<10)&&(CD_UPC_Code.UPC[i]<0xa0)) i++;
    if (i!=7)
      CD_UPC_Code_Valid = 0;
    // generate UPC if no UPC on disc
    if (CD_UPC_Code_Valid ==0) {
      data = CD_Get_Length();
      CD_UPC_Code.UPC[0]=RedbookMin(data)/10*16+RedbookMin(data)%10;
      CD_UPC_Code.UPC[1]=RedbookSec(data)/10*16+RedbookSec(data)%10;
      CD_UPC_Code.UPC[2]=RedbookFrm(data)/10*16+RedbookFrm(data)%10;
      CD_UPC_Code.UPC[3]=CD_Get_Tracks()/10*16+CD_Get_Tracks()%10;
      i=0;
      while ((i<CD_Get_Tracks())&&(CD_Get_Track_Type(i)!=1)) i++;
      data = CD_Get_Track_Start(i);
      CD_UPC_Code.UPC[4]=RedbookMin(data)/10*16+RedbookMin(data)%10;
      CD_UPC_Code.UPC[5]=RedbookSec(data)/10*16+RedbookSec(data)%10;
      CD_UPC_Code.UPC[6]=RedbookFrm(data)/10*16+RedbookFrm(data)%10;
      CD_UPC_Code_Valid = 1;
    }
  }
  value = CD_UPC_Code.UPC[digit/2];
  if (digit%2)
    value = value % 16;
  else
    value = value / 16;
  POPDS;
  return value ;
}


long _pascal  CD_Get_Length (void)
/* returns the CDs whole play time or 0 if not valid */
{
  long back;
  PUSHDS;
  back = 0;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (Call_CD_Driver(0x3,10,&CD_Info,sizeof(CD_Info)) !=-1) {
    CD_Info.length=0;
    CD_Info.last=0;
    CDLib_Reset_Valid_Flags();
  }
/* !!! fix for CDs with more than MaxTracks tracks */
  if (CD_Info.last > MaxTracks)
    CD_Info.last = MaxTracks;
  back = CD_Info.length;
  POPDS;
  return back;
}


byte _pascal  CD_Get_Tracks (void )
/* returns number of highest CD track; lowest number must be taken from TrackType */
{
  byte back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode)
    back = 0;
  else
    back = CD_Info.last ;
  POPDS;
  return back;
}


byte _pascal  CD_Get_Track_Type (byte track)
/* returns type of track (0:none, 1:audio, 2:data) */
{
  struct {
    byte   subfuction;
    byte   track;
    long   start;
    byte   status;
  } T_Info;
  byte back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (  cdDemoMode
      ||(track<CD_Info.first)
      ||(track>CD_Info.last)
      ||(!CD_Info.length)
     ) {
    POPDS;
    return 0;
  }
  T_Info.track = track;
  if (track <= MaxTracks) {
    if (!trackdatvalid[track]) {
      Call_CD_Driver(0x3,11,&T_Info,sizeof(T_Info));
      trackdata[track] = T_Info.start;
      tracktype[track] = ((T_Info.status&0x40)?2:1);
      trackdatvalid[track] = 1;
    }
    back = tracktype[track] ;
  } else {
/* !!! fix for CDs with more than MaxTracks tracks */
    back = CD_Get_Length();
  }
  POPDS;
  return back;
}


long _pascal  CD_Get_Track_Start (byte track)
/* returns start position of a track; end is the start of the next track */
{
  struct {
    byte   subfuction;
    byte   track;
    long   start;
    byte   status;
  } T_Info;
  long back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return 0;
  }
  if (track == (CD_Info.last +1)) {
    POPDS;
    return CD_Get_Length();
  }
  if (CD_Get_Track_Type(track)==0) {
    POPDS;
    return 0;
  }
  if (track < MaxTracks) {
    back = trackdata[track];
  } else {
    T_Info.track = track;
    Call_CD_Driver(0x3,11,&T_Info,sizeof(T_Info));
    back = T_Info.start;
  }
  POPDS;
  return back;
}


long _pascal  CD_Get_Play_Position (byte mode)
/* returns
   mode = 0: track (highest nibble), index (lowest nibble) and track time
   mode = 1: disc time  */
{
  struct {
    byte subfunction;
    byte control;
    byte track;
    byte index;
    byte tr_min;
    byte tr_sec;
    byte tr_frm;
    byte reserved;
    byte cd_min;
    byte cd_sec;
    byte cd_frm;
  } playpos;
  long time;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return 0;
  }
  if ( Call_CD_Driver (0x3,12,&playpos,sizeof(playpos)) !=-1 ) {
    POPDS;
    return 0;
  }
  if (mode==0) {
    if ((playpos.tr_min>80)||(playpos.tr_sec>60)) {
      time = 0;
    } else {
      time = RedbookPos(playpos.tr_min,playpos.tr_sec,0);
      time = time | ((long)(((playpos.track&0xf0)/16)*10+(playpos.track&0x0f))<<24) ;
      time = time | ((playpos.index&0xf0)/16*10+playpos.index&0x0f) ;
    }
  }
  if (mode==1)
    if ((playpos.cd_min>80)||(playpos.cd_sec>60))
      time = 0;
    else
      time = RedbookPos(playpos.cd_min,playpos.cd_sec,playpos.cd_frm);
  POPDS;
  return time;
}


char _pascal  CD_Get_Play_Status(void)
/* returns play status (0=play,1=pause,-1=stop)*/
{
  struct {
    byte subfunction;
    word status;
    long start;
    long stop;
  } playstat;
  char back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return -1;
  }
  Call_CD_Driver (0x3,15,&playstat,sizeof(playstat)) ;
  if (((CD_Driver_Table.status&0x200)&&playstat.stop)||(playstat.status==1))
    back = playstat.status;
  else
    back = -1;
  POPDS;
  return back;
}


char _pascal  CD_Play_Position (long start, long stop )
/* plays a CD from start to stop; returns 0 on success or *error*
   a stop value less than start plays until end                    */
{
  long len;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  if (cdDemoMode) {
    POPDS;
    return 0;
  }
  CD_Driver_Table.mode = 0; /* HSG sector adress for easier access */
  if (stop<start) stop = CD_Get_Length();
  CD_Play_End = stop ;
  CD_Play_Start = start ;
  start = ((RedbookMin(start)*60)+RedbookSec(start))*75+RedbookFrm(start);
  CD_Driver_Table.values.play.start = start-150;
  stop =  ((RedbookMin(stop)*60)+RedbookSec(stop))*75+RedbookFrm(stop);
  if (stop<start)
      stop =  ((RedbookMin(CD_Get_Length())*60)+RedbookSec(CD_Get_Length()))*75+RedbookFrm(CD_Get_Length());
  len = stop-start;
  CD_Driver_Table.values.play.number = len;
  POPDS;
  return Call_CD_Driver_X(0x84);
}


char _pascal  CD_Play_Stop (byte pause)
/* pause=1:pause; pause=0:stop */
{
  if (pause==0)
    Call_CD_Driver_X(0x85);
  return Call_CD_Driver_X(0x85);
}


char _pascal  CD_Play_Resume (void)
/* resume play after pause */
{
  return Call_CD_Driver_X(0x88);
}

const char *    cdDriverNameEC  = "cdadosec.geo";
const char *    cdDriverName    = "cdados.geo";
const char *    cdDriverGeodeName = "cdados  ";
GeodeLoadError  driverLoadError = 0;

#pragma argsused
Boolean _pascal LibraryEntry (LibraryCallType type, GeodeHandle client)
{
  Boolean back;
  PUSHDS;
  GeodeLoadDGroup( GeodeGetCodeProcessHandle() );
  switch (type) {
    case LCT_ATTACH:				/* The library was just loaded. */
      FilePushDir ();
      FileSetCurrentPath(SP_SYSTEM,"sound");
      cdDriverHandle = GeodeFind (cdDriverGeodeName,GEODE_NAME_SIZE,0,0);
      if (!cdDriverHandle)
        cdDriverHandle = GeodeUseDriver (cdDriverNameEC,0,0,&driverLoadError);
      if (!cdDriverHandle)
        cdDriverHandle = GeodeUseDriver (cdDriverName,0,0,&driverLoadError);
      FilePopDir ();
      if (cdDriverHandle)
        back = FALSE;
      else
        back = TRUE;
      break;
    case LCT_DETACH:				/* The library is about to be unloaded. */
      if (cdDriverHandle)
        GeodeFreeDriver (cdDriverHandle);
      back = FALSE;
      break;
    case LCT_NEW_CLIENT:			/* A new client of the library was just loaded. */
    case LCT_NEW_CLIENT_THREAD:			/* A new thread was just created for a
                        			 * current client of the library. */
    case LCT_CLIENT_THREAD_EXIT:		/* A thread was just exited for a current
                                                 * client of the library. */
    case LCT_CLIENT_EXIT:			/* Library's client is about to be unloaded. */
      if (cdDriverHandle)
        back = FALSE;
      else
        back = TRUE;
  }
  POPDS;
  return back;
}
