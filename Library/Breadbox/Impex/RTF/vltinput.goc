@include <stdapp.goh>
@include <Objects/vLTextC.goh>
#include "vltinput.h"
#include "warnings.h"
#include "output.h"
#include "global.h"

optr oVLTInput;                     /* VisLargeText object being read */
VMFileHandle vmfhInput;             /* VM file handle of object storage */

VMBlockHandle vmbhCharAttrRuns;     /* character attribute runs HugeArray */
VMBlockHandle vmbhCharAttrs;        /* character attributes ElementArray */
word nCurCharToken;             	/* current character token */
TextRunArrayElement* pNextCharRun;  /* pointer to next character run */

VMBlockHandle vmbhParaAttrRuns;     /* paragraph attribute runs HugeArray */
VMBlockHandle vmbhParaAttrs;        /* paragrpah attributes ElementArray */
word nCurParaToken;             	/* current paragraph token */
TextRunArrayElement* pNextParaRun;  /* pointer to next paragraph run */

#if _DO_HELP
VMBlockHandle vmbhTypeAttrRuns;     /* type attribute runs HugeArray */
VMBlockHandle vmbhTypeAttrs;        /* type attributes ElementArray */
word nCurTypeToken;                 /* current type token */
TextRunArrayElement* pNextTypeRun;  /* pointer to next type run */

VMBlockHandle vmbhGraphicRuns;      /* graphic runs HugeArray */
VMBlockHandle vmbhGraphics;         /* graphics ElementArray */
word nCurGraphicToken = CA_NULL_ELEMENT;              /* current graphic token */
TextRunArrayElement* pNextGraphicRun; /* pointer to next graphic run */
#endif

VMBlockHandle vmbhText;             /* text HugeArray */
dword InputCurPos;                  /* index of current text element */
char *cpInputCurPos;                /* pointer to current text element */

#if _DO_HELP
word wHyperlinkNeedsFinishingToken = 0xffff; /* specifies that we're in the middle of a
						hyperlink run, and that the run needs to
						be closed (and the context name needs to
						be referenced) when we hit another run.
						Contains the token to reference */
word wHyperlinkNeedsFinishingFilenameToken = 0xffff;
extern Boolean boolHyperLinksEnabled;      /* specifies whether hyperlinks/contexts
						      are used in this document */
#endif
/******************************************************************************/

Boolean FetchRunData(void)
    {
    /* First, get the block handles of the various element arrays. */
    TextLargeRunArrayHeader *pHeader;
    MemHandle hMem;

    word dummy;

    if ( (pHeader = VMLock(vmfhInput, vmbhCharAttrRuns, &hMem)) == NULL
      || (vmbhCharAttrs = pHeader->TLRAH_elementVMBlock) == NullHandle)
        return FALSE;
    VMUnlock(hMem);

    if ( (pHeader = VMLock(vmfhInput, vmbhParaAttrRuns, &hMem)) == NULL
      || (vmbhParaAttrs = pHeader->TLRAH_elementVMBlock) == NullHandle)
        return FALSE;
    VMUnlock(hMem);

#if _DO_HELP
     if(boolHyperLinksEnabled == TRUE) {
	 if(vmbhTypeAttrRuns) {
	     if ( (pHeader = VMLock(vmfhInput, vmbhTypeAttrRuns, &hMem)) == NULL
		  || (vmbhTypeAttrs = pHeader->TLRAH_elementVMBlock) == NullHandle)
		 return FALSE;
	     VMUnlock(hMem);
	 }
	 if(vmbhGraphicRuns) {
	     if ( (pHeader = VMLock(vmfhInput, vmbhGraphicRuns, &hMem)) == NULL
		 || (vmbhGraphics = pHeader->TLRAH_elementVMBlock) == NullHandle)
		 return FALSE;
	     VMUnlock(hMem);
	 }
     }
#endif

    /* Next, retrieve initial run data, keeping lock for HugeArrayNext(). */
    if (HugeArrayLock(vmfhInput, vmbhCharAttrRuns, 0, (void**)&pNextCharRun, &dummy) == 0)
        return FALSE;
/*    nCurCharToken = pNextCharRun->TRAE_token;*/

    if (HugeArrayLock(vmfhInput, vmbhParaAttrRuns, 0, (void**)&pNextParaRun, &dummy) == 0)
        return FALSE;
/*    nCurParaToken = pNextParaRun->TRAE_token;*/

#if _DO_HELP
     if(boolHyperLinksEnabled == TRUE) {
	 if (HugeArrayLock(vmfhInput, vmbhTypeAttrRuns, 0, &pNextTypeRun, &dummy) == 0)
	     return FALSE;
	 if (HugeArrayLock(vmfhInput, vmbhGraphicRuns, 0, &pNextGraphicRun, &dummy) == 0)
	     return FALSE;
     }
#endif
    return TRUE;
    }

void FetchNextRun(TextRunArrayElement** ptr, word *token)
    {
    word dummy;

    /* Do this only if we've reached the point in the text. */
    if ((*ptr)->TRAE_position.WAAH_low == (word)InputCurPos &&
      (*ptr)->TRAE_position.WAAH_high == (byte)(InputCurPos >> 16))
        {
	    /* Store the token as current. */
	    *token = (*ptr)->TRAE_token;

	    /* Advance to the next run. */
	    HugeArrayNext((void**)ptr, &dummy);
        }
    }

void _pascal FindNextUsedToken(MemHandle mem, ChunkHandle tokenArray, word* token);

void FetchNextToken(VMBlockHandle tokenBlock, MemHandle *mem, word *token)
	{
    LMemBlockHeader *p_lmem;
    ChunkHandle tokenArray;

	if (*mem == NullHandle)
	    p_lmem = VMLock(vmfhInput, tokenBlock, mem);
	else
		p_lmem = MemDeref(*mem);
    tokenArray = (ChunkHandle) p_lmem->LMBH_offset;

	if (*token != CA_NULL_ELEMENT)
		FindNextUsedToken(*mem, tokenArray, token);
	}

void *LockRunArrayTokenElement(VMBlockHandle tokenBlock, MemHandle *mem,
    word token)
    {
    void *p_token;
    LMemBlockHeader *p_lmem;
    ChunkHandle tokenArray;
    word tokenSize;

	if (*mem == NullHandle)
	    p_lmem = VMLock(vmfhInput, tokenBlock, mem);
	else
		p_lmem = MemDeref(*mem);
    tokenArray = (ChunkHandle) p_lmem->LMBH_offset;
    p_token = ChunkArrayElementToPtrHandles(
        *mem, tokenArray, token, &tokenSize);
    return p_token;
    }

/* Initialize input routines. */
Boolean VLTInputInit(optr oText)
    {
    Boolean success = FALSE;
    VisLargeTextInstance *pText;
    word dummy;

    /* Make sure oText is of the right class. */
    ECCheckOD(oText);

    /* Lock and deref that object. */
    if (ObjLockObjBlock(HandleOf(oText)) == NULL)
        SetError(TE_EXPORT_ERROR);
    else if (!ObjIsObjectInClass (oText, &VisLargeTextClass))
        {
        EC_WARNING(RTF_WARNING_INPUT_OBJECT_MUST_BE_VISLARGETEXTCLASS);
        SetError(TE_EXPORT_INVALID_CLIPBOARD_FORMAT);   /* we're guessing */
        }
    else
        {
        /* Fetch needed handles from object instance data. */
        pText = (VisLargeTextInstance*)ObjDerefVis(oText);

        vmfhInput = pText->VTI_vmFile;
        vmbhText = (word) pText->VTI_text;
        vmbhCharAttrRuns = pText->VTI_charAttrRuns;
        vmbhParaAttrRuns = pText->VTI_paraAttrRuns;
	oVLTInput = oText;   /* save the optr, we're gonna' need it! */
#if _DO_HELP
     /* if we find type runs, save the VMBlockHandle to the runs */
     if(boolHyperLinksEnabled == TRUE) {
	 if(@call oText::MSG_META_GET_VAR_DATA(ATTR_VIS_TEXT_TYPE_RUNS,
					       sizeof(VMBlockHandle),
					       &vmbhTypeAttrRuns) == 0xffff) {
	     EC_WARNING(RTF_WARNING_TYPE_RUNS_VARDATA_NOT_DEFINED);
	     SetError(TE_EXPORT_ERROR);
	     return success;
	 }

         /* save the VMBlockHandle to the graphics runs */
         if(@call oText::MSG_META_GET_VAR_DATA(ATTR_VIS_TEXT_GRAPHIC_RUNS,
					       sizeof(VMBlockHandle),
					       &vmbhGraphicRuns) == 0xffff) {
	     vmbhGraphicRuns = NULL;
	 }
     }
#endif
        /* Validate handles for EC build. */
        ECCheckFileHandle(vmfhInput);
        ECVMCheckVMBlockHandle(vmfhInput, vmbhText);
        ECVMCheckVMBlockHandle(vmfhInput, vmbhCharAttrRuns);
        ECVMCheckVMBlockHandle(vmfhInput, vmbhParaAttrRuns);

        /* Pre-fetch first text character. */
		nCurCharToken = nCurParaToken = 0;
        InputCurPos = 0;
        HugeArrayLock(vmfhInput, vmbhText, InputCurPos, (void**)&cpInputCurPos, &dummy);

        /* Fetch initial run information. */
        FetchRunData();

        /* All done! */
        MemUnlock(HandleOf(oText));
        success = TRUE;
        }
    return success;
    }

/*  NOTE: Token routines will return the token used by the character which
    was last returned by VLTInputGetChar.  Calling order is important! */
char VLTInputGetChar(void)
    {
    char c = EOT;
    word dummy;

    if (cpInputCurPos != NULL)
        {
        /* Advance to next run element for each run if reached. */
        FetchNextRun(&pNextCharRun, &nCurCharToken);
        FetchNextRun(&pNextParaRun, &nCurParaToken);

#if _DO_HELP
	FetchNextRun(&pNextTypeRun, &nCurTypeToken);
        FetchNextRun(&pNextGraphicRun, &nCurGraphicToken);
#endif

        /* Get the currently waiting character. */
        c = *cpInputCurPos;

        /* Advance to next text character. */
        if (c != EOT)
            {
            InputCurPos ++;
            HugeArrayNext((void**)&cpInputCurPos, &dummy);
            }
        }

    return c;
    }

word VLTInputGetCharToken(void)
    {
    return nCurCharToken;
    }

word VLTInputGetNextCharToken(MemHandle* mem)
	{
	FetchNextToken(vmbhCharAttrs, mem, &nCurCharToken);
	return nCurCharToken;
	}

word VLTInputGetParaToken(void)
    {
    return nCurParaToken;
    }

word VLTInputGetNextParaToken(MemHandle* mem)
	{
	FetchNextToken(vmbhParaAttrs, mem, &nCurParaToken);
	return nCurParaToken;
	}

#if _DO_HELP
word VLTInputGetTypeToken(void)
{
    return nCurTypeToken;
}

word VLTInputGetGraphicToken(void)
{
    return nCurGraphicToken;
}
#endif

/*  NOTE: The handle returned must be VMUnlock'd when access to the structure
    is finished. After unlocking, the pointer is invalid. May be called in a
    loop without repeatedly locking/unlocking by passing the same MemHandle
    pointer, setting it to NullHandle before the loop, and VMUnlock after. */
VisTextCharAttr* VLTInputGetCharAttrByToken(word token, MemHandle* phMem)
    {
    return LockRunArrayTokenElement(vmbhCharAttrs, phMem, token);
    }

VisTextParaAttr* VLTInputGetParaAttrByToken(word token, MemHandle* phMem)
    {
    return LockRunArrayTokenElement(vmbhParaAttrs, phMem, token);
    }

#if _DO_HELP
VisTextType* VLTInputGetTypeAttrByToken(word token, MemHandle* phMem)
{
    return LockRunArrayTokenElement(vmbhTypeAttrs, phMem, token);
}

VisTextGraphic* VLTInputGetGraphicByToken(word token, MemHandle* phMem)
{
    return LockRunArrayTokenElement(vmbhGraphics, phMem, token);
}

#endif

Boolean VLTInputEOT(void)
    {
    return (*cpInputCurPos == EOT);
    }

void VLTInputFree(void)
    {
    if (cpInputCurPos != NULL)
        HugeArrayUnlock(cpInputCurPos);
    if (pNextCharRun != NULL)
        HugeArrayUnlock(pNextCharRun);
    if (pNextParaRun != NULL)
        HugeArrayUnlock(pNextParaRun);
    }
