#include "generic.uih"
#include "Objects/colorC.uih"

start ExportInterface;

PngExpBit1 = GenItem {
    moniker = 'M', "Monochrome (1 bit/pixel)";
    identifier = 0;
}

PngExpBit4 = GenItem {
    moniker = '1', "16 colors (4 bits/pixel)";
    identifier = 1;
}

PngExpBit8 = GenItem {
    moniker = '2', "256 colors (8 bits/pixel)";
    identifier = 2;
}

PngExpBit24 = GenItem {
    moniker = 'T', "TrueColor (24 bits/pixel)";
    identifier = 3;
}

PngExpFormGroup = GenItemGroup {
    hints = {
      HINT_ITEM_GROUP_MINIMIZE_SIZE,
      HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
    }
    selection = 3;
    children = PngExpBit1, PngExpBit4, PngExpBit8, PngExpBit24;
}

PngExpBitFormat = GenInteraction {
    moniker = 'C', "Colors:";
    children = PngExpFormGroup;
}

PngExportGroup = GenInteraction {
    genStates = default -usable;
    hints = {
      HINT_ORIENT_CHILDREN_VERTICALLY,
      HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
    children = PngExpBitFormat;
}

end ExportInterface;

start ImportInterface;

PngAlphaMethodBlend = GenItem {
    moniker = 'B', "Blend color";
    identifier = 1;
}

PngAlphaMethodMask = GenItem {
    moniker = 'M', "Alpha to mask";
    identifier = 0;
}

PngAlphaMethodGroup = GenItemGroup {
    moniker = 'M', "Method:";
    hints = {
      HINT_ITEM_GROUP_MINIMIZE_SIZE,
      HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
    }
    selection = 1;
    children = PngAlphaMethodBlend, PngAlphaMethodMask;
}

PngAlphaBlendExplain = GenText {
    genAttributes = readOnly;
    text = "Composite the image over a chosen background color, " \
           "replacing per-pixel alpha with blended results.";
    hints = {
      HINT_FIXED_SIZE {
        word SST_AVG_CHAR_WIDTHS | 60,
        word SST_LINES_OF_TEXT | 3,
        word 0
      }
    }
}

PngAlphaBlendColor = ColorSelector {
    moniker = 'C', "Blend color";
    hints = {
      HINT_EXPAND_WIDTH_TO_FIT_PARENT,
      ATTR_GEN_CONTROL_REQUIRE_UI {
        word mask CSF_INDEX or mask CSF_RGB or mask CSF_OTHER
      },
      ATTR_GEN_CONTROL_PROHIBIT_UI {
        word mask CSF_PATTERN or mask CSF_DRAW_MASK
      }
    }
}

PngAlphaBlendBox = GenInteraction {
    moniker = 'B', "Blend Settings";
    hints = {
      HINT_DRAW_IN_BOX,
      HINT_EXPAND_WIDTH_TO_FIT_PARENT,
      HINT_ORIENT_CHILDREN_VERTICALLY,
      HINT_CENTER_CHILDREN_ON_MONIKERS
    }
    children = PngAlphaBlendExplain, PngAlphaBlendColor;
}

PngAlphaMaskExplain = GenText {
    genAttributes = readOnly;
    text = "Convert the alpha channel to a 1-bit mask. Pixels with " \
           "alpha at or above the chosen threshold stay opaque.";
    hints = {
      HINT_FIXED_SIZE {
        word SST_AVG_CHAR_WIDTHS | 60,
        word SST_LINES_OF_TEXT | 3,
        word 0
      }
    }
}

PngAlphaThresholdValue = GenValue {
    moniker = 'T', "Alpha threshold";
    minimum = 0;
    maximum = 255;
    increment = 1;
    value = 192;
    displayFormat = integer;
    hints = {
      HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
}

PngAlphaMaskBox = GenInteraction {
    moniker = 'M', "Mask Settings";
    hints = {
      HINT_DRAW_IN_BOX,
      HINT_EXPAND_WIDTH_TO_FIT_PARENT,
      HINT_ORIENT_CHILDREN_VERTICALLY,
      HINT_CENTER_CHILDREN_ON_MONIKERS
    }
    children = PngAlphaMaskExplain, PngAlphaThresholdValue;
}

PngImportGroup = GenInteraction {
    hints = {
      HINT_ORIENT_CHILDREN_VERTICALLY,
      HINT_EXPAND_WIDTH_TO_FIT_PARENT
    }
    children = PngAlphaMethodGroup, PngAlphaBlendBox, PngAlphaMaskBox;
}

end ImportInterface;
