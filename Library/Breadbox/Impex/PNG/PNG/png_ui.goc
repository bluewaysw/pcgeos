/***********************************************************************
 *
 * MODULE:    PNG Import/Export UI
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <Objects/gItemGC.goh>
@include <Objects/gValueC.goh>
@include <Objects/colorC.goh>
@include <object.h>

#include "png_ui.h"

/* Accessing elements of a duplicated UI resource - combines known offset with current handle */
@define dup(obj) ConstructOptr(OptrToHandle(oself), OptrToChunk(obj))

/* Derives classes, Messages */
@class PngImportGroupClass, GenInteractionClass;

     @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_PNG_ALPHA_METHOD_SELECTED;
     @message (GEN_TRIGGER_ACTION) MSG_DISMISS_PNG_IMPORT_DIALOG;

@endc
@classdecl PngImportGroupClass;

@start ImportInterface;

/*----- Alpha handling method selection -----*/

@object GenItemClass PngAlphaMethodBlend = {
    GI_visMoniker = "Blend color";
    GII_identifier = AT_BLEND;
}

@object GenItemClass PngAlphaMethodMask = {
    GI_visMoniker = "Alpha to mask";
    GII_identifier = AT_TRESHOLD;
}

@object GenItemGroupClass PngAlphaMethodGroup = {
    GI_visMoniker = "Method:";
    GIGI_selection = AT_BLEND;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GI_comp = @PngAlphaMethodBlend, @PngAlphaMethodMask;
    GIGI_destination = @PngImportGroup;
    GIGI_applyMsg = MSG_PNG_ALPHA_METHOD_SELECTED;

    HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION;
    HINT_ITEM_GROUP_RADIO_BUTTON_STYLE; // HINT_ITEM_GROUP_TAB_STYLE;
}

/*----- Alpha blend color selection -----*/

@object GenTextClass PngAlphaBlendExplain = {
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_text = "Replace transparency by blending the image with a single background color you choose. Semi-transparent pixels are mixed with that color so the saved image has no transparent areas.";

    HINT_FIXED_SIZE = {
        SST_AVG_CHAR_WIDTHS | 60,
        SST_LINES_OF_TEXT | 4,
        0
    };
}

@object ColorSelectorClass PngAlphaBlendColor = {
    GI_visMoniker = "Blend color:";
    CSI_color = {C_WHITE, CF_INDEX, 0, 0};
    GI_states = @default | GS_USABLE | GS_ENABLED;

    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    ATTR_GEN_CONTROL_REQUIRE_UI = (CSF_INDEX | CSF_RGB | CSF_OTHER);
    ATTR_GEN_CONTROL_PROHIBIT_UI = (CSF_PATTERN | CSF_DRAW_MASK);
}

@object GenInteractionClass PngAlphaBlendBox = {
    GI_visMoniker = "Blend Settings";
    GI_comp = @PngAlphaBlendExplain, @PngAlphaBlendColor;

    HINT_DRAW_IN_BOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    // HINT_CENTER_CHILDREN_ON_MONIKERS;
}

/*----- Alpha to mask selection -----*/

@object GenTextClass PngAlphaMaskExplain = {
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_text = "Convert the alpha channel to a 1-bit mask: each pixel becomes either fully opaque or fully transparent. Pixels with alpha equal to or above the threshold will remain opaque; those below become fully transparent. Increasing the threshold makes fewer pixels opaque (more transparent).";

    HINT_FIXED_SIZE = {
        SST_AVG_CHAR_WIDTHS | 60,
        SST_LINES_OF_TEXT | 7,
        0
    };
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@object GenValueClass PngAlphaThresholdValue = {
    GI_visMoniker = "Alpha threshold:";
    GVLI_minimum = MakeWWFixed(1);
    GVLI_maximum = MakeWWFixed(255);
    GVLI_increment = MakeWWFixed(1);
    GVLI_value = MakeWWFixed(192);
    GVLI_displayFormat = GVDF_INTEGER;

    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@object GenInteractionClass PngAlphaMaskBox = {
    GI_visMoniker = "Mask Settings";
    GI_states = @default & ~GS_USABLE;
    GI_comp = @PngAlphaMaskExplain, @PngAlphaThresholdValue;

    HINT_DRAW_IN_BOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    //HINT_CENTER_CHILDREN_ON_MONIKERS;
}

/*----- Reply bar and wrapper -----*/

@object GenTriggerClass PngImportApplyButton = {
    ATTR_GEN_TRIGGER_INTERACTION_COMMAND = IC_APPLY;
    GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;

    HINT_SEEK_REPLY_BAR;
    HINT_DEFAULT_DEFAULT_ACTION;
}

@object GenTriggerClass PngImportCancelButton = {
    ATTR_GEN_TRIGGER_INTERACTION_COMMAND = IC_RESET;
    GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
    GTI_actionMsg = MSG_DISMISS_PNG_IMPORT_DIALOG;
    GTI_destination = @PngImportGroup;

    HINT_SEEK_REPLY_BAR;
}

@object GenInteractionClass PngImportReplyBar = {
    GI_comp = @PngImportApplyButton, @PngImportCancelButton;

    HINT_MAKE_REPLY_BAR;
}

@object PngImportGroupClass PngImportGroup = {
    GI_visMoniker = "Import Options";
    GI_states = @default & ~GS_USABLE;
    GII_visibility = GIV_DIALOG;
    GII_attrs = GIA_MODAL;
    GI_comp = @PngAlphaMethodGroup, @PngAlphaBlendBox, @PngAlphaMaskBox, @PngImportReplyBar;

    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@end ImportInterface;


@start ExportInterface;

@object GenItemClass PngExpBit1 = {
    GI_visMoniker = 'M', "Monochrome (1 bit/pixel)";
    GII_identifier = 0;
}

@object GenItemClass PngExpBit4 = {
    GI_visMoniker = '1', "16 colors (4 bits/pixel)";
    GII_identifier = 1;
}

@object GenItemClass PngExpBit8 = {
    GI_visMoniker = '2', "256 colors (8 bits/pixel)";
    GII_identifier = 2;
}

@object GenItemClass PngExpBit24 = {
    GI_visMoniker = 'T', "TrueColor (24 bits/pixel)";
    GII_identifier = 3;
}

@object GenItemGroupClass PngExpFormGroup = {
    GIGI_selection = 3;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GI_comp = @PngExpBit1, @PngExpBit4, @PngExpBit8, @PngExpBit24;

    HINT_ITEM_GROUP_MINIMIZE_SIZE;
    HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION;
}

@object GenInteractionClass PngExpBitFormat = {
    GI_visMoniker = 'C', "Colors:";
    GI_comp = @PngExpFormGroup;
}

@object GenInteractionClass PngExportGroup = {
    GI_states = @default & ~GS_USABLE;
    GI_comp = @PngExpBitFormat;

    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

@end ExportInterface;


@method PngImportGroupClass, MSG_PNG_ALPHA_METHOD_SELECTED
{
    if (selection == GIGS_NONE)
    {
        @call @dup(@PngAlphaBlendBox)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
        @call @dup(@PngAlphaMaskBox)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    }
    else if (selection == 1)
    {
        @call @dup(@PngAlphaBlendBox)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
        @call @dup(@PngAlphaMaskBox)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    }
    else
    {
        @call @dup(@PngAlphaMaskBox)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
        @call @dup(@PngAlphaBlendBox)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    }

    @call oself::MSG_GEN_RESET_TO_INITIAL_SIZE(VUM_DELAYED_VIA_UI_QUEUE);// shrink to minimum size
}


@method PngImportGroupClass, MSG_DISMISS_PNG_IMPORT_DIALOG
{
    ColorQuad   defaultBlendColor = {C_WHITE, CF_INDEX, 0, 0};

    @call @dup(@PngAlphaMethodGroup)::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(AT_BLEND, FALSE);
    @call @dup(@PngAlphaBlendColor)::MSG_COLOR_SELECTOR_SET_COLOR(defaultBlendColor, FALSE);
    @call @dup(@PngAlphaThresholdValue)::MSG_GEN_VALUE_SET_INTEGER_VALUE(192, FALSE);

    @call @dup(@PngAlphaBlendBox)::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
    @call @dup(@PngAlphaMaskBox)::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
}
