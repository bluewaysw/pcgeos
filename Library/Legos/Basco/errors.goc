/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		errors.goc

AUTHOR:		Roy Goldman, August 5, 1994

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	roy	 8/31/94	Initial version.

DESCRIPTION:
	
	$Id: errors.goc,v 1.1 98/10/13 21:42:47 martin Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
@include <stdapp.goh>
#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include <geoMisc.h>
#include "bascoint.h"
/*#include <Legos/Internal/runerr.h>*/

@start DialogStrings, data;

@chunk TCHAR C_NONE[] =
_TEXT("CTE -: Undefined compile time error");

@chunk TCHAR C_INTERNAL[] =
_TEXT("CTE -: Internal compiler error");

@chunk TCHAR C_SYNTAX[] =
_TEXT("CTE -: Syntax error");

@chunk TCHAR C_NOPROGFILE[] =
_TEXT("CTE -: Unable to open specified file.  It may be open by another application.");

@chunk TCHAR C_INVALID_ARRAY_INDEX[] =
_TEXT("CTE -: Invalid array index");

@chunk TCHAR C_INVALID_ARGUMENT[] =
_TEXT("CTE -: Invalid Argument");

@chunk TCHAR C_BAD_FORMAL_PARAM[] =
_TEXT("CTE -: Bad formal paramter declaration");

@chunk TCHAR C_BAD_FUNCTION_DECL[] =
_TEXT("CTE -: Bad function or subroutine declaration");

@chunk TCHAR C_NO_ENDFUNCTION[] =
_TEXT("CTE -: END FUNCTION or END SUB expected");

@chunk TCHAR C_NO_ENDIF[] =
_TEXT("CTE -: END IF expected");

@chunk TCHAR C_NO_ENDSELECT[] =
_TEXT("CTE -: END SELECT expected");

@chunk TCHAR C_NO_LOOP[] =
_TEXT("CTE -: LOOP expected");

@chunk TCHAR C_NO_NEXT[] =
_TEXT("CTE -: NEXT expected");

@chunk TCHAR C_NO_THEN[] =
_TEXT("CTE -: THEN expected");

@chunk TCHAR C_NO_AS[] =
_TEXT("CTE -: AS expected");

@chunk TCHAR C_NO_TO[] =
_TEXT("CTE -: TO expected");

@chunk TCHAR C_NO_EQUALS[] =
_TEXT("CTE -: Equal sign expected");

@chunk TCHAR C_BAD_KEYWORD_USE[] =
_TEXT("CTE -: Illegal use of keyword");

@chunk TCHAR C_NO_CASE[] =
_TEXT("CTE -: CASE expected");

@chunk TCHAR C_BAD_TYPE[] =
_TEXT("CTE -: Bad type");

@chunk TCHAR C_BAD_COMPONENT_TYPE[] =
_TEXT("CTE -: Unknown specific component type");

@chunk TCHAR C_BAD_EXIT[] =
_TEXT("CTE -: Invalid Exit");

@chunk TCHAR C_ELSE_NOT_LAST[] =
_TEXT("CTE -: ELSE case must be last");

@chunk TCHAR C_SUB_NOT_RVAL[] =
_TEXT("CTE -: Subroutine call cannot be used as rval");

@chunk TCHAR C_BAD_NUM_PARAMS[] =
_TEXT("CTE -: Wrong number of parameters");

@chunk TCHAR C_TWO_OPERATORS_IN_A_ROW[] =
_TEXT("CTE -: Two operators in a row");

@chunk TCHAR C_TWO_OPERANDS_IN_A_ROW[] =
_TEXT("CTE -: Two operands in a row");

@chunk TCHAR C_BAD_USE_UNARY_OPERATOR[] =
_TEXT("CTE -: Bad use of unary operator");

@chunk TCHAR C_VARIABLE_ALREADY_DEFINED[] =
_TEXT("CTE -: Variable already defined");

@chunk TCHAR C_CONSTANT_ALREADY_DEFINED[] = 
_TEXT("CTE -: Constant already defined");

@chunk TCHAR C_FUNCTION_INSIDE_FUNCTION[] =
_TEXT("CTE -: Routine definition not allowed inside another routine");

@chunk TCHAR C_CODE_OUTSIDE_FUNCTION[] =
_TEXT("CTE -: Code not allowed outside routine");

@chunk TCHAR C_NO_ARRAY_DIM[] =
_TEXT("CTE -: Array use without dim, or function use without defn");

@chunk TCHAR C_EXPECT_BINARY[] =
_TEXT("CTE -: Expecting a binary operator");

@chunk TCHAR C_EXPECT_BINARY_OPERAND[] =
_TEXT("CTE -: Expecting an operand for binary operator");

@chunk TCHAR C_EXPECT_OPEN_PAREN[] =
_TEXT("CTE -: Expecting an argument list");

@chunk TCHAR C_EXPECT_CLOSE_PAREN[] =
_TEXT("CTE -: Expecting a closing parenthesis");

@chunk TCHAR C_EXPECT_COMMA[] =
_TEXT("CTE -: Expecting a comma");

@chunk TCHAR C_NO_FUNCTION[] =
_TEXT("CTE -: Unknown procedure or function");

@chunk TCHAR C_ONE_UNARY[] =
_TEXT("CTE -: Only one unary operator allowed here");

@chunk TCHAR C_FUNC_NOT_USED_AS_RVAL[] =
_TEXT("CTE -: Function with return value not expected");

@chunk TCHAR C_UNDECLARED[] =
_TEXT("CTE -: Undeclared variable");

@chunk TCHAR C_TYPE_MISMATCH[] =
_TEXT("CTE -: Type mismatch");

@chunk TCHAR C_BAD_LOOP_VAR[] =
_TEXT("CTE -: Loop variables must be simple");

@chunk TCHAR C_OVERFLOW[] =
_TEXT("CTE -: Overflow");

@chunk TCHAR C_TOO_MANY_PARAMS[] =
_TEXT("CTE -: Too many parameters");

@chunk TCHAR C_TOO_FEW_PARAMS[] =
_TEXT("CTE -: Too few parameters");

@chunk TCHAR C_EXPECT_FUNC[] =
_TEXT("CTE -: Call to function expected");

@chunk TCHAR C_EXPECT_IDENT[] =
_TEXT("CTE -: Expecting identifier");

@chunk TCHAR C_STRUCT_DEFN_NOT_ALLOWED[] =
_TEXT("CTE -: Structure definition not allowed here");

@chunk TCHAR C_EXPECT_INTEGRAL_TYPE[] =
_TEXT("CTE -: An integral type must be used here");

@chunk TCHAR C_EXPECT_STRUCT_TYPE[] =
_TEXT("CTE -: An structure must be used here");

@chunk TCHAR C_UNDEFINED_STRUCT_FIELD[] =
_TEXT("CTE -: Undefined structure field");

@chunk TCHAR C_UNDEFINED_STRUCT[] =
_TEXT("CTE -: Unknown structure type");

@chunk TCHAR C_INVALID_STRUCT_FOR_AGG[] =
_TEXT("CTE -: This structure cannot be used as an aggregate component");

@chunk TCHAR C_ARRAY_ASSIGN_DISALLOWED[] =
_TEXT("CTE -: Assignment of arrays is not allowed");

@chunk TCHAR C_CONSTANT_NEEDED_HERE[] =
_TEXT("CTE -: A constant expression is needed here.");

@chunk TCHAR C_NO_END_QUOTE[] = 
_TEXT("CTE -: Missing end quote.");

@chunk TCHAR C_BAD_CHAR[] = 
_TEXT("CTE -: Bad character.");

@chunk TCHAR C_UNRESOLVED_ACTION[] =
_TEXT("CTE -: This action does not exist.");

@chunk TCHAR C_UNDEFINED_LABEL[] = 
_TEXT("CTE -: Undefined label.");

@chunk TCHAR C_NOT_CONSTANT_EXPRESSION[] = 
_TEXT("CTE -: Not a constant expression.");

@chunk TCHAR C_NO_EOL[] = 
_TEXT("CTE -: End of line expected.");

@chunk TCHAR C_NO_DIM[] = 
_TEXT("CTE -: Dim expected.");

@chunk TCHAR C_NO_STRUCT[] = 
_TEXT("CTE -: Struct expected.");

@chunk TCHAR C_ARRAY_PROP_NOT_ALLOWED[] = 
_TEXT("CTE -: You may only reference a non-array property here.");

@chunk TCHAR C_NEED_EXPLICIT_STRUCT_FIELD[] =
_TEXT("CTE -: You may only reference an explicitly-named structure field.");

@chunk TCHAR C_UNABLE_TO_DELETE_FUNCTION[] =
_TEXT("CTE -: Function Still Referenced, not deleted.");

@chunk TCHAR C_ROUTINE_TOO_BIG[] = 
_TEXT("CTE -: Routine too big.");

@chunk TCHAR C_NO_EHAN[] =
_TEXT("CTE -: There is no error handler in the current routine.");

@chunk TCHAR C_BAD_EXPORT[] =
_TEXT("CTE -: EXPORT may only occur in a global routine.");

@chunk TCHAR C_DANGLING_RVAL[] =
_TEXT("CTE -: Expression with no assignment");

@chunk TCHAR C_DUPLICATE_LABEL[] =
_TEXT("CTE -: Duplicate label");

@chunk TCHAR C_MALFORMED_LABEL[] =
_TEXT("CTE -: Label is malformed");

@chunk TCHAR C_JUMPING_INTO_BLOCK[] =
_TEXT("CTE -: You cannot jump into a FOR or SELECT block");

@chunk TCHAR C_EHAN_IN_BLOCK[] =
_TEXT("CTE -: You cannot have an error handler within a FOR or SELECT block");

@chunk TCHAR C_RESUME_INTO_BLOCK[] =
_TEXT("CTE -: Target of RESUME cannot be within a FOR or SELECT block");

@chunk TCHAR C_CONSTANT_USE_BEFORE_DECL[] =
_TEXT("CTE -: You are using a constant before its declaration.");

/* @@ put chunk here.  don't remove this comment */
/* M-x basco-cte to add a new error */

/* This one should never be signaled. It's not really an error, just
 * an excuse to unwind the stack when someone wants to abort.  I'm
 * including it here just to avoid confusion. We could eliminate it
 * later, just make sure not to get the indices messed up
 */
@chunk TCHAR C_HALT_NO_ERROR[] =
_TEXT("");

/* !!!!!!!!!!!!!!!!!   */
/* IMPORTANT: ORDER HERE MUST MATCH ORDER IN BASCOINT.H ENUM errcodes!!!!!!! */
/* !!!!!!!!!!!!!!!!!   */

@chunk optr Errors[] = 
{
    @C_NONE,
    @C_INTERNAL,
    @C_SYNTAX,
    @C_NOPROGFILE,
    @C_INVALID_ARRAY_INDEX,
    @C_INVALID_ARGUMENT,
    @C_HALT_NO_ERROR,
    @C_BAD_FORMAL_PARAM,
    @C_BAD_FUNCTION_DECL,
    @C_NO_ENDFUNCTION,
    @C_NO_ENDIF,
    @C_NO_ENDSELECT,
    @C_NO_LOOP,
    @C_NO_NEXT,
    @C_NO_THEN,
    @C_NO_AS,
    @C_NO_TO,
    @C_NO_EQUALS,
    @C_BAD_KEYWORD_USE,
    @C_NO_CASE,
    @C_BAD_TYPE,
    @C_BAD_COMPONENT_TYPE,
    @C_BAD_EXIT,
    @C_ELSE_NOT_LAST,
    @C_SUB_NOT_RVAL,
    @C_BAD_NUM_PARAMS,
    @C_TWO_OPERATORS_IN_A_ROW,
    @C_TWO_OPERANDS_IN_A_ROW,
    @C_BAD_USE_UNARY_OPERATOR,
    @C_VARIABLE_ALREADY_DEFINED,
    @C_CONSTANT_ALREADY_DEFINED,
    @C_FUNCTION_INSIDE_FUNCTION,
    @C_CODE_OUTSIDE_FUNCTION,
    @C_NO_ARRAY_DIM,
    @C_EXPECT_BINARY,
    @C_EXPECT_BINARY_OPERAND,
    @C_EXPECT_OPEN_PAREN,
    @C_EXPECT_CLOSE_PAREN,
    @C_EXPECT_COMMA,
    @C_NO_FUNCTION,
    @C_ONE_UNARY,
    @C_FUNC_NOT_USED_AS_RVAL,
    @C_UNDECLARED,
    @C_TYPE_MISMATCH,
    @C_BAD_LOOP_VAR,
    @C_OVERFLOW,
    @C_TOO_MANY_PARAMS,
    @C_TOO_FEW_PARAMS,
    @C_EXPECT_FUNC,
    @C_EXPECT_IDENT,
    @C_STRUCT_DEFN_NOT_ALLOWED,
    @C_EXPECT_INTEGRAL_TYPE,
    @C_EXPECT_STRUCT_TYPE,
    @C_UNDEFINED_STRUCT_FIELD,
    @C_UNDEFINED_STRUCT,
    @C_INVALID_STRUCT_FOR_AGG,
    @C_ARRAY_ASSIGN_DISALLOWED,
    @C_CONSTANT_NEEDED_HERE,
    @C_NO_END_QUOTE,
    @C_BAD_CHAR,
    @C_UNRESOLVED_ACTION,
    @C_UNDEFINED_LABEL,
    @C_NOT_CONSTANT_EXPRESSION,
    @C_NO_EOL,
    @C_NO_DIM,
    @C_NO_STRUCT,
    @C_ARRAY_PROP_NOT_ALLOWED,
    @C_NEED_EXPLICIT_STRUCT_FIELD,
    @C_UNABLE_TO_DELETE_FUNCTION,
    @C_ROUTINE_TOO_BIG,
    @C_NO_EHAN,
    @C_BAD_EXPORT,
    @C_DANGLING_RVAL,
    @C_DUPLICATE_LABEL,
    @C_MALFORMED_LABEL,
    @C_JUMPING_INTO_BLOCK,
    @C_EHAN_IN_BLOCK,
    @C_RESUME_INTO_BLOCK,
    @C_CONSTANT_USE_BEFORE_DECL
,
/* @@ put array here.  don't remove this comment */
};

@end DialogStrings


void
SignalError(TaskPtr task) 
{
    optr *array;
    TCHAR *message;
    char lineStr[5*sizeof(TCHAR)];
    char funcStr[5*sizeof(TCHAR)];
    ErrorCode c = task->err_code;
    
    MemLock(OptrToHandle(@Errors));
    array = LMemDeref(@Errors);

    if ((c >= E_LAST_ERROR) || (c < NONE))
    {
	c = NONE;		/* This has the string "undefined" */
    }
   
    /* Errors array and the errors themselves are assumed to be
     * in the same resource
     */
    EC_ERROR_IF(OptrToHandle(@Errors) != OptrToHandle(array[c]),
		BE_FAILED_ASSERTION);
    message = LMemDeref(array[c]);

/* Temporarily replace error numbers with function and line numbers, which 
 * are much more useful within bastest. 7/13/95 dl
    itoa(c, numStr);
 */
    itoa(task->ln, lineStr);
    itoa(task->funcNumber, funcStr);

    UserStandardDialog
	(NULL, NULL,
	 lineStr,		/* arg2 */
	 funcStr,		/* arg1 */
	 message,
	 CDBF_SYSTEM_MODAL | 
	 (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
	 (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));

    MemUnlock(OptrToHandle(@Errors));
}


