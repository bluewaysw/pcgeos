/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:        GEOS
MODULE:         FlatFile/Database
FILE:           ffDatabaseSort.goc

AUTHOR:         John D. Mitchell

METHODS:

Name                            Description
----                            -----------
MSG_SEARCH                      Search the current database for the
				requested information.

MSG_FFD_SORT_INFO_SHADOW_SAVE   Save the current sort context.

MSG_FFD_SORT_INFO_SHADOW_RESTORE
				Restore the current sort context to the
				previously saved context.

MSG_FFD_SORT_INFO_SHADOW_DELETE Nuke the saved sort context.

MSG_FFD_SORT_INFO_SORT          Sort the current database based on the
				current sort context.

MSG_FFD_SORT_INFO_GET_NUM_ITEMS Return the current number of sort keys.

MSG_FFD_SORT_INFO_ADD_ITEM      Add an item into the current sort context.

MSG_FFD_SORT_INFO_DELETE_ITEM   Remove an item from the sort context.

MSG_FFD_SORT_INFO_DELETE_ALL_ITEMS
				Remove all items from the current
				sort context.

MSG_FFD_SORT_INFO_ITEM_SEARCH   Search for a reference to the given
				database list index in the sort key list
				information.

MSG_FFD_SORT_INFO_QUERY_ITEM    Retrieve the DATABASE_NAME_LIST index
				corresponding to the requested sort item.

MSG_FFD_SORT_INFO_LIST_MONIKER_QUERY
				Retrieve the moniker for the requested sort
				item and provide it to the given dynamic
				list.

MSG_FFD_SORT_INFO_LIST_REQUEST_NOTES
				Retrieve the notes for the requested sort
				item and provide it to the text object.

MSG_FFD_SORT_INFO_GET_SORT_DIRECTION
				Return the sort direction of the given sort
				item.

MSG_FFD_SORT_INFO_SET_SORT_DIRECTION
				Set the sort direction of the given sort
				item.

MSG_FFD_SORT_INFO_INCREASE_PRIORITY
				Increase the relative sort key ordering
				position of the given sort item.

MSG_FFD_SORT_INFO_DECREASE_PRIORITY
				Decrease the relative sort key ordering
				position of the give sort item.

MSG_FFD_SORT_INFO_SET_SORT_OPTIONS
				Set the various options in the current 
				sort context.

MSG_FFD_SORT_INFO_GET_SORT_OPTIONS
				Return the sort options for the current
				sort context.

MSG_FFD_SORT_INFO_NUKE_FIELD    Delete all sort items that refer to the
				given database field.

FUNCTIONS:

Scope   Name                    Description
-----   ----                    -----------
Int     FFDGetFieldColumnExtents
				Return the first and last valid index in to
				the database.

Int     SortInfoGetSortDirection
				Return the sort direction for the requested
				sort item.

Int     SortInfoSetSortDirection
				Set the sort direction for the given
				sort item.

Int     SortInfoQueryItem       Get the FieldListID of the
				DATABASE_NAME_LIST entry which corresponds
				to the given sort key list item.

Int     SortInfoDeleteItem      Delete the given sort item.

Int     SortInfoFieldIDToDBNameListIndex
				Translate a FieldID to the FieldListID of
				the DATABASE_NAME_LIST which references the
				given FieldID.

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	jdashe  92.07.31        Initial version.
	JDM     92.12.15        Rewritten again.
	JDM     93.01.03        Rewritten to use ssheet columns internally
				instead of FFI_databaseNameList indices.

DESCRIPTION:
	This file contains functions and methods for sorting records in the
	flatfile database library.

	$Id: ffDatabaseSort.goc,v 1.1 97/04/04 18:03:02 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifdef __HIGHC__
pragma Code ("DATABASESORT");
#endif
#ifdef __BORLANDC__
#pragma codeseg DATABASESORT
#endif
#ifdef __WATCOMC__
#pragma code_seg("DATABASESORT")
#endif


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Include Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>
#include <geoworks.h>
#include <system.h>

#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include <Ansi/ctype.h>

@include <ffile.goh>
@include <Objects/FlatFile/ffileC.goh>
#include <ffFatal.h>
#include <Database/ffdExtrn.h>

@extern chunk @FFDFailedSearchInShowOnlyMarked;

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Internal Function Prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static sbyte _pascal SortInfoGetSortDirection
			(FlatFileDatabaseInstance *pself,
			 word itemIndex);

static void _pascal SortInfoSetSortDirection
			(FlatFileDatabaseInstance *pself,
			 word itemIndex,
			 sbyte sortAscending);

static FieldListID _pascal SortInfoQueryItem
			(FlatFileDatabaseInstance *pself,
			 word itemIndex,
			 sbyte *sortAscending);

static byte _pascal SortInfoDeleteItem
			(FlatFileDatabaseInstance *pself,
			 word itemIndex);

static FieldListID _pascal SortInfoFieldIDToDBNameListIndex
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID);


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Sort-Keys/Sub-Total Fields Handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SHADOW_SAVE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Save the current sort context to the shadow copy.

PASS:           Void.

RETURN:         Void.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        Current sort context is save in the
			FFI_VAR_SORT_INFO_SHADOW_DATA vardata field.

CHECKS:         Validates the non-existence of any shadow copy prior to use.

PSEUDO CODE/STRATEGY:
	Create the shadow sort data area.
	Copy the current sort context to the shadow copy.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.29        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SHADOW_SAVE
{
    FFDBSortInfo        *sortInfoPtr;

#if     ERROR_CHECK
    /* Does the shadow sort data already exist?.        */
    sortInfoPtr = ObjVarFindData (oself, FFI_VAR_SORT_INFO_SHADOW_DATA);
    if (sortInfoPtr)
	{
	/* Yep. Sigh...  Didn't clean up after ourselves somewhere.     */
	EC_ERROR (SORT_INFO_SHADOW_DATA_SHOULD_NOT_EXIST_BUT_IT_DOES);
	}
#endif  /* ERROR_CHECK  */

    /* Create the shadow sort data.     */
    sortInfoPtr = ObjVarAddData (oself,
				 FFI_VAR_SORT_INFO_SHADOW_DATA,
				 sizeof (FFDBSortInfo));

    /* Save the current context into the shadow copy.   */
    pself = ObjDerefGen (oself);
    *sortInfoPtr = pself->FFI_sortInfo;
}       /* End of MSG_FFD_SORT_INFO_SHADOW_SAVE.        */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SHADOW_RESTORE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Overwrite the current sort context (if any) with the
		previously saved sort context.

PASS:           Void.

RETURN:         Void.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        The current sort context is the same as was in the
			shadow sort data or is unchanged iff there was no
			previously saved sort context.
			The shadow sort data no longer exists.

CHECKS:         None.

PSEUDO CODE/STRATEGY:
	Get ahold of the previously saved sort context.
	Copy the save sort context into the real sort context.
	Nuke the shadow sort context.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.29        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SHADOW_RESTORE
{
    FFDBSortInfo        *sortInfoPtr;

    /* Get ahold of the shadow sort data.       */
    sortInfoPtr = ObjVarFindData (oself, FFI_VAR_SORT_INFO_SHADOW_DATA);

    /* Does the shadow sort data exist?.        */
    if (sortInfoPtr)
	{
	/* Copy the shadow sort data to the current sort data.  */
	pself = ObjDerefGen (oself);
	pself->FFI_sortInfo = *sortInfoPtr;

	/* Nuke the shadow sort data.   */
	ObjVarDeleteData (oself, FFI_VAR_SORT_INFO_SHADOW_DATA);
	}
}       /* End of MSG_FFD_SORT_INFO_SHADOW_RESTORE.     */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SHADOW_DELETE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Delete the previously saved sort context (if any).

PASS:           Void.

RETURN:         Void.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        The shadow sort data no longer exists.

CHECKS:         None.

PSEUDO CODE/STRATEGY:
	Nuke the shadow sort context.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.29        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SHADOW_DELETE
{
    /* Nuke the shadow sort data.       */
    ObjVarDeleteData (oself, FFI_VAR_SORT_INFO_SHADOW_DATA);
}       /* End of MSG_FFD_SORT_INFO_SHADOW_DELETE.      */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SORT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Sort the database base on the given sort key information.

PASS:           Void.

RETURN:         sbyte   = TRUE iff successfully sorted.
			  FALSE, otherwise.

PSEUDO CODE/STRATEGY:
	Get the horizontal and vertical extents of the database data area.
	Use them to set the invariant part of the SortRangeParams.
	For each sort key
		Set the sort flags to sort by rows and the appropriate sort
		ordering (ascending/descending).
		Set the active column in the selected sort range mapping
		the current sort key to the DATABASE_NAME_LIST list index to
		the FieldID (which is the column value :-).
		Set the selected range to the SortRangeParams.
		Stably sort the spreadsheet on the given range.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.06.01        Initial version.
	JDM     92.08.04        Fix sorting when there's no data.
	JDM     92.08.05        General cleanup.
	JDM     92.12.09        Sort options support.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SORT
{
    word        numRecords;
    byte        curSortField;
    byte        startColumn;
    byte        endColumn;
    byte        oldMaxCol;
    RangeSortFlags      rangeSortFlags;
    SpreadsheetRangeParams      ssRange;

    /* Any records to sort?     */
    numRecords = pself->FFI_totalNumRecordsInDatabase;
    if (!numRecords)
	{
	/* Nope.  Bail, but signal success.     */
	return (TRUE);
	}

    /* Figure out the extent of the record data.        */
    if (! FFDGetFieldColumnExtents (pself, &startColumn, &endColumn))
	{
	/* No fields.   */
	return (FALSE);
	}

    /*
     * Set up the unchanging range paramaters for the sort.
     * Note that the starting and ending columns were set above and that
     * the current/active column is set in the loop below.
     */
    ssRange.SRP_active.CR_row                   = 0;
    ssRange.SRP_selection.CR_start.CR_row       = 0;
    ssRange.SRP_selection.CR_start.CR_column    = 0;
    ssRange.SRP_selection.CR_end.CR_row         = numRecords - 1;
    ssRange.SRP_selection.CR_end.CR_column      = LARGEST_COLUMN;

    /* For each sort key field...       */
    curSortField = pself->FFI_sortInfo.SIS_lastItemIndex + 1;
    oldMaxCol = pself->SSI_maxCol;
    pself->SSI_maxCol = LARGEST_COLUMN;

    while (curSortField--)
	{
	/* Dereference ourself. */
	pself = ObjDerefGen (oself);

	/* Set up the sorting flags.    */
	rangeSortFlags = RSF_SORT_ROWS |
		((SortInfoGetSortDirection (pself, curSortField)) ?
		  RSF_SORT_ASCENDING : 0) |
		((@FFDSO_IGNORE_CASE_AND_ACCENTS &
		  pself->FFI_sortInfo.SIS_sortOptions) ?
		  RSF_IGNORE_CASE : 0) |
		((@FFDSO_IGNORE_SPACES_AND_PUNCTUATION &
		  pself->FFI_sortInfo.SIS_sortOptions) ?
		  RSF_IGNORE_SPACES : 0);

	/* Set the active sort range column (row ignored).      */
	ssRange.SRP_active.CR_column = pself->FFI_sortInfo.SIS_sortKeyList
			[curSortField];

	/* Set the selection range and active column.   */
	@call oself::MSG_SPREADSHEET_SET_SELECTION (&ssRange);

	/* Stably sort the database on this key in the right order.     */
	@call oself::MSG_SPREADSHEET_SORT_RANGE (rangeSortFlags);
    }           /* End of for all sort keys.    */

    /*
     * Reset to the original max.
     */
    pself = ObjDerefGen(oself);
    pself->SSI_maxCol = oldMaxCol;

    /* Signal success.  */
    return (TRUE);
}       /* End of MSG_FFD_SORT_INFO_SORT.       */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_GET_NUM_ITEMS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Provide the caller with the number of items in the
		sort-keys/sub-totals list for the current database.

PASS:           Void.

RETURN:         byte    = Number of items in the list.

PSEUDO CODE/STRATEGY:
	Extract the last key's index and add 1.

CHECKS: Validates that FFI_sortInfo.SIS_lastItemIndex is in [-1,
	MAX_SORT_KEYS_AND_SUB_TOTAL_FIELDS).

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.13        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_GET_NUM_ITEMS
{
#if ERROR_CHECK 
    /* Check for invalid counts.        */
    if ((pself->FFI_sortInfo.SIS_lastItemIndex >=
	 MAX_SORT_KEYS_AND_SUB_TOTAL_FIELDS) ||
	(pself->FFI_sortInfo.SIS_lastItemIndex < -1))
	{
	EC_ERROR (SORT_INFO_INVALID_NUM_KEYS);
	}
#endif

    /* Return the count that's in the FFI_sortInfo instance data.       */
    return (pself->FFI_sortInfo.SIS_lastItemIndex + 1);
}       /* End of MSG_FFD_SORT_INFO_GET_NUM_ITEMS.      */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_ADD_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Add an item to the end of the current database's
		sort-keys/sub-total fields list.

PASS:           word    item    = Index into DATABASE_NAME_LIST list of
				  the item to insert.

RETURN:         byte    = Number of items in the list.

PSEUDO CODE/STRATEGY:
	Increment the index counter.
	Insert the item into the list.

CHECKS:
	Check for list overflow.
	Validate inserted item value (can't be GIGS_NONE, use
	MSG_FFD_SORT_INFO_DELETE_ITEM instead).

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.
	JDM     93.01.03        Use column numbers.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_ADD_ITEM
{
    sword       iTemp;

#if ERROR_CHECK
    /* Check for overflow.      */
    if (pself->FFI_sortInfo.SIS_lastItemIndex >=
	MAX_SORT_KEYS_AND_SUB_TOTAL_FIELDS - 1)
	{
	EC_ERROR (SORT_INFO_LIST_OVERFLOW);
	}

    /* Check for an invalid item number.        */
    if (item == GIGS_NONE)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Get our current sort list index. */
    iTemp = ++(pself->FFI_sortInfo.SIS_lastItemIndex);

    /*
     * Insert the ssheet column number referenced by the given database
     * name list element into the list.
     */
    pself->FFI_sortInfo.SIS_sortKeyList [iTemp] =
		pself->FFI_databaseNameList [item];

    /* Return new item count.   */
    return (++iTemp);
}       /* End of MSG_FFD_SORT_INFO_ADD_ITEM.   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_DELETE_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Remove an item from the sort-keys/sub-total fields list.

PASS:           word    itemIndex       = Index of the item to delete.

RETURN:         byte    = Number of items in the list.

PSEUDO CODE/STRATEGY:
	Delete the requested item.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
	This routine is for the deletion of the given sort information list
	item.  See MSG_FFD_SORT_INFO_NUKE_FIELD if you want to delete an
	item based on references to the ssheet column number.

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.
	JDM     92.12.29        Broke out into SortInfoDeleteItem.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_DELETE_ITEM
{
    /* Go do it.        */
    return (SortInfoDeleteItem (pself, itemIndex));
}       /* End of MSG_FFD_SORT_INFO_DELETE_ITEM.        */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_DELETE_ALL_ITEMS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Delete all of the entries in the sort-keys/sub-total fields
		list. 

PASS:           Void.

RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Reset the sort information context to a pristine state.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
	EC code sets all sort key list data entries to -1.

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.
	JDM     92.08.07        EC resetation of the sort direction flags.
	JDM     93.01.03        Reset sort options and direction flags.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_DELETE_ALL_ITEMS
{
#if ERROR_CHECK
    word        wIndex;

    /* Loop through all of the entries and clear them out.      */
    for (wIndex = 0; wIndex < MAX_SORT_KEYS_AND_SUB_TOTAL_FIELDS; wIndex++)
	{
	pself->FFI_sortInfo.SIS_sortKeyList [wIndex] = -1;
	}
#endif

    /* Reset the sort direction flags.  */
    pself->FFI_sortInfo.SIS_ascentFlags = SIAF_ALL_ASCENDING;

    /* Reset the sort options.  */
    pself->FFI_sortInfo.SIS_sortOptions = @FFDSO_NO_OPTIONS;

    /* Reset the item counter.  */
    pself->FFI_sortInfo.SIS_lastItemIndex = -1;
}       /* End of MSG_FFD_SORT_INFO_DELETE_ALL_ITEMS.   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_ITEM_SEARCH
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Search for the given DATABASE_NAME_LIST item in the sort
		key list.

PASS:           byte    dbIndex         = Index into the DATABASE_NAME_LIST
					  to search for.
		byte    *sortIndex      = If not NULL then set to the sort
					  list index of the item that
					  refers to the given dbIndex.

RETURN:         Boolean = TRUE iff the given dbIndex was found.
			  FALSE otherwise.
SIDE EFFECTS:
	Requires:       ???

	Asserts:        ???

CHECKS:                 None.

PSEUDO CODE/STRATEGY:
	Search for a reference to the given database list index in the sort
	key list.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     93.01.01        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_ITEM_SEARCH
{
    int         iLcv;
    byte        columnNum;

    /* Search for a reference to the given database list index. */
    columnNum = pself->FFI_databaseNameList [dbIndex];
    for (iLcv = 0; iLcv < pself->FFI_sortInfo.SIS_lastItemIndex+1; iLcv++)
	{
	if (columnNum == pself->FFI_sortInfo.SIS_sortKeyList [iLcv])
	    {
	    /* Found match.  Does the caller care?      */
	    if (sortIndex)
		{
		/* Yep.  So let them have it.   */
		*sortIndex = iLcv;
		}

	    /* Signal success.  */
	    return (TRUE);
	    }
	}

    /* Signal failure.  */
    return (FALSE);
}       /* End of MSG_FFD_SORT_INFO_ITEM_SEARCH.        */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_QUERY_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Retrieve the DATABASE_NAME_LIST index corresponding to the
		given index into the sort-keys/sub-total fields list.

PASS:           word    itemIndex       = List element to retrieve.
		sbyte   *sortAscending  = Pointer to boolean variable.
					  Pass NULL if you don't want it.

RETURN:         sword   = -1 iff invalid requested item.
			  Otherwise, index value into DATABASE_NAME_LIST
			  list. 
		*sortAscending  = If not NULL then TRUE iff this field is
				  to be sorted in ascending order,
				  otherwise FALSE.

PSEUDO CODE/STRATEGY:
	Call SortInfoQueryItem to do all of the work.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.
	JDM     92.05.20        Added sort direction information.
	JDM     93.01.01        Made sort direction information optional.
	JDM     93.01.03        Broke out into SortInfoQueryItem.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_QUERY_ITEM
{
    /* Go get it.       */
    return (SortInfoQueryItem (pself, itemIndex, sortAscending));
}       /* End of MSG_FFD_SORT_INFO_QUERY_ITEM. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_LIST_MONIKER_QUERY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Supply the given list with the moniker of the requested
		sort-key/sub-total fields list item.

PASS:           optr    dynList         = Dynamice list to insert into.
		word    itemIndex       = List element to retrieve.

RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Get the DATABASE_NAME_LIST list index from the sort information.
	Get the moniker associated with that database field.
	Retrieve the moniker for the requested item and put it into the
	given dynamic list at the appropriate location.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.
	JDM     93.01.01        Nuked the sort direction indicators.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_LIST_MONIKER_QUERY
{
    word        wIndex;
    sbyte       sortAscending;
    TCHAR        name [MAX_TOTAL_NAME_LENGTH + 4];

    /* Get the DATABASE_NAME_LIST list index for the requested item.    */
    wIndex = SortInfoQueryItem (pself, itemIndex, &sortAscending);

/*
 * The following is being commented out since their currentl is *not*
 * enough time to implement the graphic sort direction indicator.
 *
 * Doug has a document that shows how to do this and there is a pair of
 * icons made for this.
 *
 * Sigh...  JDM
 */
@if 0
    /* Set a sort direction indicator for the field.    */
    if (sortAscending)
	strcpy (name, _TEXT("^ "));
    else
	strcpy (name, _TEXT("v "));
@endif

    /* Get the field name.      */
    (void) @call oself::MSG_FFD_GET_INDEXED_FIELD_NAME (wIndex,
							DATABASE_NAME_LIST,
							name);

    /* Insert the name into the given list at the right place.  */
    @call dynList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT (itemIndex,
							   name);
}       /* End of MSG_FFD_SORT_INFO_LIST_MONIKER_QUERY. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_LIST_REQUEST_NOTES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Supply the given text display with the notes associated
		with the given sort-key/sub-total fields list item.

PASS:           optr    textObj         = Text object to give text to.
		word    itemIndex       = List element to retrieve.

RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Get the DATABASE_NAME_LIST list index from the sort information.
	Retrieve the notes text for the requested item and put it into the
	given text display.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.14        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method  FlatFileDatabaseClass, MSG_FFD_SORT_INFO_LIST_REQUEST_NOTES
{
    word        wIndex;
    sbyte       sortAscending;

    /* Get the DATABASE_NAME_LIST list index for the requested item.    */
    wIndex = SortInfoQueryItem (pself, itemIndex, &sortAscending);

    /*
     * Get the moniker for the requested item and insert it into the given
     * dynamic list.
     */
    @call oself::MSG_FFD_REQUEST_FIELD_NOTES (wIndex,
					      DATABASE_NAME_LIST,
					      textObj);
}       /* End of MSG_FFD_SORT_INFO_LIST_REQUEST_NOTES. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_GET_SORT_DIRECTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Return the sort direction of the given sortKey list entry.

PASS:           word    itemIndex       = Zero-base list entry index.

RETURN:         sbyte   = 0 iff descending sort order.  Otherwise,
			  ascending sort order.

PSEUDO CODE/STRATEGY:
	Call off to SortInfoGetSortDirection to do the work.

CHECKS:         Validate itemIndex.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.20        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method  FlatFileDatabaseClass, MSG_FFD_SORT_INFO_GET_SORT_DIRECTION
{
#if ERROR_CHECK
    /* First, make sure that the given entry is valid.  */
    if (itemIndex > pself->FFI_sortInfo.SIS_lastItemIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Get and return the requested information.        */
    return (SortInfoGetSortDirection (pself, itemIndex));
}       /* End of MSG_FFD_SORT_INFO_GET_SORT_DIRECTION. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SET_SORT_DIRECTION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Set the given entry in the database's sort information to
		have the specified sort ordering.

PASS:           word    itemIndex       = sortKeyList entry to modify.
		sbyte   sortAscending   = 0 iff setting descending sort
					  order. Otherwise, ascending sort.

RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Call off to SortInfoSetSortDirection to do the real work.

CHECKS:         Validate itemIndex.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.20        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method  FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SET_SORT_DIRECTION
{
#if ERROR_CHECK
    /* First, make sure that the given entry is valid.  */
    if (itemIndex > pself->FFI_sortInfo.SIS_lastItemIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Set the given entry's sort direction.    */
    SortInfoSetSortDirection (pself, itemIndex, sortAscending);
}       /* End of MSG_FFD_SORT_INFO_SET_SORT_DIRECTION. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_INCREASE_PRIORITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Increase the relative sort priority of the given
		sort-keys/sub-totals list item.

PASS:           word    itemIndex       = Zero-base list entry index.

RETURN:         Boolean = TRUE iff item was actually moved in the list.
			  FALSE otherwise.

PSEUDO CODE/STRATEGY:
	If item not already highest priority then
		Swap the specified item with next item of higher priority.

REQUIRES:       ???

ASSERTS:        Specified item has ascended one level in sort priority
		(stops at the highest priority).

CHECKS:         Validates the item index.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:       ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.08.07        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_INCREASE_PRIORITY
{
    Boolean     itemDirection;
    word        itemValue;

#if ERROR_CHECK
    /* First, make sure that the given entry is valid.  */
    if (itemIndex > pself->FFI_sortInfo.SIS_lastItemIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Only item (already the highest priority)?        */
    if (0 == itemIndex)
	{
	/* Yep.  Nothing to do so bail. */
	return (FALSE);
	}

    /* Otherwise, get ahold of the item to be moved.    */
    itemDirection = SortInfoGetSortDirection (pself, itemIndex);
    itemValue = pself->FFI_sortInfo.SIS_sortKeyList [itemIndex];

    /*
     * Move the element prior to the specified item into it's new lower
     * priority position.
     */
    SortInfoSetSortDirection (pself,
			      itemIndex,
			      SortInfoGetSortDirection (pself,
							itemIndex - 1));
    pself->FFI_sortInfo.SIS_sortKeyList [itemIndex] =
		pself->FFI_sortInfo.SIS_sortKeyList [itemIndex - 1];

    /* Move the specified item into it's new higher priority spot.      */
    SortInfoSetSortDirection (pself, itemIndex - 1, itemDirection);
    pself->FFI_sortInfo.SIS_sortKeyList [itemIndex - 1] = itemValue;

    /* Signal success.  */
    return (TRUE);
}       /* End of MSG_FFD_SORT_INFO_INCREASE_PRIORITY.  */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_DECREASE_PRIORITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Decrease the relative sort priority of the given
		sort-keys/sub-totals list item.

PASS:           word    itemIndex       = Zero-base list entry index.

RETURN:         Boolean = TRUE iff item was actually moved in the list.
			  FALSE otherwise.

PSEUDO CODE/STRATEGY:
	If the specified item isn't the only item or
	   the specified item isn't already the lowest priority then
		Swap the specified item with the next item of lower
		priority. 

REQUIRES:       ???

ASSERTS:        Specified item has declined one level in sort priorty
		(stops at the lowest priority).

CHECKS:         Validates the item index.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:       ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.08.07        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_DECREASE_PRIORITY
{
    Boolean     itemDirection;
    word        itemValue;

#if ERROR_CHECK
    /* First, make sure that the given entry is valid.  */
    if (itemIndex > pself->FFI_sortInfo.SIS_lastItemIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Only item and/or already the lowest priority?    */
    if ((0 == pself->FFI_sortInfo.SIS_lastItemIndex) ||
	(itemIndex == pself->FFI_sortInfo.SIS_lastItemIndex))
	{
	/* Yep.  Nothing to do so bail. */
	return (FALSE);
	}

    /* Otherwise, get ahold of the item to be moved.    */
    itemDirection = SortInfoGetSortDirection (pself, itemIndex);
    itemValue = pself->FFI_sortInfo.SIS_sortKeyList [itemIndex];

    /*
     * Move the element following the specified item into it's new higher
     * priority position.
     */
    SortInfoSetSortDirection (pself,
			      itemIndex,
			      SortInfoGetSortDirection (pself,
							itemIndex + 1));
    pself->FFI_sortInfo.SIS_sortKeyList [itemIndex] =
		pself->FFI_sortInfo.SIS_sortKeyList [itemIndex + 1];

    /* Move the specified item into it's new lower priority spot.       */
    SortInfoSetSortDirection (pself, itemIndex + 1, itemDirection);
    pself->FFI_sortInfo.SIS_sortKeyList [itemIndex + 1] = itemValue;

    /* Signal success.  */
    return (TRUE);
}       /* End of MSG_FFD_SORT_INFO_DECREASE_PRIORITY.  */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_SET_SORT_OPTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Set the sort options.

PASS:           FFDSortOptions  sortOptions     = Options to set to.

RETURN:         Void.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        ???

CHECKS:         Validate the given sort options.

PSEUDO CODE/STRATEGY:
	Set the sort options.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.09        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_SET_SORT_OPTIONS
{
#ifdef  ERROR_CHECK
    /* Validate the given sort options. */
    if (sortOptions & ~(@FFDSO_ALL_OPTIONS))
	EC_ERROR (SORT_INFO_INVALID_SORT_OPTIONS);
#endif  /* ERROR_CHECK  */

    /* Set the current options to those given.  */
    pself->FFI_sortInfo.SIS_sortOptions = sortOptions;
}       /* End of MSG_FFD_SORT_INFO_SET_SORT_OPTIONS.   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_GET_SORT_OPTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Get the current sort options.

PASS:           Void.

RETURN:         FFDSortOptions  = Current sort options.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        ???

CHECKS:                 None.

PSEUDO CODE/STRATEGY:
	Return the current sort options.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.09        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_GET_SORT_OPTIONS
{
    /* Give 'em what they want. */
    return (pself->FFI_sortInfo.SIS_sortOptions);
}       /* End of MSG_FFD_SORT_INFO_GET_SORT_OPTIONS.   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_SORT_INFO_NUKE_FIELD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Remove all sort information list entries that refer to
		the given field.

PASS:           byte    columnNum               = Field to nuke.

RETURN:         Void.

SIDE EFFECTS:
	Requires:       ???

	Asserts:        ???

CHECKS:                 None.

PSEUDO CODE/STRATEGY:
	Delete all sort items that refer to the given field/column.

KNOWN DEFECTS/CAVEATS/IDEAS:    ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.29        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_SORT_INFO_NUKE_FIELD
{
    int iLcv;

    /* Search for the item index of all fields that refer to the field. */
    iLcv = 0;
    while (iLcv <= pself->FFI_sortInfo.SIS_lastItemIndex)
	{
	/* Does the current item refer to the given field?      */
	if (columnNum == pself->FFI_sortInfo.SIS_sortKeyList [iLcv])
	    {
	    /* Yep.  Nuke it.   */
	    SortInfoDeleteItem (pself, iLcv);
	    }
	else
	    {
	    iLcv++;             /* Next!        */
	    }
	}
}       /* End of MSG_FFD_SORT_INFO_NUKE_FIELD. */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FFDGetFieldColumnExtents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Figure out the first and last column index in the given
		database.

CALLED BY:      External --     MSG_FFD_SORT_INFO_SORT.

PASS:           FlatFileDatabaseInstance *pself = Pointer to the database.
		byte    *startColumn            = First field index (set if
						  successful completion).
						  Null means don't store.
		byte    *endColumn              = Last field index (set if
						  successful completion).
						  Null means don't store.

RETURN:         sbyte   = TRUE iff both extents found.
			  FALSE otherwise.

PSEUDO CODE/STRATEGY:
	Find the first (leftmost, starting) column by walking through the
	columnsTaken bitmap instance data.
	If found the first column then
		Find the last (rightmost, ending) column by walking
		backwards through the columnsTaken bitmap instance data.
		Return succussfully.
	Otherwise,
		Return failure.

CHECKS:         None.

KNOWN DEFECTS/SIDE EFFECTS/IDEAS:
	NOTE:   The column values won't be stored iff the given column
		pointer is NULL (i.e. passing NULL pointers if you're only
		interested in the fact that the database has any columns or
		not is cool).

	Note that the nasty expression in the if statements is just
	checking to see if the appropriate bit is set (it's a bit-arrary
	which is why the right shifting of 0x80 to the right).

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.06.01        Initial version.
	JDM     92.07.16        Updated documentation.
	JDM     92.09.09        More documentation and added support for
				*not* storing the column values.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

sbyte _pascal FFDGetFieldColumnExtents (FlatFileDatabaseInstance *pself,
					byte *startColumn,
					byte *endColumn)
{
    sbyte       extentsFound;
    word        curColumn;

    /* First get the starting extent.   */
    extentsFound = FALSE;
    for (curColumn = 0; curColumn < COLUMNS_TAKEN_ARRAY_SIZE; curColumn++)
	{
	/* Is this column active?       */
	if (pself->FFI_columnsTaken [curColumn / 8] &
	    (0x80 >> (curColumn % 8)))
	    {
	    /* Yep.  Does the caller want this value?   */
	    if (startColumn)
		{
		/* Yep.  Save it.       */
		*startColumn = curColumn;
		}

	    /* Signal success.  */
	    extentsFound = TRUE;
	    break;
	    }
	}

    /* Can only have an end if there was a beginning.   */
    if (extentsFound)
	{
	/*
	 * Get the ending extent.
	 * Note that since we know that there is at least one column we
	 * know that this loop will find an ending column.
	 */
	for (curColumn = COLUMNS_TAKEN_ARRAY_SIZE - 1;
	     curColumn;
	     curColumn--)
	    {
	    /* Is this column active?   */
	    if (pself->FFI_columnsTaken [curColumn / 8] &
		(0x80 >> (curColumn % 8)))
		{
		/* Yep.  Does the caller want this value?       */
		if (endColumn)
		    {
		    /* Yep.  Save it.   */
		    *endColumn = curColumn;
		    }
		break;
		}
	    }           /* End of for.  */

	/* Let the caller know that we were successful. */
	return (TRUE);
	}               /* End of if extentsFound.      */
    else
	{
	/* No extents available.        */
	return (FALSE);
	}
}       /* End of FFDGetFieldColumnExtents().   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SortInfoGetSortDirection
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Retrieve the sort direction defined for the given item in
		the given database's sort information.

CALLED BY:      MSG_FFD_SORT_INFO_GET_SORT_DIRECTION,
		MSG_FFD_SORT_INFO_QUERY_ITEM,
		MSG_FFD_SORT_INFO_SORT,
		MSG_FFD_SORT_INFO_INCREASE_PRIORITY,
		MSG_FFD_SORT_INFO_DECREASE_PRIORITY.

PASS:           FlatFileDatabaseInstance *pself = Current database instance
						  data.
		word    itemIndex       = sortKeyList entry to retrieve.

RETURN:         sbyte   = TRUE iff given item is to be sorted in ascending
			  order.  Otherewise, FALSE.

PSEUDO CODE/STRATEGY:
	Do the bit twiddling to get the sort direction for the given field
	out of the database's ascentFlags.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/IDEAS:
	None.

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.20        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static sbyte _pascal SortInfoGetSortDirection
			(FlatFileDatabaseInstance *pself,
			 word itemIndex)
{
    /* Figure out and return the sort direction for the request entry.  */
    return (pself->FFI_sortInfo.SIS_ascentFlags & (1 << itemIndex));
}       /* End of SortInfoGetSortDirection().   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SortInfoSetSortDirection
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Set the sort order of the given entry in the given database
		to the ascending or descending based on the given direction
		flag.

CALLED BY:      MSG_FFD_SORT_INFO_SET_SORT_DIRECTION.

PASS:           FlatFileDatabaseInstance *pself = Current database instance
						  data.
		word    itemIndex       = sortKeyList entry to retrieve.
		sbyte   sortAscending   = 0 to sort in descending order.
					  Otherwise, ascending sort order.
RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Perform the sick and twisted bit-twiddling necessary to turn the
	appropriate bit on or off in the ascentFlags.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/IDEAS:  ????

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.05.20        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal SortInfoSetSortDirection
			(FlatFileDatabaseInstance *pself,
			 word itemIndex,
			 sbyte sortAscending)
{
    if (sortAscending)
	pself->FFI_sortInfo.SIS_ascentFlags |= (1 << itemIndex);
    else
	pself->FFI_sortInfo.SIS_ascentFlags &= (~(1 << itemIndex));
}       /* End of SortInfoSetSortDirection().   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SortInfoQueryItem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Retrieve the FieldListID into the DATABASE_NAME_LIST
		corresponding to the sort key list index.

CALLED BY:      Internal --
			MSG_FFD_SORT_INFO_QUERY_ITEM,
			MSG_FFD_SORT_INFO_LIST_MONIKER_QUERY,
			MSG_FFD_SORT_INFO_LIST_REQUEST_NOTES.

PASS:           FlatFileDatabaseInstance *pself = Current database instance
						  data.
		word    itemIndex       = sortKeyList entry to retrieve.
		sbyte   *sortAscending  = Pointer to boolean variable.
					  Pass NULL if you don't want it.

RETURN:         FieldListID     = -1 iff invalid requested item.
				  Otherwise, index value into
				  DATABASE_NAME_LIST list. 
		*sortAscending  = If not NULL then TRUE iff this field is
				  to be sorted in ascending order,
				  otherwise FALSE.
SIDE EFFECTS:
	Requires:       ????

	Asserts:        ????

CHECKS:                 ????

PSEUDO CODE/STRATEGY:
	Validate the item request.
	Set the sort direction flag.
	Retrieve the requested item.

KNOWN DEFECTS/CAVEATS/IDEAS:    ????

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     93.01.03        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static FieldListID _pascal SortInfoQueryItem
			(FlatFileDatabaseInstance *pself,
			 word itemIndex,
			 sbyte *sortAscending)
{
    sword       iTemp;

    /* Get the current last item's index.       */
    iTemp = pself->FFI_sortInfo.SIS_lastItemIndex;

    /* Check for an invalid item request.       */
    if (itemIndex > iTemp)
	{
	return (-1);
	}

    /* Does the caller want the sort direction information?     */
    if (sortAscending)
	{
	/* Yep.  Provide the sort direction flag.       */
	*sortAscending = SortInfoGetSortDirection (pself, itemIndex);
	}

    /* Return the little spud.  */
    return (SortInfoFieldIDToDBNameListIndex
		(pself, pself->FFI_sortInfo.SIS_sortKeyList [itemIndex]));
}       /* End of SortInfoQueryItem().  */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SortInfoDeleteItem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Remove an item from the sort-keys/sub-total fields list.

CALLED BY:      Internal --
			MSG_FFD_SORT_INFO_DELETE_ITEM,
			MSG_FFD_SORT_INFO_NUKE_FIELD.

PASS:           FlatFileDatabaseInstance *pself = Current database instance
						  data.
		word    itemIndex       = Index of the item to delete.

RETURN:         byte    = Number of items in the list.

SIDE EFFECTS:
	Requires:       ????

	Asserts:        ????

CHECKS:
	Check for list underflow.
	Validate item index.

PSEUDO CODE/STRATEGY:
	Delete the requested item by iteratively moving the next item in
	the list into the current location.
	Clear out the just vacated entry to a nice, known, pristine state.
	Decrement the list item counter.

KNOWN DEFECTS/CAVEATS/IDEAS:
	EC code sets newly emptied end-of-list entry to -1.

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.12.29        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static byte _pascal SortInfoDeleteItem (FlatFileDatabaseInstance *pself,
					word itemIndex)
{
    sword       lastIndex;
    word        wIndex;

    /* Get the current index.   */
    lastIndex = pself->FFI_sortInfo.SIS_lastItemIndex;

#if     ERROR_CHECK
    /* Check for underflow.     */
    if (lastIndex <= -1)
	{
	EC_ERROR (SORT_INFO_LIST_UNDERFLOW);
	}

    /* Check for an invalid item request.       */
    if (itemIndex > lastIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /*
     * Delete the element from the list by copying each of the elements
     * that follow it 'up' one spot in the list.
     *
     * Note that this doesn't copy squat into the very last position
     * (that's handled below).
     */
    for (wIndex = itemIndex; wIndex < lastIndex; wIndex++)
	{
	/* Move the sort direction info.        */
	SortInfoSetSortDirection
			(pself,
			 wIndex,
			 SortInfoGetSortDirection (pself, wIndex + 1));

	/* Move the item itself.        */
	pself->FFI_sortInfo.SIS_sortKeyList [wIndex] =
			pself->FFI_sortInfo.SIS_sortKeyList [wIndex + 1];
	}

    /* Decrement our item counter.      */
    --(pself->FFI_sortInfo.SIS_lastItemIndex);

#if     ERROR_CHECK
    /* Mark the newly vacated position as empty for easy debugging.     */
    pself->FFI_sortInfo.SIS_sortKeyList [lastIndex] = -1;
#endif

    /* Reset the sort direction for the vacated slot.   */
    SortInfoSetSortDirection (pself, lastIndex, TRUE);

    /* Return updated item count.       */
    return (lastIndex);
}       /* End of SortInfoDeleteItem(). */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		SortInfoFieldIDToDBNameListIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:       Translate the given FieldID value to the DATABASE_NAME_LIST
		list index whose entry corresponds to the given field.

CALLED BY:      Internal --
			MSG_FFD_SORT_INFO_QUERY_ITEM,

PASS:           FlatFileDatabaseInstance *pself = Current database instance
						  data.
		FieldID         fieldID         = The field to translate.

RETURN:         FieldListID = DATABASE_NAME_LIST index iff found.
			      Otherwise, -1.

SIDE EFFECTS:
	Requires:       FFI_numFields is valid.

	Asserts:        ????

CHECKS:                 None.

PSEUDO CODE/STRATEGY:
	Search the FFI_databaseNameList for an entry that corresponds to
	the given FieldID.

KNOWN DEFECTS/CAVEATS/IDEAS:    ????

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     93.01.03        Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static FieldListID _pascal SortInfoFieldIDToDBNameListIndex
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID)
{
    int iLcv;

    /*
     * Search the FFI_databaseNameList for an entry that matches the
     * given FieldID.
     */
    for (iLcv = 0; iLcv < pself->FFI_numFields; iLcv++)
	{
	if (fieldID == pself->FFI_databaseNameList [iLcv])
	    {
	    /* Return the index that corrsponds to the match.   */
	    return (iLcv);
	    }
	}

    return ((FieldListID) -1);
}       /* End of SortInfoFieldIDToDBNameListIndex().   */


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Search Handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_SEARCH
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:    Search the database information for the requested
		information (based on the given search criteria).

PASS:           MemHandle       searchInfo      = Block containing defining
						  SearchReplaceStruct.

RETURN:         Void.

PSEUDO CODE/STRATEGY:
	Commit the currently being edited record (if necessary). 
	Remember the current record and field.
	Go a'searchin'.
	If the new record:field is different than the original then
		Change to the new location.

CHECKS:         None.

KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:  ???

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	JDM     92.06.08        Initial version.
	JDM     92.08.04        Updated for Record Control Panel.
	JDM     93.01.15        Comitting of the current record.
	JDM     93.01.15        Forcing the current record to be on screen.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_SEARCH
{
    word        oldRow, oldCol;
    word        curRow, curCol;
    CellRange   oldSelection;
    word        firstRow, firstCol;
    MemHandle   copiedSearchBlock;
    word        searchBlockSize;
    SearchReplaceStruct *src, *dest;

    /*
     * Since we will possibly be calling the superclass multiple times,
     * and the superclass frees the searchInfo block, we have to copy
     * the block and pass it instead.
     *
     * Get the size of the block we're going to copy.
     */
    searchBlockSize = MemGetInfo(searchInfo, MGIT_SIZE);


    /* Commit the currently being edited record.        */
    if (! @call oself::MSG_FFD_RECORD_CONTROL (FFRCR_COMMIT_CURRENT_RECORD, 0))
	{
	    /* Commit failed.  Abort operation. */
	    MemFree(searchInfo);
	    return;
	}

    /* Save our current position and selection. */
    pself = ObjDerefGen(oself);
    oldRow = pself->SSI_active.CR_row;
    oldCol = pself->SSI_active.CR_column;
    memcpy(&oldSelection, &pself->SSI_selected, sizeof(CellRange));

    /*
     * If we're currently editing a new record, set the active row to
     * the last record in the database.
     */
    if (pself->FFI_editingNewRecord) {
	oldRow = pself->SSI_active.CR_row = 0;
    }

    /*
     * Signal that we haven't found a match yet.
     */
    firstCol = -1;

    /*
     * Loop (just once in show all record mode) until we find
     * a displayable record.
     */
    while (TRUE) {
	/*
	 * Copy the search block.
	 */
	src = (SearchReplaceStruct *) MemLock(searchInfo);
	copiedSearchBlock = MemAlloc(searchBlockSize,
				     HF_SHARABLE | HF_SWAPABLE, HAF_NO_ERR);
	dest = (SearchReplaceStruct *) MemLock(copiedSearchBlock);
	memcpy(dest, src, searchBlockSize);
	MemUnlock(searchInfo);
	MemUnlock(copiedSearchBlock);

	/*
	 * Set the current selection to the active cell.
	 */
	pself = ObjDerefGen(oself);
	pself->SSI_selected.CR_start.CR_row =
	    pself->SSI_selected.CR_end.CR_row = pself->SSI_active.CR_row;
	pself->SSI_selected.CR_start.CR_column =
	    pself->SSI_selected.CR_end.CR_column = pself->SSI_active.CR_column;
	
	/* Find the next instance */
	@callsuper oself::FlatFileDatabaseClass::MSG_SEARCH(copiedSearchBlock);

	pself = ObjDerefGen (oself);

	/* Figure out our new position. */
	curRow = pself->SSI_active.CR_row;
	curCol = pself->SSI_active.CR_column;

	/* Was anything found?  */
	if ((oldRow == curRow) && (oldCol == curCol)) {
	    /*
	     * Nothing found.  Leave.
	     */
	    memcpy(&pself->SSI_selected, &oldSelection, sizeof(CellRange));
	    break;
	} else {
	    /*
	     * Found something.  If we're in show only marked record mode,
	     * see if it's a marked record.
	     */
	    if (!pself->FFI_showOnlyMarked) {
		/*
		 * We're in show all records.  Display the darned thing.
		 */
		memcpy(&pself->SSI_selected, &oldSelection, sizeof(CellRange));
		@call oself::MSG_FFD_RECORD_CONTROL (FFRCR_GOTO_RECORD, curRow);
		FFDFieldGrabTargetAndForceOnScreen(oself, curCol);
		break;
	    }

	    /*
	     * We got this far, so we're in show only marked record mode.
	     * Make sure this is a marked record.  If it's not, find the
	     * next instance.
	     *
	     * Also, we've got to remember the first one we found, so we
	     * don't loop forever.
	     */
	    if (firstCol == -1) {
		firstCol = curCol;
		firstRow = curRow;
	    } else {
		/*
		 * Have we looped around?  If so, there are no marked
		 * records that match.  Tell the user so.
		 */
		if ((firstCol == curCol) && (firstRow == curRow)) {
		    pself->SSI_active.CR_row = oldRow;
		    pself->SSI_active.CR_column = oldCol;
		    memcpy(&pself->SSI_selected, &oldSelection,
			   sizeof(CellRange));

		    MemLock(OptrToHandle(@FFDFailedSearchInShowOnlyMarked));
	    
		    (void) UserStandardDialog(
			(TCHAR *)0,
			/* not GIT_MULTIPLE_RESPONSE, so no custom triggers  */
			(TCHAR *)0,
			/* No string args. */
			(TCHAR *)0, (TCHAR *)0, 
			/* dialog string */
			LMemDeref(@FFDFailedSearchInShowOnlyMarked),
			/* dialog type */
			(CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			/* interaction type */
			(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET));

		    /* Release the warning string */
		    MemUnlock(OptrToHandle(@FFDFailedSearchInShowOnlyMarked));
		    break;
		}
	    }

	    /*
	     * Ok, is this a marked record?
	     */
	    if (FFDGetRecordMarkStatus(pself, curRow)) {
		/*
		 * Found the darned thing!  Display it.
		 */
		curRow = FFDDetermineMarkedPosition(oself, curRow) - 1;
		memcpy(&pself->SSI_selected, &oldSelection, sizeof(CellRange));
		@call oself::MSG_FFD_RECORD_CONTROL(FFRCR_GOTO_RECORD, curRow);
		FFDFieldGrabTargetAndForceOnScreen(oself, curCol);
		break;
	    }
	}
    }

    MemFree(searchInfo);
}
