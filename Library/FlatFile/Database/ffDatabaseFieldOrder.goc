/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		FlatFile/Database
FILE:		ffDatabaseFieldOrder.goc

AUTHOR:		John D. Mitchell

METHODS:

Name				Description
----				-----------
MSG_FFD_FNO_INFO_SHADOW_SAVE	Save the current field navigation order
				information.

MSG_FFD_FNO_INFO_SHADOW_RESTORE	Restore the previously save field
				navigation order information.

MSG_FFD_FNO_INFO_SHADOW_DELETE	Get rid of the previously save field
				navigation order information.

MSG_FFD_FNO_INFO_GEN_NUM_ITEMS	Get the count of items in the current
				layout's field order information list.

MSG_FFD_FNO_INFO_ADD_ITEM	Append a new item to the end of the field
				order information list.

MSG_FFD_FNO_INFO_DELETE_ITEM	Remove an item from the field order
				information list.

MSG_FFD_FNO_INFO_DELETE_ALL_ITEMS	Delete all items from the field
				order information list.

MSG_FFD_FNO_INFO_QUERY_ITEM	Get the FieldID value associated with the
				given field order information list item.

MSG_FFD_FNO_INFO_LIST_MONIKER_QUERY	Supply the given dynamic list with
				the moniker representing the given field
				order information list item.

MSG_FFD_FNO_INFO_GET_FIELD	Retrieve the field in the database that
				closest to the given field (according to
				the search criteria mandated by the given
				field order movement command) that is in
				the current layout.

MSG_FFD_FNO_INFO_GET_NEXT_FIELD	Get the FieldID of the field that logically
				follows then given field order information
				list item.

MSG_FFD_FNO_INFO_INCREASE_PRIORITY	Increase the relative list priority
				of the given field order information list
				item (i.e. move it 'up' in the list).

MSG_FFD_FNO_INFO_DECREASE_PRIORITY	Decrease the relative list priority
				of the given field information list item
				(i.e. move it 'down' in the list).

MSG_FFD_FNO_INFO_NUKE_FIELD	Delete all items that refer to the given
				database field.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.28	Initial version.

DESCRIPTION:
	This file contains the implementation of the Field Navigation Order
	(FNO) functionality for the FlatFile Database Library.

	$Id: ffDatabaseFieldOrder.goc,v 1.1 97/04/04 18:02:57 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Code Resource
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifdef __HIGHC__
pragma Code ("DATABASEFIELDORDER");
#endif
#ifdef __BORLANDC__
#pragma codeseg DATABASEFIELDORDER
#endif
#ifdef __WATCOMC__
#pragma code_seg("DATABASEFIELDORDER")
#endif


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Include Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>			/* PC/GEOS.	*/
#include <system.h>
#include <geoworks.h>
#include <math.h>
#include <parse.h>
@include <ssheet.goh>

@include <ffile.goh>			/* FlatFile.	*/
@include <Objects/FlatFile/ffileC.goh>
#include <ffFatal.h>
#include <Database/ffdExtrn.h>

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Internal Function Prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static FieldListID _pascal FieldOrderInfoQueryItem
			(FlatFileDatabaseInstance *pself,
			 word itemIndex);

static byte _pascal FieldOrderInfoDeleteItem
			(FlatFileDatabaseInstance *pself,
			 byte fieldID);

static FieldListID _pascal FieldOrderInfoFieldIDToDBNameListIndex
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID);

static sword _pascal FieldOrderInfoGetField
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID,
			 FieldOrderMovementCommand movementCmd);


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Message Handlers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_SHADOW_SAVE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Save the current field navigation order context to the
		shadow copy.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	Current field navigation order context is save in
			the FFI_VAR_FNO_INFO_SHADOW_DATA vardata field.

CHECKS:		Validates the non-existence of any shadow copy prior to use.

PSEUDO CODE/STRATEGY:
	Create the shadow field navigation order data area.
	Copy the current field navigation order context to the shadow copy.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.12.29	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_SHADOW_SAVE
{
    FFDBFieldNavigationOrderInfo	*fnoInfoPtr;

#if	0
    /* This is not valid - if the file is autosaved while the shadow data
       exists, then the user detaches or exits to DOS, the shadow data will
       exist in the file still, and cause death forever after */
    /* Does the shadow field navigation order data already exist?.	*/
    fnoInfoPtr = ObjVarFindData (oself, FFI_VAR_FNO_INFO_SHADOW_DATA);
    if (fnoInfoPtr)
	{
	/* Yep. Sigh...  Didn't clean up after ourselves somewhere.	*/
	EC_ERROR (FNO_INFO_SHADOW_DATA_SHOULD_NOT_EXIST_BUT_IT_DOES);
	}
#endif	/* ERROR_CHECK	*/

    /* Create the shadow field navigation order data.	*/
    fnoInfoPtr = ObjVarAddData (oself,
				FFI_VAR_FNO_INFO_SHADOW_DATA,
				sizeof (FFDBFieldNavigationOrderInfo));

    /* Save the current context into the shadow copy.	*/
    pself = ObjDerefGen (oself);
    *fnoInfoPtr = pself->FFI_fieldOrderInfo;
}	/* End of MSG_FFD_FNO_INFO_SHADOW_SAVE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_SHADOW_RESTORE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Overwrite the current field navigation order context (if
		any) with the previously saved field navigation order
		context.

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	The current field navigation order context is the
			same as was in the shadow field navigation order
			data or is unchanged iff there was no previously
			save field order context.
			The shadow field navigation order data no longer
			exists.

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Get ahold of the previously saved field navigation order context.
	Copy the save field navigation order context into the real field
	navigation order context.
	Nuke the shadow field navigation order context.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.12.29	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_SHADOW_RESTORE
{
    FFDBFieldNavigationOrderInfo	*fnoInfoPtr;

    /* Get ahold of the shadow field navigation order data.	*/
    fnoInfoPtr = ObjVarFindData (oself, FFI_VAR_FNO_INFO_SHADOW_DATA);

    /* Does the shadow field navigation order data already exist?.	*/
    if (fnoInfoPtr)
	{
	/*
	 * Copy the shadow field navigation order data to the current
	 * field navigation order data.
	 */
	pself = ObjDerefGen (oself);
	pself->FFI_fieldOrderInfo = *fnoInfoPtr;

	/* Nuke the shadow field navigation order data.	*/
	ObjVarDeleteData (oself, FFI_VAR_FNO_INFO_SHADOW_DATA);
	}
}	/* End of MSG_FFD_FNO_INFO_SHADOW_RESTORE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_SHADOW_DELETE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Delete the previously saved field navigation order
		context (if any). 

PASS: 		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	The shadow field navigation order data no longer
			exists. 

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Nuke the shadow field navigation order context.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.12.29	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_SHADOW_DELETE
{
    /* Nuke the shadow field navigation order data.	*/
    ObjVarDeleteData (oself, FFI_VAR_FNO_INFO_SHADOW_DATA);
}	/* End of MSG_FFD_FNO_INFO_SHADOW_DELETE.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_GET_NUM_ITEMS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Provide the count of items in the Field Navigation Order
		information list for the current layout in the current
		database.

PASS: 		Void.

RETURN:		sword	= Number of items in the list.

PSEUDO CODE/STRATEGY:
	Return the count of elements in the field navigation order list.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_GET_NUM_ITEMS
{
    /* Return the count of items in the current list.	*/
    return (pself->FFI_fieldOrderInfo.FNOI_lastItemIndex + 1);
}	/* End of MSG_FFD_FNO_INFO_GET_NUM_ITEMS.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_ADD_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Add an item to the end of the current database's
		field navigation order list.

PASS: 		FieldID fieldID		= Column number of the item to
					  insert.

RETURN:		sword	= Number of items in the list.

PSEUDO CODE/STRATEGY:
	If the given field isn't already in the list then
		Increment the index counter.
		Insert the item into the list.

REQUIRES:	???

ASSERTS:	???

CHECKS:
	Validate inserted item value (can't be GIGS_NONE, use
	MSG_FFD_FNO_INFO_DELETE_ITEM instead).

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.
	JDM	93.01.04	Tweaked EC code.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_ADD_ITEM
{
    word	numItems;
    word	wIndex;

#if ERROR_CHECK
    /* Check for overflow.	*/
    if (MAX_NUM_FIELDS <= pself->FFI_fieldOrderInfo.FNOI_lastItemIndex)
	{
	EC_ERROR (FNO_INFO_LIST_OVERFLOW);
	}

    /* Check for an invalid item number.	*/
    if (((FieldID) GIGS_NONE == fieldID) ||
	(fieldID >= pself->FFI_numFields))
	{
	EC_ERROR (FNO_INFO_INVALID_ITEM);
	}
#endif

    /* Is the given field already in the list?	*/
    numItems = ++(pself->FFI_fieldOrderInfo.FNOI_lastItemIndex);
    for (wIndex = 0; wIndex < numItems; wIndex++)
	{
	if (fieldID ==
		pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [wIndex])
	    {
	    return (numItems);		/* Can't have duplicates.	*/
	    }
	}

    /* Insert the element into the list.	*/
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [numItems++] = fieldID;

    /* Return new item count.	*/
    return (numItems);
}	/* End of MSG_FFD_FNO_INFO_ADD_ITEM.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_DELETE_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Remove an item from the field navigation order list.

PASS: 		word	itemIndex	= Field order list item index to
					  remove.

RETURN:		sword	= Number of items in the list.

PSEUDO CODE/STRATEGY:
	Delete the requested item.

REQUIRES:	???

ASSERTS:	???

CHECKS:		Validates the given item index.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.
	JDM	93.01.04	Real cancel support.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_DELETE_ITEM
{
    sword	lastIndex;

    /* Check for shmoe-dom.	*/
    lastIndex = pself->FFI_fieldOrderInfo.FNOI_lastItemIndex;
    if (itemIndex > lastIndex)
	{
	/* Invalid list index.  Just return the count of items.	*/
	return (++lastIndex);
	}

    /* Delete the requested item.	*/
    return (FieldOrderInfoDeleteItem
		(pself,
		 pself->FFI_fieldOrderInfo.FNOI_fieldOrderList[itemIndex]));
}	/* End of MSG_FFD_FNO_INFO_DELETE_ITEM.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_DELETE_ALL_ITEMS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Delete all of the entries in the sort-keys/sub-total fields
		list. 

PASS: 		Void.

RETURN:		Void.

PSEUDO CODE/STRATEGY:
	Reset the item counter/index.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:
	EC code sets all data entries to -1.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_DELETE_ALL_ITEMS
{
#if ERROR_CHECK
    word	wIndex;

    /* Loop through all of the entries and clear them out.	*/
    for (wIndex = 0;
	 wIndex <= pself->FFI_fieldOrderInfo.FNOI_lastItemIndex;
	 wIndex++)
	{
	pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [wIndex] = -1;
	}
#endif

    /* Reset the item counter.	*/
    pself->FFI_fieldOrderInfo.FNOI_lastItemIndex = -1;
}	/* End of MSG_FFD_FNO_INFO_DELETE_ALL_ITEMS.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_QUERY_ITEM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Retrieve the FieldID value stored in the field navigation
		order list at the given index. 

PASS: 		word	itemIndex	= List element to retrieve.

RETURN:		sword	= -1 iff invalid requested item.
			  Otherwise, index value into DATABASE_NAME_LIST
			  list. 

PSEUDO CODE/STRATEGY:
	Retrieve the requested item.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_QUERY_ITEM
{
    /* Go get it.	*/
    return (FieldOrderInfoQueryItem (pself, itemIndex));
}	/* End of MSG_FFD_FNO_INFO_QUERY_ITEM.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_LIST_MONIKER_QUERY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Supply the given list with the moniker of the requested
		field navigation order list item.

PASS: 		optr	dynList		= Dynamic list to insert into.
		word	itemIndex	= List element to retrieve.

RETURN:		Void.

PSEUDO CODE/STRATEGY:
 	Get the FieldID of the given item from the field navgivation order
	list.
	Get the field's name from the whole database name list.
	Set the moniker of the given dynamic list to the field name.

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_LIST_MONIKER_QUERY
{
    word	wIndex;
    TCHAR	name [MAX_TOTAL_NAME_LENGTH];

    /* Get the DATABASE_NAME_LIST list index for the given item.	*/
    wIndex = FieldOrderInfoQueryItem (pself, itemIndex);

    /* Get the field name.	*/
    @call oself::MSG_FFD_GET_INDEXED_FIELD_NAME (wIndex,
						 DATABASE_NAME_LIST,
						 name);

    /* Insert the name into the given list at the right place.	*/
    @call dynList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT (itemIndex, name);
}	/* End of MSG_FFD_FNO_INFO_LIST_MONIKER_QUERY.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_GET_FIELD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Get the field in the database closest to the given field
		(according to the field navigation order movment command)
		that is in the current layout and fulfills the current
		record marking criteria (if any) based on the currently
		defined field navigation ordering.

PASS: 		FieldID	fieldID		= The field from which to start the
					  start the field movement (i.e.,
					  the 'current' field).
		FieldOrderMovementCommand	movementCmd
					= What information to get...
					  FOMC_FIRST_FIELD,
					  FOMC_PREVIOUS_FIELD,
					  FOMC_NEXT_FIELD,
					  FOMC_LAST_FIELD.

RETURN:		sword	= FieldID of the closest field (in the appropriate
			  direction) that fits all of the search criteria.
			  Otherwise, -1 iff error.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Pass off all of the work to FieldOrderInfoGetField.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.05	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_GET_FIELD
{
    /* Go get it.	*/
    return (FieldOrderInfoGetField (pself, fieldID, movementCmd));
}	/* End of MSG_FFD_FNO_INFO_GET_FIELD.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_GET_NEXT_FIELD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Figure out the field that precedes/follows the given
		field in the field navigation order list with respect to
		the current layout and any record marking.

PASS:		FieldID	fieldID		= 'Current' field.
		Boolean	forwardFlag	= FALSE iff requesting the field
					  which precedes the given field.
					  Otherwise (TRUE) requesting the
					  field following the given field.

RETURN:		sword	= FieldID of the field that logically
			  precedes/follows the given field.
			  Otherwise, -1 on error.

PSEUDO CODE/STRATEGY:
	Go find the requested information (see FieldOrderInfoGetField).

REQUIRES:	???

ASSERTS:	???

CHECKS:		None.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.12	Initial version.
	jdashe	12/16/92    	Added search for previous field.
	JDM	93.01.04	Broke out into FieldOrderInfoGetField.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_GET_NEXT_FIELD
{
    /* Go get the requested information.	*/
    return (FieldOrderInfoGetField
		(pself,
		 fieldID,
		 (forwardFlag) ? FOMC_NEXT_FIELD : FOMC_PREVIOUS_FIELD));
}	/* End of MSG_FFD_FNO_INFO_GET_NEXT_FIELD.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_INCREASE_PRIORITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Increase the relative ordering priority of the given field
		navigation order list item (i.e. move the item 'up' in the
		list). 

PASS: 		word	itemIndex	= Zero-base list entry index.

RETURN:		Boolean	= TRUE iff item was actually moved in the list.
			  FALSE otherwise.

PSEUDO CODE/STRATEGY:
	If item not already highest priority then
		Swap the specified item with next item of higher priority.

REQUIRES:	???

ASSERTS:	Specified item has ascended one level in navigation
		ordering priority (stops at the highest priority).

CHECKS:		Validates the item index.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_INCREASE_PRIORITY
{
    word	itemValue;

#if ERROR_CHECK
    /* First, make sure that the given entry is valid.	*/
    if (itemIndex > pself->FFI_fieldOrderInfo.FNOI_lastItemIndex)
	{
	EC_ERROR (SORT_INFO_INVALID_ITEM);
	}
#endif

    /* Only item (already the highest priority)?	*/
    if (0 == itemIndex)
	{
	/* Yep.  Nothing to do so bail.	*/
	return (FALSE);
	}

    /* Otherwise, get ahold of the item to be moved.	*/
    itemValue = pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex];

    /*
     * Move the element prior to the specified item into it's new lower
     * priority position.
     */
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex] =
	pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex - 1];

    /* Move the specified item into it's new higher priority spot.	*/
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex-1] = itemValue;

    /* update map control */
    CreateDataBlockAndSendNotification(oself);

    /* Signal success.	*/
    return (TRUE);
}	/* End of MSG_FFD_FNO_INFO_INCREASE_PRIORITY.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_DECREASE_PRIORITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Decrease the relative ordering priority of the given
		field navigation order list item.

PASS: 		word	itemIndex	= Zero-base list entry index.

RETURN:		Boolean	= TRUE iff item was actually moved in the list.
			  FALSE otherwise.

PSEUDO CODE/STRATEGY:
	If the specified item isn't the only item or
	   the specified item isn't already the lowest priority then
		Swap the specified item with the next item of lower
		priority. 

REQUIRES:	???

ASSERTS:	Specified item has declined one level in navigation
		ordering priorty (stops at the lowest priority).

CHECKS:		Validates the item index.

KNOWN DEFECTS/SIDE EFFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.08.11	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_DECREASE_PRIORITY
{
    word	itemValue;

#if ERROR_CHECK
    /* First, make sure that the given entry is valid.	*/
    if (itemIndex > pself->FFI_fieldOrderInfo.FNOI_lastItemIndex)
	{
	EC_ERROR (FNO_INFO_INVALID_ITEM);
	}
#endif

    /* Only item and/or already the lowest priority?	*/
    if ((0 == pself->FFI_fieldOrderInfo.FNOI_lastItemIndex) ||
	(itemIndex == pself->FFI_fieldOrderInfo.FNOI_lastItemIndex))
	{
	/* Yep.  Nothing to do so bail.	*/
	return (FALSE);
	}

    /* Otherwise, get ahold of the item to be moved.	*/
    itemValue = pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex];

    /*
     * Move the element prior to the specified item into it's new higher
     * priority position.
     */
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex] =
	pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex + 1];

    /* Move the specified item into it's new lower priority spot.	*/
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [itemIndex+1] = itemValue;

    /* update map control */
    CreateDataBlockAndSendNotification(oself);

    /* Signal success.	*/
    return (TRUE);
}	/* End of MSG_FFD_FNO_INFO_DECREASE_PRIORITY.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_FFD_FNO_INFO_NUKE_FIELD
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Remove all list entries that refer to the given field.

PASS: 		FieldID		fieldID		= Field to nuke.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Delete all items that refer to the given field/column.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.12.29	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method FlatFileDatabaseClass, MSG_FFD_FNO_INFO_NUKE_FIELD
{
    /* Go delete the thing.	*/
    FieldOrderInfoDeleteItem (pself, fieldID);
}	/* End of MSG_FFD_FNO_INFO_NUKE_FIELD.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FieldOrderInfoQueryItem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Retrieve the FieldListID into the DATABASE_NAME_LIST
		corresponding to the field navigation order list index.

CALLED BY:	Internal --
			MSG_FFD_FNO_INFO_QUERY_ITEM,
			MSG_FFD_FNO_INFO_LIST_MONIKER_QUERY.

PASS:		FlatFileDatabaseInstance *pself	= Current database instance
						  data.
		word	itemIndex	= fieldOrderInfo entry to retrieve.

RETURN:		FieldListID	= -1 iff invalid requested item.
				  Otherwise, index value into
				  DATABASE_NAME_LIST list. 

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:			????

PSEUDO CODE/STRATEGY:
	Validate the item request.
	Retrieve the requested item.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.03	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static FieldListID _pascal FieldOrderInfoQueryItem
			(FlatFileDatabaseInstance *pself,
			 word itemIndex)
{
    word	lastItemIndex;

    /* Get the index of the (currently) last item.	*/
    lastItemIndex = pself->FFI_fieldOrderInfo.FNOI_lastItemIndex;

    /* Check for an invalid item request.	*/
    if (itemIndex > lastItemIndex)
	{
	return (-1);
	}

    /* Return that little spud.	*/
    return (FieldOrderInfoFieldIDToDBNameListIndex
		(pself,
		 pself->FFI_fieldOrderInfo.FNOI_fieldOrderList[itemIndex]));
}	/* End of FieldOrderInfoQueryItem().	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FieldOrderInfoDeleteItem
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Remove the requested item from the field navigation order
		information.

CALLED BY:	Internal --
			MSG_FFD_FNO_INFO_DELETE_ITEM,
			MSG_FFD_FNO_INFO_NUKE_FIELD.

PASS:		FieldID	fieldID		= Field/column to delete.

RETURN:		sword	= Number of items in the list.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:		Check for list underflow.

PSEUDO CODE/STRATEGY:
	Find the list position containing the given FieldID.
	Delete the requested item by iteratively moving the next item in
	the list into the current location (except for the last, of course,
	wherein nothing need be done).
	Decrement the list item counter.

KNOWN DEFECTS/CAVEATS/IDEAS:
	EC code sets newly emptied end-of-list entry to -1.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.12.30	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static byte _pascal FieldOrderInfoDeleteItem
			(FlatFileDatabaseInstance *pself,
			 byte fieldID)
{
    sword	lastItemIndex;
    word	wIndex;

    /* Get the current index.	*/
    lastItemIndex = pself->FFI_fieldOrderInfo.FNOI_lastItemIndex;

#if ERROR_CHECK
    /* Check for underflow.	*/
    if (-1 >= lastItemIndex)
	{
	EC_ERROR (FNO_INFO_LIST_UNDERFLOW);
	}
#endif

    /* Figure out where the given field is in the list.	*/
    for (wIndex = 0; wIndex <= lastItemIndex; wIndex++)
	{
	if (fieldID ==
		pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [wIndex])
	    {
	    break;			/* Found it!	*/
	    }
	}

    /* Was it in the list?	*/
    if (wIndex == lastItemIndex + 1)
	{
	/* Nope.  Bail.	*/
	return (lastItemIndex);
	}

    /*
     * Otherwise, delete the element from the list.
     * Note that wIndex is already initialized from above.
     */
    for ( ; wIndex < lastItemIndex; wIndex++)
	{
	pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [wIndex] =
		pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [wIndex + 1];
	}

    /* Decrement our item counter.	*/
    --(pself->FFI_fieldOrderInfo.FNOI_lastItemIndex);

#if ERROR_CHECK
    /* Mark the newly vacated position as empty for easy debugging.	*/
    pself->FFI_fieldOrderInfo.FNOI_fieldOrderList [lastItemIndex] = -1;
#endif

    /* Return updated item count.	*/
    return (lastItemIndex);
}	/* End of FieldOrderInfoDeleteItem().	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FieldOrderInfoFieldIDToDBNameListIndex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Translate the given FieldID value to the DATABASE_NAME_LIST
		list index whose entry corresponds to the given field.

CALLED BY:	Internal --
			MSG_FFD_SORT_INFO_QUERY_ITEM,

PASS:		FlatFileDatabaseInstance *pself	= Current database instance
						  data.
		FieldID		fieldID		= The field to translate.

RETURN:		FieldListID = DATABASE_NAME_LIST index iff found.
			      Otherwise, -1.

SIDE EFFECTS:
	Requires:	FFI_numFields is valid.

	Asserts:	????

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Search the FFI_databaseNameList for an entry that corresponds to
	the given FieldID.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.03	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static FieldListID _pascal FieldOrderInfoFieldIDToDBNameListIndex
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID)
{
    int	iLcv;

    /*
     * Search the FFI_databaseNameList for an entry that matches the
     * given FieldID.
     */
    for (iLcv = 0; iLcv < pself->FFI_numFields; iLcv++)
	{
	if (fieldID == pself->FFI_databaseNameList [iLcv])
	    {
	    /* Return the index that corrsponds to the match.	*/
	    return (iLcv);
	    }
	}

    return ((FieldListID) -1);
}	/* End of FieldOrderInfoFieldIDToDBNameListIndex().	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		FieldOrderInfoGetField
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Get the database field closest to the given field that
		is in the current layout based on the given movement
		command.

CALLED BY:	Internal --
			MSG_FFD_FNO_INFO_GET_FIELD,
			MSG_FFD_FNO_INFO_GET_NEXT_FIELD.

PASS:		FlatFileDatabaseInstance	*pself	= Current database.
		FieldID	fieldID		= 'Current' field.
		FieldOrderMovementCommand	movementCmd
					= What type of 'movement' is
					  desired.  One of:
					  FOMC_FIRST_FIELD,
					  FOMC_PREVIOUS_FIELD,
					  FOMC_NEXT_FIELD,
					  FOMC_LAST_FIELD.

RETURN:		sword	= FieldID of the closest field (in the appropriate
			  direction) that fits all of the search criteria.
			  Otherwise, -1 iff error.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:		None.

PSEUDO CODE/STRATEGY:
	Locate the field navigation order list index of which corresponds
	to the given field.
	If searching for the FMOC_FIRST_FIELD then
		Search in the forward direction, starting at the current
		field.
	If searching for the FMOC_PREVIOUS_FIELD then
		Search in the reverse direction, starting at the field
		immediately preceding the current field.
	If searching for the FMOC_NEXT_FIELD then
		Search in the forward direction, starting at the field
		immediately following the current field.
	If searching for the FMOC_LAST_FIELD then
		Search in the reverse direction, starting at the current
		field.
	A successful match is achieved when the field that is currently
	being examined is a member of the current layout.

KNOWN DEFECTS/CAVEATS/IDEAS:
	Note that this routine may return the 'current' field's ID since
	this could be the only field that is in the current subset (if any)
	and in the current layout *even if you specify the PREVIOUS/NEXT
	movement commands*!

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	93.01.05	Initial version.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static sword _pascal FieldOrderInfoGetField
			(FlatFileDatabaseInstance *pself,
			 FieldID fieldID,
			 FieldOrderMovementCommand movementCmd)
{
    int		iLcv;
    word	maxIndex;
    word	curItemIndex;
    Boolean	done;
    Boolean	stepForward;
    Boolean	skipInitialStep;

    /* Figure out the position of the given field.	*/
    maxIndex = pself->FFI_fieldOrderInfo.FNOI_lastItemIndex;
    for (curItemIndex = 0; curItemIndex <= maxIndex; curItemIndex++)
	{
	/* Are we there yet?	*/
	if (fieldID == pself->FFI_fieldOrderInfo.FNOI_fieldOrderList
			[curItemIndex])
	    {
	    break;			/* We found it!	*/
	    }
	}

    /* Did we find it?	*/
    if ((maxIndex + 1) == curItemIndex)
	{
	/* Nope.  Return error.	*/
	return (-1);
	}

    /*
     * Figure out what searching methods to use.
     * Partake of the verbosity of the header for enlightenment.
     */
    switch (movementCmd)
	{
	case FOMC_FIRST_FIELD:	
		{
		stepForward = TRUE;
		skipInitialStep = TRUE;
		break;
		}
	case FOMC_PREVIOUS_FIELD:
		{
		stepForward = FALSE;
		skipInitialStep = FALSE;
		break;
		}
	case FOMC_NEXT_FIELD:
		{
		stepForward = TRUE;
		skipInitialStep = FALSE;
		break;
		}
	case FOMC_LAST_FIELD:
		{
		stepForward = FALSE;
		skipInitialStep = TRUE;
		break;
		}
	default:
		{
		/* Ack!  Fail miserably.	*/
		return (-1);
		}
	}	/* End of switch movementCmd.	*/

    /*
     * We found the specified field in the list.
     * Find the previous/next field that fits all of the criteria.
     */
    for (iLcv = 0, done = FALSE; iLcv <= maxIndex; iLcv++)
	{
	/* Skip the first increment step?	*/
	if (skipInitialStep)
	    {
	    skipInitialStep = FALSE;
	    }
	/* Otherwise, get the nominal previous/next field.	*/
	else if (stepForward)
	    {
	    curItemIndex = ((curItemIndex == maxIndex) ?
			0 : (curItemIndex + 1));
	    }
	else
	    {
	    curItemIndex = ((curItemIndex == 0) ?
			maxIndex : (curItemIndex - 1));
	    }

	/* Is this field in the current layout?	*/
	if ((FieldListID) -1 != FindFieldListElement
			(pself->FFI_layoutNameList,
			 pself->FFI_fieldOrderInfo.FNOI_fieldOrderList
					[curItemIndex],
			 pself->FFI_numInLayoutNameList))
	    {
	    done = TRUE;
	    break;
	    }
	}	/* End of for all field order list entries.	*/

    /* Return the field's FieldID.	*/
    if (done)
	{
	return (pself->FFI_fieldOrderInfo.FNOI_fieldOrderList
			[curItemIndex]);
	}
    else	/* Not found!	*/
	{
	return (-1);
	}
}	/* End of FieldOrderInfoGetField().	*/
