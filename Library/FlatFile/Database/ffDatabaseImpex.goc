/***********************************************************************
 *
 *	Copyright (c) Geoworks 1992 -- All Rights Reserved
 *
 * PROJECT:	  FlatFile Library
 * MODULE:	  Database
 * FILE:	  ffDatabaseImpex.goc
 *
 * AUTHOR:  	  Ted Kim : Aug  6, 1992
 *
 * ROUTINES:
 *	Name				Description
 *	----				-----------
 *
 * REVISION HISTORY:
 *	Date		Name		Description
 *	----		----		-----------
 *	8/6/92		ted		Initial version
 *
 * DESCRIPTION:
 *	This file contains code and handlers for import and export of
 *	database files.
 *
 * RCS STAMP:
 *	$Id: ffDatabaseImpex.goc,v 1.1 97/04/04 18:03:06 newdeal Exp $
 *
 ***********************************************************************/

#ifdef __HIGHC__
pragma Code ("DATABASEIMPEX");
#endif
#ifdef __BORLANDC__
#pragma codeseg DATABASEIMPEX
#endif
#ifdef __WATCOMC__
#pragma code_seg("DATABASEIMPEX")
#endif

@include <stdapp.goh>
#include <system.h>

#include <Ansi/string.h>
#include <Ansi/ctype.h>

#include <geoworks.h>
#include <ssmeta.h>
@include <ffile.goh>
@include <Objects/FlatFile/ffileC.goh>
#include <ffFatal.h>

/*************************************************************************
	External Declarations
 *************************************************************************/

@extern chunk @FFExportFileEmptyString;
@extern chunk @FFImportFileTooManyFields;
@extern chunk @FFImportFileTooManyRecords;
@extern chunk @FFImportFileCellTypeError;
@extern chunk @FFImportFileFieldTooLong;
@extern chunk @FFMemoryFullErrorOnImport;
#include <extern.h>
#include <Database/ffdExtrn.h>

/*************************************************************************
	Forward Declarations
*************************************************************************/

void ExportGetFieldType(FlatFileDatabaseInstance *pself,
			optr oself,
		        FieldDataType *typeArray);
void ExportGetFieldDisplayType(FlatFileDatabaseInstance *pself,
			optr oself,
		        FormatIdType *displayArray);
void ExportFlatFile(SSMetaStruc *ssmStruc, 
		    FlatFileDatabaseInstance *pself,
		    optr oself, word begRecord, word endRecord,
		    FieldDataType *typeArray,
		    FormatIdType *displayArray,
		    word *sizeArray);
void ExportFieldInfoBlock(SSMetaStruc *ssmStruc,
		          FlatFileDatabaseInstance *pself,
			  optr oself,
		          word *sizeArray);
word ImportFlatFile(SSMetaStruc *ssmStruc, 
		    FieldID *idArray,
		    FlatFileDatabaseInstance *pself);
Boolean CheckFieldType(SSMetaStruc *ssmStruc, 
		       CellType *typeArray,
		       word *sizeArray);
void ReplaceWhiteSpace(TCHAR *s);
word CreateNewFields(SSMetaStruc *ssmStruc, 
		     CellType *typeArray, 
		     word *sizeArray,
		     FieldID *idArray,
		     optr oself);

/***********************************************************************
 * 	MSG_FFD_EXPORT_TRANSFER_FILE for FlatFileDatabaseClass
 ***********************************************************************
 * SYNOPSIS:	Creates a transfer file in spreadsheet meta format.
 *
 * PARAMETERS: 	void (ImpexTranslationParams *itParams, 
 *		      word begRecord, word endRecord)
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/24/92		Initial Revision
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_EXPORT_TRANSFER_FILE
{
    SSMetaStruc	ssmStruc;   /* structure to be passed to SSMeta routines */ 
    FieldDataType typeArray[MAX_NUM_FIELDS];
    FormatIdType displayArray[MAX_NUM_FIELDS];
    word sizeArray[MAX_NUM_FIELDS];
    word numRecord; 

    if (pself->FFI_numRecords) {

        /* initialize the structure for file export */
        SSMetaInitForStorage(&ssmStruc, 
	   	             itParams->ITP_transferVMFile,
    		             0);

	numRecord = endRecord - begRecord; 

        /* initialize the structure with number of rows and columns */ 
        SSMetaSetScrapSize(&ssmStruc,
		           numRecord,
    		           pself->FFI_numFields); 

	/* scan field properties blocks and grab field data types */
	ExportGetFieldType(pself, oself, &typeArray[0]);

	/* scan current layout fields and grab field display types */
	ExportGetFieldDisplayType(pself, oself, &displayArray[0]);

        /* create the export file in spreadsheet meta format */
        ExportFlatFile(&ssmStruc, pself, oself,
		       begRecord, endRecord, 
		       &typeArray[0], &displayArray[0], &sizeArray[0]);

	/* create field info blocks and write them out to meta file */ 	       
	ExportFieldInfoBlock(&ssmStruc, pself,
			     oself, &sizeArray[0]);
	
        /* return VMChain in *itParams */ 
        itParams->ITP_transferVMChain =
		VMCHAIN_MAKE_FROM_VM_BLOCK(ssmStruc.SSMDAS_hdrBlkVMHan);

	/* return manufacturer ID and clipboard format */
	itParams->ITP_clipboardFormat = CIF_SPREADSHEET;
	itParams->ITP_manufacturerID = MANUFACTURER_ID_GEOWORKS;
    } else { 

        /* return 0 for VMChain in *itParams to indicate an error */ 
        itParams->ITP_transferVMChain = (dword) 0;

	/* return manufacturer ID and clipboard format */
	itParams->ITP_clipboardFormat = CIF_SPREADSHEET;
	itParams->ITP_manufacturerID = MANUFACTURER_ID_GEOWORKS;
    }
}

/***********************************************************************
 * 	MSG_FFD_EXPORT_TO_CLIPBOARD for FlatFileDatabaseClass
 ***********************************************************************
 * SYNOPSIS:	Export the file to clipboard.
 *
 * PARAMETERS: 	void (word begRecord, word endRecord)
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	10/20/92	Initial Revision
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_EXPORT_TO_CLIPBOARD
{
    SSMetaStruc	ssmStruc;   /* structure to be passed to SSMeta routines */ 
    FieldDataType typeArray[MAX_NUM_FIELDS];
    FormatIdType displayArray[MAX_NUM_FIELDS];
    word sizeArray[MAX_NUM_FIELDS];
    word numRecord; 

    if (pself->FFI_numRecords) {

	/* initialize SSMetaStruc */
	SSMetaInitForCutCopy(&ssmStruc, 0, 0);

	numRecord = endRecord - begRecord; 

        /* initialize the structure with number of rows and columns */ 
        SSMetaSetScrapSize(&ssmStruc,
		           numRecord,
    		           pself->FFI_numFields); 

	/* scan field properties blocks and grab field data types */
	ExportGetFieldType(pself, oself, &typeArray[0]);

	/* scan current layout fields and grab field display types */
	ExportGetFieldDisplayType(pself, oself, &displayArray[0]);

        /* create the export file in spreadsheet meta format */
        ExportFlatFile(&ssmStruc, pself, oself,
		       begRecord, endRecord, 
		       &typeArray[0], &displayArray[0], &sizeArray[0]);

	/* create field info blocks and write them out to meta file */ 	       
	ExportFieldInfoBlock(&ssmStruc, pself,
			     oself, &sizeArray[0]);
	
	/* clean up after putting data on clipboard */
	SSMetaDoneWithCutCopy(&ssmStruc);
    }
}

/***********************************************************************
 * 			ExportGetFieldType
 ***********************************************************************
 * SYNOPSIS:	Grab field data types of all fields and store them
 *		in typeArray.
 *
 * CALLED BY:	MSG_FFD_EXPORT_TRANSFER_FILE, MSG_FFD_EXPORT_TO_CLIPBOARD
 *
 * RETURN: 	FieldDataType *typeArray
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	11/92		Initial Revision
 *
 ***********************************************************************/
void
ExportGetFieldType(FlatFileDatabaseInstance *pself,	/* instance data */
	           optr oself,
		   FieldDataType *typeArray)	/* field data types */
{
    FieldID j, colNum;
    MemHandle fieldBlock;
    FFFieldPropertiesMessageBlock *fpData;

    /* initialize the cell type array */
    for (j=0; j < MAX_NUM_FIELDS; j++) {
        typeArray[j] = (CellType) -1;
    }

    for (j=0; j < pself->FFI_numFields; j++) {	/* for each field */
    	colNum = FFDGetColumnNumForExport(pself, j);

	/* get a data block that contains FFFieldPropertiesMessageBlock */
	fieldBlock = StoreFieldPropertiesInBlock(colNum, oself);

	if (fieldBlock) {		
 	    fpData = MemLock(fieldBlock);	/* lock this block */

	    /* update the field data type array */
	    typeArray[j] = fpData->dataType;

	    MemFree(fieldBlock);		/* free the block */
	}
    }
}

/***********************************************************************
 * 			ExportGetFieldDisplayType
 ***********************************************************************
 * SYNOPSIS:	Grab field display types of all fields and store them
 *		in displayArray.
 *
 * CALLED BY:	MSG_FFD_EXPORT_TRANSFER_FILE, MSG_FFD_EXPORT_TO_CLIPBOARD
 *
 * RETURN: 	FormatIdType *displayArray
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	11/28/94	Initial Revision
 *
 ***********************************************************************/
void
ExportGetFieldDisplayType(FlatFileDatabaseInstance *pself, /* instance data */
	           optr oself,
		   FormatIdType *displayArray)	/* field display types */
{
    FieldID j;
    optr grobjBody;
    word axr, cxr, dxr, bpr;
    GetDisplayArrayInfo getDisplayArrayInfo;

    /* initialize the display type array */
    for (j=0; j < MAX_NUM_FIELDS; j++) {
        displayArray[j] = FORMAT_ID_GENERAL;
    }

    grobjBody = @call oself::
	MSG_FFD_GET_GROBJ_BODY_FOR_LAYOUT(pself->FFI_currentLayout,
					  pself->FFI_currentLayoutType);

    ObjLockObjBlock(OptrToHandle(grobjBody));

    getDisplayArrayInfo.GDAI_displayArray = displayArray;
    getDisplayArrayInfo.GDAI_numInLayoutNameList =
	    	    	    	    	pself->FFI_numInLayoutNameList;
    getDisplayArrayInfo.GDAI_layoutNameList = pself->FFI_layoutNameList;
    GrObjBodyProcessAllGrObjsInDrawOrderCommon(
	grobjBody, OCCT_SAVE_PARAMS_DONT_TEST_ABORT,
	MSG_FFTFG_GET_DISPLAY_ARRAY_ELEMENT, SegmentOf(&getDisplayArrayInfo),
					       (word)(&getDisplayArrayInfo), 0,
	&axr, &cxr, &dxr, &bpr);

    MemUnlock(OptrToHandle(grobjBody));
}

/***********************************************************************
 * 			ExportFlatFile
 ***********************************************************************
 * SYNOPSIS:	Create an export file in spreadsheet meta format.  
 *
 * CALLED BY:	MSG_FFD_EXPORT_TRANSFER_FILE, MSG_FFD_EXPORT_TO_CLIPBOARD
 *
 * RETURN: 	word *sizeArray
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/27/92		Initial Revision
 *
 ***********************************************************************/
void
ExportFlatFile(SSMetaStruc *ssmStruc, 	/* structure for SSMeta routines */
	       FlatFileDatabaseInstance *pself,		/* instance data */
	       optr oself,
	       word begRecord,
	       word endRecord,
    	       FieldDataType *typeArray,	/* array of field types */ 
    	       FormatIdType *displayArray,	/* array of display types */ 
	       word *sizeArray)			/* array of field sizes */
{
    TCHAR *text, *temp;
    TCHAR result[FLOAT_TO_ASCII_NORMAL_BUF_LEN];
    word i, k, l, dataSize, rowNum;
    FieldID j, colNum;
    MemHandle dataBlock;
    CellCommon	*cellDataPtr, *newCellDataPtr;
    Boolean emptyCell;
    
    rowNum = 0;					/* initialize row number */

    /* initialize the field size array */
    for (j=0; j < MAX_NUM_FIELDS; j++) {
        sizeArray[j] = 0;
    }

    /* check to see if we are in "Show Only Marked" mode.  if so, */
    /* then begRecord and endRecord need to be recalculated.	  */

    if (pself->FFI_showOnlyMarked) {
	k = -1; l = -1;
	do {					/* recalculate begRecord */
	    k++;
	    while (FFDGetRecordMarkStatus(pself,k) == FALSE) {
	        k++;
	    }
	    begRecord--;
	} while (begRecord != -1);

	do {					/* recalculate endRecord */
	    l++;
	    while (FFDGetRecordMarkStatus(pself,l) == FALSE) {
	        l++;
	    }
	    endRecord--;
	} while (endRecord != 0);

	begRecord = k;
	endRecord = ++l;
    }

    for (i=begRecord; i < endRecord; i++) {		/* for each record */

	/* don't export this record if we are in "show only marked" */
	/* mode and this record is unmarked. */

	if (!(pself->FFI_showOnlyMarked) || 
	    ((pself->FFI_showOnlyMarked)&&(FFDGetRecordMarkStatus(pself,i)))){

	    for (j=0; j < pself->FFI_numFields; j++) {	/* for each field */

		colNum = FFDGetColumnNumForExport(pself,j);

	        /* lock the cell data */
	        emptyCell = FALSE;
	        cellDataPtr = CellLock(&pself->SSI_cellParams, i, colNum);

	        if (cellDataPtr != NULL) {

	        /* for each data type, get size of and pointer to cell data */ 
    	            switch (cellDataPtr->CC_type) {
		        case CT_TEXT:
	    	            text = (TCHAR *) cellDataPtr;
	    	            temp = (char *)cellDataPtr + sizeof(CellCommon);
			    if (strlen(temp) == 0) {
			        emptyCell = TRUE;
			    }
	    	            dataSize = sizeof(CellCommon) +
			      (strlen(temp) + 1)*sizeof(TCHAR);
	    	            break;
	
		        case CT_CONSTANT:

			    /* if computed field, convert number to ascii */
			    if ((typeArray[j] == FDT_COMPUTED) ||
				    (typeArray[j] == FDT_DATE) ||
				    (typeArray[j] == FDT_TIME)) {

	    		        /* allocate a new data block */
	    		        dataBlock = MemAlloc(MAX_TEXT_FIELD_LENGTH*
						     sizeof(TCHAR),
			       	        HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
			       	        HAF_STANDARD | HAF_ZERO_INIT | 
					HAF_NO_ERR);

	    		        newCellDataPtr=MemLock(dataBlock); /* lock it*/

			        /* mark it as a text field */
			        newCellDataPtr->CC_type = CT_TEXT;

			        /* get pointer to the float number */
	    	                temp = (char *)cellDataPtr +sizeof(CellCommon);

			        /* convert number to ascii */
			        FloatFormatNumber(displayArray[j],
					      0, 0,
					      (FloatNum *)temp,
					      result);

			        /* temp is pointer to copy ascii string to */
	    	                temp = (char *)newCellDataPtr + 
					sizeof(CellCommon);

			        /* copy ascii string into memory block */
			        strcpy(temp, result);

	    	                dataSize=sizeof(CellCommon)+
				  (strlen(result)+1)*sizeof(TCHAR);
			        text = (TCHAR *)newCellDataPtr;
			    } else {
	    	                text = (TCHAR *)cellDataPtr;
	    	                dataSize = sizeof(CellConstant);
			    }
	    	            break;

		        case CT_EMPTY:
		            emptyCell = TRUE;
		            dataSize = (word) 0;
		            break;

		        default:
	    	            EC_ERROR(BAD_FIELD_DATA_TYPE);
	    	            break;
    	            }

#if ERROR_CHECK
    if (dataSize > MAX_CELL_DATA_SIZE) {
	EC_ERROR(CELL_DATA_TOO_BIG);
    }
#endif /* ERROR_CHECK */

	            /* add the cell data to the cell huge array */
	            if (!emptyCell) {
	                ssmStruc->SSMDAS_dataArraySpecifier = DAS_CELL; 
	                /* ssmStruc->SSMDAS_row = (i - begRecord); */
	                ssmStruc->SSMDAS_row = rowNum;
	                ssmStruc->SSMDAS_col = j;
	                SSMetaDataArrayAddEntry(ssmStruc, 
				            SSMETA_ADD_TO_END,
				            dataSize, text);  
	            }

		    /* if computed field and CT_CONSTANT, delete dataBlock */
		    if (((typeArray[j] == FDT_COMPUTED) ||
			    (typeArray[j] == FDT_DATE) ||
			    (typeArray[j] == FDT_TIME)) &&
			(cellDataPtr->CC_type == CT_CONSTANT)){
		        MemFree(dataBlock);
		    }
	            CellUnlock(cellDataPtr);	/* unlock the cell data */

		    /* update the size array if necessary */
		    if (sizeArray[j] <= dataSize) {
		        sizeArray[j] = dataSize;
		    }
		}
	    }
	    rowNum++;
	}
    }
}

/***********************************************************************
 * 			ExportFieldInfoBlock
 ***********************************************************************
 * SYNOPSIS:	Create a field info block and write it out to DAS_FIELD.
 *
 * CALLED BY:	MSG_FFD_EXPORT_TRANSFER_FILE, MSG_FFD_EXPORT_TO_CLIPBOARD
 *
 * RETURN: 	nothing
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	11/92		Initial Revision
 *
 ***********************************************************************/
void
ExportFieldInfoBlock(SSMetaStruc *ssmStruc, /* structure for SSMeta routines */
	       FlatFileDatabaseInstance *pself,		/* instance data */
	       optr oself,
	       word *sizeArray)			/* array of field sizes */
{
    FieldID j, colNum;
    MemHandle fieldBlock, newBlock;
    FFFieldPropertiesMessageBlock *fpData;
    FieldInfoBlock *newData;

    for (j=0; j < pself->FFI_numFields; j++) {	/* for each field */
	colNum = FFDGetColumnNumForExport(pself, j);

	/* get a data block that contains FFFieldPropertiesMessageBlock */
	fieldBlock = StoreFieldPropertiesInBlock(colNum, oself);

	/* write out field properties to a new huge array in ssmeta */ 
	if (fieldBlock) {
 	    fpData = MemLock(fieldBlock);

	    /* allocate a field info block */
	    newBlock = MemAlloc(sizeof(FieldInfoBlock),
				HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
				HAF_STANDARD | HAF_ZERO_INIT | HAF_NO_ERR);

	    newData = MemLock(newBlock);	/* lock this block */

	    /* check to see if this is a computed field */
	    if (fpData->dataType == FDT_COMPUTED) {
		newData->fieldType = FDT_GENERAL_TEXT;
	    } else {
		newData->fieldType = fpData->dataType;
	    }

	    /* copy field property data into this block */
	    strcpy(newData->fieldName, fpData->fieldName);

	    newData->fieldSize = sizeArray[j];	/* update the field size */ 

	    /* write out FieldInfoBlock to DAS_FIELD data array */

	    ssmStruc->SSMDAS_dataArraySpecifier = DAS_FIELD; 
	    ssmStruc->SSMDAS_row = 0;
	    ssmStruc->SSMDAS_col = j;
	    SSMetaDataArrayAddEntry(ssmStruc, 
				    SSMETA_ADD_TO_END,
				    sizeof(FieldInfoBlock), 
				    (TCHAR *)newData);  

	    /* clean up */
 	    MemFree(newBlock);
 	    MemFree(fieldBlock);
	}
    }
}

/***********************************************************************
 * 	MSG_FFD_IMPORT_TRANSFER_FILE for FlatFileDatabaseClass
 ***********************************************************************
 * SYNOPSIS:	Import a transfer file in spreadsheet meta format. 
 *
 * PARAMETERS: 	void (ImpexTranslationParams *itParams)
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/24/92		Initial version
 *
 ***********************************************************************/
@extern method FlatFileDatabaseClass, MSG_FFD_IMPORT_TRANSFER_FILE
{
    SSMetaStruc	ssmStruc;   /* structure to be passed to SSMeta routines */ 
    CellType typeArray[MAX_NUM_FIELDS];
    TCHAR  *dialogString;
    InteractionCommand    usdReply;
    int i;
    word sizeArray[MAX_NUM_FIELDS];
    FieldID idArray[MAX_NUM_FIELDS];
    word numFields, numRecords;


    /* initialize the structure for file importing */

    SSMetaInitForRetrieval(&ssmStruc,
		   itParams->ITP_transferVMFile,
		   VMCHAIN_GET_VM_BLOCK(itParams->ITP_transferVMChain));

    /* get number of fields and records */

    SSMetaGetScrapSize(&ssmStruc);
    usdReply = IC_YES;

    if (ssmStruc.SSMDAS_scrapCols > MAX_NUM_FIELDS) {

	/* put up an error box */

	MemLock (OptrToHandle (@FFImportFileTooManyFields));
	dialogString = LMemDeref (@FFImportFileTooManyFields);

	/* Find out what the user wants to do.	*/

	usdReply = UserStandardDialog
		((TCHAR *) 0,		/* No help context	*/
		 (TCHAR *) 0,		/* No custom responses.	*/
		 (TCHAR *) 0,		/* No arguments.	*/
		 (TCHAR *) 0,
		 dialogString,		/* User prompt string.	*/
		 ((GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) |
		  (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET)));

	/* get rid of the string block.	*/

	MemUnlock (OptrToHandle (@FFImportFileTooManyFields));
    }

    if (ssmStruc.SSMDAS_scrapRows && (usdReply == IC_YES)) {

	/* put up a warning message if there are too many records */ 
        if (ssmStruc.SSMDAS_scrapRows > MAX_NUM_RECORDS-1) {

	    /* put up a warning box */
	    MemLock (OptrToHandle (@FFImportFileTooManyRecords));
	    dialogString = LMemDeref (@FFImportFileTooManyRecords);

	    /* Find out what the user wants to do.	*/
	    UserStandardDialog
		((TCHAR *) 0,		/* No help context	*/
		 (TCHAR *) 0,		/* No custom responses.	*/
		 (TCHAR *) 0,		/* No arguments.	*/
		 (TCHAR *) 0,
		 dialogString,		/* User prompt string.	*/
		 ((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
		  (CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET)));

	    /* get rid of the string block.	*/
	    MemUnlock (OptrToHandle (@FFImportFileTooManyRecords));
        }

	/* initialize the cell type array */
	for (i=0; i < MAX_NUM_FIELDS; i++) {
	    typeArray[i] = CT_EMPTY;
        }

        if (CheckFieldType(&ssmStruc, &typeArray[0], 
			   &sizeArray[0]) == FALSE) {
	    numFields = CreateNewFields(&ssmStruc, &typeArray[0], 
					&sizeArray[0], &idArray[0],
					oself);

	    pself = ObjDerefGen(oself);
            numRecords = ImportFlatFile(&ssmStruc, &idArray[0], pself);

	    /* check for too many records */
	    if (numRecords > MAX_NUM_RECORDS-1) {
		numRecords = MAX_NUM_RECORDS-1;
	    }

	    /* update the instance data */
	    pself->FFI_totalNumRecordsInDatabase = numRecords;
	    pself->FFI_numRecords = numRecords;
	    pself->FFI_numFields = numFields;

	    /* set the 1st record to be the current record */
	    pself->SSI_active.CR_row = 0;
        } 
    }
}

/***********************************************************************
 * 			CheckFieldType
 ***********************************************************************
 * SYNOPSIS:	Check to make sure the field type is same across all records.  
 *
 * CALLED BY:	MSG_FFD_IMPORT_TRANSFER_FILE
 *
 * RETURN: 	Boolean (CellType *typeArray, word *sizeArray) 
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/27/92		Initial Revision
 *
 ***********************************************************************/
Boolean 
CheckFieldType(SSMetaStruc *ssmStruc, 	/* structure for SSMeta routines */
	       CellType *typeArray,
	       word *sizeArray)
{
    word numFields;
    FieldID j;
    SSMetaEntry *ssMetaDataEntry;
    InteractionCommand    usdReply;
    CellType dataType;
    char *cellDataPtr;
    TCHAR  *dialogString;
    Boolean typeError, endOfData;

    typeError = FALSE;
    endOfData = FALSE;

    /* get number of entries in field properties data chain */
    ssmStruc->SSMDAS_dataArraySpecifier = DAS_FIELD;
    numFields = SSMetaDataArrayGetNumEntries(ssmStruc);

    /* set the pointer to the beginning of DAS_CELL array */ 
    ssmStruc->SSMDAS_dataArraySpecifier = DAS_CELL;
    SSMetaDataArrayResetEntryPointer(ssmStruc);

    if (numFields == 0) {

	/* initialize the field size array with zeroes */
	for (j=0; j < MAX_NUM_FIELDS && j < ssmStruc->SSMDAS_scrapCols ; j++) {
	    sizeArray[j] = 0;
	}

	while ((!endOfData) && (!typeError)) {

	    /* get the cell data from DAS_CELL array */
	    ssMetaDataEntry = SSMetaDataArrayGetNextEntry(ssmStruc);

	    /* if too many records, then exit this loop */
	    if (ssMetaDataEntry->SSME_coordRow == MAX_NUM_RECORDS) {
		break;
	    }

	    if (ssMetaDataEntry == NULL) {
	        endOfData = TRUE;	/* exit the loop if no more data */
	    } else {
	        /* point to the beginning of CellCommon */
	        cellDataPtr = (char *)ssMetaDataEntry + sizeof(SSMetaEntry);

		/* get the column number */
		j = ssMetaDataEntry->SSME_coordCol; 

	        /* update the size array if necessary */
	        if (sizeArray[j] <= ssMetaDataEntry->SSME_entryDataSize) {
	            sizeArray[j] = ssMetaDataEntry->SSME_entryDataSize;
		}

		/* check to see if the field data is too big */
		if(ssMetaDataEntry->SSME_entryDataSize >
		   MAX_TEXT_FIELD_LENGTH*sizeof(TCHAR)){

		    /* lock memory block with the error string */
  		    MemLock (OptrToHandle (@FFImportFileFieldTooLong));
  		    dialogString = LMemDeref (@FFImportFileFieldTooLong);

  		    /* put up a message saying field is too long */
  		    usdReply = UserStandardDialog
		        ((TCHAR *) 0,	/* No help context	*/
		        (TCHAR *) 0, 	/* No custom responses.	*/
		        (TCHAR *) 0,		/* No arguments.	*/
		        (TCHAR *) 0,
		        dialogString,	/* User prompt string.	*/
		        ((GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) |
		        (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)));

  		    /* get rid of the string block.	*/
  		    MemUnlock (OptrToHandle (@FFImportFileFieldTooLong));

		    /* if the user answered no, then exit the loop */
		    if (usdReply == IC_NO) {
		        typeError = TRUE;
		        break;
		    }
		}

		/* check to see if there is a field data type mismatch */
		dataType = ((CellCommon *)(cellDataPtr))->CC_type;
		if (typeArray[j] == dataType || typeArray[j] == CT_EMPTY) {
		    typeArray[j] = dataType;
		} else { 
  	    	    MemLock (OptrToHandle (@FFImportFileCellTypeError));
  	    	    dialogString = LMemDeref (@FFImportFileCellTypeError);

  	    	    /* put up a message saying type mismatch */
  	    	    UserStandardDialog
		        ((TCHAR *) 0,	/* No help context	*/
		       	(TCHAR *) 0, 	/* No custom responses.	*/
		 	(TCHAR *) 0,	/* No arguments.	*/
		 	(TCHAR *) 0,
		 	dialogString,	/* User prompt string.	*/
		 	((GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
		  	(CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET)));

  	    	    /* get rid of the string block.	*/
  	    	    MemUnlock (OptrToHandle (@FFImportFileCellTypeError));
		    typeError = TRUE;
		    break;
		}
	    }
    	}
	SSMetaDataArrayUnlock(ssmStruc);
    }
    return(typeError);
}

/***********************************************************************
 * 			CreateNewFields
 ***********************************************************************
 * SYNOPSIS:	Create new fields for a file being imported.  
 *
 * CALLED BY:	MSG_FFD_IMPORT_TRANSFER_FILE
 *
 * RETURN: 	word numFields, FieldID *idArray
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/27/92		Initial Revision
 *
 ***********************************************************************/
word
CreateNewFields(SSMetaStruc *ssmStruc, 	/* structure for SSMeta routines */
	        CellType *typeArray,	/* array of field data types */ 
		word *sizeArray,	/* array of field data size */
		FieldID *idArray,	/* array of column numbers */
	        optr oself)		/* instance data */
{
    word numFields, nameLength;
    FieldID i,j,colNum;
    MemHandle fpBlock1, fpBlock2, nameBlock;
    FFFieldPropertiesMessageBlock *fpData1, *fpData2;
    FieldInfoBlock *fieldInfo;
    char *cellDataPtr;
    TCHAR newName[MAX_FIELD_NAME_LENGTH + 1];
    TCHAR *newNamePtr;
    SSMetaEntry *ssMetaDataEntry;

    /* check to see if there are any entries in DAS_FIELD array */
    ssmStruc->SSMDAS_dataArraySpecifier = DAS_FIELD;
    numFields = SSMetaDataArrayGetNumEntries(ssmStruc);

    /* initialize the 'idArray' */
    for (i=0; i < MAX_NUM_FIELDS ; i++) {
        idArray[i] = -1;
    }

    /* set it point to the beginning of DAS_FIELD array */ 
    SSMetaDataArrayResetEntryPointer(ssmStruc);

    if (numFields) {
        for (i=0; i < numFields ; i++) {

	    /* allocate a new data block */
	    fpBlock1 = MemAlloc(sizeof(FFFieldPropertiesMessageBlock),
			       HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
			       HAF_STANDARD | HAF_ZERO_INIT);

	    /* Do we have enough memory? */
	    if (!fpBlock1) {
		/* No, notify the user and return */
		DisplayUserError(@FFMemoryFullErrorOnImport);
		return(i);
	    }

	    /* allocate another data block */
	    fpBlock2 = MemAlloc(sizeof(FFFieldPropertiesMessageBlock),
			       HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
			       HAF_STANDARD | HAF_ZERO_INIT);

	    /* Do we have enough memory? */
	    if (!fpBlock2) {
		/* No, notify the user and return */
		DisplayUserError(@FFMemoryFullErrorOnImport);
		return(i);
	    }
 
	    fpData1 = MemLock(fpBlock1);	/* lock the first data block */
	    fpData2 = MemLock(fpBlock2);	/* lock the first data block */

	    /* lock the entry from DAS_FIELD array */
            ssMetaDataEntry = SSMetaDataArrayGetNextEntry(ssmStruc);

	    /* get the column number */
	    j = ssMetaDataEntry->SSME_coordCol; 

	    /* fieldInfo points to field info block */
	    cellDataPtr = (char *)ssMetaDataEntry + sizeof(SSMetaEntry);
	    fieldInfo = (FieldInfoBlock *)cellDataPtr;

	    /* get field name, data type, and size info */
	    fpData1->maxNumCharsAllowedInThisTextField=fieldInfo->fieldSize;
	    fpData1->dataType=fieldInfo->fieldType;

	    /* get min and max value for numeric fields */
	    if (fieldInfo->fieldType == FDT_INTEGER || 
		    fieldInfo->fieldType == FDT_REAL ||
		    fieldInfo->fieldType == FDT_DATE ||
		    fieldInfo->fieldType == FDT_TIME) {
		fpData1->minValue=fieldInfo->minValue;
		fpData1->maxValue=fieldInfo->maxValue;
	    }

	    /* make sure there are no white spaces in field name */
	    ReplaceWhiteSpace(fieldInfo->fieldName);

	    /* now copy the field name string */
	    strcpy(fpData1->fieldName, fieldInfo->fieldName);
	    memcpy(fpData2, fpData1, sizeof(FFFieldPropertiesMessageBlock));
	    MemUnlock(fpBlock1);		/* unlock this block */
	    MemUnlock(fpBlock2);		/* unlock this block */

	    /* create a new field with this field data */
	    /* a new column number is returned */
	    if (!(@call oself::MSG_FFD_CREATE_NEW_FIELD(fpBlock1,&colNum))){

		/* if the field name already exists, then get a unique name */
	        @call oself::MSG_FFD_REQUEST_UNIQUE_FIELD_NAME(0,
							       0,
							       (TCHAR *)
							       &newName);
	        fpData2 = MemLock(fpBlock2);
	        strcpy(fpData2->fieldName, (TCHAR *)&newName); /* copy in
								 the new name*/
	        MemUnlock(fpBlock2);		    /* unlock the data block */

		/* create a new field with this unique name */
	        @call oself::MSG_FFD_CREATE_NEW_FIELD(fpBlock2, &colNum);
	    } else {
	        MemFree(fpBlock2);   /* if name not unique, free the block */
	    }

	    /* update the 'idArray' */
	    idArray[j] = colNum;

    	    /* add this new field to layout */
    	    @call oself::MSG_FFD_ADD_NAME_TO_LAYOUT_LIST(colNum, DEFAULT_IMPORT_FIELD_WIDTH);
	}

	/* unlock the field property block */
	SSMetaDataArrayUnlock(ssmStruc);

    } else {		/* if no entry in DAS_FIELD array, use "typeArray" */ 
        for (i=0; i < ssmStruc->SSMDAS_scrapCols ; i++) {

	    if (typeArray[i] != CT_EMPTY) {

	        /* allocate a new data block */
	        fpBlock1 = MemAlloc(sizeof(FFFieldPropertiesMessageBlock),
			       HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
			       HAF_STANDARD | HAF_ZERO_INIT);

	        /* Do we have enough memory? */
	        if (!fpBlock1) {
		    /* No, notify the user and return */
		    DisplayUserError(@FFMemoryFullErrorOnImport);
		    return(i);
	        }

	        /* allocate a new data block */
	        fpBlock2 = MemAlloc(sizeof(FFFieldPropertiesMessageBlock),
			       HF_DYNAMIC | HF_SHARABLE | HF_SWAPABLE,
			       HAF_STANDARD | HAF_ZERO_INIT);

	        /* Do we have enough memory? */
	        if (!fpBlock2) {
		    /* No, notify the user and return */
		    DisplayUserError(@FFMemoryFullErrorOnImport);
		    return(i);
	        }

 	        fpData1=MemLock(fpBlock1);		/* lock this block */
 	        fpData2=MemLock(fpBlock2);		/* lock this block */

	        /* get the field name from row one */
	        ssmStruc->SSMDAS_dataArraySpecifier = DAS_CELL;
	        ssmStruc->SSMDAS_row = 0;
	        ssmStruc->SSMDAS_col = i;
		newNamePtr = SSMetaDataRecordFieldLock(ssmStruc, 
						    &nameBlock,
						    &nameLength);

		/* if this cell is empty, then assign default field name */
		if (newNamePtr == NULL) {
		    @call oself::MSG_FFD_REQUEST_UNIQUE_FIELD_NAME(0,0, 
							(TCHAR *)&newName);
		    strcpy(fpData1->fieldName, (TCHAR *)&newName);
		} else {
		    /* make sure there are no white spaces in field name */
		    ReplaceWhiteSpace(newNamePtr);
		    memcpy(fpData1->fieldName,
			   newNamePtr, nameLength*sizeof(TCHAR));
		    SSMetaDataRecordFieldUnlock(ssmStruc, nameBlock);
		}

	        /* update the field data type field */
    	        switch (typeArray[i]) {
		    case CT_TEXT:
	                fpData1->dataType = FDT_GENERAL_TEXT;

		        /* update the field data size if text field */
		        if (sizeArray[i] <=
			    MAX_TEXT_FIELD_LENGTH*sizeof(TCHAR)) { 
		            fpData1->maxNumCharsAllowedInThisTextField =
			        sizeArray[i]/sizeof(TCHAR);
		        } else { 
		            fpData1->maxNumCharsAllowedInThisTextField =
			        MAX_TEXT_FIELD_LENGTH;
		        }
	    	        break;
	
		    case CT_CONSTANT:
		        fpData1->dataType = FDT_INTEGER;

		        /* get default min and max value for numeric fields */
		        FLOAT_EXPONENT((&(fpData1->minValue))) = FP_NAN;
		        FLOAT_EXPONENT((&(fpData1->maxValue))) = FP_NAN;
	    	        break;

		    default:
	    	        EC_ERROR(BAD_FIELD_DATA_TYPE);
	    	        break;
    	        }
		memcpy(fpData2, fpData1,sizeof(FFFieldPropertiesMessageBlock));
	        MemUnlock(fpBlock1);		/* unlock this block */
	        MemUnlock(fpBlock2);		/* unlock this block */

	        /* and create a new field with this field data */
	        /* a new column number is returned */
	      	if(!(@call oself::MSG_FFD_CREATE_NEW_FIELD(fpBlock1,&colNum))){

		    /* if field name already exists, then get a unique one */
		    @call oself::MSG_FFD_REQUEST_UNIQUE_FIELD_NAME(0,0,(TCHAR *)&newName);
		    fpData2 = MemLock(fpBlock2);
	  	    strcpy(fpData2->fieldName, (TCHAR *)&newName); /* copy in new name */
	            MemUnlock(fpBlock2);		 /* unlock this block */

		    /* create a new field with this new field name */
		    @call oself::MSG_FFD_CREATE_NEW_FIELD(fpBlock2, &colNum);
		} else {
		    MemFree(fpBlock2); /* if name is unique, free this block */ 
		}

	        /* update the 'idArray' */
	        idArray[i] = colNum;

    	        /* add this new field to layout */
    	        @call oself::MSG_FFD_ADD_NAME_TO_LAYOUT_LIST(colNum, DEFAULT_IMPORT_FIELD_WIDTH);

	        /* update the field counter */
	        numFields++;	
	    }
	}
    }
    return(numFields);
}

/***********************************************************************
 * 			ReplaceWhiteSpace
 ***********************************************************************
 * SYNOPSIS:	Replace any space characters with '_' and truncate 
 *		the field name if it is too long.  
 *
 * CALLED BY:	CreateNewFields
 *
 * RETURN: 	nothing
 *
 * SIDE EFFECTS:none
 *
 * STRATEGY:	none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	1/27/93		Initial Revision
 *
 ***********************************************************************/
void
ReplaceWhiteSpace(TCHAR *s)
{
    int i;
    TCHAR c;

    /* make sure there are no white spaces in the field name */
    i = 0;
    while ((s[i] != _TEXT('\0')) && (i < MAX_FIELD_NAME_LENGTH)) { 
	c = s[i];
        if (isspace(c)) {
	    s[i] = _TEXT('_');
	}
	i++;
    }

    /* truncate the field name if it is too long */
    if (i == MAX_FIELD_NAME_LENGTH) {
	s[i] = _TEXT('\0');
    }
}

/***********************************************************************
 * 			ImportFlatFile
 ***********************************************************************
 * SYNOPSIS:	Import the transfer file in spreadsheet meta format. 
 *
 * CALLED BY:	MSG_FFD_IMPORT_TRANSFER_FILE
 *
 * RETURN: 	word numRecords
 *
 * SIDE EFFECTS:
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ted	8/27/92		Initial Revision
 *
 ***********************************************************************/
word
ImportFlatFile(SSMetaStruc *ssmStruc, 	/* structure for SSMeta routines */
	       FieldID *idArray,	      /* array of column numbers */
	       FlatFileDatabaseInstance *pself)		/* instance data */
{
    word dataSize;
    SSMetaEntry *ssMetaDataEntry;
    union {
        TCHAR		*cellDataPtr;
        CellEmpty	*emptyCell;
    } cellStruct; 
    Boolean endOfData;

    endOfData = FALSE;

    /* point to the beginning of DAS_CELL array */ 
    ssmStruc->SSMDAS_dataArraySpecifier = DAS_CELL;
    SSMetaDataArrayResetEntryPointer(ssmStruc);

    while (!endOfData) {

        /* get the cell data from DAS_CELL array */
        ssMetaDataEntry = SSMetaDataArrayGetNextEntry(ssmStruc);

	/* if too many records, then exit this loop */
	if (ssMetaDataEntry->SSME_coordRow == MAX_NUM_RECORDS) {
	    break;
	}

	if (ssMetaDataEntry == NULL){
	    endOfData = TRUE;		/* exit if there is no more data */
	    break;
	} else {
            /* skip to point to the beginning of CellCommon */
            cellStruct.cellDataPtr = (char *)ssMetaDataEntry + 
			sizeof(SSMetaEntry);

	    switch (((CellCommon *)(cellStruct.cellDataPtr))->CC_type){
	    	case CT_TEXT:
    	            dataSize = ssMetaDataEntry->SSME_entryDataSize;
    	            break;

	    	case CT_CONSTANT:
    	            dataSize = ssMetaDataEntry->SSME_entryDataSize;
    	            break;

	    	default:
    	            EC_ERROR(BAD_FIELD_DATA_TYPE);
    	            break;
	    }

	    /* cell data is too big, just read in 1024 bytes */
	    if (dataSize > MAX_TEXT_FIELD_LENGTH*sizeof(TCHAR)) {
	    	dataSize = MAX_TEXT_FIELD_LENGTH*sizeof(TCHAR);
	    }

            /* create a new cell */ 
            CellReplace(&pself->SSI_cellParams,
		ssMetaDataEntry->SSME_coordRow,
		idArray[ssMetaDataEntry->SSME_coordCol],
	    	(void *)cellStruct.cellDataPtr, dataSize);
	}
    }

    /* unlock the cell data array */
    SSMetaDataArrayUnlock(ssmStruc);
    return(ssmStruc->SSMDAS_scrapRows);
}
