%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 18 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1241" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Ink Object) 461.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1241) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.43 (The Pen Library provides routines and object classes which work together to) 180 610.3 P
(form the backbone of a note-book style database storing pen input.) 180 597.3 T
(An Ink object is a visual object and may be used by any application that) 180 577.3 T
-0.11 (wants to work with pen input. Though any targetable object may accept ink) 180 564.3 P
(\050see \322Input,\323 Chapter) 180 551.3 T
(1) 280.74 551.3 T
(1 of the Concepts Book\051,) 285.75 551.3 T
3 F
(InkClass) 399.83 551.3 T
1 F
( has many) 445.2 551.3 T
(optimizations for working with ink.) 180 538.3 T
(The Ink Database routines provide a front end to the standard) 180 518.3 T
1 9 Q
(GEOS) 471.52 518.3 T
1 10 Q
-0.53 (Database \050) 180 505.3 P
1 9 Q
-0.48 (DB) 229.12 505.3 P
1 10 Q
-0.53 (\051 library routines well suited for storing and organizing several) 242.62 505.3 P
-0.32 (small pieces of information. These routines allow the storage of notes within) 180 492.3 P
(a hierarchical arrangement of folders. Each note may contain one or more) 180 479.3 T
(pages of textual or ink information.) 180 466.3 T
(If you wish to work directly with the incoming pen input, read \322Input,\323) 180 446.3 T
(Chapter) 180 433.3 T
(1) 220.74 433.3 T
(1 of the Concepts Book to \336nd out how to intercept pen events. T) 225.75 433.3 T
(o) 522.63 433.3 T
(understand the inner workings of the Ink Database routines, you should be) 180 420.3 T
(familiar with the) 180 407.3 T
1 9 Q
(DB) 261.5 407.3 T
1 10 Q
( library) 275 407.3 T
(.) 308.34 407.3 T
0 14 Q
(21.1) 134.76 354.97 T
0 24 Q
(The Ink Object) 180 354.97 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
3 10 Q
(InkClass) 180 322.3 T
1 F
( provides methods for storing multiple pen inputs in a compact) 225.37 322.3 T
(form. It automatically handles all queries about pen input. It handles) 180 309.3 T
(display) 180 296.3 T
(, with the power to display the ink in any color) 212.23 296.3 T
(, and it allows the use) 426.71 296.3 T
(of standard or custom background pictures.) 180 283.3 T
-0.5 (T) 180 263.3 P
-0.5 (o change the way the Ink class \050or any other appropriate class\051 handles ink,) 185.75 263.3 P
-0.72 (the messages to subclass are) 180 250.3 P
1 9 Q
-0.65 (MSG_MET) 311.61 250.3 P
-0.65 (A_NOTIFY_WITH_DA) 357.78 250.3 P
-0.65 (T) 453.11 250.3 P
-0.65 (A_BLOCK) 458.62 250.3 P
1 10 Q
-0.72 ( \050with) 502.62 250.3 P
(the noti\336cation type) 180 237.3 T
1 9 Q
(MANUF) 275.75 237.3 T
(ACTURER_ID_GEOWORKS) 310.75 237.3 T
1 10 Q
(,) 431.75 237.3 T
1 9 Q
(NT_INK) 437.31 237.3 T
1 10 Q
(\051,) 473.14 237.3 T
1 9 Q
(MSG_MET) 180 224.3 T
(A_QUER) 226.17 224.3 T
(Y_IF_PRESS_IS_INK) 264.17 224.3 T
1 10 Q
(, and) 355.84 224.3 T
1 9 Q
(MSG_VIS_QUER) 180 211.3 T
(Y_IF_OBJECT_HANDLES_INK) 253 211.3 T
1 10 Q
(.) 389.01 211.3 T
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1241" 1
%%Page: "1242" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1242) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.1.1) 123.08 636 T
0 18 Q
(Instance Data and Messages) 180 636 T
1 10 Q
-0.16 (When setting up an Ink object, probably the only pieces of instance data the) 180 612.33 P
(application will be concerned with will be) 180 599.33 T
4 9 Q
(II) 373.74 599.33 T
4 10 Q
(_\337ags) 381.07 599.33 T
1 F
(,) 407.73 599.33 T
4 9 Q
(II) 413.29 599.33 T
4 10 Q
(_dirtyOutput) 420.61 599.33 T
1 F
(, and) 480.79 599.33 T
4 9 Q
(II) 180 586.33 T
4 10 Q
(_dirtyMsg) 187.33 586.33 T
1 F
(.) 233.98 586.33 T
-0.06 (Most of the \337ags are easy to understand, with the possible exceptions of the) 180 566.33 P
1 9 Q
-0.39 (IF_HAS_T) 180 553.33 P
-0.39 (ARGET) 223.84 553.33 P
1 10 Q
-0.43 ( and) 256.34 553.33 P
1 9 Q
-0.39 (IF_DIRTY) 278.44 553.33 P
1 10 Q
-0.43 ( \336elds, which should not be set when creating) 322.11 553.33 P
(the object in any case.) 180 540.33 T
81 507.98 531 520 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 507.98 531 520 R
7 X
0 0 0 1 0 0 0 K
V
76.5 515.23 617.5 518.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 501.31 T
(21-) 147.13 501.31 T
(1 InkClass Instance Data) 161.58 501.31 T
5 9 Q
(/*) 81 486.98 T
(II_flags:) 125 486.98 T
( *) 81 475.98 T
(This field holds flags governing the object\325s behavior:) 125 475.98 T
( *) 81 464.98 T
(IF_MOUSE_FLAGS,) 168.98 464.98 T
( *) 81 453.98 T
(IF_SELECTING,) 168.98 453.98 T
( *) 81 442.98 T
(IF_HAS_TARGET,) 168.98 442.98 T
( *) 81 431.98 T
(IF_HAS_SYS_TARGET,) 168.98 431.98 T
( *) 81 420.98 T
(IF_DIRTY,) 168.98 420.98 T
( *) 81 409.98 T
(IF_ONLY_CHILD_OF_CONTENT,) 168.98 409.98 T
( *) 81 398.98 T
(IF_CONTROLLED, \050Set if to be used with an InkControl\051) 168.98 398.98 T
( *) 81 387.98 T
(IF_INVALIDATE_ERASURES,) 168.98 387.98 T
( *) 81 376.98 T
(IF_HAS_UNDO */) 168.98 376.98 T
(@instance) 81 365.98 T
(InkFlags) 135 365.98 T
(II_flags = IF_HAS_UNDO;) 256.5 365.98 T
(/*) 81 347.98 T
(II_tool:) 125 347.98 T
( *) 81 336.98 T
(This field keeps track of how the user is interacting with the Ink. There) 125 336.98 T
( *) 81 325.98 T
(are three possible tools: IT_PENCIL, IT_SELECTOR, and IT_ERASER. */) 125 325.98 T
(@instance) 81 314.98 T
(InkTool) 135 314.98 T
(II_tool;) 212.5 314.98 T
(/*) 81 296.98 T
(II_penColor:) 125 296.98 T
( *) 81 285.98 T
(The color to use when drawing ink. */) 125 285.98 T
(@instance) 81 274.98 T
(Color) 135 274.98 T
(II_penColor = C_BLACK;) 212.5 274.98 T
(/*) 81 256.98 T
(II_segments:) 125 256.98 T
( *) 81 245.98 T
(Do not set this field explicitly. This field is a handle to the chunk array) 125 245.98 T
( *) 81 234.98 T
(containing the pen segments. The segments are stored as an array of Point) 125 234.98 T
( *) 81 223.98 T
(structures. The stored coordinates are all positive; any x coordinate with) 125 223.98 T
( *) 81 212.98 T
(its sign bit set belongs to the last point in a gesture. Thus, a small) 125 212.98 T
( *) 81 201.98 T
(cross shape centered at \05072, 72\051 might be stored:) 125 201.98 T
( *) 81 190.98 T
(\0500x0048, 0x0046\051) 168.98 190.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1242" 2
%%Page: "1243" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Ink Object) 461.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1243) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
( *) 81 642 T
(\0500x8048, 0x004A\051 [note sign bit set in x coordinate]) 168.98 642 T
( *) 81 631 T
(\0500x0046, 0x0048\051) 168.98 631 T
( *) 81 620 T
(\0500x804A, 0x0048\051) 168.98 620 T
( [sign bit set in x coordinate]) 256.5 620 T
(*/) 423.9 620 T
(@instance) 81 609 T
(ChunkHandle) 135 609 T
(II_segments;) 212.5 609 T
(/*) 81 591 T
(II_dirtyMsg, II_dirtyOutput:) 125 591 T
( *) 81 580 T
(Together, these fields form an Action Descriptor. When the Ink processes) 125 580 T
( *) 81 569 T
(a point of pen information, erases anything, or handles an undo event the) 125 569 T
( *) 81 558 T
(IF_DIRTY flag will be set. If the flag was not set already, then the Ink) 125 558 T
( *) 81 547 T
(will send the AD\325s message to the AD\325s object. The handler for this message) 125 547 T
( *) 81 536 T
(should probably clear the IF_DIRTY bit. */) 125 536 T
(@instance optr) 81 525 T
(II_dirtyOutput;) 212.5 525 T
(@instance Message) 81 514 T
(II_dirtyMsg;) 212.5 514 T
(@instance Rectangle) 81 496 T
(II_selectBounds;) 212.5 496 T
(/* Internal */) 344 496 T
(@instance GStateHandle) 81 485 T
(II_cachedGState;) 212.5 485 T
(/* Internal */) 344 485 T
(@instance TimerHandle) 81 474 T
(II_antTimer;) 212.5 474 T
(/* Internal */) 344 474 T
(@instance word) 81 463 T
(II_antTimerID;) 212.5 463 T
(/* Internal */) 344 463 T
(@instance byte) 81 452 T
(II_antMask;) 212.5 452 T
(/* Internal */) 344 452 T
81 427.98 531 440 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 427.98 531 440 R
7 X
0 0 0 1 0 0 0 K
V
76.5 435.23 617.5 438.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Most of the Ink messages just change or retrieve the values of the instance) 180 410.31 T
(\336elds. The exceptions are two messages will help those applications which) 180 397.31 T
(need to save or transfer the Ink object\325) 180 384.31 T
(s pen data. Use) 357.23 384.31 T
1 9 Q
(MSG_INK_SA) 180 371.31 T
(VE_TO_DB_ITEM) 239.34 371.31 T
1 10 Q
( to save the pen data to an arbitrary) 317 371.31 T
1 9 Q
(DB) 487.04 371.31 T
1 10 Q
( item.) 500.54 371.31 T
-0.14 (If the application changes this information and wishes to pass it back to the) 180 358.31 P
(ink object, use) 180 345.31 T
1 9 Q
(MSG_INK_LOAD_FROM_DB_ITEM) 248.9 345.31 T
1 10 Q
(.) 403.23 345.31 T
81 328.97 531 333.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 328.97 531 333.98 R
7 X
0 0 0 1 0 0 0 K
V
50 332.97 609.01 332.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 320.97 T
0 F
(MSG_INK_SET_T) 99 320.97 T
(OOL) 197.47 320.97 T
6 10 Q
(void) 99 306.3 T
5 F
(MSG_INK_SET_TOOL\050) 153 306.3 T
5 9 Q
(InkTool) 153 295.97 T
(tool\051;) 196.2 295.97 T
1 10 Q
(This message allows the Ink to switch between pencil and eraser tools,) 180 278.3 T
(changing the) 180 265.3 T
4 9 Q
(II) 242.78 265.3 T
4 10 Q
(_tool) 250.11 265.3 T
1 F
( \336eld.) 271.96 265.3 T
0 9 Q
(Source:) 153 248.3 T
1 10 Q
(Unrestricted.) 207 248.3 T
0 9 Q
(Destination:) 153 231.3 T
1 10 Q
(Any Ink object.) 207 231.3 T
0 9 Q
(Parameters:) 153 214.3 T
4 10 Q
(tool) 207 214.3 T
1 F
(A tool, either) 297 214.3 T
1 9 Q
(IT_PENCIL) 359.97 214.3 T
1 10 Q
( or) 410.14 214.3 T
1 9 Q
(IT_ERASER) 425.14 214.3 T
1 10 Q
(.) 477.46 214.3 T
0 9 Q
(Return:) 153 197.3 T
1 10 Q
(Nothing.) 207 197.3 T
0 9 Q
(Interception:) 153 180.3 T
1 10 Q
(Unlikely) 207.5 180.3 T
(.) 246.4 180.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1243" 3
%%Page: "1244" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1244) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(MSG_INK_GET_T) 99 634.99 T
(OOL) 198.8 634.99 T
6 10 Q
(InkTool) 99 620.33 T
5 F
(MSG_INK_GET_TOOL\050\051;) 153 620.33 T
1 F
(This message returns the Ink\325) 180 602.33 T
(s present tool, as stored in) 318.16 602.33 T
4 9 Q
(II) 442.25 602.33 T
4 10 Q
(_tool) 449.58 602.33 T
1 F
(.) 471.43 602.33 T
0 9 Q
(Source:) 153 585.33 T
1 10 Q
(Unrestricted.) 207 585.33 T
0 9 Q
(Destination:) 153 568.33 T
1 10 Q
(Any Ink object.) 207 568.33 T
0 9 Q
(Parameters:) 153 551.33 T
1 10 Q
(None.) 207 551.33 T
0 9 Q
(Return:) 153 534.33 T
1 10 Q
(The present tool, either) 207 534.33 T
1 9 Q
(IT_PENCIL) 318.12 534.33 T
1 10 Q
( or) 368.29 534.33 T
1 9 Q
(IT_ERASER) 383.29 534.33 T
1 10 Q
(.) 435.61 534.33 T
0 9 Q
(Interception:) 153 517.33 T
1 10 Q
(Unlikely) 207.5 517.33 T
(.) 246.4 517.33 T
81 500.98 531 505.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 500.98 531 505.99 R
7 X
0 0 0 1 0 0 0 K
V
50 504.98 609.01 504.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 492.98 T
0 F
(MSG_INK_SET_PEN_COLOR) 99 492.98 T
6 10 Q
(void) 99 478.32 T
5 F
(MSG_INK_SET_PEN_COLOR\050) 153 478.32 T
5 9 Q
(Color) 153 467.98 T
(clr\051;) 189 467.98 T
1 10 Q
-0.02 (This message changes the color used to draw the ink, changing the value in) 180 450.32 P
4 9 Q
(II) 180 437.32 T
4 10 Q
(_penColor) 187.33 437.32 T
1 F
(.) 232.87 437.32 T
0 9 Q
(Source:) 153 420.32 T
1 10 Q
(Unrestricted.) 207 420.32 T
0 9 Q
(Destination:) 153 403.32 T
1 10 Q
(Any Ink object.) 207 403.32 T
0 9 Q
(Parameters:) 153 386.32 T
4 10 Q
(clr) 207 386.32 T
1 F
(Index to a palette \050e.g.) 297 386.32 T
1 9 Q
(C_RED) 403.13 386.32 T
1 10 Q
(\051.) 434.13 386.32 T
0 9 Q
(Return:) 153 369.32 T
1 10 Q
(Nothing.) 207 369.32 T
0 9 Q
(Interception:) 153 352.32 T
1 10 Q
(Unlikely) 207.5 352.32 T
(.) 246.4 352.32 T
81 335.98 531 340.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 335.98 531 340.98 R
7 X
0 0 0 1 0 0 0 K
V
50 339.98 609.01 339.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 327.98 T
0 F
(MSG_INK_SET_DIRTY_AD) 99 327.98 T
6 10 Q
(void) 99 313.31 T
5 F
(MSG_INK_SET_DIRTY_AD\050) 153 313.31 T
5 9 Q
(word) 153 302.98 T
( method,) 189 302.98 T
(optr) 153 292.98 T
( object\051;) 189 292.98 T
1 10 Q
-0.65 (This message sets the Action Descriptor to be activated when the user dirties) 180 275.31 P
(the object, changing the values in) 180 262.31 T
4 9 Q
(II) 337.61 262.31 T
4 10 Q
(_dirtyMsg) 344.94 262.31 T
1 F
( and) 391.59 262.31 T
4 9 Q
(II) 414.28 262.31 T
4 10 Q
(_dirtyOutput) 421.6 262.31 T
1 F
(.) 481.78 262.31 T
0 9 Q
(Source:) 153 245.31 T
1 10 Q
(Unrestricted.) 207 245.31 T
0 9 Q
(Destination:) 153 228.31 T
1 10 Q
(Any Ink object.) 207 228.31 T
0 9 Q
(Parameters:) 153 211.31 T
4 10 Q
(method) 207 211.31 T
1 F
(The message to send when the object is dirty) 297 211.31 T
(.) 502.58 211.31 T
4 F
(object) 207 195.31 T
1 F
-0.6 (The object which should receive the above message.) 297 195.31 P
0 9 Q
(Return:) 153 178.31 T
1 10 Q
(Nothing.) 207 178.31 T
0 9 Q
(Interception:) 153 161.31 T
1 10 Q
(Unlikely) 207.5 161.31 T
(.) 246.4 161.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1244" 4
%%Page: "1245" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Ink Object) 461.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1245) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(MSG_INK_SET_FLAGS) 99 634.99 T
6 10 Q
(void) 99 620.33 T
5 F
(MSG_INK_SET_FLAGS\050) 153 620.33 T
5 9 Q
(InkFlags) 153 609.99 T
(setFlags,) 201.6 609.99 T
(InkFlags) 153 599.99 T
(clearFlags\051;) 201.6 599.99 T
1 10 Q
(This message changes the value of the) 180 582.33 T
4 9 Q
(II) 359.84 582.33 T
4 10 Q
(_\337ags) 367.17 582.33 T
1 F
( \336eld. Note that something) 393.83 582.33 T
(which sets the) 180 569.33 T
1 9 Q
(IF_DIRTY) 249.08 569.33 T
1 10 Q
( bit should probably also perform the action stored) 292.75 569.33 T
(in the) 180 556.33 T
4 9 Q
(II) 209.82 556.33 T
4 10 Q
(_dirtyMsg) 217.15 556.33 T
1 F
( and) 263.8 556.33 T
4 9 Q
(II) 286.77 556.33 T
4 10 Q
(_dirtyOutput) 294.09 556.33 T
1 F
(\336elds.) 357.05 556.33 T
0 9 Q
(Source:) 153 539.33 T
1 10 Q
(Unrestricted.) 207 539.33 T
0 9 Q
(Destination:) 153 522.33 T
1 10 Q
(Any Ink object.) 207 522.33 T
0 9 Q
(Parameters:) 153 505.33 T
4 10 Q
(setFlags) 207 505.33 T
1 F
(The \337ags to turn on.) 297 505.33 T
4 F
(clearFlags) 207 489.33 T
1 F
(The \337ags to turn off.) 297 489.33 T
0 9 Q
(Return:) 153 472.33 T
1 10 Q
(Nothing.) 207 472.33 T
0 9 Q
(Interception:) 153 455.33 T
1 10 Q
(Unlikely) 207.5 455.33 T
(.) 246.4 455.33 T
81 438.98 531 443.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 438.98 531 443.99 R
7 X
0 0 0 1 0 0 0 K
V
50 442.98 609.01 442.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 430.98 T
0 F
(MSG_INK_GET_FLAGS) 99 430.98 T
6 10 Q
(InkFlags) 99 416.32 T
5 F
(MSG_INK_GET_FLAGS\050\051;) 153 416.32 T
1 F
(This message gets the value of the) 180 398.32 T
4 9 Q
(II) 341.51 398.32 T
4 10 Q
(_\337ags) 348.84 398.32 T
1 F
( \336eld.) 375.5 398.32 T
0 9 Q
(Source:) 153 381.32 T
1 10 Q
(Unrestricted.) 207 381.32 T
0 9 Q
(Destination:) 153 364.32 T
1 10 Q
(Any Ink object.) 207 364.32 T
0 9 Q
(Parameters:) 153 347.32 T
1 10 Q
(None.) 207 347.32 T
0 9 Q
(Return:) 153 330.32 T
1 10 Q
(The present value of the) 207 330.32 T
4 9 Q
(II) 322.01 330.32 T
4 10 Q
(_\337ags) 329.34 330.32 T
1 F
( \336eld.) 356 330.32 T
0 9 Q
(Interception:) 153 313.32 T
1 10 Q
(Unlikely) 207.5 313.32 T
(.) 246.4 313.32 T
81 296.98 531 301.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 296.98 531 301.98 R
7 X
0 0 0 1 0 0 0 K
V
50 300.98 609.01 300.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 288.98 T
0 F
(MSG_INK_SA) 99 288.98 T
(VE_T) 176.12 288.98 T
(O_DB_ITEM) 205.92 288.98 T
6 10 Q
(void) 99 274.31 T
5 F
(MSG_INK_SAVE_TO_DB_ITEM\050) 153 274.31 T
5 9 Q
(DBReturn) 153 263.97 T
(* RetValue,) 261 263.97 T
(InkDBFrame) 153 253.97 T
(* ptr\051;) 261 253.97 T
1 10 Q
-0.5 (This message saves the Ink\325) 180 236.31 P
-0.5 (s pen data into the passed) 306.71 236.31 P
1 9 Q
-0.46 (DB) 427.04 236.31 P
1 10 Q
-0.5 ( item. The pen data) 440.54 236.31 P
(will be stored compressed. Calling this message sets the object not dirty) 180 223.31 T
(.) 510.41 223.31 T
0 9 Q
(Source:) 153 206.31 T
1 10 Q
(Unrestricted.) 207 206.31 T
0 9 Q
(Destination:) 153 189.31 T
1 10 Q
(Any Ink object.) 207 189.31 T
0 9 Q
(Parameters:) 153 172.31 T
4 10 Q
(ptr) 207 172.31 T
1 F
(A pointer to an) 297 172.31 T
3 F
(InkDBFrame) 369.23 172.31 T
1 F
( structure, shown) 437.19 172.31 T
(below) 297 159.31 T
(.) 322.57 159.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1245" 5
%%Page: "1246" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1246) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(RetV) 207 641.33 T
(alue) 228.12 641.33 T
1 F
(A pointer to an empty) 297 641.33 T
3 F
(DBReturn) 400.9 641.33 T
1 F
( structure, to be) 454.05 641.33 T
(\336lled by the handler) 297 628.33 T
(.) 389.79 628.33 T
0 9 Q
(Return:) 153 611.33 T
1 10 Q
(The structure pointed to by) 207 611.33 T
4 F
(RetV) 336.08 611.33 T
(alue) 357.2 611.33 T
1 F
( will contain the returned) 376.82 611.33 T
(information.) 207 598.33 T
0 9 Q
(Structures:) 153 581.33 T
1 10 Q
(The) 207 581.33 T
3 F
(InkDBFrame) 227.56 581.33 T
1 F
( and) 295.52 581.33 T
3 F
(DBReturn) 318.49 581.33 T
1 F
( structures are de\336ned below:) 371.64 581.33 T
5 F
(typedef struct {) 216 565.33 T
(Rectangle) 252 552.33 T
(IDBF_bounds;) 360 552.33 T
(/* The bounds of the Ink data */) 288 539.33 T
(VMFileHandle) 252 526.33 T
(IDBF_vmFile;) 360 526.33 T
(/* VM file to write to*/) 288 513.33 T
(DBGroupAndItem) 252 497.33 T
(IDBF_DBGroupAndItem;) 360 497.33 T
(/* DB Item to save to) 288 484.33 T
( * \050or NULL to create a new one\051 */) 288 471.33 T
(word) 252 455.33 T
(IDBF_DBExtra;) 360 455.33 T
(/* Extra space to skip at start) 288 442.33 T
( * of block */) 288 429.33 T
(} InkDBFrame;) 216 416.33 T
(typedef struct {) 216 400.33 T
(word) 252 387.33 T
(DBR_group;) 324 387.33 T
(word) 252 374.33 T
(DBR_item;) 324 374.33 T
(word) 252 361.33 T
(DBR_unused1;) 324 361.33 T
(word) 252 348.33 T
(DBR_unused2;) 324 348.33 T
(} DBReturn;) 216 335.33 T
0 9 Q
(Interception:) 153 318.33 T
1 10 Q
(Unlikely) 207.5 318.33 T
(.) 246.4 318.33 T
81 301.99 531 307 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 301.99 531 307 R
7 X
0 0 0 1 0 0 0 K
V
50 305.99 609.01 305.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 293.99 T
0 F
(MSG_INK_LOAD_FROM_DB_ITEM) 99 293.99 T
6 10 Q
(void) 99 279.33 T
5 F
(MSG_INK_LOAD_FROM_DB_ITEM\050) 153 279.33 T
5 9 Q
(InkDBFrame) 153 268.99 T
(*ptr\051;) 212.4 268.99 T
1 10 Q
(This message loads the compressed data into the Ink from the passed) 180 251.33 T
1 9 Q
(DB) 503.56 251.33 T
1 10 Q
(item. If a) 180 238.33 T
1 9 Q
(NULL) 225.01 238.33 T
1 10 Q
( handle is passed, then the Ink is cleared. This message) 251.69 238.33 T
(marks the Ink as clean.) 180 225.33 T
0 9 Q
(Source:) 153 208.33 T
1 10 Q
(Unrestricted.) 207 208.33 T
0 9 Q
(Destination:) 153 191.33 T
1 10 Q
(Any Ink object.) 207 191.33 T
0 9 Q
(Parameters:) 153 174.33 T
4 10 Q
(ptr) 207 174.33 T
1 F
(A pointer to an) 297 174.33 T
3 F
(InkDBFrame) 369.23 174.33 T
1 F
( structure.) 437.19 174.33 T
0 9 Q
(Return:) 153 157.33 T
1 10 Q
(Nothing.) 207 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1246" 6
%%Page: "1247" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Ink Object) 461.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1247) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 9 Q
0 X
(Structures:) 153 641.33 T
1 10 Q
(For the) 207 641.33 T
3 F
(InkDBFrame) 243.67 641.33 T
1 F
( structure, see) 311.63 641.33 T
1 9 Q
(MSG_INK_SA) 380.33 641.33 T
(VE_TO_DB_ITEM) 439.67 641.33 T
1 10 Q
(.) 517.33 641.33 T
0 9 Q
(Interception:) 153 624.33 T
1 10 Q
(Unlikely) 207.5 624.33 T
(.) 246.4 624.33 T
0 14 Q
(21.1.2) 123.08 582 T
0 18 Q
(Storing Ink to DB Items) 180 582 T
1 10 Q
(Pen information comes in as a) 180 558.33 T
1 9 Q
(MSG_MET) 322.06 558.33 T
(A_NOTIFY_WITH_DA) 368.23 558.33 T
(T) 463.57 558.33 T
(A_BLOCK) 469.08 558.33 T
1 10 Q
( of) 513.08 558.33 T
-0.16 (type) 180 545.33 P
1 9 Q
-0.14 (NT_INK) 202.62 545.33 P
1 10 Q
-0.16 ( accompanied by an array containing the coordinates visited by) 238.46 545.33 P
-0.19 (the pen. The pen data keeps track of the coordinates of the pen input. Every) 180 532.33 P
-0.21 (time pen input comes in, the ink object notes the coordinates. The ink object) 180 519.33 P
(is optimized to save space. For instance, the Ink object eliminates collinear) 180 506.33 T
(points: if three pen events are collinear) 180 493.33 T
(, it will not record the middle one,) 360.01 493.33 T
(recognizing it as redundant.) 180 480.33 T
(The non-redundant points are written out to the) 180 460.33 T
4 9 Q
(II) 405.94 460.33 T
4 10 Q
(_segments) 413.27 460.33 T
1 F
( \336eld, a chunk) 459.92 460.33 T
-0.51 (array of Point structures. Note that the coordinates are unsigned. If a point\325) 180 447.33 P
-0.51 (s) 524.1 447.33 P
4 F
(x) 180 434.33 T
1 F
( coordinate\325) 185 434.33 T
(s sign bit is set, that does not mean that the) 237.78 434.33 T
4 F
(x) 443.76 434.33 T
1 F
( coordinate is) 448.76 434.33 T
-0.16 (negative; if this sign bit is set this is a signal that this point is the last point) 180 421.33 P
(of a gesture.) 180 408.33 T
(When writing pen data to a) 180 232.33 T
1 9 Q
(DB) 309.65 232.33 T
1 10 Q
( item, the Ink object does some more) 323.15 232.33 T
(compression. Applications which work with the items used by) 180 219.33 T
1 9 Q
(MSG_INK_SA) 180 206.33 T
(VE_TO_DB_ITEM) 239.34 206.33 T
1 10 Q
( and) 317 206.33 T
1 9 Q
(MSG_INK_LOAD_FROM_DB_ITEM) 339.97 206.33 T
1 10 Q
( must) 494.3 206.33 T
(work with this compression. Since the user is dragging the pen around in a) 180 193.33 T
(continuous gesture, the pen events tend to occur close together) 180 180.33 T
(. Thus, it is) 468.88 180.33 T
(nice to have a way to record a coordinate as a small offset from another) 180 167.33 T
81 144 531 648 C
180 249 531 405 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 240 522 294 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(Figure) 180 287.33 T
(21-) 213.34 287.33 T
(1) 227.79 287.33 T
4 F
(T) 236.13 287.33 T
(ypical Pen Input) 242.09 287.33 T
(Normally) 180 273.33 T
(, pen input to an Ink object will be mostly made up of horizontal) 223.33 273.33 T
(or vertical strokes.) 180 261.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
%%BeginBinary:  5872     
261 131 203.22 102 0 189 294
/red <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FFFFFFFF55555555AAAAAAAA00000000
> store
/green <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FFFF5555FFFF5555AA550000AAAA0000
> store
/blue <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FF55FF55FF55FF55AA00AA00AA00AA00
> store
 BEGINBITMAPCOLORc
z8%9z
R(F0F0F0F0F0O.F0J#
O*FFFFJ"J"8"
O,FFQ!F0FF
J"8"J#J"
O*F0FF>FFFFP/F0J"
O+F0
J"
R'FFJ"JS
O.FFP<J"JZJP>#8"
O,F0O>36FFFFF0J%J"IZ=%<#
O%FFFFFFFFOAFF6F0F0F0F0FFFFJ"JzJ&:%
O$FFOH/F0:F0F0F0F0F0F0F0F0F0J"A"J#J"8"EzC%;'
O#FFFFBFFFFCFFF0:F0F0F0F0F0F0F0FFFFFFFFJ"J"
O(F0O?FFJ%C"J#JWJ#8"
JFFFFFFFFF0O<F0F06@F0F0FFJ"J#JZBZD"
O'F04FFFFO407FFJ":"<QD"J">#GuJ"9"
IFFFFFFO+FFFFFFF0CF0FFJ$@#@"J#Jz@zD"9"
O!FFF0F0F0F0FFCFFFFB/F06F0F0FFJ#;tA#9"J#H"8":#8#J#8Z
KF0F0F0FFFFF0BFFFFFFF0FFFFF0F0O0F0F0FJP<"J"J"9#JS
BF0<F0AF0FFFFPJJ"J#J#F"9#8#Jz
GFF@F0F0HFFFFF0FFFFF0F0O4GF0J"?#J"<#J"Jt
DF0F0F0O/F0FFFF5F0P/F0J"8$J$T8"9$JS
EF0FFF0F0O=FFFFF0FFF0F0F0LJ$;#JUJ"JZ
4FFFFFFFFFFO!7F09O!I"@#<$J%=$J%=zJt
FFFFFFF0F0F06FFFFFFFFFFFFFF=FFFFFFFF0F0O%F0H"9"J"EtAS:#;"Hz
FFF0GFFF0FFF0FFO"F0F#9%9#8%J#9#=%J%:"8"JZ
FFFFF0F0FFFFF0F0FFF0F0F08FFFFF0F0F0F0F0F0=F0F0F0F0F0FFODIE"?"J%?"J"8t;"9"8"J"J%
FFFF9FFFFFFFFF0>FFF0F0F0FFOBFFIFFFFFFFFD"<":&F%?%J"I"8"JQ;X<"8$<%9r8v
FFFFFFFFFFF0F0FFFFFFFFF0F0F0F0AF0F0FFO%F0F0F0F0F0F0F0F0F0F0G#:";#J$J#9"8"JR<PJ&
F0F0F0FFFF5F0F0F0O,F0F0F0FFKO,F0F0F0F0F0F"8"8&D#<$J"J"IZ>#?uA"8%8%8"
F0F0FFF0F0F0F0FFFFF0F0F04FFO F0:F0F0F0FFF0F0F0F0FFFFF0FFF0J"9'<#<#B$@YJ#8ZJr8tB"I"
7FFF0F0F0F0F0F0FFFFF0F0FFFFFF@F0F0/;F0F0FFFFJ#8"A$FQ?"JZFzJ#>#;"@"
4F0F0FFFFFFFFF0:;:F0DFFF0F0F0F0FFD#J#I#@yJyJ"I"
F0F09F0F0F0F0F0FF0O(F0F0J$C$DrJzJ"8"H">"8"
6F0F0F0F0F0F0F0C=F0O9FFF0FFF0FFJ#@%J"J"8"
DF0F0FFFFFFFF5FFPEFFFFJ#B$J#J"H"8"8#="
?FFFFFFFFFF:FFFFP;F0FFF0FFFFF0J"C";#I"J"8"C"
>FFFFF0F0F0PEF0F0F0J"8"D$J#J">"8"8"<"
=FFF0F0F0F06F0F0PIFFF0F0FFFFJ"G"J#C"J#C#
<FFF0;F0F0FFP>FFFFFFFFJ"9"<$9#J"J"?":(:"
;FFF0FFFFFFF0F0MF0P5F0F0F0F0F0F0FFFFFFF0J"J"9RJ$9"<$;#
>F0O1FFP+FFFFFFF0FFFFFFF0F0J"@"J">"="J"8R;$
=F0F0O!FFFFFFP-FFF0F0F0H%;#J"?$J%B%
FFFFFFFFF0F0O/F0F0F0F0P+F0F0F0F0F0F0F0F0F#:#C"J#;$8"Jw
FFFFFFFFFFO&FFFFF0F0F0FFP/F0E">#J&>"
FFFFFFO4FFFFF0F0F0F0D"9%:#?$J$9#:#8"
FFF0F0F0F0FFFFF0F0F0O"F0F0F0FFFFFFFFF0G":#:%
F0F0F0FFFFFFFFD$=#<%J#:"8#8#J#;P
F0F0F0F0F0FFFFFFFFO'FFFFF0FFFFF0F0P(FFFFJ'<"J#:#8"JY@P
8FFFFF0F0F0F0FFO$FFFFF0F0FFOFJ"<&8#J#9$8#9#J"J#?$
7FFF0F0F0F0F0FFFFO FFFFF0F0F0FFFFF0F0OAFF4F0F0F0F0F0J"F"J#:"8$9#Ju@t
6FFFFKFFFFF0FFFFFFF0F0OFF0F0J"<&J"9';"J$@%
9F0FFFFF0F0F0MFFF0F0F0F0FFFFF0OEF0F0F0F0F0F0F0J"<";"J"9">$J#
8F0FFF0KFFF0F0F0F0P9FFFFJ"J"8#9#8#JV
5FFO,FFF0F0FFFFF0F0P1J"J"="9"JZ:"
AF0MFFFFF0OK1FFJ"8"<"J"8#9"9"JvJ#
4FFF0FFO!FFF0F0FFF0P6F0HFFFFJ#J#Jz>"J#
FF0F0O$FFFFOK/F0F0KFFFFJ"<"8"J#:%J#D#
6F0FFF0O'F0F0FFFFFFFFQ$FFFFFFFFJ"J"<#<"J%
<FFO&FFF0F0FFPKFFFFFFFFJ"J"9S&J"@$8#
?F0O F0F0F0F0F0F0Q'FFFFFFFFF0F0J"J"@#J#J"
>F0O"F0FFFFPHFFFF8FFJs:"J"J":"<"?"9"9"
OBF0FFP3FF5FFFFF0F0F0FFJ"J#J"8"J"
>FFO+F0F0PMFFFF6F0J"J"J"8"H"9#9"="?"8"8"
?FFO,F0P3F0FFF0FFFFF0FFF0F0FFJ"J"<"A"
<F0R3F0F0FFJ"J":"J"G";"8#
=F0Q>FFF0;F0F0F0FFFFJ"J$
R,F0?F0F0F0J"J"@";Q>#8"
P%FFPCF0FFF0F0FFJ";"G"
S$F0F0F0ATJ"J#:r8#="
O=F0Q!F0F0F0F0F0F0J"J"J#
@FFQ9FF=F0F0AvAZJYB"
F0MQ2F0J"JWJZD"=#DW
>F0O!O79F0FFFFJzJWJTJWBYDw
?O F05H9F0JxJZAzJ#Gx
O?F04H5F06F0F0F0JuJtJz>zJ%
P'F0KF050F01F05FFFFFFFFJ"BzJW
P$F0KF0OBJ"JTD#
P!FFPEF0F0J"="JQ@x
OMF0FFP9F0BV<ZF"JZ>X=t
O&F0OB2F0J";#JWJTH"J'
OCFFFFFFCAFF5F0F0F0F0F0F0Bt8"=z8PCZBZAy9">w
F0FFO#F08AF0FFF0J"JtJuD"
OBF0LF0DF0F0J"JsAz?zJ"
5F0O-F09F0DF09F0
J#
RJFFFFJ"
5FFJ"J#<#J"
?FFQ:F0F0F0F06FFJ"8";"J#;#
4FFF0F0R*FFFFFFFFJ"JTJ#
=FFQ?5FFFFJ"
R.FFJ"J"J"9&H$8*9$P
6F0O<FFP'FFF0F0F0F0F0F0F0F0F0F0F0F0F0FFFFFFFFFFFFF0J"J"J";$Q:P
?F0O5F0P(F0F0F0F0J"J"H";":"9":":"8$
OMFFP/F0FFFFFFFFFFFFF0F0F0;XJ"G"9";":"
QKFFFFF0F0FF8$G"J"J"C$9$H"9"
FFFFFFFFO8F0P.FFF0F0FFF0F0F0F0F0#:u8"J#J"9":$9#;"B":#;"
FFFFF0FFO@F0F0P&F0FFFFFFFFF0F0F0F0F0F0F0:#S8"8#J#J"9%<(A"8"9$
F0F0F0FFF0O8F0F0P-F0FFFFFFFFFFFFFFFFF0F0F0FFF0FFFFFF":"J#<$C#?"
F0FFR)F0F0F0F0F0F0F0F07"<$<"@"J'9'B$:&8#
F0F0F0F0F0FFQBF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0;$B"?"
F0F0F0FFF0?#8":"
FFFFF0F0>"
FF:"8"9%
FFFFF0F0FFFF@$
F0FFFF8"9"9"
F0FFFFC#
F0F0@$
F0F0F0<%
F0F0F0F0G#
FFFF@RC"
FF;P>$="8"J#
F0F0F0F0FF4FFFFB'
F0F0F0F0F0F09tA";"
F0FFF0
J"DP
5F0J"J$:#
CFF7FFFFFFFFFFJ";$9%D#F#
@FFF0F0F0FFFFFFFFFFFFFFFFJ":#:#?"@%
EF0FFFFFFFFF0FFFFFFFFJ#J#8"?#<#:":"8$
8FFFF4F0F0FFF0F0FFFFFFFFFFFFFFJ"=$A#8"J"
6F0F0F0F0F0F0F0:FFJ"<#8">P:"9$>#
EFFFFFFFFF0F0F0F0F0F0J"?"8#<#>"F">"
9F0F0FFFFFFFFFFF0FFJ#E#>"9"J"
7F0F0FFFFF0FF:FFJ$;'J#>"
DF0F0F0F0F0F0F0F0F08F0F0F0J#Aw9$?&
GF0F0F0F0F0F0F0F0F0F0F0J"
HFFJQ8#
BF0F0
Js
BF0
ENDBITMAP
%%EndBinary
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1247" 7
%%Page: "1248" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1248) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.25 (coordinate. Since many strokes are almost horizontal or vertical, quite often) 180 641.33 P
(the horizontal or vertical offset will be zero or one.) 180 628.33 T
(T) 180 608.33 T
(o take advantage of these tendencies, the ink object stores pen input as a) 185.75 608.33 T
(bitstream. Coordinates may be recorded either as absolute positions or as) 180 595.33 T
-0.64 (offsets from the last coordinate. See T) 180 582.33 P
-0.64 (able) 349.99 582.33 P
-0.64 (21-) 372.04 582.33 P
-0.64 (1 for a list of components of this) 386.49 582.33 P
(bitstream.) 180 569.33 T
(When writing out a gesture to a) 180 245.17 T
1 9 Q
(DB) 329.83 245.17 T
1 10 Q
( item, the \336rst point will always be) 343.33 245.17 T
-0.71 (recorded as an absolute position. Thus, \336rst the) 180 232.17 P
4 F
-0.71 (x) 396.95 232.17 P
1 F
-0.71 ( coordinate will be recorded,) 401.95 232.17 P
(then the) 180 219.17 T
4 F
(y) 221.67 219.17 T
1 F
( coordinate. Each coordinate will be marked as absolute by the) 226.67 219.17 T
(101) 180 206.17 T
(1 bit pattern.) 196.13 206.17 T
(For each subsequent pen point, the algorithm will \336rst make sure that the) 180 186.17 T
(new point is not collinear with the previous two. If it is, then the algorithm) 180 173.17 T
-0.48 (will make the incoming pen event overwrite the previous event\325) 180 160.17 P
-0.48 (s coordinates.) 468.33 160.17 P
81 144 531 648 C
175.83 261.83 531 566 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 272 531 563.5 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 556.83 T
(able) 185.37 556.83 T
(21-) 208.16 556.83 T
(1) 222.61 556.83 T
4 F
(Components of the Ink\325) 230.95 556.83 T
(s Bitstream) 335.57 556.83 T
180 535.52 531 540.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 535.52 531 540.5 R
7 X
0 0 0 1 0 0 0 K
V
152 538.48 755 538.48 2 L
V
0.5 H
2 Z
0 X
N
175.83 261.83 531 566 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Bit Pattern) 180 543.83 T
(Meaning) 324 543.83 T
(Total Bits) 468 543.83 T
1 F
(00) 180 526.86 T
(0 offset) 324 526.86 T
(2) 504 526.86 T
(01) 180 514.86 T
(+1 offset) 324 514.86 T
(2) 504 514.86 T
(10 00 000) 180 502.86 T
(terminate segment) 324 502.86 T
(7) 504 502.86 T
(10 00 001) 180 490.86 T
(+2 offset) 324 490.86 T
(7) 504 490.86 T
(10 00 010) 180 478.86 T
(+3 offset) 324 478.86 T
(7) 504 478.86 T
(10 00 011) 180 466.86 T
(+4 offset) 324 466.86 T
(7) 504 466.86 T
(10 00 100) 180 454.86 T
(+5 offset) 324 454.86 T
(7) 504 454.86 T
(10 00 101) 180 442.86 T
(+6 offset) 324 442.86 T
(7) 504 442.86 T
(10 00 110) 180 430.86 T
(+7 offset) 324 430.86 T
(7) 504 430.86 T
(10 00 111) 180 418.86 T
(+8 offset) 324 418.86 T
(7) 504 418.86 T
(10 01 000) 180 406.86 T
(\050reserved for future use\051) 324 406.86 T
(7) 504 406.86 T
(10 01 001) 180 394.86 T
(-2 offset) 324 394.86 T
(7) 504 394.86 T
(10 01 010) 180 382.86 T
(-3 offset) 324 382.86 T
(7) 504 382.86 T
(10 01 011) 180 370.86 T
(-4 offset) 324 370.86 T
(7) 504 370.86 T
(10 01 100) 180 358.86 T
(-5 offset) 324 358.86 T
(7) 504 358.86 T
(10 01 101) 180 346.86 T
(-6 offset) 324 346.86 T
(7) 504 346.86 T
(10 01 110) 180 334.86 T
(-7 offset) 324 334.86 T
(7) 504 334.86 T
(10 01 111) 180 322.86 T
(-8 offset) 324 322.86 T
(7) 504 322.86 T
(10 10 xxxxxx) 180 310.86 T
(6-bit keyword \050reserved\051) 324 310.86 T
(10) 504 310.86 T
(10 11 xxxx xxxx xxxx xxx) 180 298.86 T
(15-bit \050unsigned\051 absolute position) 324 298.86 T
(19) 504 298.86 T
(11) 180 286.86 T
(-1 offset) 324 286.86 T
(2) 504 286.86 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1248" 8
%%Page: "1249" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Ink Object) 461.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1249) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.29 (For each event, the algorithm will \336rst write out the) 180 641.33 P
4 F
-0.29 (x) 421.35 641.33 P
1 F
-0.29 ( coordinate, then the) 426.35 641.33 P
4 F
-0.29 (y) 523.51 641.33 P
1 F
(coordinate.) 180 628.33 T
2 F
(u) 180 608.33 T
1 F
(If the coordinate is at 0 or 1 offset from the previous coordinate, the) 198 608.33 T
(algorithm will write out the appropriate two-bit code \05000, 01, or 1) 198 596.33 T
(1\051.) 498.25 596.33 T
2 F
(u) 180 577.33 T
1 F
(If the coordinate is at an offset from the previous coordinate between 2) 198 577.33 T
(and 8, then the algorithm will write out the appropriate 7 bit code) 198 565.33 T
(\0501000xxx for a positive offset, 1001xxx for a negative offset\051.) 198 553.33 T
2 F
(u) 180 534.33 T
1 F
-0.23 (If the coordinate is more than 8 points from the previous coordinate, the) 198 534.33 P
(algorithm writes out 101) 198 522.33 T
(1 followed by the absolute coordinate,) 311.92 522.33 T
(represented as a 15 bit unsigned quantity) 198 510.33 T
(.) 389.89 510.33 T
(When the input is \336nished, the algorithm writes a 1000000 bit pattern,) 180 491.33 T
(signalling the end of the segment.) 180 478.33 T
-0.8 (Decompressing the data is a matter of traversing the bitstream and detecting) 180 458.33 P
(the appropriate patterns.) 180 445.33 T
-0.01 (As an example of how the algorithm compresses pen input, suppose the Ink) 180 425.33 P
(object were writing the following gesture to a) 180 412.33 T
1 9 Q
(DB) 391.13 412.33 T
1 10 Q
( item:) 404.63 412.33 T
5 F
(\05072, 71\051) 216 396.33 T
(\05082, 74\051) 216 383.33 T
(\05084, 74\051) 216 370.33 T
(\05085, 72\051) 216 357.33 T
1 F
(The \336rst coordinate is 72, so the algorithm will write out:) 180 337.33 T
4 F
(101) 180 324.33 T
(1) 195.94 324.33 T
1 F
( \050signals absolute coordinate\051) 201.5 324.33 T
4 F
( 000000001001000) 336.33 324.33 T
1 F
(The second coordinate is 71, so after handling the second coordinate, the) 180 311.33 T
(stream will be:) 180 298.33 T
(101) 180 285.33 T
(1 000000001001000) 196.13 285.33 T
4 F
(101) 290.65 285.33 T
(1 0000000010001) 306.59 285.33 T
(1) 386.47 285.33 T
(1) 391.29 285.33 T
1 F
-0.02 (The) 180 272.33 P
4 F
-0.02 (x) 200.54 272.33 P
1 F
-0.02 ( coordinate of the second point is 82, which is 10 points away from the) 205.54 272.33 P
(previous) 180 259.33 T
4 F
(x) 222.22 259.33 T
1 F
( coordinate. Unfortunately) 227.22 259.33 T
(, this is too far to express as a short) 348.89 259.33 T
(offset, so the algorithm writes another absolute coordinate \050the new part of) 180 246.33 T
(the stream is shown in italics\051:) 180 233.33 T
(101) 180 220.33 T
(1 000000001001000 101) 196.13 220.33 T
(1 0000000010001) 306.78 220.33 T
(1) 386.85 220.33 T
(1) 391.86 220.33 T
4 F
(101) 400.2 220.33 T
(1 000000001010010) 416.14 220.33 T
1 F
(The) 180 207.33 T
4 F
(y) 200.56 207.33 T
1 F
( coordinate of the second point is 74, at a positive 3 offset from the) 205.56 207.33 T
(previous) 180 194.33 T
4 F
(y) 222.22 194.33 T
1 F
( value, so the algorithm will write out the appropriate offset code) 227.22 194.33 T
(instead of an absolute position code:) 180 181.33 T
(\311101) 180 168.33 T
(1 0000000010001) 206.13 168.33 T
(1) 286.2 168.33 T
(1 101) 291.21 168.33 T
(1 000000001010010) 315.68 168.33 T
4 F
(10 00 010) 410.2 168.33 T
1 F
(The third point\325) 180 155.33 T
(s) 252.23 155.33 T
4 F
(x) 259.64 155.33 T
1 F
( coordinate is 84, at a +2 offset from 82. The) 264.64 155.33 T
4 F
(y) 470.38 155.33 T
1 F
( coordinate) 475.38 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1249" 9
%%Page: "1250" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1250) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(is 74, the same as the previous point\325) 180 641.33 T
(s) 350.41 641.33 T
4 F
(y) 357.82 641.33 T
1 F
( coordinate:) 362.82 641.33 T
(\311101) 180 628.33 T
(1 0000000010001) 206.13 628.33 T
(1) 286.2 628.33 T
(1 101) 291.21 628.33 T
(1 000000001010010 10 00 010) 315.68 628.33 T
4 F
(10 00 001 00) 457.46 628.33 T
1 F
-0.31 (The last point\325) 180 615.33 P
-0.31 (s) 245.5 615.33 P
4 F
-0.31 (x) 252.6 615.33 P
1 F
-0.31 ( coordinate is one higher than the previous; its) 257.6 615.33 P
4 F
-0.31 (y) 472.74 615.33 P
1 F
-0.31 ( coordinate) 477.74 615.33 P
(is two less.) 180 602.33 T
(\311101) 180 589.33 T
(1 000000001010010 10 00 010 10 00 001 00) 206.13 589.33 T
4 F
(01 10 01 001) 409.07 589.33 T
1 F
(Since it has reached the end of the pen input \050this was a suspiciously short) 180 576.33 T
(gesture, a somewhat contrived example\051, the algorithm then writes an) 180 563.33 T
(end-of-segment code:) 180 550.33 T
(\311101) 180 537.33 T
(1 000000001010010 10 00 010 10 00 001 00 01 10 01 001) 206.13 537.33 T
4 F
(10 00 000) 470.23 537.33 T
1 F
-0.45 (If the Ink object were holding more than one gesture of information, it would) 180 524.33 P
(write the next gesture\325) 180 511.33 T
(s elements starting after the end-of-segment code of) 284.08 511.33 T
(the \336rst.) 180 498.33 T
0 14 Q
(21.2) 134.76 446 T
0 24 Q
(W) 180 446 T
(orking with the Ink DB) 202.22 446 T
1 10 Q
(The Ink Database provides a simpli\336ed, specialized) 180 420.33 T
1 9 Q
(API) 420.23 420.33 T
1 10 Q
( to the database) 436.39 420.33 T
-0.47 (library) 180 407.33 P
-0.47 (. It allows the user to organize pieces of information on notes stored in) 210.56 407.33 P
-0.68 (a hierarchy of folders. Each note may have one or more pages, with each page) 180 394.33 P
-0.59 (corresponding to the contents of an ink or text object. The data stored in each) 180 381.33 P
-0.43 (page is a) 180 368.33 P
1 9 Q
-0.38 (DB) 222.07 368.33 P
1 10 Q
-0.43 ( item returned by) 235.57 368.33 P
1 9 Q
-0.38 (MSG_INK_SA) 317.57 368.33 P
-0.38 (VE_TO_DB_ITEM) 376.91 368.33 P
1 10 Q
-0.43 ( \050for Ink objects\051) 454.57 368.33 P
(or) 180 355.33 T
1 9 Q
(MSG_VIS_TEXT_GET_ALL_DB_ITEM) 192.22 355.33 T
1 10 Q
( \050for T) 357.23 355.33 T
(ext objects\051.) 384.64 355.33 T
-0.52 (Notes and folders are speci\336ed by means of a dword identi\336er) 180 335.33 P
-0.52 (. This identi\336er) 458.3 335.33 P
-0.02 (has nothing to do with where the note\325) 180 322.33 P
-0.02 (s \050or folder) 356.91 322.33 P
-0.02 (\325) 407.04 322.33 P
-0.02 (s\051 data is stored, or where) 408.71 322.33 P
(it appears in the folder tree. Applications should use the) 180 309.33 T
3 F
(InkLoadPage\050\051) 442.8 309.33 T
1 F
(and) 180 296.33 T
3 F
(InkSavePage\050\051) 200.19 296.33 T
1 F
( routines to work with a note\325) 276.11 296.33 T
(s data, and use the) 411.32 296.33 T
-0.05 (routines described below to determine where a note or folder appears in the) 180 283.33 P
(folder tree.) 180 270.33 T
0 14 Q
(21.2.1) 123.08 228 T
0 18 Q
(Getting Started) 180 228 T
5 10 Q
(InkDBInit\050\051) 180 204.33 T
1 F
(T) 180 184.33 T
(o create an Ink Database, an application needs a \336le handle, perhaps the) 185.75 184.33 T
(\336le holding a GenDocument\325) 180 171.33 T
(s data. Before calling any other Ink Database) 310.57 171.33 T
-0.56 (functions, call) 180 158.33 P
3 F
-0.58 (InkDBInit\050\051) 246.28 158.33 P
1 F
-0.56 ( to set up the \336le correctly; this routine should be) 307.38 158.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1250" 10
%%Page: "1251" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Working with the Ink DB) 396.99 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1251) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(called exactly once per Ink) 180 641.33 T
1 9 Q
(DB) 305.56 641.33 T
1 10 Q
(. If the database is part of a GenDocument,) 319.06 641.33 T
(then this routine should be called within the) 180 628.33 T
1 9 Q
(MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE) 180 615.33 T
1 10 Q
(. Other routines) 431.5 615.33 T
(\050described below\051 which might be appropriate when \336rst setting up an Ink) 180 602.33 T
(Database include) 180 589.33 T
3 F
(InkSetDocPageInfo\050\051) 262.8 589.33 T
1 F
( and) 372.05 589.33 T
3 F
( InkSetDocGString\050\051) 392.24 589.33 T
1 F
(.) 498.63 589.33 T
0 14 Q
(21.2.2) 123.08 547 T
0 18 Q
(Displaying the Data) 180 547 T
5 10 Q
-1 (InkNoteLoadPage\050\051, InkNoteSavePage\050\051, InkGetDocPageInfo\050\051,) 180 523.33 P
(InkSetDocPageInfo\050\051, InkSetDocGString\050\051,) 180 510.33 T
(InkGetDocGString\050\051, InkNoteGetNoteType\050\051) 180 497.33 T
1 F
(Assuming that the application is using text and ink objects to display the) 180 477.33 T
(information held in the Ink) 180 464.33 T
1 9 Q
(DB) 308.9 464.33 T
1 10 Q
(, use) 322.4 464.33 T
3 F
(InkNoteLoadPage\050\051) 346.48 464.33 T
1 F
( and) 448.32 464.33 T
3 F
-0.7 (InkNoteSavePage\050\051) 180 451.33 P
1 F
-0.68 ( to transfer information between the Ink object and the) 280.36 451.33 P
-0.78 (Ink) 180 438.33 P
1 9 Q
-0.71 (DB) 198.11 438.33 P
1 10 Q
-0.78 (.) 211.61 438.33 P
3 F
-0.81 (InkNoteLoadPage\050\051) 216.38 438.33 P
1 F
-0.78 (loads an ink or text object with the data stored) 320.28 438.33 P
(within the passed note. Use) 180 425.33 T
3 F
(InkNoteGetNoteT) 310.95 425.33 T
(ype\050\051) 402.82 425.33 T
1 F
( to determine what) 429.12 425.33 T
-0.46 (sort of data is stored within the note. Once the user has made changes, those) 180 412.33 P
-0.69 (changes should be stored to the database. Call) 180 399.33 P
3 F
-0.71 (InkNoteSavePage\050\051) 391.21 399.33 P
1 F
-0.69 ( to write) 491.57 399.33 P
(the changes.) 180 386.33 T
(T) 180 366.33 T
(o \336nd out the document size associated with an Ink Database, call) 185.75 366.33 T
3 F
(InkGetDocPageInfo\050\051) 180 353.33 T
1 F
(. T) 290.91 353.33 T
(o change the page size, call) 302.22 353.33 T
3 F
(InkSetDocPageInfo\050\051) 180 340.33 T
1 F
(.) 289.25 340.33 T
(The Ink) 180 320.33 T
1 9 Q
(DB) 219.45 320.33 T
1 10 Q
( routines support the notion of a background picture for ink) 232.95 320.33 T
-0.15 (information. There is one background picture for the entire database. T) 180 307.33 P
-0.15 (o set) 507.22 307.33 P
(the background picture, use) 180 294.33 T
3 F
(InkSetDocGString\050\051) 311.67 294.33 T
1 F
(. T) 415.19 294.33 T
(o \336nd out the current) 426.5 294.33 T
(background picture, call) 180 281.33 T
3 F
( InkGetDocGString\050\051) 291.67 281.33 T
1 F
(.) 399.72 281.33 T
(The background GString is stored in) 180 261.33 T
1 9 Q
(VM) 351.5 261.33 T
1 10 Q
(; call) 366.49 261.33 T
3 F
(GrLoadGString\050\051) 391.13 261.33 T
1 F
( and) 479.65 261.33 T
3 F
(GrDrawGString\050\051) 180 248.33 T
1 F
( to draw it.) 270.93 248.33 T
0 14 Q
(21.2.3) 123.08 206 T
0 18 Q
(T) 180 206 T
(itles and Keywords) 190.67 206 T
5 10 Q
(InkNoteSetKeywords\050\051, InkNoteSetKeywordsFromTextObject\050\051,) 180 182.33 T
(InkNoteGetKeywords\050\051, InkNoteSendKeywordsToTextObject\050\051,) 180 169.33 T
(InkGetTitle\050\051, InkSendTitleToTextObject\050\051,) 180 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1251" 11
%%Page: "1252" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1252) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(InkFolderSetTitle\050\051, InkFolderSetTitleFromTextObject\050\051,) 180 641.33 T
(InkNoteSetTitle\050\051, InkNoteSetTitleFromTextObject\050\051) 180 628.33 T
1 F
(Each note may have two text strings which are helpful for identi\336cation: a) 180 608.33 T
(title and a set of keywords. These words may be used as the \336elds for a) 180 595.33 T
(computed search if the application supports these; regardless, the user will) 180 582.33 T
(certainly \336nd these \336elds useful for organizing notes.) 180 569.33 T
(T) 180 549.33 T
(o set a note\325) 185.75 549.33 T
(s title, call) 239.84 549.33 T
3 F
(InkNoteSetT) 290.97 549.33 T
(itle\050\051) 357.01 549.33 T
1 F
(. There is a corresponding) 382.01 549.33 T
3 F
-0.29 (InkFolderSetT) 180 536.33 P
-0.29 (itle\050\051) 256.05 536.33 P
1 F
-0.28 ( for setting the title of a folder) 281.05 536.33 P
-0.28 (. Since applications may) 417.27 536.33 P
(wish to set the titles of these items based upon the user) 180 523.33 T
(\325) 437.07 523.33 T
(s entry in a text) 438.74 523.33 T
(object, there are two routines) 180 510.33 T
3 F
(InkNoteSetT) 317.97 510.33 T
(itleFromT) 384.01 510.33 T
(extObject\050\051) 435.68 510.33 T
1 F
( and) 493.46 510.33 T
3 F
(InkFolderSetT) 180 497.33 T
(itleFromT) 256.05 497.33 T
(extObject\050\051) 307.72 497.33 T
1 F
( which take an item\325) 365.5 497.33 T
(s name from a) 458.86 497.33 T
(text object.) 180 484.33 T
3 F
(InkGetT) 233.34 484.33 T
(itle\050\051) 276.6 484.33 T
1 F
( gets any item\325) 301.6 484.33 T
(s title, and) 368.47 484.33 T
3 F
(InkSendT) 180 471.33 T
(itleT) 230.86 471.33 T
(oT) 254.38 471.33 T
(extObject\050\051) 266.79 471.33 T
1 F
( is a specialized function used to update the) 324.57 471.33 T
-0.09 (passed text object\325) 180 458.33 P
-0.09 (s text to hold the item\325) 263.35 458.33 P
-0.09 (s title. The maximum length of any) 366.05 458.33 P
(title should be) 180 445.33 T
1 9 Q
(INK_DB_MAX_TITLE_SIZE) 248.72 445.33 T
1 10 Q
(.) 369.05 445.33 T
(Notes may have keywords: words which should not appear in the title but) 180 425.33 T
(which are still useful for searches. Folders do not have keywords. T) 180 412.33 T
(o set a) 489.66 412.33 T
-0.05 (note\325) 180 399.33 P
-0.05 (s keywords, use) 201.67 399.33 P
3 F
-0.05 (InkNoteSetKeywords\050\051) 276.91 399.33 P
1 F
-0.05 (; to use the contents of a text) 395.62 399.33 P
(object as the keywords, use) 180 386.33 T
3 F
(InkNoteSetKeywordsFromT) 308.35 386.33 T
(extObject\050\051) 453.73 386.33 T
1 F
(. T) 511.51 386.33 T
(o) 522.82 386.33 T
(retrieve the keywords, call) 180 373.33 T
3 F
(InkNoteGetKeywords\050\051) 305.38 373.33 T
1 F
(.) 425.75 373.33 T
3 F
(InkNoteSendKeywordsT) 180 360.33 T
(oT) 306.49 360.33 T
(extObject\050\051) 318.9 360.33 T
1 F
( replaces a text object\325) 376.68 360.33 T
(s text with) 477.99 360.33 T
-0.15 (the passed note\325) 180 347.33 P
-0.15 (s keywords. The maximum length of any keyword should be) 253.23 347.33 P
1 9 Q
(INK_DB_MAX_NOTE_KEYWORDS_SIZE) 180 334.33 T
1 10 Q
(.) 358.33 334.33 T
0 14 Q
(21.2.4) 123.08 292 T
0 18 Q
(Navigating the Folder T) 180 292 T
(ree) 379.04 292 T
5 10 Q
(InkDBGetDisplayInfo\050\051, InkDBSetDisplayInfo\050\051,) 180 268.33 T
(InkDBGetHeadFolder\050\051, InkGetParentFolder\050\051,) 180 255.33 T
(InkFolderGetContents\050\051, InkFolderGetNumChildren\050\051,) 180 242.33 T
(InkFolderDisplayChildInList\050\051, InkFolderGetChildInfo\050\051,) 180 229.33 T
(InkFolderGetChildNumber\050\051, InkNoteGetNumPages\050\051) 180 216.33 T
1 F
(Assuming the application allows the existence of more than one folder) 180 196.33 T
(, it) 502.62 196.33 T
-0.81 (must allow some way to move around within the folder tree. If the application) 180 183.33 P
-0.49 (allows the user to change the structure of the folder tree, then it will need UI) 180 170.33 P
-0.82 (which allows the user to navigate an arbitrary tree. There are routines to \336nd) 180 157.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1252" 12
%%Page: "1253" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Working with the Ink DB) 396.99 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1253) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.08 (out and change which page is being displayed. For those applications which) 180 641.33 P
(will need to get information about the folder tree, there are routines to get) 180 628.33 T
(information about the folder tree.) 180 615.33 T
(T) 180 595.33 T
(o \336nd the application\325) 185.75 595.33 T
(s current location within the) 285.21 595.33 T
1 9 Q
(DB) 419.66 595.33 T
1 10 Q
(, call) 433.16 595.33 T
3 F
(InkDBGetDisplayInfo\050\051) 180 582.33 T
1 F
(. This routine returns the current folder) 300.91 582.33 T
1 9 Q
(ID) 488.12 582.33 T
1 10 Q
(, the) 498.79 582.33 T
(note) 180 569.33 T
1 9 Q
(ID) 202.78 569.33 T
1 10 Q
( if any is selected, and the page number within the note. T) 213.45 569.33 T
(o go to a) 481.64 569.33 T
(different location, call) 180 556.33 T
3 F
(InkDBSetDisplayInfo\050\051) 283.71 556.33 T
1 F
(. T) 402.96 556.33 T
(o use this routine, the) 414.27 556.33 T
-0.83 (application must pass a folder) 180 543.33 P
1 9 Q
-0.75 (ID) 317.54 543.33 P
1 10 Q
-0.83 (, along with a valid note) 328.21 543.33 P
1 9 Q
-0.75 (ID) 437.34 543.33 P
1 10 Q
-0.83 ( and page number) 448.01 543.33 P
(if a note is to be selected.) 180 530.33 T
(Chances are the user will be maneuvering within the folder tree. T) 180 510.33 T
(o get the) 487.44 510.33 T
1 9 Q
-0.37 (ID) 180 497.33 P
1 10 Q
-0.41 ( of the root folder) 190.66 497.33 P
-0.41 (, use) 267.74 497.33 P
3 F
-0.42 (InkDBGetHeadFolder\050\051) 291.01 497.33 P
1 F
-0.41 (. T) 412.86 497.33 P
-0.41 (o \336nd the parent folder) 423.77 497.33 P
(of the passed parent or note, call) 180 484.33 T
3 F
(InkGetParentFolder\050\051) 333.35 484.33 T
1 F
(.) 447.61 484.33 T
3 F
(InkFolderGetContents\050\051) 180 471.33 T
1 F
( returns two chunk arrays, one containing the) 305.37 471.33 T
-0.46 (double word identi\336ers of all the folder) 180 458.33 P
-0.46 (\325) 357.07 458.33 P
-0.46 (s subfolders, the other containing the) 358.74 458.33 P
(identi\336ers of the folder) 180 445.33 T
(\325) 286.1 445.33 T
(s child notes.) 287.77 445.33 T
3 F
(InkFolderGetNumChildren\050\051) 350.74 445.33 T
1 F
(returns the number of subfolders and notes within a folder) 180 432.33 T
(.) 450.38 432.33 T
(T) 180 412.33 T
(o display a note or folder) 185.75 412.33 T
(\325) 300.2 412.33 T
(s name in a GenDynamicList, use) 301.87 412.33 T
3 F
(InkFolderDisplayChildInList\050\051) 180 399.33 T
1 F
(. This routine comes in handy when) 339.62 399.33 T
-0.01 (constructing) 180 386.33 P
1 9 Q
-0.01 (UI) 240.35 386.33 P
1 10 Q
-0.01 ( for navigating the folder tree. T) 251.34 386.33 P
-0.01 (o copy the icon and folder or) 398.87 386.33 P
-0.43 (note name of a folder or note into the visual moniker of an entry in a list, call) 180 373.33 P
3 F
(InkNoteCopyMoniker\050\051) 180 360.33 T
1 F
(.) 300.92 360.33 T
(T) 180 340.33 T
(o get information about a folder) 185.75 340.33 T
(\325) 332.43 340.33 T
(s child, call) 334.1 340.33 T
3 F
(InkFolderGetChildInfo\050\051) 388.74 340.33 T
1 F
(.) 517.07 340.33 T
(This routine returns a bit specifying whether the child is a folder or note,) 180 327.33 T
(along with the child\325) 180 314.33 T
(s) 273.72 314.33 T
1 9 Q
(ID) 281.13 314.33 T
1 10 Q
( number) 291.8 314.33 T
(. The) 329.95 314.33 T
3 F
(InkFolderGetChildNumber\050\051) 356.07 314.33 T
1 F
(routine returns the passed child\325) 180 301.33 T
(s place number within the folder) 330 301.33 T
(.) 479.64 301.33 T
0 14 Q
(21.2.5) 123.08 259 T
0 18 Q
(Managing Notes and Folders) 180 259 T
5 10 Q
(InkFolderCreateSubFolder\050\051, InkFolderMove\050\051,) 180 235.33 T
(InkFolderDelete\050\051, InkNoteCreate\050\051, InkNoteDelete\050\051,) 180 222.33 T
(InkNoteMove\050\051, InkNoteCreatePage\050\051) 180 209.33 T
1 F
(Some Ink) 180 189.33 T
1 9 Q
(DB) 226.86 189.33 T
1 10 Q
( applications might just create a hierarchy of notes and not) 240.36 189.33 T
-0.79 (allow the user to move or change notes. Applications that will move notes and) 180 176.33 P
(folders should use the following functions to make changes.) 180 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1253" 13
%%Page: "1254" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1254) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.01 (The) 180 641.33 P
3 F
-0.01 (InkFolderCreateSubFolder\050\051) 200.54 641.33 P
1 F
-0.01 ( routine creates a new folder as a child) 350.01 641.33 P
(of the passed existing folder) 180 628.33 T
(. Use) 308.34 628.33 T
3 F
(InkFolderMove\050\051) 334.46 628.33 T
1 F
( to move a folder to a) 422.42 628.33 T
(new parent folder) 180 615.33 T
(.) 261.11 615.33 T
3 F
(InkNoteMove\050\051) 266.67 615.33 T
1 F
( similarly moves a note to a new parent) 344.62 615.33 T
-0.44 (folder) 180 602.33 P
-0.44 (.) 205.92 602.33 P
3 F
-0.45 (InkFolderDelete\050\051) 211.04 602.33 P
1 F
-0.44 ( deletes a folder and all subfolders and notes that) 304.57 602.33 P
(folder contained.) 180 589.33 T
3 F
(InkNoteCreate\050\051) 260 589.33 T
1 F
( creates a new note.) 345 589.33 T
3 F
( InkNoteDelete\050\051) 436.31 589.33 T
1 F
(deletes a note.) 180 576.33 T
3 F
(InkNoteCreatePage\050\051) 249.09 576.33 T
1 F
( adds a new page to a note.) 359.64 576.33 T
0 14 Q
(21.2.6) 123.08 534 T
0 18 Q
(Manipulating Notes) 180 534 T
5 10 Q
(InkNoteGetPages\050\051, InkNoteGetNumPages\050\051,) 180 510.33 T
(InkNoteSetModif) 180 497.33 T
(icationDate\050\051,) 270 497.33 T
(InkNoteGetModif) 180 484.33 T
(icationDate\050\051, InkNoteGetCreationDate\050\051,) 270 484.33 T
(InkNoteSetNoteType\050\051, InkNoteGetNoteType\050\051) 180 471.33 T
1 F
(Normally) 180 451.33 T
(, the note will store information supplied by an Ink or T) 222.6 451.33 T
(ext object.) 478.94 451.33 T
(However) 180 438.33 T
(, applications may work with a note\325) 220.18 438.33 T
(s information directly) 386.89 438.33 T
(. Call) 485.78 438.33 T
3 F
(InkNoteGetPages\050\051) 180 425.33 T
1 F
( to get the) 279.06 425.33 T
1 9 Q
(DB) 328.33 425.33 T
1 10 Q
( item in which the note\325) 341.83 425.33 T
(s information is) 450.18 425.33 T
-0.46 (stored. The) 180 412.33 P
1 9 Q
-0.41 (DB) 233.9 412.33 P
1 10 Q
-0.46 ( item contains a chunk array; each entry of the array contains) 247.4 412.33 P
(the information for one page \050the) 180 399.33 T
1 9 Q
(DB) 335.19 399.33 T
1 10 Q
( item associated with an Ink or T) 348.69 399.33 T
(ext) 500.58 399.33 T
(object\051. T) 180 386.33 T
(o \336nd out how many pages there are in a given note, call) 221.49 386.33 T
3 F
(InkNoteGetNumPages\050\051) 180 373.33 T
1 F
(.) 303.87 373.33 T
-0.57 (The note will be expecting either text or ink; call) 180 353.33 P
3 F
-0.59 (InkNoteSetNoteT) 401.18 353.33 P
-0.59 (ype\050\051) 491.39 353.33 P
1 F
-0.57 ( to) 517.69 353.33 P
(specify what sort of data will be coming in. The note type is speci\336ed by) 180 340.33 T
(means of a) 180 327.33 T
3 F
(NoteT) 232.42 327.33 T
(ype) 263.56 327.33 T
1 F
( value:) 282.08 327.33 T
1 9 Q
(NT_INK) 315.61 327.33 T
1 10 Q
( or) 351.45 327.33 T
1 9 Q
(NT_TEXT) 366.45 327.33 T
1 10 Q
(. T) 408.21 327.33 T
(o \336nd out a note\325) 419.52 327.33 T
(s type,) 495.83 327.33 T
(call) 180 314.33 T
3 F
(InkNoteGetNoteT) 199.08 314.33 T
(ype\050\051) 290.95 314.33 T
1 F
(.) 317.25 314.33 T
-0.29 (When writing changes, you may wish to update the note\325) 180 294.33 P
-0.29 (s modi\336cation date.) 438.89 294.33 P
(Call) 180 281.33 T
3 F
(InkNoteSetModi\336cationDate\050\051) 201.86 281.33 T
1 F
( to update this information. T) 358.88 281.33 T
(o \336nd) 494.65 281.33 T
-0.81 (out the date last modi\336ed, call) 180 268.33 P
3 F
-0.84 (InkNoteGetModi\336cationDate\050\051) 317.95 268.33 P
1 F
-0.81 (. T) 476.63 268.33 P
-0.81 (o \336nd out) 487.13 268.33 P
(the date the note was created, call) 180 255.33 T
3 F
(InkNoteGetCreationDate\050\051) 340.77 255.33 T
1 F
(.) 479.46 255.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1254" 14
%%Page: "1255" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(InkControlClass) 450.65 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(1255) 535.76 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(u) 502.86 85 T
0 24 Q
(Objects) 412.97 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.2.7) 123.08 636 T
0 18 Q
(Searching and T) 180 636 T
(raversing the T) 319.05 636 T
(ree) 447.1 636 T
5 10 Q
(InkNoteFindByTitle\050\051, InkNoteFindByKeywords\050\051,) 180 612.33 T
(InkFolderDepthFirstTraverse\050\051) 180 599.33 T
1 F
-0.64 (Sometimes the user will remember what a note is called, but has lost it in the) 180 579.33 P
-0.02 (tree of folders. Sometimes the user will want to \336nd all notes which contain) 180 566.33 P
(a certain keyword. Use) 180 553.33 T
3 F
(InkNoteFindNoteByT) 289.09 553.33 T
(itle\050\051) 401.23 553.33 T
1 F
( to get a buffer) 426.23 553.33 T
(containing) 180 540.33 T
1 9 Q
(ID) 231.67 540.33 T
1 10 Q
(s of all notes whose titles match the passed string.) 242.34 540.33 T
3 F
-0.97 (InkNoteFindNoteByKeywords\050\051) 180 527.33 P
1 F
-0.94 ( similarly returns a buffer containing the) 344.81 527.33 P
(IDs of all notes with matching keywords.) 180 514.33 T
-0.75 (For more complicated commands,) 180 494.33 P
3 F
-0.78 (InkFolderDepthFirstT) 334.59 494.33 P
-0.78 (raverse\050\051) 450.82 494.33 P
1 F
-0.75 ( allows) 497.68 494.33 P
-0.84 (the application to perform a depth-\336rst traversal of the folder tree, calling the) 180 481.33 P
(passed routine with all encountered folders.) 180 468.33 T
0 14 Q
(21.3) 134.76 416 T
0 24 Q
(InkControlClass) 180 416 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
3 10 Q
-0.44 (InkControlClass) 180 383.33 P
1 F
-0.43 (, a subclass of) 265.19 383.33 P
3 F
-0.44 (GenControlClass) 329.98 383.33 P
1 F
-0.43 (, provides a menu which) 418.13 383.33 P
(allows the user to select an Ink tool for use with an Ink object.) 180 370.33 T
81 337.98 531 350 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 337.98 531 350 R
7 X
0 0 0 1 0 0 0 K
V
76.5 345.23 617.5 348.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 331.31 T
(21-) 147.13 331.31 T
(2 InkControlClass Features) 161.58 331.31 T
5 9 Q
(typedef ByteFlags) 81 316.98 T
(InkControlFeatures;) 178.2 316.98 T
(/* These features may be combined using | and &:) 81 305.98 T
(ICF_PENCIL_TOOL,) 125 294.98 T
(ICF_ERASER_TOOL) 125 283.98 T
(ICF_SELECTION_TOOL */) 125 272.98 T
(typedef ByteFlags) 81 254.98 T
(InkControlToolboxFeatures;) 178.2 254.98 T
(/* These features may be combined using | and &:) 81 243.98 T
(ICTF_PENCIL_TOOL,) 125 232.98 T
(ICTF_ERASER_TOOL) 125 221.98 T
(ICTF_SELECTION_TOOL */) 125 210.98 T
(#define IC_DEFAULT_FEATURES) 81 192.98 T
(\050ICF_PENCIL_TOOL | ICF_ERASER_TOOL | \134) 301 192.98 T
( ICF_SELECTION_TOOL\051) 301 181.98 T
(#define IC_DEFAULT_TOOLBOX_FEATURES) 81 170.98 T
(\050ICTF_PENCIL_TOOL | ICTF_ERASER_TOOL | \134) 301 170.98 T
( ICTF_SELECTION_TOOL\051) 301 159.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1255" 15
%%Page: "1256" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Pen Object Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(1256) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(u) 61.86 85 T
0 24 Q
(Objects) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(/* Add this controller to the application\325s self-load options GCN list. */) 81 642 T
81 617.98 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 617.98 531 630 R
7 X
0 0 0 1 0 0 0 K
V
76.5 625.23 617.5 628.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1256" 16
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 16
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Courier-Bold
%%EOF
