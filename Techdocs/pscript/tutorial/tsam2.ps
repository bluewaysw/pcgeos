%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "61" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Editing the Application) 405.54 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(61) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.6 (In this chapter we add some) 180 617.33 P
1 9 Q
-0.54 (UI) 309.57 617.33 P
1 10 Q
-0.6 ( gadgetry to the application. By creating some) 320.57 617.33 P
(objects and writing some procedural code, we will construct a cluster of) 180 604.33 T
(gadgetry which enables the user to maintain a list of data.) 180 591.33 T
(W) 180 571.33 T
(e will explore the application\325) 189.26 571.33 T
(s new code, both examining blocks of the) 324.47 571.33 T
(source code to see what they do and going through a debugging session) 180 558.33 T
(during which we set some breakpoints and do some stepping through code.) 180 545.33 T
0 14 Q
(4.1) 142.54 493 T
0 24 Q
(Editing the Application) 180 493 T
1 10 Q
-0.04 (At the end of this chapter you will \336nd a complete code listing for this stage) 180 467.33 P
-0.58 (of the application. Pieces of code which have been added or changed since the) 180 454.33 P
-0.29 (previous stage have been marked with lines like that next to this paragraph.) 180 441.33 P
-0.13 (Y) 180 421.33 P
-0.13 (ou should add the new parts by means of a text editor) 185.93 421.33 P
-0.13 (. When you are done,) 431.81 421.33 P
(invoke) 180 408.33 T
3 F
(pmake) 213.34 408.33 T
1 F
( to compile your program. Y) 248.16 408.33 T
(ou may remember that in the) 375.39 408.33 T
-0.32 (previous chapter) 180 395.33 P
-0.32 (, you had to use) 256.34 395.33 P
3 F
-0.33 (mkmf) 329.95 395.33 P
1 F
-0.32 ( and) 359.77 395.33 P
3 F
-0.33 ( pmake depends) 379.64 395.33 P
1 F
-0.32 (. However) 462.88 395.33 P
-0.32 (, the) 508.3 395.33 P
(\336les generated by those commands will still work for us; we need only do a) 180 382.33 T
3 F
(pmake) 180 369.33 T
1 F
( now) 214.82 369.33 T
(.) 235.57 369.33 T
(Once you\325ve compiled the application send it down to the target machine as) 180 349.33 T
(before: if you still have Swat attached, then use the) 180 336.33 T
3 F
(send) 420.23 336.33 T
1 F
( Swat command;) 444.49 336.33 T
-0.17 (otherwise, make sure that the) 180 323.33 P
3 F
-0.17 (pccom) 320.84 323.33 P
1 F
-0.17 ( tool is running on the target machine) 354.37 323.33 P
(and invoke) 180 310.33 T
3 F
(pcs) 233.53 310.33 T
1 F
( on the host machine.) 250.76 310.33 T
0 14 Q
(4.2) 142.54 258 T
0 24 Q
(The Application so Far) 180 258 T
1 10 Q
(Our application has sprouted a scrolling list, three buttons, and a place to) 180 232.33 T
(input a numerical value. The buttons allow the user to add, remove, and) 180 219.33 T
(change the values of items in the list. By typing a number in the place) 180 206.33 T
-0.06 (provided, the user can determine the value which will appear in the list. By) 180 193.33 P
-0.71 (clicking on the list, the user can determine which list item should be removed) 180 180.33 P
(or changed, or where a new item should be added.) 180 167.33 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
153 438.68 171 474.68 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 242.32 162 503.32 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 1
%%Page: "62" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(62) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The buttons are the instigators of all change. The user can click) 198 641.33 T
(anywhere in the window) 198 629.33 T
(, but the contents of the data list won\325) 310.61 629.33 T
(t change) 484.91 629.33 T
(unless the user interacts with the buttons.) 198 617.33 T
2 F
(u) 180 598.33 T
1 F
(The underlying data structure which will represent the data list is) 198 598.33 T
(managed by the process thread. All user interaction is handled,) 198 586.33 T
(appropriately enough, by the) 198 574.33 T
1 9 Q
(UI) 334.31 574.33 T
1 10 Q
( thread. The user will interact with the) 345.31 574.33 T
(buttons, which are managed by the) 198 562.33 T
1 9 Q
(UI) 363.4 562.33 T
1 10 Q
( thread. This will result in a) 374.4 562.33 T
-0.52 (message sent to the process thread, speci\336cally to the process object. The) 198 550.33 P
(process object will update the data structure representing the list, and) 198 538.33 T
-0.39 (then send messages to those) 198 526.33 P
1 9 Q
-0.35 (UI) 329.76 526.33 P
1 10 Q
-0.39 ( objects which need to update themselves) 340.76 526.33 P
(in light of the new data.) 198 514.33 T
2 F
(u) 180 495.33 T
1 F
-0.31 (Our underlying data structure will consist of a linked list of chunks. Y) 198 495.33 P
-0.31 (ou) 517.42 495.33 P
-0.04 (may wonder what a \322chunk\323 is. Y) 198 483.33 P
-0.04 (ou may recall that the memory heap is) 350.19 483.33 P
(organized into blocks of memory which are referenced by handles. The) 198 471.33 T
(memory manager controls these blocks. This makes for a convenient) 198 459.33 T
(system, but if we were to allocate a separate block of memory for each) 198 447.33 T
(new item in our linked list, it would get wasteful\321there is a a certain) 198 435.33 T
(amount of overhead for each block of memory) 198 423.33 T
(. W) 406.34 423.33 T
(e will take one block of) 421.16 423.33 T
(memory and treat it as a sort of mini-heap organized into mini-blocks.) 198 411.33 T
-0.47 (These \322mini-blocks\323 are known as chunks. The \322mini-heap\323 we will call a) 198 399.33 P
(local memory block, and we will access its contents by means of LMem) 198 387.33 T
(routines.) 198 375.33 T
2 F
(u) 180 356.33 T
1 F
(The local memory block will reside within a virtual memory \336le. This) 198 356.33 T
-0.24 (means that our program will create a \336le and the linked list data will be) 198 344.33 P
-0.82 (stored there. Whenever we need to work with the data, we will load it into) 198 332.33 P
(a block of memory and lock that block of memory into place. Actually) 198 320.33 T
(,) 514.9 320.33 T
(since we\325re erasing our list data between runs each time, there\325) 198 308.33 T
(s not) 489.33 308.33 T
-0.01 (much point to using) 198 296.33 P
1 9 Q
-0.01 (VM) 292.77 296.33 P
1 10 Q
-0.01 ( routines, but this can serve as a quick lesson of) 307.77 296.33 P
(basic) 198 284.33 T
1 9 Q
(VM) 224.12 284.33 T
1 10 Q
( usage.) 239.11 284.33 T
2 F
(u) 180 265.33 T
1 F
(The program is no longer multi-launchable. This makes sense, as we) 198 265.33 T
(hard-coded the name of the \336le that we were using for) 198 253.33 T
1 9 Q
(VM) 450.42 253.33 T
1 10 Q
( storage, and) 465.41 253.33 T
(copies of our application shouldn\325) 198 241.33 T
(t have to share. Also, being) 351.16 241.33 T
(single-launchable allows us to do some things in our program in a more) 198 229.33 T
(simple way) 198 217.33 T
(, not having to make clear to the linker which application\325) 248.94 217.33 T
(s) 515.47 217.33 T
(resources we will work with each time. Since our application will) 198 205.33 T
(eventually support multiple documents, we may never bother to do the) 198 193.33 T
(cleaning up necessary to make it multi-launchable.) 198 181.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 2
%%Page: "63" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GP Change) 428.11 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(63) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(4.3) 142.54 632 T
0 24 Q
(MCHRT) 180 632 T
(.GP Change) 263.98 632 T
1 10 Q
(W) 180 606.33 T
(e changed one line of the) 189.26 606.33 T
1 9 Q
(MCHRT) 306.12 606.33 T
(.GP) 340.28 606.33 T
1 10 Q
( \336le to let glue know that our) 355.79 606.33 T
(application is now single-launchable instead of multi-launchable.) 180 593.33 T
4 9 Q
(type appl, process, single) 81 580 T
1 10 Q
(Our new addition, the \322single\323 keyword, signals that the application is) 180 561.33 T
(single-launchable.) 180 548.33 T
0 14 Q
(4.4) 142.54 496 T
0 24 Q
(MCHRT) 180 496 T
(.GOC: Data &) 263.98 496 T
(Structures) 180 468 T
1 10 Q
(Our additions to) 180 442.33 T
1 9 Q
(MCHRT) 258.53 442.33 T
(.GOC) 292.69 442.33 T
1 10 Q
( fall into three basic categories. First, we will) 315.7 442.33 T
(declare global variables and set up prototypes for routines and messages.) 180 429.33 T
(Next, we will declare some new objects and place them into our Generic UI) 180 416.33 T
(tree. Then we will add some procedural code by which our objects will) 180 403.33 T
-0.25 (respond to some of the messages which will be sent around. W) 180 390.33 P
-0.25 (e\325ll look at the) 463.99 390.33 P
(variables and prototypes \336rst.) 180 377.33 T
-0.5 (Let\325) 180 357.33 P
-0.5 (s take a look at the new lines of code. W) 197.23 357.33 P
-0.5 (e won\325) 375.62 357.33 P
-0.5 (t look at the new comments.) 403.65 357.33 P
4 9 Q
(#define FAKE_LIST_ITEM 0) 81 344 T
1 10 Q
(This is a normal) 180 325.33 T
1 9 Q
(C) 258.17 325.33 T
3 10 Q
(#de\336ne) 267.45 325.33 T
1 F
( statement. When working with the list display) 305.04 325.33 T
(,) 521.93 325.33 T
-0.6 (we will often need to treat its \336rst item, the \322Data:\323 line, as a special case. W) 180 312.33 P
-0.6 (e) 523.82 312.33 P
(set up this constant so that when we check to see if we\325re dealing with this) 180 299.33 T
-0.68 (special case we can say \322if \050variable ==) 180 286.33 P
1 9 Q
-0.61 (F) 356.15 286.33 P
-0.61 (AKE_LIST_ITEM) 361.49 286.33 P
1 10 Q
-0.68 (\051,\323 which is arguable) 436.48 286.33 P
-0.6 (easier to understand than \322if \050variable == 0\051.\323 In Goc, as in any programming) 180 273.33 P
(language, making your code easy to read is a good thing.) 180 260.33 T
4 9 Q
(@class MCProcessClass, GenProcessClass;) 81 247 T
(@message \050GEN_DYNAMIC_LIST_QUERY_MSG\051 MSG_MCP_SET_DATA_ITEM_MONIKER;) 125 236 T
(@message void MSG_MCP_DELETE_DATA_ITEM\050\051;) 125 225 T
(@message void MSG_MCP_INSERT_DATA_ITEM\050\051;) 125 214 T
(@message void MSG_MCP_SET_DATA_ITEM\050\051;) 125 203 T
(@endc /* end of MCProcessClass definition */) 81 192 T
1 10 Q
(Y) 180 173.33 T
(ou may recall that in the last stage of our program) 185.93 173.33 T
3 F
(MCProcessClass) 421.89 173.33 T
1 F
( was) 507.08 173.33 T
-0.45 (a subclass of) 180 160.33 P
3 F
-0.46 (GenProcessClass) 239.6 160.33 P
1 F
-0.45 (, but that we hadn\325) 328.11 160.33 P
-0.45 (t actually made it behave) 413.39 160.33 P
(any differently than) 180 147.33 T
3 F
(GenProcessClass) 275.56 147.33 T
1 F
(. Now we\325re introducing some) 364.08 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 3
%%Page: "64" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(64) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.48 (customizations:) 180 641.33 P
3 F
-0.5 (MCProcessClass) 254.34 641.33 P
1 F
-0.48 ( will de\336ne some of its own messages that) 339.53 641.33 P
(it\325) 180 628.33 T
(s prepared to receive. Here we de\336ne the messages, specifying their pass) 188.71 628.33 T
(and return values by means of the) 180 615.33 T
3 F
(@message) 341.13 615.33 T
1 F
( keyword. The last three) 391.93 615.33 T
(messages take no arguments and return nothing. If we were de\336ning a) 180 602.33 T
(message) 180 589.33 T
1 9 Q
(MSG_MCP_GET_DA) 221.86 589.33 T
(T) 310.03 589.33 T
(A_ITEM) 315.54 589.33 T
1 10 Q
( which took a string and returned an) 351.2 589.33 T
(integer) 180 576.33 T
(, its de\336nition might look like) 212.22 576.33 T
4 F
(@message int MSG_MCP_GET_DATA_ITEM\050char *theString\051;) 216 560.33 T
1 F
-0.67 (For our \336rst message,) 180 539.33 P
1 9 Q
-0.6 (MSG_MCP_SET_DA) 281.04 539.33 P
-0.6 (T) 367.88 539.33 P
-0.6 (A_ITEM_MONIKER) 373.38 539.33 P
1 10 Q
-0.67 (, we\325re de\336ning) 460.04 539.33 P
(our pass and return values in terms of the) 180 526.33 T
1 9 Q
(GEN_DYNAMIC_LIST_QUER) 180 513.33 T
(Y_MSG) 308.5 513.33 T
1 10 Q
( message prototype. This is a prototype) 340.51 513.33 T
-0.05 (de\336ned with the) 180 500.33 P
3 F
-0.05 (GenDynamicListClass) 257.83 500.33 P
1 F
-0.05 (; objects of this class will send out) 372.63 500.33 P
(queries every so often, and that query will have a certain set of pass and) 180 487.33 T
-0.06 (return values. Whichever object will receive this message must be prepared) 180 474.33 P
-0.08 (to handle it, and by using the appropriate prototype we know we\325ll have the) 180 461.33 P
(correct pass and return values.) 180 448.33 T
-0.52 (Y) 180 428.33 P
-0.52 (ou can see the) 185.93 428.33 P
1 9 Q
-0.47 (GEN_DYNAMIC_LIST_QUER) 251.8 428.33 P
-0.47 (Y_MSG) 380.31 428.33 P
1 10 Q
-0.52 ( message prototype in the) 412.31 428.33 P
1 9 Q
(INCLUDE\134OBJECTS\134GDLISTC.GOH) 180 415.33 T
1 10 Q
( include \336le:) 344.26 415.33 T
4 F
(@prototype void GEN_DYNAMIC_LIST_QUERY_MSG\050) 216 399.33 T
(optr list,) 432 385.33 T
(word item\051;) 432 371.33 T
1 F
(From this we know that our message de\336nition is equivalent to having) 180 350.33 T
(de\336ned it as follows) 180 337.33 T
4 F
(@message void MSG_MCP_SET_DATA_ITEM_MONIKER\050) 216 321.33 T
(optr list,) 432 307.33 T
(word item\051;) 432 293.33 T
1 F
-0.52 (Using the message prototype makes the message\325) 180 272.33 P
-0.52 (s purpose clearer) 404.89 272.33 P
-0.52 (. For more) 481.99 272.33 P
-0.88 (information about message prototypes, see "GEOS Programming," Chapter) 180 259.33 P
-0.88 (5) 523.54 259.33 P
(of the Concepts book.) 180 246.33 T
-0.39 (An) 180 226.33 P
3 F
-0.41 (optr) 195.72 226.33 P
1 F
-0.39 ( is an \322object pointer) 217.95 226.33 P
-0.39 (,\323 a unique identi\336er for an object. A) 310.28 226.33 P
3 F
-0.41 (word) 477.53 226.33 P
1 F
-0.39 ( is an) 504.39 226.33 P
-0.23 (unsigned 16-bit number) 180 213.33 P
-0.23 (, a type used in many places throughout the system.) 289.74 213.33 P
-0.25 (In this case, the object identi\336ed by the optr is the gadget which will display) 180 200.33 P
-0.81 (our data list and the word will tell our process which of the list items it should) 180 187.33 P
(work with.) 180 174.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 4
%%Page: "65" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: New Objects) 379.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(65) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(extern word _pascal MCListGetDataItem\050word ordinal\051;) 81 642 T
1 10 Q
(This is the prototype for a routine. This is as it would be in a normal) 180 623.33 T
1 9 Q
(C) 498.58 623.33 T
1 10 Q
(program.) 180 610.33 T
4 9 Q
(typedef struct {) 81 597 T
(word) 125 586 T
(LN_data;) 212.5 586 T
(ChunkHandle) 125 575 T
(LN_next;) 212.5 575 T
(} ListNode;) 81 564 T
(VMFileHandle) 81 551.67 T
(dataFile;) 151.2 551.67 T
(/* File which will hold our data */) 205.2 551.67 T
(VMBlockHandle) 81 541.67 T
(dataFileBlock; /* Block within dataFile */) 156.6 541.67 T
4 8 Q
0.64 (MemHandle) 81 531.67 S
4 9 Q
( dataListBlock;) 129.96 531.67 T
4 8 Q
0.64 ( /* Block of memory which will hold our linked list. */) 216.4 531.67 S
4 9 Q
(MemHandle *dataListBlockPtr = &dataListBlock; /* Pointer to above handle */) 81 521.67 T
(ChunkHandle dataListHead = 0;) 81 511.67 T
4 8 Q
0.64 ( /* Chunk containing head of linked list. */) 237.6 511.67 S
4 9 Q
(ChunkHandle tempListItem;) 81 501.67 T
4 8 Q
0.64 ( /*Chunk handle we will use when traversing lists */) 216 501.67 S
4 9 Q
(ListNode *tempNode;) 81 491.67 T
4 8 Q
0.64 ( /* List item which we will use when traversing lists. */) 183.6 491.67 S
1 10 Q
(Here we\325re declaring a structure and a number of global variables, a) 180 473.33 T
(straightforward enough operation, except that you\325re probably unfamiliar) 180 460.33 T
(with the types involved.) 180 447.33 T
-0.13 (A) 180 427.33 P
3 F
-0.14 (ChunkHandle) 189.87 427.33 P
1 F
-0.13 ( is a handle which we will use to reference a chunk, one of) 262.46 427.33 P
-0.08 (those mini-blocks of memory within a local memory block. W) 180 414.33 P
-0.08 (e will store one) 458.92 414.33 P
3 F
-0.54 (ListNode) 180 401.33 P
1 F
-0.52 ( structure in each of our chunks, and we will use a) 227.03 401.33 P
3 F
-0.54 (ChunkHandle) 456.15 401.33 P
1 F
(to reference the \322next\323 item for each member of our linked list. W) 180 388.33 T
(e will also) 480.57 388.33 T
(use a) 180 375.33 T
3 F
(ChunkHandle) 206.86 375.33 T
1 F
( to reference the \336rst item of our list.) 279.45 375.33 T
-0.18 (The) 180 355.33 P
3 F
-0.19 (VMFileHandle) 200.38 355.33 P
1 F
-0.18 ( will reference the \336le in which our list resides, and the) 275.55 355.33 P
3 F
(VMBlockHandle) 180 342.33 T
1 F
( will reference the block within the \336le which will act as) 264.63 342.33 T
-0.09 (our local memory block, the block which will act as the \322mini-heap\323. W) 180 329.33 P
-0.09 (e will) 503.39 329.33 P
(use the) 180 316.33 T
3 F
(MemHandle) 216.3 316.33 T
1 F
( to access the local memory block while that block is) 279.07 316.33 T
(loaded into memory) 180 303.33 T
(.) 270.38 303.33 T
0 14 Q
(4.5) 142.54 251 T
0 24 Q
(MCHRT) 180 251 T
(.GOC: New Objects) 263.98 251 T
4 9 Q
(@object GenPrimaryClass MCPrimary = {) 81 230 T
(GI_comp = @MCDataList, @MCAddTrigger,) 125 219 T
( @MCDeleteTrigger, @MCChangeTrigger, @MCValue;) 256.5 208 T
(}) 81 197 T
1 10 Q
-0.66 (Our primary window now has some child objects, the new Generic) 180 178.33 P
1 9 Q
-0.59 (UI) 480.2 178.33 P
1 10 Q
-0.66 ( gadgets) 491.2 178.33 P
(which we have added.) 180 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 5
%%Page: "66" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(66) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@object GenDynamicListClass MCDataList = {) 81 642 T
(GIGI_selection = FAKE_LIST_ITEM;) 125 631 T
(GIGI_numSelections = 1;) 125 620 T
(GIGI_destination = process;) 125 609 T
(GDLI_numItems = 1;) 125 598 T
(GDLI_queryMsg = MSG_MCP_SET_DATA_ITEM_MONIKER;) 125 587 T
(HINT_ITEM_GROUP_SCROLLABLE;) 125 576 T
(}) 81 565 T
1 10 Q
(Our \336rst new object is) 180 546.33 T
3 F
(MCDataList) 284.82 546.33 T
1 F
(, the scrolling list which displays the) 347.4 546.33 T
-0.16 (data. This object doesn\325) 180 533.33 P
-0.16 (t keep track of the data list itself. Whenever it needs) 287.15 533.33 P
(to redraw one of the items in the list, it will query the process object to \336nd) 180 520.33 T
(out what it should draw) 180 507.33 T
(. The only thing the list really keeps track of is how) 289.84 507.33 T
(many items it\325) 180 494.33 T
(s displaying and which item the user has selected.) 245.76 494.33 T
(The) 180 474.33 T
5 9 Q
(GIGI) 200.56 474.33 T
5 10 Q
(_selection) 221.89 474.33 T
1 F
( and) 265.94 474.33 T
5 9 Q
(GIGI) 288.91 474.33 T
5 10 Q
(_numSelections) 310.24 474.33 T
1 F
( \336elds keep track of the user) 382.07 474.33 T
(\325) 513.37 474.33 T
(s) 515.04 474.33 T
-0.39 (selection, that is the list item which the user has most recently clicked upon.) 180 461.33 P
(The \322) 180 448.33 T
1 9 Q
(GIGI) 204.45 448.33 T
1 10 Q
(\323 pre\336x stands for) 225.78 448.33 T
3 F
(GenItemGroup) 310.78 448.33 T
1 F
( Instance.) 388.92 448.33 T
3 F
-0.55 (GenDynamicListClass) 180 435.33 P
1 F
-0.53 ( takes advantage of its superclass\325 instance \336elds to) 294.8 435.33 P
(store its collection.) 180 422.33 T
-0.28 (The) 180 402.33 P
5 9 Q
-0.26 (GIGI) 200.27 402.33 P
5 10 Q
-0.28 (_destination) 221.6 402.33 P
1 F
-0.28 ( line determines which object in our application will be) 278.26 402.33 P
(responsible for telling the list what to draw when the list needs to redraw a) 180 389.33 T
(given item. Our process object is somewhat unusual in that it is) 180 376.33 T
(automatically created for us. The \322process\323 keyword will automatically be) 180 363.33 T
(\336lled in with the object pointer of our process object.) 180 350.33 T
(The) 180 330.33 T
5 9 Q
(GDLI) 200.28 330.33 T
5 10 Q
(_numItems) 223.95 330.33 T
1 F
( \336eld keeps track of how many items we have in our) 275.42 330.33 T
(dynamic list. W) 180 317.33 T
(e start with one such item, our \322Data:\323 item.) 251.68 317.33 T
-0.09 (The) 180 297.33 P
5 9 Q
-0.08 (GDLI) 200.47 297.33 P
5 10 Q
-0.09 (_queryMsg) 224.14 297.33 P
1 F
-0.09 ( \336eld determines what message) 273.94 297.33 P
3 F
-0.09 (MCDataList) 421.65 297.33 P
1 F
-0.09 ( will send) 484.23 297.33 P
-0.62 (when it needs to know how to draw one of its items. It will send this message,) 180 284.33 P
1 9 Q
-0.09 (MSG_MCP_SET_DA) 180 271.33 P
-0.09 (T) 266.84 271.33 P
-0.09 (A_ITEM_MONIKER) 272.35 271.33 P
1 10 Q
-0.1 ( to our process object. Y) 359 271.33 P
-0.1 (ou may recall) 466.29 271.33 P
(that we set) 180 258.33 T
1 9 Q
(MSG_MCP_SET_DA) 234.09 258.33 T
(T) 320.93 258.33 T
(A_ITEM_MONIKER) 326.44 258.33 T
1 10 Q
( up to take pass and) 413.09 258.33 T
-0.1 (return values according to a message prototype; we did this so that it would) 180 245.33 P
(be able to \336ll the role of a dynamic list\325) 180 232.33 T
(s query message.) 358.38 232.33 T
(W) 180 212.33 T
(e \336nish our object declaration with a hint:) 189.26 212.33 T
1 9 Q
-0.03 (HINT_ITEM_GROUP_SCROLLABLE) 180 199.33 P
1 10 Q
-0.03 (. The Generic) 339.67 199.33 P
1 9 Q
-0.03 (UI) 404.41 199.33 P
1 10 Q
-0.03 ( uses hints to keep track) 415.4 199.33 P
(of facets of a gadget\325) 180 186.33 T
(s behavior which may or may not be supported under) 272.79 186.33 T
-0.3 (various) 180 173.33 P
1 9 Q
-0.27 (UI) 216.74 173.33 P
1 10 Q
-0.3 (s. W) 227.74 173.33 P
-0.3 (e are providing a hint that our list should be allowed to scroll.) 246.89 173.33 P
(Under the Open Look speci\336c) 180 160.33 T
1 9 Q
(UI) 319.08 160.33 T
1 10 Q
(, we get a scrolling list. Under a speci\336c) 330.08 160.33 T
1 9 Q
(UI) 516.03 160.33 T
1 10 Q
(which did not support scrolling lists, we wouldn\325) 180 147.33 T
(t. From its name, we can) 402.43 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 6
%%Page: "67" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: New Objects) 379.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(67) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(determine that this hint is de\336ned by) 180 641.33 T
3 F
(GenItemGroupClass) 355.58 641.33 T
1 F
( \050hints are a) 461.13 641.33 T
-0.45 (Generic) 180 628.33 P
1 9 Q
-0.41 (UI) 218.25 628.33 P
1 10 Q
-0.45 ( mechanism, thus the names of hints normally omit the) 229.25 628.33 P
1 9 Q
-0.41 (GEN) 483.85 628.33 P
1 10 Q
-0.45 ( from) 504.68 628.33 P
(the class name\051.) 180 615.33 T
(For more general information about objects used to display lists, see \322The) 180 595.33 T
(List Objects,\323 Chapter) 180 582.33 T
(1) 285.57 582.33 T
(1 of the Object Reference Book.) 290.58 582.33 T
4 9 Q
(@visMoniker FakeItemMoniker = \322Data:\323;) 81 569 T
(@localize \322This string will appear at the head of the list\323;) 81 558 T
1 10 Q
(Here we declare a visual moniker which we will use for the \322Data:\323 item in) 180 539.33 T
(our dynamic list. Though this list item will be a generic object, it is not) 180 526.33 T
(explicitly de\336ned here; it will be created and managed automatically by) 180 513.33 T
3 F
(MCDataList) 180 500.33 T
1 F
(. W) 242.58 500.33 T
(e will set the item\325) 257.4 500.33 T
(s moniker by hand later on; we will use) 341.87 500.33 T
(this visual moniker then.) 180 487.33 T
-0.34 (The) 180 467.33 P
3 F
-0.35 (@localize) 200.22 467.33 P
1 F
-0.34 ( directive provides some information about the moniker) 247.32 467.33 P
-0.34 (. If we) 500.71 467.33 P
(decide to translate our application to a foreign language, the text of this) 180 454.33 T
3 F
(@localize) 180 441.33 T
1 F
( directive will be presented to the translator when they use the) 227.1 441.33 T
3 F
(ResEdit) 180 428.33 T
1 F
( translation utility) 221.11 428.33 T
(, providing some contextual information.) 305.76 428.33 T
4 9 Q
(@object GenTriggerClass MCAddTrigger = {) 81 415 T
(GI_visMoniker = \322Add\323;) 125 404 T
(GTI_destination = process;) 125 393 T
(GTI_actionMsg = MSG_MCP_INSERT_DATA_ITEM;) 125 382 T
(}) 81 371 T
(@object GenTriggerClass MCChangeTrigger = {) 81 360 T
(GI_visMoniker = \322Change\323;) 125 349 T
(GTI_destination = process;) 125 338 T
(GTI_actionMsg = MSG_MCP_SET_DATA_ITEM;) 125 327 T
(}) 81 316 T
(@object GenTriggerClass MCDeleteTrigger = {) 81 305 T
(GI_visMoniker = \322Delete\323;) 125 294 T
(GTI_destination = process;) 125 283 T
(GTI_actionMsg = MSG_MCP_DELETE_DATA_ITEM;) 125 272 T
(}) 81 261 T
1 10 Q
(Y) 180 242.33 T
(ou may recall from the previous chapter that GenT) 185.93 242.33 T
(rigger objects manifest) 420.51 242.33 T
(themselves as buttons in the Open Look speci\336c) 180 229.33 T
1 9 Q
(UI) 404.29 229.33 T
1 10 Q
(. W) 415.29 229.33 T
(e are explicitly) 430.11 229.33 T
(declaring three GenT) 180 216.33 T
(rigger objects here, which will appear as our \322Add,\323) 277.9 216.33 T
-0.64 (\322Change,\323 and \322Delete\323 buttons. These objects are called triggers because the) 180 203.33 P
-0.06 (user will use them to trigger actions. In each case, this action will consist of) 180 190.33 P
(the sending of a message. The message in the) 180 177.33 T
5 9 Q
(GTI) 393 177.33 T
5 10 Q
(_actionMsg) 409.83 177.33 T
1 F
( \336eld will be) 462.22 177.33 T
(sent to the object speci\336ed in the) 180 164.33 T
5 9 Q
(GTI) 333.9 164.33 T
5 10 Q
(_destination) 350.73 164.33 T
1 F
( \336eld. All of these triggers) 407.38 164.33 T
(send their message to the process object\321) 180 151.33 T
3 F
(MCAddT) 374.45 151.33 T
(rigger) 419.57 151.33 T
1 F
( sends) 451.61 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 7
%%Page: "68" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(68) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 9 Q
0 X
-0.1 (MSG_MCP_INSERT_DA) 180 641.33 P
-0.1 (T) 284.34 641.33 P
-0.1 (A_ITEM) 289.85 641.33 P
1 10 Q
-0.11 ( when activated;) 325.5 641.33 P
3 F
-0.12 (MCChangeT) 403.89 641.33 P
-0.12 (rigger) 467.52 641.33 P
1 F
-0.11 ( sends) 499.55 641.33 P
1 9 Q
(MSG_MCP_SET_DA) 180 628.33 T
(T) 266.84 628.33 T
(A_ITEM) 272.35 628.33 T
1 10 Q
(; and) 308.01 628.33 T
3 F
(MCDeleteT) 333.76 628.33 T
(rigger) 391.28 628.33 T
1 F
( sends) 423.32 628.33 T
1 9 Q
(MSG_MCP_DELETE_DA) 180 615.33 T
(T) 287.17 615.33 T
(A_ITEM) 292.68 615.33 T
1 10 Q
(.) 328.34 615.33 T
(For more information about trigger objects, see \322GenT) 180 595.33 T
(rigger) 429.03 595.33 T
(,\323 Chapter) 456.06 595.33 T
(5 of) 506.25 595.33 T
(the Object Reference Book.) 180 582.33 T
(Here we see another way to declare the visual moniker for a generic object:) 180 562.33 T
(we\325re just providing a simple string for each object.) 180 549.33 T
4 9 Q
(@object GenValueClass MCValue = {) 81 536 T
(GVLI_minimum = MakeWWFixed\0500\051;) 125 525 T
(GVLI_maximum = MakeWWFixed\0500x7fff\051;) 125 514 T
(GVLI_value = MakeWWFixed\050123\051;) 125 503 T
(}) 81 492 T
3 10 Q
(MCV) 180 473.33 T
(alue) 204.26 473.33 T
1 F
( allows the user to specify the value of each item in the data list.) 226.48 473.33 T
(W) 180 460.33 T
(e\325re setting the minimum and maximum values it will allow the user to) 189.26 460.33 T
(enter) 180 447.33 T
(, as well as the number it will begin with.) 203.7 447.33 T
-0.16 (The) 180 427.33 P
3 F
-0.17 (GenV) 200.4 427.33 P
-0.17 (alue) 227.99 427.33 P
1 F
-0.16 ( class will store the user) 250.21 427.33 P
-0.16 (\325) 361.61 427.33 P
-0.16 (s chosen number using a) 363.29 427.33 P
3 F
-0.17 (WWFixed) 479.32 427.33 P
1 F
-0.24 (number) 180 414.33 P
-0.24 (. This is a 32-bit length signed number with 16 bits representing the) 215.37 414.33 P
(integer portion and 16 bits representing the fraction. W) 180 401.33 T
(e will only be) 436.13 401.33 T
-0.47 (interested in the integer portion of this number) 180 388.33 P
-0.47 (, and will only accept positive) 395.07 388.33 P
(numbers.) 180 375.33 T
-0.54 (Note that the GenV) 180 355.33 P
-0.54 (alue\325) 268.4 355.33 P
-0.54 (s instance \336elds have the pre\336x \322) 289.89 355.33 P
1 9 Q
-0.49 (GVLI) 439.07 355.33 P
1 10 Q
-0.54 (,\323 an exception) 462.24 355.33 P
(to the usual way of constructing the pre\336x for the names of instance data) 180 342.33 T
(\336elds. GenV) 180 329.33 T
(alue uses this pre\336x instead of \322) 235.38 329.33 T
1 9 Q
(GVI) 382.99 329.33 T
1 10 Q
(\323 to differentiate it from the) 400.15 329.33 T
(GenV) 180 316.33 T
(iew) 205.67 316.33 T
(, which we have yet to encounter but will eventually) 220.68 316.33 T
(.) 460.53 316.33 T
(The) 180 296.33 T
3 F
( MakeWWFixed\050\051) 197.78 296.33 T
1 F
( macro will construct) 285.82 296.33 T
3 F
(WWFixed) 385.45 296.33 T
1 F
( structures) 434.51 296.33 T
(automatically) 180 283.33 T
(.) 242.61 283.33 T
-0.11 (For more information about GenV) 180 263.33 P
-0.11 (alue objects, see \322GenV) 336.06 263.33 P
-0.11 (alue,\323 Chapter) 441.87 263.33 P
-0.11 (8 of) 511.77 263.33 P
(the Object Reference Book.) 180 250.33 T
0 14 Q
(4.6) 142.54 198 T
0 24 Q
-0.52 (MCHRT) 180 198 P
-0.52 (.GOC: Procedural Code) 263.98 198 P
1 10 Q
-0.57 (The last part of our additions is procedural code which we will use to manage) 180 172.33 P
(our data structures and coordinate updates between objects.) 180 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 8
%%Page: "69" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(69) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@method MCProcessClass, MSG_MCP_SET_DATA_ITEM_MONIKER {) 81 642 T
1 10 Q
(W) 180 623.33 T
(e\325re about to give the procedural code by which objects of class) 189.26 623.33 T
3 F
(MCProcessClass) 180 610.33 T
1 F
( will handle the message) 265.19 610.33 T
1 9 Q
(MSG_MCP_SET_DA) 180 597.33 T
(T) 266.84 597.33 T
(A_ITEM_MONIKER) 272.35 597.33 T
1 10 Q
(. W) 359 597.33 T
(e announce this by means of the) 373.82 597.33 T
3 F
(@method) 180 584.33 T
1 F
( keyword, and specify the class whose behavior we\325re describing) 226.73 584.33 T
(and the message which the code will be called in response to.) 180 571.33 T
(Our process object will receive a) 180 551.33 T
1 9 Q
(MSG_MCP_SET_DA) 330.93 551.33 T
(T) 417.77 551.33 T
(A_ITEM_MONIKER) 423.28 551.33 T
1 10 Q
(when the list object needs to know how to draw one of its items. W) 180 538.33 T
(e are) 485.79 538.33 T
(supposed to reply to the message by sending a message back which will) 180 525.33 T
(supply a moniker to draw) 180 512.33 T
(.) 297.43 512.33 T
4 8 Q
0.64 (if \050item==FAKE_LIST_ITEM\051 {) 125 498.67 S
0.64 (optr moniker;) 168.98 488.67 S
0.64 (moniker = ConstructOptr\050OptrToHandle\050list\051,) 168.98 478.67 S
0.64 (OptrToChunk\050@FakeItemMoniker\051\051;) 256.5 468.67 S
0.64 (@send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR\050) 168.98 458.67 S
0.64 (FAKE_LIST_ITEM, moniker\051;}) 256.5 448.67 S
1 10 Q
(W) 180 420.33 T
(e begin by handling the special case in which the list is asking for the) 189.26 420.33 T
-0.21 (moniker of the \322Data:\323 item. The if statement checks to see if we are dealing) 180 407.33 P
(with this case by comparing the \322item\323 argument.) 180 394.33 T
-0.09 (W) 180 374.33 P
-0.09 (e will identify the new moniker by means of an optr) 189.26 374.33 P
-0.09 (, or object pointer) 426.04 374.33 P
-0.09 (. Y) 505.79 374.33 P
-0.09 (ou) 517.19 374.33 P
-0.48 (may recall that an optr is used as a unique identi\336er for an object. It can also) 180 361.33 P
(be used to identify an object, loose moniker) 180 348.33 T
(, or loose chunk in an object or) 377.99 348.33 T
(local memory block. In this case, we\325re going to use the) 180 335.33 T
3 F
(moniker) 435.59 335.33 T
1 F
( optr to) 479.48 335.33 T
(reference the) 180 322.33 T
3 F
(FakeItemMoniker) 243.32 322.33 T
1 F
( moniker) 337.2 322.33 T
(.) 377.76 322.33 T
-0.06 (W) 180 302.33 P
-0.06 (e construct the optr by using the) 189.26 302.33 P
3 F
-0.06 (ConstructOptr\050\051) 341.62 302.33 P
1 F
-0.06 ( macro. This allows us) 425.71 302.33 P
-0.61 (to construct the object pointer corresponding to a memory block and a chunk.) 180 289.33 P
(W) 180 276.33 T
(e know that) 189.26 276.33 T
3 F
(FakeItemMoniker) 246.87 276.33 T
1 F
( will be in the same object memory block) 340.75 276.33 T
(as our dynamic list since they are in the same resource. W) 180 263.33 T
(e get the chunk) 448.54 263.33 T
(part of our constructed optr from the chunk part of) 180 250.33 T
3 F
(@FakeItemMoniker) 417.39 250.33 T
1 F
(,) 518 250.33 T
(which is itself an optr) 180 237.33 T
(.) 279.64 237.33 T
(At this point you may be wondering why we\325re going to all of this trouble to) 180 217.33 T
(construct an optr to reference) 180 204.33 T
3 F
(FakeItemMoniker) 319.24 204.33 T
1 F
( if) 413.12 204.33 T
3 F
(@FakeItemMoniker) 425.16 204.33 T
1 F
-0.44 (is an optr) 180 191.33 P
-0.44 (. In fact, there is no good reason now) 222.45 191.33 P
-0.44 (. This whole block of code could) 387.24 191.33 P
(have read) 180 178.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 9
%%Page: "70" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(70) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(if \050item==FAKE_LIST_ITEM\051 {) 216 641.33 T
(@send) 252 627.33 T
(list::) 216 613.33 T
4 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR) 252 613.33 T
4 10 Q
(\050) 500.4 613.33 T
( FAKE_LIST_ITEM, @FakeItemMoniker\051;) 288 599.33 T
1 F
-0.81 (The only reason we went to all of this trouble of constructing an object pointer) 180 578.33 P
(is in expectation of a time when we support multiple documents. As it) 180 565.33 T
(happens, we\325re going to end up duplicating the resource containing our) 180 552.33 T
(dynamic list, with one duplicate for each document we have open. Then we) 180 539.33 T
(won\325) 180 526.33 T
(t be able to refer to) 200.75 526.33 T
3 F
(@FakeItemMoniker) 291.14 526.33 T
1 F
(, because) 391.75 526.33 T
1 9 Q
(GEOS) 436.39 526.33 T
1 10 Q
( won\325) 462.56 526.33 T
(t be sure) 486.09 526.33 T
(of which one of the duplicate) 180 513.33 T
3 F
(@FakeItemMoniker) 314.82 513.33 T
1 F
(s we want. By) 416.17 513.33 T
(constructing the optr in this way) 180 500.33 T
(, we\325re ready for this case.) 330.19 500.33 T
(The) 180 480.33 T
3 F
(@send) 200.56 480.33 T
1 F
( statement sends a message. Speci\336cally) 232.29 480.33 T
(, we are sending) 417.88 480.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR) 180 467.33 T
1 10 Q
( to) 461.83 467.33 T
3 F
(MCDataList) 180 454.33 T
1 F
(, whose optr we have from the) 242.58 454.33 T
5 F
(list) 383.89 454.33 T
1 F
( argument to our method.) 398.51 454.33 T
(T) 180 434.33 T
(o \336nd out more about) 185.75 434.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR) 180 421.33 T
1 10 Q
(, see \322The List) 461.83 421.33 T
(Objects,\323 Chapter) 180 408.33 T
(1) 264.45 408.33 T
(1 of the Object Reference Book or its entry in) 269.46 408.33 T
(\134) 180 395.33 T
1 9 Q
(PCGEOS) 186.06 395.33 T
1 10 Q
(\134) 224.73 395.33 T
1 9 Q
(INCLUDE) 230.79 395.33 T
1 10 Q
(\134) 275.13 395.33 T
1 9 Q
(OBJECTS) 281.19 395.33 T
1 10 Q
(\134GDListC.) 324.36 395.33 T
1 9 Q
(GOH) 374.32 395.33 T
1 10 Q
(:) 395.82 395.33 T
4 F
(@message void \134) 216 379.33 T
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR\050) 216 365.33 T
(word item, optr moniker\051;) 252 351.33 T
1 F
(The arguments we\325re passing with the message specify that we are setting) 180 330.33 T
(the moniker of the zeroth item of the list and supply the moniker to use.) 180 317.33 T
4 8 Q
0.64 (else /* item > FAKE_LIST_ITEM */ {) 125 303.67 S
0.64 (char monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 168.98 293.67 S
0.64 (word data;) 168.98 283.67 S
0.64 (data = MCListGetDataItem\050item\051;) 168.98 266.67 S
4 9 Q
(LocalFixedToAscii\050monikerString, MakeWWFixed\050data\051, 0\051;) 168.98 249 T
(@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050) 168.98 238 T
( item, monikerString\051;) 344 227 T
(}) 125 216 T
(} /* end of MSG_MCP_SET_DATA_ITEM_MONIKER */) 81 205 T
1 10 Q
(Next we handle the case in which we will supply a moniker for the string) 180 186.33 T
(based upon a number stored in our linked list.) 180 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 10
%%Page: "71" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(71) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(After setting up some local variables, we call) 180 641.33 T
3 F
(MCListGetDataItem\050\051) 389.11 641.33 T
1 F
(, a) 501.87 641.33 T
-0.34 (routine which we have set up elsewhere in the \336le to extract the appropriate) 180 628.33 P
(number from the linked list.) 180 615.33 T
(Next we call) 180 595.33 T
3 F
(LocalFixedT) 239.83 595.33 T
(oAscii\050\051) 304.09 595.33 T
1 F
(, a system routine which takes a) 343.53 595.33 T
3 F
(WWFixed) 180 582.33 T
1 F
( number and constructs an) 229.06 582.33 T
1 9 Q
(ASCII) 355.73 582.33 T
1 10 Q
( string describing that number) 381.72 582.33 T
(.) 522.84 582.33 T
-0.35 (From the name of the routine we know that it is from the localization part of) 180 569.33 P
(the kernel, and that it has been set up to work well in other countries \050i.e.) 180 556.33 T
-0.34 (with other) 180 543.33 P
1 9 Q
-0.31 (DOS) 230.25 543.33 P
1 10 Q
-0.34 ( code pages and foreign alphabets\051. After calling this routine,) 249.93 543.33 P
3 F
(monikerString) 180 530.33 T
1 F
( will be \336lled with an appropriate string.) 256.67 530.33 T
-0.45 (T) 180 510.33 P
-0.45 (o \336nd out about) 185.75 510.33 P
3 F
-0.46 ( LocalFixedT) 256.82 510.33 P
-0.46 (oAscii\050\051) 323.49 510.33 P
1 F
-0.45 (, see "Localization," Chapter) 362.93 510.33 P
-0.45 (8 of the) 495.12 510.33 P
(Concepts book, its entry in the Routines reference, and/or the \336le) 180 497.33 T
(\134) 180 484.33 T
1 9 Q
(PCGEOS) 186.06 484.33 T
1 10 Q
(\134) 224.73 484.33 T
1 9 Q
(INCLUDE) 230.79 484.33 T
1 10 Q
(\134Localize.h which contains the header:) 275.13 484.33 T
4 F
(extern void _pascal LocalFixedToAscii\050) 216 468.33 T
(char *buffer,) 252 454.33 T
(WWFixedAsDWord value,) 252 440.33 T
(word fracDig\051;) 252 426.33 T
1 F
(The \336nal thing we do when handling this message is send a) 180 405.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT) 180 392.33 T
1 10 Q
( message to the) 410.17 392.33 T
3 F
(MCDataList) 180 379.33 T
1 F
( object. This message is similar to the) 242.58 379.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR) 180 366.33 T
1 10 Q
( that we used) 461.83 366.33 T
(above, but takes a string instead of the optr of a visual moniker) 180 353.33 T
(.) 472.47 353.33 T
(Note that we send the message using the) 180 333.33 T
3 F
( @call) 369.66 333.33 T
1 F
( keyword instead of) 398.71 333.33 T
3 F
(@send) 491.5 333.33 T
1 F
(.) 523.23 333.33 T
(When you use) 180 320.33 T
3 F
(@call) 247.59 320.33 T
1 F
(, the present handler won\325) 273.77 320.33 T
(t continue until the) 394.34 320.33 T
3 F
(@call) 486.57 320.33 T
1 F
(\325d) 512.75 320.33 T
-0.28 (message \336nishes processing. When you need to get a return value back from) 180 307.33 P
(the message, you must use) 180 294.33 T
3 F
(@call) 306.5 294.33 T
1 F
(\321if you use) 332.68 294.33 T
3 F
(@send) 389.72 294.33 T
1 F
(, the sent message will) 421.45 294.33 T
-0.68 (just be placed on the recipient object\325) 180 281.33 P
-0.68 (s queue, and your code will just continue) 345.9 281.33 P
-0.61 (on, though the recipient object may not get around to processing the message) 180 268.33 P
(for quite a while.) 180 255.33 T
-0.37 (Here we use an) 180 235.33 P
3 F
-0.38 (@call) 252.59 235.33 P
1 F
-0.37 ( because we\325re passing a pointer to some data stored in) 278.77 235.33 P
(our handler) 180 222.33 T
(\325) 234.99 222.33 T
(s local variable. If we were to) 236.66 222.33 T
3 F
(@send) 373.91 222.33 T
1 F
( the message instead, our) 405.64 222.33 T
(handler might have \336nished before the data list got around to handling the) 180 209.33 T
(message. At that time it would try to use) 180 196.33 T
5 F
(monikerString) 371.52 196.33 T
1 F
(, which would no) 438.73 196.33 T
-0.44 (longer point to anything useful. Using) 180 183.33 P
3 F
-0.45 (@call) 356.11 183.33 P
1 F
-0.44 ( ensures that our local variables) 382.29 183.33 P
(will still be there at the vital time.) 180 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 11
%%Page: "72" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(72) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(extern word _pascal MCListGetDataItem\050word ordinal\051 {) 81 642 T
(word data;) 125 631 T
1 10 Q
-0.83 (Next we\325ll provide the code for the) 180 612.33 P
3 F
-0.86 (MCListGetDataItem\050\051) 334.53 612.33 P
1 F
-0.83 ( routine. W) 447.29 612.33 P
-0.83 (e begin) 496.92 612.33 P
(with a fairly ordinary) 180 599.33 T
1 9 Q
(C) 282.42 599.33 T
1 10 Q
( header for the routine.) 288.92 599.33 T
4 9 Q
(VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 586 T
1 10 Q
(Next we lock a block of our) 180 567.33 T
1 9 Q
(VM) 306.69 567.33 T
1 10 Q
( \336le into memory) 321.68 567.33 T
(. This is the block which we) 398.91 567.33 T
(are using to store our linked list. The) 180 554.33 T
3 F
(VMLock\050\051) 354.47 554.33 T
1 F
( routine updates) 405.21 554.33 T
3 F
-0.57 (dataListBlock) 180 541.33 P
1 F
-0.55 ( \050the) 252.97 541.33 P
3 F
-0.57 (MemHandle) 275.76 541.33 P
1 F
-0.55 ( pointed to by) 338.53 541.33 P
3 F
-0.57 (dataListBlockPtr) 401.89 541.33 P
1 F
-0.55 (\051 so that) 491.9 541.33 P
-0.57 (it will act as a handle to the block of memory as stored on the heap.) 180 528.33 P
-0.57 (For more) 487.14 528.33 P
(information about) 180 515.33 T
3 F
(VMLock\050\051) 266.31 515.33 T
1 F
(, see "V) 317.05 515.33 T
(irtual Memory) 350.69 515.33 T
(," Chapter) 416.8 515.33 T
(18 of the) 466.99 515.33 T
(Concepts book, its entry in the appropriate reference book, and/or its entry) 180 502.33 T
(in \134) 180 489.33 T
1 9 Q
(PCGEOS) 198.1 489.33 T
1 10 Q
(\134) 236.77 489.33 T
1 9 Q
(INCLUDE) 242.83 489.33 T
1 10 Q
(\134) 287.17 489.33 T
1 9 Q
(VM) 293.23 489.33 T
1 10 Q
(.h:) 308.22 489.33 T
4 F
(extern void * _pascal VMLock\050) 216 473.33 T
(VMFileHandle file,) 396 473.33 T
(VMBlockHandle block,) 396 459.33 T
(MemHandle *mh\051;) 396 445.33 T
1 F
-0.05 (Now that our block of memory is locked into place on the heap, we\325ll be able) 180 424.33 P
(to use pointers to it. W) 180 411.33 T
(e have previously set up) 284.46 411.33 T
3 F
(dataListHead) 398.73 411.33 T
1 F
( to be a) 469.28 411.33 T
3 F
-0.38 (ChunkHandle) 180 398.33 P
1 F
-0.37 ( which references the \336rst item in our list \050we will see this in) 252.59 398.33 P
(a later message handler\051.) 180 385.33 T
4 9 Q
(for\050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 125 372 T
( ordinal > 1;) 212.5 361 T
( --ordinal\051) 212.5 350 T
( {) 125 339 T
(tempListItem = tempNode->LN_next;) 168.98 328 T
(tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 317 T
( }) 125 306 T
1 10 Q
(Here we traverse the linked list until we reach the) 180 287.33 T
5 F
(N) 416.32 287.33 T
1 F
(th item, where) 424.47 287.33 T
5 F
(N) 494.85 287.33 T
1 F
( is) 503 287.33 T
(speci\336ed by the ordinal argument to) 180 274.33 T
3 F
(MCListGetDataItem\050\051) 352.45 274.33 T
4 9 Q
(.) 465.21 274.33 T
(The) 180 254.33 T
3 10 Q
(LMemDerefHandles\050\051) 201.6 254.33 T
1 F
(macro takes a memory block handle and a) 318.66 254.33 T
(chunk handle and returns a pointer to the referenced chunk. W) 180 241.33 T
(e use this to) 472.22 241.33 T
(access the) 180 228.33 T
3 F
(ListNode) 229.26 228.33 T
1 F
( structure within each chunk. For more information) 276.29 228.33 T
(about this and other local memory routines and macros, see the Concepts) 180 215.33 T
(manual and the appropriate reference.) 180 202.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 12
%%Page: "73" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(73) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(data = tempNode->LN_data;) 125 642 T
(VMUnlock\050dataListBlock\051;) 125 631 T
(return data;) 125 620 T
(}) 81 609 T
1 10 Q
-0.15 (Having procured a pointer to the structure containing the number we want,) 180 590.33 P
(we retrieve its data.) 180 577.33 T
(Next we unlock the) 180 557.33 T
1 9 Q
(VM) 272.05 557.33 T
1 10 Q
( block by means of the) 287.04 557.33 T
3 F
(VMUnlock\050\051) 392.25 557.33 T
1 F
( routine. At this) 454.47 557.33 T
-0.15 (point, the memory manager may move or discard the copy that was brought) 180 544.33 P
-0.03 (into memory) 180 531.33 P
-0.03 (. Because the memory manager may move or discard the block,) 237.38 531.33 P
(all pointers to the block are now unreliable.) 180 518.33 T
-0.23 (W) 180 498.33 P
-0.23 (e must call) 189.26 498.33 P
3 F
-0.23 (VMUnlock\050\051) 241.74 498.33 P
1 F
-0.23 (\321the block must be unlocked once for every time) 303.96 498.33 P
(it\325) 180 485.33 T
(s locked. Also it\325) 188.71 485.33 T
(s a bad idea to leave blocks locked on the heap\321it would) 262.43 485.33 T
(hinder the memory manager) 180 472.33 T
(.) 311.67 472.33 T
-0.44 (The fact that we have to unlock the block before exiting the handler explains) 180 452.33 P
-0.18 (why we have to store our return value in a variable as we did instead of just) 180 439.33 P
(returning the value directly from the pointed-at structure:) 180 426.33 T
4 F
(VMUnlock\050dataListBlock\051;) 216 410.33 T
(return tempNode->LN_data;) 216 396.33 T
1 F
(After we call) 180 375.33 T
3 F
(VMUnlock\050\051) 241.3 375.33 T
1 F
(, the memory manager is free to move or discard) 303.52 375.33 T
(our memory block, and we can\325) 180 362.33 T
(t rely on pointers to structures within that) 322.06 362.33 T
(block. Thus we had to extract the data before unlocking the block.) 180 349.33 T
4 9 Q
(@method MCListInsertDataItem, MCProcessClass, MSG_MCP_INSERT_DATA_ITEM {) 81 336 T
1 10 Q
(This method header is slightly different than the header for) 180 317.33 T
1 9 Q
(MSG_MCP_SET_DA) 180 304.33 T
(T) 266.84 304.33 T
(A_ITEM_MONIKER) 272.35 304.33 T
1 10 Q
( in that we\325re including a routine) 359 304.33 T
-0.61 (name:) 180 291.33 P
3 F
-0.63 (MCListInsertDataItem\050\051) 210.51 291.33 P
1 F
-0.61 (. This isn\325) 336.42 291.33 P
-0.61 (t especially useful, but it came in) 379.86 291.33 P
-0.66 (handy for an intermediate stage of the construction of this application. When) 180 278.33 P
-0.35 (\336rst testing the linked list code, no triggers had been added yet. Instead, the) 180 265.33 P
-0.45 (application just added some items automatically when starting up by calling) 180 252.33 P
(this method as a routine.) 180 239.33 T
-0.12 (This message handler was set up so that it could be called as a routine from) 180 219.33 P
(other parts of the program. There was a routine prototype:) 180 206.33 T
4 F
(extern void _pascal MCListInsertDataItem\050) 216 190.33 T
(optr oself,) 360 176.33 T
(MCProcessMessages message\051) 360 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 13
%%Page: "74" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(74) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The oself and message arguments are arguments that all methods expect,) 180 641.33 T
(but since our method didn\325) 180 628.33 T
(t use these parameters, we were safe in passing) 302.79 628.33 T
1 9 Q
(NULL) 180 615.33 T
1 10 Q
( and zero when calling the routine:) 206.68 615.33 T
4 F
(MCListInsertDataItem\050NULL, 0\051;) 216 599.33 T
1 F
(Our application doesn\325) 180 578.33 T
(t ever call this message as a routine any more, so we) 283.72 578.33 T
(should probably remove the routine name to make this header more) 180 565.33 T
(consistent with the others. Actually) 180 552.33 T
(, we only left it in as an excuse to) 343.53 552.33 T
(demonstrate how you might call a message handler as a routine.) 180 539.33 T
4 9 Q
(ChunkHandle) 125 526 T
(newListItem;) 212.5 526 T
(ListNode) 125 515 T
(*newNode;) 212.5 515 T
(WWFixedAsDWord) 125 504 T
(value;) 212.5 504 T
(word) 125 493 T
(ordinal;) 212.5 493 T
-0.6 (The) 180 474.33 P
3 10 Q
-0.32 (WWFixedAsDW) 201 474.33 P
-0.32 (ord) 280.24 474.33 P
4 9 Q
-0.6 ( structure is a 32-bit field which contains) 298.21 474.33 P
(the same information as a) 180 461.33 T
3 10 Q
(WWFixed) 320.4 461.33 T
4 9 Q
( structure: a number with 16) 369.46 461.33 T
(bits of integer and 16 bits of fraction.) 180 448.33 T
(ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 435 T
1 10 Q
-0.44 (The \336rst thing we\325re doing in this message handler is send another message.) 180 416.33 P
(W) 180 403.33 T
(e\325re using the) 189.26 403.33 T
3 F
(@call) 254.45 403.33 T
1 F
( keyword to send the message because we need) 280.63 403.33 T
1 9 Q
(MSG_GEN_ITEM_GROUP_GET_SELECTION) 180 390.33 T
1 10 Q
(\325) 377.68 390.33 T
(s return value.) 379.35 390.33 T
-0.02 (W) 180 370.33 P
-0.02 (e are sending this message to ask) 189.26 370.33 P
3 F
-0.02 (MCDataList) 346.54 370.33 P
1 F
-0.02 ( where in the list the user) 409.11 370.33 P
(wants to insert the new item. W) 180 357.33 T
(e will insert the new item below the item) 327.62 357.33 T
(where the user has most recently clicked \050the current selection\051.) 180 344.33 T
1 9 Q
(MSG_GEN_ITEM_GROUP_GET_SELECTION) 180 331.33 T
1 10 Q
( will return the number of the) 377.68 331.33 T
(item most recently clicked upon. This value is zero-based. T) 180 318.33 T
(o learn more) 454.48 318.33 T
(about this message, see its entry in the Objects reference or in) 180 305.33 T
(\134) 180 292.33 T
1 9 Q
(PCGEOS) 186.06 292.33 T
1 10 Q
(\134) 224.73 292.33 T
1 9 Q
(INCLUDE) 230.79 292.33 T
1 10 Q
(\134GItemGC.) 275.13 292.33 T
1 9 Q
(GOH.) 328.6 292.33 T
1 10 Q
-0.14 (Note that while using \322MCDataList\323 as the recipient of our message is easy) 180 272.33 P
-0.14 (,) 525.58 272.33 P
(it\325) 180 259.33 T
(s also a shortcut which forces us to be single-launchable instead of) 188.71 259.33 T
(multi-launchable. If the user were allowed to have two copies of the) 180 246.33 T
(application running at once, then it wouldn\325) 180 233.33 T
(t be clear which application\325) 382.25 233.33 T
(s) 511.16 233.33 T
3 F
-0.22 (MCDataList) 180 220.33 P
1 F
-0.21 ( object we should send the message to. W) 242.58 220.33 P
-0.21 (e would have to call a) 430.01 220.33 P
(special kernel routine to get the handle of the memory block containing the) 180 207.33 T
(correct resource.) 180 194.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 14
%%Page: "75" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(75) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 642 T
1 10 Q
-0.78 (Next we use) 180 623.33 P
3 F
-0.8 (@call) 236.94 623.33 P
1 F
-0.78 ( to send another message. Again we\325re using) 263.12 623.33 P
3 F
-0.8 (@call) 464.52 623.33 P
1 F
-0.78 ( because) 490.7 623.33 P
-0.22 (we need a return value. This time that return value will be the number that) 180 610.33 P
(the user wants to use as the data for the new data item.) 180 597.33 T
4 9 Q
(VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 584 T
(newListItem = LMemAlloc\050dataListBlock, sizeof\050ListNode\051\051;) 125 573 T
1 10 Q
(After locking down the VM block as we did in) 180 554.33 T
3 F
(MCListGetDataItem\050\051) 392.06 554.33 T
1 F
(, we) 504.82 554.33 T
(use) 180 541.33 T
3 F
(LMemAlloc\050\051) 198.52 541.33 T
1 F
( which allocates a new chunk in our memory block. T) 265 541.33 T
(o) 508.93 541.33 T
(learn more about the) 180 528.33 T
3 F
(LMemAlloc\050\051) 282.45 528.33 T
1 F
( routine, see its entry in the Concepts) 348.93 528.33 T
(book or the Routines reference.) 180 515.33 T
4 9 Q
(newNode = LMemDerefHandles\050dataListBlock, newListItem\051;) 125 502 T
(newNode->LN_data = WWFixedToInt\050value\051;) 125 491 T
1 10 Q
-0.03 (Having dereferenced the new chunk\325) 180 472.33 P
-0.03 (s handle, we use the pointer so that we) 348.41 472.33 P
(can access its) 180 459.33 T
5 9 Q
(LN) 244.82 459.33 T
5 10 Q
(_data) 258.16 459.33 T
1 F
( \336eld and \336ll it in with a number) 284.27 459.33 T
(.) 434.49 459.33 T
4 9 Q
(if \050ordinal==FAKE_LIST_ITEM\051) 125 446 T
( {) 125 435 T
(newNode->LN_next = dataListHead;) 168.98 424 T
(dataListHead = newListItem;) 168.98 413 T
( }) 125 402 T
1 10 Q
-0.46 (If we\325re inserting the new item at the head of the list, we only have to update) 180 383.33 P
(the) 180 370.33 T
3 F
(dataListHead) 197.78 370.33 T
1 F
( global variable and the new node\325) 268.33 370.33 T
(s) 425.41 370.33 T
5 9 Q
(LN) 432.82 370.33 T
5 10 Q
(_next) 446.16 370.33 T
1 F
( \336eld.) 470.23 370.33 T
4 9 Q
(else) 125 357 T
( {) 168.98 346 T
(word count = ordinal;) 168.98 335 T
(for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 324 T
( count > 1;) 212.5 313 T
( --count\051) 212.5 302 T
( {) 168.98 291 T
(tempListItem = tempNode->LN_next;) 212.5 280 T
(tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 212.5 269 T
( }) 168.98 258 T
(newNode->LN_next = tempNode->LN_next;) 168.98 247 T
(tempNode->LN_next = newListItem;) 168.98 236 T
( }) 125 225 T
1 10 Q
(Otherwise, we\325ll traverse the list as before and then insert the new item by) 180 206.33 T
(\336lling in the) 180 193.33 T
5 9 Q
(LN) 239.64 193.33 T
5 10 Q
(_next) 252.98 193.33 T
1 F
( \336elds of the appropriate nodes.) 277.05 193.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 15
%%Page: "76" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(76) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(VMDirty\050dataListBlock\051;) 125 642 T
(VMUnlock\050dataListBlock\051;) 125 631 T
(@send MCDataList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS\050ordinal+1, 1\051;) 125 620 T
(@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal+1,) 125 609 T
(FALSE\051;) 476 598 T
4 8 Q
0.64 (}) 81 585.67 S
1 10 Q
(Having updated the linked list structure, we alert the) 180 567.33 T
3 F
(GenDynamicList) 431.14 567.33 T
1 F
(that it has gained another item by sending it) 180 554.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_ADD_ITEMS) 180 541.33 T
1 10 Q
(, alerting it that we are adding one) 362.5 541.33 T
(item and telling it where that item appears in the list.) 180 528.33 T
(Next we will change the selection, so that the new item of the list will be) 180 508.33 T
(highlighted. T) 180 495.33 T
(o do this we send) 244.46 495.33 T
3 F
(MCDataList) 326.14 495.33 T
1 F
( a) 388.72 495.33 T
1 9 Q
(MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION) 180 482.33 T
1 10 Q
( message.) 417.02 482.33 T
4 9 Q
(@method MCProcessClass, MSG_MCP_DELETE_DATA_ITEM {) 81 469 T
(word) 125 458 T
(ordinal;) 212.5 458 T
(word) 125 447 T
(count;) 212.5 447 T
(ChunkHandle) 125 436 T
(oldItem;) 212.5 436 T
(ListNode) 125 425 T
(*oldNode;) 212.5 425 T
(ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 403 T
(if \050ordinal==FAKE_LIST_ITEM\051 return;) 125 392 T
(VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 381 T
(if \050ordinal == 1\051 {) 125 370 T
(oldNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 359 T
(tempListItem = oldNode->LN_next;) 168.98 348 T
(LMemFreeHandles\050dataListBlock, dataListHead\051;) 168.98 337 T
(dataListHead = tempListItem;) 168.98 326 T
( }) 125 315 T
1 10 Q
(By this time, you can probably understand most of what this message) 180 296.33 T
(handler is doing. W) 180 283.33 T
(e know that objects of class) 269.64 283.33 T
3 F
(MCProcessClass) 397.81 283.33 T
1 F
( will use) 483 283.33 T
(this code to handle) 180 270.33 T
1 9 Q
(MSG_MCP_DELETE_DA) 269.64 270.33 T
(T) 376.81 270.33 T
(A_ITEM) 382.32 270.33 T
1 10 Q
( messages from the) 417.98 270.33 T
-0.04 (header line. Y) 180 257.33 P
-0.04 (ou can recognize the) 243.44 257.33 P
3 F
-0.04 (@call) 339.93 257.33 P
1 F
-0.04 ( as a special way to send messages.) 366.11 257.33 P
(Y) 180 244.33 T
(ou are familiar with) 185.93 244.33 T
3 F
(VMLock\050\051) 281.32 244.33 T
1 F
(and) 337.46 244.33 T
3 F
(LMemDerefHandles\050\051) 360.27 244.33 T
4 9 Q
(.) 471.93 244.33 T
1 10 Q
(In fact the only thing new here is the) 180 224.33 T
3 F
(LMemFreeHandles\050\051) 353.9 224.33 T
1 F
( macro, which) 460.56 224.33 T
-0.04 (will free up the memory which was associated with the chunk which we are) 180 211.33 P
(deleting.) 180 198.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 16
%%Page: "77" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(77) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(else {) 125 642 T
(for \050tempNode=LMemDerefHandles\050dataListBlock, dataListHead\051,) 168.98 631 T
( count= ordinal;) 212.5 620 T
( count > 2;) 212.5 609 T
( --count\051) 212.5 598 T
( {) 168.98 587 T
(tempListItem = tempNode->LN_next;) 212.5 576 T
(tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 212.5 565 T
( }) 168.98 554 T
(oldItem = tempNode->LN_next;) 168.98 543 T
(oldNode = LMemDerefHandles\050dataListBlock, oldItem\051;) 168.98 532 T
(tempNode->LN_next = oldNode->LN_next;) 168.98 521 T
(LMemFreeHandles\050dataListBlock, oldItem\051;) 168.98 510 T
( }) 125 499 T
(VMDirty\050dataListBlock\051;) 125 488 T
(VMUnlock\050dataListBlock\051;) 125 477 T
1 10 Q
(Again, you should be able to \336gure out what is going on here. W) 180 458.33 T
(e are) 474.12 458.33 T
(traversing the list, then removing an node from the list by causing the) 180 445.33 T
(previous node\325) 180 432.33 T
(s) 245.74 432.33 T
5 9 Q
(LN) 255.77 432.33 T
5 10 Q
(_next) 269.11 432.33 T
1 F
(handle to reference the node after the) 298.58 432.33 T
-0.48 (soon-to-be-deleted node. Again, we use the) 180 419.33 P
3 F
-0.49 (LMemFreeHandles\050\051) 378.04 419.33 P
1 F
-0.48 (macro to) 489.17 419.33 P
(free up the memory we had allocated for the chunk.) 180 406.33 T
4 9 Q
(@send MCDataList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS\050ordinal, 1\051;) 125 393 T
(@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal-1,) 125 382 T
(FALSE\051;) 476 371 T
(}) 81 360 T
1 10 Q
(W) 180 341.33 T
(e \336nish the handler by alerting) 189.26 341.33 T
3 F
(MCDataList) 335.76 341.33 T
1 F
( that it has lost an item and) 398.34 341.33 T
(then tell it to update its selection.) 180 328.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 17
%%Page: "78" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(78) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@method MCProcessClass, MSG_MCP_SET_DATA_ITEM {) 81 642 T
(word) 125 631 T
(ordinal;) 212.5 631 T
(WWFixedAsDWord) 125 620 T
(value;) 212.5 620 T
(char) 125 609 T
(monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 212.5 609 T
(word) 125 598 T
(count;) 212.5 598 T
(ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 576 T
(if \050ordinal == FAKE_LIST_ITEM\051 return;) 125 565 T
(value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 554 T
(VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 543 T
(for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051,) 125 532 T
( count = ordinal - 1;) 168.98 521 T
( count > 0;) 168.98 510 T
( --count\051) 168.98 499 T
( {) 125 488 T
(tempListItem = tempNode->LN_next;) 168.98 477 T
(tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 466 T
( }) 125 455 T
(tempNode->LN_data = WWFixedToInt\050value\051;) 125 444 T
(VMDirty\050dataListBlock\051;) 125 433 T
(VMUnlock\050dataListBlock\051;) 125 422 T
(LocalFixedToAscii\050monikerString, value, 0\051;) 125 411 T
(@call MCDataList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050) 125 400 T
(ordinal, monikerString\051;) 388 389 T
(}) 81 378 T
1 10 Q
(There is probably nothing in this method that you do not recognize from) 180 359.33 T
(others we have looked at in this chapter) 180 346.33 T
(. Perhaps the only thing worth) 364.1 346.33 T
(pointing out here is that we had to alert) 180 333.33 T
3 F
(MCDataList) 367.44 333.33 T
1 F
( that one of its items) 430.02 333.33 T
(had changed, and that we did so using) 180 320.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT) 180 307.33 T
1 10 Q
(.) 409.25 307.33 T
4 9 Q
(@method MCProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {) 81 294 T
1 10 Q
(If you look back to our class de\336nition, you may note that there is no) 180 275.33 T
1 9 Q
(MSG_GEN_PROCESS_OPEN_APPLICA) 180 262.33 T
(TION) 351.35 262.33 T
1 10 Q
(. As you may have guessed from) 375.35 262.33 T
(the message\325) 180 249.33 T
(s name,) 238.53 249.33 T
3 F
(MCProcessClass) 277.06 249.33 T
1 F
( inherits this message from) 362.25 249.33 T
3 F
(GenProcessClass) 180 236.33 T
1 F
(. The de\336nition of this message is in) 268.52 236.33 T
1 9 Q
(INCLUDE\134GPROCC.GOH) 180 223.33 T
1 10 Q
(:) 293.29 223.33 T
4 F
(@message void MSG_GEN_PROCESS_OPEN_APPLICATION\050) 216 207.33 T
(AppAttachFlags) 324 193.33 T
(attachFlags,) 432 193.33 T
(MemHandle) 324 179.33 T
(launchBlock,) 432 179.33 T
(MemHandle) 324 165.33 T
(extraState\051;) 432 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 18
%%Page: "79" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: Procedural Code) 351.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(79) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(As it happens, we won\325) 180 641.33 T
(t be using the parameters to this message, but you) 285.21 641.33 T
(may \336nd it reassuring to know that they have been de\336ned somewhere.) 180 628.33 T
(Our process object will automatically receive this message when the) 180 608.33 T
(application is opening, and we wish to customize our behavior in handling) 180 595.33 T
(this message so that we can initialize our data structures.) 180 582.33 T
-0.27 (Handling a message de\336ned by a superclass in this manner is often referred) 180 562.33 P
(to as \322intercepting\323 the message.) 180 549.33 T
4 9 Q
(char fileName[] = \322MchtDATA\323) 125 536 T
(dataFile=VMOpen\050fileName,) 125 525 T
(VMAF_FORCE_READ_WRITE | VMAF_FORCE_DENY_WRITE,) 212.5 514 T
(VMO_CREATE_TRUNCATE, 0\051;) 212.5 503 T
1 10 Q
-0.19 (Since our data structure will reside within a) 180 484.33 P
1 9 Q
-0.17 (VM) 385.87 484.33 P
1 10 Q
-0.19 ( \336le, the \336rst thing we must) 400.86 484.33 P
-0.57 (do is initialize the \336le. The) 180 471.33 P
3 F
-0.58 (VMOpen\050\051) 302.74 471.33 P
1 F
-0.57 ( routine will open the \336le, creating the) 355.51 471.33 P
(\336le if it did not already exist. W) 180 458.33 T
(e are passing the) 325.77 458.33 T
1 9 Q
(VM) 407.08 458.33 T
1 10 Q
( access \337ags) 422.07 458.33 T
1 9 Q
(VMAF_FORCE_READ_WRITE) 180 445.33 T
1 10 Q
( and) 311.48 445.33 T
1 9 Q
(VMAF_FORCE_DENY_WRITE) 334.45 445.33 T
1 10 Q
( so that we) 466.61 445.33 T
(will be able to read and write to the \336le while we have it open and to make) 180 432.33 T
-0.23 (sure that nothing else will try to change the \336le while we\325re working with it.) 180 419.33 P
(The) 180 406.33 T
1 9 Q
(VMO_CREA) 200.56 406.33 T
(TE_TRUNCA) 252.55 406.33 T
(TE) 309.23 406.33 T
1 10 Q
( option says that we want to create the \336le if) 321.73 406.33 T
(it doesn\325) 180 393.33 T
(t exist yet, and also that we want its contents emptied\321we don\325) 218.16 393.33 T
(t) 512.67 393.33 T
(want to preserve the contents of the \336le from the last time we saved.) 180 380.33 T
(Actually) 180 360.33 T
(, it should strike you as a bit strange that we aren\325) 217.78 360.33 T
(t preserving the) 450.99 360.33 T
(values in the) 180 347.33 T
1 9 Q
(VM) 242.42 347.33 T
1 10 Q
( \336le. These \336les are normally used for the express purpose) 257.41 347.33 T
-0.59 (of saving documents. Eventually we will want to be able to save our data, but) 180 334.33 P
-0.18 (in the early stages of constructing this program, our program crashed often,) 180 321.33 P
-0.04 (leaving behind a corrupt) 180 308.33 P
1 9 Q
-0.03 (VM) 295.98 308.33 P
1 10 Q
-0.04 ( \336le. By truncating our \336le when opening it, we) 310.97 308.33 P
-0.5 (safely ignore the contents of the) 180 295.33 P
1 9 Q
-0.45 (VM) 327.22 295.33 P
1 10 Q
-0.5 ( \336le. Eventually) 342.21 295.33 P
-0.5 (, we should probably stop) 413.64 295.33 P
(erasing the \336le\325) 180 282.33 T
(s contents so that this \336le can save something.) 250.75 282.33 T
4 9 Q
(dataFileBlock = VMAllocLMem\050dataFile, LMEM_TYPE_GENERAL, 0\051;) 125 269 T
1 10 Q
(The) 180 250.33 T
3 F
(VMAllocLMem\050\051) 200.56 250.33 T
1 F
( routine allocates a) 284.44 250.33 T
1 9 Q
(VM) 375.2 250.33 T
1 10 Q
( block within our) 390.19 250.33 T
1 9 Q
(VM) 471.13 250.33 T
1 10 Q
( \336le and) 486.13 250.33 T
-0.74 (initializes it so that it can act as a local memory block. Local memory is a very) 180 237.33 P
-0.13 (useful mechanism, and there are several types of specialized memory heaps) 180 224.33 P
(available. By passing) 180 211.33 T
1 9 Q
(LMEM_TYPE_GENERAL) 280.96 211.33 T
1 10 Q
( we signal that we want the) 390.62 211.33 T
(most general type of local memory block, storing just chunks of data.) 180 198.33 T
(The \336nal argument to) 180 178.33 T
3 F
(VMAllocLMem\050\051) 284.09 178.33 T
1 F
( allows us to specify an area at the) 367.97 178.33 T
(start of the block to act as a header) 180 165.33 T
(. Since we don\325) 341.7 165.33 T
(t have any header) 409.31 165.33 T
(information to store, we pass zero here.) 180 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 19
%%Page: "80" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(80) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@callsuper\050\051;) 125 642 T
(}) 81 631 T
1 10 Q
-0.5 (This) 180 612.33 P
3 F
-0.52 (@callsuper\050\051) 202.84 612.33 P
1 F
-0.5 ( statement may appear rather mysterious. Y) 266.24 612.33 P
-0.5 (ou recall that) 467.88 612.33 P
3 F
(MCProcessClass) 180 599.33 T
1 F
( inherits) 265.19 599.33 T
1 9 Q
(MSG_GEN_PROCESS_OPEN_APPLICA) 307.23 599.33 T
(TION) 478.58 599.33 T
1 10 Q
( from) 502.58 599.33 T
3 F
-0.76 (GenProcessClass) 180 586.33 P
1 F
-0.74 (. However) 268.52 586.33 P
-0.74 (, we don\325) 313.52 586.33 P
-0.74 (t know exactly how) 351.88 586.33 P
3 F
-0.76 (GenProcessClass) 440.44 586.33 P
1 F
-0.57 (handles this message. But we do want to make sure that) 180 573.33 P
3 F
-0.59 (GenProcessClass) 438.23 573.33 P
1 F
-0.57 (\325) 526.75 573.33 P
(message handler for this message is called eventually; it probably does) 180 560.33 T
(something important. The) 180 547.33 T
3 F
(@callsuper\050\051) 303.72 547.33 T
1 F
( statement calls the message) 367.13 547.33 T
(handler of our superclass; in this case, it will invoke) 180 534.33 T
3 F
(GenProcessClass) 423.18 534.33 T
1 F
(\325) 511.7 534.33 T
(handler) 180 521.33 T
(. Note that our arguments will automatically be passed on to the) 215.37 521.33 T
(superclass\325 handler) 180 508.33 T
(.) 268.52 508.33 T
4 9 Q
(@method MCProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {) 81 495 T
(@send MCDataList::MSG_GEN_DYNAMIC_LIST_INITIALIZE\0501\051;) 125 484 T
(VMClose\050dataFile, FALSE\051;) 125 473 T
(@callsuper\050\051;) 125 462 T
(}) 81 451 T
1 10 Q
(W) 180 432.33 T
(e are changing the way our application handles another) 189.26 432.33 T
3 F
(GenProcess) 449.66 432.33 T
1 F
(message, namely) 180 419.33 T
1 9 Q
(MSG_GEN_PROCESS_CLOSE_APPLICA) 261.5 419.33 T
(TION) 437.68 419.33 T
1 10 Q
(. Our process) 461.69 419.33 T
(object will automatically receive this message when the application is) 180 406.33 T
(shutting down. Looking in) 180 393.33 T
1 9 Q
(INCLUDE\134GPROCC.GOH) 304.28 393.33 T
1 10 Q
(, we can \336nd out this) 417.57 393.33 T
(message\325) 180 380.33 T
(s parameters:) 220.75 380.33 T
4 F
(@message MemHandle) 216 364.33 T
4 9 Q
(MSG_GEN_PROCESS_CLOSE_APPLICATION) 330 364.33 T
4 10 Q
(\050\051;) 508.2 364.33 T
1 F
(First we send a) 180 343.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_INITIALIZE) 253.72 343.33 T
1 10 Q
( message to) 433.38 343.33 T
3 F
-0.61 (MCDataList) 180 330.33 P
1 F
-0.59 (. Since we will be tossing out our list of data when we next open) 242.58 330.33 P
(the application, we are sending this message so that the list will go back to) 180 317.33 T
(having just one item.) 180 304.33 T
-0.41 (Next we close the) 180 284.33 P
1 9 Q
-0.37 (VM) 261.9 284.33 P
1 10 Q
-0.41 ( \336le. W) 276.9 284.33 P
-0.41 (e use the) 307.94 284.33 P
3 F
-0.42 (VMClose\050\051) 350.8 284.33 P
1 F
-0.41 ( routine, specifying that we) 404.13 284.33 P
-0.74 (will ignore any errors in closing our \336le\321since we\325re going to truncate the \336le) 180 271.33 P
-0.35 (when we re-open the \336le, we probably don\325) 180 258.33 P
-0.35 (t care that much about errors now) 373.29 258.33 P
-0.35 (.) 528.22 258.33 P
-0.28 (Note that though) 180 238.33 P
1 9 Q
-0.25 (MSG_GEN_PROCESS_CLOSE_APPLICA) 261.57 238.33 P
-0.25 (TION) 437.75 238.33 P
1 10 Q
-0.28 ( is supposed to) 461.76 238.33 P
-0.06 (return a MemHandle, we don\325) 180 225.33 P
-0.06 (t have a) 317.92 225.33 P
3 F
-0.06 (return) 357.57 225.33 P
1 F
-0.06 ( statement. Depending on the) 391.65 225.33 P
(compiler) 180 212.33 T
(, we may return the value of the) 219.07 212.33 T
3 F
( @callsuper) 367.42 212.33 T
1 F
( automatically) 425.92 212.33 T
(, just) 491.31 212.33 T
-0.55 (because it was the last statement in our handler) 180 199.33 P
-0.55 (. However) 398.39 199.33 P
-0.55 (, if we weren\325) 443.57 199.33 P
-0.55 (t sure) 502.48 199.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 20
%%Page: "81" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(81) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.27 (about the compiler) 180 641.33 P
-0.27 (, or if the) 265.21 641.33 P
3 F
-0.28 (@callsuper\050\051) 308.96 641.33 P
1 F
-0.27 ( were not to be the last statement,) 372.37 641.33 P
(then we would want an explicit) 180 628.33 T
3 F
(return) 327.25 628.33 T
1 F
( statement:) 361.33 628.33 T
4 F
(MemHandle retHandle;) 216 612.33 T
(\311) 216 598.33 T
(retHandle = @callsuper\050\051;) 216 584.33 T
(return retHandle;) 216 570.33 T
0 14 Q
(4.7) 142.54 517 T
0 24 Q
(Swat: Breakpoints and More) 180 517 T
1 10 Q
-0.49 (Now that our application has some procedural code, we\325ll be able to use Swat) 180 491.33 P
-0.14 (for some of the more traditional uses of a debugger: setting breakpoints and) 180 478.33 P
(stepping through code.) 180 465.33 T
0 12 Q
(If Y) 180 439 T
(ou Are Using W) 197.78 439 T
(indows) 287.02 439 T
1 10 Q
-0.41 (Swat should already be attached. Exit the old version your application if you) 180 417.33 P
-0.3 (are running it. Use the) 180 404.33 P
3 F
-0.31 (run) 287.39 404.33 P
1 F
-0.3 ( command to run your new application. The next) 306.28 404.33 P
-0.13 (page of documentation doesn\325) 180 391.33 P
-0.13 (t really apply to you; skip down to the heading) 315.19 391.33 P
(that says \322When Swat is Ready\323.) 180 378.33 T
-0.16 (\050If Swat isn\325) 180 358.33 P
-0.16 (t attached, start it by double-clicking on the Swat program item) 235.26 358.33 P
(in the) 180 345.33 T
1 9 Q
(GEOS) 209.82 345.33 T
(SDK) 238.77 345.33 T
1 10 Q
( program group.\051) 258.45 345.33 T
0 12 Q
(If Y) 180 319 T
(ou Are Using Just the DOS Prompt) 197.78 319 T
1 10 Q
(Invoke Swat as before: have the) 180 297.33 T
3 F
(pccom) 330.03 297.33 T
1 F
( tool running from the) 363.56 297.33 T
1 9 Q
(GEOSEC) 468.56 297.33 T
1 10 Q
(directory on the target machine and type) 180 284.33 T
3 F
(swat -r) 371.86 284.33 T
1 F
( at the) 407.51 284.33 T
1 9 Q
(DOS) 440.3 284.33 T
1 10 Q
( prompt on the) 459.97 284.33 T
(host machine.) 180 271.33 T
4 9 Q
(Swat version 2.0 \050Jan 20 1993 21:06:13\051.) 81 258 T
(Using the trunk version of PC/GEOS.) 81 247 T
(Looking for \322loader\323...C:\134PCGEOS/Loader/LOADEREC.EXE) 81 236 T
(Sourcing swat.tcl...done) 81 225 T
(PC Attached) 81 214 T
(Stopped in LoadGeos, address 0c6ah:0007h) 81 203 T
(LoadGeos: CLD ;DF=0) 81 192 T
(\050loader:0\051 1 =>) 81 181 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 21
%%Page: "82" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(82) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(As it did before, Swat halts while) 180 641.33 T
1 9 Q
(GEOS) 336.15 641.33 T
1 10 Q
( is still loading on the host machine) 362.32 641.33 T
(to give us a chance to enter any early commands. W) 180 628.33 T
(e don\325) 418.73 628.33 T
(t have any special) 445.22 628.33 T
(commands to enter) 180 615.33 T
(, so we will continue.) 267.41 615.33 T
4 9 Q
(\050loader:0\051 1 =>) 81 602 T
6 F
(c) 167.4 602 T
4 F
(Looking for \322geos) 81 591 T
(Eker\323...C:/PCGEOS/Library/Kernel/geosec.geo) 189 591 T
(Looking for \322ms4) 81 580 T
(Eifs\323...C:/PCGEOS/Driver/IFS/DOS/MS4/ms4ec.geo) 189 580 T
(Thread 1 created for patient geos) 81 569 T
(Thread 2 created for patient geos) 81 558 T
(Looking for \322vidmem) 81 547 T
(Edrv\323...C:/PCGEOS/Driver/Video/Dumb/VidMem/vidmemec.geo) 189 547 T
(Looking for \322swap) 81 536 T
(Elib\323...C:/PCGEOS/Library/Swap/swapec.geo) 189 536 T
(Looking for \322xms) 81 525 T
(Edrv\323...C:/PCGEOS/Driver/Swap/XMS/xmsec.geo) 189 525 T
(Looking for \322disk) 81 514 T
(Edrv\323...C:/PCGEOS/Driver/Swap/Disk/diskec.geo) 189 514 T
(Looking for \322kbd) 81 503 T
(drvr\323...C:/PCGEOS/Driver/Keyboard/kbd.geo) 189 503 T
(Looking for \322nimbus) 81 492 T
(Edrv\323...C:/PCGEOS/Driver/Font/Nimbus/nimbusec.geo) 189 492 T
(Looking for \322stream) 81 481 T
(Edrv\323...C:\134PCGEOS/Driver/Stream/streamec.GEO) 189 481 T
(Looking for \322sound) 81 470 T
(Elib\323...C:/PCGEOS/Library/Sound/soundec.geo) 189 470 T
(Looking for \322standard) 81 459 T
(Edrv\323...C:/PCGEOS/Driver/Sound/Standard/standard.geo) 194.4 459 T
(Looking for \322ui) 81 448 T
(Elib\323...C:/PCGEOS/Library/User/uiec.geo) 189 448 T
(Thread 0 created for patient ui) 81 437 T
(Looking for \322styles) 81 426 T
(Elib\323...C:\134PCGEOS/Library/Styles/stylesec.GEO) 189 426 T
(Looking for \322color) 81 415 T
(Elib\323...C:\134PCGEOS/Library/Color/colorec.GEO) 189 415 T
(Looking for \322ruler) 81 404 T
(Elib\323...C:\134PCGEOS/Library/Ruler/rulerec.GEO) 189 404 T
(Looking for \322text) 81 393 T
(Elib\323...C:/PCGEOS/Library/Text/textec.geo) 189 393 T
(Looking for \322motif) 81 382 T
(Espu\323...C:\134PCGEOS/Library/Motif/motifec.GEO) 189 382 T
(Looking for \322vga) 81 371 T
(Edrv\323...C:/PCGEOS/Driver/Video/VGAlike/VGA/vgaec.geo) 189 371 T
(Looking for \322nonts) 81 360 T
(Edrv\323...C:/PCGEOS/Driver/Task/NonTS/nontsec.geo) 189 360 T
(Looking for \322spool) 81 349 T
(Elib\323...C:\134PCGEOS/Library/Spool/spoolec.GEO) 189 349 T
(Thread 0 created for patient spool) 81 338 T
(Looking for \322serial) 81 327 T
(Edrv\323...C:/PCGEOS/Driver/Stream/Serial/serialec.geo) 189 327 T
(Looking for \322msSer) 81 316 T
(Edrv\323...C:/PCGEOS/Driver/Mouse/MSSer/msserec.geo) 189 316 T
(Looking for \322welcome) 81 305 T
(Eapp\323...C:/PCGEOS/Appl/Startup/Welcome/welcomee.geo) 189 305 T
(Thread 0 created for patient welcome) 81 294 T
1 10 Q
(When faced with the W) 180 275.33 T
(elcome screen on the target, click on the \322Advanced\323) 287.41 275.33 T
-0.61 (trigger) 180 262.33 P
-0.61 (, and start up our application, which should be in the) 210.92 262.33 P
1 9 Q
-0.55 (OTHER) 452.19 262.33 P
1 10 Q
-0.61 ( directory) 485.69 262.33 P
-0.61 (.) 528.22 262.33 P
4 9 Q
(Looking for \322shell) 81 249 T
(Elib\323...C:/PCGEOS/Library/Shell/shellec.geo) 189 249 T
(Looking for \322manager) 81 238 T
(Eapp\323...C:/PCGEOS/Appl/FileMgrs/GeoManag/managere.geo) 189 238 T
(Thread 0 created for patient manager) 81 227 T
(Thread 1 created for patient manager) 81 216 T
(Looking for \322math) 81 205 T
(Elib\323...C:\134PCGEOS/Library/Math/mathec.GEO) 189 205 T
(Looking for \322borlandcE) 81 194 T
(lib\323...C:\134PCGEOS/Library/MATH/COMPILER/BORLANDC/BORLANDC.GEO) 199.8 194 T
(Looking for \322mchrt) 81 183 T
(Eapp\323...C:\134PCGEOS/Appl/Mchrt/mchrtec.GEO) 189 183 T
(Thread 0 created for patient mchrt) 81 172 T
(Thread 1 created for patient mchrt) 81 161 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 22
%%Page: "83" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(83) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(When the application has started up, hit) 180 641.33 T
3 F
(ctrl-c) 370.21 641.33 T
1 F
( on the host machine to) 397.63 641.33 T
(interrupt Swat and halt execution on the target machine.) 180 628.33 T
0 12 Q
(When Swat Is Ready) 180 602 T
4 9 Q
(PC Halted) 81 585 T
(Stopped in DOSIdleHook, address 2522h:109dh) 81 574 T
(DOSIdleHook+16: INT 40 \05028h\051) 81 563 T
(\050geos:0\051 2 =>) 81 552 T
1 10 Q
-0.67 (W) 180 533.33 P
-0.67 (e\325re going to set a breakpoint in our code. Before we do this, we must switch) 189.26 533.33 P
(to our application\325) 180 520.33 T
(s thread so that Swat will recognize our application\325) 263.16 520.33 T
(s) 502.64 520.33 T
(labels. T) 180 507.33 T
(o do this, we enter the name of our application\325) 218.36 507.33 T
(s thread:) 434.5 507.33 T
3 F
(mchrt) 478.21 507.33 T
1 F
(.) 509.7 507.33 T
4 9 Q
(\050geos:0\051 3 =>) 81 494 T
6 F
(mchrt) 156.6 494 T
4 F
([mchrt:0] 4) 81 483 T
1 10 Q
(Next we will set a breakpoint in the) 180 464.33 T
3 F
(MCListGetDataItem\050\051) 348.38 464.33 T
1 F
( routine by) 461.14 464.33 T
(using the) 180 451.33 T
3 F
(stop in) 225.93 451.33 T
1 F
( Swat command:) 261.39 451.33 T
4 9 Q
([mchrt:0] 4 =>) 81 438 T
6 F
(stop in MCListGetDataItem) 162 438 T
4 F
(brk5) 81 427 T
([mchrt:0] 5 =>) 81 416 T
1 10 Q
-0.54 (W) 180 397.33 P
-0.54 (e\325ve just set the breakpoint. Swat should now halt whenever this routine is) 189.26 397.33 P
(called on the target machine. Note that we get a return value, \322brk5.\323 This) 180 384.33 T
-0.74 (means that this is our \336fth breakpoint, and we will be able to manipulate this) 180 371.33 P
(breakpoint later by referring to its number) 180 358.33 T
(. Note that the other four) 377.24 358.33 T
(breakpoints have been automatically set up by Swat. W) 180 345.33 T
(e will get a glimpse) 436.55 345.33 T
(of them later) 180 332.33 T
(.) 239.08 332.33 T
-0.01 (T) 180 312.33 P
-0.01 (o test the breakpoint, continue by typing) 185.75 312.33 P
3 F
-0.01 (c) 376.07 312.33 P
1 F
-0.01 ( on the host machine, then click) 381.62 312.33 P
(on the \322Add\323 trigger on the target machine.) 180 299.33 T
4 9 Q
([mchrt:0] 5 =>) 81 286 T
6 F
(c) 162 286 T
4 F
(Breakpoint 5) 81 275 T
(Stopped in MCLISTGETDATAITEM, line 196, \322C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC\323) 81 264 T
( VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 81 253 T
(\050mchrt:0\051 6 =>) 81 242 T
1 10 Q
(Note that Swat tells us we broke on Breakpoint 5. If we had set several) 180 223.33 T
-0.05 (breakpoints, this information might have come in handy by letting us know) 180 210.33 P
(which one we had stopped for) 180 197.33 T
(.) 315.56 197.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 23
%%Page: "84" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(84) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Next, we\325ll use the) 180 641.33 T
3 F
(srcwin) 268.17 641.33 T
1 F
( command to display some of our source code) 303.36 641.33 T
(\050\336fteen lines of it, in this case\051.) 180 628.33 T
4 9 Q
(\050mchrt:0\051 6 =>) 81 615 T
6 F
(srcwin 15) 162 615 T
4 F
(\050mchrt:0\051 7 =>) 81 604 T
1 10 Q
-0.03 (At this point, the bottom \336fteen lines of the display should be taken up by a) 180 585.33 P
(section of program listing. One line should be highlighted; this is the line) 180 572.33 T
-0.81 (which is about to be executed on the target machine. Now we can get a clearer) 180 559.33 P
-0.58 (picture of our context within the program. On the left hand side of the srcwin) 180 546.33 P
(window) 180 533.33 T
(, you can see the line numbers of the lines of source code. These can) 214.64 533.33 T
(come in handy; if compilation generated warnings on a given line, these) 180 520.33 T
(numbers can help you \336nd it.) 180 507.33 T
(T) 180 487.33 T
(o see more of our program, you can use the) 185.75 487.33 T
3 F
(Page Up) 385.94 487.33 T
1 F
(,) 429.36 487.33 T
3 F
(Page Down) 434.92 487.33 T
1 F
(,) 493.52 487.33 T
3 F
(left) 180 474.33 T
(arrow) 200.28 474.33 T
1 F
(, and) 230.85 474.33 T
3 F
(right) 256.6 474.33 T
(arrow) 285.58 474.33 T
1 F
( keys to scroll around the program \336le within) 317.07 474.33 T
(the srcwin window) 180 461.33 T
(. Y) 265.75 461.33 T
(ou can even set breakpoints by clicking on the line) 277.24 461.33 T
-0.01 (numbers with the mouse. T) 180 448.33 P
-0.01 (o turn off a breakpoint set this way) 305.9 448.33 P
-0.01 (, just click on) 467.33 448.33 P
(the line number again.) 180 435.33 T
(Next we will use the source-stepper command) 180 415.33 T
3 F
(sstep) 394.64 415.33 T
1 F
( to step through our) 421.31 415.33 T
-0.7 (source code. \050Y) 180 402.33 P
-0.7 (ou might think that sstep stands for \322single-step,\323 but it in fact) 246 402.33 P
-0.69 (stands for \322source-step,\323 as opposed to our assembly-code stepper) 180 389.33 P
-0.69 (.\051 Each time) 474.34 389.33 P
(we step, it will present us with a line of code. W) 180 376.33 T
(e can ask to go to the next) 399.67 376.33 T
(step, to step into a routine being called, or \336nish the routine.) 180 363.33 T
4 9 Q
(\050mchrt:0\051 7 =>) 81 350 T
6 F
(sstep) 162 350 T
4 F
(Stepping in C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC...) 81 339 T
( 196: VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 81 328 T
1 10 Q
(W) 180 309.33 T
(e are about to execute the) 189.26 309.33 T
3 F
(VMLock\050\051) 310.76 309.33 T
1 F
( command. Press the) 361.5 309.33 T
3 F
(n) 460.4 309.33 T
1 F
( key) 467.25 309.33 T
(.) 485.22 309.33 T
4 9 Q
( 198: for\050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 81 296 T
1 10 Q
-0.28 (Note that) 180 277.33 P
3 F
-0.29 (sstep) 226.48 277.33 P
1 F
-0.28 ( presents us with a new line and now this line is highlighted) 253.15 277.33 P
-0.55 (within srcwin\325) 180 264.33 P
-0.55 (s window) 244.64 264.33 P
-0.55 (. At this point, the) 286.13 264.33 P
3 F
-0.57 (VMLock\050\051) 370.61 264.33 P
1 F
-0.55 ( has executed and we\325re) 421.35 264.33 P
(about to do the initialization step of the) 180 251.33 T
3 F
( for\050\051) 362.63 251.33 T
1 F
( statement.) 388.47 251.33 T
(Let\325) 180 231.33 T
(s continue for another couple of steps and then get out of sstep mode.) 197.23 231.33 T
-0.22 (Press) 180 218.33 P
3 F
-0.23 (n) 207.93 218.33 P
1 F
-0.22 ( twice and then press) 214.78 218.33 P
3 F
-0.23 (q) 314.8 218.33 P
1 F
-0.22 (. This will move us another two lines forward) 321.28 218.33 P
(in the code and then quit out of) 180 205.33 T
3 F
(sstep) 327.24 205.33 T
1 F
( mode.) 353.91 205.33 T
4 9 Q
( 199: ordinal > 1;) 81 192 T
( 205: data = tempNode->LN_data;) 81 181 T
( 206: VMUnlock\050dataListBlock\051;) 81 170 T
(\050mchrt:0\051 8 =>) 81 159 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 24
%%Page: "85" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(85) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.1 (Let\325) 180 641.33 P
-0.1 (s fool our application. W) 197.23 641.33 P
-0.1 (e can use the) 308.13 641.33 P
3 F
-0.11 (assign) 370.69 641.33 P
1 F
-0.1 ( command to change any of) 403.46 641.33 P
(our application\325) 180 628.33 T
(s variables that are within our present scope. This can be) 251.49 628.33 T
(useful for testing your handlers in strange cases which might be dif\336cult to) 180 615.33 T
(reproduce. In this case, we\325ll use it to change the value we\325re returning.) 180 602.33 T
4 9 Q
(\050mchrt:0\051 8 =>) 81 589 T
6 F
(assign data 234) 162 589 T
4 F
(\050mchrt:0\051 9 =>) 81 578 T
6 F
(c) 162 578 T
1 10 Q
(Now look over at the target machine. There should be a new item in the) 180 559.33 T
-0.68 (scrolling list, and it should be 234. Thus, we know we can use Swat to fool our) 180 546.33 P
(program about what\325) 180 533.33 T
(s going on.) 276.13 533.33 T
(T) 180 513.33 T
(o get a list of the variables local to a routine, use the) 185.75 513.33 T
3 F
(locals) 430.25 513.33 T
1 F
( command. T) 460.07 513.33 T
(o) 518.79 513.33 T
(get a continuous display of local variables, use the) 180 500.33 T
3 F
(localwin) 414.3 500.33 T
1 F
( command \050try) 458.56 500.33 T
(\322localwin 5\323\051 Y) 180 487.33 T
(ou can use the) 246.5 487.33 T
3 F
(print) 315.58 487.33 T
1 F
( command to learn the value of a given) 342.25 487.33 T
(variable. Note that if a variable is stored in a register) 180 474.33 T
(, you must pass the) 426.17 474.33 T
(register name to assign instead of the variable name. The) 180 461.33 T
3 F
(locals) 448.94 461.33 T
1 F
( command) 478.76 461.33 T
(will warn you when a given variable is stored in a register) 180 448.33 T
(.) 448.01 448.33 T
-0.35 (Next, let\325) 180 428.33 P
-0.35 (s see some more navigation of our program. On the target machine,) 221.33 428.33 P
(click on the \322Add\323 trigger again.) 180 415.33 T
4 9 Q
(Breakpoint 5) 81 402 T
(Stopped in MCLISTGETDATAITEM, line 196, \322C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC\323) 81 391 T
( VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 81 380 T
(\050mchrt:0\051 10 =>) 81 369 T
1 10 Q
-0.71 (Again we\325re stopped at breakpoint 5. The) 180 350.33 P
3 F
-0.74 (srcwin) 367.84 350.33 P
1 F
-0.71 ( window shows us where we) 403.03 350.33 P
(are within our source code. In a more complicated program, it might be) 180 337.33 T
(somewhat dif\336cult to determine how we got here. What if several routines) 180 324.33 T
(and handlers called this routine? How would we know which of them had) 180 311.33 T
(invoked it? Use the) 180 298.33 T
3 F
(where) 271.68 298.33 T
1 F
( command to get a simple backtrace.) 304.09 298.33 T
4 9 Q
(\050mchrt:0\051 10 =>) 81 285 T
6 F
(where) 167.4 285 T
4 F
(* 1: far MCLISTGETDATAITEM\050\051, MCHRT.GOC:193) 81 274 T
( 2: far MCPROCESSMCP_SET_DATA_ITEM_MONIKER\050list = 1e10h:0020h\051, MCHRT.GOC:176) 86.4 263 T
( 4: call mchrt0:0::MSG_MCP_SET_DATA_ITEM_MONIKER \0501e10h 0020h 0002h\051 \050@2, ^l3) 86.4 252 T
(c50h:0000h\051) 81 241 T
(------------------------------------------------------------------------------) 81 230 T
(The event queue for \322mchrt:0\323 is empty) 81 219 T
(==============================================================================) 81 208 T
(\050mchrt:0\051 11 =>) 81 197 T
1 10 Q
(From the \336rst line, we can see that this thread is executing) 180 178.33 T
3 F
(MCListGetDataItem\050\051) 180 165.33 T
1 F
(. The next line tells us that it is doing so to handle) 292.76 165.33 T
3 F
-0.91 (MCProcessMCP_SET_DA) 180 152.33 P
-0.91 (T) 309.81 152.33 P
-0.91 (A_ITEM_MONIKER\050\051) 316.48 152.33 P
1 F
-0.88 (. Since this is the name) 425.71 152.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 25
%%Page: "86" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(86) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(of the routine Goc creates to refer to) 180 641.33 T
3 F
(MCProcessClass) 349.44 641.33 T
1 F
(\325 handler for) 434.63 641.33 T
1 9 Q
(MSG_MCP_SET_DA) 180 628.33 T
(T) 266.84 628.33 T
(A_ITEM_MONIKER) 272.35 628.33 T
1 10 Q
(, and we know that handler calls) 359 628.33 T
3 F
(MCListGetDataItem\050\051) 180 615.33 T
1 F
(, this makes sense.) 292.76 615.33 T
-0.51 (The next several lines of output tell us which routines and message handlers) 180 595.33 P
(caused) 180 582.33 T
3 F
(MCProcessMCP_SET_DA) 214.26 582.33 T
(T) 344.07 582.33 T
(A_ITEM_MONIKER) 350.74 582.33 T
1 F
(\050\051 to be called.) 452.19 582.33 T
-0.43 (The asterisk at the head of the \336rst line lets us know that Swat is examining) 180 562.33 P
3 F
(MCListGetDataItem\050\051) 180 549.33 T
1 F
( now) 292.76 549.33 T
(. T) 313.51 549.33 T
(o examine another level, use the) 324.82 549.33 T
3 F
(up) 476.88 549.33 T
1 F
(command.) 180 536.33 T
4 9 Q
(\050mchrt:0\051 11 => up) 81 523 T
(MCPROCESSMCP_SET_DATA_ITEM_MONIKER+71: NOP) 81 512 T
(\050mchrt:0\051 12 =>) 81 501 T
1 10 Q
(At this point, the srcwin window should update so that it is displaying our) 180 482.33 T
(handler for) 180 469.33 T
1 9 Q
(MSG_MCP_SET_DA) 234.44 469.33 T
(T) 321.28 469.33 T
(A_ITEM_MONIKER) 326.79 469.33 T
1 10 Q
(. Note that) 413.44 469.33 T
3 F
(up) 466.05 469.33 T
1 F
( doesn\325) 479.57 469.33 T
(t) 510.69 469.33 T
-0.63 (change which code the target is executing, just which level swat is looking at.) 180 456.33 P
(When we use the) 180 443.33 T
3 F
(where) 261.67 443.33 T
1 F
( command again, we can see that the asterisk has) 294.08 443.33 T
(moved to the second line:) 180 430.33 T
4 9 Q
(\050mchrt:0\051 12 => where) 81 417 T
( 1: far MCLISTGETDATAITEM\050\051, MCHRT.GOC:193) 86.4 406 T
(* 2: far MCPROCESSMCP_SET_DATA_ITEM_MONIKER\050list = 1e10h:0020h\051, MCHRT.GOC:176) 81 395 T
( 4: call mchrt0:0::MSG_MCP_SET_DATA_ITEM_MONIKER \0501e10h 0020h 0002h\051 \050@3, ^l3) 86.4 384 T
(c50h:0000h\051) 81 373 T
(------------------------------------------------------------------------------) 81 362 T
(The event queue for \322mchrt:0\323 is empty) 81 351 T
(==============================================================================) 81 340 T
(\050mchrt:0\051 13 =>) 81 329 T
1 10 Q
-0.66 (There is a corresponding) 180 310.33 P
3 F
-0.68 (down) 294.22 310.33 P
1 F
-0.66 ( command to go down a level of execution. For) 322.74 310.33 P
-0 (now) 180 297.33 P
-0 (, let\325) 197.97 297.33 P
-0 (s see how to navigate between levels when using) 217.24 297.33 P
3 F
-0 (sstep) 444.29 297.33 P
1 F
-0 (. T) 470.96 297.33 P
-0 (ype) 482.67 297.33 P
3 F
-0 (sstep) 501.55 297.33 P
1 F
(at the Swat prompt. Press the) 180 284.33 T
3 F
(n) 321.51 284.33 T
1 F
( key twice.) 328.36 284.33 T
4 9 Q
(\050mchrt:0\051 13 =>) 81 271 T
6 F
(sstep) 167.4 271 T
4 F
(Stepping in C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC...) 81 260 T
( 196: VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 81 249 T
( 198: for\050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 81 238 T
( 199: ordinal > 1;) 81 227 T
1 10 Q
(The \336rst thing that happened when we invoked) 180 208.33 T
3 F
(sstep) 402.25 208.33 T
1 F
( was that Swat) 428.92 208.33 T
(returned to) 180 195.33 T
3 F
(MCListGetDataItem\050\051) 235.18 195.33 T
1 F
(. Remember that) 347.94 195.33 T
3 F
(sstep) 428.51 195.33 T
1 F
( steps through) 455.18 195.33 T
-0.28 (code. Right now the code that we\325re executing is in) 180 182.33 P
3 F
-0.29 (MCListGetDataItem\050\051) 412.96 182.33 P
1 F
-0.28 (.) 525.72 182.33 P
-0.21 (However) 180 169.33 P
-0.21 (, perhaps you\325d like to \336nish up this routine to see what happens in) 220.18 169.33 P
3 F
(MCProcessMCP_SET_DA) 180 156.33 T
(T) 309.81 156.33 T
(A_ITEM_MONIKER\050\051) 316.48 156.33 T
1 F
( after) 425.71 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 26
%%Page: "87" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(87) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(MCListGetDataItem\050\051) 180 641.33 T
1 F
( is done. T) 292.76 641.33 T
(o continue to the \336nish of the present) 339.26 641.33 T
-0.02 (routine and continue stepping at the next higher execution level, press) 180 628.33 P
3 F
-0.03 (f) 508.83 628.33 P
1 F
-0.02 ( for) 512.72 628.33 P
(\336nish. Note that there is also a) 180 615.33 T
3 F
(\336nish) 325.96 615.33 T
1 F
( command which you can enter from) 355.21 615.33 T
(the regular Swat prompt that does the same thing.) 180 602.33 T
4 9 Q
( 176: data = MCListGetDataItem\050item\051;) 81 589 T
1 10 Q
-0.4 (Now press) 180 570.33 P
3 F
-0.41 (n) 230.14 570.33 P
1 F
-0.4 ( three more times to \336nish up the handler \050or press) 236.99 570.33 P
3 F
-0.41 ( f) 469.34 570.33 P
1 F
-0.4 ( to \336nish it\051.) 475.69 570.33 P
4 9 Q
( 178: LocalFixedToAscii\050monikerString, MakeWWFixed\050data\051, 0\051;) 81 557 T
( 180: item, monikerString\051;) 81 546 T
( 182:}) 81 535 T
(No source available for 15e8h:9e55h...) 81 524 T
(CallCHandler+4: AND DI, -1024 \050fc00h\051 ;3f5h) 81 513 T
1 10 Q
(This time when we \336nished executing the handler and go up a level, our) 180 494.33 T
-0.12 (srcwin window goes blank and we are warned that we don\325) 180 481.33 P
-0.12 (t have the source) 449.8 481.33 P
(code for the routine we\325re stepping through; it\325) 180 468.33 T
(s the internal system routine) 393.52 468.33 T
-0.5 (which called our handler in response to the incoming message. Press) 180 455.33 P
3 F
-0.51 (q) 494.53 455.33 P
1 F
-0.5 ( to get) 501.01 455.33 P
(out of) 180 442.33 T
3 F
(sstep) 208.89 442.33 T
1 F
( mode.) 235.56 442.33 T
(Let\325) 180 422.33 T
(s set a breakpoint in a message handler) 197.23 422.33 T
(. W) 380.05 422.33 T
(e saw above that Goc creates) 394.87 422.33 T
-0.42 (the names of the handler routines by concatenating the \336rst part of the class) 180 409.33 P
(name with the last part of the message name. Thus, to determine the name) 180 396.33 T
(of) 180 383.33 T
3 F
(MCProcessClass) 191.11 383.33 T
1 F
(\325 handler for) 276.3 383.33 T
1 9 Q
(MSG_MCP_DELETE_DA) 335.56 383.33 T
(T) 442.73 383.33 T
(A_ITEM) 448.24 383.33 T
1 10 Q
(, we) 483.9 383.33 T
(remove the -Class suf\336x from) 180 370.33 T
3 F
(MCProcessClass) 318.33 370.33 T
1 F
( and the) 403.52 370.33 T
1 9 Q
(MSG_) 444.27 370.33 T
1 10 Q
(- pre\336x from) 469.94 370.33 T
1 9 Q
(MSG_MCP_DELETE_DA) 180 357.33 T
(T) 287.17 357.33 T
(A_ITEM) 292.68 357.33 T
1 10 Q
( and concatenate the results; the name) 328.34 357.33 T
(should be) 180 344.33 T
3 F
(MCProcessMCP_DELETE_DA) 226.86 344.33 T
(T) 380.73 344.33 T
(A_ITEM\050\051) 387.4 344.33 T
1 F
(. Let\325) 436.83 344.33 T
(s set a) 459.62 344.33 T
(breakpoint there, by using the) 180 331.33 T
3 F
(stop in) 322.8 331.33 T
1 F
( command \050if our source code was) 358.26 331.33 T
(showing in the srcwin window) 180 318.33 T
(, we could just click with the mouse on the) 318.72 318.33 T
(appropriate line number\051:) 180 305.33 T
4 9 Q
(\050mchrt:0\051 14 =>) 81 292 T
6 F
(stop in MCProcessMCP_DELETE_DATA_ITEM) 167.4 292 T
4 F
(brk6) 81 281 T
(\050mchrt:0\051 15 =>) 81 270 T
1 10 Q
-0.38 (W) 180 251.33 P
-0.38 (e\325ve successfully set a breakpoint; it is number six. T) 189.26 251.33 P
-0.38 (o test this breakpoint,) 428.07 251.33 P
(continue Swat and then click on the \322Delete\323 trigger on the target machine.) 180 238.33 T
4 9 Q
(\050mchrt:0\051 15 =>) 81 225 T
6 F
(c) 167.4 225 T
4 F
(Breakpoint 6) 81 214 T
(Stopped in MCPROCESSMCP_DELETE_DATA_ITEM, line 282, \322C:\134PCGEOS/Appl/Mchrt/MCHRT.) 81 203 T
(GOC\323) 81 192 T
( ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 81 181 T
(\050mchrt:0\051 16 =>) 81 170 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 27
%%Page: "88" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(88) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Now we know how to break at a message handler) 180 641.33 T
(. Actually) 407.28 641.33 T
(, we\325re getting a) 450.62 641.33 T
-0.65 (bit cluttered with breakpoints now) 180 628.33 P
-0.65 (. Perhaps we want to turn some of ours off.) 336.7 628.33 P
(Use the) 180 615.33 T
3 F
( brk list) 215.56 615.33 T
1 F
( command to list the current breakpoints.) 256.12 615.33 T
4 9 Q
(\050mchrt:0\051 16 =>) 81 602 T
6 F
(brk list) 167.4 602 T
4 F
(Num S) 81 591 T
(Address) 125 591 T
(Patient) 301 591 T
(Command/Condition) 344.2 591 T
(1) 81 580 T
(E loader::kcode::LoaderError) 102.6 580 T
(all) 301 580 T
(echo Loader death due to [penum) 344 580 T
(LoaderStrings [read-reg ax]]) 81 569 T
(expr 1) 344 558 T
(2) 81 547 T
(E geos::kcode::FatalError) 102.6 547 T
(all) 301 547 T
(why) 344 536 T
(assign) 301 525 T
(kdata::errorFlag 0) 344 525 T
(expr 1) 344 514 T
(3) 81 503 T
(E geos::kcode::WarningNotice) 102.6 503 T
(all) 301 503 T
(why-warning) 344 503 T
(4) 81 492 T
(E geos::kcode::CWARNINGNOTICE) 102.6 492 T
(all) 301 492 T
(why-warning) 344 492 T
(5) 81 481 T
(E <RT_TEXT::MCLISTGETDATAITEM+10) 102.6 481 T
(all) 301 481 T
(halt) 344 481 T
(6) 81 470 T
(E <PROCESSMCP_DELETE_DATA_ITEM+8) 102.6 470 T
(all) 301 470 T
(halt) 344 470 T
(\050mchrt:0\051 17 =>) 81 459 T
1 10 Q
(For each listed breakpoint, we can see where they break, and some Swat) 180 440.33 T
(commands which will be executed when the breakpoint is hit. Our) 180 427.33 T
-0.21 (breakpoints just) 180 414.33 P
3 F
-0.22 (halt) 257.73 414.33 P
1 F
-0.21 (. Note that the \336rst breakpoint doesn\325) 278.47 414.33 P
-0.21 (t just halt, it will) 450.93 414.33 P
(also print out an error message whenever we enter a routine called) 180 401.33 T
3 F
(LoaderError\050\051) 180 388.33 T
1 F
(. The second breakpoint in the list detects the case where) 254.09 388.33 T
(execution has entered the) 180 375.33 T
1 9 Q
(GEOS) 301.67 375.33 T
1 10 Q
( kernel routine) 327.84 375.33 T
3 F
(FatalError\050\051) 399.51 375.33 T
1 F
( and executes) 463.78 375.33 T
(the) 180 362.33 T
3 F
(why) 197.78 362.33 T
1 F
( Swat command which examines) 219.63 362.33 T
1 9 Q
(GEOS) 372.99 362.33 T
1 10 Q
(\325 exiting error code and) 399.16 362.33 T
(returns a string helpful for determining why the crash is occurring.) 180 349.33 T
(Breakpoints three and four won\325) 180 329.33 T
(t halt execution, but will execute the) 329.27 329.33 T
3 F
(why-warning) 180 316.33 T
1 F
( Swat command, which will echo a warning message to the) 248.88 316.33 T
(Swat screen.) 180 303.33 T
(These four breakpoints are set up by Swat automatically) 180 283.33 T
(. The \336fth and six) 440.98 283.33 T
(breakpoints are those that we\325ve set up. Each of these breakpoints causes) 180 270.33 T
(execution to halt when it hits the speci\336ed address.) 180 257.33 T
(W) 180 237.33 T
(e can delete and disable these breakpoints by using the) 189.26 237.33 T
3 F
( brk delete) 444.31 237.33 T
1 F
( and) 500.06 237.33 T
3 F
(brk disable) 180 224.33 T
1 F
( commands.) 238.43 224.33 T
4 9 Q
(\050mchrt:0\051 17 =>) 81 211 T
6 F
(brk delete 5) 167.4 211 T
4 F
(\050mchrt:0\051 18 =>) 81 200 T
6 F
(brk disable 6) 167.4 200 T
4 F
(\050mchrt:0\051 19 =>) 81 189 T
1 10 Q
(If you do another) 180 170.33 T
3 F
( brk list) 259.07 170.33 T
1 F
( now) 299.63 170.33 T
(, you will notice that breakpoint \336ve has) 320.38 170.33 T
(disappeared, and that breakpoint six has a \322) 180 157.33 T
1 9 Q
(D) 384.68 157.33 T
1 10 Q
(\323 in the second column where) 391.68 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 28
%%Page: "89" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(89) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(it used to have an \322) 180 641.33 T
1 9 Q
(E) 268.91 641.33 T
1 10 Q
(.\323 Execution will not stop at that breakpoint until we) 275.41 641.33 T
(re-enable the breakpoint by means of a) 180 628.33 T
3 F
(brk enable) 363 628.33 T
1 F
(.) 418.65 628.33 T
-0.03 (T) 180 608.33 P
-0.03 (o set a one-time breakpoint, useful for avoiding breakpoint clutter) 185.75 608.33 P
-0.03 (, use the) 489.23 608.33 P
3 F
-0.06 (go) 180 595.33 P
1 F
-0.06 ( command. T) 192.22 595.33 P
-0.06 (o test it out, type the) 250.82 595.33 P
3 F
-0.06 (go) 349.36 595.33 P
1 F
-0.06 ( command shown below and click on) 361.58 595.33 P
(the \322Add\323 trigger of the target machine.) 180 582.33 T
4 9 Q
(\050mchrt:0\051 19 =>) 81 569 T
6 F
(go MCListGetDataItem) 167.4 569 T
4 F
(Interrupt 3: Breakpoint trap) 81 558 T
(Stopped in MCLISTGETDATAITEM, line 192, \322C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC\323) 81 547 T
(extern word _pascal MCListGetDataItem\050word ordinal\051 {) 81 536 T
(\050mchrt:0\051 20 =>) 81 525 T
1 10 Q
(Suppose you found yourself typing \322go MCListGetDataItem\323 rather often.) 180 506.33 T
-0.33 (That\325 quite a bit to type. Y) 180 493.33 P
-0.33 (ou can ease the burden by using) 298.46 493.33 P
3 F
-0.34 (ctrl-b) 447.3 493.33 P
1 F
-0.33 ( to scroll up) 475.64 493.33 P
-0.65 (to a place where you\325ve already typed it and then cut and paste the text using) 180 480.33 P
(the mouse \050capture the text by click-dragging with the left mouse button;) 180 467.33 T
(clicking with the right mouse button will send the captured text to the) 180 454.33 T
(prompt\051. That might still be a lot of trouble. W) 180 441.33 T
(e can also construct an) 394.12 441.33 T
3 F
(alias) 502.09 441.33 T
1 F
-0.28 (using the commands shown below) 180 428.33 P
-0.28 (, and then trigger the one-time breakpoint) 334.82 428.33 P
(created by clicking on the \322Add\323 trigger on the target machine.) 180 415.33 T
4 9 Q
(\050mchrt:0\051 20 =>) 81 402 T
6 F
(alias gogetter {go MCListGetDataItem}) 167.4 402 T
4 F
(\050mchrt:0\051 21 =>) 81 391 T
6 F
(gogetter) 167.4 391 T
4 F
(Interrupt 3: Breakpoint trap) 81 380 T
(Stopped in MCLISTGETDATAITEM, line 192, \322C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC\323) 81 369 T
(extern word _pascal MCListGetDataItem\050word ordinal\051 {) 81 358 T
(\050mchrt:0\051 22 =>) 81 347 T
1 10 Q
-0.44 (These aliases can come in rather handy for de\336ning mini-functions for Swat.) 180 328.33 P
-0.39 (Later we will see how you can set up a \336le containing aliases and other Swat) 180 315.33 P
(commands to be run automatically each time you run Swat.) 180 302.33 T
(So far) 180 282.33 T
(, we\325ve been setting breakpoints for portions of code that are rather) 206.67 282.33 T
(accessible. However) 180 269.33 T
(, what would we have done if there had been a bug in) 271.3 269.33 T
3 F
(MCProcessClass) 180 256.33 T
1 F
(\325 handler for) 265.19 256.33 T
1 9 Q
(MSG_GEN_PROCESS_OPEN_APPLICA) 324.45 256.33 T
(TION) 495.8 256.33 T
1 10 Q
(?) 519.8 256.33 T
(Since this handler will be called only when the application is starting up, if) 180 243.33 T
-0.02 (there were a crashing bug in the handler) 180 230.33 P
-0.02 (, we\325d never get a chance to set the) 368.02 230.33 P
(break-point before it had crashed. T) 180 217.33 T
(o see this, continue Swat and exit the) 344.84 217.33 T
(application on the target machine.) 180 204.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 29
%%Page: "90" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(90) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(\050mchrt:0\051 22 =>) 81 642 T
6 F
(c) 167.4 642 T
4 F
(Thread 1 of mchrt exited 0) 81 631 T
(math exited.) 81 620 T
(borlandc exited.) 81 609 T
(mchrt exited.) 81 598 T
(Thread 0 of mchrt exited 0) 81 587 T
1 10 Q
(Now hit) 180 568.33 T
3 F
(ctrl-c) 219.64 568.33 T
1 F
( and see if we can set our breakpoint.) 247.06 568.33 T
4 9 Q
(PC Halted) 81 555 T
(Stopped in DOSIdleHook, address 2522h:109bh) 81 544 T
(DOSIdleHook+14: JLE DOSIdleHook+18 ;Will not jump) 81 533 T
(\050geos:0\051 23 =>) 81 522 T
6 F
(stop in MCProcessGEN_PROCESS_OPEN_APPLICATION) 162 522 T
4 F
(Error: procedure MCProcessGEN_PROCESS_OPEN_APPLICATION not defined) 81 511 T
(\050geos:0\051 24 =>) 81 500 T
1 10 Q
(That didn\325) 180 481.33 T
(t work so well, did it? The problem is that our application isn\325) 227.61 481.33 T
(t) 511.19 481.33 T
-0.26 (loaded into memory) 180 468.33 P
-0.26 (, and Swat doesn\325) 269.86 468.33 P
-0.26 (t have access to the necessary symbolic) 349.48 468.33 P
(information.) 180 455.33 T
(However) 180 435.33 T
(, there is a solution. The) 220.18 435.33 T
3 F
(spawn) 335.02 435.33 T
1 F
( command will alert Swat that it) 368.54 435.33 T
-0.25 (should break as soon as possible when starting up the named program. This) 180 422.33 P
-0.11 (will give us a chance to set breakpoints before any of our handlers have had) 180 409.33 P
(a chance to crash. Enter) 180 396.33 T
3 F
(spawn mchrt) 294.63 396.33 T
1 F
(, and then start up our application) 362.51 396.33 T
(again on the target machine.) 180 383.33 T
4 9 Q
(\050geos:0\051 24 =>) 81 370 T
6 F
(spawn mchrt) 162 370 T
4 F
(Re-using patient math) 81 359 T
(Re-using patient borlandc) 81 348 T
(Re-using patient mchrt) 81 337 T
(Thread 0 created for patient mchrt) 81 326 T
(mchrt spawned) 81 315 T
(Stopped in GeodeNotifyLibraries, address 15e8h:18d4h) 81 304 T
(GeodeNotifyLibraries: PUSH AX ;adebh) 81 293 T
(\050mchrt:0\051 25 =>) 81 282 T
1 10 Q
-0.63 (Swat has halted execution, and we can now set our breakpoint. Below) 180 263.33 P
-0.63 (, we see) 494.38 263.33 P
(the effects of setting the breakpoint and continuing. Instead of continuing,) 180 250.33 T
(you may wish to explore the handler) 180 237.33 T
(.) 347.61 237.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 30
%%Page: "91" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Code Listing) 473.22 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(91) 546.88 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 408.77 110 T
(utorial) 421.66 110 T
536.84 533.33 557.67 545 R
7 X
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(\050mchrt:0\051 25 =>) 81 642 T
6 F
(stop in MCProcessGEN_PROCESS_OPEN_APPLICATION) 167.4 642 T
4 F
(brk7) 81 631 T
(\050mchrt:0\051 26 =>) 81 620 T
6 F
(c) 167.4 620 T
4 F
(Thread 1 created for patient mchrt) 81 609 T
(Breakpoint 7) 81 598 T
(Stopped in MCPROCESSGEN_PROCESS_OPEN_APPLICATION, line 365,) 81 587 T
(\322C:\134PCGEOS/Appl/Mchrt/MCHRT.GOC\323) 81 576 T
( char fileName[] = \322MChtDATA\323;) 81 565 T
(\050mchrt:0\051 27 =>) 81 554 T
6 F
(c) 167.4 554 T
1 10 Q
-0.04 (Next let\325) 180 535.33 P
-0.04 (s make a common mistake and see how to correct it. Y) 218.86 535.33 P
-0.04 (ou don\325) 467.21 535.33 P
-0.04 (t need) 499.77 535.33 P
-0.06 (to know what) 180 522.33 P
3 F
-0.06 (objwatch) 245.21 522.33 P
1 F
-0.06 ( is supposed to do \050we\325ll get to that later\051. Just note) 292.99 522.33 P
(that we\325re about to make a mistake. Hit) 180 509.33 T
3 F
(ctrl-c) 367.1 509.33 T
1 F
( on the host machine to halt) 394.52 509.33 T
(execution and enter) 180 496.33 T
3 F
(objwatch MCV) 274.26 496.33 T
(alue) 349.17 496.33 T
1 F
( at the Swat prompt.) 371.39 496.33 T
4 9 Q
(PC Halted) 81 483 T
(Stopped in DOSIdleHook, address 2522h:108dh) 81 472 T
(DOSIdleHook: PUSH BX ;4b9ch) 81 461 T
(\050geos:0\051 32 =>) 81 450 T
6 F
(objwatch MCValue) 162 450 T
4 F
(Error: MCValue undefined) 81 439 T
1 10 Q
(W) 180 420.33 T
(e get this error because we were trying to refer to one of mchrt\325) 189.26 420.33 T
(s labels) 479.26 420.33 T
(\050\322MCV) 180 407.33 T
(alue\323\051 while Swat was in the geos thread. W) 210.18 407.33 T
(e could \336x this by) 413.19 407.33 T
(switching threads into the mchrt thread \050by typing \322mchrt\323\051. Instead, we\325ll) 180 394.33 T
-0.02 (set up the mchrt thread as our) 180 381.33 P
5 F
-0.02 (symbolic default) 323.92 381.33 P
1 F
-0.02 (, the thread Swat will check) 399.25 381.33 P
(with as a last-chance attempt to identify a label. Enter) 180 368.33 T
3 F
( sd mchrt) 432.83 368.33 T
1 F
(to set up) 484.6 368.33 T
-0 (mchrt as the symbolic default. Enter) 180 355.33 P
3 F
-0 (objwatch MCV) 352.02 355.33 P
-0 (alue) 426.93 355.33 P
1 F
-0 ( again and notice) 449.15 355.33 P
(that it works this time, though we\325re still in the geos thread. When Swat) 180 342.33 T
-0.41 (couldn\325) 180 329.33 P
-0.41 (t \336nd a) 212.41 329.33 P
3 F
-0.42 (MCV) 246.94 329.33 P
-0.42 (alue) 271.2 329.33 P
1 F
-0.41 ( in this thread, it looked in mchrt, and thus found it.) 293.42 329.33 P
4 9 Q
(\050geos:0\051 33 => sd mchrt) 81 316 T
(\050geos:0\051 34 => objwatch MCValue) 81 305 T
(brk8) 81 294 T
(\050geos:0\051 35 =>) 81 283 T
1 10 Q
-0.36 (Perhaps this would be a good time to \336nd out what) 180 264.33 P
3 F
-0.37 (objwatch) 413.71 264.33 P
1 F
-0.36 ( does. From its) 461.49 264.33 P
(return value, you may have guessed correctly that it sets a breakpoint. Y) 180 251.33 T
(ou) 515.6 251.33 T
(would have guessed correctly) 180 238.33 T
(. The objwatch command monitors messages,) 313.7 238.33 T
(and will alert you whenever it detects that the passed object is receiving a) 180 225.33 T
(message. In the example here, we will be able to see all messages passed to) 180 212.33 T
3 F
(MCV) 180 199.33 T
(alue) 204.26 199.33 T
1 F
(, our number) 226.48 199.33 T
(-entry object.) 286.3 199.33 T
-0.32 (It does this by inserting a breakpoint at the kernel routine which dispatches) 180 179.33 P
-0.68 (messages. T) 180 166.33 P
-0.68 (o see how it does this, we can take a look at the list of breakpoints) 234.34 166.33 P
(and see what breakpoint number eight does. Enter) 180 153.33 T
3 F
(brk list) 417.44 153.33 T
1 F
(.) 455.13 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 31
%%Page: "92" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(92) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
([mchrt:0] 35 => brk list) 81 642 T
(Num) 81 631 T
(S Address) 102.6 631 T
(Patient) 301 631 T
(Command/Condition) 388 631 T
(1) 81 620 T
(E loader::kcode::LoaderError) 102.6 620 T
(all echo) 301 620 T
(Loader death due to [penum) 388 620 T
(LoaderStrings [read-reg ax]]) 81 609 T
(expr 1) 301 598 T
(2) 81 587 T
(E geos::kcode::FatalError) 102.6 587 T
(all) 301 587 T
(why) 388 576 T
(assign kdata::errorFlag 0) 388 565 T
(expr 1) 388 554 T
(3) 81 543 T
(E geos::kcode::WarningNotice) 102.6 543 T
(all) 301 543 T
(why-warning) 388 543 T
(4) 81 532 T
(E geos::kcode::CWARNINGNOTICE) 102.6 532 T
(all) 301 532 T
(why-warning) 388 532 T
(6) 81 521 T
(D <PROCESSMCP_DELETE_DATA_ITEM+8) 102.6 521 T
(all) 301 521 T
(halt) 388 521 T
(7) 81 510 T
(E <EN_PROCESS_OPEN_APPLICATION+6) 102.6 510 T
(all) 301 510 T
(halt) 388 510 T
(8) 81 499 T
(E <os::kcode::ObjCallMethodTable) 102.6 499 T
(all) 301 499 T
(si=0030h ds=4ed4h) 388 499 T
( print-ow {1533 364 48 {1112312 9404 44}}) 81 488 T
([mchrt:0] 37 =>) 81 477 T
1 10 Q
(Next, we can continue Swat and click on the \322Add\323 trigger on the target) 180 458.33 T
-0.37 (machine and watch messages sent to our value object. When done, hit) 180 445.33 P
3 F
-0.38 (ctrl-c) 500.8 445.33 P
1 F
-0.37 (.) 528.22 445.33 P
4 9 Q
([mchrt:0] 37 =>) 81 432 T
6 F
(c) 167.4 432 T
4 F
(MSG_GEN_VALUE_GET_VALUE, ^l48a0h:0030h, GenValueClass) 81 421 T
(cx = cccch, dx = cccch, bp = cccch) 102.6 410 T
(MSG_GEN_VALUE_GET_VALUE, ^l48a0h:0030h, GenValueClass) 81 399 T
(cx = cccch, dx = cccch, bp = cccch) 102.6 388 T
(MSG_VIS_POSITION_BRANCH, ^l48a0h:0030h, GenValueClass) 81 377 T
(cx = 0009h, dx = 00bdh, bp = 0612h) 102.6 366 T
(MSG_VIS_COMP_GET_MARGINS, ^l48a0h:0030h, GenValueClass) 81 355 T
(cx = 0023h, dx = 000ch, bp = 0612h) 102.6 344 T
(MSG_VIS_VUP_CREATE_GSTATE, ^l48a0h:0030h, GenValueClass) 81 333 T
(cx = 000dh, dx = 00bfh, bp = 000ch) 102.6 322 T
(MSG_VIS_COMP_GET_CHILD_SPACING, ^l48a0h:0030h, GenValueClass) 81 311 T
(cx = 0000h, dx = 00bdh, bp = 0576h) 102.6 300 T
(MSG_VIS_COMP_GET_MARGINS, ^l48a0h:0030h, GenValueClass) 81 289 T
(cx = 0005h, dx = 0000h, bp = 0576h) 102.6 278 T
(MSG_VIS_COMP_GET_MARGINS, ^l48a0h:0030h, GenValueClass) 81 267 T
(cx = 0005h, dx = 0000h, bp = 0576h) 102.6 256 T
(PC Halted) 81 245 T
(Stopped in Idle, address 15e8h:bab7h) 81 234 T
(Idle+31: ADD DI, 4 \05004h\051 ;dceh) 81 223 T
(\050geos:0\051 38 =>) 81 212 T
1 10 Q
(That\325) 180 193.33 T
(s it for this Swat session. If you haven\325) 203.9 193.33 T
(t already) 381.71 193.33 T
(, you should probably) 422.09 193.33 T
(take this opportunity to work with the code in the srcwin window) 180 180.33 T
(. Use the) 480.78 180.33 T
3 F
-0.68 (Page Up) 180 167.33 P
1 F
-0.65 (,) 222.74 167.33 P
3 F
-0.68 (Page Down) 227.65 167.33 P
1 F
-0.65 (, left and right arrows to navigate the code. Click with) 285.57 167.33 P
(the mouse on line numbers to set and remove breakpoints.) 180 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 32
%%Page: "93" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Code Listing) 473.22 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(93) 546.88 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 408.77 110 T
(utorial) 421.66 110 T
536.84 533.33 557.67 545 R
7 X
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(4-) 147.13 629.31 T
(1 MCHRT) 156.02 629.31 T
(.GP) 199.35 629.31 T
4 8 Q
0.64 (name mchrt.app) 81 615.64 S
0.64 (longname \322MyChart\323) 81 598.64 S
0.64 (type appl, process, single) 81 581.64 S
0.64 (class MCProcessClass) 81 564.64 S
0.64 (appobj MCApp) 81 547.64 S
0.64 (tokenchars \322MCht\323) 81 530.64 S
0.64 (tokenid 0) 81 520.64 S
0.64 (library) 81 503.64 S
0.64 (geos) 125 503.64 S
0.64 (library) 81 493.64 S
0.64 (ui) 125 493.64 S
0.64 (resource APPRESOURCE ui-object) 81 476.64 S
0.64 (resource INTERFACE ui-object) 81 466.64 S
81 442.95 531 454.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 442.95 531 454.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 450.2 617.5 453.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
81 412.93 531 424.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 412.93 531 424.95 R
7 X
0 0 0 1 0 0 0 K
V
76.5 420.18 617.5 423.68 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 406.26 T
(4-) 147.13 406.26 T
(2 MCHRT) 156.02 406.26 T
(.GOC) 199.35 406.26 T
4 8 Q
0.64 (/**************************************************************) 81 392.6 S
0.64 ( *) 81 382.6 S
0.64 (Copyright \050c\051 GeoWorks 1993 -- All Rights Reserved) 125 382.6 S
0.64 ( *) 81 372.6 S
0.64 ( * MChrt is a charting application. It maintains a list of) 81 362.6 S
0.64 ( * numbers and constructs a bar chart to display them.) 81 352.6 S
0.64 ( *) 81 342.6 S
0.64 ( * Our process object is in charge of maintaining the data) 81 332.6 S
0.64 ( * structure which holds the list of numbers.) 81 322.6 S
0.64 ( *) 81 312.6 S
0.64 ( **************************************************************/) 81 302.6 S
0.64 (@include <stdapp.goh>) 81 285.6 S
0.64 (/* CONSTANTS */) 81 268.59 S
0.64 (/* In the list gadget which represents our data, the first item) 81 251.59 S
0.64 ( * isn\325t going to represent anything; it\325s just a place holder.) 81 241.59 S
0.64 ( * The FAKE_LIST_ITEM constant will be used when checking for this item) 81 231.59 S
0.64 ( */) 81 221.6 S
0.64 (#define FAKE_LIST_ITEM 0) 81 211.6 S
63 578 81 589 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 356.64 72 617.64 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "93" 33
%%Page: "94" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(94) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (@class MCProcessClass, GenProcessClass;) 81 642.67 S
0.64 (/* For information about the messages listed below, see the) 81 632.67 S
0.64 ( * headers for their handlers, later in this file. */) 81 622.67 S
0.64 (@message \050GEN_DYNAMIC_LIST_QUERY_MSG\051) 125 612.67 S
0.64 (MSG_MCP_SET_DATA_ITEM_MONIKER;) 344 612.67 S
0.64 (@message void) 125 602.67 S
0.64 (MSG_MCP_DELETE_DATA_ITEM\050\051;) 344 602.67 S
0.64 (@message void) 125 592.67 S
0.64 (MSG_MCP_INSERT_DATA_ITEM\050\051;) 344 592.67 S
0.64 (@message void) 125 582.67 S
0.64 (MSG_MCP_SET_DATA_ITEM\050\051;) 344 582.67 S
0.64 (@endc /* end of MCProcessClass definition */) 81 572.67 S
0.64 (@classdecl MCProcessClass, neverSaved;) 81 555.67 S
0.64 (/* MCListGetDataItem\050\051:) 81 538.67 S
0.64 ( * For information about this routine,) 81 528.67 S
0.64 ( * see its code, later in this file */) 81 518.67 S
0.64 (extern word _pascal MCListGetDataItem\050word ordinal\051;) 81 508.67 S
0.64 (/* Global STRUCTURES and VARIABLES */) 81 491.67 S
0.64 (/* The data points which are to be charted are stored in) 81 474.67 S
0.64 ( * a linked list of chunks, all of which are contained within) 81 464.67 S
0.64 ( * a single block of memory. Each element of the list will be) 81 454.67 S
0.64 ( * stored in a ListNode structure.) 81 444.67 S
0.64 ( */) 81 434.67 S
0.64 (typedef struct {) 81 424.67 S
0.64 (word) 125 414.67 S
0.64 (LN_data;) 212.5 414.67 S
0.64 (ChunkHandle) 125 404.67 S
0.64 (LN_next;) 212.5 404.67 S
0.64 (} ListNode;) 81 394.67 S
0.64 (/* A given piece of data is stored:) 81 377.67 S
0.64 ( *) 81 367.67 S
0.64 (In a ListNode) 125 367.67 S
0.64 (tempNode) 431.5 367.67 S
0.64 ( *) 81 357.67 S
0.64 (referenced by a ChunkHandle) 125 357.67 S
0.64 (tempListItem) 431.5 357.67 S
0.64 ( *) 81 347.67 S
0.64 (in a memory block referenced by a MemHandle) 125 347.67 S
0.64 (dataListBlock) 431.5 347.67 S
0.64 ( *) 81 337.67 S
0.64 (loaded from a VM block referenced by a VMBlockHandle) 125 337.67 S
0.64 (dataFileBlock) 431.5 337.67 S
0.64 ( *) 81 327.67 S
0.64 (in a file referenced by a VMFileHandle) 125 327.67 S
0.64 (dataFile) 431.5 327.67 S
0.64 ( */) 81 317.67 S
0.64 (VMFileHandle) 81 300.67 S
0.64 (dataFile;) 151.72 300.67 S
0.64 (/* File which will hold our data */) 301 300.67 S
0.64 (VMBlockHandle) 81 290.67 S
0.64 (dataFileBlock;) 157.16 290.67 S
0.64 (/* Block within dataFile */) 301 290.67 S
0.64 (MemHandle) 81 280.67 S
0.64 (dataListBlock;) 135.4 280.67 S
0.64 (/* Block of memory holding our data */) 301 280.67 S
0.64 (MemHandle) 81 270.67 S
0.64 (*dataListBlockPtr = &dataListBlock; /* Ptr to above Handle */) 135.4 270.67 S
0.64 (ChunkHandle) 81 260.67 S
0.64 (dataListHead = 0;) 140.84 260.67 S
0.64 (/* Chunk containing head of) 301 260.67 S
0.64 ( * linked list. */) 301 250.67 S
0.64 (ChunkHandle) 81 240.67 S
0.64 (tempListItem;) 140.84 240.67 S
0.64 (/* Chunk handle which we will) 301 240.67 S
0.64 ( * use when traversing lists. */) 301 230.67 S
0.64 (ListNode) 81 220.67 S
0.64 (*tempNode;) 129.96 220.67 S
0.64 (/* List item which we will use) 301 220.67 S
0.64 ( * when traversing lists. */) 301 210.67 S
63 580.02 81 620.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 387.67 72 648.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 505.02 81 516.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 283.67 72 544.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 393.02 81 432.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 199.67 72 460.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 210.03 81 308.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 75.67 72 336.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "94" 34
%%Page: "95" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Code Listing) 473.22 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(95) 546.88 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 408.77 110 T
(utorial) 421.66 110 T
536.84 533.33 557.67 545 R
7 X
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* OBJECT Resources */) 81 642.67 S
0.64 (/* APPRESOURCE will hold the application object and other information) 81 632.67 S
0.64 ( * which the system will want to load when it wants to find out about) 81 622.67 S
0.64 ( * the application but doesn\325t need to run the application.) 81 612.67 S
0.64 ( */) 81 602.67 S
0.64 (@start) 81 592.67 S
0.64 (AppResource;) 125 592.67 S
0.64 (@object GenApplicationClass MCApp = {) 81 575.67 S
0.64 ( GI_visMoniker = list { @MCTextMoniker }) 81 565.67 S
0.64 ( GI_comp = @MCPrimary;) 81 555.67 S
0.64 ( gcnList\050MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS\051 = @MCPrimary;) 81 545.67 S
0.64 (}) 81 535.67 S
0.64 (@visMoniker MCTextMoniker = \322MyChart Application\323;) 81 518.67 S
0.64 (@end) 81 501.67 S
0.64 (AppResource;) 125 501.67 S
0.64 (/* The INTERFACE resource holds the bulk of our Generic UI gadgetry. */) 81 484.67 S
0.64 (@start) 81 474.67 S
0.64 (Interface;) 125 474.67 S
0.64 (@object GenPrimaryClass MCPrimary = {) 81 457.67 S
0.64 (GI_comp = @MCDataList, @MCAddTrigger, @MCDeleteTrigger,) 125 447.67 S
0.64 (@MCChangeTrigger, @MCValue;) 179.86 437.67 S
0.64 (}) 81 427.67 S
0.64 (@object GenDynamicListClass MCDataList = {) 81 410.67 S
0.64 (GIGI_selection = FAKE_LIST_ITEM;) 125 400.67 S
0.64 (GIGI_numSelections = 1;) 125 390.67 S
0.64 (GIGI_applyMsg = 0;) 125 380.67 S
0.64 (GIGI_destination = process;) 125 370.67 S
0.64 (GDLI_numItems = 1;) 125 360.67 S
0.64 (GDLI_queryMsg = MSG_MCP_SET_DATA_ITEM_MONIKER;) 125 350.67 S
0.64 (HINT_ITEM_GROUP_SCROLLABLE;) 125 340.67 S
0.64 (}) 81 330.67 S
0.64 (@visMoniker FakeItemMoniker = \322Data:\323;) 81 313.67 S
4 9 Q
(@localize \322This string will appear at the head of the list\323;) 81 303.67 T
4 8 Q
0.64 (@object GenTriggerClass MCAddTrigger = {) 81 286.67 S
0.64 (GI_visMoniker = \322Add\323;) 125 276.67 S
0.64 (GTI_destination = process;) 125 266.67 S
0.64 (GTI_actionMsg = MSG_MCP_INSERT_DATA_ITEM;) 125 256.67 S
0.64 (}) 81 246.67 S
0.64 (@object GenTriggerClass MCChangeTrigger = {) 81 229.67 S
0.64 (GI_visMoniker = \322Change\323;) 125 219.67 S
0.64 (GTI_destination = process;) 125 209.67 S
0.64 (GTI_actionMsg = MSG_MCP_SET_DATA_ITEM;) 125 199.67 S
0.64 (}) 81 189.67 S
63 436.02 81 455.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 222.67 72 483.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 328.02 81 418.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 185.67 72 446.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 303.02 81 321.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 88.67 72 349.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 245.03 81 294.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 61.67 72 322.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 183.03 81 237.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 4.67 72 265.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 35
%%Page: "96" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(96) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (@object GenTriggerClass MCDeleteTrigger = {) 81 642.67 S
0.64 (GI_visMoniker = \322Delete\323;) 125 632.67 S
0.64 (GTI_destination = process;) 125 622.67 S
0.64 (GTI_actionMsg = MSG_MCP_DELETE_DATA_ITEM;) 125 612.67 S
0.64 (}) 81 602.67 S
0.64 (@object GenValueClass MCValue = {) 81 585.67 S
0.64 (GVLI_minimum = MakeWWFixed\0500\051;) 125 575.67 S
0.64 (GVLI_maximum = MakeWWFixed\0500x7ffe\051;) 125 565.67 S
0.64 (GVLI_value = MakeWWFixed\050123\051;) 125 555.67 S
0.64 (}) 81 545.67 S
0.64 (@end Interface;) 81 528.67 S
0.64 (/* CODE for MCProcessClass */) 81 511.67 S
0.64 (/* MSG_MCP_SET_DATA_ITEM_MONIKER) 81 494.67 S
0.64 ( *) 81 484.67 S
0.64 ( *) 81 474.67 S
0.64 (SYNOPSIS: Set the moniker for one of our Data List\325s items.) 125 474.67 S
0.64 ( *) 81 464.67 S
0.64 (CONTEXT: The Data List will send this message to the process) 125 464.67 S
0.64 ( *) 81 454.67 S
0.64 ( whenever it needs to display the moniker of a given) 168.98 454.67 S
0.64 ( *) 81 444.67 S
0.64 ( item. We should respond with one of the) 168.98 444.67 S
0.64 ( *) 81 434.67 S
0.64 ( MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_... messages.) 168.98 434.67 S
0.64 ( *) 81 424.67 S
0.64 (PARAMS: void \050optr list, word item\051) 125 424.67 S
0.64 ( */) 81 414.67 S
0.64 (@method MCProcessClass, MSG_MCP_SET_DATA_ITEM_MONIKER {) 81 404.67 S
0.64 (/* If we\325re looking for the moniker of the \322Data:\323 item,) 81 387.67 S
0.64 ( * just return that moniker. Otherwise, look up the) 81 377.67 S
0.64 ( * numerical value of the item as stored in the linked list.) 81 367.67 S
0.64 ( */) 81 357.67 S
0.64 (if \050item==FAKE_LIST_ITEM\051 {) 125 347.67 S
0.64 (optr moniker;) 168.98 337.67 S
0.64 (moniker = ConstructOptr\050OptrToHandle\050list\051,) 168.98 327.67 S
0.64 (OptrToChunk\050@FakeItemMoniker\051\051;) 256.5 317.67 S
0.64 (@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR\050) 168.98 307.67 S
0.64 (FAKE_LIST_ITEM, moniker\051;}) 256.5 297.67 S
0.64 (else /* item > FAKE_LIST_ITEM */ {) 125 287.67 S
0.64 (char monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 168.98 277.67 S
0.64 (word data;) 168.98 267.67 S
0.64 (data = MCListGetDataItem\050item\051;) 168.98 250.67 S
0.64 (LocalFixedToAscii\050monikerString, MakeWWFixed\050data\051, 0\051;) 168.98 233.67 S
0.64 (@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050) 168.98 223.67 S
0.64 ( item, monikerString\051;) 344 213.67 S
0.64 (}) 125 203.67 S
0.64 (} /* end of MSG_MCP_SET_DATA_ITEM_MONIKER */) 81 193.67 S
63 597 81 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 415.64 72 676.64 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 542.02 81 593.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 360.67 72 621.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 189.03 81 412.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 179.67 72 440.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 36
%%Page: "97" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Code Listing) 473.22 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(97) 546.88 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 408.77 110 T
(utorial) 421.66 110 T
536.84 533.33 557.67 545 R
7 X
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* MCListGetDataItem\050\051) 81 642.67 S
0.64 ( *) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 (SYNOPSIS: Return the Nth piece of data.) 125 622.67 S
0.64 ( *) 81 612.67 S
0.64 (CONTEXT: Utility routine.) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 (PARAMS: word \050word ordinal\051) 125 602.67 S
0.64 ( */) 81 592.67 S
0.64 (extern word _pascal MCListGetDataItem\050word ordinal\051 {) 81 582.67 S
0.64 (word data;) 125 572.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 555.67 S
0.64 (for\050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 125 545.67 S
0.64 ( ordinal > 1;) 125 535.67 S
0.64 ( --ordinal\051) 125 525.67 S
0.64 ({) 168.98 515.67 S
0.64 ( tempListItem = tempNode->LN_next;) 168.98 505.67 S
0.64 ( tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 495.67 S
0.64 (}) 168.98 485.67 S
0.64 (data = tempNode->LN_data;) 125 475.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 465.67 S
0.64 (return data;) 125 455.67 S
0.64 (} /* end of MCListGetDataItem\050\051 */) 81 445.67 S
0.64 (/* MSG_MCP_INSERT_DATA_ITEM) 81 428.67 S
0.64 ( *) 81 418.67 S
0.64 ( *) 81 408.67 S
0.64 (SYNOPSIS: Add a new number to our list of data.) 125 408.67 S
0.64 ( *) 81 398.67 S
0.64 (CONTEXT: User wants to add a new piece of data.) 125 398.67 S
0.64 ( *) 81 388.67 S
0.64 (PARAMS: void\050void\051) 125 388.67 S
0.64 ( */) 81 378.67 S
0.64 (@method MCListInsertDataItem, MCProcessClass, MSG_MCP_INSERT_DATA_ITEM {) 81 368.67 S
0.64 (ChunkHandle) 125 358.67 S
0.64 (newListItem;) 212.5 358.67 S
0.64 (ListNode) 125 348.67 S
0.64 (*newNode;) 212.5 348.67 S
0.64 (WWFixedAsDWord) 125 338.67 S
0.64 (value;) 212.5 338.67 S
0.64 (word) 125 328.67 S
0.64 (ordinal;) 212.5 328.67 S
0.64 (/* Query list and data objects to find out where to insert item) 81 311.67 S
0.64 ( * and what value to insert there.) 81 301.67 S
0.64 ( */) 81 291.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 281.67 S
0.64 (value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 271.67 S
0.64 (/* Lock the data block so we can insert data into the linked list. */) 81 254.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 244.67 S
0.64 (/* Create a new linked list element. */) 81 227.67 S
0.64 (newListItem = LMemAlloc\050dataListBlock, sizeof\050ListNode\051\051;) 125 217.67 S
0.64 (newNode = LMemDerefHandles\050dataListBlock, newListItem\051;) 125 207.67 S
0.64 (newNode->LN_data = WWFixedToInt\050value\051;) 125 197.67 S
63 443.02 81 590.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 357.67 72 618.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 195.03 81 376.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 143.67 72 404.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 37
%%Page: "98" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(98) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Check to see if the item we\325re adding will be the) 81 642.67 S
0.64 ( * new head of the data list and handle that case.) 81 632.67 S
0.64 ( */) 81 622.67 S
0.64 (if \050ordinal==FAKE_LIST_ITEM\051) 125 612.67 S
0.64 ( {) 125 602.67 S
0.64 (newNode->LN_next = dataListHead;) 168.98 592.67 S
0.64 (dataListHead = newListItem;) 168.98 582.67 S
0.64 ( }) 125 572.67 S
0.64 (else) 125 562.67 S
0.64 (/* We\325re not adding to the head of the list. Traverse the) 81 552.67 S
0.64 ( * list using the tempListItem and tempNode variables, then) 81 542.67 S
0.64 ( * insert the new item.) 81 532.67 S
0.64 ( */) 81 522.67 S
0.64 ( {) 125 512.67 S
0.64 (word count = ordinal;) 168.98 502.67 S
0.64 (for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 492.67 S
0.64 ( count > 1;) 168.98 482.67 S
0.64 ( --count\051) 168.98 472.67 S
0.64 ( {) 168.98 462.67 S
0.64 (tempListItem = tempNode->LN_next;) 212.5 452.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock,) 212.5 442.67 S
0.64 ( tempListItem\051;) 344 432.67 S
0.64 ( }) 168.98 422.67 S
0.64 (newNode->LN_next = tempNode->LN_next;) 168.98 412.67 S
0.64 (tempNode->LN_next = newListItem;) 168.98 402.67 S
0.64 ( }) 125 392.67 S
0.64 (/* We\325ve changed the data, so before we unlock the block, we mark) 81 375.67 S
0.64 ( * it dirty.) 81 365.67 S
0.64 ( */) 81 355.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 345.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 335.67 S
0.64 (/* Update the data list gadget. */) 81 318.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS\050ordinal+1, 1\051;) 125 308.67 S
0.64 (@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal+1,) 125 298.67 S
0.64 ( FALSE\051;) 431.5 288.67 S
0.64 (} /* end of MSG_MCP_INSERT_DATA_ITEM */) 81 278.67 S
0.64 (/* MSG_MCP_DELETE_DATA_ITEM for MCProcessClass) 81 261.67 S
0.64 ( *) 81 251.67 S
0.64 ( *) 81 241.67 S
0.64 (SYNOPSIS: Destroys one data item.) 125 241.67 S
0.64 ( *) 81 231.67 S
0.64 (CONTEXT: User has just clicked on the \322Delete\323 trigger.) 125 231.67 S
0.64 ( *) 81 221.67 S
0.64 (PARAMS: void \050void\051) 125 221.67 S
0.64 ( */) 81 211.67 S
0.64 (@method MCProcessClass, MSG_MCP_DELETE_DATA_ITEM {) 81 201.67 S
0.64 (word) 125 191.67 S
0.64 (ordinal;) 212.5 191.67 S
0.64 (word) 125 181.67 S
0.64 (count;) 212.5 181.67 S
0.64 (ChunkHandle) 125 171.67 S
0.64 (oldItem;) 212.5 171.67 S
0.64 (ListNode) 125 161.67 S
0.64 (*oldNode;) 212.5 161.67 S
63 277.02 81 620.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 269 72 648.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
63 159.03 81 209.03 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 -23.33 72 237.67 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 38
%%Page: "99" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(99) 546.88 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Find out which item the user wants to delete. */) 81 642.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 632.67 S
0.64 (if \050ordinal==FAKE_LIST_ITEM\051 return;) 125 622.67 S
0.64 (/* We\325re going to work with the data, so lock the data file. */) 81 605.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 595.67 S
0.64 (/* If we\325re deleting the first data item, we update the handle of the) 81 578.67 S
0.64 ( * head of the list.) 81 568.67 S
0.64 ( */) 81 558.67 S
0.64 (if \050ordinal == 1\051) 125 548.67 S
0.64 ( {) 125 538.67 S
0.64 (oldNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 528.67 S
0.64 (tempListItem = oldNode->LN_next;) 168.98 518.67 S
0.64 (LMemFreeHandles\050dataListBlock, dataListHead\051;) 168.98 508.67 S
0.64 (dataListHead = tempListItem;) 168.98 498.67 S
0.64 ( }) 125 488.67 S
0.64 (/* If we\325re deleting an element which isn\325t the first, we find the element) 81 471.67 S
0.64 ( * that\325s just before the one we want to delete, and change that element\325s) 81 461.67 S
0.64 ( * \322next\323 handle. We also get rid of the item to be deleted.) 81 451.67 S
0.64 ( */) 81 441.67 S
0.64 (else /* ordinal != 1 */) 125 431.67 S
0.64 ( {) 125 421.67 S
0.64 (for \050tempNode=LMemDerefHandles\050dataListBlock, dataListHead\051,) 168.98 411.67 S
0.64 ( count=ordinal;) 168.98 401.67 S
0.64 ( count > 2;) 168.98 391.67 S
0.64 ( --count\051) 168.98 381.67 S
0.64 ( {) 168.98 371.67 S
0.64 (tempListItem = tempNode->LN_next;) 212.5 361.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock,) 212.5 351.67 S
0.64 ( tempListItem\051;) 344 341.67 S
0.64 ( }) 168.98 331.67 S
0.64 (oldItem = tempNode->LN_next;) 168.98 321.67 S
0.64 (oldNode = LMemDerefHandles\050dataListBlock, oldItem\051;) 168.98 311.67 S
0.64 (tempNode->LN_next = oldNode->LN_next;) 168.98 294.67 S
0.64 (LMemFreeHandles\050dataListBlock, oldItem\051;) 168.98 284.67 S
0.64 ( }) 125 274.67 S
0.64 (/* We\325ve changed the data, so before we lock the block, we mark it dirty. */) 81 257.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 247.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 237.67 S
0.64 (/* Update the list. */) 81 220.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS\050ordinal, 1\051;) 125 210.67 S
0.64 (@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal-1,) 125 200.67 S
0.64 ( FALSE\051;) 431.5 190.67 S
0.64 (} /* end of MSG_MCP_DELETE_DATA_ITEM */) 81 180.67 S
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 39
%%Page: "100" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(100) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* MSG_MCP_SET_DATA_ITEM for MCProcessClass) 81 642.67 S
0.64 ( *) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 (SYNOPSIS: Change the data number of one item in the data list.) 125 622.67 S
0.64 ( *) 81 612.67 S
0.64 (CONTEXT: User has clicked the \322Change\323 button.) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 (PARAMS: void\050void\051) 125 602.67 S
0.64 ( */) 81 592.67 S
0.64 (@method MCProcessClass, MSG_MCP_SET_DATA_ITEM {) 81 582.67 S
0.64 (word) 125 572.67 S
0.64 (ordinal;) 212.5 572.67 S
0.64 (WWFixedAsDWord) 125 562.67 S
0.64 (value;) 206.6 562.67 S
0.64 (char) 125 552.67 S
0.64 (monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 212.5 552.67 S
0.64 (word) 125 542.67 S
0.64 (count;) 212.5 542.67 S
0.64 (/* Find out which item we\325re changing. */) 81 525.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 515.67 S
0.64 (if \050ordinal == FAKE_LIST_ITEM\051 return;) 125 505.67 S
0.64 (/* Find out what the item\325s new value should be. */) 81 488.67 S
0.64 (value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 478.67 S
0.64 (/* Lock the data block so that we can change the data. */) 81 461.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 451.67 S
0.64 (/* Find the appropriate item in the linked list and change its value. */) 81 434.67 S
0.64 (for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051,) 125 424.67 S
0.64 ( count = ordinal -1;) 125 414.67 S
0.64 ( count > 0;) 125 404.67 S
0.64 ( --count\051) 125 394.67 S
0.64 ( {) 125 384.67 S
0.64 (tempListItem = tempNode->LN_next;) 168.98 374.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 364.67 S
0.64 ( }) 125 354.67 S
0.64 (tempNode->LN_data = WWFixedToInt\050value\051;) 125 344.67 S
0.64 (/* We changed the data so mark it dirty before unlocking it. */) 81 327.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 317.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 307.67 S
0.64 (/* Update the data list gadget. */) 81 290.67 S
0.64 (LocalFixedToAscii\050monikerString, value, 0\051;) 125 280.67 S
0.64 (@call MCDataList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050ordinal,) 125 270.67 S
0.64 ( monikerString\051;) 431.5 260.67 S
0.64 (} /* end of MSG_MCP_SET_DATA_ITEM */) 81 250.67 S
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 40
%%Page: "101" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Swat: Breakpoints and More) 369.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(101) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* MSG_GEN_PROCESS_OPEN_APPLICATION) 81 642.67 S
0.64 ( *) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 (SYNOPSIS: Set up application\325s data structures.) 125 622.67 S
0.64 ( *) 81 612.67 S
0.64 (CONTEXT: Application is starting up, either because user) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 ( has started the application or because the whole) 168.98 602.67 S
0.64 ( *) 81 592.67 S
0.64 ( system is re-starting.) 168.98 592.67 S
0.64 ( *) 81 582.67 S
0.64 (PARAMS: void\050AppAttachFlags) 125 582.67 S
0.64 (attachFlags,) 277.32 582.67 S
0.64 ( *) 81 572.67 S
0.64 ( MemHandle) 168.98 572.67 S
0.64 (launchBlock,) 256.5 572.67 S
0.64 ( *) 81 562.67 S
0.64 ( MemHandle) 168.98 562.67 S
0.64 (extraState\051;) 256.5 562.67 S
0.64 ( */) 81 552.67 S
0.64 (@method MCProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {) 81 542.67 S
0.64 (char fileName[] = \322MChtDATA.vm\323;) 125 532.67 S
0.64 (/* Open a temporary file, clearing out the old data. */) 81 515.67 S
0.64 (dataFile=VMOpen\050fileName,) 125 505.67 S
0.64 (VMAF_FORCE_READ_WRITE | VMAF_FORCE_DENY_WRITE,) 212.5 495.67 S
0.64 (VMO_CREATE_TRUNCATE, 0\051;) 212.5 485.67 S
0.64 (/* Allocate a storage block within the file. */) 81 468.67 S
0.64 (dataFileBlock = VMAllocLMem\050dataFile, LMEM_TYPE_GENERAL, 0\051;) 125 458.67 S
0.64 (@callsuper\050\051;) 125 441.67 S
0.64 (} /* end of MSG_GEN_PROCESS_OPEN_APPLICATION */) 81 431.67 S
0.64 (/* MSG_GEN_PROCESS_CLOSE_APPLICATION) 81 414.67 S
0.64 ( *) 81 404.67 S
0.64 ( *) 81 394.67 S
0.64 (SYNOPSIS: Free up the memory we allocated. Actually, we could) 125 394.67 S
0.64 ( *) 81 384.67 S
0.64 ( probably rely on the system to do this for us.) 168.98 384.67 S
0.64 ( *) 81 374.67 S
0.64 (CONTEXT: Application is shutting down, either because of user) 125 374.67 S
0.64 ( *) 81 364.67 S
0.64 ( exit or because whole system is shutting down.) 168.98 364.67 S
0.64 ( *) 81 354.67 S
0.64 (PARAMS: MemHandle\050void\051;) 125 354.67 S
0.64 ( */) 81 344.67 S
0.64 (@method MCProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {) 81 334.67 S
0.64 (/* Tell the data list gadget that it should only have one item */) 81 324.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_INITIALIZE\0501\051;) 125 314.67 S
0.64 (/* Close the data file. */) 81 297.67 S
0.64 (VMClose\050dataFile, FALSE\051;) 125 287.67 S
0.64 (@callsuper\050\051;) 125 270.67 S
0.64 (} /* end of MSG_GEN_PROCESS_CLOSE_APPLICATION */) 81 260.67 S
81 236.98 531 249 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 236.98 531 249 R
7 X
0 0 0 1 0 0 0 K
V
76.5 244.23 617.5 247.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 41
%%Page: "102" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Data Structures and UI Gadgetry) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(102) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 42
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 42
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%+ Courier-Bold
%%EOF
