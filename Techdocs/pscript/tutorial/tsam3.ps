%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 13 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "105" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Making the Changes) 421.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(105) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.83 (In this chapter) 180 617.33 P
-0.83 (, we\325ll learn about some more common program activities, such) 246.3 617.33 P
(as drawing shapes and working with) 180 604.33 T
1 9 Q
(VM) 352.81 604.33 T
1 10 Q
( \336les. W) 367.8 604.33 T
(e\325ll see an example of the) 404.29 604.33 T
-0.28 (advanced activity of creating an object at run-time. Finally) 180 591.33 P
-0.28 (, we\325ll see how we) 448.32 591.33 P
(can make using Swat easier by creating a) 180 578.33 T
1 9 Q
(SW) 374.86 578.33 T
(A) 388.53 578.33 T
(T) 394.53 578.33 T
(.RC) 399.71 578.33 T
1 10 Q
( script \336le.) 415.21 578.33 T
0 14 Q
(6.1) 142.54 331.1 T
0 24 Q
(Making the Changes) 180 331.1 T
1 10 Q
(Make the changes to) 180 305.43 T
1 9 Q
(MCHRT) 278.16 305.43 T
(.GOC) 312.32 305.43 T
1 10 Q
( and) 335.33 305.43 T
1 9 Q
(MCHRT) 358.3 305.43 T
(.GP) 392.46 305.43 T
1 10 Q
( as indicated in Code) 407.97 305.43 T
(Display) 180 292.43 T
(4-) 218.16 292.43 T
(1 and Code Display) 227.05 292.43 T
(4-) 319.48 292.43 T
(2. As before, these changes are marked by) 328.37 292.43 T
(vertical bars in the margin. In some cases \050the handlers for) 180 279.43 T
1 9 Q
(MSG_GEN_PROCESS_OPEN_APPLICA) 180 266.43 T
(TION) 351.35 266.43 T
1 10 Q
( and) 375.35 266.43 T
1 9 Q
(MSG_GEN_PROCESS_CLOSE_APPLICA) 180 253.43 T
(TION) 356.18 253.43 T
1 10 Q
(\051, new code replaces some old) 380.19 253.43 T
(code and you must \336gure out what old code needs to be erased.) 180 240.43 T
-0.58 (In addition, there is a new \336le which also belongs in the directory from which) 180 220.43 P
(you start up Swat \050If you run Swat from the DOS prompt, this directory is) 180 207.43 T
(probably \134) 180 194.43 T
1 9 Q
(PCGEOS) 229.22 194.43 T
1 10 Q
(\134) 267.89 194.43 T
1 9 Q
(APPL) 273.95 194.43 T
1 10 Q
(\134) 298.46 194.43 T
1 9 Q
(MCHRT) 304.52 194.43 T
1 10 Q
(; if you run Swat using W) 338.96 194.43 T
(indows, it\325) 456.38 194.43 T
(s) 503.06 194.43 T
(probably \134) 180 181.43 T
1 9 Q
(PCGEOS) 229.22 181.43 T
1 10 Q
(\134) 267.89 181.43 T
1 9 Q
(APPL) 273.95 181.43 T
1 10 Q
(\321you can check the) 298.46 181.43 T
1 9 Q
(SW) 393.09 181.43 T
(A) 406.76 181.43 T
(T) 412.76 181.43 T
(.PIF) 417.94 181.43 T
1 10 Q
( \336le if you aren\325) 436.11 181.43 T
(t) 507.42 181.43 T
(sure\051. That is the) 180 168.43 T
1 9 Q
(SW) 262.42 168.43 T
(A) 276.09 168.43 T
(T) 282.09 168.43 T
(.RC) 287.27 168.43 T
1 10 Q
( \336le, listed in Code Display) 302.77 168.43 T
(4-) 429.65 168.43 T
(3.) 438.54 168.43 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
172.51 380.1 531 575 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  2528     
601 381 288.48 182.88 0 178.51 386.12 BEGINBITMAPBWc
j"
O=20&Z&
3FFFFFFF7FO4BFFFFFFF60


:j"
O80F)J(
3E0000017FFFFF80O.FFFFFFBFFFFFEF

8&J$
0FF97FFC01O2BC0003J$
O9BDFFF97'J&8$8"8#
0FF3F17C03035183000F8C01801F0660C307'J%:#8"9"
001E017FF87F51C70018C031860008&J4J"
3FC17FF00F51EF31980DC3E373C0319F8FC663E1F1E31F1F86E17'J#8%8*J"
3FCF81700C1F51BB3E64338188CC66663218C33198C6EC7'J#8$8"9#
007F017FE03F51933C63F30F9601F8"8#J":"9":"J"
F8C1FF518631931:E07'J"
FF30E14033C7O0F07'J"?"J"
01FFC17F800F88C63;FF7'J(8)J$
03FF817F001F631F8F8C63F300EF8FC663E1F8731F19BC00019"8"J$a$bJ"
013F50000180180C08BE7#8#J"J$
0000FFFF603IBFFFFFJ#
=01F0J#<$
=0000000000)Jb
03FFFFFF00000000O."9Z"
3DO8EF



7$
FE06678#
7FE78$
7E67079#
66738"
0E8$
7E6603:"
7F:"
739#
67077%
FFFFFFFF7#
FC017#
FFFF

"j"
3CO;0F"Z"
3DO;EF

7"j$j"
C0/F0003EM7F7"y%Z
D55554F2AABEM7"i%
C002F5453E7"D%
D000F282BE7"D%
C002F5313E7%A%
D3F0006000F2B2BE7#C%
C31802F5793E7&@%
D318F8F0F800F278BE7'?%
C3190C610CC002F4FC3E7&@%
D318FC60FC00F2FCBE7'?%
C3198C618C0002F5FE3E7"D#9"
D300F1DF7":"?$
C3C002F3FF7&@$
D3F0FC38FC00F0007"`?#
C002F47"D#
D000F07"D$
C002F3FF7"y"
D555547"Y"
DFFE


7$
DC070F8#
FE678#
FCF38"
0C7#
DFE4

7$
DCE6677$
DE0F0F7$
DFFFFF






8$
9E03878$
1E7F338$
9E7E799"
068#
9FF2

8$
9E73338$
9F07878$
FFFFFF






8$
9F0F878$
1E67338$
9CF279



8$
9E67338$
9F0F878$
FFFFFF


J%
D00000003
G#
F000G"
F48$B"
0F0F87F07%B#
DE666733F3FF7%B#
DCE4F279F1FE7"E"
DFF58"D$
CCF2FCBE8"D$
9CF4FC3E8"D$
3CF278BE7%B$
DE7E6733F5793E7%B$
DC070F87F2B2BE7%B$
DFFFFFFFF5313EG$
F282BEG$
F5453EG$
F2AABE7"j$
C0/F0003E7Z"
2FE



7'
C0000000007F7'
DFFFFFFFFF3F



8%
C1FE7F3F8"
9C9#
E0709#
CE678"
808"
9C

9#
E0708%
FFFFFFFF



7&
C0000000007"
E07Q




7"a"H%
C007000000037"Q"
DFF3



8&
81FFE7FF9F8"
9C9&
E0E7070F079&
CE66739E73
9&
C066039E039&
CFE67F9E7F9&
CE66739E738'
81E0E707C7078Q




7"a"
C0037"
E07S




7"b"
C00F7"R"
DFE7



8#
C1CF8"
9C8(
9FC8F0703C0E0F9'
C66F3399CCE79#
CE70:"9"
6707>"
FF8";"
9CE78(
C1CE70339C0E0F8P#
CFFF<"
F9<#
FC1F<#
FFFF
7"b"
C0077"
E07T
J&
?F00000003F


7"`&
C001E00000077"P&
DFFDE5555557>%
EA8A0007>%
E5057FE78$9%
8787C3EA62BFC78$9$
333399E5653F7%9%
DE72793CEAF29F877#;%
DFF2E4F15F978";%
E6E9F8AF278";%
CEE5F94F178";%
9EEBFCA6278$9%
3F3399E3FC56577%9%
DE0387C3E7FE28A77%9%
DFFFFFFFE0005057>%
EAAAAAA7>%
E00000077"`&
C001FFFFFFFF7R




























J&
6F00000003F
















































JZ
53








J"j"
6F0H03JZ
6J







Jj
4MIZ
O!















"J"
01O;E0"J"
3DO;EF

















"j"
3CO;0F%Z%
3FFFFFFEO57FFFFFFF


j
O=
ENDBITMAP
%%EndBinary
%%BeginBinary:  133      
25 15 12 7.2 0 181.67 558.4 BEGINBITMAPBWc
9"
DF

7#
3E7F$
FEDDBF$
FF6B7F7#
B6FF7"
DD
7"
B67#
6B7F$
FEDDBF$
FF3E7F7#
FFFF

ENDBITMAP
%%EndBinary
181.67 556 181.67 566.33 2 L
0.5 H
2 Z
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 1
%%Page: "106" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(106) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(After making the changes to the \336les, remake the executable with) 180 641.33 T
3 F
(pmake) 487.08 641.33 T
1 F
(.) 521.9 641.33 T
(Send the remade geode to the target machine using) 180 628.33 T
3 F
(pcs) 420.58 628.33 T
1 F
( or the) 437.81 628.33 T
3 F
(send) 470.59 628.33 T
1 F
( Swat) 494.85 628.33 T
(command.) 180 615.33 T
0 14 Q
(6.2) 142.54 563 T
0 24 Q
(The Application So Far) 180 563 T
1 10 Q
-0.67 (The application now draws a bar chart within a view window) 180 537.33 P
-0.67 (. It saves the list) 454.69 537.33 P
-0.68 (of data within a \336le, and can retain that data after closing and re-opening the) 180 524.33 P
(application.) 180 511.33 T
2 F
(u) 180 491.33 T
1 F
(The \322view window\323 in which the chart is displayed is managed by a) 198 491.33 T
(GenV) 198 479.33 T
(iew object. Note that the view is not exactly a window in the same) 223.67 479.33 T
-0.77 (style as the primary window; the primary moves independently while the) 198 467.33 P
(view does not.) 198 455.33 T
2 F
(u) 180 436.33 T
1 F
(W) 198 436.33 T
(e have organized some of our) 207.26 436.33 T
1 9 Q
(UI) 343.56 436.33 T
1 10 Q
( gadgetry inside a GenInteraction) 354.56 436.33 T
(object. This object serves solely to group other gadgets. By grouping) 198 424.33 T
-0.57 (objects in this way and applying a hint to the primary window) 198 412.33 P
-0.57 (, we\325re able) 478.06 412.33 P
-0.08 (to achieve the layout that we want. Note that we should test this layout) 198 400.33 P
(out with some different video drivers, and perhaps on a small-screened) 198 388.33 T
(device to make sure that it \336ts well. Depending on the results of these) 198 376.33 T
(tests, we might want to add some more hints.) 198 364.33 T
2 F
(u) 180 345.33 T
1 F
-0.67 (The contents of the view are managed by a) 198 345.33 P
3 F
-0.69 (V) 392.16 345.33 P
-0.69 (isContentClass) 399.31 345.33 P
1 F
-0.67 ( object. The) 477.27 345.33 P
-0.65 (content is thus a visual object. Like generic objects, visual objects display) 198 333.33 P
-0.51 (themselves and interact with one another in ways useful for) 198 321.33 P
1 9 Q
-0.46 (UI) 473.06 321.33 P
1 10 Q
-0.51 ( gadgetry) 484.06 321.33 P
-0.51 (.) 525.96 321.33 P
-0.4 (Unlike generic objects, the behavior of visual objects is not dependent on) 198 309.33 P
(the speci\336c) 198 297.33 T
1 9 Q
(UI) 252.07 297.33 T
1 10 Q
(. The V) 263.07 297.33 T
(isContent is a type of visual object which has been) 295.97 297.33 T
(set up to display the contents of a GenV) 198 285.33 T
(iew) 381.47 285.33 T
(.) 396.48 285.33 T
2 F
(u) 180 266.33 T
1 F
-0.8 ( T) 198 266.33 P
-0.8 (o manage the chart itself, we will use an object of an application-speci\336c) 205.74 266.33 P
(subclass of) 198 254.33 T
3 F
(V) 250.6 254.33 T
(isClass) 257.75 254.33 T
1 F
(. It will be in charge of drawing the chart, and we) 293.86 254.33 T
-0.56 (will ask the chart to redraw itself every time the data changes. The chart) 198 242.33 P
(will keep its own copy of the data to be charted in an array) 198 230.33 T
(.) 468.05 230.33 T
2 F
(u) 180 211.33 T
1 F
(Instead of truncating our data \336le, we now organize the \336le so that we) 198 211.33 T
-0.73 (can retrieve the data. This involves retrieving the \322map block\323 of the data) 198 199.33 P
(\336le and accessing the header of a memory block. T) 198 187.33 T
(o \336nd out about the) 428.96 187.33 T
(application\325) 198 175.33 T
(s ability to save data, set up a list of data, exit to) 251.16 175.33 T
1 9 Q
(DOS) 478.65 175.33 T
1 10 Q
(, and) 498.32 175.33 T
(then restart) 198 163.33 T
1 9 Q
(GEOS) 256.52 163.33 T
1 10 Q
(. T) 282.69 163.33 T
(o learn more about working with) 294 163.33 T
1 9 Q
(VM) 448.1 163.33 T
1 10 Q
( \336les, see) 463.1 163.33 T
("V) 198 151.33 T
(irtual Memory) 208.67 151.33 T
(," Chapter) 274.78 151.33 T
(18 of the Concepts book.) 324.97 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 2
%%Page: "107" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GP) 483.34 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(107) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(6.3) 142.54 632 T
0 24 Q
(MCHRT) 180 632 T
(.GP) 263.98 632 T
1 10 Q
-0.62 (W) 180 606.33 P
-0.62 (e\325ve added a few new lines to the geode parameters \336le to accommodate the) 189.26 606.33 P
(addition of the object managing the bar chart.) 180 593.33 T
4 8 Q
0.64 (resource CONTENT object) 81 579.67 S
1 10 Q
-0.13 (These objects will be stored in a resource named) 180 561.33 P
1 9 Q
-0.11 (CONTENT) 404.45 561.33 P
1 10 Q
-0.13 (. This resource is) 450.2 561.33 P
-0.44 (of type) 180 548.33 P
3 F
-0.46 (object) 213 548.33 P
1 F
-0.44 (, meaning that it will hold objects, but that those objects are to) 244.67 548.33 P
(be run under the process thread, not the) 180 535.33 T
1 9 Q
(UI) 369.26 535.33 T
1 10 Q
( thread. W) 380.26 535.33 T
(e might want these) 428.6 535.33 T
-0.85 (objects run in the process thread in case the calculations involved in updating) 180 522.33 P
-0.46 (the chart would slow down) 180 509.33 P
1 9 Q
-0.41 (UI) 304.01 509.33 P
1 10 Q
-0.46 ( operations. As long as we\325re just \336lling in solid) 315.01 509.33 P
(rectangles, that isn\325) 180 496.33 T
(t too likely to happen. However) 271.13 496.33 T
(, if we later decide to) 414.67 496.33 T
(support more complicated charts it could become an issue.) 180 483.33 T
4 9 Q
(export MCChartClass) 81 470 T
1 10 Q
-0.24 (W) 180 451.33 P
-0.24 (e are creating a new class,) 189.26 451.33 P
3 F
-0.25 (MCChartClass) 312.08 451.33 P
1 F
-0.24 (. This \322export\323 line informs the) 387.27 451.33 P
(linker that we\325ve created a new class whose structures and messages our) 180 438.33 T
(program will want to use. Y) 180 425.33 T
(ou may wonder why we didn\325) 307.25 425.33 T
(t need an \322export\323) 440.79 425.33 T
-0.08 (line for the other class we\325ve created for the application,) 180 412.33 P
3 F
-0.08 (MCProcessClass) 440.33 412.33 P
1 F
-0.08 (.) 525.52 412.33 P
-0.27 (The \336le\325) 180 399.33 P
-0.27 (s \322class\323 line automatically signals that the class named on that line) 216.22 399.33 P
(should be exported. All other created classes must have an \322export\323 line.) 180 386.33 T
0 14 Q
(6.4) 142.54 334 T
0 24 Q
(MCHRT) 180 334 T
(.GOC: Classes &) 263.98 334 T
(Constants) 180 306 T
1 10 Q
(There have been several changes made to the) 180 280.33 T
1 9 Q
(MCHRT) 392.62 280.33 T
(.GOC) 426.78 280.33 T
1 10 Q
( \336le. Here we\325ll) 449.79 280.33 T
(take a look at the new code and examine the changes.) 180 267.33 T
4 9 Q
(#define VIEW_RIGHT) 81 254 T
(360) 256.5 254 T
(/* Width of the Chart View */) 301 254 T
(#define VIEW_BOTTOM) 81 243 T
(288) 256.5 243 T
(/* Height of Chart View */) 301 243 T
(#define CHART_BOTTOM) 81 232 T
(268) 256.5 232 T
(/* y = 0 line of Chart */) 301 232 T
(#define CHART_LEFT) 81 221 T
(20) 256.5 221 T
(/* Left bound of leftmost bar */) 301 221 T
(#define BAR_WIDTH) 81 210 T
(30) 256.5 210 T
(/* Width of each bar */) 301 210 T
(#define BAR_WIDTH_ALLOW) 81 199 T
(36) 256.5 199 T
(/* Distance between left edges of bars */) 301 199 T
(#define BORDER_MARGIN) 81 188 T
(10) 256.5 188 T
(/* Arbitrary margin width at edges */) 301 188 T
1 10 Q
(These constants will be used later to compute the coordinates at which we) 180 169.33 T
-0.69 (will places the bars of the bar chart or draw the lines. All of these values refer) 180 156.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 3
%%Page: "108" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(108) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(to coordinate positions or distances measured in points, each one) 180 641.33 T
(seventy-second of an inch.) 180 628.33 T
4 9 Q
(@class MCChartClass, VisClass;) 81 615 T
(@message void) 81 604 T
(MSG_MCC_INSERT_BAR\050word ordinal, word value\051;) 156.6 604 T
(@message void) 81 593 T
(MSG_MCC_DELETE_BAR\050word ordinal\051;) 156.6 593 T
(@message void) 81 582 T
(MSG_MCC_RESIZE_BAR\050word ordinal, word value\051;) 156.6 582 T
(@instance word MCCI_numBars = 0; /* The number of bars in the chart */) 125 571 T
(@instance ChunkHandle MCCI_barArray;) 125 560 T
(@endc) 81 549 T
1 10 Q
(This is the de\336nition of our chart-displaying class. The class,) 180 530.33 T
3 F
-0.42 (MCChartClass) 180 517.33 P
1 F
-0.41 (, is a subclass of) 255.19 517.33 P
3 F
-0.42 (V) 330.22 517.33 P
-0.42 (isClass) 337.37 517.33 P
1 F
-0.41 (. W) 373.48 517.33 P
-0.41 (e are de\336ning a number of new) 387.9 517.33 P
(messages for it along with two \336elds of instance data.) 180 504.33 T
(W) 180 484.33 T
(e\325re de\336ning a \336eld of instance data for our class called) 189.26 484.33 T
5 9 Q
(MCCI) 445.21 484.33 T
5 10 Q
(_numBars) 470.36 484.33 T
1 F
(.) 518.32 484.33 T
(W) 180 471.33 T
(e\325ll use this \336eld to store the number of bars which the chart object is) 189.26 471.33 T
-0.59 (displaying. W) 180 458.33 P
-0.59 (e do this using the) 242.2 458.33 P
3 F
-0.61 (@instance) 327.05 458.33 P
1 F
-0.59 ( keyword. Using this keyword we) 378.58 458.33 P
(de\336ne the instance \336eld and set up zero as the default value for the \336eld.) 180 445.33 T
-0.34 (Our second piece of instance data for this class is) 180 425.33 P
5 9 Q
-0.3 (MCCI) 405.74 425.33 P
5 10 Q
-0.34 (_barArray) 430.89 425.33 P
1 F
-0.34 (, the chunk) 477.18 425.33 P
(handle of an array in which we\325ll be storing a copy of the chart data for the) 180 412.33 T
(chart itself.) 180 399.33 T
4 9 Q
(@classdecl) 81 386 T
(MCChartClass;) 140.4 386 T
1 10 Q
(W) 180 367.33 T
(e declare our new class using the) 189.26 367.33 T
3 F
(@classdecl) 344.27 367.33 T
1 F
( keyword.) 398.42 367.33 T
4 9 Q
(typedef struct {) 81 354 T
(LMemBlockHeader) 125 343 T
(DBH_standardHeader;) 212.5 343 T
(word) 125 332 T
(DBH_numItems;) 212.5 332 T
(ChunkHandle) 125 321 T
(DBH_listHead;) 212.5 321 T
(} DataBlockHeader;) 81 310 T
1 10 Q
-0.09 (W) 180 291.33 P
-0.09 (e\325re going to set up a header structure which we will keep in the) 189.26 291.33 P
1 9 Q
-0.08 (VM) 486.55 291.33 P
1 10 Q
-0.09 ( block) 501.54 291.33 P
-0.64 (in which the linked list is stored. There was already a header consisting of an) 180 278.33 P
3 F
-0.87 (LMemBlockHeader) 180 265.33 P
1 F
-0.85 (; we want to add some information of our own. The local) 280.19 265.33 P
(memory routines will automatically look for the) 180 252.33 T
3 F
(LMemBlockHeader) 403.18 252.33 T
1 F
(information at the head of the block, and we are making sure that the) 180 239.33 T
3 F
-0.35 (LMemBlockHeader) 180 226.33 P
1 F
-0.34 ( \336eld is the \336rst one in the structure to make sure that) 280.19 226.33 P
(it\325) 180 213.33 T
(s placed there.) 188.71 213.33 T
(The other \336elds of the header will contain the number of items in the data) 180 193.33 T
(list and the chunk handle of the head of the linked list. W) 180 180.33 T
(e will use the) 445.97 180.33 T
(information stored in these \336elds to do initialization work when we\325re) 180 167.33 T
(retrieving data from the data \336le.) 180 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 4
%%Page: "109" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: New Objects) 379.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(109) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(DataBlockHeader) 81 642 T
(*dataBlockHeader;) 168.98 642 T
(/* Header info of our data block */) 301 642 T
1 10 Q
(W) 180 623.33 T
(e set up a global variable to store a pointer to the block header) 189.26 623.33 T
(.) 476.73 623.33 T
0 14 Q
(6.5) 142.54 571 T
0 24 Q
(MCHRT) 180 571 T
(.GOC: New Objects) 263.98 571 T
4 9 Q
(@object GenPrimaryClass MCPrimary = {) 81 550 T
(GI_comp = @MCLeftClump, @MCChartView;) 125 539 T
(HINT_ORIENT_CHILDREN_HORIZONTALLY;) 125 528 T
(}) 81 517 T
1 10 Q
-0.4 (The primary window\325) 180 498.33 P
-0.4 (s old children \050the data list gadgetry objects\051 have been) 277.36 498.33 P
-0.04 (grouped together as the children of an object called) 180 485.33 P
3 F
-0.04 (MCLeftClump) 417.96 485.33 P
1 F
-0.04 (. W) 491.11 485.33 P
-0.04 (e did) 505.89 485.33 P
(this to allow these gadgets to be treated as a group when positioning them.) 180 472.33 T
(W) 180 459.33 T
(e\325re making) 189.26 459.33 T
3 F
(MCLeftClump) 246.31 459.33 T
1 F
( a child of the primary window so that its) 319.46 459.33 T
(children will in turn be grouped within the primary) 180 446.33 T
(. The primary window\325) 417.05 446.33 T
(s) 520.77 446.33 T
(other child,) 180 433.33 T
3 F
(MCChartV) 235.37 433.33 T
(iew) 290.3 433.33 T
1 F
(, is our chart view window) 307.71 433.33 T
(.) 428.1 433.33 T
(Finally) 180 413.33 T
(, we\325re applying a hint to the primary window:) 212.05 413.33 T
1 9 Q
(HINT_ORIENT_CHILDREN_HORIZONT) 180 400.33 T
(ALL) 355.99 400.33 T
(Y) 373.67 400.33 T
1 10 Q
(. This hint requests that our) 378.9 400.33 T
-0.17 (clump of data list gadgetry be placed side by side with the chart view) 180 387.33 P
-0.17 (. There) 495.78 387.33 P
(are several ways that you can manipulate the layout of your application\325) 180 374.33 T
(s) 513.76 374.33 T
(generic UI gadgetry) 180 361.33 T
(. If you\325re interested in learning more on this topic, see) 270.92 361.33 T
("Managing UI Geometry) 180 348.33 T
(," Chapter) 292.6 348.33 T
(12 of the Concepts book.) 342.79 348.33 T
4 9 Q
(@object GenInteractionClass MCLeftClump = {) 81 335 T
(GI_comp = @MCDataList, @MCAddTrigger, @MCDeleteTrigger,) 125 324 T
(@MCChangeTrigger, @MCValue;) 344 313 T
(}) 81 302 T
3 10 Q
(MCLeftClump) 180 283.33 T
1 F
( groups together the data-list gadgetry) 253.15 283.33 T
(. The only instance) 430.57 283.33 T
-0.61 (data \336eld which we\325re setting is the) 180 270.33 P
5 9 Q
-0.55 (GI) 342.59 270.33 P
5 10 Q
-0.61 (_comp) 353.25 270.33 P
1 F
-0.61 ( \336eld to specify the children. Not) 382.32 270.33 P
(all objects of) 180 257.33 T
3 F
(GenInteractionClass) 240.01 257.33 T
1 F
( act as invisible grouping objects. By) 347.41 257.33 T
(setting some other instance \336elds, we could have requested that this object) 180 244.33 T
(manifest as a dialog box or menu. In general, any object of) 180 231.33 T
(GenInteractionClass acts as a logical grouping of gadgets with which the) 180 218.33 T
(user will interact to set some particular piece of information.) 180 205.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 5
%%Page: "110" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(110) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@object GenViewClass MCChartView = {) 81 642 T
(GVI_content = MCContent;) 125 631 T
(GVI_horizAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT |) 125 620 T
( GVDA_NO_LARGER_THAN_CONTENT;) 301 609 T
(GVI_vertAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT |) 125 598 T
(GVDA_NO_LARGER_THAN_CONTENT;) 301 587 T
(}) 81 576 T
1 10 Q
(Next we set up) 180 557.33 T
3 F
(MCChartV) 251.68 557.33 T
(iew) 306.61 557.33 T
1 F
(, an object of class) 324.02 557.33 T
3 F
(GenV) 409.96 557.33 T
(iewClass) 438.03 557.33 T
1 F
(. This) 483.77 557.33 T
(object will give us an area in which we can draw) 180 544.33 T
(, providing us with a view) 402.08 544.33 T
(window) 180 531.33 T
(.) 214.64 531.33 T
-0.49 (The) 180 511.33 P
5 9 Q
-0.44 (GVI) 200.07 511.33 P
5 10 Q
-0.49 (_content) 217.07 511.33 P
1 F
-0.49 ( \336eld determines which object will be in charge of displaying) 255.21 511.33 P
(the contents of the view) 180 498.33 T
(. This object,) 288.9 498.33 T
3 F
(MCContent) 350.21 498.33 T
1 F
(, will receive certain) 409.65 498.33 T
(messages when its time to re-display all or part of the view) 180 485.33 T
(.) 451.53 485.33 T
-0.66 (The) 180 465.33 P
5 9 Q
-0.6 (GVI) 199.9 465.33 P
5 10 Q
-0.66 (_horizAttrs) 216.9 465.33 P
1 F
-0.66 ( and) 268.37 465.33 P
5 9 Q
-0.6 (GVI) 290.01 465.33 P
5 10 Q
-0.66 (_vertAttrs) 307.01 465.33 P
1 F
-0.66 ( \336elds will determine how the view will) 352.56 465.33 P
-0.27 (be dimensioned in respect to its content. Our view will take the same size as) 180 452.33 P
(its content. W) 180 439.33 T
(e could have chosen another layout. W) 243.71 439.33 T
(e could, to choose a) 420.39 439.33 T
(common example, have allowed the content to be larger than the view and) 180 426.33 T
(asked that the view be \336tted with scrollbars so that the user could see any) 180 413.33 T
(piece of the contents. For more examples of how to set up view/content) 180 400.33 T
(combinations, see \322V) 180 387.33 T
(isContent,\323 Chapter) 275.13 387.33 T
(25 of the Object Reference Book.) 370.32 387.33 T
4 9 Q
(@end) 81 374 T
(Interface;) 125 374 T
(@start) 81 363 T
(Content;) 125 363 T
1 10 Q
-0.54 (As mentioned in the commentary on the geode parameters \336le, the chart and) 180 344.33 P
-0.28 (bar objects are stored in a separate resource, Content, which runs under the) 180 331.33 P
(process thread.) 180 318.33 T
(The) 180 298.33 T
3 F
(@end) 200.56 298.33 T
1 F
( statement announces that we\325re done with the) 227.29 298.33 T
1 9 Q
(INTERF) 446.95 298.33 T
(ACE) 482.28 298.33 T
1 10 Q
(resource; the) 180 285.33 T
3 F
(@start) 242.4 285.33 T
1 F
( statement announces that the next set of objects we) 274.69 285.33 T
(declare should be placed in the) 180 272.33 T
1 9 Q
(CONTENT) 325.2 272.33 T
1 10 Q
( resource.) 371.87 272.33 T
4 9 Q
(@object VisContentClass MCContent = {) 81 259 T
(VCI_comp = @MCChart;) 125 248 T
(}) 81 237 T
1 10 Q
-0.76 (The object) 180 218.33 P
3 F
-0.79 (MCContent) 228.66 218.33 P
1 F
-0.76 ( will act as a go-between for) 288.11 218.33 P
3 F
-0.79 (MCV) 413.91 218.33 P
-0.79 (iew) 438.65 218.33 P
1 F
-0.76 ( and) 456.98 218.33 P
3 F
-0.79 (MCChart) 478.42 218.33 P
1 F
-0.76 (.) 526.2 218.33 P
(As the content object, it will be in charge of working with the view) 180 205.33 T
(. If this) 484.49 205.33 T
-0.29 (application\325) 180 192.33 P
-0.29 (s view allowed scrolling or magni\336cation, it would work together) 233.16 192.33 P
(with the content object to implement these features. Our content has one) 180 179.33 T
-0.25 (child, the object which will manage the chart itself. This child is speci\336ed by) 180 166.33 P
(means of the) 180 153.33 T
5 9 Q
(VCI) 241.86 153.33 T
5 10 Q
(_comp) 258.36 153.33 T
1 F
( \336eld, the visual equivalent of the) 287.43 153.33 T
5 9 Q
(GI) 444.87 153.33 T
5 10 Q
(_comp) 455.53 153.33 T
1 F
( \336le.) 484.6 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 6
%%Page: "111" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCHRT.GOC: New Objects) 379.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(111) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@object MCChartClass MCChart = {) 81 642 T
(VI_bounds = { 0, 0, VIEW_RIGHT, VIEW_BOTTOM };) 125 631 T
(MCCI_barArray = BarDataChunk) 125 620 T
(}) 81 609 T
1 10 Q
(This is our chart object, in charge of displaying the chart.) 180 590.33 T
-0.08 (The \336rst piece of instance data which we set for this object is the) 180 570.33 P
5 9 Q
-0.08 (VI) 479.97 570.33 P
5 10 Q
-0.08 (_bounds) 489.97 570.33 P
1 F
(\336eld. Y) 180 557.33 T
(ou may recall that we were able to identify objects in the output of) 211.49 557.33 T
-0.5 (Swat\325) 180 544.33 P
-0.5 (s) 205.2 544.33 P
3 F
-0.51 (vistree) 212.11 544.33 P
1 F
-0.5 ( command by their bounds. V) 247.85 544.33 P
-0.5 (isible objects know their bounds,) 380.13 544.33 P
(and this one is no exception. W) 180 531.33 T
(e didn\325) 322.61 531.33 T
(t bother to set the bounds of the) 352.99 531.33 T
(V) 180 518.33 T
(isContent object, as it will automatically expand to \336t its children.) 186.78 518.33 T
-0.15 (Depending on how much you remember from the) 180 498.33 P
3 F
-0.16 (vistree) 406.95 498.33 P
1 F
-0.15 ( example, you may) 442.69 498.33 P
-0.84 (be surprised by the values given for) 180 485.33 P
3 F
-0.87 (MCChart) 341.52 485.33 P
1 F
-0.84 (\325) 389.3 485.33 P
-0.84 (s bounds. If the chart\325) 390.96 485.33 P
-0.84 (s left and) 487.78 485.33 P
(top boundaries are zero and zero, doesn\325) 180 472.33 T
(t that mean that the chart will) 364.64 472.33 T
-0.08 (appear in the primary window\325) 180 459.33 P
-0.08 (s top left corner? In this case, the bounds are) 321.94 459.33 P
(based upon that of the view window; this is one aspect of the relationship) 180 446.33 T
(between views and their contents.) 180 433.33 T
(W) 180 413.33 T
(e set the) 189.26 413.33 T
5 9 Q
(MCCI) 231.12 413.33 T
5 10 Q
(_barArray) 256.27 413.33 T
1 F
( to be the handle of) 303.67 413.33 T
3 F
(BarDataChunk) 394.8 413.33 T
1 F
(, the chunk) 473.7 413.33 T
(where we\325re storing the chart\325) 180 400.33 T
(s copy of the chart data.) 317.41 400.33 T
4 9 Q
(@chunk word BarDataChunk[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};) 81 387 T
1 10 Q
-0.24 (Here we\325ve set up an array within a chunk. So far) 180 368.33 P
-0.24 (, we don\325) 406.9 368.33 P
-0.24 (t have any code to) 446.25 368.33 P
(insure that the user doesn\325) 180 355.33 T
(t ask for so many bars that they over\337ow this) 303.53 355.33 T
-0.13 (buffer) 180 342.33 P
-0.13 (. Perhaps later we\325ll add some. For now we\325re just looking for a simple) 207.03 342.33 P
(way to store the data, and to illustrate how you can have a data structure) 180 329.33 T
(reside in the same resource as an object using the) 180 316.33 T
3 F
(@chunk) 412.24 316.33 T
1 F
( keyword.) 452.49 316.33 T
4 9 Q
(@end) 81 303 T
(Content;) 125 303 T
(@start) 81 292 T
(Interface;) 125 292 T
1 10 Q
(W) 180 273.33 T
(e\325re done declaring the object we want in the) 189.26 273.33 T
1 9 Q
(CONTENT) 397.8 273.33 T
1 10 Q
( resource;) 444.47 273.33 T
-0.51 (eventually the objects representing the bars of the bar chart will be placed in) 180 260.33 P
(this resource, but we won\325) 180 247.33 T
(t create them until later) 299.83 247.33 T
(.) 410.77 247.33 T
-0.76 (W) 180 227.33 P
-0.76 (e\325re using the) 189.26 227.33 P
3 F
-0.78 (@end) 252.17 227.33 P
1 F
-0.76 ( statement to signal that we\325re done with the) 278.9 227.33 P
1 9 Q
-0.68 (CONTENT) 482.3 227.33 P
1 10 Q
-0.2 (resource; the) 180 214.33 P
3 F
-0.21 (@start) 241.99 214.33 P
1 F
-0.2 ( symbol signals that we\325re going to start putting objects) 274.28 214.33 P
-0.28 (in the) 180 201.33 P
1 9 Q
-0.25 (INTERF) 209.25 201.33 P
-0.25 (ACE) 244.59 201.33 P
1 10 Q
-0.28 ( resource again. Note that there are now two areas within) 264.08 201.33 P
1 9 Q
(MCHRT) 180 188.33 T
(.GOC) 214.16 188.33 T
1 10 Q
( \336le in which we\325re declaring objects which will be put in the) 237.17 188.33 T
1 9 Q
(INTERF) 180 175.33 T
(ACE) 215.33 175.33 T
1 10 Q
( resource; this is quite legal. Generally it\325) 234.83 175.33 T
(s more readable not to) 424.68 175.33 T
-0.71 (do so, and normally we\325d keep the) 180 162.33 P
1 9 Q
-0.64 (INTERF) 333.93 162.33 P
-0.64 (ACE) 369.26 162.33 P
1 10 Q
-0.71 ( resource in one place, but we\325ll) 388.75 162.33 P
(leave things organized this way just to remind you that it\325) 180 149.33 T
(s legal.) 447.26 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 7
%%Page: "112" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(112) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(6.6) 142.54 632 T
0 24 Q
(MCProcessClass Code) 180 632 T
4 9 Q
(@method MCListInsertDataItem, MCProcessClass, MSG_MCP_INSERT_DATA_ITEM {) 81 611 T
(\311) 81 600 T
(@send MCChart::MSG_MCC_INSERT_BAR\050ordinal, WWFixedToInt\050value\051\051;) 125 589 T
(}) 81 578 T
(@method MCProcessClass, MSG_MCP_DELETE_DATA_ITEM {) 81 567 T
(\311) 81 556 T
(@send MCChart::MSG_MCC_DELETE_BAR\050ordinal-1\051;) 125 545 T
(}) 81 534 T
(@method MCProcessClass, MSG_MCP_SET_DATA_ITEM {) 81 523 T
(\311) 81 512 T
(@send MCChart::MSG_MCC_RESIZE_BAR\050ordinal-1, WWFixedToInt\050value\051\051;) 125 501 T
(}) 81 490 T
1 10 Q
(W) 180 471.33 T
(e\325ve made additions to the methods with which the process will handle) 189.26 471.33 T
(changes to the data list. The process will new alert the chart object that it) 180 458.33 T
(needs to update itself.) 180 445.33 T
4 9 Q
(@method MCProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {) 81 432 T
(char fileName[] = \322MChtDATA\323;) 125 421 T
(char dummyDir[] = \322.\323;) 125 410 T
(word numItems;) 125 399 T
1 10 Q
(This method has gone through some major changes, re\337ecting the) 180 380.33 T
(improvements we\325ve made to the way the data \336le is read. W) 180 367.33 T
(e\325re setting up) 460.24 367.33 T
(two new variables in the handler) 180 354.33 T
(.) 331.51 354.33 T
3 F
(dummyDir) 337.07 354.33 T
1 F
( is a string which we\325ll use) 393.18 354.33 T
-0.45 (when setting our directory) 180 341.33 P
-0.45 (. W) 299.93 341.33 P
-0.45 (e\325ll use) 314.3 341.33 P
3 F
-0.47 (numItems) 348.04 341.33 P
1 F
-0.45 ( to keep track of the number) 400.44 341.33 P
(of data items stored in the data \336le.) 180 328.33 T
4 9 Q
(FileSetCurrentPath\050SP_DOCUMENT, dummyDir\051;) 125 315 T
1 10 Q
-0.54 (Because we were truncating our data \336le before, it didn\325) 180 296.33 P
-0.54 (t matter if the \336le we) 433.49 296.33 P
-0.05 (opened was the same as the \336le saved last time. Since we now retrieve data) 180 283.33 P
-0.5 (from the \336le, we must make sure that we\325re consistent about which directory) 180 270.33 P
(we store it in.) 180 257.33 T
-0.12 (The) 180 237.33 P
3 F
-0.13 (FileSetCurrentPath\050\051) 200.44 237.33 P
1 F
-0.12 ( routine sets our current directory) 311.74 237.33 P
-0.12 (. In this case,) 467.22 237.33 P
(we\325re using the routine to change our current directory to the) 180 224.33 T
1 9 Q
(DOCUMENT) 465.73 224.33 T
1 10 Q
(directory) 180 211.33 T
(, using a \322standard path\323 value. There values have been set up to) 220.36 211.33 T
-0.34 (make it easy to navigate the standard directories which have been set up for) 180 198.33 P
-0.37 (the system. All further \336le operations for this thread will now be assumed to) 180 185.33 P
-0.49 (take place in the) 180 172.33 P
1 9 Q
-0.44 (DOCUMENT) 257.69 172.33 P
1 10 Q
-0.49 ( directory) 313.86 172.33 P
-0.49 (. For more information about working) 356.51 172.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 8
%%Page: "113" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(MCProcessClass Code) 405.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(113) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(with directories and the \336le system, see "File System," Chapter) 180 641.33 T
(17 of the) 474.67 641.33 T
(Concepts book.) 180 628.33 T
4 9 Q
(dataFile=VMOpen\050fileName,) 125 615 T
(VMAF_FORCE_READ_WRITE | VMAF_FORCE_DENY_WRITE,) 212.5 604 T
(VMO_CREATE, 0\051;) 212.5 593 T
1 10 Q
-0.64 (W) 180 574.33 P
-0.64 (e\325re calling) 189.26 574.33 P
3 F
-0.67 (VMOpen\050\051) 240.94 574.33 P
1 F
-0.64 ( as before, except that now we don\325) 293.71 574.33 P
-0.64 (t truncate the \336le.) 449.23 574.33 P
4 9 Q
(dataFileBlock = VMGetMapBlock\050dataFile\051;) 125 561 T
1 10 Q
-0.25 (Now that we\325ve opened the \336le, our \336rst step in extracting the data from the) 180 542.33 P
-0.47 (\336le is to access the \336le\325) 180 529.33 P
-0.47 (s map block. This statement begs the question of what) 282.11 529.33 P
(a \322map block\323 is. Normally) 180 516.33 T
(, all blocks of the \336le are referenced by means of) 301.89 516.33 T
1 9 Q
(VM) 180 503.33 T
1 10 Q
( block handles. This is good in that it allows the) 194.99 503.33 T
1 9 Q
(VM) 418.2 503.33 T
1 10 Q
( manager to) 433.2 503.33 T
(manipulate the blocks without having to worry about updating a lot of) 180 490.33 T
(pointers to the blocks which are being manipulated. However) 180 477.33 T
(, when we\325re) 462.44 477.33 T
(\336rst loading the \336le, we don\325) 180 464.33 T
(t have the handles of any of the blocks which) 310.58 464.33 T
-0.22 (were used to store data. The) 180 451.33 P
1 9 Q
-0.2 (VM) 312.23 451.33 P
1 10 Q
-0.22 ( manager allows us to mark one block of the) 327.22 451.33 P
(\336le as the \322map block\323\321we can retrieve this block using the) 180 438.33 T
3 F
(VMGetMapBlock\050\051) 180 425.33 T
1 F
(command. It is called the map block because it often) 278.61 425.33 T
(contains the handles of the other blocks of the \336les; programs will get the) 180 412.33 T
(map block and then use the handles stored within to access the data stored) 180 399.33 T
(within the \336le.) 180 386.33 T
-0.02 (As it happens, all of our program\325) 180 366.33 P
-0.02 (s data \336ts into a single block, so we\325re just) 333.95 366.33 P
(going to use that block of data as the map block; when we retrieve the map) 180 353.33 T
(block, we\325re accessing the data.) 180 340.33 T
4 9 Q
(if \050dataFileBlock == NULL\051) 125 327 T
1 10 Q
-0.72 (The \336rst thing we\325re going to do is see if our \336le has a map block yet. If it does,) 180 308.33 P
(we\325ll open the \336le normally) 180 295.33 T
(. If it doesn\325) 303.91 295.33 T
(t then that means that this is a new) 357.81 295.33 T
(\336le, and that we\325ll have to set up the block immediately) 180 282.33 T
(.) 434.88 282.33 T
4 9 Q
(dataFileBlock = VMAllocLMem\050dataFile,) 168.98 269 T
( LMEM_TYPE_GENERAL,) 301 258 T
( sizeof\050DataBlockHeader\051\051;) 301 247 T
(VMSetMapBlock\050dataFile, dataFileBlock\051;) 168.98 236 T
1 10 Q
(T) 180 217.33 T
(o set up the map block, we call) 185.75 217.33 T
3 F
(VMAllocLMem\050\051) 329.49 217.33 T
1 F
( as we did in the earlier) 413.37 217.33 T
(version of the program, but then call) 180 204.33 T
3 F
(VMSetMapBlock\050\051) 351.68 204.33 T
1 F
( on the) 445.76 204.33 T
1 9 Q
(VM) 480.21 204.33 T
1 10 Q
( block) 495.2 204.33 T
(thus created.) 180 191.33 T
(Actually) 180 171.33 T
(, we\325re doing something different when we call) 217.78 171.33 T
3 F
(VMAllocLMem\050\051) 434.65 171.33 T
1 F
(:) 518.53 171.33 T
-0.48 (we\325re asking it to allocate some extra room for our header information. W) 180 158.33 P
-0.48 (e\325re) 512.22 158.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 9
%%Page: "114" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(114) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.74 (going to set up a structure in the header of our block in which we\325ll store some) 180 641.33 P
(information about the data within.) 180 628.33 T
4 9 Q
(dataBlockHeader = VMLock\050dataFile,) 168.98 615 T
(dataFileBlock,) 301 604 T
(dataListBlockPtr\051;) 301 593 T
(dataBlockHeader->DBH_listHead = NULL;) 168.98 582 T
(dataBlockHeader->DBH_numItems = 1;) 168.98 571 T
(VMDirty\050dataListBlock\051;) 168.98 560 T
(VMUnlock\050dataListBlock\051;) 168.98 549 T
(}) 125 538 T
1 10 Q
(T) 180 519.33 T
(o work with our) 185.75 519.33 T
1 9 Q
(VM) 261.5 519.33 T
1 10 Q
( Block header) 276.49 519.33 T
(, we lock the block down. The header) 338.9 519.33 T
-0.33 (appears at the head of the block, and) 180 506.33 P
3 F
-0.34 (VMLock\050\051) 350.72 506.33 P
1 F
-0.33 ( returns the a pointer to the) 401.46 506.33 P
(head of the block, and thus we have a pointer to our header) 180 493.33 T
(.) 453.37 493.33 T
(W) 180 473.33 T
(e \336ll the header structure with some basic information: the handle of the) 189.26 473.33 T
(\050nonexistent\051 head of the data list and the number of items which should) 180 460.33 T
(appear in the gadget) 180 447.33 T
3 F
(MCDataList) 278.35 447.33 T
1 F
(.) 340.93 447.33 T
(Next, we mark the block dirty with) 180 427.33 T
3 F
(VMDirty\050\051) 344.85 427.33 T
1 F
( and unlock it with) 397.62 427.33 T
3 F
-0.07 (VMUnlock\050\051) 180 414.33 P
1 F
-0.06 (. Marking it dirty means that the next time we save the \336le, it) 242.22 414.33 P
-0.57 (will save that block, at which time the block will once again be marked clean.) 180 401.33 P
-0.07 (Note that while the block is dirty) 180 388.33 P
-0.07 (, we know that the memory manager won\325) 331.3 388.33 P
-0.07 (t) 524.4 388.33 P
(discard it. If we had just read that block but hadn\325) 180 375.33 T
(t actually changed any of) 411.71 375.33 T
-0.47 (its information then we would unlock the block but not bother to dirty it \336rst.) 180 362.33 P
4 9 Q
(dataBlockHeader = VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 349 T
(dataListHead = dataBlockHeader->DBH_listHead;) 125 338 T
(numItems = dataBlockHeader->DBH_numItems;) 125 327 T
(VMUnlock\050dataListBlock\051;) 125 316 T
1 10 Q
(Whether there was already a block header or we\325ve just now created it, we) 180 297.33 T
(will now access that block and extract the information we need.) 180 284.33 T
-0.73 (As above, we lock the block and access the header data structure. When we\325re) 180 264.33 P
-0.15 (done, we will unlock the block. Note that we aren\325) 180 251.33 P
-0.15 (t changing the data, so we) 408.16 251.33 P
(don\325) 180 238.33 T
(t need to mark the block dirty) 198.71 238.33 T
(.) 335.4 238.33 T
4 9 Q
(@send MCDataList::MSG_GEN_DYNAMIC_LIST_INITIALIZE\050numItems\051;) 125 225 T
(@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\0500, FALSE\051;) 125 214 T
1 10 Q
-0.38 (Instead of telling the list to start over with just one item, we\325re going to have) 180 195.33 P
-0.17 (it start with the proper number of items, as extracted from the \336le. W) 180 182.33 P
-0.17 (e\325ll set) 498.92 182.33 P
(the selection to the \336rst item in the list.) 180 169.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 10
%%Page: "115" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Graphics and Drawing) 409.4 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(115) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@callsuper\050\051;) 125 642 T
(}) 81 631 T
1 10 Q
(W) 180 612.33 T
(e end the handler as we did in the previous version of the program, by) 189.26 612.33 T
(calling the superclass.) 180 599.33 T
4 9 Q
(@method MCProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {) 81 586 T
(word) 125 575 T
(numItems;) 168.98 575 T
(numItems = @call MCDataList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS\050\051;) 125 564 T
1 10 Q
(When closing the application, we\325re going to have to make sure that we set) 180 545.33 T
-0.66 (up our \336le with all of the information that we\325ll need when we next start from) 180 532.33 P
(that \336le. The) 180 519.33 T
1 9 Q
(MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS) 242.61 519.33 T
1 10 Q
( message will) 451.78 519.33 T
(return the number of items in the list object.) 180 506.33 T
4 9 Q
(dataBlockHeader = VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 493 T
(dataBlockHeader->DBH_listHead = dataListHead;) 125 482 T
(dataBlockHeader->DBH_numItems = numItems;) 125 471 T
(VMDirty\050dataListBlock\051;) 125 460 T
(VMUnlock\050dataListBlock\051;) 125 449 T
1 10 Q
(Next, we lock the) 180 430.33 T
1 9 Q
(VM) 262.61 430.33 T
1 10 Q
( block and \336ll in the header with the appropriate) 277.6 430.33 T
(information. When we\325re done we mark the block dirty and unlock it.) 180 417.33 T
4 9 Q
(VMSave\050dataFile\051;) 125 404 T
1 10 Q
-0.06 (Next we save the \336le so that all of the blocks which have been marked dirty) 180 385.33 P
(will be saved to disk. In this case, \322all of the blocks\323 means our data block,) 180 372.33 T
(since that\325) 180 359.33 T
(s the only block in the \336le.) 227.23 359.33 T
4 9 Q
(VMClose\050dataFile, FALSE\051;) 125 346 T
(@callsuper\050\051;) 125 335 T
(}) 81 324 T
1 10 Q
(As we did in the previous version of the program, we now close the data \336le) 180 305.33 T
(and call the superclass.) 180 292.33 T
0 14 Q
(6.7) 142.54 240 T
0 24 Q
(Graphics and Drawing) 180 240 T
4 9 Q
(@method MCChartClass, MSG_VIS_DRAW {) 81 219 T
(sword count;) 125 208 T
(word *barArray;) 125 197 T
1 10 Q
(Our next method is our chart\325) 180 178.33 T
(s handler for) 316.67 178.33 T
1 9 Q
(MSG_VIS_DRA) 378.52 178.33 T
(W) 443.69 178.33 T
1 10 Q
(. Y) 451.41 178.33 T
(ou may recall) 462.9 178.33 T
-0.33 (that the content is in charge of redrawing itself whenever the view says that) 180 165.33 P
-0.38 (it\325) 180 152.33 P
-0.38 (s necessary) 188.71 152.33 P
-0.38 (. A V) 239.81 152.33 P
-0.38 (isContent object normally responds to this by generating a) 261.4 152.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 11
%%Page: "116" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(116) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.43 (GState with the correct window handle and sending itself a) 180 641.33 P
1 9 Q
-0.38 (MSG_VIS_DRA) 452.98 641.33 P
-0.38 (W) 518.15 641.33 P
1 10 Q
-0.43 (.) 525.87 641.33 P
(The) 180 628.33 T
1 9 Q
(MSG_VIS_DRA) 200.56 628.33 T
(W) 265.73 628.33 T
1 10 Q
( message will then be relayed to all of the content\325) 274.56 628.33 T
(s) 504.79 628.33 T
(children\321in this case, there is but one child,) 180 615.33 T
3 F
(MCChart) 389.09 615.33 T
1 F
(.) 436.87 615.33 T
-0.76 (W) 180 595.33 P
-0.76 (e want our handler for this message to draw a couple of lines and then relay) 189.26 595.33 P
(the) 180 582.33 T
1 9 Q
(MSG_VIS_DRA) 197.78 582.33 T
(W) 262.95 582.33 T
1 10 Q
( on to the bar objects so that they will draw themselves.) 271.78 582.33 T
4 9 Q
(GrDrawVLine\050gstate,) 125 569 T
( CHART_LEFT-BORDER_MARGIN,) 212.5 558 T
( BORDER_MARGIN,) 212.5 547 T
( CHART_BOTTOM\051;) 212.5 536 T
1 10 Q
(The) 180 517.33 T
3 F
( GrDrawVLine\050\051) 197.78 517.33 T
1 F
( routine draws a vertical line; here it is drawing the) 281.57 517.33 T
(vertical line which appears towards the left of the chart.) 180 504.33 T
(The \336rst argument which we pass to this routine is a handle to a graphics) 180 484.33 T
(state, or \322GState.\323 This GState is a data structure which contains) 180 471.33 T
-0.27 (information necessary for interpreting graphics commands. One of the more) 180 458.33 P
-0.15 (important pieces of information is a window handle which will determine in) 180 445.33 P
(which window the drawing takes place. The content sent us this message,) 180 432.33 T
(and the content has already set up the GState with the correct window) 180 419.33 T
(information.) 180 406.33 T
-0.45 (The three other arguments are coordinates to be used when drawing. W) 180 386.33 P
-0.45 (e are) 506.34 386.33 P
-0.68 (computing the coordinates to use by means of the constants de\336ned earlier in) 180 373.33 P
(the source code.) 180 360.33 T
4 9 Q
(GrDrawHLine\050gstate,) 125 347 T
( CHART_LEFT,) 168.98 336 T
( CHART_BOTTOM+BORDER_MARGIN,) 168.98 325 T
( VIEW_RIGHT - BORDER_MARGIN\051;) 168.98 314 T
1 10 Q
(Here we are drawing the horizontal line which appears towards the bottom) 180 295.33 T
(of the chart.) 180 282.33 T
4 9 Q
(barArray = LMemDerefHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 269 T
1 10 Q
(Next we get a pointer to the chart data we\325ve been maintaining. W) 180 250.33 T
(e get a) 486.73 250.33 T
(pointer to the chunk in which we\325re storing the chart data. W) 180 237.33 T
(e\325re taking) 462.43 237.33 T
(advantage of the fact that we know that we\325re storing the chart data in the) 180 224.33 T
(same resource as the chart object itself. W) 180 211.33 T
(e know that the data\325) 374.27 211.33 T
(s block is) 472.08 211.33 T
-0.12 (locked, because we\325re executing code for an object in the same block. W) 180 198.33 P
-0.12 (e use) 504.93 198.33 P
5 F
-0.47 (oself) 180 185.33 P
1 F
-0.47 (, an automatically maintained optr to our object, to reference the correct) 200.54 185.33 P
(block.) 180 172.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 12
%%Page: "117" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Maintaining the Chart Data) 380.65 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(117) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.8) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 180 641.33 T
(o access its instance data, the chart\325) 185.75 641.33 T
(s handlers use pself, which is) 351.33 641.33 T
(automatically set to be a pointer to the object\325) 180 628.33 T
(s instance data at the start of) 390.23 628.33 T
(the handler) 180 615.33 T
(. T) 233.15 615.33 T
(reat) 244.76 615.33 T
5 F
(pself) 266.43 615.33 T
1 F
( as a structure, using the \322->\323 operator to extract) 287.71 615.33 T
(individual \336elds of instance data. Note that) 180 602.33 T
5 F
(pself) 383.56 602.33 T
1 F
( is a true pointer) 404.84 602.33 T
(. This) 481.33 602.33 T
(means that if our handler does something that might move the object in) 180 589.33 T
(memory) 180 576.33 T
(, we\325ll have to update) 216.48 576.33 T
5 F
(pself) 317.25 576.33 T
1 F
( if we want to use it afterwards. Use) 338.53 576.33 T
3 F
(ObjDerefGen\050\051) 180 563.33 T
1 F
( to dereference a generic object,) 255.92 563.33 T
3 F
(ObjDerefV) 403.69 563.33 T
(is\050\051) 458.06 563.33 T
1 F
( to) 474.54 563.33 T
(dereference a visual object, and one of the other ObjDeref\311\050\051 macros to) 180 550.33 T
-0.41 (dereference other kinds of objects. For more information about working with) 180 537.33 P
5 F
(pself) 180 524.33 T
1 F
( and) 201.28 524.33 T
5 F
(oself) 224.25 524.33 T
1 F
(, see the Concepts book.) 244.79 524.33 T
4 9 Q
(for \050count = 0; count < pself->MCCI_numBars; count++\051) 125 511 T
( {) 125 500 T
(word top, bottom, left, right;) 168.98 489 T
(bottom = CHART_BOTTOM;) 168.98 478 T
(top = bottom - barArray[count];) 168.98 467 T
(left = CHART_LEFT + \050count * BAR_WIDTH_ALLOW\051;) 168.98 456 T
(right = left + BAR_WIDTH;) 168.98 445 T
(GrFillRect\050gstate, left, top, right, bottom\051;) 168.98 434 T
( }) 125 423 T
(}) 81 412 T
1 10 Q
-0.08 (Once we have a pointer to the head of our data array) 180 393.33 P
-0.08 (, it\325) 421.98 393.33 P
-0.08 (s a simple matter to) 436.17 393.33 P
-0.77 (cycle through the array) 180 380.33 P
-0.77 (, drawing a rectangle for each bar of the graph. W) 284.71 380.33 P
-0.77 (e use) 506.25 380.33 P
-0.45 (the) 180 367.33 P
3 F
-0.46 (GrFillRect\050\051) 197.33 367.33 P
1 F
-0.45 ( routine which takes a GState and four coordinates. T) 260.3 367.33 P
-0.45 (o \336nd) 503.37 367.33 P
-0.21 (out about other things you can draw) 180 354.33 P
-0.21 (, see "Drawing Graphics," Chapter) 345.4 354.33 P
-0.21 (24 of) 506.42 354.33 P
(the Concepts book.) 180 341.33 T
0 14 Q
(6.8) 142.54 289 T
0 24 Q
(Maintaining the Chart Data) 180 289 T
4 9 Q
(@method MCChartClass, MSG_MCC_INSERT_BAR {) 81 268 T
(word) 125 257 T
(count;) 212.5 257 T
(word) 125 246 T
(*barArray;) 212.5 246 T
(barArray = LMemDerefHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 235 T
1 10 Q
-0.11 (W) 180 216.33 P
-0.11 (e\325re storing the chart data in an array within a chunk. W) 189.26 216.33 P
-0.11 (e get a pointer to) 450.63 216.33 P
(the array by means of) 180 203.33 T
3 F
(LMemDerefHandles\050\051) 283.72 203.33 T
1 F
(, as we did in our) 395.38 203.33 T
1 9 Q
(MSG_VIS_DRA) 180 190.33 T
(W) 245.17 190.33 T
1 10 Q
( handler) 254 190.33 T
(.) 292.15 190.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 13
%%Page: "118" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(118) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.8) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(for\050count=pself->MCCI_numBars; count > ordinal; --count\051) 125 642 T
( {) 125 631 T
(barArray[count] = barArray[count-1];) 168.98 620 T
( }) 125 609 T
(barArray[ordinal] = value;) 125 598 T
1 10 Q
-0.07 (Once we have a pointer to the array) 180 579.33 P
-0.07 (, we manipulate its data pretty much as) 344.14 579.33 P
(we would any array) 180 566.33 T
(. Here we\325re moving over all of the data in the array to) 270.2 566.33 T
(make room for a new element.) 180 553.33 T
4 9 Q
(ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 540 T
1 10 Q
(As with our) 180 521.33 T
1 9 Q
(VM) 236.67 521.33 T
1 10 Q
( block, we must mark our object block dirty so that our) 251.66 521.33 T
-0.18 (changes to the Content resource block will be saved. \050Though we haven\325) 180 508.33 P
-0.18 (t set) 508.4 508.33 P
(up a) 180 495.33 T
1 9 Q
(VM) 202.97 495.33 T
1 10 Q
( \336le to hold this block, the system will need to save it to state if the) 217.96 495.33 T
(user shuts the system down\051. Instead of) 180 482.33 T
3 F
(VMDirty\050\051) 366.49 482.33 T
1 F
(, we use) 419.26 482.33 T
3 F
(ObjMarkDirtyHandles\050\051) 180 469.33 T
1 F
(, a routine useful for working with object blocks.) 304.07 469.33 T
4 9 Q
(pself->MCCI_numBars++;) 125 456 T
1 10 Q
(Finally we update the chart object\325) 180 437.33 T
(s instance data to re\337ect the addition of) 339.84 437.33 T
(the new bar) 180 424.33 T
(.) 234.27 424.33 T
4 9 Q
(@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 411 T
( VUM_DELAYED_VIA_APP_QUEUE\051;) 301 400 T
(}) 81 389 T
1 10 Q
(Since we\325ve added a new bar and changed the positions of some others, the) 180 370.33 T
-0.4 (chart needs to redraw itself. Here, it sends itself a) 180 357.33 P
1 9 Q
-0.36 (MSG_VIS_MARK_INV) 409.96 357.33 P
-0.36 (ALID) 505.45 357.33 P
1 10 Q
(with a) 180 344.33 T
1 9 Q
(VOF_IMAGE_INV) 212.05 344.33 T
(ALID) 289.21 344.33 T
1 10 Q
( argument to specify that it is presently drawn) 312.37 344.33 T
(incorrectly and should repair the situation. The) 180 331.33 T
1 9 Q
(VUM_DELA) 180 318.33 T
(YED_VIA_APP_QUEUE) 232 318.33 T
1 10 Q
( argument speci\336es how immediately the) 335.17 318.33 T
(redrawing should occur) 180 305.33 T
(. W) 287.58 305.33 T
(e are specifying that it should be delayed on the) 302.4 305.33 T
(process queue, the queue in which incoming messages are stored while) 180 292.33 T
(waiting for the thread to handle all the previously-arrived messages.) 180 279.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 14
%%Page: "119" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(119) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(@method MCChartClass, MSG_MCC_DELETE_BAR {) 81 642 T
(word) 125 631 T
(count;) 168.98 631 T
(word) 125 620 T
(*barArray;) 168.98 620 T
(pself->MCCI_numBars -=1;) 125 598 T
(barArray = LMemDerefHandles\050OptrToHandle\050oself\051,) 125 587 T
(pself->MCCI_barArray\051;) 212.5 576 T
(for\050count=ordinal; count < pself->MCCI_numBars; count++\051) 125 565 T
( {) 125 554 T
(barArray[count] = barArray[count+1];) 168.98 543 T
( }) 125 532 T
(ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 521 T
(@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 510 T
( VUM_DELAYED_VIA_APP_QUEUE\051;) 301 499 T
(}) 81 488 T
(@method MCChartClass, MSG_MCC_RESIZE_BAR {) 81 477 T
(word *barArray;) 125 466 T
(barArray = LMemDerefHandles\050OptrToHandle\050oself\051,) 125 444 T
(pself->MCCI_barArray\051;) 125 433 T
(barArray[ordinal] = value;) 125 422 T
(ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 411 T
(@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 389 T
(VUM_DELAYED_VIA_APP_QUEUE\051;) 301 378 T
1 10 Q
(These message handlers work in much the same way as that for) 180 346.33 T
1 9 Q
(MSG_MCC_INSERT_BAR) 180 333.33 T
1 10 Q
(.) 291.32 333.33 T
0 14 Q
(6.9) 142.54 281 T
0 24 Q
(SW) 180 281 T
(A) 217.34 281 T
(T) 232.9 281 T
(.RC: Automating Swat) 244.9 281 T
1 10 Q
-0.42 (This \336le contains some Swat commands we learned about in the last chapter) 180 255.33 P
-0.42 (.) 528.22 255.33 P
4 8 Q
0.64 (srcwin 15) 81 241.67 S
0.64 (sd mchrt) 81 231.67 S
0.64 (run mchrt) 81 221.67 S
1 10 Q
-0.37 (Swat will \336nd this \336le and execute these commands when it starts up. W) 180 203.33 P
-0.37 (e\325ve) 511.18 203.33 P
(already seen the effects of these commands in previous Swat sessions. The) 180 190.33 T
3 F
(srcwin) 180 177.33 T
1 F
( command will automatically set up a source-code window at the) 215.19 177.33 T
(bottom of the screen. It will also generate a warning; at the time that Swat) 180 164.33 T
-0.34 (executes the srcwin command, there won\325) 180 151.33 P
-0.34 (t be any source code to look at. The) 369.78 151.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 15
%%Page: "120" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(120) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(sd) 180 641.33 T
1 F
( command changes our symbolic default to be the) 191.67 641.33 T
3 F
(mchrt) 421.51 641.33 T
1 F
( thread. Finally) 453 641.33 T
(,) 524.13 641.33 T
(the) 180 628.33 T
3 F
(run) 197.78 628.33 T
1 F
( command will start up our application.) 216.67 628.33 T
-0.28 (T) 180 608.33 P
-0.28 (o see Swat automatically load the) 185.75 608.33 P
1 9 Q
-0.25 (SW) 342.06 608.33 P
-0.25 (A) 355.73 608.33 P
-0.25 (T) 361.73 608.33 P
-0.25 (.RC) 366.91 608.33 P
1 10 Q
-0.28 ( \336le, exit Swat if you\325re in it and) 382.4 608.33 P
-0.7 (then re-start Swat. If you\325re running Swat already and don\325) 180 595.33 P
-0.7 (t want to re-start,) 448.58 595.33 P
(you can load the) 180 582.33 T
1 9 Q
(SW) 258.16 582.33 T
(A) 271.83 582.33 T
(T) 277.83 582.33 T
(.RC) 283.01 582.33 T
1 10 Q
( \336le manually using the) 298.51 582.33 T
3 F
(load) 410.94 582.33 T
1 F
( Swat command.) 433.35 582.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 16
%%Page: "121" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(121) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(Swat version 2.0 \050Mar 4 1993 19:50:06\051.) 81 642 T
(Using the trunk version of PC/GEOS.) 81 631 T
(Looking for \322loader\323...C:\134PCGEOS/Loader/LOADEREC.EXE) 81 620 T
(Sourcing swat.tcl...No source available for code at cs:ip) 81 609 T
(Looking for \322geos Eker\323...C:/PCGEOS/Library/Kernel/geosec.geo) 81 598 T
(Looking for \322ms4 Eifs\323...C:/PCGEOS/Driver/IFS/DOS/MS4/ms4ec.geo) 81 587 T
(Thread 1 created for patient geos) 81 576 T
(Thread 2 created for patient geos) 81 565 T
(Looking for \322vidmem Edrv\323...C:/PCGEOS/Driver/Video/Dumb/VidMem/vidmemec.geo) 81 554 T
(Looking for \322swap Elib\323...C:/PCGEOS/Library/Swap/swapec.geo) 81 543 T
(Looking for \322xms Edrv\323...C:/PCGEOS/Driver/Swap/XMS/xmsec.geo) 81 532 T
(Looking for \322disk Edrv\323...C:/PCGEOS/Driver/Swap/Disk/diskec.geo) 81 521 T
(Looking for \322kbd drvr\323...C:/PCGEOS/Driver/Keyboard/kbd.geo) 81 510 T
(Looking for \322nimbus Edrv\323...C:/PCGEOS/Driver/Font/Nimbus/nimbusec.geo) 81 499 T
(Looking for \322stream Edrv\323...C:\134PCGEOS/Driver/Stream/streamec.GEO) 81 488 T
(Looking for \322sound Elib\323...C:/PCGEOS/Library/Sound/soundec.geo) 81 477 T
(Looking for \322standardEdrv\323...C:/PCGEOS/Driver/Sound/Standard/standard.geo) 81 466 T
(Looking for \322ui Elib\323...C:/PCGEOS/Library/User/uiec.geo) 81 455 T
(Thread 0 created for patient ui) 81 444 T
(Looking for \322styles Elib\323...C:\134PCGEOS/Library/Styles/stylesec.GEO) 81 433 T
(Looking for \322color Elib\323...C:\134PCGEOS/Library/Color/colorec.GEO) 81 422 T
(Looking for \322ruler Elib\323...C:\134PCGEOS/Library/Ruler/rulerec.GEO) 81 411 T
(Looking for \322text Elib\323...C:/PCGEOS/Library/Text/textec.geo) 81 400 T
(Looking for \322motif Espu\323...C:\134PCGEOS/Library/Motif/motifec.GEO) 81 389 T
(Looking for \322mcga Edrv\323...C:/PCGEOS/Driver/Video/Dumb/MCGA/mcgaec.geo) 81 378 T
(Looking for \322nonts Edrv\323...C:/PCGEOS/Driver/Task/NonTS/nontsec.geo) 81 367 T
(Looking for \322spool Elib\323...C:\134PCGEOS/Library/Spool/spoolec.GEO) 81 356 T
(Thread 0 created for patient spool) 81 345 T
(Looking for \322serial Edrv\323...C:/PCGEOS/Driver/Stream/Serial/serialec.geo) 81 334 T
(Looking for \322msSer Edrv\323...C:/PCGEOS/Driver/Mouse/MSSer/msserec.geo) 81 323 T
(Looking for \322welcome Eapp\323...C:/PCGEOS/Appl/Startup/Welcome/welcomee.geo) 81 312 T
(Thread 0 created for patient welcome) 81 301 T
(Looking for \322shell Elib\323...C:/PCGEOS/Library/Shell/shellec.geo) 81 290 T
(Looking for \322manager Eapp\323...C:/PCGEOS/Appl/FileMgrs/GeoManag/managere.geo) 81 279 T
(Thread 0 created for patient manager) 81 268 T
(Thread 1 created for patient manager) 81 257 T
(Looking for \322math Elib\323...C:\134PCGEOS/Library/Math/mathec.GEO) 81 246 T
(Looking for \322borlandcElib\323...C:\134PCGEOS/Library/MATH/COMPILER/BORLANDC/BORLANDC.GEO) 81 235 T
(Looking for \322mchrt Eapp\323...C:\134PCGEOS/Appl/Mchrt/mchrtec.GEO) 81 224 T
(Thread 0 created for patient mchrt) 81 213 T
(mchrt spawned) 81 202 T
(Stopped in GeodeNotifyLibraries, address 159eh:1922h) 81 191 T
(GeodeNotifyLibraries: PUSH AX ;adebh) 81 180 T
(done) 81 169 T
(PC Attached) 81 158 T
(Stopped in GeodeNotifyLibraries, address 159eh:1922h) 81 147 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 17
%%Page: "122" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(122) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(GeodeNotifyLibraries: PUSH AX ;adebh) 81 642 T
(\050mchrt:0\051 1 =>) 81 631 T
1 10 Q
(Depending on how you set up  your) 180 612.33 T
1 9 Q
(SW) 345.01 612.33 T
(A) 358.68 612.33 T
(T) 364.68 612.33 T
(.RC) 369.86 612.33 T
1 10 Q
( \336le, you can customize your) 385.36 612.33 T
(Swat environment quite a bit.) 180 599.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 18
%%Page: "123" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(123) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(4-) 147.13 629.31 T
(1 MCHRT) 156.02 629.31 T
(.GP) 199.35 629.31 T
4 8 Q
0.64 (name mchrt.app) 81 615.64 S
0.64 (longname \322MyChart\323) 81 598.64 S
0.64 (type) 81 581.64 S
0.64 (appl, process, single) 125 581.64 S
0.64 (class) 81 564.64 S
0.64 (MCProcessClass) 125 564.64 S
0.64 (appobj) 81 547.64 S
0.64 (MCApp) 125 547.64 S
0.64 (tokenchars \322MCht\323) 81 530.64 S
0.64 (tokenid 0) 81 520.64 S
0.64 (library) 81 503.64 S
0.64 (geos) 125 503.64 S
0.64 (library) 81 493.64 S
0.64 (ui) 125 493.64 S
0.64 (resource APPRESOURCE ui-object) 81 476.64 S
0.64 (resource INTERFACE ui-object) 81 466.64 S
0.64 (resource CONTENT object) 81 456.64 S
0.64 (export MCChartClass) 81 439.64 S
81 415.95 531 427.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 415.95 531 427.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 423.2 617.5 426.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
81 385.93 531 397.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 385.93 531 397.95 R
7 X
0 0 0 1 0 0 0 K
V
76.5 393.18 617.5 396.68 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 379.26 T
(4-) 147.13 379.26 T
(2 MCHRT) 156.02 379.26 T
(.GOC) 199.35 379.26 T
4 8 Q
0.64 (/**************************************************************) 81 365.6 S
0.64 ( * Copyright \050c\051 GeoWorks 1993 -- All Rights Reserved) 81 355.6 S
0.64 ( *) 81 345.6 S
0.64 ( * MChrt is a charting application. It maintains a list of) 81 335.6 S
0.64 ( * numbers and constructs a bar chart to display them.) 81 325.6 S
0.64 ( *) 81 315.6 S
0.64 ( * Our process object is in charge of maintaining the data) 81 305.6 S
0.64 ( * structure which holds the list of numbers.) 81 295.6 S
0.64 ( *) 81 285.6 S
0.64 ( **************************************************************/) 81 275.59 S
0.64 (@include <stdapp.goh>) 81 258.59 S
0.64 (/* CONSTANTS */) 81 241.59 S
0.64 (/* In the list gadget which represents our data, the first item) 81 224.59 S
0.64 ( * isn\325t going to represent anything; it\325s just a place holder.) 81 214.6 S
0.64 ( * The FAKE_LIST_ITEM constant will be used when checking for this item) 81 204.6 S
0.64 ( */) 81 194.6 S
0.64 (#define FAKE_LIST_ITEM 0) 81 184.6 S
54 454.02 72 463.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 231.63 63 492.63 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 438.05 72 446.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 222.66 63 483.66 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 19
%%Page: "124" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(124) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* When drawing the pieces of the chart, we\325ll use the following) 81 642.67 S
0.64 ( * constants to compute the coordinates at which to draw.) 81 632.67 S
0.64 ( */) 81 622.67 S
0.64 (#define VIEW_RIGHT 360 /* Width of the Chart View */) 81 612.67 S
0.64 (#define VIEW_BOTTOM 288 /* Height of Chart View */) 81 602.67 S
0.64 (#define CHART_BOTTOM 268 /* y = 0 line of Chart */) 81 592.67 S
0.64 (#define CHART_LEFT 20 /* Left bound of Leftmost bar */) 81 582.67 S
0.64 (#define BAR_WIDTH 30 /* Width of each bar */) 81 572.67 S
0.64 (#define BAR_WIDTH_ALLOW 36 /* Distance between left edges of bars */) 81 562.67 S
0.64 (#define BORDER_MARGIN 10 /* Arbitrary margin width at edges */) 81 552.67 S
0.64 (@class MCProcessClass, GenProcessClass;) 81 535.67 S
0.64 (/* For information about the messages listed below, see the) 81 525.67 S
0.64 ( * headers for their handlers, later in this file.) 81 515.67 S
0.64 ( */) 81 505.67 S
0.64 (@message \050GEN_DYNAMIC_LIST_QUERY_MSG\051 MSG_MCP_SET_DATA_ITEM_MONIKER;) 125 495.67 S
0.64 (@message void MSG_MCP_DELETE_DATA_ITEM\050\051;) 125 485.67 S
0.64 (@message void MSG_MCP_INSERT_DATA_ITEM\050\051;) 125 475.67 S
0.64 (@message void MSG_MCP_SET_DATA_ITEM\050\051;) 125 465.67 S
0.64 (@endc /* end of MCProcessClass definition */) 81 455.67 S
0.64 (@class MCChartClass, VisClass;) 81 438.67 S
0.64 (/* For information about the messages listed below, see the) 81 428.67 S
0.64 ( * headers for their handlers, later in this file.) 81 418.67 S
0.64 ( */) 81 408.67 S
0.64 (@message void MSG_MCC_INSERT_BAR\050word ordinal, word value\051;) 125 398.67 S
0.64 (@message void MSG_MCC_DELETE_BAR\050word ordinal\051;) 125 388.67 S
0.64 (@message void MSG_MCC_RESIZE_BAR\050word ordinal, word value\051;) 125 378.67 S
0.64 (@message void MSG_MCC_NUKE_CHART\050\051;) 125 368.67 S
0.64 (@message void MSG_MCC_INIT_CHART\050word numItems\051;) 125 358.67 S
0.64 (/* MCCI_numBars:) 81 348.67 S
0.64 (The number of bars in the chart. Internal. */) 168.04 348.67 S
0.64 (@instance word MCCI_numBars = 0;) 125 338.67 S
0.64 (/* MCCI_barArray:) 81 328.67 S
0.64 (Chunk handle of array to hold bar info. Array) 173.48 328.67 S
0.64 (must be in same block as MCChart. */) 212.5 318.67 S
0.64 (@instance ChunkHandle MCCI_barArray;) 125 308.67 S
0.64 (@endc /* end of MCChartClass definition */) 81 298.67 S
0.64 (@classdecl MCProcessClass, neverSaved;) 81 281.67 S
0.64 (@classdecl MCChartClass;) 81 271.67 S
0.64 (/* MCListGetDataItem\050\051:) 81 254.67 S
0.64 ( * For information about this routine,) 81 244.67 S
0.64 ( * see its code, later in this file */) 81 234.67 S
0.64 (extern word _pascal MCListGetDataItem\050word ordinal\051;) 81 224.67 S
54 549.04 72 620.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 387.65 63 648.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 294.04 72 446.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 213.65 63 474.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 269.04 72 279.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 46.66 63 307.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 20
%%Page: "125" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(125) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Global STRUCTURES and VARIABLES */) 81 642.67 S
0.64 (/* This structure will hold information about our document, and will form) 81 632.67 S
0.64 ( * the header of a block in our data file. The first item of this structure) 81 622.67 S
0.64 ( * MUST be an LMemBlockHeader.) 81 612.67 S
0.64 ( */) 81 602.67 S
0.64 (typedef struct {) 81 592.67 S
0.64 (LMemBlockHeader DBH_standardHeader;) 125 582.67 S
0.64 (/* Number of data items */) 315.4 582.67 S
0.64 (word DBH_numItems;) 125 572.67 S
0.64 (/* Head of linked list */) 222.92 572.67 S
0.64 (ChunkHandle DBH_listHead;) 125 562.67 S
0.64 (} DataBlockHeader;) 81 552.67 S
0.64 (/* The data points which are to be charted are stored in) 81 535.67 S
0.64 ( * a linked list of chunks, all of which are contained within) 81 525.67 S
0.64 ( * a single block of memory. Each element of the list will be) 81 515.67 S
0.64 ( * stored in a ListNode structure.) 81 505.67 S
0.64 ( */) 81 495.67 S
0.64 (typedef struct {) 81 485.67 S
0.64 (word LN_data;) 125 475.67 S
0.64 (ChunkHandle LN_next;) 125 465.67 S
0.64 (} ListNode;) 81 455.67 S
0.64 (/* A given piece of data is stored:) 81 438.67 S
0.64 ( *) 81 428.67 S
0.64 (In a ListNode) 125 428.67 S
0.64 (tempNode) 388 428.67 S
0.64 ( *) 81 418.67 S
0.64 (referenced by a ChunkHandle) 125 418.67 S
0.64 (tempListItem) 301 418.67 S
0.64 ( *) 81 408.67 S
0.64 (in a memory block referenced by a MemHandle) 125 408.67 S
0.64 (dataListBlock) 358.92 408.67 S
0.64 ( *) 81 398.67 S
0.64 (loaded from a VM block referenced by a VMBlockHandle) 125 398.67 S
0.64 (dataFileBlock) 407.87 398.67 S
0.64 ( *) 81 388.67 S
0.64 (in a file referenced by a VMFileHandle) 125 388.67 S
0.64 (dataFile) 331.71 388.67 S
0.64 ( */) 81 378.67 S
0.64 (VMFileHandle dataFile; /* File which will hold our data */) 81 361.67 S
0.64 (VMBlockHandle dataFileBlock; /* Block within dataFile */) 81 351.67 S
0.64 (DataBlockHeader *dataBlockHeader; /* Header info of our data block */) 81 341.67 S
0.64 (MemHandle dataListBlock; /* Block of memory which will) 81 331.67 S
0.64 ( hold our linked list. */) 301 321.67 S
0.64 (MemHandle *dataListBlockPtr = &dataListBlock; /* Ptr to above Handle */) 81 311.67 S
0.64 (ChunkHandle dataListHead;) 81 301.67 S
0.64 (/* Chunk containing head of) 222.44 301.67 S
0.64 ( * linked list. */) 301 291.67 S
0.64 (ChunkHandle tempListItem; /* Chunk handle which we will) 81 281.67 S
0.64 ( * use when traversing lists. */) 301 271.67 S
0.64 (ListNode *tempNode; /* List item which we will use) 81 261.67 S
0.64 ( * when traversing lists. */) 301 251.67 S
0.64 (/* OBJECT Resources */) 81 234.67 S
54 547.04 72 600.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 367.65 63 628.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 339.04 72 349.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 116.65 63 377.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 21
%%Page: "126" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(126) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* APPRESOURCE will hold the application object and other information) 81 642.67 S
0.64 ( * which the system will want to load when it wants to find out about) 81 632.67 S
0.64 ( * the application but doesn\325t need to run the application.) 81 622.67 S
0.64 ( */) 81 612.67 S
0.64 (@start AppResource;) 81 602.67 S
0.64 (@object GenApplicationClass MCApp = {) 81 592.67 S
0.64 ( GI_visMoniker = list { @MCTextMoniker }) 81 582.67 S
0.64 ( GI_comp = @MCPrimary;) 81 572.67 S
0.64 ( gcnList\050MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS\051 = @MCPrimary;) 81 562.67 S
0.64 (}) 81 552.67 S
0.64 (@visMoniker MCTextMoniker = \322MyChart Application\323;) 81 535.67 S
0.64 (@end AppResource;) 81 518.67 S
0.64 (/* The INTERFACE resource holds the bulk of our Generic UI gadgetry. */) 81 501.67 S
0.64 (@start Interface;) 81 491.67 S
0.64 (@object GenPrimaryClass MCPrimary = {) 81 474.67 S
0.64 (GI_comp = @MCLeftClump, @MCChartView;) 125 464.67 S
0.64 (HINT_ORIENT_CHILDREN_HORIZONTALLY;) 125 454.67 S
0.64 (}) 81 444.67 S
0.64 (@object GenInteractionClass MCLeftClump = {) 81 427.67 S
0.64 (GI_comp = @MCDataList, @MCAddTrigger, @MCDeleteTrigger,) 125 417.67 S
0.64 ( @MCChangeTrigger, @MCValue;) 168.98 407.67 S
0.64 (}) 81 397.67 S
0.64 (@object GenViewClass MCChartView = {) 81 380.67 S
0.64 (GVI_content = MCContent;) 125 370.67 S
0.64 (GVI_horizAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT |) 125 360.67 S
0.64 ( GVDA_NO_LARGER_THAN_CONTENT;) 212.5 350.67 S
0.64 (GVI_vertAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT |) 125 340.67 S
0.64 (GVDA_NO_LARGER_THAN_CONTENT;) 212.5 330.67 S
0.64 (}) 81 320.67 S
0.64 (@end Interface;) 81 303.67 S
0.64 (/* The CONTENT resource contains Vis objects associated with the chart. */) 81 286.67 S
0.64 (@start Content;) 81 276.67 S
0.64 (@object VisContentClass MCContent = {) 81 259.67 S
0.64 (VCI_comp = @MCChart;) 125 249.67 S
0.64 (}) 81 239.67 S
0.64 (@object MCChartClass MCChart = {) 81 222.67 S
0.64 (VI_bounds = { 0, 0, VIEW_RIGHT, VIEW_BOTTOM };) 125 212.67 S
0.64 (MCCI_barArray = BarDataChunk;) 125 202.67 S
0.64 (}) 81 192.67 S
54 450.04 72 472.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 239.65 63 500.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 392.04 72 435.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 202.65 63 463.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 315.04 72 388.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 155.65 63 416.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 271.04 72 311.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 78.65 63 339.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 239.04 72 267.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 34.65 63 295.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 190.04 72 230.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 -2.34 63 258.66 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 22
%%Page: "127" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(127) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* BarDataChunk: The array in which the chart will store the values) 81 642.67 S
0.64 ( * it is to chart. Note that we\325ve only given room for 13 items here,) 81 632.67 S
0.64 ( * and the chart doesn\325t have any way to check if it\325s running out of) 81 622.67 S
0.64 ( * room. We should fix this eventually, probably by limiting how many) 81 612.67 S
0.64 ( * data items the user can add.) 81 602.67 S
0.64 ( */) 81 592.67 S
0.64 (@chunk word BarDataChunk[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};) 81 582.67 S
0.64 (@end Content;) 81 565.67 S
0.64 (@start Interface;) 81 555.67 S
0.64 (@object GenDynamicListClass MCDataList = {) 81 538.67 S
0.64 (GIGI_selection = FAKE_LIST_ITEM;) 125 528.67 S
0.64 (GIGI_numSelections = 1;) 125 518.67 S
0.64 (GIGI_applyMsg = 0;) 125 508.67 S
0.64 (GIGI_destination = process;) 125 498.67 S
0.64 (GDLI_numItems = 1;) 125 488.67 S
0.64 (GDLI_queryMsg = MSG_MCP_SET_DATA_ITEM_MONIKER;) 125 478.67 S
0.64 (HINT_ITEM_GROUP_SCROLLABLE;) 125 468.67 S
0.64 (}) 81 458.67 S
0.64 (@visMoniker FakeItemMoniker = \322Data:\323;) 81 441.67 S
0.64 (@localize \322This string will appear at the head of the list\323;) 81 431.67 S
0.64 (@object GenTriggerClass MCAddTrigger = {) 81 414.67 S
0.64 (GI_visMoniker = \322Add\323;) 125 404.67 S
0.64 (GTI_destination = process;) 125 394.67 S
0.64 (GTI_actionMsg = MSG_MCP_INSERT_DATA_ITEM;) 125 384.67 S
0.64 (}) 81 374.67 S
0.64 (@object GenTriggerClass MCChangeTrigger = {) 81 357.67 S
0.64 (GI_visMoniker = \322Change\323;) 125 347.67 S
0.64 (GTI_destination = process;) 125 337.67 S
0.64 (GTI_actionMsg = MSG_MCP_SET_DATA_ITEM;) 125 327.67 S
0.64 (}) 81 317.67 S
0.64 (@object GenTriggerClass MCDeleteTrigger = {) 81 300.67 S
0.64 (GI_visMoniker = \322Delete\323;) 125 290.67 S
0.64 (GTI_destination = process;) 125 280.67 S
0.64 (GTI_actionMsg = MSG_MCP_DELETE_DATA_ITEM;) 125 270.67 S
0.64 (}) 81 260.67 S
0.64 (@object GenValueClass MCValue = {) 81 243.67 S
0.64 (GVLI_minimum = MakeWWFixed\0500\051;) 125 233.67 S
0.64 (GVLI_maximum = MakeWWFixed\0500x7ffe\051;) 125 223.67 S
0.64 (GVLI_value = MakeWWFixed\050123\051;) 125 213.67 S
0.64 (}) 81 203.67 S
0.64 (@end Interface;) 81 186.67 S
0.64 (/* CODE for MCProcessClass */) 81 169.67 S
54 580.04 72 590.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 357.65 63 618.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 551.04 72 573.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 340.65 63 601.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 23
%%Page: "128" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(128) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* MSG_MCP_SET_DATA_ITEM_MONIKER for MCProcessClass) 81 642.67 S
0.64 ( *) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 (SYNOPSIS: Set the moniker for one of our Data List\325s items.) 125 622.67 S
0.64 ( *) 81 612.67 S
0.64 (CONTEXT: The Data List will send this message to the process) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 ( whenever it needs to display the moniker of a given) 168.98 602.67 S
0.64 ( *) 81 592.67 S
0.64 ( item. We should respond with one of the) 168.98 592.67 S
0.64 ( *) 81 582.67 S
0.64 ( MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_... messages.) 168.98 582.67 S
0.64 ( *) 81 572.67 S
0.64 (PARAMS: void \050optr list, word item\051) 125 572.67 S
0.64 ( */) 81 562.67 S
0.64 (@method MCProcessClass, MSG_MCP_SET_DATA_ITEM_MONIKER {) 81 552.67 S
0.64 (/* If we\325re looking for the moniker of the \322Data:\323 item,) 81 535.67 S
0.64 ( * just return that moniker. Otherwise, look up the) 81 525.67 S
0.64 ( * numerical value of the item as stored in the linked list.) 81 515.67 S
0.64 ( */) 81 505.67 S
0.64 (if \050item==FAKE_LIST_ITEM\051 {) 125 495.67 S
0.64 (optr moniker;) 168.98 485.67 S
0.64 (moniker = ConstructOptr\050OptrToHandle\050list\051,) 168.98 475.67 S
0.64 (OptrToChunk\050@FakeItemMoniker\051\051;) 256.5 465.67 S
0.64 (@send list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR\050) 168.98 455.67 S
0.64 (FAKE_LIST_ITEM, moniker\051;}) 256.5 445.67 S
0.64 (else /* item > FAKE_LIST_ITEM */ {) 125 435.67 S
0.64 (char monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 168.98 425.67 S
0.64 (word data;) 168.98 415.67 S
0.64 (data = MCListGetDataItem\050item\051;) 168.98 398.67 S
0.64 (LocalFixedToAscii\050monikerString, MakeWWFixed\050data\051, 0\051;) 168.98 381.67 S
0.64 (@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050) 168.98 371.67 S
0.64 ( item, monikerString\051;) 344 361.67 S
0.64 (}) 125 351.67 S
0.64 (} /* end of MSG_MCP_SET_DATA_ITEM_MONIKER */) 81 341.67 S
0.64 (/* MCListGetDataItem\050\051) 81 324.67 S
0.64 ( *) 81 314.67 S
0.64 ( *) 81 304.67 S
0.64 (SYNOPSIS: Return the Nth piece of data.) 125 304.67 S
0.64 ( *) 81 294.67 S
0.64 (CONTEXT: Utility routine.) 125 294.67 S
0.64 ( *) 81 284.67 S
0.64 (PARAMS: word \050word ordinal\051) 125 284.67 S
0.64 ( */) 81 274.67 S
0.64 (extern word _pascal MCListGetDataItem\050word ordinal\051 {) 81 264.67 S
0.64 (word) 125 254.67 S
0.64 (data;) 168.98 254.67 S
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 24
%%Page: "129" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(129) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 642.67 S
0.64 (for\050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 125 632.67 S
0.64 ( ordinal > 1;) 125 622.67 S
0.64 ( --ordinal\051) 125 612.67 S
0.64 ({) 168.98 602.67 S
0.64 ( tempListItem = tempNode->LN_next;) 168.98 592.67 S
0.64 ( tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 582.67 S
0.64 (}) 168.98 572.67 S
0.64 (data = tempNode->LN_data;) 125 562.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 552.67 S
0.64 (return data;) 125 542.67 S
0.64 (} /* end of MCListGetDataItem\050\051 */) 81 532.67 S
0.64 (/* MSG_MCP_INSERT_DATA_ITEM for MCProcessClass) 81 515.67 S
0.64 ( *) 81 505.67 S
0.64 ( *) 81 495.67 S
0.64 (SYNOPSIS: Add a new number to our list of data.) 125 495.67 S
0.64 ( *) 81 485.67 S
0.64 (CONTEXT: User wants to add a new piece of data.) 125 485.67 S
0.64 ( *) 81 475.67 S
0.64 (PARAMS: void\050void\051) 125 475.67 S
0.64 ( */) 81 465.67 S
0.64 (@method MCListInsertDataItem, MCProcessClass, MSG_MCP_INSERT_DATA_ITEM {) 81 455.67 S
0.64 (ChunkHandle newListItem;) 125 445.67 S
0.64 (ListNode *newNode;) 125 435.67 S
0.64 (WWFixedAsDWord value;) 125 425.67 S
0.64 (word ordinal;) 125 415.67 S
0.64 (/* Query list and data objects to find out where to insert item) 81 398.67 S
0.64 ( * and what value to insert there.) 81 388.67 S
0.64 ( */) 81 378.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 368.67 S
0.64 (value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 358.67 S
0.64 (/* Lock the data block so we can insert data into the linked list. */) 81 341.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 331.67 S
0.64 (/* Create a new linked list element. */) 81 314.67 S
0.64 (newListItem = LMemAlloc\050dataListBlock, sizeof\050ListNode\051\051;) 125 304.67 S
0.64 (newNode = LMemDerefHandles\050dataListBlock, newListItem\051;) 125 294.67 S
0.64 (newNode->LN_data = WWFixedToInt\050value\051;) 125 284.67 S
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 25
%%Page: "130" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(130) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Check to see if the item we\325re adding will be the) 81 642.67 S
0.64 ( * new head of the data list and handle that case.) 81 632.67 S
0.64 ( */) 81 622.67 S
0.64 (if \050ordinal==FAKE_LIST_ITEM\051) 125 612.67 S
0.64 ( {) 125 602.67 S
0.64 (newNode->LN_next = dataListHead;) 168.98 592.67 S
0.64 (dataListHead = newListItem;) 168.98 582.67 S
0.64 ( }) 125 572.67 S
0.64 (else) 125 562.67 S
0.64 (/* We\325re not adding to the head of the list. Traverse the) 81 552.67 S
0.64 ( * list using the tempListItem and tempNode variables, then) 81 542.67 S
0.64 ( * insert the new item.) 81 532.67 S
0.64 ( */) 81 522.67 S
0.64 ( {) 125 512.67 S
0.64 (word count = ordinal;) 168.98 502.67 S
0.64 (for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 492.67 S
0.64 ( count > 1;) 168.98 482.67 S
0.64 ( --count\051) 168.98 472.67 S
0.64 ( {) 168.98 462.67 S
0.64 (tempListItem = tempNode->LN_next;) 212.5 452.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock,) 212.5 442.67 S
0.64 ( tempListItem\051;) 344 432.67 S
0.64 ( }) 168.98 422.67 S
0.64 (newNode->LN_next = tempNode->LN_next;) 168.98 412.67 S
0.64 (tempNode->LN_next = newListItem;) 168.98 402.67 S
0.64 ( }) 125 392.67 S
0.64 (/* We\325ve changed the data, so before we unlock the block, we mark) 81 375.67 S
0.64 ( * it dirty.) 81 365.67 S
0.64 ( */) 81 355.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 345.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 335.67 S
0.64 (/* Update the data list gadget. */) 81 318.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS\050ordinal+1, 1\051;) 125 308.67 S
0.64 (@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal+1,) 125 298.67 S
0.64 ( FALSE\051;) 431.5 288.67 S
0.64 (/* Update the chart */) 81 278.67 S
0.64 (@send MCChart::MSG_MCC_INSERT_BAR\050ordinal, WWFixedToInt\050value\051\051;) 125 268.67 S
0.64 (}) 81 258.67 S
54 266.04 72 276.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 43.66 63 304.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 26
%%Page: "131" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(131) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* MSG_MCP_DELETE_DATA_ITEM for MCProcessClass) 81 642.67 S
0.64 ( *) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 (SYNOPSIS: Destroys one data item.) 125 622.67 S
0.64 ( *) 81 612.67 S
0.64 (CONTEXT: User has just clicked on the \322Delete\323 trigger.) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 (PARAMS: void \050void\051) 125 602.67 S
0.64 ( */) 81 592.67 S
0.64 (@method MCProcessClass, MSG_MCP_DELETE_DATA_ITEM {) 81 582.67 S
0.64 (word ordinal;) 125 572.67 S
0.64 (word count;) 125 562.67 S
0.64 (ChunkHandle oldItem;) 125 552.67 S
0.64 (ListNode *oldNode;) 125 542.67 S
0.64 (/* Find out which item the user wants to delete. */) 81 525.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 515.67 S
0.64 (if \050ordinal==FAKE_LIST_ITEM\051 return;) 125 505.67 S
0.64 (/* We\325re going to work with the data, so lock the data file. */) 81 488.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 478.67 S
0.64 (/* If we\325re deleting the first data item, we update the handle of the) 81 461.67 S
0.64 ( * head of the list.) 81 451.67 S
0.64 ( */) 81 441.67 S
0.64 (if \050ordinal == 1\051) 125 431.67 S
0.64 ( {) 125 421.67 S
0.64 (oldNode = LMemDerefHandles\050dataListBlock, dataListHead\051;) 168.98 411.67 S
0.64 (tempListItem = oldNode->LN_next;) 168.98 401.67 S
0.64 (LMemFreeHandles\050dataListBlock, dataListHead\051;) 168.98 391.67 S
0.64 (dataListHead = tempListItem;) 168.98 381.67 S
0.64 ( }) 125 371.67 S
0.64 (/* If we\325re deleting an element which isn\325t the first, we find the element) 81 354.67 S
0.64 ( * that\325s just before the one we want to delete, and change that element\325s) 81 344.67 S
0.64 ( * \322next\323 handle. We also get rid of the item to be deleted.) 81 334.67 S
0.64 ( */) 81 324.67 S
0.64 (else /* ordinal != 1 */) 125 314.67 S
0.64 ( {) 125 304.67 S
0.64 (for \050tempNode=LMemDerefHandles\050dataListBlock, dataListHead\051,) 168.98 294.67 S
0.64 ( count = ordinal;) 168.98 284.67 S
0.64 ( count > 2;) 168.98 274.67 S
0.64 ( --count\051) 168.98 264.67 S
0.64 ( {) 168.98 254.67 S
0.64 (tempListItem = tempNode->LN_next;) 212.5 244.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock,) 212.5 234.67 S
0.64 ( tempListItem\051;) 344 224.67 S
0.64 ( }) 168.98 214.67 S
0.64 (oldItem = tempNode->LN_next;) 168.98 204.67 S
0.64 (oldNode = LMemDerefHandles\050dataListBlock, oldItem\051;) 168.98 194.67 S
0.64 (tempNode->LN_next = oldNode->LN_next;) 168.98 177.67 S
0.64 (LMemFreeHandles\050dataListBlock, oldItem\051;) 168.98 167.67 S
0.64 ( }) 125 157.67 S
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 27
%%Page: "132" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(132) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* We\325ve changed the data, so before we lock the block, we mark it dirty. */) 81 642.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 632.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 622.67 S
0.64 (/* Update the list. */) 81 605.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS\050ordinal, 1\051;) 125 595.67 S
0.64 (@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\050ordinal-1,) 125 585.67 S
0.64 ( FALSE\051;) 431.5 575.67 S
0.64 (@send MCChart::MSG_MCC_DELETE_BAR\050ordinal-1\051;) 125 558.67 S
0.64 (} /* end of MSG_MCP_DELETE_DATA_ITEM */) 81 548.67 S
0.64 (/* MSG_MCP_SET_DATA_ITEM for MCProcessClass) 81 531.67 S
0.64 ( *) 81 521.67 S
0.64 ( *) 81 511.67 S
0.64 (SYNOPSIS: Change the data number of one item in the data list.) 125 511.67 S
0.64 ( *) 81 501.67 S
0.64 (CONTEXT: User has clicked the \322Change\323 button.) 125 501.67 S
0.64 ( *) 81 491.67 S
0.64 (PARAMS: void\050void\051) 125 491.67 S
0.64 ( */) 81 481.67 S
0.64 (@method MCProcessClass, MSG_MCP_SET_DATA_ITEM {) 81 471.67 S
0.64 (word ordinal;) 125 461.67 S
0.64 (WWFixedAsDWord value;) 125 451.67 S
0.64 (char monikerString[LOCAL_DISTANCE_BUFFER_SIZE];) 125 441.67 S
0.64 (word count;) 125 431.67 S
0.64 (/* Find out which item we\325re changing. */) 81 414.67 S
0.64 (ordinal = @call MCDataList::MSG_GEN_ITEM_GROUP_GET_SELECTION\050\051;) 125 404.67 S
0.64 (if \050ordinal == FAKE_LIST_ITEM\051 return;) 125 394.67 S
0.64 (/* Find out what the item\325s new value should be. */) 81 377.67 S
0.64 (value = @call MCValue::MSG_GEN_VALUE_GET_VALUE\050\051;) 125 367.67 S
0.64 (/* Lock the data block so that we can change the data. */) 81 350.67 S
0.64 (VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 340.67 S
0.64 (/* Find the appropriate item in the linked list and change its value. */) 81 323.67 S
0.64 (for \050tempNode = LMemDerefHandles\050dataListBlock, dataListHead\051,) 125 313.67 S
0.64 ( count = ordinal-1;) 125 303.67 S
0.64 ( count > 0;) 125 293.67 S
0.64 ( --count\051) 125 283.67 S
0.64 ( {) 125 273.67 S
0.64 (tempListItem = tempNode->LN_next;) 168.98 263.67 S
0.64 (tempNode = LMemDerefHandles\050dataListBlock, tempListItem\051;) 168.98 253.67 S
0.64 ( }) 125 243.67 S
0.64 (tempNode->LN_data = WWFixedToInt\050value\051;) 125 233.67 S
0.64 (/* We changed the data so mark it dirty before unlocking it. */) 81 216.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 206.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 196.67 S
54 556.04 72 566.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 333.65 63 594.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 28
%%Page: "133" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(133) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Update the data list gadget. */) 81 642.67 S
0.64 (LocalFixedToAscii\050monikerString, value, 0\051;) 125 632.67 S
0.64 (@call MCDataList::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT\050) 125 622.67 S
0.64 (ordinal,) 388 612.67 S
0.64 (monikerString\051;) 388 602.67 S
0.64 (/* Update the chart. */) 81 585.67 S
0.64 (@send MCChart::MSG_MCC_RESIZE_BAR\050ordinal-1, WWFixedToInt\050value\051\051;) 125 575.67 S
0.64 (} /* end of MSG_MCP_SET_DATA_ITEM */) 81 565.67 S
0.64 (/* MSG_GEN_PROCESS_OPEN_APPLICATION) 81 548.67 S
0.64 ( *) 81 538.67 S
0.64 ( *) 81 528.67 S
0.64 (SYNOPSIS: Set up application\325s data structures.) 125 528.67 S
0.64 ( *) 81 518.67 S
0.64 (CONTEXT: Application is starting up, either because user) 125 518.67 S
0.64 ( *) 81 508.67 S
0.64 ( has started the application or because the whole) 168.98 508.67 S
0.64 ( *) 81 498.67 S
0.64 ( system is re-starting.) 168.98 498.67 S
0.64 ( *) 81 488.67 S
0.64 (PARAMS: void\050AppAttachFlags) 125 488.67 S
0.64 (attachFlags,) 277.32 488.67 S
0.64 ( *) 81 478.67 S
0.64 ( MemHandle) 168.98 478.67 S
0.64 (launchBlock,) 256.5 478.67 S
0.64 ( *) 81 468.67 S
0.64 ( MemHandle) 168.98 468.67 S
0.64 (extraState\051;) 256.5 468.67 S
0.64 ( */) 81 458.67 S
0.64 (@method MCProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {) 81 448.67 S
0.64 (char fileName[] = \322MChtDATA\323;) 125 438.67 S
0.64 (char dummyDir[] = \322.\323;) 125 428.67 S
0.64 (word numItems;) 125 418.67 S
0.64 (/* Open up the data file */) 81 401.67 S
0.64 (FileSetCurrentPath\050SP_DOCUMENT, dummyDir\051;) 125 391.67 S
0.64 (dataFile=VMOpen\050fileName,) 125 381.67 S
0.64 (VMAF_FORCE_READ_WRITE | VMAF_FORCE_DENY_WRITE,) 212.5 371.67 S
0.64 (VMO_CREATE, 0\051;) 212.5 361.67 S
0.64 (/* We\325ll be storing the data in the file\325s map block */) 81 344.67 S
0.64 (dataFileBlock = VMGetMapBlock\050dataFile\051;) 125 334.67 S
0.64 (/* If there is no map block, that means we\325re just now creating the) 81 317.67 S
0.64 ( * file and need to do all of the creation work.) 81 307.67 S
0.64 ( */) 81 297.67 S
0.64 (if \050dataFileBlock == NULL\051) 125 287.67 S
0.64 ( {) 125 277.67 S
0.64 (/* Allocate a storage block within the file and make it the map block. */) 81 267.67 S
0.64 (dataFileBlock = VMAllocLMem\050dataFile,) 168.98 257.67 S
0.64 ( LMEM_TYPE_GENERAL,) 301 247.67 S
0.64 ( sizeof\050DataBlockHeader\051\051;) 301 237.67 S
0.64 (VMSetMapBlock\050dataFile, dataFileBlock\051;) 168.98 227.67 S
54 573.04 72 583.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 350.65 63 611.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 414.04 72 436.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 203.65 63 464.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 354.04 72 399.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 166.65 63 427.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 332.04 72 342.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 109.65 63 370.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 144 72 299.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 67.61 63 328.61 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 29
%%Page: "134" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(134) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Fill in the storage block\325s header information. */) 81 642.67 S
0.64 (dataBlockHeader = VMLock\050dataFile, dataFileBlock,) 168.98 632.67 S
0.64 ( dataListBlockPtr\051;) 344 622.67 S
0.64 (dataBlockHeader->DBH_listHead = NULL;) 168.98 612.67 S
0.64 (dataBlockHeader->DBH_numItems = 1;) 168.98 602.67 S
0.64 (VMDirty\050dataListBlock\051;) 168.98 592.67 S
0.64 (VMUnlock\050dataListBlock\051;) 168.98 582.67 S
0.64 ( }) 125 572.67 S
0.64 (/* We\325re now sure that the file has a map block, and are pretty sure) 81 555.67 S
0.64 ( * that it\325s been set up correctly.) 81 545.67 S
0.64 ( */) 81 535.67 S
0.64 (/* Extract the header information */) 81 525.67 S
0.64 (dataBlockHeader = VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 515.67 S
0.64 (dataListHead = dataBlockHeader->DBH_listHead;) 81 505.67 S
0.64 (numItems = dataBlockHeader->DBH_numItems;) 125 495.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 485.67 S
0.64 (/* Initialize the data list gadget. */) 81 468.67 S
0.64 (@send MCDataList::MSG_GEN_DYNAMIC_LIST_INITIALIZE\050numItems\051;) 125 458.67 S
0.64 (@send MCDataList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION\0500, FALSE\051;) 125 448.67 S
0.64 (@callsuper\050\051;) 125 431.67 S
0.64 (} /* end of MSG_GEN_PROCESS_OPEN_APPLICATION */) 81 421.67 S
0.64 (/* MSG_GEN_PROCESS_CLOSE_APPLICATION) 81 404.67 S
0.64 ( *) 81 394.67 S
0.64 ( *) 81 384.67 S
0.64 (SYNOPSIS: Free up the memory we allocated. Actually, we could) 125 384.67 S
0.64 ( *) 81 374.67 S
0.64 ( probably rely on the system to do this for us.) 168.98 374.67 S
0.64 ( *) 81 364.67 S
0.64 (CONTEXT: Application is shutting down, either because of user) 125 364.67 S
0.64 ( *) 81 354.67 S
0.64 ( exit or because whole system is shutting down.) 168.98 354.67 S
0.64 ( *) 81 344.67 S
0.64 (PARAMS: MemHandle\050void\051;) 125 344.67 S
0.64 ( */) 81 334.67 S
0.64 (@method MCProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {) 81 324.67 S
0.64 (word numItems;) 125 314.67 S
0.64 (/* We want to save the number of items in the list gadget, so get it. */) 81 297.67 S
0.64 (numItems = @call MCDataList::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS\050\051;) 125 287.67 S
0.64 (/* Save the information we want in the block header. */) 81 270.67 S
0.64 (dataBlockHeader = VMLock\050dataFile, dataFileBlock, dataListBlockPtr\051;) 125 260.67 S
0.64 (dataBlockHeader->DBH_listHead = dataListHead;) 125 250.67 S
0.64 (dataBlockHeader->DBH_numItems = numItems;) 125 240.67 S
0.64 (VMDirty\050dataListBlock\051;) 125 230.67 S
0.64 (VMUnlock\050dataListBlock\051;) 125 220.67 S
0.64 (VMSave\050dataFile\051;) 125 203.67 S
0.64 (VMClose\050dataFile, FALSE\051;) 125 186.67 S
0.64 (@callsuper\050\051;) 125 169.67 S
0.64 (} /* end of MSG_GEN_PROCESS_CLOSE_APPLICATION */) 81 159.67 S
54 473.04 72 523.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 290.65 63 551.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 446.04 72 466.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 233.65 63 494.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 312.04 72 322.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 89.65 63 350.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 285.04 72 295.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 62.65 63 323.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 174.04 72 268.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 35.65 63 296.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 30
%%Page: "135" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(135) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* CODE for MCContentClass */) 81 642.67 S
0.64 (/* MSG_VIS_DRAW for MCContentClass) 81 632.67 S
0.64 ( *) 81 622.67 S
0.64 ( *) 81 612.67 S
0.64 (SYNOPSIS: Draw the chart) 125 612.67 S
0.64 ( *) 81 602.67 S
0.64 (CONTEXT: System has asked the chart object to draw itself.) 125 602.67 S
0.64 ( *) 81 592.67 S
0.64 (PARAMS: void\050DrawFlags drawFlags, GStateHandle gstate\051) 125 592.67 S
0.64 ( */) 81 582.67 S
0.64 (@method MCChartClass, MSG_VIS_DRAW {) 81 572.67 S
0.64 (word count;) 125 562.67 S
0.64 (word *barArray;) 125 552.67 S
0.64 (/* Draw the axis markers */) 81 542.67 S
0.64 (GrDrawVLine\050gstate,) 125 532.67 S
0.64 ( CHART_LEFT-BORDER_MARGIN,) 168.98 522.67 S
0.64 ( BORDER_MARGIN,) 168.98 512.67 S
0.64 ( CHART_BOTTOM\051;) 168.98 502.67 S
0.64 (GrDrawHLine\050gstate,) 125 492.67 S
0.64 ( CHART_LEFT,) 168.98 482.67 S
0.64 ( CHART_BOTTOM+BORDER_MARGIN,) 168.98 472.67 S
0.64 ( VIEW_RIGHT - BORDER_MARGIN\051;) 168.98 462.67 S
0.64 (barArray = LMemDerefHandles\050OptrToHandle\050oself\051,) 125 452.67 S
0.64 ( pself->MCCI_barArray\051;) 256.5 442.67 S
0.64 (/* Draw the bars */) 81 425.67 S
0.64 (for \050count = 0; count < pself->MCCI_numBars; count++\051) 125 415.67 S
0.64 ( {) 125 405.67 S
0.64 (word top, bottom, left, right;) 168.98 395.67 S
0.64 (bottom = CHART_BOTTOM;) 168.98 378.67 S
0.64 (top = bottom - barArray[count];) 168.98 368.67 S
0.64 (left = CHART_LEFT + \050count * BAR_WIDTH_ALLOW\051;) 168.98 358.67 S
0.64 (right = left + BAR_WIDTH;) 168.98 348.67 S
0.64 (GrFillRect\050gstate, left, top, right, bottom\051;) 168.98 338.67 S
0.64 ( }) 125 328.67 S
0.64 (} /* end of MSG_VIS_DRAW */) 81 318.67 S
0.64 (/* MSG_MCC_INSERT_BAR) 81 301.67 S
0.64 ( *) 81 291.67 S
0.64 ( *) 81 281.67 S
0.64 (SYNOPSIS: Add another bar to bar chart.) 125 281.67 S
0.64 ( *) 81 271.67 S
0.64 (CONTEXT: The user has added another data item to the list.) 125 271.67 S
0.64 ( *) 81 261.67 S
0.64 (PARAMS: void\050word ordinal, word value\051;) 125 261.67 S
0.64 ( */) 81 251.67 S
0.64 (@method MCChartClass, MSG_MCC_INSERT_BAR {) 81 241.67 S
0.64 (word count;) 125 231.67 S
0.64 (word *barArray;) 125 221.67 S
0.64 (/* Insert new bar into array, shifting other bars over */) 81 204.67 S
0.64 (barArray = LMemDerefHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 194.67 S
54 309.04 72 580.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 300 63 608.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 188.04 72 249.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 16.66 63 277.66 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 31
%%Page: "136" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(136) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (for\050count=pself->MCCI_numBars; count > ordinal; --count\051) 125 642.67 S
0.64 ( {) 125 632.67 S
0.64 (barArray[count] = barArray[count-1];) 168.98 622.67 S
0.64 ( }) 125 612.67 S
0.64 (barArray[ordinal] = value;) 125 602.67 S
0.64 (ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 592.67 S
0.64 (pself->MCCI_numBars++;) 125 575.67 S
0.64 (/* Let our Content know that it will have to redraw itself */) 81 558.67 S
0.64 (@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 548.67 S
0.64 ( VUM_DELAYED_VIA_APP_QUEUE\051;) 301 538.67 S
0.64 (} /* end of MSG_MCC_INSERT_BAR */) 81 528.67 S
0.64 (/* MSG_MCC_DELETE_BAR) 81 511.67 S
0.64 ( *) 81 501.67 S
0.64 ( *) 81 491.67 S
0.64 (SYNOPSIS: Remove a bar from the bar chart.) 125 491.67 S
0.64 ( *) 81 481.67 S
0.64 (CONTEXT: User has deleted a data item from the list.) 125 481.67 S
0.64 ( *) 81 471.67 S
0.64 (PARAMS: void\050word ordinal\051;) 125 471.67 S
0.64 ( */) 81 461.67 S
0.64 (@method MCChartClass, MSG_MCC_DELETE_BAR {) 81 451.67 S
0.64 (word count;) 125 441.67 S
0.64 (word *barArray;) 125 431.67 S
0.64 (/* Update our instance data and data array */) 81 414.67 S
0.64 (pself->MCCI_numBars -=1;) 125 404.67 S
0.64 (barArray = LMemDerefHandles\050OptrToHandle\050oself\051,) 125 394.67 S
0.64 ( pself->MCCI_barArray\051;) 256.5 384.67 S
0.64 (for\050count=ordinal; count < pself->MCCI_numBars; count++\051) 125 374.67 S
0.64 ( {) 125 364.67 S
0.64 (barArray[count] = barArray[count+1];) 168.98 354.67 S
0.64 ( }) 125 344.67 S
0.64 (ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 334.67 S
0.64 (/* Mark ourself as in need of a redraw. */) 81 317.67 S
0.64 (@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 307.67 S
0.64 ( VUM_DELAYED_VIA_APP_QUEUE\051;) 301 297.67 S
0.64 (} /* end of MSG_MCC_DELETE_BAR */) 81 287.67 S
0.64 (/* MSG_MCC_RESIZE_BAR) 81 270.67 S
0.64 ( *) 81 260.67 S
0.64 ( *) 81 250.67 S
0.64 (SYNOPSIS: Resize a bar.) 125 250.67 S
0.64 ( *) 81 240.67 S
0.64 (CONTEXT: User has changed the value of a data item.) 125 240.67 S
0.64 ( *) 81 230.67 S
0.64 (PARAMS: void\050word ordinal, word value\051;) 125 230.67 S
0.64 ( */) 81 220.67 S
0.64 (@method MCChartClass, MSG_MCC_RESIZE_BAR {) 81 210.67 S
0.64 (word *barArray;) 125 200.67 S
0.64 (/* Update the array */) 81 190.67 S
0.64 (barArray = LMemDerefHandles\050OptrToHandle\050oself\051,) 125 180.67 S
0.64 ( pself->MCCI_barArray\051;) 256.5 170.67 S
0.64 (barArray[ordinal] = value;) 125 160.67 S
0.64 (ObjMarkDirtyHandles\050OptrToHandle\050oself\051, pself->MCCI_barArray\051;) 125 150.67 S
54 522 72 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 415.64 63 676.64 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 279 72 459.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 226.65 63 487.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
54 148.04 72 218.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 -14.34 63 246.66 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 32
%%Page: "137" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(SWAT.RC: Automating Swat) 369.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(137) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 55 Q
0 X
(.) 501.45 88.33 T
0 24 Q
(T) 414.77 110 T
(utorial) 427.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(6.9) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 F
0 X
0.64 (/* Mark the chart as in need of a re-draw. */) 81 642.67 S
0.64 (@call self::MSG_VIS_MARK_INVALID\050VOF_IMAGE_INVALID,) 125 632.67 S
0.64 ( VUM_DELAYED_VIA_APP_QUEUE\051;) 301 622.67 S
0.64 (} /* end of MSG_MCC_RESIZE_BAR */) 81 612.67 S
81 578.98 531 591 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 578.98 531 591 R
7 X
0 0 0 1 0 0 0 K
V
76.5 586.23 617.5 589.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
81 548.95 531 560.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 548.95 531 560.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 556.2 617.5 559.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 542.29 T
(4-) 147.13 542.29 T
(3 SW) 156.02 542.29 T
(A) 179.92 542.29 T
(T) 186.4 542.29 T
(.RC) 191.4 542.29 T
4 8 Q
0.64 (srcwin 15) 81 528.62 S
0.64 (sd mchrt) 81 518.62 S
0.64 (run mchrt) 81 508.62 S
81 484.93 531 496.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 484.93 531 496.95 R
7 X
0 0 0 1 0 0 0 K
V
76.5 492.18 617.5 495.68 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
54 608.04 72 640.01 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
63 407.65 63 668.65 2 L
4 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 33
%%Page: "138" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Views and Visual Objects) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(138) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 55 Q
0 X
(.) 60.45 88.33 T
0 24 Q
(T) 102 110 T
(utorial) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(6.9) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 34
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 34
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%EOF
