%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 18 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Bold FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "61" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Conventions) 428.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  61) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
0 X
-0.14 (This chapter deals with some of Esp\325) 180 614.33 P
-0.14 (s special features, and describes how to) 347.7 614.33 P
(write routines \050and message-handlers\051 in Esp.) 180 601.33 T
(Not all GEOS programmers will use Esp in the same way) 180 581.33 T
(. Most will, of) 444.68 581.33 T
-0.75 (course, not use it at all, using Goc instead. Some will write a few heavily-used) 180 568.33 P
(routines in Esp, or perhaps write an Esp library which will be called by one) 180 555.33 T
(or more applications which are written in Goc. And some will write entire) 180 542.33 T
(applications in Esp.) 180 529.33 T
-0.41 (This chapter describes how to write Esp routines for a variety of purposes. It) 180 509.33 P
(describes conventions for writing both Esp routines and message-handlers,) 180 496.33 T
-0.01 (as well as special Esp conventions and techniques which differ signi\336cantly) 180 483.33 P
(from their Goc counterparts.) 180 470.33 T
0 14 Q
(3.1) 142.54 398 T
0 24 Q
(GEOS Conventions) 180 398 T
2 10 Q
(GEOS has certain presumptions about how routines behaves. If you write) 180 372.33 T
(your code to follow these conventions, Esp and Swat can work together to) 180 359.33 T
(make writing and debugging much simpler than they are with other) 180 346.33 T
(assemblers.) 180 333.33 T
-0.17 (Some of these conventions have been described earlier) 180 313.33 P
-0.17 (. T) 428.66 313.33 P
-0.17 (o recap: Y) 439.81 313.33 P
-0.17 (ou should) 483.92 313.33 P
-0.67 (never change) 180 300.33 P
3 F
-1.44 (ss) 242.74 300.33 P
2 F
-0.67 (; the kernel does this automatically when switching between) 254.74 300.33 P
(threads. Y) 180 287.33 T
(ou should never change) 226.86 287.33 T
4 F
(IF) 338.34 287.33 T
2 F
( or) 350.34 287.33 T
4 F
(TF) 365.34 287.33 T
2 F
(. Y) 376.23 287.33 T
(ou may set) 387.72 287.33 T
4 F
(DF) 440.51 287.33 T
2 F
(, but you must) 451.4 287.33 T
(clear it before calling any routine or returning. Y) 180 274.33 T
(ou may not load an invalid) 404.64 274.33 T
(segment address into) 180 261.33 T
3 F
(ds) 281.12 261.33 T
2 F
( or) 293.12 261.33 T
3 F
(es) 308.12 261.33 T
2 F
(.) 320.12 261.33 T
(Most routines are passed their arguments in registers. If arguments are) 180 241.33 T
(passed on the stack, the routine being called should pop them off the stack) 180 228.33 T
(when returning. \050Esp automatically does this if the routine declares its) 180 215.33 T
(arguments properly) 180 202.33 T
(.\051 If a routine uses local arguments, it should set) 270.55 202.33 T
3 F
(bp) 496.87 202.33 T
2 F
( to) 508.87 202.33 T
-0.26 (point to the base of the stack frame; it can then access the arguments with a) 180 189.33 P
(displacement from) 180 176.33 T
3 F
(ss:[bp]) 268.52 176.33 T
2 F
(. Again, Esp can do this automatically) 310.52 176.33 T
(.) 485 176.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "61" 1
%%Page: "62" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  62) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.1) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(Routines can have local variables as well as arguments. The local variables) 180 641.33 T
(are kept on the stack immediately below the return address. As with) 180 628.33 T
(arguments, they are accessed with a displacement from) 180 615.33 T
3 F
(ss:[bp]) 439.28 615.33 T
2 F
(.) 481.28 615.33 T
-0.86 (For example, suppose the near routine) 180 595.33 P
5 F
-0.88 (HelloProc) 355.81 595.33 P
2 F
-0.86 ( is passed three arguments) 407.85 595.33 P
(on the stack:) 180 582.33 T
5 F
(AnInt) 241.68 582.33 T
2 F
(,) 271.67 582.33 T
5 F
(AChar) 277.23 582.33 T
2 F
(, and) 310.01 582.33 T
5 F
(AnOptr) 335.76 582.33 T
2 F
(.) 373.91 582.33 T
5 F
(HelloProc) 379.47 582.33 T
2 F
( itself declares two) 431.51 582.33 T
(local variables,) 180 569.33 T
5 F
(LocalInt) 252.06 569.33 T
2 F
( and) 296.13 569.33 T
5 F
(LocalOptr) 319.1 569.33 T
2 F
(. The calling routine pushes the) 371.33 569.33 T
(three arguments on the stack, then calls) 180 556.33 T
5 F
(HelloProc) 369.28 556.33 T
2 F
(. The) 421.32 556.33 T
4 F
(call) 447.44 556.33 T
2 F
( pushes the) 471.44 556.33 T
(return address on the stack \050Figure) 180 543.33 T
(2-) 347.04 543.33 T
(1.a\051.) 355.93 543.33 T
5 F
-0.6 (HelloProc) 180 523.33 P
2 F
-0.58 ( immediately pushes) 232.04 523.33 P
3 F
-1.25 (bp) 328.65 523.33 P
2 F
-0.58 ( on the stack and copies the current value) 340.65 523.33 P
-0.79 (of) 180 510.33 P
3 F
-1.71 (sp) 190.32 510.33 P
2 F
-0.79 ( to) 202.32 510.33 P
3 F
-1.71 (bp) 215.18 510.33 P
2 F
-0.79 (.) 227.18 510.33 P
3 F
-1.71 (bp) 231.94 510.33 P
2 F
-0.79 ( now points to the base of) 243.94 510.33 P
5 F
-0.82 (HelloProc) 358.23 510.33 P
2 F
-0.79 (\325) 410.27 510.33 P
-0.79 (s stack frame.) 411.94 510.33 P
5 F
-0.82 (HelloProc) 476.97 510.33 P
2 F
-0.52 (then subtracts six from) 180 497.33 P
3 F
-1.11 (sp) 288.12 497.33 P
2 F
-0.52 (, making room for its local variables \050Figure) 300.12 497.33 P
-0.52 (2-) 502.1 497.33 P
-0.52 (1.b\051.) 510.99 497.33 P
(When) 180 477.33 T
5 F
(HelloProc) 209.81 477.33 T
2 F
( is ready to return, it copies) 261.85 477.33 T
5 F
(bp) 391.86 477.33 T
2 F
( to) 405.01 477.33 T
5 F
(sp) 419.46 477.33 T
2 F
(, thus removing) 431.13 477.33 T
(everything from the stack up to the saved) 180 464.33 T
3 F
(bp) 375.2 464.33 T
2 F
(. It then pops) 387.2 464.33 T
3 F
(bp) 451.28 464.33 T
2 F
( off the stack;) 463.28 464.33 T
3 F
-0.91 (bp) 180 451.33 P
2 F
-0.42 ( now has the value it had when) 192 451.33 P
5 F
-0.43 (HelloProc) 335.7 451.33 P
2 F
-0.42 ( was called. Finally) 387.74 451.33 P
-0.42 (, it executes) 474.66 451.33 P
81 144 531 648 C
180 144 531 443.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
248.13 433.07 248.13 390.65 180.63 390.65 180.63 433.07 4 L
5 X
0 0 0 1 0 0 0 K
V
0.5 H
2 Z
0 X
N
0 10 Q
(Figure) 180 219.64 T
(2-) 213.34 219.64 T
(1) 222.23 219.64 T
6 F
(Stack conventions for) 230.57 219.64 T
6 9 Q
(GEOS) 331.3 219.64 T
6 10 Q
( routines) 357.8 219.64 T
(\050a\051 This is the stack\325) 180 205.64 T
(s setup when) 271.46 205.64 T
7 F
(HelloProc) 332.93 205.64 T
6 F
( was called, but before) 384.05 205.64 T
7 F
(HelloProc) 180 193.64 T
6 F
( did anything to the stack.) 231.12 193.64 T
(\050b\051 This is the stack after) 180 179.64 T
7 F
(HelloProc) 296.64 179.64 T
6 F
( has \336nished setting up the stack frame.) 347.76 179.64 T
(\050c\051 This is the stack after the) 180 165.64 T
4 F
(ret) 312.37 165.64 T
6 F
( instruction is executed. The) 330.37 165.64 T
4 F
(ret) 461.07 165.64 T
6 F
( pops the) 479.07 165.64 T
(return address and the parameters off the stack.) 180 153.64 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
180.63 377.39 248.13 390.65 R
7 X
V
0 X
N
(AnInt) 200.96 380.33 T
180.63 364.13 248.13 377.39 R
7 X
V
0 X
N
(AChar) 199.11 367.07 T
180.63 337.87 248.13 364.13 R
7 X
V
0 X
N
(AnOptr) 197.07 347.31 T
307.79 285.29 375.29 298.55 R
7 X
V
0 X
N
(LocalInt) 322.11 288.24 T
180.63 311.61 248.13 337.87 R
7 X
V
0 X
N
(Return) 198.37 327.08 T
(Address) 195.88 317.08 T
6 9 Q
(sp) 263.83 309.44 T
254.03 308.5 248.83 311.5 254.03 314.5 254.03 311.5 4 Y
V
261.33 311.5 254.03 311.5 2 L
N
(bp) 263.83 420.6 T
254.03 419.67 248.83 422.67 254.03 425.67 254.03 422.67 4 Y
V
261.33 422.67 254.03 422.67 2 L
N
248.13 422.67 180.63 422.67 2 L
1 H
N
(Caller) 198.58 410.33 T
(\325) 224.72 410.33 T
(s) 226.23 410.33 T
(stack frame) 190.42 401.33 T
375.29 433.07 375.29 390.65 307.79 390.65 307.79 433.07 4 L
5 X
V
0.5 H
0 X
N
307.79 377.39 375.29 390.65 R
7 X
V
0 X
N
6 10 Q
(AnInt) 328.13 380.33 T
307.79 364.13 375.29 377.39 R
7 X
V
0 X
N
(AChar) 326.28 367.07 T
307.79 337.87 375.29 364.13 R
7 X
V
0 X
N
(AnOptr) 324.24 347.31 T
307.79 311.61 375.29 337.87 R
7 X
V
0 X
N
(Return) 325.54 327.08 T
(Address) 323.04 317.08 T
6 9 Q
(bp) 391 296.1 T
381.2 295.17 376 298.17 381.2 301.17 381.2 298.17 4 Y
V
388.5 298.17 381.2 298.17 2 L
N
(sp) 391 257.1 T
381.2 256.17 376 259.17 381.2 262.17 381.2 259.17 4 Y
V
388.5 259.17 381.2 259.17 2 L
N
375.29 422.67 307.79 422.67 2 L
1 H
N
(Caller) 325.74 410.33 T
(\325) 351.89 410.33 T
(s) 353.39 410.33 T
(stack frame) 317.58 401.33 T
307.79 259.03 375.29 285.29 R
7 X
V
0.5 H
0 X
N
6 10 Q
(LocalOptr) 318.23 268.48 T
307.79 298.55 375.29 311.82 R
7 X
V
0 X
N
6 9 Q
(passed bp) 321.3 301.5 T
307.79 311.82 375.29 311.82 2 L
1 H
0 Z
N
302.12 425.67 307.32 422.67 302.12 419.67 302.12 422.67 4 Y
V
307.79 305.18 296 305.18 296 422.67 302.12 422.67 4 L
0.5 H
N
6 10 Q
(\050b\051) 335.44 242.67 T
(\050a\051) 208.18 242.67 T
489.46 433.07 489.46 390.65 421.96 390.65 421.96 433.07 4 L
5 X
V
2 Z
0 X
N
6 9 Q
(sp) 505.17 386.52 T
495.36 387.23 490.17 390.23 495.36 393.23 495.36 390.23 4 Y
V
502.67 390.23 495.36 390.23 2 L
N
(bp) 505.17 420.6 T
495.36 419.67 490.17 422.67 495.36 425.67 495.36 422.67 4 Y
V
502.67 422.67 495.36 422.67 2 L
N
489.46 422.67 421.96 422.67 2 L
1 H
N
(Caller) 439.91 410.33 T
(\325) 466.06 410.33 T
(s) 467.56 410.33 T
(stack frame) 431.75 401.33 T
6 10 Q
(\050c\051) 450.16 242.67 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "62" 2
%%Page: "63" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Conventions) 428.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  63) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(a) 180 641.33 T
4 F
(retf) 188.34 641.33 T
(8) 218.34 641.33 T
2 F
(, which pops the arguments off the stack and returns. \050Note that) 224.34 641.33 T
-0.17 (you can simply use the \322) 180 628.33 P
4 F
-0.37 (ret) 291.19 628.33 P
2 F
-0.17 (\323 pseudo-op; Esp will automatically expand it to) 309.19 628.33 P
(a) 180 615.33 T
4 F
(retn) 188.34 615.33 T
2 F
( or) 212.34 615.33 T
4 F
(retf) 227.34 615.33 T
2 F
( which pops all local arguments off the stack.\051) 251.34 615.33 T
(As noted above, Esp does most of the bookkeeping for you. Y) 180 595.33 T
(ou need simply) 456.89 595.33 T
(declare your arguments and local variables, then use the) 180 582.33 T
4 F
(.enter) 445.03 582.33 T
2 F
( and) 481.03 582.33 T
4 F
(.leave) 180 569.33 T
2 F
( directives. Esp will automatically set up the stack as necessary) 216 569.33 T
(.) 509.01 569.33 T
-0.77 (Passed parameters are always word-aligned. This is because they are pushed) 180 549.33 P
-0.75 (on the stack by the caller) 180 536.33 P
-0.75 (, and) 291.65 536.33 P
4 F
-1.61 (push) 315.9 536.33 P
2 F
-0.75 ( always pushes a word-sized values. Local) 339.9 536.33 P
-0.38 (variables, on the other hand, are not necessarily word-aligned; Esp allocates) 180 523.33 P
-0.25 (just enough space for the local variables. \050It will, if necessary) 180 510.33 P
-0.25 (, add a padding) 458.09 510.33 P
(byte, so the total amount of space used by local variables remains) 180 497.33 T
(word-aligned.\051) 180 484.33 T
0 14 Q
(3.1.1) 130.86 442 T
0 18 Q
(Parameters and Local V) 180 442 T
(ariables) 383.09 442 T
2 10 Q
(Esp makes it easy to use local variables and parameters. Y) 180 418.33 T
(ou need simply) 450.62 418.33 T
(declare them in the beginning of a procedure; Esp will automatically set up) 180 405.33 T
(the stack frame.) 180 392.33 T
(Parameters are declared on the same line as the procedure name. The \336rst) 180 372.33 T
(line of a procedure therefore has the following format:) 180 359.33 T
4 F
(<ProcName> proc \050near|far\051 \134) 216 343.33 T
([<paramName>:<paramType> \134) 252 329.33 T
([, <paramName>:<paramType>]*]) 288 315.33 T
5 F
(ProcName) 180 294.33 T
2 F
(The name of the procedure. The name\325) 243 294.33 T
(s scope is the entire) 420.05 294.33 T
(assembly) 243 282.33 T
(.) 284.68 282.33 T
5 F
(near|far) 180 263.33 T
2 F
-0.22 (Either \322) 243 263.33 P
4 F
-0.46 (near) 279.27 263.33 P
2 F
-0.22 (\323 or \322) 303.27 263.33 P
4 F
-0.46 (far) 325.62 263.33 P
2 F
-0.22 (\323. Near routines may only be called from) 343.62 263.33 P
(within the same resource, but there is slightly less overhead) 243 251.33 T
(when calling or returning.) 243 239.33 T
5 F
(paramName) 180 220.33 T
2 F
(The name of a parameter) 243 208.33 T
(. This name is a label whose scope is) 359.13 208.33 T
(limited to the procedure.) 243 196.33 T
5 F
(paramT) 180 177.33 T
(ype) 220.41 177.33 T
2 F
(The type of the parameter) 243 165.33 T
(.) 363.01 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "63" 3
%%Page: "64" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  64) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.1) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.81 (Y) 180 641.33 P
-0.81 (ou may specify the order of the parameters with the) 185.93 641.33 P
4 F
-1.74 (.model) 420.27 641.33 P
2 F
-0.81 ( directive. If you) 456.27 641.33 P
(use \322) 180 628.33 T
4 F
(.model pascal) 202.41 628.33 T
2 F
(\323 \050the default\051, parameters must be declared in the) 280.41 628.33 T
-0.3 (order in which they appear on the stack \050that is, the \336rst argument declared) 180 615.33 P
(is the \336rst one to be pushed on the stack\051. If you use \322) 180 602.33 T
4 F
(.model cdecl) 427.06 602.33 T
2 F
(\323, the) 499.06 602.33 T
6 F
-0.19 (last) 180 589.33 P
2 F
-0.19 ( parameter declared is the \336rst one to be pushed on the stack. Assuming) 197.03 589.33 P
(we use the Pascal convention,) 180 576.33 T
5 F
(HelloProc) 320.39 576.33 T
2 F
( \050described in Figure) 372.43 576.33 T
(2-) 470.58 576.33 T
(1\051, would) 479.47 576.33 T
(have the following \336rst line:) 180 563.33 T
4 F
(HelloProc proc far) 216 547.33 T
(AnOptr:optr, AChar:char, \134) 360 547.33 T
(AnInt:int) 360 533.33 T
2 F
-0.12 (Local variables are declared immediately after this line. Each local variable) 180 512.33 P
(has the following format:) 180 499.33 T
4 F
(<varName>) 216 483.33 T
(local <varType>) 288 483.33 T
5 F
(varName) 180 462.33 T
2 F
(The name of the local variable. The scope of this variable is) 243 462.33 T
(limited to the procedure.) 243 450.33 T
5 F
(varT) 180 431.33 T
(ype) 204.11 431.33 T
2 F
(The variable\325) 243 431.33 T
(s type.) 303.02 431.33 T
(As noted above, passed parameters are word-aligned, since they must be) 180 412.33 T
-0.34 (pushed on the stack by the caller) 180 399.33 P
-0.34 (. Local variables, on the other hand, are not) 329.43 399.33 P
(aligned. Local variables are not initialized, unless you explicitly specify an) 180 386.33 T
(initial value \050as described below\051.) 180 373.33 T
-0.29 (Y) 180 353.33 P
-0.29 (ou can use the name of a parameter or local variable to access it. The name) 185.93 353.33 P
-0.27 (is equivalent to an effective-address displacement from) 180 340.33 P
3 F
-0.58 (ss:[bp]) 435.35 340.33 P
2 F
-0.27 (. The name) 477.35 340.33 P
(is therefore valid only if) 180 327.33 T
3 F
(bp) 292.97 327.33 T
2 F
( points to the start of the stack frame.) 304.97 327.33 T
(If you use parameters or local variables, you must use the) 180 307.33 T
4 F
(.enter) 450.03 307.33 T
2 F
( and) 486.03 307.33 T
4 F
-1.22 (.leave) 180 294.33 P
2 F
-0.56 ( directives.) 216 294.33 P
4 F
-1.22 (.enter) 268.02 294.33 P
2 F
-0.56 ( expands into the instructions necessary to create) 304.02 294.33 P
(the stack frame, as well as the aliases for the variable names.) 180 281.33 T
4 F
(.leave) 467.48 281.33 T
2 F
(destroys the stack frame, restoring) 180 268.33 T
3 F
(sp) 344.08 268.33 T
2 F
( and) 356.08 268.33 T
3 F
(bp) 379.05 268.33 T
2 F
( to their values at the time) 391.05 268.33 T
4 F
(.enter) 180 255.33 T
2 F
( was used.) 216 255.33 T
0 14 Q
(3.1.1.1) 119.19 221.67 T
(Initializing Local V) 180 221.67 T
(ariables) 301.38 221.67 T
2 10 Q
(If you wish, you can specify that local variables be initialized. When Esp) 180 199.33 T
(builds the stack frame \050i.e. at the) 180 186.33 T
4 F
(.enter) 335.96 186.33 T
2 F
( instruction\051. The initialization is) 371.96 186.33 T
(done with a \322) 180 173.33 T
4 F
(push) 240.57 173.33 T
2 F
(\323 instruction; therefore, you can only initialize variables) 264.57 173.33 T
(with values that can be pushed \050i.e. 16-bit registers, memory locations, or) 180 160.33 T
(16-bit immediate values\051.) 180 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "64" 4
%%Page: "65" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Conventions) 428.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  65) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(There are some rules for initializing local variables:) 180 641.33 T
1 F
(u) 180 621.33 T
6 F
(All) 198 621.33 T
2 F
( of the initialized variables must be declared before) 211.7 621.33 T
6 F
(any) 450.81 621.33 T
2 F
( of the) 467.66 621.33 T
(uninitialized variables.) 198 609.33 T
1 F
(u) 180 590.33 T
2 F
-0.73 (Each of the initialized variables must be a whole number of words in size.) 198 590.33 P
(Y) 198 578.33 T
(ou must push enough values to precisely \336ll the variable.) 203.93 578.33 T
1 F
(u) 180 559.33 T
2 F
(The values are pushed after the stack frame is set up; therefore, you) 198 559.33 T
(cannot initialize a local variable to contain) 198 547.33 T
3 F
(bp) 397.49 547.33 T
2 F
( \050except as described) 409.49 547.33 T
(below\051. If you want to copy the old) 198 535.33 T
3 F
(bp) 358.39 535.33 T
2 F
( to a local variable, initialize it to) 370.39 535.33 T
(contain) 198 523.33 T
3 F
(ss:[bp]) 235.04 523.33 T
2 F
( \050the location of the stored) 277.04 523.33 T
3 F
(bp) 400.38 523.33 T
2 F
(\051. If you want to copy the) 412.38 523.33 T
-0.27 (new) 198 511.33 P
3 F
-0.58 (bp) 219.4 511.33 P
2 F
-0.27 ( \050i.e. the current frame pointer\051 to a local variable, you must do it) 231.4 511.33 P
(by hand after the) 198 499.33 T
4 F
(.enter) 280.79 499.33 T
2 F
( instruction.) 316.79 499.33 T
-0.79 (T) 180 480.33 P
-0.79 (o initialize the variable, put a) 185.75 480.33 P
4 F
-1.7 (push) 320.69 480.33 P
2 F
-0.79 ( instruction at the end of the declaration,) 344.69 480.33 P
(on the same line. Like any) 180 467.33 T
2 9 Q
(GEOS) 304.85 467.33 T
4 10 Q
(push) 333.8 467.33 T
2 F
(, the instruction may have multiple) 357.8 467.33 T
-0.47 (arguments; they will be pushed in order) 180 454.33 P
-0.47 (, from left to right \050therefore the \336rst) 361.26 454.33 P
(argument given will be the highest word of the variable\051.) 180 441.33 T
(For example, a procedure might have the following declarations:) 180 421.33 T
4 F
(HelloProc) 216 405.33 T
(proc near) 288 405.33 T
(AnOptr) 216 388.33 T
(local optr) 288 388.33 T
(push bx, di) 360 388.33 T
(AMemValue) 216 374.33 T
(local int) 288 374.33 T
(push ds:[GlobalVariable]) 360 374.33 T
(AByte) 216 360.33 T
(local byte) 288 360.33 T
(; not initialized) 360 360.33 T
(AnotherInt) 216 343.33 T
(local int) 288 343.33 T
(; not initialized) 360 343.33 T
2 F
(When Esp set up the stack frame, it would take steps equivalent to the) 180 322.33 T
(following instructions:) 180 309.33 T
4 F
(push) 216 293.33 T
(bp) 252 293.33 T
(; Set up the stack frame) 324 293.33 T
(mov) 216 279.33 T
(bp, sp) 252 279.33 T
(; \050ss:[bp] = base of frame\051) 324 279.33 T
(push) 216 265.33 T
(bx) 252 265.33 T
(; Initialize AnOptr: high word) 324 265.33 T
(push) 216 251.33 T
(di) 252 251.33 T
(; low word) 324 251.33 T
(push) 216 237.33 T
(ds:[GlobalVariable]) 252 237.33 T
(; copy mem. location) 396 237.33 T
(; to local variable) 396 223.33 T
(sub) 216 209.33 T
(sp, 4) 252 209.33 T
(; Leave room for AByte and) 324 209.33 T
(; AnotherInt \050and add one byte, so) 324 195.33 T
(; local vars are word-aligned\051) 324 181.33 T
2 F
-0.19 (There is a special case for initializing local variables. The) 180 160.33 P
6 F
-0.19 (\336rst) 445.61 160.33 P
2 F
-0.19 ( local variable) 464.12 160.33 P
(may be initialized with \322) 180 147.33 T
4 F
(push bp) 293.18 147.33 T
2 F
(\323. \050If it is a multi-word variable, the high) 335.18 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "65" 5
%%Page: "66" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  66) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.1) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.26 (word, and only the high word, may be initialized with) 180 641.33 P
3 F
-0.56 (bp) 427.62 641.33 P
2 F
-0.26 (.\051 In this case,) 439.62 641.33 P
3 F
-0.56 (bp) 506.18 641.33 P
2 F
-0.26 ( is) 518.18 641.33 P
-0.27 (not actually pushed on the stack. Instead, that variable\325) 180 628.33 P
-0.27 (s location is made to) 435.66 628.33 P
-0.44 (be) 180 615.33 P
3 F
-0.94 (ss:[bp]) 192.9 615.33 P
2 F
-0.44 (; that is, the variable is another name for the location containing) 234.9 615.33 P
-0.75 (the stored) 180 602.33 P
3 F
-1.61 (bp) 227.76 602.33 P
2 F
-0.75 (. Y) 239.76 602.33 P
-0.75 (ou may read the passed) 250.51 602.33 P
3 F
-1.61 (bp) 358.64 602.33 P
2 F
-0.75 ( from this variable; similarly) 370.64 602.33 P
-0.75 (, if you) 499.16 602.33 P
-0.6 (write a value to this variable, that value will be returned in) 180 589.33 P
3 F
-1.29 (bp) 450.83 589.33 P
2 F
-0.6 (. This is useful) 462.83 589.33 P
-0.42 (if you need to return a value in) 180 576.33 P
3 F
-0.9 (bp) 322.59 576.33 P
2 F
-0.42 (. If you want a local variable to contain the) 334.59 576.33 P
(passed) 180 563.33 T
3 F
(bp) 214.08 563.33 T
2 F
(, but you do not want to change) 226.08 563.33 T
3 F
(bp) 373.7 563.33 T
2 F
( on return, you should) 385.7 563.33 T
(push-initialize the variable with) 180 550.33 T
3 F
(ss:[bp]) 331.88 550.33 T
2 F
(, as described above.) 373.88 550.33 T
0 14 Q
(3.1.2) 130.86 508 T
0 18 Q
(The \322uses\323 Directive) 180 508 T
2 10 Q
-0.56 (Many routines will need to preserve the state of some or all of their registers.) 180 484.33 P
-0.61 (Esp provides for this with the) 180 471.33 P
4 F
-1.32 (uses) 316.15 471.33 P
2 F
-0.61 ( directive. This directive is used to specify) 340.15 471.33 P
(a list of registers that should be pushed at the start of the routine, and) 180 458.33 T
(popped at the end. Uses has the following format:) 180 445.33 T
4 F
(uses) 216 429.33 T
(<reg> [, <reg>]*) 252 429.33 T
(uses) 180 408.33 T
2 F
( must be used in conjunction with) 204 408.33 T
4 F
(.enter) 362.53 408.33 T
2 F
( and) 398.53 408.33 T
4 F
(.leave) 421.5 408.33 T
2 F
(. The registers) 457.5 408.33 T
-0.4 (will be pushed at the point where) 180 395.33 P
4 F
-0.86 (.enter) 334.46 395.33 P
2 F
-0.4 ( is used; they will be popped where) 370.46 395.33 P
4 F
(.leave) 180 382.33 T
2 F
( is used.) 216 382.33 T
0 14 Q
(3.1.3) 130.86 340 T
0 18 Q
(.enter and .leave) 180 340 T
2 10 Q
-0.25 (Esp provides several conveniences for writing routines. It can automatically) 180 316.33 P
(save registers, set up stack frames, and set up local arguments. Y) 180 303.33 T
(ou can) 481.71 303.33 T
(signal when to do this by using the) 180 290.33 T
4 F
(.enter) 343.92 290.33 T
2 F
( and) 379.92 290.33 T
4 F
(.leave) 402.89 290.33 T
2 F
( directives.) 438.89 290.33 T
(Ordinarily) 180 277.33 T
(, the) 227.78 277.33 T
4 F
(.enter) 251.12 277.33 T
2 F
( directive is put right after the local variable) 287.12 277.33 T
(declarations, and before any actual code. The) 180 264.33 T
4 F
(.leave) 391.14 264.33 T
2 F
( directive is put just) 427.14 264.33 T
(before the) 180 251.33 T
4 F
(ret) 228.89 251.33 T
2 F
( directive.) 246.89 251.33 T
4 F
(.enter) 180 231.33 T
2 F
( sets up a stack frame if necessary) 216 231.33 T
(. It will only do this if the routine) 373.24 231.33 T
-0.86 (declares parameters or local arguments \050see section 3.1.1 on page 63\051. Setting) 180 218.33 P
-0.34 (up a stack frame entails pushing) 180 205.33 P
3 F
-0.73 (bp) 332.44 205.33 P
2 F
-0.34 ( on the stack and copying the current) 344.44 205.33 P
3 F
-0.73 (sp) 516.56 205.33 P
2 F
-0.35 (to) 180 192.33 P
3 F
-0.76 (bp) 191.32 192.33 P
2 F
-0.35 (.) 203.32 192.33 P
4 F
-0.76 (.enter) 208.53 192.33 P
2 F
-0.35 ( also pushes any registers declared with \322) 244.53 192.33 P
4 F
-0.76 (uses) 433.57 192.33 P
2 F
-0.35 (\323. If you use the) 457.57 192.33 P
4 F
-0.89 (.enter) 180 179.33 P
2 F
-0.41 ( directive, you must use it before you push anything on the stack, try) 216 179.33 P
(to access any of the parameters or local variables, or change any registers) 180 166.33 T
(which must be preserved.) 180 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "66" 6
%%Page: "67" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Conventions) 428.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  67) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.56 (If you use a) 180 641.33 P
4 F
-1.2 (uses) 234.07 641.33 P
2 F
-0.56 ( directive, you must use the) 258.07 641.33 P
4 F
-1.2 (.enter) 385.11 641.33 P
2 F
-0.56 ( and) 421.11 641.33 P
4 F
-1.2 (.leave) 442.96 641.33 P
2 F
-0.56 ( directives.) 478.96 641.33 P
4 F
(.enter) 180 628.33 T
2 F
( will push all named registers after it sets up the stack frame.) 216 628.33 T
4 F
(.leave) 180 615.33 T
2 F
( will pop the registers before it destroys the stack frame.) 216 615.33 T
(T) 180 595.33 T
(o inherit a stack frame, put an) 185.75 595.33 T
4 F
(inherit) 329.48 595.33 T
2 F
( instruction after the) 371.48 595.33 T
4 F
(.enter) 470.74 595.33 T
2 F
(instruction. This is discussed in section 3.1.4 on page 69.) 180 582.33 T
-0.64 (Note that if you use local variables or stack parameters,) 180 562.33 P
4 F
-1.38 (.enter) 435.16 562.33 P
2 F
-0.64 ( and) 471.16 562.33 P
4 F
-1.38 (.leave) 492.86 562.33 P
2 F
(will automatically preserve) 180 549.33 T
3 F
(bp) 308.91 549.33 T
2 F
(; that is,) 320.91 549.33 T
3 F
(bp) 362.04 549.33 T
2 F
( will have the same value after) 374.04 549.33 T
4 F
(.leave) 180 536.33 T
2 F
( as it had before) 216 536.33 T
4 F
(.enter) 292.87 536.33 T
2 F
(. If you need to return a value in) 328.13 536.33 T
3 F
(bp) 480.55 536.33 T
2 F
(, you) 492.55 536.33 T
(should set up a local variable to hold the stored) 180 523.33 T
3 F
(bp) 401.15 523.33 T
2 F
(, as described in section) 413.15 523.33 T
-0.6 (3.1.1.1 on page 64. \050Y) 180 510.33 P
-0.6 (ou can also copy the return value to) 275.23 510.33 P
3 F
-1.3 (bp) 437.82 510.33 P
6 F
-0.6 (after) 452 510.33 P
2 F
-0.6 ( the) 473.47 510.33 P
4 F
-1.3 (.leave) 492.82 510.33 P
2 F
(instruction destroys the stack frame, but before the) 180 497.33 T
4 F
(ret) 420.2 497.33 T
2 F
(.\051) 438.2 497.33 T
81 464.98 531 477 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 464.98 531 477 R
7 X
0 0 0 1 0 0 0 K
V
76.5 472.23 617.5 475.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 458.31 T
(2-) 147.13 458.31 T
(5 W) 156.02 458.31 T
(riting a Procedure) 173.62 458.31 T
4 9 Q
(; This shows how Esp automatically sets up the stack frame to accommodate local) 81 443.98 T
(variables and passed parameters, and to preserve registers. The procedure is the) 81 432.98 T
3 F
(HelloProc) 81 421.98 T
4 F
( described in section 3.1 on page 61.) 129.6 421.98 T
(COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%) 81 385.98 T
( HelloProc) 81 374.98 T
(%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%) 81 363.98 T
(SYNOPSIS: This shows how Esp automatically sets up the stack frame to accommodate) 81 345.98 T
(local variables and passed parameters, and to preserve registers. The procedure is) 81 334.98 T
(the) 81 323.98 T
3 F
(HelloProc) 102.6 323.98 T
4 F
( described in section 3.1 on page 61.) 151.2 323.98 T
(CALLED BY: HelloOtherProc) 81 305.98 T
(PASS:) 81 287.98 T
(stack:) 125 287.98 T
(AnInt \050pushed first\051) 168.98 287.98 T
(AChar) 168.98 276.98 T
(AnOptr) 168.98 265.98 T
(RETURN:) 81 247.98 T
(ax = freeble factor) 168.98 247.98 T
(DESTROYED: nothing) 81 229.98 T
(SIDE EFFECTS: none) 81 211.98 T
(PSEUDO CODE/STRATEGY:) 81 193.98 T
(Set up the local variables, then call HelloInnerProc to do the dirty work) 81 182.98 T
(REVISION HISTORY:) 81 164.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "67" 7
%%Page: "68" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  68) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.1) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
( Name) 81 642 T
(Date) 168.98 642 T
(Description) 256.5 642 T
( ----) 81 631 T
(----) 168.98 631 T
(-----------) 256.5 631 T
( Frank T. Poomm) 81 613 T
(4/1/93) 168.98 613 T
(Initial version) 256.5 613 T
(%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@) 81 595 T
(HelloProc proc far) 81 577 T
(anOptr:optr, aChar:char, anInt:int) 212.5 577 T
(uses bx, cx, dx) 81 559 T
(localInt) 81 541 T
(local int) 168.98 541 T
(push ax) 256.5 541 T
(localOptr) 81 530 T
(local optr) 168.98 530 T
(.enter) 81 512 T
(call HelloInnerProc) 125 494 T
(; Calculate freeble factor; put it in LocalInt) 256.5 494 T
(; \050HelloInnerProc presumably inherits the stack) 256.5 483 T
(; frame from HelloProc\051) 256.5 472 T
(mov) 125 461 T
(ax, localInt) 168.98 461 T
(; Return the freeble factor) 256.5 461 T
(.leave) 81 443 T
(ret) 125 425 T
(HelloProc endp) 81 407 T
(; Esp would expand this to code like this:) 81 389 T
(; Set up stack frame) 125 371 T
(push) 125 360 T
(bp) 168.98 360 T
(; preserve value of bp) 212.5 360 T
(mov) 125 349 T
(bp, sp) 168.98 349 T
(; Set bp to point to stack frame) 212.5 349 T
(push) 125 338 T
(ax) 168.98 338 T
(; Initialize LocalInt...) 212.5 338 T
(sub) 125 327 T
(sp, 4) 168.98 327 T
(; ...and leave enough uninitialized space for an optr) 212.5 327 T
(; Set up names of parameters/local variables) 125 309 T
(anOptr) 125 298 T
(equ ss:[bp+6]) 212.5 298 T
(; All of these names have local scope.) 301 298 T
(aChar) 125 287 T
(equ ss:[bp+6][4]) 212.5 287 T
(anInt) 125 276 T
(equ ss:[bp+6][6]) 212.5 276 T
(localInt) 125 265 T
(equ ss:[bp][-2]) 212.5 265 T
(localOptr) 125 254 T
(equ ss:[bp][-6]) 212.5 254 T
(; Preserve registers specified in \322uses\323 line) 125 236 T
(push) 125 225 T
(bx) 168.98 225 T
(; Esp recognizes that bp was preserved when the) 256.5 225 T
(push) 125 214 T
(cx) 168.98 214 T
(; stack frame was set up, so it does not push bp) 256.5 214 T
(push) 125 203 T
(dx) 168.98 203 T
(; again here.) 256.5 203 T
(call) 125 185 T
(HelloInnerProc) 168.98 185 T
(mov) 125 167 T
(ax, ss:[bp][-2]) 168.98 167 T
(; This copies the \322localInt\323 variable into ax) 256.5 167 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "68" 8
%%Page: "69" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Conventions) 428.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  69) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(; Restore the registers & destroy the stack frame) 125 642 T
(pop) 125 631 T
(dx) 168.98 631 T
(pop) 125 620 T
(cx) 168.98 620 T
(pop) 125 609 T
(bx) 168.98 609 T
(mov) 125 598 T
(sp, bp) 168.98 598 T
(; This pops the stack frame) 212.5 598 T
(pop) 125 587 T
(bp) 168.98 587 T
(; This restores bp) 212.5 587 T
(; Return, freeing passed parameters) 125 569 T
(retf) 125 558 T
(8) 168.98 558 T
(HelloProc) 81 540 T
(endp) 168.98 540 T
81 515.98 531 528 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.98 531 528 R
7 X
0 0 0 1 0 0 0 K
V
76.5 523.23 617.5 526.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(3.1.4) 130.86 475.98 T
0 18 Q
(Inheriting a Stack Frame) 180 475.98 T
2 10 Q
(Y) 180 452.31 T
(ou may write a routine which is called only by a single other routine. For) 185.93 452.31 T
(example, if you were writing a sort routine, you might write several) 180 439.31 T
-0.13 (comparison routines, each of which is only called by the sort routine. In this) 180 426.31 P
(situation, you might want to let the routine use local variables and) 180 413.31 T
(parameters that belong to its caller) 180 400.31 T
(. Y) 342.25 400.31 T
(ou can do this by having the routine) 353.74 400.31 T
6 F
(inherit) 180 387.31 T
2 F
( the stack frame of its caller) 211.28 387.31 T
(.) 339.63 387.31 T
-0.51 (If you inherit a stack frame, Esp assumes that) 180 367.31 P
3 F
-1.1 (ss:[bp]) 392.65 367.31 P
2 F
-0.51 ( points to the caller) 434.65 367.31 P
-0.51 (\325) 522.43 367.31 P
-0.51 (s) 524.1 367.31 P
(stack frame \050i.e. that) 180 354.31 T
3 F
(bp) 279.28 354.31 T
2 F
( was set to point to that routine\325) 291.28 354.31 T
(s stored) 438.72 354.31 T
3 F
(bp) 477.61 354.31 T
2 F
(\051. Esp) 489.61 354.31 T
(declares variable names in the local namespace which indicate appropriate) 180 341.31 T
-0.04 (displacements from the frame pointer) 180 328.31 P
-0.04 (. If a routine inherits a stack frame, it) 353.36 328.31 P
(may not \050of course\051 create a stack frame of its own; that is, it may not have) 180 315.31 T
(any of its own local variables or passed parameters.) 180 302.31 T
(The simplest way to inherit a stack frame is with a directive of this kind:) 180 282.31 T
4 F
(.enter inherit) 216 266.31 T
(<routineName>) 324 266.31 T
5 F
(routineName) 180 245.31 T
2 F
(This is the name of the routine whose stack frame will be) 243 233.31 T
(inherited. This routine must be in the same assembly) 243 221.31 T
(, and) 488.97 221.31 T
(under certain circumstances it must already have been) 243 209.31 T
(assembled before the inheritor is assembled.) 243 197.31 T
-0.42 (Esp will automatically declare the names of the variables and parameters in) 180 178.31 P
(the local namespace. As always, it is your responsibility to keep) 180 165.31 T
3 F
(ss:[bp]) 476.54 165.31 T
2 F
(pointing to the stack frame.) 180 152.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "69" 9
%%Page: "70" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  70) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.25 (A routine which inherits a stack frame may specify what local variables and) 180 641.33 P
-0.46 (parameters it expects to \336nd in that frame. It does this by declaring the local) 180 628.33 P
(variables and parameters exactly the way other routines declare their own) 180 615.33 T
-0.63 (local variables and parameters. Esp will assume that these correspond to the) 180 602.33 P
(variables in the stack frame, and will declare those local variables) 180 589.33 T
(appropriately) 180 576.33 T
(. Indeed, you need not even use the name of the routine from) 241.67 576.33 T
-0.1 (which the frame is inherited; you can simply use the reserved words \322) 180 563.33 P
4 F
-0.22 (near) 500.43 563.33 P
2 F
-0.1 (\323) 524.43 563.33 P
(or \322) 180 550.33 T
4 F
(far) 196.11 550.33 T
2 F
(\323. \050Esp needs to know whether the inherited frame is from a near or) 214.11 550.33 T
(far procedure in order to \336gure out how much space the frame uses for the) 180 537.33 T
(return address.\051) 180 524.33 T
( For example, suppose you have the declaration) 180 504.33 T
4 F
(HeirProc) 216 488.33 T
(proc near) 288 488.33 T
(callerParamOptr:optr,) 360 488.33 T
(\134) 486 488.33 T
(callerParamInt:int) 360 474.33 T
(callerLocalInt) 216 457.33 T
(local int) 324 457.33 T
(callerLocalOptr) 216 443.33 T
(local optr) 324 443.33 T
(.enter) 216 426.33 T
(inherit near) 288 426.33 T
2 F
-0.4 (As noted, Esp will not change) 180 405.33 P
3 F
-0.87 (bp) 317.04 405.33 P
2 F
-0.4 (; it assumes that) 329.04 405.33 P
3 F
-0.87 (ss:[bp]) 407.26 405.33 P
2 F
-0.4 ( already points to) 449.26 405.33 P
-0.2 (the base of the stack frame. Esp will declare the variables in the local scope;) 180 392.33 P
-0.09 (that is,) 180 379.33 P
6 F
-0.09 (callerParamOptr) 215.38 379.33 P
2 F
-0.09 ( will refer to) 294.06 379.33 P
3 F
-0.2 (ss:[bp+4]) 353.14 379.33 P
2 F
-0.09 (,) 407.14 379.33 P
6 F
-0.09 (callerParamInt) 412.6 379.33 P
2 F
-0.09 ( will refer) 483.5 379.33 P
(to) 180 366.33 T
3 F
(ss:[bp+4][4]) 191.67 366.33 T
2 F
(,) 263.67 366.33 T
6 F
(callerLocalInt) 269.23 366.33 T
2 F
( will refer to) 333.83 366.33 T
3 F
(ss:[bp][-2]) 393.28 366.33 T
2 F
(, and) 459.28 366.33 T
6 F
(callerLocalOptr) 180 353.33 T
2 F
( will refer to) 252.38 353.33 T
3 F
(ss:[bp][-6]) 311.83 353.33 T
2 F
(. Esp makes no guarantees that) 377.83 353.33 T
-0.54 (these locations hold meaningful values; it is your responsibility to make sure) 180 340.33 P
(that you are describing the actual stack frame.) 180 327.33 T
(Note that if a routine declares a parameter or local variable, but never) 180 307.33 T
(accesses it, Esp will generate a warning at assembly time. If you declare a) 180 294.33 T
(variable that is used only by other routines which inherit the stack frame,) 180 281.33 T
(you can disable the warning by using the) 180 268.33 T
5 F
(ForceRef) 372.44 268.33 T
2 F
( macro.) 420.04 268.33 T
0 14 Q
(3.2) 142.54 216 T
0 24 Q
(LMem Heaps and Chunks) 180 216 T
2 10 Q
-0.17 (It is worth paying special attention to Local Memory heaps as they are used) 180 190.33 P
-0.61 (in Esp. The heaps themselves are always the same, whether they are created) 180 177.33 P
-0.59 (and accessed from Esp code or from Goc code; however) 180 164.33 P
-0.59 (, they are manipulated) 425.2 164.33 P
(in a somewhat different way) 180 151.33 T
(.) 310.39 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "70" 10
%%Page: "71" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(LMem Heaps and Chunks) 387.63 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  71) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.2) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.46 (First, a review of the basics of LMem is in order) 180 641.33 P
-0.46 (. A local memory heap is held) 395.65 641.33 P
(within a single \322global\323 block. The block is actually divided into two main) 180 628.33 T
(portions, a handle table and the heap itself. Chunks are assigned in the) 180 615.33 T
(\322heap\323 portion of the block. A chunk\325) 180 602.33 T
(s location within a heap may change) 347.98 602.33 T
-0.25 (from time to time. For example, when) 180 589.33 P
6 F
-0.25 (any) 355.51 589.33 P
2 F
-0.25 ( chunk is allocated or expanded in) 372.36 589.33 P
-0.02 (an LMem heap,) 180 576.33 P
6 F
-0.02 (every) 255.13 576.33 P
2 F
-0.02 ( chunk in the heap may be moved to accommodate the) 278.64 576.33 P
-0.15 (change. Thus, the address of a chunk is very volatile. However) 180 563.33 P
-0.15 (, every chunk) 466.46 563.33 P
(has a) 180 550.33 T
6 F
(handle) 207.42 550.33 T
2 F
( which is unchanging.) 239.26 550.33 T
(The location of the LMem heap itself is also volatile. Whenever a chunk is) 180 530.33 T
(allocated or expanded, the LMem heap may have to be expanded to make) 180 517.33 T
(room for it. This can cause the LMem heap to move on the global heap.) 180 504.33 T
-0.04 (In Goc, chunk handles are treated as opaque tokens. T) 180 484.33 P
-0.04 (o get the address of a) 430.64 484.33 P
-0.32 (chunk, you call) 180 471.33 P
5 F
-0.33 (LMemDeref\050\051) 251.63 471.33 P
2 F
-0.32 (, passing the global handle of the LMem heap) 320.7 471.33 P
-0.81 (and the chunk handle of the chunk.) 180 458.33 P
5 F
-0.83 (LMemDeref\050\051) 341.4 458.33 P
2 F
-0.81 ( returns the address of the) 410.47 458.33 P
-0.69 (chunk, as a far) 180 445.33 P
-0.69 (-pointer \050i.e. segment:offset\051. Y) 246.66 445.33 P
-0.69 (ou end up having to do this over) 385.54 445.33 P
-0.71 (and over; whenever you allocate or resize a chunk, the pointers to every other) 180 432.33 P
(chunk are invalidated.) 180 419.33 T
(In Esp, chunk handles are not treated as opaque. A chunk handle is a) 180 399.33 T
-0.78 (near) 180 386.33 P
-0.78 (-pointer; that is, it is an offset from the beginning of the LMem heap. The) 200.93 386.33 P
-0.1 (chunk handle is a pointer to an entry in the LMem heap\325) 180 373.33 P
-0.1 (s handle table. The) 440.25 373.33 P
(entry contains the offset from the beginning of the heap to the chunk itself) 180 360.33 T
(\050See Figure) 180 347.33 T
(2-) 235.93 347.33 T
(2 on page) 244.82 347.33 T
1 F
(Y) 291.5 347.33 T
2 F
(72\051. Whenever you need to get the address of the) 302.2 347.33 T
(chunk, you simply use the chunk handle to \336nd the current offset of the) 180 334.33 T
(chunk.) 180 321.33 T
(The Esp versions of most LMem routines require you to pass the segment) 180 301.33 T
(address of the LMem heap in) 180 288.33 T
3 F
(ds) 317.42 288.33 T
2 F
(. Some routines may cause the block to be) 329.42 288.33 T
-0.32 (moved. These routines will generally \336x) 180 275.33 P
3 F
-0.69 (ds) 365.16 275.33 P
2 F
-0.32 ( so it still points to the heap after) 377.16 275.33 P
(the call, even if the heap moved. Furthermore, if) 180 262.33 T
3 F
(es) 406.5 262.33 T
2 F
( was the same as) 418.5 262.33 T
3 F
(ds) 499.64 262.33 T
2 F
( at) 511.64 262.33 T
(the time of the call, the routines will generally \336x) 180 249.33 T
3 F
(es) 411.33 249.33 T
2 F
( as well. Some other) 423.33 249.33 T
(routines \050notably) 180 236.33 T
5 F
(ObjMessage) 261.86 236.33 T
2 F
(\051 \336x these registers if you pass a special \337ag) 323.7 236.33 T
(instructing them to do so. Y) 180 223.33 T
(ou should check the reference for any routine) 307.05 223.33 T
(which can shuf\337e an LMem heap to see if it automatically \336xes these) 180 210.33 T
(registers. Remember) 180 197.33 T
(, if you store the segment address of the heap, that) 275.37 197.33 T
-0.25 (stored address will not be \336xed up; you will have to \336x the stored address by) 180 184.33 P
(hand.) 180 171.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "71" 11
%%Page: "72" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  72) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
81 333.98 531 346 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 333.98 531 346 R
7 X
0 0 0 1 0 0 0 K
V
76.5 341.23 617.5 344.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 327.31 T
(2-) 147.13 327.31 T
(6 Using an LMem Heap) 156.02 327.31 T
4 9 Q
(; This is an example of how to use an LMem heap in Esp. In this example,) 81 312.98 T
(; chunkHandleOne, chunkHandleTwo, and heapHandle are word-sized local variables.) 81 301.98 T
(; At the start of this code, chunkHandleOne and heapHandle are already set;) 81 290.98 T
(; chunkHandleTwo contains no meaningful value.) 81 279.98 T
(; First, we want to get access to the chunk specified by chunkHandleOne:) 81 261.98 T
(mov) 125 243.98 T
(bx, heapHandle) 168.98 243.98 T
(; bx = global handle of LMem heap) 301 243.98 T
(call) 125 232.98 T
(MemDerefDS) 168.98 232.98 T
(; ds:[0] = LMem heap) 301 232.98 T
(mov) 125 221.98 T
(si, chunkHandleOne) 168.98 221.98 T
(; ds:*si = chunk) 301 221.98 T
(mov) 125 210.98 T
(si, ds:[si]) 168.98 210.98 T
(; ds:[si] = chunk) 301 210.98 T
(; ds:[si] is now the address of the chunk. We can read from or write to the chunk) 81 192.98 T
(; at will. Now we want to allocate another chunk. ds still has the segment address) 81 181.98 T
(; of the LMem heap.) 81 170.98 T
81 144 531 648 C
180 360 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 443.33 T
(2-) 213.34 443.33 T
(2) 222.23 443.33 T
6 F
(Structure of an LMem Heap) 230.57 443.33 T
-0.75 (The LMem heap is divided into a handle table and the heap proper) 180 429.33 P
-0.75 (. The chunk) 476.38 429.33 P
-0.8 (handle is an offset to an entry in the handle table; that entry contains the offset) 180 417.33 P
(to the chunk itself.) 180 405.33 T
-0.78 (In this example, we assume that the heap is at location 0x9000; we wish to \336nd) 180 391.33 P
(the chunk with handle 0x0020.) 180 379.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
191.67 466.33 272.67 512.15 R
6 X
V
0.5 H
2 Z
0 X
N
(Handle T) 201.17 469.2 T
(able) 244.12 469.2 T
191.67 511.33 272.67 629.15 R
7 X
V
0 X
N
(Heap) 220.05 522.88 T
191.67 567.83 272.67 592.33 R
6 X
V
0 X
N
(Chunk) 216.62 576.02 T
191.67 484.42 272.67 495.5 R
7 X
V
0 X
N
(0x00A8) 215.04 486.66 T
(0x9000:0000) 297.61 462.76 T
278.64 463.44 273.44 466.44 278.64 469.44 278.64 466.44 4 Y
V
293.44 466.44 278.64 466.44 2 L
N
(0x9000:0020) 297.61 480.84 T
278.64 481.52 273.44 484.52 278.64 487.52 278.64 484.52 4 Y
V
293.44 484.52 278.64 484.52 2 L
N
(0x9000:00A8) 297.61 564.11 T
278.64 564.8 273.44 567.8 278.64 570.8 278.64 567.8 4 Y
V
293.44 567.8 278.64 567.8 2 L
N
186.64 570.83 191.83 567.83 186.64 564.83 186.64 567.83 4 Y
V
191.67 489.96 181.83 489.96 181.83 567.83 186.64 567.83 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "72" 12
%%Page: "73" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  73) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(clr) 125 642 T
(al) 168.98 642 T
(; Clear all object flags) 301 642 T
(mov) 125 631 T
(cx, MY_CHUNK_SIZE) 168.98 631 T
(; cx = size of chunk) 301 631 T
(call) 125 620 T
(LMemAlloc) 168.98 620 T
(; ax = chunk handle of new chunk) 301 620 T
(mov) 125 609 T
(chunkHandleTwo, ax) 168.98 609 T
(; store the new handle) 301 609 T
(; Note that the call to LMemAlloc may have moved the LMem heap. LMemAlloc) 81 591 T
(; automatically fixes ds \050and, if appropriate, es\051; however, if I\325d stored the) 81 580 T
(; address of the heap, the stored address would now be invalid.) 81 569 T
(; Now I want to look at the first chunk again. However, LMemAlloc can shuffle the) 81 551 T
(; heap, so I need to dereference the handle again:) 81 540 T
(mov) 125 522 T
(si, chunkHandleOne) 168.98 522 T
(mov) 125 511 T
(si, ds:[si]) 168.98 511 T
81 486.98 531 499 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 486.98 531 499 R
7 X
0 0 0 1 0 0 0 K
V
76.5 494.23 617.5 497.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(These principles apply wherever LMem heaps are used. For example,) 180 469.31 T
2 9 Q
(DB) 503.36 469.31 T
2 10 Q
(items are stored in) 180 456.31 T
6 F
(item blocks) 269.64 456.31 T
2 F
(, which are a kind of LMem heap. When you) 320.93 456.31 T
-0.62 (lock a) 180 443.31 P
2 9 Q
-0.56 (DB) 208.39 443.31 P
2 10 Q
-0.62 ( item, you are given the item\325) 221.89 443.31 P
-0.62 (s chunk handle, as well as the segment) 352.62 443.31 P
-0.04 (address of the item block. Y) 180 430.31 P
-0.04 (ou must dereference the chunk handle the same) 306.49 430.31 P
(way you would any other chunk handle.) 180 417.31 T
-0.73 (Object Blocks are also LMem heaps. Whenever a message is sent to an object,) 180 397.31 P
-0.74 (that object may be resized; this can shuf\337e the block, or cause the object block) 180 384.31 P
(to move on the global heap.) 180 371.31 T
0 14 Q
(3.3) 142.54 318.98 T
0 24 Q
(Objects and Classes) 180 318.98 T
2 10 Q
(One big difference between Esp and other assemblers is Esp\325) 180 293.31 T
(s support for) 459.84 293.31 T
(object-oriented programming.) 180 280.31 T
2 9 Q
(OOP) 319.81 280.31 T
2 10 Q
( is at the heart of) 339.82 280.31 T
2 9 Q
(GEOS) 422.06 280.31 T
2 10 Q
(, and Esp is) 448.23 280.31 T
(designed to make all the power of) 180 267.31 T
2 9 Q
(OOP) 337.62 267.31 T
2 10 Q
( available without sacri\336cing the) 357.63 267.31 T
(ef\336ciency of assembly language.) 180 254.31 T
(Using objects and classes is simple. The issues can be divided into three) 180 234.31 T
(categories: Declaring objects; creating new classes; and handling messages.) 180 221.31 T
(Each issue will be treated in its own section. This section also contains a) 180 208.31 T
-0.06 (review of the structure of) 180 195.31 P
2 9 Q
-0.05 (GEOS) 298.96 195.31 P
2 10 Q
-0.06 ( objects, and how objects are handled in Esp.) 325.14 195.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "73" 13
%%Page: "74" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  74) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(3.3.1) 130.86 636 T
0 18 Q
(Object Structure) 180 636 T
2 10 Q
-0.78 (This section is a review of how) 180 612.33 P
2 9 Q
-0.7 (GEOS) 318.08 612.33 P
2 10 Q
-0.78 ( works with objects. Before you read this,) 344.26 612.33 P
(you should be familiar with \322GEOS Programming,\323 Chapter) 180 599.33 T
(5 of the) 459.67 599.33 T
(Concepts Book.) 180 586.33 T
(An object\325) 180 566.33 T
(s instance data is stored as a chunk in an object block. An object) 224.63 566.33 T
-0.67 (block is a special kind of LMem heap. Whenever an instance chunk is created) 180 553.33 P
-0.47 (or expanded, all the other chunks in that object block may be moved, and the) 180 540.33 P
-0.63 (block itself may move on the global heap. When this happens, you can get the) 180 527.33 P
(address of the instance chunk by dereferencing the chunk handle, as with) 180 514.33 T
(any chunk.) 180 501.33 T
(The instance data for objects is divided into) 180 481.33 T
6 F
(master groups) 383.73 481.33 T
2 F
(. Master groups) 449.08 481.33 T
(are discussed in section 5.3.2.2 of chapter 5 of the Concepts book.) 180 468.33 T
-0.4 (In order to gain access to the instance data for an object, you have to \336nd the) 180 448.33 P
(offset to the master section containing that class\325) 180 435.33 T
(s instance data. For) 405.58 435.33 T
-0.46 (example, suppose you need to examine the) 180 422.33 P
6 9 Q
-0.41 (HT) 375.9 422.33 P
6 10 Q
-0.46 (_myDatum) 389.56 422.33 P
2 F
-0.46 ( \336eld of an instance) 440.49 422.33 P
(of) 180 409.33 T
5 F
(HelloT) 191.11 409.33 T
(riggerClass) 225.3 409.33 T
2 F
(.) 284.75 409.33 T
5 F
(HelloT) 290.31 409.33 T
(riggerClass) 324.5 409.33 T
2 F
( is subclassed from) 383.95 409.33 T
5 F
-0.07 (GenT) 180 396.33 P
-0.07 (riggerClass) 207.52 396.33 P
2 F
-0.07 (, which is itself subclassed from) 266.97 396.33 P
5 F
-0.07 (GenClass) 415.65 396.33 P
2 F
-0.07 (.) 463.98 396.33 P
5 F
-0.07 (GenClass) 469.47 396.33 P
2 F
-0.07 ( is) 517.8 396.33 P
-0.13 (the \336rst master class above) 180 383.33 P
5 F
-0.13 (HelloT) 308.64 383.33 P
-0.13 (riggerClass) 342.83 383.33 P
2 F
-0.13 (; thus, all the instance data) 402.28 383.33 P
-0.29 (de\336ned by) 180 370.33 P
5 F
-0.3 (GenClass) 229.61 370.33 P
2 F
-0.29 (,) 277.94 370.33 P
5 F
-0.3 (GenT) 283.21 370.33 P
-0.3 (riggerClass) 310.73 370.33 P
2 F
-0.29 (, and) 370.18 370.33 P
5 F
-0.3 (HelloT) 395.36 370.33 P
-0.3 (riggerClass) 429.55 370.33 P
2 F
-0.29 ( is in the) 488.99 370.33 P
(same master group.) 180 357.33 T
-0.67 (Esp automatically de\336nes) 180 337.33 P
4 F
-1.45 (HT_myDatum) 300.23 337.33 P
2 F
-0.67 ( as the displacement from the start of) 360.23 337.33 P
-0.42 (the master group to the) 180 324.33 P
6 9 Q
-0.38 (HT) 289.76 324.33 P
6 10 Q
-0.42 (_myDatum) 303.42 324.33 P
2 F
-0.42 ( \336eld. In order to actually examine the) 354.35 324.33 P
-0.24 (\336eld, you have to know where the master group begins. The displacement to) 180 311.33 P
-0.22 (the master section can change during the life of the object; however) 180 298.33 P
-0.22 (, you can) 487.95 298.33 P
-0.52 (\336nd the displacement by looking at a speci\336c place in the object. T) 180 285.33 P
-0.52 (o allow you) 478.09 285.33 P
(to \336nd the displacement, Esp de\336nes a constant instructing you where to) 180 272.33 T
-0.83 (look. In this case, the constant would be called) 180 259.33 P
4 F
-1.8 (HelloTrigger_offset) 389.77 259.33 P
2 F
-0.83 (. This) 503.77 259.33 P
-0.39 (constant says where in the object you should look to \336nd the displacement to) 180 246.33 P
(the master group containing) 180 233.33 T
5 F
(HelloT) 314.08 233.33 T
(riggerClass) 348.27 233.33 T
2 F
(\325) 407.72 233.33 T
(s instance data. \050In this) 409.39 233.33 T
(case,) 180 220.33 T
4 F
(HelloTrigger_offset) 205.19 220.33 T
2 F
( is the same as) 319.19 220.33 T
4 F
(GenTrigger_offset) 390.14 220.33 T
2 F
( and) 492.14 220.33 T
4 F
-1.16 (Gen_offset) 180 207.33 P
2 F
-0.54 (.\051 T) 240 207.33 P
-0.54 (o actually examine the \336eld, you would take the steps shown) 254.1 207.33 P
(in \322Finding a Class\325) 180 194.33 T
(s Master Section\323, Code Display) 270.21 194.33 T
(2-) 420.6 194.33 T
(7.) 429.49 194.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "74" 14
%%Page: "75" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  75) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 261.98 531 274 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 261.98 531 274 R
7 X
0 0 0 1 0 0 0 K
V
76.5 269.23 617.5 272.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 255.31 T
(2-) 147.13 255.31 T
(7 Finding a Class\325) 156.02 255.31 T
(s Master Section) 240.68 255.31 T
4 9 Q
(; We want to examine an instance datum of an object. In particular, we want to) 81 240.98 T
(; load the word-sized HT_myDatum field of a HelloTrigger object into ax. ds:[bx]) 81 229.98 T
(; points to the beginning of the object\325s instance chunk.) 81 218.98 T
(; First, we need to get the address of the master section. As noted, ds:[bx]) 81 200.98 T
(; points to the beginning of the instance chunk.) 81 189.98 T
(mov) 125 178.98 T
(di, ds:[bx].HelloTrigger_offset) 168.98 178.98 T
81 144 531 648 C
180 288 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 392.31 T
(2-) 213.34 392.31 T
(3) 222.23 392.31 T
6 F
(Finding an Instance Datum in a Master Section) 230.57 392.31 T
-0.04 (W) 180 378.31 P
-0.04 (e need to \336nd HT_myDatum, a \336eld in HelloT) 188.52 378.31 P
-0.04 (riggerClass. The \336rst master) 397.31 378.31 P
-0.67 (class above HelloT) 180 366.31 P
-0.67 (riggerClass is GenClass, so the \336eld will be in the GenClass) 262.92 366.31 P
(master section.) 180 354.31 T
-0.5 (In this example, we assume that) 180 340.31 P
3 F
-1.07 (ds) 326.81 340.31 P
6 F
-0.5 ( points to the beginning of the object block,) 338.81 340.31 P
(and) 180 328.31 T
3 F
(ds:[si]) 200.74 328.31 T
6 F
( is the beginning of the instance chunk. HelloT) 242.74 328.31 T
(rigger_offset is) 454.58 328.31 T
(assumed to be 0xA2. HT_myDatum is assumed to be 0x1A; that is,) 180 316.31 T
(HT_myDatum starts 0x1A bytes from the beginning of the master section.) 180 304.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
222.05 409.68 305.38 636.35 R
6 X
V
0.5 H
2 Z
0 X
N
(Object Block) 235.12 422.67 T
222.05 548.02 305.38 598.02 R
7 X
V
0 X
N
(MyT) 239.83 569.33 T
(rigger) 260.23 569.33 T
(ds) 192.83 406.32 T
215.97 413 221.17 410 215.97 407 215.97 410 4 Y
V
204.38 410 215.97 410 2 L
N
(ds:si) 182.58 544.32 T
215.97 551 221.17 548 215.97 545 215.97 548 4 Y
V
204.38 548 215.97 548 2 L
N
(ds:si) 438.5 437.87 T
428.86 438.55 423.67 441.55 428.86 444.55 428.86 441.55 4 Y
V
436.67 441.55 428.86 441.55 2 L
N
(ds:[si].0x12) 437.26 457.92 T
429.45 459.22 424.25 462.22 429.45 465.22 429.45 462.22 4 Y
V
436.67 441.55 434.25 441.55 434.25 462.22 429.45 462.22 4 L
N
428.36 539.3 423.17 542.3 428.36 545.3 428.36 542.3 4 Y
V
436.67 441.55 434.47 441.55 434.47 542.3 428.36 542.3 4 L
N
428.36 574.22 423.17 577.22 428.36 580.22 428.36 577.22 4 Y
V
434.47 542.3 434.47 577.22 428.36 577.22 3 L
N
(ds:[si].0xC4) 437.4 539.67 T
(ds:[si].0xC4.0x1A) 437.4 573.84 T
222.05 598.02 346.83 634.8 421.83 634.8 305.38 598.02 4 Y
4 X
V
0 X
N
222.05 548.02 346.83 441.46 423.67 441.55 305.38 548.02 4 Y
4 X
V
0 X
N
346.83 441.46 421.83 634.8 R
7 X
V
0 X
N
346.83 510.63 376 516.46 404.33 504.8 421.83 513.13 421.83 522.63 404.33 514.3 376 525.96
 346.83 520.13 8 Y
4 X
V
0 X
N
346.83 542.3 421.83 600.63 R
6 X
V
0 X
N
(GenClass) 362.6 557.3 T
(master group) 353.9 547.3 T
346.83 577.3 421.83 591.46 R
7 X
V
0 X
N
(HT_myDatum) 351.3 582.3 T
346.83 462.3 421.83 474.3 R
N
(0x00C4) 367.11 464.62 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "75" 15
%%Page: "76" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  76) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(; Now, ds:[bx][di] points to the beginning of the master section. To load the) 81 642 T
(; datum, we add a displacement to this:) 81 631 T
(mov) 125 620 T
(ax, ds:[bx][di].HT_myDatum) 168.98 620 T
81 595.98 531 608 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 595.98 531 608 R
7 X
0 0 0 1 0 0 0 K
V
76.5 603.23 617.5 606.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
-0.67 (When a message handler is called, it is given a pointer to the beginning of the) 180 578.31 P
(instance chunk. However) 180 565.31 T
(, whenever an object does anything which could) 296.11 565.31 T
(shuf\337e the heap, it should redetermine this address, as described above.) 180 552.31 T
-0.52 (If there is no master class in an object\325) 180 532.31 P
-0.52 (s class hierarchy) 353.1 532.31 P
-0.52 (, all instance data will) 428.18 532.31 P
(be located at a constant offset from the start of the chunk. In this case, the) 180 519.31 T
(name of an instance \336eld will evaluate to the displacement from the) 180 506.31 T
-0.16 (beginning of the chunk to the \336eld. Esp will not de\336ne constants of the form) 180 493.31 P
6 F
-0.52 (MyClass_offset) 180 480.31 P
2 F
-0.52 (; you can simply use the name of the instance data \336eld as the) 248.67 480.31 P
(displacement from the start of the instance chunk.) 180 467.31 T
-0.2 (For example, if) 180 447.31 P
5 F
-0.2 (GoodbyeClass) 251.83 447.31 P
2 F
-0.2 ( is a subclass of) 324.79 447.31 P
5 F
-0.2 (MetaClass) 398.08 447.31 P
2 F
-0.2 ( \050and is not itself) 451.41 447.31 P
(a master class\051, and) 180 434.31 T
6 9 Q
(G) 275.02 434.31 T
6 10 Q
(_aDatum) 282.02 434.31 T
2 F
( is an instance data \336eld in that class, then) 324.8 434.31 T
4 F
(G_aDatum) 180 421.31 T
2 F
( will evaluate to the displacement from the beginning of the) 228 421.31 T
(instance chunk to the data \336eld.) 180 408.31 T
(If you\325re writing code for an \322masterless\323 object, it\325) 180 388.31 T
(s a good idea to use) 412.05 388.31 T
-0.35 (assertions to make the code more robust. For example, lets suppose we want) 180 375.31 P
(to load) 180 362.31 T
6 9 Q
(G) 213.9 362.31 T
6 10 Q
(_aDatum) 220.9 362.31 T
2 F
( into) 263.68 362.31 T
3 F
(ax) 287.39 362.31 T
2 F
(. The normal approach would be this:) 299.39 362.31 T
4 F
(; ds:[si] points to start of instance chunk) 216 346.31 T
(mov) 216 332.31 T
(ax, ds:[si].G_aDatum) 252 332.31 T
2 F
(There is one danger with this code. In a future rewrite,) 180 311.31 T
5 F
(GoodbyeClass) 436.68 311.31 T
2 F
( or) 509.64 311.31 T
(one of its superclasses might be made into a master class. In this case, the) 180 298.31 T
-0.67 (code would be incorrect;) 180 285.31 P
6 9 Q
-0.61 (G) 290.64 285.31 P
6 10 Q
-0.67 (_aDatum) 297.64 285.31 P
2 F
-0.67 ( would be the displacement from the start) 340.42 285.31 P
-0.74 (of the master group, not from the start of the instance chunk. For this reason,) 180 272.31 P
(it\325) 180 259.31 T
(s a good idea to use Esp directives to make sure that) 188.71 259.31 T
5 F
(GoodbyeClass) 433.75 259.31 T
2 F
( has) 506.71 259.31 T
(no master class. One way to do this is to check that) 180 246.31 T
6 F
(Goodbye_offset) 419.12 246.31 T
2 F
( is) 487.07 246.31 T
(unde\336ned:) 180 233.31 T
4 F
(ifdef) 216 217.31 T
(Goodbye_offset) 252 217.31 T
(.err) 252 203.31 T
(<GoodbyeClass now has a master offset!>) 288 203.31 T
(endif) 216 189.31 T
(mov) 216 172.31 T
(ax, ds:[si].G_aDatum) 252 172.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "76" 16
%%Page: "77" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  77) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(If any class in) 180 641.33 T
5 F
(GoodbyeClass) 247.23 641.33 T
2 F
(\325) 320.19 641.33 T
(s class hierarchy becomes a master class,) 321.86 641.33 T
6 F
(Goodbye_offset) 180 628.33 T
2 F
( will become de\336ned, and this code will generate an error) 247.95 628.33 T
(.) 510.57 628.33 T
0 14 Q
(3.3.2) 130.86 586 T
0 18 Q
(Messages) 180 586 T
2 10 Q
(W) 180 562.33 T
(riting code for objects is much like any other coding. Indeed, almost all) 189.26 562.33 T
2 9 Q
-0.14 (GEOS) 180 549.33 P
2 10 Q
-0.15 ( code is run by one object or another; either it is a message handler \050or) 206.17 549.33 P
6 F
(method) 180 536.33 T
2 F
(\051, or it is a routine which is run by a method, directly or indirectly) 214.07 536.33 T
(.) 516.5 536.33 T
-0.17 (There are a few conventions which apply speci\336cally to methods; other than) 180 523.33 P
(that, methods can be treated just like other routines.) 180 510.33 T
0 14 Q
(3.3.2.1) 119.19 476.67 T
(Handling Messages) 180 476.67 T
2 10 Q
(W) 180 454.33 T
(riting methods \050also known as \322message handlers\323\051 is little different from) 189.26 454.33 T
-0.15 (writing other Esp procedures. This section describes) 180 441.33 P
2 9 Q
-0.13 (GEOS) 423.05 441.33 P
2 10 Q
-0.15 (\325) 449.22 441.33 P
-0.15 (s conventions for) 450.89 441.33 P
-0.09 (handling messages, and how to write methods. \322Sending Messages\323, section) 180 428.33 P
(3.3.2.2 on page 81, describes how to send messages.) 180 415.33 T
-0.08 (A method looks much like any other routine. However) 180 395.33 P
-0.08 (, its \336rst line \050the line) 428.11 395.33 P
(containing the method\325) 180 382.33 T
(s name\051 is slightly different:) 285.75 382.33 T
4 F
(<MethodName>) 216 366.33 T
(method <static|Dynamic> <Class> \134) 324 366.33 T
(<MsgName> [, <MsgName>]*) 324 352.33 T
5 F
(MethodName) 180 331.33 T
2 F
-0.46 (This is the name of the method which will handle the message.) 243 319.33 P
-0.5 (By convention, the method\325) 243 307.33 P
-0.5 (s name is a combination of the class) 366.67 307.33 P
(name and the message name; for example, the) 243 295.33 T
5 F
(HelloT) 243 283.33 T
(riggerClass) 277.19 283.33 T
2 F
( handler for) 336.64 283.33 T
2 9 Q
(MSG_GEN_TRIGGER_SEND_ACTION) 243 271.33 T
2 10 Q
( would be named) 409.67 271.33 T
5 F
(HelloT) 243 259.33 T
(riggerSendAction) 277.19 259.33 T
2 F
(. Nevertheless, you may give a) 369.23 259.33 T
(method any name you could give to a routine.) 243 247.33 T
5 F
(static|dynamic) 180 228.33 T
2 F
(This is one of the reserved words) 243 216.33 T
4 F
(static) 397.45 216.33 T
2 F
( or) 433.45 216.33 T
4 F
(dynamic) 448.45 216.33 T
2 F
(. The) 490.45 216.33 T
-0.59 (difference between static and dynamic methods is discussed on) 243 204.33 P
(page 80.) 243 192.33 T
5 F
(Class) 180 173.33 T
2 F
(This is the class for this method.) 243 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "77" 17
%%Page: "78" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  78) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 10 Q
0 X
(MsgName) 180 641.33 T
2 F
(This is the message which activates this method. A single) 243 641.33 T
(method may handle several different messages. Note that the) 243 629.33 T
(message) 243 617.33 T
2 9 Q
(ID) 284.86 617.33 T
2 10 Q
( is passed to the method in) 295.52 617.33 T
3 F
(ax) 421.85 617.33 T
2 F
(, so a method can) 433.85 617.33 T
(easily determine at run-time which message was sent.) 243 605.33 T
0 12 Q
(Calling Conventions) 180 580 T
2 10 Q
(Every message has its own calling conventions. These conventions specify) 180 558.33 T
(such things as what values are to be passed in the \322argument\323 registers \050or) 180 545.33 T
(on the stack\051, under what circumstances the message should be called, and) 180 532.33 T
-0.59 (what values will be returned \050if the message is \322called\323, as opposed to \322sent\323\051.) 180 519.33 P
(These conventions depend on how the message will be used.) 180 506.33 T
(If you are adding a new message for a class you have de\336ned, you can set) 180 486.33 T
(these conventions as you see \336t. Y) 180 473.33 T
(ou should simply document what the) 336.13 473.33 T
(method\325) 180 460.33 T
(s conventions are, so all code which sends the message will do it) 216.3 460.33 T
(properly) 180 447.33 T
(.) 217.77 447.33 T
(If you are) 180 427.33 T
6 F
(subclassing) 227.22 427.33 T
2 F
( a message \050i.e. writing a new handler for a message) 280.53 427.33 T
(which was de\336ned by one of your object\325) 180 414.33 T
(s superclasses\051, you will have to) 363.53 414.33 T
-0.83 (adhere to existing conventions. Y) 180 401.33 P
-0.83 (ou may also have to call the superclass if you) 328.72 401.33 P
(want the existing behavior to be preserved. Y) 180 388.33 T
(ou can do this by calling) 388.18 388.33 T
5 F
(ObjCallSuperNoLock) 180 375.33 T
2 F
(. This routine is generally called either at the) 290.38 375.33 T
(beginning or at the end of the method.) 180 362.33 T
0 12 Q
(Register Usage) 180 336 T
2 10 Q
-0.65 (Methods are generally called indirectly; that is, a process sends a message by) 180 314.33 P
-0.67 (calling a kernel routine \050as described in \322Sending Messages\323 on page 81\051. and) 180 301.33 P
(the kernel performs necessary bookkeeping, then calls the method. When a) 180 288.33 T
(method is called, certain registers are set up automatically) 180 275.33 T
(. If the recipient) 450.59 275.33 T
(object is not a process object, the registers are set up like this:) 180 262.33 T
3 F
(ds) 180 242.33 T
2 F
(This register contains the segment address of the recipient\325) 243 242.33 T
(s) 516.16 242.33 T
(object block.) 243 230.33 T
3 F
(es) 180 211.33 T
2 F
(This register contains the segment address of the block) 243 211.33 T
(containing the recipient\325) 243 199.33 T
(s class de\336nition.) 355.04 199.33 T
3 F
(si) 180 180.33 T
2 F
-0.35 (This contains the chunk handle of the object. \050T) 243 180.33 P
-0.35 (ogether) 459.29 180.33 P
-0.35 (,) 493.36 180.33 P
3 F
-0.76 (ds:si) 498.57 180.33 P
2 F
(constitute the optr of the recipient object.\051) 243 168.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "78" 18
%%Page: "79" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  79) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(bx) 180 641.33 T
2 F
(This is the offset to the beginning of the instance chunk; that) 243 641.33 T
-0.47 (is,) 243 629.33 P
3 F
-1 (ds:[bx]) 255.88 629.33 P
2 F
-0.47 ( is a pointer to the instance chunk. \050Thus,) 297.88 629.33 P
3 F
-1 (bx) 489.27 629.33 P
2 F
-0.47 ( is the) 501.27 629.33 P
(same as the value pointed to by) 243 617.33 T
3 F
(ds:[si]) 391.37 617.33 T
2 F
(, and) 433.37 617.33 T
3 F
(*ds:[si]) 459.12 617.33 T
2 F
( =) 507.12 617.33 T
3 F
(ds[bx]) 243 605.33 T
2 F
(.) 279 605.33 T
3 F
(di) 180 586.33 T
2 F
-0.46 (If the class\325) 243 586.33 P
-0.46 (s instance data is in a master section,) 294.12 586.33 P
3 F
-1 (di) 466.94 586.33 P
2 F
-0.46 ( will be the) 478.94 586.33 P
(offset from the start of the block to the master section. If the) 243 574.33 T
(class has no master) 243 562.33 T
(,) 332.83 562.33 T
3 F
(di) 338.39 562.33 T
2 F
( will be the offset to the start of the) 350.39 562.33 T
(instance chunk; that is,) 243 550.33 T
3 F
(di) 354.5 550.33 T
2 F
( will be the same as) 366.5 550.33 T
3 F
(bx) 460.24 550.33 T
2 F
(. In either) 472.24 550.33 T
-0.27 (case, you can \336nd instance data \336elds by using a displacement) 243 538.33 P
(from) 243 526.33 T
3 F
(ds:[di]) 267.44 526.33 T
2 F
(.) 309.44 526.33 T
3 F
(ax) 180 507.33 T
2 F
(This is the message number) 243 507.33 T
(. Sometimes a single method will) 371.91 507.33 T
-0.55 (handle several different messages; such a method can examine) 243 495.33 P
3 F
(ax) 243 483.33 T
2 F
( to \336gure out precisely which method was sent.) 255 483.33 T
3 F
(cx) 180 464.33 T
2 F
(,) 192 464.33 T
3 F
(dx) 197.56 464.33 T
2 F
(,) 209.56 464.33 T
3 F
(bp) 215.12 464.33 T
2 F
-0.89 (These registers are passed intact from the message sender) 243 464.33 P
-0.89 (. See,) 505.36 464.33 P
(however) 243 452.33 T
(, \322Passing Arguments On the Stack\323 on page 86.) 280.96 452.33 T
(Note that some of the values passed in the registers are very volatile. For) 180 433.33 T
-0.88 (example, anything that can change the object block can potentially invalidate) 180 420.33 P
3 F
(ds) 180 407.33 T
2 F
( \050since the block itself may be moved\051, as well as) 192 407.33 T
3 F
(bx) 417.42 407.33 T
2 F
( and) 429.42 407.33 T
3 F
(di) 452.39 407.33 T
2 F
( \050since the) 464.39 407.33 T
-0.49 (chunks may be moved around within the block. Note in particular that if you) 180 394.33 P
(send a message to any object in the same block, that can change the) 180 381.33 T
(recipient\325) 180 368.33 T
(s size, thus invalidating these registers \050unless the message is) 222.59 368.33 T
(passed on the queue\051. In these cases, you can recalculate the values for the) 180 355.33 T
(registers with a few simple steps. Most routines which can move an object) 180 342.33 T
(block \050such as) 180 329.33 T
5 F
(ObjMessage) 247.23 329.33 T
2 F
(\051 can be instructed to \336x) 309.07 329.33 T
3 F
(ds) 423.52 329.33 T
2 F
( when necessary) 435.52 329.33 T
(. As) 510.15 329.33 T
-0.12 (to the other registers, you can \336x them by dereferencing the chunk handles,) 180 316.33 P
(like this:) 180 303.33 T
4 F
(; bx and di were invalidated) 216 287.33 T
(mov) 216 273.33 T
(bx, ds:[si]) 252 273.33 T
(; ds:[bx] = instance chunk) 360 273.33 T
(mov) 216 259.33 T
(di, bx) 252 259.33 T
(add) 216 245.33 T
(bx, MyClass_offset) 252 245.33 T
(; or whatever the class) 360 245.33 T
(; offset is named) 360 231.33 T
2 F
-0.38 (This assumes that method\325) 180 210.33 P
-0.38 (s class is in a master group. If this is not the case,) 302.96 210.33 P
(remove the last line.) 180 197.33 T
-0.48 (Any message handler is allowed to destroy) 180 177.33 P
3 F
-1.03 (bx) 376.13 177.33 P
2 F
-0.48 (,) 388.13 177.33 P
3 F
-1.03 (si) 393.21 177.33 P
2 F
-0.48 (,) 405.21 177.33 P
3 F
-1.03 (di) 410.29 177.33 P
2 F
-0.48 (,) 422.29 177.33 P
3 F
-1.03 (ds) 427.38 177.33 P
2 F
-0.48 (, and) 439.38 177.33 P
3 F
-1.03 (es) 464.17 177.33 P
2 F
-0.48 ( \050though) 476.17 177.33 P
3 F
-1.03 (ds) 516.7 177.33 P
2 F
-0.61 (and) 180 164.33 P
3 F
-1.32 (es) 199.58 164.33 P
2 F
-0.61 ( must always contain valid segment addresses, as discussed in section) 211.58 164.33 P
(2.2 of chapter 2\051; if the message was \322sent\323, the kernel will restore these) 180 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "79" 19
%%Page: "80" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  80) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(registers before returning execution to the calling routine. If the message) 180 641.33 T
(was \322called\323,) 180 628.33 T
3 F
(ax) 241.13 628.33 T
2 F
(,) 253.13 628.33 T
3 F
(cx) 258.69 628.33 T
2 F
(,) 270.69 628.33 T
3 F
(dx) 276.25 628.33 T
2 F
(, and) 288.25 628.33 T
3 F
(bp) 314 628.33 T
2 F
( are returned to the sender of the message.) 326 628.33 T
0 12 Q
(Passing Arguments on the Stack) 180 602 T
2 10 Q
(Methods are ordinarily passed their arguments in registers. In some cases,) 180 580.33 T
-0.1 (you may want to pass more data on the stack.) 180 567.33 P
2 9 Q
-0.09 (GEOS) 393.29 567.33 P
2 10 Q
-0.1 ( permits this. A method) 419.46 567.33 P
(should specify whether it expects to be passed data on the stack; it is the) 180 554.33 T
-0.18 (responsibility of whoever sends a message to be sure that the data is passed) 180 541.33 P
(properly) 180 528.33 T
(.) 217.77 528.33 T
(Note that the message sender may use a different stack than the recipient) 180 508.33 T
(does. In this case, the kernel will automatically copy the data to the) 180 495.33 T
-0.25 (recipient\325) 180 482.33 P
-0.25 (s stack. The recipient may not make any assumptions about where) 222.59 482.33 P
(in the stack the data is; it might be far from the top of the stack.) 180 469.33 T
-0.21 (If data is passed on the stack, some of the registers have different meanings:) 180 449.33 P
3 F
(ss:bp) 180 429.33 T
2 F
(This will point to the lowest byte of the data passed on the) 243 429.33 T
(stack. This may be anywhere on the stack; you may not make) 243 417.33 T
(any assumptions about where on the stack the data is.) 243 405.33 T
3 F
(dx) 180 386.33 T
2 F
(This contains the number of bytes passed on the stack.) 243 386.33 T
3 F
(cx) 180 367.33 T
2 F
-0.28 (This is passed through intact from the sender) 243 367.33 P
-0.28 (, just like always.) 451.06 367.33 P
(\050Note that Goc does not support passing arguments both in) 180 348.33 T
3 F
(cx) 455.77 348.33 T
2 F
( and on the) 467.77 348.33 T
-0.73 (stack. Therefore, if the message may be sent from Goc code, you must assume) 180 335.33 P
(that) 180 322.33 T
3 F
(cx) 202.23 322.33 T
2 F
( contains garbage.\051) 214.23 322.33 T
(Esp does not de\336ne variable names for the passed parameters. Y) 180 302.33 T
(ou may) 477.63 302.33 T
(declare these names by hand. Most commonly) 180 289.33 T
(, a structure is passed on the) 390.76 289.33 T
-0.51 (stack; you can then access the \336elds of the structure by using the \336eld names) 180 276.33 P
(as displacements from) 180 263.33 T
3 F
(ss:[bp]) 286.12 263.33 T
2 F
(.) 328.12 263.33 T
0 12 Q
(Static and Dynamic Methods) 180 237 T
2 10 Q
(Most methods are called only by the kernel. Usually) 180 215.33 T
(, you run a method by) 419.48 215.33 T
-0.41 (sending the appropriate message to an appropriate object. This allows) 180 202.33 P
2 9 Q
-0.37 (GEOS) 502.45 202.33 P
2 10 Q
(to arrange the methods however it wishes within a resource. Such methods) 180 189.33 T
(are said to be) 180 176.33 T
6 F
(dynamic) 244.65 176.33 T
2 F
( in nature.) 284.27 176.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "80" 20
%%Page: "81" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  81) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(If you wish, you may declare a method to be) 180 641.33 T
6 F
(static) 385.4 641.33 T
2 F
(. Y) 410.39 641.33 T
(ou may call a static) 421.88 641.33 T
-0.78 (method the same way you call any other routine. However) 180 628.33 P
-0.78 (, the kernel will not) 441.35 628.33 P
-0.38 (set up any registers before or after the method is called. If you make a call to) 180 615.33 P
-0.48 (a static method, the registers will be passed, as-is, to the method, and will be) 180 602.33 P
(returned, as they are, from the method. Y) 180 589.33 T
(ou must therefore set up any) 371.31 589.33 T
-0.68 (registers that need to be passed to the method, and see to it that you preserve) 180 576.33 P
(any important registers that the method destroys.) 180 563.33 T
0 12 Q
(Process Class Messages) 180 537 T
2 10 Q
-0.45 (The application\325) 180 515.33 P
-0.45 (s process object, like any other object, may handle messages.) 253.27 515.33 P
-0.19 (Because the process class is a special kind of object, some of the conventions) 180 502.33 P
-0.63 (are slightly different, In particular) 180 489.33 P
-0.63 (, two of the registers passed have different) 337.12 489.33 P
(values:) 180 476.33 T
3 F
(ds) 180 456.33 T
2 F
(This holds the segment address of the geode\325) 243 456.33 T
(s) 448.39 456.33 T
5 F
(dgroup) 455.8 456.33 T
2 F
(resource.) 243 444.33 T
5 F
(dgroup) 287.62 444.33 T
2 F
( is notionally the \322instance data\323 for the) 325.22 444.33 T
(process object.) 243 432.33 T
3 F
(si) 180 413.33 T
2 F
(This register is passed intact from the message sender to the) 243 413.33 T
(method. Thus, you may use this register for another passed) 243 401.33 T
(parameter) 243 389.33 T
(.) 290.78 389.33 T
(The other registers have the usual values.) 180 370.33 T
0 14 Q
(3.3.2.2) 119.19 336.67 T
(Sending Messages) 180 336.67 T
2 10 Q
(By now you should be very familiar with sending messages to objects.) 180 314.33 T
(However) 180 301.33 T
(, there are enough differences between Esp and Goc in how they) 220.18 301.33 T
(handle messages that a review is appropriate.) 180 288.33 T
(Messages are sent to objects. Every object is run by a thread; that is, the) 180 268.33 T
(object\325) 180 255.33 T
(s methods are executed by that thread and use the thread\325) 208.52 255.33 T
(s stack, as) 477.44 255.33 T
(are the routines called by those messages. Every thread maintains a queue) 180 242.33 T
(of messages which have been sent to that thread\325) 180 229.33 T
(s objects from outside the) 405.96 229.33 T
(thread. If you are running under thread A, and you send a message to an) 180 216.33 T
-0.57 (object which is run by thread B, the message will ordinarily be put at the end) 180 203.33 P
(of thread B\325) 180 190.33 T
(s queue. If you send the message to an object which is run by) 233.52 190.33 T
(thread A, the calling routine will block while the message is handled, after) 180 177.33 T
(which it will resume; again, this behavior can be overridden, forcing the) 180 164.33 T
(message to be put on the queue.) 180 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "81" 21
%%Page: "82" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  82) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(Remember that when an object receives a message, it may be changed; for) 180 641.33 T
-0.41 (example, it might have to build out master sections of its instance data. This) 180 628.33 P
(means that the instance chunk might grow) 180 615.33 T
(, and therefore the object block) 377.99 615.33 T
-0.21 (might be shuf\337ed. The object block might even be moved on the global heap.) 180 602.33 P
-0.24 (If the message is sent via the queue, you needn\325) 180 589.33 P
-0.24 (t worry about this. However) 397.72 589.33 P
-0.24 (,) 525.68 589.33 P
(if the sender blocks until the message is handled\321whether because the) 180 576.33 T
(message is sent within the thread, or because it is sent as a) 180 563.33 T
-0.18 (\322call-and-return\323\321there is a danger that the recipient object block might be) 180 550.33 P
(shuf\337ed or moved while the sender is blocked.) 180 537.33 T
0 14 Q
(3.3.2.3) 119.19 503.67 T
(ObjMessage) 180 503.67 T
4 10 Q
(ObjMessage, MessageFlags) 180 481.33 T
2 F
-0.41 (The basic way of sending a message in Esp is with the routine) 180 461.33 P
5 F
-0.42 (ObjMessage) 464.01 461.33 P
2 F
-0.41 (.) 525.85 461.33 P
(This routine is the counterpart to the Goc commands) 180 448.33 T
5 F
(@call) 427.05 448.33 T
2 F
(,) 453.23 448.33 T
5 F
(@send) 458.79 448.33 T
2 F
(, et al.) 490.52 448.33 T
-0.74 (Y) 180 428.33 P
-0.74 (ou specify the recipient of the message by passing the object\325) 185.93 428.33 P
-0.74 (s optr in) 457.09 428.33 P
3 F
-1.59 (bx:si) 496.18 428.33 P
2 F
-0.74 (.) 526.18 428.33 P
-0.44 (\050If you are sending a message to a process object, you can pass the process) 180 415.33 P
2 9 Q
-0.4 (ID) 518 415.33 P
2 10 Q
-0.47 (in) 180 402.33 P
3 F
-1.01 (bx) 191.57 402.33 P
2 F
-0.47 (; in this case,) 203.57 402.33 P
3 F
-1.01 (si) 265.04 402.33 P
2 F
-0.47 ( is passed intact to the method.\051 Pass the message) 277.04 402.33 P
2 9 Q
-0.42 (ID) 506.45 402.33 P
2 10 Q
-0.47 ( in) 517.12 402.33 P
3 F
-0.9 (ax) 180 389.33 P
2 F
-0.41 (.) 192 389.33 P
3 F
-0.9 (cx) 197.15 389.33 P
2 F
-0.41 (,) 209.15 389.33 P
3 F
-0.9 (dx) 214.29 389.33 P
2 F
-0.41 (, and) 226.29 389.33 P
3 F
-0.9 (bp) 251.21 389.33 P
2 F
-0.41 ( are passed intact to the method; you can use these to pass) 263.21 389.33 P
(arguments to the message.) 180 376.33 T
3 F
-1.4 (di) 180 356.33 P
2 F
-0.65 ( contains a set of) 192 356.33 P
5 F
-0.67 (MessageFlags) 268.96 356.33 P
2 F
-0.65 (. This is a word-sized record that speci\336es) 340.43 356.33 P
(how) 180 343.33 T
5 F
(ObjMessage) 201.67 343.33 T
2 F
( should behave. The record has the following \336elds:) 263.51 343.33 T
2 9 Q
(MF_CALL) 180 323.33 T
2 10 Q
(If this bit is set, the caller will block until the message is) 243 323.33 T
(handled, even if the message is being sent to another thread.) 243 311.33 T
(When) 243 299.33 T
5 F
(ObjMessage) 272.81 299.33 T
2 F
( returns,) 334.65 299.33 T
3 F
(ax) 377.61 299.33 T
2 F
(,) 389.61 299.33 T
3 F
(cx) 395.17 299.33 T
2 F
(,) 407.17 299.33 T
3 F
(dx) 412.73 299.33 T
2 F
(, and) 424.73 299.33 T
3 F
(bp) 450.48 299.33 T
2 F
( will contain) 462.48 299.33 T
(whatever values they had when the method returned.) 243 287.33 T
2 9 Q
(MF_FORCE_QUEUE) 180 268.33 T
2 10 Q
-0.41 (If this bit is set, the message will be sent via the thread\325) 243 256.33 P
-0.41 (s event) 496.26 256.33 P
-0.03 (queue, even if the message is being sent within a thread. This) 243 244.33 P
(bit is incompatible with) 243 232.33 T
2 9 Q
(MF_CALL) 355.07 232.33 T
2 10 Q
(.) 399.07 232.33 T
4 F
(MF_STACK) 180 213.33 T
2 F
-0.41 (If this bit is set, the caller is passing parameters to the method) 243 213.33 P
-0.59 (on the stack.) 243 201.33 P
3 F
-1.27 (ss:bp) 302.92 201.33 P
2 F
-0.59 ( must point to the last argument pushed on) 332.92 201.33 P
-0.09 (the stack, and) 243 189.33 P
3 F
-0.19 (dx) 310.71 189.33 P
2 F
-0.09 ( must contain the number of bytes passed on) 322.71 189.33 P
(the stack. See \322Passing Arguments On the Stack\323 on page 86) 243 177.33 T
(below) 243 165.33 T
(.) 268.57 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "82" 22
%%Page: "83" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  83) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 9 Q
0 X
(MF_RETURN_ERROR) 180 641.33 T
2 10 Q
-0.31 (If this bit is set,) 243 629.33 P
5 F
-0.32 (ObjMessage) 317.22 629.33 P
2 F
-0.31 ( will indicate an error in sending) 379.06 629.33 P
(the message by returning a) 243 617.33 T
5 F
(MessageError) 372.09 617.33 T
2 F
( value in) 444.87 617.33 T
3 F
(di) 487.66 617.33 T
2 F
(; if) 499.66 617.33 T
-0.51 (there is no error) 243 605.33 P
-0.51 (,) 315.7 605.33 P
3 F
-1.11 (di) 320.75 605.33 P
2 F
-0.51 ( will be set to) 332.75 605.33 P
2 9 Q
-0.46 (MESSAGE_NO_ERROR) 394.28 605.33 P
2 10 Q
-0.51 (. If it is) 496.94 605.33 P
(not set,) 243 593.33 T
5 F
(ObjMessage) 279.86 593.33 T
2 F
( will call) 341.7 593.33 T
5 F
(FatalError) 383.57 593.33 T
2 F
( if an error occurs.) 440.06 593.33 T
2 9 Q
(MF_CHECK_DUPLICA) 180 574.33 T
(TE) 280 574.33 T
2 10 Q
-0.74 (This bit may be set only if) 243 562.33 P
2 9 Q
-0.66 (MF_FORCE_QUEUE) 360.47 562.33 P
2 10 Q
-0.74 ( is also set. If this) 451.14 562.33 P
(bit is set,) 243 550.33 T
5 F
(ObjMessage) 288.02 550.33 T
2 F
( will check if there is a matching) 349.86 550.33 T
-0.17 (message on the recipient\325) 243 538.33 P
-0.17 (s message queue \050i.e. a message with) 358.62 538.33 P
(the same message) 243 526.33 T
2 9 Q
(ID) 329.5 526.33 T
2 10 Q
( which is being sent to the same object,) 340.17 526.33 T
-0.04 (though the passed arguments and registers may be different\051.) 243 514.33 P
-0.08 (If it is, this message will be discarded \050unless) 243 502.33 P
2 9 Q
-0.07 (MF_REPLACE) 454.33 502.33 P
2 10 Q
-0.08 ( is) 517.82 502.33 P
-0.17 (also set\051. \050See \322Manipulating Messages on the Queue\323 on page) 243 490.33 P
(89.\051 This bit is incompatible with) 243 478.33 T
2 9 Q
(MF_ST) 398.42 478.33 T
(ACK) 428.6 478.33 T
2 10 Q
(.) 448.6 478.33 T
2 9 Q
(MF_CHECK_LAST_ONL) 180 459.33 T
(Y) 285.68 459.33 T
2 10 Q
-0.87 (This bit modi\336es) 243 447.33 P
2 9 Q
-0.79 (MF_CHECK_DUPLICA) 320.4 447.33 P
-0.79 (TE) 420.39 447.33 P
2 10 Q
-0.87 ( to check only the last) 432.9 447.33 P
(message in the recipient\325) 243 435.33 T
(s queue.) 357.27 435.33 T
2 9 Q
(MF_REPLACE) 180 416.33 T
2 10 Q
(This bit modi\336es) 243 404.33 T
2 9 Q
(MF_CHECK_DUPLICA) 323.02 404.33 T
(TE) 423.02 404.33 T
2 10 Q
( such that if a) 435.52 404.33 T
-0.77 (duplicate message is waiting on the event queue, the one on the) 243 392.33 P
-0.5 (queue will be discarded, and this message will be placed on the) 243 380.33 P
(queue.) 243 368.33 T
2 9 Q
(MF_CUSTOM) 180 349.33 T
2 10 Q
(This bit is reserved for use by the kernel.) 243 349.33 T
2 9 Q
(MF_DISCARD_IF_NO_MA) 180 330.33 T
(TCH) 293.83 330.33 T
2 10 Q
-0.91 (This bit modi\336es) 243 318.33 P
2 9 Q
-0.82 (MF_CHECK_DUPLICA) 320.28 318.33 P
-0.82 (TE) 420.28 318.33 P
2 10 Q
-0.91 ( to discard the passed) 432.78 318.33 P
(message if there) 243 306.33 T
6 F
(isn\325) 321.34 306.33 T
(t) 336.89 306.33 T
2 F
( a matching message on the queue. It) 340.41 306.33 T
(must be passed with) 243 294.33 T
2 9 Q
(MF_CUSTOM) 340.43 294.33 T
2 10 Q
(.) 400.43 294.33 T
2 9 Q
(MF_MA) 180 275.33 T
(TCH_ALL) 213.5 275.33 T
2 10 Q
(This bit is reserved for use by the kernel.) 243 263.33 T
2 9 Q
(MF_INSERT_A) 180 244.33 T
(T_FRONT) 245.17 244.33 T
2 10 Q
-0.77 (If this bit is set and the message is being sent via the queue, the) 243 232.33 P
(message will be put at the head of the event queue \050instead of) 243 220.33 T
-0.29 (the tail\051. This bit may only be set only if) 243 208.33 P
2 9 Q
-0.26 (MF_FORCE_QUEUE) 427.57 208.33 P
2 10 Q
-0.29 ( is) 518.24 208.33 P
(also set.) 243 196.33 T
2 9 Q
(MF_FIXUP_DS) 180 177.33 T
2 10 Q
-0.75 (If this bit is set,) 243 165.33 P
5 F
-0.78 (ObjMessage) 315 165.33 P
2 F
-0.75 ( will \336x) 376.84 165.33 P
3 F
-1.62 (ds) 411.64 165.33 P
2 F
-0.75 ( so it points to the same) 423.64 165.33 P
(block as it did before the call, even if that block moved during) 243 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "83" 23
%%Page: "84" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  84) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(the call.) 243 641.33 T
3 F
(ds) 282.64 641.33 T
2 F
( must point to a memory block the \336rst word of) 294.64 641.33 T
-0.11 (which is the block\325) 243 629.33 P
-0.11 (s global handle \050e.g. an object block or other) 327.13 629.33 P
(LMem heap\051.) 243 617.33 T
2 9 Q
(MF_FIXUP_ES) 180 598.33 T
2 10 Q
-0.29 (If this bit is set,) 243 586.33 P
5 F
-0.29 (ObjMessage) 317.33 586.33 P
2 F
-0.29 ( will \336x) 379.17 586.33 P
3 F
-0.62 (es) 415.36 586.33 P
2 F
-0.29 ( as per) 427.36 586.33 P
2 9 Q
-0.26 (MF_FIXUP_DS) 460.21 586.33 P
2 10 Q
-0.29 (.) 525.73 586.33 P
(Y) 243 574.33 T
(ou must pass) 248.93 574.33 T
2 9 Q
(MF_FIXUP_DS) 312.46 574.33 T
2 10 Q
( along with this \337ag.) 377.97 574.33 T
2 9 Q
(MF_CAN_DISCARD_IF_DESPERA) 180 555.33 T
(TE) 329.5 555.33 T
2 10 Q
(If this bit is set,) 243 543.33 T
5 F
(ObjMessage) 318.76 543.33 T
2 F
( can discard the message if the) 380.6 543.33 T
(system is running out of handles.) 243 531.33 T
2 9 Q
(MF_RECORD) 180 512.33 T
2 10 Q
-0.86 (If this bit is set,) 243 512.33 P
5 F
-0.88 (ObjMessage) 314.48 512.33 P
2 F
-0.86 ( will behave like the) 376.32 512.33 P
5 F
-0.88 (@record) 468 512.33 P
2 F
-0.86 ( Goc) 509.93 512.33 P
(command; that is, it will pack the message into a recorded) 243 500.33 T
(event and return its handle. The message can be dispatched) 243 488.33 T
-0.37 (with) 243 476.33 P
5 F
-0.38 (MessageDispatch) 266.34 476.33 P
2 F
-0.37 (. The only \337ag which can be combined) 356.33 476.33 P
(with) 243 464.33 T
2 9 Q
(MF_RECORD) 266.71 464.33 T
2 10 Q
( is) 325.7 464.33 T
2 9 Q
(MF_ST) 339.05 464.33 T
(ACK) 369.22 464.33 T
2 10 Q
(. \050See \322Recording and) 389.22 464.33 T
(Dispatching Messages\323 on page 88.\051) 243 452.33 T
5 F
-0.33 (ObjMessage) 180 433.33 P
2 F
-0.32 ( may be called with interrupts disabled; however) 241.84 433.33 P
-0.32 (, it will return) 464.11 433.33 P
(with interrupts enabled. The status \337ags will be destroyed. The return) 180 420.33 T
(values for) 180 407.33 T
5 F
(ObjMessage) 228.15 407.33 T
2 F
( depend on the) 289.99 407.33 T
5 F
(MessageFlags) 360.55 407.33 T
2 F
( passed.) 432.02 407.33 T
(If) 180 387.33 T
2 9 Q
(MF_RETURN_ERROR) 190.18 387.33 T
2 10 Q
( is passed,) 286.84 387.33 T
3 F
(di) 337.04 387.33 T
2 F
( will return a member of the) 349.04 387.33 T
5 F
(MessageError) 180 374.33 T
2 F
( enumerated type. The following errors may be returned:) 252.78 374.33 T
2 9 Q
(MESSAGE_NO_ERROR) 180 354.33 T
5 10 Q
(ObjMessage) 243 342.33 T
2 F
( was able to deliver the message properly) 304.84 342.33 T
(. \050This) 494.13 342.33 T
(does not guarantee that the handler was able to handle the) 243 330.33 T
(message without error) 243 318.33 T
(.\051) 346.15 318.33 T
2 9 Q
(MESSAGE_NO_ERROR) 355.04 318.33 T
2 10 Q
( is guaranteed) 457.7 318.33 T
(to be equal to zero.) 243 306.33 T
2 9 Q
(MESSAGE_NO_HANDLES) 180 287.33 T
2 10 Q
(The system was running low on handles, and) 243 275.33 T
2 9 Q
(MF_CAN_DISCARD_IF_DESPERA) 243 263.33 T
(TE) 392.5 263.33 T
2 10 Q
( was passed; accordingly) 405 263.33 T
(,) 517.05 263.33 T
5 F
(ObjMessage) 243 251.33 T
2 F
( discarded this message.) 304.84 251.33 T
(If) 180 232.33 T
2 9 Q
(MF_CALL) 190.18 232.33 T
2 10 Q
( is passed,) 234.18 232.33 T
3 F
(ax) 284.38 232.33 T
2 F
(,) 296.38 232.33 T
3 F
(cx) 301.94 232.33 T
2 F
(,) 313.94 232.33 T
3 F
(dx) 319.5 232.33 T
2 F
(,) 331.5 232.33 T
3 F
(bp) 337.06 232.33 T
2 F
(, and) 349.06 232.33 T
4 F
(CF) 374.81 232.33 T
2 F
( will return whatever values) 386.81 232.33 T
(were left in them by the message handler) 180 219.33 T
(. The other status \337ags will be) 370.58 219.33 T
(destroyed.) 180 206.33 T
-0.05 (If) 180 186.33 P
2 9 Q
-0.05 (MF_CUSTOM) 190.12 186.33 P
2 10 Q
-0.05 ( is passed, the address of the callback routine will be popped) 250.13 186.33 P
(off the stack.) 180 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "84" 24
%%Page: "85" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  85) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(If) 180 641.33 T
2 9 Q
(MF_RECORD) 190.18 641.33 T
2 10 Q
( is passed, the handle of the encapsulated message will be) 249.18 641.33 T
(returned in) 180 628.33 T
3 F
(di) 235.55 628.33 T
2 F
(; all other registers will be unchanged.) 247.55 628.33 T
0 12 Q
(Calling and Sending) 180 602 T
2 10 Q
(In Goc, there is a clear distinction between sending a message and using a) 180 580.33 T
(message as a \322call\323. In Esp, that distinction remains, although the) 180 567.33 T
(boundaries are a little more \337uid.) 180 554.33 T
(When a message is sent with the \337ag) 180 534.33 T
2 9 Q
(MF_CALL) 354.29 534.33 T
2 10 Q
(,) 398.29 534.33 T
5 F
(ObjMessage) 403.85 534.33 T
2 F
( behaves like) 465.69 534.33 T
(the Goc command) 180 521.33 T
5 F
(@call) 265.19 521.33 T
2 F
(. The sending routine halts until the method has) 291.37 521.33 T
(returned. If the message is handled within the same thread, this is almost) 180 508.33 T
(exactly like a routine call-and-return. If, on the other hand, the message is) 180 495.33 T
(sent to another thread, the calling thread immediately blocks, and the) 180 482.33 T
(message is put on the recipient\325) 180 469.33 T
(s queue. When the method returns, the) 325.2 469.33 T
(caller) 180 456.33 T
(\325) 206.29 456.33 T
(s execution resumes. In either case, as soon as) 207.96 456.33 T
5 F
(ObjMessage) 424.46 456.33 T
2 F
( returns,) 486.3 456.33 T
-0.48 (you may assume that the message has been handled \050if there is a handler for) 180 443.33 P
(that message\051.) 180 430.33 T
(If a message is sent with) 180 410.33 T
2 9 Q
(MF_CALL) 297.06 410.33 T
2 10 Q
(, the method may return values.When) 341.06 410.33 T
5 F
-0.17 (ObjMessage) 180 397.33 P
2 F
-0.17 ( returns,) 241.84 397.33 P
3 F
-0.37 (ax) 284.46 397.33 P
2 F
-0.17 (,) 296.46 397.33 P
3 F
-0.37 (cx) 301.85 397.33 P
2 F
-0.17 (,) 313.85 397.33 P
3 F
-0.37 (dx) 319.24 397.33 P
2 F
-0.17 (, and) 331.24 397.33 P
3 F
-0.37 (bp) 356.65 397.33 P
2 F
-0.17 ( will contain whatever values were) 368.65 397.33 P
(in them when the method returned.) 180 384.33 T
4 F
(CF) 347.97 384.33 T
2 F
( will likewise be returned from the) 359.97 384.33 T
-0.28 (method. Note that when the method is called, it is passed) 180 371.33 P
3 F
-0.6 (ax) 444.75 371.33 P
2 F
-0.28 (,) 456.75 371.33 P
3 F
-0.6 (cx) 462.03 371.33 P
2 F
-0.28 (,) 474.03 371.33 P
3 F
-0.6 (dx) 479.31 371.33 P
2 F
-0.28 (, and) 491.31 371.33 P
3 F
-0.6 (bp) 516.5 371.33 P
2 F
(exactly as they were passed to) 180 358.33 T
5 F
(ObjMessage) 322.43 358.33 T
2 F
(; therefore, if the method does) 384.27 358.33 T
-0.21 (not change these registers, they will be returned intact. \050The case is slightly) 180 345.33 P
(different for) 180 332.33 T
3 F
(bp) 238.32 332.33 T
2 F
( if arguments were passed on the stack; see \322Passing) 250.32 332.33 T
(Arguments On the Stack\323 on page 86\051.) 180 319.33 T
(If a message is sent with) 180 299.33 T
2 9 Q
(MF_FORCE_QUEUE) 297.06 299.33 T
2 10 Q
(, the sender does not block) 387.73 299.33 T
(immediately) 180 286.33 T
(. Instead,) 236.68 286.33 T
5 F
(ObjMessage) 282.8 286.33 T
2 F
( sets up an event structure for the) 344.64 286.33 T
-0.77 (message and puts it on the recipient thread\325) 180 273.33 P
-0.77 (s event queue;) 377.43 273.33 P
5 F
-0.79 (ObjMessage) 444.02 273.33 P
2 F
-0.77 ( then) 505.86 273.33 P
(returns. At some unspeci\336ed time in the future, the recipient thread will) 180 260.33 T
(handle the message.) 180 247.33 T
5 F
(ObjMessage) 276.87 247.33 T
2 F
( will not change any registers.) 338.71 247.33 T
(If neither) 180 227.33 T
2 9 Q
(MF_CALL) 226.66 227.33 T
2 10 Q
( nor) 270.66 227.33 T
2 9 Q
(MF_FORCE_QUEUE) 291.77 227.33 T
2 10 Q
( is passed, the message may or) 382.44 227.33 T
-0.54 (may not go by the queue. If the message is sent within the thread, the sender) 180 214.33 P
(will block and the message will be handled immediately) 180 201.33 T
(, bypassing the) 436.92 201.33 T
(queue. In this respect, the message is handled much as if) 180 188.33 T
2 9 Q
(MF_CALL) 446.51 188.33 T
2 10 Q
( were) 490.51 188.33 T
(passed; however) 180 175.33 T
(, no values are returned, and all registers remain) 254.82 175.33 T
(unchanged. If the message is sent to another thread, it is added to the) 180 162.33 T
(recipient\325) 180 149.33 T
(s event queue, exactly as if) 222.59 149.33 T
2 9 Q
(MF_FORCE_QUEUE) 349.28 149.33 T
2 10 Q
( were passed.) 439.95 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "85" 25
%%Page: "86" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  86) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.85 (As noted above, whenever an object handles a message, the object\325) 180 641.33 P
-0.85 (s block may) 476.69 641.33 P
-0.09 (be compacted or moved. This would invalidate any segment pointers to that) 180 628.33 P
(block. This can be a problem if the message is sent within a thread, as the) 180 615.33 T
(sender may have the same object block locked down. Y) 180 602.33 T
(ou can instruct) 430.41 602.33 T
5 F
-0.02 (ObjMessage) 180 589.33 P
2 F
-0.02 ( to automatically \336x) 241.84 589.33 P
3 F
-0.05 (ds) 336.96 589.33 P
2 F
-0.02 ( so it points to the same block after the) 348.96 589.33 P
-0.06 (call as it did before. T) 180 576.33 P
-0.06 (o do this, pass the \337ag) 278.61 576.33 P
2 9 Q
-0.05 (MF_FIXUP_DS) 383.82 576.33 P
2 10 Q
-0.06 ( to) 449.33 576.33 P
5 F
-0.06 (ObjMessage) 463.66 576.33 P
2 F
-0.06 (.) 525.5 576.33 P
-0.01 (Y) 180 563.33 P
-0.01 (ou may pass this) 185.93 563.33 P
6 F
-0.01 (only) 266.29 563.33 P
2 F
-0.01 ( if) 285.73 563.33 P
3 F
-0.02 (ds) 297.75 563.33 P
2 F
-0.01 ( points to a block whose \336rst word is the block\325) 309.75 563.33 P
-0.01 (s) 523.6 563.33 P
(global handle \050i.e.) 180 550.33 T
3 F
(ds[0]) 264.84 550.33 T
2 F
( is the block\325) 294.84 550.33 T
(s global handle\051. This is true of all) 351.71 550.33 T
-0.76 (LMem blocks \050including object blocks\051. If you pass) 180 537.33 P
2 9 Q
-0.69 (MF_FIXUP_DS) 407.63 537.33 P
2 10 Q
-0.76 ( and) 473.14 537.33 P
3 F
-1.64 (ds) 494.59 537.33 P
2 F
-0.76 ( does) 506.59 537.33 P
(not point to an appropriate block, the behavior is unde\336ned.) 180 524.33 T
(If you pass) 180 504.33 T
2 9 Q
(MF_FIXUP_DS) 232.78 504.33 T
2 10 Q
(, you may also pass) 298.29 504.33 T
2 9 Q
(MF_FIXUP_ES) 390.17 504.33 T
2 10 Q
(. This instructs) 455.18 504.33 T
5 F
(ObjMessage) 180 491.33 T
2 F
( to \336x) 241.84 491.33 T
3 F
(es) 270.55 491.33 T
2 F
( as well as) 282.55 491.33 T
3 F
(ds) 333.13 491.33 T
2 F
(. Both) 345.13 491.33 T
3 F
(ds) 375.69 491.33 T
2 F
( and) 387.69 491.33 T
3 F
(es) 410.66 491.33 T
2 F
( must point to blocks) 422.66 491.33 T
-0.62 (which start with the block\325) 180 478.33 P
-0.62 (s global handle \050e.g. LMem heaps, including object) 300.34 478.33 P
(blocks and) 180 465.33 T
2 9 Q
(DB) 231.68 465.33 T
2 10 Q
( item blocks\051; they need not point to the same block.) 245.18 465.33 T
(Note that you cannot \336x) 180 445.33 T
3 F
(es) 294.46 445.33 T
2 F
( without also \336xing) 306.46 445.33 T
3 F
(ds) 397.96 445.33 T
2 F
(. If you want to \336x) 409.96 445.33 T
3 F
(es) 497.01 445.33 T
2 F
( but) 509.01 445.33 T
(not) 180 432.33 T
3 F
(ds) 197.78 432.33 T
2 F
( \050e.g. if) 209.78 432.33 T
3 F
(ds) 243.86 432.33 T
2 F
( does not point to an LMem heap\051, you should use the) 255.86 432.33 T
4 F
(segxchg) 180 419.33 T
2 F
( macro to swap) 222 419.33 T
3 F
(ds) 294.05 419.33 T
2 F
( and) 306.05 419.33 T
3 F
(es) 329.02 419.33 T
2 F
(, then call) 341.02 419.33 T
5 F
(ObjMessage) 389.55 419.33 T
2 F
( with) 451.39 419.33 T
2 9 Q
(MF_FIXUP_DS) 180 406.33 T
2 10 Q
(, then use) 245.51 406.33 T
4 F
(segxchg) 293.48 406.33 T
2 F
( again.) 335.48 406.33 T
0 12 Q
(Passing Arguments On the Stack) 180 380 T
2 10 Q
-0.41 (Messages can pass up to three words of data in registers \050in) 180 358.33 P
3 F
-0.88 (cx) 453.67 358.33 P
2 F
-0.41 (,) 465.67 358.33 P
3 F
-0.88 (dx) 470.83 358.33 P
2 F
-0.41 (, and) 482.83 358.33 P
3 F
-0.88 ( bp) 505.39 358.33 P
2 F
-0.41 (\051.) 522.52 358.33 P
-0.39 (This is enough for most messages. However) 180 345.33 P
-0.39 (, some may need to pass more. In) 378.2 345.33 P
(this case, the message can pass arguments on the stack.) 180 332.33 T
5 F
-0.57 (ObjMessage) 180 312.33 P
2 F
-0.55 ( requires that all arguments passed on the stack be contiguous,) 241.84 312.33 P
(but they need not be at the top of the stack. If you pass arguments on the) 180 299.33 T
(stack, you must set) 180 286.33 T
3 F
(ss:[bp]) 271.87 286.33 T
2 F
( to point to the last argument pushed on the) 313.87 286.33 T
(stack, and) 180 273.33 T
3 F
(dx) 230.2 273.33 T
2 F
( must contain the total size of those arguments, in bytes. \050) 242.2 273.33 T
3 F
(cx) 510.2 273.33 T
2 F
(may be used to pass an additional argument to the method.\051) 180 260.33 T
(If the message is not sent via the queue \050i.e. the message is sent within one) 180 240.33 T
(thread, and is not sent with) 180 227.33 T
2 9 Q
(MF_FORCE_QUEUE) 310.95 227.33 T
2 10 Q
(\051, the arguments are left) 401.62 227.33 T
(where they are on the stack, and) 180 214.33 T
3 F
(ss:[bp]) 333.91 214.33 T
2 F
( is passed through to the method) 375.91 214.33 T
(unchanged \050as are) 180 201.33 T
3 F
(cx) 267.41 201.33 T
2 F
( and) 279.41 201.33 T
3 F
(dx) 302.38 201.33 T
2 F
(\051. However) 314.38 201.33 T
(, the arguments might not be) 363.45 201.33 T
-0.14 (anywhere near the top of the stack; for example, kernel routines may set up) 180 188.33 P
(stack frames before the method is called. Thus, the method can access the) 180 175.33 T
(arguments with effective addresses, but not by popping them off the stack.) 180 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "86" 26
%%Page: "87" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  87) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.69 (If the message is sent via the queue, the kernel copies all the arguments from) 180 641.33 P
-0.82 (the stack into the messages event structure, then places that structure on the) 180 628.33 P
-0.02 (queue. When the message comes to the head of the queue, the kernel copies) 180 615.33 P
-0.17 (all the arguments onto the recipient\325) 180 602.33 P
-0.17 (s stack, setting) 347.52 602.33 P
3 F
-0.36 (ss:[bp]) 419.26 602.33 P
2 F
-0.17 ( to point to the) 461.26 602.33 P
-0.02 (last argument pushed, as before. \050Note that this means) 180 589.33 P
3 F
-0.05 (bp) 437.61 589.33 P
2 F
-0.02 ( may be different) 449.61 589.33 P
(when the method is called then it was when the message was sent.\051) 180 576.33 T
3 F
(cx) 494.5 576.33 T
2 F
( and) 506.5 576.33 T
3 F
(dx) 180 563.33 T
2 F
( will be left unchanged.) 192 563.33 T
-0.03 (When) 180 543.33 P
5 F
-0.03 (ObjMessage) 209.78 543.33 P
2 F
-0.03 ( returns, it leaves the stack unchanged. This is useful if) 271.62 543.33 P
(the sender will be passing the same arguments on the stack to several) 180 530.33 T
(different methods.) 180 517.33 T
-0.56 (Note that when a message is sent to another thread,) 180 497.33 P
3 F
-1.22 (bp) 419.22 497.33 P
2 F
-0.56 ( might change during) 431.22 497.33 P
(the send. When the sender calls) 180 484.33 T
5 F
(ObjMessage) 329.82 484.33 T
2 F
(,) 391.66 484.33 T
3 F
(bp) 397.22 484.33 T
2 F
( is an offset into the) 409.22 484.33 T
6 F
(sender) 180 471.33 T
(\325) 210.53 471.33 T
(s) 212.2 471.33 T
2 F
( stack; when the method is called,) 216.64 471.33 T
3 F
(bp) 375.56 471.33 T
2 F
( is an offset into the) 387.56 471.33 T
6 F
(recipient\325) 482.02 471.33 T
(s) 523.48 471.33 T
2 F
(stack. This is different from usual messaging behavior; when) 180 458.33 T
2 9 Q
(MF_ST) 464.48 458.33 T
(ACK) 494.66 458.33 T
2 10 Q
( is) 514.66 458.33 T
(not passed,) 180 445.33 T
3 F
(bp) 234.64 445.33 T
2 F
( is always passed to the method unchanged. This presents a) 246.64 445.33 T
(problem when a message is sent across threads with both) 180 432.33 T
2 9 Q
(MF_CALL) 448.19 432.33 T
2 10 Q
( and) 492.19 432.33 T
2 9 Q
-0.37 (MF_ST) 180 419.33 P
-0.37 (ACK) 210.18 419.33 P
2 10 Q
-0.41 (. Ordinarily) 230.18 419.33 P
-0.41 (, when) 283.11 419.33 P
2 9 Q
-0.37 (MF_CALL) 315.63 419.33 P
2 10 Q
-0.41 ( is passed,) 359.64 419.33 P
3 F
-0.88 (bp) 408.61 419.33 P
2 F
-0.41 ( is passed unchanged to) 420.61 419.33 P
-0.83 (the method, and when the methods returns, the) 180 406.33 P
3 F
-1.79 (bp) 397.1 406.33 P
2 F
-0.83 ( is likewise returned to the) 409.1 406.33 P
-0.36 (caller) 180 393.33 P
-0.36 (. If the method doesn\325) 205 393.33 P
-0.36 (t want to return a value in) 302.85 393.33 P
3 F
-0.77 (bp) 425.94 393.33 P
2 F
-0.36 (, it can simply leave) 437.94 393.33 P
3 F
-0.87 (bp) 180 380.33 P
2 F
-0.4 ( unchanged, and the original value will be returned to the caller) 192 380.33 P
-0.4 (. If, on the) 482.42 380.33 P
(other hand, values are passed on the stack, the method may be passed a) 180 367.33 T
(different) 180 354.33 T
3 F
(bp) 222.77 354.33 T
2 F
( then the one passed by the sender) 234.77 354.33 T
(. In this case, if the method) 393.86 354.33 T
-0.36 (changes) 180 341.33 P
3 F
-0.79 (bp) 219.64 341.33 P
2 F
-0.36 (, the kernel will assume that) 231.64 341.33 P
3 F
-0.79 (bp) 365.04 341.33 P
2 F
-0.36 ( contains a return value, and will) 377.04 341.33 P
-0.56 (return that value to the sender) 180 328.33 P
-0.56 (. If, on the other hand, the method returns the) 319.78 328.33 P
-0.31 (same value of) 180 315.33 P
3 F
-0.66 (bp) 245.02 315.33 P
2 F
-0.31 ( that it was passed, the kernel will assume that the method) 257.02 315.33 P
(did not intend to return a value in) 180 302.33 T
3 F
(bp) 340.76 302.33 T
2 F
(. In this case, it will restore) 352.76 302.33 T
3 F
(bp) 482.04 302.33 T
2 F
( to the) 494.04 302.33 T
(value the sender had in it, i.e. the offset to the passed arguments on the) 180 289.33 T
(sender) 180 276.33 T
(\325) 211.47 276.33 T
(s stack.) 213.14 276.33 T
3 F
(ax) 250.56 276.33 T
2 F
(,) 262.56 276.33 T
3 F
(cx) 268.12 276.33 T
2 F
(, and) 280.12 276.33 T
3 F
(dx) 305.87 276.33 T
2 F
( are returned exactly as if) 317.87 276.33 T
2 9 Q
(MF_ST) 439.73 276.33 T
(ACK) 469.91 276.33 T
2 10 Q
( had not) 489.9 276.33 T
(been passed.) 180 263.33 T
-0.84 (For example, suppose) 180 243.33 P
5 F
-0.87 (HelloProc) 280.27 243.33 P
2 F
-0.84 ( sends a message to) 332.31 243.33 P
5 F
-0.87 (GoodByeT) 421.64 243.33 P
-0.87 (rigger) 475.09 243.33 P
2 F
-0.84 ( \050run) 507.13 243.33 P
(by a different thread\051, passing arguments on the stack, and using the) 180 230.33 T
2 9 Q
-0.41 (MF_CALL) 180 217.33 P
2 10 Q
-0.46 ( \337ag. When) 224 217.33 P
5 F
-0.47 (HelloProc) 277.82 217.33 P
2 F
-0.46 ( calls) 329.86 217.33 P
5 F
-0.47 (ObjMessage) 355.44 217.33 P
2 F
-0.46 (,) 417.28 217.33 P
3 F
-0.99 (bp) 422.38 217.33 P
2 F
-0.46 ( contains an offset in) 434.38 217.33 P
5 F
(HelloProc) 180 204.33 T
2 F
(\325) 232.04 204.33 T
(s stack \050perhaps) 233.71 204.33 T
4 F
(0x0100) 311.68 204.33 T
2 F
(\051.) 347.68 204.33 T
5 F
(ObjMessage) 356.57 204.33 T
2 F
( copies the arguments) 418.41 204.33 T
(onto) 180 191.33 T
5 F
(GoodbyeT) 202.78 191.33 T
(rigger) 254.93 191.33 T
2 F
(\325) 287.52 191.33 T
(s stack and sets) 289.19 191.33 T
3 F
(bp) 364.95 191.33 T
2 F
( appropriately \050perhaps to) 376.95 191.33 T
4 F
-1.84 (0x005b) 180 178.33 P
2 F
-0.85 (\051. It then calls the appropriate method. When the method returns, the) 216 178.33 P
-0.76 (kernel examines the contents of) 180 165.33 P
3 F
-1.65 (bp) 325.83 165.33 P
2 F
-0.76 (. If) 337.83 165.33 P
3 F
-1.65 (bp) 352.04 165.33 P
2 F
-0.76 ( is still set to) 364.04 165.33 P
4 F
-1.65 (0x005b) 422.29 165.33 P
2 F
-0.76 (, the kernel will) 458.29 165.33 P
(assume that no value is being returned there. It will therefore change) 180 152.33 T
3 F
(bp) 504.84 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "87" 27
%%Page: "88" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  88) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(back to) 180 641.33 T
4 F
(0x0100) 215.94 641.33 T
2 F
( before restarting) 251.94 641.33 T
5 F
(HelloProc) 335.09 641.33 T
2 F
(. If, on the other hand, it \336nds) 387.13 641.33 T
-0.04 (that) 180 628.33 P
3 F
-0.09 (bp) 202.19 628.33 P
2 F
-0.04 ( has been changed \050perhaps to) 214.19 628.33 P
4 F
-0.09 (0x0060) 356.34 628.33 P
2 F
-0.04 (\051, the kernel will assume that) 392.34 628.33 P
3 F
-1.38 (bp) 180 615.33 P
2 F
-0.64 ( contains a return value, and will propagate that value to) 192 615.33 P
5 F
-0.66 (HelloProc) 452.45 615.33 P
2 F
-0.64 (; that) 504.48 615.33 P
(is, when) 180 602.33 T
5 F
(ObjMessage) 221.12 602.33 T
2 F
( returns,) 282.96 602.33 T
3 F
(bp) 325.92 602.33 T
2 F
( will have its new value \050in this case,) 337.92 602.33 T
4 F
(0x0060) 180 589.33 T
2 F
(\051.) 216 589.33 T
0 12 Q
(Recording and Dispatching Messages) 180 563 T
4 10 Q
-1 (MessageDispatch, MessageSetDestination, ObjGetMessageInfo,) 180 541.33 P
(ObjFreeMessage) 180 528.33 T
2 F
-0.23 (Y) 180 508.33 P
-0.23 (ou can use) 185.93 508.33 P
5 F
-0.23 (ObjMessage) 236.55 508.33 P
2 F
-0.23 ( to encapsulate a message for later delivery \050much) 298.39 508.33 P
(like the) 180 495.33 T
5 F
(@record) 217.79 495.33 T
2 F
( command in Goc\051. T) 259.72 495.33 T
(o do this, call) 353.81 495.33 T
5 F
(ObjMessage) 417.53 495.33 T
2 F
( with the) 479.37 495.33 T
(\337ag) 180 482.33 T
2 9 Q
(MF_RECORD) 199.82 482.33 T
2 10 Q
(.) 258.82 482.33 T
5 F
(ObjMessage) 264.38 482.33 T
2 F
( will set up an event structure for the) 326.21 482.33 T
(message, recording the values of all the appropriate registers; if arguments) 180 469.33 T
(are passed on the stack, those arguments will be recorded as well.) 180 456.33 T
5 F
(ObjMessage) 180 443.33 T
2 F
( will return the handle of the recorded message. Y) 241.84 443.33 T
(ou can now) 471.67 443.33 T
-0.13 (change the registers or pop arguments off the stack; all the values will have) 180 430.33 P
(been stored in the recorded message. If you record a message, the only \337ag) 180 417.33 T
(which you may pass to) 180 404.33 T
5 F
(ObjMessage) 287.24 404.33 T
2 F
( \050besides) 349.08 404.33 T
2 9 Q
(MF_RECORD) 391.68 404.33 T
2 10 Q
(\051 is) 450.67 404.33 T
2 9 Q
(MF_ST) 467.35 404.33 T
(ACK) 497.52 404.33 T
2 10 Q
(.) 517.52 404.33 T
(T) 180 384.33 T
(o send an encapsulated message, call) 185.75 384.33 T
5 F
(MessageDispatch) 359.67 384.33 T
2 F
(. This message is) 449.66 384.33 T
-0.35 (passed two arguments. The handle of the encapsulated message is passed in) 180 371.33 P
3 F
(bx) 180 358.33 T
2 F
(. A word of) 192 358.33 T
5 F
(MessageFlags) 244.41 358.33 T
2 F
( is passed in) 315.88 358.33 T
3 F
(di) 375.34 358.33 T
2 F
(. The) 387.34 358.33 T
5 F
(MessageFlags) 413.46 358.33 T
2 F
( have the) 484.93 358.33 T
(same meaning as they do for) 180 345.33 T
5 F
(ObjMessage) 315.02 345.33 T
2 F
(, with one exception: If) 376.86 345.33 T
2 9 Q
-0.6 (MF_RECORD) 180 332.33 P
2 10 Q
-0.67 ( is passed to) 238.99 332.33 P
5 F
-0.69 (MessageDispatch) 295.42 332.33 P
2 F
-0.67 (, the encapsulated message will) 385.41 332.33 P
(be preserved intact, so it can be dispatched again; if this \337ag is not set, the) 180 319.33 T
(encapsulated message will be destroyed, and the handle will be freed.) 180 306.33 T
(If you pass the \337ag) 180 286.33 T
2 9 Q
(MF_CALL) 270.38 286.33 T
2 10 Q
( to) 314.38 286.33 T
5 F
(MessageDispatch) 328.83 286.33 T
2 F
(, the sender will block) 418.82 286.33 T
-0.13 (until the message is handled, and values will be returned in) 180 273.33 P
3 F
-0.28 (ax) 458.64 273.33 P
2 F
-0.13 (,) 470.64 273.33 P
3 F
-0.28 (cx) 476.07 273.33 P
2 F
-0.13 (,) 488.07 273.33 P
3 F
-0.28 (dx) 493.51 273.33 P
2 F
-0.13 (, and) 505.51 273.33 P
3 F
(bp) 180 260.33 T
2 F
( \050just as with) 192 260.33 T
5 F
(ObjMessage) 255.16 260.33 T
2 F
(\051. Note that when the method is called, these) 317 260.33 T
(registers will be set with the values stored in the encapsulated message;) 180 247.33 T
-0.65 (thus, even if the method doesn\325) 180 234.33 P
-0.65 (t change these registers, they will end up with) 320.12 234.33 P
-0.52 (different values then when) 180 221.33 P
5 F
-0.54 (MessageDispatch) 304.96 221.33 P
2 F
-0.52 ( was called. If you do not pass) 394.95 221.33 P
2 9 Q
(MF_CALL) 180 208.33 T
2 10 Q
(, all registers will be preserved intact, as always.) 224 208.33 T
(When you encapsulate a message, the destination is stored in the recorded) 180 188.33 T
(message. If you wish to change the destination, you can call) 180 175.33 T
5 F
-0.14 (MessageSetDestination) 180 162.33 P
2 F
-0.14 (. This routine is passed two arguments. Y) 301.09 162.33 P
-0.14 (ou must) 491.08 162.33 P
(pass the handle of the encapsulated message in) 180 149.33 T
3 F
(bx) 402.07 149.33 T
2 F
(, and the optr of the) 414.07 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "88" 28
%%Page: "89" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  89) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(argument in) 180 641.33 T
3 F
(cx:si) 240.19 641.33 T
2 F
(. The destination of the encapsulated message will be) 270.19 641.33 T
(changed accordingly; the old destination will be lost.) 180 628.33 T
(T) 180 608.33 T
(o \336nd out information about an encapsulated message, call) 185.75 608.33 T
5 F
-0.55 (ObjGetMessageInfo) 180 595.33 P
2 F
-0.53 (. This routine is passed the handle of the encapsulated) 281.46 595.33 P
(message. It returns three values:) 180 582.33 T
3 F
(ax) 180 562.33 T
2 F
(The message) 243 562.33 T
2 9 Q
(ID) 305.42 562.33 T
2 10 Q
(.) 316.08 562.33 T
3 F
(cx:si) 180 543.33 T
2 F
(The optr of the destination object.) 243 543.33 T
4 F
(CF) 180 524.33 T
2 F
(This \337ag is set if the message has arguments on the stack;) 243 524.33 T
(otherwise it is cleared.) 243 512.33 T
(When you are done with an encapsulated message, you should free it. Y) 180 493.33 T
(ou) 509.85 493.33 T
(will ordinarily do this by dispatching it without the) 180 480.33 T
2 9 Q
(MF_RECORD) 419.67 480.33 T
2 10 Q
( \337ag;) 478.67 480.33 T
5 F
-0.06 (MessageDispatch) 180 467.33 P
2 F
-0.06 ( will automatically free the event after sending it. If you) 269.99 467.33 P
(wish to free an encapsulated message without sending it, call) 180 454.33 T
5 F
-0.34 (ObjFreeMessage) 180 441.33 P
2 F
-0.33 (. This routine is passed the handle of the message \050in) 265.73 441.33 P
3 F
-0.72 (bx) 510.44 441.33 P
2 F
-0.33 (\051;) 522.44 441.33 P
(it does not change any registers.) 180 428.33 T
0 12 Q
(Manipulating Messages on the Queue) 180 402 T
2 10 Q
-0.47 (When you send a message via the queue, you can\325) 180 380.33 P
-0.47 (t be sure how long it will be) 404.53 380.33 P
-0.51 (before the message is handled. This can lead to unnecessary duplication. For) 180 367.33 P
-0.15 (example, suppose you change a V) 180 354.33 P
-0.15 (is object twice in succession. After the \336rst) 332.92 354.33 P
(change, you send it a) 180 341.33 T
2 9 Q
(MSG_VIS_INV) 279.83 341.33 T
(ALIDA) 342.33 341.33 T
(TE) 371.49 341.33 T
2 10 Q
(, which goes on the object\325) 384 341.33 T
(s) 502.9 341.33 T
(queue. After you make the second change, you send another) 180 328.33 T
2 9 Q
(MSG_VIS_INV) 180 315.33 T
(ALIDA) 242.5 315.33 T
(TE) 271.67 315.33 T
2 10 Q
(, which also goes on the queue. If the \336rst) 284.17 315.33 T
2 9 Q
(MSG_VIS_INV) 180 302.33 T
(ALIDA) 242.5 302.33 T
(TE) 271.67 302.33 T
2 10 Q
( has not yet been processed, then the object will be) 284.17 302.33 T
-0.62 (invalidated twice in a row) 180 289.33 P
-0.62 (, even though there was no change between the two) 296.44 289.33 P
(invalidations; that is, the second invalidation is a waste of time.) 180 276.33 T
(T) 180 256.33 T
(o avoid situations like this, you can send a message with the \337ag) 185.75 256.33 T
2 9 Q
(MF_CHECK_DUPLICA) 180 243.33 T
(TE) 280 243.33 T
2 10 Q
(. \050This \337ag must be accompanied by) 292.5 243.33 T
2 9 Q
-0.27 (MF_FORCE_QUEUE) 180 230.33 P
2 10 Q
-0.3 (.\051 If you send this, the messager will check to see if there) 270.67 230.33 P
(is another similar message waiting on that thread\325) 180 217.33 T
(s queue. \050A message is) 413.38 217.33 T
-0.41 (considered \322similar\323 if it has the same message) 180 204.33 P
2 9 Q
-0.37 (ID) 396.97 204.33 P
2 10 Q
-0.41 ( and the same destination,) 407.63 204.33 P
-0.04 (even if the passed arguments are different.\051 If such a message is waiting on) 180 191.33 P
-0.6 (the queue, then the new message will be discarded; it will not be added to the) 180 178.33 P
(queue.) 180 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "89" 29
%%Page: "90" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  90) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.17 (Y) 180 641.33 P
-0.17 (ou can modify this behavior by passing) 185.93 641.33 P
2 9 Q
-0.15 (MF_REPLACE) 367.01 641.33 P
2 10 Q
-0.17 (. If you pass this \337ag,) 430.5 641.33 P
-0.2 (the latter message will supercede an existing message on the queue; that is,) 180 628.33 P
(the pre-existing message will be discarded, and the new one will take its) 180 615.33 T
-0.26 (place in the queue. \050The only difference between the two messages will be in) 180 602.33 P
(the arguments passed.\051) 180 589.33 T
(Another way to change the behavior of) 180 569.33 T
2 9 Q
(MF_CHECK_DUPLICA) 360.94 569.33 T
(TE) 460.94 569.33 T
2 10 Q
( is to pass) 473.44 569.33 T
2 9 Q
(MF_DISCARD_IF_NO_MA) 180 556.33 T
(TCH) 293.83 556.33 T
2 10 Q
(. If this \337ag is passed, the kernel will discard) 313.83 556.33 T
-0.58 (the message if there is no matching event on the queue. This \337ag is generally) 180 543.33 P
(accompanied by) 180 530.33 T
2 9 Q
(MF_REPLACE) 256.12 530.33 T
2 10 Q
(; in this case, the message will replace an) 319.61 530.33 T
(existing message on the queue, but will be discarded if no such message) 180 517.33 T
(exists. \050Note that if) 180 504.33 T
2 9 Q
(MF_CHECK_DUPLICA) 271.87 504.33 T
(TE) 371.87 504.33 T
2 10 Q
( and) 384.37 504.33 T
2 9 Q
-0.56 (MF_DISCARD_IF_NO_MA) 180 491.33 P
-0.56 (TCH) 293.83 491.33 P
2 10 Q
-0.62 ( is passed but) 313.83 491.33 P
2 9 Q
-0.56 (MF_REPLACE) 377.09 491.33 P
2 10 Q
-0.62 ( is not, the message) 440.58 491.33 P
(will always be discarded.\051) 180 478.33 T
0 14 Q
(3.3.2.4) 119.19 444.67 T
(Other W) 180 444.67 T
(ays of Sending Messages) 233.93 444.67 T
4 10 Q
(ObjCallInstanceNoLock, ObjcallInstanceNoLockES,) 180 422.33 T
(ObjCallSuperNoLock) 180 409.33 T
5 F
(ObjMessage) 180 389.33 T
2 F
( is a general-purpose routine for sending messages. It makes) 241.84 389.33 T
(very few assumptions about the recipient; in particular) 180 376.33 T
(, it does not assume) 433.91 376.33 T
(that the recipient\325) 180 363.33 T
(s data is locked in memory) 262.6 363.33 T
(.) 384.66 363.33 T
2 9 Q
(GEOS) 390.22 363.33 T
2 10 Q
( also provides some) 416.39 363.33 T
(special-purpose routines for sending messages. These routines are faster) 180 350.33 T
(,) 514.45 350.33 T
(though they may only be used in certain circumstances. \050If they are used) 180 337.33 T
(improperly) 180 324.33 T
(, behavior is unde\336ned.\051) 229.81 324.33 T
-0.58 (Objects may often need to send messages to themselves, or to other objects in) 180 304.33 P
(the same resource. In this case, they can use the routine) 180 291.33 T
5 F
(ObjCallInstanceNoLock) 180 278.33 T
2 F
(. This routine is considerably faster than) 304.07 278.33 T
5 F
(ObjMessage) 180 265.33 T
2 F
(, because it makes two assumptions about the recipient:) 241.84 265.33 T
1 F
(u) 180 245.33 T
2 F
(The recipient object must be run by the thread which calls) 198 245.33 T
5 F
(ObjCallInstanceNoLock) 198 233.33 T
2 F
(.) 322.07 233.33 T
1 F
(u) 180 214.33 T
2 F
(The recipient\325) 198 214.33 T
(s object block must be locked or \336xed in memory) 261.15 214.33 T
(.) 482.47 214.33 T
(Both of these conditions are met when the recipient object is in the same) 180 195.33 T
-0.05 (resource as the sender \050or the special case of this in which an object sends a) 180 182.33 P
(message to itself\051.) 180 169.33 T
5 F
(ObjCallInstanceNoLock) 180 149.33 T
2 F
( is passed the following arguments:) 304.07 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "90" 30
%%Page: "91" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Objects and Classes) 421.05 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  91) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(3.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(ax) 180 641.33 T
2 F
(This register contains message) 243 641.33 T
2 9 Q
(ID) 388.57 641.33 T
2 10 Q
( number) 399.23 641.33 T
(.) 437.39 641.33 T
3 F
(ds) 180 622.33 T
2 F
(This register must contain the) 243 622.33 T
6 F
(segment address) 386.16 622.33 T
2 F
( of the) 461.87 622.33 T
(recipient\325) 243 610.33 T
(s object block, which must be locked on the global) 285.59 610.33 T
(heap.) 243 598.33 T
3 F
(si) 180 579.33 T
2 F
(This register contains the recipient\325) 243 579.33 T
(s chunk handle.) 407.08 579.33 T
3 F
(cx) 180 560.33 T
2 F
(,) 192 560.33 T
3 F
(dx) 197.56 560.33 T
2 F
(,) 209.56 560.33 T
3 F
(bp) 215.12 560.33 T
2 F
(These registers are passed through to the recipient method.) 243 560.33 T
5 F
(ObjCallInstanceNoLock) 180 541.33 T
2 F
( immediately blocks and calls the appropriate) 304.07 541.33 T
(method \050exactly as if) 180 528.33 T
5 F
(ObjMessage) 278.53 528.33 T
2 F
( had been called with) 340.37 528.33 T
2 9 Q
(MF_CALL) 441.32 528.33 T
2 10 Q
( and) 485.32 528.33 T
2 9 Q
-0.17 (MF_FIXUP_DS) 180 515.33 P
2 10 Q
-0.19 (\051. If you need to pass arguments on the stack, you will have to) 245.51 515.33 P
-0.07 (do this by hand, i.e. set) 180 502.33 P
3 F
-0.14 (ss:[bp]) 289.26 502.33 P
2 F
-0.07 ( to point to the last argument on the stack,) 331.26 502.33 P
(and set) 180 489.33 T
3 F
(dx) 216.49 489.33 T
2 F
( to contain the number of data bytes on the stack. Since the) 228.49 489.33 T
(recipient is guaranteed to use the same stack as the sender) 180 476.33 T
(, the arguments) 452.81 476.33 T
(won\325) 180 463.33 T
(t have to be copied from one stack to another) 200.75 463.33 T
(.) 406.7 463.33 T
5 F
(ObjCallInstanceNoLock) 182.78 443.33 T
2 F
( returns the following values:) 306.85 443.33 T
3 F
(ax) 180 423.33 T
2 F
(,) 192 423.33 T
3 F
(cx) 197.56 423.33 T
2 F
(,) 209.56 423.33 T
3 F
(dx) 215.12 423.33 T
2 F
(,) 227.12 423.33 T
3 F
(bp) 232.68 423.33 T
2 F
(,) 244.68 423.33 T
4 F
(CF) 250.24 423.33 T
2 F
-0.59 (Returned from the method. If no method is called, the registers) 243 411.33 P
(are returned unchanged, and) 243 399.33 T
4 F
(CF) 380.59 399.33 T
2 F
( is cleared.) 392.59 399.33 T
3 F
(ds) 180 380.33 T
2 F
(Fixed up to point to the same object block, even if the block) 243 380.33 T
(moved during the call.) 243 368.33 T
3 F
(es) 180 349.33 T
2 F
(If this register pointed to the object block, the value is) 243 349.33 T
(invalidated \050since the object block may have moved\051.) 243 337.33 T
-0.26 (If you will need to have) 180 318.33 P
3 F
-0.55 (es) 289.04 318.33 P
2 F
-0.26 ( \336xed up, call) 301.04 318.33 P
5 F
-0.26 (ObjCallInstanceNoLockES) 364.28 318.33 P
2 F
-0.26 (. This) 502.61 318.33 P
(routine is exactly the same as) 180 305.33 T
5 F
(ObjCallInstanceNoLock) 320.21 305.33 T
2 F
(, except that both) 444.28 305.33 T
3 F
(ds) 180 292.33 T
2 F
( and) 192 292.33 T
3 F
(es) 214.97 292.33 T
2 F
( are automatically \336xed. If you call this routine,) 226.97 292.33 T
3 F
(es) 450.15 292.33 T
6 F
(must) 464.93 292.33 T
2 F
( point to) 487.89 292.33 T
(some kind of LMem heap \050or another memory block in which the \336rst word) 180 279.33 T
(of the block is the block\325) 180 266.33 T
(s global handle\051.) 289.84 266.33 T
-0.15 (Esp provides a routine which corresponds to the Goc command) 180 246.33 P
5 F
-0.16 (@callsuper) 470.7 246.33 P
2 F
-0.15 (.) 525.59 246.33 P
(This command is) 180 233.33 T
5 F
(ObjCallSuperNoLock) 261.31 233.33 T
2 F
(. It is just like) 371.69 233.33 T
5 F
(ObjCallInstanceNoLock) 180 220.33 T
2 F
(, with one exception: The message is handled by) 304.07 220.33 T
-0.35 (the object\325) 180 207.33 P
-0.35 (s superclass, not by its class.) 225.95 207.33 P
5 F
-0.36 (ObjCallSuperNoLock) 359.04 207.33 P
2 F
-0.35 ( takes all the) 469.42 207.33 P
(same arguments as) 180 194.33 T
5 F
(ObjCallInstanceNoLock) 272.61 194.33 T
2 F
(, and one more besides:) 396.68 194.33 T
3 F
(es:[di]) 180 181.33 T
2 F
( must be the address of the class structure for the object \050or any) 222 181.33 T
-0.29 (other class in the object\325) 180 168.33 P
-0.29 (s class hierarchy\051. The message will be handled as if) 289.59 168.33 P
(the object belonged to the) 180 155.33 T
6 F
(superclass) 300.57 155.33 T
2 F
( of the class speci\336ed by) 348.13 155.33 T
3 F
(es:[di]) 461.29 155.33 T
2 F
(.) 503.29 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "91" 31
%%Page: "92" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Routine Writing) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  92) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(3.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 10 Q
0 X
(ObjCallSuperNoLock) 180 641.33 T
2 F
( is most often used by objects sending messages to) 290.38 641.33 T
(themselves. If you subclass a message, but want to maintain the default) 180 628.33 T
(behavior for that message, you can just call) 180 615.33 T
5 F
(ObjCallSuperNoLock) 382.99 615.33 T
2 F
( to call) 493.37 615.33 T
-0.58 (your superclass\325) 180 602.33 P
-0.58 (s handler for the message. In this case, you can usually leave) 253.12 602.33 P
(all your registers as they were when your message was called.) 180 589.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "92" 32
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 32
%%DocumentFonts: Helvetica-Bold
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Roman
%%+ Courier-Bold
%%+ Courier
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-BoldItalic
%%EOF
