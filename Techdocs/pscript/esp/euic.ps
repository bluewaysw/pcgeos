%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "95" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(UIC Overview) 467.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  95) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
0 X
(Assembly language is, by nature, very low-level. It does not ordinarily) 180 610.3 T
(provide support for object-oriented programming.) 180 597.3 T
2 9 Q
(GEOS) 410.91 597.3 T
2 10 Q
( has had to add) 437.08 597.3 T
(special features to its assembly language to fully support) 180 584.3 T
2 9 Q
(OOP) 445.78 584.3 T
2 10 Q
(.) 464.5 584.3 T
(Y) 180 564.3 T
(ou have seen some of this support already) 185.93 564.3 T
(. The) 378.17 564.3 T
2 9 Q
(GEOS) 404.29 564.3 T
2 10 Q
( kernel manages) 430.46 564.3 T
(objects, and provides routines for sending messages. Applications can call) 180 551.3 T
(special routines to create, manipulate, or destroy objects. However) 180 538.3 T
(, most) 486.13 538.3 T
(applications will need to have many objects created before they start) 180 525.3 T
(running. In particular) 180 512.3 T
(, most applications will need to have many) 281.66 512.3 T
2 9 Q
(UI) 481.15 512.3 T
2 10 Q
( objects) 492.15 512.3 T
-0.18 (created before they start running. Y) 180 499.3 P
-0.18 (ou can also declare new object classes in) 344.28 499.3 P
(a) 180 486.3 T
2 9 Q
(UIC) 188.34 486.3 T
2 10 Q
( \336le, though you only have to do that if you will want to create objects) 205.84 486.3 T
(from those classes at compile-time.) 180 473.3 T
-0.32 (This is where the) 180 453.3 P
3 F
-0.32 (User-Interface Compiler) 261.52 453.3 P
2 F
-0.32 ( \050) 371.7 453.3 P
2 9 Q
-0.29 (UIC) 377.49 453.3 P
2 10 Q
-0.32 (\051 comes in. W) 394.98 453.3 P
-0.32 (ith) 455.14 453.3 P
2 9 Q
-0.29 (UIC) 470.75 453.3 P
2 10 Q
-0.32 (, you can) 488.24 453.3 P
(specify in your source code what objects need to be created when the) 180 440.3 T
-0.53 (application is launched. All these objects will be created at compile time, and) 180 427.3 P
(stored in the executable \336le. When the application is launched, the objects) 180 414.3 T
(will be there, ready to be used.) 180 401.3 T
(The) 180 381.3 T
2 9 Q
(UIC) 200.56 381.3 T
2 10 Q
( is most commonly used to create user) 218.06 381.3 T
(-interface objects. It can,) 393.26 381.3 T
-0.83 (however) 180 368.3 P
-0.83 (, create any kind of object, of any class \050whether a) 217.96 368.3 P
2 9 Q
-0.75 (GEOS) 441.39 368.3 P
2 10 Q
-0.83 ( system class,) 467.57 368.3 P
-0.11 (or a class you de\336ne yourself\051. It can also create other chunks that might be) 180 355.3 P
(kept in an object-block \050e.g. V) 180 342.3 T
(is monikers\051.) 315.69 342.3 T
-0.17 (For assembly reference information about the various) 180 322.3 P
2 9 Q
-0.15 (GEOS) 429.94 322.3 P
2 10 Q
-0.17 ( classes, see the) 456.11 322.3 P
2 9 Q
(PCGEOS) 180 309.3 T
2 10 Q
(\134) 218.67 309.3 T
2 9 Q
(INCLUDE) 224.73 309.3 T
2 10 Q
(\134*.) 269.07 309.3 T
2 9 Q
(DEF) 282.91 309.3 T
2 10 Q
( and *.) 302.41 309.3 T
2 9 Q
(UIH) 333.16 309.3 T
2 10 Q
( \336les.) 351.65 309.3 T
0 14 Q
(4.1) 142.54 256.97 T
0 24 Q
(UIC Overview) 180 256.97 T
2 10 Q
(Essentially) 180 231.3 T
(,) 230.75 231.3 T
2 9 Q
(UIC) 236.31 231.3 T
2 10 Q
( reads \336les written in Espire, a special object-speci\336cation) 253.81 231.3 T
(language, and writes special) 180 218.3 T
2 9 Q
(GEOS) 314.1 218.3 T
2 10 Q
( object-assembly \336les. These \336les \050which) 340.27 218.3 T
(have a) 180 205.3 T
4 F
(.rdf) 213.16 205.3 T
2 F
( suf\336xes\051 are automatically included when the executable is) 231.69 205.3 T
(compiled.) 180 192.3 T
-0.82 (When you write an application in assembly) 180 172.3 P
-0.82 (, you can specify objects by putting) 373.61 172.3 P
-0.76 (them in a) 180 159.3 P
2 9 Q
-0.69 (UIC) 224.76 159.3 P
2 10 Q
-0.76 ( source \336le. This \336le\325) 242.25 159.3 P
-0.76 (s name should be) 333.46 159.3 P
4 F
-0.79 (<geodename>.ui) 413.01 159.3 P
2 F
-0.76 (. When) 497.16 159.3 P
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "95" 1
%%Page: "96" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  96) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.1) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.69 (you run) 180 641.33 P
4 F
-0.71 (mkmf) 217.33 641.33 P
2 F
-0.69 (, it will automatically set up the make\336le to include the proper) 247.15 641.33 P
-0.56 (calls to) 180 628.33 P
2 9 Q
-0.5 (UIC) 214.26 628.33 P
2 10 Q
-0.56 (. When you compile the application, the) 231.75 628.33 P
4 F
-0.58 (.rdf) 413.22 628.33 P
2 F
-0.56 ( \336le will be generated) 431.75 628.33 P
(and incorporated in the application.) 180 615.33 T
2 9 Q
-0.4 (UIC) 180 595.33 P
2 10 Q
-0.44 ( incorporates the C preprocessor) 197.5 595.33 P
-0.44 (. This means you can use the standard C) 344.22 595.33 P
(preprocessing directives.In particular) 180 582.33 T
(, you can write) 352.76 582.33 T
2 9 Q
(UIC) 423.51 582.33 T
2 10 Q
( header \336les, and) 441.01 582.33 T
(include them in a) 180 569.33 T
4 F
(.uih) 263.53 569.33 T
2 F
( \336le with the) 283.71 569.33 T
4 F
(#include) 345.02 569.33 T
2 F
( directive. These header \336les) 389.65 569.33 T
(customarily have the suf\336x) 180 556.33 T
4 F
(.uih) 308.34 556.33 T
2 F
(. Every) 328.52 556.33 T
4 F
(.ui) 364.26 556.33 T
2 F
( \336le must include the standard) 377.59 556.33 T
2 9 Q
-0.45 (GEOS) 180 543.33 P
2 10 Q
-0.5 ( header \336le) 206.17 543.33 P
4 F
-0.52 (generic.uih) 259.11 543.33 P
2 F
-0.5 (; this \336le contains) 318.18 543.33 P
2 9 Q
-0.45 (UI) 401 543.33 P
2 10 Q
-0.5 ( information about all the) 412 543.33 P
(standard) 180 530.33 T
2 9 Q
(GEOS) 224.45 530.33 T
2 10 Q
( Gen and V) 250.62 530.33 T
(is classes.) 302.04 530.33 T
-0.17 (Comments follow the C convention; i.e. they begin with) 180 510.33 P
5 F
-0.36 (/*) 435.95 510.33 P
2 F
-0.17 ( and end with) 447.95 510.33 P
5 F
-0.36 (*/) 513.6 510.33 P
2 F
-0.17 (.) 525.6 510.33 P
(As in C, newlines are treated as whitespace, not as statement terminators.) 180 497.33 T
-0.58 (Some of the conventions of) 180 477.33 P
4 F
-0.6 (.ui) 302.68 477.33 P
2 F
-0.58 ( \050and) 316.01 477.33 P
4 F
-0.6 (.uih) 341.15 477.33 P
2 F
-0.58 (\051 \336les are different from elsewhere in) 361.33 477.33 P
2 9 Q
-0.41 (GEOS) 180 464.33 P
2 10 Q
-0.46 (. First of all, the names of all classes are shortened; they do not contain) 206.17 464.33 P
(the word \322class\323. For example, in a) 180 451.33 T
4 F
(.uih) 342.81 451.33 T
2 F
( \336le,) 362.99 451.33 T
4 F
(GenT) 385.59 451.33 T
(riggerClass) 413.11 451.33 T
2 F
( would be) 472.56 451.33 T
(called just \322GenT) 180 438.33 T
(rigger\323.) 259.02 438.33 T
-0.17 (Also, in a) 180 418.33 P
4 F
-0.18 (.ui) 225.42 418.33 P
2 F
-0.17 ( \336le, the names of instance data \336elds are truncated; the initial) 238.75 418.33 P
(capital letters, followed by an underscore, are removed. For example, the) 180 405.33 T
-0.5 (class) 180 392.33 P
4 F
-0.52 (GenT) 204.69 392.33 P
-0.52 (riggerClass) 232.21 392.33 P
2 F
-0.5 ( has a \336eld named) 291.66 392.33 P
3 F
-0.5 (GTI) 376.22 392.33 P
2 F
-0.5 (_) 394.92 392.33 P
3 F
-0.5 (destination) 399.92 392.33 P
2 F
-0.5 (; in a) 451.57 392.33 P
4 F
-0.52 (.ui) 476.01 392.33 P
2 F
-0.5 ( \336le, this) 489.34 392.33 P
(\336eld would be called just \322destination\323. This convention is followed with all) 180 379.33 T
2 9 Q
-0.43 (GEOS) 180 366.33 P
2 10 Q
-0.48 ( classes; you should follow it with any classes you create. \050If you\325re ever) 206.17 366.33 P
(unsure what the Espire \336eld-name is for a class, you can look in the class\325) 180 353.33 T
(s) 520.04 353.33 T
4 F
(.uih) 180 340.33 T
2 F
( \336le in) 200.18 340.33 T
2 9 Q
(PCGEOS\134INCLUDE\134OBJECTS) 232.04 340.33 T
2 10 Q
(.) 369.13 340.33 T
(Finally) 180 320.33 T
(, the names of \337ags in an instance data record have different) 212.05 320.33 T
-0.53 (conventions. In C and assembly \336les, the name of a \337ag would begin with the) 180 307.33 P
-0.19 (initials of the instance data \336eld, followed by the name of the \337ag, in capital) 180 294.33 P
(letters. For example, in assembly) 180 281.33 T
(, the) 332.44 281.33 T
4 F
(GenClass) 355.78 281.33 T
2 F
( record) 404.11 281.33 T
3 9 Q
(GI) 438.73 281.33 T
3 10 Q
(_attrs) 449.39 281.33 T
2 F
( has a \336eld) 476.05 281.33 T
-0.08 (named) 180 268.33 P
2 9 Q
-0.07 (GA_READ_ONL) 214 268.33 P
-0.07 (Y) 282.51 268.33 P
2 10 Q
-0.08 (. The corresponding \336eld in a) 287.74 268.33 P
4 F
-0.08 (.ui) 424.51 268.33 P
2 F
-0.08 ( \336le would be called) 437.84 268.33 P
-0.76 (\322readOnly\323. Members of enumerated types have similarly altered names. For) 180 255.33 P
(example, in assembly) 180 242.33 T
(, a \336eld might be called) 277.99 242.33 T
2 9 Q
(MET_AN_ENUM_V) 388.02 242.33 T
(ALUE) 471.51 242.33 T
2 10 Q
(; if the) 497.85 242.33 T
(type were declared in a) 180 229.33 T
4 F
(.uih) 290.01 229.33 T
2 F
( \336le, the member would be called) 310.19 229.33 T
(\322anEnumV) 180 216.33 T
(alue\323.) 230.19 216.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "96" 2
%%Page: "97" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Declaring Classes) 437.39 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  97) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.2) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(4.2) 142.54 632 T
0 24 Q
(Declaring Classes) 180 632 T
2 10 Q
-0.25 (Y) 180 606.33 P
-0.25 (ou can create new classes by specifying them in your) 185.93 606.33 P
4 F
-0.26 (.ui) 428.98 606.33 P
2 F
-0.25 ( \336le. Y) 442.3 606.33 P
-0.25 (ou do this by) 470.33 606.33 P
-0.1 (writing special Espire directives; these tell Esp how to create objects of that) 180 593.33 P
(class. These directives are often put in a) 180 580.33 T
4 F
(.uih) 368.54 580.33 T
2 F
( \336le which is included by the) 388.72 580.33 T
(application\325) 180 567.33 T
(s) 233.16 567.33 T
4 F
(.ui) 240.57 567.33 T
2 F
( \336le.) 253.9 567.33 T
-0.32 (Y) 180 547.33 P
-0.32 (ou don\325) 185.93 547.33 P
-0.32 (t always have to do this for every class. In particular) 218.21 547.33 P
-0.32 (, you don\325) 457.26 547.33 P
-0.32 (t have) 500.15 547.33 P
-0.04 (to declare your process class in the) 180 534.33 P
4 F
-0.05 (.uih) 342.84 534.33 P
2 F
-0.04 ( \336le; and you don\325) 363.02 534.33 P
-0.04 (t have to declare a) 443.61 534.33 P
(class if you will not need to create objects of that class at compile-time.) 180 521.33 T
(However) 180 508.33 T
(, if you will want to create objects from the class\325) 220.18 508.33 T
(s subclass at) 443.73 508.33 T
(compile time, you must declare both the class and the subclass in your) 180 495.33 T
4 F
(.uih) 507.82 495.33 T
2 F
(\336le.) 180 482.33 T
-0.57 (If you specify a class in your) 180 462.33 P
4 F
-0.59 (.uih) 309.13 462.33 P
2 F
-0.57 ( \336le, you must still declare it in your regular) 329.31 462.33 P
(assembly code, as described in section 2.4 of chapter 2.) 180 449.33 T
(The class speci\336cation begins with a line like this:) 180 429.33 T
5 F
(class <classRoot> = <superClassRoot> [, master]) 216 413.33 T
([,variant]{) 432 399.33 T
4 F
(classRoot) 180 378.33 T
2 F
(This is the name of the class you are declaring,) 243 378.33 T
3 F
(without) 462.66 378.33 T
2 F
( the) 498.03 378.33 T
(word \322class\323. For example, if you are declaring) 243 366.33 T
4 F
(MyT) 243 354.33 T
(riggerClass) 265.52 354.33 T
2 F
(, the) 324.97 354.33 T
5 F
(<classRoot>) 348.31 354.33 T
2 F
( would be) 414.31 354.33 T
4 F
(MyT) 460.99 354.33 T
(rigger) 483.51 354.33 T
2 F
(.) 514.81 354.33 T
4 F
(superClassRoot) 180 335.33 T
2 F
(This is the name of the class\325) 243 323.33 T
(s superclass, again without the) 375.99 323.33 T
(word \322class\323; e.g. if the superclass is) 243 311.33 T
4 F
(GenT) 411.91 311.33 T
(riggerClass) 439.43 311.33 T
2 F
(, this) 498.88 311.33 T
(would be) 243 299.33 T
4 F
(GenT) 286.9 299.33 T
(rigger) 314.42 299.33 T
2 F
(.) 345.72 299.33 T
-0.21 (If the class is a master class or a variant class, you must specify that on this) 180 280.33 P
(line, e.g.) 180 267.33 T
5 F
(class) 216 251.33 T
(MyMasterVis = Vis, variant {) 252 251.33 T
2 F
(would be the \336rst line in the speci\336cation for master class) 180 230.33 T
4 F
(MyMasterV) 180 217.33 T
(isClass) 239.18 217.33 T
2 F
(, which is subclassed from) 275.29 217.33 T
4 F
(V) 398.45 217.33 T
(isClass) 405.6 217.33 T
2 F
(.) 441.71 217.33 T
(After the top line, you specify all the instance data \336elds for the class. Y) 180 197.33 T
(ou) 510.78 197.33 T
(may also change default values for \336elds inherited from the class\325) 180 184.33 T
(s) 481.88 184.33 T
(superclass.) 180 171.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "97" 3
%%Page: "98" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  98) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(4.2.1) 130.86 636 T
0 18 Q
(Declaring Fields) 180 636 T
2 10 Q
(Y) 180 612.33 T
(ou must list all the instance data \336elds that are added with that subclass.) 185.93 612.33 T
(The basic format for specifying a \336eld is:) 180 599.33 T
5 F
(<fieldRoot> = <fieldType> : <defaultValue>) 216 583.33 T
4 F
(\336eldRoot) 180 562.33 T
2 F
(This is the name of the instance data \336eld, without the) 243 562.33 T
(acronym of the class \050as discussed in section 4.1 on page 95\051.) 243 550.33 T
-0.25 (For example, if the \336eld is called) 243 538.33 P
3 9 Q
-0.22 (MCI) 394.61 538.33 P
3 10 Q
-0.25 (_aField) 413.27 538.33 P
2 F
-0.25 ( in the) 447.89 538.33 P
2 9 Q
-0.22 (MASM) 479.74 538.33 P
2 10 Q
-0.25 ( \336le,) 508.9 538.33 P
(it would be called \322aField\323 here.) 243 526.33 T
4 F
(\336eldT) 180 507.33 T
(ype) 209.48 507.33 T
2 F
(This may be a simple type or a de\336ned type. Simple types are) 243 507.33 T
(the same as in) 243 495.33 T
2 9 Q
(MASM) 312.65 495.33 T
2 10 Q
(, except that they end with \322Comp\323; for) 341.81 495.33 T
-0.23 (example, the) 243 483.33 P
2 9 Q
-0.21 (MASM) 304.59 483.33 P
2 10 Q
-0.23 ( type \322byte\323 corresponds to the Espire type) 333.75 483.33 P
(\322byteComp\323.) 243 471.33 T
4 F
(defaultV) 180 452.33 T
(alue) 223.71 452.33 T
2 F
(This optional \336eld speci\336es the default value of the instance) 243 440.33 T
(data \336eld. If you create an object of this class in a) 243 428.33 T
4 F
(.ui) 473.96 428.33 T
2 F
( \336le and) 487.29 428.33 T
(do not specify a value for the \336eld, the default value will be) 243 416.33 T
(used.) 243 404.33 T
(For example, in) 180 385.33 T
2 9 Q
(MASM) 255.2 385.33 T
2 10 Q
( code, the class) 284.36 385.33 T
4 F
(GenV) 355.85 385.33 T
(iewControlClass) 383.92 385.33 T
2 F
( has a \336eld) 469.48 385.33 T
(with the following de\336nition:) 180 372.33 T
5 F
(GVCI_scale) 216 356.33 T
(word) 324 356.33 T
(100) 360 356.33 T
2 F
(The Espire de\336nition of the class, in a) 180 335.33 T
4 F
(.uih) 357.8 335.33 T
2 F
( \336le, has this corresponding line:) 377.98 335.33 T
5 F
(scale = wordComp : 100) 216 319.33 T
2 F
(The default value can also be an expression:) 180 298.33 T
5 F
(myField = byteComp : \0503 * 20\051) 216 282.33 T
2 F
(If the \336eld contains an enumerated type, the format is this:) 180 261.33 T
5 F
(<fieldRoot> = enumComp <size> [\050<first> [, <step>]\051]) 216 245.33 T
({ <member>, <member>...} : <default;) 252 231.33 T
4 F
(\336eldRoot) 180 210.33 T
2 F
(This is the name of the instance data \336eld, without the) 243 210.33 T
(acronym of the class \050as discussed in section 4.1 on page 95\051.) 243 198.33 T
-0.25 (For example, if the \336eld is called) 243 186.33 P
3 9 Q
-0.22 (MCI) 394.61 186.33 P
3 10 Q
-0.25 (_aField) 413.27 186.33 P
2 F
-0.25 ( in the) 447.89 186.33 P
2 9 Q
-0.22 (MASM) 479.74 186.33 P
2 10 Q
-0.25 ( \336le,) 508.9 186.33 P
(it would be called \322aField\323 here.) 243 174.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "98" 4
%%Page: "99" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Declaring Classes) 437.39 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  99) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.2) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(size) 180 641.33 T
2 F
-0.22 (This is the size of the enumerated type. It may be) 243 641.33 P
5 F
-0.47 (byte) 472.31 641.33 P
2 F
-0.22 (,) 496.31 641.33 P
5 F
-0.47 (word) 501.66 641.33 P
2 F
-0.22 (,) 525.66 641.33 P
(or) 243 629.33 T
5 F
(dword) 255.22 629.33 T
2 F
(.) 285.22 629.33 T
4 F
(\336rst) 180 610.33 T
2 F
-0.78 (If this is present, it speci\336es the value of the \336rst member of the) 243 610.33 P
(enumerated type. The default \336rst value is zero.) 243 598.33 T
4 F
(step) 180 579.33 T
2 F
(If this is present, it speci\336es the step between successive) 243 579.33 T
(members of the enumerated type. The default step is one.) 243 567.33 T
4 F
(member) 180 548.33 T
2 F
(This is the name of a member of the enumerated type. The) 243 548.33 T
-0.28 (name is altered from its assembly form, as noted in section 4.1) 243 536.33 P
(on page 95; for example, if the member) 243 524.33 T
(\325) 423.21 524.33 T
(s name in assembly is) 424.88 524.33 T
(its name in Espire will be \322blueEnum\323. Y) 243 512.33 T
(ou must list all) 431.56 512.33 T
(members of the enumerated type, in the same order in which) 243 500.33 T
(they appear in the type\325) 243 488.33 T
(s assembly speci\336cation.) 352.46 488.33 T
4 F
(default) 180 469.33 T
2 F
(This speci\336es the default value of the instance \336eld.) 243 469.33 T
(If the \336eld contains an record, the format is this:) 180 450.33 T
5 F
(<fieldRoot> = bitFieldComp <size>) 216 435.33 T
({<field>, <field>...}) 252 421.33 T
(: <default>, <default>...;) 252 407.33 T
4 F
(\336eldRoot) 180 386.33 T
2 F
(This is the name of the instance data \336eld, without the) 243 386.33 T
(acronym of the class \050as discussed in section 4.1 on page 95\051.) 243 374.33 T
-0.25 (For example, if the \336eld is called) 243 362.33 P
3 9 Q
-0.22 (MCI) 394.61 362.33 P
3 10 Q
-0.25 (_aField) 413.27 362.33 P
2 F
-0.25 ( in the) 447.89 362.33 P
2 9 Q
-0.22 (MASM) 479.74 362.33 P
2 10 Q
-0.25 ( \336le,) 508.9 362.33 P
(it would be called \322aField\323 here.) 243 350.33 T
4 F
(size) 180 331.33 T
2 F
(This is the size of the record. It may be) 243 331.33 T
5 F
(byte) 425.24 331.33 T
2 F
(,) 449.24 331.33 T
5 F
(word) 454.8 331.33 T
2 F
(, or) 478.8 331.33 T
5 F
(dword) 496.58 331.33 T
2 F
(.) 526.58 331.33 T
4 F
(\336eld) 180 312.33 T
2 F
(This is the name of the \337ag. The name is changed from the) 243 312.33 T
2 9 Q
-0.4 (MASM) 243 300.33 P
2 10 Q
-0.45 ( form, as noted above. For example, if the \337ag \050in) 272.16 300.33 P
2 9 Q
-0.4 (MASM) 496.18 300.33 P
2 10 Q
-0.45 (\051) 525.34 300.33 P
(is called) 243 288.33 T
2 9 Q
(MBF_A_BITFIELD_FLAG) 283.38 288.33 T
2 10 Q
(, in Esp it would be called) 395.21 288.33 T
(\322aBit\336eldFlag\323.) 243 276.33 T
4 F
(default) 180 257.33 T
2 F
(This may be one or more \337ags in the record. By default, the) 243 257.33 T
-0.08 (\337ags listed here will set, and all the other \337ags will be cleared.) 243 245.33 P
-0.33 (A \336eld may be more than one bit wide. If a \336led in the record is speci\336ed like) 180 226.33 P
(this:) 180 213.33 T
5 F
(<field>:<width>) 216 197.33 T
2 F
-0.44 (then) 180 176.33 P
4 F
-0.45 (width) 203.46 176.33 P
2 F
-0.44 ( will be the width of the \336eld in bytes. Fields in a record may also) 233.82 176.33 P
(contain a range of enumerated values. The \336eld would be speci\336ed like this:) 180 163.33 T
5 F
(<field>:<width>={<value>, <value>...}) 216 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "99" 5
%%Page: "100" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  100) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(Each) 180 641.33 T
4 F
(value) 206.11 641.33 T
2 F
( would be a possible setting for that \336eld.) 234.44 641.33 T
(If a \336eld is more than one bit wide, you specify its default value with) 180 621.33 T
(\322) 180 608.33 T
5 F
(<f) 183.89 608.33 T
(ieldname> <value>) 195.89 608.33 T
2 F
(\323; the value may be either an integer) 297.89 608.33 T
(, or the) 466.07 608.33 T
-0.43 (enumerated type speci\336ed for that \336eld. If you do not specify a default value,) 180 595.33 P
(the \336eld will default to zero.) 180 582.33 T
(For example, the object) 180 562.33 T
4 F
(GenDocumentControl) 290.57 562.33 T
2 F
( has a \336eld with the) 404.64 562.33 T
(following de\336nition:) 180 549.33 T
5 F
(dcAttributes = bitFieldComp word {) 216 533.33 T
(multipleOpenFiles,) 252 519.33 T
(mode:2 = {viewer, sharedSingle,) 252 505.33 T
(sharedMultiple},) 288 491.33 T
(dosFileDenyWrite, vmFile, native,) 252 477.33 T
(supportsSaveAsRevert, documentExists,) 252 463.33 T
(currentTask:4 = {none, new, open,) 252 449.33 T
(useTemplate, saveAs, dialog},) 288 435.33 T
(doNotSaveFiles }) 252 421.33 T
(: mode sharedSingle, vmFile, supportsSaveAsRevert,) 216 407.33 T
(currentTask new;) 216 393.33 T
2 F
-0.4 (In this case, each \336eld in the record is one bit wide, except for) 180 372.33 P
3 F
-0.4 (mode) 461.27 372.33 P
2 F
-0.4 (, which is) 485.71 372.33 P
(two bits wide, and) 180 359.33 T
3 F
(currentT) 266.88 359.33 T
(ask) 306.49 359.33 T
2 F
(, which is four bits wide. By default,) 322.23 359.33 T
3 F
(mode) 491.33 359.33 T
2 F
( is) 515.77 359.33 T
(set to) 180 346.33 T
3 F
(sharedSingle) 207.97 346.33 T
2 F
( \050i.e. 1\051, and) 268.5 346.33 T
3 F
(currentT) 325.74 346.33 T
(ask) 365.35 346.33 T
2 F
( is set to) 381.09 346.33 T
3 F
(new) 422.4 346.33 T
2 F
( \050i.e. 1\051; the \337ags) 440.73 346.33 T
3 F
(vmFile) 180 333.33 T
2 F
( and) 211.85 333.33 T
3 F
(supportsSaveAsRevert) 234.82 333.33 T
2 F
( are set; and all other \337ags are cleared.) 337.21 333.33 T
0 14 Q
(4.2.2) 130.86 291 T
0 18 Q
(Changing a Default V) 180 291 T
(alue) 360.04 291 T
2 10 Q
(When you create a class, you may wish to change the default values of) 180 267.33 T
(instance \336elds inherited from a superclass. The format for doing this is:) 180 254.33 T
5 F
(default <fieldRoot>) 216 238.33 T
(= <value>;) 360 238.33 T
4 F
(\336eldRoot) 180 217.33 T
2 F
(This is the name of the instance data \336eld, as given in the) 243 217.33 T
(superclass\325) 243 205.33 T
(s Espire declaration.) 293 205.33 T
4 F
(value) 180 186.33 T
2 F
(This is the new default value for that \336eld. As noted, if you) 243 186.33 T
-0.08 (want the default value to be interpreted by) 243 174.33 P
2 9 Q
-0.07 (MASM) 443.73 174.33 P
2 10 Q
-0.08 (, you should) 472.89 174.33 P
(surround it in quotes, like so:) 243 162.33 T
5 F
(default) 216 147.33 T
(superField = "6 * SOME_MASM_CONSTANT";) 288 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "100" 6
%%Page: "101" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Declaring Classes) 437.39 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 527.84 671.34 T
2 F
(  101) 535.76 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.2) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.29 (If the \336eld is a record, you may wish to turn on or off some of the \337ags, while) 180 641.33 P
(leaving the rest unchanged. Y) 180 628.33 T
(ou can do that with a line like this:) 317.05 628.33 T
5 F
(default <recordRoot> = default + <flagName>,) 216 612.33 T
(- <flagname>... ;) 396 598.33 T
4 F
(recordRoot) 180 577.33 T
2 F
(This is the name of the instance data \336eld, as given in the) 243 565.33 T
(superclass\325) 243 553.33 T
(s Espire declaration.) 293 553.33 T
4 F
(\337agName) 180 534.33 T
2 F
-0.32 (This is the \337ag to turn on or off. If the \337ag is preceded by a \322+\323,) 243 534.33 P
(the \337ag\325) 243 522.33 T
(s default value will be) 279.49 522.33 T
3 F
(set) 383.78 522.33 T
2 F
(; if it is preceded by a \322-\323, its) 396.18 522.33 T
(default value will be) 243 510.33 T
3 F
(clear) 339.88 510.33 T
2 F
(.) 361.53 510.33 T
(For example, the line) 180 491.33 T
5 F
(default superRecord = default +aFlag, -anotherFlag;) 216 476.33 T
2 F
(changes the default value of the superclass\325) 180 455.33 T
(s \336eld) 380.2 455.33 T
3 F
(superRecord) 410.39 455.33 T
2 F
(. In the) 467.4 455.33 T
(subclass\325) 180 442.33 T
(s) 220.38 442.33 T
3 F
(superRecord) 227.79 442.33 T
2 F
( \336eld,) 284.8 442.33 T
3 F
(aFlag) 313.14 442.33 T
2 F
( is now on by default, and) 339.99 442.33 T
3 F
(anotherFlag) 461.13 442.33 T
2 F
( is) 517.6 442.33 T
(off. All the other \337ags have the same default values as they have in the) 180 429.33 T
(superclass.) 180 416.33 T
81 383.98 531 396 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 383.98 531 396 R
7 X
0 0 0 1 0 0 0 K
V
76.5 391.23 617.5 394.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 377.31 T
(3-) 147.13 377.31 T
(1 Modifying a Superclass) 156.02 377.31 T
5 9 Q
(/* We are creating a subclass of GentriggerClass. This class will have a new) 81 362.98 T
(* field, and will change the default values of one of GenTriggerClass\325s fields.) 86.4 351.98 T
(*/) 86.4 340.98 T
(#include "generic.uih" /* This has the Espire definition of GenTriggerClass */) 81 322.98 T
(Class MyTrigger = GenTrigger {) 81 304.98 T
(/* Change the default values of a fields: */) 81 286.98 T
(genStates = default +enabled;) 102.6 275.98 T
(/* And add a new field */) 81 257.98 T
(myDatum) 102.6 246.98 T
(= wordComp : 0;) 168.98 246.98 T
(}) 81 228.98 T
(/* The .def file would have the corresponding Esp class definition; this would be) 81 210.98 T
(*) 86.4 199.98 T
(something like:) 97.2 199.98 T
(MyTriggerClass) 81 181.98 T
(class GenTriggerClass) 168.98 181.98 T
(MTI_myDatum) 125 163.98 T
(word) 212.5 163.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "101" 7
%%Page: "102" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  102) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 9 Q
0 X
(MyTriggerClass) 81 642 T
(endc) 168.98 642 T
81 617.98 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 617.98 531 630 R
7 X
0 0 0 1 0 0 0 K
V
76.5 625.23 617.5 628.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(4.3) 142.54 567.98 T
0 24 Q
(Creating Objects and Chunks) 180 567.98 T
2 10 Q
(The whole point of the) 180 542.31 T
2 9 Q
(UIC) 285.94 542.31 T
2 10 Q
( is that it lets you create objects in your geode\325) 303.44 542.31 T
(s) 516.43 542.31 T
(source code, instead of having to instantiate them at run-time. Y) 180 529.31 T
(ou can) 477.26 529.31 T
(specify whole object-blocks, with a complete set of parent-child linkages, in) 180 516.31 T
(your source \336le; the compiler will turn these into) 180 503.31 T
2 9 Q
(GEOS) 407.97 503.31 T
2 10 Q
( blocks.) 434.14 503.31 T
-0.35 (Besides specifying objects, you can specify other chunks that should go in an) 180 483.31 P
-0.25 (object block. For example, you may want to put some text into a chunk in an) 180 470.31 P
(object block; that way) 180 457.31 T
(, a resource editor can modify the text \050if e.g. you are) 279.1 457.31 T
(translating the application for another country\051. Y) 180 444.31 T
(ou may also set up data) 411.31 444.31 T
(resources, i.e. LMem heaps that contain chunks, but no objects.) 180 431.31 T
0 14 Q
(4.3.1) 130.86 388.98 T
0 18 Q
(Setting Up a Resource) 180 388.98 T
5 10 Q
(start, end) 180 365.31 T
2 F
-0.01 (Every object must be in an object block. Non-object chunks may be in object) 180 345.31 P
(blocks, or they may be in non-object resources \050i.e. LMem heaps\051. Y) 180 332.31 T
(ou can) 488.73 332.31 T
(create these resources with the) 180 319.31 T
4 F
(start) 326.48 319.31 T
2 F
( and) 351.3 319.31 T
4 F
(end) 374.27 319.31 T
2 F
( directives. Every object in a) 393.53 319.31 T
4 F
(.ui) 180 306.31 T
2 F
( \336le must be between a) 193.33 306.31 T
4 F
(start) 302.25 306.31 T
2 F
( and the corresponding) 327.07 306.31 T
4 F
(end) 435.77 306.31 T
2 F
(.) 455.03 306.31 T
(The) 180 286.31 T
4 F
(start) 200.56 286.31 T
2 F
( and) 225.38 286.31 T
4 F
(end) 248.35 286.31 T
2 F
( directives have the following format:) 267.61 286.31 T
5 F
(start <resourceName> [, <resourceFlag>];) 216 270.31 T
(/* object definitions... */) 216 256.31 T
(end <resourceName>;) 216 242.31 T
4 F
(resourceName) 180 221.31 T
2 F
-0.47 (This is the name of the resource. The \336rst time you \322start\323 that) 243 209.31 P
-0.15 (resource,) 243 197.31 P
2 9 Q
-0.14 (UIC) 287.47 197.31 P
2 10 Q
-0.15 ( outputs control information for the LMem heap.) 304.97 197.31 P
(Y) 243 185.31 T
(ou may start and stop a resource several times in a) 248.93 185.31 T
4 F
(.ui) 487.67 185.31 T
2 F
( \336le.) 501 185.31 T
4 F
(resourceFlag) 180 166.31 T
2 F
(This is one of the three words \322data\323, \322ui\323, or \322app\323. \322data\323) 243 154.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "102" 8
%%Page: "103" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Creating Objects and Chunks) 361.96 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 527.84 671.34 T
2 F
(  103) 535.76 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(indicates that the block contains only non-object chunks. \322ui\323) 243 641.33 T
(indicates that the resource is an object block which should be) 243 629.33 T
(run by the user) 243 617.33 T
(-interface thread. \322app\323 indicates that the) 313.93 617.33 T
(resource is an object block which should be run by the) 243 605.33 T
(application thread.) 243 593.33 T
(A single resource may \322start\323 and \322end\323 many times in a) 180 574.33 T
4 F
(.ui) 442.63 574.33 T
2 F
( \336le. Thus, you) 455.96 574.33 T
-0.3 (can group your object declarations in whichever order is clear or convenient,) 180 561.33 P
(instead of being forced to group them by resource.) 180 548.33 T
0 14 Q
(4.3.2) 130.86 506 T
0 18 Q
(Creating Objects) 180 506 T
2 10 Q
-0.04 (Creating objects in Espire is simple. Y) 180 482.33 P
-0.04 (ou just specify the name of the object,) 355.17 482.33 P
-0.16 (and the initial settings for any \336elds which do not have the default settings.) 180 469.33 P
(The) 180 456.33 T
2 9 Q
(UIC) 200.56 456.33 T
2 10 Q
( translates this into appropriate Esp directives.) 218.06 456.33 T
(The basic format of an object de\336nition is:) 180 436.33 T
5 F
(<objName> = <className> [<ObjChunkFlag>]* {) 216 420.33 T
(/* instance data...*/) 240 406.33 T
(}) 216 392.33 T
4 F
(objName) 180 371.33 T
2 F
(This is the name of the object.) 243 371.33 T
4 F
(className) 180 352.33 T
2 F
-0.31 (This is the name of the object\325) 243 352.33 P
-0.31 (s class, as de\336ned in the) 378.55 352.33 P
4 F
-0.32 (.uih) 491.31 352.33 P
2 F
-0.31 ( \336le.) 511.49 352.33 P
4 F
(ObjChunkFlag) 180 333.33 T
2 F
-0.82 (This may be one or more \337ags of the) 243 321.33 P
4 F
-0.85 (ObjChunksFlags) 405.42 321.33 P
2 F
-0.82 ( bit\336eld,) 491.71 321.33 P
(speci\336ed with Espire conventions. This is typically either) 243 309.33 T
4 F
(vardataReloc) 243 297.33 T
2 F
( or) 312.64 297.33 T
4 F
(ignoreDirty) 327.64 297.33 T
2 F
(, or both.) 387.82 297.33 T
-0.79 (The object\325) 180 278.33 P
-0.79 (s class must have been de\336ned in a) 228.29 278.33 P
4 F
-0.81 (.uih) 387.01 278.33 P
2 F
-0.79 ( \336le, which must have been) 407.19 278.33 P
(included. If it is a) 180 265.33 T
2 9 Q
(GEOS) 263.9 265.33 T
2 10 Q
( standard class, you can simply include the \336le) 290.07 265.33 T
4 F
(generic.uih) 180 252.33 T
2 F
(.) 239.07 252.33 T
(Y) 180 232.33 T
(ou need not specify all instance data \336elds for the object. If you do not) 185.93 232.33 T
(specify a \336eld, the \336eld will have its default value.) 180 219.33 T
(T) 180 199.33 T
(o initialize a \336eld, put in a line like) 185.75 199.33 T
5 F
(<fieldName> =) 216 183.33 T
(<value>;) 324 183.33 T
4 F
(\336eldName) 180 162.33 T
2 F
(This is the name of the instance data \336eld, as speci\336ed in the) 243 162.33 T
(class\325) 243 150.33 T
(s Espire speci\336cation.) 267.08 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "103" 9
%%Page: "104" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  104) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(value) 180 641.33 T
2 F
(If this is a value which must be interpreted by Esp \050not) 243 641.33 T
2 9 Q
(UIC) 500.99 641.33 T
2 10 Q
(\051,) 518.49 641.33 T
(surround it with "double quotes". For example, suppose the) 243 629.33 T
-0.71 (\336eld\325) 243 617.33 P
-0.71 (s value is a constant which is only known by the assembler) 264.67 617.33 P
(\050perhaps because it\325) 243 605.33 T
(s de\336ned in a) 334.12 605.33 T
4 F
(.def) 398.39 605.33 T
2 F
( \336le\051. Y) 417.47 605.33 T
(ou would then) 449.33 605.33 T
(surround the constant with double quotes:) 243 593.33 T
5 F
(myField) 216 578.33 T
(= "MFC_CONSTANT_QUUX_FACTOR";) 288 578.33 T
2 F
(Y) 180 557.33 T
(ou can turn on or off certain bits in a record, while leaving the rest of the) 185.93 557.33 T
(\337ags in their default settings. Y) 180 544.33 T
(ou do this in much the same way you do it) 325.58 544.33 T
(when specifying classes, i.e.) 180 531.33 T
5 F
(<record> = default + <flagName>, - <flagname>... ;) 216 515.33 T
4 F
(record) 180 494.33 T
2 F
(This is the name of the instance data \336eld, as given in the) 243 482.33 T
(class\325) 243 470.33 T
(s Espire declaration.) 267.08 470.33 T
4 F
(\337agName) 180 451.33 T
2 F
-0.32 (This is the \337ag to turn on or off. If the \337ag is preceded by a \322+\323,) 243 451.33 P
(the \337ag\325) 243 439.33 T
(s default value will be) 279.49 439.33 T
3 F
(set) 383.78 439.33 T
2 F
(; if it is preceded by a \322-\323, its) 396.18 439.33 T
(default value will be) 243 427.33 T
3 F
(clear) 339.88 427.33 T
2 F
(.) 361.53 427.33 T
(For example, the line) 180 408.33 T
5 F
(aRecord = default +aFlag, -anotherFlag;) 216 393.33 T
2 F
(speci\336es that the \336eld) 180 372.33 T
3 F
(aRecord) 284.27 372.33 T
2 F
( should have its default settings, except that) 321.85 372.33 T
(the \336eld) 180 359.33 T
3 F
(aFlag) 220.56 359.33 T
2 F
( should be set, and) 247.41 359.33 T
3 F
(anotherFlag) 336.32 359.33 T
2 F
( should be cleared.) 392.79 359.33 T
0 14 Q
(4.3.2.1) 119.19 325.67 T
(Setting Up Parent-Child Links) 180 325.67 T
2 10 Q
(Gen and V) 180 303.33 T
(is objects are arranged in a hierarchy of children.) 228.64 303.33 T
2 9 Q
(GEOS) 458.83 303.33 T
2 10 Q
(implements this with special linkings to the \336rst child and the next sibling.) 180 290.33 T
-0.31 (However) 180 277.33 P
-0.31 (, you need not be concerned with this. T) 220.18 277.33 P
-0.31 (o set up an object\325) 400.1 277.33 P
-0.31 (s children,) 480.52 277.33 P
(you need only use the Espire) 180 264.33 T
4 F
(children) 315.56 264.33 T
2 F
( directive.) 359.64 264.33 T
(T) 180 244.33 T
(o specify an object\325) 185.75 244.33 T
(s children, put the following line in the object\325) 270.94 244.33 T
(s data:) 481.7 244.33 T
5 F
(children = <childName> [, <childName>]*;) 216 228.33 T
4 F
(childName) 180 207.33 T
2 F
(These are the names of the children, in order) 243 195.33 T
(, separated by) 450.23 195.33 T
(commas.) 243 183.33 T
2 9 Q
(UIC) 180 164.33 T
2 10 Q
( automatically sets up the parent\325) 197.5 164.33 T
(s and children\325) 352.53 164.33 T
(s links to each other in) 419.94 164.33 T
(the proper way) 180 151.33 T
(.) 248.52 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "104" 10
%%Page: "105" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Creating Objects and Chunks) 361.96 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 527.84 671.34 T
2 F
(  105) 535.76 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(4.3.2.2) 119.19 638.67 T
(Hints and V) 180 638.67 T
(ardata) 256.24 638.67 T
2 10 Q
-0.37 (Y) 180 616.33 P
-0.37 (ou may specify an object\325) 185.93 616.33 P
-0.37 (s hints and other vardata in the .ui \336le. Y) 298.35 616.33 P
-0.37 (ou can do) 485.81 616.33 P
(this by putting the \322hints\323 directive in the instance-data section. This) 180 603.33 T
(directive has the following format:) 180 590.33 T
5 F
(hints = {) 216 574.33 T
(<hintOrVardataName> [{ <value> }]) 252 560.33 T
(/* repeat as necessary... */) 252 543.33 T
(}) 216 526.33 T
4 F
(hintOrV) 180 505.33 T
(ardataName) 221.85 505.33 T
2 F
-0.36 (This is the name of the hint or vardata \336eld, as speci\336ed in the) 243 493.33 P
(class\325) 243 481.33 T
(s) 267.08 481.33 T
3 F
(assembly) 274.49 481.33 T
2 F
( de\336nition.) 316.33 481.33 T
4 F
(value) 180 462.33 T
2 F
-0.79 (This \336eld is optional. If the vardata \336eld takes a value, you may) 243 462.33 P
-0.24 (specify it here. Everything between the curly braces is written) 243 450.33 P
(to the) 243 438.33 T
4 F
(.rdf) 272.45 438.33 T
2 F
( \336le, i.e. it is not interpreted by the) 290.98 438.33 T
2 9 Q
(UIC) 454.9 438.33 T
2 10 Q
(.) 472.4 438.33 T
0 14 Q
(4.3.3) 130.86 397 T
0 18 Q
(Creating Chunks) 180 397 T
2 10 Q
(Chunks are very much like objects. They may be placed in an object block,) 180 373.33 T
(and referenced by name. They may also be placed in LMem data blocks.) 180 360.33 T
(T) 180 340.33 T
(o create a chunk which contains a string, use this format:) 185.75 340.33 T
5 F
(chunk <chunkName>) 216 324.33 T
(= "Text...";) 324 324.33 T
4 F
(chunkName) 180 303.33 T
2 F
-0.65 (This is the name of the chunk. The name can be used as an optr) 243 291.33 P
(to the chunk.) 243 279.33 T
2 9 Q
(UIC) 180 260.33 T
2 10 Q
( will create a chunk containing the text as a null-terminated string.) 197.5 260.33 T
(If a chunk contains some other kind of data, the format is this:) 180 240.33 T
5 F
(chunk <chunkName>) 216 224.33 T
(= {) 324 224.33 T
(<dataType>) 252 210.33 T
(<value>) 324 210.33 T
(/* repeat as necessary */) 216 196.33 T
(}) 216 182.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 11
%%Page: "106" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  106) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(chunkName) 180 641.33 T
2 F
-0.65 (This is the name of the chunk. The name can be used as an optr) 243 629.33 P
(to the chunk.) 243 617.33 T
4 F
(dataT) 180 598.33 T
(ype) 209.85 598.33 T
2 F
(This is the type of data. This is a standard Esp data type, not) 243 598.33 T
-0.7 (an Espire type. It may also be an application-de\336ned structure,) 243 586.33 P
(record, etc.) 243 574.33 T
4 F
(value) 180 555.33 T
2 F
(This is the value of the data. It is speci\336ed as in Esp.) 243 555.33 T
(Note that the initializers are evaluated in Esp, not in) 180 536.33 T
2 9 Q
(UIC) 428.75 536.33 T
2 10 Q
(. They should be) 446.25 536.33 T
-0.25 (speci\336ed as if they were Esp global variables, as described in section 2.3.1 of) 180 523.33 P
(chapter 2.) 180 510.33 T
-0.21 (Sometimes you will want an object\325) 180 490.33 P
-0.21 (s instance data \336eld to contain an optr to) 340.83 490.33 P
(a chunk created just for that \336eld. If the chunk doesn\325) 180 477.33 T
(t need a name, and is) 428.16 477.33 T
(used only by that object, you can de\336ne the chunk in that instance \336eld\325) 180 464.33 T
(s) 510.78 464.33 T
(initializer) 180 451.33 T
(, like so:) 224.82 451.33 T
5 F
(<field> = chunk {) 216 435.33 T
(/* chunk data */) 216 418.33 T
(}) 216 401.33 T
2 F
(or) 180 380.33 T
5 F
(<field> = chunk "String...") 216 364.33 T
4 F
(\336eld) 180 343.33 T
2 F
(This is the name of the instance data \336eld. This \336eld must be) 243 343.33 T
(able to contain an optr) 243 331.33 T
(.) 346.54 331.33 T
(The chunk is created in the same resource as the object. The chunk is) 180 312.33 T
-0.33 (unnamed, and the \336eld will contain an optr to the chunk. That is, the Espire) 180 299.33 P
(code) 180 286.33 T
5 F
(AnObject = MyVis {) 216 270.33 T
(chunkPtr = chunk {) 216 253.33 T
(dw) 252 239.33 T
(1, 2, 3, 4) 288 239.33 T
(}) 216 225.33 T
(}) 216 208.33 T
2 F
(is almost functionally identical to) 180 187.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 12
%%Page: "107" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Creating Objects and Chunks) 361.96 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 527.84 671.34 T
2 F
(  107) 535.76 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(4.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
5 10 Q
0 X
(AnObject = MyVis {) 216 641.33 T
(chunkPtr = MyChunk;) 216 627.33 T
(}) 216 613.33 T
(chunk MyChunk = {) 216 596.33 T
(dw) 252 582.33 T
(1, 2, 3, 4) 288 582.33 T
(}) 216 568.33 T
2 F
(The only difference is that in the second example, the name) 180 547.33 T
4 F
(MyChunk) 457.99 547.33 T
2 F
-0.15 (evaluates to an optr to the chunk. \050This allows you to examine the chunk by) 180 534.33 P
(name in Swat.\051) 180 521.33 T
0 14 Q
(4.3.4) 130.86 479 T
0 18 Q
(Creating V) 180 479 T
(isMonikers) 269.69 479 T
4 10 Q
(V) 180 455.33 T
(isMoniker) 187.15 455.33 T
2 F
(s are created much the way they are in Goc. As in Goc, a) 239.92 455.33 T
4 F
-0.83 (V) 180 442.33 P
-0.83 (isMoniker) 187.15 442.33 P
2 F
-0.81 ( may be a single moniker) 239.92 442.33 P
-0.81 (, or a list of monikers; if it is, the system) 350.92 442.33 P
(will choose whichever moniker is most appropriate for the speci\336c) 180 429.33 T
2 9 Q
(UI) 486.86 429.33 T
2 10 Q
( and) 497.86 429.33 T
(monitor) 180 416.33 T
(.) 215.74 416.33 T
(If the moniker is a simple text moniker) 180 396.33 T
(, the format is) 360.21 396.33 T
5 F
(visMoniker <monikerName> = "Text moniker";) 216 380.33 T
4 F
(monikerName) 180 359.33 T
2 F
(This is the name of the moniker) 243 347.33 T
(. The name can be used as an) 389.69 347.33 T
(optr to the moniker) 243 335.33 T
(.) 332.08 335.33 T
-0.47 (This creates a simple text moniker) 180 316.33 P
-0.47 (. T) 337.12 316.33 P
-0.47 (o create a more elaborate moniker) 347.96 316.33 P
-0.47 (, with) 502.67 316.33 P
(special attributes, use this format:) 180 303.33 T
5 F
(visMoniker <monikerName> = {) 216 287.33 T
([<attr>) 252 273.33 T
(= <initializer>;]*) 324 273.33 T
("Text moniker"; /* This is optional */) 252 259.33 T
(}) 216 242.33 T
4 F
(monikerName) 180 221.33 T
2 F
(This is the name of the moniker) 243 209.33 T
(. The name can be used as an) 389.69 209.33 T
(optr to the moniker) 243 197.33 T
(.) 332.08 197.33 T
4 F
(attr) 180 178.33 T
2 F
-0.85 (This is the name of a V) 243 178.33 P
-0.85 (isMoniker attribute. These are described) 344.13 178.33 P
(in \322V) 243 166.33 T
(isual Monikers\323 in \322GenClass,\323 Chapter) 265.71 166.33 T
(2 of the Object) 451.66 166.33 T
(Reference Book.) 243 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 13
%%Page: "108" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The UI Compiler) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  108) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(4.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(initializer) 180 641.33 T
2 F
(This is the value to which the \336eld should be set.) 243 641.33 T
-0.38 (If a \336eld in an object is of type) 180 622.33 P
4 F
-0.39 (V) 318.48 622.33 P
-0.39 (isMonikerComp) 325.63 622.33 P
2 F
-0.38 (, it may be initialized with) 408.59 622.33 P
-0.21 (the name of a) 180 609.33 P
4 F
-0.22 (V) 244.73 609.33 P
-0.22 (isMoniker) 251.88 609.33 P
2 F
-0.21 (, or you may create a) 303.91 609.33 P
4 F
-0.22 (V) 401.74 609.33 P
-0.22 (isMoniker) 408.89 609.33 P
2 F
-0.21 ( on the \337y) 461.66 609.33 P
-0.21 (, like) 505.85 609.33 P
(this:) 180 596.33 T
5 F
(<fieldName> = "Text moniker";) 216 580.33 T
2 F
(or) 180 559.33 T
5 F
(<fieldName> = {) 216 543.33 T
(/* Attributes & initializers */) 252 526.33 T
(}) 216 509.33 T
4 F
(\336eldName) 180 488.33 T
2 F
-0.41 (This is the name of the instance data \336eld. The \336eld must be of) 243 488.33 P
(type) 243 476.33 T
4 F
(V) 265.78 476.33 T
(isMonikerComp) 272.93 476.33 T
2 F
(.) 355.89 476.33 T
2 9 Q
(UIC) 180 457.33 T
2 10 Q
( will automatically create a chunk with the speci\336ed) 197.5 457.33 T
4 F
(V) 441.8 457.33 T
(isMoniker) 448.95 457.33 T
2 F
(, and) 500.98 457.33 T
(set the instance data \336eld to point to that chunk.) 180 444.33 T
(Y) 180 424.33 T
(ou may wish to have an instance data \336eld contain a list of V) 185.93 424.33 T
(isMonikers.) 466.66 424.33 T
2 9 Q
-0.61 (GEOS) 180 411.33 P
2 10 Q
-0.68 ( will then automatically use whichever moniker is most appropriate. T) 206.17 411.33 P
-0.68 (o) 523.9 411.33 P
(do so, initialize the instance data \336eld like this:) 180 398.33 T
5 F
(<fieldName> = list {) 216 382.33 T
(<monikerName> [, <monikerName>]*) 252 368.33 T
(}) 216 354.33 T
4 F
(\336eldName) 180 333.33 T
2 F
-0.41 (This is the name of the instance data \336eld. The \336eld must be of) 243 333.33 P
(type) 243 321.33 T
4 F
(V) 265.78 321.33 T
(isMonikerComp) 272.93 321.33 T
2 F
(.) 355.89 321.33 T
4 F
(monikerName) 180 302.33 T
2 F
-0.29 (This is the name of a) 243 290.33 P
4 F
-0.3 (V) 340.7 290.33 P
-0.3 (isMoniker) 347.85 290.33 P
2 F
-0.29 (. The moniker may be in the) 399.88 290.33 P
(same or a different resource.) 243 278.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 14
%%DocumentFonts: Helvetica-Bold
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Roman
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%EOF
