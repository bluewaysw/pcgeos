%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 20 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /NewCenturySchlbk-Roman FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /NewCenturySchlbk-Bold FMFONTDEFINE
7 0 /Times-Bold FMFONTDEFINE
8 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "17" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Purpose of Esp) 426.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  17) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
2 10 Q
0 X
(Esp is an assembly language for 80x86 microprocessors. It is designed for) 180 610.3 T
(creating applications, libraries, and drivers that will run under) 180 597.3 T
2 9 Q
(GEOS) 474.66 597.3 T
2 10 Q
(. As) 500.83 597.3 T
-0.07 (such, it is very similar to other common 80x86 assembly languages \050such as) 180 584.3 P
2 9 Q
-0.06 (MASM) 180 571.3 P
2 10 Q
-0.06 (\051, but has special features and functionality to make it easier to write) 209.16 571.3 P
2 9 Q
(GEOS) 180 558.3 T
2 10 Q
( code.) 206.17 558.3 T
(T) 180 538.3 T
(o experienced) 185.75 538.3 T
2 9 Q
(MASM) 251.3 538.3 T
2 10 Q
( programmers, Esp code will be easy to read. V) 280.46 538.3 T
(ariable) 495.49 538.3 T
(declarations will be slightly different, and there will be a few instructions) 180 525.3 T
(\050actually pseudo-ops\051 which look new) 180 512.3 T
(. Nevertheless, Esp code will look very) 350.57 512.3 T
(familiar) 180 499.3 T
(. This chapter describes the stylistic differences between Esp and) 216.49 499.3 T
2 9 Q
(MASM) 180 486.3 T
2 10 Q
(.) 209.16 486.3 T
-0.7 (This book assumes that you already know how to program in 80x86 assembly) 180 466.3 P
(language.) 180 453.3 T
0 14 Q
(2.1) 142.54 400.97 T
0 24 Q
(The Purpose of Esp) 180 400.97 T
2 10 Q
-0.05 (Esp is mainly a superset of) 180 375.3 P
2 9 Q
-0.05 (MASM) 307.29 375.3 P
2 10 Q
-0.05 (. W) 336.45 375.3 P
-0.05 (ith the exception of a few special cases) 351.4 375.3 P
(\050which are noted in this chapter\051,) 180 362.3 T
2 9 Q
(MASM) 336.67 362.3 T
2 10 Q
( code can be ported intact to Esp) 365.83 362.3 T
-0.35 (programs without requiring major modi\336cations. Y) 180 349.3 P
-0.35 (ou should not \336nd it hard) 412.71 349.3 P
(to reuse your existing code.) 180 336.3 T
-0.16 (Esp is, however) 180 316.3 P
-0.16 (, philosophically different from other assembly languages. It) 251.35 316.3 P
(is designed for an object-oriented, multitasking environment. This means) 180 303.3 T
(that it works with different assumptions from other assembly languages.) 180 290.3 T
0 14 Q
(2.2) 142.54 237.97 T
0 24 Q
(Esp Ground Rules) 180 237.97 T
2 10 Q
(There are certain rules you must follow when programming in Esp. These) 180 212.3 T
(rules are imposed by the nature of) 180 199.3 T
2 9 Q
(GEOS) 341.31 199.3 T
2 10 Q
(.) 367.48 199.3 T
-0.3 (If you violate these rules, the results are unpredictable. Error) 180 179.3 P
-0.3 (-checking code) 461.97 179.3 P
-0.74 (may \336nd violations of these rules; however) 180 166.3 P
-0.74 (, this is not guaranteed. Therefore,) 372.08 166.3 P
(you must be sure to follow the rules under all circumstances.) 180 153.3 T
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
0 -208 1000 792 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 1
%%Page: "18" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  18) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(2.2.1) 130.86 636 T
0 18 Q
(GEOS is a Multitasking Environment) 180 636 T
2 9 Q
-0.2 (GEOS) 180 612.33 P
2 10 Q
-0.22 ( uses preemptive multitasking. It uses interrupts to halt each thread\325) 206.17 612.33 P
-0.22 (s) 523.81 612.33 P
-0.54 (execution when its allotted time slice ends. This has two major consequences) 180 599.33 P
-0.29 (for assembly programs. First, there are more interrupts being sent than you) 180 586.33 P
(might expect. Second, if interrupts are disabled, this drastically degrades) 180 573.33 T
2 9 Q
-0.05 (GEOS) 180 560.33 P
2 10 Q
-0.06 (\325) 206.17 560.33 P
-0.06 (s performance; under almost no circumstances should a geode disable) 207.84 560.33 P
(interrupts. In fact, under the) 180 547.33 T
2 9 Q
(GEOS) 316.66 547.33 T
(API) 345.61 547.33 T
2 10 Q
(, only the kernel and drivers are) 361.78 547.33 T
(permitted to disable interrupts; libraries and applications must leave) 180 534.33 T
(interrupts enabled at all times.) 180 521.33 T
(Experienced) 180 501.33 T
2 9 Q
(MASM) 239.99 501.33 T
2 10 Q
( programmers will already know how to cope with) 269.15 501.33 T
(interrupts, but it\325) 180 488.33 T
(s worth reiterating the basic rules. The main thing to) 260.01 488.33 T
-0.29 (remember is that the interrupt handlers use the stack to save the state. The) 180 475.33 P
(interrupt can occur after any instruction. Whenever you use an instruction) 180 462.33 T
-0.86 (which alters the stack, or makes assumptions about the stack, you should ask) 180 449.33 P
-0.51 (yourself what would happen if a context switch occurred right before or right) 180 436.33 P
(after that instruction.) 180 423.33 T
-0.56 (For example, suppose you want to read the top word on the stack into) 180 403.33 P
3 F
-1.22 (cx) 496.23 403.33 P
2 F
-0.56 (, but) 508.23 403.33 P
(you want it to stay on the stack. The canonical way to do this would be the) 180 390.33 T
(following:) 180 377.33 T
4 F
(pop) 216 361.33 T
(cx) 252 361.33 T
(; Read the value . . .) 288 361.33 T
(push) 216 347.33 T
(cx) 252 347.33 T
(; . . . and push it back.) 288 347.33 T
2 F
(This takes only two bytes and 27 cycles; this is fairly good for a memory) 180 326.33 T
-0.8 (reference. An overzealous optimizer might think, \322W) 180 313.33 P
-0.8 (ell, that word\325) 417.4 313.33 P
-0.8 (s still right) 479.51 313.33 P
(there above the stack, so we don\325) 180 300.33 T
(t have to push it back, do we?\323 He might) 330.96 300.33 T
(write the following bad code:) 180 287.33 T
4 F
(pop) 216 271.33 T
(cx) 252 271.33 T
(sub) 216 257.33 T
(sp, 2) 252 257.33 T
(; THIS IS VERY BAD) 288 257.33 T
2 F
-0.46 (\322Aha,\323 he might think, \322This takes only 16 cycles!\323 Unfortunately) 180 236.33 P
-0.46 (, the code is) 475.96 236.33 P
-0.65 (extremely fragile. If a context switch occurs right after the) 180 223.33 P
4 F
-1.41 (pop) 446.07 223.33 P
2 F
-0.65 (, the interrupt) 464.07 223.33 P
-0.59 (handler will push all the registers onto the stack; this will overwrite the data) 180 210.33 P
-0.28 (at that location. The worst part is that this bug is intermittent; the code will) 180 197.33 P
-0.49 (work \336ne, as long as the context switch doesn\325) 180 184.33 P
-0.49 (t occur at that precise location.) 388.54 184.33 P
(That means the bug can easily sneak through testing.) 180 171.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 2
%%Page: "19" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Ground Rules) 435.86 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  19) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.2) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.78 (It bears repeating: Whenever you perform an unusual operation on the stack,) 180 641.33 P
(ask yourself what would happen if a context switch occurred immediately) 180 628.33 T
(before or immediately after the instruction.) 180 615.33 T
0 14 Q
(2.2.2) 130.86 573 T
0 18 Q
(Upward and Downward Compatibility) 180 573 T
2 9 Q
(GEOS) 180 549.33 T
2 10 Q
( is intended to run on a wide range of platforms, from 8088-based) 206.17 549.33 T
(machines up through powerful desktop computers \05080486s and beyond\051.) 180 536.33 T
-0.77 (Because of this, you should avoid writing code that makes assumptions about) 180 523.33 P
(which processor is being used. Even if you know you\325re writing for a) 180 510.33 T
2 9 Q
(GEOS) 495.94 510.33 T
2 10 Q
(platform which uses a particular processor) 180 497.33 T
(, you should write more \337exible) 376.48 497.33 T
(code; this will make it much easier to port the code across several) 180 484.33 T
2 9 Q
(GEOS) 484.85 484.33 T
2 10 Q
(platforms.) 180 471.33 T
(The main thing is to use only those instructions that are available on all) 180 451.33 T
(80x86 machines. \050This also means not using instruction variants which are) 180 438.33 T
(available on only some machines; for example, you may not pass an) 180 425.33 T
(immediate argument to) 180 412.33 T
4 F
(shl) 291.87 412.33 T
2 F
(\051. Do not try to access the 80386\325) 309.87 412.33 T
(s 32-bit) 458.98 412.33 T
(registers.) 180 399.33 T
(A future version of) 180 379.33 T
2 9 Q
(GEOS) 269.25 379.33 T
2 10 Q
( may take advantage of protected mode in more) 295.42 379.33 T
(powerful chips. Again, if you take certain precautions, your code will run) 180 366.33 T
(unchanged under this version of) 180 353.33 T
2 9 Q
(GEOS) 331.66 353.33 T
2 10 Q
(. Y) 357.83 353.33 T
(ou must follow these rules:) 369.32 353.33 T
1 F
(u) 180 333.33 T
2 F
(Perform no arithmetic on segment register values. In protected mode, a) 198 333.33 T
(segment register doesn\325) 198 321.33 T
(t contain a physical segment address; rather) 306.71 321.33 T
(, it) 511.36 321.33 T
-0.3 (contains an index \050or) 198 309.33 P
5 F
-0.3 (selector) 296.62 309.33 P
2 F
-0.3 (\051 into a hardware segment descriptor table.) 330.67 309.33 P
(Adding one to a segment register doesn\325) 198 297.33 T
(t advance it 16 bytes, as in real) 381.72 297.33 T
(mode; it changes it to a completely different selector) 198 285.33 T
(.) 437.83 285.33 T
1 F
(u) 180 266.33 T
2 F
(Do not attempt to access interrupt vectors except through) 198 266.33 T
2 9 Q
(GEOS) 467.26 266.33 T
2 10 Q
(. V) 493.43 266.33 T
(ery) 505.29 266.33 T
(few applications will need to do anything like this, anyway) 198 254.33 T
(.) 468.06 254.33 T
1 F
(u) 180 235.33 T
2 F
-0.08 (Do not try to use the) 198 235.33 P
4 F
-0.17 (sti) 295.32 235.33 P
2 F
-0.08 (,) 313.32 235.33 P
4 F
-0.17 (cli) 318.8 235.33 P
2 F
-0.08 (,) 336.8 235.33 P
4 F
-0.17 (in) 342.28 235.33 P
2 F
-0.08 ( or) 354.28 235.33 P
4 F
-0.17 (out) 369.12 235.33 P
2 F
-0.08 ( instructions in applications or) 387.12 235.33 P
(libraries; they are privileged instructions under protected mode. Only) 198 223.33 T
(drivers and the kernel may use these instructions.) 198 211.33 T
1 F
(u) 180 192.33 T
2 F
-0.3 (Do not try to write self-modifying code. It is extremely dif\336cult to do this) 198 192.33 P
(under protected mode.) 198 180.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 3
%%Page: "20" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  20) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(u) 180 641.33 T
2 F
(Do not try to use segment registers for temporary data storage. Under) 198 641.33 T
(protected mode, the processor will complain if you load anything but a) 198 629.33 T
(valid selector into a segment register) 198 617.33 T
(.) 368.2 617.33 T
(There is currently no way for geodes to use a \337oating-point coprocessor) 180 598.33 T
(directly) 180 585.33 T
(. However) 214.07 585.33 T
(, all) 259.81 585.33 T
2 9 Q
(GEOS) 280.01 585.33 T
2 10 Q
( \337oating-point routines will automatically use a) 306.18 585.33 T
(\337oating-point coprocessor if one is present.) 180 572.33 T
0 14 Q
(2.2.3) 130.86 530 T
0 18 Q
(Flags) 180 530 T
2 9 Q
(GEOS) 180 506.33 T
2 10 Q
( makes certain assumptions about the \337ags.Y) 206.17 506.33 T
(our application must) 415.29 506.33 T
(follow these if it is to work with) 180 493.33 T
2 9 Q
(GEOS) 328.55 493.33 T
2 10 Q
( properly) 354.72 493.33 T
(.) 395.27 493.33 T
(The 80x86 \337ags are divided into two groups:) 180 473.33 T
5 F
(status \337ags) 387.08 473.33 T
2 F
( and) 439.29 473.33 T
5 F
(control \337ags) 462.26 473.33 T
2 F
(.) 518.54 473.33 T
(There are \336ve status \337ags: the) 180 460.33 T
5 F
(over\337ow) 323.54 460.33 T
2 F
( \337ag, the) 361.5 460.33 T
5 F
(sign) 404.66 460.33 T
2 F
( \337ag, the) 423.91 460.33 T
5 F
(zero) 467.07 460.33 T
2 F
( \337ag, the) 485.58 460.33 T
5 F
-0.34 (auxiliary-carry) 180 447.33 P
2 F
-0.34 ( \337ag, and the) 249.41 447.33 P
5 F
-0.34 (carry) 311.4 447.33 P
2 F
-0.34 ( \337ag \050abbreviated as) 335.46 447.33 P
4 F
-0.74 (OF) 430.6 447.33 P
2 F
-0.34 (,) 441.49 447.33 P
4 F
-0.74 (SF) 446.71 447.33 P
2 F
-0.34 (,) 457.6 447.33 P
4 F
-0.74 (ZF) 462.82 447.33 P
2 F
-0.34 (,) 473.71 447.33 P
4 F
-0.74 (AF) 478.93 447.33 P
2 F
-0.34 (, and) 489.82 447.33 P
4 F
-0.74 (CF) 514.89 447.33 P
2 F
-0.34 (,) 525.78 447.33 P
(respectively\051. Status \337ags provide information about the results of recent) 180 434.33 T
(operations. For example, if the result of a subtraction operation is zero, the) 180 421.33 T
-0.58 (zero \337ag \050) 180 408.33 P
4 F
-1.24 (ZF) 224.03 408.33 P
2 F
-0.58 (\051 is set. Routines are allowed to set and change these status \337ags) 236.03 408.33 P
(at will. Even if a routine says that it destroys nothing, it is presumed to) 180 395.33 T
-0.34 (destroy all the status \337ags unless it speci\336cally says \322\337ags preserved.\323 Some) 180 382.33 P
(routines will return \337ags with meaningful settings; for example, many) 180 369.33 T
-0.61 (routines set) 180 356.33 P
4 F
-1.32 (CF) 236.19 356.33 P
2 F
-0.61 ( to indicate an error) 248.19 356.33 P
-0.61 (, and clear it otherwise. In these cases, the) 337.04 356.33 P
(routine\325) 180 343.33 T
(s reference will describe all values returned in \337ags. By the same) 215.37 343.33 T
-0.09 (token, you may call routines with any settings you wish for the status \337ags,) 180 330.33 P
(unless the routine speci\336cally requires that the status \337ags have certain) 180 317.33 T
(settings.) 180 304.33 T
(There are three) 180 284.33 T
5 F
(control \337ags) 255 284.33 T
2 F
(: the) 311.28 284.33 T
5 F
(direction) 334.62 284.33 T
2 F
( \337ag, the) 375.34 284.33 T
5 F
(interrupt) 418.5 284.33 T
2 F
( \337ag, and the) 460.15 284.33 T
5 F
-0.79 (trap) 180 271.33 P
2 F
-0.79 ( \337ag \050abbreviated as) 199.44 271.33 P
4 F
-1.7 (DF) 292.8 271.33 P
2 F
-0.79 (,) 303.69 271.33 P
4 F
-1.7 (IF) 308.46 271.33 P
2 F
-0.79 (, and) 319.35 271.33 P
4 F
-1.7 (TF) 343.53 271.33 P
2 F
-0.79 (, respectively\051. These \337ags change how) 354.42 271.33 P
(the processor operates. Routines have much less leeway about how and) 180 258.33 T
(whether to use these \337ags.) 180 245.33 T
-0.11 (Most routines should leave interrupts enabled. In practice, only drivers will) 180 225.33 P
(need to disable interrupts. Most kernel routines require that they be called) 180 212.33 T
(with interrupts enabled. If a routine doesn\325) 180 199.33 T
(t speci\336cally say that it can be) 378.91 199.33 T
(called with interrupts disabled, then it cannot be. This is not an issue for) 180 186.33 T
(most programmers, since the) 180 173.33 T
2 9 Q
(GEOS) 317.04 173.33 T
(API) 345.99 173.33 T
2 10 Q
( permits only drivers to disable) 362.16 173.33 T
(interrupts.) 180 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 4
%%Page: "21" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  21) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.16 (All) 180 641.33 P
2 9 Q
-0.14 (GEOS) 196.14 641.33 P
2 10 Q
-0.16 ( routines assume that the direction \337ag \050) 222.32 641.33 P
4 F
-0.34 (DF) 409.56 641.33 P
2 F
-0.16 (\051 is cleared. Feel free to) 421.56 641.33 P
-0.32 (set this \337ag before using string instructions; however) 180 628.33 P
-0.32 (, you should make sure) 423.14 628.33 P
(to clear) 180 615.33 T
4 F
(DF) 217.04 615.33 T
2 F
( before calling any kernel routine. Again, some routines may) 229.04 615.33 T
(speci\336cally permit you to call them with) 180 602.33 T
4 F
(DF) 367.8 602.33 T
2 F
( set; you should not assume this) 379.8 602.33 T
(is the case unless the routine reference says so.) 180 589.33 T
(Y) 180 569.33 T
(ou should never change) 185.93 569.33 T
4 F
(TF) 297.41 569.33 T
2 F
(; this is used by the debugger) 309.41 569.33 T
(.) 443.69 569.33 T
0 14 Q
(2.3) 142.54 517 T
0 24 Q
(Differences from MASM) 180 517 T
2 10 Q
-0.35 (Esp has a number of differences with other 80x86 assemblers. Some of these) 180 491.33 P
(are entirely transparent to the programmer; these differences will not be) 180 478.33 T
(detailed here.) 180 465.33 T
(The main algorithmic difference between Esp and) 180 445.33 T
2 9 Q
(MASM) 412.98 445.33 T
2 10 Q
( is that Esp only) 442.14 445.33 T
-0.74 (reads the source code once. As a result,) 180 432.33 P
2 9 Q
-0.67 (MASM) 357.21 432.33 P
2 10 Q
-0.74 ( directives that rely on multiple) 386.37 432.33 P
(passes are treated differently; for example, the) 180 419.33 T
2 9 Q
(IF1) 398.72 419.33 T
2 10 Q
( and) 413.39 419.33 T
2 9 Q
(IF2) 436.36 419.33 T
2 10 Q
( directives are) 451.03 419.33 T
(both synonymous with) 180 406.33 T
2 9 Q
(IF) 287.05 406.33 T
2 10 Q
(.) 295.61 406.33 T
-0.16 (In all cases where an algorithmic break is not involved, you can force Esp to) 180 386.33 P
(use the) 180 373.33 T
2 9 Q
(MASM) 216.3 373.33 T
2 10 Q
( syntax and directives by passing the \337ag \322-m\323.) 245.46 373.33 T
0 14 Q
(2.3.1) 130.86 331 T
0 18 Q
(Data T) 180 331 T
(ypes) 233.68 331 T
2 10 Q
(Esp makes it easy to declare and de\336ne structures, records, enumerated) 180 307.33 T
-0.57 (types, and similar constructs. Its conventions are, however) 180 294.33 P
-0.57 (, slightly different) 446.77 294.33 P
(from those of) 180 281.33 T
2 9 Q
(MASM) 242.96 281.33 T
2 10 Q
(; you should be aware of these differences.) 272.12 281.33 T
0 14 Q
(2.3.1.1) 119.19 247.67 T
(Constants) 180 247.67 T
2 10 Q
-0.67 (Esp\325) 180 225.33 P
-0.67 (s rules for constants are almost the same as) 199.26 225.33 P
2 9 Q
-0.6 (MASM) 398.67 225.33 P
2 10 Q
-0.67 (\325) 427.83 225.33 P
-0.67 (s. Esp is slightly more) 429.5 225.33 P
(versatile. For example, hexadecimal constants may be speci\336ed with either) 180 212.33 T
-0.59 (the) 180 199.33 P
2 9 Q
-0.53 (MASM) 197.19 199.33 P
2 10 Q
-0.59 ( convention or the C convention; that is, \322) 226.35 199.33 P
4 F
-1.28 (123h) 412.54 199.33 P
2 F
-0.59 (\323 is exactly the same) 436.54 199.33 P
(as \322) 180 186.33 T
4 F
(0x123) 196.86 186.33 T
2 F
(\323.) 226.86 186.33 T
-0.3 (A single character surrounded by double quotes is parsed as the) 180 166.33 P
2 9 Q
-0.27 (ASCII) 474.86 166.33 P
2 10 Q
-0.3 ( value) 500.85 166.33 P
(of that character; for example,) 180 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 5
%%Page: "22" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  22) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(LETTER_A) 216 641.33 T
(= "a") 288 641.33 T
2 F
(is identical to) 180 620.33 T
4 F
(LETTER_A) 216 604.33 T
(= 61h) 288 604.33 T
2 F
(Y) 180 583.33 T
(ou may use any of the standard C character escapes; these are listed in) 185.93 583.33 T
(T) 180 570.33 T
(able) 186.05 570.33 T
(2-) 208.1 570.33 T
(2 on page) 216.99 570.33 T
1 F
(Y) 263.67 570.33 T
2 F
(39. Since \322) 274.37 570.33 T
4 F
(\134) 322.72 570.33 T
2 F
(\323 is the escape character) 328.72 570.33 T
(, you have to use a) 440.02 570.33 T
(doubled backslash to put a backslash in the character string; that is,) 180 557.33 T
4 F
("\134\134") 499.51 557.33 T
2 F
(speci\336es the single character) 180 544.33 T
4 F
(5Ch) 316.11 544.33 T
2 F
(.) 334.11 544.33 T
0 14 Q
(2.3.1.2) 119.19 510.67 T
(Simple T) 180 510.67 T
(ypes) 237.32 510.67 T
2 10 Q
(Esp de\336nes many standard data types beyond those provided by) 180 488.33 T
2 9 Q
(MASM) 479.48 488.33 T
2 10 Q
(.) 508.64 488.33 T
(These types can be used alone, or they can serve as building blocks for) 180 475.33 T
(structures. The types are listed in T) 180 462.33 T
(able) 345.32 462.33 T
(2-) 367.37 462.33 T
(1 on page) 376.26 462.33 T
1 F
(Y) 422.94 462.33 T
2 F
(22.) 433.64 462.33 T
(Swat can read symbolic information about the data types to display their) 180 442.33 T
-0.31 (values in the most useful format. For example, if you have an array of) 180 429.33 P
6 F
-0.32 (byte) 501.31 429.33 P
2 F
-0.31 (s) 523.9 429.33 P
-0.01 (containing the values) 180 416.33 P
4 F
-0.03 (46h) 282.02 416.33 P
2 F
-0.01 (,) 300.02 416.33 P
4 F
-0.03 (6Fh) 305.56 416.33 P
2 F
-0.01 (,) 323.56 416.33 P
4 F
-0.03 (6Fh) 329.11 416.33 P
2 F
-0.01 (,) 347.11 416.33 P
4 F
-0.03 (21h) 352.66 416.33 P
2 F
-0.01 (, Swat will display the hex values;) 370.66 416.33 P
-0.41 (but if the same values are) 180 403.33 P
6 F
-0.42 (sbyte) 300.16 403.33 P
2 F
-0.41 (s, Swat will display them as signed, decimal) 327.75 403.33 P
81 144 531 648 C
180 144 531 396 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 150.98 531 384.98 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 378.32 T
(able) 185.37 378.32 T
(2-) 208.16 378.32 T
(1) 217.05 378.32 T
5 F
(Major Esp Data T) 225.39 378.32 T
(ypes) 307.64 378.32 T
180 357.01 531 361.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 357.01 531 361.98 R
7 X
0 0 0 1 0 0 0 K
V
152 359.97 755 359.97 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 396 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Type) 180 365.32 T
(Size) 252 365.32 T
(Description) 288 365.32 T
2 F
(byte) 180 348.34 T
(1) 252 348.34 T
(Unsigned 8-bit integer \0500\321255\051; synonym is \322db\323) 288 348.34 T
(sbyte) 180 334.34 T
(1) 252 334.34 T
(Signed 8-bit integer \050-128\321127\051; synonym is \322sb\323) 288 334.34 T
(char) 180 320.34 T
(1) 252 320.34 T
2 9 Q
(GEOS) 288 320.34 T
2 10 Q
( character; synonym is \322dc\323) 314.17 320.34 T
(word) 180 306.34 T
(2) 252 306.34 T
(Unsigned 16-bit integer \0500\32165,535\051) 288 306.34 T
(sword) 180 292.34 T
(2) 252 292.34 T
(Signed 16-bit integer \050-32,768\32132,767\051) 288 292.34 T
(dword) 180 278.34 T
(4) 252 278.34 T
(Unsigned 32-bit integer \0500\3214,294,967,296\051) 288 278.34 T
(sdword) 180 264.34 T
(2) 252 264.34 T
(Signed 32-bit integer) 288 264.34 T
(\050-2,147,483,648\3212,147,483,647\051) 288 252.34 T
(nptr) 180 238.34 T
(2) 252 238.34 T
(Near pointer \050i.e. offset address\051) 288 238.34 T
(fptr) 180 224.34 T
(4) 252 224.34 T
(Far pointer \050i.e. segment + offset\051) 288 224.34 T
(hptr) 180 210.34 T
(2) 252 210.34 T
(Global handle) 288 210.34 T
(lptr) 180 196.34 T
(2) 252 196.34 T
(Chunk handle \050i.e. near pointer to a near pointer\051) 288 196.34 T
(optr) 180 182.34 T
(4) 252 182.34 T
(object descriptor; high word is hptr, low word is lptr) 288 182.34 T
(sptr) 180 168.34 T
(2) 252 168.34 T
(Segment address \050or descriptor\051.) 288 168.34 T
5 F
(These are the main Esp data types, with their size in bytes.) 180 154.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 6
%%Page: "23" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  23) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.06 (integers \050i.e. \322) 180 641.33 P
4 F
-0.14 (70,) 243.95 641.33 P
-0.14 (111,) 267.95 641.33 P
-0.14 (111,) 297.95 641.33 P
-0.14 (33) 327.95 641.33 P
2 F
-0.06 (\323\051; and if they are declared as an array of) 339.95 641.33 P
6 F
(char) 180 628.33 T
2 F
(s, Swat will translate the values into) 203.71 628.33 T
2 9 Q
(ASCII) 376.54 628.33 T
2 10 Q
( characters \050i.e \322) 402.53 628.33 T
4 F
(Foo!) 477.53 628.33 T
2 F
(\323\051.) 501.53 628.33 T
-0.06 (Similarly) 180 615.33 P
-0.06 (, Swat can use the information about a pointer) 222.05 615.33 P
-0.06 (\325) 437.18 615.33 P
-0.06 (s type to display its) 438.85 615.33 P
(referent appropriately) 180 602.33 T
(.) 281.66 602.33 T
0 14 Q
(2.3.1.3) 119.19 568.67 T
(Enumerated T) 180 568.67 T
(ypes) 272.32 568.67 T
2 10 Q
(Sometimes you will have a variable that indicates one of a number of) 180 546.33 T
(conditions by holding an arbitrarily-chosen integer) 180 533.33 T
(. For example, you may) 413.9 533.33 T
(have variables that indicate a month, using a different integer to indicate) 180 520.33 T
(each month. In these cases, it is best to create an enumerated type.) 180 507.33 T
(Enumerated types let you use the values by name, making the code much) 180 494.33 T
-0.21 (easier to read. Furthermore, when you use Swat to examine a variable of an) 180 481.33 P
-0.18 (enumerated type, you will \050by default\051 be shown the value\325) 180 468.33 P
-0.18 (s name instead of) 448.02 468.33 P
(its numerical value; this makes debugging easier) 180 455.33 T
(.) 405.78 455.33 T
(Esp gives you considerable control over enumerated types. Y) 180 435.33 T
(ou can declare) 458.53 435.33 T
(how long the values will be, what the initial value should be, and by how) 180 422.33 T
(much the values should be incremented. T) 180 409.33 T
(o de\336ne a new enumerated type,) 374.65 409.33 T
(use a declaration of the format) 180 396.33 T
4 F
(<typename> etype <size> [, <first> [, <step>]]) 216 380.33 T
6 F
(typename) 180 359.33 T
2 F
(Any arbitrary name for the type. Usually this will begin with) 243 359.33 T
(the application\325) 243 347.33 T
(s name, to avoid con\337icting with other) 313.94 347.33 T
(enumerated type names. By convention, the type name is) 243 335.33 T
(singular \050i.e. \322) 243 323.33 T
6 F
(HelloColor) 308.01 323.33 T
2 F
(\323, not \322) 364.31 323.33 T
6 F
(HelloColors) 395.43 323.33 T
2 F
(\323\051.) 456.73 323.33 T
6 F
(size) 180 304.33 T
2 F
(The size of values of this type. This may be either of the) 243 304.33 T
(reserved words \322) 243 292.33 T
4 F
(word) 319.66 292.33 T
2 F
(\323 or \322) 343.66 292.33 T
4 F
(byte) 366.44 292.33 T
2 F
(\323.) 390.44 292.33 T
6 F
(\336rst) 180 273.33 T
2 F
-0.29 (The value of the \336rst member of the type. This defaults to zero.) 243 273.33 P
6 F
(step) 180 254.33 T
2 F
(The increment between members of the type. This defaults to) 243 254.33 T
(one.) 243 242.33 T
(Each member of the enumerated type is declared like this:) 180 223.33 T
4 F
(<name> enum <typename> [, <value>]) 216 207.33 T
6 F
(name) 180 186.33 T
2 F
(The name of this member of the type. As a matter of) 243 186.33 T
-0.2 (convention, the name of each member of a type begins with an) 243 174.33 P
(abbreviation of the type name; for example, a member of) 243 162.33 T
6 F
(HelloColor) 243 150.33 T
2 F
( might be named) 299.3 150.33 T
2 9 Q
(HC_BLUE) 379.69 150.33 T
2 10 Q
(.) 424.52 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 7
%%Page: "24" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  24) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
6 10 Q
0 X
(typename) 180 641.33 T
2 F
(The name of the enumerated type.) 243 641.33 T
6 F
(value) 180 622.33 T
2 F
(The value of this member of the type. This defaults to the) 243 622.33 T
(previous element\325) 243 610.33 T
(s value plus the) 323.93 610.33 T
4 F
(step) 399.5 610.33 T
2 F
( speci\336ed in the type) 423.5 610.33 T
(declaration.) 243 598.33 T
(For example, to declare an enumerated type for the months of the year) 180 579.33 T
(, you) 505.95 579.33 T
(might do this:) 180 566.33 T
81 533.98 531 546 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 533.98 531 546 R
7 X
0 0 0 1 0 0 0 K
V
76.5 541.23 617.5 544.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 527.31 T
(2-) 147.13 527.31 T
(1 Declaring an Enumerated T) 156.02 527.31 T
(ype) 293.1 527.31 T
4 9 Q
(HelloMonth) 81 512.98 T
(etype byte, 1) 168.98 512.98 T
(; One byte is enough to hold the twelve months.) 256.5 512.98 T
(; We specify that the first month should have a) 256.5 501.98 T
(; value of one, as is conventional.) 256.5 490.98 T
(HM_JANUARY) 81 472.98 T
(enum HelloMonth) 168.98 472.98 T
(HM_FEBRUARY) 81 461.98 T
(enum HelloMonth) 168.98 461.98 T
(HM_MARCH) 81 450.98 T
(enum HelloMonth) 168.98 450.98 T
(; and so on . . .) 256.5 450.98 T
81 426.95 531 438.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 426.95 531 438.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 434.2 617.5 437.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
-0.14 (Note that members of the enumerated type need not be declared all at once.) 180 409.29 P
(Y) 180 396.29 T
(ou can have other declarations, or even code, intervening.) 185.93 396.29 T
-0.61 (The name of the enumerated type will always evaluate to one step more than) 180 376.29 P
(the last member of the enumerated type \050that is, the last one) 180 363.29 T
5 F
(before) 464.12 363.29 T
2 F
( the use) 491.33 363.29 T
-0.04 (of the type\325) 180 350.29 P
-0.04 (s name; more members could be declared later\051. Y) 230.49 350.29 P
-0.04 (ou can use this) 459.29 350.29 P
(to verify that a value is in bounds for an enumerated type. For example,) 180 337.29 T
(suppose you had the following enumerated type:) 180 324.29 T
4 F
(MyColor) 216 308.29 T
(etype byte 0, 2) 288 308.29 T
(MC_BLUE) 216 291.29 T
(enum MyColor ; MC_BLUE = 0) 288 291.29 T
(MC_RED) 216 277.29 T
(enum MyColor ; MC_RED = 2) 288 277.29 T
(MC_GREEN) 216 263.29 T
(enum MyColor ; MC_GREEN = 4) 288 263.29 T
2 F
(At this point, the name) 180 242.29 T
6 F
(MyColor) 290.02 242.29 T
2 F
( would evaluate to 6, i.e.) 334.65 242.29 T
2 9 Q
(MC_GREEN) 449.69 242.29 T
2 10 Q
( plus) 503.02 242.29 T
(the step-value of two. If a routine expected to be passed a member of the) 180 229.29 T
6 F
-0.57 (MyColor) 180 216.29 P
2 F
-0.55 ( enumerated type, it could check this by comparing the value to the) 224.63 216.29 P
(value of) 180 203.29 T
6 F
(MyColor) 219.08 203.29 T
2 F
(.) 262.97 203.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 8
%%Page: "25" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  25) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(2.3.1.4) 119.19 638.67 T
(Structures) 180 638.67 T
2 10 Q
(Esp lets you de\336ne structures. Structure declarations have the following) 180 616.33 T
(format:) 180 603.33 T
4 F
(<StructureType>) 216 587.33 T
(struct) 324 587.33 T
(<FieldName>) 252 573.33 T
(<FieldType> [<DefaultValue>]) 324 573.33 T
(;any number of these) 360 559.33 T
(<StructureType>) 216 542.33 T
(ends) 324 542.33 T
6 F
(StructureT) 180 521.33 T
(ype) 237.27 521.33 T
2 F
(This may be any valid, unique identi\336er) 243 509.33 T
(.) 427.3 509.33 T
6 F
(FieldName) 180 490.33 T
2 F
(This may be any valid, unique identi\336er) 243 478.33 T
(.) 427.3 478.33 T
6 F
(FieldT) 180 459.33 T
(ype) 213.55 459.33 T
2 F
(This may be any previously-de\336ned type. It may be a simple) 243 459.33 T
(type, an array) 243 447.33 T
(, a record, another structure, or any other type) 307.27 447.33 T
(you wish.) 243 435.33 T
6 F
(DefaultV) 180 416.33 T
(alue) 225.37 416.33 T
2 F
(This is the default value for this \336eld of the structure.) 243 404.33 T
(The \336elds are declared from low to high. That is, the \336rst \336eld named is at) 180 385.33 T
-0.53 (the low end of the structure, and has the same address as the structure itself.) 180 372.33 P
(For example, you might declare a simple data structure like this:) 180 352.33 T
4 F
(MyDataStructure) 216 336.33 T
(struct) 324 336.33 T
(MDS_aField) 252 322.33 T
(sbyte) 360 322.33 T
(MDS_anotherField) 252 308.33 T
(sword) 360 308.33 T
(-1) 432 308.33 T
(MDS_oneLastField) 252 294.33 T
(dword) 360 294.33 T
(MyDataStructure) 216 280.33 T
(ends) 324 280.33 T
2 F
-0.22 (Y) 180 259.33 P
-0.22 (ou can declare and initialize one of these structures much the same way as) 185.93 259.33 P
(you would an array:) 180 246.33 T
4 F
(aStructure) 216 230.33 T
(MyDataStructure) 288 230.33 T
(<1,2,3>) 396 230.33 T
2 F
(This format is versatile. If you leave a space blank, it will automatically be) 180 209.33 T
(initialized to the default value \050or zero, if no default value was speci\336ed\051. If) 180 196.33 T
-0.86 (you don\325) 180 183.33 P
-0.86 (t put any values between the angle-brackets, the whole structure will) 217.11 183.33 P
(be initialized to its default values. Thus,) 180 170.33 T
4 F
(aStructure) 216 154.33 T
(MyDataStructure) 288 154.33 T
(<>) 396 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 9
%%Page: "26" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  26) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(is equivalent to) 180 641.33 T
4 F
(aStructure) 216 625.33 T
(MyDataStructure) 288 625.33 T
(<0, -1, 0>) 396 625.33 T
2 F
(One of the \336elds of a structure may be another structure. For example, you) 180 604.33 T
(might make the following declaration:) 180 591.33 T
4 F
(MyOtherStructure) 216 575.33 T
(struct) 324 575.33 T
(MOS_char1) 252 561.33 T
(char) 360 561.33 T
(MOS_char2) 252 547.33 T
(char) 360 547.33 T
(MOS_dataStruct) 252 533.33 T
(MyDataStructure) 360 533.33 T
(MOS_signedLong) 252 519.33 T
(sdword) 360 519.33 T
(MyOtherStructure) 216 505.33 T
(ends) 324 505.33 T
2 F
(Y) 180 484.33 T
(ou might initialize the structure like this:) 185.93 484.33 T
4 F
(bigStruct) 216 468.33 T
(MyDataStructure) 288 468.33 T
(\134) 396 468.33 T
(<'a', , <1,2,3>, -0xabcd123>) 252 454.33 T
2 F
(As noted above, the) 180 433.33 T
5 9 Q
(MOS) 272.98 433.33 T
5 10 Q
(_char2) 294.48 433.33 T
2 F
( \336eld would be initialized to zero.) 325.77 433.33 T
(Esp evaluates a \336eld name as the displacement from the start of the) 180 413.33 T
-0.4 (structure to the start of the \336eld. For example, if) 180 400.33 P
6 F
-0.41 (MyStructure) 403.24 400.33 P
2 F
-0.4 (is de\336ned as) 472.19 400.33 P
-0.85 (shown above, then) 180 387.33 P
5 9 Q
-0.76 (MDS) 265.8 387.33 P
5 10 Q
-0.85 (_aField) 287.3 387.33 P
2 F
-0.85 ( would evaluate as zero,) 321.92 387.33 P
5 9 Q
-0.76 (MDS) 431.21 387.33 P
5 10 Q
-0.85 (_anotherField) 452.71 387.33 P
2 F
-0.85 ( as) 516.95 387.33 P
(one, and) 180 374.33 T
5 9 Q
(MDS) 221.86 374.33 T
5 10 Q
(_oneLastField) 243.36 374.33 T
2 F
( as three. Y) 308.16 374.33 T
(ou can use these displacements to) 359.84 374.33 T
-0.13 (access \336elds by using the dot operator or the bracket operator) 180 361.33 P
-0.13 (. Both of these) 462.43 361.33 P
(are addition operators for calculating effective addresses. Several) 180 348.33 T
(displacements can be used sequentially) 180 335.33 T
(. For example, suppose we declared) 360.77 335.33 T
6 F
-0.76 (bigStruct) 180 322.33 P
2 F
-0.74 ( as shown above. W) 229.08 322.33 P
-0.74 (e want to load the) 315.59 322.33 P
5 9 Q
-0.67 (MDS) 397.48 322.33 P
5 10 Q
-0.74 (_anotherField) 418.98 322.33 P
2 F
-0.74 ( \336eld from) 483.22 322.33 P
(that structure into) 180 309.33 T
3 F
(ax) 268.89 309.33 T
2 F
(. If) 280.89 309.33 T
3 F
(es:[di]) 296.63 309.33 T
2 F
( was the address of the) 338.63 309.33 T
6 F
(bigStruct) 447.35 309.33 T
2 F
(variable, we could do the following:) 180 296.33 T
4 F
(mov) 216 280.33 T
(ax, es:[di].MOS_dataStruct.MDS_anotherField) 252 280.33 T
2 F
(Esp would \336gure out the displacement from the start of a) 180 259.33 T
6 F
(MyOtherStructure) 180 246.33 T
2 F
( to the) 276.86 246.33 T
5 9 Q
(MOS) 309.09 246.33 T
5 10 Q
(_dataStruct) 330.59 246.33 T
2 F
( \336eld; it would add this to the) 385.4 246.33 T
(displacement from the start of a) 180 233.33 T
6 F
(MyDataStructure) 330.94 233.33 T
2 F
( to the) 422.24 233.33 T
5 9 Q
(MDS) 454.47 233.33 T
5 10 Q
(_int2) 475.97 233.33 T
2 F
( \336eld,) 499.49 233.33 T
(and use the combined displacement in the instruction, producing an) 180 220.33 T
(equivalent machine instruction, e.g.) 180 207.33 T
4 F
(mov) 216 191.33 T
(ax, es:[di].3) 252 191.33 T
2 F
(Y) 180 170.33 T
(ou can use the dot operator this way in any effective-address instruction.) 185.93 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 10
%%Page: "27" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  27) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(2.3.1.5) 119.19 638.67 T
(Unions) 180 638.67 T
2 10 Q
-0.08 (Esp supports) 180 616.33 P
5 F
-0.08 (unions) 243.18 616.33 P
2 F
-0.08 ( as well as structures. A union is a variable that might,) 274.28 616.33 P
(at different times, have values of different sizes or types.) 180 603.33 T
(A union is declared much like a structure. The basic format is:) 180 583.33 T
4 F
(<UnionType>) 216 567.33 T
(union) 324 567.33 T
(<FieldName>) 252 553.33 T
(<FieldType> [<DefaultValue>]) 324 553.33 T
(;any number of these) 360 539.33 T
(<UnionType>) 216 522.33 T
(ends) 324 522.33 T
6 F
(UnionT) 180 501.33 T
(ype) 218.54 501.33 T
2 F
(This may be any valid, unique identi\336er) 243 489.33 T
(.) 427.3 489.33 T
6 F
(FieldName) 180 470.33 T
2 F
(This may be any valid, unique identi\336er) 243 458.33 T
(.) 427.3 458.33 T
6 F
(FieldT) 180 439.33 T
(ype) 213.55 439.33 T
2 F
(This may be any previously-de\336ned type. It may be a simple) 243 439.33 T
-0.62 (type, an array) 243 427.33 P
-0.62 (, a record, a structure, or any other type you wish.) 306.04 427.33 P
6 F
(DefaultV) 180 408.33 T
(alue) 225.37 408.33 T
2 F
(This is the default value for this \336eld of the union.) 243 396.33 T
(Every \336eld of the union begins at the base of the union, and the union is as) 180 377.33 T
(large as its largest component \336eld. For example,) 180 364.33 T
4 F
(MyUnion) 216 348.33 T
(union) 288 348.33 T
(MU_sbyte) 252 334.33 T
(sbyte) 324 334.33 T
(-2) 396 334.33 T
(MU_word) 252 320.33 T
(word) 324 320.33 T
(1234) 396 320.33 T
(MyUnion) 216 306.33 T
(ends) 288 306.33 T
2 F
(would declare a union with two \336elds. The union would be two bytes long.) 180 285.33 T
-0.14 (Unions are initialized slightly differently from structures. Y) 180 265.33 P
-0.14 (ou can initialize) 454.75 265.33 P
(a union to all zeros by putting nothing between the angle brackets, e.g.) 180 252.33 T
4 F
(aVariable) 216 236.33 T
(MyUnion) 288 236.33 T
(<>) 360 236.33 T
2 F
(Y) 180 215.33 T
(ou can initialize the union to contain the default value for one of its) 185.93 215.33 T
(components by putting the component\325) 180 202.33 T
(s name between the angle brackets,) 357.97 202.33 T
(e.g.) 180 189.33 T
4 F
(aVariable) 216 173.33 T
(MyUnion) 288 173.33 T
(<MU_sbyte>) 360 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 11
%%Page: "28" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  28) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(would initialize the \336rst byte of the union to) 180 641.33 T
4 F
(0xfd) 386.51 641.33 T
2 F
( \050i.e. -2\051, and clear the) 410.51 641.33 T
(second byte. If you wish to override the default value, simply put the new) 180 628.33 T
(value after the \336eld name, like so:) 180 615.33 T
4 F
(aVariable) 216 599.33 T
(MyUnion) 288 599.33 T
(<MU_sbyte 12>) 360 599.33 T
0 14 Q
(2.3.1.6) 119.19 564.67 T
(Records) 180 564.67 T
2 10 Q
-0.55 (Sometimes you will need to store several pieces of information, each of which) 180 542.33 P
(can be represented in less than a byte. One common situation is when you) 180 529.33 T
(need to have several \337ags for an object. Each one of the \337ags is a boolean) 180 516.33 T
-0.42 (quantity) 180 503.33 P
-0.42 (, so it can be represented with one bit; it would be inef\336cient to store) 218.53 503.33 P
(each \337ag in its own byte-sized variable.) 180 490.33 T
-0.56 (Esp allows you to declare byte- or word-sized records. Each \336eld of the record) 180 470.33 P
(may be one or more bits long; multi-bit \336elds may hold values from an) 180 457.33 T
-0.4 (appropriately-sized enumerated type. A record declaration has the following) 180 444.33 P
(format:) 180 431.33 T
4 F
(<recordname>) 216 415.33 T
(record) 324 415.33 T
([<fieldname> [<type>]] :<size> [= <value>]) 252 401.33 T
(;...there may be many such lines) 252 387.33 T
(<recordname>) 216 370.33 T
(ends) 324 370.33 T
6 F
(recordname) 180 349.33 T
2 F
(This is the name of the record. It usually begins with the) 243 337.33 T
(geode\325) 243 325.33 T
(s name, to ensure that the name won\325) 270.78 325.33 T
(t con\337ict with a) 444.15 325.33 T
(name in an included header \336le.) 243 313.33 T
6 F
(\336eldname) 180 294.33 T
2 F
(The name of the \336eld. If a \336eld has no name, you cannot) 243 294.33 T
(directly access it; thus, nameless \336elds can be used to pad the) 243 282.33 T
(record to byte- or word-length.) 243 270.33 T
6 F
(type) 180 251.33 T
2 F
(If the \336eld contains a member of an enumerated type, you) 243 251.33 T
(should specify the type here.) 243 239.33 T
6 F
(size) 180 220.33 T
2 F
(This is the size of the \336eld in bits. The combined sizes of the) 243 220.33 T
(\336elds should not be greater than sixteen.) 243 208.33 T
6 F
(value) 180 189.33 T
2 F
-0.73 (Y) 243 189.33 P
-0.73 (ou may specify a default value here. If a variable of this record) 248.93 189.33 P
(is declared without initializers, the \336eld will be initialized to) 243 177.33 T
(this value.) 243 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 12
%%Page: "29" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  29) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(The \336elds are declared from high to low; that is, the \336rst \336eld declared) 180 641.33 T
(occupies the high end of the record. However) 180 628.33 T
(, the last \336eld declared always) 385.91 628.33 T
-0.52 (has an offset of zero; that is, it is always at the extreme low end of the record.) 180 615.33 P
-0.63 (Thus, if the \336elds don\325) 180 602.33 P
-0.63 (t add up to a full byte or word, there will be unused bits) 279.73 602.33 P
-0.52 (at the) 180 589.33 P
5 F
-0.52 (high) 208.97 589.33 P
2 F
-0.52 ( end of the record. The size of the record is equal to the total width) 229.88 589.33 P
(of the \336elds, rounded up to the next byte.) 180 576.33 T
-0.27 (In order to read a \336eld from a record, you need to know the \336eld\325) 180 556.33 P
-0.27 (s position in) 472.91 556.33 P
(the record, and you need to know how long the \336eld is. Esp gives you this) 180 543.33 T
(information with the reserved words) 180 530.33 T
4 F
(offset) 351.67 530.33 T
2 F
(,) 387.67 530.33 T
4 F
(mask) 393.23 530.33 T
2 F
(, and) 417.23 530.33 T
4 F
(width) 442.98 530.33 T
2 F
(.) 472.98 530.33 T
-0.49 (\322) 180 517.33 P
4 F
-1.05 (offset) 183.89 517.33 P
-1.05 (<f) 225.89 517.33 P
-1.05 (ieldName>) 237.89 517.33 P
2 F
-0.49 (\323 is assembled into the \336eld\325) 291.89 517.33 P
-0.49 (s offset from the low end) 418 517.33 P
-0.71 (of the record; that is, shifting the record to the right by this amount will bring) 180 504.33 P
-0.1 (the \336eld to bit 0. \322) 180 491.33 P
4 F
-0.21 (mask) 262.13 491.33 P
-0.21 (<f) 292.13 491.33 P
-0.21 (ieldName>) 304.13 491.33 P
2 F
-0.1 (\323 is assembled into a byte or word, as) 358.13 491.33 P
(appropriate, with all the bits in the speci\336ed \336eld set, and all the other bits) 180 478.33 T
(cleared. Y) 180 465.33 T
(ou can also take the mask of a record; \322) 224.82 465.33 T
4 F
(mask) 405.41 465.33 T
(<recordName>) 435.41 465.33 T
2 F
(\323) 507.41 465.33 T
-0.71 (assembles to a mask with all bits in named \336elds turned on, and all other bits) 180 452.33 P
(turned off. \322) 180 439.33 T
4 F
(width) 235.18 439.33 T
(<f) 271.18 439.33 T
(ieldName>) 283.18 439.33 T
2 F
(\323 assembles to the width of the \336eld, in) 337.18 439.33 T
(bits.) 180 426.33 T
(For example, suppose you de\336ne the record) 180 406.33 T
6 F
(HelloRecord) 382.41 406.33 T
2 F
( thus:) 447.42 406.33 T
4 F
(HelloRecord) 216 390.33 T
(record) 324 390.33 T
(HR_A_FLAG:1) 252 376.33 T
(HR_ZERO_TO_SEVEN:3) 252 362.33 T
(HR_ANOTHER_FLAG:1) 252 348.33 T
(HelloRecord) 216 334.33 T
(ends) 324 334.33 T
2 F
(In this case, \322) 180 313.33 T
4 F
(mask HR_ZERO_TO_SEVEN) 242.6 313.33 T
2 F
(\323 would assemble to) 368.6 313.33 T
4 F
(0eh) 462.7 313.33 T
2 F
(,) 480.7 313.33 T
(\322) 180 300.33 T
4 F
(offset) 183.89 300.33 T
(HR_ZERO_TO_SEVEN) 225.89 300.33 T
2 F
(\323 would assemble to 1, and) 321.89 300.33 T
(\322) 180 287.33 T
4 F
(width) 183.89 287.33 T
(HR_ZERO_TO_SEVEN) 219.89 287.33 T
2 F
(\323 would assemble to 3. \322) 315.89 287.33 T
4 F
(mask) 425 287.33 T
(HelloRecord) 455 287.33 T
2 F
(\323) 521 287.33 T
(would assemble to) 180 274.33 T
4 F
(1Fh) 267.43 274.33 T
2 F
(. If you wanted to load) 285.43 274.33 T
5 9 Q
(HR) 391.19 274.33 T
5 10 Q
(_zeroT) 405.36 274.33 T
(oSeven) 434.83 274.33 T
2 F
( into) 466.68 274.33 T
3 F
(ax) 490.39 274.33 T
2 F
(, you) 502.39 274.33 T
(would do the following \050assuming) 180 261.33 T
3 F
(es:[di]) 337.24 261.33 T
2 F
( pointed to the record\051:) 379.24 261.33 T
4 F
(mov) 216 245.33 T
(ax, es:[di]) 252 245.33 T
(;load the record into ax) 324 245.33 T
(and) 216 231.33 T
(ax, mask HR_ZERO_TO_SEVEN) 252 231.33 T
(; Clear the other fields) 360 217.33 T
(mov) 216 203.33 T
(cl, offset HR_ZERO_TO_SEVEN) 252 203.33 T
(shr) 216 189.33 T
(ax, cl) 252 189.33 T
2 F
(T) 180 168.33 T
(o test if a given \337ag \050e.g.) 185.75 168.33 T
5 9 Q
(HR) 300.96 168.33 T
5 10 Q
(_aFlag) 315.13 168.33 T
2 F
(\051 was set, you would simply do this:) 346.98 168.33 T
4 F
(test) 216 152.33 T
(es:[di], mask HR_zero) 252 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 13
%%Page: "30" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  30) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(Note that in Esp, unlike) 180 641.33 T
2 9 Q
(MASM) 294.47 641.33 T
2 10 Q
(, you must use either) 323.63 641.33 T
4 F
(mask) 423.64 641.33 T
2 F
( or) 447.64 641.33 T
4 F
(offset) 462.64 641.33 T
2 F
( to) 498.64 641.33 T
(access a \336eld. If you use the name of the \336eld without either of these) 180 628.33 T
(keywords, Esp will generate an error) 180 615.33 T
(. \050Y) 350.01 615.33 T
(ou can return to default) 364.83 615.33 T
2 9 Q
(MASM) 477.61 615.33 T
2 10 Q
(behavior by assembling with the \322-m\323 switch; in this case, \322) 180 602.33 T
4 F
(<f) 453.02 602.33 T
(ieldName>) 465.02 602.33 T
2 F
(\323) 519.02 602.33 T
(will be considered equivalent to \322) 180 589.33 T
4 F
(offset <f) 332.62 589.33 T
(ieldName>) 386.62 589.33 T
2 F
(\323.\051) 440.62 589.33 T
(Y) 180 569.33 T
(ou can initialize a record in much the same way that you initialize a) 185.93 569.33 T
-0.45 (structure, i.e. by putting the values in angle-brackets. It is important to note) 180 556.33 P
(that the initializers only initialize) 180 543.33 T
5 F
(named) 339.29 543.33 T
2 F
( \336elds; all unnamed \336elds are) 370.58 543.33 T
(automatically initialized to zero. For example, suppose you declared) 180 530.33 T
6 F
(GapRecord) 180 517.33 T
2 F
( thus:) 238.53 517.33 T
4 F
(GapRecord) 216 501.33 T
(record) 288 501.33 T
(GR_A_BIT:1) 252 487.33 T
(GR_A_NYBBLE:4) 252 473.33 T
(:2) 252 459.33 T
(GR_ANOTHER_BIT:3) 252 445.33 T
(GapRecord ends) 216 431.33 T
2 F
(And then declared a variable thus:) 180 410.33 T
4 F
(instanceOfGR) 216 394.33 T
(GapRecord) 324 394.33 T
(<0x1,0xF,0x7>) 396 394.33 T
5 F
(instanceOfGR) 180 373.33 T
2 F
( will be initialized to) 244.43 373.33 T
4 F
(0x03E7) 341.87 373.33 T
2 F
(; the two bits between) 377.87 373.33 T
2 9 Q
(GR_A_NYBBLE) 180 360.33 T
2 10 Q
( and) 248.17 360.33 T
2 9 Q
(GR_ANOTHER_BIT) 271.14 360.33 T
2 10 Q
( will be initialized to zero.) 357.13 360.33 T
-0.2 (Y) 180 340.33 P
-0.2 (ou can also use the name of the record, combined with the initializer) 185.93 340.33 P
-0.2 (, as an) 498.61 340.33 P
(immediate value. For example, the instruction) 180 327.33 T
4 F
(move) 216 311.33 T
(ax, GapRecord <0x1, 0xF, 0x3>) 252 311.33 T
2 F
(assembles equivalently to) 180 290.33 T
4 F
(move) 216 274.33 T
(ax, 0x03E7) 252 274.33 T
0 14 Q
(2.3.1.7) 119.19 239.67 T
(Creating New T) 180 239.67 T
(ypes) 280.87 239.67 T
2 10 Q
(Esp overloads the) 180 217.33 T
4 F
(TYPE) 264.82 217.33 T
2 F
( operator as a type-creation directive. It is useful if) 288.82 217.33 T
-0.28 (you will be creating many arrays of exactly the same size. This is the format:) 180 204.33 P
4 F
(<TypeName>) 216 188.33 T
(TYPE) 288 188.33 T
(<n> dup\050<BaseType>\051) 324 188.33 T
6 F
(T) 180 167.33 T
(ypeName) 186.7 167.33 T
2 F
(The name of the new type.) 243 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 14
%%Page: "31" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  31) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
6 10 Q
0 X
(n) 180 641.33 T
2 F
(The number of elements in the array) 243 641.33 T
(.) 412.09 641.33 T
6 F
(BaseT) 180 622.33 T
(ype) 211.33 622.33 T
2 F
(The type of each element in the array) 243 622.33 T
(.) 415.24 622.33 T
(V) 180 603.33 T
(ariables of this type will be initialized to all zeros, unless you specify an) 186.3 603.33 T
(initial value with) 180 590.33 T
2 9 Q
(MASM) 262.62 590.33 T
2 10 Q
(\325) 291.78 590.33 T
(s usual array-initializer \050angle-bracket\051 syntax.) 293.45 590.33 T
(For example, you might store social-security numbers in arrays which are) 180 570.33 T
(nine bytes long \050with one byte per digit\051. In this case, you could make the) 180 557.33 T
(following declaration:) 180 544.33 T
4 F
(SocSecNum) 216 528.33 T
(TYPE 9 dup\050byte\051) 288 528.33 T
2 F
(Y) 180 507.33 T
(ou could declare one of these variables and initialize it like this:) 185.93 507.33 T
4 F
(FranksSSN) 216 491.33 T
(SocSecNum <1,2,3,4,5,6,7,8,9>) 288 491.33 T
81 457.98 531 470 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 457.98 531 470 R
7 X
0 0 0 1 0 0 0 K
V
76.5 465.23 617.5 468.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 451.31 T
(2-) 147.13 451.31 T
(2 Data Structure Declaration Examples) 156.02 451.31 T
4 9 Q
(COMMENT@-------------------------------------------------------------------) 81 436.98 T
(This shows how you might combine various Esp types, and how you) 125 425.98 T
(might use those declarations in code.) 125 414.98 T
(---------------------------------------------------------------------------@) 81 403.98 T
(;) 81 385.98 T
(; Types) 81 374.98 T
(;) 81 363.98 T
(MyColor) 81 345.98 T
(etype byte) 168.98 345.98 T
(MC_CLEAR) 81 327.98 T
(enum MyColor) 168.98 327.98 T
(; This defaults to zero) 256.5 327.98 T
(MC_BLACK) 81 316.98 T
(enum MyColor) 168.98 316.98 T
(; This is MC_CLEAR + 1, or one) 256.5 316.98 T
(MC_WHITE) 81 305.98 T
(enum MyColor) 168.98 305.98 T
(; 2...) 256.5 305.98 T
(MC_RED) 81 294.98 T
(enum MyColor) 168.98 294.98 T
(MC_BLUE) 81 283.98 T
(enum MyColor) 168.98 283.98 T
(MC_GREEN) 81 272.98 T
(enum MyColor) 168.98 272.98 T
(MyRecord) 81 254.98 T
(record) 168.98 254.98 T
(MR_BIG:1) 125 243.98 T
(MR_COLOR MyColor:8) 125 232.98 T
(MR_POINTY:1) 125 221.98 T
(MyRecord) 81 210.98 T
(end) 168.98 210.98 T
(ShortString) 81 192.98 T
(TYPE) 168.98 192.98 T
(9 dup\050char\051) 212.5 192.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 15
%%Page: "32" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  32) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 9 Q
0 X
(MyStructure) 81 642 T
(struct) 168.98 642 T
(MS_number) 125 631 T
(sword) 212.5 631 T
(MS_label) 125 620 T
(ShortString) 212.5 620 T
(MS_record) 125 609 T
(MyRecord) 212.5 609 T
(MyStructure) 81 598 T
(ends) 168.98 598 T
(;) 81 580 T
(; Initialized Variables) 81 569 T
(;) 81 558 T
(idata) 81 540 T
(segment) 125 540 T
(AStructure) 81 522 T
(MyStructure) 168.98 522 T
(<-123, <"Foo!", 0>,) 256.5 522 T
(\050mask MR_BIG OR \050MC_RED SHL offset MR_COLOR\051\051>) 256.5 511 T
(idata) 81 493 T
(ends) 125 493 T
81 468.98 531 481 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 468.98 531 481 R
7 X
0 0 0 1 0 0 0 K
V
76.5 476.23 617.5 479.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(2.3.2) 130.86 428.98 T
0 18 Q
(Symbols and Labels) 180 428.98 T
2 10 Q
(Esp improves on) 180 405.31 T
2 9 Q
(MASM) 259.26 405.31 T
2 10 Q
(\325) 288.42 405.31 T
(s rules for symbols and labels.) 290.09 405.31 T
(Y) 180 385.31 T
(ou can declare a local label in Esp. A local label\325) 185.93 385.31 T
(s scope is limited to the) 405.8 385.31 T
(procedure that contains it. Local labels in Esp have independent) 180 372.31 T
-0.57 (namespaces; that is, you might have several routines, each of which contains) 180 359.31 P
-0.59 (the label \322) 180 346.31 P
4 F
-1.28 (done:) 225.68 346.31 P
2 F
-0.59 (\323; whenever you use the label, Esp would understand it to be) 255.68 346.31 P
(the version de\336ned locally) 180 333.31 T
(.) 299.45 333.31 T
-0.73 (All labels inside of procedures are presumed to be local. If you want to use the) 180 313.31 P
(label outside of the procedure, you should declare it thus:) 180 300.31 T
4 F
(<myLabel> label near) 216 284.31 T
0 14 Q
(2.3.3) 130.86 240.98 T
0 18 Q
(Segments and dgroup) 180 240.98 T
2 10 Q
-0.54 (Geodes are divided into) 180 217.31 P
5 F
-0.54 (segments) 289.16 217.31 P
2 F
-0.54 (. Each segment is loaded into memory all at) 330.81 217.31 P
(once, and accessed with a given segment address \050hence the name\051.) 180 204.31 T
(Segments should be declared in the) 180 184.31 T
6 F
(.gp) 346.5 184.31 T
2 F
( \336le just as they are for Goc geodes.) 362.06 184.31 T
-0.16 (Y) 180 171.31 P
-0.16 (ou must also mark the beginning and end of each segment in the assembly) 185.93 171.31 P
(source \336le. At the beginning of the segment, put a line like) 180 158.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 16
%%Page: "33" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  33) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(<segmentName>) 216 641.33 T
(segment resource) 324 641.33 T
2 F
(At the end of the resource, put a line like) 180 620.33 T
4 F
(<segmentName>) 216 604.33 T
(ends) 324 604.33 T
2 F
(Y) 180 583.33 T
(ou can enter and leave a segment multiple times. Y) 185.93 583.33 T
(ou can even do so in) 421.9 583.33 T
-0.12 (different code \336les, as long as the resource is not an LMem heap. The linker) 180 570.33 P
(will combine the resources appropriately) 180 557.33 T
(.) 366.86 557.33 T
(Every resource has a resource) 180 537.33 T
2 9 Q
(ID) 321.28 537.33 T
2 10 Q
(. This resource) 331.95 537.33 T
2 9 Q
(ID) 402.68 537.33 T
2 10 Q
( is determined at) 413.35 537.33 T
(link-time; this means that a resource in a multi-launchable application will) 180 524.33 T
(have the same) 180 511.33 T
2 9 Q
(ID) 249.46 511.33 T
2 10 Q
( in each copy of the application running.) 260.12 511.33 T
0 14 Q
(2.3.3.1) 119.19 477.67 T
(The dgroup Segment) 180 477.67 T
2 10 Q
-0.71 (Every geode is assigned a \336xed memory resource for its global variables \050and,) 180 455.33 P
-0.7 (if the geode has a process object, for the process thread\325) 180 442.33 P
-0.7 (s stack\051. This resource) 427.86 442.33 P
(is known as) 180 429.33 T
5 F
(dgroup) 237.24 429.33 T
2 F
(. The) 270.01 429.33 T
6 F
(dgroup) 296.13 429.33 T
2 F
( segment is \336xed and non-sharable.) 333.73 429.33 T
-0.24 (V) 180 416.33 P
-0.24 (ariables in the) 186.3 416.33 P
6 F
-0.25 (dgroup) 255.23 416.33 P
2 F
-0.24 ( will keep the same address throughout a session of) 292.83 416.33 P
2 9 Q
(GEOS) 180 403.33 T
2 10 Q
(.) 206.17 403.33 T
-0.12 (The) 180 383.33 P
6 F
-0.13 (dgroup) 200.43 383.33 P
2 F
-0.12 ( segment contains the process object\325) 238.04 383.33 P
-0.12 (s instance data. Whenever) 406.49 383.33 P
(a message is sent to the process object, the) 180 370.33 T
6 F
(dgroup) 379.47 370.33 T
2 F
(\325) 417.07 370.33 T
(s segment address will) 418.74 370.33 T
-0.25 (automatically be loaded into) 180 357.33 P
6 F
-0.26 (ds) 312.72 357.33 P
2 F
-0.25 (. In general, the) 324.39 357.33 P
6 F
-0.26 (dgroup) 399.86 357.33 P
2 F
-0.25 ( segment is used for) 437.46 357.33 P
-0.5 (most statically allocated, global variables. Because the segment contains the) 180 344.33 P
(process object\325) 180 331.33 T
(s stack, you should not try to change the segment\325) 245.18 331.33 T
(s size or) 475.02 331.33 T
(dynamically allocate space in it.) 180 318.33 T
(T) 180 298.33 T
(o declare a global variable, place it in the pseudo-segment) 185.75 298.33 T
5 F
(idata) 455.43 298.33 T
2 F
( or) 479.87 298.33 T
5 F
(udata) 494.87 298.33 T
2 F
(.) 522.09 298.33 T
(The assembler combines these two pseudo-segments into the \336xed,) 180 285.33 T
(non-sharable) 180 272.33 T
6 F
(dgroup) 243.34 272.33 T
2 F
( segment. The) 280.94 272.33 T
6 F
(idata) 348.73 272.33 T
2 F
( pseudo-segment contains) 375.58 272.33 T
-0.37 (variables that must be initialized to non-zero values. All variables in) 180 259.33 P
6 F
-0.38 (udata) 495.81 259.33 P
2 F
-0.37 (,) 525.81 259.33 P
-0.61 (on the other hand, are automatically initialized to zero. They thus take up no) 180 246.33 P
(space in the executable \336le, since their initial values need not be stored.) 180 233.33 T
-0.39 (If the geode declares any new classes, the class declarations should be put in) 180 213.33 P
-0.15 (the) 180 200.33 P
6 F
-0.15 (idata) 197.63 200.33 P
2 F
-0.15 ( pseudo-segment. This is discussed at length in \322De\336ning Classes\323) 224.48 200.33 P
(on page 51.) 180 187.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 17
%%Page: "34" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  34) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(2-) 147.13 629.31 T
(3 Declaring Global V) 156.02 629.31 T
(ariables) 252.73 629.31 T
4 9 Q
(; Note that the geode will not have segments named idata or udata; these are) 81 614.98 T
(; pseudo-segments, and are combined into dgroup by the assembler.) 81 603.98 T
(;---------------------------------------------------------------------------) 81 585.98 T
(;) 81 574.98 T
(Initialized Variables) 125 574.98 T
(;---------------------------------------------------------------------------) 81 563.98 T
(idata segment) 81 545.98 T
(MyAppProcessClass) 125 534.98 T
(mask CLASSF_NEVER_SAVED) 256.5 534.98 T
(MyGlobalString) 125 516.98 T
(char) 212.5 516.98 T
("Franklin Tiberius Poomm, Esq.",0) 256.5 516.98 T
(idata) 81 498.98 T
(ends) 125 498.98 T
(;---------------------------------------------------------------------------) 81 480.98 T
(;) 81 469.98 T
(Uninitialized Variables) 125 469.98 T
(;---------------------------------------------------------------------------) 81 458.98 T
(udata) 81 440.98 T
(segment) 125 440.98 T
(MyEmptyArray) 125 422.98 T
(sword) 212.5 422.98 T
(20 dup \050?\051) 256.5 422.98 T
(udata) 81 404.98 T
(ends) 125 404.98 T
81 380.95 531 392.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 380.95 531 392.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 388.2 617.5 391.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(2.3.3.2) 119.19 349.62 T
(Accessing Segments) 180 349.62 T
4 10 Q
-2.25 (GetResourceHandleNS, GetResourceSegmentNS, handle, segment,) 180 327.29 P
(GeodeGetResourceHandle, vSegment) 180 314.29 T
2 F
(Accessing a resource is slightly more complicated in) 180 294.29 T
2 9 Q
(GEOS) 422.04 294.29 T
2 10 Q
( than it is in) 448.21 294.29 T
(traditional) 180 281.29 T
2 9 Q
(PC) 232.42 281.29 T
2 10 Q
( programming. A given resource may move around while it is) 244.92 281.29 T
(not being accessed. For this reason, you must access non-\336xed resources) 180 268.28 T
(through handles.) 180 255.28 T
(All geode resources are) 180 235.28 T
2 9 Q
(GEOS) 289.44 235.28 T
2 10 Q
( memory blocks, as described in \322Memory) 315.61 235.28 T
(Management,\323 Chapter) 180 222.29 T
(15 of the Concepts Book. This means that every) 291.12 222.29 T
(resource has a global handle. Y) 180 209.29 T
(ou will often need to get the handle of a) 322.99 209.29 T
-0.04 (resource. For example, whenever you send a message to an object, you need) 180 196.29 P
(to know the handle of the object\325) 180 183.29 T
(s resource. If you want to access data in an) 328.91 183.29 T
-0.83 (unlocked, non-\336xed resource, you will need to get the resource\325) 180 170.29 P
-0.83 (s handle so you) 460.81 170.29 P
(can lock it.) 180 157.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 18
%%Page: "35" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  35) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(One problem is that there may be several copies of a given resource in) 180 641.33 T
-0.22 (memory at a time. For example, if you write a multi-launchable application,) 180 628.33 P
(every copy of that application running at a time will have its own) 180 615.33 T
6 F
(dgroup) 484.31 615.33 T
2 F
(segment. For this reason, you must use a special macro to get the handle of) 180 602.33 T
(a non-sharable resource, namely) 180 589.33 T
6 F
(GetResourceHandleNS) 333.16 589.33 T
2 F
(. This macro is) 452.42 589.33 T
(passed the resource name of a segment; it returns the segment\325) 180 576.33 T
(s global) 471.5 576.33 T
(handle.) 180 563.33 T
(If you know that a resource is locked or \336xed in memory) 180 543.33 T
(, you can use) 437.79 543.33 T
6 F
(GetResourceSegmentNS) 180 530.33 T
2 F
( to get the segment address directly) 306.67 530.33 T
(. This macro) 470.2 530.33 T
(is passed the resource name of a locked or \336xed segment; it returns the) 180 517.33 T
(segment\325) 180 504.33 T
(s base address.) 220.56 504.33 T
-0.16 (If you know that there is only one copy of a resource in memory) 180 484.33 P
-0.16 (, you can use) 469.41 484.33 P
(a shorter and faster syntax to get the handle or segment. There are two) 180 471.33 T
(common situations when you can be sure that there is only one copy of a) 180 458.33 T
-0.11 (resource: The application might be single-launchable, or the resource might) 180 445.33 P
-0.39 (be sharable \050for example, code or read-only data\051. T) 180 432.33 P
-0.39 (o get the handle of such a) 413.18 432.33 P
(resource, use the Esp directive) 180 419.33 T
4 F
(handle) 324.25 419.33 T
2 F
(. For example, to load the handle of) 360.25 419.33 T
(the) 180 406.33 T
6 F
(HelloInitCode) 197.78 406.33 T
2 F
( resource into) 270.92 406.33 T
3 F
(bx) 336.47 406.33 T
2 F
(, you would use) 348.47 406.33 T
4 F
(mov) 216 390.33 T
(bx, handle HelloInitCode) 252 390.33 T
2 F
-0.35 (If you know that such a segment is locked or \336xed in memory) 180 369.33 P
-0.35 (, you can get its) 457.53 369.33 P
(segment address with the) 180 356.33 T
4 F
(segment) 301.68 356.33 T
2 F
( directive. For example, to load the) 343.68 356.33 T
(segment address of the) 180 343.33 T
6 F
(HelloInitCode) 289.08 343.33 T
2 F
( resource into) 362.22 343.33 T
3 F
(bx) 427.77 343.33 T
2 F
(, you would use) 439.77 343.33 T
4 F
(mov) 216 327.33 T
(bx, segment HelloInitCode) 252 327.33 T
2 F
(If you know the resource) 180 306.33 T
2 9 Q
(ID) 296.66 306.33 T
2 10 Q
( of a segment, you can \336nd out the segment\325) 307.33 306.33 T
(s) 509.02 306.33 T
(handle by calling) 180 293.33 T
6 F
(GeodeGetResourceHandle) 261.87 293.33 T
2 F
(. This routine is passed the) 398.72 293.33 T
(resource) 180 280.33 T
2 9 Q
(ID) 221.84 280.33 T
2 10 Q
( and returns the resource\325) 232.51 280.33 T
(s global handle. The call is somewhat) 351.39 280.33 T
(faster than the macro) 180 267.33 T
6 F
(GetResourceHandleNS) 282.97 267.33 T
2 F
(, since the macro \336rst) 402.23 267.33 T
(determines the resource) 180 254.33 T
2 9 Q
(ID) 294.25 254.33 T
2 10 Q
(, then calls) 304.92 254.33 T
6 F
(GeodeGetResourceHandle) 358.08 254.33 T
2 F
(.) 494.92 254.33 T
(However) 180 241.33 T
(, the call is slower than using the) 220.18 241.33 T
4 F
(handle) 376.32 241.33 T
2 F
( directive, so you should) 412.32 241.33 T
(use that when appropriate.) 180 228.33 T
(Ordinarily) 180 208.33 T
(, to \336nd out the segment address of the) 227.78 208.33 T
6 F
(dgroup) 410.39 208.33 T
2 F
( segment, you) 447.99 208.33 T
-0.34 (would use) 180 195.33 P
6 F
-0.35 (GetResourceSegmentNS) 228.4 195.33 P
2 F
-0.34 ( or the) 355.07 195.33 P
4 F
-0.73 (segment) 386.83 195.33 P
2 F
-0.34 ( directive. However) 428.83 195.33 P
-0.34 (, if) 516.86 195.33 P
-0.39 (you are running code from the process thread, you can take advantage of the) 180 182.33 P
(fact that the process thread\325) 180 169.33 T
(s stack is kept in the) 309.08 169.33 T
6 F
(dgroup) 407.44 169.33 T
2 F
( resource. This) 445.04 169.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "35" 19
%%Page: "36" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  36) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(means that the) 180 641.33 T
6 F
(dgroup) 252.98 641.33 T
2 F
( segment address must be in) 290.58 641.33 T
3 F
(ss) 425.23 641.33 T
2 F
(. Thus, to load to) 437.23 641.33 T
(segment address of) 180 628.33 T
6 F
(dgroup) 271.3 628.33 T
2 F
( into) 308.9 628.33 T
3 F
(ds) 332.61 628.33 T
2 F
(, you could just use) 344.61 628.33 T
4 F
(push) 216 612.33 T
(ss) 252 612.33 T
(; The segmov macro can also do this;) 288 612.33 T
(pop) 216 598.33 T
(ds) 252 598.33 T
(; see \322segmov\323 on page 49) 288 598.33 T
2 F
(Remember) 180 577.33 T
(, this only works if the code is being run by the process thread.) 229.26 577.33 T
81 560.99 531 566 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 560.99 531 566 R
7 X
0 0 0 1 0 0 0 K
V
50 564.99 609.01 564.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 552.99 T
0 F
(GetResourceHandleNS) 99 552.99 T
4 10 Q
(GetResourceHandleNS <resource>, <reg16>) 99 538.33 T
2 F
(This macro \336nds the handle of a resource and loads it into a register) 180 520.33 T
(.) 494.66 520.33 T
7 9 Q
(Pass:) 126 502.33 T
5 10 Q
(resource) 180 502.33 T
2 F
(The name of the resource.) 252 502.33 T
5 F
(reg16) 180 490.83 T
2 F
(A 16-bit general-purpose register \050) 252 490.83 T
5 F
(not) 411.26 490.83 T
2 F
( a segment register\051.) 425.89 490.83 T
7 9 Q
(Returns:) 126 474.33 T
5 10 Q
(reg16) 180 474.33 T
2 F
(Contains handle of resource.) 252 474.33 T
7 9 Q
(Destr) 126 457.83 T
(oyed:) 146.83 457.83 T
2 10 Q
(Nothing.) 180 457.83 T
81 442.98 531 447.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 442.98 531 447.99 R
7 X
0 0 0 1 0 0 0 K
V
50 446.98 609.01 446.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 434.98 T
0 F
(GetResourceSegmentNS) 99 434.98 T
4 10 Q
(GetResourceSegmentNS <resource>, <segreg> [, TRASH_BX]) 99 420.32 T
2 F
(This routine loads the segment address of a locked or \336xed resource into) 180 402.32 T
3 F
(ds) 516.13 402.32 T
2 F
(or) 180 389.32 T
3 F
(es) 192.22 389.32 T
2 F
(. The macro is somewhat faster if you use the) 204.22 389.32 T
4 F
(TRASH_BX) 416.1 389.32 T
2 F
( option.) 464.1 389.32 T
7 9 Q
(Pass:) 126 371.32 T
5 10 Q
(resource) 180 371.32 T
2 F
(The name of the resource.) 252 371.32 T
5 F
(segreg) 180 359.82 T
2 F
(This must be) 252 359.82 T
3 F
(ds) 314.98 359.82 T
2 F
( or) 326.98 359.82 T
3 F
(es) 341.98 359.82 T
2 F
(.) 353.98 359.82 T
7 9 Q
(Returns:) 126 343.32 T
5 10 Q
(segreg) 180 343.32 T
2 F
(The segment address is loaded into this register) 252 343.32 T
(.) 472.95 343.32 T
7 9 Q
(Destr) 126 326.82 T
(oyed:) 146.83 326.82 T
2 10 Q
(If) 180 326.82 T
4 F
(TRASH_BX) 190.18 326.82 T
2 F
( is passed,) 238.18 326.82 T
3 F
(bx) 288.38 326.82 T
2 F
( is destroyed; otherwise nothing is destroyed.) 300.38 326.82 T
81 311.98 531 316.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 311.98 531 316.98 R
7 X
0 0 0 1 0 0 0 K
V
50 315.98 609.01 315.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 303.98 T
0 F
(GeodeGetResourceHandle) 99 303.98 T
2 10 Q
-0.33 (This routine is passed the resource) 180 286.31 P
2 9 Q
-0.3 (ID) 342.08 286.31 P
2 10 Q
-0.33 ( of a resource. It returns the resource\325) 352.75 286.31 P
-0.33 (s) 523.92 286.31 P
(handle.) 180 273.31 T
7 9 Q
(Pass:) 126 255.31 T
3 10 Q
(bx) 180 255.31 T
2 F
(Resource) 252 255.31 T
2 9 Q
(ID) 296.62 255.31 T
2 10 Q
( number) 307.29 255.31 T
(.) 345.43 255.31 T
7 9 Q
(Returns:) 126 238.81 T
3 10 Q
(bx) 180 238.81 T
2 F
(Resource handle.) 252 238.81 T
7 9 Q
(Destr) 126 222.31 T
(oyed:) 146.83 222.31 T
2 10 Q
(Nothing.) 180 222.31 T
0 14 Q
(2.3.3.3) 119.19 190.14 T
(Declaring Static V) 180 190.14 T
(ariables) 298.27 190.14 T
2 10 Q
(Esp has slightly different conventions for declaring variables than) 180 167.81 T
2 9 Q
(MASM) 488.35 167.81 T
2 10 Q
(does. In Esp, you do not need to use the \322db\323, dw\323, or \322dd\323 reserved words) 180 154.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "36" 20
%%Page: "37" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  37) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(when declaring variables \050though you certainly may\051. Instead, you can) 180 641.33 T
-0.33 (simply use one of Esp\325) 180 628.33 P
-0.33 (s prede\336ned data types, or de\336ne one of your own. The) 280.17 628.33 P
(Esp syntax for declaring a variable is) 180 615.33 T
4 F
([<variableName>]) 216 599.33 T
(<dataType>[.<typePointedTo>] \134) 324 599.33 T
([<initValue>]) 396 585.33 T
6 F
(variableName) 180 564.33 T
2 F
-0.38 (This may be any suitable label; acceptable names for variables) 243 552.33 P
(are the same as in) 243 540.33 T
2 9 Q
(MASM) 330.43 540.33 T
2 10 Q
(.) 359.59 540.33 T
6 F
(dataT) 180 521.33 T
(ype) 209.85 521.33 T
2 F
-0.07 (This may be one of the standard Esp data types \050see T) 243 521.33 P
-0.07 (able) 491.79 521.33 P
-0.07 (2-) 513.84 521.33 P
-0.07 (1) 522.73 521.33 P
-0.69 (on page) 243 509.33 P
1 F
-0.69 (Y) 280.65 509.33 P
2 F
-0.69 (22\051. It may also be a structure or record, or any other) 291.35 509.33 P
(geode-de\336ned data type.) 243 497.33 T
6 F
(typePointedT) 180 478.33 T
(o) 250 478.33 T
2 F
(If) 243 466.33 T
6 F
(dataT) 253.18 466.33 T
(ype) 283.03 466.33 T
2 F
( is a pointer) 301.55 466.33 T
(, you can specify what data type it) 355.82 466.33 T
-0.06 (points to. If you do not, the pointer is untyped \050i.e. it is a \322void) 243 454.33 P
(pointer\323\051.) 243 442.33 T
6 F
(initV) 180 423.33 T
(alue) 205.18 423.33 T
2 F
(This may be any value appropriate for the data type.) 243 423.33 T
(T) 180 404.33 T
(o declare an array of any data type, simply use the following format:) 185.75 404.33 T
4 F
([<variableName>]) 216 388.33 T
(<dataType>[.<typePointedTo>] \134) 324 388.33 T
(<n>dup\050<init>\051) 432 374.33 T
6 F
(variableName) 180 353.33 T
2 F
(This is actually the label of the \336rst element in the array) 243 341.33 T
(, i.e.) 504.53 341.33 T
(the element at the lowest memory location.) 243 329.33 T
6 F
(n) 180 310.33 T
2 F
(The number of elements in the array) 243 310.33 T
(.) 412.09 310.33 T
6 F
(init) 180 291.33 T
2 F
(The initial value of each element in the array) 243 291.33 T
(. If you have an) 451.37 291.33 T
(init value of \322) 243 279.33 T
4 F
(?) 305.05 279.33 T
2 F
(\323, all bytes will be set to zero.) 311.05 279.33 T
(If you want to give each element a different initial value, you can use the) 180 260.33 T
(following format:) 180 247.33 T
4 F
([<variableName>]) 216 231.33 T
(<dataType> <initValue>,) 324 231.33 T
(<initValue>...) 396 217.33 T
2 F
(In this case, each comma can be followed by any amount of whitespace or) 180 196.33 T
(newlines. The last element in the array is simply the one not followed by a) 180 183.33 T
(comma.) 180 170.33 T
(For example, to declare an array of words, one might use) 180 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "37" 21
%%Page: "38" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  38) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(myByteArray) 216 641.33 T
(word) 324 641.33 T
(1, 2, 3, 4) 360 641.33 T
2 F
(Note that if the variable is in the) 180 620.33 T
6 F
(udata) 335.04 620.33 T
2 F
( pseudo-segment, any speci\336ed) 365.04 620.33 T
(initializers will generate a link-time error) 180 607.33 T
(.) 372.43 607.33 T
0 14 Q
(2.3.3.4) 119.19 573.67 T
(Strings) 180 573.67 T
2 10 Q
(Esp provides a special format for declaring arrays of byte-sized values) 180 551.33 T
(\050) 180 538.33 T
5 F
(strings) 183.33 538.33 T
2 F
(\051. A sequence of characters surrounded by single or double quotes is) 214.98 538.33 T
(treated like a comma-separated sequence of the) 180 525.33 T
2 9 Q
(ASCII) 402.62 525.33 T
2 10 Q
( values. \050No null) 428.61 525.33 T
(terminator is added.\051 For example,) 180 512.33 T
4 F
(myString char) 216 496.33 T
("abc") 324 496.33 T
2 F
(is functionally equivalent to) 180 475.33 T
4 F
(myString char) 216 459.33 T
(61h, 62h, 63h) 324 459.33 T
(; ASCII values of a,b,c) 324 445.33 T
2 F
-0.09 (This is only valid if the data type is byte-sized \050) 180 424.33 P
4 F
-0.2 (db) 397.64 424.33 P
2 F
-0.09 (,) 409.64 424.33 P
4 F
-0.2 (sb) 415.1 424.33 P
2 F
-0.09 (, or a synonym\051. If the) 427.1 424.33 P
(data type is larger) 180 411.33 T
(, all of the characters are written to one variable.) 264.09 411.33 T
(Y) 180 391.33 T
(ou can mix the two formats. For example, to declare a null-terminated) 185.93 391.33 T
(string, you can use) 180 378.33 T
4 F
(myString char) 216 362.33 T
("abc", 0) 300 362.33 T
2 F
-0.62 (Characters within a string are translated into their) 180 341.33 P
2 9 Q
-0.56 (ASCII) 415.58 341.33 P
2 10 Q
-0.62 ( counterparts, with) 441.57 341.33 P
(two exceptions, namely delimiter characters and escape sequences. The) 180 328.33 T
-0.49 (delimiter character marks the end of the string, except when it is doubled; in) 180 315.33 P
(that case, it represents the delimiter character itself. For example, the) 180 302.33 T
(declaration) 180 289.33 T
4 F
(myString char) 216 273.33 T
("ab""cd") 324 273.33 T
2 F
(is equivalent to) 180 252.33 T
4 F
(myString char) 216 236.33 T
(61h, 62h, 22h, 63h, 64h) 324 236.33 T
(; 22h is ASCII for ") 324 222.33 T
2 F
(If the string is bound by double-quotes, single-quote characters are treated) 180 201.33 T
(literally) 180 188.33 T
(. If it is bound by single-quotes, double-quote characters are treated) 215.75 188.33 T
(literally) 180 175.33 T
(. For example,) 215.75 175.33 T
4 F
(myString char) 216 159.33 T
("ab""cd'ef") 324 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "38" 22
%%Page: "39" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  39) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(is equivalent to) 180 641.33 T
4 F
(myString char) 216 625.33 T
('ab"cd''ef') 324 625.33 T
2 F
(Both of these describe strings which contain the following characters:) 180 604.33 T
4 F
(ab"cd'ef) 216 588.33 T
2 F
(Certain character sequences \050called) 180 567.33 T
5 F
(escape sequences) 347.22 567.33 T
2 F
(\051 are used to specify) 423.66 567.33 T
-0.01 (special characters. Esp supports the full range of C escape sequences; these) 180 554.33 P
(are shown in T) 180 541.33 T
(able) 248.28 541.33 T
(2-) 270.33 541.33 T
(2 on page) 279.22 541.33 T
1 F
(Y) 325.9 541.33 T
2 F
(39.) 336.6 541.33 T
0 14 Q
(2.3.4) 130.86 499 T
0 18 Q
(Miscellaneous Enhancements) 180 499 T
2 10 Q
(Many of Esp\325) 180 475.33 T
(s features are general enhancements of) 239.63 475.33 T
2 9 Q
(MASM) 423.71 475.33 T
2 10 Q
(. Our engineers) 452.87 475.33 T
(simply felt that a given behavior was useful or preferable to the ordinary) 180 462.33 T
2 9 Q
-0.5 (MASM) 180 449.33 P
2 10 Q
-0.56 ( behavior) 209.16 449.33 P
-0.56 (. In most cases these changes are backwards-compatible; Esp) 250.83 449.33 P
(simply adds new directives and pseudo-ops besides those provided with) 180 436.33 T
2 9 Q
(MASM) 180 423.33 T
2 10 Q
(. In a few cases, it changes the behavior of existing directives and) 209.16 423.33 T
(pseudo-operatives. In these cases, you can usually force) 180 410.33 T
2 9 Q
(MASM) 439.08 410.33 T
2 10 Q
( behavior by) 468.24 410.33 T
(passing the \322-m\323 \337ag to Esp.) 180 397.33 T
81 144 531 648 C
180 144 531 330.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 150.98 531 330.98 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 324.32 T
(able) 185.37 324.32 T
(2-) 208.16 324.32 T
(2) 217.05 324.32 T
5 F
(Esp Escape Sequences) 225.39 324.32 T
180 303.01 531 307.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 303.01 531 307.98 R
7 X
0 0 0 1 0 0 0 K
V
152 305.97 755 305.97 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 330.98 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Character Sequence) 180 311.32 T
(Description) 288 311.32 T
2 F
(\134n) 180 294.34 T
(newline \050) 288 294.34 T
2 9 Q
(ASCII) 330.41 294.34 T
2 10 Q
( 10\051) 356.4 294.34 T
(\134r) 180 280.34 T
(return \050) 288 280.34 T
2 9 Q
(ASCII) 324.1 280.34 T
2 10 Q
( 13\051) 350.09 280.34 T
(\134b) 180 266.34 T
(backspace \050ASCII 8\051) 288 266.34 T
(\134f) 180 252.34 T
(formfeed \050ASCII 12\051) 288 252.34 T
(\134t) 180 238.34 T
(tab \050ASCII 9\051) 288 238.34 T
(\134\134) 180 224.34 T
(backslash) 288 224.34 T
(\134') 180 210.34 T
(Single-quote) 288 210.34 T
(\134") 180 196.34 T
(Double-quote) 288 196.34 T
(\134) 180 182.34 T
5 F
(000) 186.06 182.34 T
2 F
(ASCII code in octal) 288 182.34 T
(\134x) 180 168.34 T
5 F
(00) 191.43 168.34 T
2 F
(ASCII code in hexadecimal) 288 168.34 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "39" 23
%%Page: "40" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  40) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(2.3.4.1) 119.19 638.67 T
(Pseudo-Ops and Directives) 180 638.67 T
2 10 Q
-0.61 (Esp provides a wide range of pseudo-ops and directives. Some of these will be) 180 616.33 P
(described in later chapters; a few of the most useful will be described here.) 180 603.33 T
-0.77 (This section also details those Esp instructions which are different from their) 180 590.33 P
2 9 Q
(MASM) 180 577.33 T
2 10 Q
( equivalents.) 209.16 577.33 T
0 12 Q
(call) 180 551 T
2 10 Q
-0.19 (As noted earlier) 180 529.33 P
-0.19 (, Esp adds special functionality to the) 252.77 529.33 P
4 F
-0.41 (call) 427.75 529.33 P
2 F
-0.19 ( instruction. The) 451.75 529.33 P
(main change is that) 180 516.33 T
4 F
(call) 274.65 516.33 T
2 F
( automatically locks movable resources when) 298.65 516.33 T
(necessary) 180 503.33 T
(. This is transparent to the application.) 224.07 503.33 T
4 F
-0.75 (call) 180 483.33 P
2 F
-0.35 ( can also be used to call statically-de\336ned methods. This is discussed at) 204 483.33 P
(greater length in\322Messages\323, section 3.3.2 of chapter 3.) 180 470.33 T
0 12 Q
(push and pop) 180 444 T
2 10 Q
(As noted earlier) 180 422.33 T
(, these instructions can take multiple operands. The) 253.15 422.33 T
(operands to) 180 409.33 T
4 F
(push) 236.67 409.33 T
2 F
( are pushed from left to right; that is,) 260.67 409.33 T
4 F
(push ax, bx, [wordVariable]) 216 393.33 T
2 F
(expands to) 180 372.33 T
4 F
(push ax) 216 356.33 T
(push bx) 216 342.33 T
(push [wordVariable]) 216 328.33 T
2 F
(The operands to) 180 307.33 T
4 F
(pop) 257.23 307.33 T
2 F
( are popped from right to left. This means that you can) 275.23 307.33 T
(pass arguments to) 180 294.33 T
4 F
(push) 267.79 294.33 T
2 F
( and) 291.79 294.33 T
4 F
(pop) 314.76 294.33 T
2 F
( in the same order) 332.76 294.33 T
(, e.g.) 416.1 294.33 T
4 F
(push) 216 278.33 T
(ax, bx, cx, dx) 252 278.33 T
(call) 216 261.33 T
(MessyProcedure) 252 261.33 T
(; this trashes ax-dx) 360 261.33 T
(pop) 216 244.33 T
(ax, bx, cx, dx) 252 244.33 T
(; this restores them) 360 244.33 T
0 12 Q
(The TYPE Operator) 180 217 T
2 10 Q
-0.74 (In Esp,) 180 195.33 P
4 F
-1.59 (TYPE) 214.64 195.33 P
-1.59 (<register>) 244.64 195.33 P
2 F
-0.74 ( returns the size of the register \050in bytes\051, not zero) 304.64 195.33 P
(as in) 180 182.33 T
2 9 Q
(MASM) 205.01 182.33 T
2 10 Q
(. T) 234.17 182.33 T
(o \336nd out if an operand is a register) 245.48 182.33 T
(, use the) 409.94 182.33 T
4 F
(.TYPE) 451.8 182.33 T
2 F
( operator) 481.8 182.33 T
(.) 522.91 182.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "40" 24
%%Page: "41" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  41) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 12 Q
0 X
(The .TYPE Operator) 180 640 T
2 10 Q
-0.33 (Under Esp, bit seven of the) 180 618.33 P
4 F
-0.71 (.TYPE) 306.55 618.33 P
2 F
-0.33 ( return value is clear if the expression has) 336.55 618.33 P
(local scope \050i.e. it uses one or more symbols which are not available outside) 180 605.33 T
-0.09 (of the current assembly\051; if all symbols of the expression are of global scope,) 180 592.33 P
(bit seven is set.) 180 579.33 T
(If you use) 180 559.33 T
4 F
(.TYPE) 227.96 559.33 T
2 F
( with a code-related expression, the high byte is set thus:) 257.96 559.33 T
0 12 Q
(LENGTH and SIZE) 180 364 T
2 10 Q
-0.04 (The) 180 342.33 P
4 F
-0.08 (LENGTH) 200.52 342.33 P
2 F
-0.04 ( and) 236.52 342.33 P
4 F
-0.08 (SIZE) 259.42 342.33 P
2 F
-0.04 ( operators are used to \336nd the number of elements in) 283.42 342.33 P
-0.54 (an array and the total size of the array in bytes, respectively) 180 329.33 P
-0.54 (. In) 452.49 329.33 P
2 9 Q
-0.48 (MASM) 469.94 329.33 P
2 10 Q
-0.54 (, these) 499.1 329.33 P
(operators only work if a variable is declared with the) 180 316.33 T
4 F
(dup) 426.89 316.33 T
2 F
( directive. In Esp,) 444.89 316.33 T
(these are more versatile. If several variables of the same class are declared) 180 303.33 T
(on a single line after a label, they are treated as an array) 180 290.33 T
(. For example,) 442.84 290.33 T
(suppose you have the declaration) 180 277.33 T
4 F
(SomeNums) 216 261.33 T
(dw) 288 261.33 T
(1,2,3) 324 261.33 T
2 9 Q
-0 (MASM) 180 240.33 P
2 10 Q
-0 ( would not recognize that this is an array; it would therefore say that) 209.16 240.33 P
4 F
-1.15 (SomeNums) 180 227.33 P
2 F
-0.54 ( has a) 228 227.33 P
4 F
-1.15 (LENGTH) 256.59 227.33 P
2 F
-0.54 ( of one and a) 292.59 227.33 P
4 F
-1.15 (SIZE) 351.23 227.33 P
2 F
-0.54 ( of two. Esp would treat this as an) 375.23 227.33 P
-0.38 (array) 180 214.33 P
-0.38 (, and would thus recognize that) 204.26 214.33 P
4 F
-0.81 (SomeNums) 350.17 214.33 P
2 F
-0.38 ( has a) 398.17 214.33 P
4 F
-0.81 (LENGTH) 427.24 214.33 P
2 F
-0.38 ( of three and a) 463.24 214.33 P
4 F
(SIZE) 180 201.33 T
2 F
( of six.) 204 201.33 T
81 144 531 648 C
180 387 531 556 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 394 531 545 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 538.33 T
(able) 185.37 538.33 T
(2-) 208.16 538.33 T
(3) 217.05 538.33 T
5 F
(.TYPE high-byte return values) 225.39 538.33 T
180 517.02 531 522 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 517.02 531 522 R
7 X
0 0 0 1 0 0 0 K
V
152 519.98 755 519.98 2 L
V
0.5 H
2 Z
0 X
N
180 387 531 556 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Position) 180 525.33 T
(Meaning if set) 252 525.33 T
2 F
(8 \05010h\051) 180 508.36 T
(Procedure is near) 252 508.36 T
(9 \05020h\051) 180 494.36 T
(Procedure contains) 252 494.36 T
2 9 Q
(ON_ST) 343.29 494.36 T
(ACK) 373.3 494.36 T
2 10 Q
( symbols) 393.3 494.36 T
(10) 180 480.36 T
(Procedure may not be jumped to) 252 480.36 T
(11) 180 466.36 T
(Procedure may not be called) 252 466.36 T
(12) 180 452.36 T
(Procedure is a static method) 252 452.36 T
(13) 180 438.36 T
(Procedure is a private static method) 252 438.36 T
(14) 180 424.36 T
(Procedure is a dynamic method) 252 424.36 T
(15) 180 410.36 T
(Procedure is a method) 252 410.36 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "41" 25
%%Page: "42" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  42) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 12 Q
0 X
(.assert) 180 640 T
4 10 Q
-1.16 (.assert) 180 618.33 P
2 F
-0.54 ( is used to check assumptions about code. If the assumption is false,) 222 618.33 P
4 F
(.assert) 180 605.33 T
2 F
( prints an error message to) 222 605.33 T
6 F
(stderr) 349.6 605.33 T
2 F
( and halts assembly) 381.65 605.33 T
(. If the) 472.42 605.33 T
(assumption is true, assembly continues normally) 180 592.33 T
(, and the object code is not) 405.4 592.33 T
(affected.) 180 579.33 T
4 F
(.assert) 221.85 579.33 T
2 F
( has the following format:) 263.85 579.33 T
4 F
(.assert) 216 563.33 T
(<expression> [, <errorString>]) 288 563.33 T
6 F
(expression) 180 542.33 T
2 F
-0.19 (If this expression evaluates to zero, the assertion will fail, and) 243 542.33 P
(assembly will halt.) 243 530.33 T
6 F
(errorString) 180 511.33 T
2 F
-0.68 (If the assertion fails, this string will be printed to) 243 499.33 P
6 F
-0.7 (stderr) 467.52 499.33 P
2 F
-0.68 (, along) 498.83 499.33 P
-0.01 (with the location of the assertion. If no string is speci\336ed, Esp) 243 487.33 P
(will print \322assertion failed\323.) 243 475.33 T
-0.77 ( For example, suppose you need to check whether) 180 456.33 P
3 F
-1.67 (al) 403.96 456.33 P
2 F
-0.77 ( contains a certain value,) 415.96 456.33 P
(such as) 180 443.33 T
2 9 Q
(MY_COLOR_WHITE) 217.04 443.33 T
2 10 Q
(. The canonical way to do this would be) 306.36 443.33 T
4 F
(cmp) 216 427.33 T
(al, MY_COLOR_WHITE) 252 427.33 T
(jz) 216 413.33 T
(itsWhite) 252 413.33 T
2 F
-0.5 (Y) 180 392.33 P
-0.5 (ou might know) 185.93 392.33 P
-0.5 (, however) 252.92 392.33 P
-0.5 (, that) 295.94 392.33 P
2 9 Q
-0.45 (MY_COLOR_WHITE) 322.73 392.33 P
2 10 Q
-0.5 ( is the \336rst member of the) 412.06 392.33 P
(enumerated type, and has the value zero. Y) 180 379.33 T
(ou can take advantage of this to) 379.84 379.33 T
-0.12 (write more ef\336cient code, since testing a register for zero-ness is faster than) 180 366.33 P
-0.67 (comparing it with an immediate value. On the other hand, this code would be) 180 353.33 P
(fragile, since the enumerated type could be changed in the future. The) 180 340.33 T
(solution is to use the) 180 327.33 T
4 F
(.assert) 278.35 327.33 T
2 F
( macro:) 320.35 327.33 T
4 F
(.assert) 216 311.33 T
(\050MY_COLOR_WHITE EQ 0\051,) 288 311.33 T
(\134) 432 311.33 T
(<MY_COLOR_WHITE does not equal zero>) 252 297.33 T
(test) 216 280.33 T
(al, al) 252 280.33 T
(; Test if al = MY_COLOR_WHITE) 324 280.33 T
(; \050i.e. zero\051) 324 266.33 T
(jz) 216 249.33 T
(itsWhite) 252 249.33 T
2 F
(Y) 180 228.33 T
(ou can also use the macro) 185.93 228.33 T
6 F
(CheckHack) 307.24 228.33 T
2 F
(, described below) 366.88 228.33 T
(, which) 444.49 228.33 T
(automatically generates an appropriate error message.) 180 215.33 T
0 12 Q
(ornf, andnf, xornf) 180 189 T
2 10 Q
-0.2 (Sometimes you will want to use the) 180 167.33 P
4 F
-0.43 (and) 345.5 167.33 P
2 F
-0.2 (,) 363.5 167.33 P
4 F
-0.43 (or) 368.86 167.33 P
2 F
-0.2 (, and) 380.12 167.33 P
4 F
-0.43 (xor) 405.47 167.33 P
2 F
-0.2 ( macros solely for their) 423.47 167.33 P
(effects on the destination operand; you won\325) 180 154.33 T
(t care about the settings of the) 382.24 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "42" 26
%%Page: "43" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  43) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(\337ags. In these cases, you can use \322no-\337ags\323 variants,) 180 641.33 T
4 F
(andnf) 425.03 641.33 T
2 F
(,) 455.03 641.33 T
4 F
(ornf) 460.59 641.33 T
2 F
(, and) 484.59 641.33 T
4 F
-1.01 (xornf) 180 628.33 P
2 F
-0.47 (. Esp can take advantage of the fact that you don\325) 210 628.33 P
-0.47 (t care about the \337ags) 433.32 628.33 P
(to optimize the instructions. For example, the instruction) 180 615.33 T
4 F
(ornf) 216 599.33 T
(cx, 0x0100) 252 599.33 T
2 F
(is assembled as) 180 578.33 T
4 F
(or) 216 562.33 T
(ch, 0x01) 252 562.33 T
2 F
(which is one byte shorter) 180 541.33 T
(, but sets the \337ags differently than) 295.19 541.33 T
(\322) 180 528.33 T
4 F
(or) 183.89 528.33 T
(cx,) 201.89 528.33 T
(0x0100) 225.89 528.33 T
2 F
(\323 would. For this reason, all the status \337ags have) 261.89 528.33 T
(indeterminate values after a \322no-\337ags\323 operation.) 180 515.33 T
-0.59 (The \322no-\337ags\323 instructions have another advantage: They document that the) 180 495.33 P
-0.78 (program doesn\325) 180 482.33 P
-0.78 (t care about the \337ag settings after the instruction, i.e. that the) 249.78 482.33 P
(code is using the instruction solely for its effect on the destination operand.) 180 469.33 T
0 12 Q
(EQ, NE) 180 443 T
2 10 Q
-0.52 (Esp lets you use the) 180 421.33 P
2 9 Q
-0.47 (EQ) 272.77 421.33 P
2 10 Q
-0.52 ( and) 286.27 421.33 P
2 9 Q
-0.47 (NE) 308.19 421.33 P
2 10 Q
-0.52 ( directives to compare strings or segments, as) 322.02 421.33 P
(well as immediate values. Of course, the operands must be de\336ned at) 180 408.33 T
(assemble-time.) 180 395.33 T
0 14 Q
(2.3.4.2) 119.19 361.67 T
(Miscellaneous Macros) 180 361.67 T
2 10 Q
(Esp comes with a tremendous number of prede\336ned macros. Some of these) 180 339.33 T
(perform common tasks in a roundabout, but more ef\336cient, way) 180 326.33 T
(. Others are) 472.25 326.33 T
-0.41 (clearer) 180 313.33 P
-0.41 (, self-documenting ways to perform common tasks. When you use Esp) 211.29 313.33 P
-0.72 (macros, you can take advantage of code that has been \336ne-tuned and checked) 180 300.33 P
(until it\325) 180 287.33 T
(s practically bulletproof.) 213.9 287.33 T
(All macros are de\336ned in) 180 267.33 T
6 F
(.def) 298.34 267.33 T
2 F
( header \336les. Since these \336les are distributed) 317.42 267.33 T
(with the) 180 254.33 T
2 9 Q
(SDK) 221.49 254.33 T
2 10 Q
(, you can examine the source code to see exactly what the) 241.16 254.33 T
(macros do and how they work. Y) 180 241.33 T
(ou can use these macros as starting points) 328.91 241.33 T
(for writing your own macros. Some of these are de\336ned in speci\336c libraries;) 180 228.33 T
-0.13 (they are usually de\336ned in the library\325) 180 215.33 P
-0.13 (s) 356.67 215.33 P
6 F
-0.13 (.def) 363.96 215.33 P
2 F
-0.13 ( \336le. This section contains more) 383.04 215.33 P
(general-purpose macros, which are de\336ned in) 180 202.33 T
6 F
(geos.def) 392.59 202.33 T
2 F
(.) 434.63 202.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "43" 27
%%Page: "44" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  44) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Assembly-Control Macros) 180 640 T
4 10 Q
(PrintMessage, ErrMessage, ForceRef, PrintE, CheckHack) 180 618.33 T
2 F
(Esp provides some macros which do not affect the \336nal code at all. Instead,) 180 598.33 T
(these macros produce useful side-effects during assembly) 180 585.33 T
(.) 443.14 585.33 T
(One such macro is) 180 565.33 T
6 F
(PrintMessage) 267.41 565.33 T
2 F
(. This macro prints a message to) 338.51 565.33 T
6 F
(stderr) 491.13 565.33 T
2 F
(when it is assembled; it does not have any effect on the object code. This is) 180 552.33 T
-0.02 (useful for leaving reminders for yourself. For example, an early version of a) 180 539.33 P
-0.58 (program might use an inef\336cient, brute-force technique to do something. Y) 180 526.33 P
-0.58 (ou) 517.69 526.33 P
(might then put in a reminder to yourself to improve the algorithm later:) 180 513.33 T
4 F
(call) 216 497.33 T
(MyStupidAndSlowSearchRoutine) 252 497.33 T
(PrintMessage <Remember to improve this algorithm!>) 216 483.33 T
6 F
(PrintError) 180 462.33 T
2 F
( is much like) 236.86 462.33 T
6 F
(PrintMessage) 298.54 462.33 T
2 F
(, except that it also generates an) 369.64 462.33 T
4 F
(.err) 180 449.33 T
2 F
( directive, halting assembly) 204 449.33 T
(.) 330.32 449.33 T
(Y) 180 429.33 T
(ou may sometimes make assumptions about data structures or values in) 185.93 429.33 T
(order to write more ef\336cient code. For example, you might rely on the fact) 180 416.33 T
(that a given constant is equal to zero. In these circumstances, you should) 180 403.33 T
(check the assumptions with the) 180 390.33 T
6 F
(CheckHack) 329.09 390.33 T
2 F
( macro. This macro evaluates) 388.73 390.33 T
(an expression. If the expression evaluates to) 180 377.33 T
5 F
(true) 387.61 377.33 T
2 F
( \050i.e. non-zero\051, assembly) 406.12 377.33 T
(will proceed normally; otherwise, assembly will halt, and an appropriate) 180 364.33 T
-0.84 (message will be printed to) 180 351.33 P
6 F
-0.87 (stderr) 299.53 351.33 P
2 F
-0.84 (. This is functionally equivalent to using the) 330.84 351.33 P
4 F
(.assert) 180 338.33 T
2 F
( directive, but it is clearer) 222 338.33 T
(.) 340.53 338.33 T
(For example, the code on page 42 might be rewritten this way with the) 180 318.33 T
6 F
(CheckHack) 180 305.33 T
2 F
( macro:) 239.64 305.33 T
4 F
(CheckHack) 216 289.33 T
(<MY_COLOR_WHITE EQ 0>) 288 289.33 T
(test) 216 272.33 T
(al, al) 252 272.33 T
(; Test if al = MY_COLOR_WHITE) 324 272.33 T
(; \050i.e. zero\051) 324 258.33 T
(jz) 216 241.33 T
(itsWhite) 252 241.33 T
6 F
-0.07 (ForceRef) 180 220.33 P
2 F
-0.07 ( makes sure that there is a reference to a symbol. If you declare a) 227.6 220.33 P
(symbol \050such as a local variable\051 but never use it, Esp will generate a) 180 207.33 T
(warning. Y) 180 194.33 T
(ou can suppress this warning by using the) 230.01 194.33 T
6 F
(ForceRef) 427.99 194.33 T
2 F
( macro.) 475.59 194.33 T
6 F
(PrintE) 180 174.33 T
2 F
( prints the value of an expression when it is assembled. It does not) 215.18 174.33 T
(affect the object code in any way) 180 161.33 T
(.) 328.16 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "44" 28
%%Page: "45" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  45) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(PrintMessage) 99 634.99 T
4 10 Q
(PrintMessage < <string> >) 99 620.33 T
2 F
(This macro prints a message to) 180 602.33 T
6 F
(stderr) 327.06 602.33 T
2 F
( when it is assembled. It does not) 359.11 602.33 T
(affect the object code in any way) 180 589.33 T
(.) 328.16 589.33 T
7 9 Q
(Pass:) 126 571.33 T
5 10 Q
(string) 180 571.33 T
2 F
-0.14 (A string to print to) 252 571.33 P
6 F
-0.15 (stderr) 341.1 571.33 P
2 F
-0.14 (. The string should be surrounded) 372.41 571.33 P
(by angle-brackets, not quotation marks.) 252 559.83 T
7 9 Q
(Include:) 126 543.33 T
6 10 Q
(geos.def) 180 543.33 T
81 528.48 531 533.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 528.48 531 533.49 R
7 X
0 0 0 1 0 0 0 K
V
50 532.48 609.01 532.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 520.48 T
0 F
(PrintError) 99 520.48 T
4 10 Q
(PrintError < <string> >) 99 505.82 T
2 F
-0.34 (This macro prints a message to) 180 487.82 P
6 F
-0.35 (stderr) 325.01 487.82 P
2 F
-0.34 ( when it is assembled, then generates) 357.06 487.82 P
(a) 180 474.82 T
4 F
(.err) 188.34 474.82 T
2 F
( directive, halting assembly) 212.34 474.82 T
(.) 338.66 474.82 T
7 9 Q
(Pass:) 126 456.82 T
5 10 Q
(string) 180 456.82 T
2 F
-0.14 (A string to print to) 252 456.82 P
6 F
-0.15 (stderr) 341.1 456.82 P
2 F
-0.14 (. The string should be surrounded) 372.41 456.82 P
(by angle-brackets, not quotation marks.) 252 445.32 T
7 9 Q
(Include:) 126 428.82 T
6 10 Q
(geos.def) 180 428.82 T
81 413.98 531 418.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 413.98 531 418.98 R
7 X
0 0 0 1 0 0 0 K
V
50 417.98 609.01 417.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 405.98 T
0 F
(ForceRef) 99 405.98 T
4 10 Q
(ForceRef <symbol>) 99 391.31 T
2 F
-0.69 (This macro forces a reference to a symbol. This prevents Esp from generating) 180 373.31 P
(a \322symbol not referenced\323 warning.) 180 360.31 T
7 9 Q
(Pass:) 126 342.31 T
5 10 Q
(symbol) 180 342.31 T
2 F
(Any global or local symbol.) 252 342.31 T
7 9 Q
(Include:) 126 325.81 T
6 10 Q
(geos.def) 180 325.81 T
81 310.97 531 315.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 310.97 531 315.98 R
7 X
0 0 0 1 0 0 0 K
V
50 314.97 609.01 314.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 302.97 T
0 F
(PrintE) 99 302.97 T
4 10 Q
(PrintE < <string> > %\050 <expr> \051) 99 288.3 T
6 F
(PrintE) 180 270.3 T
2 F
( prints the value of an expression to) 215.18 270.3 T
6 F
(stderr) 383.53 270.3 T
2 F
(. It does not affect the) 414.84 270.3 T
(assembled object code in any way) 180 257.3 T
(.) 332.99 257.3 T
7 9 Q
(Pass:) 126 239.3 T
5 10 Q
(string) 180 239.3 T
2 F
(A string to print to) 252 239.3 T
6 F
(stderr) 341.82 239.3 T
2 F
(. The string is surrounded by) 373.13 239.3 T
(angle-brackets, not by quotation marks.) 252 227.8 T
5 F
(expr) 180 216.3 T
2 F
(An expression.) 252 216.3 T
7 9 Q
(Include:) 126 199.8 T
6 10 Q
(geos.def) 180 199.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "45" 29
%%Page: "46" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  46) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(CheckHack) 99 634.99 T
4 10 Q
(CheckHack) 99 620.33 T
(<expr>) 159 620.33 T
2 F
-0.73 (This macro checks to see if an expression is true. If the expression is false \050i.e.) 180 602.33 P
-0.83 (evaluates to zero\051 at assemble-time,) 180 589.33 P
6 F
-0.86 (CheckHack) 344.4 589.33 P
2 F
-0.83 ( prints an appropriate error) 404.04 589.33 P
(message to) 180 576.33 T
6 F
(stderr) 233.53 576.33 T
2 F
( and generates a) 265.58 576.33 T
4 F
(.err) 344.67 576.33 T
2 F
( directive, halting assembly) 368.67 576.33 T
(.) 494.99 576.33 T
7 9 Q
(Pass:) 126 558.33 T
5 10 Q
(expr) 180 558.33 T
2 F
(An expression whose value is known at assemble-time.) 252 558.33 T
7 9 Q
(Include:) 126 541.83 T
6 10 Q
(geos.def) 180 541.83 T
0 14 Q
(2.3.4.3) 119.19 509.66 T
(Useful Miscellaneous Macros) 180 509.66 T
4 10 Q
(clr, tst, BitSet, BitClr, segmov, segxchg, CmpStrings,) 180 487.33 T
(XchgTopStack) 180 474.33 T
2 F
(Y) 180 454.33 T
(ou will \336nd that there are certain simple tasks you perform over and over) 185.93 454.33 T
-0.47 (again. For example, you will often \336nd yourself clearing registers, or copying) 180 441.33 P
-0.6 (values from one segment register to another) 180 428.33 P
-0.6 (. Esp provides macros to perform) 379.77 428.33 P
(many of these common tasks.) 180 415.33 T
(These macros are useful for two reasons. First of all, they are reliable and) 180 395.33 T
(heavily-tested ways of performing common tasks as ef\336ciently as possible.) 180 382.33 T
(Second, and more important, they are self-documenting. For example,) 180 362.33 T
(suppose you need to clear) 180 349.33 T
3 F
(ax) 300.56 349.33 T
2 F
(. The fastest way to do this is) 312.56 349.33 T
4 F
(xor) 216 333.33 T
(ax, ax) 252 333.33 T
2 F
(However) 180 312.33 T
(, this code is confusing. First of all, an inexperienced programmer) 220.18 312.33 T
(would not immediately recognize that the instruction clears) 180 299.33 T
6 F
(ax) 458.72 299.33 T
2 F
(. Second, it\325) 470.94 299.33 T
(s) 523.36 299.33 T
-0.5 (unclear what the programmer wants this instruction to do. On the one hand,) 180 286.33 P
(perhaps the programmer is only interested in clearing) 180 273.33 T
3 F
(ax) 432.97 273.33 T
2 F
(; on the other) 444.97 273.33 T
(, she) 505.9 273.33 T
-0.69 (may be relying on) 180 260.33 P
4 F
-1.5 (xor) 262.43 260.33 P
2 F
-0.69 ( to set the \337ags appropriately) 280.43 260.33 P
-0.69 (. If you don\325) 411.62 260.33 P
-0.69 (t know exactly) 463.25 260.33 P
(what the programmer wanted to do, it\325) 180 247.33 T
(s hard to maintain the code.) 357.99 247.33 T
(On the other hand, if the programmer used the) 180 227.33 T
6 F
(clr) 400.38 227.33 T
2 F
( macro like this:) 414.65 227.33 T
4 F
(clr) 216 211.33 T
(ax) 252 211.33 T
2 F
(the code becomes much clearer: The programmer wanted to clear) 180 190.33 T
3 F
(ax) 482.97 190.33 T
2 F
(, and) 494.97 190.33 T
(does not care about the \337ags \050since) 180 177.33 T
4 F
(clr) 343.72 177.33 T
2 F
( is documented as destroying the) 361.72 177.33 T
(\337ags\051.) 180 164.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "46" 30
%%Page: "47" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  47) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 12 Q
0 X
(clr) 180 640 T
2 10 Q
(Suppose you need to clear a memory location or a register) 180 618.33 T
(. There are three) 445.76 618.33 T
(different ways you might do this.) 180 605.33 T
(If you know that a register) 180 585.33 T
(\325) 304.08 585.33 T
(s value is zero, you can copy that register to the) 305.75 585.33 T
(location to be cleared. This is the fastest way to clear any location.) 180 572.33 T
-0.31 (If you need to clear a location and you don\325) 180 552.33 P
-0.31 (t have a convenient clear register) 373.94 552.33 P
-0.31 (,) 525.74 552.33 P
-0.45 (you can) 180 539.33 P
4 F
-0.97 (mov) 217.25 539.33 P
2 F
-0.45 ( an immediate value of zero into it. This is the usual way to clear) 235.25 539.33 P
(a memory location.) 180 526.33 T
(Y) 180 506.33 T
(ou can also clear a location by) 185.93 506.33 T
4 F
(xor) 326.33 506.33 T
2 F
(\325ing it with itself. If the location is a) 344.88 506.33 T
(register) 180 493.33 T
(, this is faster than moving a zero into it. On the other hand, if the) 215.18 493.33 T
(location is in memory) 180 480.33 T
(, it is faster to move a zero into it.) 278.16 480.33 T
-0.59 (The macro) 180 460.33 P
4 F
-1.27 (clr) 230.49 460.33 P
2 F
-0.59 ( automatically chooses between these three techniques. It can) 248.49 460.33 P
-0.34 (take any number of byte- or word-sized arguments. It proceeds down the list) 180 447.33 P
(from left to right. If the \336rst argument is a register) 180 434.33 T
(,) 414.82 434.33 T
4 F
(clr) 420.38 434.33 T
2 F
( clears this register) 438.38 434.33 T
-0.78 (by) 180 421.33 P
4 F
-1.68 (xor) 192.93 421.33 P
2 F
-0.78 (\325ing it with itself. It then copies this register to all the other arguments) 211.48 421.33 P
(to) 180 408.33 T
4 F
(clr) 191.67 408.33 T
2 F
(. If the \336rst argument is a memory location, it moves a zero into this) 208.93 408.33 T
(location, then starts over with the next argument.) 180 395.33 T
(Note that the) 180 375.33 T
4 F
(xor) 244.83 375.33 T
2 F
( technique changes the status \337ags; therefore, the status) 262.83 375.33 T
(\337ags become unde\336ned after use of) 180 362.33 T
4 F
(clr) 344.45 362.33 T
2 F
(. If you need to preserve the \337ags,) 361.71 362.33 T
(move an immediate value of zero into each location, or save the \337ags on the) 180 349.33 T
(stack.) 180 336.33 T
81 319.99 531 325 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 319.99 531 325 R
7 X
0 0 0 1 0 0 0 K
V
50 323.99 609.01 323.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 311.99 T
0 F
(clr) 99 311.99 T
4 10 Q
(clr) 99 297.33 T
(<location> [, <location>...]) 153 297.33 T
2 F
(This macro sets all of its arguments to zero, using the most ef\336cient) 180 279.33 T
(technique for each location.) 180 266.33 T
7 9 Q
(Pass:) 126 248.33 T
5 10 Q
(location) 180 248.33 T
2 F
(A byte- or word-sized memory location or general-purpose) 252 248.33 T
(register) 252 236.83 T
(.) 287.18 236.83 T
7 9 Q
(Destr) 126 220.33 T
(oyed:) 146.83 220.33 T
2 10 Q
(\337ags) 180 220.33 T
7 9 Q
(T) 126 203.83 T
(ips & T) 131.84 203.83 T
(ricks:) 160.18 203.83 T
2 10 Q
(If any of the arguments is a register) 184.43 203.83 T
(, put it at the head of the list. In) 350.18 203.83 T
-0.16 (particular) 180 192.33 P
-0.16 (, if any of the arguments is) 225.74 192.33 P
3 F
-0.35 (ax) 351.48 192.33 P
2 F
-0.16 (, put it at the head of the list, ahead) 363.48 192.33 P
(of any other registers.) 180 180.83 T
7 9 Q
(Include:) 126 164.33 T
6 10 Q
(geos.def) 180 164.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "47" 31
%%Page: "48" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  48) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 12 Q
0 X
(tst and tst_clc) 180 640 T
2 10 Q
(Y) 180 618.33 T
(ou may often need to check a value to see if it\325) 185.93 618.33 T
(s non-zero. There are two) 396.89 618.33 T
(different ef\336cient ways to do this.) 180 605.33 T
-0.3 (If you are testing a register) 180 585.33 P
-0.3 (, the most ef\336cient technique is to) 304.05 585.33 P
4 F
-0.65 (or) 460.65 585.33 P
2 F
-0.3 ( the register) 472.65 585.33 P
(with itself. This does not change the operand, and it sets) 180 572.33 T
4 F
(ZF) 443.93 572.33 T
2 F
( appropriately) 455.93 572.33 T
(.) 520.38 572.33 T
(On the other hand, if you are testing a memory location, the most ef\336cient) 180 559.33 T
-0.77 (technique is to) 180 546.33 P
4 F
-1.65 (cmp) 248.08 546.33 P
2 F
-0.77 ( the location with zero. This also sets the) 266.08 546.33 P
4 F
-1.65 (ZF) 450.52 546.33 P
2 F
-0.77 ( appropriately) 462.52 546.33 P
-0.77 (.) 526.21 546.33 P
(The) 180 533.33 T
4 F
(tst) 200.56 533.33 T
2 F
( macro chooses the appropriate technique for its operand.) 218.56 533.33 T
(Note that either one of these techniques will always clear) 180 513.33 T
4 F
(CF) 447.82 513.33 T
2 F
(. If you are) 458.71 513.33 T
(taking advantage of this, you should use the synonymous macro) 180 500.33 T
4 F
(tst_clc) 478.37 500.33 T
2 F
(.) 520.37 500.33 T
(This macro behaves identically to) 180 487.33 T
4 F
(tst) 337.62 487.33 T
2 F
(, but documents that the program) 355.62 487.33 T
(relies on) 180 474.33 T
4 F
(CF) 222.04 474.33 T
2 F
( being cleared.) 234.04 474.33 T
81 457.99 531 463 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 457.99 531 463 R
7 X
0 0 0 1 0 0 0 K
V
50 461.99 609.01 461.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 449.99 T
0 F
(tst, tst_clc) 99 449.99 T
4 10 Q
(tst) 99 435.33 T
(<location>) 153 435.33 T
(tst_clc) 99 422.33 T
(<location>) 153 422.33 T
2 F
(This macro tests a byte- or word-sized location to see if it is equal to zero.) 180 404.33 T
7 9 Q
(Pass:) 126 386.33 T
5 10 Q
(location) 180 386.33 T
2 F
(A byte- or word-sized memory location or general-purpose) 252 386.33 T
(register) 252 374.83 T
(.) 287.18 374.83 T
7 9 Q
(Returns:) 126 358.33 T
4 10 Q
(ZF) 180 358.33 T
2 F
(Set according to) 252 358.33 T
5 F
(location) 328.67 358.33 T
2 F
(\325) 365.14 358.33 T
(s value.) 366.81 358.33 T
4 F
(CF) 180 346.83 T
2 F
(Cleared.) 252 346.83 T
4 F
(SF) 180 335.33 T
2 F
(Set according to the operand\325) 252 335.33 T
(s value.) 385.71 335.33 T
7 9 Q
(Destr) 126 318.83 T
(oyed:) 146.83 318.83 T
2 10 Q
(Other \337ags) 180 318.83 T
7 9 Q
(T) 126 302.33 T
(ips & T) 131.84 302.33 T
(ricks:) 160.18 302.33 T
2 10 Q
(If you take advantage of the fact that this macro clears) 184.43 302.33 T
4 F
(CF) 440.76 302.33 T
2 F
(, you should) 451.65 302.33 T
(document this by using the) 180 290.83 T
4 F
(tst_clc) 308.16 290.83 T
2 F
( version.) 350.16 290.83 T
7 9 Q
(Include:) 126 274.33 T
6 10 Q
(geos.def) 180 274.33 T
0 12 Q
(Moving V) 180 249.49 T
(alues Between Segment Registers) 232.68 249.49 T
2 10 Q
(The) 180 227.83 T
4 F
(mov) 200.56 227.83 T
2 F
( instruction does not allow you to move values from one segment) 218.56 227.83 T
-0 (register directly to another) 180 214.83 P
-0 (. Esp provides the macro) 303.7 214.83 P
4 F
-0 (segmov) 420.36 214.83 P
2 F
-0 ( to do this. This) 456.36 214.83 P
(macro takes either two or three arguments. It can be called with two) 180 201.83 T
-0.42 (arguments, a source segment register and a destination segment register) 180 188.83 P
-0.42 (. In) 513.31 188.83 P
(this case,) 180 175.83 T
4 F
(segmov) 225.75 175.83 T
2 F
( pushes the value from the source and pops it into the) 261.75 175.83 T
(destination. It can also be called with a third argument, a general-purpose) 180 162.83 T
(register) 180 149.83 T
(. In this case,) 215.18 149.83 T
4 F
(segmov) 279.45 149.83 T
2 F
( uses the general-purpose register as an) 315.45 149.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "48" 32
%%Page: "49" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Differences from MASM) 400.09 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  49) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.3) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(intermediate register) 180 641.33 T
(. This makes the operation much faster) 277.78 641.33 T
(, but destroys) 458.36 641.33 T
(the value in the intermediate register; the instruction is also two bytes) 180 628.33 T
(longer) 180 615.33 T
(.) 208.33 615.33 T
(T) 180 595.33 T
(o exchange two segment registers, use) 185.75 595.33 T
4 F
(segxchg) 365.02 595.33 T
2 F
(. This macro pushes both) 407.02 595.33 T
-0.13 (segment registers, then pops them in the same order) 180 582.33 P
-0.13 (, thus exchanging their) 421.72 582.33 P
(contents.) 180 569.33 T
81 552.99 531 558 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 552.99 531 558 R
7 X
0 0 0 1 0 0 0 K
V
50 556.99 609.01 556.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 544.99 T
0 F
(segmov) 99 544.99 T
4 10 Q
(segmov) 99 530.33 T
(<destSeg>, <sourceSeg> [, <useReg>]) 153 530.33 T
2 F
(This macro copies a value from one segment register to another) 180 512.33 T
(. If a) 472.24 512.33 T
-0.21 (general-purpose register is passed as a third argument, it will be used as an) 180 499.33 P
(intermediate register) 180 486.33 T
(, making the macro much faster) 277.78 486.33 T
(, but two bytes longer) 424.46 486.33 T
(.) 523.37 486.33 T
7 9 Q
(Pass:) 126 468.33 T
5 10 Q
(destSeg, sourceSeg) 180 468.33 T
2 F
(Any segment registers.) 252 456.83 T
7 9 Q
(Returns:) 126 440.33 T
5 10 Q
(destSeg) 180 440.33 T
2 F
(Set to equal) 252 440.33 T
5 F
(sourceSeg) 309.8 440.33 T
2 F
(.) 355.15 440.33 T
7 9 Q
(Destr) 126 423.83 T
(oyed:) 146.83 423.83 T
5 10 Q
(useReg) 180 423.83 T
2 F
( \050if passed\051.) 212.21 423.83 T
(All \337ags are preserved.) 180 412.33 T
7 9 Q
(Include:) 126 395.83 T
6 10 Q
(geos.def) 180 395.83 T
81 380.98 531 385.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 380.98 531 385.99 R
7 X
0 0 0 1 0 0 0 K
V
50 384.98 609.01 384.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 372.98 T
0 F
(segxchg) 99 372.98 T
4 10 Q
(segxchg) 99 358.32 T
(<seg1>, <seg2>) 153 358.32 T
2 F
(This routine exchanges the contents of two segment registers. It does not) 180 340.32 T
(have any other effects.) 180 327.32 T
7 9 Q
(Pass:) 126 309.32 T
5 10 Q
(seg1, seg2) 180 309.32 T
2 F
(A segment register) 252 309.32 T
(.) 338.85 309.32 T
7 9 Q
(Returns:) 126 292.82 T
5 10 Q
(seg1, seg2) 180 292.82 T
2 F
(Exchanged.) 252 292.82 T
7 9 Q
(Destr) 126 276.32 T
(oyed:) 146.83 276.32 T
2 10 Q
(Nothing; all \337ags are preserved.) 180 276.32 T
7 9 Q
(Include:) 126 259.82 T
6 10 Q
(geos.def) 180 259.82 T
0 12 Q
(Setting and Clearing Bits in a Record) 180 234.98 T
2 10 Q
(Y) 180 213.32 T
(ou will often \336nd yourself setting and clearing bit \337ags in a record. Esp) 185.93 213.32 T
(provides macros to do this for you. The macros are no more ef\336cient than) 180 200.32 T
(doing it by hand, but they are clearer to read.) 180 187.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "49" 33
%%Page: "50" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  50) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.3) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(T) 180 641.33 T
(o set a bit in a record, call) 185.75 641.33 T
6 F
(BitSet) 307.63 641.33 T
2 F
(. This macro is passed the location of the) 340.04 641.33 T
-0.68 (record and the name of the \336eld to set \050without the) 180 628.33 P
4 F
-1.46 (mask) 410.18 628.33 P
2 F
-0.68 ( operator\051. It sets the) 434.18 628.33 P
(bit by) 180 615.33 T
4 F
(or) 209.09 615.33 T
2 F
(\325ing the two values. For example,) 221.64 615.33 T
4 F
(BitSet) 216 599.33 T
(myRecord, MR_A_FLAG) 288 599.33 T
2 F
(is equivalent to) 180 578.33 T
4 F
(ornf) 216 562.33 T
(myRecord, mask MR_A_FLAG) 288 562.33 T
2 F
(T) 180 541.33 T
(o clear a bit in a record, use the) 185.75 541.33 T
6 F
(BitClr) 333.92 541.33 T
2 F
( macro. This macro is passed the) 366.15 541.33 T
(location of the record and the name of the \336eld to clear \050without the) 180 528.33 T
4 F
(mask) 494.65 528.33 T
2 F
(operator\051. It sets the bit by) 180 515.33 T
4 F
(and) 306.5 515.33 T
2 F
(\325ing the destination with the bitwise) 324.5 515.33 T
4 F
(not) 494.17 515.33 T
2 F
( of) 512.17 515.33 T
(the \337ag.) 180 502.33 T
81 485.99 531 491 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 485.99 531 491 R
7 X
0 0 0 1 0 0 0 K
V
50 489.99 609.01 489.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 477.99 T
0 F
(BitSet) 99 477.99 T
4 10 Q
(BitSet) 99 463.33 T
(<location>, <fieldName>) 153 463.33 T
2 F
(This macro turns on all the bits in the speci\336ed \336eld of a record.) 180 445.33 T
7 9 Q
(Pass:) 126 427.33 T
5 10 Q
(location) 180 427.33 T
2 F
(The location containing the record; this may be a) 252 427.33 T
(general-purpose register) 252 415.83 T
(, or it may be in memory) 364.58 415.83 T
(.) 476.64 415.83 T
5 F
(\336eldName) 180 404.33 T
2 F
(The name of the \336eld to set. All bits in this \336eld will be set.) 252 404.33 T
7 9 Q
(Destr) 126 387.83 T
(oyed:) 146.83 387.83 T
2 10 Q
(Flags are destroyed.) 180 387.83 T
81 372.98 531 377.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 372.98 531 377.99 R
7 X
0 0 0 1 0 0 0 K
V
50 376.98 609.01 376.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 364.98 T
0 F
(BitClr) 99 364.98 T
4 10 Q
(BitClr) 99 350.32 T
(<location>, <fieldName>) 153 350.32 T
2 F
(This macro turns off all the bits in the speci\336ed \336eld of a record.) 180 332.32 T
7 9 Q
(Pass:) 126 314.32 T
5 10 Q
(location) 180 314.32 T
2 F
(The location containing the record; this may be a) 252 314.32 T
(general-purpose register) 252 302.82 T
(, or it may be in memory) 364.58 302.82 T
(.) 476.64 302.82 T
5 F
(\336eldName) 180 291.32 T
2 F
(The name of the \336eld to clear) 252 291.32 T
(. All bits in this \336eld will be) 386.09 291.32 T
(cleared.) 252 279.82 T
7 9 Q
(Destr) 126 263.32 T
(oyed:) 146.83 263.32 T
2 10 Q
(Flags are destroyed.) 180 263.32 T
0 14 Q
(2.3.4.4) 119.19 231.15 T
(dword Macros) 180 231.15 T
4 10 Q
(cmpdw, jgedw, jgdw, jledw, jldw, tstdw, pushdw, popdw,) 180 208.82 T
(notdw, negdw, incdw, decdw, movdw, adddw, adcdw, subdw,) 180 195.82 T
(clrdw, shrdw, sardw, shldw, saldw, xchgdw) 180 182.82 T
2 F
-0.31 (The 80x86 chips provide instructions for performing arithmetic on byte- and) 180 162.82 P
-0.9 (word-sized operands. Y) 180 149.82 P
-0.9 (ou may) 284.3 149.82 P
-0.9 (, however) 316 149.82 P
-0.9 (, be working with dword-sized \05032-bit\051) 358.62 149.82 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "50" 34
%%Page: "51" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Defining Classes) 445.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  51) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(values. Esp provides many macros for dealing with these values, whether) 180 641.33 T
(they are in registers or in memory) 180 628.33 T
(.) 337.04 628.33 T
(These macros are designed to look and behave much like their byte- and) 180 608.33 T
-0.59 (word-sized counterparts. However) 180 595.33 P
-0.59 (, there are often small differences between) 336.21 595.33 P
(the macros and the instructions. For example, many dword macros set the) 180 582.33 T
(\337ags slightly differently from the corresponding instructions. The reference) 180 569.33 T
(entries detail any such differences. Remember) 180 556.33 T
(, when in doubt, you can) 393.15 556.33 T
(always look at the macro\325) 180 543.33 T
(s source code.) 296.7 543.33 T
0 14 Q
(2.4) 142.54 491 T
0 24 Q
(De\336ning Classes) 180 491 T
2 10 Q
-0.08 (Every application de\336nes at least one new class, its own process class. Most) 180 465.33 P
(applications de\336ne several more classes in addition to the process class.) 180 452.33 T
-0.39 (When you create a class, there are two things you must do. Y) 180 432.33 P
-0.39 (ou must put the) 456.08 432.33 P
(class\325) 180 419.33 T
(s class structure in the application\325) 204.08 419.33 T
(s) 365.39 419.33 T
6 F
(idata) 372.8 419.33 T
2 F
( segment; and you must) 399.65 419.33 T
(de\336ne the class\325) 180 406.33 T
(s messages and instance data \336elds. \050Y) 252.6 406.33 T
(ou may also need to) 431.34 406.33 T
(de\336ne special structures, enumerated types, etc., for the class.\051) 180 393.33 T
(Note that if you wish to create instances of your class at compile time, you) 180 373.33 T
-0.74 (will have to do this in a) 180 360.33 P
6 F
-0.76 (.ui) 285.78 360.33 P
2 F
-0.74 ( \336le, and you will have to write an Espire de\336nition) 299.11 360.33 P
(of your class \050in the) 180 347.33 T
6 F
(.ui) 273.15 347.33 T
2 F
( \336le\051 which matches the Esp one. The \322Espire\323) 286.48 347.33 T
(language and the User) 180 334.33 T
(-Interface compiler are discussed in \322The UI) 285.02 334.33 T
(Compiler) 180 321.33 T
(,\323 Chapter) 221.85 321.33 T
(4.) 272.04 321.33 T
0 14 Q
(2.4.1) 130.86 279 T
0 18 Q
(De\336ning a Class) 180 279 T
2 10 Q
-0.38 (Every class needs to be de\336ned. The class\325) 180 255.33 P
-0.38 (s de\336nition must be included once,) 370.87 255.33 P
-0.5 (and only once, in the compilation, before the class name is ever actually used) 180 242.33 P
(\050e.g. before you create the class structure\051. Y) 180 229.33 T
(ou can so this by putting the) 384.26 229.33 T
(class de\336nition high in the application\325) 180 216.33 T
(s) 358.73 216.33 T
6 F
(.asm) 366.14 216.33 T
2 F
( \336le, or \050if there are several) 389.66 216.33 T
6 F
(.asm) 180 203.33 T
2 F
( \336les\051 by putting it in a common) 203.52 203.33 T
6 F
(.def) 353.36 203.33 T
2 F
( \336le.) 372.44 203.33 T
(A class\325) 180 183.33 T
(s de\336nition has this basic format:) 214.08 183.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "51" 35
%%Page: "52" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  52) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(<className>) 216 641.33 T
(class <superClassName> \134) 324 641.33 T
([, master [, variant]]) 324 627.33 T
(; class\325s messages...) 252 613.33 T
(; class\325s instance data fields...) 252 599.33 T
(; class\325s vardata fields...) 252 585.33 T
(<className>) 216 571.33 T
(endc) 324 571.33 T
6 F
(className) 180 550.33 T
2 F
(This is the name of the class you are de\336ning.) 243 550.33 T
6 F
(superClassName) 180 531.33 T
2 F
(This is the name of the class\325) 243 519.33 T
(s immediate superclass.) 375.99 519.33 T
(For an example of a class de\336nition, see Code Display) 180 500.33 T
(2-) 430.6 500.33 T
(4 on page) 439.49 500.33 T
1 F
(Y) 486.17 500.33 T
2 F
(54.) 496.87 500.33 T
0 14 Q
(2.4.1.1) 119.19 467.67 T
(De\336ning a Class\325) 180 467.67 T
(s Messages) 292.29 467.67 T
2 10 Q
-0.51 (In Esp, you specify very little when you de\336ne a class\325) 180 445.33 P
-0.51 (s messages. Y) 422.84 445.33 P
-0.51 (ou simply) 484.43 445.33 P
-0.59 (specify the message name, without arguments or other information, like this:) 180 432.33 P
4 F
(<msgName>) 216 416.33 T
(message) 288 416.33 T
6 F
(msgName) 180 395.33 T
2 F
(This is the name of the message.) 243 395.33 T
(When you send the message, it is your responsibility to load the correct) 180 376.33 T
(arguments into the appropriate registers, or push them on the stack, as) 180 363.33 T
(described in section 3.3.2.2 of chapter 3; Esp will not do any type-checking.) 180 350.33 T
(Y) 180 330.33 T
(ou can export or import messages in Esp, much as you can in Goc \050as) 185.93 330.33 T
-0.27 (described in section 5.4.1.1 on page 151 of \322GEOS Programming,\323 Chapter) 180 317.33 P
-0.27 (5) 522.93 317.33 P
-0.02 (of the Concepts Book\051. T) 180 304.33 P
-0.02 (o export a range of message numbers, to be used by) 291.4 304.33 P
(subclasses, you use this directive:) 180 291.33 T
4 F
(<messageRangeName>) 216 275.33 T
(export <numToExport>) 360 275.33 T
6 F
(messageRangeName) 180 254.33 T
2 F
(This is the name of the message range to export. A subclass) 243 242.33 T
(which wishes to use the exported range will use this name to) 243 230.33 T
(import it.) 243 218.33 T
6 F
(numT) 180 199.33 T
(oExport) 209.63 199.33 T
2 F
(This is the number of messages to export.) 243 187.33 T
(T) 180 168.33 T
(o \322import\323 a message, i.e. de\336ne a message in a message range which was) 185.75 168.33 T
(exported by your class\325) 180 155.33 T
(s superclass, de\336ne the message like this:) 284.45 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "52" 36
%%Page: "53" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Defining Classes) 445.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  53) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(<messageName>) 216 641.33 T
(message <exportedRangeName>) 324 641.33 T
6 F
(exportedRangeName) 180 620.33 T
2 F
-0.32 (This is the name of the message range exported by your class\325) 243 608.33 P
-0.32 (s) 523.91 608.33 P
(superclass.) 243 596.33 T
0 14 Q
(2.4.1.2) 119.19 563.67 T
(De\336ning a Class\325) 180 563.67 T
(s Instance Data Fields) 292.29 563.67 T
2 10 Q
-0.73 (T) 180 541.33 P
-0.73 (o de\336ne a class\325) 185.75 541.33 P
-0.73 (s instance data \336elds, put lines with this format in your class) 254.51 541.33 P
(de\336nition:) 180 528.33 T
4 F
(<fieldName>) 216 512.33 T
(<fieldType> [<defaultValue>]) 324 512.33 T
6 F
(\336eldName) 180 491.33 T
2 F
(This is the name of the instance data \336eld.) 243 491.33 T
6 F
(\336eldT) 180 472.33 T
(ype) 209.48 472.33 T
2 F
(This is the type of the instance data \336eld. It may be any) 243 472.33 T
(standard or application-de\336ned data type.) 243 460.33 T
6 F
(defaultV) 180 441.33 T
(alue) 223.71 441.33 T
2 F
-0.54 (This is the default value of the \336eld when an object of this class) 243 429.33 P
(in instantiated.) 243 417.33 T
0 14 Q
(2.4.1.3) 119.19 384.67 T
(De\336ning a Class\325) 180 384.67 T
(s V) 292.29 384.67 T
(ardata) 312.54 384.67 T
2 10 Q
-0.39 (T) 180 362.33 P
-0.39 (o de\336ne a hint or vardata \336eld for a class, put lines with this format in your) 185.75 362.33 P
(class de\336nition:) 180 349.33 T
4 F
(<varFieldName>) 216 333.33 T
(vardata) 324 333.33 T
([<fieldType>]) 396 333.33 T
6 F
(varFieldName) 180 312.33 T
2 F
(This is the name of the hint or vardata \336eld.) 243 300.33 T
6 F
(\336eldT) 180 281.33 T
(ype) 209.48 281.33 T
2 F
(This \336eld is optional; it is the type of data associated with the) 243 281.33 T
(vardata \336eld. It may be any standard or application-de\336ned) 243 269.33 T
(data type.) 243 257.33 T
0 14 Q
(2.4.2) 130.86 216 T
0 18 Q
(Creating a Class\325) 180 216 T
(s Class Structure) 325.39 216 T
2 10 Q
-0.18 (Once you have de\336ned a class, you must create its class structure. The class) 180 192.33 P
(structure must be in \336xed memory; therefore, it is generally placed in the) 180 179.33 T
(application\325) 180 166.33 T
(s) 233.16 166.33 T
6 F
(idata) 240.57 166.33 T
2 F
( \322resource\323, which means it will be in the application\325) 267.42 166.33 T
(s) 512.09 166.33 T
6 F
(dgroup) 180 153.33 T
2 F
( resource at run-time.) 217.6 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "53" 37
%%Page: "54" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  54) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
-0.24 (T) 180 641.33 P
-0.24 (o create a class structure, put the following line in your application\325) 185.75 641.33 P
-0.24 (s) 494.2 641.33 P
6 F
-0.25 (idata) 501.37 641.33 P
2 F
-0.24 (:) 528.22 641.33 P
4 F
(<className>) 216 625.33 T
([mask <ClassFlag> \134) 324 625.33 T
([or mask <ClassFlag>]*]) 360 611.33 T
6 F
(className) 180 590.33 T
2 F
(This is the name of the class.) 243 590.33 T
6 F
(ClassFlag) 180 571.33 T
2 F
(This is a member of the) 243 571.33 T
6 F
(ClassFlags) 354.69 571.33 T
2 F
( record \050e.g.) 410.06 571.33 T
2 9 Q
(CLASSF_NEVER_SA) 243 559.33 T
(VED) 332.84 559.33 T
2 10 Q
(\051; you may have zero or more of these) 352.84 559.33 T
4 F
(or) 243 547.33 T
2 F
(\325d together) 255.55 547.33 T
(.) 304.07 547.33 T
81 515.98 531 528 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.98 531 528 R
7 X
0 0 0 1 0 0 0 K
V
76.5 523.23 617.5 526.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 509.31 T
(2-) 147.13 509.31 T
(4 Creating a Class) 156.02 509.31 T
4 9 Q
(; Here we create a subclass of GenTriggerClass. Note that if we wanted to create) 81 494.98 T
(; any of these objects at startup, we would have to put a corresponding definition) 81 483.98 T
(; in the application\325s .ui file.) 81 472.98 T
(MyTriggerClass) 81 454.98 T
(class GenTriggerClass) 168.98 454.98 T
(; Here are the class\325s messages:) 81 436.98 T
(MSG_MT_DO_SOMETHING_CLEVER) 81 418.98 T
(message) 256.5 418.98 T
(;) 81 407.98 T
(;) 81 396.98 T
(Pass:) 125 396.98 T
(cx = freeble factor) 212.5 396.98 T
(;) 81 385.98 T
(dx = coefficient of quux) 212.5 385.98 T
(;) 81 374.98 T
(Return:) 125 374.98 T
(ax = # of roads a man must walk down) 212.5 374.98 T
(;) 81 363.98 T
(Destroyed:) 125 363.98 T
(cx, dx) 212.5 363.98 T
(; Here are the class\325s new instance fields:) 81 345.98 T
(MTI_fieldOne) 125 327.98 T
(byte) 212.5 327.98 T
(MTI_fieldTwo) 125 316.98 T
(MyStruct) 212.5 316.98 T
(<0, 17, "Frank T. Poomm">) 301 316.98 T
(; Here are the object\325s vardata fields:) 81 298.98 T
(GT_MY_VARDATA_FIELD) 81 280.98 T
(vardata) 212.5 280.98 T
(lptr) 256.5 280.98 T
(MyTriggerClass) 81 262.98 T
(endc) 168.98 262.98 T
(; We also have to create the class\325s class structure. We do this in the idata) 81 244.98 T
(; resource:) 81 233.98 T
(idata) 81 215.98 T
(segment) 125 215.98 T
(MyTriggerClass) 81 197.98 T
(idata) 81 179.98 T
(ends) 125 179.98 T
81 155.95 531 167.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 155.95 531 167.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 163.2 617.5 166.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "54" 38
%%Page: "55" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Error-Checking Code) 417.2 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  55) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(2.4.3) 130.86 636 T
0 18 Q
(De\336ning your Process Class) 180 636 T
2 10 Q
(Every application with a process thread needs to de\336ne a new process class) 180 612.33 T
-0.12 (for its process object. This is much like de\336ning any other class. There are a) 180 599.33 P
(couple of differences, however) 180 586.33 T
(.) 317.02 586.33 T
-0.18 (Process objects do not have vardata, and they do not have ordinary instance) 180 566.33 P
(data. Notionally) 180 553.33 T
(, all the variables in the) 253.73 553.33 T
6 F
(dgroup) 366.73 553.33 T
2 F
( segment are the process) 404.33 553.33 T
-0.42 (object\325) 180 540.33 P
-0.42 (s instance data. In fact, while you must create a class structure for the) 208.52 540.33 P
(process object \050as described in section 2.4.1 on page 51\051, you do not need to) 180 527.33 T
(de\336ne the process object \050with) 180 514.33 T
4 F
(class... endc) 321.85 514.33 T
2 F
(\051 unless you are de\336ning) 399.85 514.33 T
(messages for your process class.) 180 501.33 T
0 14 Q
(2.5) 142.54 449 T
0 24 Q
(Error-Checking Code) 180 449 T
4 10 Q
-0.6 (ERROR_CHECK, ERROR, ERROR_C, ERROR_NC, ERROR_Z, ERROR_NZ...) 180 423.33 P
2 F
(Error) 180 403.33 T
(-checking is as important in assembly code as in Goc. Esp provides) 205.36 403.33 T
-0.29 (error) 180 390.33 P
-0.29 (-checking facilities which are very much like those of Goc. It allows you) 203.14 390.33 P
(to write code which will only be run by the error) 180 377.33 T
(-checking version of your) 401.87 377.33 T
(geode. It also provides many routines and macros which are useful for) 180 364.33 T
(checking for errors.) 180 351.33 T
(There are two main ways to designate code \322error) 180 331.33 T
(-checking\323. If you want to) 408.73 331.33 T
(declare a single line as \322error) 180 318.33 T
(-checking,\323 you should bracket the line with) 314.83 318.33 T
(\322) 180 305.33 T
4 F
(EC<...>) 183.89 305.33 T
2 F
(\323, like this:) 225.89 305.33 T
4 F
(EC<) 216 289.33 T
(call) 252 289.33 T
(MyECValidationRoutine>) 288 289.33 T
2 F
(In the error) 180 268.33 T
(-checking version of the code, this line will be included as an) 233.88 268.33 T
(ordinary instruction; in the non-error) 180 255.33 T
(-checking version, the line will be) 352.58 255.33 T
(stripped out. \050T) 180 242.33 T
(o include a line only in the) 250.75 242.33 T
5 F
(non) 375.77 242.33 T
2 F
(-error) 392.99 242.33 T
(-checking version,) 419.46 242.33 T
(bracket the line with \322) 180 229.33 T
4 F
(NEC<...>) 283.17 229.33 T
2 F
(\323.\051) 331.17 229.33 T
(When the compiler is compiling error) 180 209.33 T
(-checking code, it de\336nes the \337ag) 351.66 209.33 T
2 9 Q
(ERROR_CHECK) 180 196.33 T
2 10 Q
( to non-zero. Y) 251.49 196.33 T
(ou can use this to designate several lines as) 317.23 196.33 T
(error) 180 183.33 T
(-checking code:) 203.14 183.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "55" 39
%%Page: "56" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  56) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
4 10 Q
0 X
(if) 216 641.33 T
(ERROR_CHECK) 252 641.33 T
(; bx should be non-zero; is it?) 252 627.33 T
(pushf) 252 613.33 T
(tst) 252 599.33 T
(bx) 288 599.33 T
(jnz) 252 585.33 T
(noError) 288 585.33 T
(; if we reach this, it\325s an error) 216 571.33 T
(ERROR MY_FATAL_ERROR_CODE) 252 557.33 T
(noError:) 216 543.33 T
(; not an error condition) 288 543.33 T
(popf) 252 529.33 T
(endif) 216 515.33 T
2 F
-0.24 (Esp also provides several macros for error) 180 494.33 P
-0.24 (-checking. There are a few macros) 372.26 494.33 P
(and routines of general usefulness and they are documented here.) 180 481.33 T
(There are many macros which call) 180 461.33 T
6 F
(FatalError) 341.68 461.33 T
2 F
(, passing an error number) 397.43 461.33 T
(.) 516.88 461.33 T
(The most basic is) 180 448.33 T
4 F
(ERROR) 262.43 448.33 T
2 F
(. This macro is called with a single argument,) 292.43 448.33 T
-0.69 (namely an error number) 180 435.33 P
-0.69 (. It generates a fatal error; the error code is available) 290.73 435.33 P
(for the debugger) 180 422.33 T
(.) 255.18 422.33 T
(There are similar macros which call) 180 402.33 T
6 F
(FatalError) 348.72 402.33 T
2 F
( if the \337ags are set in a) 405.21 402.33 T
-0.38 (particular way) 180 389.33 P
-0.38 (. For example,) 246.48 389.33 P
4 F
-0.81 (ERROR_C) 314.07 389.33 P
2 F
-0.38 ( checks to see if the carry is set. If it is) 356.07 389.33 P
(\050that is, if a) 180 376.33 T
4 F
(jc) 236.5 376.33 T
2 F
( instruction would jump\051,) 248.5 376.33 T
4 F
(ERROR_C) 368.13 376.33 T
2 F
( calls) 410.13 376.33 T
2 9 Q
(ERROR) 436.62 376.33 T
2 10 Q
( with the) 469.61 376.33 T
-0.14 (speci\336ed code; otherwise, it continues normally) 180 363.33 P
-0.14 (. Conversely) 395.78 363.33 P
-0.14 (,) 451.38 363.33 P
4 F
-0.31 (ERROR_NC) 456.79 363.33 P
2 F
-0.14 ( calls) 504.79 363.33 P
2 9 Q
(ERROR) 180 350.33 T
2 10 Q
( if) 212.99 350.33 T
4 F
(CF) 225.03 350.33 T
2 F
( is) 237.03 350.33 T
5 F
(not) 250.37 350.33 T
2 F
( set. For example, the code sample on page 56 could be) 265 350.33 T
(written more clearly like this:) 180 337.33 T
4 F
(if) 216 321.33 T
(ERROR_CHECK) 252 321.33 T
(; bx should be non-zero; is it?) 252 307.33 T
(pushf) 252 293.33 T
(tst) 252 279.33 T
(bx) 288 279.33 T
(ERROR_Z MY_FATAL_ERROR_CODE) 252 265.33 T
(popf) 252 251.33 T
(endif) 216 237.33 T
2 F
(There is an) 180 216.33 T
4 F
(ERROR_) 235.01 216.33 T
2 F
( macro to correspond to every conditional jump) 271.01 216.33 T
-0.73 (instruction except) 180 203.33 P
4 F
-1.59 (jcxz) 264.45 203.33 P
2 F
-0.73 (. For example, there is an) 288.45 203.33 P
4 F
-1.59 (ERROR_GE) 405 203.33 P
2 F
-0.73 (; this macro calls) 453 203.33 P
6 F
(FatalError) 180 190.33 T
2 F
( in those situations in which) 236.49 190.33 T
4 F
(jge) 370.03 190.33 T
2 F
( would jump.) 388.03 190.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "56" 40
%%Page: "57" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Error-Checking Code) 417.2 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(Y) 533.4 671.34 T
2 F
(  57) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
504 90 558 125 R
7 X
V
1 60 Q
0 X
(Y) 507.24 85 T
0 24 Q
(Esp) 456.98 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(2.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
7 F
(ERROR) 99 634.99 T
4 10 Q
(ERROR) 99 621.33 T
(<errorNumber>) 153 621.33 T
2 F
(This macro generates a fatal error) 180 603.33 T
(.) 337.42 603.33 T
7 9 Q
(Pass:) 126 585.33 T
5 10 Q
(errorNumber) 180 585.33 T
2 F
(This is an error code for use by the debugger) 252 585.33 T
(.) 456.82 585.33 T
7 9 Q
(Returns:) 126 568.83 T
2 10 Q
(Nothing.) 180 568.83 T
7 9 Q
(Destr) 126 552.33 T
(oyed:) 146.83 552.33 T
2 10 Q
(Everything.) 180 552.33 T
7 9 Q
(Include:) 126 535.83 T
6 10 Q
(ec.def) 180 535.83 T
81 520.98 531 525.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 520.98 531 525.99 R
7 X
0 0 0 1 0 0 0 K
V
50 524.98 609.01 524.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 512.98 T
7 F
(ERROR_C, ERROR_NC, ERROR_Z, ERROR_NZ...) 99 512.98 T
4 10 Q
(ERROR_) 99 499.32 T
8 F
(x) 135 499.32 T
4 F
(<errorNumber>) 153 499.32 T
2 F
-0.18 (These macros call) 180 481.32 P
4 F
-0.4 (ERROR) 264.46 481.32 P
2 F
-0.18 ( if the status \337ags are set in a particular way) 294.46 481.32 P
-0.18 (. Each) 499.7 481.32 P
(of these macros corresponds to a conditional jump instruction \050) 180 468.32 T
4 F
(ERROR_) 469.81 468.32 T
8 F
(x) 505.81 468.32 T
2 F
(corresponds to) 180 455.32 T
4 F
(j) 249.62 455.32 T
8 F
(x) 255.62 455.32 T
2 F
(\051; the macro calls) 261.62 455.32 T
4 F
(ERROR) 343.11 455.32 T
2 F
( in those situations in which the) 373.11 455.32 T
(corresponding conditional jump instruction would jump. \050For example,) 180 442.32 T
4 F
(ERROR_C) 180 429.32 T
2 F
( calls) 222 429.32 T
4 F
(ERROR) 248.49 429.32 T
2 F
( in those situations in which) 278.49 429.32 T
4 F
(jc) 412.03 429.32 T
2 F
( would jump, i.e. when) 424.03 429.32 T
3 F
(CF) 180 416.32 T
2 F
( is set.\051 There is one such macro for every conditional jump instruction) 192 416.32 T
(except) 180 403.32 T
4 F
(jcxz) 212.22 403.32 T
2 F
(.) 236.22 403.32 T
7 9 Q
(Pass:) 126 385.32 T
5 10 Q
(errorNumber) 180 385.32 T
2 F
(This is an error code; it is passed to) 252 385.32 T
4 F
(ERROR) 418.32 385.32 T
2 F
( if the error) 448.32 385.32 T
(condition occurs.) 252 373.82 T
7 9 Q
(Returns:) 126 357.32 T
2 10 Q
(Nothing.) 180 357.32 T
7 9 Q
(Destr) 126 340.82 T
(oyed:) 146.83 340.82 T
2 10 Q
(Nothing \050unless the error condition occurs, in which case everything is) 180 340.82 T
(destroyed\051.) 180 329.32 T
7 9 Q
(Include:) 126 312.82 T
6 10 Q
(ec.def) 180 312.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "57" 41
%%Page: "58" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Esp Basics) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(Y) 54 671.34 T
2 F
(  58) 61.92 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(Y) 57.24 85 T
0 24 Q
(Esp) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(2.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "58" 42
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 42
%%DocumentFonts: Helvetica-Bold
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Roman
%%+ Courier-Bold
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Times-Bold
%%+ Courier-Oblique
%%EOF
