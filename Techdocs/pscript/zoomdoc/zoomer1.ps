%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "3" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(First Look) 490.32 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(3) 552.44 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
0 14 Q
(z.1) 143.32 632 T
0 24 Q
(First Look) 180 632 T
0 12 Q
(Hardware) 180 600 T
1 9 Q
(NEC) 185.56 344.24 T
1 10 Q
( V20-based \322) 205.89 344.24 T
1 9 Q
(PC) 263.5 344.24 T
1 10 Q
( on a Chip\323) 276 344.24 T
(1 Meg of) 395.06 344.24 T
1 9 Q
(RAM) 437.1 344.24 T
1 10 Q
(8 MHz Clock Speed) 185.56 331.24 T
(640K Heap) 400.62 331.24 T
(4 Meg of) 185.56 318.24 T
1 9 Q
(ROM) 227.6 318.24 T
1 10 Q
(352K) 400.62 318.24 T
1 9 Q
(RAM) 427.86 318.24 T
1 10 Q
( Disk) 449.36 318.24 T
(32) 400.62 305.24 T
1 9 Q
(K) 411.74 305.24 T
1 10 Q
( V) 418.75 305.24 T
(ideo Memory) 428.31 305.24 T
0 12 Q
(System Software:) 180 278.9 T
1 10 Q
(Geo) 180 257.24 T
1 9 Q
(DOS) 197.78 257.24 T
1 10 Q
(, modi\336ed for use with Zoomer) 217.45 257.24 T
(.) 356.9 257.24 T
1 9 Q
(GEOS) 180 244.24 T
1 10 Q
( 2.0 with additional File T) 206.17 244.24 T
(ransfer Driver) 325.97 244.24 T
(.) 391.7 244.24 T
0 12 Q
(Included Applications:) 180 217.9 T
1 10 Q
-0.39 (Datebook, Address Book, Notebook, Calculator) 180 196.24 P
-0.39 (, W) 393.48 196.24 P
-0.39 (orld Clock, and Dictionary) 407.9 196.24 P
0.31 -5 (*) 528.22 196.24 B
-0.39 (.) 528.22 196.24 P
(Setup, Preferences, File Manager) 180 183.24 T
(, Uki, Solitaire, and Pyramid.) 333.71 183.24 T
(*For information about applications listed on this line, contact Palm \050see) 180 163.24 T
(back page for contact information\051.) 180 150.24 T
81 144 531 648 C
180.4 361.9 531 596 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 X
0 0 0 1 0 0 0 K
%%BeginBinary:  3579     
252 318 201.6 254.4 0 226.8 315.83 BEGINBITMAPBWc




















="j"
E0/01="E#
80007F="F"
003F<"G"
FE1F
<"G"
FC0F









?"W
3F?"w"
D555C0>"x"
01AAA0?x"
5560>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAFE>"w$
035557FF80>"w$
02AAAFC000>"w#
03555F00>"v#
02AAAFFE>"v$
0355FFDC0C>"u%
02AAEBFE083C>"t&
035557F7C00838>"s'
02AAAEAFC7003060>"s(
03555F5F0700200180>1
02AAAAAAFEAAAAAAAABCBE0602800060>1
0355555FFF555555557878041570001E>2
02AAFFFFE02AAAAAAAF030043AB080078F>2
037FFFFC0055555555E00008017050000F>0
07FFC000002AAAAFEBC0021802F0B0=%8+
07FFF00055557FF7800C3005E150=$9+
7FFE00BEAAFC0F8218607AE2B0<$9,
FFFE00017FD5F007043061F5C150="80
E003802BF06BC0020A60C38282B0007F="81
003F0057E017804014C1C00145503FFFE0<"83
C002FC00AF800F01C02B83800AAAFFFFE0001F>2
0155F0055F000E0380558780155FFFF000>1
02AFE00ABC030E0F002A820AABFFE000>08#
035FC05578070C1E005505157FF8001FFF>/8#
02AE002AF02E083C00AA8ABFFF800FFF<1
CC00037C0155E07C1878315557FFE000<0
FC0002FC02AAE0F8306030AFFFF000>0
03F00555C1F07000515FFF00000150>,8#
07C02AABC3E0F002ABFE002AB0>+8$
0F80555787C3F005FFF8055550>+8$
1E00AAAB8787C03FFF00AAAAB0>*8%
3C015557060F00FF8005555550>*8%
F80AAAAB00080FF800AAAAAAB0>0
F005555500003F8000015555555550=&8*
03C02AAAABF000000AAAAAAAAAB0=1
0FC0555555003FA00001555555555550=1
1F00AAAAAA80F80000AAAAAAAAAAAAB0=1
7C03555555F7C0000555555555555550=1
F802AAAABFF800002AAAAAAAAAAAAAB0<*r"
FDE0035555FFC000015550<*r"
FFC002AABFF800002AAAB0=(s"
800357FFC000155550='t"
0002FFF80000AAB0<(t"
FE000FFE0000155550<'u"
FC03FFC00002AAB0<'u"
F81FFC0000155550<$8v"
F01F00AAB0<#8"v"
E078055550<%w"
C0E00002AAB0=#x"
00005550<$x"
800002AAB0>"x"
035550<$x"
000002AAB0;"8"x"
FC035550;"8"x"
F002AAB0;%x"
E00400035550<$x"
0C0002AAB0<$x"
7C00035550<$x"
FC0002AAB0;"8"x"
E1035550;"8"x"
F702AAB0;"8"x"
FF035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"x"
035550>"x"
02AAB0>"X"
03F0>0
020040080100200400801002004010?"
70?.
885FE9F97FA004A8BFD0C2FF47>0
0324502A0540A70554A05332A14890?.
54486A054CA8F504AF5212A140?,
24494A0555A81574A5540A>'8#9#
028F48EA056A04AA4110?.
78C8CA0555AA5574A55212A142?,
0AC8AA056AAFF504AA5332?.
08C84A0555A00504A550C2A140?&8'
074FC9F97FFCBFD002FF42>0
010040080100200400801002004020?"B"
8060>#W"
007F80?i



@%<#
0FFFFFC001F0@%<#
30000030060C@%<#
CFFFFFCC09F2?&<#
01300000321209?&<$
0240010009140480=);%
010004800280048028028020?&>"
050004400240?'
0A0008200140A#;"
0FE0F8?'8#
1430000030A00306@"8"9&
502804F9001404@"8"9'
9024090480120880?#8"9&
1510220A024009F0?#8"9'
149024140140040100@"8";$
5028200306@"8"<#
303000F8?'<"
0A000FE0014000A#
0820?'8#
0500044002800A02?&9$
0480028004090440?'8#
02400100090004F8?&9$
0130000032020080?&9$
00CFFFFFCC018300@%9#
30000030007C@*
0FFFFFC003FFF00000@(
000000000C000CD$
080004D$
100002
=#;$<"
00801FFFFE40="<$<"
0410000248>"D"
4088=#C#
08300304>"P$P"
0FF00003FC="a$a"
1010000202
=#C#
20080401>"?&
102492492482=#?(
40200000000001008F>";$;#
400800040080=#;,
80800C000C000924924920404F=#;$a#
010003FFF0200F="<$<"
0200000010<#@(
FE041249249248081F="@`"
0804<#E#
FF00003F="F"
807F="E#
E001FF=Z
1

































































































ENDBITMAP
%%EndBinary
253.04 394.6 256.39 397.47 R
7 X
V
1 H
0 Z
0 X
N
243.67 546.48 263 535.6 262.43 538.78 267.49 530.65 255.13 532.42 260.75 533.83 231.51 542.67 7 L
7 X
V
2 Z
0 X
N
330.27 582.81 339.09 559.56 336.05 560.66 343.18 554.27 343.59 566.76 341.22 561.47 338.74 582.27 7 L
7 X
V
0 X
N
3 8 Q
(PCMCIA II slot:) 200.58 564.19 T
(50 ma Maximum) 200.58 556.62 T
(Current Output) 200.58 549.04 T
(256x320) 181.39 506.63 T
(Monochrome) 181.39 499.05 T
(Display) 181.39 491.48 T
(T) 404.83 463.03 T
(en Hard Icons) 409.59 463.03 T
(T) 346.92 370.72 T
(wo \322Fire Buttons\323) 351.69 370.72 T
329.69 377.43 310.96 396.55 311.46 391.77 307.02 403.99 317.86 401.34 312.93 399.21 338.56 385.93 7 L
7 X
V
0 X
N
397.23 465.73 375.87 453 376.43 456.18 371.37 448.05 383.74 449.82 378.12 451.24 407.35 460.07 7 L
7 X
V
0 X
N
393.4 544.79 362.67 531.15 363.48 534.56 356.2 525.85 373.99 527.74 365.9 529.26 407.96 538.73 7 L
7 X
V
0 X
N
218.46 482 257.07 469.27 256.05 472.45 265.19 464.32 242.84 466.09 253 467.5 202.22 477.34 7 L
7 X
V
0 X
N
(100 Hours in-use) 204.81 375.34 T
(Battery Life) 213.02 367.76 T
90 450 3.79 5.05 438.56 390.08 G
3 H
0 Z
90 450 3.79 5.05 438.56 390.08 A
431.62 412.17 442.35 391.98 2 L
V
2 Z
N
90 450 3.79 5.05 454.98 392.61 G
0 Z
90 450 3.79 5.05 454.98 392.61 A
448.03 414.7 458.76 394.5 2 L
V
2 Z
N
410.79 392.61 467.6 419.12 2 L
V
0.5 H
N
415.84 387.56 472.65 414.07 2 L
V
N
420.89 382.51 477.7 409.02 2 L
V
N
425.94 377.46 482.75 403.97 2 L
V
N
(Three V) 446.14 374.39 T
(oices) 473.99 374.39 T
(of Sound and DAC) 446.14 366.81 T
(\0508x1) 181.39 483.9 T
(1 cm\051) 196.36 483.9 T
211.71 390.29 210.75 391.73 210.9 400.83 211.66 401.78 253.57 401.78 254.63 400.98 254.63 391.41
 253.51 390.45 8 Y
7 X
V
1 H
0 Z
0 X
N
216.68 388.67 220.03 391.54 R
7 X
V
0 X
N
261.36 384.36 262.32 385.8 262.17 394.89 261.41 395.85 219.5 395.85 218.44 395.05 218.44 385.48
 219.55 384.52 8 Y
7 X
V
0 X
N
224.28 392.33 224.28 387.88 2 L
7 X
V
3 H
2 Z
3 X
N
222.05 390.11 226.5 390.11 2 L
7 X
V
3 X
N
254.11 390.11 258.56 390.11 2 L
7 X
V
3 X
N
0 X
(Serial Port) 322.35 586.66 T
(Resistive Digitizer) 400.86 542.35 T
(Directional Arrow Keys) 330.51 378.3 T
81 144 531 648 C
0 -208 1000 792 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
180 297 511 360 R
1 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
FMENDPAGE
%%EndPage: "3" 1
%%Page: "4" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Programming Issues) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(4) 54 671.34 T
32 684 216 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(Z) 60.99 85 T
0 24 Q
(Zoomer Programmer) 102 110 T
(\325) 340.27 110 T
(s Guide) 346.06 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.2) 143.32 632 T
0 24 Q
(Programming Issues) 180 632 T
1 10 Q
-0.09 (This page summarizes the main issues Zoomer programmers must address.) 180 606.33 P
0 12 Q
(Heap Space) 180 580 T
1 10 Q
(Zoomer) 180 558.33 T
(\325) 214.99 558.33 T
(s total heap space is 640K, equal to the lowest of desktop) 216.66 558.33 T
1 9 Q
(PC) 481.92 558.33 T
1 10 Q
(s. This) 494.42 558.33 T
(space must be shared by the application, active desk accessories, and) 180 545.33 T
1 9 Q
(GEOS) 501.53 545.33 T
1 10 Q
(libraries used by these programs. Applications must be highly sensitive to) 180 532.33 T
-0.08 (their memory usage; organize your resources ef\336ciently and don\325) 180 519.33 P
-0.08 (t lock large) 476.96 519.33 P
-0.38 (blocks. Use \336xed memory only when absolutely necessary) 180 506.33 P
-0.38 (. When optimizing,) 441.96 506.33 P
(almost always save bytes of code in favor of cycles of) 180 493.33 T
1 9 Q
(CPU) 423.92 493.33 T
1 10 Q
( time.) 443.76 493.33 T
0 12 Q
(Processor Speed) 180 467 T
1 10 Q
(Zoomer) 180 445.33 T
(\325) 214.99 445.33 T
(s processor runs at 8) 216.66 445.33 T
1 9 Q
(MH) 312.03 445.33 T
1 10 Q
(z, slower than most desktop machines. The) 328.02 445.33 T
1 9 Q
-0.69 (GEOS) 180 432.33 P
1 10 Q
-0.76 ( system software is highly optimized assembly code; whenever possible,) 206.17 432.33 P
(you should rely on the system services. Budget time for your own code) 180 419.33 T
(optimization. Swat provides many advanced optimization tools; use them.) 180 406.33 T
0 12 Q
(Rare Shutdowns) 180 380 T
1 10 Q
(Zoomer never shuts down. It has no machine-level resets. If your program) 180 358.33 T
(has memory \322leaks,\323 lost memory stays lost until the batteries need) 180 345.33 T
(changing, and Zoomer is designed to make that a long time. Swat has tools) 180 332.33 T
-0.43 (to aid in tracking down memory leaks; use them. T) 180 319.33 P
-0.43 (o conserve batteries, don\325) 410.1 319.33 P
-0.43 (t) 524.76 319.33 P
(force idle program threads to be active; on Zoomer) 180 306.33 T
(, a wait loop uses more) 410.75 306.33 T
(power than an inactive thread.) 180 293.33 T
0 12 Q
(Screen Size) 180 267 T
1 10 Q
(Zoomer) 180 245.33 T
(\325) 214.99 245.33 T
(s screen is tiny compared to desktop displays. Its 256x320 screen is) 216.66 245.33 T
(about 8x1) 180 232.33 T
(1 cm \050about 3.2x4.3 in\051. T) 224.84 232.33 T
(o make the most out of this area,) 341.37 232.33 T
(applications must choose their on-screen gadgetry carefully) 180 219.33 T
(. An application) 453.33 219.33 T
(with buttons for each function may \336nd itself with no space to display a) 180 206.33 T
(document. Dialog boxes must be laid out carefully to restrain them from) 180 193.33 T
(spilling beyond the screen\325) 180 180.33 T
(s boundaries. At the same time, you should) 301.86 180.33 T
(remember that applications must share the screen with Desk Accessories) 180 167.33 T
(and dialogs.) 180 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
141.72 368.69 143.92 370.57 R
7 X
V
1 H
0 Z
0 X
N
114.63 365.87 114 366.81 114.1 372.77 114.6 373.4 142.07 373.4 142.76 372.87 142.76 366.6
 142.03 365.97 8 Y
7 X
V
0 X
N
117.89 364.8 120.08 366.69 R
7 X
V
0 X
N
147.18 361.98 147.8 362.92 147.7 368.88 147.21 369.51 119.74 369.51 119.04 368.99 119.04 362.71
 119.77 362.08 8 Y
7 X
V
0 X
N
122.87 367.2 122.87 364.29 2 L
7 X
V
3 H
2 Z
3 X
N
121.41 365.74 124.32 365.74 2 L
7 X
V
3 X
N
142.43 365.74 145.34 365.74 2 L
7 X
V
3 X
N
114.79 247.69 M
 114.79 258.69 114.79 258.69 123.5 258.69 D
 132.21 258.69 132.21 258.69 132.21 247.69 D
 132.21 236.69 132.21 236.69 123.5 236.69 D
 114.79 236.69 114.79 236.69 114.79 247.69 D
O
0.5 H
0 Z
0 X
N
114 466.6 128.67 466.6 114 435.78 128.67 435.78 4 Y
7 X
V
1 H
0 X
N
118.79 441.98 117.16 437.92 125.51 437.92 123.27 442.2 4 Y
V
N
119.19 460.39 121.44 455.9 123.47 460.18 3 Y
V
N
3 9 Q
(8 MHz) 125.41 444.23 T
114.79 242.19 M
 114.79 242.19 114 239.04 123.5 239.04 D
 133 239.04 132.21 241.4 132.21 241.4 D
0.5 H
2 Z
N
1 14 Q
(640K) 114 556.69 T
FMENDPAGE
%%EndPage: "4" 2
%%Page: "5" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Application Style) 444.42 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(5) 552.44 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.3) 143.32 632 T
0 24 Q
(Application Style) 180 632 T
1 10 Q
(Zoomer style is rooted in simplicity) 180 606.33 T
(. Zoomer users won\325) 340.94 606.33 T
(t be familiar with) 432.06 606.33 T
(other computer programs; given a choice between a simpler) 180 593.33 T
1 9 Q
(UI) 457.42 593.33 T
1 10 Q
( or an extra) 468.42 593.33 T
(feature, you should probably choose the simpler) 180 580.33 T
1 9 Q
(UI) 403.35 580.33 T
1 10 Q
(. The following style) 414.35 580.33 T
(guidelines may prove useful.) 180 567.33 T
0 12 Q
(Full Screen Applications) 180 541 T
1 10 Q
-0.31 (Applications normally come up full-screen. It would not be practical to allow) 180 519.33 P
-0.13 (more than one application on the screen at a time, since neither would have) 180 506.33 P
(enough room to do anything. If you are making a small application, you) 180 493.33 T
-0.24 (should probably make it a Desk Accessory) 180 480.33 P
-0.24 (, which may share the screen with) 371.74 480.33 P
(other applications.) 180 467.33 T
0 12 Q
(Optional Menus) 180 441 T
1 10 Q
(The Zoomer UI tends to avoid menus. Menus take up valuable screen real) 180 419.33 T
-0.54 (estate. The Zoomer allows for a \337oating menu bar) 180 406.33 P
-0.54 (, but most users will choose) 404.6 406.33 P
(not to use it \050again, to save screen space\051. Thus, any commonly used UI) 180 393.33 T
(gadgetry should appear within the body of your primary window) 180 380.33 T
(, and not) 476.88 380.33 T
(hidden in a menu. In Zoomer) 180 367.33 T
(, menus are meant to hold the UI for the more) 313.34 367.33 T
(obscure pieces of functionality) 180 354.33 T
(.) 317.96 354.33 T
0 12 Q
(Integrated Applications) 180 328 T
1 10 Q
(Zoomer is an integrated device\321the built-in applications will communicate) 180 306.33 T
-0.55 (with each other a great deal. Y) 180 293.33 P
-0.55 (our applications should communicate with the) 317.82 293.33 P
(built-in applications where appropriate, and with themselves certainly) 180 280.33 T
(.) 505.41 280.33 T
(The) 180 260.33 T
1 9 Q
(GEOS) 200.56 260.33 T
1 10 Q
( system software includes a full-featured Inter) 226.73 260.33 T
(-Application) 440.81 260.33 T
-0.1 (Communication Protocol \050) 180 247.33 P
1 9 Q
-0.09 (IACP) 299.8 247.33 P
1 10 Q
-0.1 (\051, and your programs should make full use of) 322.46 247.33 P
(this protocol to transmit information and requests between programs.) 180 234.33 T
(On Zoomer) 180 214.33 T
(, only one main application will run at a time. If two main) 230.37 214.33 T
-0.26 (applications need to communicate, one will have to contact the other though) 180 201.33 P
(the other is not active.) 180 188.33 T
1 9 Q
(GEOS) 286.31 188.33 T
1 10 Q
( provides the ability for applications to run in) 312.48 188.33 T
(\322engine\323 mode, where they have full functionality but do not appear on) 180 175.33 T
(screen. Thus, it is simple to communicate with other programs even when) 180 162.33 T
(those programs are not active.) 180 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
72 337 171 504 R
7 X
V
0 9 Q
0 X
(Simple Navigation) 72 498 T
1 F
(Zoomer applications) 72 482 T
(must be easy to navi-) 72 471 T
(gate. It is common to) 72 460 T
(break up the gadgetry) 72 449 T
(of many-featured appli-) 72 438 T
(cations over several) 72 427 T
(\322screens.\323 If not all UI) 72 416 T
-0.13 (gadgetry will appear at) 72 405 P
(once, the user should) 72 394 T
(have an easy way to) 72 383 T
(reach hidden) 72 372 T
(gadgetry) 72 361 T
(.) 107.67 361 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
70.5 196 171.5 275 R
7 X
V
0 F
0 X
(Pen-Centric) 70.5 269 T
1 F
(Zoomer is meant to be) 70.5 253 T
(controlled by a pen.) 70.5 242 T
(Most applications) 70.5 231 T
(should be oriented) 70.5 220 T
(toward pen input.) 70.5 209 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 3
%%Page: "6" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Usage) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(6) 54 671.34 T
32 684 216 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(Z) 60.99 85 T
0 24 Q
(Zoomer Programmer) 102 110 T
(\325) 340.27 110 T
(s Guide) 346.06 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.4) 143.32 632 T
0 24 Q
(Memory Usage) 180 632 T
1 10 Q
(Zoomer has a 640K general heap. All application resources which will be) 180 606.33 T
-0.65 (active at one time must \336t within this 640K. They must share this space with) 180 593.33 P
(any loaded) 180 580.33 T
1 9 Q
(GEOS) 232.79 580.33 T
1 10 Q
( library resources and desk accessories. The) 258.96 580.33 T
1 9 Q
(GEOS) 463.97 580.33 T
1 10 Q
( kernel) 490.14 580.33 T
-0.44 (has been set up to execute in place to give you more heap space to work with.) 180 567.33 P
(If all programs are to co-exist, you must organize your code sensibly) 180 554.33 T
(.) 492.42 554.33 T
(The system can discard unused code resources. Y) 180 534.33 T
(ou should group routines) 405.74 534.33 T
(which will be used together into the same resource\321if the user isn\325) 180 521.33 T
(t using) 489.84 521.33 T
(some piece of functionality) 180 508.33 T
(, then the system may discard that resource.) 301.67 508.33 T
0 12 Q
(Program Resources) 180 482 T
1 10 Q
(Since many users won\325) 180 460.33 T
(t use the menu bar) 284.83 460.33 T
(, it\325) 371.51 460.33 T
(s a good idea to put menu) 385.78 460.33 T
(gadgetry in a separate resource. If you are splitting your application\325) 180 447.33 T
(s) 497.06 447.33 T
-0.47 (gadgetry into several screens, each screen\325) 180 434.33 P
-0.47 (s gadgetry should probably be in a) 372.99 434.33 P
-0.13 (separate resource so that the gadgetry associated with absent screens won\325) 180 421.33 P
-0.13 (t) 524.46 421.33 P
(take up valuable heap space. V) 180 408.33 T
(erify that your resources are properly) 322.45 408.33 T
(constructed by using Swat. Unintended messages can negate careful) 180 395.33 T
(resource planning.) 180 382.33 T
(Zoomer does not swap memory) 180 362.33 T
(. Normally) 321.12 362.33 T
(, if you wanted to set up a large) 369.28 362.33 T
-0.09 (block of data to be accessed quickly) 180 349.33 P
-0.09 (, you would mark it swapable so that the) 340.81 349.33 P
(system could swap it out if memory got tight. However) 180 336.33 T
(, when programming) 431.32 336.33 T
(for the Zoomer) 180 323.33 T
(, you should instead mark such blocks of data as discardable) 247.03 323.33 T
-0.59 (and be prepared to reload them if the system has been forced to discard them.) 180 310.33 P
0 12 Q
(Mobile Memory) 180 284 T
1 10 Q
-0.76 (Y) 180 262.33 P
-0.76 (ou should not lock data blocks for any longer than necessary) 185.93 262.33 P
-0.76 (, and you should) 455.53 262.33 P
(never mark any blocks of data as \336xed. W) 180 249.33 T
(ith memory so precious, the) 372.44 249.33 T
-0.17 (memory manager must be able to reposition blocks so it can allow programs) 180 236.33 P
(to allocate contiguous blocks. If you are programming in C, avoid the) 180 223.33 T
-0.2 (temptation to use malloc\050\051 or calloc\050\051, each of which allocates a block of \336xed) 180 210.33 P
(memory) 180 197.33 T
(. Instead you should use the) 216.48 197.33 T
1 9 Q
(GEOS) 348.9 197.33 T
1 10 Q
( memory allocation routines.) 375.07 197.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 4
%%Page: "7" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Specifying Memory Usage) 383.73 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(7) 552.44 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.5) 143.32 632 T
0 24 Q
(Specifying Memory Usage) 180 632 T
1 10 Q
-0.37 (T) 180 606.33 P
-0.37 (o optimize Zoomer memory management, your application must include an) 185.75 606.33 P
(extra line in its Glue Parameters \050.gp\051 \336le. This line, with the keyword) 180 593.33 T
-0.37 (heapspace, speci\336es the memory that the application needs. Zoomer will use) 180 580.33 P
(this to determine how many applications may be kept running at a time.) 180 567.33 T
4 F
(heapspace 3409) 216 551.33 T
1 F
(T) 180 530.33 T
(o \336nd out how much heapspace your application needs \050and thus \336nd out) 185.75 530.33 T
-0.67 (what value to enter in the .gp \336le\325) 180 517.33 P
-0.67 (s) 330.7 517.33 P
3 F
-0.67 (heapspace) 337.44 517.33 P
1 F
-0.67 ( line\051, run the application under) 384.27 517.33 P
-0.77 (Swat and use the) 180 504.33 P
5 F
-0.79 (heapspace) 259.73 504.33 P
1 F
-0.77 ( Swat command. Note that you should try using) 314.18 504.33 P
-0.87 (heapspace in different situations to \336nd out the maximum heapspace needed.) 180 491.33 P
(Remember that if the user has menus and/or dialogs showing, more heap) 180 478.33 T
(space will be used\321try to have as many open as possible when testing for) 180 465.33 T
(needed heap space.) 180 452.33 T
(T) 180 432.33 T
(o \336nd out what applications are loaded into the application cache, use the) 185.75 432.33 T
5 F
(pappcache) 180 419.33 T
1 F
( Swat command.) 235.94 419.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 5
%%Page: "8" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Disk Use) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(8) 54 671.34 T
32 684 216 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(Z) 60.99 85 T
0 24 Q
(Zoomer Programmer) 102 110 T
(\325) 340.27 110 T
(s Guide) 346.06 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.6) 143.32 632 T
0 24 Q
(Disk Use) 180 632 T
1 10 Q
(The Zoomer) 180 606.33 T
1 9 Q
(RAM) 237.78 606.33 T
1 10 Q
( Disk holds 352K. This is a fair amount of room, but) 259.27 606.33 T
(applications which create large data \336les should probably compress their) 180 593.33 T
-0.67 (data. Remember that even though your application may not create especially) 180 580.33 P
(large \336les, it is polite to compress them since that 352K is all the user will) 180 567.33 T
-0.41 (have access to. Remember: the Zoomer doesn\325) 180 554.33 P
-0.41 (t have a \337oppy drive, and if the) 387.2 554.33 P
1 9 Q
-0.37 (RAM) 180 541.33 P
1 10 Q
-0.41 ( disk \336lls up users can \336nd themselves in real trouble. Unless they have) 201.49 541.33 P
(another computer that they can connect to and upload their \336les, they will) 180 528.33 T
(have to discard some data \050or buy another) 180 515.33 T
1 9 Q
(PCMCIA) 377.06 515.33 T
1 10 Q
( card\051. Most users would) 414.72 515.33 T
(of course prefer to put off that eventuality as long as possible.) 180 502.33 T
0 12 Q
(Default Files) 180 476 T
1 10 Q
-0.29 (Not all users are comfortable with the idea of data \336les. For many users, the) 180 454.33 P
-0.41 (distinction between application and document is a hazy one\321it is dif\336cult to) 180 441.33 P
(understand how a single address book program might be asked to manage) 180 428.33 T
(multiple documents. After all, an address book is a single object. For this) 180 415.33 T
(large group of users, programs which create documents might want to) 180 402.33 T
(provide a default document for the user to work with and expect this single) 180 389.33 T
(document to get very large.) 180 376.33 T
0 12 Q
(Ink Compression) 180 350 T
1 10 Q
-0.67 (If your application is using an Ink object to collect and display ink, remember) 180 328.33 P
(that the object has the ability to store its ink to a \336le in compressed) 180 315.33 T
(form\321you should use this ability instead of saving the object itself with its) 180 302.33 T
(ink uncompressed.) 180 289.33 T
0 12 Q
(Read-Only Files) 180 263 T
1 10 Q
-0.71 (If you\325re in the habit of opening) 180 241.33 P
1 9 Q
-0.64 (VM) 323.17 241.33 P
1 10 Q
-0.71 ( data \336les in force-read-only mode \050i.e. you) 338.17 241.33 P
(don\325) 180 228.33 T
(t ever write to the things\051, you should also pass) 198.71 228.33 T
1 9 Q
(VMAF_FORCE_DENY_WRITE) 180 215.33 T
1 10 Q
(, as this tells the system that not only will you) 312.16 215.33 T
(not be writing to the \336le, but neither will anyone else. If you don\325) 180 202.33 T
(t pass this) 479.31 202.33 T
(\337ag and the \336le is writable, the kernel will read) 180 189.33 T
3 F
(the entire \336le) 403.2 189.33 T
1 F
( into memory;) 462.99 189.33 T
(even if the \336le\325) 180 176.33 T
(s blocks are clean, they can\325) 247.23 176.33 T
(t be discarded; only swapped out.) 374.85 176.33 T
(Since swap space is so precious, please pass the deny-write \337ag.) 180 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
76.5 464.5 167.5 608.5 R
7 X
V
0 9 Q
0 X
(Desk Accessories) 76.5 602.5 T
1 F
(Applications may) 76.5 586.5 T
(either come up full) 76.5 575.5 T
(screen or share the) 76.5 564.5 T
(screen with other) 76.5 553.5 T
(applications by oper-) 76.5 542.5 T
(ating as desk accesso-) 76.5 531.5 T
(ries. DAs \337oat above) 76.5 520.5 T
(all other applications) 76.5 509.5 T
(and therefore should) 76.5 498.5 T
(be as small as) 76.5 487.5 T
(practical.) 76.5 476.5 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 6
%%Page: "9" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Screen Usage) 465.4 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(9) 552.44 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.7) 143.32 632 T
0 24 Q
(Screen Usage) 180 632 T
1 10 Q
-0.57 (The Zoomer screen is 256x320 pixels, or about 8x1) 180 606.33 P
-0.57 (1 cm. This puts screen real) 407.36 606.33 P
(estate at a premium. The system has been optimized to help you to get the) 180 593.33 T
(most out of the existing area; you should be thinking along similar lines.) 180 580.33 T
-0.33 (The Zoomer system helps you to get the most out of the existing screen area.) 180 560.33 P
(The hard icons below the screen allow access to some common) 180 547.33 T
1 9 Q
(UI) 468.73 547.33 T
1 10 Q
( gadgetry) 479.73 547.33 T
(without using the screen. The menu bar was made optional to allow the) 180 534.33 T
(application maximum screen area to display its own gadgetry) 180 521.33 T
(. As a) 463.19 521.33 T
(programmer) 180 508.33 T
(, don\325) 237.03 508.33 T
(t cancel the system\325) 261.3 508.33 T
(s effort by including redundant) 351.31 508.33 T
1 9 Q
(UI) 497.79 508.33 T
1 10 Q
(.) 508.79 508.33 T
-0.62 (When constructing a suite of related programs, it may be tempting to include) 180 495.33 P
(launchers so that the user may go between them. Because the Zoomer) 180 482.33 T
(\325) 503.54 482.33 T
(s) 505.21 482.33 T
-0.31 (launcher already gives them that ability) 180 469.33 P
-0.31 (, you should not devote screen space) 363.69 469.33 P
(to this redundant gadgetry) 180 456.33 T
(.) 303.34 456.33 T
(When planning your layout, aim for a compact screen presence. Instead of) 180 436.33 T
(including separate gadgetry for displaying and editing data, combine them) 180 423.33 T
(so that the user interacts directly with the display) 180 410.33 T
(. This feels more natural) 410.95 410.33 T
(and saves the space which might go towards the) 180 397.33 T
1 9 Q
(UI) 405.4 397.33 T
1 10 Q
( for editing the data.) 416.4 397.33 T
(Most users will not use the menu bar) 180 377.33 T
(. All program functionality should be) 351.13 377.33 T
(represented in menus, but the most commonly used functions should be) 180 364.33 T
(reachable by other means.) 180 351.33 T
(If you localize your application for international use, the size of) 180 331.33 T
1 9 Q
(UI) 474.46 331.33 T
1 10 Q
-0.72 (components may grow) 180 318.33 P
-0.72 (. Allow space for this growth, and read the Localization) 280.42 318.33 P
(chapter of your) 180 305.33 T
1 9 Q
(GEOS) 252.77 305.33 T
1 10 Q
( documentation for more information.) 278.94 305.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 7
%%Page: "10" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(10) 54 671.34 T
32 684 216 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(Z) 60.99 85 T
0 24 Q
(Zoomer Programmer) 102 110 T
(\325) 340.27 110 T
(s Guide) 346.06 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.8) 143.32 632 T
0 24 Q
(Sound) 180 632 T
1 10 Q
-0.3 (Zoomer has great sound, and you should take advantage of it. Zoomer sound) 180 606.33 P
(hardware supports musical notes and) 180 593.33 T
1 9 Q
(DAC) 356.68 593.33 T
1 10 Q
(, allowing both music with rich) 376.68 593.33 T
(harmonics and sampled sounds. The Zoomer has three tone generators, a) 180 580.33 T
-0.17 (noise simulator) 180 567.33 P
-0.17 (, and a) 250.58 567.33 P
1 9 Q
-0.15 (DAC) 284.16 567.33 P
1 10 Q
-0.17 ( player) 304.16 567.33 P
-0.17 (, all of which may operate at once. Zoomer) 335.29 567.33 P
(allows both musical tones and sampled sound to play at the same time.) 180 554.33 T
(GeoW) 180 534.33 T
(orks has written a new library which allows the Zoomer to play) 207.04 534.33 T
-0.47 (standard .) 180 521.33 P
1 9 Q
-0.43 (W) 226.76 521.33 P
-0.43 (A) 234.76 521.33 P
-0.43 (V) 240.26 521.33 P
1 10 Q
-0.47 ( \336le sampled sounds using the Zoomer) 246.76 521.33 P
-0.47 (. Y) 419.85 521.33 P
-0.47 (ou are free to use this) 430.87 521.33 P
(library and to install it on any Zoomer) 180 508.33 T
(. Note that the library did not go out) 355.96 508.33 T
-0.17 (with the original Zoomer) 180 495.33 P
-0.17 (, so you will have to install it on the user) 293.39 495.33 P
-0.17 (\325) 480.05 495.33 P
-0.17 (s machine.) 481.72 495.33 P
(The library is in a \336le called) 180 475.33 T
1 9 Q
(W) 312.81 475.33 T
(A) 320.81 475.33 T
(V) 326.31 475.33 T
1 10 Q
(.) 331.52 475.33 T
1 9 Q
(GEO) 334.3 475.33 T
1 10 Q
(, which should be available in) 354.8 475.33 T
1 9 Q
(GEOS) 494.47 475.33 T
1 10 Q
(support libraries on) 180 462.33 T
1 9 Q
(AOL) 274.08 462.33 T
1 10 Q
( and CompuServe. The header information for the) 293.58 462.33 T
(library is in the \336le) 180 449.33 T
1 9 Q
(W) 271.87 449.33 T
(A) 279.87 449.33 T
(V) 285.37 449.33 T
1 10 Q
(.) 290.58 449.33 T
1 9 Q
(GOH) 293.36 449.33 T
1 10 Q
(. There are two routines available.) 314.86 449.33 T
5 F
(PlaySoundFromFile\050\051) 180 429.33 T
1 F
(is ideal for playing short sounds on threads which) 295.46 429.33 T
-0.45 (are not time-critical \050i.e. threads which are not your application\325) 180 416.33 P
-0.45 (s) 471.53 416.33 P
1 9 Q
-0.41 (UI) 478.49 416.33 P
1 10 Q
-0.45 ( thread\051.) 489.49 416.33 P
-0.37 (It plays the sound in an already opened .) 180 403.33 P
1 9 Q
-0.33 (W) 365.41 403.33 P
-0.33 (A) 373.41 403.33 P
-0.33 (V) 378.91 403.33 P
1 10 Q
-0.37 ( \336le. The calling thread will not) 385.4 403.33 P
-0.57 (continue until the sound \336nishes playing, and thus it is a bad idea to call this) 180 390.33 P
(routine to play a long sound.) 180 377.33 T
5 F
(W) 180 357.33 T
(avPlayFile\050\051) 189.07 357.33 T
1 F
( takes the path and \336le name of a .) 252.58 357.33 T
1 9 Q
(W) 412.81 357.33 T
(A) 420.81 357.33 T
(V) 426.31 357.33 T
1 10 Q
( \336le. It spawns a) 432.81 357.33 T
-0.28 (background thread to open the \336le and play the sound. This is the routine to) 180 344.33 P
(use to play long sounds or to play sounds from a time-critical thread.) 180 331.33 T
0 12 Q
(Sample Code:) 180 305 T
4 9 Q
({ /* Plays the sound in \322TEST.WAV\323 on a different thread \050execution) 81 288 T
( * continues on this thread while the sound plays in the background\051) 91.8 277 T
( */) 475.2 277 T
( WavPlayFile\050SP_USER_DATA, \322SOUND\323, \322TEST.WAV\323\051; }) 81 266 T
({ /* Plays the sound in \322TEST.WAV\323 on the current thread. */) 81 237 T
( FileHandle fh;) 81 226 T
( \050void\051 FileSetCurrentPath\050SP_USER_DATA, \322SOUND\323\051;) 81 215 T
( fh = FileOpen\050\322TEST.WAV\323, FILE_ACCESS_R | FILE_DENY_W\051;) 81 204 T
( if \050fh\051 {) 81 193 T
(PlaySoundFromFile\050fh\051;) 125 182 T
(\050void\051 FileClose\050fh, TRUE\051; }; }) 125 171 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
59 376 176 466 R
7 X
V
0 X
(void) 59 460 T
(PlaySoundFromFile\050) 59 449 T
(FileHandle file\051;) 69.8 438 T
(void WavPlayFile\050) 59 420 T
(DiskHandle disk,) 69.8 409 T
(const char *path,) 69.8 398 T
(const char *fname\051;) 69.8 387 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54 372 175 477 R
0.5 H
N
80 157 530 320 R
13 X
N
FMENDPAGE
%%EndPage: "10" 8
%%Page: "11" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Controls) 500.45 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(11) 546.88 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.9) 143.32 632 T
0 24 Q
(Controls) 180 632 T
1 10 Q
-0.14 (The Zoomer has a simple set of controls: a pen and a set of buttons. There is) 180 606.33 P
-0.03 (no keyboard; text input is handled via) 180 593.33 P
1 9 Q
-0.03 (HWR) 358.16 593.33 P
1 10 Q
-0.03 ( or an on-screen keyboard. Most) 380.99 593.33 P
(applications rely on the pen for all input; Zoomer is a pen-centric machine.) 180 580.33 T
(The user will probably use either the pen or the buttons, but not both.) 180 560.33 T
-0.04 (Remember that the Zoomer is a palmtop device, meant to be used by people) 180 547.33 P
-0.75 (\322on the go.\323 It is dif\336cult to physically hold the Zoomer) 180 534.33 P
-0.75 (, press the buttons, and) 423.25 534.33 P
-0.23 (move the pen all at the same time. If you can\325) 180 521.33 P
-0.23 (t decide whether pen or button) 387.56 521.33 P
-0.11 (input would be appropriate, conduct user testing to determine which is best.) 180 508.33 P
-0.31 (There are six buttons, set up as four \322directional\323 buttons and a pair of \322\336re\323) 180 488.33 P
-0.62 (buttons. For applications which are controlled by the buttons, the directional) 180 475.33 P
(buttons should generally be used for navigation, the \336re buttons) 180 462.33 T
(to activate functionality) 180 449.33 T
(.) 289.46 449.33 T
-0.05 (Pen input will be interpreted as mouse or text input depending on what the) 180 429.33 P
(objects of your application expect to receive. Input from the buttons acts as) 180 416.33 T
(\322keyboard\323 input, using a custom set of \322keys.\323) 180 403.33 T
(These keyboard input events will have a character whose top byte has the) 180 383.33 T
(value) 180 370.33 T
1 9 Q
(CS_CONTROL) 207.97 370.33 T
1 10 Q
( and whose bottom byte has one of the following) 270.98 370.33 T
5 F
(VChar) 494.54 370.33 T
1 F
(\050\322virtual character\323 \051 values:) 180 357.33 T
4 F
(VC_JOYSTICK_135) 216 341.33 T
(VC_JOYSTICK_90) 324 341.33 T
(VC_JOYSTICK_45) 432 341.33 T
(VC_JOYSTICK_180) 216 327.33 T
(VC_JOYSTICK_0) 432 327.33 T
(VC_JOYSTICK_225) 216 313.33 T
(VC_JOYSTICK_270) 324 313.33 T
(VC_JOYSTICK_315) 432 313.33 T
(VC_FIRE_BUTTON_1) 216 285.33 T
(VC_FIRE_BUTTON_2) 324 285.33 T
1 F
(The) 180 264.33 T
1 9 Q
(VC_JOYSTICK) 200.56 264.33 T
1 10 Q
( values correspond to the Zoomer directional keys. Note) 265.23 264.33 T
-0.27 (that the Zoomer has just four directional buttons\321the 45, 135, 225, and 315) 180 251.33 P
(degree values will be passed when the user is pressing two buttons at once.) 180 238.33 T
(The) 180 225.33 T
1 9 Q
(VC_FIRE_BUTTON) 200.56 225.33 T
1 10 Q
( values correspond to the two zoomer \336re buttons.) 285.39 225.33 T
-0.49 (The buttons may already have some functionality depending on context. The) 180 205.33 P
-0.48 (HelpControl responds to the \336re buttons by opening the selected topic; to the) 180 192.33 P
(right/left buttons by going to the next/previous help topic. The T) 180 179.33 T
(ext objects) 475.04 179.33 T
(use the right/left buttons to move the cursor forward/back. A scrolling) 180 166.33 T
(GenV) 180 153.33 T
(iew scrolls in response to the directional keys.) 205.67 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 9
%%Page: "12" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(PCMCIA Cards) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(12) 54 671.34 T
32 684 216 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(Z) 60.99 85 T
0 24 Q
(Zoomer Programmer) 102 110 T
(\325) 340.27 110 T
(s Guide) 346.06 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.10) 135.54 632 T
0 24 Q
(PCMCIA Cards) 180 632 T
1 10 Q
(Zoomer accepts) 180 606.33 T
1 9 Q
(PCMCIA) 253.7 606.33 T
1 10 Q
( T) 291.36 606.33 T
(ype) 300.29 606.33 T
1 9 Q
(II) 319.18 606.33 T
1 10 Q
( cards. The socket provides a maximum of) 326.5 606.33 T
(50ma of output. This is not enough to power many devices \050such as) 180 593.33 T
(card-based disk drives\051, but is suf\336cient for cards containing only) 180 580.33 T
1 9 Q
(ROM) 483.9 580.33 T
1 10 Q
( or) 505.89 580.33 T
1 9 Q
(SRAM) 180 567.33 T
1 10 Q
(, as well as some) 207.16 567.33 T
1 9 Q
(I/O) 286.82 567.33 T
1 10 Q
( cards.) 299.99 567.33 T
(The data should be set up as a) 180 547.33 T
1 9 Q
(DOS) 323.19 547.33 T
1 10 Q
( directory and \336le structure. This \336le) 342.86 547.33 T
-0.38 (structure will be merged with that already on Zoomer) 180 534.33 P
-0.38 (. When setting up your) 424.38 534.33 P
-0.17 (\336le structure, remember that the) 180 521.33 P
1 9 Q
-0.16 (WORLD) 334.68 521.33 P
1 10 Q
-0.17 ( directory is the top-level directory) 370.02 521.33 P
(for applications, and that those applications placed in the Desk Accessories) 180 508.33 T
(directory \050) 180 495.33 T
1 9 Q
(DESK_ACC) 227.58 495.33 T
1 10 Q
(.000\051 will be recognized as desk accessories.) 277.75 495.33 T
(Do not include Preferences modules on Zoomer cards unless you will copy) 180 475.33 T
(them onto the Zoomer) 180 462.33 T
1 9 Q
(RAM) 284.45 462.33 T
1 10 Q
( disk. If the user starts up a Preference module) 305.94 462.33 T
-0.78 (which resides on a) 180 449.33 P
1 9 Q
-0.7 (PCMCIA) 264.86 449.33 P
1 10 Q
-0.78 ( card, the Zoomer will crash if the card is removed.) 302.51 449.33 P
-0.8 (As long as the Preferences module is copied to the) 180 436.33 P
1 9 Q
-0.72 (RAM) 405.2 436.33 P
1 10 Q
-0.8 ( disk and the user uses) 426.69 436.33 P
(that copy) 180 423.33 T
(, everything should be \336ne.) 221.67 423.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 10
%%Page: "13" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Fonts) 519.89 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(13) 546.88 671.34 T
396 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(Z) 510.99 85 T
72 93 188 133 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 24 Q
0 X
(Zoomer Programmer) 168.91 110 T
(\325) 407.18 110 T
(s Guide) 412.97 110 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(z.1) 136.31 632 T
(1) 154.22 632 T
0 24 Q
(Fonts) 180 632 T
1 10 Q
-0.79 (By default, Zoomer will use a bitmap-based font rather than an outline-based) 180 606.33 P
(font. This leads to a faster response time, but bitmap-based fonts are not) 180 593.33 T
1 9 Q
(WYSIWYG) 180 580.33 T
1 10 Q
(. If the user will be printing something from the zoomer) 226.66 580.33 T
(, and) 482.79 580.33 T
1 9 Q
(WYSIWYG) 180 567.33 T
1 10 Q
( output is important for the document, then use an outline-based) 226.66 567.33 T
(font. The Zoomer comes with one outline-based font,) 180 554.33 T
1 9 Q
(UR) 423.91 554.33 T
(W) 437.41 554.33 T
1 10 Q
( Sans.) 446.24 554.33 T
(If drawing text using kernel routines, use) 180 534.33 T
5 F
(GrSetFont\050\051) 375.01 534.33 T
1 F
(, passing) 437.42 534.33 T
1 9 Q
(FID_DTC_UR) 180 521.33 T
(W_SANS) 238.67 521.33 T
1 10 Q
( to access the built-in outline font. T) 277.17 521.33 T
(o get a list of all) 442.94 521.33 T
-0.24 (installed outline-based fonts at run-time, call the) 180 508.33 P
5 F
-0.25 (GrEnumFonts\050\051) 407.78 508.33 P
1 F
-0.24 ( routine,) 489.44 508.33 P
(being sure to set the) 180 495.33 T
1 9 Q
(FEF_OUTLINES) 276.68 495.33 T
1 10 Q
( bit in the passed) 349.19 495.33 T
5 F
(FontEnumFlags) 431.25 495.33 T
1 F
(structure.) 180 482.33 T
(If you\325re working with a text object, remember that there is a) 180 462.33 T
5 F
(V) 180 449.33 T
(isT) 187.15 449.33 T
(extDefaultFont) 202.15 449.33 T
1 F
( value corresponding to) 281.4 449.33 T
1 9 Q
(UR) 391.77 449.33 T
(W) 405.27 449.33 T
1 10 Q
( Sans:) 414.1 449.33 T
1 9 Q
(VTDF_UR) 445.04 449.33 T
(W_SANS) 488.55 449.33 T
1 10 Q
(.) 527.05 449.33 T
-0.22 (If the user adds a new font, that font will not be recognized until) 180 429.33 P
1 9 Q
-0.2 (GEOS) 477.67 429.33 P
1 10 Q
-0.22 ( exits) 503.84 429.33 P
(and re-starts.) 180 416.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 11
%%Page: "14" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306 99 486 117 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.1 87.98 105.1 132.98 R
V
2 60 Q
0 X
(Z) 59.59 92.98 T
108 144 522 648 R
7 X
V
0 14 Q
0 X
(z.12) 162.54 632 T
0 24 Q
(Debugging & pccom) 207 632 T
1 10 Q
(For the \336rst stages of debugging, it will be enough to debug) 207 606.33 T
(applications which are running on a normal) 207 593.33 T
1 9 Q
(PC) 412.39 593.33 T
1 10 Q
( system which has) 424.89 593.33 T
(been con\336gured to act something like a zoomer) 207 580.33 T
(. However) 422.57 580.33 T
(, for true) 468.31 580.33 T
(testing, you will want to have your program running on a Zoomer) 207 567.33 T
(.) 508.51 567.33 T
(Attaching the Swat debugger is basically the same as when) 207 554.33 T
(debugging in any) 207 541.33 T
1 9 Q
(GEOS) 289.42 541.33 T
1 10 Q
( environment, but with some) 315.59 541.33 T
(hardware-speci\336c changes in procedure.) 207 528.33 T
(Before debugging can begin, you must download three new or) 207 508.33 T
-0.79 (changed \336les to the Zoomer) 207 495.33 P
-0.79 (. Using the Zoomer) 329.76 495.33 P
-0.79 (\325) 415.9 495.33 P
-0.79 (s File Connect feature,) 417.57 495.33 P
-0.45 (you can download through the serial port these three \336les, which are) 207 482.33 P
(stored in the) 207 469.33 T
1 9 Q
(T) 268.3 469.33 T
(ARGET) 273.81 469.33 T
1 10 Q
(\134) 306.31 469.33 T
1 9 Q
(ZOOM) 312.37 469.33 T
1 10 Q
( directory of your) 340.37 469.33 T
1 9 Q
(SDK) 422.21 469.33 T
(CD) 444.66 469.33 T
1 10 Q
(:) 458.16 469.33 T
5 F
(loader) 207 449.33 T
(.exe) 239.6 449.33 T
1 F
(A modi\336ed loader that will start up with pccom) 270 449.33 T
(running.) 270 437.33 T
5 F
(swat.exe) 207 418.33 T
1 F
(The Swat stub to allow Swat to connect.) 270 418.33 T
5 F
(geos.geo) 207 399.33 T
1 F
-0.18 (A new kernel that will allow breakpoints to be set \050the) 270 399.33 P
(Zoomer) 270 387.33 T
(\325) 304.99 387.33 T
(s execute-in-place kernel does not\051.) 306.66 387.33 T
(The new kernel runs from the) 207 368.33 T
1 9 Q
(RAM) 347.93 368.33 T
1 10 Q
( disk and takes up quite a bit of) 369.42 368.33 T
(space. If you have documents or state \336les taking up much room,) 207 355.33 T
(back them up to the) 207 342.33 T
1 9 Q
(PC) 302.02 342.33 T
1 10 Q
( and then erase the) 314.52 342.33 T
1 9 Q
(RAM) 406.57 342.33 T
1 10 Q
( disk by holding the) 428.06 342.33 T
(\336re buttons while pushing the reset button.) 207 329.33 T
(When using pccom to communicate with a Zoomer) 207 309.33 T
(, it\325) 437.93 309.33 T
(s best to use a) 452.2 309.33 T
(relatively low baud rate such as 9600. Note that the Zoomer) 207 296.33 T
(\325) 484.65 296.33 T
(s) 486.32 296.33 T
(communication speed may be set using the Preferences application.) 207 283.33 T
-0.33 (When) 207 263.33 P
1 9 Q
-0.3 (PCS) 236.48 263.33 P
1 10 Q
-0.33 ( sends down a \336le, it assumes that the target machine has) 254.65 263.33 P
-0.11 (been set up with the Desktop\325) 207 250.33 P
-0.11 (s directory structure; you may want to) 342.96 250.33 P
(re-create some of) 207 237.33 T
1 9 Q
(WORLD) 288.29 237.33 T
1 10 Q
(\325) 323.62 237.33 T
(s subdirectories.) 325.29 237.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 12
%%Page: "15" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
126 99 306 117 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
506.61 87.98 557.6 132.98 R
V
2 60 Q
0 X
(Z) 512.09 92.98 T
90.33 144 450.33 567 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 13
%%Page: "16" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
306 99 486 117 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.1 87.98 105.1 132.98 R
V
2 60 Q
0 X
(Z) 59.59 92.98 T
162 144 522 567 R
7 X
V
1 10 Q
0 X
(Geoworks) 261 260.33 T
(960 Atlantic A) 261 247.33 T
(ve.) 327.13 247.33 T
(Alameda CA 94501) 261 234.33 T
(\050510\051 814-1660 Fax: \050510\051 814-4250) 261 221.33 T
(For information about the Palm applications contact) 261 188.33 T
(Palm Computing, Inc.) 261 168.33 T
(4410 El Camino Real, Suite 106) 261 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 14
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 14
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ Times-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ NewCenturySchlbk-Bold
%%EOF
