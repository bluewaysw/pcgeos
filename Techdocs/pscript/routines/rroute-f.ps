%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 17 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /NewCenturySchlbk-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "105" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(105) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 R
7 X
0 0 0 1 0 0 0 K
V
50 624.99 609.01 624.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 612.99 T
2 F
(EC\050\051) 99 612.99 T
3 10 Q
(void) 99 599.33 T
4 F
(EC\050) 153 599.33 T
5 F
(line) 171 599.33 T
4 F
(\051;) 195 599.33 T
0 F
(This macro de\336nes a line of code that will only be compiled into the) 180 581.33 T
(error) 180 569.83 T
(-checking version of the geode. The) 203.14 569.83 T
6 F
(line) 367.4 569.83 T
0 F
( parameter of the macro is the) 384.61 569.83 T
-0.25 (actual line of code. When the) 180 558.33 P
0 9 Q
-0.22 (EC) 314.64 558.33 P
0 10 Q
-0.25 ( version of the program is compiled, the line) 327.64 558.33 P
-0.57 (will be treated as a normal line of code; when the non-) 180 546.83 P
0 9 Q
-0.51 (EC) 423.79 546.83 P
0 10 Q
-0.57 ( version is compiled,) 436.78 546.83 P
(the line will be ignored.) 180 535.33 T
81 520.48 531 525.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 520.48 531 525.49 R
7 X
0 0 0 1 0 0 0 K
V
50 524.48 609.01 524.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 512.48 T
2 F
(EC_BOUNDS\050\051) 99 512.48 T
3 10 Q
(void) 99 498.82 T
4 F
(EC_BOUNDS\050) 153 498.82 T
5 F
(addr) 213 498.82 T
4 F
(\051;) 237 498.82 T
0 F
-0.75 (This macro adds an address check to the error) 180 480.82 P
-0.75 (-checking version of a program.) 387.16 480.82 P
(When the) 180 469.32 T
0 9 Q
(EC) 227.59 469.32 T
0 10 Q
( version of the program is compiled, the address check will be) 240.59 469.32 T
-0.47 (included; when the non-) 180 457.82 P
0 9 Q
-0.42 (EC) 289.7 457.82 P
0 10 Q
-0.47 ( version is compiled, the address check will be left) 302.7 457.82 P
(out. The) 180 446.32 T
6 F
(addr) 221.12 446.32 T
0 F
( parameter is the address or pointer to be checked.) 243.52 446.32 T
-0.24 (The macro expands to a call to) 180 427.82 P
7 F
-0.25 (ECCheckBounds\050\051) 321.65 427.82 P
0 F
-0.24 ( on the speci\336ed address) 416.66 427.82 P
(or pointer) 180 416.32 T
(. If the address is out of bounds, the program will stop with a call) 224.81 416.32 T
(to) 180 404.82 T
7 F
(FatalError\050\051) 191.67 404.82 T
0 F
(.) 255.94 404.82 T
2 F
(See Also:) 99 386.32 T
0 F
(ECCheckBounds\050\051) 180 386.32 T
81 369.98 531 374.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 369.98 531 374.98 R
7 X
0 0 0 1 0 0 0 K
V
50 373.98 609.01 373.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 361.98 T
2 F
(EC_ERROR\050\051) 99 361.98 T
3 10 Q
(void) 99 348.31 T
4 F
(EC_ERROR\050) 153 348.31 T
5 F
(code) 207 348.31 T
4 F
(\051;) 231 348.31 T
0 F
-0.71 (This macro inserts a call to) 180 330.31 P
7 F
-0.73 (FatalError\050\051) 303.92 330.31 P
0 F
-0.71 ( in the error) 368.19 330.31 P
-0.71 (-checking version of the) 421.8 330.31 P
-0.1 (program and does nothing to the non-) 180 318.81 P
0 9 Q
-0.09 (EC) 353.49 318.81 P
0 10 Q
-0.1 ( version. When the program gets to) 366.49 318.81 P
(this point, it will halt and put up an error message corresponding to the) 180 307.31 T
(speci\336ed error) 180 295.81 T
6 F
(code) 248.69 295.81 T
0 F
(. If a condition should be checked before calling) 268.68 295.81 T
7 F
(FatalError\050\051) 180 284.31 T
0 F
(, you can use) 244.27 284.31 T
0 9 Q
(EC_ERROR_IF) 306.5 284.31 T
0 10 Q
(\050\051 instead.) 371.16 284.31 T
81 269.47 531 274.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 269.47 531 274.48 R
7 X
0 0 0 1 0 0 0 K
V
50 273.47 609.01 273.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 261.47 T
2 F
(EC_ERROR_IF\050\051) 99 261.47 T
3 10 Q
(void) 99 247.8 T
4 F
(EC_ERROR_IF\050) 153 247.8 T
5 F
(test) 225 247.8 T
4 F
(,) 249 247.8 T
5 F
(code) 261 247.8 T
4 F
(\051;) 285 247.8 T
0 F
(This macro inserts a conditional call to) 180 229.8 T
7 F
(FatalError\050\051) 362.25 229.8 T
0 F
( in the error) 426.52 229.8 T
(-checking) 482.26 229.8 T
(version of a program; it does nothing for the non-) 180 218.3 T
0 9 Q
(EC) 406.3 218.3 T
0 10 Q
( version. The) 419.3 218.3 T
6 F
(test) 481.9 218.3 T
0 F
(parameter is a Boolean value that, if) 180 206.8 T
6 F
(true) 352.26 206.8 T
0 F
(, will cause the) 370.77 206.8 T
7 F
(FatalError\050\051) 442.64 206.8 T
0 F
( call) 506.91 206.8 T
(to be made. If) 180 195.3 T
6 F
(test) 245.94 195.3 T
0 F
( is) 261.86 195.3 T
6 F
(false) 275.2 195.3 T
0 F
(,) 296.48 195.3 T
7 F
(FatalError\050\051) 302.04 195.3 T
0 F
( will not be called.) 366.31 195.3 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "105" 1
%%Page: "106" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(106) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(EC_W) 99 634.99 T
(ARNING\050\051) 133.01 634.99 T
4 10 Q
(EC_WARNING\050word warningCode\051;) 99 620.33 T
0 F
(This macro generates a warning for the debugger when executed by) 180 602.33 T
(error) 180 590.83 T
(-checking code; it has no effect when in non-) 203.14 590.83 T
0 9 Q
(EC) 406.47 590.83 T
0 10 Q
( code.) 419.47 590.83 T
2 F
(Include:) 99 572.33 T
0 F
(ec.h) 180 572.33 T
81 555.98 531 560.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 555.98 531 560.99 R
7 X
0 0 0 1 0 0 0 K
V
50 559.98 609.01 559.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 547.98 T
2 F
(EC_W) 99 547.98 T
(ARNING_IF\050\051) 133.01 547.98 T
4 10 Q
(EC_WARNING_IF\050<expr>, word warningCode\051) 99 533.32 T
0 F
-0.75 (When this macro is executed in error) 180 515.32 P
-0.75 (-checking code, it tests <) 346.07 515.32 P
6 F
-0.75 (expr) 456.19 515.32 P
0 F
-0.75 (>; if  <) 475.8 515.32 P
6 F
-0.75 (expr) 503.29 515.32 P
0 F
-0.75 (>) 522.91 515.32 P
-0.11 (is non-zero, it generates a warning with code) 180 503.82 P
6 F
-0.11 (warningCode) 388.94 503.82 P
0 F
-0.11 ( for the debugger) 450.59 503.82 P
-0.11 (.) 528.22 503.82 P
(In non-) 180 485.32 T
0 9 Q
(EC) 213.51 485.32 T
0 10 Q
( code, the macro has no effect \050and <) 226.51 485.32 T
6 F
(expr) 394.24 485.32 T
0 F
(> is not evaluated\051.) 413.86 485.32 T
2 F
(Include:) 99 466.82 T
0 F
(ec.h) 180 466.82 T
81 450.48 531 455.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 450.48 531 455.48 R
7 X
0 0 0 1 0 0 0 K
V
50 454.48 609.01 454.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 442.48 T
2 F
(ECCheckBounds\050\051) 99 442.48 T
3 10 Q
(void) 99 427.81 T
4 F
(ECCheckBounds\050) 153 427.81 T
4 9 Q
(void) 153 417.48 T
(*address\051;) 189 417.48 T
0 10 Q
(This routine checks to see if the given pointer is within bounds of the block) 180 399.81 T
(into which it points. If assertions fail, a fatal error will occur) 180 388.31 T
(.) 458.36 388.31 T
2 F
(Include:) 99 369.81 T
0 F
(ec.h) 180 369.81 T
81 353.47 531 358.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 353.47 531 358.48 R
7 X
0 0 0 1 0 0 0 K
V
50 357.47 609.01 357.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 345.47 T
2 F
(ECCheckChunkArray\050\051) 99 345.47 T
3 10 Q
(void) 99 330.8 T
4 F
(ECCheckChunkArray\050) 153 330.8 T
4 9 Q
(optr) 153 320.47 T
(o\051;) 189 320.47 T
0 10 Q
-0.67 (This routine checks the validity of the speci\336ed chunk array) 180 302.8 P
-0.67 (. If the assertions) 450.32 302.8 P
(fail, a fatal error will occur) 180 291.3 T
(.) 303.16 291.3 T
2 F
(Include:) 99 272.8 T
0 F
(ec.h) 180 272.8 T
81 256.46 531 261.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 256.46 531 261.47 R
7 X
0 0 0 1 0 0 0 K
V
50 260.46 609.01 260.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 248.46 T
2 F
(ECCheckChunkArrayHandles\050\051) 99 248.46 T
3 10 Q
(void) 99 234.79 T
4 F
(ECCheckChunkArrayHandles\050) 153 234.79 T
4 9 Q
(MemHandle mh,) 153 224.46 T
(ChunkHandle ch\051;) 153 214.46 T
0 10 Q
-0.67 (This routine checks the validity of the speci\336ed chunk array) 180 196.79 P
-0.67 (. If the assertions) 450.32 196.79 P
(fail, a fatal error will occur) 180 185.29 T
(.) 303.16 185.29 T
2 F
(Include:) 99 166.79 T
0 F
(ec.h) 180 166.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "106" 2
%%Page: "107" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(107) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ECCheckClass\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(ECCheckClass\050) 153 620.33 T
4 9 Q
(ClassStruct *class\051;) 153 609.99 T
0 10 Q
(This routine checks that the given pointer actually references a class) 180 592.33 T
(de\336nition. If the assertions fail, a fatal error will occur) 180 580.83 T
(.) 430.76 580.83 T
2 F
(Include:) 99 562.33 T
0 F
(ec.h) 180 562.33 T
81 545.98 531 550.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 545.98 531 550.99 R
7 X
0 0 0 1 0 0 0 K
V
50 549.98 609.01 549.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 537.98 T
2 F
(ECCheckDriverHandle\050\051) 99 537.98 T
3 10 Q
(void) 99 523.32 T
4 F
(ECCheckDriverHandle\050) 153 523.32 T
4 9 Q
(GeodeHandle gh\051;) 153 512.98 T
0 10 Q
-0.78 (This routine checks that the passed handle actually references a driver) 180 495.32 P
-0.78 (. If the) 499.82 495.32 P
(assertions fail, a fatal error will occur) 180 483.82 T
(.) 352.98 483.82 T
2 F
(Include:) 99 465.32 T
0 F
(ec.h) 180 465.32 T
81 448.98 531 453.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 448.98 531 453.98 R
7 X
0 0 0 1 0 0 0 K
V
50 452.98 609.01 452.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 440.98 T
2 F
(ECCheckEventHandle\050\051) 99 440.98 T
3 10 Q
(void) 99 426.31 T
4 F
(ECCheckEventHandle\050) 153 426.31 T
4 9 Q
(EventHandle eh\051;) 153 415.98 T
0 10 Q
(This routine checks that the passed handle actually references a stored) 180 398.31 T
(message. If the assertions fail, a fatal error will occur) 180 386.81 T
(.) 425.58 386.81 T
81 371.97 531 376.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 371.97 531 376.98 R
7 X
0 0 0 1 0 0 0 K
V
50 375.97 609.01 375.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 363.97 T
2 F
(ECCheckFileHandle\050\051) 99 363.97 T
3 10 Q
(void) 99 350.3 T
4 F
(ECCheckFileHandle\050) 153 350.3 T
4 9 Q
(FileHandle file\051;) 153 339.97 T
0 10 Q
(This routine checks that the passed handle actually is a \336le handle and) 180 322.3 T
(references a \336le. If the assertions fail, a fatal error will occur) 180 310.8 T
(.) 459.27 310.8 T
2 F
(Include:) 99 292.3 T
0 F
(ec.h) 180 292.3 T
81 275.96 531 280.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 275.96 531 280.97 R
7 X
0 0 0 1 0 0 0 K
V
50 279.96 609.01 279.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 267.96 T
2 F
(ECCheckGeodeHandle\050\051) 99 267.96 T
3 10 Q
(void) 99 253.29 T
4 F
(ECCheckGeodeHandle\050) 153 253.29 T
4 9 Q
(GeodeHandle gh\051;) 153 242.96 T
0 10 Q
-0.14 (This routine checks that the passed handle references a loaded geode. If the) 180 225.29 P
(assertions fail, a fatal error will occur) 180 213.79 T
(.) 352.98 213.79 T
2 F
(Include:) 99 195.29 T
0 F
(ec.h) 180 195.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "107" 3
%%Page: "108" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(108) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ECCheckGStateHandle\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(ECCheckGStateHandle\050) 153 620.33 T
4 9 Q
(GStateHandle gsh\051;) 153 609.99 T
0 10 Q
(This routine checks that the passed handle references a GState. If the) 180 592.33 T
(assertions fail, a fatal error will occur) 180 580.83 T
(.) 352.98 580.83 T
2 F
(Include:) 99 562.33 T
0 F
(ec.h) 180 562.33 T
81 545.98 531 550.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 545.98 531 550.99 R
7 X
0 0 0 1 0 0 0 K
V
50 549.98 609.01 549.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 537.98 T
2 F
(ECCheckHugeArray\050\051) 99 537.98 T
3 10 Q
(void) 99 523.32 T
4 F
(ECCheckHugeArray\050) 153 523.32 T
4 9 Q
(VMFileHandle) 153 512.98 T
(vmFile,) 261 512.98 T
(VMBlockHandle) 153 502.98 T
(vmBlock\051;) 261 502.98 T
0 10 Q
-0.64 (This routine checks the validity of the passed Huge Array) 180 485.32 P
-0.64 (. If the block passed) 439.77 485.32 P
(is not the directory block of a Huge Array) 180 473.82 T
(, the routine fails.) 370.19 473.82 T
2 F
(Include:) 99 455.32 T
0 F
(ec.h) 180 455.32 T
81 438.98 531 443.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 438.98 531 443.98 R
7 X
0 0 0 1 0 0 0 K
V
50 442.98 609.01 442.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 430.98 T
2 F
(ECCheckLibraryHandle\050\051) 99 430.98 T
3 10 Q
(void) 99 416.31 T
4 F
(ECCheckLibraryHandle\050) 153 416.31 T
4 9 Q
(GeodeHandle gh\051;) 153 405.98 T
0 10 Q
(This routine checks that the passed handle references a library) 180 388.31 T
(. If the) 470.76 388.31 T
(assertions fail, a fatal error will occur) 180 376.81 T
(.) 352.98 376.81 T
2 F
(Include:) 99 358.31 T
0 F
(ec.h) 180 358.31 T
81 341.97 531 346.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 341.97 531 346.98 R
7 X
0 0 0 1 0 0 0 K
V
50 345.97 609.01 345.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 333.97 T
2 F
(ECCheckLMemChunk\050\051) 99 333.97 T
3 10 Q
(void) 99 319.3 T
4 F
(ECCheckLMemChunk\050) 153 319.3 T
4 9 Q
(void * chunkPtr\051;) 153 308.97 T
0 10 Q
(This routine checks the validity of the chunk pointed to by) 180 291.3 T
6 F
(chunkPtr) 452.25 291.3 T
0 F
(. If the) 494.47 291.3 T
(assertions fail, a fatal error will occur) 180 279.8 T
(.) 352.98 279.8 T
2 F
(Include:) 99 261.3 T
0 F
(ec.h) 180 261.3 T
81 244.96 531 249.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 244.96 531 249.97 R
7 X
0 0 0 1 0 0 0 K
V
50 248.96 609.01 248.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 236.96 T
2 F
(ECCheckLMemHandle\050\051) 99 236.96 T
3 10 Q
(void) 99 222.29 T
4 F
(ECCheckLMemHandle\050) 153 222.29 T
4 9 Q
(MemHandle mh\051;) 153 211.96 T
0 10 Q
-0.35 (This routine checks that the passed handle is a memory handle and actually) 180 194.29 P
-0.41 (references a local memory block. If the assertions fail, a fatal error will occur) 180 182.79 P
-0.41 (.) 528.22 182.79 P
2 F
(Include:) 99 164.29 T
0 F
(ec.h) 180 164.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "108" 4
%%Page: "109" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(109) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ECCheckLMemHandleNS\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
(ECCheckLMemHandleNS\050) 153 620.33 T
4 9 Q
(MemHandle mh\051;) 153 609.99 T
0 10 Q
-0.27 (This routine checks that the passed handle is a local memory handle; unlike) 180 592.33 P
7 F
(ECCheckLMemHandle\050\051) 180 580.83 T
0 F
(, however) 305.74 580.83 T
(, it does not check sharing violations) 349.26 580.83 T
(\050when threads are illegally using non-sharable memory\051. If the assertions) 180 569.33 T
(fail, a fatal error will occur) 180 557.83 T
(.) 303.16 557.83 T
2 F
(Include:) 99 539.33 T
0 F
(ec.h) 180 539.33 T
81 522.98 531 527.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 522.98 531 527.99 R
7 X
0 0 0 1 0 0 0 K
V
50 526.98 609.01 526.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 514.98 T
2 F
(ECCheckLMemObject\050\051) 99 514.98 T
3 10 Q
(void) 99 500.32 T
4 F
(ECCheckLMemObject\050) 153 500.32 T
4 9 Q
(optr) 153 489.98 T
(obj\051;) 189 489.98 T
0 10 Q
(This routine checks the validity of an object to ensure that it is an object) 180 472.32 T
(stored in an object block. If the assertions fail, a fatal error will occur) 180 460.82 T
(.) 498.18 460.82 T
2 F
(Include:) 99 442.32 T
0 F
(ec.h) 180 442.32 T
81 425.98 531 430.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 425.98 531 430.98 R
7 X
0 0 0 1 0 0 0 K
V
50 429.98 609.01 429.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 417.98 T
2 F
(ECCheckLMemObjectHandles\050\051) 99 417.98 T
3 10 Q
(void) 99 404.31 T
4 F
(ECCheckLMemObjectHandles\050) 153 404.31 T
4 9 Q
(MemHandle mh,) 153 393.98 T
(ChunkHandle ch\051;) 153 383.98 T
0 10 Q
(This routine checks the validity of an object to ensure that it is an object) 180 366.31 T
(stored in an object block. If the assertions fail, a fatal error will occur) 180 354.81 T
(.) 498.18 354.81 T
2 F
(Include:) 99 336.31 T
0 F
(ec.h) 180 336.31 T
81 319.97 531 324.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 319.97 531 324.98 R
7 X
0 0 0 1 0 0 0 K
V
50 323.97 609.01 323.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 311.97 T
2 F
(ECCheckLMemOD\050\051) 99 311.97 T
3 10 Q
(void) 99 298.3 T
4 F
(ECCheckLMemOD\050) 153 298.3 T
4 9 Q
(optr) 153 287.97 T
(o\051;) 189 287.97 T
0 10 Q
(This routine checks the validity of the given local-memory-based object. If) 180 270.3 T
(assertions fail, a fatal error will occur) 180 258.8 T
(.) 352.98 258.8 T
2 F
(Include:) 99 240.3 T
0 F
(ec.h) 180 240.3 T
81 223.96 531 228.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 223.96 531 228.97 R
7 X
0 0 0 1 0 0 0 K
V
50 227.96 609.01 227.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 215.96 T
2 F
(ECCheckLMemODHandles\050\051) 99 215.96 T
3 10 Q
(void) 99 201.29 T
4 F
(ECCheckLMemODHandles\050) 153 201.29 T
4 9 Q
(MemHandle objHan,) 153 190.96 T
(ChunkHandle objCh\051;) 153 180.96 T
0 10 Q
(This routine checks the validity of the given local-memory-based object. If) 180 163.29 T
(assertions fail, a fatal error will occur) 180 151.79 T
(.) 352.98 151.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "109" 5
%%Page: "110" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(110) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(ec.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(ECCheckMemHandle\050\051) 99 616.99 T
3 10 Q
(void) 99 602.33 T
4 F
(ECCheckMemHandle\050) 153 602.33 T
4 9 Q
(MemHandle mh\051;) 153 591.99 T
0 10 Q
(This routine checks that the passed handle is a memory handle that) 180 574.33 T
(references a memory block. If the assertions fail, a fatal error will occur) 180 562.83 T
(.) 509.46 562.83 T
2 F
(Include:) 99 544.33 T
0 F
(ec.h) 180 544.33 T
81 527.98 531 532.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.98 531 532.99 R
7 X
0 0 0 1 0 0 0 K
V
50 531.98 609.01 531.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.98 T
2 F
(ECCheckMemHandleNS\050\051) 99 519.98 T
3 10 Q
(void) 99 505.32 T
4 F
(ECCheckMemHandleNS\050) 153 505.32 T
4 9 Q
(MemHandle mh\051;) 153 494.98 T
0 10 Q
(This routine checks that the passed handle references a memory block;) 180 477.32 T
(unlike) 180 465.82 T
7 F
(ECCheckMemHandle\050\051) 212.23 465.82 T
0 F
(, however) 330.75 465.82 T
(, it will not check for sharing) 374.27 465.82 T
(violations \050when a thread illegally accesses a non-sharable block\051. If the) 180 454.32 T
(assertions fail, a fatal error will occur) 180 442.82 T
(.) 352.98 442.82 T
2 F
(Include:) 99 424.32 T
0 F
(ec.h) 180 424.32 T
81 407.98 531 412.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 407.98 531 412.98 R
7 X
0 0 0 1 0 0 0 K
V
50 411.98 609.01 411.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 399.98 T
2 F
(ECCheckObject\050\051) 99 399.98 T
3 10 Q
(void) 99 385.31 T
4 F
(ECCheckObject\050) 153 385.31 T
4 9 Q
(optr) 153 374.98 T
(obj\051;) 189 374.98 T
0 10 Q
(This routine checks the validity of the given locked object. If the assertions) 180 357.31 T
(fail, a fatal error will occur) 180 345.81 T
(.) 303.16 345.81 T
2 F
(Include:) 99 327.31 T
0 F
(ec.h) 180 327.31 T
81 310.97 531 315.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 310.97 531 315.98 R
7 X
0 0 0 1 0 0 0 K
V
50 314.97 609.01 314.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 302.97 T
2 F
(ECCheckObjectHandles\050\051) 99 302.97 T
3 10 Q
(void) 99 289.3 T
4 F
(ECCheckObjectHandles\050) 153 289.3 T
4 9 Q
(Memhandle mh,) 153 278.97 T
(ChunkHandle ch\051;) 153 268.97 T
0 10 Q
(This routine checks the validity of the given locked object. If the assertions) 180 251.3 T
(fail, a fatal error will occur) 180 239.8 T
(.) 303.16 239.8 T
81 224.96 531 229.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 224.96 531 229.97 R
7 X
0 0 0 1 0 0 0 K
V
50 228.96 609.01 228.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 216.96 T
2 F
(ECCheckOD\050\051) 99 216.96 T
3 10 Q
(void) 99 203.29 T
4 F
(ECCheckOD\050) 153 203.29 T
4 9 Q
(optr) 153 192.96 T
(obj\051;) 189 192.96 T
0 10 Q
(This routine checks the validity of the given object. Unlike) 180 175.29 T
7 F
(ECCheckLMemObject\050\051) 180 163.79 T
0 F
(, however) 302.04 163.79 T
(, it allows optrs of Process objects to be) 345.56 163.79 T
(speci\336ed. If assertions fail, a fatal error will occur) 180 152.29 T
(.) 408.53 152.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "110" 6
%%Page: "111" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(111) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ECCheckODHandles\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(ECCheckODHandles\050) 153 620.33 T
4 9 Q
(MemHandle objHan,) 153 609.99 T
(ChunkHandle objCh\051;) 153 599.99 T
0 10 Q
(This routine checks the validity of the given object. Unlike) 180 582.33 T
7 F
(ECCheckLMemObjectHandles\050\051) 180 570.83 T
0 F
(, however) 344.63 570.83 T
(, it allows processes to be) 388.15 570.83 T
(speci\336ed. If assertions fail, a fatal error will occur) 180 559.33 T
(.) 408.53 559.33 T
2 F
(Include:) 99 540.83 T
0 F
(ec.h) 180 540.83 T
81 524.48 531 529.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 524.48 531 529.49 R
7 X
0 0 0 1 0 0 0 K
V
50 528.48 609.01 528.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 516.48 T
2 F
(ECCheckProcessHandle\050\051) 99 516.48 T
3 10 Q
(void) 99 501.82 T
4 F
(ECCheckProcessHandle\050) 153 501.82 T
4 9 Q
(GeodeHandle gh\051;) 153 491.48 T
0 10 Q
(This routine checks that the passed handle actually references a process. If) 180 473.82 T
(the assertions fail, a fatal error will occur) 180 462.32 T
(.) 370.76 462.32 T
2 F
(Include:) 99 443.82 T
0 F
(ec.h) 180 443.82 T
81 427.48 531 432.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 427.48 531 432.48 R
7 X
0 0 0 1 0 0 0 K
V
50 431.48 609.01 431.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 419.48 T
2 F
(ECCheckQueueHandle\050\051) 99 419.48 T
3 10 Q
(void) 99 404.81 T
4 F
(ECCheckQueueHandle\050) 153 404.81 T
4 9 Q
(QueueHandle qh\051;) 153 394.48 T
0 10 Q
(This routine ensures the passed handle references an event queue. If the) 180 376.81 T
(assertions fail, a fatal error will occur) 180 365.31 T
(.) 352.98 365.31 T
2 F
(Include:) 99 346.81 T
0 F
(ec.h) 180 346.81 T
81 330.47 531 335.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 330.47 531 335.48 R
7 X
0 0 0 1 0 0 0 K
V
50 334.47 609.01 334.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 322.47 T
2 F
(ECCheckResourceHandle\050\051) 99 322.47 T
3 10 Q
(void) 99 307.8 T
4 F
(ECCheckResourceHandle\050) 153 307.8 T
4 9 Q
(MemHandle mh\051;) 153 297.47 T
0 10 Q
(This routine ensures that the passed handle references a geode resource. If) 180 279.8 T
(the assertions fail, a fatal error will occur) 180 268.3 T
(.) 370.76 268.3 T
2 F
(Include:) 99 249.8 T
0 F
(ec.h) 180 249.8 T
81 233.46 531 238.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 233.46 531 238.47 R
7 X
0 0 0 1 0 0 0 K
V
50 237.46 609.01 237.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 225.46 T
2 F
(ECCheckStack\050\051) 99 225.46 T
3 10 Q
(void) 99 210.79 T
4 F
(ECCheckStack\050\051;) 153 210.79 T
0 F
-0.41 (This routine checks to make sure the current stack has not over\337own \050and is) 180 192.79 P
(not about to\051. This routine also enforces a 100-byte gap between the stack) 180 181.29 T
(bottom and the stack pointer) 180 169.79 T
(. If assertions fail, a fatal error will occur) 312.8 169.79 T
(.) 501.52 169.79 T
2 F
(Include:) 99 151.29 T
0 F
(ec.h) 180 151.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "111" 7
%%Page: "112" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(112) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ECCheckThreadHandle\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(ECCheckThreadHandle\050) 153 620.33 T
4 9 Q
(ThreadHandle th\051;) 153 609.99 T
0 10 Q
(This routine checks that the passed handle actually references a thread. If) 180 592.33 T
(the assertions fail, a fatal error will occur) 180 580.83 T
(.) 370.76 580.83 T
2 F
(Include:) 99 562.33 T
0 F
(ec.h) 180 562.33 T
81 545.98 531 550.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 545.98 531 550.99 R
7 X
0 0 0 1 0 0 0 K
V
50 549.98 609.01 549.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 537.98 T
2 F
(ECCheckW) 99 537.98 T
(indowHandle\050\051) 162.9 537.98 T
3 10 Q
(void) 99 523.32 T
4 F
(ECCheckWindowHandle\050) 153 523.32 T
4 9 Q
(WindowHandle wh\051;) 153 512.98 T
0 10 Q
(This routine checks that the passed handle actually references a window) 180 495.32 T
(. If) 514.85 495.32 T
(the assertions fail, a fatal error will occur) 180 483.82 T
(.) 370.76 483.82 T
2 F
(Include:) 99 465.32 T
0 F
(ec.h) 180 465.32 T
81 448.98 531 453.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 448.98 531 453.98 R
7 X
0 0 0 1 0 0 0 K
V
50 452.98 609.01 452.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 440.98 T
2 F
(ECLMemExists\050\051) 99 440.98 T
3 10 Q
(void) 99 426.31 T
4 F
(ECLMemExists\050) 153 426.31 T
4 9 Q
(optr) 153 415.98 T
(o\051;) 189 415.98 T
0 10 Q
(This routine checks to see if the speci\336ed chunk exists. This routine should) 180 398.31 T
(be called by applications to check the chunk handle\325) 180 386.81 T
(s validity) 418.74 386.81 T
(. If the) 460.42 386.81 T
(assertions fail, a fatal error will occur) 180 375.31 T
(.) 352.98 375.31 T
2 F
(Include:) 99 356.81 T
0 F
(ec.h) 180 356.81 T
81 340.47 531 345.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 340.47 531 345.48 R
7 X
0 0 0 1 0 0 0 K
V
50 344.47 609.01 344.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 332.47 T
2 F
(ECLMemExistsHandles\050\051) 99 332.47 T
3 10 Q
(void) 99 317.8 T
4 F
(ECLMemExistsHandles\050) 153 317.8 T
4 9 Q
(MemHandle mh,) 153 307.47 T
(ChunkHandle ch\051;) 153 297.47 T
0 10 Q
(This routine checks to see if the speci\336ed chunk exists. This routine should) 180 279.8 T
(be called by applications to check the chunk handle\325) 180 268.3 T
(s validity) 418.74 268.3 T
(. If the) 460.42 268.3 T
(assertions fail, a fatal error will occur) 180 256.8 T
(.) 352.98 256.8 T
2 F
(Include:) 99 238.3 T
0 F
(ec.h) 180 238.3 T
81 221.96 531 226.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 221.96 531 226.97 R
7 X
0 0 0 1 0 0 0 K
V
50 225.96 609.01 225.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 213.96 T
2 F
(ECLMemV) 99 213.96 T
(alidateHandle\050\051) 157.68 213.96 T
3 10 Q
(void) 99 200.29 T
4 F
(ECLMemValidateHandle\050) 153 200.29 T
4 9 Q
(optr) 153 189.96 T
(o\051;) 189 189.96 T
0 10 Q
(This routine checks that the passed optr points to a local memory chunk. If) 180 172.29 T
(the assertions fail, a fatal error will occur) 180 160.79 T
(.) 370.76 160.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "112" 8
%%Page: "113" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(113) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(ec.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(ECLMemV) 99 616.99 T
(alidateHandleHandles\050\051) 157.68 616.99 T
3 10 Q
(void) 99 603.33 T
4 F
(ECLMemValidateHandleHandles\050) 153 603.33 T
4 9 Q
(MemHandle mh,) 153 592.99 T
(ChunkHandle ch\051;) 153 582.99 T
0 10 Q
(This routine checks that the passed memory and chunk handles actually) 180 565.33 T
-0.41 (reference a local memory chunk. If the assertions fail, a fatal error will occur) 180 553.83 P
-0.41 (.) 528.22 553.83 P
2 F
(Include:) 99 535.33 T
0 F
(ec.h) 180 535.33 T
81 518.98 531 523.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 518.98 531 523.99 R
7 X
0 0 0 1 0 0 0 K
V
50 522.98 609.01 522.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 510.98 T
2 F
(ECLMemV) 99 510.98 T
(alidateHeap\050\051) 157.68 510.98 T
3 10 Q
(void) 99 496.32 T
4 F
(ECLMemValidateHeap\050) 153 496.32 T
4 9 Q
(MemHandle mh\051;) 153 485.98 T
0 10 Q
(This routine does a complete error) 180 468.32 T
(-check of the LMem heap. It is used) 338.34 468.32 T
(internally and should not be needed by application programmers.) 180 456.82 T
2 F
(Include:) 99 438.32 T
0 F
(ec.h) 180 438.32 T
81 421.98 531 426.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 421.98 531 426.98 R
7 X
0 0 0 1 0 0 0 K
V
50 425.98 609.01 425.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 413.98 T
2 F
(ECMemV) 99 413.98 T
(erifyHeap\050\051) 150.35 413.98 T
3 10 Q
(void) 99 399.31 T
4 F
(ECMemVerifyHeap\050\051) 153 399.31 T
0 F
(This routine makes sure the global heap is in a consistent state. If the) 180 381.31 T
-0.74 (assertions fail, a fatal error will occur) 180 369.81 P
-0.74 (. This routine should likely not be called) 348.54 369.81 P
(by anything other than the) 180 358.31 T
0 9 Q
(EC) 307.61 358.31 T
0 10 Q
( kernel.) 320.61 358.31 T
2 F
(Include:) 99 339.81 T
0 F
(ec.h) 180 339.81 T
81 323.47 531 328.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 323.47 531 328.48 R
7 X
0 0 0 1 0 0 0 K
V
50 327.47 609.01 327.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 315.47 T
2 F
(ECVMCheckMemHandle\050\051) 99 315.47 T
3 10 Q
(void) 99 300.8 T
4 F
(ECVMCheckMemHandle\050) 153 300.8 T
4 9 Q
(MemHandle han\051;) 153 290.47 T
0 10 Q
-0.35 (This routine checks that the given memory handle is actually linked to a) 180 272.8 P
0 9 Q
-0.32 (VM) 513.58 272.8 P
0 10 Q
(block handle. If assertions fail, a fatal error will occur) 180 261.3 T
(.) 427.25 261.3 T
2 F
(Include:) 99 242.8 T
0 F
(ec.h) 180 242.8 T
81 226.46 531 231.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 226.46 531 231.47 R
7 X
0 0 0 1 0 0 0 K
V
50 230.46 609.01 230.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 218.46 T
2 F
(ECVMCheckVMBlockHandle\050\051) 99 218.46 T
3 10 Q
(void) 99 203.79 T
4 F
(ECVMCheckVMBlockHandle\050) 153 203.79 T
4 9 Q
(VMFileHandle file,) 153 193.46 T
(VMBlockHandle block\051;) 153 183.46 T
0 10 Q
(This routine checks the validity of the given) 180 165.79 T
0 9 Q
(VM) 385.76 165.79 T
0 10 Q
( \336le and block handles. If) 400.75 165.79 T
(assertions fail, a fatal error will occur) 180 154.29 T
(.) 352.98 154.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "113" 9
%%Page: "114" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(114) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(ec.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(ECVMCheckVMFile\050\051) 99 616.99 T
3 10 Q
(void) 99 602.33 T
4 F
(ECVMCheckVMFile\050) 153 602.33 T
4 9 Q
(VMFileHandle file\051;) 153 591.99 T
0 10 Q
-0.54 (This routine checks the validity of the given) 180 574.33 P
0 9 Q
-0.49 (VM) 381.44 574.33 P
0 10 Q
-0.54 ( \336le handle. If assertions fail,) 396.44 574.33 P
(a fatal error will occur) 180 562.83 T
(.) 282.41 562.83 T
2 F
(Include:) 99 544.33 T
0 F
(ec.h) 180 544.33 T
81 527.98 531 532.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.98 531 532.99 R
7 X
0 0 0 1 0 0 0 K
V
50 531.98 609.01 531.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.98 T
2 F
(ElementArrayAddElement \050\051) 99 519.98 T
3 10 Q
(word) 99 506.32 T
4 F
(ElementArrayAddElement\050) 153 506.32 T
4 9 Q
(optr) 153 495.98 T
(arr,) 189 495.98 T
(/* Handle of element array */) 279 495.98 T
(void *) 153 485.98 T
(element,) 189 485.98 T
(/* Element to add \050if necessary\051 */) 279 485.98 T
(dword) 153 475.98 T
(callBackData,) 189 475.98 T
(/* This is passed to the Callback routine */) 279 475.98 T
(Boolean _pascal \050*callback\051 \050void *elementToAdd,) 153 465.98 T
(void *elementFromArray,) 261 455.98 T
(dword valueForCallback\051\051;) 390.6 455.98 T
0 10 Q
-0.39 (This routine is used to add elements to an array) 180 438.32 P
-0.39 (. It is passed the address of a) 397.44 438.32 P
-0.35 (potential element. It compares the element with each member of an element) 180 426.82 P
-0.02 (array) 180 415.32 P
-0.02 (. If there are no matches, it adds the element to the array and sets the) 204.26 415.32 P
-0.2 (reference count to one. If there is a match, it increments the reference count) 180 403.82 P
(of the matching element in the array and returns; it does not add the new) 180 392.32 T
(element. When you pass the address of an element, make sure you pass the) 180 380.82 T
(address of the data portion of the element \050not the reference-count header\051.) 180 369.32 T
(Y) 180 350.82 T
(ou can pass a callback routine to) 185.93 350.82 T
7 F
(ElementArrayAddElement\050\051) 339.11 350.82 T
0 F
(.) 484.67 350.82 T
7 F
(ElementArrayAddElement\050\051) 180 339.32 T
0 F
( will call the callback routine to compare) 325.56 339.32 T
(elements and see if they match. The callback routine should be declared) 180 327.82 T
(_pascal.) 180 316.32 T
7 F
(ElementArrayAddElement\050\051) 219.64 316.32 T
0 F
( passes the callback routine the) 365.2 316.32 T
(address of the element you passed it, as well as the address of the) 180 304.82 T
(data-portion of the element in the array \050the part after the) 180 293.32 T
7 F
(RefElementHeader) 180 281.82 T
0 F
( structure\051. If the two elements match \050by whatever) 279.26 281.82 T
(criteria you use\051, return) 180 270.32 T
6 F
(true) 293.51 270.32 T
0 F
(; otherwise, return) 312.02 270.32 T
6 F
(false) 400.91 270.32 T
0 F
(. If you pass a null) 422.19 270.32 T
-0.3 (function pointer) 180 258.82 P
-0.3 (, the default comparison routine will be called, which checks) 253.21 258.82 P
(to see if every data byte matches.) 180 247.32 T
2 F
(Include:) 99 228.82 T
0 F
(chunkarr) 180 228.82 T
(.h) 222.4 228.82 T
2 F
(T) 99 208.82 T
(ips and T) 104.93 208.82 T
(ricks:) 148.28 208.82 T
0 F
(If you know the element is already in the array) 180 208.82 T
(, you can increment its) 396.88 208.82 T
(reference count by calling) 180 195.82 T
7 F
(ElementArrayAddReference\050\051) 301.29 195.82 T
0 F
(.) 456.12 195.82 T
2 F
(Be Sure T) 99 175.82 T
(o:) 144.94 175.82 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 175.82 T
2 F
(See Also:) 99 155.82 T
0 F
(ElementArrayAddReference\050\051) 180 155.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "114" 10
%%Page: "115" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(115) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayAddElementHandles\050\051) 99 634.99 T
3 10 Q
(word) 99 621.33 T
4 F
(ElementArrayAddElementHandles\050) 153 621.33 T
4 9 Q
(MemHandle) 153 610.99 T
(mh,) 261 610.99 T
(/* Global handle of LMem heap */) 333 610.99 T
(ChunkHandle) 153 600.99 T
(chunk) 261 600.99 T
(/* Chunk handle of element array */) 333 600.99 T
(void *) 153 590.99 T
(element,) 261 590.99 T
(/* Element to add */) 333 590.99 T
(dword) 153 580.99 T
(callBackData,) 261 580.99 T
(/* Passed to the Callback routine */) 331.2 580.99 T
(Boolean _pascal \050*callback\051 \050void *elementToAdd,) 153 570.99 T
(void *elementFromArray,) 261 560.99 T
(dword valueForCallback\051\051;) 390.6 560.99 T
0 10 Q
(This routine is exactly like) 180 543.33 T
7 F
(ElementArrayAddElement\050\051) 305.95 543.33 T
0 F
( above, except) 451.51 543.33 T
(that the element array is speci\336ed by its global and chunk handles \050instead) 180 531.83 T
(of with an optr\051.) 180 520.33 T
2 F
(Include:) 99 501.83 T
0 F
(chunkarr) 180 501.83 T
(.h) 222.4 501.83 T
2 F
(T) 99 481.83 T
(ips and T) 104.93 481.83 T
(ricks:) 148.28 481.83 T
0 F
(If you know the element is already in the array) 180 481.83 T
(, you can increment its) 396.88 481.83 T
(reference count by calling) 180 468.83 T
7 F
(ElementArrayAddReference\050\051) 301.29 468.83 T
0 F
(.) 456.12 468.83 T
2 F
(Be Sure T) 99 448.83 T
(o:) 144.94 448.83 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 448.83 T
2 F
(See Also:) 99 428.83 T
0 F
(ElementArrayAddReference\050\051) 180 428.83 T
81 412.48 531 417.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 412.48 531 417.49 R
7 X
0 0 0 1 0 0 0 K
V
50 416.48 609.01 416.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 404.48 T
2 F
(ElementArrayAddReference\050\051) 99 404.48 T
3 10 Q
(void) 99 389.82 T
4 F
(ElementArrayAddReference\050) 153 389.82 T
4 9 Q
(optr) 153 379.48 T
(arr,) 189 379.48 T
(/* optr to element array */) 315 379.48 T
(word) 153 369.48 T
(token\051;) 189 369.48 T
(/* Index number of element */) 315 369.48 T
0 10 Q
-0.78 (This routine increments the reference count of a member of an element array) 180 351.82 P
-0.78 (.) 526.22 351.82 P
2 F
(Be Sure T) 99 333.32 T
(o:) 144.94 333.32 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 333.32 T
2 F
(See Also:) 99 313.32 T
0 F
(ElementArrayAddElement\050\051) 180 313.32 T
81 296.98 531 301.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 296.98 531 301.98 R
7 X
0 0 0 1 0 0 0 K
V
50 300.98 609.01 300.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 288.98 T
2 F
(ElementArrayAddReferenceHandles\050\051) 99 288.98 T
3 10 Q
(void) 99 274.31 T
4 F
(ElementArrayAddReferenceHandles\050) 153 274.31 T
4 9 Q
(MemHandle) 153 263.97 T
(mh,) 261 263.97 T
(/* Handle of LMem heap\325s block */) 333 263.97 T
(ChunkHandle) 153 253.97 T
(ch,) 261 253.97 T
(/* Handle of element array */) 333 253.97 T
(word) 153 243.97 T
(token\051;) 261 243.97 T
(/* Index number of element */) 333 243.97 T
0 10 Q
(This routine is exactly like) 180 226.31 T
7 F
(ElementArrayAddReference\050\051) 305.95 226.31 T
0 F
( above, except) 460.78 226.31 T
(that the element array is speci\336ed by its global and chunk handles \050instead) 180 214.81 T
(of with an optr\051.) 180 203.31 T
2 F
(Include:) 99 184.81 T
0 F
(chunkarr) 180 184.81 T
(.h) 222.4 184.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "115" 11
%%Page: "116" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(116) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayCreate\050\051) 99 634.99 T
3 10 Q
(ChunkHandle) 99 620.33 T
4 F
(ElementArrayCreate\050) 171 620.33 T
4 9 Q
(MemHandle) 153 609.99 T
(mh,) 261 609.99 T
(/* Handle of LMem heap\325s block */) 333 609.99 T
(word) 153 599.99 T
(elementSize,) 261 599.99 T
(/* Size of each element, or zero) 333 599.99 T
( * for variable-sized */) 333 589.99 T
(word) 153 579.99 T
(headerSize\051;) 261 579.99 T
(/* Header size \050zero for default\051 */) 333 579.99 T
0 10 Q
-0.74 (This routine creates an element array in the indicated LMem heap. It creates) 180 562.33 P
(an) 180 550.83 T
7 F
(ElementArrayHeader) 194.45 550.83 T
0 F
( structure at the head of the chunk. If you want) 306.12 550.83 T
-0.67 (to leave extra space before the start of the array) 180 539.33 P
-0.67 (, you can pass a larger header) 394.92 539.33 P
(size; if you want to use the standard header) 180 527.83 T
(, pass a header size of zero.) 381.32 527.83 T
-0.5 (Y) 180 509.33 P
-0.5 (ou can specify the size of each element. Remember that the \336rst three bytes) 185.93 509.33 P
-0.81 (of every element in an element array are the element\325) 180 497.83 P
-0.81 (s) 420.38 497.83 P
7 F
-0.83 (RefElementHeader) 426.98 497.83 P
0 F
-0.81 (;) 526.24 497.83 P
-0.01 (structure, which contains the reference count; leave room for this when you) 180 486.33 P
(choose a size. For arrays with variable-sized elements, pass a size of zero.) 180 474.83 T
2 F
(Include:) 99 456.33 T
0 F
(chunkarr) 180 456.33 T
(.h) 222.4 456.33 T
2 F
(T) 99 436.33 T
(ips and T) 104.93 436.33 T
(ricks:) 148.28 436.33 T
0 F
-0.22 (Y) 180 436.33 P
-0.22 (ou may want to declare a structure for array elements; the \336rst component) 185.93 436.33 P
(should be a) 180 423.33 T
7 F
(RefElementHeader) 235.2 423.33 T
0 F
(. Y) 333.72 423.33 T
(ou can pass the size of this structure to) 345.21 423.33 T
7 F
(ElementArrayCreate\050\051) 180 410.33 T
0 F
(.) 296.12 410.33 T
(If you want extra space after the) 180 390.33 T
7 F
(ElementArrayHeader) 333.53 390.33 T
0 F
(, you may want to) 444.46 390.33 T
(create your own header structure, the \336rst element of which is an) 180 378.83 T
7 F
(ElementArrayHeader) 180 367.33 T
0 F
(. Y) 290.93 367.33 T
(ou can pass the size of this header to) 302.42 367.33 T
7 F
(ElementArrayCreate\050\051) 180 355.83 T
0 F
(, and access the data in your header via the) 296.12 355.83 T
(structure.) 180 344.33 T
2 F
(Be Sure T) 99 325.83 T
(o:) 144.94 325.83 T
0 F
(Lock the block on the global heap before calling this routine \050unless it is) 180 325.83 T
(\336xed\051. If you pass a header size, make sure it is larger than) 180 312.83 T
7 F
(sizeof\050ElementArrayHeader\051) 180 299.83 T
0 F
(.) 329.26 299.83 T
81 283.48 531 288.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 283.48 531 288.49 R
7 X
0 0 0 1 0 0 0 K
V
50 287.48 609.01 287.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 275.48 T
2 F
(ElementArrayCreateAt) 99 275.48 T
3 10 Q
(ChunkHandle) 99 260.82 T
4 F
(ElementArrayCreateAt\050) 171 260.82 T
4 9 Q
(optr) 153 250.48 T
(arr,) 189 250.48 T
(/* optr of chunk for array */) 315 250.48 T
(word) 153 240.48 T
(elementSize,) 189 240.48 T
(/* Size of each element, or zero) 315 240.48 T
( * for variable-sized */) 315 230.48 T
(word) 153 220.48 T
(headerSize\051;) 189 220.48 T
(/* Header size \050zero for default\051 */) 315 220.48 T
0 10 Q
(This routine is just like) 180 202.82 T
7 F
(ElementArrayCreate\050\051) 290.76 202.82 T
0 F
( above, except that the) 406.88 202.82 T
-0.32 (element array is created in a pre-existing chunk. The contents of that chunk) 180 191.32 P
(will be overwritten.) 180 179.82 T
2 F
(Include:) 99 161.32 T
0 F
(chunkarr) 180 161.32 T
(.h) 222.4 161.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "116" 12
%%Page: "117" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(117) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(W) 99 641.33 T
(arnings:) 108.07 641.33 T
0 F
(If the chunk isn\325) 180 641.33 T
(t large enough, it will be resized. This will invalidate all) 255.19 641.33 T
(pointers to chunks in that block.) 180 628.33 T
81 611.99 531 617 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 611.99 531 617 R
7 X
0 0 0 1 0 0 0 K
V
50 615.99 609.01 615.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 603.99 T
2 F
(ElementArrayCreateAtHandles) 99 603.99 T
3 10 Q
(ChunkHandle) 99 589.33 T
4 F
(ElementArrayCreateAtHandles\050) 171 589.33 T
4 9 Q
(MemHandle) 153 578.99 T
(mh,) 261 578.99 T
(/* Handle of LMem heap */) 333 578.99 T
(ChunkHandle) 153 568.99 T
(ch) 261 568.99 T
(/* Create array in this chunk */) 333 568.99 T
(word) 153 558.99 T
(elementSize,) 261 558.99 T
(/* Size of each element, or zero) 333 558.99 T
( * for variable-sized */) 315 548.99 T
(word) 153 538.99 T
(headerSize\051;) 261 538.99 T
(/* Header size \050zero for default\051 */) 333 538.99 T
0 10 Q
(This routine is exactly like) 180 521.33 T
7 F
(ElementArrayCreateAt\050\051) 305.95 521.33 T
0 F
( above, except that) 433.92 521.33 T
(the element array is speci\336ed by its global and chunk handles \050instead of) 180 509.83 T
(with an optr\051.) 180 498.33 T
2 F
(Include:) 99 479.83 T
0 F
(chunkarr) 180 479.83 T
(.h) 222.4 479.83 T
2 F
(W) 99 459.83 T
(arnings:) 108.07 459.83 T
0 F
(If the chunk isn\325) 180 459.83 T
(t large enough, it will be resized. This will invalidate all) 255.19 459.83 T
(pointers to chunks in that block.) 180 446.83 T
81 430.48 531 435.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 430.48 531 435.49 R
7 X
0 0 0 1 0 0 0 K
V
50 434.48 609.01 434.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 422.48 T
2 F
(ElementArrayDelete\050\051) 99 422.48 T
3 10 Q
(void) 99 407.82 T
4 F
(ElementArrayDelete\050) 153 407.82 T
4 9 Q
(optr) 153 397.48 T
(arr,) 189 397.48 T
(/* optr to element array */) 333 397.48 T
(word) 153 387.48 T
(token\051;) 189 387.48 T
(/* index of element to delete */) 333 387.48 T
0 10 Q
(This routine deletes an element from an element array regardless of its) 180 369.82 T
-0.61 (reference count. The routine is passed the element array\325) 180 358.32 P
-0.61 (s optr and the token) 438.1 358.32 P
(for the element to delete.) 180 346.82 T
-0.74 (Note that when an element is removed, it is actually resized down to zero size) 180 328.32 P
(and added to a list of free elements. That way the index numbers of later) 180 316.82 T
(elements are preserved.) 180 305.32 T
2 F
(Include:) 99 286.82 T
0 F
(chunkarr) 180 286.82 T
(.h) 222.4 286.82 T
2 F
(Be Sure T) 99 266.82 T
(o:) 144.94 266.82 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 266.82 T
2 F
(See Also:) 99 246.82 T
0 F
(ElementArrayRemoveReference\050\051) 180 246.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "117" 13
%%Page: "118" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(118) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayDeleteHandles\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(ElementArrayDeleteHandles\050) 153 621.33 T
4 9 Q
(MemHandle) 153 610.99 T
(mh,) 261 610.99 T
(/* Handle of LMem heap */) 333 610.99 T
(ChunkHandle) 153 600.99 T
(ch,) 261 600.99 T
(/* Chunk handle of element array */) 333 600.99 T
(word) 153 590.99 T
(token\051;) 261 590.99 T
(/* Index of element delete */) 333 590.99 T
0 10 Q
(This routine is exactly like) 180 573.33 T
7 F
(ElementArrayDelete\050\051) 305.95 573.33 T
0 F
( above, except that the) 420.58 573.33 T
-0.65 (element array is speci\336ed by its global and chunk handles \050instead of with an) 180 561.83 P
(optr\051.) 180 550.33 T
2 F
(Include:) 99 531.83 T
0 F
(chunkarr) 180 531.83 T
(.h) 222.4 531.83 T
2 F
(Be Sure T) 99 511.83 T
(o:) 144.94 511.83 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 511.83 T
2 F
(See Also:) 99 491.83 T
0 F
(ElementArrayRemoveReference\050\051) 180 491.83 T
81 475.48 531 480.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 475.48 531 480.49 R
7 X
0 0 0 1 0 0 0 K
V
50 479.48 609.01 479.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 467.48 T
2 F
(ElementArrayElementChanged\050\051) 99 467.48 T
3 10 Q
(void) 99 452.82 T
4 F
(ElementArrayElementChanged\050) 153 452.82 T
4 9 Q
(optr) 153 442.48 T
(arr,) 189 442.48 T
(/* optr to element array */) 315 442.48 T
(word) 153 432.48 T
(token,) 189 432.48 T
(/* Index number of element */) 315 432.48 T
(dword) 153 422.48 T
(callbackData,) 189 422.48 T
(/* This is passed along to callback */) 315 422.48 T
(Boolean _pascal \050*callback\051) 153 412.48 T
(/* Returns true if elements identical */) 298.8 412.48 T
(\050void *) 261 402.48 T
(elementChanged,) 315 402.48 T
( void *) 261 392.48 T
(elementToCompare,) 315 392.48 T
( dword) 261 382.48 T
(valueForCallback\051\051;) 315 382.48 T
0 10 Q
-0.23 (This routine checks to see if an element is identical to any other elements in) 180 364.82 P
(the same element array) 180 353.32 T
(. This is used after an element has changed to see if) 288.72 353.32 T
(it now matches another element. If the element matches another) 180 341.82 T
(, it will be) 478.73 341.82 T
(deleted, and the other element will have its reference count incremented.) 180 330.32 T
-0.09 (The routine is passed an optr to the element array) 180 311.82 P
-0.09 (, the token of the element) 410.75 311.82 P
(which is being checked, a dword of data \050which is passed to the callback) 180 300.32 T
-0.79 (routine\051, and a pointer to a callback comparison routine. The callback routine) 180 288.82 P
(itself is passed pointers to two elements and the) 180 277.32 T
6 F
(callbackData) 404.85 277.32 T
0 F
( argument) 465.77 277.32 T
-0.31 (passed to) 180 265.82 P
7 F
-0.32 (ElementArrayElementChanged\050\051) 225.13 265.82 P
0 F
-0.31 (. The callback routine should) 395.87 265.82 P
(be declared _pascal. If the two elements are identical, the callback should) 180 254.32 T
(return) 180 242.82 T
6 F
(true) 212.77 242.82 T
0 F
( \050i.e. non-zero\051; otherwise, it should return) 231.28 242.82 T
6 F
(false) 429.24 242.82 T
0 F
(.) 450.52 242.82 T
-0.45 (If you pass a null function pointer) 180 224.32 P
-0.45 (,) 333.25 224.32 P
7 F
-0.46 (ElementArrayElementChanged\050\051) 338.36 224.32 P
0 F
-0.45 ( will) 509.1 224.32 P
(do a bytewise comparison of the elements.) 180 212.82 T
2 F
(Include:) 99 194.32 T
0 F
(chunkarr) 180 194.32 T
(.h) 222.4 194.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "118" 14
%%Page: "119" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(119) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayElementChangedHandles\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(ElementArrayElementChangedHandles\050) 153 621.33 T
4 9 Q
(MemHandle) 153 610.99 T
(memHandle,) 261 610.99 T
(/* Handle of LMem heap\325s block */) 333 610.99 T
(ChunkHandle) 153 600.99 T
(chunkHandle,) 261 600.99 T
(/* Chunk handle of element array */) 333 600.99 T
(word) 153 590.99 T
(token,) 261 590.99 T
(/* Index number of element */) 333 590.99 T
(dword) 153 580.99 T
(callbackData,) 261 580.99 T
(/* This is passed along to) 351 580.99 T
( * callback */) 333 570.99 T
(Boolean _pascal \050*callback\051) 153 560.99 T
(/* Returns true if elements identical */) 298.8 560.99 T
(\050void *) 261 550.99 T
(elementChanged,) 315 550.99 T
( void *) 261 540.99 T
(elementToCompare,) 315 540.99 T
( dword) 261 530.99 T
(valueForCallback\051\051;) 315 530.99 T
0 10 Q
(This routine is exactly like) 180 513.33 T
7 F
(ElementArrayElementChanged\050\051) 305.95 513.33 T
0 F
( above,) 476.69 513.33 T
(except that the element array is speci\336ed by its global and chunk handles) 180 501.83 T
(\050instead of with an optr\051.) 180 490.33 T
2 F
(Include:) 99 471.83 T
0 F
(chunkarr) 180 471.83 T
(.h) 222.4 471.83 T
81 455.48 531 460.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 455.48 531 460.49 R
7 X
0 0 0 1 0 0 0 K
V
50 459.48 609.01 459.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 447.48 T
2 F
(ElementArrayGetUsedCount\050\051) 99 447.48 T
3 10 Q
(word) 99 432.82 T
4 F
(ElementArrayGetUsedCount\050) 153 432.82 T
4 9 Q
(optr) 153 422.48 T
(arr,) 189 422.48 T
(/* optr to element array */) 297 422.48 T
(dword) 153 412.48 T
(callbackData,) 189 412.48 T
(/* This is passed to callback routine */) 297 412.48 T
(Boolean _pascal \050*callback\051) 153 402.48 T
(/* return true to count this element */) 298.8 402.48 T
(\050void * element, dword cbData\051\051;) 261 392.48 T
0 10 Q
-0.28 (This routine counts the number of active elements in an element array; that) 180 374.82 P
(is, elements which have a reference count of one or greater) 180 363.32 T
(. It can be) 450.37 363.32 T
(instructed to count every element, or every element which matches certain) 180 351.82 T
-0.47 (criteria. The routine is passed three parameters: the optr of the chunk array) 180 340.32 P
-0.47 (,) 525.91 340.32 P
-0.65 (a dword which is passed to the callback routine, and a callback routine which) 180 328.82 P
(determines whether the element should be counted. The callback) 180 317.32 T
(routine,which should be declared _pascal, is passed the dword an a pointer) 180 305.82 T
(to an element. It should return) 180 294.32 T
6 F
(true) 325.75 294.32 T
0 F
( if the element should be counted;) 344.26 294.32 T
-0.65 (otherwise, it should return) 180 282.82 P
6 F
-0.65 (false) 304.06 282.82 P
0 F
-0.65 (. T) 325.34 282.82 P
-0.65 (o count every element, pass a null callback) 336 282.82 P
(pointer) 180 271.32 T
(.) 212.59 271.32 T
2 F
(Include:) 99 252.82 T
0 F
(chunkarr) 180 252.82 T
(.h) 222.4 252.82 T
2 F
(See Also:) 99 232.82 T
0 F
(ElementArrayT) 180 232.82 T
(okenT) 252.04 232.82 T
(oUsedIndex\050\051, ElementArrayUsedIndexT) 279.83 232.82 T
(oT) 468.71 232.82 T
(oken\050\051) 479.46 232.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "119" 15
%%Page: "120" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(120) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayGetUsedCountHandles\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(ElementArrayGetUsedCountHandles\050) 153 621.33 T
4 9 Q
(MemHandle) 153 610.99 T
(mh,) 261 610.99 T
(/* Handle of LMem heap\325s block */) 315 610.99 T
(ChunkHandle) 153 600.99 T
(ch,) 261 600.99 T
(/* Chunk handle of element array */) 315 600.99 T
(dword) 153 590.99 T
(callbackData,) 189 590.99 T
(/* This is passed to callback routine */) 297 590.99 T
(Boolean _pascal \050*callback\051) 153 580.99 T
(/* return true to count this element */) 298.8 580.99 T
(\050void * element, dword cbData\051\051;) 261 570.99 T
0 10 Q
(This routine is exactly like) 180 553.33 T
7 F
(ElementArrayGetUsedCount\050\051) 305.95 553.33 T
0 F
( above, except) 463.17 553.33 T
(that the element array is speci\336ed by its global and chunk handles \050instead) 180 541.83 T
(of with an optr\051.) 180 530.33 T
2 F
(Include:) 99 511.83 T
0 F
(chunkarr) 180 511.83 T
(.h) 222.4 511.83 T
81 495.48 531 500.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 495.48 531 500.49 R
7 X
0 0 0 1 0 0 0 K
V
50 499.48 609.01 499.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 487.48 T
2 F
(ElementArrayRemoveReference\050\051) 99 487.48 T
3 10 Q
(void) 99 472.82 T
4 F
(ElementArrayRemoveReference\050) 153 472.82 T
4 9 Q
(optr) 153 462.48 T
(arr,) 261 462.48 T
(/* optr of element array */) 333 462.48 T
(word) 153 452.48 T
(token,) 261 452.48 T
(/* Index of element to) 333 452.48 T
( * unreference */) 315 442.48 T
(dword) 153 432.48 T
(callbackData,) 261 432.48 T
(/* Passed to callback routine */) 333 432.48 T
(void _pascal \050*callback\051) 153 422.48 T
(\050void *element, dword valueForCallback\051\051;) 282.6 422.48 T
(/* Routine is called if element is actually removed */) 189 412.48 T
0 10 Q
(This routine decrements the reference count of the speci\336ed element. If the) 180 394.82 T
(reference count drops to zero, the element will be removed. If an element is) 180 383.32 T
(to be removed,) 180 371.82 T
7 F
(ElementArrayRemoveReference\050\051) 250.01 371.82 T
0 F
( calls the callback) 425.39 371.82 T
(routine on that element. The callback routine should perform any cleanup) 180 360.32 T
(necessary; it is passed a pointer to the element and the) 180 348.82 T
6 F
(callbackData) 436.89 348.82 T
0 F
(argument. If you pass a null function pointer) 180 337.32 T
(, no callback routine will be) 386.86 337.32 T
(called.) 180 325.82 T
-0.74 (Note that when an element is removed, it is actually resized down to zero size) 180 307.32 P
(and added to a list of free elements. That way the index numbers of later) 180 295.82 T
(elements are preserved.) 180 284.32 T
2 F
(Be Sure T) 99 265.82 T
(o:) 144.94 265.82 T
0 F
(Lock the block on the global heap before calling \050unless it is \336xed\051.) 180 265.82 T
2 F
(See Also:) 99 245.82 T
0 F
(ElementArrayDelete\050\051) 180 245.82 T
2 F
(Include:) 99 225.82 T
0 F
(chunkarr) 180 225.82 T
(.h) 222.4 225.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "120" 16
%%Page: "121" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(121) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayRemoveReferenceHandles\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(ElementArrayRemoveReferenceHandles\050) 153 621.33 T
4 9 Q
(MemHandle) 153 610.99 T
(mh,) 261 610.99 T
(/* Handle of LMem heap */) 315 610.99 T
(ChunkHandle) 153 600.99 T
(ch,) 261 600.99 T
(/* Chunk handle of element array */) 315 600.99 T
(word) 153 590.99 T
(token,) 261 590.99 T
(/* Index of element to unreference */) 315 590.99 T
(dword) 153 580.99 T
(callbackData,) 261 580.99 T
(/* Passed to callback routine */) 333 580.99 T
(void _pascal \050*callback\051) 153 570.99 T
(\050void *element, dword valueForCallback\051\051;) 282.6 570.99 T
(/* Routine is called if element is actually removed */) 189 560.99 T
0 10 Q
(This routine is exactly like) 180 543.33 T
7 F
(ElementArrayRemoveReference\050\051) 305.95 543.33 T
0 F
( above,) 481.33 543.33 T
(except that the element array is speci\336ed by its global and chunk handles) 180 531.83 T
(\050instead of with an optr\051.) 180 520.33 T
2 F
(Include:) 99 501.83 T
0 F
(chunkarr) 180 501.83 T
(.h) 222.4 501.83 T
81 485.48 531 490.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 485.48 531 490.49 R
7 X
0 0 0 1 0 0 0 K
V
50 489.48 609.01 489.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 477.48 T
2 F
(ElementArrayT) 99 477.48 T
(okenT) 183.47 477.48 T
(oUsedIndex\050\051) 217.92 477.48 T
3 10 Q
(word) 99 463.82 T
4 F
(ElementArrayTokenToUsedIndex\050) 153 463.82 T
4 9 Q
(optr) 153 453.48 T
(arr,) 189 453.48 T
(/* Handle of element array */) 261 453.48 T
(word) 153 443.48 T
(token,) 189 443.48 T
(/* Index of element to unreference */) 261 443.48 T
(dword) 153 433.48 T
(callbackData,) 189 433.48 T
(/* Data passed to callback routine */) 261 433.48 T
(Boolean) 153 423.48 T
(_pascal \050*callback\051) 196.2 423.48 T
(/* Return true to count this element */) 298.8 423.48 T
(\050void *element, dword cbData\051\051;) 210.6 413.48 T
0 10 Q
-0.14 (This routine is passed the token of an element array) 180 395.82 P
-0.14 (. It translates the token) 419.29 395.82 P
(into an index from some non-standard indexing scheme. The indexing) 180 384.32 T
(scheme can either number the elements from zero, counting only those) 180 372.82 T
-0.48 (elements in use \050i.e. those with a reference count greater than zero\051; or it can) 180 361.32 P
(use a more restrictive scheme. If a callback routine is passed, the callback) 180 349.82 T
(routine will be called for every used element; it should be declared _pascal) 180 338.32 T
-0.39 (and return) 180 326.82 P
6 F
-0.39 (true) 232.18 326.82 P
0 F
-0.39 ( if the element should be counted. If a null callback pointer is) 250.69 326.82 P
(passed, every used element will be counted.) 180 315.32 T
2 F
(Include:) 99 296.82 T
0 F
(chunkarr) 180 296.82 T
(.h) 222.4 296.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "121" 17
%%Page: "122" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(122) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayT) 99 634.99 T
(okenT) 183.47 634.99 T
(oUsedIndexHandles\050\051) 217.92 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(ElementArrayTokenToUsedIndexHandles\050) 153 620.33 T
4 9 Q
(MemHandle) 153 609.99 T
(mh,) 261 609.99 T
(/* Handle of LMem heap */) 297 609.99 T
(ChunkHandle) 153 599.99 T
(ch,) 261 599.99 T
(/* Chunk handle of element array */) 297 599.99 T
(word) 153 589.99 T
(token,) 261 589.99 T
(/* Index of element to unreference */) 297 589.99 T
(dword) 153 579.99 T
(callbackData, /* Data passed to the) 261 579.99 T
( * callback routine */) 315 569.99 T
(Boolean) 153 559.99 T
(_pascal \050*callback\051) 196.2 559.99 T
(/* Return true to count this element */) 298.8 559.99 T
(\050void *element, dword cbData\051\051;) 261 549.99 T
0 10 Q
(This routine is exactly like) 180 532.33 T
7 F
(ElementArrayT) 305.95 532.33 T
(okenT) 385.77 532.33 T
(oUsedIndex\050\051) 417.44 532.33 T
0 F
( above,) 486.88 532.33 T
(except that the element array is speci\336ed by its global and chunk handles) 180 520.83 T
(\050instead of with an optr\051.) 180 509.33 T
2 F
(Include:) 99 490.83 T
0 F
(chunkarr) 180 490.83 T
(.h) 222.4 490.83 T
81 474.48 531 479.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 474.48 531 479.49 R
7 X
0 0 0 1 0 0 0 K
V
50 478.48 609.01 478.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 466.48 T
2 F
(ElementArrayUsedIndexT) 99 466.48 T
(oT) 244.15 466.48 T
(oken\050\051) 257.93 466.48 T
3 10 Q
(word) 99 451.82 T
4 F
(ElementArrayUsedIndexToToken\050) 153 451.82 T
4 9 Q
(optr) 153 441.48 T
(arr,) 189 441.48 T
(/* optr to element array */) 279 441.48 T
(word) 153 431.48 T
(index,) 189 431.48 T
(/* Find token of element with this index */) 279 431.48 T
(dword) 153 421.48 T
(callbackData,) 189 421.48 T
(/* This is passed to the callback routine */) 279 421.48 T
(Boolean _pascal \050*callback\051) 153 411.48 T
(/* Return true to count this element */) 298.8 411.48 T
(\050void *element, dword cbData\051\051;) 261 401.48 T
0 10 Q
(This routine takes an index into an element array from some non-standard) 180 383.82 T
(indexing scheme. The routine \336nds the element speci\336ed and returns the) 180 372.32 T
-0.15 (element\325) 180 360.82 P
-0.15 (s token. The indexing scheme can either number the elements from) 218.71 360.82 P
(zero, counting only those elements in use \050i.e. those with a reference count) 180 349.32 T
(greater than zero\051; or it can use a more restrictive scheme. If a callback) 180 337.82 T
-0.1 (routine is passed, the callback routine will be called for every used element;) 180 326.32 P
(it should should be declared _pascal return) 180 314.82 T
6 F
(true) 381.68 314.82 T
0 F
( if the element should be) 400.19 314.82 T
(counted. If a null callback pointer is passed, every used element will be) 180 303.32 T
(counted.) 180 291.82 T
(If no matching element is found,) 180 273.32 T
7 F
(ElementArrayUsedIndexT) 332.6 273.32 T
(oT) 467.97 273.32 T
(oken\050\051) 480.38 273.32 T
0 F
(returns) 180 261.82 T
0 9 Q
(CA_NULL_ELEMENT) 217.4 261.82 T
0 10 Q
(.) 312.48 261.82 T
2 F
(Include:) 99 243.32 T
0 F
(chunkarr) 180 243.32 T
(.h) 222.4 243.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "122" 18
%%Page: "123" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(123) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ElementArrayUsedIndexT) 99 634.99 T
(oT) 244.15 634.99 T
(okenHandles\050\051) 257.93 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(ElementArrayUsedIndexToTokenHandles\050) 153 620.33 T
4 9 Q
(MemHandle) 153 609.99 T
(mh,) 261 609.99 T
(/* Handle of LMem heap\325s block */) 297 609.99 T
(ChunkHandle) 153 599.99 T
(ch,) 261 599.99 T
(/* Handle of element array */) 297 599.99 T
(word) 153 589.99 T
(index,) 261 589.99 T
(/* Find token of element with this index */) 297 589.99 T
(dword) 153 579.99 T
(callbackData, /* Data passed to the) 261 579.99 T
(* callback routine */) 343.8 569.99 T
(Boolean) 153 559.99 T
(_pascal \050*callback\051) 196.2 559.99 T
(/* Return true to count this element */) 298.8 559.99 T
(\050void *element, dword cbData\051\051;) 210.6 549.99 T
0 10 Q
(This routine is exactly like) 180 532.33 T
7 F
(ElementArrayUsedIndexT) 305.95 532.33 T
(oT) 441.32 532.33 T
(oken\050\051) 453.73 532.33 T
0 F
( above,) 486.88 532.33 T
(except that the element array is speci\336ed by its global and chunk handles) 180 520.83 T
(\050instead of with an optr\051.) 180 509.33 T
2 F
(Include:) 99 490.83 T
0 F
(chunkarr) 180 490.83 T
(.h) 222.4 490.83 T
81 474.48 531 479.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 474.48 531 479.49 R
7 X
0 0 0 1 0 0 0 K
V
50 478.48 609.01 478.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 466.48 T
2 F
(EvalExpression\050\051) 99 466.48 T
4 10 Q
(int) 99 452.82 T
(EvalExpression\050) 153 452.82 T
4 9 Q
(byte) 153 442.48 T
(* tokenBuffer,) 189 442.48 T
(/* Pointer to the parsed expression */) 297 442.48 T
(byte) 153 432.48 T
(* scratchBuffer,) 189 432.48 T
(/* Pointer to the base of a scratch buffer) 297 432.48 T
( * consisting of two stacks: an argument) 297 422.48 T
( * stack and an operator/function stack */) 297 412.48 T
(byte) 153 402.48 T
(* resultsBuffer,) 189 402.48 T
(/* Pointer to a buffer to contain the) 297 402.48 T
( * result of the evaluation */) 297 392.48 T
(word) 153 382.48 T
(bufSize,) 189 382.48 T
(/* Size of the scratch buffer */) 297 382.48 T
(CEvalStruct * evalParams\051;) 153 372.48 T
(/* Pointer to CEvalStruct structure */) 297 372.48 T
0 10 Q
-0.22 (This routine evaluates a stream of parser tokens. It is used by the evaluator) 180 354.82 P
(portion of the parse library and will be used only rarely by applications.) 180 343.32 T
2 F
(Include:) 99 324.82 T
0 F
(parse.h) 180 324.82 T
81 308.48 531 313.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 308.48 531 313.48 R
7 X
0 0 0 1 0 0 0 K
V
50 312.48 609.01 312.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 300.48 T
2 F
(FatalError\050\051) 99 300.48 T
3 10 Q
(void) 99 285.81 T
4 F
(FatalError\050) 153 285.81 T
4 9 Q
(word errorCode\051;) 153 275.47 T
0 10 Q
(This routine causes a fatal error) 180 257.81 T
(, leaving) 328.16 257.81 T
6 F
(errorCode) 370.21 257.81 T
0 F
( for the debugger) 415.74 257.81 T
(.) 493.7 257.81 T
81 242.97 531 247.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 242.97 531 247.97 R
7 X
0 0 0 1 0 0 0 K
V
50 246.97 609.01 246.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 234.97 T
2 F
(FileClose\050\051) 99 234.97 T
3 10 Q
(word) 99 221.3 T
4 F
(FileClose\050 /* returns error */) 153 221.3 T
4 9 Q
(FileHandle) 153 210.97 T
(fh,) 261 210.97 T
(/* File to close */) 351 210.97 T
(Boolean) 153 200.97 T
(noErrorFlag\051;) 261 200.97 T
(/* Set if app. can\325t handle) 351 200.97 T
( * errors */) 351 190.97 T
0 10 Q
-0.14 (This routine closes an open byte \336le. If the routine succeeds, it returns zero.) 180 173.3 P
-0.52 (If the routine fails and) 180 161.8 P
6 F
-0.52 (noErrorFlag) 284.63 161.8 P
0 F
-0.52 ( is) 342.39 161.8 P
6 F
-0.52 (false) 354.69 161.8 P
0 F
-0.52 ( \050i.e., zero\051,) 375.97 161.8 P
7 F
-0.54 (FileClose\050\051) 427.93 161.8 P
0 F
-0.52 ( returns a) 484.04 161.8 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "123" 19
%%Page: "124" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(124) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(member of the) 180 641.33 T
7 F
(FileError) 249.45 641.33 T
0 F
( enumerated type. If the routine fails and) 298.9 641.33 T
6 F
(noErrorFlag) 180 629.83 T
0 F
( is) 237.76 629.83 T
6 F
(true) 251.1 629.83 T
0 F
( \050i.e., non-zero\051, the routine will fatal-error) 269.61 629.83 T
(.) 465.35 629.83 T
2 F
(W) 99 611.33 T
(arnings:) 108.07 611.33 T
0 F
(The) 180 611.33 T
6 F
(noErrorFlag) 200.56 611.33 T
0 F
( parameter should be) 258.32 611.33 T
6 F
(true) 359.26 611.33 T
0 F
( only during debugging.) 377.77 611.33 T
2 F
(Include:) 99 591.33 T
0 F
(\336le.h) 180 591.33 T
81 574.99 531 580 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 574.99 531 580 R
7 X
0 0 0 1 0 0 0 K
V
50 578.99 609.01 578.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 566.99 T
2 F
(FileCommit\050\051) 99 566.99 T
3 10 Q
(word) 99 553.33 T
4 F
(FileCommit\050 /* returns error */) 153 553.33 T
4 9 Q
(FileHandle) 153 542.99 T
(fh,) 261 542.99 T
(Boolean) 153 532.99 T
(noErrorFlag\051;) 261 532.99 T
(/* set if can\325t handle errors */) 333 532.99 T
7 10 Q
(FileCommit\050\051) 180 515.33 T
0 F
( forces the \336le system to write any cached information about) 249.07 515.33 T
(a \336le to the disk immediately) 180 503.83 T
(. If it is successful, it returns zero. If it fails, it) 313.74 503.83 T
(returns an error code. If the routine fails and) 180 492.33 T
6 F
(noErrorFlag) 390.92 492.33 T
0 F
( is) 448.68 492.33 T
6 F
(true) 462.02 492.33 T
0 F
( \050i.e.) 480.53 492.33 T
(non-zero\051, the routine will fatal-error) 180 480.83 T
(.) 350.36 480.83 T
2 F
(W) 99 462.33 T
(arnings:) 108.07 462.33 T
0 F
(The) 180 462.33 T
6 F
(noErrorFlag) 200.56 462.33 T
0 F
( parameter should be) 258.32 462.33 T
6 F
(true) 359.26 462.33 T
0 F
( only during debugging.) 377.77 462.33 T
2 F
(Include:) 99 442.33 T
0 F
(\336le.h) 180 442.33 T
81 425.98 531 430.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 425.98 531 430.99 R
7 X
0 0 0 1 0 0 0 K
V
50 429.98 609.01 429.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 417.98 T
2 F
(FileConstructFullPath\050\051) 99 417.98 T
3 10 Q
(DiskHandle) 99 404.32 T
4 F
(FileConstructFullPath\050) 165 404.32 T
4 9 Q
(char) 153 393.98 T
(* * buffer,) 261 393.98 T
(/* Path string is written here */) 333 393.98 T
(word) 153 383.98 T
(bufSize,) 261 383.98 T
(/* Length of buffer \050in bytes\051 */) 315 383.98 T
(DiskHandle) 153 373.98 T
(disk,) 261 373.98 T
(/* Disk or standard path; null for) 315 373.98 T
( * current path */) 315 363.98 T
(const char) 153 353.98 T
(* tail,) 261 353.98 T
(/* Path relative to handle */) 315 353.98 T
(Boolean) 153 343.98 T
(addDriveLetter\051;) 261 343.98 T
(/* Should path begin with drive) 351 343.98 T
( * name? */) 351 333.98 T
0 10 Q
(This routine translates a) 180 316.32 T
0 9 Q
(GEOS) 297.8 316.32 T
0 10 Q
( directory speci\336cation into a complete path) 323.97 316.32 T
(string. It writes the string into the passed buffer) 180 304.82 T
(. The directory is speci\336ed) 403.53 304.82 T
-0.07 (by two arguments: The \336rst,) 180 293.32 P
6 F
-0.07 (disk) 313.58 293.32 P
0 F
-0.07 (, is the handle of a disk; this may also be a) 333.02 293.32 P
(standard path constant. \050If a null handle is passed, the current working) 180 281.82 T
(directory is used.\051 The second,) 180 270.32 T
6 F
(tail) 322.22 270.32 T
0 F
(, is a pointer to the character string) 338.14 270.32 T
(representing the tail end of the path.) 180 258.82 T
7 F
(FileConstructFullPath\050\051) 353.35 258.82 T
0 F
( appends) 479.09 258.82 T
(this relative path to the location indicated by the disk handle. It then) 180 247.32 T
(constructs a full path string, beginning with that disk\325) 180 235.82 T
(s root directory) 430.22 235.82 T
(, and) 499.1 235.82 T
(writes it to the buffer passed. If) 180 224.32 T
6 F
(addDriveName) 328.53 224.32 T
0 F
( is) 398.89 224.32 T
6 F
(true) 412.23 224.32 T
0 F
( \050i.e. non-zero\051, the) 430.74 224.32 T
(path string will begin with the drive\325) 180 212.82 T
(s name and a colon.) 349.29 212.82 T
2 F
(Examples:) 99 194.32 T
0 F
(The following call to) 180 194.32 T
7 F
(FileConstructFullPath\050\051) 276.13 194.32 T
0 F
( might yield these results:) 401.87 194.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "124" 20
%%Page: "125" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(125) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(6-) 147.13 629.31 T
(1 Sample call to FileConstructFullPath\050\051) 156.02 629.31 T
4 9 Q
(/* Here we find out the full path of a subdirectory of the DOCUMENT directory */) 81 614.98 T
(DiskHandle) 125 597.98 T
(documentDisk;) 212.5 597.98 T
(char) 125 587.98 T
(pathBuffer[256];) 212.5 587.98 T
(/* long enough for most paths */) 344 587.98 T
(documentDisk = FileConstructFullPath\050&pathBuffer,) 125 570.98 T
(/* pointer to pointer */) 389.6 570.98 T
(256,) 301 560.98 T
(/* Length of buffer */) 388 560.98 T
(SP_DOCUMENT,) 301 550.98 T
(/* This can be a disk or) 388 550.98 T
( * standard path */) 388 540.98 T
("MEMOS\134\134JANUARY", /* In C strings, the) 301 530.98 T
( * backslash must be) 388 520.98 T
( * doubled */) 388 510.98 T
(TRUE\051;) 301 500.98 T
(/* Prepend drive name */) 388 500.98 T
(/* If the standard paths are set up in the default configuration, \322documentDisk\323) 81 483.98 T
( * would be the handle of the main hard drive, and pathBuffer would contain a) 81 473.98 T
( * string like \322C:\134GEOWORKS\134DOCUMENT\134MEMOS\134JANUARY\323 */) 81 463.98 T
81 440.95 531 452.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 440.95 531 452.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 448.2 617.5 451.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(See Also:) 99 423.29 T
0 F
(FileParseStandardPath\050\051) 180 423.29 T
2 F
(Include:) 99 403.29 T
0 F
(\336le.h) 180 403.29 T
81 386.94 531 391.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 386.94 531 391.95 R
7 X
0 0 0 1 0 0 0 K
V
50 390.94 609.01 390.94 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 378.94 T
2 F
(FileCopy\050\051) 99 378.94 T
3 10 Q
(word) 99 364.28 T
4 F
(FileCopy\050 /* returns error */) 153 364.28 T
4 9 Q
(const char) 153 353.94 T
(* source,) 261 353.94 T
(/* Source path and file name */) 333 353.94 T
(const char) 153 343.94 T
(* dest,) 261 343.94 T
(/* Destination path and file name */) 333 343.94 T
(DiskHandle) 153 333.94 T
(sourceDisk,) 261 333.94 T
(/* These handles may be Standard */) 333 333.94 T
(DiskHandle) 153 323.94 T
(destDisk\051;) 261 323.94 T
(/* Path constants, or null to indi-) 333 323.94 T
( * cate current working directory */) 315 313.94 T
0 10 Q
-0.08 (This routine makes a copy of a \336le. The source and destination are speci\336ed) 180 296.28 P
(with path strings. Each string speci\336es a path relative to the location) 180 284.78 T
-0.65 (speci\336ed by the corresponding disk handle. If the handle is a disk handle, the) 180 273.28 P
(path is relative to that disk\325) 180 261.78 T
(s root. If the disk handle is a standard path) 308 261.78 T
-0.37 (constant, the path string is relative to that standard path. If the disk handle) 180 250.28 P
(is null, the path is relative to the current working directory) 180 238.78 T
(.) 452.98 238.78 T
(If) 180 220.28 T
7 F
(FileCopy\050\051) 190.18 220.28 T
0 F
( is successful, it returns zero. Otherwise, it returns one of the) 244.81 220.28 T
(following error codes:) 180 208.78 T
0 9 Q
(ERROR_FILE_NOT_FOUND) 180 190.28 T
0 10 Q
(No such source \336le exists in the speci\336ed directory) 243 179.28 T
(.) 474.66 179.28 T
0 9 Q
(ERROR_P) 180 161.28 T
(A) 222.83 161.28 T
(TH_NOT_FOUND) 228.83 161.28 T
0 10 Q
(An invalid source or destination path string was passed.) 243 150.28 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "125" 21
%%Page: "126" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(126) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(ERROR_ACCESS_DENIED) 180 641.33 T
0 10 Q
(Y) 243 630.33 T
(ou do not have permission to delete the existing copy of the) 248.93 630.33 T
(destination \336le, or the destination disk or directory is not) 243 619.33 T
(writable.) 243 608.33 T
0 9 Q
(ERROR_FILE_IN_USE) 180 590.33 T
0 10 Q
(Some geode has the existing destination \336le open.) 243 579.33 T
0 9 Q
(ERROR_SHORT_READ_WRITE) 180 561.33 T
0 10 Q
(There was not enough room on the destination disk.) 243 550.33 T
2 F
(See Also:) 99 532.33 T
0 F
(FileMove\050\051) 180 532.33 T
2 F
(Include:) 99 512.33 T
0 F
(\336le.h) 180 512.33 T
81 495.99 531 501 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 495.99 531 501 R
7 X
0 0 0 1 0 0 0 K
V
50 499.99 609.01 499.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 487.99 T
2 F
(FileCreate\050\051) 99 487.99 T
3 10 Q
(FileHandle) 99 473.33 T
4 F
(FileCreate\050 /* sets thread\325s error value */) 165 473.33 T
4 9 Q
(const char) 153 462.99 T
(* name,) 261 462.99 T
(/* relative to working directory */) 333 462.99 T
(FileCreateFlags) 153 452.99 T
(flags,) 261 452.99 T
(/* see below */) 333 452.99 T
(FileAttrs) 153 442.99 T
(attributes\051;) 261 442.99 T
(/* FileAttrs of new file */) 333 442.99 T
0 10 Q
-0.48 (This routine creates a byte \336le. The \336le may be a) 180 425.33 P
0 9 Q
-0.43 (DOS) 402.93 425.33 P
0 10 Q
-0.48 ( \336le or a) 422.6 425.33 P
0 9 Q
-0.43 (GEOS) 461.07 425.33 P
0 10 Q
-0.48 ( byte \336le.) 487.24 425.33 P
(If the \336le is successfully opened,) 180 413.83 T
7 F
(FileCreate\050\051) 331.48 413.83 T
0 F
( will return the \336le\325) 394.26 413.83 T
(s handle;) 483.53 413.83 T
(otherwise, it will return a null handle and set the thread\325) 180 402.33 T
(s error value.) 443.93 402.33 T
-0.12 (The second parameter is a word-length) 180 383.83 P
7 F
-0.13 (FileCreateFlags) 362.42 383.83 P
0 F
-0.12 ( record. The lower) 445.38 383.83 P
(byte of this \336eld is a) 180 372.33 T
7 F
(FileAccessFlags) 275.95 372.33 T
0 F
( record. This speci\336es the \336le\325) 358.54 372.33 T
(s) 494.47 372.33 T
-0.03 (permissions and exclusions. Note that you must request write or read/write) 180 360.83 P
(permission when you create a \336le. The upper byte speci\336es how the \336le) 180 349.33 T
(should be created. It contains the following possible values:) 180 337.83 T
0 9 Q
(FILE_CREA) 180 319.33 T
(TE_TRUNCA) 232.16 319.33 T
(TE) 288.84 319.33 T
0 10 Q
(If a \336le with the given name exists, it should be opened and) 243 308.33 T
(truncated; that is, all data should be deleted.) 243 297.33 T
0 9 Q
(FILE_CREA) 180 279.33 T
(TE_NO_TRUNCA) 232.16 279.33 T
(TE) 307.67 279.33 T
0 10 Q
(If the \336le exists, it should be opened without being truncated.) 243 268.33 T
0 9 Q
(FILE_CREA) 180 250.33 T
(TE_ONL) 232.16 250.33 T
(Y) 268.68 250.33 T
0 10 Q
(If the \336le exists, the routine should fail and set the thread\325) 243 239.33 T
(s) 512.66 239.33 T
(error value to) 243 228.33 T
0 9 Q
(ERROR_FILE_EXISTS) 308.74 228.33 T
0 10 Q
(.) 406.74 228.33 T
0 9 Q
(FCF_NA) 180 210.33 T
(TIVE) 216.34 210.33 T
0 10 Q
(This \337ag is combined with one of the above \337ags if the \336le) 243 199.33 T
-0.26 (should be created in the device\325) 243 188.33 P
-0.26 (s native format; e.g. if it should) 385.59 188.33 P
-0.06 (be a) 243 177.33 P
0 9 Q
-0.06 (DOS) 264.55 177.33 P
0 10 Q
-0.06 ( \336le instead of a) 284.23 177.33 P
0 9 Q
-0.06 (GEOS) 360.05 177.33 P
0 10 Q
-0.06 ( \336le. The name passed must be) 386.22 177.33 P
-0.51 (an acceptable native \336le name. If a) 243 166.33 P
0 9 Q
-0.46 (GEOS) 403.5 166.33 P
0 10 Q
-0.51 ( \336le with the speci\336ed) 429.68 166.33 P
(name already exists,) 243 155.33 T
7 F
(FileCreate\050\051) 341.17 155.33 T
0 F
( will fail with error) 403.95 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "126" 22
%%Page: "127" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(127) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(condition) 243 641.33 T
0 9 Q
(ERROR_FILE_FORMA) 288.37 641.33 T
(T_MISMA) 386.53 641.33 T
(TCH) 429.36 641.33 T
0 10 Q
(. Similarly) 449.36 641.33 T
(, if the) 496.97 641.33 T
(\337ag isn\325) 243 630.33 T
(t set and a non-) 278.57 630.33 T
0 9 Q
(GEOS) 350.62 630.33 T
0 10 Q
( \336le with this name exists,) 376.79 630.33 T
7 F
(FileCreate\050\051) 243 619.33 T
0 F
( will fail and return this error) 305.78 619.33 T
(.) 442.64 619.33 T
-0.03 (The third parameter) 180 601.33 P
-0.03 (,) 274.4 601.33 P
6 F
-0.03 (attributes) 279.93 601.33 P
0 F
-0.03 (, describes the) 324.55 601.33 P
7 F
-0.03 (FileAttrs) 393.19 601.33 P
0 F
-0.03 ( record to be set for) 439.67 601.33 P
(the new \336le.) 180 589.83 T
(If successful,) 180 571.33 T
7 F
(FileCreate\050\051) 242.21 571.33 T
0 F
( returns the \336le\325) 304.99 571.33 T
(s handle. If it is unsuccessful, it) 378.88 571.33 T
(returns a null handle and sets the thread\325) 180 559.83 T
(s error value. The following error) 372.8 559.83 T
(values are commonly returned:) 180 548.33 T
0 9 Q
(ERROR_P) 180 529.83 T
(A) 222.83 529.83 T
(TH_NOT_FOUND) 228.83 529.83 T
0 10 Q
-0.02 (A relative or absolute path was passed, and the path included) 243 518.83 P
(a directory which did not exist.) 243 507.83 T
0 9 Q
(ERROR_TOO_MANY_OPEN_FILES) 180 489.83 T
0 10 Q
(There is a limit to how many \336les may be open at once. If this) 243 478.83 T
(limit is reached,) 243 467.83 T
7 F
(FileCreate\050\051) 320.42 467.83 T
0 F
( will fail until a \336le is closed.) 383.2 467.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 449.83 T
0 10 Q
(Either the caller requested access which could not be granted) 243 438.83 T
-0.39 (\050e.g. it requested write access when another geode had already) 243 427.83 P
-0.19 (opened the \336le with) 243 416.83 P
0 9 Q
-0.18 (FILE_DENY_W) 336.12 416.83 P
0 10 Q
-0.19 (\051, or the caller tried to deny) 403.29 416.83 P
(access when that access had already been granted to another) 243 405.83 T
(geode \050e.g. it tried to open the \336le with) 243 394.83 T
0 9 Q
(FILE_DENY_W) 423.58 394.83 T
0 10 Q
( when) 490.75 394.83 T
(another geode already had it open for write-access\051.) 243 383.83 T
0 9 Q
(ERROR_WRITE_PROTECTED) 180 365.83 T
0 10 Q
(The caller requested write or read-write access to a \336le in a) 243 354.83 T
(write-protected volume.) 243 343.83 T
0 9 Q
(ERROR_FILE_EXISTS) 180 325.83 T
0 10 Q
-0.74 (Returned if) 243 314.83 P
7 F
-0.76 (FileCreate\050\051) 297.07 314.83 P
0 F
-0.74 ( was called with) 359.85 314.83 P
0 9 Q
-0.67 (FILE_CREA) 433.95 314.83 P
-0.67 (TE_ONL) 486.11 314.83 P
-0.67 (Y) 522.62 314.83 P
0 10 Q
(and a \336le with the speci\336ed name already exists.) 243 303.83 T
0 9 Q
(ERROR_FILE_FORMA) 180 285.83 T
(T_MISMA) 278.16 285.83 T
(TCH) 320.99 285.83 T
0 10 Q
(Returned if) 243 274.83 T
7 F
(FileCreate\050\051) 298.55 274.83 T
0 F
( was called with) 361.33 274.83 T
0 9 Q
(FILE_CREA) 243 263.83 T
(TE_TRUNCA) 295.16 263.83 T
(TE) 351.84 263.83 T
0 10 Q
( or) 364.34 263.83 T
0 9 Q
(FILE_CREA) 379.34 263.83 T
(TE_NO_TRUNCA) 431.5 263.83 T
(TE) 507.01 263.83 T
0 10 Q
(and a \336le exists in a different format than desired; i.e. you) 243 252.83 T
(passed) 243 241.83 T
0 9 Q
(FCF_NA) 277.08 241.83 T
(TIVE) 313.42 241.83 T
0 10 Q
( and the \336le already exists in the) 336.08 241.83 T
0 9 Q
(GEOS) 490.74 241.83 T
0 10 Q
(format, or vice versa.) 243 230.83 T
2 F
(Examples:) 99 212.83 T
0 F
(An example of usage is shown below) 180 212.83 T
(.) 346.7 212.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "127" 23
%%Page: "128" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(128) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(6-) 147.13 629.31 T
(2 Example of FileCreate\050\051 usage) 156.02 629.31 T
4 9 Q
(/* Here we create a DOS file in the current working directory. If the file already) 81 614.98 T
( * exists, we open the existing file and truncate it.) 81 604.98 T
( */) 81 594.98 T
(FileHandle) 125 577.98 T
(newFile;) 212.5 577.98 T
(newFile =) 125 560.98 T
(FileCreate\050"NEWFILE.TXT",) 212.5 560.98 T
(\050 \050FILE_CREATE_TRUNCATE | FCF_NATIVE\051) 301 550.98 T
( | \050FILE_ACCESS_RW | FILE_DENY_RW\051\051,) 301 540.98 T
(0\051; /* set no attribute bits */) 301 530.98 T
81 507.95 531 519.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 507.95 531 519.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 515.2 617.5 518.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
2 10 Q
0 X
0 0 0 1 0 0 0 K
(See Also:) 99 490.29 T
0 F
(FileCreateT) 180 490.29 T
(empFile\050\051, FileOpen\050\051) 234.83 490.29 T
2 F
(Include:) 99 470.29 T
0 F
(\336le.h) 180 470.29 T
81 453.94 531 458.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 453.94 531 458.95 R
7 X
0 0 0 1 0 0 0 K
V
50 457.94 609.01 457.94 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 445.94 T
2 F
(FileCreateDir\050\051) 99 445.94 T
3 10 Q
(word) 99 431.28 T
4 F
(FileCreateDir\050 /* Returns error & sets thread\325s error value */) 153 431.28 T
4 9 Q
(const char * name\051;) 153 420.94 T
(/* Relative path of new directory */) 297 420.94 T
0 10 Q
-0.74 (This routine creates a new directory) 180 403.28 P
-0.74 (. The parameter is a path string; the path) 342.24 403.28 P
-0.04 (is relative to the current directory) 180 391.78 P
-0.04 (. The last element of the path string must) 335.74 391.78 P
(be the directory to create.) 180 380.28 T
-0.64 (If) 180 361.78 P
7 F
-0.66 (FileCreateDir\050\051) 189.54 361.78 P
0 F
-0.64 ( is successful, it returns zero and clears the thread\325) 269.54 361.78 P
-0.64 (s error) 498.77 361.78 P
(value. Otherwise, it returns an error code and sets the thread\325) 180 350.28 T
(s error value.) 466.13 350.28 T
(The following errors are returned:) 180 338.78 T
0 9 Q
(ERROR_P) 180 320.28 T
(A) 222.83 320.28 T
(TH_NOT_FOUND) 228.83 320.28 T
0 10 Q
-0.43 (The path string was in some way invalid; for example, it might) 243 309.28 P
-0.94 (have instructed) 243 298.28 P
7 F
-0.98 (FileCreateDir\050\051) 316.11 298.28 P
0 F
-0.94 ( to create the directory within) 396.11 298.28 P
(a directory which does not exist.) 243 287.28 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 269.28 T
0 10 Q
(The thread is not able to create directories in the speci\336ed) 243 258.28 T
(location, or a directory with the speci\336ed name already exists.) 243 247.28 T
0 9 Q
(ERROR_WRITE_PROTECTED) 180 229.28 T
0 10 Q
(The volume is write-protected.) 243 218.28 T
2 F
(See Also:) 99 200.28 T
0 F
(FileDeleteDir\050\051) 180 200.28 T
2 F
(Include:) 99 180.28 T
0 F
(\336le.h) 180 180.28 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "128" 24
%%Page: "129" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(129) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileCreateT) 99 634.99 T
(empFile\050\051) 163.46 634.99 T
3 10 Q
(FileHandle) 99 621.33 T
4 F
( FileCreateTempFile\050 /* Sets thread\325s error value */) 159 621.33 T
4 9 Q
(char) 153 610.99 T
(* dir,) 261 610.99 T
(/* directory, relative to working dir.;) 297 610.99 T
( * file name replaces 14 trailing null) 297 600.99 T
( * characters upon return */) 297 590.99 T
(FileAttrs) 153 580.99 T
(attributes\051;) 261 580.99 T
0 10 Q
-0.81 (This routine creates and opens a temporary \336le in the directory speci\336ed. The) 180 563.33 P
-0.6 (routine automatically selects a name for the temporary \336le. No creation \337ags) 180 551.83 P
-0.65 (are needed, since the \336le will de\336nitely be created anew and will be used only) 180 540.33 P
-0.75 (by this geode. The directory string must end with fourteen null bytes \050enough) 180 528.83 P
(to be replaced by the new \336le\325) 180 517.33 T
(s name\051.) 315.95 517.33 T
-0.54 (If) 180 498.83 P
7 F
-0.55 (FileCreateT) 189.64 498.83 P
-0.55 (empFile\050\051) 250.94 498.83 P
0 F
-0.54 ( is successful, it returns the \336le\325) 300.94 498.83 P
-0.54 (s handle as well as) 444.02 498.83 P
-0.29 (the string passed in) 180 487.33 P
6 F
-0.29 (dir) 273.12 487.33 P
0 F
-0.29 (, with the trailing null characters replaced by the \336le) 286.26 487.33 P
-0.74 (name. If it is unsuccessful, it returns a null handle and sets the thread\325) 180 475.83 P
-0.74 (s error) 498.96 475.83 P
(value to a member of the) 180 464.33 T
7 F
(FileError) 297.43 464.33 T
0 F
( enumerated type.) 346.88 464.33 T
2 F
(T) 99 445.83 T
(ips and T) 104.93 445.83 T
(ricks:) 148.28 445.83 T
0 F
(T) 180 445.83 T
(emporary \336les are usually created in a subdirectory of) 185.75 445.83 T
0 9 Q
(SP_PRIV) 438.17 445.83 T
(A) 476.01 445.83 T
(TE_DA) 482.01 445.83 T
(T) 512.02 445.83 T
(A) 517.52 445.83 T
0 10 Q
(.) 524.02 445.83 T
2 F
(See Also:) 99 425.83 T
0 F
(FileCreate\050\051) 180 425.83 T
2 F
(Include:) 99 405.83 T
0 F
(\336le.h) 180 405.83 T
81 389.48 531 394.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 389.48 531 394.49 R
7 X
0 0 0 1 0 0 0 K
V
50 393.48 609.01 393.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 381.48 T
2 F
(FileDelete\050\051) 99 381.48 T
3 10 Q
(word) 99 366.82 T
4 F
(FileDelete\050 /* returns error */) 153 366.82 T
4 9 Q
(const char * name\051;) 153 356.48 T
(/* path relative to working directory */) 279 356.48 T
0 10 Q
(This routine deletes a \336le. If it is successful, it returns zero; otherwise, it) 180 338.82 T
(returns a) 180 327.32 T
7 F
(FileError) 225.74 327.32 T
0 F
(. Common errors include:) 274.45 327.32 T
0 9 Q
(ERROR_FILE_NOT_FOUND) 180 308.82 T
0 10 Q
(No such \336le exists in the speci\336ed directory) 243 297.82 T
(.) 442.26 297.82 T
0 9 Q
(ERROR_WRITE_PROTECTED) 180 279.82 T
0 10 Q
(The volume is write-protected.) 243 268.82 T
0 9 Q
(ERROR_P) 180 250.82 T
(A) 222.83 250.82 T
(TH_NOT_FOUND) 228.83 250.82 T
0 10 Q
(An invalid path string was passed.) 243 239.82 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 221.82 T
0 10 Q
(Y) 243 210.82 T
(ou do not have permission to delete that \336le.) 248.93 210.82 T
0 9 Q
(ERROR_FILE_IN_USE) 180 192.82 T
0 10 Q
(Some geode has that \336le open.) 243 181.82 T
2 F
(Include:) 99 163.82 T
0 F
(\336le.h) 180 163.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "129" 25
%%Page: "130" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(130) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileDeleteDir\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileDeleteDir\050 /* Returns error & sets thread\325s error value */) 153 620.33 T
4 9 Q
(const char * name\051;) 153 609.99 T
(/* Relative path of directory to delete */) 279 609.99 T
0 10 Q
-0.58 (This argument deletes an existing directory) 180 592.33 P
-0.58 (. The parameter is a string which) 378.02 592.33 P
(speci\336es the directory\325) 180 580.83 T
(s position relative to the current working directory) 282.4 580.83 T
(.) 515.18 580.83 T
(The last element of the path string must be the name of the directory to) 180 569.33 T
(delete.) 180 557.83 T
-0.52 (If) 180 539.33 P
7 F
-0.53 (FileDeleteDir\050\051) 189.66 539.33 P
0 F
-0.52 ( is successful, it returns zero and clears the thread\325) 268.17 539.33 P
-0.52 (s error) 498.52 539.33 P
(value. Otherwise, it returns an error code and sets the thread\325) 180 527.83 T
(s error value.) 466.13 527.83 T
(The following errors are returned:) 180 516.33 T
0 9 Q
(ERROR_P) 180 497.83 T
(A) 222.83 497.83 T
(TH_NOT_FOUND) 228.83 497.83 T
0 10 Q
(The directory speci\336ed could not be found or does not exist.) 243 486.83 T
0 9 Q
(ERROR_IS_CURRENT_DIRECTOR) 180 468.83 T
(Y) 331.82 468.83 T
0 10 Q
-0.54 (This directory is some thread\325) 243 457.83 P
-0.54 (s current directory) 377.71 457.83 P
-0.54 (, or else it is on) 461.61 457.83 P
(some thread\325) 243 446.83 T
(s directory stack.) 301.71 446.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 428.83 T
0 10 Q
(The thread does not have permission to delete the directory) 243 417.83 T
(.) 516.72 417.83 T
0 9 Q
(ERROR_WRITE_PROTECTED) 180 399.83 T
0 10 Q
(The volume is write-protected.) 243 388.83 T
0 9 Q
(ERROR_DIRECTOR) 180 370.83 T
(Y_NOT_EMPTY) 266.82 370.83 T
0 10 Q
-0.6 (The directory speci\336ed is not empty) 243 359.83 P
-0.6 (. A directory must be empty) 403.5 359.83 P
(before it can be deleted.) 243 348.83 T
2 F
(See Also:) 99 330.83 T
0 F
(FileCreateDir\050\051) 180 330.83 T
2 F
(Include:) 99 310.83 T
0 F
(\336le.h) 180 310.83 T
81 294.48 531 299.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 294.48 531 299.49 R
7 X
0 0 0 1 0 0 0 K
V
50 298.48 609.01 298.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 286.48 T
2 F
(FileDuplicateHandle\050\051) 99 286.48 T
3 10 Q
(FileHandle) 99 271.82 T
4 F
(FileDuplicateHandle\050 /* Sets thread\325s error value */) 165 271.82 T
4 9 Q
(FileHandle fh\051;) 153 261.48 T
0 10 Q
(This routine duplicates the handle of an open \336le and returns the duplicate) 180 243.82 T
(handle. The duplicate handle has the same read/write position as the) 180 232.32 T
-0.09 (original. Both handles will have to be closed for the \336le to be closed. If there) 180 220.82 P
(is an error) 180 209.32 T
(,) 227.59 209.32 T
7 F
(FileDuplicateHandle\050\051) 233.15 209.32 T
0 F
( returns a null handle and sets the) 349.44 209.32 T
(thread\325) 180 197.82 T
(s error value.) 212.41 197.82 T
2 F
(Include:) 99 179.32 T
0 F
(\336le.h) 180 179.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "130" 26
%%Page: "131" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(131) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileEnum\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileEnum\050 /* returns number of files returned */) 153 620.33 T
4 9 Q
(FileEnumParams) 153 609.99 T
(* params,) 261 609.99 T
(/* described below */) 315 609.99 T
(MemHandle) 153 599.99 T
(* bufCreated,) 261 599.99 T
(/* FileEnum will allocate a return-) 331.2 599.99 T
( * buffer block & write its handle) 315 589.99 T
( * here */) 315 579.99 T
(word) 153 569.99 T
(* numNoFit\051;) 261 569.99 T
(/* Number of files not handled is) 333 569.99 T
( * written here */) 315 559.99 T
0 10 Q
(This routine is used to examine all the \336les in a directory) 180 542.33 T
(. The routine can) 443 542.33 T
-0.24 (\336lter the \336les by whether they have certain extended attributes. It creates a) 180 530.83 P
-0.08 (buffer and writes information about the \336les in this buffer) 180 519.33 P
-0.08 (. This routine can) 447.06 519.33 P
-0.69 (be called in many different ways; for full details, see the section \322FileEnum\050\051\323) 180 507.83 P
(on page 617 of the Concepts book.) 180 496.33 T
2 F
(Structures:) 99 477.83 T
7 F
-0.53 (FileEnum\050\051) 180 477.83 P
0 F
-0.51 ( uses several structures and enumerated types. They are shown) 238.88 477.83 P
(below; the detailed description of the structures follows.) 180 466.83 T
4 9 Q
(/* Types, values, and structures passed) 189 456.49 T
( * to the FileEnum\050\051 routine: */) 189 446.49 T
(typedef enum /* word */ {) 153 436.49 T
(FESRT_COUNT_ONLY,) 189 426.49 T
(FESRT_DOS_INFO,) 189 416.49 T
(FESRT_NAME,) 189 406.49 T
(FESRT_NAME_AND_ATTR) 189 396.49 T
(} FileEnumStandardReturnType;) 153 386.49 T
(typedef enum /* word */ {) 153 376.49 T
(FESC_WILDCARD) 189 366.49 T
(} FileEnumStandardCallback;) 153 356.49 T
(/* Types, values, and structures returned) 189 346.49 T
( * by the FileEnum\050\051 routine: */) 189 336.49 T
(typedef struct {) 153 326.49 T
(FileAttrs) 189 316.49 T
(DFIS_attributes;) 261 316.49 T
(FileDateAndTime) 189 306.49 T
(DFIS_modTimeDate;) 275.4 306.49 T
(dword) 189 296.49 T
(DFIS_fileSize;) 261 296.49 T
(FileLongName) 189 286.49 T
(DFIS_name;) 261 286.49 T
(DirPathInfo) 189 276.49 T
(DFIS_pathInfo;) 261 276.49 T
(} FEDosInfo;) 153 266.49 T
(typedef struct _FileEnumCallbackData {) 153 256.49 T
(FileExtAttrDesc) 189 246.49 T
(FECD_attrs[1];) 275.4 246.49 T
(} FileEnumCallbackData;) 153 236.49 T
(typedef struct _FileEnumParams {) 153 226.49 T
(FileEnumSearchFlags) 189 216.49 T
(FEP_searchFlags;) 297 216.49 T
(FileExtAttrDesc *) 189 206.49 T
(FEP_returnAttrs;) 280.8 206.49 T
(word) 189 196.49 T
(FEP_returnSize;) 279 196.49 T
(FileExtAttrDesc *) 189 186.49 T
(FEP_matchAttrs;) 280.8 186.49 T
(word) 189 176.49 T
(FEP_bufSize;) 279 176.49 T
(word) 189 166.49 T
(FEP_skipCount;) 279 166.49 T
(word _pascal \050*FEP_callback\051) 189 156.49 T
(\050struct _FileEnumParams *params,) 345.6 156.49 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "131" 27
%%Page: "132" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(132) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
4 9 Q
0 X
( FileEnumCallbackData *fecd,) 315 642 T
( word frame\051;) 315 632 T
(FileExtAttrDesc *) 189 622 T
(FEP_callbackAttrs;) 280.8 622 T
(dword) 189 612 T
(FEP_cbData1;) 261 612 T
(dword) 189 602 T
(FEP_cbData2;) 261 602 T
(word) 189 592 T
(FEP_headerSize;) 261 592 T
(} FileEnumParams;) 153 582 T
6 10 Q
(Most of the information passed to) 180 564.33 T
7 F
(FileEnum\050\051) 335.71 564.33 T
0 F
( is contained in a) 394.59 564.33 T
7 F
-0.01 (FileEnumParameters) 180 552.83 P
0 F
-0.01 ( structure. The \336elds of the structure are as follows:) 291.66 552.83 P
6 9 Q
(FEP) 180 534.33 T
6 10 Q
(_searchFlags) 198.5 534.33 T
0 F
(This is a byte-length \337ag \336eld. The \337ags are of type) 243 523.33 T
7 F
-0.73 (FileEnumSearchFlags) 243 512.33 P
0 F
-0.7 ( \050described below\051. These \337ags specify) 358.18 512.33 P
(which \336les at the current location will be examined by) 243 501.33 T
7 F
(FileEnum\050\051) 243 490.33 T
0 F
(. They also specify such things as whether a) 301.88 490.33 T
(callback routine should be used.) 243 479.33 T
6 9 Q
(FEP) 180 461.33 T
6 10 Q
(_returnAttrs) 198.5 461.33 T
0 F
(This is a pointer to an array of) 243 450.33 T
7 F
(FileExtAttrDesc) 386.73 450.33 T
0 F
( structures.) 470.8 450.33 T
(The last structure should have its) 243 439.33 T
6 9 Q
(FEA) 402.09 439.33 T
6 10 Q
(_attr) 420.93 439.33 T
0 F
( \336eld set to) 443.15 439.33 T
0 9 Q
(FEA_END_OF_LIST) 243 428.33 T
0 10 Q
(. The array speci\336es what information will) 329.76 428.33 T
-0.02 (be returned by) 243 417.33 P
7 F
-0.02 (FileEnum\050\051) 313.5 417.33 P
0 F
-0.02 (. The) 372.38 417.33 P
7 F
-0.02 (FileExtAttrDesc) 398.46 417.33 P
0 F
-0.02 ( structure) 482.53 417.33 P
(is used in a slightly different way than usual. Every \336le will) 243 406.33 T
(have an entry in the return buffer; this entry will contain all) 243 395.33 T
(the extended attribute information requested. Each) 243 384.33 T
7 F
-0.74 (FileExtAttrDesc) 243 373.33 P
0 F
-0.72 ( structure will specify where in that entry its) 327.07 373.33 P
(information should be written. The) 243 362.33 T
6 9 Q
(FEAD) 407.65 362.33 T
6 10 Q
(_value) 433.49 362.33 T
0 F
( \336eld should) 463.3 362.33 T
(contain only an offset value; the extended attribute will be) 243 351.33 T
(written at that offset into the entry) 243 340.33 T
(. \050Y) 404.87 340.33 T
(ou can specify an offset) 419.69 340.33 T
(by casting an integer value to type) 243 329.33 T
7 F
(void *) 405.25 329.33 T
0 F
(.\051 The) 435.71 329.33 T
6 9 Q
(FEAD) 465.16 329.33 T
6 10 Q
(_size) 491 329.33 T
0 F
(value speci\336es how long the return value can be. Y) 243 318.33 T
(ou can also) 475.99 318.33 T
(request certain return values by setting) 243 307.33 T
6 9 Q
(FEP) 429.68 307.33 T
6 10 Q
(_returnAttrs) 448.18 307.33 T
0 F
( to) 505.2 307.33 T
(equal a member of the) 243 296.33 T
7 F
(FileEnumStandardReturnT) 348.95 296.33 T
(ype) 492.32 296.33 T
0 F
(\050again, by casting the) 243 285.33 T
7 F
(FileEnumStandardReturnT) 345.06 285.33 T
(ype) 488.43 285.33 T
0 F
(value to type) 243 274.33 T
7 F
(void *) 305.42 274.33 T
0 F
(\051. The) 335.88 274.33 T
7 F
(FileEnumStandardReturnT) 365.33 274.33 T
(ype) 508.7 274.33 T
0 F
(enumerated type is described later in this section.) 243 263.33 T
6 9 Q
(FEP) 180 245.33 T
6 10 Q
(_returnSize) 198.5 245.33 T
0 F
(This is the size of each entry in the returned buffer) 243 234.33 T
(. If a) 478 234.33 T
(standard return type or an array of) 243 223.33 T
7 F
(FileExtAttrDesc) 408.93 223.33 T
0 F
(structures was passed, each entry in the returned buffer will) 243 212.33 T
(contain all the extended attribute information requested for) 243 201.33 T
(that \336le.) 243 190.33 T
6 9 Q
(FEP) 180 172.33 T
6 10 Q
(_matchAttrs) 198.5 172.33 T
0 F
(This is a pointer to an array of) 243 161.33 T
7 F
(FileExtAttrDesc) 386.73 161.33 T
0 F
( structures.) 470.8 161.33 T
(The last structure should have its) 243 150.33 T
6 9 Q
(FEA) 402.09 150.33 T
6 10 Q
(_attr) 420.93 150.33 T
0 F
( \336eld set to) 443.15 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "132" 28
%%Page: "133" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(133) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(FEA_END_OF_LIST) 243 641.33 T
0 10 Q
(.) 329.76 641.33 T
7 F
(FileEnum\050\051) 335.32 641.33 T
0 F
( will automatically \336lter out) 394.2 641.33 T
(and ignore all \336les whose attributes do not match the ones) 243 630.33 T
(speci\336ed by this array) 243 619.33 T
(. For attributes that are word-sized) 344.12 619.33 T
-0.29 (records,) 243 608.33 P
6 9 Q
-0.26 (FEAD) 281.96 608.33 P
6 10 Q
-0.29 (_value.offset) 307.8 608.33 P
0 F
-0.29 ( holds the bits that must be set, and) 364.45 608.33 P
6 9 Q
(FEAD) 243 597.33 T
6 10 Q
(_value.segment) 268.84 597.33 T
0 F
( holds the bits that must be clear) 338.64 597.33 T
(. For) 490.34 597.33 T
(byte-sized \337ags,) 243 586.33 T
6 9 Q
(FEAD) 319.49 586.33 T
6 10 Q
(_value.offset.low) 345.33 586.33 T
0 F
( contains the \337ags that) 420.87 586.33 T
(must be set, and) 243 575.33 T
6 9 Q
(FEAD) 321.91 575.33 T
6 10 Q
(_value.offset.high) 347.75 575.33 T
0 F
( contains \337ags that) 428.1 575.33 T
-0.15 (must be clear) 243 564.33 P
-0.15 (. Byte- and word-sized non-\337ag values are stored) 304.2 564.33 P
-0.27 (in) 243 553.33 P
6 9 Q
-0.24 (FEAD) 254.77 553.33 P
6 10 Q
-0.27 (_value.offset) 280.61 553.33 P
0 F
-0.27 (. For all other values,) 337.26 553.33 P
6 9 Q
-0.24 (FEAD) 437.62 553.33 P
6 10 Q
-0.27 (_value) 463.46 553.33 P
0 F
-0.27 ( holds a) 493.27 553.33 P
-0.78 (pointer to the exact value to match, and) 243 542.33 P
6 9 Q
-0.7 (FEAD) 423.63 542.33 P
6 10 Q
-0.78 (_size) 449.46 542.33 P
0 F
-0.78 ( speci\336es the) 471.3 542.33 P
(length of that value \050in bytes\051. If you do not want to \336lter out) 243 531.33 T
-0.57 (any \336les in the working directory) 243 520.33 P
-0.57 (, or if you will use the callback) 392.38 520.33 P
(routine to \336lter the \336les, pass a null pointer in this \336eld.) 243 509.33 T
6 9 Q
(FEP) 180 491.33 T
6 10 Q
(_bufsize) 198.5 491.33 T
0 F
(This speci\336es the maximum number of entries to be returned) 243 480.33 T
-0.59 (in the buffer) 243 469.33 P
-0.59 (. If you do not want to set a limit, pass the constant) 298.66 469.33 P
0 9 Q
(FEP_BUFSIZE_UNLIMITED) 243 458.33 T
0 10 Q
(. The buffer will be grown as) 367.67 458.33 T
(necessary) 243 447.33 T
(.) 287.07 447.33 T
6 9 Q
(FEP_) 180 429.33 T
6 10 Q
(skipCount) 203 429.33 T
0 F
-0.59 (This contains the number of matching \336les to be ignored before) 243 418.33 P
(the \336rst one is processed. It is often used in conjunction with) 243 407.33 T
6 9 Q
(FEP) 243 396.33 T
6 10 Q
(_bufSize) 261.5 396.33 T
0 F
( to examine many \336les a few at a time. For) 300.57 396.33 T
-0.26 (example, if you only wanted to examine ten \336les at a time, you) 243 385.33 P
(would set) 243 374.33 T
6 9 Q
(FEP) 289.86 374.33 T
6 10 Q
(_bufSize) 308.36 374.33 T
0 F
( to ten and) 347.43 374.33 T
6 9 Q
(FEP) 399.85 374.33 T
6 10 Q
(_skipCount) 418.36 374.33 T
0 F
( to zero.) 470.39 374.33 T
7 F
-0.32 (FileEnum\050\051) 243 363.33 P
0 F
-0.31 (would return the data for the \336rst ten \336les which) 304.43 363.33 P
(match the search criteria. After processing the returned data,) 243 352.33 T
(if there were any \336les left over) 243 341.33 T
(, you could call) 383.19 341.33 T
7 F
(FileEnum\050\051) 454.31 341.33 T
0 F
(again, this time with) 243 330.33 T
6 9 Q
(FEP) 342.29 330.33 T
6 10 Q
(_skipCount) 360.79 330.33 T
0 F
( set to ten;) 412.82 330.33 T
7 F
(FileEnum\050\051) 464.13 330.33 T
0 F
(would handle the next ten matching \336les and return the data) 243 319.33 T
(about them. In this way you could walk through all the) 243 308.33 T
(matching \336les in the directory) 243 297.33 T
(. Note that if the) 381.15 297.33 T
7 F
(FileEnumSearchFlags) 243 286.33 T
0 F
( bit) 358.18 286.33 T
0 9 Q
( FESF_REAL_SKIP) 373.56 286.33 T
0 10 Q
( is set \050in) 457.07 286.33 T
6 9 Q
-0.6 (FEP) 243 275.33 P
6 10 Q
-0.67 (_searchFlags) 261.5 275.33 P
0 9 Q
-0.6 (\051) 321.66 275.33 P
0 10 Q
-0.67 (, the \336rst \336les in the directory will be skipped) 324.66 275.33 P
6 F
-0.11 (before) 243 264.33 P
0 F
-0.11 ( they are tested to see if they match. This is faster) 270.21 264.33 P
-0.11 (, since) 499.56 264.33 P
-0.03 (the match condition won\325) 243 253.33 P
-0.03 (t have to be checked for the \336rst \336les) 358.48 253.33 P
(in the directory) 243 242.33 T
(.) 313.18 242.33 T
6 9 Q
(FEP) 180 224.33 T
6 10 Q
(_callback) 198.5 224.33 T
0 F
-0.73 (This holds a pointer to a Boolean callback routine. The callback) 243 213.33 P
-0.77 (routine can check to see if the \336le matches some other arbitrary) 243 202.33 P
-0.79 (criteria. The callback routine is called for any \336les which match) 243 191.33 P
-0.65 (all the above criteria. It should be declared _pascal. It is passed) 243 180.33 P
(three arguments: a pointer to the) 243 169.33 T
7 F
(FileEnumParams) 399.68 169.33 T
0 F
(structure, a pointer to the current stack frame \050which is used) 243 158.33 T
-0.39 (by some assembly callback routines\051, and a pointer to an array) 243 147.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "133" 29
%%Page: "134" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(134) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(of) 243 641.33 T
7 F
(FileExtAttrDesc) 254.11 641.33 T
0 F
( structures. These structures are all the) 338.18 641.33 T
-0.8 (attributes required either for return, matching, or callback \050see) 243 630.33 P
6 9 Q
-0.47 (FEP) 243 619.33 P
6 10 Q
-0.52 (_callbackAttrs) 261.5 619.33 P
0 F
-0.52 ( below\051, with the information for the current) 327.6 619.33 P
(\336le \336lled in; you can search through them directly for the) 243 608.33 T
-0.62 (information you want, or you can call) 243 597.33 P
7 F
-0.64 (FileEnumLocateAttr\050\051) 413.66 597.33 P
0 F
(to search through this array) 243 586.33 T
(. If the \336le should be accepted by) 372.26 586.33 T
7 F
(FileEnum\050\051) 243 575.33 T
0 F
(, the callback should return) 301.88 575.33 T
6 F
(true) 432.08 575.33 T
0 F
(; otherwise it) 450.59 575.33 T
(should return) 243 564.33 T
6 F
(false) 309.29 564.33 T
0 F
(. Y) 330.57 564.33 T
(ou can also instruct) 342.06 564.33 T
7 F
(FileEnum\050\051) 435.4 564.33 T
0 F
( to use) 494.28 564.33 T
(one of the standard callback routines by passing a member of) 243 553.33 T
(the) 243 542.33 T
7 F
(FileEnumStandardCallback) 260.78 542.33 T
0 F
( enumerated type. In this) 406.16 542.33 T
(case,) 243 531.33 T
6 9 Q
(FEP) 268.19 531.33 T
6 10 Q
(_callbackAttrs) 286.69 531.33 T
0 F
( is ignored;) 352.79 531.33 T
7 F
(FileEnum\050\051) 406.5 531.33 T
0 F
( will) 465.38 531.33 T
-0.51 (automatically pass the appropriate information to the callback) 243 520.33 P
(routine. \050Note that if the) 243 509.33 T
0 9 Q
(FESF_CALLBACK) 359.68 509.33 T
0 10 Q
( bit of the) 439.85 509.33 T
6 9 Q
(FEP_) 243 498.33 T
6 10 Q
(searchFlags) 266 498.33 T
0 F
( \336eld is not set, the) 321.16 498.33 T
6 9 Q
(FEP) 411.92 498.33 T
6 10 Q
(_callback) 430.43 498.33 T
0 F
( \336eld is) 473.57 498.33 T
(ignored.\051) 243 487.33 T
6 9 Q
(FEP) 180 469.33 T
6 10 Q
(_callbackAttrs) 198.5 469.33 T
0 F
(This is a pointer to an array of) 243 458.33 T
7 F
(FileExtAttrDesc) 386.73 458.33 T
0 F
( structures.) 470.8 458.33 T
(The last structure should have its) 243 447.33 T
6 9 Q
(FEA) 402.09 447.33 T
6 10 Q
(_attr) 420.93 447.33 T
0 F
( \336eld set to) 443.15 447.33 T
0 9 Q
(FEA_END_OF_LIST) 243 436.33 T
0 10 Q
(. The array will be \336lled in with the) 329.76 436.33 T
(appropriate information for each \336le before the callback) 243 425.33 T
(routine is called. Note that if the) 243 414.33 T
0 9 Q
(FESF_CALLBACK) 396.73 414.33 T
0 10 Q
( bit of the) 476.9 414.33 T
6 9 Q
-0.66 (FEP_) 243 403.33 P
6 10 Q
-0.74 (searchFlags) 266 403.33 P
0 F
-0.74 (is not set, the) 323.21 403.33 P
6 9 Q
-0.66 (FEP) 385.46 403.33 P
6 10 Q
-0.74 (_callbackAttrs) 403.96 403.33 P
0 F
-0.74 (is ignored. If) 472.1 403.33 P
(you do not need any attributes passed to the callback routine,) 243 392.33 T
(set this \336eld to be a null pointer) 243 381.33 T
(.) 389.88 381.33 T
6 9 Q
(FEP_) 180 363.33 T
6 10 Q
(cbData1) 203 363.33 T
0 F
(,) 241.34 363.33 T
6 9 Q
(FEP_) 246.9 363.33 T
6 10 Q
(cbData2) 269.91 363.33 T
0 F
(These are dword-length \336elds. Their contents are ignored by) 243 352.33 T
7 F
-0.42 (FileEnum\050\051) 243 341.33 P
0 F
-0.41 (; they are used to pass information to the callback) 301.88 341.33 P
-0.46 (routine. If you do not call a standard callback routine, you may) 243 330.33 P
(use these \336elds any way you wish.) 243 319.33 T
6 9 Q
(FEP_) 180 301.33 T
6 10 Q
(headerSize) 203 301.33 T
0 F
-0.6 (If the \337ag) 243 290.33 P
0 9 Q
-0.54 (FESF_LEA) 288.98 290.33 P
-0.54 (VE_HEADER) 335.66 290.33 P
0 10 Q
-0.6 ( is set,) 393.64 290.33 P
7 F
-0.62 (FileEnum\050\051) 424.27 290.33 P
0 F
-0.6 ( will leave) 483.15 290.33 P
(an empty header space at the beginning of the return buffer) 243 279.33 T
(.) 519.31 279.33 T
(The size of the header is speci\336ed by this \336eld. If) 243 268.33 T
0 9 Q
(FESF_LEA) 243 257.33 T
(VE_HEADER) 289.67 257.33 T
0 10 Q
( is clear) 347.66 257.33 T
(, this \336eld is ignored.) 382.85 257.33 T
(The \336rst \336eld of the) 180 239.33 T
7 F
(FileEnumParams) 274.08 239.33 T
0 F
( structure,) 364.81 239.33 T
6 9 Q
(FEP) 416.1 239.33 T
6 10 Q
(_searchFlags) 434.6 239.33 T
0 F
(, is a) 494.76 239.33 T
-0.25 (word-length record containing) 180 227.83 P
7 F
-0.26 (FileEnumSearchFlags) 321.45 227.83 P
0 F
-0.25 (. The following \337ags) 436.63 227.83 P
(are available:) 180 216.33 T
0 9 Q
(FESF_DIRS) 180 197.83 T
0 10 Q
(Directories should be examined by) 243 197.83 T
7 F
(FileEnum\050\051) 404.87 197.83 T
0 F
(.) 463.75 197.83 T
0 9 Q
(FESF_NON_GEOS) 180 179.83 T
0 10 Q
(Non-) 243 168.83 T
0 9 Q
(GEOS) 265.59 168.83 T
0 10 Q
( \336les should be examined by) 291.76 168.83 T
7 F
(FileEnum\050\051) 424.38 168.83 T
0 F
(.) 483.26 168.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "134" 30
%%Page: "135" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(135) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(FESF_GEOS_EXECS) 180 641.33 T
(GEOS) 243 630.33 T
0 10 Q
( executable \336les should be examined by) 269.17 630.33 T
7 F
(FileEnum\050\051) 453.65 630.33 T
0 F
(.) 512.53 630.33 T
0 9 Q
(FESF_GEOS_NON_EXECS) 180 612.33 T
(GEOS) 243 601.33 T
0 10 Q
( non-executable \336les \050e.g.,) 269.17 601.33 T
0 9 Q
(VM) 390.85 601.33 T
0 10 Q
( \336les\051 should be examined) 405.85 601.33 T
(by) 243 590.33 T
7 F
(FileEnum\050\051) 256.71 590.33 T
0 F
(.) 315.59 590.33 T
0 9 Q
(FESF_REAL_SKIP) 180 572.33 T
0 10 Q
(If a skip count of) 243 561.33 T
6 F
(n) 323.19 561.33 T
0 F
( is speci\336ed, the \336rst) 329.3 561.33 T
6 F
(n) 427.64 561.33 T
0 F
( \336les will be skipped) 433.75 561.33 T
(regardless of whether they matched the attributes passed. In) 243 550.33 T
(this case,) 243 539.33 T
7 F
(FileEnum\050\051) 288.75 539.33 T
0 F
( will return the number of \336les passed) 347.63 539.33 T
-0.51 (through in order to get enough \336les to \336ll the buffer; the return) 243 528.33 P
(value can thus be the real-skip count for the next pass.) 243 517.33 T
0 9 Q
(FESF_CALLBACK) 180 499.33 T
7 10 Q
(FileEnum\050\051) 243 488.33 T
0 F
( should call a callback routine to determine) 301.88 488.33 T
(whether a \336le should be accepted.) 243 477.33 T
0 9 Q
(FESF_LOCK_CB_DA) 180 459.33 T
(T) 270.18 459.33 T
(A) 275.69 459.33 T
0 10 Q
(This \337ag indicates that the) 243 448.33 T
7 F
(FileEnumParams) 370.62 448.33 T
0 F
( \336elds) 461.35 448.33 T
6 9 Q
(FEP) 243 437.33 T
6 10 Q
(_callback1) 261.5 437.33 T
0 F
( and) 310.2 437.33 T
6 9 Q
(FEP) 333.17 437.33 T
6 10 Q
(_callback2) 351.68 437.33 T
0 F
( are far pointers to movable) 400.38 437.33 T
(memory that must be locked before) 243 426.33 T
7 F
(FileEnum\050\051) 408.39 426.33 T
0 F
( is called.) 467.27 426.33 T
0 9 Q
(FESF_LEA) 180 408.33 T
(VE_HEADER) 226.67 408.33 T
0 10 Q
-0.2 (If set,) 243 397.33 P
7 F
-0.21 (FileEnum\050\051) 271.86 397.33 P
0 F
-0.2 ( should leave an empty header space at the) 330.74 397.33 P
-0.11 (start of the return buffer) 243 386.33 P
-0.11 (. The size of this buffer is speci\336ed by) 356.43 386.33 P
(the) 243 375.33 T
6 9 Q
(FEP) 260.78 375.33 T
6 10 Q
(_headerSize) 279.28 375.33 T
0 F
( \336eld.) 334.63 375.33 T
(The) 180 357.33 T
7 F
(FileEnumStandardReturnT) 200.56 357.33 T
(ype) 343.93 357.33 T
0 F
( enumerated type has the following) 362.45 357.33 T
(values; they are used in conjunction with the) 180 345.83 T
6 9 Q
(FEP) 390.2 345.83 T
6 10 Q
(_returnAttrs) 408.7 345.83 T
0 F
( \336eld of the) 465.72 345.83 T
7 F
(FileEnumParams) 180 334.33 T
0 F
( structure.) 270.73 334.33 T
0 9 Q
(FESRT_COUNT_ONL) 180 315.83 T
(Y) 273.36 315.83 T
7 10 Q
-0.09 (FileEnum\050\051) 243 304.83 P
0 F
-0.09 ( will not allocate any memory and will not return) 301.88 304.83 P
(data about \336les; instead, it will simply return the number of) 243 293.83 T
(\336les which match the speci\336ed criteria.) 243 282.83 T
0 9 Q
(FESRT_DOS_INFO) 180 264.83 T
7 10 Q
(FileEnum\050\051) 243 253.83 T
0 F
( will return an array of) 301.88 253.83 T
7 F
(FEDosInfo) 411.15 253.83 T
0 F
( structures.) 466.69 253.83 T
(These structures contain basic information about the \336le: its) 243 242.83 T
-0.52 (virtual name, size, modi\336cation date,) 243 231.83 P
0 9 Q
-0.47 (DOS) 414.68 231.83 P
0 10 Q
-0.52 ( attributes, and path) 434.36 231.83 P
(information \050as a) 243 220.83 T
7 F
(DirPathInfo) 325.05 220.83 T
0 F
( record\051.) 388.37 220.83 T
0 9 Q
(FESRT_NAME) 180 202.83 T
7 10 Q
(FileEnum\050\051) 243 191.83 T
0 F
( will return an array of) 301.88 191.83 T
7 F
(FileLongName) 411.15 191.83 T
0 F
( strings,) 487.43 191.83 T
(each one of which is) 243 180.83 T
0 9 Q
(FILE_LONGNAME_BUFFER_SIZE) 337.82 180.83 T
0 10 Q
(characters long; every one of these will contain a \336le\325) 243 169.83 T
(s virtual) 486.17 169.83 T
(name followed by a null terminator) 243 158.83 T
(.) 405.25 158.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "135" 31
%%Page: "136" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(136) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(FESRT_NAME_AND_A) 180 641.33 T
(TTR) 279.84 641.33 T
7 10 Q
(FileEnum\050\051) 243 630.33 T
0 F
( will return an array of) 301.88 630.33 T
7 F
(FENameAndAttr) 411.15 630.33 T
0 F
(structures, each one of which contains a \336le\325) 243 619.33 T
(s) 446.34 619.33 T
0 9 Q
(DOS) 453.75 619.33 T
0 10 Q
( attributes) 473.42 619.33 T
(and virtual name.) 243 608.33 T
(The) 180 590.33 T
7 F
(FEDosInfo) 200.56 590.33 T
0 F
( structure includes a word-sized record \050) 256.1 590.33 T
6 9 Q
(DFIS) 441.63 590.33 T
6 10 Q
(_pathInfo) 464.3 590.33 T
0 F
(\051) 508.92 590.33 T
-0.12 (which describes the \336le\325) 180 578.83 P
-0.12 (s position relative to the standard paths. It contains) 289.09 578.83 P
(the following \336elds:) 180 567.33 T
0 9 Q
(DPI_EXISTS_LOCALL) 180 548.83 T
(Y) 276.69 548.83 T
0 10 Q
-0.29 (This bit is set if the \336le exists in a directory under the primary) 243 537.83 P
(tree.) 243 526.83 T
0 9 Q
(DPI_ENTR) 180 508.83 T
(Y_NUMBER_IN_P) 227.17 508.83 T
(A) 306 508.83 T
(TH) 312 508.83 T
0 10 Q
(This is the mask for a seven-bit \336eld whose offset is) 243 497.83 T
0 9 Q
(DPI_ENTR) 243 486.83 T
(Y_NUMBER_IN_P) 290.17 486.83 T
(A) 369 486.83 T
(TH_OFFSET) 375 486.83 T
0 10 Q
(.) 429.26 486.83 T
0 9 Q
(DPI_STD_P) 180 468.83 T
(A) 229.68 468.83 T
(TH) 235.68 468.83 T
0 10 Q
(This is the mask for an eight-bit \336eld whose offset is) 243 457.83 T
0 9 Q
(DPI_STD_P) 243 446.83 T
(A) 292.68 446.83 T
(TH_OFFSET) 298.68 446.83 T
0 10 Q
(. If the \336le is in a standard path, this) 352.94 446.83 T
(\336eld will contain a) 243 435.83 T
7 F
(StandardPath) 331.17 435.83 T
0 F
( constant for a standard) 404.51 435.83 T
-0.73 (path containing the \336le. This need not be the \322closest\323 standard) 243 424.83 P
(path; for example, if the \336le is in the \322W) 243 413.83 T
(orld\323 directory) 427.29 413.83 T
(, this) 492.65 413.83 T
(constant might nevertheless be) 243 402.83 T
0 9 Q
(SP_TOP) 390.05 402.83 T
0 10 Q
(.) 423.94 402.83 T
2 F
(See Also:) 99 384.83 T
0 F
(FileEnumLocateAttr\050\051, FileEnumW) 180 384.83 T
(ildcard\050\051) 344.26 384.83 T
2 F
(Include:) 99 364.83 T
0 F
(\336leEnum.h) 180 364.83 T
81 348.49 531 353.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 348.49 531 353.5 R
7 X
0 0 0 1 0 0 0 K
V
50 352.49 609.01 352.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 340.49 T
2 F
(FileEnumLocateAttr\050\051) 99 340.49 T
3 10 Q
(void *) 99 325.83 T
4 F
(FileEnumLocateAttr\050 /* returns NULL if attr not found */) 153 325.83 T
4 9 Q
(FileEnumCallbackData*) 153 315.49 T
(fecd,) 279 315.49 T
(/* Passed to callback routine */) 315 315.49 T
(FileExtendedAttribute) 153 305.49 T
(attr,) 279 305.49 T
(/* Search for this attribute */) 315 305.49 T
(const char *) 153 295.49 T
(* name\051;) 279 295.49 T
(/* Attribute name \050if second) 333 295.49 T
( * argument is FEA_CUSTOM\051 */) 315 285.49 T
7 10 Q
-0.38 (FileEnum\050\051) 180 267.83 P
0 F
-0.37 ( can be instructed to call a callback routine to decide which \336les) 238.88 267.83 P
(to \336lter out. This callback routine is passed an array of) 180 256.33 T
7 F
(FileExtAttrDesc) 436.34 256.33 T
0 F
(structures. T) 180 244.83 T
(o \336nd a particular extended attribute in this array) 238.89 244.83 T
(, call) 470.77 244.83 T
7 F
(FileEnumLocateAttr\050\051) 180 233.33 T
0 F
(. This routine will \336nd the address of the value of) 295.18 233.33 T
(the attribute desired, and return that address. If the attribute is not in the) 180 221.83 T
(array) 180 210.33 T
(,) 204.26 210.33 T
7 F
(FileEnumLocateAttr\050\051) 209.82 210.33 T
0 F
( will return a null pointer) 325 210.33 T
(.) 442.79 210.33 T
2 F
(Include:) 99 191.83 T
0 F
(\336leEnum.h) 180 191.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "136" 32
%%Page: "137" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(137) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileEnumW) 99 634.99 T
(ildcard\050\051) 164.23 634.99 T
3 10 Q
(Boolean) 99 621.33 T
4 F
(FileEnumWildcard\050) 153 621.33 T
4 9 Q
(FileEnumCallbackData) 153 610.99 T
(* fecd,) 279 610.99 T
(/* Passed to callback routine */) 333 610.99 T
(word) 153 600.99 T
(frame\051;) 279 600.99 T
(/* Inherited stack frame */) 333 600.99 T
0 10 Q
(This routine is a utility used by) 180 583.33 T
7 F
(FileEnum\050\051) 328.18 583.33 T
0 F
( and is rarely used by) 387.06 583.33 T
(applications. It checks to see if the virtual name of the current \336le \050the \336le) 180 571.83 T
(currently being evaluated by) 180 560.33 T
7 F
(FileEnum\050\051) 315.57 560.33 T
0 F
(\051 matches the pattern in the) 374.45 560.33 T
6 9 Q
(FEP) 180 548.83 T
6 10 Q
(_cbData1) 198.5 548.83 T
0 F
( \336eld of the) 241.84 548.83 T
7 F
(FileEnumParams) 296.29 548.83 T
0 F
( structure.) 387.02 548.83 T
(The) 180 530.33 T
6 F
(fecd) 200.56 530.33 T
0 F
( parameter is a pointer to the callback data of the) 218.88 530.33 T
7 F
(FileEnum\050\051) 450.41 530.33 T
0 F
(routine. The frame parameter is a pointer to the) 180 518.83 T
7 F
(FileEnum\050\051) 405.58 518.83 T
0 F
( stack frame:) 464.46 518.83 T
-0.47 (The \336rst dword is the) 180 507.33 P
6 9 Q
-0.42 (FEP) 279.9 507.33 P
6 10 Q
-0.47 (_cbData1) 298.41 507.33 P
0 F
-0.47 ( \336eld, and the second is the) 341.75 507.33 P
6 9 Q
-0.42 (FEP) 466.84 507.33 P
6 10 Q
-0.47 (_cbData2) 485.35 507.33 P
0 F
(\336eld.) 180 495.83 T
(This routine returns) 180 477.33 T
6 F
(true) 277.22 477.33 T
0 F
( \050non-zero\051 if the \336le name and pattern match.) 295.73 477.33 T
(Otherwise, it returns) 180 465.83 T
6 F
(false) 280.56 465.83 T
0 F
(.) 301.84 465.83 T
2 F
(Include:) 99 447.33 T
0 F
(\336leEnum.h) 180 447.33 T
81 430.98 531 435.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 430.98 531 435.99 R
7 X
0 0 0 1 0 0 0 K
V
50 434.98 609.01 434.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 422.98 T
2 F
(FileFromT) 99 422.98 T
(ransferBlockID\050\051) 156.35 422.98 T
3 10 Q
(VMFileHandle) 99 409.32 T
4 F
( FileFromTransferBlockID\050) 171 409.32 T
5 F
(id) 321 409.32 T
4 F
(\051;) 333 409.32 T
4 9 Q
(TransferBlockID) 153 398.98 T
5 F
(id) 239.4 398.98 T
4 F
(;) 250.2 398.98 T
0 10 Q
-0.39 (This macro extracts a) 180 381.32 P
0 9 Q
-0.35 (VMF) 281.24 381.32 P
0 10 Q
-0.39 (ileHandle from a value of type) 302.23 381.32 P
7 F
-0.4 (T) 442.52 381.32 P
-0.4 (ransferBlock) 449.12 381.32 P
7 9 Q
-0.36 (ID) 516.73 381.32 P
0 10 Q
-0.39 (.) 528.22 381.32 P
81 366.48 531 371.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 366.48 531 371.48 R
7 X
0 0 0 1 0 0 0 K
V
50 370.48 609.01 370.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 358.48 T
2 F
(FileGetAttributes\050\051) 99 358.48 T
3 10 Q
(FileAttrs) 99 343.81 T
4 F
(FileGetAttributes\050 /* Sets thread\325s error value */) 159 343.81 T
4 9 Q
(const char * path\051;) 153 333.48 T
(/* file\325s path relative to current) 279 333.48 T
( * working directory */) 261 323.48 T
0 10 Q
-0.81 (This routine returns the standard) 180 305.81 P
7 F
-0.83 (FileAttrs) 335.4 305.81 P
0 F
-0.81 ( attributes for a \336le. The \336le may) 381.88 305.81 P
-0.55 (be a) 180 294.31 P
0 9 Q
-0.5 (GEOS) 200.58 294.31 P
0 10 Q
-0.55 ( \336le or a plain) 226.75 294.31 P
0 9 Q
-0.5 (DOS) 290.86 294.31 P
0 10 Q
-0.55 ( \336le. Note that you can also get a \336le\325) 310.53 294.31 P
-0.55 (s attributes) 475.79 294.31 P
(by getting the \336le\325) 180 282.81 T
(s) 262.98 282.81 T
0 9 Q
(FEA_FILE_A) 270.39 282.81 T
(TTR) 326.56 282.81 T
0 10 Q
( extended attribute. If an error occurs,) 345.06 282.81 T
(this routine sets the thread\325) 180 271.31 T
(s error) 308.16 271.31 T
(.) 338.15 271.31 T
2 F
(See Also:) 99 252.81 T
0 F
(FileAttrs, FileSetAttributes\050\051) 180 252.81 T
2 F
(Include:) 99 232.81 T
0 F
(\336le.h) 180 232.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "137" 33
%%Page: "138" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(138) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileGetCurrentPath\050\051) 99 634.99 T
3 10 Q
(DiskHandle) 99 620.33 T
4 F
(FileGetCurrentPath\050) 165 620.33 T
4 9 Q
(char *) 153 609.99 T
(buffer,) 189 609.99 T
(/* Path string is written here */) 297 609.99 T
(word) 153 599.99 T
(bufferSize\051;) 189 599.99 T
(/* Size of buffer in bytes */) 297 599.99 T
0 10 Q
(This routine writes the current path string \050without drive speci\336er\051 to the) 180 582.33 T
(buffer provided. If the buffer is too small, it truncates the path to \336t. It) 180 570.83 T
(returns the handle of the disk containing the current path. If the current) 180 559.33 T
(path was declared relative to a standard path, the standard path constant) 180 547.83 T
(will be returned.) 180 536.33 T
2 F
(Include:) 99 517.83 T
0 F
(\336le.h) 180 517.83 T
81 501.48 531 506.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 501.48 531 506.49 R
7 X
0 0 0 1 0 0 0 K
V
50 505.48 609.01 505.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 493.48 T
2 F
(FileGetDateAndT) 99 493.48 T
(ime\050\051) 196.13 493.48 T
3 10 Q
(FileDateAndTime) 99 479.82 T
4 F
(FileGetDateAndTime\050 /* sets thread\325s error value */) 195 479.82 T
4 9 Q
(FileHandle fh\051;) 153 469.48 T
0 10 Q
(This routine \336nds out the time a \336le was last modi\336ed. This routine can be) 180 451.82 T
(called on) 180 440.32 T
0 9 Q
(GEOS) 223.71 440.32 T
0 10 Q
( or non-) 249.88 440.32 T
0 9 Q
(GEOS) 285.43 440.32 T
0 10 Q
( \336les. Note that you can also \336nd out the) 311.6 440.32 T
(modi\336cation time of a \336le by checking the extended attribute) 180 428.82 T
0 9 Q
(FEA_MODIFICA) 180 417.32 T
(TION) 251.83 417.32 T
0 10 Q
(. If unsuccessful, it sets the thread\325) 275.83 417.32 T
(s error value.) 436.76 417.32 T
2 F
(See Also:) 99 398.82 T
0 F
(FileDateAndT) 180 398.82 T
(ime, FileSetDateAndT) 245.69 398.82 T
(ime\050\051) 349.17 398.82 T
2 F
(Include:) 99 378.82 T
0 F
(\336le.h) 180 378.82 T
81 362.48 531 367.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 362.48 531 367.48 R
7 X
0 0 0 1 0 0 0 K
V
50 366.48 609.01 366.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 354.48 T
2 F
(FileGetDiskHandle\050\051) 99 354.48 T
3 10 Q
(DiskHandle) 99 339.81 T
4 F
(FileGetDiskHandle\050 /* sets thread\325s error value */) 165 339.81 T
4 9 Q
(FileHandle fh\051;) 153 329.48 T
0 10 Q
(This routine returns the handle of the disk containing an open \336le. If) 180 311.81 T
(unsuccessful, it sets the thread\325) 180 300.31 T
(s error value.) 325.19 300.31 T
2 F
(Include:) 99 281.81 T
0 F
(\336le.h) 180 281.81 T
81 265.47 531 270.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 265.47 531 270.47 R
7 X
0 0 0 1 0 0 0 K
V
50 269.47 609.01 269.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 257.47 T
2 F
(FileGetHandleExtAttributes\050\051) 99 257.47 T
3 10 Q
(word) 99 242.8 T
4 F
(FileGetHandleExtAttributes\050) 153 242.8 T
4 9 Q
(FileHandle) 153 232.47 T
(fh,) 279 232.47 T
(/* open file\325s handle */) 351 232.47 T
(FileExtendedAttribute) 153 222.47 T
(attr,) 279 222.47 T
(/* attribute to get */) 351 222.47 T
(void) 153 212.47 T
(* buffer,) 279 212.47 T
(/* attribute is written here */) 351 212.47 T
(word) 153 202.47 T
(bufSize\051;) 279 202.47 T
(/* length of buffer in bytes */) 351 202.47 T
0 10 Q
-0.19 (This routine gets one or more extended attributes of an open \336le. \050T) 180 184.8 P
-0.19 (o get the) 488.99 184.8 P
-0.55 (attributes of a \336le without opening it, call) 180 173.3 P
7 F
-0.57 (FileGetPathExtAttributes\050\051) 370.64 173.3 P
0 F
-0.55 (.\051 If) 513.03 173.3 P
(a single attribute is requested, the attribute will be written in the buffer) 180 161.8 T
(passed. If several attributes are requested,) 180 150.3 T
6 F
(attr) 380.58 150.3 T
0 F
( should be set to) 397.8 150.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "138" 34
%%Page: "139" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(139) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(FEA_MUL) 180 641.33 T
(TIPLE) 224.84 641.33 T
0 10 Q
(, and) 253.01 641.33 T
6 F
(buffer) 278.76 641.33 T
0 F
( should point to an array of) 305.97 641.33 T
7 F
(FileExtAttrDesc) 434.32 641.33 T
0 F
(structures. In this case,) 180 629.83 T
6 F
(bufSize) 291.85 629.83 T
0 F
( should be the number of structures in the) 325.92 629.83 T
(buffer) 180 618.33 T
(, not the length of the buffer) 207.03 618.33 T
(.) 336.48 618.33 T
-0.64 (If) 180 599.83 P
7 F
-0.66 (FileGetHandleExtAttributes\050\051) 189.54 599.83 P
0 F
-0.64 ( is successful, it returns zero. Otherwise,) 344.71 599.83 P
(it returns one of the following error codes:) 180 588.33 T
0 9 Q
(ERROR_A) 180 569.83 T
(TTR_NOT_SUPPORTED) 223.5 569.83 T
0 10 Q
(The \336le system does not recognize the attribute constant) 243 558.83 T
(passed.) 243 547.83 T
0 9 Q
(ERROR_A) 180 529.83 T
(TTR_SIZE_MISMA) 223.5 529.83 T
(TCH) 304.66 529.83 T
0 10 Q
(The buffer passed was too small for the attribute requested.) 243 518.83 T
0 9 Q
(ERROR_A) 180 500.83 T
(TTR_NOT_FOUND) 223.5 500.83 T
0 10 Q
(The \336le does not have a value set for that attribute.) 243 489.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 471.83 T
0 10 Q
(Y) 243 460.83 T
(ou do not have read-access to the \336le.) 248.93 460.83 T
2 F
(T) 99 442.83 T
(ips and T) 104.93 442.83 T
(ricks:) 148.28 442.83 T
0 F
(Note that the only way to recover a custom attribute is by passing) 180 442.83 T
0 9 Q
(FEA_MUL) 180 429.83 T
(TIPLE) 224.84 429.83 T
0 10 Q
(, and using a) 253.01 429.83 T
7 F
(FileExtAttrDesc) 315.25 429.83 T
0 F
( to describe the attribute.) 399.32 429.83 T
2 F
(See Also:) 99 409.83 T
0 F
(FileGetPathExtAttributes\050\051) 180 409.83 T
2 F
(Include:) 99 389.83 T
0 F
(\336le.h) 180 389.83 T
81 373.49 531 378.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 373.49 531 378.5 R
7 X
0 0 0 1 0 0 0 K
V
50 377.49 609.01 377.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 365.49 T
2 F
(FileGetPathExtAttributes\050\051) 99 365.49 T
3 10 Q
(word) 99 350.83 T
4 F
(FileGetPathExtAttributes\050) 153 350.83 T
4 9 Q
(const char) 153 340.49 T
(* path,) 279 340.49 T
(/* path relative to current) 351 340.49 T
( * working directory */) 333 330.49 T
(FileExtendedAttribute) 153 320.49 T
(attr,) 279 320.49 T
(/* attribute to get */) 351 320.49 T
(void) 153 310.49 T
(* buffer,) 279 310.49 T
(/* attribute is written here */) 351 310.49 T
(word) 153 300.49 T
(bufSize\051;) 279 300.49 T
(/* length of buffer in bytes */) 351 300.49 T
0 10 Q
(This routine gets one or more extended attributes of a) 180 282.83 T
0 9 Q
(GEOS) 431.69 282.83 T
0 10 Q
( \336le. If a single) 457.86 282.83 T
(attribute is requested, the attribute will be written in the buffer passed. If) 180 271.33 T
(several attributes are requested,) 180 259.83 T
6 F
(attr) 333.54 259.83 T
0 F
( should be set to) 350.76 259.83 T
0 9 Q
(FEA_MUL) 428.37 259.83 T
(TIPLE) 473.21 259.83 T
0 10 Q
(, and) 501.38 259.83 T
6 F
-0.35 (buffer) 180 248.33 P
0 F
-0.35 ( should point to an array of) 207.21 248.33 P
7 F
-0.36 (FileExtArtrDesc) 333.12 248.33 P
0 F
-0.35 ( structures. In this case,) 418.11 248.33 P
6 F
-0.68 (bufSize) 180 236.83 P
0 F
-0.68 ( should be the number of structures in the buffer) 214.07 236.83 P
-0.68 (, not the length of the) 432.63 236.83 P
(buffer) 180 225.33 T
(.) 207.03 225.33 T
-0.24 (If) 180 206.83 P
7 F
-0.24 (FileGetPathExtAttributes\050\051) 189.94 206.83 P
0 F
-0.24 ( is successful, it returns zero. Otherwise, it) 332.33 206.83 P
(returns one of the following error codes:) 180 195.33 T
0 9 Q
(ERROR_A) 180 176.83 T
(TTR_NOT_SUPPORTED) 223.5 176.83 T
0 10 Q
(The \336le system does not recognize the attribute constant) 243 165.83 T
(passed.) 243 154.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "139" 35
%%Page: "140" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(140) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(ERROR_A) 180 641.33 T
(TTR_SIZE_MISMA) 223.5 641.33 T
(TCH) 304.66 641.33 T
0 10 Q
(The buffer passed was too small for the attribute requested.) 243 630.33 T
0 9 Q
(ERROR_A) 180 612.33 T
(TTR_NOT_FOUND) 223.5 612.33 T
0 10 Q
(The \336le does not have a value set for that attribute.) 243 601.33 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 583.33 T
0 10 Q
(Y) 243 572.33 T
(ou do not have read-access to the \336le.) 248.93 572.33 T
2 F
(T) 99 554.33 T
(ips and T) 104.93 554.33 T
(ricks:) 148.28 554.33 T
0 F
(Note that the only way to recover a custom attribute is by passing) 180 554.33 T
0 9 Q
(FEA_MUL) 180 541.33 T
(TIPLE) 224.84 541.33 T
0 10 Q
(, and using a) 253.01 541.33 T
7 F
(FileExtAttrDesc) 315.25 541.33 T
0 F
( to describe the attribute.) 399.32 541.33 T
2 F
(See Also:) 99 521.33 T
0 F
(FileGetHandleExtAttributes\050\051) 180 521.33 T
2 F
(Include:) 99 501.33 T
0 F
(\336le.h) 180 501.33 T
81 484.99 531 490 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 484.99 531 490 R
7 X
0 0 0 1 0 0 0 K
V
50 488.99 609.01 488.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 476.99 T
2 F
(FileLockRecord\050\051) 99 476.99 T
3 10 Q
(word) 99 463.33 T
4 F
(FileLockRecord\050 /* returns error */) 153 463.33 T
4 9 Q
(FileHandle) 153 452.99 T
(fh,) 261 452.99 T
(dword) 153 442.99 T
(filePos,) 261 442.99 T
(/* lock starting at this position... */) 315 442.99 T
(dword) 153 432.99 T
(regLength\051;) 261 432.99 T
(/* lock this many bytes */) 333 432.99 T
0 10 Q
(This routine puts a lock on a part of a byte \336le. It \336rst checks to make sure) 180 415.33 T
(that there are no locks that overlap the region speci\336ed; if there are, it will) 180 403.83 T
-0.59 (fail and return) 180 392.33 P
0 9 Q
-0.53 (ERROR_ALREADY_LOCKED) 249.15 392.33 P
0 10 Q
-0.59 (. If there are no locks, it will place) 376.49 392.33 P
(a lock on the region speci\336ed and return zero.) 180 380.83 T
2 F
(W) 99 362.33 T
(arnings:) 108.07 362.33 T
0 F
-0.41 (Locking a region only prevents threads from locking part of the same region;) 180 362.33 P
(it does not prevent them from reading from or writing to the region. If) 180 349.33 T
(applications use this mechanism, they have to make sure to call) 180 336.33 T
7 F
(FileLockRecord) 180 323.33 T
0 F
( before trying to access a part of a \336le.) 263.16 323.33 T
2 F
(See Also:) 99 303.33 T
0 F
(FileUnlockRecord\050\051, HandleP\050\051) 180 303.33 T
81 286.98 531 291.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 286.98 531 291.99 R
7 X
0 0 0 1 0 0 0 K
V
50 290.98 609.01 290.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 278.98 T
2 F
(FileMove\050\051) 99 278.98 T
3 10 Q
(word) 99 264.32 T
4 F
(FileMove\050 /* Returns error */) 153 264.32 T
4 9 Q
(const char) 153 253.98 T
(* source,) 261 253.98 T
(/* source path and file name */) 333 253.98 T
(const char) 153 243.98 T
(* dest,) 261 243.98 T
(/* destination path and file name */) 333 243.98 T
(DiskHandle) 153 233.98 T
(sourceDisk,) 261 233.98 T
(/* These handles may be Standard */) 333 233.98 T
(DiskHandle) 153 223.98 T
(destDisk\051;) 261 223.98 T
(/* Path constants, or null to indi-) 333 223.98 T
( * cate current working directory */) 315 213.98 T
0 10 Q
(This routine moves a \336le from one location to another) 180 196.32 T
(. The source and) 426.32 196.32 T
(destination are speci\336ed with path strings. Each string speci\336es a path) 180 184.82 T
(relative to the location speci\336ed by the corresponding disk handle. If the) 180 173.32 T
(handle is a disk handle, the path is relative to that disk\325) 180 161.82 T
(s root. If the disk) 438.59 161.82 T
(handle is a standard path constant, the path string is relative to that) 180 150.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "140" 36
%%Page: "141" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(141) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(standard path. If the disk handle is null, the path is relative to the current) 180 641.33 T
(working directory) 180 629.83 T
(.) 260.92 629.83 T
-0.05 (If) 180 611.33 P
7 F
-0.05 (FileMove\050\051) 190.13 611.33 P
0 F
-0.05 ( is successful, it returns zero. Otherwise, it returns one of the) 245.86 611.33 P
(following error codes and sets the thread\325) 180 599.83 T
(s error value.) 369.82 599.83 T
0 9 Q
(ERROR_FILE_NOT_FOUND) 180 581.33 T
0 10 Q
(No such source \336le exists in the speci\336ed directory) 243 570.33 T
(.) 474.66 570.33 T
0 9 Q
(ERROR_P) 180 552.33 T
(A) 222.83 552.33 T
(TH_NOT_FOUND) 228.83 552.33 T
0 10 Q
(An invalid source or destination path string was passed.) 243 541.33 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 523.33 T
0 10 Q
-0.28 (Y) 243 512.33 P
-0.28 (ou do not have permission to delete the source \336le, or there is) 248.93 512.33 P
(already a \336le with the same name as the destination \336le \050and) 243 501.33 T
-0.52 (you do not have permission to delete it\051, or the destination disk) 243 490.33 P
(or directory is not writable.) 243 479.33 T
0 9 Q
(ERROR_FILE_IN_USE) 180 461.33 T
0 10 Q
-0.68 (Either the source \336le is in use, or there is already a \336le with the) 243 450.33 P
(same name as the destination \336le, and it is in use.) 243 439.33 T
0 9 Q
(ERROR_SHORT_READ_WRITE) 180 421.33 T
0 10 Q
(There was not enough room on the destination disk.) 243 410.33 T
2 F
(See Also:) 99 392.33 T
0 F
(FileCopy\050\051) 180 392.33 T
2 F
(Include:) 99 372.33 T
0 F
(\336le.h) 180 372.33 T
81 355.99 531 361 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 355.99 531 361 R
7 X
0 0 0 1 0 0 0 K
V
50 359.99 609.01 359.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 347.99 T
2 F
(FileOpen\050\051) 99 347.99 T
3 10 Q
(FileHandle) 99 333.33 T
4 F
( FileOpen\050 /* sets thread\325s error value */) 159 333.33 T
4 9 Q
(const char) 153 322.99 T
(* name,) 261 322.99 T
(/* relative to working dir */) 315 322.99 T
(FileAccessFlags) 153 312.99 T
(flags\051;) 261 312.99 T
(/* Permissions/exclusions */) 315 312.99 T
0 10 Q
(This routine opens a \336le for bytewise access. The \336le may be a) 180 295.33 T
0 9 Q
(DOS) 469.31 295.33 T
0 10 Q
( \336le or a) 488.98 295.33 T
0 9 Q
-0.05 (GEOS) 180 283.83 P
0 10 Q
-0.06 ( byte \336le. If the \336le is successfully opened,) 206.17 283.83 P
7 F
-0.06 (FileOpen\050\051) 402.34 283.83 P
0 F
-0.06 ( will return the) 457.89 283.83 P
-0.5 (\336le\325) 180 272.33 P
-0.5 (s handle; otherwise, it will return a null handle and set the thread\325) 195.93 272.33 P
-0.5 (s error) 498.49 272.33 P
(value. Errors typically set by this routine are listed below:) 180 260.83 T
0 9 Q
(ERROR_FILE_NOT_FOUND) 180 242.33 T
0 10 Q
(No \336le with the speci\336ed name could be found in the) 243 231.33 T
(appropriate directory) 243 220.33 T
(.) 340.4 220.33 T
0 9 Q
(ERROR_P) 180 202.33 T
(A) 222.83 202.33 T
(TH_NOT_FOUND) 228.83 202.33 T
0 10 Q
(A relative or absolute path had been passed, and the path) 243 191.33 T
(included a directory which did not exist.) 243 180.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 37
%%Page: "142" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(142) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(ERROR_TOO_MANY_OPEN_FILES) 180 641.33 T
0 10 Q
(There is a limit to how many \336les may be open at once. If this) 243 630.33 T
(limit is reached,) 243 619.33 T
7 F
(FileOpen\050\051) 320.42 619.33 T
0 F
( will fail until a \336le is closed.) 375.97 619.33 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 601.33 T
0 10 Q
(Either the caller requested access which could not be granted) 243 590.33 T
-0.39 (\050e.g. it requested write access when another geode had already) 243 579.33 P
-0.19 (opened the \336le with) 243 568.33 P
0 9 Q
-0.18 (FILE_DENY_W) 336.12 568.33 P
0 10 Q
-0.19 (\051, or the caller tried to deny) 403.29 568.33 P
(access when that access had already been granted to another) 243 557.33 T
(geode \050e.g. it tried to open the \336le with) 243 546.33 T
0 9 Q
(FILE_DENY_W) 423.58 546.33 T
0 10 Q
( when) 490.75 546.33 T
(another geode already had it open for write-access\051.) 243 535.33 T
0 9 Q
(ERROR_WRITE_PROTECTED) 180 517.33 T
0 10 Q
(The caller requested write or read-write access to a \336le in a) 243 506.33 T
(write-protected volume.) 243 495.33 T
2 F
(See Also:) 99 477.33 T
0 F
(FileCreate\050\051) 180 477.33 T
2 F
(Include:) 99 457.33 T
0 F
(\336le.h) 180 457.33 T
81 440.99 531 446 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 440.99 531 446 R
7 X
0 0 0 1 0 0 0 K
V
50 444.99 609.01 444.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 432.99 T
2 F
(FileParseStandardPath\050\051) 99 432.99 T
3 10 Q
(StandardPath) 99 418.33 T
4 F
( FileParseStandardPath\050) 171 418.33 T
4 9 Q
(DiskHandle) 153 407.99 T
(disk,) 261 407.99 T
(const char) 153 397.99 T
(** path\051;) 261 397.99 T
0 10 Q
(This routine is passed a full path \050relative to the passed disk or a standard) 180 380.33 T
(path, if the disk handle is null\051 and \336nds the standard path which most) 180 368.83 T
-0.32 (closely contains that path. It updates the pointer whose address is passed so) 180 357.33 P
(that it points to the trailing portion of the path string. For example, if you) 180 345.83 T
(pass the path string \322\134) 180 334.33 T
0 9 Q
(GEOWORKS) 285.52 334.33 T
0 10 Q
(\134) 341.02 334.33 T
0 9 Q
(DOCUMENT) 347.08 334.33 T
0 10 Q
(\134) 403.25 334.33 T
0 9 Q
(MEMOS) 409.31 334.33 T
0 10 Q
(\134) 445.47 334.33 T
0 9 Q
(APRIL) 451.53 334.33 T
0 10 Q
(\323, the) 480.2 334.33 T
-0.14 (pointer would be updated to point to the \322\134) 180 322.83 P
0 9 Q
-0.13 (MEMOS) 377.16 322.83 P
0 10 Q
-0.14 (\134) 413.32 322.83 P
0 9 Q
-0.13 (APRIL) 419.38 322.83 P
0 10 Q
-0.14 (\323 portion, and the) 448.05 322.83 P
7 F
(StandardPath) 180 311.33 T
0 9 Q
(SP_DOCUMENT) 256.12 311.33 T
0 10 Q
( would be returned. If the path passed does) 328.46 311.33 T
(not belong to a standard path, the constant) 180 299.83 T
0 9 Q
(SP_NOT_ST) 382.26 299.83 T
(ANDARD_P) 434.45 299.83 T
(A) 485.12 299.83 T
(TH) 491.12 299.83 T
0 10 Q
( will) 504.62 299.83 T
(be returned, and the pointer will not be changed.) 180 288.33 T
2 F
(Include:) 99 269.83 T
0 F
(\336le.h) 180 269.83 T
81 253.48 531 258.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 253.48 531 258.49 R
7 X
0 0 0 1 0 0 0 K
V
50 257.48 609.01 257.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 245.48 T
2 F
(FilePopDir\050\051) 99 245.48 T
3 10 Q
(void) 99 230.82 T
4 F
(FilePopDir\050\051;) 153 230.82 T
7 F
(FilePopDir\050\051) 180 212.82 T
0 F
( pops the top directory off the thread\325) 245.55 212.82 T
(s directory stack and) 416.29 212.82 T
(makes it the current working directory) 180 201.32 T
(.) 358.52 201.32 T
2 F
(See Also:) 99 182.82 T
0 F
(FilePushDir\050\051) 180 182.82 T
2 F
(Include:) 99 162.82 T
0 F
(\336le.h) 180 162.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 38
%%Page: "143" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(143) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FilePos\050\051) 99 634.99 T
3 10 Q
(dword) 99 620.33 T
4 F
(FilePos\050 /* Sets thread\325s error value */) 153 620.33 T
4 9 Q
(FileHandle) 153 609.99 T
(fh,) 261 609.99 T
(dword) 153 599.99 T
(posOrOffset,) 261 599.99 T
(FilePosMode) 153 589.99 T
(mode\051;) 261 589.99 T
0 10 Q
(This routine changes the current \336le position. The position can be speci\336ed) 180 572.33 T
(in three ways, depending on the value of the) 180 560.83 T
6 F
(mode) 387.43 560.83 T
0 F
( argument:) 411.87 560.83 T
0 9 Q
(FILE_POS_ST) 180 542.33 T
(ART) 241.02 542.33 T
0 10 Q
(The \336le position is set to a speci\336ed number of bytes after the) 243 531.33 T
-0.6 (start of the \336le. Passing this mode with an offset of zero will set) 243 520.33 P
(the \336le position to the start of the \336le.) 243 509.33 T
0 9 Q
(FILE_POS_RELA) 180 491.33 T
(TIVE) 254.84 491.33 T
0 10 Q
-0.44 (The \336le position is incremented by a speci\336ed number of bytes;) 243 480.33 P
(this number may be negative.) 243 469.33 T
0 9 Q
(FILE_POS_END) 180 451.33 T
0 10 Q
(The \336le position is set to a speci\336ed number of bytes after the) 243 440.33 T
(end of the \336le; it is usually passed with a negative number of) 243 429.33 T
(bytes. Passing this mode with an offset of zero will set the \336le) 243 418.33 T
(position to the end of the \336le.) 243 407.33 T
7 F
(FilePos\050\051) 180 389.33 T
0 F
( returns a 32-bit integer) 226.66 389.33 T
(. This integer speci\336es the absolute \336le) 337.23 389.33 T
(position after the move \050relative to the start of the \336le\051.) 180 377.83 T
2 F
(T) 99 359.33 T
(ips and T) 104.93 359.33 T
(ricks:) 148.28 359.33 T
0 F
-0.08 (T) 180 359.33 P
-0.08 (o \336nd out the current \336le position without changing it, call) 185.75 359.33 P
7 F
-0.09 (FilePos\050\051) 458.01 359.33 P
0 F
-0.08 ( with) 504.67 359.33 P
(mode) 180 346.33 T
0 9 Q
(FILE_POS_RELA) 207.41 346.33 T
(TIVE) 282.25 346.33 T
0 10 Q
( and offset zero.) 304.92 346.33 T
2 F
(Include:) 99 326.33 T
0 F
(\336le.h) 180 326.33 T
81 309.98 531 314.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 309.98 531 314.99 R
7 X
0 0 0 1 0 0 0 K
V
50 313.98 609.01 313.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 301.98 T
2 F
(FilePushDir\050\051) 99 301.98 T
3 10 Q
(void) 99 287.32 T
4 F
(FilePushDir\050\051;) 153 287.32 T
7 F
(FilePushDir\050\051) 180 269.32 T
0 F
( pushes the current working directory onto the thread\325) 251.47 269.32 T
(s) 502.02 269.32 T
(directory stack. It does not change the current working directory) 180 257.82 T
(.) 477.21 257.82 T
2 F
(See Also:) 99 239.32 T
0 F
(FilePopDir\050\051) 180 239.32 T
2 F
(Include:) 99 219.32 T
0 F
(\336le.h) 180 219.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 39
%%Page: "144" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(144) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileRead\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileRead\050 /* sets thread\325s error value */) 153 620.33 T
4 9 Q
(FileHandle) 153 609.99 T
(fh,) 261 609.99 T
(/* handle of open file */) 315 609.99 T
(void) 153 599.99 T
(* buf,) 261 599.99 T
(/* copy data to this buffer */) 315 599.99 T
(word) 153 589.99 T
(count,) 261 589.99 T
(/* Length of buffer \050in bytes\051 */) 315 589.99 T
(Boolean) 153 579.99 T
(noErrorFlag\051;) 261 579.99 T
(/* Set if app can\325t) 351 579.99 T
( * handle errors */) 333 569.99 T
0 10 Q
(This routine copies data from a \336le into memory) 180 552.33 T
(. It starts copying from the) 401.32 552.33 T
(current position in the \336le. If possible, it will copy enough data to \336ll the) 180 540.83 T
(buffer) 180 529.33 T
(. If) 207.03 529.33 T
7 F
(FileRead\050\051) 222.77 529.33 T
0 F
( reaches the end of the \336le, it sets the thread\325) 277.4 529.33 T
(s error) 485.2 529.33 T
(value to) 180 517.83 T
0 9 Q
(ERROR_SHORT_READ_WRITE) 219.64 517.83 T
0 10 Q
(. In any event, it returns the number) 356.79 517.83 T
(of bytes copied. If an error occurs,) 180 506.33 T
7 F
(FileRead\050\051) 338.32 506.33 T
0 F
( returns -1 and sets the) 392.95 506.33 T
(thread\325) 180 494.83 T
(s error value \050usually to) 212.41 494.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 325.75 494.83 T
0 10 Q
(\051. The current \336le) 443.07 494.83 T
(position will be changed to the \336rst byte after the ones which were read.) 180 483.33 T
(If the argument) 180 464.83 T
6 F
(noErrorFlag) 256.11 464.83 T
0 F
( is set to) 313.87 464.83 T
6 F
(true) 355.18 464.83 T
0 F
( \050i.e. non-zero\051,) 373.69 464.83 T
7 F
(FileRead\050\051) 444.98 464.83 T
0 F
( will) 499.61 464.83 T
(fatal-error if an error occurs \050including an) 180 453.33 T
0 9 Q
(ERROR_SHORT_READ_WRITE) 376.46 453.33 T
0 10 Q
(\051.) 513.61 453.33 T
2 F
(W) 99 434.83 T
(arnings:) 108.07 434.83 T
0 F
(Pass) 180 434.83 T
6 F
(noErrorFlag) 204.27 434.83 T
(true) 264.81 434.83 T
0 F
( only during debugging.) 283.32 434.83 T
2 F
(Include:) 99 414.83 T
0 F
(\336le.h) 180 414.83 T
81 398.48 531 403.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 398.48 531 403.49 R
7 X
0 0 0 1 0 0 0 K
V
50 402.48 609.01 402.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 390.48 T
2 F
(FileRename\050\051) 99 390.48 T
3 10 Q
(word) 99 375.82 T
4 F
(FileRename\050) 153 375.82 T
4 9 Q
(const char * oldName,) 153 365.48 T
(/* Relative to working directory */) 297 365.48 T
(const char * newName\051;) 153 355.48 T
(/* Name only, without path */) 297 355.48 T
0 10 Q
(This routine changes a \336le\325) 180 337.82 T
(s name. It cannot move a \336le to a different) 304.09 337.82 T
-0.06 (directory; to do that, call) 180 326.32 P
7 F
-0.07 (FileMove\050\051) 295.98 326.32 P
0 F
-0.06 (. If the routine is successful, it returns) 351.71 326.32 P
(zero; otherwise, it returns a) 180 314.82 T
7 F
(FileError) 310.93 314.82 T
0 F
(. Common errors include) 359.64 314.82 T
0 9 Q
(ERROR_FILE_NOT_FOUND) 180 296.32 T
0 10 Q
(No such \336le exists in the speci\336ed directory) 243 285.32 T
(.) 442.26 285.32 T
0 9 Q
(ERROR_P) 180 267.32 T
(A) 222.83 267.32 T
(TH_NOT_FOUND) 228.83 267.32 T
0 10 Q
(An invalid path string was passed.) 243 256.32 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 238.32 T
0 10 Q
(Y) 243 227.32 T
(ou do not have permission to delete that \336le, or it exists on a) 248.93 227.32 T
(read-only volume.) 243 216.32 T
0 9 Q
(ERROR_FILE_IN_USE) 180 198.32 T
0 10 Q
(Some geode has that \336le open.) 243 187.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 40
%%Page: "145" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(145) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(ERROR_INV) 180 641.33 T
(ALID_NAME) 233.99 641.33 T
0 10 Q
-0.64 (The name was not a valid) 243 630.33 P
0 9 Q
-0.58 (GEOS) 360.65 630.33 P
0 10 Q
-0.64 ( name; or the \336le is a non-) 386.82 630.33 P
0 9 Q
-0.58 (GEOS) 502.69 630.33 P
0 10 Q
(\336le, and the name was not an appropriate native name.) 243 619.33 T
2 F
(See Also:) 99 601.33 T
0 F
(FileMove\050\051) 180 601.33 T
2 F
(Include:) 99 581.33 T
0 F
(\336le.h) 180 581.33 T
81 564.99 531 570 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 564.99 531 570 R
7 X
0 0 0 1 0 0 0 K
V
50 568.99 609.01 568.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 556.99 T
2 F
(FileResolveStandardPath\050\051) 99 556.99 T
3 10 Q
(DiskHandle) 99 542.33 T
4 F
( FileResolveStandardPath\050) 159 542.33 T
4 9 Q
(char) 153 531.99 T
(** buffer,) 261 531.99 T
(/* Write path here; update pointer) 333 531.99 T
( * to point to end of path */) 315 521.99 T
(word) 153 511.99 T
(bufSize,) 261 511.99 T
(/* Size of buffer \050in bytes\051 */) 333 511.99 T
(const char *) 153 501.99 T
(path,) 261 501.99 T
(/* Relative path of file */) 333 501.99 T
(FileResolveStandardPathFlags flags\051;) 153 491.99 T
(/* Flags are described below */) 351 491.99 T
0 10 Q
(This routine \336nds a \336le relative to the current location, then writes the full) 180 474.33 T
(path to the \336le, starting at the root of the disk \050) 180 462.83 T
6 F
(not) 398.74 462.83 T
0 F
( at a standard path\051. It) 413.37 462.83 T
-0.41 (writes the path to the passed buffer) 180 451.33 P
-0.41 (, updating the pointer to point to the null) 341.66 451.33 P
-0.73 (at the end of the path string; it also returns the handle of the disk. If it cannot) 180 439.83 P
(\336nd the \336le it returns a null path.) 180 428.33 T
2 F
(Structures:) 99 409.83 T
0 F
(A record of) 180 409.83 T
7 F
(FileResolveStandardPathFlags) 232.95 409.83 T
0 F
( is passed to) 394.8 409.83 T
7 F
(FileResolveStandardPath\050\051) 180 398.83 T
0 F
(. The following \337ags are available:) 321.67 398.83 T
0 9 Q
(FRSPF_ADD_DRIVE_NAME) 180 380.83 T
0 10 Q
(The path string written to the buffer should begin with the) 243 369.83 T
(drive name \050e.g., \322C:\134) 243 358.83 T
0 9 Q
(GEOWORKS) 342.59 358.83 T
0 10 Q
(\134) 398.09 358.83 T
0 9 Q
(DOCUMENT) 404.15 358.83 T
0 10 Q
(\134) 460.32 358.83 T
0 9 Q
(MEMOS) 466.38 358.83 T
0 10 Q
(\323\051.) 502.54 358.83 T
0 9 Q
(FRSPF_RETURN_FIRST_DIR) 180 340.83 T
7 10 Q
(FileResolveStandardPath\050\051) 243 329.83 T
0 F
( should not check whether the) 384.67 329.83 T
-0.3 (passed path actually exists; instead, it should assume that the) 243 318.83 P
-0.42 (path exists in the \336rst directory comprising the standard path,) 243 307.83 P
(and return accordingly) 243 296.83 T
(.) 347.62 296.83 T
2 F
(Include:) 99 278.83 T
0 F
(\336le.h) 180 278.83 T
81 262.48 531 267.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 262.48 531 267.49 R
7 X
0 0 0 1 0 0 0 K
V
50 266.48 609.01 266.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 254.48 T
2 F
(FileSetAttributes\050\051) 99 254.48 T
3 10 Q
(word) 99 240.82 T
4 F
(FileSetAttributes\050 /* returns error value */) 153 240.82 T
4 9 Q
(const char) 153 230.48 T
(* path,) 261 230.48 T
(/* file\325s path relative to current) 315 230.48 T
( * working directory */) 297 220.48 T
(FileAttrs) 153 210.48 T
(attr\051;) 261 210.48 T
(/* new attributes for the file */) 315 210.48 T
0 10 Q
-0.72 (This routine changes the standard) 180 192.82 P
0 9 Q
-0.65 (DOS) 338.43 192.82 P
0 10 Q
-0.72 ( attributes of a) 358.11 192.82 P
0 9 Q
-0.65 (DOS) 426.35 192.82 P
0 10 Q
-0.72 ( or) 446.02 192.82 P
0 9 Q
-0.65 (GEOS) 459.58 192.82 P
0 10 Q
-0.72 ( \336le. Note) 485.75 192.82 P
(that you can also change the attributes of a \336le by setting the extended) 180 181.32 T
(attribute) 180 169.82 T
0 9 Q
(FEA_FILE_A) 224.27 169.82 T
(TTR) 280.44 169.82 T
0 10 Q
(.) 298.94 169.82 T
2 F
(See Also:) 99 151.32 T
0 F
(FileAttrs, FileGetAttrs\050\051) 180 151.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 41
%%Page: "146" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(146) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(\336le.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(FileSetCurrentPath\050\051) 99 616.99 T
3 10 Q
(DiskHandle) 99 602.33 T
4 F
( FileSetCurrentPath\050) 159 602.33 T
4 9 Q
(DiskHandle) 153 591.99 T
(disk,) 261 591.99 T
(/* May be a standard path constant */) 315 591.99 T
(const char) 153 581.99 T
(* path\051;) 261 581.99 T
(/* path string, null-terminated */) 315 581.99 T
0 10 Q
-0.51 (This routine changes the current path. It is passed two parameters: The \336rst) 180 564.33 P
(is the handle of the disk containing the new current path \050this may be a) 180 552.83 T
(standard path constant\051. The second is a null-terminated path string. It is) 180 541.33 T
(speci\336ed with normal) 180 529.83 T
0 9 Q
(DOS) 282.23 529.83 T
0 10 Q
( conventions: directories are separated by) 301.9 529.83 T
(backslashes; a period \050\322.\323\051 indicates the current directory; and a pair of) 180 518.33 T
-0.56 (periods \050\322..\323\051 indicates the parent of the current directory) 180 506.83 P
-0.56 (. The string may not) 436.95 506.83 P
(contain wildcard characters.) 180 495.33 T
-0.22 (If) 180 476.83 P
6 F
-0.22 (disk) 189.96 476.83 P
0 F
-0.22 ( is a disk handle, the path is relative to the root directory of that disk;) 209.4 476.83 P
-0.31 (if) 180 465.33 P
6 F
-0.31 (disk) 188.95 465.33 P
0 F
-0.31 ( is a standard path constant, the path is relative to the standard path;) 208.39 465.33 P
(if it is null, the path is relative to the current working directory) 180 453.83 T
(.) 472.06 453.83 T
7 F
(FileSetCurrentPath\050\051) 180 442.33 T
0 F
( returns the disk handle associated with the new) 291.3 442.33 T
(current path; this may be a standard path constant. If) 180 430.83 T
7 F
(FileSetCurrentPath\050\051) 180 419.33 T
0 F
( fails, it returns a null handle.) 291.3 419.33 T
2 F
(Include:) 99 400.83 T
0 F
(\336le.h) 180 400.83 T
81 384.48 531 389.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 384.48 531 389.49 R
7 X
0 0 0 1 0 0 0 K
V
50 388.48 609.01 388.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 376.48 T
2 F
(FileSetDateAndT) 99 376.48 T
(ime\050\051) 194.8 376.48 T
3 10 Q
(word) 99 362.82 T
4 F
(FileSetDateAndTime\050 /* returns error */) 153 362.82 T
4 9 Q
(FileHandle) 153 352.48 T
(fh,) 261 352.48 T
(/* handle of open file */) 351 352.48 T
(FileDateAndTime) 153 342.48 T
(dateAndTime\051;) 261 342.48 T
(/* new modification time */) 351 342.48 T
0 10 Q
(This routine changes a \336le\325) 180 324.82 T
(s last-modi\336cation time-stamp. This routine can) 304.09 324.82 T
(be called on) 180 313.32 T
0 9 Q
(GEOS) 237.05 313.32 T
0 10 Q
( or non-) 263.22 313.32 T
0 9 Q
(GEOS) 298.77 313.32 T
0 10 Q
( \336les. Note that you can also change the) 324.94 313.32 T
(modi\336cation time of a \336le by changing the extended attribute) 180 301.82 T
0 9 Q
-0.08 (FEA_MODIFICA) 180 290.32 P
-0.08 (TION) 251.83 290.32 P
0 10 Q
-0.09 (. If unsuccessful, this routine returns an error and sets) 275.83 290.32 P
(the thread\325) 180 278.82 T
(s error value.) 230.19 278.82 T
2 F
(See Also:) 99 260.32 T
0 F
(FileDateAndT) 180 260.32 T
(ime, FileGetDateAndT) 245.69 260.32 T
(ime\050\051) 350.65 260.32 T
2 F
(Include:) 99 240.32 T
0 F
(\336le.h) 180 240.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 42
%%Page: "147" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(147) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileSetHandleExtAttributes\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileGetPathExtAttributes\050 /* returns error */) 153 620.33 T
4 9 Q
(FileHandle) 153 609.99 T
(fh,) 279 609.99 T
(/* handle of open file */) 333 609.99 T
(FileExtendedAttribute) 153 599.99 T
(attr,) 279 599.99 T
(/* attribute to get */) 333 599.99 T
(const void) 153 589.99 T
(* buffer,) 279 589.99 T
(/* attribute is read from here */) 333 589.99 T
(word) 153 579.99 T
(bufSize\051;) 279 579.99 T
(/* length of buffer in bytes */) 333 579.99 T
0 10 Q
(This routine sets one or more extended attributes of an open) 180 562.33 T
0 9 Q
(GEOS) 461.69 562.33 T
0 10 Q
( \336le. \050T) 487.86 562.33 T
(o) 519.54 562.33 T
(set the attributes of a \336le without opening it, call) 180 550.83 T
7 F
(FileSetPathExtAttributes\050\051) 180 539.33 T
0 F
(.\051 If a single attribute is speci\336ed, the) 320.73 539.33 T
-0.82 (attribute\325) 180 527.83 P
-0.82 (s new value will be read from the buffer passed. If several attributes) 223.16 527.83 P
(are to be changed,) 180 516.33 T
6 F
(attr) 266.68 516.33 T
0 F
( should be set to) 283.9 516.33 T
0 9 Q
(FEA_MUL) 361.51 516.33 T
(TIPLE) 406.35 516.33 T
0 10 Q
(, and) 434.52 516.33 T
6 F
(buffer) 460.27 516.33 T
0 F
( should) 487.48 516.33 T
-0.84 (point to an array of) 180 504.83 P
7 F
-0.87 (FileExtAttrDesc) 267.83 504.83 P
0 F
-0.84 ( structures. In this case,) 351.9 504.83 P
6 F
-0.84 (bufSize) 462.32 504.83 P
0 F
-0.84 ( should) 496.39 504.83 P
(be the number of structures in the buffer) 180 493.33 T
(, not the length of the buffer) 368.33 493.33 T
(.) 497.78 493.33 T
-0.43 (If) 180 474.83 P
7 F
-0.44 (FileSetHandleExtAttributes\050\051) 189.75 474.83 P
0 F
-0.43 ( is successful, it returns zero. Otherwise,) 343.26 474.83 P
(it sets the thread\325) 180 463.33 T
(s error value and returns one of the following error codes:) 260.94 463.33 T
0 9 Q
(ERROR_A) 180 444.83 T
(TTR_NOT_SUPPORTED) 223.5 444.83 T
0 10 Q
(The \336le system does not recognize the attribute constant) 243 433.83 T
(passed.) 243 422.83 T
0 9 Q
(ERROR_A) 180 404.83 T
(TTR_SIZE_MISMA) 223.5 404.83 T
(TCH) 304.66 404.83 T
0 10 Q
(The buffer passed was the wrong size for the attribute) 243 393.83 T
(speci\336ed.) 243 382.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 364.83 T
0 10 Q
(The caller does not have write-access to the \336le.) 243 353.83 T
0 9 Q
(ERROR_CANNOT_BE_SET) 180 335.83 T
0 10 Q
-0.02 (The extended attribute cannot be changed. Such attributes as) 243 324.83 P
0 9 Q
(FEA_SIZE) 243 313.83 T
0 10 Q
( and) 287.83 313.83 T
0 9 Q
(FEA_NAME) 310.8 313.83 T
0 10 Q
( cannot be changed with the) 363.12 313.83 T
7 F
(FileSet\311\050\051) 243 302.83 T
0 F
( routines.) 297.63 302.83 T
2 F
(T) 99 284.83 T
(ips and T) 104.93 284.83 T
(ricks:) 148.28 284.83 T
0 F
(Note that the only way to create or change a custom attribute is by passing) 180 284.83 T
0 9 Q
(FEA_MUL) 180 271.83 T
(TIPLE) 224.84 271.83 T
0 10 Q
(, and using a) 253.01 271.83 T
7 F
(FileExtAttrDesc) 315.25 271.83 T
0 F
( to describe the attribute.) 399.32 271.83 T
2 F
(See Also:) 99 251.83 T
0 F
(FileSetPathExtAttributes\050\051) 180 251.83 T
2 F
(Include:) 99 231.83 T
0 F
(\336le.h) 180 231.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 43
%%Page: "148" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(148) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileSetPathExtAttributes\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileSetPathExtAttributes\050) 153 620.33 T
4 9 Q
(const char) 153 609.99 T
(* path,) 279 609.99 T
(/* path relative to current) 333 609.99 T
( * working directory */) 315 599.99 T
(FileExtendedAttribute) 153 589.99 T
( attr,) 279 589.99 T
(/* attribute to get */) 333 589.99 T
(const void) 153 579.99 T
(* buffer,) 279 579.99 T
(/* attribute is read from here */) 333 579.99 T
(word) 153 569.99 T
(bufSize\051;) 279 569.99 T
(/* length of buffer in bytes */) 333 569.99 T
0 10 Q
(This routine sets one or more extended attributes of a \336le. If a single) 180 552.33 T
(attribute is speci\336ed, the attribute will be written in the buffer passed. If) 180 540.83 T
(several attributes are to be changed,) 180 529.33 T
6 F
(attr) 351.51 529.33 T
0 F
( should be set to) 368.73 529.33 T
0 9 Q
(FEA_MUL) 446.34 529.33 T
(TIPLE) 491.18 529.33 T
0 10 Q
(and) 180 517.83 T
6 F
(buffer) 200.19 517.83 T
0 F
( should point to an array of) 227.4 517.83 T
7 F
(FileExtAttrDesc) 355.75 517.83 T
0 F
( structures. In this) 439.82 517.83 T
-0.46 (case,) 180 506.33 P
6 F
-0.46 (bufSize) 204.73 506.33 P
0 F
-0.46 ( should be the number of structures in the buffer) 238.8 506.33 P
-0.46 (, not the length) 459.3 506.33 P
(of the buffer) 180 494.83 T
(.) 235.92 494.83 T
-0.05 (If) 180 476.33 P
7 F
-0.05 (FileSetPathExtAttributes\050\051) 190.13 476.33 P
0 F
-0.05 ( is successful, it returns zero. Otherwise, it) 330.86 476.33 P
(sets the thread\325) 180 464.83 T
(s error value and returns one of the following error codes:) 251.12 464.83 T
0 9 Q
(ERROR_A) 180 446.33 T
(TTR_NOT_SUPPORTED) 223.5 446.33 T
0 10 Q
(The \336le system does not recognize the attribute constant) 243 435.33 T
(passed.) 243 424.33 T
0 9 Q
(ERROR_A) 180 406.33 T
(TTR_SIZE_MISMA) 223.5 406.33 T
(TCH) 304.66 406.33 T
0 10 Q
(The buffer passed was the wrong size for the attribute) 243 395.33 T
(speci\336ed.) 243 384.33 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 366.33 T
7 10 Q
(FileSetPathExtAttributes\050\051) 243 355.33 T
0 F
( returns this if any geode) 383.73 355.33 T
(\050including the caller\051 has the \336le open with \322deny-write\323) 243 344.33 T
(exclusive access, or if the \336le is not writable.) 243 333.33 T
0 9 Q
(ERROR_CANNOT_BE_SET) 180 315.33 T
0 10 Q
-0.02 (The extended attribute cannot be changed. Such attributes as) 243 304.33 P
0 9 Q
(FEA_SIZE) 243 293.33 T
0 10 Q
( and) 287.83 293.33 T
0 9 Q
(FEA_NAME) 310.8 293.33 T
0 10 Q
( cannot be changed with the) 363.12 293.33 T
7 F
(FileSet\311ExtAttributes\050\051) 243 282.33 T
0 F
( routines.) 368.92 282.33 T
2 F
(T) 99 264.33 T
(ips and T) 104.93 264.33 T
(ricks:) 148.28 264.33 T
0 F
(Note that the only way to create or change a custom attribute is by passing) 180 264.33 T
0 9 Q
(FEA_MUL) 180 251.33 T
(TIPLE) 224.84 251.33 T
0 10 Q
(, and using a) 253.01 251.33 T
7 F
(FileExtAttrDesc) 315.25 251.33 T
0 F
( to describe the attribute.) 399.32 251.33 T
2 F
(See Also:) 99 231.33 T
0 F
(FileSetHandleExtAttributes\050\051) 180 231.33 T
2 F
(Include:) 99 211.33 T
0 F
(\336le.h) 180 211.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 44
%%Page: "149" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(149) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileSetStandardPath\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(FileSetStandardPath\050) 153 621.33 T
4 9 Q
(StandardPath path\051;) 153 610.99 T
(/* StandardPath to set */) 279 610.99 T
0 10 Q
(This routine changes the current working directory to one of the system\325) 180 593.33 T
(s) 513.15 593.33 T
(StandardPath directories. Pass a standard path.) 180 581.83 T
2 F
(Include:) 99 563.33 T
0 F
(\336le.h) 180 563.33 T
81 546.98 531 551.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 546.98 531 551.99 R
7 X
0 0 0 1 0 0 0 K
V
50 550.98 609.01 550.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 538.98 T
2 F
(FileSize\050\051) 99 538.98 T
3 10 Q
(dword) 99 525.32 T
4 F
(FileSize\050) 153 525.32 T
4 9 Q
(FileHandle fh\051;) 153 514.98 T
(/* handle of open file */) 261 514.98 T
0 10 Q
(This routine returns the size of the open \336le speci\336ed.) 180 497.32 T
2 F
(Include:) 99 478.82 T
0 F
(\336le.h) 180 478.82 T
81 462.48 531 467.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 462.48 531 467.48 R
7 X
0 0 0 1 0 0 0 K
V
50 466.48 609.01 466.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 454.48 T
2 F
(FileT) 99 454.48 T
(runcate\050\051) 126.35 454.48 T
3 10 Q
(word) 99 440.81 T
4 F
(FileTruncate\050) 153 440.81 T
4 9 Q
(FileHandle) 153 430.48 T
(fh,) 261 430.48 T
(/* handle of open file */) 315 430.48 T
(dword) 153 420.48 T
(offset\051;) 261 420.48 T
(/* offset at which to truncate */) 315 420.48 T
0 10 Q
(This routine truncates the speci\336ed \336le at the passed offset. The) 180 402.81 T
6 F
(offset) 479.47 402.81 T
0 F
(parameter can also be thought of as the desired \336le size.) 180 391.31 T
2 F
(Include:) 99 372.81 T
0 F
(\336le.h) 180 372.81 T
81 356.47 531 361.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 356.47 531 361.48 R
7 X
0 0 0 1 0 0 0 K
V
50 360.47 609.01 360.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 348.47 T
2 F
(FileUnlockRecord\050\051) 99 348.47 T
3 10 Q
(word) 99 334.8 T
4 F
(FileUnlockRecord\050 /* returns error */) 153 334.8 T
4 9 Q
(FileHandle) 153 324.47 T
(fh,) 261 324.47 T
(/* handle of open file) 333 324.47 T
(dword) 153 314.47 T
(filePos,) 261 314.47 T
(/* Release lock that starts here */) 333 314.47 T
(dword) 153 304.47 T
(regLength\051;) 261 304.47 T
(/* and is this long */) 333 304.47 T
0 10 Q
-0.2 (This routine releases a lock on a part of a byte-\336le. The lock must have been) 180 286.8 P
(previously placed with) 180 275.3 T
7 F
(FileLockRecord\050\051) 286.86 275.3 T
0 F
(.) 377.8 275.3 T
2 F
(See Also:) 99 256.8 T
0 F
(FileLockRecord\050\051, HandleV\050\051) 180 256.8 T
2 F
(Include:) 99 236.8 T
0 F
(\336le.h) 180 236.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 45
%%Page: "150" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(150) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(FileW) 99 634.99 T
(rite\050\051) 130.79 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(FileWrite\050 /* sets thread\325s error value */) 153 620.33 T
4 9 Q
(FileHandle) 153 609.99 T
(fh,) 261 609.99 T
(/* handle of open file */) 333 609.99 T
(const void) 153 599.99 T
(* buf,) 261 599.99 T
(/* Copy from here into file */) 333 599.99 T
(word) 153 589.99 T
(count,) 261 589.99 T
(/* # of bytes to copy */) 333 589.99 T
(Boolean) 153 579.99 T
(noErrorFlag\051;) 261 579.99 T
(/* Set if can\325t handle errors */) 333 579.99 T
0 10 Q
-0.06 (This routine copies a speci\336ed number of bytes from a buffer to the \336le. The) 180 562.33 P
(bytes are written starting with the current position in the \336le; any data) 180 550.83 T
-0.55 (already at that location will be overwritten.) 180 539.33 P
7 F
-0.57 (FileW) 380.25 539.33 P
-0.57 (rite\050\051) 409.69 539.33 P
0 F
-0.55 ( returns the number) 436.36 539.33 P
(of bytes written. If) 180 527.83 T
7 F
(FileW) 268.34 527.83 T
(rite\050\051) 297.78 527.83 T
0 F
( could not write all the data \050e.g. if the disk) 324.45 527.83 T
(ran out of space\051, it will set the thread\325) 180 516.33 T
(s error value to) 358.36 516.33 T
0 9 Q
(ERROR_SHORT_READ_WRITE) 180 504.83 T
0 10 Q
( and return the number of bytes that were) 317.15 504.83 T
-0.12 (written. If it could not write the data to the \336le at all \050e.g. if you do not have) 180 493.33 P
(write-access to the \336le\051, it will return -1 and set the thread\325) 180 481.83 T
(s error value to) 452.62 481.83 T
0 9 Q
(ERROR_ACCESS_DENIED) 180 470.33 T
0 10 Q
(. In any event, the \336le position will be changed to) 297.32 470.33 T
(the \336rst byte after the ones written.) 180 458.83 T
(If the argument) 180 440.33 T
6 F
(noErrorFlag) 256.11 440.33 T
0 F
( is set to) 313.87 440.33 T
6 F
(true) 355.18 440.33 T
0 F
( \050i.e. non-zero\051,) 373.69 440.33 T
7 F
(FileW) 444.98 440.33 T
(rite\050\051) 474.42 440.33 T
0 F
( will) 501.09 440.33 T
(fatal-error if an error occurs.) 180 428.83 T
2 F
(W) 99 410.33 T
(arnings:) 108.07 410.33 T
0 F
(Pass) 180 410.33 T
6 F
(noErrorFlag) 204.27 410.33 T
(true) 264.81 410.33 T
0 F
( only during debugging.) 283.32 410.33 T
2 F
(Include:) 99 390.33 T
0 F
(\336le.h) 180 390.33 T
81 373.98 531 378.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 373.98 531 378.99 R
7 X
0 0 0 1 0 0 0 K
V
50 377.98 609.01 377.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 365.98 T
2 F
(FormatIDFromManufacturerAndT) 99 365.98 T
(ype) 287.45 365.98 T
3 10 Q
(dword) 99 352.32 T
4 F
(FormatIDFromManufacturerAndType\050mfr, type\051;) 153 352.32 T
4 9 Q
(ManufacturerIDs) 153 341.98 T
(mfr;) 279 341.98 T
(ClipboardItemFormat) 153 331.98 T
(type;) 279 331.98 T
0 10 Q
(This macro takes a manufacturer) 180 314.32 T
0 9 Q
(ID) 337.24 314.32 T
0 10 Q
( and a format type \050e.g.) 347.9 314.32 T
0 9 Q
(CIF_TEXT) 457.92 314.32 T
0 10 Q
(\051 and) 503.43 314.32 T
(combines them into a dword argument of the type) 180 302.82 T
7 F
(ClipboardItemFormat) 180 291.32 T
7 9 Q
(ID) 294.82 291.32 T
0 10 Q
(.) 306.31 291.32 T
81 276.48 531 281.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 276.48 531 281.48 R
7 X
0 0 0 1 0 0 0 K
V
50 280.48 609.01 280.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 268.47 T
2 F
(free\050\051) 99 268.47 T
3 10 Q
(void) 99 253.81 T
4 F
(free\050) 153 253.81 T
4 9 Q
(void * blockPtr\051;) 153 243.47 T
(/* address of memory to free */) 297 243.47 T
0 10 Q
-0.85 (The) 180 225.81 P
7 F
-0.87 (malloc\050\051) 199.71 225.81 P
0 F
-0.85 ( family of routines is provided for Standard C compatibility) 241.94 225.81 P
-0.85 (. The) 506.57 225.81 P
(kernel will allocate a \336xed block to satisfy the geode\325) 180 214.31 T
(s) 421.72 214.31 T
7 F
(malloc\050\051) 429.13 214.31 T
0 F
( requests; it) 471.36 214.31 T
-0.33 (will allocate memory from this block. When the block is \336lled, it will allocate) 180 202.81 P
(another \336xed malloc-block. When all the memory in the block is freed, the) 180 191.31 T
(memory manager will automatically free the block.) 180 179.81 T
(When a geode is \336nished with some memory it requested from) 180 161.31 T
7 F
(malloc\050\051) 470.02 161.31 T
0 F
(, it) 512.25 161.31 T
-0.54 (should free the memory) 180 149.81 P
-0.54 (. That makes it easier for) 286.71 149.81 P
7 F
-0.56 (malloc\050\051) 402.77 149.81 P
0 F
-0.54 ( to satisfy memory) 445 149.81 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 46
%%Page: "151" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(151) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.01 (request. It can free the memory by passing the address which was returned) 180 641.33 P
-0.56 (by) 180 629.83 P
7 F
-0.57 (malloc\050\051) 193.15 629.83 P
0 F
-0.56 ( \050or) 235.38 629.83 P
7 F
-0.57 (calloc\050\051) 252.61 629.83 P
0 F
-0.56 ( or) 290.77 629.83 P
7 F
-0.57 (realloc\050\051) 304.66 629.83 P
0 F
-0.56 (\051 when the memory was allocated. All of) 348.19 629.83 P
(the memory will be freed.) 180 618.33 T
(The memory must be in a malloc-block assigned to the geode calling) 180 599.83 T
7 F
(free\050\051) 496.35 599.83 T
0 F
(.) 524.69 599.83 T
-0.01 (If you want to free memory in another geode\325) 180 588.33 P
-0.01 (s malloc-block, call) 386.76 588.33 P
7 F
-0.01 (GeoFree\050\051) 476.37 588.33 P
0 F
-0.01 (.) 528.22 588.33 P
2 F
(Include:) 99 569.83 T
0 F
(stdlib.h) 180 569.83 T
2 F
(W) 99 549.83 T
(arnings:) 108.07 549.83 T
0 F
-0.53 (Pass exactly the same address as the one returned to you when you allocated) 180 549.83 P
(the memory) 180 536.83 T
(. If you pass a different address,) 234.26 536.83 T
7 F
(free\050\051) 385.01 536.83 T
0 F
( will take unpredictable) 413.35 536.83 T
(actions, including possibly erasing other memory or crashing the system.) 180 523.83 T
2 F
(See Also:) 99 503.83 T
0 F
(calloc\050\051, malloc\050\051, GeoFree\050\051, realloc\050\051) 180 503.83 T
81 487.49 531 492.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 487.49 531 492.5 R
7 X
0 0 0 1 0 0 0 K
V
50 491.49 609.01 491.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 479.49 T
2 F
(FractionOf\050\051) 99 479.49 T
3 10 Q
(word) 99 464.83 T
4 F
(FractionOf\050) 153 464.83 T
4 9 Q
(WWFixedAsDWord) 153 454.49 T
(wwf\051;) 261 454.49 T
0 10 Q
(This macro returns the fractional portion of a) 180 436.83 T
7 F
(WWFixedAsDW) 392.6 436.83 T
(ord) 471.84 436.83 T
0 F
( value.) 489.81 436.83 T
2 F
(Include:) 99 418.33 T
0 F
(geos.h) 180 418.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 47
%%Page: "152" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(152) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 48
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 48
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Helvetica-Bold
%%+ Courier-Bold
%%+ Courier
%%+ Courier-Oblique
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%EOF
