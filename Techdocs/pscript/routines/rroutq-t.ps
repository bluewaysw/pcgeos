%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Courier-Bold FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /NewCenturySchlbk-Bold FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "361" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(361) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 R
7 X
0 0 0 1 0 0 0 K
V
50 624.99 609.01 624.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 612.99 T
2 F
(qsort) 99 612.99 T
3 10 Q
(extern void _pascal qsort\050) 99 598.33 T
3 9 Q
(void *array,) 153 587.99 T
(word count,) 153 577.99 T
(word elementSize,) 153 567.99 T
(PCB\050int, compare, \050const void *, const void *\051\051\051;) 153 557.99 T
0 10 Q
(This is a standard quicksort routine. The callback routine must be decared) 180 540.33 T
(_pascal.) 180 528.83 T
81 513.98 531 518.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 513.98 531 518.99 R
7 X
0 0 0 1 0 0 0 K
V
50 517.98 609.01 517.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 505.98 T
2 F
(QueueGetInfo\050\051) 99 505.98 T
4 10 Q
(word) 99 491.32 T
3 F
(QueueGetInfo\050) 153 491.32 T
3 9 Q
(QueueHandle qh\051;) 153 480.98 T
(/* queue to query */) 279 480.98 T
0 10 Q
(This routine returns information about a speci\336c event queue. Pass the) 180 463.32 T
-0.48 (handle of the queue; for information about the current process\325 queue, pass a) 180 451.82 P
(null handle. This routine returns the number of events \050or messages\051) 180 440.32 T
(currently in the queue.) 180 428.82 T
2 F
(Include:) 99 410.32 T
0 F
(geode.h) 180 410.32 T
81 393.98 531 398.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 393.98 531 398.98 R
7 X
0 0 0 1 0 0 0 K
V
50 397.98 609.01 397.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 385.98 T
2 F
(QueueGetMessage\050\051) 99 385.98 T
4 10 Q
(EventHandle) 99 372.31 T
3 F
( QueueGetMessage\050) 165 372.31 T
3 9 Q
(QueueHandle qh\051;) 153 361.98 T
(/* queue to query */) 279 361.98 T
0 10 Q
(This routine returns the next message on the given queue, blocking if the) 180 344.31 T
(queue is empty) 180 332.81 T
(. When a new message is added to the empty queue, this) 248.9 332.81 T
-0.45 (routine will unblock the thread and return the message. This routine is used) 180 321.31 P
(almost exclusively by the kernel.) 180 309.81 T
2 F
(Include:) 99 291.31 T
0 F
(geode.h) 180 291.31 T
81 274.97 531 279.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 274.97 531 279.98 R
7 X
0 0 0 1 0 0 0 K
V
50 278.97 609.01 278.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 266.97 T
2 F
(QueuePostMessage\050\051) 99 266.97 T
4 10 Q
(void) 99 253.3 T
3 F
(QueuePostMessage\050) 153 253.3 T
3 9 Q
(QueueHandle) 153 242.97 T
(qh,) 261 242.97 T
(/* queue to add event to */) 315 242.97 T
(EventHandle) 153 232.97 T
(event,) 261 232.97 T
(/* event to be added to queue */) 315 232.97 T
(MessageFlags) 153 222.97 T
(flags\051;) 261 222.97 T
(/* MF_INSERT_AT_FRONT or zero */) 315 222.97 T
0 10 Q
-0.31 (This routine adds the speci\336ed) 180 205.3 P
5 F
-0.31 (event) 323.07 205.3 P
0 F
-0.31 ( to the passed) 346.77 205.3 P
5 F
-0.31 (queue) 411.82 205.3 P
0 F
-0.31 (. The only valid \337ag) 438.47 205.3 P
(for this routine is) 180 193.8 T
0 9 Q
(MF_INSERT_A) 263.15 193.8 T
(T_FRONT) 328.32 193.8 T
0 10 Q
(, which will put the event in the) 370.74 193.8 T
(\336rst spot of the queue.) 180 182.3 T
2 F
(Include:) 99 163.8 T
0 F
(geode.h) 180 163.8 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
81 144 531 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "361" 1
%%Page: "362" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(362) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(RangeEnum\050\051) 99 634.99 T
4 10 Q
(Boolean) 99 621.33 T
3 F
(RangeEnum\050) 153 621.33 T
3 9 Q
(CellFunctionParameters) 153 610.99 T
(* cfp,) 279 610.99 T
(/* cell function parameters */) 351 610.99 T
(RangeEnumParams) 153 600.99 T
(* params\051;) 279 600.99 T
(/* special other parameters */) 351 600.99 T
0 10 Q
(This routine calls a callback routine for each cell in a speci\336ed range. This) 180 583.33 T
-0.1 (routine is passed pointers to two structures, both of which are shown below) 180 571.83 P
-0.1 (.) 525.54 571.83 P
(It returns) 180 560.33 T
5 F
(false) 228.14 560.33 T
0 F
( if all the cells were processed,) 249.42 560.33 T
5 F
(true) 392.21 560.33 T
0 F
( if any of the cells caused) 410.72 560.33 T
(the routine to abort before the end of the range was reached.) 180 548.83 T
(Callback Parameters:) 99 530.33 T
(The callback routine, which must be declared _pascal, receives a) 180 512.33 T
6 F
(RangeEnumCallbackParams) 180 500.83 T
0 F
( structure, which has the following) 329.26 500.83 T
(de\336nition:) 180 489.33 T
3 9 Q
(typedef struct {) 216 474.49 T
(RangeEnumParams) 252 464.49 T
(*RECP_params;) 360 464.49 T
(/* see below */) 432 464.49 T
(/* current row, column, and cell data of cell */) 232.2 454.49 T
(word) 252 444.49 T
(RECP_row;) 360 444.49 T
(word) 252 434.49 T
(RECP_column;) 360 434.49 T
(word) 252 424.49 T
(RECP_cellData;) 360 424.49 T
(} RangeEnumCallbackParams;) 216 414.49 T
0 10 Q
(The callback routine can do anything with the cell information. It should) 180 396.83 T
(return) 180 385.33 T
5 F
(false) 212.77 385.33 T
0 F
(after successfully processing the cell; if an error occurs, or if it) 236.83 385.33 T
(wants to abort the) 180 373.83 T
6 F
(RangeEnum\050\051) 267.43 373.83 T
0 F
(, it should return) 339.09 373.83 T
5 F
(true) 420.76 373.83 T
0 F
(.) 439.27 373.83 T
2 F
(Structures:) 99 355.33 T
0 F
(The) 180 355.33 T
6 F
(CellFunctionParameters) 200.56 355.33 T
0 F
( structure has the following de\336nition:) 329.08 355.33 T
3 9 Q
(typedef struct {) 216 340.99 T
(CellFunctionParameterFlags) 252 330.99 T
(CFP_flags;) 396 330.99 T
(/* can have the following flags:) 288 320.99 T
( * CFPF_DIRTY) 288 310.99 T
( *) 288 300.99 T
(set parameter block dirty) 324 300.99 T
( * CFPF_NO_FREE_COUNT) 288 290.99 T
( *) 288 280.99 T
(counts the number of calls to) 324 280.99 T
( *) 288 270.99 T
(a non-special RangeEnum\050\051 */) 324 270.99 T
(VMFileHandle) 252 260.99 T
(CFP_file;) 360 260.99 T
(/* VM file handle of cell file */) 288 250.99 T
(VMBlockHandle) 252 240.99 T
(CFP_rowBlocks[N_ROW_BLOCKS];) 360 240.99 T
(/* array of handles to grouped row blocks */) 288 230.99 T
(} CellFunctionParameters;) 216 220.99 T
2 10 Q
(Include:) 99 203.33 T
0 F
(cell.h) 180 203.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "362" 2
%%Page: "363" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(363) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(RangeExists\050\051) 99 634.99 T
4 10 Q
(Boolean) 99 620.33 T
3 F
(RangeExists\050 /* returns non-zero if there are cells in range */) 153 620.33 T
3 9 Q
(CellFunctionParameters) 153 609.99 T
(* cfp,) 279 609.99 T
(/* see RangeEnum\050\051 */) 351 609.99 T
(word) 153 599.99 T
(firstRow,) 279 599.99 T
(/* range delimiters */) 351 599.99 T
(byte) 153 589.99 T
(firstColumn,) 279 589.99 T
(word) 153 579.99 T
(lastRow,) 279 579.99 T
(byte) 153 569.99 T
(lastColumn\051;) 279 569.99 T
0 10 Q
(This routine returns) 180 552.33 T
5 F
(true) 277.22 552.33 T
0 F
( if there are any cells in the speci\336ed range. It is) 295.73 552.33 T
-0.52 (passed a pointer to the) 180 540.83 P
6 F
-0.53 (CellFunctionParameters) 285.4 540.83 P
0 F
-0.52 ( structure for the cell \336le,) 413.92 540.83 P
-0.1 (as well as the indices of the \336rst and last row) 180 529.33 P
-0.1 (, and the \336rst and last column,) 386.84 529.33 P
(of the range to check.) 180 517.83 T
2 F
(Include:) 99 499.33 T
0 F
(cell.h) 180 499.33 T
81 482.98 531 487.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 482.98 531 487.99 R
7 X
0 0 0 1 0 0 0 K
V
50 486.98 609.01 486.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 474.98 T
2 F
(RangeInsert\050\051) 99 474.98 T
4 10 Q
(void) 99 460.32 T
3 F
(RangeInsert\050) 153 460.32 T
3 9 Q
(CellFunctionParameters) 153 449.98 T
(* cfp,) 279 449.98 T
(/* see RangeEnum\050\051 */) 351 449.98 T
(RangeInsertParams) 153 439.98 T
(* rep\051;) 279 439.98 T
(/* parameters structure */) 351 439.98 T
0 10 Q
(This routine shifts existing cells to make room for new ones. \050It does not) 180 422.32 T
(actually create new cells.\051 Which cells are shifted, and in what direction, is) 180 410.82 T
-0.18 (speci\336ed by the) 180 399.32 P
6 F
-0.18 (RangeInsertParams\050\051) 253.55 399.32 P
0 F
-0.18 ( structure. This structure has three) 365.4 399.32 P
(\336elds:) 180 387.82 T
5 9 Q
(RIP_) 180 369.32 T
5 10 Q
(bounds) 200.84 369.32 T
0 F
(A) 243 369.32 T
6 F
(Rectangle) 253 369.32 T
0 F
( structure which speci\336es which cells should be) 305.04 369.32 T
-0.01 (shifted. The cells currently in this range will be shifted across) 243 358.32 P
-0.09 (or down, depending on the value of) 243 347.32 P
5 9 Q
-0.08 (RIP_) 406.27 347.32 P
5 10 Q
-0.09 (delta) 427.1 347.32 P
0 F
-0.09 (; the shifted cells) 450.24 347.32 P
-0.36 (displace more cells, and so on, to the edge of the visible portion) 243 336.32 P
(of the cell \336le. T) 243 325.32 T
(o insert an entire row \050which is much faster) 315.98 325.32 T
(than inserting a partial row\051, set) 243 314.32 T
5 9 Q
(RIP) 397.1 314.32 T
5 10 Q
(_bounds.) 413.43 314.32 T
5 9 Q
(R) 454.55 314.32 T
5 10 Q
(_left) 461.21 314.32 T
0 F
(= 0 and) 483.61 314.32 T
5 9 Q
(RIP) 243 303.32 T
5 10 Q
(_bounds.) 259.33 303.32 T
5 9 Q
(R) 300.45 303.32 T
5 10 Q
(_right) 307.11 303.32 T
(=) 337.66 303.32 T
0 9 Q
(LARGEST_COLUMN) 346.5 303.32 T
5 10 Q
(.) 437.85 303.32 T
5 9 Q
(RIP_) 180 285.32 T
5 10 Q
(delta) 200.84 285.32 T
0 F
(A) 243 285.32 T
6 F
(Point) 253 285.32 T
0 F
( structure which speci\336es how far the cells should be) 281.51 285.32 T
(shifted and in which direction. If the range of cells is to be) 243 274.32 T
(shifted horizontally) 243 263.32 T
(,) 332.26 263.32 T
5 9 Q
(RIP_) 337.82 263.32 T
5 10 Q
(delta.) 358.65 263.32 T
5 9 Q
(P) 384.58 263.32 T
5 10 Q
(_x) 390.58 263.32 T
0 F
( should specify how far the) 400.58 263.32 T
(cells should be shifted over) 243 252.32 T
(, and) 366.71 252.32 T
5 9 Q
(RIP_) 392.46 252.32 T
5 10 Q
(delta.) 413.3 252.32 T
5 9 Q
(P) 439.21 252.32 T
5 10 Q
(_y) 445.22 252.32 T
0 F
( should be zero.) 455.22 252.32 T
(If the cells are to be shifted vertically) 243 241.32 T
(,) 413.94 241.32 T
5 9 Q
(RIP_) 419.5 241.32 T
5 10 Q
(delta.) 440.33 241.32 T
5 9 Q
(P) 466.26 241.32 T
5 10 Q
(_y) 472.26 241.32 T
0 F
( should) 482.26 241.32 T
(specify how far the cells should be shifted over) 243 230.32 T
(, and) 456.71 230.32 T
5 9 Q
(RIP_) 243 219.32 T
5 10 Q
(delta.) 263.83 219.32 T
5 9 Q
(P) 289.76 219.32 T
5 10 Q
(_x) 295.76 219.32 T
0 F
( should be zero.) 305.76 219.32 T
5 9 Q
(RIP_) 180 201.32 T
5 10 Q
(cfp) 200.84 201.32 T
0 F
(This is the address of the) 243 201.32 T
6 F
(CellFunctionParameters) 362.09 201.32 T
0 F
(structure. Y) 243 190.32 T
(ou don\325) 297.44 190.32 T
(t have to initialize this; the routine will do) 330.04 190.32 T
(so automatically) 243 179.32 T
(.) 318.02 179.32 T
2 F
(Include:) 99 161.32 T
0 F
(cell.h) 180 161.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "363" 3
%%Page: "364" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(364) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(W) 99 641.33 T
(arnings:) 108.07 641.33 T
0 F
(If cells are shifted off the \322visible\323 portion of the cell \336le, you will be unable) 180 641.33 T
(to access them by row or column numbers; but they will not be deleted. For) 180 628.33 T
-0.47 (this reason, you should free all such cells) 180 615.33 P
5 F
-0.47 (before) 368.26 615.33 P
0 F
-0.47 ( calling) 395.47 615.33 P
6 F
-0.49 (RangeInsert\050\051) 431.02 615.33 P
0 F
-0.47 (. \050Y) 503.24 615.33 P
-0.47 (ou) 517.58 615.33 P
-0.65 (can \336nd out if there are any cells at the edges by calling) 180 602.33 P
6 F
-0.67 (RangeExists\050\051) 432.12 602.33 P
0 F
-0.65 (.\051 For) 504.52 602.33 P
(an explanation of the \322visible\323 and \322scratch-pad\323 portions of a cell \336le, see) 180 589.33 T
(Section) 180 576.33 T
(19.4.1 of the Concepts book.) 216.67 576.33 T
81 559.99 531 565 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 559.99 531 565 R
7 X
0 0 0 1 0 0 0 K
V
50 563.99 609.01 563.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 551.99 T
2 F
(realloc\050\051) 99 551.99 T
4 10 Q
(void *) 99 537.33 T
3 F
(realloc\050) 153 537.33 T
3 9 Q
(void *) 153 526.99 T
(blockPtr,) 261 526.99 T
(/* address of memory to resize */) 333 526.99 T
(size_t) 153 516.99 T
(newSize\051;) 261 516.99 T
(/* New size of memory in bytes */) 333 516.99 T
0 10 Q
(The) 180 499.33 T
6 F
(malloc\050\051) 200.56 499.33 T
0 F
( family of routines is provided for Standard C compatibility) 242.79 499.33 T
(. If) 515.04 499.33 T
-0.5 (a geode needs a small amount of \336xed memory) 180 487.83 P
-0.5 (, it can call one of the routines.) 389.95 487.83 P
-0.65 (The kernel will allocate a \336xed block to satisfy the geode\325) 180 476.33 P
-0.65 (s) 435.73 476.33 P
6 F
-0.68 (malloc\050\051) 442.48 476.33 P
0 F
-0.65 ( requests;) 484.71 476.33 P
(it will allocate memory from this block. When the block is \336lled, it will) 180 464.83 T
(allocate another \336xed malloc-block. When all the memory in the block is) 180 453.33 T
(freed, the memory manager will automatically free the block.) 180 441.83 T
(If a geode needs to change the size of a section of memory assigned to it by) 180 423.33 T
-0.71 (the) 180 411.83 P
6 F
-0.73 (malloc\050\051) 197.07 411.83 P
0 F
-0.71 ( family of routines, it should use) 239.3 411.83 P
6 F
-0.73 (realloc\050\051) 386.21 411.83 P
0 F
-0.71 (.) 429.74 411.83 P
6 F
-0.73 (realloc\050\051) 434.6 411.83 P
0 F
-0.71 ( resizes the) 478.12 411.83 P
(piece of memory speci\336ed and returns the memory\325) 180 400.33 T
(s new base address.) 414.81 400.33 T
-0.51 (If the new size is smaller then the previous size, bytes will be cut off from the) 180 381.83 P
-0.8 (end. The request is guaranteed to succeed. Furthermore, the memory will not) 180 370.33 P
(be moved; the address returned will be the same as the address passed.) 180 358.83 T
-0.34 (If the new size is larger than the previous size,) 180 340.33 P
6 F
-0.35 (realloc\050\051) 395.46 340.33 P
0 F
-0.34 ( may move the data) 438.99 340.33 P
(to accommodate the request. If so, it will return the new address. The new) 180 328.83 T
(memory added will) 180 317.33 T
5 F
(not) 270.94 317.33 T
0 F
( be zero-initialized. If) 285.57 317.33 T
6 F
(realloc\050\051) 386.87 317.33 T
0 F
( cannot ful\336ll the) 430.4 317.33 T
(request, it will return a null pointer) 180 305.83 T
(, and the memory will not be altered.) 345.02 305.83 T
(Resizing a stretch of memory down to zero bytes is exactly the same as) 180 287.33 T
-0.11 (freeing it with) 180 275.83 P
6 F
-0.12 (free\050\051) 248.38 275.83 P
0 F
-0.11 (. If you pass a null address to) 276.72 275.83 P
6 F
-0.12 (realloc\050\051) 413.99 275.83 P
0 F
-0.11 (, it will allocate) 457.52 275.83 P
(the memory the same way) 180 264.33 T
6 F
(malloc\050\051) 304.28 264.33 T
0 F
( does.) 346.51 264.33 T
(The memory must be in a malloc-block assigned to the geode calling) 180 245.83 T
6 F
-0.33 (realloc\050\051) 180 234.33 P
0 F
-0.32 (. If you want to resize memory in another geode\325) 223.53 234.33 P
-0.32 (s malloc-block, call) 442.32 234.33 P
6 F
(GeoReAlloc\050\051) 180 222.83 T
0 F
(.) 248.15 222.83 T
2 F
(W) 99 204.33 T
(arnings:) 108.07 204.33 T
0 F
-0.53 (Pass exactly the same address as the one returned to you when you allocated) 180 204.33 P
(the memory) 180 191.33 T
(. If you pass a different address, the results are unde\336ned.) 234.26 191.33 T
2 F
(See Also:) 99 171.33 T
0 F
(calloc\050\051, free\050\051, malloc\050\051, GeoReAlloc\050\051) 180 171.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "364" 4
%%Page: "365" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(365) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SerialClose\050\051) 99 634.99 T
4 10 Q
(StreamError) 99 620.33 T
3 F
( SerialClose\050) 165 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(SerialUnit) 153 599.99 T
(unit,) 261 599.99 T
(Boolean) 153 589.99 T
(linger\051;) 261 589.99 T
0 10 Q
(Close the stream to a serial port.) 180 572.33 T
81 557.48 531 562.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 557.48 531 562.49 R
7 X
0 0 0 1 0 0 0 K
V
50 561.48 609.01 561.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 549.48 T
2 F
(SerialCloseW) 99 549.48 T
(ithoutReset\050\051) 175.58 549.48 T
4 10 Q
(StreamError) 99 534.82 T
3 F
( SerialClose\050) 165 534.82 T
3 9 Q
(GeodeHandle) 153 524.48 T
(driver,) 261 524.48 T
(SerialUnit) 153 514.48 T
(unit,) 261 514.48 T
(Boolean) 153 504.48 T
(linger\051;) 261 504.48 T
0 10 Q
(Close the stream to a serial port, without actually resetting the port.) 180 486.82 T
81 471.98 531 476.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.98 531 476.98 R
7 X
0 0 0 1 0 0 0 K
V
50 475.98 609.01 475.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 463.98 T
2 F
(SerialFlush\050\051) 99 463.98 T
4 10 Q
(StreamError) 99 449.31 T
3 F
( SerialFlush\050) 165 449.31 T
3 9 Q
(GeodeHandle) 153 438.98 T
(driver,) 261 438.98 T
(SerialUnit) 153 428.98 T
(unit,) 261 428.98 T
(StreamRoles) 153 418.98 T
(roles\051;) 261 418.98 T
0 10 Q
-0.42 (Flush all data pending in a serial port\325) 180 401.31 P
-0.42 (s input or output buffer \050depending on) 354.51 401.31 P
(the value of) 180 389.81 T
5 F
(roles) 236.86 389.81 T
0 F
(\051.) 258.51 389.81 T
81 374.97 531 379.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 374.97 531 379.98 R
7 X
0 0 0 1 0 0 0 K
V
50 378.97 609.01 378.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 366.97 T
2 F
(SerialGetFormat\050\051) 99 366.97 T
4 10 Q
(StreamError) 99 352.3 T
3 F
( SerialGetFormat\050) 165 352.3 T
3 9 Q
(GeodeHandle) 153 341.97 T
(driver,) 261 341.97 T
(SerialUnit) 153 331.97 T
(unit,) 261 331.97 T
(SerialFormat *) 153 321.97 T
(format,) 261 321.97 T
(SerialMode *) 153 311.97 T
(mode,) 261 311.97 T
(SerialBaud *) 153 301.97 T
(baud\051;) 261 301.97 T
0 10 Q
(Get the format of a stream to a speci\336ed serial port.) 180 284.3 T
81 257.46 531 262.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 257.46 531 262.47 R
7 X
0 0 0 1 0 0 0 K
V
50 261.46 609.01 261.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 249.46 T
2 F
(SerialGetModem\050\051) 99 249.46 T
4 10 Q
(StreamError) 99 235.79 T
3 F
( SerialGetModem\050) 165 235.79 T
3 9 Q
(GeodeHandle) 153 225.46 T
(driver,) 261 225.46 T
(SerialUnit) 153 215.46 T
(unit,) 261 215.46 T
(SerialModem *) 153 205.46 T
(modem\051;) 261 205.46 T
0 10 Q
(Read a modem\325) 180 187.79 T
(s hardware \337ow control bits.) 249.83 187.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "365" 5
%%Page: "366" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(366) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SerialOpen\050\051) 99 634.99 T
4 10 Q
(StreamError) 99 620.33 T
3 F
( SerialOpen\050) 165 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(SerialUnit) 153 599.99 T
(unit,) 261 599.99 T
(StreamOpenFlags) 153 589.99 T
(flags,) 261 589.99 T
(word) 153 579.99 T
(inBuffSize,) 261 579.99 T
(word) 153 569.99 T
(outBuffSize,) 261 569.99 T
(word) 153 559.99 T
(timeout\051;) 261 559.99 T
0 10 Q
(This routine opens a stream to the speci\336ed serial port. It is passed the) 180 542.33 T
(following arguments:) 180 530.83 T
5 F
(driver) 180 512.33 T
0 F
(The) 243 512.33 T
6 F
(GeodeT) 263.56 512.33 T
(oken) 302.45 512.33 T
0 F
( of the serial driver) 327.82 512.33 T
(.) 415.6 512.33 T
5 F
(unit) 180 494.33 T
0 F
(The serial port to open.) 243 494.33 T
5 F
(\337ags) 180 476.33 T
0 F
-0.31 (This speci\336es whether the call should fail if the port is busy) 243 476.33 P
-0.31 (, or) 513.85 476.33 P
(wait for a time to see if it will become free.) 243 465.33 T
5 F
(inBuffSize) 180 447.33 T
0 F
-0.66 (The size of the stream buffer used for input from the serial port.) 243 447.33 P
5 F
(outBuffSize) 180 429.33 T
0 F
-0.08 (The size of the stream buffer used for output to the serial port.) 243 429.33 P
5 F
(timeout) 180 411.33 T
0 F
(The number of clock ticks to wait for the port to become free.) 243 411.33 T
(\050This argument is ignored if) 243 400.33 T
5 F
(\337ags) 375.23 400.33 T
0 F
( is not) 396.89 400.33 T
0 9 Q
(STREAM_OPEN_TIMEOUT) 243 389.33 T
0 10 Q
(.\051) 362.58 389.33 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 371.33 T
(member of the) 180 359.83 T
6 F
(StreamError) 249.45 359.83 T
0 F
( enumerated type.) 316.32 359.83 T
81 344.98 531 349.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 344.98 531 349.99 R
7 X
0 0 0 1 0 0 0 K
V
50 348.98 609.01 348.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 336.98 T
2 F
(SerialQuery\050\051) 99 336.98 T
4 10 Q
(StreamError) 99 322.32 T
3 F
( SerialQuery\050) 165 322.32 T
3 9 Q
(GeodeHandle) 153 311.98 T
(driver,) 261 311.98 T
(SerialUnit) 153 301.98 T
(unit,) 261 301.98 T
(StreamRoles role,) 153 291.98 T
(word *) 153 281.98 T
(bytesAvailable\051;) 261 281.98 T
0 10 Q
-0.17 (Find out how much space is available in a serial buffer) 180 264.32 P
-0.17 (, or how much data is) 430.17 264.32 P
(waiting to be read.) 180 252.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "366" 6
%%Page: "367" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(367) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SerialRead\050\051) 99 634.99 T
4 10 Q
(StreamError) 99 620.33 T
3 F
( SerialRead \050) 165 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(SerialUnit) 153 599.99 T
(unit,) 261 599.99 T
(StreamBlocker) 153 589.99 T
(blocker,) 261 589.99 T
(word) 153 579.99 T
(buffSize,) 261 579.99 T
(byte *) 153 569.99 T
(buffer,) 261 569.99 T
(word *) 153 559.99 T
(numBytesRead\051;) 261 559.99 T
0 10 Q
(Read data from a serial port and write it to a passed buffer) 180 542.33 T
(.) 451.34 542.33 T
81 527.48 531 532.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.48 531 532.49 R
7 X
0 0 0 1 0 0 0 K
V
50 531.48 609.01 531.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.48 T
2 F
(SerialReadByte\050\051) 99 519.48 T
4 10 Q
(StreamError) 99 504.82 T
3 F
( SerialReadByte \050) 165 504.82 T
3 9 Q
(GeodeHandle) 153 494.48 T
(driver,) 261 494.48 T
(SerialUnit) 153 484.48 T
(unit,) 261 484.48 T
(StreamBlocker) 153 474.48 T
(blocker,) 261 474.48 T
(word) 153 464.48 T
(buffSize,) 261 464.48 T
(byte *) 153 454.48 T
(dataByte\051;) 261 454.48 T
0 10 Q
(Read a byte of data from a serial port and write it to a passed variable.) 180 436.82 T
81 421.98 531 426.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 421.98 531 426.98 R
7 X
0 0 0 1 0 0 0 K
V
50 425.98 609.01 425.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 413.98 T
2 F
(SerialSetFormat\050\051) 99 413.98 T
4 10 Q
(StreamError) 99 399.31 T
3 F
( SerialSetFormat\050) 165 399.31 T
3 9 Q
(GeodeHandle) 153 388.98 T
(driver,) 261 388.98 T
(SerialUnit) 153 378.98 T
(unit,) 261 378.98 T
(SerialFormat) 153 368.98 T
(format,) 261 368.98 T
(SerialMode) 153 358.98 T
(mode,) 261 358.98 T
(SerialBaud) 153 348.98 T
(baud\051;) 261 348.98 T
0 10 Q
(Set the format for a stream to a speci\336ed serial port.) 180 331.31 T
81 316.47 531 321.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 316.47 531 321.48 R
7 X
0 0 0 1 0 0 0 K
V
50 320.47 609.01 320.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 308.47 T
2 F
(SerialSetModem\050\051) 99 308.47 T
4 10 Q
(StreamError) 99 293.8 T
3 F
( SerialSetModem\050) 165 293.8 T
3 9 Q
(GeodeHandle) 153 283.47 T
(driver,) 261 283.47 T
(SerialUnit) 153 273.47 T
(unit,) 261 273.47 T
(SerialModem) 153 263.47 T
(modem\051;) 261 263.47 T
0 10 Q
(Set a modem\325) 180 245.8 T
(s hardware \337ow control bits.) 241.5 245.8 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "367" 7
%%Page: "368" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(368) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SerialW) 99 634.99 T
(rite\050\051) 142.8 634.99 T
4 10 Q
(StreamError) 99 620.33 T
3 F
( SerialWrite\050) 165 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(SerialUnit) 153 599.99 T
(unit,) 261 599.99 T
(StreamBlocker) 153 589.99 T
(blocker,) 261 589.99 T
(word) 153 579.99 T
(buffSize,) 261 579.99 T
(const byte *) 153 569.99 T
(buffer,) 261 569.99 T
(word *) 153 559.99 T
(numBytesWritten\051;) 261 559.99 T
0 10 Q
(W) 180 542.33 T
(rite data to a serial port.) 189.26 542.33 T
81 527.48 531 532.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.48 531 532.49 R
7 X
0 0 0 1 0 0 0 K
V
50 531.48 609.01 531.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.48 T
2 F
(SerialW) 99 519.48 T
(riteByte\050\051) 142.8 519.48 T
4 10 Q
(StreamError) 99 504.82 T
3 F
( SerialWrite\050) 165 504.82 T
3 9 Q
(GeodeHandle) 153 494.48 T
(driver,) 261 494.48 T
(SerialUnit) 153 484.48 T
(unit,) 261 484.48 T
(StreamBlocker) 153 474.48 T
(blocker,) 261 474.48 T
(word) 153 464.48 T
(buffSize,) 261 464.48 T
(byte) 153 454.48 T
(dataByte\051;) 261 454.48 T
0 10 Q
(W) 180 436.82 T
(rite one byte of data to a serial port.) 189.26 436.82 T
81 421.98 531 426.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 421.98 531 426.98 R
7 X
0 0 0 1 0 0 0 K
V
50 425.98 609.01 425.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 413.98 T
2 F
(SGC_MACHINE) 99 413.98 T
4 10 Q
(byte) 99 400.31 T
3 F
(SGC_MACHINE\050) 153 400.31 T
7 F
(val) 225 400.31 T
3 F
(\051;) 243 400.31 T
3 9 Q
(dword) 153 389.98 T
7 F
(val) 189 389.98 T
3 F
(;) 205.2 389.98 T
0 10 Q
(This macro is used to extract the machine type from a) 180 372.31 T
6 F
(SysGetCon\336g\050\051) 431.69 372.31 T
0 F
(return value.) 180 360.81 T
2 F
(Include:) 99 342.31 T
0 F
(system.goh) 180 342.31 T
81 325.97 531 330.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 325.97 531 330.98 R
7 X
0 0 0 1 0 0 0 K
V
50 329.97 609.01 329.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 317.97 T
2 F
(SGC_PROCESSOR) 99 317.97 T
4 10 Q
(byte) 99 304.3 T
3 F
(SGC_PROCESSOR\050) 153 304.3 T
7 F
(val) 237 304.3 T
3 F
(\051;) 255 304.3 T
3 9 Q
(dword) 153 293.97 T
7 F
(val) 189 293.97 T
3 F
(;) 205.2 293.97 T
0 10 Q
(This macro is used to extract the processor type from a) 180 276.3 T
6 F
(SysGetCon\336g\050\051) 435.75 276.3 T
0 F
(return value.) 180 264.8 T
2 F
(Include:) 99 246.3 T
0 F
(system.goh) 180 246.3 T
81 229.96 531 234.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 229.96 531 234.97 R
7 X
0 0 0 1 0 0 0 K
V
50 233.96 609.01 233.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 221.96 T
2 F
(SoundAllocMusic\050\051) 99 221.96 T
4 10 Q
(MemHandle) 99 207.29 T
3 F
(SoundAllocMusic\050) 159 207.29 T
3 9 Q
(const word) 153 196.96 T
(*song,) 261 196.96 T
(word) 153 186.96 T
(voices \051;) 261 186.96 T
0 10 Q
(This routine takes a pointer to a \336xed buffer of music and returns a) 180 169.29 T
6 F
-0.05 (MemHandle) 180 157.79 P
0 F
-0.05 ( which may then be passed to) 242.77 157.79 P
6 F
-0.05 (SoundPlayMusic\050\051) 381.17 157.79 P
0 F
-0.05 ( to play the) 476.36 157.79 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "368" 8
%%Page: "369" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(369) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(music. If the music buffer is in a movable resource, you must initialize it) 180 641.33 T
-0.81 (using) 180 629.83 P
6 F
-0.84 (SoundInitMusic\050\051) 207.34 629.83 P
0 F
-0.81 ( instead of) 298.44 629.83 P
6 F
-0.84 (SoundAllocMusic\050\051) 346.76 629.83 P
0 F
-0.81 (. T) 444.91 629.83 P
-0.81 (o \336nd out how to) 455.41 629.83 P
(set up one of these buffers of music, see "Sound Library) 180 618.33 T
(," Chapter) 434.83 618.33 T
(13 of the) 485.02 618.33 T
(Concepts book. The) 180 606.83 T
5 F
(voices) 272.42 606.83 T
0 F
( argument is the number of voices in the buffer) 299.26 606.83 T
(.) 515.75 606.83 T
81 591.99 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 591.99 531 597 R
7 X
0 0 0 1 0 0 0 K
V
50 595.99 609.01 595.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 583.99 T
2 F
(SoundAllocMusicNote\050\051) 99 583.99 T
4 10 Q
(MemHandle) 99 569.33 T
3 F
( SoundAllocMusicNote\050) 153 569.33 T
3 9 Q
(word _far) 153 558.99 T
(instrument,) 261 558.99 T
(word) 153 548.99 T
(frequency,) 261 548.99 T
(word) 153 538.99 T
(volume,) 261 538.99 T
(word) 153 528.99 T
(DeltaType,) 261 528.99 T
(word) 153 518.99 T
(duration\051;) 261 518.99 T
0 10 Q
(This routine allocates a) 180 501.33 T
6 F
(MemHandle) 291.32 501.33 T
0 F
( which may be passed to) 354.09 501.33 T
6 F
-0.21 (SoundPlayMusicNote\050\051) 180 489.83 P
0 F
-0.2 (. Y) 299.62 489.83 P
-0.2 (ou must provide all information about the note:) 310.91 489.83 P
-0.35 (its frequency) 180 478.33 P
-0.35 (, volume, and duration. Y) 238.35 478.33 P
-0.35 (ou may specify an) 353.27 478.33 P
5 F
-0.35 (instrument) 437.26 478.33 P
0 F
-0.35 (, passing) 488.17 478.33 P
-0.25 (a value corresponding to a standard instrument \050such as) 180 466.83 P
0 9 Q
-0.23 (IP_PIANO) 441.83 466.83 P
0 10 Q
-0.25 (\051. Specify) 486.5 466.83 P
(the frequency in Hertz or use one of the constants such as) 180 455.33 T
0 9 Q
(MIDDLE_C_b) 449.81 455.33 T
0 10 Q
( to) 508.98 455.33 T
(specify a standard note frequency) 180 443.83 T
(. V) 334.26 443.83 T
(olume ranges from zero to 0xffff\321you) 346.12 443.83 T
(may wish to use a constant value such as) 180 432.33 T
0 9 Q
(DYNAMIC_FFF) 373 432.33 T
0 10 Q
(if you want help) 443.84 432.33 T
(trying to choose a loudness. The note\325) 180 420.83 T
(s duration is determined by its delta) 352.24 420.83 T
(type, one of) 180 409.33 T
0 9 Q
(SSDTT_MSEC) 235.56 409.33 T
0 10 Q
(,) 297.57 409.33 T
0 9 Q
(SSDTT_TICKS) 303.13 409.33 T
0 10 Q
(, and) 366.81 409.33 T
0 9 Q
(SSDTT_TEMPO) 392.56 409.33 T
0 10 Q
(. If you pass) 461.41 409.33 T
0 9 Q
(SSDTT_MSEC) 180 397.83 T
0 10 Q
( or) 242.01 397.83 T
0 9 Q
(SSDTT_TICKS) 257.01 397.83 T
0 10 Q
(, the duration is measured in milliseconds or) 320.69 397.83 T
(ticks \050each tick is one sixtieth of a second\051. If you pass) 180 386.33 T
0 9 Q
(SSDTT_TEMPO) 431.69 386.33 T
0 10 Q
(, you) 500.54 386.33 T
(may set the size of your time unit when you call) 180 374.83 T
6 F
(SoundPlayMusicNote\050\051) 403.73 374.83 T
0 F
(.) 523.35 374.83 T
(The) 180 363.33 T
5 F
(duration) 200.56 363.33 T
0 F
( determines how many time units the note should play) 240.92 363.33 T
(. If the) 491.88 363.33 T
(delta type is) 180 351.83 T
0 9 Q
(SSDTT_TICKS) 239.46 351.83 T
0 10 Q
( and) 303.14 351.83 T
5 F
(duration) 326.11 351.83 T
0 F
( is 30, then the note will sound for) 366.47 351.83 T
(half a second.) 180 340.33 T
81 325.48 531 330.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 325.48 531 330.49 R
7 X
0 0 0 1 0 0 0 K
V
50 329.48 609.01 329.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 317.48 T
2 F
(SoundAllocMusicStream\050\051) 99 317.48 T
4 10 Q
(MemHandle) 99 302.82 T
3 F
(SoundAllocMusicStream\050) 159 302.82 T
3 9 Q
(word) 153 292.48 T
(streamType,) 261 292.48 T
(word) 153 282.48 T
(priority,) 261 282.48 T
(word) 153 272.48 T
(voices,) 261 272.48 T
(word) 153 262.48 T
(tempo\051;) 261 262.48 T
0 10 Q
(This routine returns a token suitable for passing to) 180 244.82 T
6 F
(SoundPlayMusicT) 180 233.32 T
(oStream\050\051) 273.7 233.32 T
0 F
(. It is passed several arguments. The) 325.19 233.32 T
6 F
(SoundStreamT) 180 221.82 T
(ype) 257.45 221.82 T
0 F
( determines how much space to allocate for the stream) 275.97 221.82 T
-0.28 (and will determine how much data can be written to the stream at one time.) 180 210.32 P
-0.43 (If you pass) 180 198.82 P
0 9 Q
-0.38 (SST_ONE_SHOT) 231.5 198.82 P
0 10 Q
-0.43 (, it indicates that the stream will not be explicitly) 303.93 198.82 P
-0.31 (destroyed, and that your stream should destroy the stream when the song is) 180 187.32 P
(done. Y) 180 175.82 T
(ou must specify how many voices there are in the music buffer) 213.34 175.82 T
(. Y) 500.57 175.82 T
(ou) 512.06 175.82 T
(must also pass a starting) 180 164.32 T
5 F
(tempo) 298.92 164.32 T
0 F
( for the music stream.) 326.51 164.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "369" 9
%%Page: "370" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(370) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SoundAllocSampleStream\050\051) 99 634.99 T
4 10 Q
(MemHandle) 99 620.33 T
3 F
( SoundAllocSampleStream\050void\051;) 153 620.33 T
0 F
-0.72 (This routine allocates a sample stream handle. If the returned handle is) 180 602.33 P
5 F
-0.72 (null) 507.28 602.33 P
0 F
-0.72 (,) 526.16 602.33 P
(the library was unavailable \050i.e. some other thread has grabbed exclusive) 180 590.83 T
(access\051.) 180 579.33 T
81 564.48 531 569.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 564.48 531 569.49 R
7 X
0 0 0 1 0 0 0 K
V
50 568.48 609.01 568.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 556.48 T
2 F
(SoundDisableSampleStream\050\051) 99 556.48 T
4 10 Q
(void) 99 541.82 T
3 F
(SoundDisableSampleStream\050) 153 541.82 T
3 9 Q
(MemHandle) 153 531.48 T
(mh\051;) 261 531.48 T
0 10 Q
(This routine disassociates the) 180 513.82 T
0 9 Q
(DAC) 320.39 513.82 T
0 10 Q
( player from the passed sample handle.) 340.39 513.82 T
(Before you play more sounds using the handle, you will have to call) 180 502.32 T
6 F
(SoundEnableSampleStream\050\051) 180 490.82 T
0 F
(again.) 336.03 490.82 T
81 475.98 531 480.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 475.98 531 480.98 R
7 X
0 0 0 1 0 0 0 K
V
50 479.98 609.01 479.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 467.98 T
2 F
(SoundEnableSampleStream\050\051) 99 467.98 T
4 10 Q
(Boolean) 99 453.31 T
3 F
(SoundEnableSampleStream\050) 153 453.31 T
3 9 Q
(MemHandle) 153 442.98 T
(mh,) 261 442.98 T
(word) 153 432.98 T
(priority,) 261 432.98 T
(word) 153 422.98 T
(rate,) 261 422.98 T
(word) 153 412.98 T
(manufacturerID,) 261 412.98 T
(word) 153 402.98 T
(format\051;) 261 402.98 T
0 10 Q
(This routine associates a) 180 385.31 T
0 9 Q
(DAC) 297.43 385.31 T
0 10 Q
( player with the allocated sample handle. Y) 317.43 385.31 T
(ou) 516.92 385.31 T
-0.33 (must pass the sound handle, as returned by) 180 373.81 P
6 F
-0.34 (SoundAllocSampleStream\050\051) 382.6 373.81 P
0 F
-0.33 (.) 525.77 373.81 P
-0.28 (Y) 180 362.31 P
-0.28 (ou must also pass certain pieces of information about the sound you will be) 185.93 362.31 P
(playing on the) 180 350.81 T
0 9 Q
(DAC) 248.9 350.81 T
0 10 Q
( device: the) 268.9 350.81 T
5 F
(priority) 323.72 350.81 T
0 F
( with which to grab the) 358.52 350.81 T
0 9 Q
(DAC) 468.54 350.81 T
0 10 Q
( player) 488.54 350.81 T
(\050e.g.) 180 339.31 T
0 9 Q
(SP_ST) 202.04 339.31 T
(ANDARD) 229.39 339.31 T
0 10 Q
(\051, the sampling rate, and the) 270.22 339.31 T
5 F
(format) 404.69 339.31 T
0 F
( of the sample \050as) 435.61 339.31 T
(identi\336ed by a) 180 327.81 T
5 F
(manufacturerID) 248.72 327.81 T
0 F
( and a) 323.88 327.81 T
6 F
(DACSampleFormat) 355.19 327.81 T
0 F
( value\051.) 455.75 327.81 T
81 312.97 531 317.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 312.97 531 317.98 R
7 X
0 0 0 1 0 0 0 K
V
50 316.97 609.01 316.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 304.97 T
2 F
(SoundFreeMusic\050\051) 99 304.97 T
4 10 Q
(void) 99 290.3 T
3 F
(SoundFreeMusic\050) 153 290.3 T
3 9 Q
(MemHandle) 153 279.97 T
(mh\051;) 261 279.97 T
0 10 Q
(This routine frees up a music handle. The music must not be playing; call) 180 262.3 T
6 F
(SoundStopMusic\050\051) 180 250.8 T
0 F
( if you are not sure. Y) 275.56 250.8 T
(ou may not use the music handle) 374.09 250.8 T
(after calling this routine on it.) 180 239.3 T
81 224.46 531 229.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 224.46 531 229.47 R
7 X
0 0 0 1 0 0 0 K
V
50 228.46 609.01 228.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 216.46 T
2 F
(SoundFreeMusicNote\050\051) 99 216.46 T
4 10 Q
(void) 99 201.79 T
3 F
( SoundFreeMusicNote\050) 123 201.79 T
3 9 Q
(MemHandle) 153 191.46 T
(mh\051;) 261 191.46 T
0 10 Q
(This routine frees up the passed note handle. The note must not be playing) 180 173.79 T
-0.55 (when you call this routine; call) 180 162.29 P
6 F
-0.57 (SoundStopMusicNote\050\051) 321.71 162.29 P
0 F
-0.55 ( if you are not sure.) 441.71 162.29 P
(Y) 180 150.79 T
(ou should not try to use the note\325) 185.93 150.79 T
(s handle after freeing it.) 337.24 150.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "370" 10
%%Page: "371" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(371) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SoundFreeMusicStream\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
( SoundFreeMusicStream\050) 123 620.33 T
3 9 Q
(MemHandle) 153 609.99 T
(mh\051;) 261 609.99 T
0 10 Q
-0.65 (This routine frees up the music stream\325) 180 592.33 P
-0.65 (s token. No music must be playing via) 357.61 592.33 P
(the stream; call) 180 580.83 T
6 F
(SoundDisableMusicStream\050\051) 254.83 580.83 T
0 F
( if you are not sure. Do not) 403.16 580.83 T
(try to use the stream after calling this routine on it.) 180 569.33 T
81 554.48 531 559.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 554.48 531 559.49 R
7 X
0 0 0 1 0 0 0 K
V
50 558.48 609.01 558.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 546.48 T
2 F
(SoundFreeSampleStream\050\051) 99 546.48 T
4 10 Q
(void) 99 531.82 T
3 F
(SoundFreeSampleStream\050) 153 531.82 T
3 9 Q
(MemHandle) 153 521.48 T
(mh\051;) 261 521.48 T
0 10 Q
-0.39 (This routine frees the passed sampled sound handle. Y) 180 503.82 P
-0.39 (ou must not try to use) 428.73 503.82 P
(this handle after calling this routine on it.) 180 492.32 T
81 477.48 531 482.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 477.48 531 482.48 R
7 X
0 0 0 1 0 0 0 K
V
50 481.48 609.01 481.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 469.48 T
2 F
(SoundGetExclusive\050\051) 99 469.48 T
4 10 Q
(void) 99 454.81 T
3 F
(SoundGetExclusive\050void\051;) 153 454.81 T
0 F
-0.18 (This routine grabs the exclusive semaphore for the sound library; if another) 180 436.81 P
(thread has already grabbed the exclusive, this routine will wait until the) 180 425.31 T
(exclusive is released. Sounds which are playing now will be permitted to) 180 413.81 T
(\336nish, but from now on, only the thread calling this routine will be allowed) 180 402.31 T
(to play new sounds. When done with the sound library exclusive, call) 180 390.81 T
6 F
(SoundReleaseExclusive\050\051) 180 379.31 T
0 F
(.) 311.11 379.31 T
81 364.47 531 369.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 364.47 531 369.48 R
7 X
0 0 0 1 0 0 0 K
V
50 368.47 609.01 368.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 356.47 T
2 F
(SoundGetExclusiveNB\050\051) 99 356.47 T
4 10 Q
(Boolean) 99 341.8 T
3 F
(SoundGetExclusiveNB\050void\051;) 153 341.8 T
0 F
(This routine grabs the exclusive semaphore for the sound library) 180 323.8 T
(, doing so) 478.35 323.8 T
(even if some other thread has already grabbed the exclusive. Sounds which) 180 312.3 T
-0.38 (are playing now will be permitted to \336nish, but from now on, only the thread) 180 300.8 P
(calling this routine will be allowed to play new sounds. This routine will) 180 289.3 T
(return) 180 277.8 T
5 F
(true) 212.77 277.8 T
0 F
( if another thread already has exclusive access.) 231.28 277.8 T
(When done with the sound library exclusive, call) 180 259.3 T
6 F
(SoundReleaseExclusive\050\051) 180 247.8 T
0 F
(.) 311.11 247.8 T
81 232.96 531 237.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 232.96 531 237.97 R
7 X
0 0 0 1 0 0 0 K
V
50 236.96 609.01 236.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 224.96 T
2 F
(SoundInitMusic\050\051) 99 224.96 T
4 10 Q
(void) 99 210.29 T
3 F
( SoundInitMusic\050) 123 210.29 T
3 9 Q
(MemHandle) 153 199.96 T
(mh,) 261 199.96 T
(byte) 153 189.96 T
(voices\051;) 261 189.96 T
0 10 Q
(This routine initializes a pre-de\336ned simple music buffer structure. If the) 180 172.29 T
(music buffer is stored in a \336xed block, you can call) 180 160.79 T
6 F
(SoundAllocMusic\050\051) 414.84 160.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "371" 11
%%Page: "372" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(372) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.08 (instead. This allows a music buffer stored in a block referenced by a pointer) 180 641.33 P
(to be playable using) 180 629.83 T
6 F
(SoundPlayMusic\050\051) 275.03 629.83 T
0 F
(.) 370.21 629.83 T
81 614.99 531 620 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 614.99 531 620 R
7 X
0 0 0 1 0 0 0 K
V
50 618.99 609.01 618.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 606.99 T
2 F
(SoundPlayMusic\050\051) 99 606.99 T
4 10 Q
(Boolean) 99 592.33 T
3 F
(SoundPlayMusic\050) 153 592.33 T
3 9 Q
(MemHandle) 153 581.99 T
(mh,) 261 581.99 T
(word) 153 571.99 T
(priority,) 261 571.99 T
(word) 153 561.99 T
(tempo,) 261 561.99 T
(char) 153 551.99 T
(flags\051;) 261 551.99 T
0 10 Q
(This routine plays a buffer of music previously initialized by) 180 534.33 T
6 F
-0.42 (SoundInitMusic\050\051) 180 522.83 P
0 F
-0.41 ( or allocated by) 271.1 522.83 P
6 F
-0.42 (SoundAllocMusic\050\051) 342.44 522.83 P
0 F
-0.41 (. The priority value) 440.59 522.83 P
(will determine whether your sound will play if other sounds are already) 180 511.33 T
-0.2 (occupying the voices\321pass a value such as) 180 499.83 P
0 9 Q
-0.18 (SP_ST) 379.16 499.83 P
-0.18 (ANDARD) 406.51 499.83 P
0 10 Q
-0.2 (. The) 447.35 499.83 P
5 F
-0.2 (tempo) 473.06 499.83 P
0 F
-0.2 ( value) 500.65 499.83 P
(will be used to determine the length of a 1/128th note. If your music buffer) 180 488.33 T
(contained any notes whose lengths were measured by) 180 476.83 T
0 9 Q
(SSDTT_TEMPO) 430.21 476.83 T
0 10 Q
( delta) 499.06 476.83 T
(type, then you should set this value accordingly) 180 465.33 T
(. The) 398.72 465.33 T
5 F
(\337ags) 424.84 465.33 T
0 F
( argument) 446.5 465.33 T
-0.07 (determines whether the music\325) 180 453.83 P
-0.07 (s handle should be automatically freed when) 322.2 453.83 P
(the sound is done playing. Y) 180 442.33 T
(ou may pass either or both of the \337ags) 309.28 442.33 T
0 9 Q
(UNLOCK_ON_EOS) 180 430.83 T
0 10 Q
( or) 263.68 430.83 T
0 9 Q
(DESTROY_ON_EOS) 278.68 430.83 T
0 10 Q
(.) 366.2 430.83 T
(Remember that you must have called) 180 412.33 T
6 F
(SoundInitMusic\050\051) 355.21 412.33 T
0 F
( on the music) 446.31 412.33 T
(handle before you may use it to play music.) 180 400.83 T
2 F
(Include:) 99 382.33 T
0 F
(sound.h) 180 382.33 T
81 365.98 531 370.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 365.98 531 370.99 R
7 X
0 0 0 1 0 0 0 K
V
50 369.98 609.01 369.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 357.98 T
2 F
(SoundPlayMusicNote\050\051) 99 357.98 T
4 10 Q
(Boolean) 99 343.32 T
3 F
(SoundPlayMusicNote\050) 153 343.32 T
3 9 Q
(MemHandle) 153 332.98 T
(mh,) 261 332.98 T
(/* handle of note */) 333 332.98 T
(word) 153 322.98 T
(priority,) 261 322.98 T
(word) 153 312.98 T
(tempo,) 261 312.98 T
(word) 153 302.98 T
(flags\051;) 261 302.98 T
0 10 Q
(This routine plays a buffer of music previously allocated by) 180 285.32 T
6 F
(SoundAllocMusicNote\050\051) 180 273.82 T
0 F
(\321the return value of that function is passed as) 302.59 273.82 T
5 F
-0.03 (mh) 180 262.32 P
0 F
-0.03 (. The priority value will determine whether your sound will play if other) 195 262.32 P
(sounds are already occupying the voices\321pass a value such as) 180 250.82 T
0 9 Q
(SP_ST) 180 239.32 T
(ANDARD) 207.35 239.32 T
0 10 Q
(. The) 248.18 239.32 T
5 F
(tempo) 274.3 239.32 T
0 F
( value will be used to determine the length of a) 301.89 239.32 T
-0.15 (1/128th note. If your note\325) 180 227.82 P
-0.15 (s delta type is) 298.33 227.82 P
0 9 Q
-0.13 ( SSDTT_TEMPO) 361.98 227.82 P
0 10 Q
-0.15 (, then you should set) 433.2 227.82 P
(this value accordingly) 180 216.32 T
(. The) 280.19 216.32 T
5 F
(\337ags) 306.31 216.32 T
0 F
( argument determines whether the notes\325) 327.97 216.32 T
(s) 518.72 216.32 T
-0.7 (handle should be automatically freed when the note is done playing. Y) 180 204.82 P
-0.7 (ou may) 495.9 204.82 P
(pass either or both of the \337ags) 180 193.32 T
0 9 Q
(UNLOCK_ON_EOS) 322.61 193.32 T
0 10 Q
( or) 406.29 193.32 T
0 9 Q
(DESTROY_ON_EOS) 421.29 193.32 T
0 10 Q
(.) 508.81 193.32 T
(This routine returns) 180 174.82 T
5 F
(true) 277.22 174.82 T
0 F
( if the library was unavailable \050i.e. if some other) 295.73 174.82 T
(thread had grabbed the sound exclusive\051.) 180 163.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "372" 12
%%Page: "373" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(373) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(sound.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(SoundPlayT) 99 616.99 T
(oMusicStream\050\051) 167.46 616.99 T
4 10 Q
(Boolean) 99 602.33 T
3 F
(SoundPlayToMusicStream\050) 153 602.33 T
3 9 Q
(MemHandle) 153 591.99 T
(mh,) 261 591.99 T
(const word) 153 581.99 T
(* sample,) 261 581.99 T
(word) 153 571.99 T
(size,) 261 571.99 T
(SampleFormatDescription) 153 561.99 T
(*format\051;) 282.6 561.99 T
0 10 Q
(This routine plays a music buffer to a stream. Specify which stream to play) 180 544.33 T
(to by means of the token returned by) 180 532.83 T
6 F
(SoundAllocMusicStream\050\051) 353.17 532.83 T
0 F
(. T) 488.92 532.83 T
(o play) 500.23 532.83 T
-0.05 (music to the buffer) 180 521.33 P
-0.05 (, pass the size of the buffer you are playing and a pointer) 266.32 521.33 P
(to the start of the piece. This piece of buffer must be made up of whole) 180 509.83 T
(events\321it should not start or end in the middle of an event \050e.g. you can\325) 180 498.33 T
(t) 515.41 498.33 T
(specify that you want to play a note but not give its frequency) 180 486.83 T
(, even if you) 463.93 486.83 T
-0.53 (plan to play another buffer to the stream that might begin with a frequency\051.) 180 475.33 P
(If you don\325) 180 456.83 T
(t know the size of the buffer) 228.15 456.83 T
(, it may be all right\321any data in the) 356.49 456.83 T
(buffer after the) 180 445.33 T
0 9 Q
(GE_END_OF_SONG) 253.33 445.33 T
0 10 Q
( will be ignored.) 341.18 445.33 T
81 430.48 531 435.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 430.48 531 435.49 R
7 X
0 0 0 1 0 0 0 K
V
50 434.48 609.01 434.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 422.48 T
2 F
(SoundPlayT) 99 422.48 T
(oSampleStream\050\051) 167.46 422.48 T
4 10 Q
(Boolean) 99 407.82 T
3 F
( SoundPlayToSampleStream\050) 141 407.82 T
3 9 Q
(MemHandle) 153 397.48 T
(mh,) 261 397.48 T
(word _far) 153 387.48 T
(* sample,) 261 387.48 T
(word) 153 377.48 T
(size,) 261 377.48 T
(SampleFormatDescription) 153 367.48 T
(* format\051;) 282.6 367.48 T
0 10 Q
(This routine passes sampled sound data to a) 180 349.82 T
0 9 Q
(DAC) 388.19 349.82 T
0 10 Q
( player) 408.19 349.82 T
(. Y) 439.49 349.82 T
(ou must pass a) 450.98 349.82 T
(sample sound handle to this routine\321to acquire such a handle, call) 180 338.32 T
6 F
(SoundAllocSampleStream\050\051) 180 326.82 T
0 F
(. The sample sound handle must be) 323.17 326.82 T
(associated with a) 180 315.32 T
0 9 Q
(DAC) 262.43 315.32 T
0 10 Q
( player\321to so associate the handle, call) 282.43 315.32 T
6 F
(SoundEnableSampleStream\050\051) 180 303.82 T
0 F
(. Y) 333.16 303.82 T
(ou must pass a pointer to the) 344.65 303.82 T
5 F
(sample) 482.08 303.82 T
0 F
-0.67 (data, along with the) 180 292.32 P
5 F
-0.67 (size) 273.11 292.32 P
0 F
-0.67 ( of the sample as measured in bytes. Y) 289.95 292.32 P
-0.67 (ou may change) 461.14 292.32 P
-0.78 (the) 180 280.82 P
5 F
-0.78 (format) 197 280.82 P
0 F
-0.78 ( information which will determine how the) 227.92 280.82 P
0 9 Q
-0.7 (DAC) 422.45 280.82 P
0 10 Q
-0.78 ( player handles the) 442.45 280.82 P
(data.) 180 269.32 T
81 254.48 531 259.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 254.48 531 259.48 R
7 X
0 0 0 1 0 0 0 K
V
50 258.48 609.01 258.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 246.47 T
2 F
(SoundReallocMusic\050\051) 99 246.47 T
4 10 Q
(Boolean) 99 231.81 T
3 F
(SoundReallocMusic\050) 153 231.81 T
3 9 Q
(MemHandle) 153 221.47 T
(mh,) 261 221.47 T
(word _far) 153 211.47 T
(* song\051;) 261 211.47 T
0 10 Q
(This routine allows you to associate a new music buffer with an existing) 180 193.81 T
(music handle. The new music buffer must not have more voices than was) 180 182.31 T
-0.5 (originally requested with) 180 170.81 P
6 F
-0.51 (SoundAllocMusic\050\051) 297.6 170.81 P
0 F
-0.5 (. Do not call this routine with) 395.75 170.81 P
(the handle of a sound that may be playing; call) 180 159.31 T
6 F
(SoundStopMusic\050\051) 399.31 159.31 T
0 F
( on the) 494.87 159.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "373" 13
%%Page: "374" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(374) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.01 (handle if you are not sure. See "Sound Library) 180 641.33 P
-0.01 (," Chapter) 393.27 641.33 P
-0.01 (13 of the Concepts) 443.45 641.33 P
(book to \336nd out how to set up the buffer of music.) 180 629.83 T
81 614.99 531 620 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 614.99 531 620 R
7 X
0 0 0 1 0 0 0 K
V
50 618.99 609.01 618.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 606.99 T
2 F
(SoundReallocMusicNote\050\051) 99 606.99 T
4 10 Q
(Boolean) 99 592.33 T
3 F
(SoundReallocMusicNote\050) 153 592.33 T
3 9 Q
(MemHandle) 153 581.99 T
(mh,) 261 581.99 T
(word) 153 571.99 T
(freq,) 261 571.99 T
(word) 153 561.99 T
(vol,) 261 561.99 T
(word) 153 551.99 T
(timer,) 261 551.99 T
(word) 153 541.99 T
(durat,) 261 541.99 T
(word _far) 153 531.99 T
(* instrum\051;) 261 531.99 T
0 10 Q
(This routine allows you to associate new note values with an existing note) 180 514.33 T
-0.75 (handle. Do not call this routine with the handle of a note that may be playing;) 180 502.83 P
(call) 180 491.33 T
6 F
(SoundStopMusicNote\050\051) 199.08 491.33 T
0 F
( on the handle if you are not sure.) 319.08 491.33 T
81 476.48 531 481.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 476.48 531 481.49 R
7 X
0 0 0 1 0 0 0 K
V
50 480.48 609.01 480.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 468.48 T
2 F
(SoundReleaseExclusive\050\051) 99 468.48 T
4 10 Q
(void) 99 453.82 T
3 F
(SoundReleaseExclusive\050void\051;) 153 453.82 T
0 F
(This routine releases the sound library exclusive semaphore. Y) 180 435.82 T
(ou will not) 469.47 435.82 T
(need to call this routine unless your code calls) 180 424.32 T
6 F
(SoundGrabExclusive\050\051) 395.2 424.32 T
0 F
( or) 512.42 424.32 T
6 F
(SoundGrabExclusiveNB\050\051) 180 412.82 T
0 F
(. This routine allows other threads to play) 313.33 412.82 T
-0.49 (sounds. If another thread called) 180 401.32 P
6 F
-0.5 (SoundGrabExclusive\050\051) 327.76 401.32 P
0 F
-0.49 ( while your thread) 444.98 401.32 P
(had the exclusive, it will now grab the exclusive.) 180 389.82 T
81 374.98 531 379.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 374.98 531 379.98 R
7 X
0 0 0 1 0 0 0 K
V
50 378.98 609.01 378.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 366.98 T
2 F
(SoundStopMusic\050\051) 99 366.98 T
4 10 Q
(Boolean) 99 352.31 T
3 F
(SoundStopMusic\050) 153 352.31 T
3 9 Q
(MemHandle) 153 341.98 T
(mh\051;) 261 341.98 T
(/* Handle of music buffer */) 297 341.98 T
0 10 Q
-0.22 (This routine stops the playing of a simple music buffer) 180 324.31 P
-0.22 (. It returns true if the) 429.35 324.31 P
(library was unavailable \050i.e. some other thread has grabbed the exclusive\051.) 180 312.81 T
81 297.97 531 302.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 297.97 531 302.98 R
7 X
0 0 0 1 0 0 0 K
V
50 301.97 609.01 301.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 289.97 T
2 F
(SoundStopMusicNote\050\051) 99 289.97 T
4 10 Q
(Boolean) 99 275.3 T
3 F
(SoundStopMusicNote\050) 153 275.3 T
3 9 Q
(MemHandle) 153 264.97 T
(mh\051;) 261 264.97 T
0 10 Q
-0.25 (This routine stops a note that is playing. Pass the handle of the note, as was) 180 247.3 P
(returned by) 180 235.8 T
6 F
(SoundAllocMusicNote\050\051) 237.22 235.8 T
0 F
(. This routine returns true if the) 359.81 235.8 T
(sound library was unavailable \050i.e. some other thread has grabbed the) 180 224.3 T
(exclusive\051.) 180 212.8 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "374" 14
%%Page: "375" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(375) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SoundStopMusicStream\050\051) 99 634.99 T
4 10 Q
(Boolean) 99 620.33 T
3 F
(SoundStopMusicStream\050) 153 620.33 T
3 9 Q
(MemHandle) 153 609.99 T
(mh\051;) 261 609.99 T
0 10 Q
(This routine stops any music being played to the stream. All sounds are) 180 592.33 T
(\337ushed from the stream. It takes one argument, the token of the sound) 180 580.83 T
(stream, as returned by) 180 569.33 T
6 F
(SoundAllocMusicStream\050\051) 288.16 569.33 T
0 F
(.) 423.91 569.33 T
81 554.48 531 559.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 554.48 531 559.49 R
7 X
0 0 0 1 0 0 0 K
V
50 558.48 609.01 558.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 546.48 T
2 F
(SoundStopSampleStream\050\051) 99 546.48 T
3 10 Q
(void) 99 531.82 T
(SoundStopSampleStream\050) 153 531.82 T
3 9 Q
(MemHandle) 153 521.48 T
(mh\051;) 261 521.48 T
0 10 Q
(This routine stops a sound playing through a previously allocated sampled) 180 503.82 T
(sound stream.) 180 492.32 T
81 477.48 531 482.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 477.48 531 482.48 R
7 X
0 0 0 1 0 0 0 K
V
50 481.48 609.01 481.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 469.48 T
2 F
(SpoolConvertPaperSize\050\051) 99 469.48 T
4 10 Q
(word) 99 454.81 T
3 F
(SpoolConvertPaperSize\050) 153 454.81 T
3 9 Q
(int) 153 444.48 T
(width,) 261 444.48 T
(/* width of paper */) 315 444.48 T
(int) 153 434.48 T
(height,) 261 434.48 T
(/* height of paper */) 315 434.48 T
(PageType) 153 424.48 T
(pt\051;) 261 424.48 T
(/* type of page */) 315 424.48 T
0 10 Q
(This routine converts a width and height into a page size number) 180 406.81 T
(.) 481.33 406.81 T
2 F
(Include:) 99 388.31 T
0 F
(spool.goh) 180 388.31 T
81 371.97 531 376.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 371.97 531 376.98 R
7 X
0 0 0 1 0 0 0 K
V
50 375.97 609.01 375.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 363.97 T
2 F
(SpoolCreatePaperSize\050\051) 99 363.97 T
4 10 Q
(Boolean) 99 349.3 T
3 F
(SpoolCreatePaperSize\050 /* Returns true if failed */) 153 349.3 T
3 9 Q
(word) 153 338.97 T
(* retValue,) 189 338.97 T
(/* returns paper size value */) 279 338.97 T
(char) 153 328.97 T
(* name,) 189 328.97 T
(/* name of paper size */) 279 328.97 T
(int) 153 318.97 T
(width,) 189 318.97 T
(/* width of paper */) 279 318.97 T
(int) 153 308.97 T
(length,) 189 308.97 T
(/* length of paper */) 279 308.97 T
(PageLayout laytout\051;) 153 298.97 T
(/* default page layout */) 279 298.97 T
0 10 Q
(This routine de\336nes and stores a new paper size for later use by the user) 180 281.3 T
(.) 515.21 281.3 T
2 F
(Include:) 99 262.8 T
0 F
(spool.goh) 180 262.8 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "375" 15
%%Page: "376" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(376) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SpoolCreatePrinter\050\051) 99 634.99 T
4 10 Q
(Boolean) 99 620.33 T
3 F
(SpoolCreatePrinter\050) 153 620.33 T
(/* Returns true if error) 273 620.33 T
(\050printer already exists\051 */) 285 609.33 T
3 9 Q
(char) 153 598.99 T
(*name,) 261 598.99 T
(/* name of printer */) 333 598.99 T
(PrinterDriverType) 153 588.99 T
(type,) 261 588.99 T
(/* driver type */) 333 588.99 T
(int) 153 578.99 T
(* retVal\051;) 261 578.99 T
(/* Will hold printer number */) 333 578.99 T
0 10 Q
(Adds the printer to the list of currently installed printers and returns the) 180 561.33 T
(new printer number) 180 549.83 T
(. This routine is normally called from within the) 272.59 549.83 T
(Preferences manager) 180 538.33 T
(. Returns) 277.03 538.33 T
5 F
(true) 322.77 538.33 T
0 F
( if the printer already exists.) 341.28 538.33 T
2 F
(Include:) 99 519.83 T
0 F
(spool.goh) 180 519.83 T
81 503.48 531 508.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 503.48 531 508.49 R
7 X
0 0 0 1 0 0 0 K
V
50 507.48 609.01 507.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 495.48 T
2 F
(SpoolDeletePaperSize\050\051) 99 495.48 T
4 10 Q
(Boolean) 99 480.82 T
3 F
(SpoolDeletePaperSize\050) 153 480.82 T
3 9 Q
(word) 153 470.48 T
(size\051;) 189 470.48 T
(/* size number to delete */) 279 470.48 T
0 10 Q
(This routine deletes a user) 180 452.82 T
(-de\336ned paper size.) 303.35 452.82 T
2 F
(Include:) 99 434.32 T
0 F
(spool.goh) 180 434.32 T
81 417.98 531 422.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 417.98 531 422.98 R
7 X
0 0 0 1 0 0 0 K
V
50 421.98 609.01 421.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 409.98 T
2 F
(SpoolDeletePrinter\050\051) 99 409.98 T
4 10 Q
(void) 99 395.31 T
3 F
(SpoolDeletePrinter\050) 153 395.31 T
3 9 Q
(int) 153 384.98 T
(prtrNum\051;) 189 384.98 T
(/* printer number to delete */) 279 384.98 T
0 10 Q
(Deletes the requested printer from the system.) 180 367.31 T
2 F
(Include:) 99 348.81 T
0 F
(spool.goh) 180 348.81 T
81 332.47 531 337.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 332.47 531 337.48 R
7 X
0 0 0 1 0 0 0 K
V
50 336.47 609.01 336.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 324.47 T
2 F
(SpoolGetDefaultPrinter\050\051) 99 324.47 T
4 10 Q
(int) 99 309.8 T
3 F
(SpoolGetDefaultPrinter\050\051; /* Returns printer number */) 153 309.8 T
0 F
(Returns the system-default printer) 180 291.8 T
(, which is used \050for example\051 by the) 341.29 291.8 T
6 F
(PrintControlClass) 180 280.3 T
0 F
( as the default printer to print to.) 274.82 280.3 T
2 F
(Include:) 99 261.8 T
0 F
(spool.goh) 180 261.8 T
81 245.46 531 250.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 245.46 531 250.47 R
7 X
0 0 0 1 0 0 0 K
V
50 249.46 609.01 249.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 237.46 T
2 F
(SpoolGetNumPaperSizes\050\051) 99 237.46 T
4 10 Q
(int) 99 222.79 T
3 F
(SpoolGetNumPaperSizes\050) 153 222.79 T
3 9 Q
(PageType) 153 212.46 T
(type\051;) 201.6 212.46 T
(/* type of page */) 279 212.46 T
0 10 Q
(Use this routine to \336nd the number of paper sizes, both pre-de\336ned and) 180 194.79 T
(user) 180 183.29 T
(-de\336ned, that should appear in a paper size list.) 200 183.29 T
2 F
(Include:) 99 164.79 T
0 F
(spool.goh) 180 164.79 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "376" 16
%%Page: "377" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(377) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SpoolGetNumPrinters\050\051) 99 634.99 T
4 10 Q
(int) 99 620.33 T
3 F
(SpoolGetNumPrinters\050) 153 620.33 T
3 9 Q
(PrinterDriverType) 153 609.99 T
(type\051;) 261 609.99 T
(/* driver type */) 315 609.99 T
0 10 Q
(This routine returns the number of installed printers with the given type.) 180 592.33 T
2 F
(Structures:) 99 573.83 T
3 9 Q
(typedef ByteEnum PrinterDriverType;) 153 563.49 T
(/* The driver type may be one of the following:) 153 553.49 T
(PDT_PRINTER,) 189 543.49 T
(PDT_PLOTTER,) 189 533.49 T
(PDT_FACSIMILE,) 189 523.49 T
(PDT_CAMERA,) 189 513.49 T
(PDT_OTHER,) 189 503.49 T
(PDT_ALL) 189 493.49 T
(*/) 226.8 493.49 T
2 10 Q
(Include:) 99 475.83 T
0 F
(spool.goh) 180 475.83 T
81 459.48 531 464.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 459.48 531 464.49 R
7 X
0 0 0 1 0 0 0 K
V
50 463.48 609.01 463.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 451.48 T
2 F
(SpoolGetPaperSize\050\051) 99 451.48 T
4 10 Q
(XYSizeAsDWord) 99 436.82 T
3 F
( SpoolGetPaperSize\050) 177 436.82 T
3 9 Q
(int) 153 426.48 T
(size,) 261 426.48 T
-0.6 (/* This must be between 0 and the return) 315 426.48 P
( * value of SpoolGetNumPaperSizes\050\051 */) 315 416.48 T
(PageType) 153 406.48 T
(pt,) 261 406.48 T
(/* type of page */) 315 406.48 T
(PageLayout) 153 396.48 T
(*layout\051;) 261 396.48 T
(/* Will hold returned page layout */) 315 396.48 T
0 10 Q
(Use this routine to determine the dimensions of a paper size.) 180 378.82 T
2 F
(Include:) 99 360.32 T
0 F
(spool.goh) 180 360.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "377" 17
%%Page: "378" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(378) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SpoolGetPaperSizeOrder\050\051) 99 634.99 T
4 10 Q
(dword) 99 620.33 T
3 F
(SpoolGetPaperSizeOrder\050 /* High byte is number of unused sizes;) 153 620.33 T
(* Low byte is # of ordered sizes */) 297 609.33 T
3 9 Q
(PageType) 153 598.99 T
(type,) 261 598.99 T
(byte) 153 588.99 T
(*order,) 261 588.99 T
(/* buffer of size MAX_PAPER_SIZES */) 333 588.99 T
(/* On return, this buffer will be) 315 578.99 T
( * filled with the page size numbers) 315 568.99 T
( * arranged in the order) 315 558.99 T
( * corresponding to their display */) 315 548.99 T
(byte) 153 538.99 T
(*userSizes\051;) 261 538.99 T
(/* buffer of size MAX_PAPER_SIZES */) 331.2 538.99 T
(/* On return, will hold ordered) 333 528.99 T
( * array of user paper sizes. */) 333 518.99 T
81 504.98 531 509.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 504.98 531 509.99 R
7 X
0 0 0 1 0 0 0 K
V
50 508.98 609.01 508.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 496.98 T
2 F
(SpoolGetPaperSizeString\050\051) 99 496.98 T
4 10 Q
(Boolean) 99 482.32 T
3 F
(SpoolGetPaperSizeString\050 /* true if error*/) 153 482.32 T
3 9 Q
(char) 153 471.98 T
(* retValue,) 261 471.98 T
(/* buffer for returned value */) 333 471.98 T
(int) 153 461.98 T
(size,) 261 461.98 T
(/* Must be between 0 and the return) 297 461.98 T
( * value of SpoolGetNumPaperSizes\050\051 */) 297 451.98 T
(PageType) 153 441.98 T
(pt\051;) 261 441.98 T
(/* type of page */) 297 441.98 T
0 10 Q
(Use this routine to determine the string to be displayed for a speci\336c paper) 180 424.32 T
(size. Upon return,) 180 412.82 T
5 F
(retV) 266.48 412.82 T
(alue) 284.63 412.82 T
0 F
( will point to a character string and the Boolean) 304.25 412.82 T
-0.35 (return value will be) 180 401.32 P
5 F
-0.35 (false) 272.68 401.32 P
0 F
-0.35 ( if successful. If any error occurs, or if the page type) 293.96 401.32 P
(couldn\325) 180 389.82 T
(t be found, the returned value will be) 212.41 389.82 T
5 F
(true) 386.88 389.82 T
0 F
(.) 405.39 389.82 T
2 F
(Include:) 99 371.32 T
0 F
(spool.goh) 180 371.32 T
81 354.98 531 359.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 354.98 531 359.98 R
7 X
0 0 0 1 0 0 0 K
V
50 358.98 609.01 358.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 346.98 T
2 F
(SpoolGetPrinterString\050\051) 99 346.98 T
4 10 Q
(Boolean) 99 332.31 T
3 F
(SpoolGetPrinterString\050 /* Returns true if error */) 153 332.31 T
3 9 Q
(int) 153 321.98 T
(*retValue,) 189 321.98 T
(/* On return, will point to length of string */) 261 321.98 T
(char) 153 311.98 T
(*string,) 189 311.98 T
(/* returned name string */) 261 311.98 T
(int) 153 301.98 T
(prtrNum\051;) 189 301.98 T
(/* printer number */) 261 301.98 T
0 10 Q
(This routine \336lls a buffer with the requested null-terminated printer name) 180 284.31 T
-0.26 (string. If the printer could not be found, the return value will be) 180 272.81 P
5 F
-0.26 (true) 475.32 272.81 P
0 F
-0.26 ( \050set for) 493.83 272.81 P
(error\051.) 180 261.31 T
2 F
(Include:) 99 242.81 T
0 F
(spool.goh) 180 242.81 T
81 226.47 531 231.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 226.47 531 231.47 R
7 X
0 0 0 1 0 0 0 K
V
50 230.47 609.01 230.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 218.47 T
2 F
(SpoolSetDefaultPrinter\050\051) 99 218.47 T
4 10 Q
(void) 99 203.8 T
3 F
(SpoolSetDefaultPrinter\050) 153 203.8 T
3 9 Q
(int prtrNum\051;) 153 193.47 T
(/* printer number */) 261 193.47 T
0 10 Q
(Sets the system-default printer) 180 175.8 T
(, used \050for example\051 by) 323.71 175.8 T
6 F
(PrintControlClass) 430.94 175.8 T
0 F
(as the default printer) 180 164.3 T
(. This routine is normally called from within the) 278.34 164.3 T
(Preferences manager) 180 152.8 T
(.) 277.03 152.8 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "378" 18
%%Page: "379" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(379) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(spool.goh) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(SpoolSetDocSize\050\051) 99 616.99 T
4 10 Q
(void) 99 603.33 T
3 F
(SpoolSetDocSize\050) 153 603.33 T
3 9 Q
(Boolean) 153 592.99 T
(open;) 261 592.99 T
(/* false if document is closed */) 315 592.99 T
(PageSizeInfo) 153 582.99 T
(* psr\051;) 261 582.99 T
(/* NULL if document is closed */) 315 582.99 T
0 10 Q
(This routine tells the application\325) 180 565.33 T
(s PageSizeControl object the document\325) 333.36 565.33 T
(s) 514.48 565.33 T
(size.) 180 553.83 T
2 F
(Include:) 99 535.33 T
0 F
(spool.goh) 180 535.33 T
81 518.98 531 523.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 518.98 531 523.99 R
7 X
0 0 0 1 0 0 0 K
V
50 522.98 609.01 522.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 510.98 T
2 F
(SpoolSetPaperSizeOrder\050\051) 99 510.98 T
4 10 Q
(void) 99 496.32 T
3 F
(SpoolSetPaperSizeOrder\050) 153 496.32 T
3 9 Q
(void) 153 485.98 T
(* ptr,) 189 485.98 T
(/* Array of PageSizeOrder entries */) 279 485.98 T
(word) 153 475.98 T
(number\051;) 189 475.98 T
(/* number of entries in array */) 279 475.98 T
0 10 Q
(This routine resets the order in which paper sizes are displayed to the user) 180 458.32 T
(.) 525.57 458.32 T
2 F
(Include:) 99 439.82 T
0 F
(spool.goh) 180 439.82 T
81 423.48 531 428.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 423.48 531 428.48 R
7 X
0 0 0 1 0 0 0 K
V
50 427.48 609.01 427.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 415.48 T
2 F
(SpreadsheetInitFile\050\051) 99 415.48 T
4 10 Q
(VMBlockHandle) 99 400.81 T
3 F
( SpreadsheetInitFile\050) 177 400.81 T
3 9 Q
(const SpreadsheetInitFileData) 153 390.48 T
(* ifd\051;) 315 390.48 T
0 10 Q
-0.78 (This routine initializes a) 180 372.81 P
0 9 Q
-0.7 (VM) 293.58 372.81 P
0 10 Q
-0.78 ( \336le for use by the spreadsheet object. It allocates) 308.57 372.81 P
(a spreadsheet map block in the \336le and initializes this block. The routine) 180 361.31 T
(returns the map block\325) 180 349.81 T
(s handle; applications will need to remember this) 283.9 349.81 T
(handle. It does not change any existing blocks in the) 180 338.31 T
0 9 Q
(VM) 424.85 338.31 T
0 10 Q
( \336le.) 439.84 338.31 T
(The) 180 319.81 T
5 F
(ifd) 200.56 319.81 T
0 F
( parameter is pointer to a) 213.33 319.81 T
6 F
(SpreadsheetInitFileData) 334.09 319.81 T
0 F
( structure) 462.97 319.81 T
(containing the \336le handle and the number of rows and columns to allocate.) 180 308.31 T
2 F
(Structures:) 99 289.81 T
0 F
(The) 180 289.81 T
6 F
(SpreadsheetInitFileData) 200.56 289.81 T
0 F
( structure is de\336ned as follows:) 329.44 289.81 T
3 9 Q
(typedef struct {) 216 275.47 T
(word) 252 265.47 T
(SIFD_file;) 396 265.47 T
(word) 252 255.47 T
(SIFD_numRows;) 396 255.47 T
(word) 252 245.47 T
(SIFD_numCols;) 396 245.47 T
(SpreadsheetDrawFlags) 252 235.47 T
(SIFD_drawFlags;) 396 235.47 T
(} SpreadsheetInitFileData;) 216 225.47 T
(/* SpreadsheetDrawFlags:) 216 211.47 T
( * SDF_DRAW_GRAPHICS) 216 201.47 T
( * SDF_DRAW_NOTE_BUTTON) 216 191.47 T
( * SDF_DRAW_HEADER_FOOTER_BUTTON) 216 181.47 T
( * SDF_DRAW_GRID) 216 171.47 T
(*/) 360 171.47 T
2 10 Q
(Include:) 99 153.81 T
0 F
(ssheet.goh) 180 153.81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "379" 19
%%Page: "380" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(380) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(StreamClose\050\051) 99 634.99 T
4 10 Q
(StreamError) 99 620.33 T
3 F
( StreamClose \050) 165 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(StreamToken) 153 599.99 T
(stream,) 261 599.99 T
(Boolean) 153 589.99 T
(linger\051;) 261 589.99 T
0 10 Q
(This routine shuts down a stream. It is passed the following arguments:) 180 572.33 T
5 F
(driver) 180 553.83 T
0 F
(The) 243 553.83 T
6 F
(GeodeT) 263.56 553.83 T
(oken) 302.45 553.83 T
0 F
( of the stream driver) 327.82 553.83 T
(.) 422.08 553.83 T
5 F
(stream) 180 535.83 T
0 F
(The) 243 535.83 T
6 F
(StreamT) 263.56 535.83 T
(oken) 307.46 535.83 T
0 F
( of the stream.) 332.83 535.83 T
5 F
(linger) 180 517.83 T
0 F
(Set) 243 517.83 T
5 F
(true) 260.97 517.83 T
0 F
( \050i.e., non-zero\051 if the data currently in the stream) 279.48 517.83 T
(should be kept until it\325) 243 506.83 T
(s read; set) 347.1 506.83 T
5 F
(false) 397.11 506.83 T
0 F
( to \337ush the data) 418.39 506.83 T
(immediately) 243 495.83 T
(.) 299.68 495.83 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 477.83 T
(member of the) 180 466.33 T
6 F
(StreamError) 249.45 466.33 T
0 F
( enumerated type.) 316.32 466.33 T
81 451.48 531 456.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 451.48 531 456.49 R
7 X
0 0 0 1 0 0 0 K
V
50 455.48 609.01 455.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 443.48 T
2 F
(StreamFlush\050\051) 99 443.48 T
4 10 Q
(StreamError) 99 428.82 T
3 F
( StreamFlush \050) 165 428.82 T
3 9 Q
(GeodeHandle) 153 418.48 T
(driver,) 261 418.48 T
(StreamToken) 153 408.48 T
(stream\051;) 261 408.48 T
0 10 Q
(This routine \337ushes all the data pending in a stream. It is passed the) 180 390.82 T
(following arguments:) 180 379.32 T
5 F
(driver) 180 360.82 T
0 F
(The) 243 360.82 T
6 F
(GeodeT) 263.56 360.82 T
(oken) 302.45 360.82 T
0 F
( of the stream driver) 327.82 360.82 T
(.) 422.08 360.82 T
5 F
(stream) 180 342.82 T
0 F
(The) 243 342.82 T
6 F
(StreamT) 263.56 342.82 T
(oken) 307.46 342.82 T
0 F
( of the stream.) 332.83 342.82 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 324.82 T
(member of the) 180 313.32 T
6 F
(StreamError) 249.45 313.32 T
0 F
( enumerated type.) 316.32 313.32 T
81 298.48 531 303.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 298.48 531 303.48 R
7 X
0 0 0 1 0 0 0 K
V
50 302.48 609.01 302.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 290.48 T
2 F
(StreamOpen\050\051) 99 290.48 T
4 10 Q
(StreamError) 99 275.81 T
3 F
( StreamOpen \050) 165 275.81 T
3 9 Q
(GeodeHandle) 153 265.47 T
(driver,) 261 265.47 T
(word) 153 255.47 T
(buffSize,) 261 255.47 T
(GeodeHandle) 153 245.47 T
(owner,) 261 245.47 T
(HeapFlags) 153 235.47 T
(heapFlags,) 261 235.47 T
(StreamToken *) 153 225.47 T
(stream\051;) 261 225.47 T
0 10 Q
(This routine opens a stream. It is passed the following:) 180 207.81 T
5 F
(driver) 180 189.31 T
0 F
(The) 243 189.31 T
6 F
(GeodeT) 263.56 189.31 T
(oken) 302.45 189.31 T
0 F
( of the stream driver) 327.82 189.31 T
(.) 422.08 189.31 T
5 F
(buffSize) 180 171.31 T
0 F
(The size of the stream buffer) 243 171.31 T
(, in bytes.) 375.04 171.31 T
5 F
(owner) 180 153.31 T
0 F
(The geode which will own the stream.) 243 153.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "380" 20
%%Page: "381" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(381) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(heapFlags) 180 641.33 T
0 F
(The \337ags for the creation of the buffer block.) 243 641.33 T
5 F
(*stream) 180 623.33 T
0 F
(The stream token will be written here.) 243 623.33 T
-0.55 (If) 180 605.33 P
6 F
-0.57 (StreamOpen\050\051) 189.63 605.33 P
0 F
-0.55 ( is successful, it returns zero and writes the stream\325) 262.6 605.33 P
-0.55 (s token) 495.98 605.33 P
(to) 180 593.83 T
5 F
(*stream) 191.67 593.83 T
0 F
(. If it is unsuccessful, it returns a member of the) 228.14 593.83 T
6 F
(StreamError) 453.52 593.83 T
0 F
(enumerated type.) 180 582.33 T
81 567.49 531 572.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 567.49 531 572.5 R
7 X
0 0 0 1 0 0 0 K
V
50 571.49 609.01 571.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 559.49 T
2 F
(StreamQuery\050\051) 99 559.49 T
4 10 Q
(StreamError) 99 544.83 T
3 F
( StreamQuery \050) 165 544.83 T
3 9 Q
(GeodeHandle) 153 534.49 T
(driver,) 261 534.49 T
(StreamToken) 153 524.49 T
(stream,) 261 524.49 T
(StreamRoles) 153 514.49 T
(role,) 261 514.49 T
(word *) 153 504.49 T
(bytesAvailable\051;) 261 504.49 T
0 10 Q
(This routine \336nds out either how much free space is available in a stream\325) 180 486.83 T
(s) 521.9 486.83 T
(buffer) 180 475.33 T
(, or how much data is waiting to be read. It is passed the following) 207.03 475.33 T
(arguments:) 180 463.83 T
5 F
(driver) 180 445.33 T
0 F
(The) 243 445.33 T
6 F
(GeodeT) 263.56 445.33 T
(oken) 302.45 445.33 T
0 F
( of the stream driver) 327.82 445.33 T
(.) 422.08 445.33 T
5 F
(stream) 180 427.33 T
0 F
(The) 243 427.33 T
6 F
(StreamT) 263.56 427.33 T
(oken) 307.46 427.33 T
0 F
( of the stream.) 332.83 427.33 T
5 F
(role) 180 409.33 T
0 F
-0.22 (If this is) 243 409.33 P
0 9 Q
-0.2 (STREAM_ROLES_WRITER) 283.63 409.33 P
0 10 Q
-0.22 (, the routine will return the) 401.95 409.33 P
(amount of free space available in the stream buffer) 243 398.33 T
(. If it is) 478.03 398.33 T
0 9 Q
(STREAM_ROLES_READER) 243 387.33 T
0 10 Q
(, it will return the amount of data) 362.83 387.33 T
(waiting to be read.) 243 376.33 T
5 F
(*bytesA) 180 358.33 T
(vailable) 214.8 358.33 T
0 F
(The routine will write the number of bytes available \050for) 243 347.33 T
(writing or reading\051 to this variable.) 243 336.33 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 318.33 T
(member of the) 180 306.83 T
6 F
(StreamError) 249.45 306.83 T
0 F
( enumerated type.) 316.32 306.83 T
81 291.98 531 296.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 291.98 531 296.99 R
7 X
0 0 0 1 0 0 0 K
V
50 295.98 609.01 295.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 283.98 T
2 F
(StreamRead\050\051) 99 283.98 T
4 10 Q
(StreamError) 99 269.32 T
3 F
( StreamRead \050) 165 269.32 T
3 9 Q
(GeodeHandle) 153 258.98 T
(driver,) 261 258.98 T
(StreamToken) 153 248.98 T
(stream,) 261 248.98 T
(StreamBlocker) 153 238.98 T
(blocker,) 261 238.98 T
(word) 153 228.98 T
(buffSize,) 261 228.98 T
(byte *) 153 218.98 T
(buffer,) 261 218.98 T
(word *) 153 208.98 T
(numBytesRead\051;) 261 208.98 T
0 10 Q
(This routine reads data from a stream. The routine takes the following) 180 191.32 T
(arguments:) 180 179.82 T
5 F
(driver) 180 161.32 T
0 F
(The) 243 161.32 T
6 F
(GeodeT) 263.56 161.32 T
(oken) 302.45 161.32 T
0 F
( of the stream driver) 327.82 161.32 T
(.) 422.08 161.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "381" 21
%%Page: "382" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(382) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(stream) 180 641.33 T
0 F
(The) 243 641.33 T
6 F
(StreamT) 263.56 641.33 T
(oken) 307.46 641.33 T
0 F
( of the stream.) 332.83 641.33 T
5 F
(blocker) 180 623.33 T
0 F
-0.17 (Specify whether to block if there is not enough data waiting to) 243 623.33 P
(be read.) 243 612.33 T
5 F
(buffsize) 180 594.33 T
0 F
-0.07 (Size of passed buffer \050i.e. amount of data to read from stream\051.) 243 594.33 P
5 F
(buffer) 180 576.33 T
0 F
(Pointer to buffer where data from stream will be written.) 243 576.33 T
5 F
(*numBytesReadRead) 180 558.33 T
6 F
-0.17 (StreamRead\050\051) 243 547.33 P
0 F
-0.17 ( will write to this variable the number of bytes) 315.05 547.33 P
(actually read from the stream.) 243 536.33 T
-0.22 (If) 180 518.33 P
6 F
-0.23 (StreamRead\050\051) 189.96 518.33 P
0 F
-0.22 ( is successful, it returns zero. If it is unsuccessful, or could) 262.01 518.33 P
(not read all the data requested from the stream, it returns a member of the) 180 506.83 T
6 F
(StreamError) 180 495.33 T
0 F
( enumerated type.) 246.87 495.33 T
81 480.49 531 485.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 480.49 531 485.5 R
7 X
0 0 0 1 0 0 0 K
V
50 484.49 609.01 484.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 472.49 T
2 F
(StreamReadByte\050\051) 99 472.49 T
4 10 Q
(StreamError) 99 457.83 T
3 F
( StreamWriteByte \050) 165 457.83 T
3 9 Q
(GeodeHandle) 153 447.49 T
(driver,) 261 447.49 T
(StreamToken) 153 437.49 T
(stream,) 261 437.49 T
(StreamBlocker) 153 427.49 T
(blocker,) 261 427.49 T
(byte *) 153 417.49 T
(dataByte\051;) 261 417.49 T
0 10 Q
(This routine reads a single byte from a stream. It takes the following) 180 399.83 T
(arguments:) 180 388.33 T
5 F
(driver) 180 369.83 T
0 F
(The) 243 369.83 T
6 F
(GeodeT) 263.56 369.83 T
(oken) 302.45 369.83 T
0 F
( of the stream driver) 327.82 369.83 T
(.) 422.08 369.83 T
5 F
(stream) 180 351.83 T
0 F
(The) 243 351.83 T
6 F
(StreamT) 263.56 351.83 T
(oken) 307.46 351.83 T
0 F
( of the stream.) 332.83 351.83 T
5 F
(blocker) 180 333.83 T
0 F
(Specify whether to block if there is not enough room to write) 243 333.83 T
(the data.) 243 322.83 T
5 F
(*dataByte) 180 304.83 T
0 F
(Read a byte from the stream, and write it to this variable.) 243 304.83 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 286.83 T
(member of the) 180 275.33 T
6 F
(StreamError) 249.45 275.33 T
0 F
( enumerated type.) 316.32 275.33 T
81 260.48 531 265.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 260.48 531 265.49 R
7 X
0 0 0 1 0 0 0 K
V
50 264.48 609.01 264.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 252.48 T
2 F
(StreamW) 99 252.48 T
(rite\050\051) 150.79 252.48 T
4 10 Q
(StreamError) 99 237.82 T
3 F
( StreamWrite \050) 165 237.82 T
3 9 Q
(GeodeHandle) 153 227.48 T
(driver,) 261 227.48 T
(StreamToken) 153 217.48 T
(stream,) 261 217.48 T
(StreamBlocker) 153 207.48 T
(blocker,) 261 207.48 T
(word) 153 197.48 T
(buffSize,) 261 197.48 T
(const byte *) 153 187.48 T
(buffer,) 261 187.48 T
(word *) 153 177.48 T
(numBytesWritten\051;) 261 177.48 T
0 10 Q
(This routine writes data to a stream. The routine takes the following) 180 159.82 T
(arguments:) 180 148.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "382" 22
%%Page: "383" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(383) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(driver) 180 641.33 T
0 F
(The) 243 641.33 T
6 F
(GeodeT) 263.56 641.33 T
(oken) 302.45 641.33 T
0 F
( of the stream driver) 327.82 641.33 T
(.) 422.08 641.33 T
5 F
(stream) 180 623.33 T
0 F
(The) 243 623.33 T
6 F
(StreamT) 263.56 623.33 T
(oken) 307.46 623.33 T
0 F
( of the stream.) 332.83 623.33 T
5 F
(blocker) 180 605.33 T
0 F
-0.65 (Specify whether to block if there is not enough room to write all) 243 605.33 P
(the data.) 243 594.33 T
5 F
(buffsize) 180 576.33 T
0 F
(Size of passed data buffer \050i.e. amount of data to write to) 243 576.33 T
(stream\051.) 243 565.33 T
5 F
(buffer) 180 547.33 T
0 F
(Pointer to data to write to stream.) 243 547.33 T
5 F
(*numBytesW) 180 529.33 T
(ritten) 239.25 529.33 T
6 F
-0.33 (StreamW) 243 518.33 P
-0.33 (rite\050\051) 289.86 518.33 P
0 F
-0.32 ( will write to this variable the number of bytes) 316.53 518.33 P
(actually written to the stream.) 243 507.33 T
-0.34 (If) 180 489.33 P
6 F
-0.35 (StreamW) 189.85 489.33 P
-0.35 (rite\050\051) 236.71 489.33 P
0 F
-0.34 ( is successful, it returns zero. If it is unsuccessful, or could) 263.38 489.33 P
-0.79 (not write all the data to the stream, it returns a member of the) 180 477.83 P
6 F
-0.82 (StreamError) 462.14 477.83 P
0 F
(enumerated type.) 180 466.33 T
81 451.49 531 456.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 451.49 531 456.5 R
7 X
0 0 0 1 0 0 0 K
V
50 455.49 609.01 455.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 443.49 T
2 F
(StreamW) 99 443.49 T
(riteByte\050\051) 150.79 443.49 T
4 10 Q
(StreamError) 99 428.83 T
3 F
( StreamWriteByte \050) 165 428.83 T
3 9 Q
(GeodeHandle) 153 418.49 T
(driver,) 261 418.49 T
(StreamToken) 153 408.49 T
(stream,) 261 408.49 T
(StreamBlocker) 153 398.49 T
(blocker,) 261 398.49 T
(byte) 153 388.49 T
(dataByte\051;) 261 388.49 T
0 10 Q
(This routine writes a single byte to a stream. It takes the following) 180 370.83 T
(arguments:) 180 359.33 T
5 F
(driver) 180 340.83 T
0 F
(The) 243 340.83 T
6 F
(GeodeT) 263.56 340.83 T
(oken) 302.45 340.83 T
0 F
( of the stream driver) 327.82 340.83 T
(.) 422.08 340.83 T
5 F
(stream) 180 322.83 T
0 F
(The) 243 322.83 T
6 F
(StreamT) 263.56 322.83 T
(oken) 307.46 322.83 T
0 F
( of the stream.) 332.83 322.83 T
5 F
(blocker) 180 304.83 T
0 F
(Specify whether to block if there is not enough room to write) 243 304.83 T
(the data.) 243 293.83 T
5 F
(dataByte) 180 275.83 T
0 F
(W) 243 275.83 T
(rite this byte to the stream.) 252.26 275.83 T
(If the routine is successful, it returns zero. If it is unsuccessful, it returns a) 180 257.83 T
(member of the) 180 246.33 T
6 F
(StreamError) 249.45 246.33 T
0 F
( enumerated type.) 316.32 246.33 T
81 231.48 531 236.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 231.48 531 236.49 R
7 X
0 0 0 1 0 0 0 K
V
50 235.48 609.01 235.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 223.48 T
2 F
(SysGetCon\336g\050\051) 99 223.48 T
4 10 Q
(dword) 99 209.82 T
3 F
(SysGetConfig\050\051;) 153 209.82 T
0 F
(This routine returns a set of values de\336ning the system con\336guration. The) 180 191.82 T
-0.33 (returned dword contains four byte values, listed below from least signi\336cant) 180 180.32 P
(byte to most signi\336cant byte:) 180 168.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "383" 23
%%Page: "384" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(384) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
6 10 Q
0 X
(con\336guration \337ags) 180 641.33 T
0 F
(This byte contains a record of) 243 630.33 T
6 F
(SysCon\336gFlags) 381.9 630.33 T
0 F
( re\337ecting the) 461.34 630.33 T
(system status. This record includes information on how the) 243 619.33 T
(system was started, whether Swat is running it, whether the) 243 608.33 T
(system was restarted, etc.) 243 597.33 T
6 F
(reserved byte) 180 579.33 T
0 F
(This byte contains reserved information unusable by) 243 568.33 T
(applications.) 243 557.33 T
6 F
(processor type) 180 539.33 T
0 F
(This byte contains a value re\337ecting the processor type of the) 243 528.33 T
(machine running) 243 517.33 T
0 9 Q
(GEOS) 325.22 517.33 T
0 10 Q
(. This is of type) 351.39 517.33 T
6 F
(SysProcessorT) 424.74 517.33 T
(ype) 500.71 517.33 T
0 F
(and is one of) 243 506.33 T
0 9 Q
(SPT_) 303.75 506.33 T
0 10 Q
(8088,) 325.93 506.33 T
0 9 Q
(SPT_) 353.73 506.33 T
0 10 Q
(8086,) 375.9 506.33 T
0 9 Q
(SPT_) 403.7 506.33 T
0 10 Q
(80186,) 425.88 506.33 T
0 9 Q
(SPT_) 459.24 506.33 T
0 10 Q
(80286,) 481.41 506.33 T
0 9 Q
-0.02 (SPT_) 243 495.33 P
0 10 Q
-0.03 (80386, or) 265.18 495.33 P
0 9 Q
-0.02 (SPT_) 310.71 495.33 P
0 10 Q
-0.03 (80486. Use the macro) 332.88 495.33 P
0 9 Q
-0.02 (SGC_PROCESSOR) 435.59 495.33 P
0 10 Q
-0.03 ( to) 516.6 495.33 P
(extract this value from the returned dword.) 243 484.33 T
6 F
(machine type) 180 466.33 T
0 F
-0.52 (This byte contains a value of) 243 455.33 P
6 F
-0.54 (SysMachineT) 374.92 455.33 P
-0.54 (ype) 444.02 455.33 P
0 F
-0.52 ( indicating the) 462.54 455.33 P
(type of the machine running) 243 444.33 T
0 9 Q
(GEOS) 376.89 444.33 T
0 10 Q
(. It may be one of the) 403.06 444.33 T
(following values:) 243 433.33 T
0 9 Q
(SMT_UNKNOWN) 323.2 433.33 T
0 10 Q
(,) 400.04 433.33 T
0 9 Q
(SMT_PC, SMT_PC_CONV) 405.6 433.33 T
0 10 Q
(,) 515.49 433.33 T
0 9 Q
(SMT_PC_JR, SMT_PC_XT) 243 422.33 T
(, SMT_PC_XT_) 354.36 422.33 T
0 10 Q
(286,) 417.87 422.33 T
0 9 Q
(SMT_PC_A) 440.11 422.33 T
(T) 487.78 422.33 T
(,) 492.96 422.33 T
(SMT_PS) 243 411.33 T
0 10 Q
(2_30,) 279.34 411.33 T
0 9 Q
(SMT_PS) 306.58 411.33 T
0 10 Q
(2_50,) 342.92 411.33 T
0 9 Q
(SMT_PS) 370.16 411.33 T
0 10 Q
(2_60,) 406.51 411.33 T
0 9 Q
(SMT_PS) 433.75 411.33 T
0 10 Q
(2_80, or) 470.09 411.33 T
0 9 Q
(SMT_PS) 243 400.33 T
0 10 Q
(1. Use the macro) 279.34 400.33 T
0 9 Q
(SGC_MACHINE) 359.91 400.33 T
0 10 Q
( to extract this value) 430.07 400.33 T
(from the returned dword.) 243 389.33 T
2 F
(Include:) 99 371.33 T
0 F
(system.h) 180 371.33 T
81 354.99 531 360 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 354.99 531 360 R
7 X
0 0 0 1 0 0 0 K
V
50 358.99 609.01 358.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 346.99 T
2 F
(SysGetDosEnvironment\050\051) 99 346.99 T
4 10 Q
(Boolean) 99 333.33 T
3 F
(SysGetDosEnvironment\050 /* true if error \050not found\051 */) 153 333.33 T
3 9 Q
(const char) 153 322.99 T
(* variable,) 261 322.99 T
(/* environment variable */) 333 322.99 T
(char) 153 312.99 T
(* buffer,) 261 312.99 T
(/* buffer for return value */) 333 312.99 T
(word) 153 302.99 T
(bufSize\051;) 261 302.99 T
(/* maximum return string length */) 333 302.99 T
0 10 Q
(This routine looks up a speci\336ed) 180 285.33 T
0 9 Q
(DOS) 331.87 285.33 T
0 10 Q
( environment variable in the) 351.54 285.33 T
(environment buffer) 180 273.83 T
(. It takes three parameters:) 268.88 273.83 T
5 F
(variable) 180 255.33 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 255.33 P
(the name of the variable to be searched for) 243 244.33 T
(.) 439.32 244.33 T
5 F
(buffer) 180 226.33 T
0 F
(A pointer to a locked or \336xed buffer in which the variable\325) 243 226.33 T
(s) 508.58 226.33 T
(value will be returned.) 243 215.33 T
5 F
(bufSize) 180 197.33 T
0 F
-0.54 (The size of the passed buffer in bytes \050the maximum number of) 243 197.33 P
-0.53 (characters that can be returned including the terminating null) 243 186.33 P
(character\051.) 243 175.33 T
(If the variable is not found, the error \337ag returned will be) 180 157.33 T
5 F
(true) 449.28 157.33 T
0 F
(.) 467.79 157.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "384" 24
%%Page: "385" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(385) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(system.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(SysGetECLevel\050\051) 99 616.99 T
4 10 Q
(ErrorCheckingFlags) 99 603.33 T
3 F
( SysGetECLevel\050) 207 603.33 T
3 9 Q
(MemHandle * checksumBlock\051;) 153 592.99 T
0 10 Q
(This routine checks the current error) 180 575.33 T
(-checking level of the system. The) 351.28 575.33 T
(returned record of) 180 563.83 T
6 F
(ErrorCheckingFlags) 266.46 563.83 T
0 F
( describes which levels of error) 372.95 563.83 T
(checking are turned on and which are off. If checksum error checking) 180 552.33 T
(\050) 180 540.83 T
0 9 Q
(ECF_BLOCK_CHECKSUM) 183.33 540.83 T
0 10 Q
(\051 is on, pass a pointer to the handle of a block on) 299.83 540.83 T
(which the checksum will be done.) 180 529.33 T
2 F
(Include:) 99 510.83 T
0 F
(ec.h) 180 510.83 T
81 494.48 531 499.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 494.48 531 499.49 R
7 X
0 0 0 1 0 0 0 K
V
50 498.48 609.01 498.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 486.48 T
2 F
(SysGetInfo\050\051) 99 486.48 T
4 10 Q
(dword) 99 472.82 T
3 F
(SysGetInfo\050) 153 472.82 T
3 9 Q
(SysGetInfoType info\051;) 153 462.48 T
(/* type of information to retrieve */) 279 462.48 T
0 10 Q
(This routine returns general system information. Pass the type of) 180 444.82 T
-0.64 (information to be returned; the value returned depends on the type passed in) 180 433.32 P
5 F
-0.07 (info) 180 421.82 P
0 F
-0.07 (. Note that the largest returned value is a dword; many different return) 197.77 421.82 P
(values should be cast to the appropriate type when calling) 180 410.32 T
6 F
(SysGetInfo\050\051) 451.52 410.32 T
0 F
(.) 516.7 410.32 T
(The) 180 391.82 T
5 F
(info) 200.56 391.82 T
0 F
( parameter \050of) 218.33 391.82 T
6 F
(SysGetInfoT) 286.85 391.82 T
(ype) 350.95 391.82 T
0 F
(\051 can have one of the following) 369.47 391.82 T
(values:) 180 380.32 T
0 9 Q
(SGIT_TOT) 180 361.82 T
(AL_HANDLES) 225.35 361.82 T
0 10 Q
(Returns the total number of handles in the kernel\325) 243 350.82 T
(s handle) 475.43 350.82 T
(table.) 243 339.82 T
0 9 Q
(SGIT_HEAP_SIZE) 180 321.82 T
0 10 Q
(Returns the total heap size in bytes.) 243 310.82 T
0 9 Q
(SGIT_LARGEST_FREE_BLOCK) 180 292.82 T
0 10 Q
(Returns the size \050in bytes\051 of the largest possible block that) 243 281.82 T
(may be allocated at the moment.) 243 270.82 T
0 9 Q
(SGIT_TOT) 180 252.82 T
(AL_COUNT) 225.35 252.82 T
0 10 Q
(Returns the total number of clock ticks since the current) 243 241.82 T
(session of) 243 230.82 T
0 9 Q
(GEOS) 290.04 230.82 T
0 10 Q
( started \050subtracts the initial system clock) 316.21 230.82 T
(value from the current time\051.) 243 219.82 T
0 9 Q
(SGIT_NUMBER_OF_VOLUMES) 180 201.82 T
0 10 Q
(Returns the total number of volumes registered with the) 243 190.82 T
(system.) 243 179.82 T
0 9 Q
(SGIT_TOT) 180 161.82 T
(AL_GEODES) 225.35 161.82 T
0 10 Q
(Returns the total number of geodes currently loaded.) 243 150.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "385" 25
%%Page: "386" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(386) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(SGIT_NUMBER_OF_PROCESSES) 180 641.33 T
0 10 Q
(Returns the total number of processes currently loaded.) 243 630.33 T
0 9 Q
(SGIT_NUMBER_OF_LIBRARIES) 180 612.33 T
0 10 Q
(Returns the total number of libraries currently loaded.) 243 601.33 T
0 9 Q
(SGIT_NUMBER_OF_DRIVERS) 180 583.33 T
0 10 Q
(Returns the total number of drivers currently loaded.) 243 572.33 T
0 9 Q
(SGIT_CPU_SPEED) 180 554.33 T
0 10 Q
(Returns the) 243 543.33 T
0 9 Q
(CPU) 300.96 543.33 T
0 10 Q
( speed of the processor) 320.8 543.33 T
(. The value returned) 423.94 543.33 T
(will be ten times the ratio of the) 243 532.33 T
0 9 Q
(CPU) 393.96 532.33 T
0 10 Q
( speed relative to a base) 413.8 532.33 T
0 9 Q
(XT) 243 521.33 T
0 10 Q
( processor) 255.34 521.33 T
(.) 300.7 521.33 T
0 9 Q
(SGIT_SYSTEM_DISK) 180 503.33 T
0 10 Q
(Returns the disk handle of the disk on which) 243 492.33 T
0 9 Q
(GEOS) 453.02 492.33 T
0 10 Q
( \050the) 479.19 492.33 T
0 9 Q
(GEOS.INI) 243 481.33 T
0 10 Q
( \336le\051 resides.) 286.33 481.33 T
0 9 Q
(SGIT_UI_PROCESS) 180 465 T
2 10 Q
(Include:) 99 447.33 T
0 F
(sysstats.h) 180 447.33 T
81 430.99 531 436 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 430.99 531 436 R
7 X
0 0 0 1 0 0 0 K
V
50 434.99 609.01 434.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 422.99 T
2 F
(SysGetPenMode\050\051) 99 422.99 T
4 10 Q
(Boolean) 99 409.33 T
3 F
(SysGetPenMode\050\051;) 153 409.33 T
0 F
-0.05 (This routine returns true if) 180 391.33 P
0 9 Q
-0.05 (GEOS) 308.43 391.33 P
0 10 Q
-0.05 ( is running on a pen-based system, false if) 334.6 391.33 P
(it is not.) 180 379.83 T
2 F
(Include:) 99 361.33 T
0 F
(system.h) 180 361.33 T
81 344.98 531 349.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 344.98 531 349.99 R
7 X
0 0 0 1 0 0 0 K
V
50 348.98 609.01 348.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 336.98 T
2 F
(SysLocateFileInDosPath\050\051) 99 336.98 T
4 10 Q
(DiskHandle) 99 323.32 T
3 F
( SysLocateFileInDosPath\050 /* sets thread\325s error value */) 159 323.32 T
3 9 Q
(const char) 153 312.98 T
(* fname,) 261 312.98 T
(/* file name */) 333 312.98 T
(char) 153 302.98 T
(* buffer\051;) 261 302.98 T
(/* returned path of file */) 333 302.98 T
0 10 Q
-0.72 (This routine searches for a speci\336ed \336le along the search path speci\336ed in the) 180 285.32 P
0 9 Q
(DOS) 180 273.82 T
0 10 Q
( environment variable) 199.67 273.82 T
0 9 Q
(P) 304.87 273.82 T
(A) 310.21 273.82 T
(TH) 316.21 273.82 T
0 10 Q
(. The parameters are) 329.71 273.82 T
5 F
(fname) 180 255.32 T
0 F
(A pointer to the null-terminated \336le name to search for) 243 255.32 T
(.) 496.9 255.32 T
5 F
(buffer) 180 237.32 T
0 F
-0.05 (A pointer to a locked or \336xed buffer into which the full path of) 243 237.32 P
(the \336le will be placed.) 243 226.32 T
(This routine returns the disk handle of the disk on which the \336le resides as) 180 208.32 T
-0.5 (well as the \336le\325) 180 196.82 P
-0.5 (s full path \050with drive name\051 in the buffer pointed to by) 247.05 196.82 P
5 F
-0.5 (buffer) 499.46 196.82 P
0 F
-0.5 (.) 525.93 196.82 P
-0.17 (The path returned is a null-terminated character string. If the \336le could not) 180 185.32 P
-0.79 (be found, a null disk handle will be returned. The error value can be retrieved) 180 173.82 P
(with) 180 162.32 T
6 F
(ThreadGetError\050\051) 203.71 162.32 T
0 F
(.) 296.87 162.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "386" 26
%%Page: "387" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(387) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(system.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(SysNotify\050\051) 99 616.99 T
4 10 Q
(word) 99 602.33 T
3 F
(SysNotify\050) 153 602.33 T
3 9 Q
(SysNotifyFlags) 153 591.99 T
(flags,) 261 591.99 T
(/* options to offer user */) 333 591.99 T
(const char) 153 581.99 T
(* string1,) 261 581.99 T
(/* first string to display */) 333 581.99 T
(const char) 153 571.99 T
(* string2\051;) 261 571.99 T
(/* second string to display */) 333 571.99 T
0 10 Q
-0.59 (This routine causes the kernel to put up a standard noti\336cation dialog box on) 180 554.33 P
(the screen. This dialog box is white with a black border and is used nearly) 180 542.83 T
-0.83 (exclusively for error noti\336cation by the kernel. Pass this routine the following) 180 531.33 P
(parameters:) 180 519.83 T
5 F
(\337ags) 180 501.33 T
0 F
(A record of) 243 501.33 T
6 F
(SysNotifyFlags) 295.95 501.33 T
0 F
( indicating the options the dialog) 374.09 501.33 T
(presents to the user) 243 490.33 T
(. These \337ags are shown below) 334.11 490.33 T
(.) 470.07 490.33 T
5 F
(string1) 180 472.33 T
0 F
(A pointer to a null-terminated character string put up in the) 243 472.33 T
(dialog box \050may be a null pointer\051.) 243 461.33 T
5 F
(string2) 180 443.33 T
0 F
(A pointer to a second null-terminated string presented in the) 243 443.33 T
(dialog box \050may be a null pointer\051.) 243 432.33 T
(The returned word is the user) 180 414.33 T
(\325) 318.88 414.33 T
(s response, based on the) 320.55 414.33 T
6 F
(SysNotifyFlags) 435.01 414.33 T
0 F
(passed \050see below\051.) 180 402.83 T
2 F
(Structures:) 99 384.33 T
6 F
-0.48 (SysNotifyFlags) 180 384.33 P
0 F
-0.47 ( is a record of several \337ags; none, any) 258.14 384.33 P
-0.47 (, or all of the \337ags may) 425.91 384.33 P
(be set at a time. The \336ve \337ags are) 180 373.33 T
0 9 Q
(SNF_RETR) 180 355.33 T
(Y) 228.67 355.33 T
0 10 Q
(Allow the user to retry the operation that brought up the) 243 355.33 T
(noti\336cation box. If the user selects this option, it will be) 243 344.33 T
(returned by the routine.) 243 333.33 T
0 9 Q
(SNF_EXIT) 180 315.33 T
0 10 Q
(Allow the user to exit) 243 315.33 T
0 9 Q
(GEOS) 344.68 315.33 T
0 10 Q
( entirely) 370.85 315.33 T
(. If the user selects this) 408.63 315.33 T
(option, it will be returned by the routine after an) 243 304.33 T
0 9 Q
(SST_CLEAN_FORCED) 243 293.33 T
0 10 Q
( shutdown has been initiated.) 341.68 293.33 T
0 9 Q
(SNF_ABORT) 180 275.33 T
0 10 Q
(Allow the user to abort the operation that brought up the) 243 275.33 T
(noti\336cation box. If the user selects this option, it will be) 243 264.33 T
(returned by the routine.) 243 253.33 T
0 9 Q
(SNF_CONTINUE) 180 235.33 T
0 10 Q
-0.69 (Allow the user to continue the operation. If the user selects this) 243 224.33 P
(option, it will be returned by the routine.) 243 213.33 T
0 9 Q
(SNF_REBOOT) 180 195.33 T
0 10 Q
(Allow the user to shut down and reboot) 243 184.33 T
0 9 Q
(GEOS) 427.28 184.33 T
0 10 Q
( directly) 453.45 184.33 T
(. If the) 490.3 184.33 T
(user selects this option, the routine will not return.) 243 173.33 T
2 F
(Include:) 99 155.33 T
0 F
(system.h) 180 155.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "387" 27
%%Page: "388" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(388) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(SysRegisterScreen\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(SysRegisterScreen\050) 153 620.33 T
3 9 Q
(GeodeHandle) 153 609.99 T
(driver,) 261 609.99 T
(WindowHandle) 153 599.99 T
(root\051;) 261 599.99 T
81 585.98 531 590.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 585.98 531 590.99 R
7 X
0 0 0 1 0 0 0 K
V
50 589.98 609.01 589.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 577.98 T
2 F
(SysSetECLevel\050\051) 99 577.98 T
4 10 Q
(void) 99 564.32 T
3 F
(SysSetECLevel\050) 153 564.32 T
3 9 Q
(ErrorCheckingFlags) 153 553.98 T
(flags,) 261 553.98 T
(/* level of error checking */) 351 553.98 T
(MemHandle) 153 543.98 T
(checksumBlock\051;) 261 543.98 T
(/* block to check, if any */) 351 543.98 T
0 10 Q
-0.09 (This routine sets the error) 180 526.32 P
-0.09 (-checking level of the software. Pass it a record of) 301.32 526.32 P
6 F
(ErrorCheckingFlags) 180 514.82 T
0 F
( indicating which levels of error checking should be) 286.49 514.82 T
(employed. If checksum checking \050) 180 503.32 T
0 9 Q
(ECF_BLOCK_CHECKSUM) 334.62 503.32 T
0 10 Q
(\051 is turned on,) 451.12 503.32 T
(also pass the handle of a block on which the checksum will be performed.) 180 491.82 T
2 F
(Include:) 99 473.32 T
0 F
(ec.h) 180 473.32 T
81 456.98 531 461.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 456.98 531 461.98 R
7 X
0 0 0 1 0 0 0 K
V
50 460.98 609.01 460.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 448.98 T
2 F
(SysSetExitFlags\050\051) 99 448.98 T
4 10 Q
(word) 99 434.31 T
3 F
(SysGetExitFlags\050) 153 434.31 T
3 9 Q
(ExitFlags) 153 423.98 T
(bitsToSet,) 261 423.98 T
(ExitFlags) 153 413.98 T
(bitsToClear\051;) 261 413.98 T
81 399.97 531 404.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 399.97 531 404.98 R
7 X
0 0 0 1 0 0 0 K
V
50 403.97 609.01 403.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 391.97 T
2 F
(SysShutdown\050\051) 99 391.97 T
4 10 Q
(Boolean) 99 377.3 T
3 F
(SysShutdown\050) 153 377.3 T
3 9 Q
(SysShutdownType type,) 153 366.97 T
(...\051;) 153 356.97 T
0 10 Q
-0.27 (This routine causes the system to shut down, exiting to the native operating) 180 339.3 P
(system \050typically) 180 327.8 T
0 9 Q
(DOS) 261.12 327.8 T
0 10 Q
(\051. It takes variable parameters depending on the \336rst) 280.79 327.8 T
(parameter) 180 316.3 T
(. The \336rst parameter is the type of shutdown requested, and it) 227.78 316.3 T
(determines the calling format of the routine.) 180 304.8 T
6 F
(SysShutdown\050\051) 388.16 304.8 T
0 F
( returns a) 466.87 304.8 T
(Boolean value dependent on the type of shutdown.) 180 293.3 T
-0.82 (The parameters and calling format for this routine depend on the value in the) 180 274.8 P
5 F
(type) 180 263.3 T
0 F
( parameter) 198.7 263.3 T
(. The possible values \050) 249.26 263.3 T
6 F
(SysShutdownT) 350.95 263.3 T
(ype) 428.58 263.3 T
0 F
(\051 are listed below) 447.1 263.3 T
(with the associated parameter and return information.) 180 251.8 T
0 9 Q
(SST_CLEAN) 135 233.3 T
0 10 Q
-0.56 (Shut down all applications cleanly) 198 233.3 P
-0.56 (, allowing any that wish to to abort the) 353.57 233.3 P
(shutdown. The routine will return) 198 222.3 T
5 F
(true) 358.75 222.3 T
0 F
( if a system shutdown is already) 377.26 222.3 T
(in progress at the time of the call. This type of shutdown will send) 198 211.3 T
0 9 Q
(MSG_MET) 198 200.3 T
(A_CONFIRM_SHUTDOWN) 244.17 200.3 T
0 10 Q
( to all objects registered on the) 361.84 200.3 T
0 9 Q
-0.99 (MANUF) 198 189.3 P
-0.99 (ACTURER_ID_GEOWORKS) 233 189.3 P
0 10 Q
-1.1 (:) 354 189.3 P
0 9 Q
-0.99 (GCNSL) 356.78 189.3 P
-0.99 (T_SHUTDOWN_CONTROL) 388.79 189.3 P
-0.99 (GCN) 508.49 189.3 P
0 10 Q
(list \050but only if the shutdown is not cancelled\051. Each object on that list) 198 178.3 T
-0.68 (must return an acknowledgment of the shutdown. The parameter format) 198 167.3 P
(and parameters are) 198 156.3 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "388" 28
%%Page: "389" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(389) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
3 9 Q
0 X
(Boolean SysShutdown\050) 216 642 T
(SysShutdownType) 252 632 T
(type,) 360 632 T
(optr) 252 622 T
(notificationOD,) 360 622 T
(Message) 252 612 T
(msg\051;) 360 612 T
5 10 Q
(noti\336cation) 180 594.33 T
5 9 Q
(OD) 232.21 594.33 T
0 10 Q
-0.08 (The optr of an object which will receive the message passed in) 243 583.33 P
5 F
(msg) 243 572.33 T
0 F
( after the shutdown has been acknowledged. Pass a null) 261.7 572.33 T
(optr to use the default noti\336cation \050) 243 561.33 T
0 9 Q
(MSG_MET) 406.9 561.33 T
(A_DET) 453.07 561.33 T
(ACH) 483.08 561.33 T
0 10 Q
( sent) 503.57 561.33 T
(to the) 243 550.33 T
0 9 Q
(UI) 272.45 550.33 T
0 10 Q
(\051.) 283.45 550.33 T
5 F
(msg) 180 532.33 T
0 F
(The message to be sent to the object in) 243 532.33 T
5 F
(noti\336cation) 423.96 532.33 T
5 9 Q
(OD) 476.17 532.33 T
0 10 Q
(.) 490.17 532.33 T
0 9 Q
(SST_CLEAN_FORCED) 135 514.33 T
0 10 Q
-0.76 (Shut down all applications cleanly without the possibility of cancellation.) 198 503.33 P
-0.82 (This type takes no additional parameters and does not allow other geodes) 198 492.33 P
(to abort the shutdown. It will return, but the return value will be) 198 481.33 T
(meaningless.) 198 470.33 T
0 9 Q
(SST_DIRTY) 135 452.33 T
0 10 Q
(Attempt to exit device drivers and close all \336les without shutting down) 198 452.33 T
(applications. Does not return. The parameters of this type are) 198 441.33 T
3 9 Q
(Boolean SysShutdown{) 216 427 T
(SysShutdownType) 252 417 T
(type,) 360 417 T
(/* SST_DIRTY */) 432 417 T
(const char) 252 407 T
(* reason\051;) 360 407 T
0 10 Q
(The) 198 389.33 T
5 F
(reason) 218.56 389.33 T
0 F
( parameter is a pointer to a text string presented to the user) 248.73 389.33 T
-0.61 (as a reason for the dirty shutdown. The string is null-terminated. Pass -1) 198 378.33 P
(if no reason is to be given.) 198 367.33 T
0 9 Q
(SST_P) 135 349.33 T
(ANIC) 162.18 349.33 T
0 10 Q
-0.27 (Exit system device drivers \050) 198 349.33 P
0 9 Q
-0.24 (GA_SYSTEM) 324.9 349.33 P
0 10 Q
-0.27 (\051 without exiting applications or) 381.57 349.33 P
(closing \336les. This can be bad for the system and should be used only in) 198 338.33 T
(emergency situations. This type of shutdown takes no additional) 198 327.33 T
(parameters and does not return.) 198 316.33 T
0 9 Q
(SST_REBOOT) 135 298.33 T
0 10 Q
(This is used by) 198 287.33 T
0 9 Q
(GEOS) 269.87 287.33 T
0 10 Q
( when the user hits) 296.04 287.33 T
5 F
(Ctrl-Alt-Del) 387.9 287.33 T
0 F
(. Applications) 442.51 287.33 T
(should not call it.) 198 276.33 T
0 9 Q
(SST_REST) 135 258.33 T
(ART) 181.02 258.33 T
0 10 Q
(This is like) 198 247.33 T
0 9 Q
(SST_CLEAN_FORCED) 251.91 247.33 T
0 10 Q
( above, but it reloads) 350.59 247.33 T
0 9 Q
(GEOS) 449.88 247.33 T
0 10 Q
( after) 476.05 247.33 T
(shutting down rather than exit completely) 198 236.33 T
(. It takes no additional) 392.83 236.33 T
(parameters; it will return) 198 225.33 T
0 9 Q
(TRUE) 319.31 225.33 T
0 10 Q
( if the system could not be restarted,) 345.64 225.33 T
0 9 Q
(F) 198 214.33 T
(ALSE) 203.34 214.33 T
0 10 Q
( if the shutdown has been initiated.) 228.01 214.33 T
0 9 Q
(SST_FINAL) 135 196.33 T
0 10 Q
-0.22 (Perform the \336nal phase of a shutdown. This routine is called) 198 196.33 P
5 F
-0.22 (only) 477.96 196.33 P
0 F
-0.22 ( by the) 497.4 196.33 P
0 9 Q
-0.22 (UI) 198 185.33 P
0 10 Q
-0.24 ( when the) 209 185.33 P
0 9 Q
-0.22 (SST_CLEAN_FORCED) 256.61 185.33 P
0 10 Q
-0.24 ( shutdown is complete. This type does) 355.28 185.33 P
-0.71 (not return, and it takes one additional parameter) 198 174.33 P
-0.71 (. The calling format and) 420.65 174.33 P
(parameters of this type are) 198 163.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "389" 29
%%Page: "390" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(390) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
3 9 Q
0 X
(Boolean SysShutdown\050) 216 642 T
(SysShutdownType) 252 632 T
(type,) 360 632 T
(const char) 252 622 T
(* reason\051;) 360 622 T
0 10 Q
(The) 198 604.33 T
5 F
(reason) 218.56 604.33 T
0 F
( parameter is a character string explaining the reason) 248.73 604.33 T
(\050typically an error\051 for the \336nal shutdown.) 198 593.33 T
0 9 Q
(SST_SUSPEND) 135 575.33 T
0 10 Q
(Suspend system operation in preparation for task switching, and) 198 564.33 T
(broadcast) 198 553.33 T
0 9 Q
(MSG_MET) 245.6 553.33 T
(A_CONFIRM_SHUTDOWN) 291.77 553.33 T
0 10 Q
( to all objects on the) 409.44 553.33 T
0 9 Q
-0.99 (MANUF) 198 542.33 P
-0.99 (ACTURER_ID_GEOWORKS) 233 542.33 P
0 10 Q
-1.1 (:) 354 542.33 P
0 9 Q
-0.99 (GCNSL) 356.78 542.33 P
-0.99 (T_SHUTDOWN_CONTROL) 388.79 542.33 P
-0.99 (GCN) 508.49 542.33 P
0 10 Q
-0.68 (list \050see) 198 531.33 P
6 F
-0.7 (MetaClass) 234.97 531.33 P
0 F
-0.68 (\051. All noti\336ed objects must return acknowledgment of) 288.3 531.33 P
(the shutdown. This type of) 198 520.33 T
6 F
(SysShutdown\050\051) 323.94 520.33 T
0 F
( returns) 402.65 520.33 T
5 F
(true) 442.83 520.33 T
0 F
( if another) 461.34 520.33 T
(system shutdown is already in progress. It takes two additional) 198 509.33 T
(parameters:) 198 498.33 T
3 9 Q
(Boolean SysShutdown\050) 216 484 T
(SysShutdownType) 252 474 T
(type,) 360 474 T
(optr) 252 464 T
(notificationOD,) 360 464 T
(Message) 252 454 T
(msg\051;) 360 454 T
5 10 Q
(noti\336cation) 180 436.33 T
5 9 Q
(OD) 232.21 436.33 T
0 10 Q
-0.08 (The optr of an object which will receive the message passed in) 243 425.33 P
5 F
(msg) 243 414.33 T
0 F
( after the shutdown has been acknowledged. Pass a null) 261.7 414.33 T
(optr to use the default noti\336cation \050) 243 403.33 T
0 9 Q
(MSG_MET) 406.9 403.33 T
(A_DET) 453.07 403.33 T
(ACH) 483.08 403.33 T
0 10 Q
( sent) 503.57 403.33 T
(to the) 243 392.33 T
0 9 Q
(UI) 272.45 392.33 T
0 10 Q
(\051, though this is not usually the intent of the call.) 283.45 392.33 T
5 F
(msg) 180 374.33 T
0 F
(The message to be sent to the object in) 243 374.33 T
5 F
(noti\336cation) 423.96 374.33 T
5 9 Q
(OD) 476.17 374.33 T
0 10 Q
(.) 490.17 374.33 T
0 9 Q
(SST_CONFIRM_ST) 135 356.33 T
(ART) 218.02 356.33 T
0 10 Q
(Called by the recipient of) 198 345.33 T
0 9 Q
(MSG_MET) 316.9 345.33 T
(A_CONFIRM_SHUTDOWN) 363.07 345.33 T
0 10 Q
(; this) 480.74 345.33 T
-0.83 (allows shutdown con\336rmation dialog boxes to be presented in order to the) 198 334.33 P
-0.46 (user) 198 323.33 P
-0.46 (. The caller of this type will be blocked until all previous callers have) 217.44 323.33 P
(\336nished their con\336rmation procedure. When) 198 312.33 T
6 F
(SysShutdown\050\051) 405.76 312.33 T
0 F
( returns,) 484.47 312.33 T
-0.01 (the caller may present its con\336rmation dialog and continue or abort the) 198 301.33 P
-0.65 (shutdown. If) 198 290.33 P
6 F
-0.67 (SysShutdown\050\051) 257.82 290.33 P
0 F
-0.65 ( returns) 336.53 290.33 P
5 F
-0.65 (true) 375.41 290.33 P
0 F
-0.65 ( from a call with this type, the) 393.92 290.33 P
-0.7 (caller should) 198 279.33 P
5 F
-0.7 (not) 258.65 279.33 P
0 F
-0.7 ( present the con\336rmation dialog to the user and need not) 273.28 279.33 P
(call) 198 268.33 T
6 F
(SysShutdown\050\051) 217.08 268.33 T
0 F
( with) 295.79 268.33 T
0 9 Q
(SST_CONFIRM_END) 322.28 268.33 T
0 10 Q
(; another thread has) 414.95 268.33 T
(already cancelled the shutdown. This type takes no additional) 198 257.33 T
(parameters.) 198 246.33 T
0 9 Q
(SST_CONFIRM_END) 135 228.33 T
0 10 Q
(The counterpart of) 198 217.33 T
0 9 Q
(SST_CONFIRM_ST) 287.07 217.33 T
(ART) 370.09 217.33 T
0 10 Q
(, this ends the con\336rmation) 388.17 217.33 T
(sequence in an object\325) 198 206.33 T
(s) 297.64 206.33 T
0 9 Q
(MSG_MET) 305.05 206.33 T
(A_CONFIRM_SHUTDOWN) 351.22 206.33 T
0 10 Q
( handler) 468.89 206.33 T
(. It) 507.04 206.33 T
-0.19 (takes one additional parameter and returns nothing. The calling format) 198 195.33 P
(is shown below:) 198 184.33 T
3 9 Q
(void) 216 170 T
(SysShutdown\050) 252 170 T
(SysShutdownType) 252 160 T
(type,) 360 160 T
(Boolean) 252 150 T
(confirm\051;) 360 150 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "390" 30
%%Page: "391" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(391) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(The) 198 641.33 T
5 F
(con\336rm) 218.56 641.33 T
0 F
( parameter should be) 253.55 641.33 T
0 9 Q
(TRUE) 354.49 641.33 T
0 10 Q
( if the shutdown is to be) 380.82 641.33 T
(continued,) 198 630.33 T
0 9 Q
(F) 249.11 630.33 T
(ALSE) 254.45 630.33 T
0 10 Q
( if the shutdown should be aborted.) 279.12 630.33 T
2 F
(Include:) 99 612.33 T
0 F
(system.h) 180 612.33 T
2 F
(W) 99 592.33 T
(arnings:) 108.07 592.33 T
0 F
-0.41 (Most applications should not call) 180 592.33 P
6 F
-0.43 (SysShutdown\050\051) 332.95 592.33 P
0 F
-0.41 (. Any that do should do so) 411.66 592.33 P
(with extreme care.) 180 579.33 T
81 562.99 531 568 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 562.99 531 568 R
7 X
0 0 0 1 0 0 0 K
V
50 566.99 609.01 566.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 554.99 T
2 F
(SysStatistics\050\051) 99 554.99 T
4 10 Q
(void) 99 541.33 T
3 F
(SysStatistics\050) 153 541.33 T
3 9 Q
(SysStats * stats\051;) 153 530.99 T
(/* returned statistics */) 279 530.99 T
0 10 Q
(This routine returns system performance statistics. Pass it a pointer to an) 180 513.33 T
(empty) 180 501.83 T
6 F
(SysStats) 211.67 501.83 T
0 F
( structure; the routine will \336ll in the appropriate \336elds.) 255.75 501.83 T
6 F
(SysStats) 180 490.33 T
0 F
( has the following structure:) 224.08 490.33 T
3 9 Q
(typedef struct {) 216 475.49 T
(dword) 237.6 465.49 T
(SS_idleCount;) 324 465.49 T
(SysSwapInfo) 237.6 455.49 T
(SS_swapOuts;) 324 455.49 T
(SysSwapInfo) 237.6 445.49 T
(SS_swapIns;) 324 445.49 T
(word) 237.6 435.49 T
(SS_contextSwitches;) 324 435.49 T
(word) 237.6 425.49 T
(SS_interrupts;) 324 425.49 T
(word) 237.6 415.49 T
(SS_runQueue;) 324 415.49 T
(} SysStats;) 216 405.49 T
2 10 Q
(Include:) 99 387.83 T
0 F
(sysstats.h) 180 387.83 T
81 371.48 531 376.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 371.48 531 376.49 R
7 X
0 0 0 1 0 0 0 K
V
50 375.48 609.01 375.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 363.48 T
2 F
(SysUnlockBIOS\050\051) 99 363.48 T
4 10 Q
(void) 99 348.82 T
3 F
(SysUnlockBIOS\050void\051;) 153 348.82 T
81 334.48 531 339.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 334.48 531 339.48 R
7 X
0 0 0 1 0 0 0 K
V
50 338.48 609.01 338.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 326.48 T
2 F
(T) 99 326.48 T
(extSearchInString\050\051) 105.44 326.48 T
4 10 Q
(char) 99 311.81 T
(*) 129 311.81 T
3 F
(TextSearchInSTring\050) 153 311.81 T
3 9 Q
(const char) 153 301.48 T
(*str1,) 261 301.48 T
(conat char) 153 291.48 T
(*startPtr,) 261 291.48 T
(const char) 153 281.48 T
(*endPtr,) 261 281.48 T
(word) 153 271.47 T
(strSize,) 261 271.47 T
(const char) 153 261.47 T
(*str2,) 261 261.47 T
(word) 153 251.47 T
(str2Size,) 261 251.47 T
(word) 153 241.47 T
(searchOptions,) 261 241.47 T
(word) 153 231.47 T
(*matchLen\051;) 261 231.47 T
0 10 Q
-0.61 (T) 180 213.81 P
-0.61 (extSearchInString\050\051 searches in a single text chunk for a passed text string.) 185.75 213.81 P
-0.41 (If a match is found, a pointer to that match \050and the length of the match\051 are) 180 202.31 P
(returned in passed buffers.) 180 190.81 T
5 F
(str1) 180 172.31 T
0 F
( is a pointer to the main string you will be searching in.) 197.96 172.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "391" 31
%%Page: "392" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(392) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
-0.51 (startPtr) 180 641.33 P
0 F
-0.51 ( and) 216.29 641.33 P
5 F
-0.51 (endPtr) 238.23 641.33 P
0 F
-0.51 ( are pointers to locations within) 269.52 641.33 P
5 F
-0.51 (str1) 416.1 641.33 P
0 F
-0.51 ( to begin and end the) 434.06 641.33 P
(search.) 180 629.83 T
5 F
(strSize) 180 611.33 T
0 F
( stores the size of) 211.47 611.33 T
5 F
(str1) 293.88 611.33 T
0 F
(, or zero if null-terminated.) 311.84 611.33 T
5 F
-0.09 (str2) 180 592.83 P
0 F
-0.09 ( stores the match string, which may include wildcards \050type) 197.96 592.83 P
6 F
-0.09 (W) 475.81 592.83 P
-0.09 (ildCard) 485.25 592.83 P
0 F
-0.09 (\051.) 524.89 592.83 P
5 F
(str2Size) 180 574.33 T
0 F
( stores the size of) 217.03 574.33 T
5 F
(str2) 299.44 574.33 T
0 F
(, or zero if null-terminated.) 317.4 574.33 T
5 F
(searchOptions) 180 555.83 T
0 F
( stores the) 245.53 555.83 T
6 F
(SearchOptions) 296.46 555.83 T
0 F
( to use by the search mechanism.) 373.5 555.83 T
(The high byte should be zeroed.) 180 544.33 T
5 F
-0.62 (matchLen) 180 525.83 P
0 F
-0.62 ( stores a buffer to store the size of the matched word. \050The matched) 225.92 525.83 P
(word itself is returned by the routine.\051) 180 514.33 T
2 F
(Include:) 99 495.83 T
0 F
(Objects/vT) 180 495.83 T
(extC.goh) 228.16 495.83 T
81 479.49 531 484.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 479.49 531 484.5 R
7 X
0 0 0 1 0 0 0 K
V
50 483.49 609.01 483.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 471.49 T
2 F
(T) 99 471.49 T
(extSearchInHugeArray\050\051) 105.44 471.49 T
4 10 Q
(dword) 99 456.83 T
3 F
(TextSearchInSTring\050) 153 456.83 T
3 9 Q
(char) 153 446.49 T
(*str2,) 261 446.49 T
(word) 153 436.49 T
(str2Size,) 261 436.49 T
(dword) 153 426.49 T
(str1Size,) 261 426.49 T
(dword) 153 416.49 T
(curOffset,) 261 416.49 T
(dword) 153 406.49 T
(endOffset,) 261 406.49 T
(FileHandle) 153 396.49 T
(hugeArrayFile,) 261 396.49 T
(VMBlockHandle) 153 386.49 T
(hugeArrayBlock,) 261 386.49 T
(word) 153 376.49 T
(searchOptions,) 261 376.49 T
(word) 153 366.49 T
(*matchLen\051;) 261 366.49 T
0 10 Q
-0.08 (T) 180 348.83 P
-0.08 (extSearchInHugeArray\050\051 searches in a huge array for a passed text string.) 185.75 348.83 P
-0.48 (If a match is found, a dword offset to the match \050and the length of the match\051) 180 337.33 P
(are returned in passed buffers.) 180 325.83 T
5 F
-0.09 (str2) 180 307.33 P
0 F
-0.09 ( stores the match string, which may include wildcards \050type) 197.96 307.33 P
6 F
-0.09 (W) 475.81 307.33 P
-0.09 (ildCard) 485.25 307.33 P
0 F
-0.09 (\051.) 524.89 307.33 P
5 F
(str2Size) 180 288.83 T
0 F
( stores the size of) 217.03 288.83 T
5 F
(str2) 299.44 288.83 T
0 F
(, or zero if null-terminated.) 317.4 288.83 T
5 F
(str1Size) 180 270.33 T
0 F
( stores the total length of the string being searched.) 217.03 270.33 T
5 F
-0.56 (curOffset) 180 251.83 P
0 F
-0.56 ( stores the offset from the start of str1 to the \336rst character to check.) 221.83 251.83 P
5 F
-0.55 (endOffset) 180 233.33 P
0 F
-0.55 ( stores the offset from the start of str1 to the last character to check.) 223.5 233.33 P
5 F
(hugeArrayFile) 180 214.83 T
0 F
( stores the \336le handle of the huge array) 246.46 214.83 T
(.) 427.4 214.83 T
5 F
(hugeArrayBlock) 180 196.33 T
0 F
( stores the) 254.24 196.33 T
0 9 Q
(VM) 305.17 196.33 T
0 10 Q
( block handle of the huge array) 320.16 196.33 T
(.) 462.77 196.33 T
5 F
(searchOptions) 180 177.83 T
0 F
( stores the) 245.53 177.83 T
6 F
(SearchOptions) 296.46 177.83 T
0 F
( to use by the search mechanism.) 373.5 177.83 T
(The high byte should be zeroed.) 180 166.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "392" 32
%%Page: "393" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(393) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
-0.62 (matchLen) 180 641.33 P
0 F
-0.62 ( stores a buffer to store the size of the matched word. \050The matched) 225.92 641.33 P
(word itself is returned by the routine.\051) 180 629.83 T
2 F
(Include:) 99 611.33 T
0 F
(Objects/vT) 180 611.33 T
(extC.goh) 228.16 611.33 T
81 594.99 531 600 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 594.99 531 600 R
7 X
0 0 0 1 0 0 0 K
V
50 598.99 609.01 598.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 586.99 T
2 F
(TGI_PRIORITY\050\051) 99 586.99 T
4 10 Q
(byte) 99 573.33 T
3 F
(TGI_PRIORITY\050) 153 573.33 T
7 F
(val) 231 573.33 T
3 F
(\051;) 249 573.33 T
3 9 Q
(word) 153 562.99 T
7 F
(val) 189 562.99 T
3 F
(;) 205.2 562.99 T
0 10 Q
(This macro extracts the thread priority from the value returned by) 180 545.33 T
6 F
(ThreadGetInfo\050\051) 180 533.83 T
0 F
(.) 265.18 533.83 T
81 518.98 531 523.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 518.98 531 523.99 R
7 X
0 0 0 1 0 0 0 K
V
50 522.98 609.01 522.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 510.98 T
2 F
(TGI_RECENT_CPU_USAGE\050\051) 99 510.98 T
4 10 Q
(byte) 99 497.32 T
3 F
(TGI_RECENT_CPU_USAGE\050) 153 497.32 T
7 F
(val) 279 497.32 T
3 F
(\051;) 297 497.32 T
3 9 Q
(word) 153 486.98 T
7 F
(val) 189 486.98 T
3 F
(;) 205.2 486.98 T
0 10 Q
(This macro extracts the recent) 180 469.32 T
0 9 Q
(CPU) 323.89 469.32 T
0 10 Q
( usage from the value returned by) 343.73 469.32 T
6 F
(ThreadGetInfo\050\051) 180 457.82 T
0 F
(.) 265.18 457.82 T
81 442.98 531 447.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 442.98 531 447.98 R
7 X
0 0 0 1 0 0 0 K
V
50 446.98 609.01 446.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 434.98 T
2 F
(ThreadAllocSem\050\051) 99 434.98 T
4 10 Q
(SemaphoreHandle) 99 420.31 T
3 F
( ThreadAllocSem\050) 189 420.31 T
3 9 Q
(word) 153 409.98 T
(value\051;) 189 409.98 T
(/* allowable locks on the semaphore */) 297 409.98 T
0 10 Q
(This routine allocates and initializes a new semaphore for private use by a) 180 392.31 T
(multithreaded application. Pass the value with which to initialize the) 180 380.81 T
(semaphore; this value represents the number of threads that can grab the) 180 369.31 T
-0.41 (semaphore before other grab attempts will block. T) 180 357.81 P
-0.41 (ypically) 412.42 357.81 P
-0.41 (, the passed value) 447.23 357.81 P
(will be one. The routine returns the handle of the new semaphore.) 180 346.31 T
2 F
(Include:) 99 327.81 T
0 F
(sem.h) 180 327.81 T
81 311.47 531 316.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 311.47 531 316.48 R
7 X
0 0 0 1 0 0 0 K
V
50 315.47 609.01 315.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 303.47 T
2 F
(ThreadAllocThreadLock\050\051) 99 303.47 T
4 10 Q
(ThreadLockHandle) 99 288.8 T
3 F
( ThreadAllocThreadLock\050\051;) 195 288.8 T
0 F
(This routine allocates a special semaphore called a thread lock. W) 180 270.8 T
(ith a) 484.12 270.8 T
(normal semaphore, a thread that grabs the semaphore twice without) 180 259.3 T
-0.31 (releasing it will deadlock; with a thread lock, a thread can grab it more than) 180 247.8 P
-0.67 (once in succession. The thread has to release it once for each time it grabs the) 180 236.3 P
(thread lock, however) 180 224.8 T
(.) 275.56 224.8 T
-0.72 (In all other aspects, however) 180 206.3 P
-0.72 (, the thread lock resembles a normal semaphore.) 309.34 206.3 P
6 F
(ThreadAllocThreadLock\050\051) 180 194.8 T
0 F
( returns the handle of the new thread lock.) 315.2 194.8 T
2 F
(Include:) 99 176.3 T
0 F
(sem.h) 180 176.3 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "393" 33
%%Page: "394" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(394) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadAttachT) 99 634.99 T
(oQueue\050\051) 182.78 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadAttachToQueue\050) 153 620.33 T
3 9 Q
(QueueHandle) 153 609.99 T
(qh,) 261 609.99 T
(/* queue to attach */) 333 609.99 T
(ClassStruct) 153 599.99 T
(* class\051;) 261 599.99 T
(/* primary class of thread */) 333 599.99 T
0 10 Q
(This routine attaches the calling thread to the passed event queue. This is) 180 582.33 T
(used only for event-driven threads. T) 180 570.83 T
(ypically) 350.59 570.83 T
(, this routine is called when a) 385.41 570.83 T
(thread is created; attaching to queues is automatic in nearly all cases, and) 180 559.33 T
(you will rarely need this routine.) 180 547.83 T
-0.41 (Pass the handle of the queue in) 180 529.33 P
5 F
-0.41 (qh) 325.1 529.33 P
0 F
-0.41 ( and a class pointer in) 336.77 529.33 P
5 F
-0.41 (class) 438.94 529.33 P
0 F
-0.41 (. The class will) 461.33 529.33 P
-0.09 (be attached to the event queue and will handle all messages sent directly to) 180 517.83 P
(the thread. This class should nearly always be a subclass of) 180 506.33 T
6 F
(ProcessClass) 457.65 506.33 T
0 F
(.) 525.25 506.33 T
(If a queue handle of zero is passed, the thread wants to \322reattach\323 to the) 180 487.83 T
(current queue. This is used typically during shutdown of event-driven) 180 476.33 T
(threads, and it is nearly always taken care of automatically by) 180 464.83 T
6 F
(ProcessClass) 180 453.33 T
0 F
(.) 247.6 453.33 T
2 F
(Include:) 99 434.83 T
0 F
(thread.h) 180 434.83 T
81 418.48 531 423.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 418.48 531 423.49 R
7 X
0 0 0 1 0 0 0 K
V
50 422.48 609.01 422.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 410.48 T
2 F
(ThreadCreate\050\051) 99 410.48 T
4 10 Q
(ThreadHandle) 99 395.82 T
3 F
( ThreadCreate\050) 171 395.82 T
3 9 Q
(word) 153 385.48 T
(priority,) 189 385.48 T
(/* Initial base priority of new thread */) 297 385.48 T
(word) 153 375.48 T
(valueToPass,) 189 375.48 T
(/* Optional data to pass to new thread */) 297 375.48 T
(word) 153 365.48 T
(\050*startRoutine\051\050word valuePassed\051,) 189 365.48 T
(/* Pointer to entry routine */) 279 355.48 T
(word) 153 345.48 T
(stackSize,) 189 345.48 T
(/* Size of the stack for the new thread */) 297 345.48 T
(GeodeHandle owner\051;) 153 335.48 T
(/* Geode that will own the new thread */) 297 335.48 T
0 10 Q
-0.53 (This routine creates a new procedural thread for a process. If you need a new) 180 317.82 P
-0.47 (event-driven thread, send) 180 306.32 P
0 9 Q
-0.43 (MSG_PROCESS_CREA) 300.43 306.32 P
-0.43 (TE_EVENT_THREAD) 399.94 306.32 P
0 10 Q
-0.47 ( to your) 494.27 306.32 P
(process object instead.) 180 294.82 T
(Pass the following parameters to this routine:) 180 276.32 T
5 F
(priority) 180 257.82 T
0 F
-0.3 (The priority of the new thread. T) 243 257.82 P
-0.3 (ypically this will be one of the) 392.72 257.82 P
(standard thread priorities \050see below\051.) 243 246.82 T
5 F
(valueT) 180 228.82 T
(oPass) 210.77 228.82 T
0 F
-0.3 (A word of optional data to be passed to the entry routine of the) 243 217.82 P
(new thread. This can be used, for example, to indicate the) 243 206.82 T
(thread\325) 243 195.82 T
(s initial context or for initializing thread variables.) 275.41 195.82 T
5 F
(startRoutine) 180 177.82 T
0 F
(A pointer to the entry routine to be executed immediately for) 243 166.82 T
-0.74 (the thread. This may be in either \336xed or movable memory) 243 155.82 P
-0.74 (. The) 506.36 155.82 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "394" 34
%%Page: "395" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(395) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.14 (segment must be a virtual segment. Note that if the routine is) 243 641.33 P
(in movable memory) 243 630.33 T
(, it may degrade heap performance for the) 332.83 630.33 T
(life of the thread \050its movable block will remain locked for) 243 619.33 T
(extended stretches of time\051. The routine may return the) 243 608.33 T
(thread\325) 243 597.33 T
(s exit code or may call) 275.41 597.33 T
6 F
(ThreadDestroy\050\051) 379.87 597.33 T
0 F
( directly) 466.17 597.33 T
(.) 503.02 597.33 T
5 F
(stackSize) 180 579.33 T
0 F
(The stack size allocated for the thread. 512 bytes is typically) 243 579.33 T
(enough for threads doing neither) 243 568.33 T
0 9 Q
(UI) 397.81 568.33 T
0 10 Q
( nor \336le system work;) 408.81 568.33 T
-0.25 (threads working with the \336le system will require 1) 243 557.33 P
0 9 Q
-0.22 (K) 478.01 557.33 P
0 10 Q
-0.25 (. Threads) 485.01 557.33 P
(working with) 243 546.33 T
0 9 Q
(UI) 307.27 546.33 T
0 10 Q
( objects will require 3) 318.27 546.33 T
0 9 Q
(K) 420.14 546.33 T
0 10 Q
(.) 427.14 546.33 T
5 F
(owner) 180 528.33 T
0 F
(The geode handle of the geode that will own the thread. If the) 243 528.33 T
(calling thread\325) 243 517.33 T
(s geode will own the new thread, it can call) 309.12 517.33 T
6 F
(GeodeGetProcessHandle\050\051) 243 506.33 T
0 F
( prior to calling) 379.48 506.33 T
6 F
(ThreadCreate\050\051) 243 495.33 T
0 F
(.) 323.38 495.33 T
6 F
(ThreadCreate\050\051) 180 477.33 T
0 F
( returns the thread handle of the new thread. If an error) 260.38 477.33 T
-0.3 (occurs, the calling thread\325) 180 465.83 P
-0.3 (s error code will be set and a null handle returned;) 297.62 465.83 P
(you should likely call) 180 454.33 T
6 F
(ThreadGetError\050\051) 280.39 454.33 T
0 F
( to retrieve the error code after) 373.55 454.33 T
(creating the new thread. A return of) 180 442.83 T
0 9 Q
(NO_ERROR_RETURNED) 350.37 442.83 T
0 10 Q
( from) 460.37 442.83 T
6 F
(ThreadGetError\050\051) 180 431.33 T
0 F
( means no error occurred.) 273.16 431.33 T
-0.32 (The standard thread priorities that may be passed in the) 180 412.83 P
5 F
-0.32 (priority) 442.76 412.83 P
0 F
-0.32 ( parameter) 477.56 412.83 P
(are listed below:) 180 401.33 T
0 9 Q
(PRIORITY_TIME_CRITICAL) 180 382.83 T
0 10 Q
(The highest priority of all; you should not use this in general) 243 371.83 T
(because it will pre-empt nearly all other threads. \050It may be) 243 360.83 T
(useful, however) 243 349.83 T
(, during debugging.\051) 314.85 349.83 T
0 9 Q
(PRIORITY_HIGH) 180 331.83 T
0 10 Q
(A high priority; generally only used for highly important) 243 320.83 T
(threads.) 243 309.83 T
0 9 Q
(PRIORITY_UI) 180 291.83 T
0 10 Q
-0.65 (Another high priority; this is used for User Interface threads to) 243 280.83 P
(provide quick response to user actions.) 243 269.83 T
0 9 Q
(PRIORITY_FOCUS) 180 251.83 T
0 10 Q
(A medium-level priority; this is used for whatever thread has) 243 240.83 T
-0.51 (the current input focus \050whichever thread the user is currently) 243 229.83 P
(working with\051.) 243 218.83 T
0 9 Q
(PRIORITY_ST) 180 200.83 T
(ANDARD) 241.34 200.83 T
0 10 Q
-0.12 (The standard application thread priority; you should typically) 243 189.83 P
(use this when creating new threads.) 243 178.83 T
0 9 Q
(PRIORITY_LOW) 180 160.83 T
0 10 Q
(A low priority for tasks that can be done in the background.) 243 149.83 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "395" 35
%%Page: "396" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(396) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(PRIORITY_LOWEST) 180 641.33 T
0 10 Q
(The lowest standard priority; it is used for threads that can) 243 630.33 T
(take any amount of time to complete.) 243 619.33 T
2 F
(Include:) 99 601.33 T
0 F
(thread.h) 180 601.33 T
81 584.99 531 590 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.99 531 590 R
7 X
0 0 0 1 0 0 0 K
V
50 588.99 609.01 588.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 576.99 T
2 F
(ThreadDestroy\050\051) 99 576.99 T
4 10 Q
(void) 99 562.33 T
3 F
(ThreadDestroy\050) 153 562.33 T
3 9 Q
(word) 153 551.99 T
(errorCode,) 189 551.99 T
(/* Error code to indicate cause of destruction */) 261 551.99 T
(optr) 153 541.99 T
(ackObject,) 189 541.99 T
(/* Object to receive destruction acknowledgment */) 261 541.99 T
(word) 153 531.99 T
(ackData\051;) 189 531.99 T
(/* Additional word of data to pass \050as the low) 261 531.99 T
( * word of optr for source of MSG_META_ACK\051 */) 261 521.99 T
0 10 Q
(This routine causes the current \050calling\051 thread to exit and then destroy) 180 504.33 T
-0.48 (itself. The thread is responsible for ensuring that it has no leftover resources) 180 492.83 P
(allocated or semaphores locked.) 180 481.33 T
-0.43 (Pass it an error code or exit code meaningful to the application and the other) 180 462.83 P
(threads in the application. This error code will be used by the debugger to) 180 451.33 T
(determine the cause of the thread\325) 180 439.83 T
(s exit; a null error code usually indicates) 337.6 439.83 T
(successful completion of the thread\325) 180 428.33 T
(s task.) 343.7 428.33 T
(Pass also the optr of the object to receive acknowledgement of the thread\325) 180 409.83 T
(s) 517.44 409.83 T
(destruction. The object speci\336ed will receive) 180 398.33 T
0 9 Q
(MSG_MET) 385.93 398.33 T
(A_ACK) 432.1 398.33 T
0 10 Q
( after the) 463.1 398.33 T
(calling thread is completely destroyed.) 180 386.83 T
2 F
(Be Sure T) 99 368.33 T
(o:) 144.94 368.33 T
0 F
(Always clean up before exiting a thread. Unlock locked resources, free) 180 368.33 T
-0.62 (allocated memory) 180 355.33 P
-0.62 (, etc. Y) 260.13 355.33 P
-0.62 (ou do not have to do these things for the application\325) 289.27 355.33 P
-0.62 (s) 524.21 355.33 P
(primary thread; the process object \050the primary thread\051 will automatically) 180 342.33 T
(clean up after itself.) 180 329.33 T
2 F
(Include:) 99 309.33 T
0 F
(thread.h) 180 309.33 T
81 292.98 531 297.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 292.98 531 297.99 R
7 X
0 0 0 1 0 0 0 K
V
50 296.98 609.01 296.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 284.98 T
2 F
(ThreadFreeSem\050\051) 99 284.98 T
4 10 Q
(void) 99 270.32 T
3 F
(ThreadFreeSem\050) 153 270.32 T
3 9 Q
(SemaphoreHandle sem\051;) 153 259.98 T
(/* semaphore to be freed */) 279 259.98 T
0 10 Q
(This routine frees the speci\336ed semaphore that had been allocated with) 180 242.32 T
6 F
(ThreadAllocSem\050\051) 180 230.82 T
0 F
(. Y) 273.9 230.82 T
(ou must be sure that no threads are using the) 285.39 230.82 T
-0.23 (semaphore or will use it after it has been freed. Subsequent access attempts) 180 219.32 P
(could cause illegal handle errors or worse.) 180 207.82 T
2 F
(Include:) 99 189.32 T
0 F
(sem.h) 180 189.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "396" 36
%%Page: "397" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(397) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadFreeThreadLock\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadFreeThreadLock\050) 153 620.33 T
3 9 Q
(ThreadLockHandle sem\051;) 153 609.99 T
(/* thread lock to be freed */) 297 609.99 T
0 10 Q
(This routine frees the speci\336ed thread lock that had been allocated with) 180 592.33 T
6 F
-0.43 (ThreadAllocThreadLock\050\051) 180 580.83 P
0 F
-0.42 (. Y) 315.2 580.83 P
-0.42 (ou must be sure that no threads are using or) 326.27 580.83 P
-0.3 (will use the thread lock after it has been freed. Subsequent attempts to grab) 180 569.33 P
(or release the thread lock could cause illegal handle errors.) 180 557.83 T
2 F
(Include:) 99 539.33 T
0 F
(sem.h) 180 539.33 T
81 522.98 531 527.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 522.98 531 527.99 R
7 X
0 0 0 1 0 0 0 K
V
50 526.98 609.01 526.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 514.98 T
2 F
(ThreadGetError\050\051) 99 514.98 T
4 10 Q
(word) 99 500.32 T
3 F
(ThreadGetError\050void\051) 153 500.32 T
0 F
(This routine returns the thread\325) 180 482.32 T
(s current error value.) 327.41 482.32 T
81 467.48 531 472.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 467.48 531 472.48 R
7 X
0 0 0 1 0 0 0 K
V
50 471.48 609.01 471.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 459.48 T
2 F
(ThreadGetInfo\050\051) 99 459.48 T
4 10 Q
(word) 99 444.81 T
3 F
(ThreadGetInfo\050) 153 444.81 T
3 9 Q
(ThreadHandle) 153 434.48 T
(th,) 261 434.48 T
(/* thread to get information about */) 315 434.48 T
(ThreadGetInfoType) 153 424.48 T
(info\051;) 261 424.48 T
(/* type of information to get */) 315 424.48 T
0 10 Q
(This routine gets information about the speci\336ed thread. The information) 180 406.81 T
(desired is speci\336ed in the) 180 395.31 T
5 F
(info) 299.45 395.31 T
0 F
( parameter; the subject thread is speci\336ed in) 317.22 395.31 T
(the) 180 383.81 T
5 F
(th) 197.78 383.81 T
0 F
( parameter) 207.41 383.81 T
(. If the thread handle passed is zero or a null handle, the) 257.97 383.81 T
(routine will return information about the calling thread.) 180 372.31 T
(The) 180 353.81 T
5 F
(info) 200.56 353.81 T
0 F
( parameter is one of the following values of) 218.33 353.81 T
6 F
(ThreadGetInfoT) 419.28 353.81 T
(ype) 503.38 353.81 T
0 F
(,) 521.9 353.81 T
(specifying the type of information to be returned by) 180 342.31 T
6 F
(ThreadGetInfo\050\051) 420.38 342.31 T
0 F
(:) 505.56 342.31 T
0 9 Q
(TGIT_PRIORITY_AND_USAGE) 180 323.81 T
0 10 Q
(The returned word will contain both the thread\325) 243 312.81 T
(s priority and) 463.39 312.81 T
(the thread\325) 243 301.81 T
(s recent) 293.19 301.81 T
0 9 Q
(CPU) 332.26 301.81 T
0 10 Q
( usage. T) 352.1 301.81 T
(o extract the priority of the) 392.86 301.81 T
-0.63 (thread, use the macro) 243 290.81 P
0 9 Q
-0.56 (TGI_PRIORITY) 344.2 290.81 P
0 10 Q
-0.63 (; to extract the recent) 410.11 290.81 P
0 9 Q
-0.56 (CPU) 509.01 290.81 P
0 10 Q
(usage, use the macro) 243 279.81 T
0 9 Q
(TGI_RECENT_CPU_USAGE) 342.64 279.81 T
0 10 Q
(.) 464.98 279.81 T
0 9 Q
(TGIT_THREAD_HANDLE) 180 261.81 T
0 10 Q
-0.28 (Useful only when the) 243 250.81 P
5 F
-0.28 (th) 343.01 250.81 P
0 F
-0.28 ( parameter is zero, this will return the) 352.64 250.81 P
-0.14 (thread handle of the subject thread. If) 243 239.81 P
5 F
-0.14 (th) 420.72 239.81 P
0 F
-0.14 ( is zero, the handle of) 430.35 239.81 P
(the calling thread will be returned.) 243 228.81 T
0 9 Q
(TGIT_QUEUE_HANDLE) 180 210.81 T
0 10 Q
(The returned word will contain the queue handle of the) 243 199.81 T
-0.82 (event-driven thread speci\336ed in) 243 188.81 P
5 F
-0.82 (th) 389.15 188.81 P
0 F
-0.82 (. If the thread speci\336ed is not) 398.78 188.81 P
(event-driven, a null queue handle will be returned.) 243 177.81 T
2 F
(Include:) 99 159.81 T
0 F
(thread.h) 180 159.81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "397" 37
%%Page: "398" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(398) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadGrabThreadLock\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadGrabThreadLock\050) 153 620.33 T
3 9 Q
(ThreadLockHandle sem\051;) 153 609.99 T
(/* thread lock to grab */) 297 609.99 T
0 10 Q
(This routine attempts to grab the thread lock for the calling thread. If the) 180 592.33 T
-0.57 (thread lock is currently held by another thread, the caller will block until the) 180 580.83 P
-0.09 (lock becomes available. If the caller already has the thread lock, it will grab) 180 569.33 P
(the lock again and continue executing.) 180 557.83 T
2 F
(Be Sure T) 99 539.33 T
(o:) 144.94 539.33 T
0 F
-0.72 (Thread locks must be released with) 180 539.33 P
6 F
-0.74 (ThreadReleaseThreadLock\050\051) 342.59 539.33 P
0 F
-0.72 ( once for) 491.49 539.33 P
(each time they are grabbed.) 180 526.33 T
2 F
(W) 99 506.33 T
(arnings:) 108.07 506.33 T
0 F
-0.7 (This routine provides no deadlock protection for multiple threads. If multiple) 180 506.33 P
(threads will be grabbing multiple thread locks, the locks should always be) 180 493.33 T
(grabbed in the same order to minimize the potential for deadlock.) 180 480.33 T
2 F
(Include:) 99 460.33 T
0 F
(sem.h) 180 460.33 T
81 443.98 531 448.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 443.98 531 448.99 R
7 X
0 0 0 1 0 0 0 K
V
50 447.98 609.01 447.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 435.98 T
2 F
(ThreadHandleException\050\051) 99 435.98 T
4 10 Q
(void) 99 421.32 T
3 F
(ThreadHandleException\050) 153 421.32 T
3 9 Q
(ThreadHandle) 153 410.98 T
(th,) 261 410.98 T
(/* thread to handle the exception */) 333 410.98 T
(ThreadExceptions) 153 400.98 T
(exception,) 261 400.98 T
(/* exception to handle */) 333 400.98 T
(void) 153 390.98 T
(\050*handler\051) 189 390.98 T
(\050\051\051;) 261 390.98 T
(/* pointer to handler */) 333 390.98 T
0 10 Q
(This routine allows a thread to set up a handler for a processor exception.) 180 373.32 T
(This can be useful for debugging purposes. Pass the following three) 180 361.82 T
(parameters:) 180 350.32 T
5 F
(th) 180 331.82 T
0 F
-0.37 (The handle of the thread to handle the exception. Pass zero for) 243 331.82 P
(the current thread.) 243 320.82 T
5 F
(exception) 180 302.82 T
0 F
(A) 243 302.82 T
6 F
(ThreadException) 253 302.82 T
0 F
( type \050see below\051.) 343.37 302.82 T
5 F
(handler) 180 284.82 T
0 F
(A pointer to a handler in \336xed or locked memory) 243 284.82 T
(. Pass a null) 465.79 284.82 T
(pointer to use the) 243 273.82 T
0 9 Q
(GEOS) 327.08 273.82 T
0 10 Q
( default exception handler) 353.25 273.82 T
(.) 473.44 273.82 T
2 F
(Structures:) 99 255.82 T
0 F
(The) 180 255.82 T
6 F
(ThreadException) 200.56 255.82 T
0 F
( type has the following values:) 290.93 255.82 T
3 9 Q
(TE_DIVIDE_BY_ZERO) 216 241.48 T
(TE_OVERFLOW) 216 231.48 T
(TE_BOUND) 216 221.48 T
(TE_FPU_EXCEPTION) 216 211.48 T
(TE_SINGLE_STEP) 216 201.48 T
(TE_BREAKPOINT) 216 191.48 T
2 10 Q
(Include:) 99 173.82 T
0 F
(thread.h) 180 173.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "398" 38
%%Page: "399" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(399) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadModify\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadModify\050) 153 620.33 T
3 9 Q
(ThreadHandle) 153 609.99 T
(th,) 261 609.99 T
(/* thread to modify */) 351 609.99 T
(word) 153 599.99 T
(newBasePriority,) 261 599.99 T
(/* thread\325s new base priority */) 351 599.99 T
(ThreadModifyFlags) 153 589.99 T
(flags\051;) 261 589.99 T
(/* flags \050see below\051 */) 351 589.99 T
0 10 Q
-0.17 (This routine modi\336es the priority of the speci\336ed thread. Use it to either set) 180 572.33 P
(the base priority of the thread or reset the current) 180 560.83 T
0 9 Q
(CPU) 414.63 560.83 T
0 10 Q
( usage to zero. The) 434.47 560.83 T
(parameters should have the following values:) 180 549.33 T
5 F
(th) 180 530.83 T
0 F
(The thread handle; pass zero to change the priority of the) 243 530.83 T
(calling thread.) 243 519.83 T
5 F
(newBasePriority) 180 501.83 T
0 F
(The new base priority of the thread. Use one of the standard) 243 490.83 T
-0.37 (priorities\321see) 243 479.83 P
6 F
-0.38 (ThreadCreate\050\051) 312.63 479.83 P
0 F
-0.37 (\321or use a value between zero) 393.01 479.83 P
(and 255.) 243 468.83 T
5 F
(\337ags) 180 450.83 T
0 F
(A record of) 243 450.83 T
6 F
(ThreadModifyFlags) 295.95 450.83 T
0 F
(; pass) 397.98 450.83 T
0 9 Q
(TMF_BASE_PRIO) 426.88 450.83 T
0 10 Q
( to) 504.71 450.83 T
-0.76 (change the thread\325) 243 439.83 P
-0.76 (s base priority or) 327.03 439.83 P
0 9 Q
-0.69 (TMF_ZERO_USAGE) 405.1 439.83 P
0 10 Q
-0.76 ( to reset) 493.1 439.83 P
(the thread\325) 243 428.83 T
(s recent) 293.19 428.83 T
0 9 Q
(CPU) 332.26 428.83 T
0 10 Q
( usage to zero.) 352.1 428.83 T
2 F
(W) 99 410.83 T
(arnings:) 108.07 410.83 T
0 F
(Unless the thread is timing-critical, you should not set the base priority to) 180 410.83 T
(zero.) 180 397.83 T
2 F
(Include:) 99 377.83 T
0 F
(thread.h) 180 377.83 T
81 361.48 531 366.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 361.48 531 366.49 R
7 X
0 0 0 1 0 0 0 K
V
50 365.48 609.01 365.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 353.48 T
2 F
(ThreadPrivAlloc\050\051) 99 353.48 T
4 10 Q
(word) 99 338.82 T
3 F
(ThreadPrivAlloc\050) 153 338.82 T
3 9 Q
(word) 153 328.48 T
(wordsRequested,) 261 328.48 T
(/* number of words to allocate */) 351 328.48 T
(GeodeHandle) 153 318.48 T
(owner\051;) 261 318.48 T
(/* handle of geode to own data */) 351 318.48 T
0 10 Q
-0.59 (This routine allocates a number of contiguous words in the private data of all) 180 300.82 P
(geodes \050loaded and yet-to-be loaded\051. It is exactly the same as) 180 289.32 T
6 F
(GeodePrivAlloc\050\051) 180 277.82 T
0 F
(; see the entry for that routine.) 269.26 277.82 T
2 F
(Include:) 99 259.32 T
0 F
(thread.h) 180 259.32 T
2 F
(See Also:) 99 239.32 T
0 F
(GeodePrivAlloc\050\051) 180 239.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "399" 39
%%Page: "400" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(400) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadPrivFree\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadPrivFree\050) 153 620.33 T
3 9 Q
(word) 153 609.99 T
(range,) 189 609.99 T
(/* offset to first word to be freed */) 297 609.99 T
(word) 153 599.99 T
(wordsRequested\051;) 189 599.99 T
(/* number of words to free */) 297 599.99 T
0 10 Q
(This routine frees a number of contiguous private-data words previously) 180 582.33 T
(allocated with) 180 570.83 T
6 F
(ThreadPrivAlloc\050\051) 247.98 570.83 T
0 F
(. It is similar to) 342.43 570.83 T
6 F
(GeodePrivFree\050\051) 416.71 570.83 T
0 F
(; see) 503.56 570.83 T
(the entry for that routine for full information.) 180 559.33 T
2 F
(Include:) 99 540.83 T
0 F
(thread.h) 180 540.83 T
2 F
(See Also:) 99 520.83 T
0 F
(GeodePrivFree\050\051) 180 520.83 T
81 504.48 531 509.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 504.48 531 509.49 R
7 X
0 0 0 1 0 0 0 K
V
50 508.48 609.01 508.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 496.48 T
2 F
(ThreadPSem\050\051) 99 496.48 T
4 10 Q
(SemaphoreError) 99 482.82 T
3 F
( ThreadPSem\050) 183 482.82 T
3 9 Q
(SemaphoreHandle sem\051;) 153 472.48 T
(/* semaphore to grab */) 297 472.48 T
0 10 Q
(This routine attempts to grab the passed semaphore via a \322) 180 454.82 T
0 9 Q
(P) 453.57 454.82 T
0 10 Q
(\323 operation. If) 459.57 454.82 T
(the semaphore has already been grabbed, the thread will block until the) 180 443.32 T
(semaphore becomes available, even if it was grabbed by the same thread.) 180 431.82 T
6 F
-0.12 (ThreadPSem\050\051) 180 413.32 P
0 F
-0.12 ( returns an error code of type) 255.19 413.32 P
6 F
-0.12 (SemaphoreError) 391.95 413.32 P
0 F
-0.12 (, described) 479.19 413.32 P
(in) 180 401.82 T
6 F
(ThreadPT) 192.04 401.82 T
(imedSem\050\051) 244.38 401.82 T
0 F
(, below) 299.94 401.82 T
(. The error code is intended to indicate) 331.07 401.82 T
(abnormal return by the previous thread; if the semaphore never becomes) 180 390.32 T
(available, the thread will block inde\336nitely and the routine will not return.) 180 378.82 T
2 F
(Be Sure T) 99 360.32 T
(o:) 144.94 360.32 T
0 F
(When the thread no longer needs the semaphore, it should release it with) 180 360.32 T
6 F
(ThreadVSem\050\051) 180 347.32 T
0 F
(.) 255.19 347.32 T
2 F
(W) 99 327.32 T
(arnings:) 108.07 327.32 T
0 F
(This routine provides no deadlock protection. If threads will grab multiple) 180 327.32 T
(common semaphores, they should always grab/release them in the same) 180 314.32 T
(order) 180 301.32 T
(, minimizing the chances for deadlock.) 203.88 301.32 T
-0.5 (A thread may not try to grab a particular semaphore twice without releasing) 180 281.32 P
(it in between grabs. The thread will block on itself and will deadlock. If a) 180 269.82 T
-0.57 (thread may need to grab the semaphore twice in a row) 180 258.32 P
-0.57 (, it should use a thread) 425.12 258.32 P
(lock instead \050see) 180 246.82 T
6 F
(ThreadAllocThreadLock\050\051) 258.9 246.82 T
0 F
( for more information\051.) 394.1 246.82 T
2 F
(Include:) 99 228.32 T
0 F
(sem.h) 180 228.32 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "400" 40
%%Page: "401" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(401) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadPT) 99 634.99 T
(imedSem\050\051) 154.13 634.99 T
4 10 Q
(SemaphoreError) 99 620.33 T
3 F
( ThreadPTimedSem\050) 183 620.33 T
3 9 Q
(SemaphoreHandle) 153 609.99 T
(sem,) 261 609.99 T
(/* semaphore to grab */) 333 609.99 T
(word) 153 599.99 T
(timeout\051;) 261 599.99 T
(/* ticks before timeout */) 333 599.99 T
0 10 Q
(This routine attempts to grab the passed semaphore via a \322) 180 582.33 T
0 9 Q
(P) 453.57 582.33 T
0 10 Q
(\323 operation. If) 459.57 582.33 T
(the semaphore has already been grabbed, the thread will block for at most) 180 570.83 T
(the number of ticks speci\336ed in) 180 559.33 T
5 F
(timeout) 327.23 559.33 T
0 F
(.) 362.04 559.33 T
6 F
(ThreadPT) 180 540.83 T
(imedSem\050\051) 232.34 540.83 T
0 F
( returns an error code of type) 287.9 540.83 T
6 F
(SemaphoreError) 425.48 540.83 T
0 F
(,) 512.72 540.83 T
(which has two value:) 180 529.33 T
0 9 Q
(SE_NO_ERROR) 180 510.83 T
0 10 Q
(No error occurred and the semaphore was grabbed properly) 243 499.83 T
(.) 517.07 499.83 T
0 9 Q
(SE_TIMEOUT) 180 481.83 T
0 10 Q
(The time elapsed and the semaphore was not grabbed. If this) 243 470.83 T
-0.68 (value is returned, the thread should) 243 459.83 P
5 F
-0.68 (not) 408.54 459.83 P
0 F
-0.68 ( proceed with whatever) 423.17 459.83 P
(protected operation was to happen. Instead, it should either) 243 448.83 T
(attempt to grab the semaphore again or should proceed with) 243 437.83 T
(other tasks.) 243 426.83 T
0 9 Q
(SE_PREVIOUS_OWNER_DIED) 180 408.83 T
0 10 Q
-0.41 (The previous owner of the semaphore exited abnormally) 243 397.83 P
-0.41 (. If the) 498.7 397.83 P
(thread currently holding the semaphore exited without) 243 386.83 T
(releasing the semaphore, for example, this would be returned.) 243 375.83 T
(Often) 180 357.83 T
5 F
(timeout) 208.89 357.83 T
0 F
( is passed as zero to indicate that if the semaphore isn\325) 243.7 357.83 T
(t) 495.78 357.83 T
(available right now) 180 346.33 T
(, the thread will go on with some other action.) 268.55 346.33 T
2 F
(Be Sure T) 99 327.83 T
(o:) 144.94 327.83 T
0 F
(When the thread no longer needs the semaphore, it should release it with) 180 327.83 T
6 F
(ThreadVSem\050\051) 180 314.83 T
0 F
(.) 255.19 314.83 T
2 F
(W) 99 294.83 T
(arnings:) 108.07 294.83 T
0 F
(This routine provides no deadlock protection. If threads will grab multiple) 180 294.83 T
(common semaphores, they should always grab/release them in the same) 180 281.83 T
(order) 180 268.83 T
(, minimizing the chances for deadlock.) 203.88 268.83 T
-0.5 (A thread may not try to grab a particular semaphore twice without releasing) 180 248.83 P
(it in between grabs. The thread will block on itself and will deadlock. If a) 180 237.33 T
-0.57 (thread may need to grab the semaphore twice in a row) 180 225.83 P
-0.57 (, it should use a thread) 425.12 225.83 P
(lock instead, though there is no timeout equivalent for thread locks \050see) 180 214.33 T
6 F
(ThreadAllocThreadLock\050\051) 180 202.83 T
0 F
( for more information\051.) 315.2 202.83 T
2 F
(Include:) 99 184.33 T
0 F
(sem.h) 180 184.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "401" 41
%%Page: "402" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(402) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ThreadReleaseThreadLock\050\051) 99 634.99 T
4 10 Q
(void) 99 620.33 T
3 F
(ThreadReleaseThreadLock\050) 153 620.33 T
3 9 Q
(ThreadLockHandle sem\051;) 153 609.99 T
(/* threadlock to release */) 297 609.99 T
0 10 Q
(This routine releases the speci\336ed thread lock previously grabbed with) 180 592.33 T
6 F
-0.65 (ThreadGrabThreadLock\050\051) 180 580.83 P
0 F
-0.63 (. Pass the handle of the thread lock as returned) 315.01 580.83 P
(by) 180 569.33 T
6 F
(ThreadAllocThreadLock\050\051) 193.71 569.33 T
0 F
(.) 328.91 569.33 T
-0.46 (Do not try to release a thread lock that has not previously been grabbed. The) 180 550.83 P
(results are unpredictable.) 180 539.33 T
2 F
(Include:) 99 520.83 T
0 F
(sem.h) 180 520.83 T
81 504.48 531 509.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 504.48 531 509.49 R
7 X
0 0 0 1 0 0 0 K
V
50 508.48 609.01 508.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 496.48 T
2 F
(ThreadVSem\050\051) 99 496.48 T
4 10 Q
(void) 99 481.82 T
3 F
(ThreadVSem\050) 153 481.82 T
3 9 Q
(SemaphoreHandle sem\051;) 153 471.48 T
(/* semaphore to release */) 297 471.48 T
0 10 Q
-0.67 (This routine releases a semaphore that was grabbed with) 180 453.82 P
6 F
-0.69 (ThreadPSem\050\051) 442.15 453.82 P
0 F
-0.67 ( or) 517.34 453.82 P
6 F
(ThreadPT) 180 442.32 T
(imedSem\050\051) 232.34 442.32 T
0 F
(. Pass the handle of the semaphore as returned by) 287.9 442.32 T
6 F
(ThreadAllocSem\050\051) 180 430.82 T
0 F
(.) 273.9 430.82 T
-0.4 (Do not try to release a semaphore that has not previously been grabbed with) 180 412.32 P
(one of the above routines. The results are unpredictable.) 180 400.82 T
2 F
(Include:) 99 382.32 T
0 F
(sem.h) 180 382.32 T
81 365.98 531 370.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 365.98 531 370.98 R
7 X
0 0 0 1 0 0 0 K
V
50 369.98 609.01 369.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 357.98 T
2 F
(T) 99 357.98 T
(imerGetCount\050\051) 106.12 357.98 T
4 10 Q
(dword) 99 344.31 T
3 F
(TimerGetCount\050\051;) 153 344.31 T
0 F
(This routine returns the value of the system counter) 180 326.31 T
(. The returned value is) 421.3 326.31 T
(the number of ticks since) 180 314.81 T
0 9 Q
(GEOS) 298.71 314.81 T
0 10 Q
( started.) 324.88 314.81 T
2 F
(Include:) 99 296.31 T
0 F
(timer) 180 296.31 T
(.h) 204.63 296.31 T
81 279.97 531 284.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 279.97 531 284.98 R
7 X
0 0 0 1 0 0 0 K
V
50 283.97 609.01 283.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 271.97 T
2 F
(T) 99 271.97 T
(imerGetDateAndT) 106.12 271.97 T
(ime\050\051) 207.91 271.97 T
4 10 Q
(void) 99 258.3 T
3 F
(TimerGetDateAndTime\050) 153 258.3 T
3 9 Q
(TimerDateAndTime * dateAndTime\051;) 153 247.97 T
(/* buffer for returned values */) 333 247.97 T
0 10 Q
-0.48 (This routine returns the current time and date. Pass it a pointer to an empty) 180 230.3 P
6 F
(T) 180 218.8 T
(imerDateAndT) 186.97 218.8 T
(ime) 263.75 218.8 T
0 F
( structure to be \336lled in by the routine.) 282.82 218.8 T
2 F
(Include:) 99 200.3 T
0 F
(timedate.h) 180 200.3 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "402" 42
%%Page: "403" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(403) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(imerSetDateAndT) 106.12 634.99 T
(ime\050\051) 206.58 634.99 T
4 10 Q
(void) 99 621.33 T
3 F
(TimerSetDateAndTime\050) 153 621.33 T
3 9 Q
(word) 153 610.99 T
(flags,) 279 610.99 T
(/* which item to set */) 369 610.99 T
(const TimerDateAndTime) 153 600.99 T
(* dateAndTime\051;) 279 600.99 T
(/* new values */) 369 600.99 T
0 10 Q
(This routine sets the current date and/or time of the system. Pass it the) 180 583.33 T
(following:) 180 571.83 T
5 F
(\337ags) 180 553.33 T
0 F
(A word of \337ags. Pass) 243 553.33 T
0 9 Q
(TIME_SET_DA) 341.35 553.33 T
(TE) 406.19 553.33 T
0 10 Q
( to set the day) 418.69 553.33 T
(, month,) 482.78 553.33 T
(and year; pass) 243 542.33 T
0 9 Q
(TIME_SET_TIME) 312.46 542.33 T
0 10 Q
( to set the hour) 388.95 542.33 T
(, minute, and) 458.4 542.33 T
(second. Pass both to set both.) 243 531.33 T
5 F
(dateAndT) 180 513.33 T
(ime) 225.21 513.33 T
0 F
(A pointer to a) 243 502.33 T
6 F
(T) 309.12 502.33 T
(imerDateAndT) 316.09 502.33 T
(ime) 392.87 502.33 T
0 F
( structure containing the) 411.94 502.33 T
(information to be set.) 243 491.33 T
2 F
(Include:) 99 473.33 T
0 F
(timedate.h) 180 473.33 T
81 456.98 531 461.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 456.98 531 461.99 R
7 X
0 0 0 1 0 0 0 K
V
50 460.98 609.01 460.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 448.98 T
2 F
(T) 99 448.98 T
(imerSleep\050\051) 106.12 448.98 T
4 10 Q
(void) 99 435.32 T
3 F
(TimerSleep\050) 153 435.32 T
3 9 Q
(word) 153 424.98 T
(ticks\051;) 189 424.98 T
(/* number of ticks the thread should sleep */) 279 424.98 T
0 10 Q
-0.08 (This routine invokes a \322sleep timer\323 that will put the calling thread to sleep) 180 407.32 P
-0.52 (for the given number of ticks. At the end of the time, the thread will continue) 180 395.82 P
(executing with the next instruction.) 180 384.32 T
2 F
(W) 99 365.82 T
(arnings:) 108.07 365.82 T
0 F
(Do not use sleep timers as a substitute for semaphores for thread) 180 365.82 T
(synchronization.) 180 352.82 T
2 F
(Include:) 99 332.82 T
0 F
(timer) 180 332.82 T
(.h) 204.63 332.82 T
81 316.48 531 321.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 316.48 531 321.48 R
7 X
0 0 0 1 0 0 0 K
V
50 320.48 609.01 320.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 308.48 T
2 F
(T) 99 308.48 T
(imerStart\050\051) 106.12 308.48 T
4 10 Q
(TimerHandle) 99 294.81 T
3 F
( TimerStart\050) 165 294.81 T
3 9 Q
(TimerType) 153 284.48 T
(timerType,) 261 284.48 T
(/* type of timer to start */) 333 284.48 T
(optr) 153 274.47 T
(destObject,) 261 274.47 T
(/* object to receive notification) 333 274.47 T
( * message when timer expires */) 315 264.47 T
(word) 153 254.47 T
(ticks,) 261 254.47 T
(/* amount of time to run */) 333 254.47 T
(Message) 153 244.47 T
(msg,) 261 244.47 T
(/* notification message */) 333 244.47 T
(word) 153 234.47 T
(interval,) 261 234.47 T
(/* interval for continual timers */) 333 234.47 T
(word) 153 224.47 T
(* id\051;) 261 224.47 T
(/* buffer for returned timer ID */) 333 224.47 T
0 10 Q
(This routine starts a timer of any type. The timer will run for the speci\336ed) 180 206.81 T
(number of ticks and then will send the given message to the destination) 180 195.31 T
(object. The message is sent with the \337ags) 180 183.81 T
0 9 Q
(MF_FORCE_QUEUE) 373.74 183.81 T
0 10 Q
(,) 464.41 183.81 T
0 9 Q
(MF_CHECK_DUPLICA) 180 172.31 T
(TE) 280 172.31 T
0 10 Q
( and) 292.5 172.31 T
0 9 Q
(MF_REPLACE) 315.47 172.31 T
0 10 Q
(, so it will always be put in the) 378.96 172.31 T
(recipient\325) 180 160.81 T
(s queue and will always replace any duplicates already in the) 222.59 160.81 T
(queue. Pass this routine the following:) 180 149.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "403" 43
%%Page: "404" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(404) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(timerT) 180 641.33 T
(ype) 210.58 641.33 T
0 F
(A value of) 243 641.33 T
6 F
(T) 292.08 641.33 T
(imerT) 299.05 641.33 T
(ype) 330.01 641.33 T
0 F
( indicating the type of timer to start.) 348.53 641.33 T
5 F
(destObject) 180 623.33 T
0 F
(The optr of the object that will be sent the speci\336ed message) 243 623.33 T
(when the time is up.) 243 612.33 T
5 F
(ticks) 180 594.33 T
0 F
-0.73 (The number of ticks for the timer to run. \050Sixty ticks equals one) 243 594.33 P
(second.\051) 243 583.33 T
5 F
(msg) 180 565.33 T
0 F
(The message to be sent to the destination object when time is) 243 565.33 T
(up.) 243 554.33 T
5 F
(interval) 180 536.33 T
0 F
-0.52 (For continual timers, the interval \050number of ticks\051 at which to) 243 536.33 P
(send out the message to the destination object. The timer will) 243 525.33 T
(send the message once at the end of each interval. The \336rst) 243 514.33 T
(message will be sent) 243 503.33 T
5 F
(ticks) 340.62 503.33 T
0 F
( ticks after the timer is started. The) 361.91 503.33 T
(second message will be sent) 243 492.33 T
5 F
(interval) 374.32 492.33 T
0 F
( ticks after that.) 410.42 492.33 T
5 F
(id) 180 474.33 T
0 F
(A pointer to a word in which the timer) 243 474.33 T
(\325) 420.97 474.33 T
(s) 422.64 474.33 T
0 9 Q
(ID) 430.05 474.33 T
0 10 Q
( will be returned.) 440.71 474.33 T
(Y) 243 463.33 T
(ou will need this) 248.93 463.33 T
0 9 Q
(ID) 328.02 463.33 T
0 10 Q
( for) 338.68 463.33 T
6 F
(T) 357.02 463.33 T
(imerStop\050\051) 363.98 463.33 T
0 F
(.) 419.73 463.33 T
(This routine returns the handle of the timer as well as an) 180 445.33 T
0 9 Q
(ID) 448.74 445.33 T
0 10 Q
( pointed to by) 459.4 445.33 T
(the) 180 433.83 T
5 F
(id) 197.78 433.83 T
0 F
( parameter) 207.22 433.83 T
(. Y) 257.78 433.83 T
(ou will need the handle and the) 269.27 433.83 T
0 9 Q
(ID) 418 433.83 T
0 10 Q
( for) 428.67 433.83 T
6 F
(T) 446.99 433.83 T
(imerStop\050\051) 453.96 433.83 T
0 F
(.) 509.71 433.83 T
2 F
(T) 99 415.33 T
(imerT) 104.93 415.33 T
(ype:) 131.42 415.33 T
0 F
(The) 180 415.33 T
6 F
(T) 200.56 415.33 T
(imerT) 207.53 415.33 T
(ype) 238.49 415.33 T
0 F
( enumerated type de\336nes what type of timer should be) 257.01 415.33 T
(initiated. It has the following values:) 180 404.33 T
0 9 Q
(TIMER_ROUTINE_ONE_SHOT) 180 386.33 T
0 10 Q
(Start a timer that will call a routine and then free itself when) 243 375.33 T
-0.29 (the time is expired. This type is supported in assembly but not) 243 364.33 P
(in) 243 353.33 T
0 9 Q
(C) 255.04 353.33 T
0 10 Q
(.) 261.54 353.33 T
0 9 Q
(TIMER_ROUTINE_CONTINUAL) 180 335.33 T
0 10 Q
(Start a timer that will call a routine once per time interval) 243 324.33 T
(until) 243 313.33 T
6 F
(T) 268.19 313.33 T
(imerStop\050\051) 275.16 313.33 T
0 F
( is called. This type is supported in) 330.91 313.33 T
(assembly but not in) 243 302.33 T
0 9 Q
(C) 336.73 302.33 T
0 10 Q
(.) 343.23 302.33 T
0 9 Q
(TIMER_EVENT_ONE_SHOT) 180 284.33 T
0 10 Q
(Start a timer that will send a message to a given object, then) 243 273.33 T
(free itself, when time is expired.) 243 262.33 T
0 9 Q
(TIMER_EVENT_CONTINUAL) 180 244.33 T
0 10 Q
-0.77 (Start a timer that will send a message to a given object once per) 243 233.33 P
(time interval until) 243 222.33 T
6 F
(T) 331.35 222.33 T
(imerStop\050\051) 338.32 222.33 T
0 F
( is called.) 394.07 222.33 T
0 9 Q
(TIMER_MS_ROUTINE_ONE_SHOT) 180 204.33 T
0 10 Q
-0.37 (Start a timer that has millisecond accuracy) 243 193.33 P
-0.37 (. For this timer) 439.87 193.33 P
-0.37 (, the) 508.4 193.33 P
(number of ticks will actually be the number of milliseconds.) 243 182.33 T
-0.46 (The timer will call a speci\336ed routine and then free itself when) 243 171.33 P
-0.59 (time is expired. This type is supported in assembly but not in) 243 160.33 P
0 9 Q
-0.53 (C) 521.72 160.33 P
0 10 Q
-0.59 (.) 528.22 160.33 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "404" 44
%%Page: "405" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(405) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 9 Q
0 X
(TIMER_EVENT_REAL_TIME) 180 641.33 T
0 10 Q
(Start a timer that will call a routine at some particular date) 243 630.33 T
-0.28 (and time. On devices that support such a timer) 243 619.33 P
-0.28 (, this event will) 457.83 619.33 P
(wake a sleeping machine.) 243 608.33 T
2 F
(Include:) 99 590.33 T
0 F
(timer) 180 590.33 T
(.h) 204.63 590.33 T
81 573.99 531 579 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 573.99 531 579 R
7 X
0 0 0 1 0 0 0 K
V
50 577.99 609.01 577.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 565.99 T
2 F
(T) 99 565.99 T
(imerStop\050\051) 106.12 565.99 T
4 10 Q
(Boolean) 99 551.33 T
3 F
(TimerStop\050) 153 551.33 T
3 9 Q
(TimerHandle) 153 540.99 T
(th,) 261 540.99 T
(/* handle of timer to be stopped */) 315 540.99 T
(word) 153 530.99 T
(id\051;) 261 530.99 T
(/* timer ID \050returned by TimerStart\050\051 */) 315 530.99 T
0 10 Q
-0.28 (This routine stops a timer that had been started with) 180 513.33 P
6 F
-0.29 (T) 426.69 513.33 P
-0.29 (imerStart\050\051) 433.66 513.33 P
0 F
-0.28 (. Pass it) 492.19 513.33 P
-0.62 (the timer handle and the) 180 501.83 P
0 9 Q
-0.56 (ID) 295.23 501.83 P
0 10 Q
-0.62 ( as returned by that routine \050the) 305.89 501.83 P
0 9 Q
-0.56 (ID) 454.3 501.83 P
0 10 Q
-0.62 ( of a continual) 464.97 501.83 P
(timer will always be zero\051.) 180 490.33 T
(The returned error \337ag will be) 180 471.83 T
5 F
(true) 323.34 471.83 T
0 F
( if the timer could not be found.) 341.85 471.83 T
2 F
(W) 99 453.33 T
(arnings:) 108.07 453.33 T
0 F
(If you call) 180 453.33 T
6 F
(T) 228.52 453.33 T
(imerStop\050\051) 235.49 453.33 T
0 F
( to stop a continual timer that sends its message) 291.24 453.33 T
-0.38 (across threads, there may be timer events left in the recipient\325) 180 440.33 P
-0.38 (s event queue.) 463.24 440.33 P
(It is unsafe in this situation to assume that all timer events have been) 180 427.33 T
(handled. T) 180 414.33 T
(o ensure the timer message has been handled, you can send the) 228.72 414.33 T
(destination an \322all-safe\323 message with the) 180 401.33 T
0 9 Q
(MF_FORCE_QUEUE) 377.08 401.33 T
0 10 Q
( \337ag.) 467.75 401.33 T
2 F
(Include:) 99 381.33 T
0 F
(timer) 180 381.33 T
(.h) 204.63 381.33 T
81 364.98 531 369.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 364.98 531 369.99 R
7 X
0 0 0 1 0 0 0 K
V
50 368.98 609.01 368.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 356.98 T
2 F
(T) 99 356.98 T
(ocDBLock\050\051) 105.44 356.98 T
3 10 Q
(void * TocDBLock\050) 99 342.32 T
3 9 Q
(DBGroupAndItem) 153 331.98 T
(thing\051;) 261 331.98 T
0 10 Q
(Use this routine to lock a name array maintained by a PrefT) 180 314.32 T
(ocList object.) 458.58 314.32 T
2 F
(Include:) 99 295.82 T
0 F
(con\336g.goh) 180 295.82 T
81 279.48 531 284.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 279.48 531 284.48 R
7 X
0 0 0 1 0 0 0 K
V
50 283.48 609.01 283.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 271.47 T
2 F
(T) 99 271.47 T
(ocDBLockGetRef\050\051) 105.44 271.47 T
3 10 Q
(void * TocDBLockGetRef\050) 99 256.81 T
3 9 Q
(DBGroupAndItem) 153 246.47 T
(thing,) 261 246.47 T
(optr) 153 236.47 T
(*refPtr\051;) 261 236.47 T
0 10 Q
(This routine locks a name array maintained by a PrefT) 180 218.81 T
(ocList object,) 433.76 218.81 T
(returning the item\325) 180 207.31 T
(s pointer and optr) 267.78 207.31 T
(.) 349.82 207.31 T
2 F
(Include:) 99 188.81 T
0 F
(con\336g.goh) 180 188.81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "405" 45
%%Page: "406" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(406) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(ocFindCategory\050\051) 105.44 634.99 T
3 10 Q
(Boolean TocFindCategory\050) 99 620.33 T
3 9 Q
(TocCategoryStruct) 153 609.99 T
(*cat\051;) 261 609.99 T
0 10 Q
(This routine searches a PrefT) 180 592.33 T
(ocList object\325) 315.94 592.33 T
(s name lists for a given token.) 375.02 592.33 T
2 F
(Structures:) 99 573.83 T
3 9 Q
(typedef struct {) 153 563.49 T
(TokenChars) 189 553.49 T
(TCS_tokenChars;) 279 553.49 T
(DBGroupAndItem) 189 543.49 T
(TCS_files;) 279 543.49 T
(/* file name array */) 369 543.49 T
(DBGroupAndItem) 189 533.49 T
(TCS_devices;) 279 533.49 T
(/* device name array--only if) 369 533.49 T
( * TCF_EXTENDED_DEVICE_DRIVERS) 369 523.49 T
( * is set. */) 369 513.49 T
(} TocCategoryStruct;) 153 503.49 T
2 10 Q
(Include:) 99 485.83 T
0 F
(con\336g.goh) 180 485.83 T
81 469.48 531 474.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 469.48 531 474.49 R
7 X
0 0 0 1 0 0 0 K
V
50 473.48 609.01 473.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 461.48 T
2 F
(T) 99 461.48 T
(ocGetFileHandle\050\051) 105.44 461.48 T
3 10 Q
(word TocGetFileHandle\050\051;) 99 446.82 T
0 F
(Use this routine to get the handle of the \336le used by PrefT) 180 428.82 T
(ocLists to store) 447.63 428.82 T
(their name array data.) 180 417.32 T
2 F
(Include:) 99 398.82 T
0 F
(con\336g.goh) 180 398.82 T
81 382.48 531 387.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 382.48 531 387.48 R
7 X
0 0 0 1 0 0 0 K
V
50 386.48 609.01 386.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 374.48 T
2 F
(T) 99 374.48 T
(ocNameArrayAdd\050\051) 105.44 374.48 T
3 10 Q
(word TocNameArrayAdd\050) 99 359.81 T
3 9 Q
(DBGroupAndItem) 153 349.48 T
(array,) 261 349.48 T
(const char) 153 339.48 T
(*nameToFind,) 261 339.48 T
(const void) 153 329.48 T
(*data\051;) 261 329.48 T
0 10 Q
-0.33 (Use this routine to add a name to a name array maintained by a PrefT) 180 311.81 P
-0.33 (ocList) 500.77 311.81 P
(object.) 180 300.31 T
2 F
(Include:) 99 281.81 T
0 F
(con\336g.h) 180 281.81 T
81 265.47 531 270.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 265.47 531 270.47 R
7 X
0 0 0 1 0 0 0 K
V
50 269.47 609.01 269.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 257.47 T
2 F
(T) 99 257.47 T
(ocNameArrayFind\050\051) 105.44 257.47 T
3 10 Q
(word TocNameArrayGetElement\050) 99 242.8 T
3 9 Q
(DBGroupAndItem) 153 232.47 T
(array,) 261 232.47 T
(word) 153 222.47 T
(element,) 261 222.47 T
(void) 153 212.47 T
(*buffer\051;) 261 212.47 T
0 10 Q
-0.35 (Use this routine to \336nd a name in the name list maintained by a PrefT) 180 194.8 P
-0.35 (ocList) 500.79 194.8 P
(object.) 180 183.3 T
2 F
(Include:) 99 164.8 T
0 F
(con\336g.goh) 180 164.8 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "406" 46
%%Page: "407" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(407) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(ocNameArrayGetElement\050\051) 105.44 634.99 T
3 10 Q
(word TocNameArrayGetElement\050) 99 620.33 T
3 9 Q
(DBGroupAndItem) 153 609.99 T
(array,) 261 609.99 T
(word) 153 599.99 T
(element,) 261 599.99 T
(void) 153 589.99 T
(*buffer\051;) 261 589.99 T
0 10 Q
(Use this routine to retrieve a given element from a name array maintained) 180 572.33 T
(by a PrefT) 180 560.83 T
(ocList object.) 227.24 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(con\336g.goh) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(T) 99 517.98 T
(ocSortedNameArrayAdd\050\051) 105.44 517.98 T
3 10 Q
(word TocSortedNameArrayAdd\050) 99 503.32 T
3 9 Q
(word) 153 492.98 T
(arr,) 261 492.98 T
(const char) 153 482.98 T
(*nameToAdd,) 261 482.98 T
(NameArrayAddFlags) 153 472.98 T
(flags,) 261 472.98 T
(const void) 153 462.98 T
(*data\051;) 261 462.98 T
0 10 Q
(This routine adds a name to a sorted name array associated with a) 180 445.32 T
(PrefT) 180 433.82 T
(ocList object.) 205.19 433.82 T
2 F
(Structures:) 99 415.32 T
3 9 Q
(typedef WordFlags NameArrayAddFlags;) 153 404.98 T
(#define NAAF_SET_DATA_ON_REPLACE 0x8000) 153 394.98 T
2 10 Q
(Include:) 99 377.32 T
0 F
(con\336g.goh) 180 377.32 T
81 360.98 531 365.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 360.98 531 365.98 R
7 X
0 0 0 1 0 0 0 K
V
50 364.98 609.01 364.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 352.98 T
2 F
(T) 99 352.98 T
(ocSortedNameArrayFind\050\051) 105.44 352.98 T
3 10 Q
(Boolean TocSortedNameArrayFind\050) 99 338.31 T
3 9 Q
(word) 153 327.98 T
(arr,) 297 327.98 T
(const char) 153 317.98 T
(*nameToFind,) 297 317.98 T
(SortedNameArrayFindFlags) 153 307.98 T
(flags,) 297 307.98 T
(void) 153 297.98 T
(*buffer,) 297 297.98 T
(word) 153 287.98 T
(*elementNum\051;) 297 287.98 T
0 10 Q
(This routine looks up a name in a sorted name array associated with a) 180 270.31 T
(PrefT) 180 258.81 T
(ocList object.) 205.19 258.81 T
2 F
(Structures:) 99 240.31 T
3 9 Q
(typedef WordFlags SortedNameArrayFindFlags;) 153 229.97 T
(#define SNAFF_IGNORE_CASE 0x0080) 153 219.97 T
2 10 Q
(Include:) 99 202.31 T
0 F
(con\336g.goh) 180 202.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "407" 47
%%Page: "408" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(408) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(ocUpdateCategory\050\051) 105.44 634.99 T
3 10 Q
(void TocUpdateCategory\050) 99 620.33 T
3 9 Q
(TocUpdateCategoryParams *params\051;) 153 609.99 T
0 10 Q
-0.63 (Use this routine to update a PrefT) 180 592.33 P
-0.63 (ocList object based upon the \336les in a given) 333.85 592.33 P
(directory with a given token.) 180 580.83 T
2 F
(Structures:) 99 562.33 T
3 9 Q
(typedef struct {) 153 551.99 T
(TocUpdateCategoryFlags) 189 541.99 T
(TUCP_flags;) 315 541.99 T
(TokenChars) 189 531.99 T
(TUCP_tokenChars;) 315 531.99 T
(byte) 189 521.99 T
(TUCP_fileArrayElementSize;) 315 521.99 T
(TocUpdateAddCallback) 189 501.99 T
(*TUCP_addCallback;) 315 501.99 T
(byte) 189 491.99 T
(TUCP_pad; /* Wants to be word-aligned */) 315 491.99 T
(} TocUpdateCategoryParams;) 153 481.99 T
(typedef word _pascal TocUpdateAddCallback\050) 153 461.99 T
(const char *filename,) 189 451.99 T
(optr chunkArray\051;) 189 441.99 T
(/* Return 0 if add aborted, else return offset of new element within) 153 431.99 T
(* block */) 158.4 421.99 T
2 10 Q
(Include:) 99 394.33 T
0 F
(con\336g.goh) 180 394.33 T
81 377.98 531 382.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 377.98 531 382.99 R
7 X
0 0 0 1 0 0 0 K
V
50 381.98 609.01 381.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 369.98 T
2 F
(T) 99 369.98 T
(OKEN_CHARS\050\051) 106.12 369.98 T
4 10 Q
(dword) 99 356.32 T
3 F
(TOKEN_CHARS\050) 153 356.32 T
7 F
(a) 225 356.32 T
3 F
(,) 231 356.32 T
7 F
(b) 243 356.32 T
3 F
(,) 249 356.32 T
7 F
(c) 261 356.32 T
3 F
(,) 267 356.32 T
7 F
(d) 279 356.32 T
3 F
(\051;) 285 356.32 T
3 9 Q
(char) 153 345.98 T
7 F
(a) 189 345.98 T
3 F
(,) 194.4 345.98 T
7 F
(b) 205.2 345.98 T
3 F
(,) 210.6 345.98 T
7 F
(c) 221.4 345.98 T
3 F
(,) 226.8 345.98 T
7 F
(d) 237.6 345.98 T
3 F
(;) 243 345.98 T
0 10 Q
(This macro creates a single dword value from four given characters. This is) 180 328.32 T
(useful when creating a token characters value for a speci\336c token.) 180 316.82 T
81 301.98 531 306.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 301.98 531 306.98 R
7 X
0 0 0 1 0 0 0 K
V
50 305.98 609.01 305.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 293.98 T
2 F
(T) 99 293.98 T
(okenDe\336neT) 105.44 293.98 T
(oken\050\051) 176.57 293.98 T
4 10 Q
(word) 99 280.31 T
3 F
(TokenDefineToken\050) 153 280.31 T
3 9 Q
(dword) 153 269.97 T
(tokenChars,) 261 269.97 T
(/* four token characters */) 351 269.97 T
(ManufacturerID) 153 259.97 T
(manufacturerID,) 261 259.97 T
(/* manufacturer ID for token */) 351 259.97 T
(optr) 153 249.97 T
(monikerList,) 261 249.97 T
(/* optr of moniker list */) 351 249.97 T
(TokenFlags) 153 239.97 T
(flags\051;) 261 239.97 T
(/* token flags */) 351 239.97 T
0 10 Q
-0.28 (This routine adds a new token and moniker list to the token database. If the) 180 222.31 P
(token already exists in the token) 180 210.81 T
0 9 Q
(DB) 334.29 210.81 T
0 10 Q
(, the old will be replaced with the new) 347.79 210.81 T
(.) 522.46 210.81 T
-0.36 (This routine must only be called by a thread that can lock the block in which) 180 199.31 P
-0.21 (the passed moniker or moniker list resides. This routine must be passed the) 180 187.81 P
(following parameters:) 180 176.31 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "408" 48
%%Page: "409" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(409) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(tokenChars) 180 641.33 T
0 F
(The four token characters that identify this moniker or) 243 641.33 T
(moniker list in the token database. Create this dword value) 243 630.33 T
(from the four characters with the macro) 243 619.33 T
0 9 Q
(TOKEN_CHARS) 430.77 619.33 T
0 10 Q
(.) 501.77 619.33 T
5 F
(manufacturerID) 180 601.33 T
0 F
-0.29 (The manufacturer) 243 590.33 P
0 9 Q
-0.26 (ID) 329.65 590.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 590.33 P
(for the token database entry) 243 579.33 T
(.) 373.02 579.33 T
5 F
(monikerList) 180 561.33 T
0 F
-0.02 (The optr of the moniker list to be added to the token database.) 243 550.33 P
5 F
(\337ags) 180 532.33 T
0 F
-0.35 (A record of) 243 532.33 P
6 F
-0.36 (T) 294.9 532.33 P
-0.36 (okenFlags) 301.2 532.33 P
0 F
-0.35 ( indicating the relocation status of the) 354.53 532.33 P
(moniker list.) 243 521.33 T
2 F
(W) 99 503.33 T
(arnings:) 108.07 503.33 T
0 F
(This routine may legally move locked LMem blocks \050token database items\051,) 180 503.33 T
(thereby invalidating all pointers to token database items.) 180 490.33 T
2 F
(Include:) 99 470.33 T
0 F
(token.h) 180 470.33 T
81 453.99 531 459 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 453.99 531 459 R
7 X
0 0 0 1 0 0 0 K
V
50 457.99 609.01 457.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 445.99 T
2 F
(T) 99 445.99 T
(okenGetT) 105.44 445.99 T
(okenInfo\050\051) 159.9 445.99 T
4 10 Q
(Boolean) 99 432.33 T
3 F
(TokenGetTokenInfo\050) 153 432.33 T
3 9 Q
(dword) 153 421.99 T
(tokenChars,) 261 421.99 T
(/* four characters of token */) 351 421.99 T
(ManufacturerID) 153 411.99 T
(manufacturerID,) 261 411.99 T
(/* manufacturer ID of token */) 351 411.99 T
(TokenFlags) 153 401.99 T
(* flags\051;) 261 401.99 T
(/* returned token flags */) 351 401.99 T
0 10 Q
(This routine returns information about a speci\336ed token. Pass it the) 180 384.33 T
(following:) 180 372.83 T
5 F
(tokenChars) 180 354.33 T
0 F
(The four token characters that identify the token database) 243 354.33 T
(entry) 243 343.33 T
(. Create this dword from the four characters with the) 266.7 343.33 T
(macro) 243 332.33 T
0 9 Q
(TOKEN_CHARS) 274.11 332.33 T
0 10 Q
(.) 345.11 332.33 T
5 F
(manufacturerID) 180 314.33 T
0 F
-0.29 (The manufacturer) 243 303.33 P
0 9 Q
-0.26 (ID) 329.65 303.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 303.33 P
(for the token database entry) 243 292.33 T
(.) 373.02 292.33 T
5 F
(\337ags) 180 274.33 T
0 F
-0.18 (A pointer to an empty \337ags record; the \337ags set \050if any\051 for the) 243 274.33 P
(speci\336ed token \050if it exists\051 will be returned here.) 243 263.33 T
(This routine returns a \050non-zero\051 value of) 180 245.33 T
6 F
(VMStatus) 373.88 245.33 T
0 F
( if the token was not) 424.43 245.33 T
(found in the token database. It returns zero if successful.) 180 233.83 T
2 F
(Include:) 99 215.33 T
0 F
(token.h) 180 215.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "409" 49
%%Page: "410" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(410) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(okenListT) 105.44 634.99 T
(okens\050\051) 161.23 634.99 T
4 10 Q
(dword) 99 621.33 T
3 F
(TokenListTokens\050) 153 621.33 T
3 9 Q
(TokenRangeFlags) 153 610.99 T
(tokenRangeFlags,) 261 610.99 T
(word) 153 600.99 T
(headerSize,) 261 600.99 T
(ManufacturerID) 153 590.99 T
(manufacturerID\051\051;) 261 590.99 T
0 10 Q
(This routine lists all the tokens in the token database. It allocates a new) 180 573.33 T
-0.78 (block on the global heap and writes in it an array of) 180 561.83 P
6 F
-0.8 (GeodeT) 412.38 561.83 P
-0.8 (oken) 451.27 561.83 P
0 F
-0.78 ( structures.) 476.64 561.83 P
(This routine returns the actual tokens, not the token groups.) 180 550.33 T
(The returned dword consists of two values: The high word represents the) 180 531.83 T
-0.53 (number of tokens in the returned block and may be extracted with the macro) 180 520.33 P
6 F
(T) 180 508.83 T
(okenListT) 186.3 508.83 T
(okensCountFromDW) 238.15 508.83 T
(ord\050\051) 346.11 508.83 T
0 F
(. The low word represents the) 371.86 508.83 T
(handle of the newly-allocated block and can be extracted with the macro) 180 497.33 T
6 F
(T) 180 485.83 T
(okenListT) 186.3 485.83 T
(okensHandleFromDW) 238.15 485.83 T
(ord\050\051) 351.85 485.83 T
0 F
(.) 377.6 485.83 T
2 F
(Include:) 99 467.33 T
0 F
(token.h) 180 467.33 T
81 450.98 531 455.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 450.98 531 455.99 R
7 X
0 0 0 1 0 0 0 K
V
50 454.98 609.01 454.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 442.98 T
2 F
(T) 99 442.98 T
(okenListT) 105.44 442.98 T
(okensCountFromDW) 161.23 442.98 T
(ord\050\051) 280.34 442.98 T
4 10 Q
(word) 99 429.32 T
3 F
(TokenListTokensCountFromDWord\050) 153 429.32 T
7 F
(d) 333 429.32 T
3 F
(\051;) 339 429.32 T
3 9 Q
(dword) 153 418.98 T
7 F
(d) 189 418.98 T
3 F
(;) 194.4 418.98 T
0 10 Q
(This macro extracts the number of tokens from the value returned by) 180 401.32 T
6 F
(T) 180 389.82 T
(okenListT) 186.3 389.82 T
(okens\050\051) 238.15 389.82 T
0 F
(.) 276.3 389.82 T
81 374.98 531 379.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 374.98 531 379.98 R
7 X
0 0 0 1 0 0 0 K
V
50 378.98 609.01 378.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 366.98 T
2 F
(T) 99 366.98 T
(okenListT) 105.44 366.98 T
(okensHandleFromDW) 161.23 366.98 T
(ord\050\051) 285.7 366.98 T
4 10 Q
(word) 99 353.31 T
3 F
(TokenListTokensHandleFromDWord\050) 153 353.31 T
7 F
(d) 339 353.31 T
3 F
(\051;) 345 353.31 T
3 9 Q
(dword) 153 342.98 T
7 F
(d) 189 342.98 T
3 F
(;) 194.4 342.98 T
0 10 Q
(This routine extracts the MemHandle from the value returned by) 180 325.31 T
6 F
(T) 180 313.81 T
(okenListT) 186.3 313.81 T
(okens\050\051) 238.15 313.81 T
0 F
(.) 276.3 313.81 T
81 298.97 531 303.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 298.97 531 303.98 R
7 X
0 0 0 1 0 0 0 K
V
50 302.97 609.01 302.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 290.97 T
2 F
(T) 99 290.97 T
(okenLoadMonikerBlock\050\051) 105.44 290.97 T
4 10 Q
(Boolean) 99 277.3 T
3 F
(TokenLoadMonikerBlock\050) 153 277.3 T
3 9 Q
(dword) 153 266.97 T
(tokenChars,) 261 266.97 T
(/* four characters of token */) 351 266.97 T
(ManufacturerID) 153 256.97 T
(manufacturerID,) 261 256.97 T
(/* manufacturer ID of token */) 351 256.97 T
(DisplayType) 153 246.97 T
(displayType,) 261 246.97 T
(/* type of display for token */) 351 246.97 T
(VisMonikerSearchFlags searchFlags,) 153 236.97 T
(/* flags for finding token */) 351 236.97 T
(word) 153 226.97 T
(* blockSize,) 261 226.97 T
(/* returned block size */) 351 226.97 T
(MemHandle) 153 216.97 T
(* blockHandle\051;) 261 216.97 T
(/* returned block handle */) 351 216.97 T
0 10 Q
(This routine loads a speci\336ed token\325) 180 199.3 T
(s moniker) 345.21 199.3 T
(, allocating a new global) 390.4 199.3 T
(memory block for the moniker) 180 187.8 T
(. The returned Boolean will be) 318.34 187.8 T
5 F
(false) 461.14 187.8 T
0 F
( if the) 482.42 187.8 T
(moniker was found,) 180 176.3 T
5 F
(true) 273.9 176.3 T
0 F
( otherwise. Information about the moniker is) 292.41 176.3 T
-0.59 (returned in the values pointed to by) 180 164.8 P
5 F
-0.59 (blockSize) 344.58 164.8 P
0 F
-0.59 ( \050the size of the newly allocated) 387.54 164.8 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "410" 50
%%Page: "411" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(411) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(block\051 and) 180 641.33 T
5 F
(blockHandle) 230.38 641.33 T
0 F
( \050the handle of the new block\051. If the moniker is not) 288.33 641.33 T
(found, both return pointers will be) 180 629.83 T
0 9 Q
(NULL) 342.05 629.83 T
0 10 Q
( and no block will be allocated.) 368.73 629.83 T
(Pass this routine the following:) 180 611.33 T
5 F
(tokenChars) 180 592.83 T
0 F
(The four token characters that identify the token database) 243 592.83 T
(entry) 243 581.83 T
(. Create this dword from the four characters with the) 266.7 581.83 T
(macro) 243 570.83 T
0 9 Q
(TOKEN_CHARS) 274.11 570.83 T
0 10 Q
(.) 345.11 570.83 T
5 F
(manufacturerID) 180 552.83 T
0 F
-0.29 (The manufacturer) 243 541.83 P
0 9 Q
-0.26 (ID) 329.65 541.83 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 541.83 P
(for the token database entry) 243 530.83 T
(.) 373.02 530.83 T
5 F
(displayT) 180 512.83 T
(ype) 219.65 512.83 T
0 F
-0.79 (A value of) 243 501.83 P
6 F
-0.82 (DisplayT) 289.7 501.83 P
-0.82 (ype) 335.84 501.83 P
0 F
-0.79 ( indicating the size of the display \050used) 354.36 501.83 P
(to indicate small-screen devices, primarily\051.) 243 490.83 T
5 F
(searchFlags) 180 472.83 T
0 F
-0.15 (A record of) 243 461.83 P
6 F
-0.15 (V) 295.5 461.83 P
-0.15 (isMonikerSearchFlags) 302.65 461.83 P
0 F
-0.15 ( indicating what type of) 419.5 461.83 P
(moniker is being requested.) 243 450.83 T
5 F
(blockSize) 180 432.83 T
0 F
(A pointer to a word in which the new block\325) 243 432.83 T
(s size will be) 442.47 432.83 T
(returned.) 243 421.83 T
5 F
(blockHandle) 180 403.83 T
0 F
(A pointer to a handle in which the new block\325) 243 392.83 T
(s handle will be) 451.18 392.83 T
(returned.) 243 381.83 T
2 F
(Include:) 99 363.83 T
0 F
(token.h) 180 363.83 T
81 347.49 531 352.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 347.49 531 352.5 R
7 X
0 0 0 1 0 0 0 K
V
50 351.49 609.01 351.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 339.49 T
2 F
(T) 99 339.49 T
(okenLoadMonikerBuffer\050\051) 105.44 339.49 T
4 10 Q
(Boolean) 99 325.83 T
3 F
(TokenLoadMonikerBuffer\050) 153 325.83 T
3 9 Q
(dword) 153 315.49 T
(tokenChars,) 261 315.49 T
(/* four characters of token */) 351 315.49 T
(ManufacturerID) 153 305.49 T
(manufacturerID,) 261 305.49 T
(/* manufacturer ID of token */) 351 305.49 T
(DisplayType) 153 295.49 T
(displayType,) 261 295.49 T
(/* type of display for token */) 351 295.49 T
(VisMonikerSearchFlags searchFlags,) 153 285.49 T
(/* flags for finding token */) 351 285.49 T
(void) 153 275.49 T
(* buffer,) 261 275.49 T
(/* pointer to buffer for token */) 351 275.49 T
(word) 153 265.49 T
(bufSize,) 261 265.49 T
(/* size of passed buffer */) 351 265.49 T
(word) 153 255.49 T
(* bytesReturned\051;) 261 255.49 T
(/* number of bytes returned */) 369 255.49 T
0 10 Q
(This routine loads a speci\336ed token\325) 180 237.83 T
(s moniker into a provided buffer) 345.21 237.83 T
(. The) 493.18 237.83 T
-0.06 (return value will be) 180 226.33 P
5 F
-0.06 (false) 273.84 226.33 P
0 F
-0.06 ( if the moniker was found,) 295.12 226.33 P
5 F
-0.06 (true) 418.47 226.33 P
0 F
-0.06 ( otherwise. The size) 436.98 226.33 P
(of the returned moniker will be returned in the word pointed to by the) 180 214.83 T
5 F
(bytesReturned) 180 203.33 T
0 F
( parameter) 245.54 203.33 T
(.) 296.1 203.33 T
(Pass this routine the following:) 180 184.83 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "411" 51
%%Page: "412" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(412) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(tokenChars) 180 641.33 T
0 F
(The four token characters that identify the token database) 243 641.33 T
(entry) 243 630.33 T
(. Create this dword from the four characters with the) 266.7 630.33 T
(macro) 243 619.33 T
0 9 Q
(TOKEN_CHARS) 274.11 619.33 T
0 10 Q
(.) 345.11 619.33 T
5 F
(manufacturerID) 180 601.33 T
0 F
-0.29 (The manufacturer) 243 590.33 P
0 9 Q
-0.26 (ID) 329.65 590.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 590.33 P
(for the token database entry) 243 579.33 T
(.) 373.02 579.33 T
5 F
(displayT) 180 561.33 T
(ype) 219.65 561.33 T
0 F
-0.79 (A value of) 243 550.33 P
6 F
-0.82 (DisplayT) 289.7 550.33 P
-0.82 (ype) 335.84 550.33 P
0 F
-0.79 ( indicating the size of the display \050used) 354.36 550.33 P
(to indicate small-screen devices, primarily\051.) 243 539.33 T
5 F
(searchFlags) 180 521.33 T
0 F
-0.15 (A record of) 243 510.33 P
6 F
-0.15 (V) 295.5 510.33 P
-0.15 (isMonikerSearchFlags) 302.65 510.33 P
0 F
-0.15 ( indicating what type of) 419.5 510.33 P
(moniker is being requested.) 243 499.33 T
5 F
(buffer) 180 481.33 T
0 F
-0.64 (A pointer to a locked or \336xed buffer into which the moniker will) 243 481.33 P
(be copied.) 243 470.33 T
5 F
(bufSize) 180 452.33 T
0 F
(The size of the passed buffer; also the maximum size of the) 243 452.33 T
(moniker that may be returned.) 243 441.33 T
5 F
(bytesReturned) 180 423.33 T
0 F
(The size of the moniker actually returned in the buffer) 243 412.33 T
(.) 494.49 412.33 T
2 F
(Include:) 99 394.33 T
0 F
(token.h) 180 394.33 T
81 377.99 531 383 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 377.99 531 383 R
7 X
0 0 0 1 0 0 0 K
V
50 381.99 609.01 381.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 369.99 T
2 F
(T) 99 369.99 T
(okenLoadMonikerChunk\050\051) 105.44 369.99 T
4 10 Q
(Boolean) 99 356.33 T
3 F
(TokenLoadMonikerChunk\050) 153 356.33 T
3 9 Q
(dword) 153 345.99 T
(tokenChars,) 261 345.99 T
(/* four characters of token */) 351 345.99 T
(ManufacturerID) 153 335.99 T
(manufacturerID,) 261 335.99 T
(/* manufacturer ID of token */) 351 335.99 T
(DisplayType) 153 325.99 T
(displayType,) 261 325.99 T
(/* type of display for token */) 351 325.99 T
(VisMonikerSearchFlags searchFlags,) 153 315.99 T
(/* flags for finding token */) 351 315.99 T
(MemHandle) 153 305.99 T
(lmemBlock,) 261 305.99 T
(/* locked block for new chunk */) 351 305.99 T
(word) 153 295.99 T
(* chunkSize,) 261 295.99 T
(/* returned new chunk size */) 351 295.99 T
(ChunkHandle) 153 285.99 T
(* chunkHandle\051;) 261 285.99 T
(/* returned new chunk handle */) 351 285.99 T
0 10 Q
(This routine loads a speci\336ed token\325) 180 268.33 T
(s moniker) 345.21 268.33 T
(, allocating a new chunk in a) 390.4 268.33 T
-0.58 (local memory block for the moniker) 180 256.83 P
-0.58 (. The returned error \337ag will be) 339.54 256.83 P
5 F
-0.58 (true) 484.4 256.83 P
0 F
-0.58 ( if the) 502.91 256.83 P
(moniker was not found,) 180 245.33 T
5 F
(false) 291.68 245.33 T
0 F
( otherwise.) 312.96 245.33 T
(Pass this routine the following:) 180 226.83 T
5 F
(tokenChars) 180 208.33 T
0 F
(The four token characters that identify the token database) 243 208.33 T
(entry) 243 197.33 T
(. Create this dword from the four characters with the) 266.7 197.33 T
(macro) 243 186.33 T
0 9 Q
(TOKEN_CHARS) 274.11 186.33 T
0 10 Q
(.) 345.11 186.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "412" 52
%%Page: "413" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(413) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(manufacturerID) 180 641.33 T
0 F
-0.29 (The manufacturer) 243 630.33 P
0 9 Q
-0.26 (ID) 329.65 630.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 630.33 P
(for the token database entry) 243 619.33 T
(.) 373.02 619.33 T
5 F
(displayT) 180 601.33 T
(ype) 219.65 601.33 T
0 F
-0.79 (A value of) 243 590.33 P
6 F
-0.82 (DisplayT) 289.7 590.33 P
-0.82 (ype) 335.84 590.33 P
0 F
-0.79 ( indicating the size of the display \050used) 354.36 590.33 P
(to indicate small-screen devices, primarily\051.) 243 579.33 T
5 F
(searchFlags) 180 561.33 T
0 F
-0.15 (A record of) 243 550.33 P
6 F
-0.15 (V) 295.5 550.33 P
-0.15 (isMonikerSearchFlags) 302.65 550.33 P
0 F
-0.15 ( indicating what type of) 419.5 550.33 P
(moniker is being requested.) 243 539.33 T
5 F
(lmemBlock) 180 521.33 T
0 F
(The MemHandle of the local memory block in which the new) 243 521.33 T
(chunk will be allocated. If the block is locked, you must) 243 510.33 T
(dereference the global handle after calling this routine.) 243 499.33 T
5 F
(chunkSize) 180 481.33 T
0 F
-0.65 (A pointer to a word in which the size of the allocated chunk will) 243 481.33 P
(be returned.) 243 470.33 T
5 F
(chunkhandle) 180 452.33 T
0 F
(A pointer to a chunk handle in which the handle of the newly) 243 441.33 T
(allocated chunk will be returned.) 243 430.33 T
2 F
(W) 99 412.33 T
(arnings:) 108.07 412.33 T
0 F
(This routine can move chunks in the passed block, thereby invalidating) 180 412.33 T
(pointers to any chunk in the block.) 180 399.33 T
2 F
(Include:) 99 379.33 T
0 F
(token.h) 180 379.33 T
81 362.99 531 368 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 362.99 531 368 R
7 X
0 0 0 1 0 0 0 K
V
50 366.99 609.01 366.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 354.99 T
2 F
(T) 99 354.99 T
(okenLoadT) 105.44 354.99 T
(okenBlock\050\051) 168.56 354.99 T
4 10 Q
(Boolean) 99 341.33 T
3 F
(TokenLoadTokenBlock\050) 153 341.33 T
3 9 Q
(dword) 153 330.99 T
(tokenChars,) 261 330.99 T
(/* four characters of token */) 351 330.99 T
(ManufacturerID) 153 320.99 T
(manufacturerID,) 261 320.99 T
(/* manufacturer ID of token */) 351 320.99 T
(word) 153 310.99 T
(* blockSize,) 261 310.99 T
(/* returned size of new block */) 351 310.99 T
(MemHandle) 153 300.99 T
(* blockHandle\051;) 261 300.99 T
(/* returned handle of block */) 351 300.99 T
0 10 Q
(This routine loads the speci\336ed token\325) 180 283.33 T
(s) 354.65 283.33 T
6 F
(T) 362.06 283.33 T
(okenEntry) 368.36 283.33 T
0 F
( structure into a) 423.73 283.33 T
-0.23 (newly-allocated global memory block. If the token is not found, the returned) 180 271.83 P
(error \337ag will be) 180 260.33 T
5 F
(true) 259.27 260.33 T
0 F
(; otherwise, it will be) 277.78 260.33 T
5 F
(false) 377.07 260.33 T
0 F
(.) 398.35 260.33 T
(Pass this routine the following:) 180 241.83 T
5 F
(tokenChars) 180 223.33 T
0 F
(The four token characters that identify the token database) 243 223.33 T
(entry) 243 212.33 T
(. Create this dword from the four characters with the) 266.7 212.33 T
(macro) 243 201.33 T
0 9 Q
(TOKEN_CHARS) 274.11 201.33 T
0 10 Q
(.) 345.11 201.33 T
5 F
(manufacturerID) 180 183.33 T
0 F
-0.29 (The manufacturer) 243 172.33 P
0 9 Q
-0.26 (ID) 329.65 172.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 172.33 P
(for the token database entry) 243 161.33 T
(.) 373.02 161.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "413" 53
%%Page: "414" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(414) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(blockSize) 180 641.33 T
0 F
(A pointer to a word in which the size of the newly-allocated) 243 641.33 T
(block will be returned.) 243 630.33 T
5 F
(blockHandle) 180 612.33 T
0 F
(A pointer to a global handle in which the handle of the) 243 601.33 T
(newly-allocated block will be returned.) 243 590.33 T
2 F
(Include:) 99 572.33 T
0 F
(token.h) 180 572.33 T
81 555.99 531 561 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 555.99 531 561 R
7 X
0 0 0 1 0 0 0 K
V
50 559.99 609.01 559.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 547.99 T
2 F
(T) 99 547.99 T
(okenLoadT) 105.44 547.99 T
(okenBuffer\050\051) 168.56 547.99 T
4 10 Q
(Boolean) 99 534.33 T
3 F
(TokenLoadTokenBuffer\050) 153 534.33 T
3 9 Q
(dword) 153 523.99 T
(tokenChars,) 261 523.99 T
(/* four characters of token */) 351 523.99 T
(ManufacturerID) 153 513.99 T
(manufacturerID,) 261 513.99 T
(/* manufacturer ID of token */) 351 513.99 T
(TokenEntry) 153 503.99 T
(* buffer\051;) 261 503.99 T
(/* buffer for returned token */) 351 503.99 T
0 10 Q
-0.42 (This routine loads the speci\336ed token\325) 180 486.33 P
-0.42 (s) 352.56 486.33 P
6 F
-0.43 (T) 359.56 486.33 P
-0.43 (okenEntry) 365.86 486.33 P
0 F
-0.42 ( structure into a passed) 421.23 486.33 P
(buffer) 180 474.83 T
(. The returned error \337ag will be) 207.03 474.83 T
5 F
(true) 355.93 474.83 T
0 F
( if the token was not found,) 374.44 474.83 T
5 F
(false) 503.35 474.83 T
0 F
(otherwise. Pass this routine the following:) 180 463.33 T
5 F
(tokenChars) 180 444.83 T
0 F
(The four token characters that identify the token database) 243 444.83 T
(entry) 243 433.83 T
(. Create this dword from the four characters with the) 266.7 433.83 T
(macro) 243 422.83 T
0 9 Q
(TOKEN_CHARS) 274.11 422.83 T
0 10 Q
(.) 345.11 422.83 T
5 F
(manufacturerID) 180 404.83 T
0 F
-0.29 (The manufacturer) 243 393.83 P
0 9 Q
-0.26 (ID) 329.65 393.83 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 393.83 P
(for the token database entry) 243 382.83 T
(.) 373.02 382.83 T
5 F
(buffer) 180 364.83 T
0 F
-0.25 (A pointer to a locked or \336xed buffer into which the token entry) 243 364.83 P
(will be copied.) 243 353.83 T
2 F
(Include:) 99 335.83 T
0 F
(token.h) 180 335.83 T
81 319.48 531 324.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 319.48 531 324.49 R
7 X
0 0 0 1 0 0 0 K
V
50 323.48 609.01 323.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 311.48 T
2 F
(T) 99 311.48 T
(okenLoadT) 105.44 311.48 T
(okenChunk\050\051) 168.56 311.48 T
4 10 Q
(Boolean) 99 297.82 T
3 F
(TokenLoadTokenChunk\050) 153 297.82 T
3 9 Q
(dword) 153 287.48 T
(tokenChars,) 261 287.48 T
(/* four characters of token */) 351 287.48 T
(ManufacturerID) 153 277.48 T
(manufacturerID,) 261 277.48 T
(/* manufacturer ID of token */) 351 277.48 T
(MemHandle) 153 267.48 T
(lmemBlock,) 261 267.48 T
(/* handle of block for chunk */) 351 267.48 T
(word) 153 257.48 T
(* chunkSize,) 261 257.48 T
(/* returned size of new chunk */) 351 257.48 T
(ChunkHandle) 153 247.48 T
(* chunkHandle\051;) 261 247.48 T
(/* returned chunk handle */) 351 247.48 T
0 10 Q
(This routine loads the speci\336ed token\325) 180 229.82 T
(s) 354.65 229.82 T
6 F
(T) 362.06 229.82 T
(okenEntry) 368.36 229.82 T
0 F
( structure into a) 423.73 229.82 T
-0.45 (newly-allocated chunk. The returned error \337ag will be) 180 218.32 P
5 F
-0.45 (true) 429 218.32 P
0 F
-0.45 ( if the token could) 447.51 218.32 P
(not be found,) 180 206.82 T
5 F
(false) 242.97 206.82 T
0 F
( otherwise.) 264.25 206.82 T
(Pass this routine the following:) 180 188.32 T
5 F
(tokenChars) 180 169.82 T
0 F
(The four token characters that identify the token database) 243 169.82 T
(entry) 243 158.82 T
(. Create this dword from the four characters with the) 266.7 158.82 T
(macro) 243 147.82 T
0 9 Q
(TOKEN_CHARS) 274.11 147.82 T
0 10 Q
(.) 345.11 147.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "414" 54
%%Page: "415" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(415) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(manufacturerID) 180 641.33 T
0 F
-0.29 (The manufacturer) 243 630.33 P
0 9 Q
-0.26 (ID) 329.65 630.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 630.33 P
(for the token database entry) 243 619.33 T
(.) 373.02 619.33 T
5 F
(lmemBlock) 180 601.33 T
0 F
(The MemHandle of the local memory block in which the new) 243 601.33 T
(chunk will be allocated. If the block is locked, you must) 243 590.33 T
(manually dereference this handle after the routine call.) 243 579.33 T
5 F
(chunksize) 180 561.33 T
0 F
(A pointer to a word in which the size of the newly-allocated) 243 561.33 T
(chunk will be returned.) 243 550.33 T
5 F
(chunkHandle) 180 532.33 T
0 F
(A pointer to a chunk handle in which the handle of the) 243 521.33 T
(newly-allocated chunk will be returned.) 243 510.33 T
2 F
(W) 99 492.33 T
(arnings:) 108.07 492.33 T
0 F
(This routine can move chunks in the passed block, thereby invalidating) 180 492.33 T
(pointers to any chunk in the block.) 180 479.33 T
2 F
(Include:) 99 459.33 T
0 F
(token.h) 180 459.33 T
81 442.99 531 448 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 442.99 531 448 R
7 X
0 0 0 1 0 0 0 K
V
50 446.99 609.01 446.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 434.99 T
2 F
(T) 99 434.99 T
(okenLockT) 105.44 434.99 T
(okenMoniker\050\051) 167.9 434.99 T
4 10 Q
(void) 99 421.33 T
3 F
(* TokenLockTokenMoniker\050) 153 421.33 T
3 9 Q
(TokenMonikerInfo) 153 410.99 T
(tokenMonikerInfo\051;) 261 410.99 T
(/* The DB group and item numbers) 358.2 410.99 T
( * as returned by TokenLookupMoniker\050\051 */) 297 400.99 T
0 10 Q
-0.29 (This routine locks a token\325) 180 383.33 P
-0.29 (s moniker so it may be drawn; it returns a pointer) 300.51 383.33 P
(to the locked chunk containing the moniker information. Pass it the) 180 371.83 T
(structure returned by) 180 360.33 T
6 F
(T) 282.95 360.33 T
(okenLookupMoniker\050\051) 289.25 360.33 T
0 F
(.) 406.1 360.33 T
2 F
(Be Sure T) 99 341.83 T
(o:) 144.94 341.83 T
0 F
(Unlock the moniker with) 180 341.83 T
6 F
(T) 298.35 341.83 T
(okenUnlockMoniker\050\051) 304.65 341.83 T
0 F
( after you have \336nished) 418.91 341.83 T
(drawing it.) 180 328.83 T
2 F
(Include:) 99 308.83 T
0 F
(token.h) 180 308.83 T
81 292.48 531 297.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 292.48 531 297.49 R
7 X
0 0 0 1 0 0 0 K
V
50 296.48 609.01 296.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 284.48 T
2 F
(T) 99 284.48 T
(okenLookupMoniker\050\051) 105.44 284.48 T
4 10 Q
(Boolean) 99 270.82 T
3 F
(TokenLookupMoniker\050) 153 270.82 T
3 9 Q
(dword) 153 260.48 T
(tokenChars,) 261 260.48 T
(/* four characters of token */) 351 260.48 T
(ManufacturerID) 153 250.48 T
(manufacturerID,) 261 250.48 T
(/* manufacturer ID of token */) 351 250.48 T
(DisplayType) 153 240.48 T
(displayType,) 261 240.48 T
(/* display type of token */) 351 240.48 T
(VisMonikerSearchFlags searchFlags,) 153 230.48 T
(/* flags for finding token */) 351 230.48 T
(TokenMonikerInfo *) 153 220.48 T
(tokenMonikerInfo\051;) 261 220.48 T
(/* DB group and item of token */) 358.2 220.48 T
0 10 Q
(This routine \336nds and retrieves a pointer to the speci\336c moniker for the) 180 202.82 T
-0.59 (speci\336ed token, given also the token\325) 180 191.32 P
-0.59 (s display type and other attributes. Pass) 345.43 191.32 P
(the following:) 180 179.82 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "415" 55
%%Page: "416" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(416) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(tokenChars) 180 641.33 T
0 F
(The four token characters that identify this moniker or) 243 641.33 T
(moniker list in the token database. Create this dword value) 243 630.33 T
(from the four characters with the macro) 243 619.33 T
0 9 Q
(TOKEN_CHARS) 430.77 619.33 T
0 10 Q
(.) 501.77 619.33 T
5 F
(manufacturerID) 180 601.33 T
0 F
-0.29 (The manufacturer) 243 590.33 P
0 9 Q
-0.26 (ID) 329.65 590.33 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 590.33 P
(for the token database entry) 243 579.33 T
(.) 373.02 579.33 T
5 F
(displayT) 180 561.33 T
(ype) 219.65 561.33 T
0 F
-0.79 (A value of) 243 550.33 P
6 F
-0.82 (DisplayT) 289.7 550.33 P
-0.82 (ype) 335.84 550.33 P
0 F
-0.79 ( indicating the size of the display \050used) 354.36 550.33 P
(to indicate small-screen devices, primarily\051.) 243 539.33 T
5 F
(searchFlags) 180 521.33 T
0 F
-0.15 (A record of) 243 510.33 P
6 F
-0.15 (V) 295.5 510.33 P
-0.15 (isMonikerSearchFlags) 302.65 510.33 P
0 F
-0.15 ( indicating what type of) 419.5 510.33 P
(moniker is being requested.) 243 499.33 T
5 F
(tokenDBItem) 180 481.33 T
0 F
-0.74 (A pointer to an empty) 243 470.33 P
6 F
-0.76 (T) 343.22 470.33 P
-0.76 (okenMonikerInfo) 349.52 470.33 P
0 F
-0.74 ( structure, in which) 440.25 470.33 P
(the token\325) 243 459.33 T
(s group and item numbers will be returned.) 288.38 459.33 T
-0.37 (The return value is an error \337ag: it will be) 180 441.33 P
5 F
-0.37 (true) 374.5 441.33 P
0 F
-0.37 ( if the item could not be found) 393.01 441.33 P
(in the token database,) 180 429.83 T
5 F
(false) 285.59 429.83 T
0 F
( otherwise.) 306.87 429.83 T
2 F
(Include:) 99 411.33 T
0 F
(token.h) 180 411.33 T
81 394.99 531 400 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 394.99 531 400 R
7 X
0 0 0 1 0 0 0 K
V
50 398.99 609.01 398.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 386.99 T
2 F
(T) 99 386.99 T
(okenCloseLocalT) 105.44 386.99 T
(okenDB\050\051) 203.92 386.99 T
4 10 Q
(void) 99 372.33 T
3 F
(TokenCloseLocalTokenDB\050\051) 153 372.33 T
0 F
(This routine closes the local token database.) 180 354.33 T
81 339.48 531 344.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 339.48 531 344.49 R
7 X
0 0 0 1 0 0 0 K
V
50 343.48 609.01 343.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 331.48 T
2 F
(T) 99 331.48 T
(okenListT) 105.44 331.48 T
(okens\050\051) 161.23 331.48 T
4 10 Q
(dword) 99 316.82 T
3 F
( TokenListTokens\050) 129 316.82 T
3 9 Q
(TokenRangeFlags) 153 306.48 T
(tokenRangeFlags,) 261 306.48 T
(word) 153 296.48 T
(headerSize,) 261 296.48 T
(ManufacturerID) 153 286.48 T
(manufacturerID\051) 261 286.48 T
0 10 Q
(This routine locates all the tokens that meet speci\336ed criteria, allocates a) 180 268.82 T
-0.67 (block, and copies the tokens to that block. The upper word of the return value) 180 257.32 P
-0.14 (is the number of matching tokens found; the lower word is the handle of the) 180 245.82 P
(block which was allocated.) 180 234.32 T
81 219.48 531 224.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 219.48 531 224.48 R
7 X
0 0 0 1 0 0 0 K
V
50 223.48 609.01 223.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 211.47 T
2 F
(T) 99 211.47 T
(okenOpenLocalT) 105.44 211.47 T
(okenDB\050\051) 201.91 211.47 T
4 10 Q
(word) 99 196.81 T
3 F
(TokenOpenLocalTokenDB\050\051) 153 196.81 T
0 F
(This routine opens the local token database. It returns zero on success, and) 180 178.81 T
(a) 180 167.31 T
6 F
(VMStatus) 188.34 167.31 T
0 F
( error code on failure.) 238.89 167.31 T
2 F
(Include:) 99 148.81 T
0 F
(token.h) 180 148.81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "416" 56
%%Page: "417" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(417) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(T) 99 634.99 T
(okenRemoveT) 105.44 634.99 T
(oken) 186.58 634.99 T
4 10 Q
(Boolean) 99 621.33 T
3 F
(TokenRemoveToken\050) 153 621.33 T
3 9 Q
(dword) 153 610.99 T
(tokenChars,) 261 610.99 T
(/* four characters of token */) 351 610.99 T
(ManufacturerID) 153 600.99 T
(manufacturerID,) 261 600.99 T
(/* manufacturer ID of token */) 351 600.99 T
0 10 Q
-0.27 (This routine removes the speci\336ed token and its moniker list from the token) 180 583.33 P
(database. It returns an error \337ag: if the token could not be found, the) 180 571.83 T
(returned \337ag is) 180 560.33 T
5 F
(true) 253.89 560.33 T
0 F
(; otherwise it is) 272.4 560.33 T
5 F
(false) 346.12 560.33 T
0 F
(. Pass the following:) 367.4 560.33 T
5 F
(tokenChars) 180 541.83 T
0 F
(The four token characters that identify this moniker or) 243 541.83 T
(moniker list in the token database. Create this dword value) 243 530.83 T
(from the four characters with the macro) 243 519.83 T
0 9 Q
(TOKEN_CHARS) 430.77 519.83 T
0 10 Q
(.) 501.77 519.83 T
5 F
(manufacturerID) 180 501.83 T
0 F
-0.29 (The manufacturer) 243 490.83 P
0 9 Q
-0.26 (ID) 329.65 490.83 P
0 10 Q
-0.29 ( number of the manufacturer responsible) 340.31 490.83 P
(for the token database entry) 243 479.83 T
(.) 373.02 479.83 T
2 F
(Include:) 99 461.83 T
0 F
(token.h) 180 461.83 T
81 445.48 531 450.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 445.48 531 450.49 R
7 X
0 0 0 1 0 0 0 K
V
50 449.48 609.01 449.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 437.48 T
2 F
(T) 99 437.48 T
(okenUnlockT) 105.44 437.48 T
(okenMoniker\050\051) 179.9 437.48 T
4 10 Q
(void) 99 423.82 T
3 F
(TokenUnlockTokenMoniker\050) 153 423.82 T
3 9 Q
(void * moniker\051;) 153 413.48 T
0 10 Q
(This routine unlocks a moniker that had been locked with) 180 395.82 T
6 F
-0.69 (T) 180 384.32 P
-0.69 (okenLockMoniker\050\051) 186.3 384.32 P
0 F
-0.67 (. Pass a pointer to the locked moniker) 289.08 384.32 P
-0.67 (, as returned by) 457.93 384.32 P
(the locking routine.) 180 372.82 T
2 F
(Include:) 99 354.32 T
0 F
(token.h) 180 354.32 T
81 337.98 531 342.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 337.98 531 342.98 R
7 X
0 0 0 1 0 0 0 K
V
50 341.98 609.01 341.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 329.98 T
2 F
(T) 99 329.98 T
(ypeFromFormatID\050\051) 105.44 329.98 T
4 10 Q
(word) 99 316.31 T
3 F
(TypeFromFormatID\050) 153 316.31 T
7 F
(id) 255 316.31 T
3 F
(\051;) 267 316.31 T
3 9 Q
(ClipboardItemFormatID id;) 153 305.98 T
0 10 Q
(This macro extracts the word-sized format) 180 288.31 T
0 9 Q
(ID) 378.52 288.31 T
0 10 Q
( \050of type) 389.18 288.31 T
6 F
(ClipboardItemFormat) 180 276.81 T
0 F
(\051 from a) 294.82 276.81 T
6 F
(ClipboardFormat) 333.71 276.81 T
6 9 Q
(ID) 424.46 276.81 T
0 10 Q
( argument.) 435.95 276.81 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "417" 57
%%Page: "418" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(418) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "418" 58
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 58
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Helvetica-Bold
%%+ Courier
%%+ Courier-Bold
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier-Oblique
%%EOF
