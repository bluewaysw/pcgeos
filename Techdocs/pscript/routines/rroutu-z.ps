%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /NewCenturySchlbk-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "419" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(419) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 R
7 X
0 0 0 1 0 0 0 K
V
50 624.99 609.01 624.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 612.99 T
2 F
(UserAddAutoExec\050\051) 99 612.99 T
3 10 Q
(void) 99 599.33 T
4 F
(UserAddAutoExec\050) 153 599.33 T
4 9 Q
(const char *) 153 588.99 T
(appName\051;) 261 588.99 T
0 10 Q
(This routine adds an application to the list of those, like W) 180 571.33 T
(elcome, that are) 450.61 571.33 T
(automatically started by the) 180 559.83 T
0 9 Q
(UI) 313.92 559.83 T
0 10 Q
( when it loads. It is passed one argument:) 324.92 559.83 T
5 F
(appName) 180 541.33 T
0 F
(This is a pointer to a null-terminated string containing the) 243 541.33 T
(name of the application. The application must be in) 243 530.33 T
0 9 Q
(SP_APPLICA) 243 519.33 T
(TION) 299.84 519.33 T
0 10 Q
( or) 323.85 519.33 T
0 9 Q
(SP_SYS_APPLICA) 338.85 519.33 T
(TION) 417.87 519.33 T
0 10 Q
(.) 441.87 519.33 T
2 F
(Include:) 99 501.33 T
0 F
(ui.goh) 180 501.33 T
81 484.98 531 489.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 484.98 531 489.99 R
7 X
0 0 0 1 0 0 0 K
V
50 488.98 609.01 488.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 476.98 T
2 F
(UserCreateDialog\050\051) 99 476.98 T
3 10 Q
(optr) 99 463.32 T
4 F
(UserCreateDialog\050) 153 463.32 T
4 9 Q
(optr) 153 452.98 T
(dialogBox\051;) 189 452.98 T
0 10 Q
(This routine duplicates a template dialog box, attaches the dialog box to an) 180 435.32 T
-0.21 (application object, and sets it fully) 180 423.82 P
0 9 Q
-0.19 (GS_USABLE) 340.27 423.82 P
0 10 Q
-0.21 ( so that it may be called with) 395.94 423.82 P
6 F
-0.5 (UserDoDialog\050\051) 180 412.32 P
0 F
-0.48 (. Dialog boxes created in such a manner should be removed) 260.36 412.32 P
(and destroyed with) 180 400.82 T
6 F
(UserDestroyDialog\050\051) 271.49 400.82 T
0 F
( when no longer needed.) 378.15 400.82 T
5 F
(dialogBox) 180 382.32 T
0 F
(Optr to template dialog box \050within a template object block\051.) 243 382.32 T
(The block must be sharable, read-only and the top) 243 371.32 T
-0.61 (GenInteraction called with this routine must not be linked into) 243 360.32 P
(any generic tree. The optr returned is a created, fully-usable) 243 349.32 T
(dialog box.) 243 338.32 T
2 F
(See Also:) 99 320.32 T
0 F
(UserDestroyDialog\050\051) 180 320.32 T
81 303.98 531 308.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 303.98 531 308.98 R
7 X
0 0 0 1 0 0 0 K
V
50 307.98 609.01 307.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 295.98 T
2 F
(UserCreateInkDestinationInfo\050\051) 99 295.98 T
3 10 Q
(MemHandle) 99 282.31 T
4 F
(UserCreateInkDestinationInfo\050) 159 282.31 T
4 9 Q
(optr) 153 271.98 T
(dest,) 261 271.98 T
(GStateHandle) 153 261.98 T
(gs,) 261 261.98 T
(word) 153 251.98 T
(brushSize,) 261 251.98 T
(GestureCallback) 153 241.98 T
(*callback\051;) 261 241.98 T
0 10 Q
(This routine creates an) 180 224.31 T
6 F
(InkDestinationInfo) 290.01 224.31 T
0 F
( structure to be returned with) 390.17 224.31 T
0 9 Q
(MSG_MET) 180 212.81 T
(A_QUER) 226.17 212.81 T
(Y_IF_PRESS_IS_INK) 264.17 212.81 T
0 10 Q
(. The callback routine must be) 355.84 212.81 T
(declared _pascal.) 180 201.31 T
2 F
(Include:) 99 182.81 T
0 F
(ui.goh) 180 182.81 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "419" 1
%%Page: "420" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(420) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Structures:) 99 641.33 T
4 9 Q
(typedef Boolean _pascal GestureCallback \050) 153 631 T
(Point *arrayOfInkPoints,) 189 621 T
(word numPoints,) 189 611 T
(word numStrokes\051;) 189 601 T
81 586.99 531 592 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 586.99 531 592 R
7 X
0 0 0 1 0 0 0 K
V
50 590.99 609.01 590.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 578.99 T
2 F
(UserDestroyDialog\050\051) 99 578.99 T
3 10 Q
(void) 99 565.33 T
4 F
(UserDestroyDialog\050) 153 565.33 T
4 9 Q
(optr) 153 554.99 T
(dialogBox\051;) 189 554.99 T
0 10 Q
(This routine destroys the passed dialog box, usually created with) 180 537.33 T
6 F
-0.5 (UserCreateDialog\050\051) 180 525.83 P
0 F
-0.49 (. This routine may only be used to destroy dialog boxes) 280.74 525.83 P
(occupying a single block; the block must also hold nothing other than the) 180 514.33 T
-0.22 (dialog box to be destroyed. It is for this reason that it is wise to only use this) 180 502.83 P
(routine to destroy dialogs created with) 180 491.33 T
6 F
(UserCreateDialog\050\051) 360.94 491.33 T
0 F
(.) 461.68 491.33 T
2 F
(See Also:) 99 472.83 T
0 F
(UserCreateDialog\050\051) 180 472.83 T
81 456.48 531 461.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 456.48 531 461.49 R
7 X
0 0 0 1 0 0 0 K
V
50 460.48 609.01 460.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 448.48 T
2 F
(UserDoDialog\050\051) 99 448.48 T
3 10 Q
(InteractionCommand) 99 434.82 T
4 F
(UserDoDialog\050) 213 434.82 T
4 9 Q
(optr) 153 424.48 T
(dialogBox\051;) 189 424.48 T
6 10 Q
(UserDoDialog\050\051) 180 406.82 T
0 F
( brings a pre-instantiated dialog box on-screen, blocking) 260.36 406.82 T
(the calling thread until the user responds to the dialog. Y) 180 395.32 T
(ou must pass the) 443.92 395.32 T
(optr of a) 180 383.82 T
0 9 Q
(GIV_DIALOG) 221.3 383.82 T
0 10 Q
( Interaction that is set both) 280.13 383.82 T
0 9 Q
(GIA_INITIA) 180 372.32 T
(TED_VIA_USER_DO_DIALOG) 231.99 372.32 T
0 10 Q
( and) 363.33 372.32 T
0 9 Q
(GIA_MODAL) 386.3 372.32 T
0 10 Q
(.) 442.96 372.32 T
-0.01 (This routine returns the) 180 353.82 P
6 F
-0.01 (InteractionCommand) 294.95 353.82 P
0 F
-0.01 ( of the particular response) 406.8 353.82 P
(trigger selected by the user) 180 342.32 T
(. This) 305 342.32 T
6 F
(InteractionCommand) 333.9 342.32 T
0 F
( may be either a) 445.75 342.32 T
(prede\336ned type \050such as) 180 330.82 T
0 9 Q
(IC_YES) 294.81 330.82 T
0 10 Q
(\051 or a custom one de\336ned using) 327.98 330.82 T
0 9 Q
(IC_CUSTOM_ST) 180 319.32 T
(ART) 251.34 319.32 T
0 10 Q
(.) 269.42 319.32 T
(The pre-de\336ned) 180 300.82 T
6 F
(InteractionCommand) 255.55 300.82 T
0 F
(s are:) 367.4 300.82 T
4 9 Q
(IC_NULL) 216 285.98 T
(IC_DISMISS) 216 275.98 T
(IC_APPLY) 216 265.98 T
(IC_RESET) 216 255.98 T
(IC_OK) 216 245.98 T
(IC_YES) 216 235.98 T
(IC_NO) 216 225.98 T
(IC_STOP) 216 215.98 T
(IC_EXIT) 216 205.98 T
(IC_HELP) 216 195.98 T
(IC_INTERACTION_COMPLETE) 216 185.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "420" 2
%%Page: "421" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(421) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(This routine may return) 180 641.33 T
0 9 Q
(IC_NULL) 295.19 641.33 T
0 10 Q
( for those cases in which a system) 336.53 641.33 T
(shutdown causes the dialog to be dismissed before the user has entered a) 180 629.83 T
(response.) 180 618.33 T
2 F
(W) 99 599.83 T
(arnings:) 108.07 599.83 T
0 F
(This routine blocks the calling thread until the dialog box receives a) 180 599.83 T
0 9 Q
(MSG_GEN_GUP_INTERACTION_COMMAND) 180 586.83 T
0 10 Q
(. Since the application thread is) 378.67 586.83 T
(blocked, it cannot be responsible for sending this message or for handling) 180 573.83 T
(messages from the response triggers.) 180 560.83 T
2 F
(See Also:) 99 540.83 T
6 F
(UserStandardDialog\050\051) 180 540.83 T
0 F
(,) 294.45 540.83 T
6 F
(UserStandardDialogOptr\050\051) 300.01 540.83 T
81 524.49 531 529.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 524.49 531 529.5 R
7 X
0 0 0 1 0 0 0 K
V
50 528.49 609.01 528.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 516.49 T
2 F
(UserGetInterfaceLevel\050\051) 99 516.49 T
3 10 Q
(UIInterfaceLevel) 99 502.83 T
4 F
( UserGetInterfaceLevel\050void\051) 195 502.83 T
0 F
(This routine returns the current) 180 484.83 T
6 F
(UIInterfaceLevel) 332.21 484.83 T
0 F
(. This is a word-sized) 421.09 484.83 T
(enumerated type. It has the following values:) 180 473.33 T
4 9 Q
(UIIL_NOVICE) 216 458.49 T
(UIIL_BEGINNING_INTERMEDIATE) 216 448.49 T
(UIIL_ADVANCED_INTERMEDIATE) 216 438.49 T
(UIIL_ADVANCED) 216 428.49 T
(UIIL_GURU) 216 418.49 T
2 10 Q
(Include:) 99 400.83 T
0 F
(ui.goh) 180 400.83 T
81 384.48 531 389.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 384.48 531 389.49 R
7 X
0 0 0 1 0 0 0 K
V
50 388.48 609.01 388.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 376.48 T
2 F
(UserLoadApplication) 99 376.48 T
4 10 Q
(extern GeodeHandle UserLoadApplication\050) 99 361.82 T
4 9 Q
(AppLaunchFlags) 153 351.48 T
(alf,) 261 351.48 T
(Message) 153 341.48 T
(attachMethod,) 261 341.48 T
(MemHandle) 153 331.48 T
(appLaunchBlock,) 261 331.48 T
(char) 153 321.48 T
(*filename,) 261 321.48 T
(StandardPath) 153 311.48 T
(sPath,) 261 311.48 T
(GeodeLoadError) 153 301.48 T
(*err\051;) 261 301.48 T
0 10 Q
(Loads an application.  Changes to standard application directory before) 180 283.82 T
(attempting GeodeLoad on \336lename passed. Stores the \336lename being) 180 272.32 T
(launched into the AppLaunchBlock, so that information needed to restore) 180 260.82 T
(this application instance will be around later if needed.) 180 249.32 T
81 234.48 531 239.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 234.48 531 239.48 R
7 X
0 0 0 1 0 0 0 K
V
50 238.48 609.01 238.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 226.47 T
2 F
(UserRemoveAutoExec\050\051) 99 226.47 T
3 10 Q
(void) 99 212.81 T
4 F
(UserRemoveAutoExec\050) 153 212.81 T
4 9 Q
(const char *) 153 202.47 T
(appName\051;) 261 202.47 T
0 10 Q
-0.06 (This routine removes an application from the list of those to be launched on) 180 184.81 P
(start-up. It is passed one argument:) 180 173.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "421" 3
%%Page: "422" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(422) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
5 10 Q
0 X
(appName) 180 641.33 T
0 F
(This is a pointer to a null-terminated string containing the) 243 641.33 T
(name of the application.) 243 630.33 T
2 F
(Include:) 99 612.33 T
0 F
(ui.goh) 180 612.33 T
81 595.99 531 601 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 595.99 531 601 R
7 X
0 0 0 1 0 0 0 K
V
50 599.99 609.01 599.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 587.99 T
2 F
(UserStandardDialog\050\051) 99 587.99 T
3 10 Q
(word) 99 574.33 T
4 F
(UserStandardDialog\050) 153 574.33 T
4 9 Q
(char *) 153 563.99 T
(helpContext,) 261 563.99 T
(char *) 153 553.99 T
(customTriggers,) 261 553.99 T
(char *) 153 543.99 T
(arg2,) 261 543.99 T
(char *) 153 533.99 T
(arg1,) 261 533.99 T
(char *) 153 523.99 T
(string,) 261 523.99 T
(CustomDialogBoxFlags) 153 513.99 T
(dialogFlags\051;) 261 513.99 T
6 10 Q
(UserStandardDialog\050\051) 180 496.33 T
0 F
( creates and displays either a custom dialog box or) 294.45 496.33 T
(one of several pre-de\336ned standard dialog boxes.) 180 484.83 T
(Most often, you will use this routine to create a custom dialog box that) 180 466.33 T
(conforms to a standardized dialog. In this case, pass the) 180 454.83 T
6 F
-0.14 (CustomDialogT) 180 443.33 P
-0.14 (ype) 260.21 443.33 P
0 F
-0.13 ( of) 278.73 443.33 P
0 9 Q
-0.12 (SDBT_CUSTOM) 292.35 443.33 P
0 10 Q
-0.13 ( as the routine\325) 363.03 443.33 P
-0.13 (s \336rst argument. Y) 431.53 443.33 P
-0.13 (ou) 517.24 443.33 P
(must then supply other parameters to create the custom dialog box.) 180 431.83 T
-0.37 (If instead you wish to use one of the pre-de\336ned) 180 413.33 P
6 F
-0.39 (CustomDialogT) 399.97 413.33 P
-0.39 (ype) 480.18 413.33 P
0 F
-0.37 (types,) 501.18 413.33 P
-0.59 (you should pass that type as the \336rst argument to this routine. Some of these) 180 401.83 P
(standard types require you to pass string parameters. Other arguments) 180 390.33 T
(should be passed as null.) 180 378.83 T
(For custom dialog boxes you must pass a) 180 360.33 T
6 F
(CustomDialogT) 370.96 360.33 T
(ype) 451.17 360.33 T
0 F
(\050) 180 348.83 T
0 9 Q
(CDT_W) 183.33 348.83 T
(ARNING) 215.33 348.83 T
0 10 Q
(,) 253.66 348.83 T
0 9 Q
(CDT_NOTIFICA) 259.23 348.83 T
(TION) 329.4 348.83 T
0 10 Q
(,) 353.4 348.83 T
0 9 Q
(CDT_QUESTION) 358.96 348.83 T
0 10 Q
(, or) 433.47 348.83 T
0 9 Q
(CDT_ERROR) 451.25 348.83 T
0 10 Q
(\051.) 508.25 348.83 T
(This chooses the proper icon glyph to display within the dialog box. \050For) 180 337.33 T
(example, a) 180 325.83 T
0 9 Q
(CDT_W) 232.61 325.83 T
(ARNING) 264.61 325.83 T
0 10 Q
( dialog might contain a large exclamation-point) 302.95 325.83 T
(glyph.\051 Make sure that you use) 180 314.33 T
0 9 Q
(CDBF_DIALOG_TYPE_OFFSET) 326.31 314.33 T
0 10 Q
( to pass this) 465 314.33 T
(value.) 180 302.83 T
-0.02 (Y) 180 284.33 P
-0.02 (ou should also pass a valid) 185.93 284.33 P
6 F
-0.02 (GenInteractionT) 311.79 284.33 P
-0.02 (ype) 398.48 284.33 P
0 F
-0.02 (. In most cases, this will) 417 284.33 P
(be either) 180 272.83 T
0 9 Q
(GIT_NOTIFICA) 223.71 272.83 T
(TION) 291.05 272.83 T
0 10 Q
(,) 315.05 272.83 T
0 9 Q
(GIT_AFFIRMA) 320.61 272.83 T
(TION) 384.94 272.83 T
0 10 Q
(, or) 408.95 272.83 T
0 9 Q
(GIT_MUL) 180 261.33 T
(TIPLE_RESPONSE) 222.51 261.33 T
0 10 Q
(. Make sure that you use) 306.35 261.33 T
0 9 Q
(CDBF_INTERACTION_TYPE_OFFSET) 180 249.83 T
0 10 Q
( to pass this value.) 348.52 249.83 T
-0.65 (Also pass the routine a string to display to the user) 180 231.33 P
-0.65 (. This string may be either) 409.3 231.33 P
(text or graphics based.) 180 219.83 T
-0.44 (If the) 180 201.33 P
6 F
-0.45 (CustomDialogT) 207.09 201.33 P
-0.45 (ype) 287.3 201.33 P
0 F
-0.44 ( is) 305.82 201.33 P
0 9 Q
-0.39 (GIT_MUL) 318.29 201.33 P
-0.39 (TIPLE_RESPONSE) 360.79 201.33 P
0 10 Q
-0.44 (, you must also set) 444.64 201.33 P
(up a Response T) 180 189.83 T
(rigger T) 255.13 189.83 T
(able with several trigger parameters.) 291.73 189.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "422" 4
%%Page: "423" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(423) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(UserStandardDialogOptr\050\051) 99 634.99 T
3 10 Q
(word) 99 621.33 T
4 F
(UserStandardDialogOptr\050) 153 621.33 T
4 9 Q
(char) 153 610.99 T
(*helpContext,) 261 610.99 T
(optr) 153 600.99 T
(customTriggers,) 261 600.99 T
(optr) 153 590.99 T
(arg2,) 261 590.99 T
(optr) 153 580.99 T
(arg1,) 261 580.99 T
(optr) 153 570.99 T
(string) 261 570.99 T
(CustomDialogBoxFlags) 153 560.99 T
(dialogFlags\051;) 261 560.99 T
6 10 Q
(UserStandardDialogOptr\050\051) 180 543.33 T
0 F
( performs the same functionality as) 318.9 543.33 T
6 F
-0.05 (UserStandardDialog\050\051) 180 531.83 P
0 F
-0.05 (except that optrs to strings and string parameters) 297.27 531.83 P
(are passed instead of fptrs. This is useful for localized strings in resource) 180 520.33 T
(blocks.) 180 508.83 T
2 F
(See Also:) 99 490.33 T
6 F
(UserStandardDialog\050\051) 180 490.33 T
0 F
(,) 294.45 490.33 T
6 F
(UserDoDialog\050\051) 300.01 490.33 T
81 473.98 531 478.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 473.98 531 478.99 R
7 X
0 0 0 1 0 0 0 K
V
50 477.98 609.01 477.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 465.98 T
2 F
(UserStandardSound\050\051) 99 465.98 T
3 10 Q
(void) 99 451.32 T
4 F
(UserStandardSound\050) 153 451.32 T
4 9 Q
(StandardSoundType) 153 440.98 T
(type,) 261 440.98 T
(...\051;) 153 430.98 T
0 10 Q
(This routine plays a simple sequence of notes. It can be used to play a) 180 413.32 T
(standard system sound, a single custom tone, or a sequence of tones.) 180 401.82 T
(The routine takes a variable number of arguments. The \336rst argument is a) 180 383.32 T
(member of the) 180 371.82 T
6 F
(StandardSoundT) 249.45 371.82 T
(ype) 337.83 371.82 T
0 F
( enumerated type. This argument) 356.35 371.82 T
(speci\336es what kind of tone or tones will be played. Depending on the) 180 360.32 T
6 F
(StandardSoundT) 180 348.82 T
(ype) 268.38 348.82 T
0 F
( passed, zero, one, or two additional arguments may) 286.9 348.82 T
(be needed.) 180 337.32 T
6 F
(StandardSoundT) 231.49 337.32 T
(ype) 319.87 337.32 T
0 F
( contains the following members:) 338.39 337.32 T
0 9 Q
(SST_ERROR) 180 318.82 T
0 10 Q
-0.05 (This is the sound played when an \322Error\323 dialog comes up. No) 243 318.82 P
(further arguments are needed.) 243 307.82 T
0 9 Q
(SST_W) 180 289.82 T
(ARNING) 209.84 289.82 T
0 10 Q
(This is a general warning sound. No further arguments are) 243 278.82 T
(needed.) 243 267.82 T
0 9 Q
(SST_NOTIFY) 180 249.82 T
0 10 Q
-0.26 (This is a general noti\336cation sound. No further arguments are) 243 249.82 P
(needed.) 243 238.82 T
0 9 Q
(SST_NO_INPUT) 180 220.82 T
0 10 Q
(This is the sound played when a user) 243 209.82 T
(\325) 415.24 209.82 T
(s input is not going) 416.91 209.82 T
-0.82 (anywhere \050e.g. when he clicks the mouse outside a modal dialog) 243 198.82 P
(box\051.) 243 187.82 T
0 9 Q
(SST_KEY_CLICK) 180 169.82 T
0 10 Q
(This is the sound produced when the keyboard is pressed, or) 243 158.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "423" 5
%%Page: "424" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(424) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(when the user clicks on a \337oating keyboard. No further) 243 641.33 T
(arguments are required.) 243 630.33 T
0 9 Q
(SST_CUSTOM_SOUND) 180 612.33 T
0 10 Q
(Play a custom sampled sound. This requires one more) 243 601.33 T
(argument, the memory handle of the sound to be played.) 243 590.33 T
0 9 Q
(SST_CUSTOM_BUFFER) 180 572.33 T
0 10 Q
-0.15 (Play a custom buffer of instrumental sound. This requires one) 243 561.33 P
(further argument, a pointer to the memory block containing) 243 550.33 T
-0.31 (the sound buffer) 243 539.33 P
-0.31 (. Note that the \322tempo\323 value used to play this) 317.56 539.33 P
(buffer will be one tick per thirty-second note, probably much) 243 528.33 T
(faster than you would otherwise expect.) 243 517.33 T
0 9 Q
(SST_CUSTOM_NOTE) 180 499.33 T
0 10 Q
(By passing this argument, you can have a single custom note) 243 488.33 T
-0.07 (played. Y) 243 477.33 P
-0.07 (ou must provide one further argument, the handle of) 284.98 477.33 P
(the note \050such as returned by) 243 466.33 T
6 F
(SoundAllocNote\050\051) 381.15 466.33 T
0 F
(\051.) 472.82 466.33 T
81 451.99 531 457 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 451.99 531 457 R
7 X
0 0 0 1 0 0 0 K
V
50 455.99 609.01 455.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 443.99 T
2 F
(UtilAsciiT) 99 443.99 T
(oHex32\050\051) 153.46 443.99 T
3 10 Q
(Boolean) 99 430.33 T
4 F
(UtilAsciiToHex32\050) 153 430.33 T
4 9 Q
(const char *) 153 419.99 T
(string,) 261 419.99 T
(dword *) 153 409.99 T
(value\051;) 261 409.99 T
0 10 Q
(This routine converts a null-terminated) 180 392.33 T
0 9 Q
(ASCII) 366.12 392.33 T
0 10 Q
( string into a 32-bit integer) 392.11 392.33 T
(.) 516.58 392.33 T
(The string may begin with a hyphen, indicating a negative number) 180 380.83 T
(. Aside) 488.94 380.83 T
(from that, the string may contain nothing but numerals until the null) 180 369.33 T
(termination. It may not contain whitespace.) 180 357.83 T
-0.63 (If the routine is successful, it will return) 180 339.33 P
5 F
-0.63 (false) 364.58 339.33 P
0 F
-0.63 ( and write an equivalent signed) 385.86 339.33 P
-0.5 (long integer to) 180 327.83 P
5 F
-0.5 (*value) 248.32 327.83 P
0 F
-0.5 (. If it fails, it will return) 278.13 327.83 P
5 F
-0.5 (true) 388.18 327.83 P
0 F
-0.5 ( and write a member of the) 406.69 327.83 P
6 F
(UtilAsciiT) 180 316.33 T
(oHexError) 231.66 316.33 T
0 F
( enumerated type to) 287.59 316.33 T
5 F
(*value) 383.34 316.33 T
0 F
(. This type contains the) 413.15 316.33 T
(following members:) 180 304.83 T
0 9 Q
(UA) 180 286.33 T
(TH_NON_NUMERIC_DIGIT_IN_STRING) 193.34 286.33 T
0 10 Q
(This string contained a non-numeric character before the) 243 275.33 T
(trailing null \050other than the allowed leading hyphen\051.) 243 264.33 T
0 9 Q
(UA) 180 246.33 T
(TH_CONVERT_OVERFLOW) 193.34 246.33 T
0 10 Q
(The string speci\336ed a number to large to be expressed as a) 243 235.33 T
(signed 32-bit integer) 243 224.33 T
(.) 337.83 224.33 T
2 F
(Include:) 99 206.33 T
0 F
(system.h) 180 206.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "424" 6
%%Page: "425" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(425) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(UtilHex32T) 99 634.99 T
(oAscii\050\051) 160.13 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(UtilHex32ToAscii\050) 153 620.33 T
4 9 Q
(char *) 153 609.99 T
(buffer,) 261 609.99 T
(sdword) 153 599.99 T
(value,) 261 599.99 T
(UtilHexToAsciiFlags) 153 589.99 T
(flags\051;) 261 589.99 T
0 10 Q
(This routine converts a 32-bit unsigned integer to its) 180 572.33 T
0 9 Q
(ASCII) 426.51 572.33 T
0 10 Q
( representation) 452.5 572.33 T
(and writes it to the speci\336ed buffer) 180 560.83 T
(. It returns the length of the string \050not) 340.75 560.83 T
(counting the nulll termination, if any\051. The routine is passed the following) 180 549.33 T
(arguments:) 180 537.83 T
5 F
(buffer) 180 519.33 T
0 F
-0.21 (This is a pointer to a character buffer) 243 519.33 P
-0.21 (. The buffer must be long) 413.56 519.33 P
-0.02 (enough to accommodate the largest string; that is, there must) 243 508.33 P
-0.3 (be ten bytes for the characters, plus one for the trailing null \050if) 243 497.33 P
(necessary\051.) 243 486.33 T
5 F
(value) 180 468.33 T
0 F
(This is the value to convert to) 243 468.33 T
0 9 Q
(ASCII) 383.02 468.33 T
0 10 Q
(.) 409.01 468.33 T
5 F
(\337ags) 180 450.33 T
0 F
(This is a record of) 243 450.33 T
6 F
(UtilHexT) 328.19 450.33 T
(oAscii) 374.85 450.33 T
0 F
( \337ags. The following \337ags) 406.51 450.33 T
(are available:) 243 439.33 T
0 9 Q
(UHT) 180 421.33 T
(AF_INCLUDE_LEADING_ZEROS) 200.34 421.33 T
0 10 Q
(Pad the string with leading zeros to a length of ten total) 243 410.33 T
(characters.) 243 399.33 T
0 9 Q
(UHT) 180 381.33 T
(AF_NULL_TERMINA) 200.34 381.33 T
(TE) 293.01 381.33 T
0 10 Q
-0.17 (Add a null to the end of the string. If this \337ag is set, the buffer) 243 370.33 P
(must be at least 1) 243 359.33 T
(1 bytes long. If it is clear) 324.89 359.33 T
(, the buffer may be) 438.06 359.33 T
(ten bytes long.) 243 348.33 T
2 F
(Include:) 99 330.33 T
0 F
(system.h) 180 330.33 T
81 313.98 531 318.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 313.98 531 318.99 R
7 X
0 0 0 1 0 0 0 K
V
50 317.98 609.01 317.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 305.98 T
2 F
(V) 99 305.98 T
(arDataFlagsPtr\050\051) 106.34 305.98 T
3 10 Q
(VarDataFlags) 99 292.32 T
4 F
(VarDataFlagsPtr\050) 177 292.32 T
4 9 Q
(void *) 153 281.98 T
(ptr\051;) 189 281.98 T
0 10 Q
(This macro fetches the \337ags of a variable data type when given a pointer to) 180 264.32 T
(the extra data for the type. The \337ags are stored in a) 180 252.82 T
6 F
(V) 421.89 252.82 T
(arDataFlags) 428.56 252.82 T
0 F
( record.) 492.63 252.82 T
(Only the \337ags) 180 241.32 T
0 9 Q
(VDF_EXTRA_DA) 247.42 241.32 T
(T) 320.76 241.32 T
(A) 326.27 241.32 T
0 10 Q
( and/or) 332.77 241.32 T
0 9 Q
(VDF_SA) 367.96 241.32 T
(VE_TO_ST) 403.13 241.32 T
(A) 449.31 241.32 T
(TE) 455.31 241.32 T
0 10 Q
( will be) 467.81 241.32 T
(returned.) 180 229.82 T
2 F
(Include:) 99 211.32 T
0 F
(object.h) 180 211.32 T
2 F
(W) 99 191.32 T
(arnings:) 108.07 191.32 T
0 F
(Y) 180 191.32 T
(ou must pass a pointer to the) 185.93 191.32 T
5 F
(beginning) 323.36 191.32 T
0 F
( of the vardata entry\325) 369.09 191.32 T
(s extra data) 466.14 191.32 T
(space.) 180 178.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "425" 7
%%Page: "426" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(426) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(V) 99 634.99 T
(arDataSizePtr\050\051) 106.34 634.99 T
3 10 Q
(word) 99 621.33 T
4 F
(VarDataSizePtr\050) 153 621.33 T
4 9 Q
(void *) 153 610.99 T
(ptr\051;) 189 610.99 T
0 10 Q
(This macro fetches the size of a variable data entry when given a pointer to) 180 593.33 T
(the extra data for the type.) 180 581.83 T
2 F
(Include:) 99 563.33 T
0 F
(object.h) 180 563.33 T
2 F
(W) 99 543.33 T
(arnings:) 108.07 543.33 T
0 F
(Y) 180 543.33 T
(ou must pass a pointer to the) 185.93 543.33 T
5 F
(beginning) 323.36 543.33 T
0 F
( of the vardata entry\325) 369.09 543.33 T
(s extra data) 466.14 543.33 T
(space.) 180 530.33 T
81 513.98 531 518.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 513.98 531 518.99 R
7 X
0 0 0 1 0 0 0 K
V
50 517.98 609.01 517.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 505.98 T
2 F
(V) 99 505.98 T
(arDataT) 106.34 505.98 T
(ypePtr\050\051) 150.13 505.98 T
3 10 Q
(word) 99 492.32 T
4 F
(VarDataTypePtr\050) 153 492.32 T
4 9 Q
(void *) 153 481.98 T
(ptr\051;) 189 481.98 T
0 10 Q
-0.13 (This macro fetches the type of a variable data entry when given a pointer to) 180 464.32 P
-0.38 (the extra data of the entry) 180 452.82 P
-0.38 (. The type is stored in a) 299.04 452.82 P
6 F
-0.39 (V) 407.7 452.82 P
-0.39 (arDataFlags) 414.37 452.82 P
0 F
-0.38 ( record. All) 478.44 452.82 P
(\337ags outside the) 180 441.32 T
0 9 Q
(VDF_TYPE) 258.53 441.32 T
0 10 Q
( section will be cleared.) 307.37 441.32 T
2 F
(Include:) 99 422.82 T
0 F
(object.h) 180 422.82 T
2 F
(W) 99 402.82 T
(arnings:) 108.07 402.82 T
0 F
(Y) 180 402.82 T
(ou must pass a pointer to the) 185.93 402.82 T
5 F
(beginning) 323.36 402.82 T
0 F
( of the vardata entry\325) 369.09 402.82 T
(s extra data) 466.14 402.82 T
(space.) 180 389.82 T
81 373.48 531 378.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 373.48 531 378.48 R
7 X
0 0 0 1 0 0 0 K
V
50 377.48 609.01 377.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 365.48 T
2 F
(V) 99 365.48 T
(isObjectHandlesInkReply\050\051) 106.79 365.48 T
3 10 Q
(void) 99 350.81 T
4 F
(VisObjectHandlesInkReply\050void\051;) 153 350.81 T
81 336.47 531 341.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 336.47 531 341.48 R
7 X
0 0 0 1 0 0 0 K
V
50 340.47 609.01 340.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 328.47 T
2 F
(V) 99 328.47 T
(isT) 106.79 328.47 T
(extGraphicCompressGraphic\050\051) 123.24 328.47 T
4 10 Q
(extern VMChain VisTextGraphicCompressGraphic\050) 99 313.8 T
4 9 Q
(VisTextGraphic) 153 303.47 T
(*graphic,) 261 303.47 T
(FileHandle) 153 293.47 T
(sourceFile,) 261 293.47 T
(FileHandle) 153 283.47 T
(destFile,) 261 283.47 T
(BMFormat format,) 153 273.47 T
(word xRes,) 153 263.47 T
(word yRes\051;) 153 253.47 T
0 10 Q
(This routine compresses the bitmaps in a V) 180 235.8 T
(isT) 380.14 235.8 T
(extGraphic.) 393.67 235.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "426" 8
%%Page: "427" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(427) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMAlloc\050\051) 99 634.99 T
3 10 Q
(VMBlockHandle) 99 620.33 T
4 F
(VMAlloc\050) 183 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(word) 153 599.99 T
(size,) 261 599.99 T
(/* Size of a file in bytes */) 315 599.99 T
(word) 153 589.99 T
(userID\051;) 261 589.99 T
(/* ID # to associate with block */) 315 589.99 T
0 10 Q
(This routine creates a) 180 572.33 T
0 9 Q
(VM) 283.9 572.33 T
0 10 Q
( block. The block is not initialized. Before you use) 298.89 572.33 T
(the block, you must lock it with) 180 560.83 T
6 F
(VMLock\050\051) 327.81 560.83 T
0 F
(. If you pass a size of zero bytes,) 378.55 560.83 T
(the) 180 549.33 T
0 9 Q
(VM) 197.78 549.33 T
0 10 Q
( block will be given an entry in the) 212.77 549.33 T
0 9 Q
(VM) 375.4 549.33 T
0 10 Q
( handle table, but no space in) 390.4 549.33 T
(memory or in the \336le will be used; a global memory block will have to be) 180 537.83 T
(assigned with) 180 526.33 T
6 F
(VMAttach\050\051) 246.68 526.33 T
0 F
(.) 306.49 526.33 T
2 F
(Include:) 99 507.83 T
0 F
(vm.h) 180 507.83 T
2 F
(See Also:) 99 487.83 T
0 F
(VMAllocLMem\050\051, VMAttach\050\051) 180 487.83 T
81 471.48 531 476.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.48 531 476.49 R
7 X
0 0 0 1 0 0 0 K
V
50 475.48 609.01 475.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 463.48 T
2 F
(VMAllocLMem\050\051) 99 463.48 T
3 10 Q
(VMBlockHandle) 99 448.82 T
4 F
(VMAllocLmem\050) 183 448.82 T
4 9 Q
(VMFileHandle) 153 438.48 T
(file,) 261 438.48 T
(LMemType) 153 428.48 T
(ltype,) 261 428.48 T
(/* Type of LMem heap to create */) 333 428.48 T
(word) 153 418.48 T
(headerSize\051;) 261 418.48 T
(/* Size to leave for LMem header...) 333 418.48 T
( * pass zero for standard header */) 315 408.48 T
0 10 Q
-0.53 (This routine allocates a) 180 390.82 P
0 9 Q
-0.48 (VM) 289.2 390.82 P
0 10 Q
-0.53 ( block and initializes it to contain an LMem heap.) 304.2 390.82 P
(Y) 180 379.32 T
(ou must pass the type of LMem heap to create. If you want a \336xed data) 185.93 379.32 T
(space, you must pass the total size to leave for a header \050including the) 180 367.82 T
6 F
(LMemBlockHeader) 180 356.32 T
0 F
(\051; otherwise, pass a zero header size, indicating that) 280.19 356.32 T
(only enough space for an) 180 344.82 T
6 F
(LMemBlockHeader) 297.04 344.82 T
0 F
( should be left. Y) 397.23 344.82 T
(ou do not) 473.73 344.82 T
(need to specify a block size, since the heap will automatically expand to) 180 333.32 T
(accommodate chunk allocations.) 180 321.82 T
-0.39 (The block\325) 180 303.32 P
-0.39 (s user) 225.92 303.32 P
0 9 Q
-0.35 (ID) 255.51 303.32 P
0 10 Q
-0.39 ( number is unde\336ned. Y) 266.18 303.32 P
-0.39 (ou will need to lock the block with) 374.26 303.32 P
6 F
(VMLock\050\051) 180 291.82 T
0 F
( before accessing the chunks.) 230.74 291.82 T
2 F
(Include:) 99 273.32 T
0 F
(vm.h) 180 273.32 T
2 F
(Be Sure T) 99 253.32 T
(o:) 144.94 253.32 T
0 F
-0.78 (When you access chunks, remember to pass the block\325) 180 253.32 P
-0.78 (s) 421.72 253.32 P
5 F
-0.78 (global memory) 428.35 253.32 P
0 F
-0.78 ( handle) 495.33 253.32 P
(to the LMem routines \050not the block\325) 180 240.32 T
(s) 347.98 240.32 T
0 9 Q
(VM) 355.39 240.32 T
0 10 Q
( handle\051.) 370.38 240.32 T
2 F
(See Also:) 99 220.32 T
0 F
(LMemInitHeap\050\051, VMAlloc\050\051, VMAttach\050\051) 180 220.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "427" 9
%%Page: "428" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(428) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMAttach\050\051) 99 634.99 T
3 10 Q
(VMBlockHandle) 99 620.33 T
4 F
(VMAttach\050) 183 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMBlockHandle) 153 599.99 T
(vmBlock,) 261 599.99 T
(MemHandle) 153 589.99 T
(mh\051;) 261 589.99 T
0 10 Q
(This routine attaches an existing global memory block to a) 180 572.33 T
0 9 Q
(VM) 453.39 572.33 T
0 10 Q
( block. It is) 468.38 572.33 T
(passed the following arguments:) 180 560.83 T
5 F
(\336le) 180 542.33 T
0 F
(The \336le\325) 243 542.33 T
(s) 279.49 542.33 T
6 F
(VMFileHandle) 286.9 542.33 T
0 F
(.) 362.07 542.33 T
5 F
(vmBlock) 180 524.33 T
0 F
-0.09 (The handle of the) 243 524.33 P
0 9 Q
-0.08 (VM) 326.53 524.33 P
0 10 Q
-0.09 ( block to which the memory block should) 341.53 524.33 P
-0.42 (be attached. Any data associated with that block will be lost. If) 243 513.33 P
(you pass a null) 243 502.33 T
6 F
(VMBlockHandle) 315.24 502.33 T
0 F
(, a new) 399.87 502.33 T
0 9 Q
(VM) 435.44 502.33 T
0 10 Q
( block will be) 450.43 502.33 T
(allocated.) 243 491.33 T
5 F
(mh) 180 473.33 T
0 F
(The handle of the global memory block to attach.) 243 473.33 T
(The routine returns the handle of the) 180 455.33 T
0 9 Q
(VM) 355.56 455.33 T
0 10 Q
( block to which the memory block) 370.55 455.33 T
(was attached.) 180 443.83 T
-0.04 (If you attach to a pre-existing) 180 425.33 P
0 9 Q
-0.04 (VM) 319.41 425.33 P
0 10 Q
-0.04 ( block, its user) 334.4 425.33 P
0 9 Q
-0.04 (ID) 404.08 425.33 P
0 10 Q
-0.04 ( will be preserved. If you) 414.74 425.33 P
-0.39 (create a new block \050by passing a null) 180 413.83 P
5 F
-0.39 (vmBlock) 349.52 413.83 P
0 F
-0.39 ( argument\051, the user) 389.15 413.83 P
0 9 Q
-0.35 (ID) 485.37 413.83 P
0 10 Q
-0.39 ( will be) 496.04 413.83 P
(unde\336ned.) 180 402.33 T
2 F
(Include:) 99 383.83 T
0 F
(vm.h) 180 383.83 T
81 367.48 531 372.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 367.48 531 372.49 R
7 X
0 0 0 1 0 0 0 K
V
50 371.48 609.01 371.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 359.48 T
2 F
(VMCheckForModi\336cations\050\051) 99 359.48 T
3 10 Q
(Boolean) 99 344.82 T
4 F
(VMCheckForModifications\050) 153 344.82 T
4 9 Q
(VMFileHandle) 153 334.48 T
(file\051;) 261 334.48 T
0 10 Q
-0.23 (This routine returns) 180 316.82 P
5 F
-0.23 (true) 276.53 316.82 P
0 F
-0.23 ( if the) 295.04 316.82 P
0 9 Q
-0.21 (VM) 324.17 316.82 P
0 10 Q
-0.23 ( \336le has been dirtied or updated since the) 339.16 316.82 P
(last full save.) 180 305.32 T
2 F
(Include:) 99 286.82 T
0 F
(vm.h) 180 286.82 T
81 270.48 531 275.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 270.48 531 275.48 R
7 X
0 0 0 1 0 0 0 K
V
50 274.48 609.01 274.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 262.47 T
2 F
(VMClose\050\051) 99 262.47 T
3 10 Q
(word) 99 247.81 T
4 F
(VMClose\050) 153 247.81 T
4 9 Q
(VMFileHandle) 153 237.47 T
(file,) 261 237.47 T
(Boolean) 153 227.47 T
(noErrorFlag\051;) 261 227.47 T
0 10 Q
-0.05 (This routine updates and closes a) 180 209.81 P
0 9 Q
-0.04 (VM) 337.16 209.81 P
0 10 Q
-0.05 ( \336le. If it is successful, it returns) 352.15 209.81 P
5 F
-0.05 (false) 504.2 209.81 P
0 F
-0.05 (.) 525.48 209.81 P
-0.2 (If it fails, it returns a member of the) 180 198.31 P
6 F
-0.2 (FileError) 348.62 198.31 P
0 F
-0.2 ( enumerated type. Note that) 398.07 198.31 P
(the routine closes the \336le even if it could not successfully update the \336le; in) 180 186.81 T
-0.31 (this case, any changes since the last update will be lost. For this reason, it is) 180 175.31 P
(safest to call) 180 163.81 T
6 F
(VMUpdate\050\051) 240.57 163.81 T
0 F
( \336rst, then \050after the \336le has been successfully) 303.53 163.81 T
(updated\051 call) 180 152.31 T
6 F
(VMClose\050\051) 242.97 152.31 T
0 F
(.) 296.3 152.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "428" 10
%%Page: "429" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(429) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(If) 180 641.33 T
5 F
(noErrorFlag) 190.18 641.33 T
0 F
( is) 247.94 641.33 T
5 F
(true) 261.28 641.33 T
0 F
(,) 279.79 641.33 T
6 F
(VMClose\050\051) 285.35 641.33 T
0 F
( will fatal-error if it could not succesfully) 338.68 641.33 T
(update and close the \336le.) 180 629.83 T
2 F
(Include:) 99 611.33 T
0 F
(vm.h) 180 611.33 T
81 594.99 531 600 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 594.99 531 600 R
7 X
0 0 0 1 0 0 0 K
V
50 598.99 609.01 598.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 586.99 T
2 F
(VMCompareVMChains\050\051) 99 586.99 T
3 10 Q
(Boolean) 99 572.33 T
4 F
(VMCompareVMChains\050) 153 572.33 T
4 9 Q
(VMFileHandle) 153 561.99 T
(sourceFile,) 261 561.99 T
(VMChain) 153 551.99 T
(sourceChain,) 261 551.99 T
(VMFileHandle) 153 541.99 T
(destFile,) 261 541.99 T
(VMChain) 153 531.99 T
(destChain\051;) 261 531.99 T
0 10 Q
-0.06 (This routine compares two) 180 514.33 P
0 9 Q
-0.05 (VM) 305.52 514.33 P
0 10 Q
-0.06 ( chains or) 320.52 514.33 P
0 9 Q
-0.05 (DB) 368.13 514.33 P
0 10 Q
-0.06 ( items. It returns) 381.63 514.33 P
5 F
-0.06 (true) 463.45 514.33 P
0 F
-0.06 ( if the two) 481.95 514.33 P
(are identical; otherwise it returns) 180 502.83 T
5 F
(false) 338.53 502.83 T
0 F
(.) 359.81 502.83 T
2 F
(Include:) 99 484.33 T
0 F
(vm.h) 180 484.33 T
81 467.98 531 472.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 467.98 531 472.99 R
7 X
0 0 0 1 0 0 0 K
V
50 471.98 609.01 471.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 459.98 T
2 F
(VMCopyVMBlock\050\051) 99 459.98 T
3 10 Q
(VMBlockHandle) 99 445.32 T
4 F
(VMCopyVMBlock\050) 183 445.32 T
4 9 Q
(VMFileHandle) 153 434.98 T
(sourceFile,) 261 434.98 T
(VMBlockHandle) 153 424.98 T
(sourceBlock,) 261 424.98 T
(VMFileHandle) 153 414.98 T
(destFile\051;) 261 414.98 T
0 10 Q
-0.5 (This routine creates a duplicate of a) 180 397.32 P
0 9 Q
-0.45 (VM) 345.41 397.32 P
0 10 Q
-0.5 ( block in the speci\336ed destination \336le) 360.4 397.32 P
(\050which may be the same as the source \336le\051. It returns the duplicate block\325) 180 385.82 T
(s) 517.81 385.82 T
(handle. The duplicate will have the same user) 180 374.32 T
0 9 Q
(ID) 395.78 374.32 T
0 10 Q
( as the original block.) 406.45 374.32 T
2 F
(Include:) 99 355.82 T
0 F
(vm.h) 180 355.82 T
81 339.48 531 344.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 339.48 531 344.48 R
7 X
0 0 0 1 0 0 0 K
V
50 343.48 609.01 343.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 331.48 T
2 F
(VMCopyVMChain\050\051) 99 331.48 T
3 10 Q
(VMChain) 99 316.81 T
4 F
(VMCopyVMChain\050) 153 316.81 T
4 9 Q
(VMFileHandle) 153 306.48 T
(sourceFile,) 261 306.48 T
(VMChain) 153 296.48 T
(sourceChain,) 261 296.48 T
(VMFileHandle) 153 286.48 T
(destFile\051;) 261 286.48 T
0 10 Q
(This routine creates a duplicate of a) 180 268.81 T
0 9 Q
(VM) 348.91 268.81 T
0 10 Q
( chain \050or) 363.9 268.81 T
0 9 Q
(DB) 410.38 268.81 T
0 10 Q
( item\051 in the speci\336ed) 423.88 268.81 T
(destination \336le \050which may be the same as the source \336le\051. It returns the) 180 257.31 T
(duplicate\325) 180 245.81 T
(s) 224.45 245.81 T
6 F
(VMChain) 231.86 245.81 T
0 F
( structure. All blocks in the duplicate will have the) 280.55 245.81 T
(same user) 180 234.31 T
0 9 Q
(ID) 229.82 234.31 T
0 10 Q
( numbers as the corresponding original blocks.) 240.49 234.31 T
2 F
(Include:) 99 215.81 T
0 F
(vm.h) 180 215.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "429" 11
%%Page: "430" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(430) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMDetach\050\051) 99 634.99 T
3 10 Q
(MemHandle) 99 620.33 T
4 F
(VMDetach\050) 159 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMBlockHandle) 153 599.99 T
(block,) 261 599.99 T
(GeodeHandle) 153 589.99 T
(owner\051;) 261 589.99 T
(/* Pass zero to have block owned by) 315 589.99 T
( * current thread\325s owner */) 297 579.99 T
0 10 Q
-0.73 (This routine detaches a global memory block from a) 180 562.33 P
0 9 Q
-0.65 (VM) 415.35 562.33 P
0 10 Q
-0.73 ( block. If the) 430.35 562.33 P
0 9 Q
-0.65 (VM) 487.82 562.33 P
0 10 Q
-0.73 ( block) 502.81 562.33 P
(is not currently in memory) 180 550.83 T
(,) 302.59 550.83 T
6 F
(VMDetach\050\051) 308.15 550.83 T
0 F
( allocates a memory block and) 370.18 550.83 T
-0.37 (copies the) 180 539.33 P
0 9 Q
-0.33 (VM) 227.78 539.33 P
0 10 Q
-0.37 ( block into it. If the) 242.78 539.33 P
0 9 Q
-0.33 (VM) 331.7 539.33 P
0 10 Q
-0.37 ( block is dirty) 346.7 539.33 P
-0.37 (,) 407.27 539.33 P
6 F
-0.38 (VMDetach\050\051) 412.46 539.33 P
0 F
-0.37 ( will update) 474.49 539.33 P
(the block to the \336le before detaching it.) 180 527.83 T
2 F
(Include:) 99 509.33 T
0 F
(vm.h) 180 509.33 T
81 492.98 531 497.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 492.98 531 497.99 R
7 X
0 0 0 1 0 0 0 K
V
50 496.98 609.01 496.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 484.98 T
2 F
(VMDirty\050\051) 99 484.98 T
3 10 Q
(void) 99 470.32 T
4 F
(VMDirty\050) 153 470.32 T
4 9 Q
(MemHandle) 153 459.98 T
(mh\051;) 261 459.98 T
0 10 Q
(This routine marks a locked) 180 442.32 T
0 9 Q
(VM) 312.43 442.32 T
0 10 Q
( block as dirty) 327.42 442.32 T
(.) 391.51 442.32 T
2 F
(Include:) 99 423.82 T
0 F
(vm.h) 180 423.82 T
81 407.48 531 412.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 407.48 531 412.48 R
7 X
0 0 0 1 0 0 0 K
V
50 411.48 609.01 411.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 399.48 T
2 F
(VMFind\050\051) 99 399.48 T
3 10 Q
(VMBlockHandle) 99 384.81 T
4 F
(VMFind\050) 183 384.81 T
4 9 Q
(VMFileHandle) 153 374.48 T
(file,) 261 374.48 T
(VMBlockHandle) 153 364.48 T
(startBlock,) 261 364.48 T
(word) 153 354.48 T
(userID\051;) 261 354.48 T
0 10 Q
-0.76 (This routine \336nds a) 180 336.81 P
0 9 Q
-0.69 (VM) 270.48 336.81 P
0 10 Q
-0.76 ( block with the speci\336ed user ID number) 285.48 336.81 P
-0.76 (. If the second) 466.83 336.81 P
-0.81 (argument is) 180 325.31 P
6 F
-0.84 (NullHandle) 237.08 325.31 P
0 F
-0.81 ( the routine will return the matching block with the) 296.89 325.31 P
(lowest handle. If the second argument is non-null, it will return the \336rst) 180 313.81 T
(matching block whose handle is larger than the one passed \050in numerical) 180 302.31 T
(order\051.) 180 290.81 T
2 F
(Include:) 99 272.31 T
0 F
(vm.h) 180 272.31 T
81 255.97 531 260.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 255.97 531 260.97 R
7 X
0 0 0 1 0 0 0 K
V
50 259.97 609.01 259.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 247.97 T
2 F
(VMFree\050\051) 99 247.97 T
3 10 Q
(void) 99 233.3 T
4 F
(VMFree\050) 153 233.3 T
4 9 Q
(VMFileHandle) 153 222.97 T
(file,) 261 222.97 T
(VMBlockHandle) 153 212.97 T
(block\051;) 261 212.97 T
0 10 Q
(This routine frees the speci\336ed) 180 195.3 T
0 9 Q
(VM) 325.37 195.3 T
0 10 Q
( block. If a global memory block is) 340.36 195.3 T
(currently attached to the) 180 183.8 T
0 9 Q
(VM) 298.15 183.8 T
0 10 Q
( block, it is freed too.) 313.14 183.8 T
2 F
(Include:) 99 165.3 T
0 F
(vm.h) 180 165.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "430" 12
%%Page: "431" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(431) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMFreeVMChain\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(VMFreeVMChain\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMChain) 153 599.99 T
(chain\051;) 261 599.99 T
0 10 Q
(This routine frees the speci\336ed) 180 582.33 T
0 9 Q
(VM) 325.37 582.33 T
0 10 Q
( chain or) 340.36 582.33 T
0 9 Q
(DB) 383.51 582.33 T
0 10 Q
( item. If a chain is speci\336ed,) 397.01 582.33 T
(all blocks in the chain will be freed.) 180 570.83 T
2 F
(Include:) 99 552.33 T
0 F
(vm.h) 180 552.33 T
81 535.98 531 540.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 535.98 531 540.99 R
7 X
0 0 0 1 0 0 0 K
V
50 539.98 609.01 539.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 527.98 T
2 F
(VMGetAttributes\050\051) 99 527.98 T
3 10 Q
(word) 99 513.32 T
4 F
(VMGetAttributes\050) 153 513.32 T
4 9 Q
(VMFileHandle) 153 502.98 T
(file\051;) 261 502.98 T
0 10 Q
-0.59 (Each) 180 485.32 P
0 9 Q
-0.54 (VM) 205.52 485.32 P
0 10 Q
-0.59 ( \336le contains a set of) 220.51 485.32 P
6 F
-0.61 (VMAttributes) 314.18 485.32 P
0 F
-0.59 ( \337ags. These determine how the) 384.92 485.32 P
0 9 Q
(VM) 180 473.82 T
0 10 Q
( manager will treat the \336le. This routine returns the current \337ags.) 194.99 473.82 T
2 F
(Include:) 99 455.32 T
0 F
(vm.h) 180 455.32 T
2 F
(T) 99 435.32 T
(ips and T) 104.93 435.32 T
(ricks:) 148.28 435.32 T
0 F
-0.75 (When the Document Control objects create \336les, they automatically initialize) 180 435.32 P
(the attributes appropriately) 180 422.32 T
(.) 308.35 422.32 T
2 F
(See Also:) 99 402.32 T
0 F
(VMSetAttributes\050\051) 180 402.32 T
81 385.98 531 390.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 385.98 531 390.98 R
7 X
0 0 0 1 0 0 0 K
V
50 389.98 609.01 389.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 377.98 T
2 F
(VMGetDirtyState\050\051) 99 377.98 T
3 10 Q
(word) 99 363.31 T
4 F
(VMGetDirtyState\050) 153 363.31 T
4 9 Q
(VMFileHandle) 153 352.98 T
(file\051;) 261 352.98 T
0 10 Q
-0.43 (This routine \336nds out if a \336le has been dirtied. It returns a word-sized value.) 180 335.31 P
-0.25 (The upper byte of the return value is non-zero if the \336le has not been dirtied) 180 323.81 P
-0.31 (since the last save, auto-save, or update; the lower byte is non-zero if the \336le) 180 312.31 P
-0.26 (has not been dirtied since the last save. Thus, if the return value is zero, the) 180 300.81 P
(\336le must be updated.) 180 289.31 T
2 F
(Include:) 99 270.81 T
0 F
(vm.h) 180 270.81 T
2 F
(T) 99 250.81 T
(ips and T) 104.93 250.81 T
(ricks:) 148.28 250.81 T
6 F
-0.85 (VMUpdate\050\051) 180 250.81 P
0 F
-0.82 ( is optimized for updating clean \336les. For this reason, it is faster) 242.96 250.81 P
(to call) 180 237.81 T
6 F
(VMUpdate\050\051) 210.75 237.81 T
0 F
( then it is to \336rst check the dirty state, then call) 273.71 237.81 T
6 F
(VMUpdate\050\051) 180 224.81 T
0 F
( only if the \336le is dirty) 242.96 224.81 T
(.) 344.27 224.81 T
81 208.47 531 213.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 208.47 531 213.47 R
7 X
0 0 0 1 0 0 0 K
V
50 212.47 609.01 212.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 200.47 T
2 F
(VMGetMapBlock\050\051) 99 200.47 T
3 10 Q
(VMBlockHandle) 99 185.8 T
4 F
(VMGetMapBlock\050) 183 185.8 T
4 9 Q
(VMFIleHandle) 153 175.47 T
(file\051;) 261 175.47 T
0 10 Q
(This routine returns the) 180 157.8 T
0 9 Q
(VM) 295 157.8 T
0 10 Q
( block handle of the \336le\325) 309.99 157.8 T
(s map block.) 418.9 157.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "431" 13
%%Page: "432" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(432) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(vm.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(VMGrabExclusive\050\051) 99 616.99 T
3 10 Q
(VMStartExclusiveReturnValue) 99 602.33 T
4 F
( VMGrabExclusive\050) 261 602.33 T
4 9 Q
(VMFileHandle) 153 591.99 T
(file,) 261 591.99 T
(word) 153 581.99 T
(timeout,) 261 581.99 T
(VMOperation) 153 571.99 T
(operation,) 261 571.99 T
(VMOperation *) 153 561.99 T
(currentOperation\051;) 261 561.99 T
0 10 Q
(This routine gets exclusive access to a) 180 544.33 T
0 9 Q
(VM) 357.98 544.33 T
0 10 Q
( \336le for this thread.) 372.97 544.33 T
2 F
(Include:) 99 525.83 T
0 F
(vm.h) 180 525.83 T
81 509.48 531 514.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 509.48 531 514.49 R
7 X
0 0 0 1 0 0 0 K
V
50 513.48 609.01 513.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 501.48 T
2 F
(VMInfo\050\051) 99 501.48 T
3 10 Q
(Boolean) 99 486.82 T
4 F
(VMInfo\050) 153 486.82 T
4 9 Q
(VMFileHandle) 153 476.48 T
(file,) 261 476.48 T
(VMBlockHandle) 153 466.48 T
(block,) 261 466.48 T
(VMInfoStruct) 153 456.48 T
3 F
( *) 217.8 456.48 T
4 F
(info) 261 456.48 T
0 10 Q
-0.73 (This routine writes the memory handle, block size, and user) 180 438.82 P
0 9 Q
-0.66 (ID) 452.7 438.82 P
0 10 Q
-0.73 ( number of the) 463.37 438.82 P
(block. It returns) 180 427.32 T
5 F
(false) 257.78 427.32 T
0 F
( if the handle is invalid or free.) 279.06 427.32 T
2 F
(Include:) 99 408.82 T
0 F
(vm.h) 180 408.82 T
81 392.48 531 397.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 392.48 531 397.48 R
7 X
0 0 0 1 0 0 0 K
V
50 396.48 609.01 396.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 384.48 T
2 F
(VMLock\050\051) 99 384.48 T
3 10 Q
(void *) 99 369.81 T
4 F
(VMLock\050) 153 369.81 T
4 9 Q
(VMFileHandle) 153 359.48 T
(file,) 261 359.48 T
(VMBlockHandle) 153 349.48 T
(block,) 261 349.48 T
(MemHandle) 153 339.48 T
3 F
(*) 201.6 339.48 T
4 F
(mh\051;) 261 339.48 T
0 10 Q
-0.51 (This routine locks a) 180 321.81 P
0 9 Q
-0.46 (VM) 272.07 321.81 P
0 10 Q
-0.51 ( block into the global heap. It returns the block\325) 287.06 321.81 P
-0.51 (s base) 501.07 321.81 P
(address.) 180 310.31 T
2 F
(Include:) 99 291.81 T
0 F
(vm.h) 180 291.81 T
81 275.47 531 280.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 275.47 531 280.48 R
7 X
0 0 0 1 0 0 0 K
V
50 279.47 609.01 279.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 267.47 T
2 F
(VMMemBlockT) 99 267.47 T
(oVMBlock\050\051) 183.46 267.47 T
3 10 Q
(VMBlockHandle) 99 252.8 T
4 F
(VMMemBlockToVMBlock\050) 183 252.8 T
4 9 Q
(MemHandle) 153 242.47 T
(mh,) 261 242.47 T
(VMFileHandle*) 153 232.47 T
(file\051;) 261 232.47 T
0 10 Q
-0.41 (This routine gets the) 180 214.8 P
0 9 Q
-0.37 (VM) 277.64 214.8 P
0 10 Q
-0.41 ( block and \336le handles for a speci\336ed memory block.) 292.63 214.8 P
(It returns the) 180 203.3 T
0 9 Q
(VM) 245.92 203.3 T
0 10 Q
( block handle and copies the) 260.91 203.3 T
0 9 Q
(VM) 393.71 203.3 T
0 10 Q
( \336le handle into) 408.71 203.3 T
5 F
(*\336le) 483.91 203.3 T
0 F
(.) 502.79 203.3 T
-0.04 (The memory handle passed must be the handle of a block which is attached) 180 184.8 P
(to a) 180 173.3 T
0 9 Q
(VM) 200.01 173.3 T
0 10 Q
( \336le. If it is not, the results are unde\336ned.) 215 173.3 T
2 F
(Include:) 99 154.8 T
0 F
(vm.h) 180 154.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "432" 14
%%Page: "433" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(433) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMModifyUserID\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(VMModifyUserID\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMBlockHandle) 153 599.99 T
(block,) 261 599.99 T
(word) 153 589.99 T
(userID\051;) 261 589.99 T
0 10 Q
(This routine changes a) 180 572.33 T
0 9 Q
(VM) 288.16 572.33 T
0 10 Q
( block\325) 303.15 572.33 T
(s user) 331.68 572.33 T
0 9 Q
(ID) 362.05 572.33 T
0 10 Q
( number) 372.72 572.33 T
(.) 410.87 572.33 T
2 F
(Include:) 99 553.83 T
0 F
(vm.h) 180 553.83 T
81 537.48 531 542.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 537.48 531 542.49 R
7 X
0 0 0 1 0 0 0 K
V
50 541.48 609.01 541.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 529.48 T
2 F
(VMOpen\050\051) 99 529.48 T
3 10 Q
(VMFileHandle) 99 514.82 T
4 F
(VMOpen\050) 177 514.82 T
4 9 Q
(char *) 153 504.48 T
(name,) 261 504.48 T
(/* Name of file to open/create */) 333 504.48 T
(VMAccessFlags) 153 494.48 T
(flags,) 261 494.48 T
(VMOpenType) 153 484.48 T
(mode,) 261 484.48 T
(word) 153 474.48 T
(compression\051;) 261 474.48 T
(/* Compression threshold percentage) 333 474.48 T
( * passed as an integer */) 315 464.48 T
0 10 Q
(This routine opens or creates a) 180 446.82 T
0 9 Q
(VM) 325.38 446.82 T
0 10 Q
( \336le. It returns the handle of the opened) 340.37 446.82 T
(\336le. If it is unable to open the \336le, it sets the error value for) 180 435.32 T
6 F
(ThreadGetError\050\051) 180 423.82 T
0 F
(.) 273.16 423.82 T
6 F
(VMOpen\050\051) 278.72 423.82 T
0 F
( looks for the \336le in the thread\325) 331.49 423.82 T
(s working) 473.36 423.82 T
(directory \050unless a temporary \336le is being created, as described below\051. The) 180 412.32 T
(routine takes four arguments:) 180 400.82 T
5 F
(name) 180 382.32 T
0 F
(A pointer to a string containing the name of the \336le to open.) 243 382.32 T
(The \336le will be opened in the thread\325) 243 371.32 T
(s current working) 411.55 371.32 T
-0.54 (directory) 243 360.32 P
-0.54 (. If a temporary \336le is being opened, this buffer should) 283.36 360.32 P
-0.41 (contain the full path of the directory in which to create the \336le,) 243 349.32 P
(followed by fourteen null bytes \050counting the string-ending) 243 338.32 T
(null\051.) 243 327.32 T
6 F
(VMOpen\050\051) 270.41 327.32 T
0 F
( will write the name of the temporary \336le in) 323.18 327.32 T
(those trailing nulls.) 243 316.32 T
5 F
(\337ags) 180 298.32 T
0 F
-0.57 (This speci\336es what kind of access to the \336le you need. The \337ags) 243 298.32 P
(are described below) 243 287.32 T
(.) 332.83 287.32 T
5 F
(mode) 180 269.32 T
0 F
(This speci\336es how the \336le should be opened. The types are) 243 269.32 T
(described below) 243 258.32 T
(.) 315.05 258.32 T
5 F
(compression) 180 240.32 T
0 F
(The compression threshold percentage, passed as an integer) 243 240.32 T
(.) 520.05 240.32 T
(For example, to set a compression threshold of 50%, pass the) 243 229.32 T
-0.68 (integer \32450\325. When the percentage of used space in the \336le drops) 243 218.32 P
(below the compression threshold, the) 243 207.32 T
0 9 Q
(VM) 417.27 207.32 T
0 10 Q
( manager will) 432.26 207.32 T
(automatically compress the \336le. T) 243 196.32 T
(o use the system default) 398.4 196.32 T
-0.37 (threshold, pass a threshold of zero. The compression threshold) 243 185.32 P
-0.01 (is set only when the \336le is created; this argument is ignored if) 243 174.32 P
(an existing \336le is opened.) 243 163.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "433" 15
%%Page: "434" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(434) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.41 (The) 180 641.33 P
6 F
-0.42 (VMAccessFlags) 200.15 641.33 P
0 F
-0.41 ( specify what kind of access to the \336le the caller wants.) 279.96 641.33 P
(The following \337ags are available:) 180 629.83 T
0 9 Q
(VMAF_FORCE_READ_ONL) 180 611.33 T
(Y) 299.5 611.33 T
0 10 Q
-0.8 (If set, the \336le will be opened read-only) 243 600.33 P
-0.8 (, even if the default would) 412.81 600.33 P
(be to open the \336le read/write. Blocks in read-only \336les cannot) 243 589.33 T
(be dirtied, and changes in memory blocks will not be updated) 243 578.33 T
(to the disk) 243 567.33 T
0 9 Q
(VM) 294.68 567.33 T
0 10 Q
( blocks.) 309.67 567.33 T
0 9 Q
(VMAF_FORCE_READ_WRITE) 180 549.33 T
0 10 Q
(If set, the \336le will be opened for read/write access, even if the) 243 538.33 T
(default would be to open the \336le for read-only access.) 243 527.33 T
0 9 Q
(VMAF_SHARED_MEMOR) 180 509.33 T
(Y) 292.82 509.33 T
0 10 Q
-0.26 (If set, the) 243 498.33 P
0 9 Q
-0.23 (VM) 289.26 498.33 P
0 10 Q
-0.26 ( manager should try to use shared memory when) 304.25 498.33 P
-0.42 (locking) 243 487.33 P
0 9 Q
-0.38 (VM) 278.51 487.33 P
0 10 Q
-0.42 ( blocks; that is, the same memory block will be used) 293.51 487.33 P
(for a given) 243 476.33 T
0 9 Q
(VM) 294.67 476.33 T
0 10 Q
( block no matter which thread locks the block.) 309.66 476.33 T
0 9 Q
(VMAF_FORCE_DENY_WRITE) 180 458.33 T
0 10 Q
(If set, then open the \336le deny-write; that is, no other threads) 243 447.33 T
(will be allowed to open the \336le for read/write access.) 243 436.33 T
0 9 Q
(VMAF_DISALLOW_SHARED_MUL) 180 418.33 T
(TIPLE) 332.67 418.33 T
0 10 Q
(If this \337ag is set, \336les with the \336le attribute) 243 407.33 T
0 9 Q
(GFHF_SHARED_MUL) 243 396.33 T
(TIPLE) 339.51 396.33 T
0 10 Q
( cannot be opened.) 367.68 396.33 T
0 9 Q
(VMAF_USE_BLOCK_LEVEL_SYNCHRONIZA) 180 378.33 T
(TION) 378.84 378.33 T
0 10 Q
(If set, the block-level synchronization mechanism of the) 243 367.33 T
0 9 Q
(VM) 503.01 367.33 T
0 10 Q
(manager is assumed to be suf\336cient; the more restrictive) 243 356.33 T
(StartExclusive/EndExclusive mechanism is not used. This is) 243 345.33 T
(primarily intended for system software.) 243 334.33 T
(Y) 180 316.33 T
(ou must also specify how the \336le should be opened. T) 185.93 316.33 T
(o do this, you pass a) 428.93 316.33 T
(member of the) 180 304.83 T
6 F
(VMOpenT) 249.45 304.83 T
(ype) 301.14 304.83 T
0 F
( enumerated type. The following types are) 319.66 304.83 T
(available:) 180 293.33 T
0 9 Q
(VMO_TEMP_FILE) 180 274.83 T
0 10 Q
-0.73 (If this is passed, the \336le will be a temporary data \336le. When you) 243 263.83 P
(create a temporary \336le, you pass a directory path, not a \336le) 243 252.83 T
(name. The path should be followed by fourteen null bytes,) 243 241.83 T
-0.41 (including the string\325) 243 230.83 P
-0.41 (s terminating null. The system will choose) 335.33 230.83 P
(an appropriate \336le name and add it to the path string.) 243 219.83 T
0 9 Q
(VMO_CREA) 180 201.83 T
(TE_ONL) 231.99 201.83 T
(Y) 268.51 201.83 T
0 10 Q
(If this is passed, the document will be created. If a document) 243 190.83 T
-0.78 (with the speci\336ed name already exists in the working directory) 243 179.83 P
-0.78 (,) 526.22 179.83 P
6 F
(VMOpen\050\051) 243 168.83 T
0 F
( will return an error condition.) 295.77 168.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "434" 16
%%Page: "435" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(435) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(VMO_CREA) 180 641.33 T
(TE) 237.77 641.33 T
(If this is passed, the \336le will be created if it does not already) 243 630.33 T
(exist; otherwise it will be opened.) 243 619.33 T
0 9 Q
(VMO_CREA) 180 601.33 T
(TE_TRUNCA) 231.99 601.33 T
(TE) 288.67 601.33 T
0 10 Q
(If this is passed, the \336le will be created if it does not already) 243 590.33 T
(exist; otherwise, it will be opened and truncated \050all data) 243 579.33 T
(blocks will be freed\051.) 243 568.33 T
0 9 Q
(VMO_OPEN) 180 550.33 T
0 10 Q
(Open existing \336le. If \336le does not exist, return an error) 243 539.33 T
(condition.) 243 528.33 T
(If for any reason) 180 510.33 T
6 F
(VMOpen\050\051) 259.07 510.33 T
0 F
( is unable to open the requested \336le, it will) 311.84 510.33 T
(returns a null \336le handle. It will also set the error value for) 180 498.83 T
6 F
(ThreadGetError\050\051) 180 487.33 T
0 F
(. The possible error conditions are:) 273.16 487.33 T
0 9 Q
(VM_FILE_EXISTS) 180 468.83 T
6 10 Q
(VMOpen\050\051) 243 457.83 T
0 F
( was passed) 295.77 457.83 T
0 9 Q
(VMO_CREA) 353.38 457.83 T
(TE_ONL) 405.37 457.83 T
(Y) 441.89 457.83 T
0 10 Q
(, but the \336le) 447.11 457.83 T
(already exists.) 243 446.83 T
0 9 Q
(VM_FILE_NOT_FOUND) 180 428.83 T
6 10 Q
-0.02 (VMOpen\050\051) 243 417.83 P
0 F
-0.02 ( was passed) 295.77 417.83 P
0 9 Q
-0.02 (VMO_OPEN) 353.32 417.83 P
0 10 Q
-0.02 (, but the \336le does not exist.) 406.65 417.83 P
0 9 Q
(VM_SHARING_DENIED) 180 399.83 T
0 10 Q
(The \336le was opened by another geode, and access was denied.) 243 388.83 T
0 9 Q
(VM_OPEN_INV) 180 370.83 T
(ALID_VM_FILE) 247.33 370.83 T
6 10 Q
(VMOpen\050\051) 243 359.83 T
0 F
( was instructed to open an invalid) 295.77 359.83 T
0 9 Q
(VM) 455.24 359.83 T
0 10 Q
( \336le \050or a) 470.23 359.83 T
(non-) 243 348.83 T
0 9 Q
(VM) 263.55 348.83 T
0 10 Q
( \336le\051.) 278.54 348.83 T
0 9 Q
(VM_CANNOT_CREA) 180 330.83 T
(TE) 270.16 330.83 T
6 10 Q
-0.57 (VMOpen\050\051) 243 319.83 P
0 F
-0.55 ( cannot create the \336le \050but it does not already exist\051.) 295.77 319.83 P
0 9 Q
(VM_TRUNCA) 180 301.83 T
(TE_F) 239.17 301.83 T
(AILED) 261.5 301.83 T
6 10 Q
(VMOpen\050\051) 243 290.83 T
0 F
( was passed) 295.77 290.83 T
0 9 Q
(VMO_CREA) 353.38 290.83 T
(TE_TRUNCA) 405.37 290.83 T
(TE) 462.05 290.83 T
0 10 Q
(; the \336le) 474.55 290.83 T
(exists, but could not be truncated.) 243 279.83 T
0 9 Q
(VM_WRITE_PROTECTED) 180 261.83 T
6 10 Q
(VMOpen\050\051) 243 250.83 T
0 F
( was passed) 295.77 250.83 T
0 9 Q
(VMAF_FORCE_READ_WRITE) 353.38 250.83 T
0 10 Q
(, but the) 484.86 250.83 T
(\336le was write-protected.) 243 239.83 T
2 F
(Include:) 99 221.83 T
0 F
(vm.h) 180 221.83 T
2 F
(T) 99 201.83 T
(ips and T) 104.93 201.83 T
(ricks:) 148.28 201.83 T
0 F
-0.54 (If you use the document control objects, they will take care of opening \336les as) 180 201.83 P
(necessary; you will not need to call) 180 188.83 T
6 F
(VMOpen\050\051) 343.17 188.83 T
0 F
(.) 395.94 188.83 T
2 F
(See Also:) 99 168.83 T
0 F
(FileOpen\050\051) 180 168.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "435" 17
%%Page: "436" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(436) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMPreserveBlocksHandle\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(VMPreserveBlocksHandle\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMBlockHandle) 153 599.99 T
(block\051;) 261 599.99 T
0 10 Q
(Keep the same global memory block with this) 180 582.33 T
0 9 Q
(VM) 393.01 582.33 T
0 10 Q
( block until the block is) 408 582.33 T
(explicitly detached or the) 180 570.83 T
0 9 Q
(VM) 299.45 570.83 T
0 10 Q
( block is freed.) 314.44 570.83 T
2 F
(Include:) 99 552.33 T
0 F
(vm.h) 180 552.33 T
81 535.98 531 540.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 535.98 531 540.99 R
7 X
0 0 0 1 0 0 0 K
V
50 539.98 609.01 539.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 527.98 T
2 F
(VMReleaseExclusive\050\051) 99 527.98 T
3 10 Q
(void) 99 513.32 T
4 F
( VMReleaseExclusive\050) 123 513.32 T
4 9 Q
(VMFileHandle) 153 502.98 T
(file\051;) 261 502.98 T
0 10 Q
(This routine releases a thread\325) 180 485.32 T
(s exclusive access to a) 320.76 485.32 T
0 9 Q
(VM) 424.66 485.32 T
0 10 Q
( \336le.) 439.65 485.32 T
2 F
(Include:) 99 466.82 T
0 F
(vm.h) 180 466.82 T
81 450.48 531 455.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 450.48 531 455.48 R
7 X
0 0 0 1 0 0 0 K
V
50 454.48 609.01 454.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 442.48 T
2 F
(VMRevert\050\051) 99 442.48 T
3 10 Q
(void) 99 427.81 T
4 F
(VMRevert\050) 153 427.81 T
4 9 Q
(VMFileHandle) 153 417.48 T
(file,\051;) 261 417.48 T
0 10 Q
(This routine reverts a \336le to its last-saved state.) 180 399.81 T
2 F
(Include:) 99 381.31 T
0 F
(vm.h) 180 381.31 T
81 364.97 531 369.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 364.97 531 369.98 R
7 X
0 0 0 1 0 0 0 K
V
50 368.97 609.01 368.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 356.97 T
2 F
(VMSave\050\051) 99 356.97 T
3 10 Q
(void) 99 342.3 T
4 F
(VMSave\050) 153 342.3 T
4 9 Q
(VMFileHandle) 153 331.97 T
(file\051;) 261 331.97 T
0 10 Q
(This routine updates and saves a \336le, freeing all backup blocks.) 180 314.3 T
2 F
(Include:) 99 295.8 T
0 F
(vm.h) 180 295.8 T
81 279.46 531 284.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 279.46 531 284.47 R
7 X
0 0 0 1 0 0 0 K
V
50 283.46 609.01 283.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 271.46 T
2 F
(VMSaveAs\050\051) 99 271.46 T
3 10 Q
(VMFileHandle) 99 256.79 T
4 F
(VMSaveAs\050) 177 256.79 T
4 9 Q
(VMFileHandle) 153 246.46 T
(file,) 261 246.46 T
(const char) 153 236.46 T
(*name,) 261 236.46 T
(VMAccessFlags) 153 226.46 T
(flags.) 261 226.46 T
(VMOpenTypes) 153 216.46 T
(mode,) 261 216.46 T
(word) 153 206.46 T
(compression\051;) 261 206.46 T
0 10 Q
(This routine saves a \336le under a new name. The old \336le is reverted to its) 180 188.79 T
(last-saved condition.) 180 177.29 T
2 F
(Include:) 99 158.79 T
0 F
(vm.h) 180 158.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "436" 18
%%Page: "437" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(437) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(VMSetAttributes\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(VMSetAttributes\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMAttributes) 153 599.99 T
(attrToSet,) 261 599.99 T
(/* Turn these flags on... */) 333 599.99 T
(VMAttributes) 153 589.99 T
(attrToClear\051;) 261 589.99 T
(/* after turning these flags off */) 333 589.99 T
0 10 Q
-0.77 (This routine changes a) 180 572.33 P
0 9 Q
-0.69 (VM) 285.09 572.33 P
0 10 Q
-0.77 ( \336le\325) 300.08 572.33 P
-0.77 (s) 318.02 572.33 P
6 F
-0.79 (VMAttributes) 324.66 572.33 P
0 F
-0.77 ( settings. The routine returns) 395.39 572.33 P
(the new attribute settings.) 180 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(vm.h) 180 542.33 T
2 F
(T) 99 522.33 T
(ips and T) 104.93 522.33 T
(ricks:) 148.28 522.33 T
0 F
-0.75 (When the Document Control objects create \336les, they automatically initialize) 180 522.33 P
(the attributes appropriately) 180 509.33 T
(.) 308.35 509.33 T
2 F
(W) 99 489.33 T
(arnings:) 108.07 489.33 T
0 F
-0.35 (If you turn off) 180 489.33 P
0 9 Q
-0.31 (VMA_BACKUP) 245.81 489.33 P
0 10 Q
-0.35 (, make sure you do it right after a save or revert) 310.35 489.33 P
(\050when there are no backup blocks\051.) 180 476.33 T
2 F
(See Also:) 99 456.33 T
0 F
(VMGetAttributes\050\051) 180 456.33 T
81 439.98 531 444.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 439.98 531 444.99 R
7 X
0 0 0 1 0 0 0 K
V
50 443.98 609.01 443.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 431.98 T
2 F
(VMSetExecThread\050\051) 99 431.98 T
3 10 Q
(void) 99 417.32 T
4 F
(VMSetExecThread\050) 153 417.32 T
4 9 Q
(VMFileHandle) 153 406.98 T
(file,) 261 406.98 T
(ThreadHandle) 153 396.98 T
(thread\051;) 261 396.98 T
0 10 Q
(Set which thread will execute methods of all objects in the \336le.) 180 379.32 T
2 F
(Include:) 99 360.82 T
0 F
(vm.h) 180 360.82 T
81 344.48 531 349.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 344.48 531 349.48 R
7 X
0 0 0 1 0 0 0 K
V
50 348.48 609.01 348.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 336.48 T
2 F
(VMSetMapBlock\050\051) 99 336.48 T
3 10 Q
(void) 99 321.81 T
4 F
(VMSetMapBlock\050) 153 321.81 T
4 9 Q
(VMFileHandle) 153 311.48 T
(file,) 261 311.48 T
(VMBlockHandle) 153 301.48 T
(block\051;) 261 301.48 T
0 10 Q
(This routine sets the map block for a) 180 283.81 T
0 9 Q
(VM) 352.25 283.81 T
0 10 Q
( \336le.) 367.24 283.81 T
2 F
(Include:) 99 265.31 T
0 F
(vm.h) 180 265.31 T
81 248.97 531 253.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 248.97 531 253.97 R
7 X
0 0 0 1 0 0 0 K
V
50 252.97 609.01 252.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 240.97 T
2 F
(VMSetReloc\050\051) 99 240.97 T
3 10 Q
(void) 99 226.3 T
4 F
(VMSetReloc\050) 153 226.3 T
4 9 Q
(VMFileHandle) 153 215.97 T
(file,) 261 215.97 T
(void \050*reloc\051) 153 205.97 T
(\050VMFileHandle) 261 205.97 T
(file,) 351 205.97 T
(VMBlockHandle) 266.4 195.97 T
(block,) 351 195.97 T
( MemHandle) 261 185.97 T
(mh,) 351 185.97 T
( void) 261 175.97 T
(*data,) 351 175.97 T
( VMRelocTypes) 261 165.97 T
(type\051\051;) 351 165.97 T
0 10 Q
(This routine sets a data-relocation routine for the) 180 148.3 T
0 9 Q
(VM) 411.5 148.3 T
0 10 Q
( \336le.) 426.49 148.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "437" 19
%%Page: "438" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(438) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(vm.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(VMUnlock\050\051) 99 616.99 T
3 10 Q
(void) 99 602.33 T
4 F
(VMUnlock\050) 153 602.33 T
4 9 Q
(MemHandle) 153 591.99 T
(mh\051;) 261 591.99 T
0 10 Q
-0.25 (This routine unlocks a locked) 180 574.33 P
0 9 Q
-0.23 (VM) 317.08 574.33 P
0 10 Q
-0.25 ( block. Note that the block\325) 332.07 574.33 P
-0.25 (s) 453.8 574.33 P
5 F
-0.25 (global memory) 460.96 574.33 P
(handle) 180 562.83 T
0 F
( is passed \050not its) 211.84 562.83 T
0 9 Q
(VM) 294.82 562.83 T
0 10 Q
( handle\051.) 309.81 562.83 T
2 F
(Include:) 99 544.33 T
0 F
(vm.h) 180 544.33 T
81 527.98 531 532.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.98 531 532.99 R
7 X
0 0 0 1 0 0 0 K
V
50 531.98 609.01 531.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.98 T
2 F
(VMUpdate\050\051) 99 519.98 T
3 10 Q
(word) 99 505.32 T
4 F
(VMUpdate\050) 153 505.32 T
4 9 Q
(VMFileHandle) 153 494.98 T
(file\051;) 261 494.98 T
0 10 Q
(This routine updates dirty blocks to the disk.) 180 477.32 T
2 F
(Include:) 99 458.82 T
0 F
(vm.h) 180 458.82 T
2 F
(T) 99 438.82 T
(ips and T) 104.93 438.82 T
(ricks:) 148.28 438.82 T
6 F
-0.6 (VMUpdate\050\051) 180 438.82 P
0 F
-0.58 ( is optimized for updating clean \336les to the disk. Therefore, it is) 242.96 438.82 P
-0.55 (faster to call) 180 425.82 P
6 F
-0.57 (VMUpdate\050\051) 238.72 425.82 P
0 F
-0.55 ( whenever you think it might be necessary) 301.68 425.82 P
-0.55 (, than it) 492.83 425.82 P
(is to check the dirty state and then call) 180 412.82 T
6 F
(VMUpdate\050\051) 362.99 412.82 T
0 F
( only if the \336le is) 425.95 412.82 T
(actually dirty) 180 399.82 T
(.) 241.49 399.82 T
81 383.48 531 388.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 383.48 531 388.48 R
7 X
0 0 0 1 0 0 0 K
V
50 387.48 609.01 387.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 375.48 T
2 F
(VMVMBlockT) 99 375.48 T
(oMemBlock\050\051) 174.12 375.48 T
3 10 Q
(MemHandle) 99 360.81 T
4 F
(VMVMBlockToMemBlock\050) 159 360.81 T
4 9 Q
(VMFileHandle) 153 350.48 T
(file,) 261 350.48 T
(VmBlockHandle) 153 340.48 T
(block\051;) 261 340.48 T
0 10 Q
(This routine returns the global handle of the memory block attached to a) 180 322.81 T
-0.79 (speci\336ed) 180 311.31 P
0 9 Q
-0.71 (VM) 221.8 311.31 P
0 10 Q
-0.79 ( block. If no global block is currently attached, it will allocate and) 236.79 311.31 P
(attach one.) 180 299.81 T
2 F
(Include:) 99 281.31 T
0 F
(vm.h) 180 281.31 T
81 264.97 531 269.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 264.97 531 269.97 R
7 X
0 0 0 1 0 0 0 K
V
50 268.97 609.01 268.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 256.97 T
2 F
(W) 99 256.97 T
(inAckUpdate\050\051) 110.22 256.97 T
3 10 Q
(void) 99 242.3 T
4 F
(WinAckUpdate\050) 153 242.3 T
4 9 Q
(WindowHandle) 153 231.97 T
(win\051;) 261 231.97 T
0 10 Q
(This routine acknowledges that the application has received) 180 214.3 T
0 9 Q
(MSG_MET) 180 202.8 T
(A_EXPOSED) 226.17 202.8 T
0 10 Q
( for the speci\336ed window) 282.18 202.8 T
(, but chooses not to do any) 395.52 202.8 T
(updating.) 180 191.3 T
2 F
(Include:) 99 172.8 T
0 F
(win.h) 180 172.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "438" 20
%%Page: "439" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(439) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inApplyRotation\050\051) 110.22 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(WinApplyRotation\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win,) 261 609.99 T
(WWFixedAsDWord) 153 599.99 T
(angle,) 261 599.99 T
(WinInvalFlag) 153 589.99 T
(flag\051;) 261 589.99 T
0 10 Q
(This routine applies the speci\336ed rotation to the window\325) 180 572.33 T
(s transformation) 442.44 572.33 T
(matrix.) 180 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(win.h) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(W) 99 517.98 T
(inApplyScale\050\051) 110.22 517.98 T
3 10 Q
(void) 99 503.32 T
4 F
(WinApplyScale\050) 153 503.32 T
4 9 Q
(WindowHandle) 153 492.98 T
(win,) 261 492.98 T
(WWFixedAsDWord) 153 482.98 T
(xScale,) 261 482.98 T
(WWFixedAsDWord) 153 472.98 T
(yScale,) 261 472.98 T
(WinInvalFlag) 153 462.98 T
(flag\051;) 261 462.98 T
0 10 Q
-0.62 (This routine applies the speci\336ed scale factor to the window\325) 180 445.32 P
-0.62 (s transformation) 452.05 445.32 P
(matrix.) 180 433.82 T
2 F
(Include:) 99 415.32 T
0 F
(win.h) 180 415.32 T
81 398.98 531 403.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 398.98 531 403.98 R
7 X
0 0 0 1 0 0 0 K
V
50 402.98 609.01 402.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 390.98 T
2 F
(W) 99 390.98 T
(inApplyT) 110.22 390.98 T
(ranform\050\051) 160.9 390.98 T
3 10 Q
(void) 99 376.31 T
4 F
(WinApplyTransform\050) 153 376.31 T
4 9 Q
(WindowHandle) 153 365.98 T
(win,) 261 365.98 T
(const TransMatrix *) 153 355.98 T
(tm,) 261 355.98 T
(WinInvalFlag) 153 345.98 T
(flag\051;) 261 345.98 T
0 10 Q
(This routine concatenates the passed transformation matrix with the) 180 328.31 T
(window\325) 180 316.81 T
(s transformation matrix. The result will be the window\325) 217.23 316.81 T
(s new) 473.2 316.81 T
(transformation matrix.) 180 305.31 T
2 F
(Include:) 99 286.81 T
0 F
(win.h) 180 286.81 T
81 270.47 531 275.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 270.47 531 275.47 R
7 X
0 0 0 1 0 0 0 K
V
50 274.47 609.01 274.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 262.47 T
2 F
(W) 99 262.47 T
(inApplyT) 110.22 262.47 T
(ranslation\050\051) 160.9 262.47 T
3 10 Q
(void) 99 247.8 T
4 F
(WinApplyTranslation\050) 153 247.8 T
4 9 Q
(WindowHandle) 153 237.47 T
(win,) 261 237.47 T
(WWFixedAsDWord) 153 227.47 T
(xTrans,) 261 227.47 T
(WWFixedAsDword) 153 217.47 T
(yTrans,) 261 217.47 T
(WinInvalFlag) 153 207.47 T
(flag\051;) 261 207.47 T
0 10 Q
-0.61 (This routine applies the speci\336ed translation to the window\325) 180 189.8 P
-0.61 (s transformation) 452.03 189.8 P
(matrix.) 180 178.3 T
2 F
(Include:) 99 159.8 T
0 F
(win.h) 180 159.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "439" 21
%%Page: "440" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(440) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inApplyT) 110.22 634.99 T
(ranslationDW) 160.9 634.99 T
(ord\050\051) 238.02 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(WinApplyExtTranslation\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win,) 261 609.99 T
(sdword) 153 599.99 T
(xTrans,) 261 599.99 T
(sdword) 153 589.99 T
(yTrans,) 261 589.99 T
(WinInvalFlag) 153 579.99 T
(flag\051;) 261 579.99 T
0 10 Q
-0.61 (This routine applies the speci\336ed translation to the window\325) 180 562.33 P
-0.61 (s transformation) 452.03 562.33 P
(matrix. The translations are speci\336ed as 32-bit integers.) 180 550.83 T
2 F
(Include:) 99 532.33 T
0 F
(win.h) 180 532.33 T
81 515.98 531 520.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.98 531 520.99 R
7 X
0 0 0 1 0 0 0 K
V
50 519.98 609.01 519.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 507.98 T
2 F
(W) 99 507.98 T
(inChangeAck\050\051) 110.22 507.98 T
3 10 Q
(WindowHandle) 99 493.32 T
4 F
( WinChangeAck\050) 171 493.32 T
4 9 Q
(WindowHandle) 153 482.98 T
(win,) 261 482.98 T
(sword) 153 472.98 T
(x,) 261 472.98 T
(sword) 153 462.98 T
(y,) 261 462.98 T
(optr *) 153 452.98 T
(winOD\051;) 261 452.98 T
2 10 Q
(Include:) 99 435.32 T
0 F
(win.h) 180 435.32 T
81 418.98 531 423.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 418.98 531 423.98 R
7 X
0 0 0 1 0 0 0 K
V
50 422.98 609.01 422.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 410.98 T
2 F
(W) 99 410.98 T
(inChangePriority\050\051) 110.22 410.98 T
3 10 Q
(void) 99 396.31 T
4 F
(WinChangePriority\050) 153 396.31 T
4 9 Q
(WindowHandle) 153 385.98 T
(win,) 261 385.98 T
(WinPassFlags) 153 375.98 T
(flags,) 261 375.98 T
(word) 153 365.98 T
(layerID\051;) 261 365.98 T
0 10 Q
(This routine changes the priority for the speci\336ed window) 180 348.31 T
(.) 446.12 348.31 T
2 F
(Include:) 99 329.81 T
0 F
(win.h) 180 329.81 T
81 313.47 531 318.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 313.47 531 318.48 R
7 X
0 0 0 1 0 0 0 K
V
50 317.47 609.01 317.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 305.47 T
2 F
(W) 99 305.47 T
(inClose\050\051) 110.22 305.47 T
3 10 Q
(void) 99 290.8 T
4 F
(WinClose\050) 153 290.8 T
4 9 Q
(WindowHandle) 153 280.47 T
(win\051;) 261 280.47 T
0 10 Q
(This routine closes and frees the speci\336ed window) 180 262.8 T
(.) 409.83 262.8 T
2 F
(Include:) 99 244.3 T
0 F
(win.h) 180 244.3 T
81 227.96 531 232.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 227.96 531 232.97 R
7 X
0 0 0 1 0 0 0 K
V
50 231.96 609.01 231.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 219.96 T
2 F
(W) 99 219.96 T
(inDecRefCount\050\051) 110.22 219.96 T
3 10 Q
(void) 99 206.29 T
4 F
(WinDecRefCount\050) 153 206.29 T
4 9 Q
(WindowHandle) 153 195.96 T
(win\051;) 261 195.96 T
0 10 Q
(This routine is part of the window closing mechanism.) 180 178.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "440" 22
%%Page: "441" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(441) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inEnsureChangeNoti\336cation\050\051) 110.22 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(WinEnsureChangeNotification\050void\051;) 153 621.33 T
2 F
(Include:) 99 603.33 T
0 F
(win.h) 180 603.33 T
81 586.98 531 591.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 586.98 531 591.99 R
7 X
0 0 0 1 0 0 0 K
V
50 590.98 609.01 590.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 578.98 T
2 F
(W) 99 578.98 T
(inGeodeGetInputObj\050\051) 110.22 578.98 T
3 10 Q
(optr) 99 565.32 T
4 F
(WinGeodeGetInputObj\050) 153 565.32 T
4 9 Q
(GeodeHandle) 153 554.98 T
(obj\051;) 261 554.98 T
0 10 Q
(This routine fetches the optr of the input object for the speci\336ed geode. If) 180 537.32 T
(there is no such object, it returns a null optr) 180 525.82 T
(.) 383.34 525.82 T
2 F
(Include:) 99 507.32 T
0 F
(win.h) 180 507.32 T
81 490.98 531 495.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 490.98 531 495.98 R
7 X
0 0 0 1 0 0 0 K
V
50 494.98 609.01 494.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 482.98 T
2 F
(W) 99 482.98 T
(inGeodeGetParentObj\050\051) 110.22 482.98 T
3 10 Q
(optr) 99 469.31 T
4 F
(WinGeodeGetParentObj\050) 153 469.31 T
4 9 Q
(GeodeHandle) 153 458.98 T
(obj\051;) 261 458.98 T
0 10 Q
(This routine fetches the optr of the parent object of the speci\336ed geode. If) 180 441.31 T
(there is no such object, it returns a null optr) 180 429.81 T
(.) 383.34 429.81 T
2 F
(Include:) 99 411.31 T
0 F
(win.h) 180 411.31 T
81 394.97 531 399.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 394.97 531 399.98 R
7 X
0 0 0 1 0 0 0 K
V
50 398.97 609.01 398.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 386.97 T
2 F
(W) 99 386.97 T
(inGeodeSetActiveW) 110.22 386.97 T
(in\050\051) 224.14 386.97 T
3 10 Q
(void) 99 373.3 T
4 F
(WinGeodeSetActiveWin\050) 153 373.3 T
4 9 Q
(GeodeHandle) 153 362.97 T
(gh,) 261 362.97 T
(WindowHandle) 153 352.97 T
(win\051;) 261 352.97 T
0 10 Q
(This routine sets the active window for the speci\336ed geode.) 180 335.3 T
2 F
(Include:) 99 316.8 T
0 F
(win.h) 180 316.8 T
81 300.46 531 305.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 300.46 531 305.47 R
7 X
0 0 0 1 0 0 0 K
V
50 304.46 609.01 304.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 292.46 T
2 F
(W) 99 292.46 T
(inGeodeSetInputObj\050\051) 110.22 292.46 T
3 10 Q
(void) 99 278.79 T
4 F
(WinGeodeSetInputObj\050) 153 278.79 T
4 9 Q
(GeodeHandle) 153 268.46 T
(gh,) 261 268.46 T
(optr) 153 258.46 T
(iObj\051;) 261 258.46 T
0 10 Q
(This routine sets the input object for the speci\336ed geode.) 180 240.79 T
2 F
(Include:) 99 222.29 T
0 F
(win.h) 180 222.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "441" 23
%%Page: "442" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(442) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inGeodeSetParentObj\050\051) 110.22 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(WinGeodeSetParentObj\050) 153 621.33 T
4 9 Q
(GeodeHandle) 153 610.99 T
(gh,) 261 610.99 T
(optr) 153 600.99 T
(pObj\051;) 261 600.99 T
0 10 Q
(This routine sets the parent object for the speci\336ed geode.) 180 583.33 T
2 F
(Include:) 99 564.83 T
0 F
(win.h) 180 564.83 T
81 548.48 531 553.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 548.48 531 553.49 R
7 X
0 0 0 1 0 0 0 K
V
50 552.48 609.01 552.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 540.48 T
2 F
(W) 99 540.48 T
(inGeodeSetPtrImage\050\051) 110.22 540.48 T
3 10 Q
(void) 99 526.82 T
4 F
(WinGeodeSetPtrImage\050) 153 526.82 T
4 9 Q
(GeodeHandle) 153 516.48 T
(gh,) 261 516.48 T
(optr) 153 506.48 T
(ptrCh\051;) 261 506.48 T
0 10 Q
(This routine sets the pointer image for the speci\336ed geode.) 180 488.82 T
2 F
(Include:) 99 470.32 T
0 F
(win.h) 180 470.32 T
81 453.98 531 458.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 453.98 531 458.98 R
7 X
0 0 0 1 0 0 0 K
V
50 457.98 609.01 457.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 445.98 T
2 F
(W) 99 445.98 T
(inGetInfo\050\051) 110.22 445.98 T
3 10 Q
(dword) 99 431.31 T
4 F
(WinGetInfo\050) 153 431.31 T
4 9 Q
(WindowHandle) 153 420.98 T
(win,) 261 420.98 T
(WinInfoTypes) 153 410.98 T
(type,) 261 410.98 T
(void *) 153 400.98 T
(data\051;) 261 400.98 T
0 10 Q
(This routine retrieves the private data from a GState.) 180 383.31 T
2 F
(Include:) 99 364.81 T
0 F
(win.h) 180 364.81 T
81 348.47 531 353.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 348.47 531 353.48 R
7 X
0 0 0 1 0 0 0 K
V
50 352.47 609.01 352.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 340.47 T
2 F
(W) 99 340.47 T
(inGetT) 110.22 340.47 T
(ransform\050\051) 147.56 340.47 T
3 10 Q
(void) 99 325.8 T
4 F
(WinGetTransform\050) 153 325.8 T
4 9 Q
(WindowHandle) 153 315.47 T
(win,) 261 315.47 T
(TransMatrix *) 153 305.47 T
(tm\051;) 261 305.47 T
0 10 Q
-0.37 (This routine retrieves the transformation matrix for the speci\336ed window) 180 287.8 P
-0.37 (. It) 515.43 287.8 P
(writes the matrix to) 180 276.3 T
5 F
(*tm) 275.2 276.3 T
0 F
(.) 292.61 276.3 T
2 F
(Include:) 99 257.8 T
0 F
(win.h) 180 257.8 T
81 241.46 531 246.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 241.46 531 246.47 R
7 X
0 0 0 1 0 0 0 K
V
50 245.46 609.01 245.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 233.46 T
2 F
(W) 99 233.46 T
(inGetW) 110.22 233.46 T
(inScreenBounds\050\051) 152.11 233.46 T
3 10 Q
(void) 99 218.79 T
4 F
(WinGetWinScreenBounds\050) 153 218.79 T
4 9 Q
(WindowHandle) 153 208.46 T
(win,) 261 208.46 T
(Rectangle *) 153 198.46 T
(bounds\051;) 261 198.46 T
0 10 Q
(This routine returns the bounds of the on-screen portion of a window) 180 180.79 T
(\050speci\336ed in screen co-ordinates\051. It writes the bounds to) 180 169.29 T
5 F
(*bounds) 443.33 169.29 T
0 F
(.) 481.66 169.29 T
2 F
(Include:) 99 150.79 T
0 F
(win.h) 180 150.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "442" 24
%%Page: "443" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(443) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inGrabChange\050\051) 110.22 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(WinGrabChange\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win,) 261 609.99 T
(optr) 153 599.99 T
(newObj\051;) 261 599.99 T
0 10 Q
-0.13 (This routine allows an object to grab pointer events. It returns zero if it was) 180 582.33 P
(successful; otherwise it returns non-zero.) 180 570.83 T
2 F
(Include:) 99 552.33 T
0 F
(win.h) 180 552.33 T
81 535.98 531 540.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 535.98 531 540.99 R
7 X
0 0 0 1 0 0 0 K
V
50 539.98 609.01 539.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 527.98 T
2 F
(W) 99 527.98 T
(inInvalReg\050\051) 110.22 527.98 T
3 10 Q
(void) 99 513.32 T
4 F
(WinInvalReg\050) 153 513.32 T
4 9 Q
(WindowHandle) 153 502.98 T
(win,) 261 502.98 T
(const Region *) 153 492.98 T
(reg,) 261 492.98 T
(word) 153 482.98 T
(axParam,) 261 482.98 T
(word) 153 472.98 T
(bxParam,) 261 472.98 T
(word) 153 462.98 T
(cxParam,) 261 462.98 T
(word) 153 452.98 T
(dxParam\051;) 261 452.98 T
0 10 Q
(This routine invalidates the speci\336ed region or rectangle.) 180 435.32 T
2 F
(Include:) 99 416.82 T
0 F
(win.h) 180 416.82 T
81 400.48 531 405.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 400.48 531 405.48 R
7 X
0 0 0 1 0 0 0 K
V
50 404.48 609.01 404.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 392.48 T
2 F
(W) 99 392.48 T
(inMove\050\051) 110.22 392.48 T
3 10 Q
(void) 99 377.81 T
4 F
(WinMove\050) 153 377.81 T
4 9 Q
(WindowHandle) 153 367.48 T
(win,) 261 367.48 T
(sword) 153 357.48 T
(xMove,) 261 357.48 T
(sword) 153 347.48 T
(yMove,) 261 347.48 T
(WinPassFlags) 153 337.48 T
(flags\051;) 261 337.48 T
0 10 Q
-0.45 (This routine moves a window) 180 319.81 P
-0.45 (. If the) 312.67 319.81 P
0 9 Q
-0.41 (WPF_ABS) 344.83 319.81 P
0 10 Q
-0.45 ( bit of) 388.83 319.81 P
5 F
-0.45 (\337ags) 416.75 319.81 P
0 F
-0.45 ( is set, the window\325) 438.41 319.81 P
-0.45 (s) 524.04 319.81 P
(new position is speci\336ed relative to its parent\325) 180 308.31 T
(s position. If it is clear) 391.14 308.31 T
(, the) 493.19 308.31 T
(window\325) 180 296.81 T
(s new position is speci\336ed relative to its current position.) 217.23 296.81 T
2 F
(Include:) 99 278.31 T
0 F
(win.h) 180 278.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "443" 25
%%Page: "444" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(444) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inOpen\050\051) 110.22 634.99 T
3 10 Q
(WindowHandle) 99 620.33 T
4 F
( WinOpen\050) 171 620.33 T
4 9 Q
(Handle) 153 609.99 T
(parentWinOrVidDr,) 261 609.99 T
(optr) 153 599.99 T
(inputRecipient,) 261 599.99 T
(optr) 153 589.99 T
(exposureRecipient,) 261 589.99 T
(WinColorFlags) 153 579.99 T
(colorFlags,) 261 579.99 T
(word) 153 569.99 T
(redOrIndex,) 261 569.99 T
(word) 153 559.99 T
(green,) 261 559.99 T
(word) 153 549.99 T
(blue,) 261 549.99 T
(word) 153 539.99 T
(flags,) 261 539.99 T
(word) 153 529.99 T
(layerID,) 261 529.99 T
(GeodeHandle) 153 519.99 T
(owner,) 261 519.99 T
(const Region *) 153 509.99 T
(winReg,) 261 509.99 T
(word) 153 499.99 T
(axParam,) 261 499.99 T
(word) 153 489.99 T
(bxParam,) 261 489.99 T
(word) 153 479.99 T
(cxParam,) 261 479.99 T
(word) 153 469.99 T
(dxParam\051;) 261 469.99 T
0 10 Q
-0.72 (This routine allocates and initializes a window and \050optionally\051 an associated) 180 452.33 P
(GState.) 180 440.83 T
2 F
(Include:) 99 422.33 T
0 F
(win.h) 180 422.33 T
81 405.98 531 410.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 405.98 531 410.99 R
7 X
0 0 0 1 0 0 0 K
V
50 409.98 609.01 409.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 397.98 T
2 F
(W) 99 397.98 T
(inReleaseChange\050\051) 110.22 397.98 T
3 10 Q
(void) 99 384.32 T
4 F
(WinReleaseChange\050) 153 384.32 T
4 9 Q
(WindowHandle) 153 373.98 T
(win,) 261 373.98 T
(optr) 153 363.98 T
(obj\051;) 261 363.98 T
0 10 Q
(This routine releases an object\325) 180 346.32 T
(s grab on the change) 322.98 346.32 T
0 9 Q
(OD) 421.14 346.32 T
0 10 Q
(.) 435.14 346.32 T
2 F
(Include:) 99 327.82 T
0 F
(win.h) 180 327.82 T
81 311.48 531 316.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 311.48 531 316.48 R
7 X
0 0 0 1 0 0 0 K
V
50 315.48 609.01 315.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 303.48 T
2 F
(W) 99 303.48 T
(inResize\050\051) 110.22 303.48 T
3 10 Q
(void) 99 288.81 T
4 F
(WinResize\050) 153 288.81 T
4 9 Q
(WindowHandle) 153 278.47 T
(win,) 261 278.47 T
(const Region *) 153 268.47 T
(reg,) 261 268.47 T
(word) 153 258.47 T
(axParam,) 261 258.47 T
(word) 153 248.47 T
(bxParam,) 261 248.47 T
(word) 153 238.47 T
(cxParam,) 261 238.47 T
(WinPassFlags) 153 228.47 T
(flags\051;) 261 228.47 T
0 10 Q
(This routine resizes a window) 180 210.81 T
(. It can move it as well.) 317.24 210.81 T
2 F
(Include:) 99 192.31 T
0 F
(win.h) 180 192.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "444" 26
%%Page: "445" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(445) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inScroll\050\051) 110.22 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(WinScroll\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win,) 261 609.99 T
(WWFixedAsDWord) 153 599.99 T
(xMove,) 261 599.99 T
(WWFixedAsSWord) 153 589.99 T
(yMove,) 261 589.99 T
(PointWWFixed *) 153 579.99 T
(scrollAmt\051;) 261 579.99 T
0 10 Q
(This routine scrolls a window) 180 562.33 T
(.) 315.02 562.33 T
2 F
(Include:) 99 543.83 T
0 F
(win.h) 180 543.83 T
81 527.48 531 532.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.48 531 532.49 R
7 X
0 0 0 1 0 0 0 K
V
50 531.48 609.01 531.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.48 T
2 F
(W) 99 519.48 T
(inSetInfo\050\051) 110.22 519.48 T
3 10 Q
(void) 99 504.82 T
4 F
(WinSetInfo\050) 153 504.82 T
4 9 Q
(WindowHandle) 153 494.48 T
(win,) 261 494.48 T
(WinInfoType) 153 484.48 T
(type,) 261 484.48 T
(dword) 153 474.48 T
(data\051;) 261 474.48 T
0 10 Q
(This routine sets some data for the speci\336ed window) 180 456.82 T
(.) 421.14 456.82 T
2 F
(Include:) 99 438.32 T
0 F
(win.h) 180 438.32 T
81 421.98 531 426.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 421.98 531 426.98 R
7 X
0 0 0 1 0 0 0 K
V
50 425.98 609.01 425.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 413.98 T
2 F
(W) 99 413.98 T
(inSetNullT) 110.22 413.98 T
(ransform\050\051) 168.9 413.98 T
3 10 Q
(void) 99 399.31 T
4 F
(WinSetNullTransform\050) 153 399.31 T
4 9 Q
(WindowHandle) 153 388.98 T
(win,) 261 388.98 T
(WinInvalFlag) 153 378.98 T
(flag\051;) 261 378.98 T
0 10 Q
(This routine changes a window\325) 180 361.31 T
(s transformation matrix to the null \050or) 325.39 361.31 T
(identity\051 matrix.) 180 349.81 T
2 F
(Include:) 99 331.31 T
0 F
(win.h) 180 331.31 T
81 314.97 531 319.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 314.97 531 319.98 R
7 X
0 0 0 1 0 0 0 K
V
50 318.97 609.01 318.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 306.97 T
2 F
(W) 99 306.97 T
(inSetPtrImage\050\051) 110.22 306.97 T
3 10 Q
(void) 99 293.3 T
4 F
(WinSetPtrImage\050) 153 293.3 T
4 9 Q
(WindowHandle) 153 282.97 T
(win,) 261 282.97 T
(WinSetPtrImageLevel) 153 272.97 T
(ptrLevel,) 261 272.97 T
(optr) 153 262.97 T
(ptrCh\051;) 261 262.97 T
0 10 Q
-0.67 (This routine sets the pointer image within the range handled by the speci\336ed) 180 245.3 P
(window) 180 233.8 T
(.) 214.64 233.8 T
2 F
(Include:) 99 215.3 T
0 F
(win.h) 180 215.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "445" 27
%%Page: "446" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(446) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inSetT) 110.22 634.99 T
(ransform\050\051) 146.23 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(WinSetTransform\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win,) 261 609.99 T
(const TransMatrix *) 153 599.99 T
(tm,) 261 599.99 T
(WinInvalFlag) 153 589.99 T
(flag\051;) 261 589.99 T
0 10 Q
(This routine replaces the window\325) 180 572.33 T
(s transformation matrix with the one) 335.57 572.33 T
(passed in) 180 560.83 T
5 F
(*tm) 226.12 560.83 T
0 F
(.) 243.53 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(win.h) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(W) 99 517.98 T
(inSuspendUpdate\050\051) 110.22 517.98 T
3 10 Q
(void) 99 503.32 T
4 F
(WinSuspendUpdate\050) 153 503.32 T
4 9 Q
(WindowHandle) 153 492.98 T
(win\051;) 261 492.98 T
0 10 Q
(This routine suspends the sending of update messages to the window) 180 475.32 T
(. The) 498.37 475.32 T
(messages will be sent when) 180 463.82 T
6 F
(W) 310.03 463.82 T
(inUnSuspendUpdate\050\051) 319.47 463.82 T
0 F
( is called.) 435.21 463.82 T
2 F
(Include:) 99 445.32 T
0 F
(win.h) 180 445.32 T
81 428.98 531 433.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 428.98 531 433.98 R
7 X
0 0 0 1 0 0 0 K
V
50 432.98 609.01 432.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 420.98 T
2 F
(W) 99 420.98 T
(inT) 110.22 420.98 T
(ransform\050\051) 127.56 420.98 T
3 10 Q
(XYValueAsDWord) 99 407.31 T
4 F
(WinTransform\050) 189 407.31 T
4 9 Q
(WindowHandle) 153 396.98 T
(win,) 261 396.98 T
(sword) 153 386.98 T
(x,) 261 386.98 T
(sword) 153 376.98 T
(y\051;) 261 376.98 T
0 10 Q
(This routine translates the passed document coordinates into screen) 180 359.31 T
(coordinates.) 180 347.81 T
2 F
(Include:) 99 329.31 T
0 F
(win.h) 180 329.31 T
81 312.97 531 317.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 312.97 531 317.98 R
7 X
0 0 0 1 0 0 0 K
V
50 316.97 609.01 316.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 304.97 T
2 F
(W) 99 304.97 T
(inT) 110.22 304.97 T
(ransformDW) 127.56 304.97 T
(ord\050\051) 199.34 304.97 T
3 10 Q
(void) 99 291.3 T
4 F
(WinTransformDWord\050) 153 291.3 T
4 9 Q
(WindowHandle) 153 280.97 T
(win,) 261 280.97 T
(sdword) 153 270.97 T
(xCoord,) 261 270.97 T
(sdword) 153 260.97 T
(yCoord,) 261 260.97 T
(PointDWord *) 153 250.97 T
(screenCoordinates\051;) 261 250.97 T
0 10 Q
(This routine translates the passed document coordinates into screen) 180 233.3 T
(coordinates. The translated coordinates are written to) 180 221.8 T
5 F
(*screenCoordinates) 432.06 221.8 T
0 F
(.) 520.72 221.8 T
2 F
(Include:) 99 203.3 T
0 F
(win.h) 180 203.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "446" 28
%%Page: "447" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(447) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(W) 99 634.99 T
(inUnSuspendUpdate\050\051) 110.22 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(WinUnSuspendUpdate\050) 153 620.33 T
4 9 Q
(WindowHandle) 153 609.99 T
(win\051;) 261 609.99 T
0 10 Q
(This routine cancels a previous) 180 592.33 T
6 F
(W) 326.49 592.33 T
(inSuspendUpdate\050\051) 335.93 592.33 T
0 F
( call.) 436.49 592.33 T
2 F
(Include:) 99 573.83 T
0 F
(win.h) 180 573.83 T
81 557.48 531 562.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 557.48 531 562.49 R
7 X
0 0 0 1 0 0 0 K
V
50 561.48 609.01 561.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 549.48 T
2 F
(W) 99 549.48 T
(inUntransform) 110.22 549.48 T
3 10 Q
(XYValueAsDWord) 99 535.82 T
4 F
(WinUntransform\050) 189 535.82 T
4 9 Q
(WindowHandle) 153 525.48 T
(win,) 261 525.48 T
(sword) 153 515.48 T
(x,) 261 515.48 T
(sword) 153 505.48 T
(y\051;) 261 505.48 T
0 10 Q
(This routine translates the passed screen coordinates into document) 180 487.82 T
(coordinates.) 180 476.32 T
2 F
(Include:) 99 457.82 T
0 F
(win.h) 180 457.82 T
81 441.48 531 446.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 441.48 531 446.48 R
7 X
0 0 0 1 0 0 0 K
V
50 445.48 609.01 445.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 433.48 T
2 F
(W) 99 433.48 T
(inUnT) 110.22 433.48 T
(ransformDW) 143.56 433.48 T
(ord\050\051) 215.34 433.48 T
3 10 Q
(void) 99 419.81 T
4 F
(WinTransformDWord\050) 153 419.81 T
4 9 Q
(WindowHandle) 153 409.48 T
(win,) 261 409.48 T
(sdword) 153 399.48 T
(xCoord,) 261 399.48 T
(sdword) 153 389.48 T
(yCoord,) 261 389.48 T
(PointDWord *) 153 379.48 T
(documentCoordinates\051;) 261 379.48 T
0 10 Q
(This routine translates the passed screen coordinates into document) 180 361.81 T
(coordinates. The translated coordinates are written to) 180 350.31 T
5 F
(*documentCoordinates) 180 338.81 T
0 F
(.) 284.97 338.81 T
2 F
(Include:) 99 320.31 T
0 F
(win.h) 180 320.31 T
81 303.97 531 308.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 303.97 531 308.98 R
7 X
0 0 0 1 0 0 0 K
V
50 307.97 609.01 307.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 295.97 T
2 F
(WWFixedT) 99 295.97 T
(oFrac) 159.44 295.97 T
4 10 Q
(word) 99 281.3 T
(WWFixedToFrac\050WWFixed wwf\051) 153 281.3 T
0 F
-0.38 (This macro lets you address the fractional portion of a) 180 263.3 P
6 F
-0.39 (WWFixed) 428.63 263.3 P
0 F
-0.38 ( value. It is) 477.69 263.3 P
(legal to use this to assign a value to the fractional protion; that is,) 180 251.8 T
4 9 Q
(WWFixedToFrac\050myWWFixed\051 = 5;) 216 236.97 T
0 10 Q
(is perfectly legal.) 180 219.3 T
2 F
(Include:) 99 200.8 T
0 F
(geos.h) 180 200.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "447" 29
%%Page: "448" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
2 14 Q
0 X
(Chapter Title) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
0 10 Q
0 X
(448) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(WWFixedT) 99 634.99 T
(oInt) 159.44 634.99 T
4 10 Q
(word) 99 620.33 T
(WWFixedToInt\050WWFixed wwf\051) 153 620.33 T
0 F
-0.09 (This macro lets you address the intetgral portion of a) 180 602.33 P
6 F
-0.09 (WWFixed) 427.47 602.33 P
0 F
-0.09 ( value. It is) 476.53 602.33 P
(legal to use this to assign a value to the integral protion; that is,) 180 590.83 T
4 9 Q
(WWFixedToInt\050myWWFixed\051 = 5;) 216 575.99 T
0 10 Q
(is perfectly legal.) 180 558.33 T
2 F
(Include:) 99 539.83 T
0 F
(geos.h) 180 539.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "448" 30
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 30
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Helvetica-Bold
%%+ Courier-Bold
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%EOF
