%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
1 1 /ZapfDingbats FMFONTDEFINE
2 0 /Helvetica-Bold FMFONTDEFINE
3 0 /Courier-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Bold FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /Courier-Oblique FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "237" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(237) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 620.99 531 626 R
7 X
0 0 0 1 0 0 0 K
V
50 624.99 609.01 624.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 612.99 T
2 F
(HAL_COUNT\050\051) 99 612.99 T
3 10 Q
(word) 99 598.33 T
4 F
(HAL_COUNT\050) 153 598.33 T
4 9 Q
(dword) 153 587.99 T
(val\051;) 189 587.99 T
0 10 Q
-0.66 (This macro is provided for use with) 180 570.33 P
5 F
-0.68 (HugeArrayLock\050\051) 341.14 570.33 P
0 F
-0.66 (. It extracts the lower) 432.07 570.33 P
-0.58 (word of the) 180 558.83 P
5 F
-0.6 (HugeArrayLock\050\051) 232.88 558.83 P
0 F
-0.58 ( return value. This is the number of elements) 323.81 558.83 P
(in the Huge Array block after the locked one \050counting that locked one\051.) 180 547.33 T
81 532.48 531 537.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 532.48 531 537.49 R
7 X
0 0 0 1 0 0 0 K
V
50 536.48 609.01 536.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 524.48 T
2 F
(HAL_PREV) 99 524.48 T
3 10 Q
(word) 99 510.82 T
4 F
(HAL_PREV\050) 153 510.82 T
4 9 Q
(dword) 153 500.48 T
(val\051;) 189 500.48 T
0 10 Q
-0.8 (This macro is provided for use with) 180 482.82 P
5 F
-0.82 (HugeArrayLock\050\051) 340.17 482.82 P
0 F
-0.8 (. It extracts the upper) 431.1 482.82 P
-0.58 (word of the) 180 471.32 P
5 F
-0.6 (HugeArrayLock\050\051) 232.88 471.32 P
0 F
-0.58 ( return value. This is the number of elements) 323.81 471.32 P
(in the Huge Array block before the locked one \050counting that locked one\051.) 180 459.82 T
81 444.98 531 449.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 444.98 531 449.98 R
7 X
0 0 0 1 0 0 0 K
V
50 448.98 609.01 448.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 436.98 T
2 F
(HandleModifyOwner\050\051) 99 436.98 T
3 10 Q
(void) 99 422.31 T
4 F
(HandleModifyOwner\050) 153 422.31 T
4 9 Q
(MemHandle) 153 411.98 T
(mh,) 261 411.98 T
(/* Handle of block to modify */) 315 411.98 T
(GeodeHandle) 153 401.98 T
(owner\051;) 261 401.98 T
(/* Handle of block\325s new owner */) 315 401.98 T
0 10 Q
(This routine changes the owner of the indicated global memory block. Note) 180 384.31 T
(that this routine can be called only by a thread belonging to the block\325) 180 372.81 T
(s) 502.1 372.81 T
-0.5 (original owner; that is, you can only use this routine to transfer ownership of) 180 361.31 P
(a block) 180 349.81 T
6 F
(from) 215.2 349.81 T
0 F
( yourself) 236.86 349.81 T
6 F
(to) 279.45 349.81 T
0 F
( some other geode.) 287.97 349.81 T
2 F
(Include:) 99 331.31 T
0 F
(heap.def) 180 331.31 T
2 F
(Never Use Situations:) 99 311.31 T
0 F
-0.34 (Never use this unless the block already belongs to you and you are giving up) 180 298.31 P
(ownership.) 180 285.31 T
2 F
(See Also:) 99 265.31 T
0 F
(MemGetInfo\050\051, MemModifyFlags\050\051, MemModifyOtherInfo\050\051) 180 265.31 T
81 248.97 531 253.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 248.97 531 253.98 R
7 X
0 0 0 1 0 0 0 K
V
50 252.97 609.01 252.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 240.97 T
2 F
(HandleP\050\051) 99 240.97 T
3 10 Q
(void) 99 226.3 T
4 F
(HandleP\050) 153 226.3 T
4 9 Q
(MemHandle) 153 215.97 T
(mh\051;) 261 215.97 T
(/* Handle of block to grab */) 297 215.97 T
0 10 Q
-0.06 (If several different threads will be accessing the same global memory block,) 180 198.3 P
-0.49 (they need to make sure their activities will not con\337ict. The way they do that) 180 186.8 P
-0.63 (is to use synchronization routines to get control of a block.) 180 175.3 P
5 F
-0.65 (HandleP\050\051) 444.18 175.3 P
0 F
-0.63 ( is part) 497.14 175.3 P
(of one set of synchronization routines.) 180 163.8 T
81 144 531 648 C
235.5 633 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 633 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 1
%%Page: "238" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(238) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.82 (If the threads are using this family of routines, then whenever a thread needs) 180 641.33 P
(access to the block in question, it can call) 180 629.83 T
5 F
(HandleP\050\051) 372.63 629.83 T
0 F
(. This routine checks) 425.59 629.83 T
(whether any thread has grabbed the block with) 180 618.33 T
5 F
(HandleP\050\051) 401.89 618.33 T
0 F
( \050or) 454.85 618.33 T
5 F
(MemPLock\050\051) 180 606.83 T
0 F
(\051. If no thread has the block, it grabs the block for the calling) 246.11 606.83 T
-0.36 (thread and returns \050it does not lock the block on the global heap\051. If a thread) 180 595.33 P
(has the block,) 180 583.83 T
5 F
(HandleP\050\051) 246.5 583.83 T
0 F
( puts the thread on a priority queue and sleeps.) 299.46 583.83 T
(When the block is free for it to take, it awakens, grabs the block, and) 180 572.33 T
(returns.When the thread is done with the block, it should release it with) 180 560.83 T
5 F
(MemUnlockV\050\051) 180 549.33 T
0 F
( or) 257.59 549.33 T
5 F
(HandleV\050\051) 272.59 549.33 T
0 F
(.) 325.55 549.33 T
2 F
(Include:) 99 530.83 T
0 F
(heap.h) 180 530.83 T
2 F
(T) 99 510.83 T
(ips and T) 104.93 510.83 T
(ricks:) 148.28 510.83 T
0 F
(If you will be locking the block after you grab it, use the routine) 180 510.83 T
5 F
(MemPLock\050\051) 180 497.83 T
0 F
( \050which calls) 246.11 497.83 T
5 F
(HandleP\050\051) 306.3 497.83 T
0 F
( and then locks the block with) 359.26 497.83 T
5 F
-0.58 (MemLock\050\051) 180 484.83 P
0 F
-0.57 (\051. Y) 238.52 484.83 P
-0.57 (ou can \336nd out if the block is being accessed by looking at the) 252.77 484.83 P
6 F
-0.09 (HM_otherInfo) 180 471.83 P
0 F
-0.09 ( word \050with) 244.79 471.83 P
5 F
-0.09 (MemGetInfo\050\051) 300.08 471.83 P
0 F
-0.09 (\051. If) 372.66 471.83 P
6 F
-0.09 (HM_otherInfo) 391.55 471.83 P
0 F
-0.09 ( equals one, the) 456.34 471.83 P
(block is not grabbed; if it equals zero, it is grabbed, but no threads are) 180 458.83 T
(queued; otherwise, it equals the handle of the \336rst thread queued.) 180 445.83 T
2 F
(Be Sure T) 99 425.83 T
(o:) 144.94 425.83 T
0 F
(Make sure that all threads accessing the block use) 180 425.83 T
5 F
(HandleP\050\051) 415.96 425.83 T
0 F
( and/or) 468.92 425.83 T
5 F
-0.68 (MemPLock\050\051) 180 412.83 P
0 F
-0.66 ( to access the block. The routines use the) 246.11 412.83 P
6 F
-0.66 (HM_otherInfo) 431.51 412.83 P
0 F
-0.66 ( \336eld of) 496.3 412.83 P
(the handle table entry; do not alter this \336eld. Release the block with) 180 399.83 T
5 F
(HandleV\050\051) 180 386.83 T
0 F
( or) 232.96 386.83 T
5 F
(MemUnlockV\050\051) 247.96 386.83 T
0 F
( when you are done with it.) 325.55 386.83 T
2 F
(W) 99 366.83 T
(arnings:) 108.07 366.83 T
0 F
(If a thread calls) 180 366.83 T
5 F
(HandleP\050\051) 255.75 366.83 T
0 F
( when it already has control of the block, it will) 308.71 366.83 T
(deadlock;) 180 353.83 T
5 F
(HandleP\050\051) 226.12 353.83 T
0 F
( will put the thread to sleep until the thread releases) 279.08 353.83 T
(the block, but the thread will not be able to release the block because it\325) 180 340.83 T
(s) 509.9 340.83 T
(sleeping.) 180 327.83 T
5 F
(MemThreadGrab\050\051) 223.71 327.83 T
0 F
( avoids this con\337ict. If you try to grab a) 320.56 327.83 T
(non-sharable block owned by another thread,) 180 314.83 T
5 F
(HandleP\050\051) 391.51 314.83 T
0 F
( will fatal-error) 444.47 314.83 T
(.) 514.66 314.83 T
2 F
(See Also:) 99 294.83 T
0 F
(HandleV\050\051, MemPLock\050\051, MemUnlockV\050\051) 180 294.83 T
81 278.49 531 283.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 278.49 531 283.5 R
7 X
0 0 0 1 0 0 0 K
V
50 282.49 609.01 282.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 270.49 T
2 F
(HandleT) 99 270.49 T
(oOptr\050\051) 145.45 270.49 T
3 10 Q
(optr) 99 255.83 T
4 F
(HandleToOptr\050) 153 255.83 T
4 9 Q
(Handle) 153 245.49 T
(han;) 190.8 245.49 T
0 10 Q
-0.08 (This macro casts any handle to an optr) 180 227.83 P
-0.08 (, leaving the chunk handle portion of) 358.56 227.83 P
(the resultant optr to be zero.) 180 216.33 T
2 F
(See Also:) 99 197.83 T
0 F
(ConstructOptr\050\051, OptrT) 180 197.83 T
(oHandle\050\051, OptrT) 287.4 197.83 T
(oChunk\050\051) 366.11 197.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 2
%%Page: "239" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(239) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HandleV\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(HandleV\050) 153 620.33 T
4 9 Q
(MemHandle) 153 609.99 T
(mh\051;) 261 609.99 T
(/* Handle of block to grab */) 297 609.99 T
5 10 Q
(HandleV\050\051) 180 592.33 T
0 F
( is part of a set of synchronization routines. If several different) 232.96 592.33 T
(threads will be accessing the same global memory block, they need to make) 180 580.83 T
(sure their activities will not con\337ict. The way they do that is to use) 180 569.33 T
(synchronization routines to get control of a block.) 180 557.83 T
5 F
(HandleV\050\051) 410.38 557.83 T
0 F
( is part of one) 463.34 557.83 T
(set of synchronization routines.) 180 546.33 T
-0.44 (If a block is being accessed via these synchronization routines, then a thread) 180 527.83 P
(will not access a block until it has \322grabbed\323 it with) 180 516.33 T
5 F
(HandleP\050\051) 419.88 516.33 T
0 F
( or) 472.84 516.33 T
5 F
-0.47 (MemPLock\050\051) 180 504.83 P
0 F
-0.46 (. When a thread is done with the block, it can release it for use) 246.11 504.83 P
(by the other threads by calling) 180 493.33 T
5 F
(HandleV\050\051) 324.28 493.33 T
0 F
(. Note that) 377.24 493.33 T
5 F
(HandleV\050\051) 429.85 493.33 T
0 F
( does not) 482.81 493.33 T
-0.07 (unlock the block; it just changes the block\325) 180 481.83 P
-0.07 (s semaphore so other threads can) 374.18 481.83 P
(grab it.) 180 470.33 T
2 F
(Include:) 99 451.83 T
0 F
(heap.h) 180 451.83 T
2 F
(T) 99 431.83 T
(ips and T) 104.93 431.83 T
(ricks:) 148.28 431.83 T
0 F
(If you need to unlock the thread just before releasing it, use the routine) 180 431.83 T
5 F
-0.01 (MemUnlockV\050\051) 180 418.83 P
0 F
-0.01 (, which \336rst unlocks the thread, and then calls) 257.59 418.83 P
5 F
-0.01 (HandleV\050\051) 475.27 418.83 P
0 F
-0.05 (to release it. Y) 180 405.83 P
-0.05 (ou can \336nd out if the block is being accessed by looking at the) 245.6 405.83 P
6 F
-0.09 (HM_otherInfo) 180 392.83 P
0 F
-0.09 ( word \050with) 244.79 392.83 P
5 F
-0.09 (MemGetInfo\050\051) 300.08 392.83 P
0 F
-0.09 (\051. If) 372.66 392.83 P
6 F
-0.09 (HM_otherInfo) 391.55 392.83 P
0 F
-0.09 ( equals one, the) 456.34 392.83 P
(block is not grabbed; if it equals zero, it is grabbed, but no threads are) 180 379.83 T
(queued; otherwise, it equals the handle of the \336rst thread queued.) 180 366.83 T
2 F
(Be Sure T) 99 346.83 T
(o:) 144.94 346.83 T
0 F
(Make sure that all threads accessing the block use) 180 346.83 T
5 F
(HandleP\050\051) 415.96 346.83 T
0 F
( or) 468.92 346.83 T
5 F
-0.32 (MemPLock\050\051) 180 333.83 P
0 F
-0.31 ( to access the thread. The routines use the) 246.11 333.83 P
6 F
-0.31 ( HM_otherInfo) 438.81 333.83 P
0 F
-0.31 ( \336eld) 506.07 333.83 P
(of the handle table entry; do not alter this \336eld.) 180 320.83 T
2 F
(W) 99 300.83 T
(arnings:) 108.07 300.83 T
0 F
(Do not use this on a block unless you have grabbed it. The routine does not) 180 300.83 T
(check to see that you have grabbed the thread; it just clears the semaphore) 180 287.83 T
(and returns.) 180 274.83 T
2 F
(See Also:) 99 254.83 T
0 F
(HandleP\050\051, MemPLock\050\051, MemUnlockV\050\051) 180 254.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "239" 3
%%Page: "240" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(240) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HugeArrayAppend\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(HugeArrayAppend\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(file,) 261 609.99 T
(VMBlockhandle) 153 599.99 T
(vmBlock,) 261 599.99 T
(/* Handle of directory block */) 333 599.99 T
(word) 153 589.99 T
(numElem,) 261 589.99 T
(/* # of elements to add to end of) 333 589.99 T
( * array */) 315 579.99 T
(const void *) 153 569.99 T
(initData\051;) 261 569.99 T
(/* Copy into each new element */) 333 569.99 T
0 10 Q
(This routine appends one or more elements to a Huge Array) 180 552.33 T
(. The data) 456.31 552.33 T
(pointed to by) 180 540.83 T
6 F
(initData) 242.79 540.83 T
0 F
( will be copied into each new element. If) 281.86 540.83 T
6 F
(initData) 469.11 540.83 T
0 F
( is a) 508.18 540.83 T
(null pointer) 180 529.33 T
(, the elements will be uninitialized.) 233.89 529.33 T
-0.31 (If the Huge Array contains variable sized elements, this routine will append) 180 510.83 P
(a single element; this element will be) 180 499.33 T
6 F
(numElem) 354.86 499.33 T
0 F
( bytes long.) 399.85 499.33 T
2 F
(Include:) 99 480.83 T
0 F
(hugearr) 180 480.83 T
(.h) 216.29 480.83 T
81 464.48 531 469.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 464.48 531 469.49 R
7 X
0 0 0 1 0 0 0 K
V
50 468.48 609.01 468.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 456.48 T
2 F
(HugeArrayCompressBlocks\050\051) 99 456.48 T
3 10 Q
(void) 99 441.82 T
4 F
(HugeArrayCompressBlocks\050) 153 441.82 T
4 9 Q
(VMFileHandle) 153 431.48 T
(vmFile,) 261 431.48 T
(/* File containing Huge Array */) 315 431.48 T
(VMBlockHandle) 153 421.48 T
(vmBlock\051;) 261 421.48 T
(/* handle of directory block */) 315 421.48 T
0 10 Q
-0.04 (This routine compacts a Huge Array) 180 403.82 P
-0.04 (, resizing every block to be just as large) 346.86 403.82 P
-0.55 (as necessary to accommodate its elements. It does not change any of the data) 180 392.32 P
(in the Huge Array) 180 380.82 T
(.) 263.33 380.82 T
2 F
(Include:) 99 362.32 T
0 F
(hugearr) 180 362.32 T
(.h) 216.29 362.32 T
81 345.98 531 350.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 345.98 531 350.98 R
7 X
0 0 0 1 0 0 0 K
V
50 349.98 609.01 349.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 337.98 T
2 F
(HugeArrayContract\050\051) 99 337.98 T
3 10 Q
(word) 99 323.31 T
4 F
(HugeArrayContract\050) 153 323.31 T
4 9 Q
(void **) 153 312.98 T
(elemPtr,) 261 312.98 T
(/* **elemPtr is first element to) 333 312.98 T
( * delete */) 315 302.98 T
(word) 153 292.98 T
(numElem\051;) 261 292.98 T
(/* # of elements to delete */) 333 292.98 T
0 10 Q
(Delete a number of elements starting at an address in a Huge Array) 180 275.31 T
(. The) 494.3 275.31 T
-0.75 (routine will \336x up the pointer so it points to the \336rst element after the deleted) 180 263.81 P
-0.54 (elements. The routine automatically locks and unlocks Huge Array blocks as) 180 252.31 P
(necessary) 180 240.81 T
(.) 224.07 240.81 T
2 F
(Include:) 99 222.31 T
0 F
(hugearr) 180 222.31 T
(.h) 216.29 222.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "240" 4
%%Page: "241" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(241) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HugeArrayCreate\050\051) 99 634.99 T
3 10 Q
(VMBlockhandle) 99 620.33 T
4 F
(HugeArrayCreate\050) 183 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(vmFile,) 261 609.99 T
(/* Create in this VM file */) 333 609.99 T
(word) 153 599.99 T
(elemSize,) 261 599.99 T
(/* Pass zero for variable-size) 333 599.99 T
( * elements */) 315 589.99 T
(word) 153 579.99 T
(headerSize\051;) 261 579.99 T
(/* Pass zero for default header */) 333 579.99 T
0 10 Q
(This routine creates and initializes a Huge Array in the speci\336ed \336le. It) 180 562.33 T
(returns the handle of the Huge Array\325) 180 550.83 T
(s directory block.) 354.81 550.83 T
2 F
(Include:) 99 532.33 T
0 F
(hugearr) 180 532.33 T
(.h) 216.29 532.33 T
81 515.98 531 520.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.98 531 520.99 R
7 X
0 0 0 1 0 0 0 K
V
50 519.98 609.01 519.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 507.98 T
2 F
(HugeArrayDelete\050\051) 99 507.98 T
3 10 Q
(void) 99 493.32 T
4 F
(HugeArrayDelete\050) 153 493.32 T
4 9 Q
(VMFileHandle) 153 482.98 T
(vmFile,) 261 482.98 T
(VMBlockHandle) 153 472.98 T
(vmBlock,) 261 472.98 T
(/* handle of directory block */) 315 472.98 T
(word) 153 462.98 T
(numElem,) 261 462.98 T
(/* # of elements to delete */) 315 462.98 T
(dword) 153 452.98 T
(elemNum\051;) 261 452.98 T
(/* Index of first element to delete */) 315 452.98 T
0 10 Q
(This routine deletes one or more elements from a Huge Array) 180 435.32 T
(. It contracts) 462.97 435.32 T
(and frees blocks as necessary) 180 423.82 T
(.) 313.9 423.82 T
2 F
(Include:) 99 405.32 T
0 F
(hugearr) 180 405.32 T
(.h) 216.29 405.32 T
81 388.98 531 393.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 388.98 531 393.98 R
7 X
0 0 0 1 0 0 0 K
V
50 392.98 609.01 392.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 380.98 T
2 F
(HugeArrayDirty\050\051) 99 380.98 T
3 10 Q
(void) 99 366.31 T
4 F
(HugeArrayDirty\050) 153 366.31 T
4 9 Q
(const void *) 153 355.98 T
(elemPtr\051;) 261 355.98 T
(/* Element in dirty block */) 333 355.98 T
0 10 Q
-0.25 (This routine marks a block in a Huge Array as dirty) 180 338.31 P
-0.25 (. The routine is passed a) 416.94 338.31 P
(pointer to anywhere in a dirty element; that element\325) 180 326.81 T
(s block will be dirtied.) 425.22 326.81 T
2 F
(Include:) 99 308.31 T
0 F
(hugearr) 180 308.31 T
(.h) 216.29 308.31 T
2 F
(W) 99 288.31 T
(arnings:) 108.07 288.31 T
0 F
(Be sure to call this routine before you unlock the element; otherwise, the) 180 288.31 T
(block may be discarded before you can dirty it.) 180 275.31 T
81 258.97 531 263.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 258.97 531 263.97 R
7 X
0 0 0 1 0 0 0 K
V
50 262.97 609.01 262.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 250.97 T
2 F
(HugeArrayDestroy\050\051) 99 250.97 T
3 10 Q
(void) 99 236.3 T
4 F
(HugeArrayDestroy\050) 153 236.3 T
4 9 Q
(VMFileHandle) 153 225.97 T
(vmFile,) 261 225.97 T
(VMBlockHandle) 153 215.97 T
(vmBlock\051;) 261 215.97 T
(/* Handle of directory block */) 315 215.97 T
0 10 Q
(This routine destroys a HugeArray by freeing all of its blocks.) 180 198.3 T
2 F
(Include:) 99 179.8 T
0 F
(hugearr) 180 179.8 T
(.h) 216.29 179.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "241" 5
%%Page: "242" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(242) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HugeArrayEnum\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(HugeArrayEnum\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(vmFile,) 261 609.99 T
(/* subject to override */) 315 609.99 T
(VMBlockHandle) 153 599.99 T
(vmBlock,) 261 599.99 T
(/* Handle of the Huge Array\325s directory) 315 599.99 T
( * block */) 297 589.99 T
(Boolean) 153 579.99 T
( _pascal) 190.8 579.99 T
(\050*callback\051 \050) 261 579.99 T
(/* return) 369 579.99 T
7 F
(true) 423 579.99 T
4 F
( to stop */) 444.6 579.99 T
(void *) 261 569.99 T
(element,) 315 569.99 T
(/* element to examine */) 369 569.99 T
(void *) 261 559.99 T
(enumData\051,) 315 559.99 T
(dword) 153 549.99 T
(startElement,) 261 549.99 T
(/* first element to examine */) 333 549.99 T
(dword) 153 539.99 T
(count,) 261 539.99 T
(/* examine this many elements */) 315 539.99 T
(void *) 153 529.99 T
(enumData;) 261 529.99 T
(/* this pointer is passed to callback) 315 529.99 T
( * routine */) 297 519.99 T
0 10 Q
(This routine lets you examine a sequence of elements in a Huge Array) 180 502.33 T
(.) 502.81 502.33 T
5 F
-0.32 (HugeArrayEnum\050\051) 180 490.83 P
0 F
-0.31 ( is passed six arguments. The \336rst two are a \336le handle) 276.29 490.83 P
-0.21 (and block handle; these specify the Huge Array to be examined. The third is) 180 479.33 P
-0.08 (a pointer to a Boolean callback routine. The fourth argument is the index of) 180 467.83 P
(the \336rst element to be examined \050remember) 180 456.33 T
(, the \336rst element in the Huge) 381.87 456.33 T
-0.34 (Array has an index of zero\051. The \336fth argument is the number of elements to) 180 444.83 P
-0.34 (examine, or -1 to examine through the last element. The sixth argument is a) 180 433.33 P
(pointer which is passed unchanged to the callback routine; you can use this) 180 421.83 T
(to pass data to the callback routine, or to keep track of a scratch space.) 180 410.33 T
(The callback routine, which must be declared _pascal, itself takes two) 180 391.83 T
(arguments. The \336rst is a pointer to an element in the huge array) 180 380.33 T
(. The) 478.37 380.33 T
(callback routine will be called once for each element in the speci\336ed range;) 180 368.83 T
-0.16 (each time, the \336rst argument will point to the element being examined. The) 180 357.33 P
(second argument is the pointer that was passed as the \336nal argument to) 180 345.83 T
5 F
(HugeArrayEnum\050\051) 180 334.33 T
0 F
(. The callback routine can make) 276.29 334.33 T
5 F
(HugeArrayEnum\050\051) 426.51 334.33 T
0 F
(abort by returning) 180 322.83 T
6 F
(true) 268.34 322.83 T
0 F
(; this is useful if you need to search for a speci\336c) 286.85 322.83 T
-0.13 (element. Otherwise, the callback routine should return) 180 311.33 P
6 F
-0.13 (false) 436.15 311.33 P
0 F
-0.13 (. If the callback) 457.43 311.33 P
(routine aborts the enumeration,) 180 299.83 T
5 F
(HugeArrayEnum\050\051) 330.94 299.83 T
0 F
( returns) 427.23 299.83 T
6 F
(true) 467.41 299.83 T
0 F
(;) 485.92 299.83 T
(otherwise, it returns) 180 288.33 T
6 F
(false) 277.78 288.33 T
0 F
(.) 299.06 288.33 T
5 F
(HugeArrayEnum\050\051) 180 269.83 T
0 F
( is guaranteed to examine the elements in numerical) 276.29 269.83 T
-0.53 (order) 180 258.33 P
-0.53 (, beginning with) 203.88 258.33 P
6 F
-0.53 (startElement) 280.26 258.33 P
0 F
-0.53 (. The routine will automatically stop with) 339.87 258.33 P
-0.78 (the last element, even if) 180 246.83 P
6 F
-0.78 (count) 289.99 246.83 P
0 F
-0.78 ( elements have not been enumerated. However) 315.17 246.83 P
-0.78 (,) 526.22 246.83 P
(the starting element must be the index of an element in the array) 180 235.33 T
(.) 482.45 235.33 T
2 F
(Include:) 99 216.83 T
0 F
(hugearr) 180 216.83 T
(.h) 216.29 216.83 T
2 F
(W) 99 196.83 T
(arnings:) 108.07 196.83 T
0 F
(The callback routine may not allocate, free, or resize any elements in the) 180 196.83 T
-0.29 (Huge Array) 180 183.83 P
-0.29 (. All it should do is examine or change \050) 233.22 183.83 P
6 F
-0.29 (without) 412.7 183.83 P
0 F
-0.29 ( resizing\051 a single) 448.07 183.83 P
(element.) 180 170.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "242" 6
%%Page: "243" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(243) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.25 (The starting element must be an element in the array) 180 641.33 P
-0.25 (. If you pass a starting) 425.98 641.33 P
(index which is out-of-bounds, the results are unde\336ned.) 180 629.83 T
81 614.99 531 620 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 614.99 531 620 R
7 X
0 0 0 1 0 0 0 K
V
50 618.99 609.01 618.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 606.99 T
2 F
(HugeArrayExpand\050\051) 99 606.99 T
3 10 Q
(word) 99 592.33 T
4 F
(HugeArrayExpand\050) 153 592.33 T
4 9 Q
(void **) 153 581.99 T
(elemPtr,) 261 581.99 T
(/* **elemPtr is element at location) 333 581.99 T
( * where new elements will be) 315 571.99 T
( * created */) 315 561.99 T
(word) 153 551.99 T
(numElem,) 261 551.99 T
(/* # of elements to insert */) 333 551.99 T
(const void *) 153 541.99 T
(initData\051;) 261 541.99 T
(/* Copy this into each new) 333 541.99 T
( * element */) 315 531.99 T
0 10 Q
(This routine inserts a number of elements at a speci\336ed location in a) 180 514.33 T
(HugeArray) 180 502.83 T
(. The element pointed to will be shifted so it comes after the) 230.73 502.83 T
-0.34 (newly-created elements. The pointer will be \336xed up to point to the \336rst new) 180 491.33 P
(element. The data pointed to by) 180 479.83 T
6 F
(initData) 329.48 479.83 T
0 F
( will be copied into each new) 368.55 479.83 T
(element. If) 180 468.33 T
6 F
(initData) 232.78 468.33 T
0 F
( is null, the new elements will be uninitialized.) 271.85 468.33 T
-0.16 (If the elements are of variable size, this routine will insert a single element;) 180 449.83 P
(this element will be) 180 438.33 T
6 F
(numElem) 273.73 438.33 T
0 F
( bytes long.) 318.72 438.33 T
2 F
(Include:) 99 419.83 T
0 F
(hugearr) 180 419.83 T
(.h) 216.29 419.83 T
81 403.48 531 408.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 403.48 531 408.49 R
7 X
0 0 0 1 0 0 0 K
V
50 407.48 609.01 407.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 395.48 T
2 F
(HugeArrayGetCount\050\051) 99 395.48 T
3 10 Q
(dword) 99 380.82 T
4 F
(HugeArrayGetCount\050) 153 380.82 T
4 9 Q
(VMFileHandle) 153 370.48 T
(vmFile,) 261 370.48 T
(VMBlockHandle) 153 360.48 T
(vmBlock\051;) 261 360.48 T
(/* Handle of directory block */) 315 360.48 T
0 10 Q
(This routine returns the number of elements in a Huge Array) 180 342.82 T
(.) 463.34 342.82 T
2 F
(Include:) 99 324.32 T
0 F
(hugearr) 180 324.32 T
(.h) 216.29 324.32 T
81 307.98 531 312.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 307.98 531 312.98 R
7 X
0 0 0 1 0 0 0 K
V
50 311.98 609.01 311.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 299.98 T
2 F
(HugeArrayInsert\050\051) 99 299.98 T
3 10 Q
(void) 99 285.31 T
4 F
(HugeArrayInsert\050) 153 285.31 T
4 9 Q
(VMFileHandle) 153 274.97 T
(vmFile,) 261 274.97 T
(VMBlockHandle) 153 264.97 T
(vmBlock,) 261 264.97 T
(/* Handle of directory block */) 315 264.97 T
(word) 153 254.97 T
(numElem,) 261 254.97 T
(/* # of elements to insert */) 315 254.97 T
(dword) 153 244.97 T
(elemNum,) 261 244.97 T
(/* Index of first new element */) 315 244.97 T
(const void *) 153 234.97 T
(initData\051;) 261 234.97 T
(/* Copy this into each new element */) 315 234.97 T
0 10 Q
-0.21 (This routine inserts one or more elements in the midst of a Huge Array) 180 217.31 P
-0.21 (. The) 505.29 217.31 P
(\336rst new element will have index) 180 205.81 T
6 F
(elemNum) 336.32 205.81 T
0 F
(; thus, the element which) 380.57 205.81 T
(previously had that index will now come after the new elements. The data) 180 194.31 T
(pointed to by) 180 182.81 T
6 F
(initData) 242.79 182.81 T
0 F
( will be copied into each new element. If) 281.86 182.81 T
6 F
(initData) 469.11 182.81 T
0 F
( is) 508.18 182.81 T
(null, the new elements will be uninitialized.) 180 171.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "243" 7
%%Page: "244" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(244) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.16 (If the elements are of variable size, this routine will insert a single element;) 180 641.33 P
(this element will be) 180 629.83 T
6 F
(numElem) 273.73 629.83 T
0 F
( bytes long.) 318.72 629.83 T
2 F
(Include:) 99 611.33 T
0 F
(heap.h) 180 611.33 T
81 594.99 531 600 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 594.99 531 600 R
7 X
0 0 0 1 0 0 0 K
V
50 598.99 609.01 598.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 586.99 T
2 F
(HugeArrayLock\050\051) 99 586.99 T
3 10 Q
(dword) 99 572.33 T
4 F
(HugeArrayLock\050) 153 572.33 T
4 9 Q
(VMFileHandle) 153 561.99 T
(vmFile,) 261 561.99 T
(VMBlockhandle) 153 551.99 T
(vmBlock,) 261 551.99 T
(/* Handle of directory block */) 315 551.99 T
(dword) 153 541.99 T
(elemNum,) 261 541.99 T
(/* Element to lock */) 315 541.99 T
(void **) 153 531.99 T
(elemPtr\051;) 261 531.99 T
(/* Pointer to element is written) 333 531.99 T
( * here */) 315 521.99 T
0 10 Q
(This routine locks an element in a Huge Array) 180 504.33 T
(. It writes the element\325) 393.91 504.33 T
(s) 498.37 504.33 T
-0.52 (address to) 180 492.83 P
6 F
-0.52 (*elemPtr) 229.16 492.83 P
0 F
-0.52 (. The dword returned indicates how many elements come) 269.15 492.83 P
(before and after the element in that block. The upper word indicates how) 180 481.33 T
-0.57 (many elements come before the locked one, counting the locked element. The) 180 469.83 P
(lower word indicates how many elements come after the locked element,) 180 458.33 T
(again counting the locked one. Y) 180 446.83 T
(ou may examine or change all the other) 328.91 446.83 T
(elements in the block without making further calls to) 180 435.33 T
5 F
(HugeArrayLock\050\051) 429.11 435.33 T
0 F
(.) 520.04 435.33 T
2 F
(Include:) 99 416.83 T
0 F
(heap.h) 180 416.83 T
2 F
(See Also:) 99 396.83 T
0 9 Q
(HAL_COUNT) 180 396.83 T
0 10 Q
(\050\051,) 238.67 396.83 T
0 9 Q
(HAL_PREV) 250.89 396.83 T
0 10 Q
(\050\051) 300.89 396.83 T
81 380.48 531 385.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 380.48 531 385.49 R
7 X
0 0 0 1 0 0 0 K
V
50 384.48 609.01 384.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 372.48 T
2 F
(HugeArrayNext\050\051) 99 372.48 T
3 10 Q
(word) 99 357.82 T
4 F
(HugeArrayNext\050) 153 357.82 T
4 9 Q
(void **) 153 347.48 T
(elemPtr\051;) 261 347.48 T
0 10 Q
(This routine increments a pointer to an element in a HugeArray to point to) 180 329.82 T
(the next element. If the element was the last element in its block,) 180 318.32 T
5 F
(HugeArrayNext\050\051) 180 306.82 T
0 F
( will unlock its block and lock the next one. The routine) 269.81 306.82 T
-0.65 (writes the pointer to) 180 295.32 P
6 F
-0.65 (*elemPtr) 274.63 295.32 P
0 F
-0.65 (; it returns the number of elements which come) 315.36 295.32 P
-0.49 (after the newly-locked one in its block, counting the newly-locked element. If) 180 283.82 P
-0.6 (this routine is passed a pointer to the last element in a HugeArray) 180 272.32 P
-0.6 (, it unlocks) 479.28 272.32 P
(the element, writes a null pointer to) 180 260.82 T
6 F
(*elemPtr) 349.47 260.82 T
0 F
(, and returns zero.) 389.46 260.82 T
2 F
(Include:) 99 242.32 T
0 F
(heap.h) 180 242.32 T
2 F
(W) 99 222.32 T
(arnings:) 108.07 222.32 T
0 F
-0.57 (This routine may unlock the block containing the passed element. Therefore,) 180 222.32 P
(if you need to mark the block as dirty) 180 209.32 T
(, do so before making this call.) 351.51 209.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "244" 8
%%Page: "245" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(245) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HugeArrayPrev\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(HugeArrayPrev\050) 153 620.33 T
4 9 Q
(void **) 153 609.99 T
(elemPtr1,) 261 609.99 T
(/* indicates current element */) 333 609.99 T
(void **) 153 599.99 T
(elemPtr2\051;) 261 599.99 T
0 10 Q
-0.01 (This routine decrements a pointer to an element in a HugeArray to point to) 180 582.33 P
(the previous element. If the element was the \336rst element in its block,) 180 570.83 T
5 F
(HugeArrayPrev\050\051) 180 559.33 T
0 F
( will unlock its block and lock the previous one. The) 270 559.33 T
(routine writes the pointer to) 180 547.83 T
6 F
(*elemPtr) 313.71 547.83 T
0 F
(1, and writes a pointer to the \336rst) 354.44 547.83 T
-0.01 (element in the block in) 180 536.33 P
6 F
-0.01 (*elemPtr2) 288.49 536.33 P
0 F
-0.01 (. It returns the number of elements which) 334.78 536.33 P
(come before the newly-locked one in its block, counting the newly-locked) 180 524.83 T
(element. If this routine is passed a pointer to the \336rst element in a) 180 513.33 T
(HugeArray) 180 501.83 T
(, it unlocks the element, writes a null pointer to) 230.73 501.83 T
6 F
(*elemPtr) 453.73 501.83 T
0 F
(, and) 493.72 501.83 T
(returns zero.) 180 490.33 T
2 F
(Include:) 99 471.83 T
0 F
(hugearr) 180 471.83 T
(.h) 216.29 471.83 T
2 F
(W) 99 451.83 T
(arnings:) 108.07 451.83 T
0 F
-0.57 (This routine may unlock the block containing the passed element. Therefore,) 180 451.83 P
(if you need to mark the block as dirty) 180 438.83 T
(, do so before making this call.) 351.51 438.83 T
81 422.48 531 427.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 422.48 531 427.49 R
7 X
0 0 0 1 0 0 0 K
V
50 426.48 609.01 426.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 414.48 T
2 F
(HugeArrayReplace\050\051) 99 414.48 T
3 10 Q
(void) 99 399.82 T
4 F
(HugeArrayReplace\050) 153 399.82 T
4 9 Q
(VMFileHandle) 153 389.48 T
(file,) 261 389.48 T
(VMBlockHandle) 153 379.48 T
(vmblock,) 261 379.48 T
(/* Handle of directory block */) 333 379.48 T
(word) 153 369.48 T
(numElem,) 261 369.48 T
(/* # of elements to replace */) 333 369.48 T
(dword) 153 359.48 T
(elemNum,) 261 359.48 T
(/* First element to replace */) 333 359.48 T
(const void *) 153 349.48 T
(initData\051;) 261 349.48 T
(/* Copy this into each element) 333 349.48 T
0 10 Q
-0.37 (This routine replaces one or more elements with copies of the passed data. If) 180 331.82 P
6 F
(initData) 180 320.32 T
0 F
( is null, the elements will be \336lled with null bytes.) 219.07 320.32 T
-0.01 (If the elements are of variable size, a single element will be resized; its new) 180 301.82 P
(size will be) 180 290.32 T
6 F
(enumData) 233.72 290.32 T
0 F
( bytes long.) 282.05 290.32 T
2 F
(Include:) 99 271.82 T
0 F
(hugearr) 180 271.82 T
(.h) 216.29 271.82 T
2 F
(See Also:) 99 251.82 T
0 F
(HugeArrayResize\050\051) 180 251.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "245" 9
%%Page: "246" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(246) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(HugeArrayResize\050\051) 99 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(HugeArrayResize\050) 153 621.33 T
4 9 Q
(VMFileHandle) 153 610.99 T
(vmFile,) 261 610.99 T
(VMBlockHandle) 153 600.99 T
(vmBlock,) 261 600.99 T
(/* Handle of directory block */) 315 600.99 T
(dword) 153 590.99 T
(elemNum,) 261 590.99 T
(/* Resize this element */) 315 590.99 T
(word) 153 580.99 T
(newSize\051;) 261 580.99 T
(/* New size in bytes */) 315 580.99 T
0 10 Q
(This routine resizes an element in a Huge Array) 180 563.33 T
(. The array must contain) 402.42 563.33 T
-0.67 (variable-sized elements. If the new size is larger than the old, the extra space) 180 551.83 P
(will be zero-initialized. If it is smaller) 180 540.33 T
(, the element will be truncated.) 352.99 540.33 T
2 F
(Include:) 99 521.83 T
0 F
(hugearr) 180 521.83 T
(.h) 216.29 521.83 T
81 505.48 531 510.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 505.48 531 510.49 R
7 X
0 0 0 1 0 0 0 K
V
50 509.48 609.01 509.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 497.48 T
2 F
(HugeArrayUnlock\050\051) 99 497.48 T
3 10 Q
(void) 99 482.82 T
4 F
(HugeArrayUnlock\050) 153 482.82 T
4 9 Q
(void *) 153 472.48 T
(elemPtr\051;) 261 472.48 T
0 10 Q
(This routine unlocks the block of a HugeArray which contains the passed) 180 454.82 T
(element.) 180 443.32 T
2 F
(Include:) 99 424.82 T
0 F
(hugearr) 180 424.82 T
(.h) 216.29 424.82 T
2 F
(W) 99 404.82 T
(arnings:) 108.07 404.82 T
0 F
(If you have changed any of the elements in the block, be sure to call) 180 404.82 T
5 F
(HugeArrayDirty\050\051) 180 391.82 T
6 F
(before) 275.74 391.82 T
0 F
( you unlock the block; otherwise the block might) 302.95 391.82 T
(be discarded.) 180 378.82 T
81 362.48 531 367.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 362.48 531 367.48 R
7 X
0 0 0 1 0 0 0 K
V
50 366.48 609.01 366.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 354.48 T
2 F
(IACPConnect\050\051) 99 354.48 T
4 10 Q
(IACPConnection IACPConnect\050) 99 340.81 T
4 9 Q
(GeodeToken) 153 330.48 T
(*list,) 261 330.48 T
(IACPConnectFlags) 153 320.48 T
(flags,) 261 320.48 T
(MemHandle) 153 310.48 T
(appLaunchBlock,) 261 310.48 T
(optr) 153 300.48 T
(client,) 261 300.48 T
(word) 153 290.48 T
(*numServers\051;) 261 290.48 T
0 10 Q
-0.11 (This routine establishes a connection between a client object \050by default the) 180 272.81 P
(calling thread\325) 180 261.31 T
(s application object\051 and one or more servers registered with) 246.12 261.31 T
(the indicated list.) 180 249.81 T
(The) 180 231.31 T
6 F
(client) 200.56 231.31 T
0 F
( argument should be) 225.73 231.31 T
5 F
(NullOptr) 323.52 231.31 T
0 F
( unless the) 370.19 231.31 T
0 9 Q
(IACPCF_CLIENT_OD_SPECIFIED) 180 219.81 T
0 10 Q
( \337ag is set in the \337ags parameter) 330.17 219.81 T
(.) 481.67 219.81 T
2 F
(Include:) 99 201.31 T
0 F
(iacp.goh) 180 201.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "246" 10
%%Page: "247" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(247) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(IACPCreateDefaultLaunchBlock\050\051) 99 634.99 T
4 10 Q
(MemHandle IACPCreateDefaultLaunchBlock\050) 99 621.33 T
4 9 Q
(word) 153 610.99 T
(appMode\051;) 261 610.99 T
0 10 Q
(This routine creates a memory block holding an) 180 593.33 T
5 F
(AppLaunchBlock) 402.99 593.33 T
0 F
(structure suitable for passing to) 180 581.83 T
5 F
(IACPConnect\050\051) 330.75 581.83 T
0 F
(. The two valid values to) 409.08 581.83 T
(pass in) 180 570.33 T
6 F
(appMode) 215.38 570.33 T
0 F
( are) 257.59 570.33 T
0 9 Q
(MSG_GEN_PROCESS_OPEN_APPLICA) 278.15 570.33 T
(TION) 449.5 570.33 T
0 10 Q
( and) 473.5 570.33 T
0 9 Q
(MSG_GEN_PROCESS_OPEN_ENGINE) 180 558.83 T
0 10 Q
(.) 349.01 558.83 T
2 F
(Include:) 99 540.33 T
0 F
(iacp.goh) 180 540.33 T
81 523.98 531 528.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 523.98 531 528.99 R
7 X
0 0 0 1 0 0 0 K
V
50 527.98 609.01 527.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 515.98 T
2 F
(IACPFinishConnect\050\051) 99 515.98 T
4 10 Q
(void) 99 501.32 T
(IACPFinishConnect\050) 153 501.32 T
4 9 Q
(IACPConnection) 153 490.98 T
(connection,) 261 490.98 T
(optr) 153 480.98 T
(server\051;) 261 480.98 T
0 10 Q
(Finishes a connection made to a server which had to change from) 180 463.32 T
(non-interactible to interactible.) 180 451.82 T
2 F
(Include:) 99 433.32 T
0 F
(iacp.goh) 180 433.32 T
81 416.98 531 421.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 416.98 531 421.98 R
7 X
0 0 0 1 0 0 0 K
V
50 420.98 609.01 420.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 408.98 T
2 F
(IACPLostConnection\050\051) 99 408.98 T
4 10 Q
(void IACPLostConnection\050) 99 395.31 T
4 9 Q
(optr) 153 384.98 T
(oself,) 261 384.98 T
(IACPConnection) 153 374.98 T
(connection\051;) 261 374.98 T
0 10 Q
-0.2 (This routine is called by) 180 357.31 P
0 9 Q
-0.18 (IACP) 292.91 357.31 P
0 10 Q
-0.2 ( server objects to handle when a client closes a) 315.57 357.31 P
(connection.) 180 345.81 T
2 F
(Include:) 99 327.31 T
0 F
(iacp.goh) 180 327.31 T
81 310.97 531 315.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 310.97 531 315.98 R
7 X
0 0 0 1 0 0 0 K
V
50 314.97 609.01 314.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 302.97 T
2 F
(IACPProcessMessage\050\051) 99 302.97 T
4 10 Q
(void IACPProcessMessage\050) 99 289.3 T
4 9 Q
(optr) 153 278.97 T
(oself,) 261 278.97 T
(EventHandle) 153 268.97 T
(msgToSend,) 261 268.97 T
(TravelOption) 153 258.97 T
(topt,) 261 258.97 T
(EventHandle) 153 248.97 T
(completionMsg\051;) 261 248.97 T
0 10 Q
(This is a utility routine to dispatch an encapsulated message handed to an) 180 231.3 T
(object by an) 180 219.8 T
0 9 Q
(IACP) 237.79 219.8 T
0 10 Q
( connection.) 260.45 219.8 T
2 F
(Include:) 99 201.3 T
0 F
(iacp.goh) 180 201.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "247" 11
%%Page: "248" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(248) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(IACPRegisterDocument\050\051) 99 634.99 T
4 10 Q
(void IACPRegisterDocument\050) 99 620.33 T
4 9 Q
(optr) 153 609.99 T
(server,) 189 609.99 T
(word) 153 599.99 T
(disk,) 189 599.99 T
(dword) 153 589.99 T
(fileID\051;) 189 589.99 T
0 10 Q
(This routine registers an open document and the server object for it.) 180 572.33 T
-0.05 (This routine is to be used only by servers, not by clients, and should only be) 180 553.83 P
-0.21 (used by the creator of the document.  There is no provision for using) 180 542.33 P
0 9 Q
-0.19 (IACP) 494.3 542.33 P
0 10 Q
-0.21 ( to) 516.97 542.33 P
(connect to a server that is not the creator of the document in question.) 180 530.83 T
2 F
(Include:) 99 512.33 T
0 F
(iacp.goh) 180 512.33 T
81 495.98 531 500.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 495.98 531 500.99 R
7 X
0 0 0 1 0 0 0 K
V
50 499.98 609.01 499.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 487.98 T
2 F
(IACPRegisterServer\050\051) 99 487.98 T
3 10 Q
(void) 99 474.32 T
4 F
(IACPRegisterServer\050) 153 474.32 T
4 9 Q
(GeodeToken) 153 463.98 T
(*list,) 261 463.98 T
(optr) 153 453.98 T
(server,) 261 453.98 T
(IACPServerMode) 153 443.98 T
(mode,) 261 443.98 T
(IACPServerFlags) 153 433.98 T
(flags\051;) 261 433.98 T
0 10 Q
(This routine registers an object as a server for the) 180 416.32 T
0 9 Q
(IACP) 413.53 416.32 T
0 10 Q
( server list speci\336ed) 436.19 416.32 T
(by the passed token.) 180 404.82 T
2 F
(Include:) 99 386.32 T
0 F
(iacp.goh) 180 386.32 T
81 369.98 531 374.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 369.98 531 374.98 R
7 X
0 0 0 1 0 0 0 K
V
50 373.98 609.01 373.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 361.98 T
2 F
(IACPSendMessage\050\051) 99 361.98 T
4 10 Q
(word IACPSendMessage\050) 99 348.31 T
4 9 Q
(IACPConnection) 153 337.98 T
(connection,) 261 337.98 T
(EventHandle) 153 327.98 T
(msgToSend,) 261 327.98 T
(TravelOption) 153 317.98 T
(topt,) 261 317.98 T
(EventHandle) 153 307.98 T
(completionMsg,) 261 307.98 T
(IACPSide) 153 297.98 T
(side\051;) 261 297.98 T
0 10 Q
-0.18 (This routine sends a recorded message to all the  objects on the other side of) 180 280.31 P
(an) 180 268.81 T
0 9 Q
(IACP) 194.45 268.81 T
0 10 Q
( connection.) 217.11 268.81 T
2 F
(Include:) 99 250.31 T
0 F
(iacp.goh) 180 250.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "248" 12
%%Page: "249" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(249) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(IACPSendMessageT) 99 634.99 T
(oServer\050\051) 214.14 634.99 T
4 10 Q
(word IACPSendMessageToServer\050) 99 621.33 T
4 9 Q
(IACPConnection) 153 610.99 T
(connection,) 261 610.99 T
(EventHandle) 153 600.99 T
(msgToSend,) 261 600.99 T
(TravelOption) 153 590.99 T
(topt,) 261 590.99 T
(EventHandle) 153 580.99 T
(completionMsg,) 261 580.99 T
(word) 153 570.99 T
(serverNum\051;) 261 570.99 T
0 10 Q
-0.44 (This routine sends a message to a speci\336c server on the other side of an) 180 553.33 P
0 9 Q
-0.4 (IACP) 506 553.33 P
0 10 Q
(connection.) 180 541.83 T
2 F
(Include:) 99 523.33 T
0 F
(iacp.goh) 180 523.33 T
81 506.98 531 511.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 506.98 531 511.99 R
7 X
0 0 0 1 0 0 0 K
V
50 510.98 609.01 510.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 498.98 T
2 F
(IACPShutdown\050\051) 99 498.98 T
4 10 Q
(void IACPShutdown\050) 99 485.32 T
4 9 Q
(IACPConnection) 153 474.98 T
(connection,) 261 474.98 T
(optr) 153 464.98 T
(serverOD\051;) 261 464.98 T
0 10 Q
(This routine removes a server or client from an) 180 447.32 T
0 9 Q
(IACP) 400.56 447.32 T
0 10 Q
( connection.) 423.22 447.32 T
2 F
(Include:) 99 428.82 T
0 F
(iacp.goh) 180 428.82 T
81 412.48 531 417.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 412.48 531 417.48 R
7 X
0 0 0 1 0 0 0 K
V
50 416.48 609.01 416.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 404.48 T
2 F
(IACPShutdownAll\050\051) 99 404.48 T
4 10 Q
(void IACPShutdownAll\050) 99 390.81 T
4 9 Q
(optr obj\051;) 153 380.48 T
0 10 Q
(This calls) 180 362.81 T
5 F
(IACPShutdown\050\051) 227.05 362.81 T
0 F
( for all connections to which the passed object) 315.38 362.81 T
(is a party) 180 351.31 T
(. It\325) 222.79 351.31 T
(s primarily used by) 237.98 351.31 T
5 F
(GenApplicationClass) 330.03 351.31 T
0 F
( when the) 439.1 351.31 T
(application is exiting.) 180 339.81 T
2 F
(Include:) 99 321.31 T
0 F
(iacp.goh) 180 321.31 T
81 304.97 531 309.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 304.97 531 309.98 R
7 X
0 0 0 1 0 0 0 K
V
50 308.97 609.01 308.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 296.97 T
2 F
(IACPUnregisterDocument\050\051) 99 296.97 T
4 10 Q
(void IACPUnregisterDocument\050) 99 282.3 T
4 9 Q
(optr) 153 271.97 T
(server,) 189 271.97 T
(word) 153 261.97 T
(disk,) 189 261.97 T
(dword) 153 251.97 T
(fileID\051;) 189 251.97 T
0 10 Q
(This routine unregisters an open document and the server object for it.) 180 234.3 T
2 F
(Include:) 99 215.8 T
0 F
(iacp.goh) 180 215.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "249" 13
%%Page: "250" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(250) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(IACPUnregisterServer\050\051) 99 634.99 T
4 10 Q
(void IACPUnregisterServer\050) 99 621.33 T
4 9 Q
(GeodeToken) 153 610.99 T
(*token,) 261 610.99 T
(optr) 153 600.99 T
(object\051;) 261 600.99 T
0 10 Q
-0.03 (This removes the speci\336ed server object from the indicated) 180 583.33 P
0 9 Q
-0.03 (IACP) 453.61 583.33 P
0 10 Q
-0.03 ( server list.) 476.27 583.33 P
2 F
(Include:) 99 564.83 T
0 F
(iacp.goh) 180 564.83 T
81 548.48 531 553.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 548.48 531 553.49 R
7 X
0 0 0 1 0 0 0 K
V
50 552.48 609.01 552.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 540.48 T
2 F
(ImpexCreateT) 99 540.48 T
(empFile\050\051) 177.47 540.48 T
3 10 Q
(TransError) 99 525.82 T
4 F
(ImpexCreateTempFile\050) 165 525.82 T
4 9 Q
(char *) 153 515.48 T
(buffer,) 261 515.48 T
(word) 153 505.48 T
(fileType,) 261 505.48 T
(FileHandle *) 153 495.48 T
(file,) 261 495.48 T
(MemHandle *) 153 485.48 T
(errorString\051;) 261 485.48 T
0 10 Q
(This routine creates and opens a unique temporary \336le to be used by) 180 467.82 T
(translation libraries for \336le importing and exporting. The routine is called) 180 456.32 T
(only by translation libraries.) 180 444.82 T
(The routine is passed the following arguments:) 180 426.32 T
6 F
(buffer) 180 407.82 T
0 F
(The \336le name will be written to the buffer pointed to by this) 243 407.82 T
(argument. The buffer should be at least) 243 396.82 T
0 9 Q
(FILE_LONGNAME_BUFFER_SIZE) 243 385.82 T
0 10 Q
( bytes long.) 395 385.82 T
6 F
(\336leT) 180 367.82 T
(ype) 199.84 367.82 T
0 F
-0.23 (This speci\336es what kind of temporary \336le should be created. If) 243 367.82 P
0 9 Q
(IMPEX_TEMP_VM_FILE) 243 356.82 T
0 10 Q
( is passed, a) 351.66 356.82 T
0 9 Q
(GEOS) 410.2 356.82 T
(VM) 439.15 356.82 T
0 10 Q
( \336le will be) 454.14 356.82 T
-0.16 (created. If) 243 345.82 P
0 9 Q
-0.14 (IMPEX_TEMP_NA) 292.49 345.82 P
-0.14 (TIVE_FILE) 372.82 345.82 P
0 10 Q
-0.16 ( is passed, a temporary) 422.15 345.82 P
(\336le in the native format will be created.) 243 334.82 T
6 F
(\336le) 180 316.82 T
0 F
-0.31 (This is a pointer to a FileHandle variable. The temporary \336le\325) 243 316.82 P
-0.31 (s) 523.9 316.82 P
(handle will be written to) 243 305.82 T
6 F
(*\336le) 359.51 305.82 T
0 F
(.) 378.39 305.82 T
6 F
(errString) 180 287.82 T
0 F
(If) 243 287.82 T
5 F
(ImpexCreateT) 253.18 287.82 T
(empFile) 326.89 287.82 T
0 F
( fails with error condition) 369.11 287.82 T
0 9 Q
-0.15 (TE_CUSTOM) 243 276.82 P
0 10 Q
-0.17 ( it will allocate a block containing an error string.) 301.01 276.82 P
(It will write the block\325) 243 265.82 T
(s handle to) 344.32 265.82 T
6 F
(*errString) 397.85 265.82 T
0 F
(. It is the caller) 445.61 265.82 T
(\325) 516.54 265.82 T
(s) 518.21 265.82 T
(responsibility to free this block when it\325) 243 254.82 T
(s done with it.) 424.88 254.82 T
(If) 180 236.82 T
5 F
(ImpexCreateT) 190.18 236.82 T
(empFile) 263.89 236.82 T
0 F
( is successful, it returns) 306.11 236.82 T
0 9 Q
(TE_NO_ERROR) 418.7 236.82 T
0 10 Q
( \050which) 487.53 236.82 T
(equals zero\051. If it fails, it returns a member of the) 180 225.32 T
5 F
(T) 411.32 225.32 T
(ransferErrors) 417.92 225.32 T
0 F
(enumerated type \050usually) 180 213.82 T
0 9 Q
(TE_MET) 301.49 213.82 T
(AFILE_CREA) 338.99 213.82 T
(TION_ERROR) 397.65 213.82 T
0 10 Q
(\051. When you\325re) 459.15 213.82 T
(done with the temporary \336le, call) 180 202.32 T
5 F
(FileDeleteT) 336.13 202.32 T
(empFile\050\051) 395.94 202.32 T
0 F
(.) 445.94 202.32 T
2 F
(Include:) 99 183.82 T
0 F
(impex.goh) 180 183.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "250" 14
%%Page: "251" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(251) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(W) 99 641.33 T
(arnings:) 108.07 641.33 T
0 F
(If you close this \336le, the system may delete it at any time. Ordinarily you) 180 641.33 T
(should close it with) 180 628.33 T
5 F
(ImpexDeleteT) 272.05 628.33 T
(empFile\050\051) 344.27 628.33 T
0 F
(, which deletes the \336le) 394.27 628.33 T
(immediately) 180 615.33 T
(.) 236.68 615.33 T
(If the routine does not fail with condition) 180 595.33 T
0 9 Q
(TE_CUSTOM) 372.42 595.33 T
0 10 Q
(,) 430.42 595.33 T
6 F
(*errString) 435.98 595.33 T
0 F
( may) 483.74 595.33 T
(contain a random value. Do not use) 180 583.83 T
6 F
(*errString) 346.51 583.83 T
0 F
( if the routine did not return) 394.27 583.83 T
0 9 Q
(TE_CUSTOM) 180 572.33 T
0 10 Q
(.) 238.01 572.33 T
81 557.49 531 562.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 557.49 531 562.5 R
7 X
0 0 0 1 0 0 0 K
V
50 561.49 609.01 561.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 549.49 T
2 F
(ImpexDeleteT) 99 549.49 T
(empFile\050\051) 176.14 549.49 T
3 10 Q
(TransError) 99 535.83 T
4 F
( ImpexDeleteTempFile\050) 159 535.83 T
4 9 Q
(const char *) 153 525.49 T
(buffer,) 261 525.49 T
(FileHandle) 153 515.49 T
(tempFile,) 261 515.49 T
(word) 153 505.49 T
(fileType\051;) 261 505.49 T
0 10 Q
(This routine closes, then deletes, a temporary \336le which was created by) 180 487.83 T
5 F
(ImpexCreateT) 180 476.33 T
(empFile\050\051) 253.71 476.33 T
0 F
(. It is passed the following arguments:) 303.71 476.33 T
6 F
(buffer) 180 457.83 T
0 F
(This is a pointer to a character buffer containing the name of) 243 457.83 T
(the temporary \336le. Y) 243 446.83 T
(ou can just pass the address of the buffer) 337.64 446.83 T
(which was \336lled by) 243 435.83 T
5 F
(ImpexCreateT) 333.76 435.83 T
(empFile\050\051) 407.47 435.83 T
0 F
(.) 457.47 435.83 T
6 F
(tempFile) 180 417.83 T
0 F
(This is the handle of the temporary \336le.) 243 417.83 T
6 F
(\336leT) 180 399.83 T
(ype) 199.84 399.83 T
0 F
(This speci\336es what type of \336le is being deleted. If the) 243 399.83 T
(temporary \336le is a) 243 388.83 T
0 9 Q
(GEOS) 330.05 388.83 T
(VM) 359 388.83 T
0 10 Q
( \336le, this will be) 374 388.83 T
0 9 Q
(IMPEX_TEMP_VM_FILE) 243 377.83 T
0 10 Q
(. If it is a native-format \336le, it will be) 351.66 377.83 T
0 9 Q
(IMPEX_TEMP_NA) 243 366.83 T
(TIVE_FILE) 323.33 366.83 T
0 10 Q
(.) 372.66 366.83 T
6 F
(errString) 180 348.83 T
0 F
(If) 243 348.83 T
5 F
(ImpexDeleteT) 253.18 348.83 T
(empFile) 325.4 348.83 T
0 F
( fails with error condition) 367.62 348.83 T
0 9 Q
-0.15 (TE_CUSTOM) 243 337.83 P
0 10 Q
-0.17 ( it will allocate a block containing an error string.) 301.01 337.83 P
(It will write the block\325) 243 326.83 T
(s handle to) 344.32 326.83 T
6 F
(*errString) 397.85 326.83 T
0 F
(. It is the caller) 445.61 326.83 T
(\325) 516.54 326.83 T
(s) 518.21 326.83 T
(responsibility to free this block when it\325) 243 315.83 T
(s done with it.) 424.88 315.83 T
5 F
(ImpexDeleteT) 180 297.83 T
(empFile\050\051) 252.22 297.83 T
0 F
( closes the speci\336ed \336le, then deletes it. If it is) 302.22 297.83 T
(successful, it returns) 180 286.33 T
0 9 Q
(TE_NO_ERROR) 279.25 286.33 T
0 10 Q
( \050i.e. zero\051; otherwise, it returns an) 348.08 286.33 T
(appropriate member of the) 180 274.83 T
5 F
(T) 306.49 274.83 T
(ransError) 313.09 274.83 T
0 F
( enumerated type.) 365.51 274.83 T
2 F
(Include:) 99 256.33 T
0 F
(impex.goh) 180 256.33 T
2 F
(W) 99 236.33 T
(arnings:) 108.07 236.33 T
0 F
(If the routine does not fail with condition) 180 236.33 T
0 9 Q
(TE_CUSTOM) 372.42 236.33 T
0 10 Q
(,) 430.42 236.33 T
6 F
(*errString) 435.98 236.33 T
0 F
( may) 483.74 236.33 T
(contain a random value. Do not use) 180 223.33 T
6 F
(*errString) 346.51 223.33 T
0 F
( if the routine did not return) 394.27 223.33 T
0 9 Q
(TE_CUSTOM) 180 210.33 T
0 10 Q
(.) 238.01 210.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "251" 15
%%Page: "252" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(252) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ImpexExportT) 99 634.99 T
(oMeta\336le\050\051) 178.13 634.99 T
3 10 Q
(TransError) 99 621.33 T
4 F
(ImpexExportToMetafile\050) 165 621.33 T
4 9 Q
(Handle) 153 610.99 T
(xlatLib,) 261 610.99 T
(VMFileHandle) 153 600.99 T
(xferFile,) 261 600.99 T
(FileHandle) 153 590.99 T
(metafile,) 261 590.99 T
(dword) 153 580.99 T
(xferFormat,) 261 580.99 T
(word) 153 570.99 T
(arg1,) 261 570.99 T
(word) 153 560.99 T
(arg2,) 261 560.99 T
(MemHandle *) 153 550.99 T
(errString\051;) 261 550.99 T
0 10 Q
(This routine is used by translation libraries. The routine calls an) 180 533.33 T
(intermediate translation library to \336nish translating a given \336le into the) 180 521.83 T
0 9 Q
(GEOS) 180 510.33 T
0 10 Q
( Meta\336le format.) 206.17 510.33 T
2 F
(Include:) 99 491.83 T
0 F
(impex.goh) 180 491.83 T
2 F
(W) 99 471.83 T
(arnings:) 108.07 471.83 T
0 F
(If the routine does not fail with condition) 180 471.83 T
0 9 Q
(TE_CUSTOM) 372.42 471.83 T
0 10 Q
(,) 430.42 471.83 T
6 F
(*errString) 435.98 471.83 T
0 F
( may) 483.74 471.83 T
(contain a random value. Do not use) 180 458.83 T
6 F
(*errString) 346.51 458.83 T
0 F
( if the routine did not return) 394.27 458.83 T
0 9 Q
(TE_CUSTOM) 180 445.83 T
0 10 Q
(.) 238.01 445.83 T
81 429.48 531 434.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 429.48 531 434.49 R
7 X
0 0 0 1 0 0 0 K
V
50 433.48 609.01 433.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 421.48 T
2 F
(ImpexImportExportCompleted\050\051) 99 421.48 T
3 10 Q
(void) 99 406.82 T
4 F
(ImpexImportExportCompleted\050) 153 406.82 T
4 9 Q
(ImpexTranslationParams *) 153 396.48 T
(itParams\051;) 282.6 396.48 T
0 10 Q
(The application should send this message when it is \336nished importing or) 180 378.82 T
(exporting data. The routine will send an appropriate acknowledgment) 180 367.32 T
(message to the ImportControl or ExportControl object, depending on the) 180 355.82 T
(settings of) 180 344.32 T
6 9 Q
(ITP) 230.56 344.32 T
6 10 Q
(_impexOD) 246.39 344.32 T
0 F
( and) 294.35 344.32 T
6 9 Q
(ITP) 317.32 344.32 T
6 10 Q
(_returnMsg) 333.15 344.32 T
0 F
(.) 386.46 344.32 T
-0.45 (If the application has just \336nished an import, it should not have changed the) 180 325.82 P
5 F
-0.57 (ImpexT) 180 314.32 P
-0.57 (ranslationParams) 219.19 314.32 P
0 F
-0.55 (structure. If it had just \336nished preparing data) 314.82 314.32 P
(for export, it should have set the) 180 302.82 T
6 9 Q
(ITP) 332.79 302.82 T
6 10 Q
(_transferVMChain) 348.62 302.82 T
0 F
( \336eld to contain the) 435.07 302.82 T
(handle of the head of the) 180 291.32 T
0 9 Q
(VM) 297.42 291.32 T
0 10 Q
( chain.) 312.41 291.32 T
(W) 153 275.82 T
(arnings:) 162.07 275.82 T
(This routine, in essence, informs the ImportControl or ExportControl) 207 275.82 T
(object that the application is \336nished with the transfer \336le. The) 207 262.82 T
(ImportControl will respond by destroying the transfer \336le; the) 207 249.82 T
(ExportControl will call the appropriate translation library to produce) 207 236.82 T
(an output \336le. Therefore, an application should not call this routine) 207 223.82 T
(until it is absolutely \336nished with the transfer \336le.) 207 210.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "252" 16
%%Page: "253" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(253) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(ImpexImportFromMeta\336le\050\051) 99 634.99 T
3 10 Q
(TransError) 99 621.33 T
4 F
(ImpexExportToMetafile\050) 165 621.33 T
4 9 Q
(Handle) 153 610.99 T
(xlatLib,) 261 610.99 T
(VMFileHandle) 153 600.99 T
(xferFile,) 261 600.99 T
(FileHandle) 153 590.99 T
(metafile,) 261 590.99 T
(dword *) 153 580.99 T
(xferFormat,) 261 580.99 T
(word) 153 570.99 T
(arg1,) 261 570.99 T
(word) 153 560.99 T
(arg2,) 261 560.99 T
(MemHandle *) 153 550.99 T
(errString\051;) 261 550.99 T
0 10 Q
(This routine is used by translation libraries. The routine calls an) 180 533.33 T
(intermediate translation library to translate a given \336le from the) 180 521.83 T
0 9 Q
(GEOS) 483.38 521.83 T
0 10 Q
(Meta\336le format to an intermediate format.) 180 510.33 T
2 F
(Include:) 99 491.83 T
0 F
(impex.goh) 180 491.83 T
2 F
(W) 99 471.83 T
(arnings:) 108.07 471.83 T
0 F
(If the routine does not fail with condition) 180 471.83 T
0 9 Q
(TE_CUSTOM) 372.42 471.83 T
0 10 Q
(,) 430.42 471.83 T
6 F
(*errString) 435.98 471.83 T
0 F
( may) 483.74 471.83 T
(contain a random value. Do not use) 180 458.83 T
6 F
(*errString) 346.51 458.83 T
0 F
( if the routine did not return) 394.27 458.83 T
0 9 Q
(TE_CUSTOM) 180 445.83 T
0 10 Q
(.) 238.01 445.83 T
81 429.48 531 434.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 429.48 531 434.49 R
7 X
0 0 0 1 0 0 0 K
V
50 433.48 609.01 433.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 421.48 T
2 F
(InitFileCommit\050\051) 99 421.48 T
3 10 Q
(void) 99 406.82 T
4 F
(InitFileCommit\050void\051;) 153 406.82 T
0 F
(This routine commits any changes to the) 180 388.82 T
0 9 Q
(GEOS.INI) 370.76 388.82 T
0 10 Q
( \336le, removing and) 414.1 388.82 T
-0.21 (replacing its stored backup. It ensures that no other threads are working on) 180 377.32 P
(the \336le during the commit operation.) 180 365.82 T
2 F
(Include:) 99 347.32 T
0 F
(init\336le.h) 180 347.32 T
81 330.98 531 335.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 330.98 531 335.98 R
7 X
0 0 0 1 0 0 0 K
V
50 334.98 609.01 334.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 322.98 T
2 F
(InitFileDeleteCategory\050\051) 99 322.98 T
3 10 Q
(void) 99 308.31 T
4 F
(InitFileDeleteCategory\050) 153 308.31 T
4 9 Q
(const char *category\051;) 153 297.98 T
0 10 Q
-0.67 (This routine deletes the speci\336ed category) 180 280.31 P
-0.67 (, along with all its entries, from the) 370.01 280.31 P
0 9 Q
(GEOS.INI) 180 268.81 T
0 10 Q
( \336le. Pass it the following:) 223.34 268.81 T
6 F
(category) 180 250.31 T
0 F
(A pointer to the null-terminated string representing the) 243 250.31 T
(category to be deleted. This string ignores white space and is) 243 239.31 T
(case-insensitive.) 243 228.31 T
2 F
(Include:) 99 210.31 T
0 F
(init\336le.h) 180 210.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "253" 17
%%Page: "254" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(254) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileDeleteEntry\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InitFileDeleteEntry\050) 153 620.33 T
4 9 Q
(const char *category,) 153 609.99 T
(const char *key\051;) 153 599.99 T
0 10 Q
(This routine deletes an entry in the) 180 582.33 T
0 9 Q
(GEOS.INI) 346.87 582.33 T
0 10 Q
( \336le. Pass it the following:) 390.2 582.33 T
6 F
(category) 180 563.83 T
0 F
(A pointer to the null-terminated string representing the) 243 563.83 T
(category in which the entry resides. This string ignores white) 243 552.83 T
(space and is case-insensitive.) 243 541.83 T
6 F
(key) 180 523.83 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 523.83 P
(be deleted.) 243 512.83 T
2 F
(Include:) 99 494.83 T
0 F
(init\336le.h) 180 494.83 T
81 478.48 531 483.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 478.48 531 483.49 R
7 X
0 0 0 1 0 0 0 K
V
50 482.48 609.01 482.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 470.48 T
2 F
(InitFileDeleteStringSection\050\051) 99 470.48 T
3 10 Q
(void) 99 456.82 T
4 F
(InitFileDeleteStringSection\050) 153 456.82 T
4 9 Q
(const char *) 153 446.48 T
(category,) 261 446.48 T
(const char *) 153 436.48 T
(key,) 261 436.48 T
(word) 153 426.48 T
(stringNum\051;) 261 426.48 T
0 10 Q
(This routine deletes the speci\336ed string section from the given blob in the) 180 408.82 T
0 9 Q
(GEOS.INI) 180 397.32 T
0 10 Q
( \336le. Pass it the following:) 223.34 397.32 T
6 F
(category) 180 378.82 T
0 F
(A pointer to the null-terminated string representing the) 243 378.82 T
(category in which the entry resides. This string ignores white) 243 367.82 T
(space and is case-insensitive.) 243 356.82 T
6 F
(key) 180 338.82 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 338.82 P
(be edited.) 243 327.82 T
6 F
(stringNum) 180 309.82 T
0 F
(The zero-based string section number) 243 309.82 T
(.) 416.15 309.82 T
2 F
(Include:) 99 291.82 T
0 F
(init\336le.h) 180 291.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "254" 18
%%Page: "255" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(255) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileEnumStringSection\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileEnumStringSection\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(category,) 261 609.99 T
(const char *) 153 599.99 T
(key,) 261 599.99 T
(InitFileReadFlags) 153 589.99 T
(flags,) 261 589.99 T
(Boolean _pascal \050*callback\051) 153 579.99 T
(\050const char *) 298.8 579.99 T
(stringSection,) 369 579.99 T
( word) 261 569.99 T
(sectionNum,) 333 569.99 T
( void *) 261 559.99 T
(enumData\051,) 333 559.99 T
(void *) 153 549.99 T
(enumdata\051;) 261 549.99 T
0 10 Q
(This routine enumerates a particular blob, allowing a callback routine to) 180 532.33 T
(process each of the string sections in it. The routine will stop processing) 180 520.83 T
-0.09 (either after the last string section or when the callback routine returns) 180 509.33 P
6 F
-0.09 (true) 509.71 509.33 P
0 F
-0.09 (.) 528.22 509.33 P
(Pass this routine the following:) 180 490.83 T
6 F
(category) 180 472.33 T
0 F
(A pointer to the null-terminated string representing the) 243 472.33 T
(category in which the entry resides. This string ignores white) 243 461.33 T
(space and is case-insensitive.) 243 450.33 T
6 F
(key) 180 432.33 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 432.33 P
(be enumerated.) 243 421.33 T
6 F
(\337ags) 180 403.33 T
0 F
(A record of) 243 403.33 T
5 F
(InitFileReadFlags) 295.95 403.33 T
0 F
( indicating the method of) 390.01 403.33 T
-0.84 (character conversion upon reading \050upcase all, downcase all, do) 243 392.33 P
(not change\051.) 243 381.33 T
6 F
(callback) 180 363.33 T
0 F
-0.54 (A pointer to a Boolean callback routine. The callback routine is) 243 363.33 P
(described below) 243 352.33 T
(.) 315.05 352.33 T
6 F
(enumData) 180 334.33 T
0 F
(This pointer is passed unchanged to the callback routine.) 243 334.33 T
5 F
(InitFileEnumStringSection\050\051) 243 323.33 T
0 F
( does not use it.) 392.8 323.33 T
(This routine returns a Boolean value. It returns) 180 305.33 T
6 F
(true) 404.27 305.33 T
0 F
( if the callback routine) 422.78 305.33 T
(halted the enumeration by returning) 180 293.83 T
6 F
(true) 353.16 293.83 T
0 F
(; otherwise, it returns) 371.67 293.83 T
6 F
(false) 475.01 293.83 T
0 F
(.) 496.29 293.83 T
(Callback Routine:) 99 275.33 T
(The callback routine may do anything it wants with the string section it) 180 257.33 T
(receives. It must be declared _pascal. It must return a Boolean value: If it) 180 245.83 T
(returns) 180 234.33 T
6 F
(true) 217.4 234.33 T
0 F
(,) 235.91 234.33 T
5 F
(InitFileEnumStringSection\050\051) 241.47 234.33 T
0 F
( will stop processing the blob.) 391.27 234.33 T
(If it returns) 180 222.83 T
6 F
(false) 237.4 222.83 T
0 F
(, processing will continue to the next string section, if any) 258.68 222.83 T
(.) 524.07 222.83 T
(The callback will receive the following parameters:) 180 211.33 T
6 F
(stringSection) 180 192.83 T
0 F
-0.18 (A pointer to the null-terminated string section to be processed.) 243 181.83 P
6 F
(sectionNum) 180 163.83 T
0 F
(The zero-based number of the string section currently being) 243 163.83 T
(processed.) 243 152.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "255" 19
%%Page: "256" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(256) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
6 10 Q
0 X
(enumData) 180 641.33 T
0 F
(A pointer passed through from the caller of) 243 641.33 T
5 F
(InitFileEnumStringSection\050\051) 243 630.33 T
0 F
(.) 392.8 630.33 T
2 F
(Include:) 99 612.33 T
0 F
(init\336le.h) 180 612.33 T
81 595.99 531 601 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 595.99 531 601 R
7 X
0 0 0 1 0 0 0 K
V
50 599.99 609.01 599.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 587.99 T
2 F
(InitFileGetT) 99 587.99 T
(imeLastModi\336ed\050\051) 164.8 587.99 T
3 10 Q
(dword) 99 573.33 T
4 F
(InitFileGetTimeLastModified\050void\051;) 153 573.33 T
0 F
-0.23 (This routine returns the time when the) 180 555.33 P
0 9 Q
-0.2 (GEOS.INI) 362.69 555.33 P
0 10 Q
-0.23 ( \336le was last modi\336ed. The) 406.02 555.33 P
(returned time is the value of the system counter when the \336le was last) 180 543.83 T
(written.) 180 532.33 T
2 F
(Include:) 99 513.83 T
0 F
(init\336le.h) 180 513.83 T
81 497.48 531 502.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 497.48 531 502.49 R
7 X
0 0 0 1 0 0 0 K
V
50 501.48 609.01 501.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 489.48 T
2 F
(InitFileReadBoolean\050\051) 99 489.48 T
3 10 Q
(Boolean) 99 474.82 T
4 F
(InitFileReadBoolean\050) 153 474.82 T
4 9 Q
(const char *) 153 464.48 T
(category,) 261 464.48 T
(const char *) 153 454.48 T
(key,) 261 454.48 T
(Boolean *) 153 444.48 T
(bool\051;) 261 444.48 T
0 10 Q
(This routine reads a Boolean entry in the) 180 426.82 T
0 9 Q
(GEOS.INI) 373.54 426.82 T
0 10 Q
( \336le, copying it into a) 416.88 426.82 T
-0.37 (passed buffer) 180 415.32 P
-0.37 (. It returns the \336rst instance of the category/key combination it) 240.74 415.32 P
-0.11 (encounters, searching the local) 180 403.82 P
0 9 Q
-0.1 (INI) 325.31 403.82 P
0 10 Q
-0.11 ( \336le \336rst. Thus, local settings will always) 339.97 403.82 P
(override system or network settings.) 180 392.32 T
-0.48 (This routine is used for reading data written with) 180 373.82 P
5 F
-0.49 (InitFileW) 408.34 373.82 P
-0.49 (riteBoolean\050\051) 457.03 373.82 P
0 F
-0.48 (.) 525.92 373.82 P
(Pass it the following parameters:) 180 362.32 T
6 F
(category) 180 343.82 T
0 F
(A pointer to the null-terminated string representing the) 243 343.82 T
(category in which the entry resides. This string ignores white) 243 332.82 T
(space and is case-insensitive.) 243 321.82 T
6 F
(key) 180 303.82 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 303.82 P
(be retrieved.) 243 292.82 T
6 F
(bool) 180 274.82 T
0 F
-0.54 (A pointer to a Boolean variable in which the Boolean value will) 243 274.82 P
(be returned.) 243 263.82 T
-0.49 (The function\325) 180 245.82 P
-0.49 (s return value will be) 239.88 245.82 P
6 F
-0.49 (true) 338.92 245.82 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 245.82 P
(not be found; it will be) 180 234.32 T
6 F
(false) 286.14 234.32 T
0 F
( otherwise.) 307.42 234.32 T
2 F
(W) 99 215.82 T
(arnings:) 108.07 215.82 T
0 F
(The return value of this function is) 180 215.82 T
6 F
(not) 344.45 215.82 T
0 F
( the Boolean stored in the) 359.08 215.82 T
0 9 Q
(GEOS.INI) 480.76 215.82 T
0 10 Q
(\336le. That value is returned in the Boolean pointed to by) 180 202.82 T
6 F
(bool) 439.3 202.82 T
0 F
(.) 458.19 202.82 T
2 F
(Include:) 99 182.82 T
0 F
(init\336le.h) 180 182.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "256" 20
%%Page: "257" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(257) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileReadDataBlock\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileReadDataBlock\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(category,) 261 609.99 T
(const char *) 153 599.99 T
(key,) 261 599.99 T
(MemHandle *) 153 589.99 T
(block,) 261 589.99 T
(word *) 153 579.99 T
(dataSize\051;) 261 579.99 T
0 10 Q
(This routine reads an entry in the) 180 562.33 T
0 9 Q
(GEOS.INI) 339.83 562.33 T
0 10 Q
( \336le, allocating a new block and) 383.17 562.33 T
(copying the data into it. The routine returns the \336rst instance of the) 180 550.83 T
(category/key combination it encounters, searching the local) 180 539.33 T
0 9 Q
(INI) 456.13 539.33 T
0 10 Q
( \336le \336rst.) 470.79 539.33 T
(Thus, local settings will always override system or network settings.) 180 527.83 T
(This routine is used for reading data written with) 180 509.33 T
5 F
(InitFileW) 412.62 509.33 T
(riteData\050\051) 461.31 509.33 T
0 F
(.) 512.79 509.33 T
(Pass it the following parameters:) 180 497.83 T
6 F
(category) 180 479.33 T
0 F
(A pointer to the null-terminated string representing the) 243 479.33 T
(category in which the entry resides. This string ignores white) 243 468.33 T
(space and is case-insensitive.) 243 457.33 T
6 F
(key) 180 439.33 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 439.33 P
(be retrieved.) 243 428.33 T
6 F
(block) 180 410.33 T
0 F
(A pointer to a null memory handle. This pointer will point to) 243 410.33 T
(the newly-allocated block handle upon return. The data read) 243 399.33 T
(will be in the new block. It is your respojnsibility to free this) 243 388.33 T
(block when you\325re done with it.) 243 377.33 T
6 F
(dataSize) 180 359.33 T
0 F
(The size of the read data. All the data will be read; the block) 243 359.33 T
(will be as large as necessary) 243 348.33 T
(.) 372.66 348.33 T
-0.49 (The function\325) 180 330.33 P
-0.49 (s return value will be) 239.88 330.33 P
6 F
-0.49 (true) 338.92 330.33 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 330.33 P
(not be found; it will be) 180 318.83 T
6 F
(false) 286.14 318.83 T
0 F
( otherwise.) 307.42 318.83 T
2 F
(Include:) 99 300.33 T
0 F
(init\336le.h) 180 300.33 T
81 283.98 531 288.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 283.98 531 288.99 R
7 X
0 0 0 1 0 0 0 K
V
50 287.98 609.01 287.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 275.98 T
2 F
(InitFileReadDataBuffer\050\051) 99 275.98 T
3 10 Q
(Boolean) 99 261.32 T
4 F
(InitFileReadDataBuffer\050) 153 261.32 T
4 9 Q
(const char *) 153 250.98 T
(category,) 261 250.98 T
(const char *) 153 240.98 T
(key,) 261 240.98 T
(void *) 153 230.98 T
(buffer,) 261 230.98 T
(word) 153 220.98 T
(bufSize,) 261 220.98 T
(word *) 153 210.98 T
(dataSize\051;) 261 210.98 T
0 10 Q
(This routine reads an entry in the) 180 193.32 T
0 9 Q
(GEOS.INI) 339.83 193.32 T
0 10 Q
( \336le, copying it into a passed) 383.17 193.32 T
(buffer) 180 181.82 T
(. It returns the \336rst instance of the category/key combination it) 207.03 181.82 T
-0.11 (encounters, searching the local) 180 170.32 P
0 9 Q
-0.1 (INI) 325.31 170.32 P
0 10 Q
-0.11 ( \336le \336rst. Thus, local settings will always) 339.97 170.32 P
(override system or network settings.) 180 158.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "257" 21
%%Page: "258" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(258) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(This routine is used for reading data written with) 180 641.33 T
5 F
(InitFileW) 412.62 641.33 T
(riteData\050\051) 461.31 641.33 T
0 F
(.) 512.79 641.33 T
(Pass it the following parameters:) 180 629.83 T
6 F
(category) 180 611.33 T
0 F
(A pointer to the null-terminated string representing the) 243 611.33 T
(category in which the entry resides. This string ignores white) 243 600.33 T
(space and is case-insensitive.) 243 589.33 T
6 F
(key) 180 571.33 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 571.33 P
(be retrieved.) 243 560.33 T
6 F
(buffer) 180 542.33 T
0 F
-0.37 (A pointer to the buffer in which the data will be returned. This) 243 542.33 P
(buffer must be in locked or \336xed memory) 243 531.33 T
(.) 430.97 531.33 T
6 F
(bufSize) 180 513.33 T
0 F
-0.18 (The size of the passed buffer in bytes. If you are not sure what) 243 513.33 P
(the data\325) 243 502.33 T
(s size will be, you may want to use the \050slightly less) 283.2 502.33 T
(ef\336cient\051) 243 491.33 T
5 F
(InitFileReadDataBlock\050\051) 286.14 491.33 T
0 F
(.) 414.47 491.33 T
6 F
(dataSize) 180 473.33 T
0 F
-0.44 (A pointer to a word; on return, the word pointed to will contain) 243 473.33 P
(the size \050in bytes\051 of the data returned.) 243 462.33 T
-0.49 (The function\325) 180 444.33 P
-0.49 (s return value will be) 239.88 444.33 P
6 F
-0.49 (true) 338.92 444.33 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 444.33 P
(not be found; it will be) 180 432.83 T
6 F
(false) 286.14 432.83 T
0 F
( otherwise.) 307.42 432.83 T
2 F
(Include:) 99 414.33 T
0 F
(init\336le.h) 180 414.33 T
81 397.99 531 403 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 397.99 531 403 R
7 X
0 0 0 1 0 0 0 K
V
50 401.99 609.01 401.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 389.99 T
2 F
(InitFileReadInteger\050\051) 99 389.99 T
3 10 Q
(Boolean) 99 375.33 T
4 F
(InitFileReadInteger\050) 153 375.33 T
4 9 Q
(const char *) 153 364.99 T
(category,) 261 364.99 T
(const char *) 153 354.99 T
(key,) 261 354.99 T
(word *) 153 344.99 T
(i\051;) 261 344.99 T
0 10 Q
(This routine reads an integer entry in the) 180 327.33 T
0 9 Q
(GEOS.INI) 375.57 327.33 T
0 10 Q
( \336le, copying it into the) 418.9 327.33 T
-0.49 (passed variable. It returns the \336rst instance of the category/key combination) 180 315.83 P
(it encounters, searching the local) 180 304.33 T
0 9 Q
(INI) 335.56 304.33 T
0 10 Q
( \336le \336rst. Thus, local settings will) 350.22 304.33 T
(always override system or network settings.) 180 292.83 T
-0.09 (This routine is used for reading data written with) 180 274.33 P
5 F
-0.09 (InitFileW) 411.84 274.33 P
-0.09 (riteInteger\050\051) 460.53 274.33 P
0 F
-0.09 (.) 525.53 274.33 P
(Pass it the following parameters:) 180 262.83 T
6 F
(category) 180 244.33 T
0 F
(A pointer to the null-terminated string representing the) 243 244.33 T
(category in which the entry resides. This string ignores white) 243 233.33 T
(space and is case-insensitive.) 243 222.33 T
6 F
(key) 180 204.33 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 204.33 P
(be retrieved.) 243 193.33 T
6 F
(i) 180 175.33 T
0 F
(A pointer to a word in which the integer will be returned.) 243 175.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "258" 22
%%Page: "259" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(259) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
-0.49 (The function\325) 180 641.33 P
-0.49 (s return value will be) 239.88 641.33 P
6 F
-0.49 (true) 338.92 641.33 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 641.33 P
(not be found; it will be) 180 629.83 T
6 F
(false) 286.14 629.83 T
0 F
( otherwise.) 307.42 629.83 T
2 F
(Include:) 99 611.33 T
0 F
(init\336le.h) 180 611.33 T
81 594.99 531 600 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 594.99 531 600 R
7 X
0 0 0 1 0 0 0 K
V
50 598.99 609.01 598.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 586.99 T
2 F
(InitFileReadStringBlock\050\051) 99 586.99 T
3 10 Q
(Boolean) 99 572.33 T
4 F
(InitFileReadStringBlock\050) 153 572.33 T
4 9 Q
(const char *) 153 561.99 T
(category,) 261 561.99 T
(const char *) 153 551.99 T
(key,) 261 551.99 T
(MemHandle *) 153 541.99 T
(block,) 261 541.99 T
(InitFileReadFlags) 153 531.99 T
(flags,) 261 531.99 T
(word *) 153 521.99 T
(dataSize\051;) 261 521.99 T
0 10 Q
(This routine reads a string entry in the) 180 504.33 T
0 9 Q
(GEOS.INI) 364.09 504.33 T
0 10 Q
( \336le, allocates a new block) 407.42 504.33 T
(on the global heap, and copies the read string into the new block. It returns) 180 492.83 T
(the \336rst instance of the category/key combination it encounters, searching) 180 481.33 T
(the local) 180 469.83 T
0 9 Q
(INI) 221.86 469.83 T
0 10 Q
( \336le \336rst. Thus, local settings will always override system or) 236.52 469.83 T
(network settings.) 180 458.33 T
(This routine is used for reading data written with) 180 439.83 T
5 F
(InitFileW) 412.62 439.83 T
(riteString\050\051) 461.31 439.83 T
0 F
(.) 520.76 439.83 T
(Pass it the following parameters:) 180 428.33 T
6 F
(category) 180 409.83 T
0 F
(A pointer to the null-terminated string representing the) 243 409.83 T
(category in which the entry resides. This string ignores white) 243 398.83 T
(space and is case-insensitive.) 243 387.83 T
6 F
(key) 180 369.83 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 369.83 P
(be retrieved.) 243 358.83 T
6 F
(block) 180 340.83 T
0 F
-0.64 (A pointer to a memory block handle variable. Upon return, this) 243 340.83 P
(variable will contain the handle of the newly allocated block;) 243 329.83 T
(the block will contain the string read from the \336le. It is your) 243 318.83 T
(responsibility to free this block when you\325re done with it.) 243 307.83 T
6 F
(\337ags) 180 289.83 T
0 F
(A record of) 243 289.83 T
5 F
(InitFileReadFlags) 295.95 289.83 T
0 F
( indicating the method of) 390.01 289.83 T
-0.84 (character conversion upon reading \050upcase all, downcase all, do) 243 278.83 P
(not change\051.) 243 267.83 T
6 F
(dataSize) 180 249.83 T
0 F
-0.35 (A pointer to a word which, upon return, will contain the size of) 243 249.83 P
(the string \050in bytes\051 actually read from the \336le.) 243 238.83 T
-0.49 (The function\325) 180 220.83 P
-0.49 (s return value will be) 239.88 220.83 P
6 F
-0.49 (true) 338.92 220.83 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 220.83 P
(not be found; it will be) 180 209.33 T
6 F
(false) 286.14 209.33 T
0 F
( otherwise.) 307.42 209.33 T
2 F
(Include:) 99 190.83 T
0 F
(init\336le.h) 180 190.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "259" 23
%%Page: "260" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(260) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileReadStringBuffer\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileReadStringBuffer\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(category,) 261 609.99 T
(const char *) 153 599.99 T
(key,) 261 599.99 T
(char *) 153 589.99 T
(buffer,) 261 589.99 T
(InitFileReadFlags) 153 579.99 T
(flags,) 261 579.99 T
(word *) 153 569.99 T
(dataSize\051;) 261 569.99 T
0 10 Q
(This routine reads a string entry in the) 180 552.33 T
0 9 Q
(GEOS.INI) 364.09 552.33 T
0 10 Q
( \336le, copying it into a) 407.42 552.33 T
(passed, locked buffer) 180 540.83 T
(. It returns the \336rst instance of the category/key) 275.93 540.83 T
(combination it encounters, searching the local) 180 529.33 T
0 9 Q
(INI) 395.2 529.33 T
0 10 Q
( \336le \336rst. Thus, local) 409.86 529.33 T
(settings will always override system or network settings.) 180 517.83 T
(This routine is used for reading data written with) 180 499.33 T
5 F
(InitFileW) 412.62 499.33 T
(riteString\050\051) 461.31 499.33 T
0 F
(.) 520.76 499.33 T
(Pass it the following parameters:) 180 487.83 T
6 F
(category) 180 469.33 T
0 F
(A pointer to the null-terminated string representing the) 243 469.33 T
(category in which the entry resides. This string ignores white) 243 458.33 T
(space and is case-insensitive.) 243 447.33 T
6 F
(key) 180 429.33 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 429.33 P
(be retrieved.) 243 418.33 T
6 F
(buffer) 180 400.33 T
0 F
(A pointer to a buffer into which the returned string will be) 243 400.33 T
(written. This buffer must be in locked or \336xed memory) 243 389.33 T
(. If you) 494.13 389.33 T
(don\325) 243 378.33 T
(t know the approximate size of the data, you may want to) 261.71 378.33 T
(use the \050slightly less ef\336cient\051) 243 367.33 T
5 F
(InitFileReadStringBlock\050\051) 383.56 367.33 T
0 F
(.) 519.86 367.33 T
6 F
(\337ags) 180 349.33 T
0 F
(A record of) 243 349.33 T
5 F
(InitFileReadFlags) 295.95 349.33 T
0 F
( indicating the size of the) 390.01 349.33 T
(passed buffer as well as the method of character conversion) 243 338.33 T
(upon reading \050upcase all, downcase all, do not change\051.) 243 327.33 T
6 F
(dataSize) 180 309.33 T
0 F
-0.35 (A pointer to a word which, upon return, will contain the size of) 243 309.33 P
(the string \050in bytes\051 actually read from the \336le.) 243 298.33 T
-0.49 (The function\325) 180 280.33 P
-0.49 (s return value will be) 239.88 280.33 P
6 F
-0.49 (true) 338.92 280.33 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 280.33 P
(not be found; it will be) 180 268.83 T
6 F
(false) 286.14 268.83 T
0 F
( otherwise.) 307.42 268.83 T
2 F
(Include:) 99 250.33 T
0 F
(init\336le.h) 180 250.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "260" 24
%%Page: "261" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(261) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileReadStringSectionBlock\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileReadStringSectionBlock\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(category,) 261 609.99 T
(const char *) 153 599.99 T
(key,) 261 599.99 T
(word) 153 589.99 T
(section,) 261 589.99 T
(MemHandle *) 153 579.99 T
(block,) 261 579.99 T
(InitFileReadFlags) 153 569.99 T
(flags,) 261 569.99 T
(word *) 153 559.99 T
(dataSize\051;) 261 559.99 T
0 10 Q
(This routine reads a string section from the speci\336ed entry in the) 180 542.33 T
0 9 Q
(GEOS.INI) 483.9 542.33 T
0 10 Q
(\336le, allocates a new block on the global heap, and copies the read string) 180 530.83 T
(section into the new block. It returns the \336rst instance of the category/key) 180 519.33 T
(combination it encounters, searching the local) 180 507.83 T
0 9 Q
(INI) 395.2 507.83 T
0 10 Q
( \336le \336rst. Thus, local) 409.86 507.83 T
(settings will always override system or network settings.) 180 496.33 T
-0.43 (This routine is used for reading data written with) 180 477.83 P
5 F
-0.45 (InitFileW) 408.73 477.83 P
-0.45 (riteString\050\051) 457.42 477.83 P
0 F
-0.43 ( or) 516.86 477.83 P
5 F
(InitFileW) 180 466.33 T
(riteStringSection\050\051) 228.69 466.33 T
0 F
(. Pass it the following parameters:) 327.03 466.33 T
6 F
(category) 180 447.83 T
0 F
(A pointer to the null-terminated string representing the) 243 447.83 T
(category in which the entry resides. This string ignores white) 243 436.83 T
(space and is case-insensitive.) 243 425.83 T
6 F
(key) 180 407.83 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 407.83 P
(be retrieved.) 243 396.83 T
6 F
(section) 180 378.83 T
0 F
(The zero-based number of the string section to retrieved.) 243 378.83 T
6 F
(block) 180 360.83 T
0 F
-0.23 (A pointer to a memory block handle. Upon return, this pointer) 243 360.83 P
-0.02 (will point to the handle of the newly allocated block; the block) 243 349.83 P
(will contain the string section read from the \336le.) 243 338.83 T
6 F
(\337ags) 180 320.83 T
0 F
(A record of) 243 320.83 T
5 F
(InitFileReadFlags) 295.95 320.83 T
0 F
( indicating the method of) 390.01 320.83 T
-0.84 (character conversion upon reading \050upcase all, downcase all, do) 243 309.83 P
(not change\051.) 243 298.83 T
6 F
(dataSize) 180 280.83 T
0 F
-0.35 (A pointer to a word which, upon return, will contain the size of) 243 280.83 P
(the string section \050in bytes\051 actually read from the \336le.) 243 269.83 T
-0.49 (The function\325) 180 251.83 P
-0.49 (s return value will be) 239.88 251.83 P
6 F
-0.49 (true) 338.92 251.83 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 251.83 P
(not be found; it will be) 180 240.33 T
6 F
(false) 286.14 240.33 T
0 F
( otherwise.) 307.42 240.33 T
2 F
(Include:) 99 221.83 T
0 F
(init\336le.h) 180 221.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "261" 25
%%Page: "262" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(262) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileReadStringSectionBuffer\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileReadStringSectionBuffer\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(category,) 261 609.99 T
(const char *) 153 599.99 T
(key,) 261 599.99 T
(word) 153 589.99 T
(section,) 261 589.99 T
(char *) 153 579.99 T
(buffer,) 261 579.99 T
(InitFileReadFlags) 153 569.99 T
(flags,) 261 569.99 T
(word *) 153 559.99 T
(dataSize\051;) 261 559.99 T
0 10 Q
(This routine reads a string section from the speci\336ed entry in the) 180 542.33 T
0 9 Q
(GEOS.INI) 483.9 542.33 T
0 10 Q
-0.42 (\336le, copying it into a passed, locked buffer) 180 530.83 P
-0.42 (. It returns the indicated section in) 369.86 530.83 P
(the \336rst instance of the category/key combination it encounters, searching) 180 519.33 T
(the local) 180 507.83 T
0 9 Q
(INI) 221.86 507.83 T
0 10 Q
( \336le \336rst. Thus, local settings will always override system or) 236.52 507.83 T
(network settings.) 180 496.33 T
(This routine is used for reading data written with) 180 477.83 T
5 F
(InitFileW) 180 466.33 T
(riteStringSection\050\051) 228.69 466.33 T
0 F
(. Pass it the following parameters:) 327.03 466.33 T
6 F
(category) 180 447.83 T
0 F
(A pointer to the null-terminated string representing the) 243 447.83 T
(category in which the entry resides. This string ignores white) 243 436.83 T
(space and is case-insensitive.) 243 425.83 T
6 F
(key) 180 407.83 T
0 F
-0.44 (A pointer to the null-terminated string representing the key to) 243 407.83 P
(be retrieved.) 243 396.83 T
6 F
(section) 180 378.83 T
0 F
(The zero-based number of the string section to be retrieved.) 243 378.83 T
6 F
(buffer) 180 360.83 T
0 F
-0.55 (A pointer to a buffer into which the returned string section will) 243 360.83 P
(be written. This buffer must be in locked or \336xed memory) 243 349.83 T
(. If) 507.47 349.83 T
(you don\325) 243 338.83 T
(t know the approximate size of the string section, you) 280.97 338.83 T
(may want to use the \050slightly less ef\336cient\051) 243 327.83 T
5 F
(InitFileReadStringSectionBlock\050\051) 243 316.83 T
0 F
(.) 418.19 316.83 T
6 F
(\337ags) 180 298.83 T
0 F
(A record of) 243 298.83 T
5 F
(InitFileReadFlags) 295.95 298.83 T
0 F
( indicating the size of the) 390.01 298.83 T
(passed buffer as well as the method of character conversion) 243 287.83 T
(upon reading \050upcase all, downcase all, do not change\051.) 243 276.83 T
6 F
(dataSize) 180 258.83 T
0 F
-0.35 (A pointer to a word which, upon return, will contain the size of) 243 258.83 P
(the string section \050in bytes\051 actually read from the \336le.) 243 247.83 T
-0.49 (The function\325) 180 229.83 P
-0.49 (s return value will be) 239.88 229.83 P
6 F
-0.49 (true) 338.92 229.83 P
0 F
-0.49 ( if an error occurs or if the entry could) 357.42 229.83 P
(not be found; it will be) 180 218.33 T
6 F
(false) 286.14 218.33 T
0 F
( otherwise.) 307.42 218.33 T
2 F
(Include:) 99 199.83 T
0 F
(init\336le.h) 180 199.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "262" 26
%%Page: "263" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(263) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileRevert\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(InitFileRevert\050void\051;) 153 620.33 T
0 F
(This routine restores the) 180 602.33 T
0 9 Q
(GEOS.INI) 297.41 602.33 T
0 10 Q
( \336le from its saved backup version. It) 340.74 602.33 T
-0.73 (ensures that no other thread is operating on the \336le while it is being restored.) 180 590.83 P
-0.15 (This function returns an error \337ag:) 180 579.33 P
6 F
-0.15 (true) 343.92 579.33 P
0 F
-0.15 ( represents an error in restoring the) 362.42 579.33 P
(\336le;) 180 567.83 T
6 F
(false) 199.82 567.83 T
0 F
( indicates success.) 221.1 567.83 T
2 F
(Include:) 99 549.33 T
0 F
(init\336le.h) 180 549.33 T
81 532.98 531 537.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 532.98 531 537.99 R
7 X
0 0 0 1 0 0 0 K
V
50 536.98 609.01 536.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 524.98 T
2 F
(InitFileSave\050\051) 99 524.98 T
3 10 Q
(Boolean) 99 511.32 T
4 F
(InitFileSave\050void\051;) 153 511.32 T
0 F
(This routine saves the) 180 493.32 T
0 9 Q
(GEOS.INI) 285.57 493.32 T
0 10 Q
( \336le synchronously by updating the backup) 328.9 493.32 T
(\336le to be the current version. \050) 180 481.82 T
5 F
(InitFileCommit\050\051) 319.63 481.82 T
0 F
( actually overwrites the) 407.95 481.82 T
0 9 Q
(GEOS.INI) 180 470.32 T
0 10 Q
( \336le itself.\051 It ensures that no other thread is operating on the \336le) 223.34 470.32 T
(while it is being written out. This function returns an error \337ag:) 180 458.82 T
6 F
(true) 478.73 458.82 T
0 F
(represents an error in trying to save the \336le;) 180 447.32 T
6 F
(false) 387.97 447.32 T
0 F
( indicates success.) 409.25 447.32 T
2 F
(Include:) 99 428.82 T
0 F
(init\336le.h) 180 428.82 T
81 412.48 531 417.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 412.48 531 417.48 R
7 X
0 0 0 1 0 0 0 K
V
50 416.48 609.01 416.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 404.48 T
2 F
(InitFileW) 99 404.48 T
(riteBoolean\050\051) 148.79 404.48 T
4 10 Q
(void) 99 389.81 T
(InitFileWriteBoolean\050) 153 389.81 T
4 9 Q
(const char *) 153 379.48 T
(category,) 261 379.48 T
(const char *) 153 369.48 T
(key,) 261 369.48 T
(Boolean) 153 359.48 T
(bool\051;) 261 359.48 T
0 10 Q
-0.51 (This integer writes a Boolean value into the speci\336ed category and key of the) 180 341.81 P
(local) 180 330.31 T
0 9 Q
(GEOS.INI) 204.08 330.31 T
0 10 Q
( \336le. The Boolean will appear as \322true\323 or \322false\323 if the user) 247.41 330.31 T
-0.36 (looks at) 180 318.81 P
0 9 Q
-0.32 (GEOS.INI) 218 318.81 P
0 10 Q
-0.36 ( with a text editor) 261.33 318.81 P
-0.36 (, but it will be an actual Boolean value to) 342.13 318.81 P
0 9 Q
(GEOS) 180 307.31 T
0 10 Q
(. Pass this routine the following:) 206.17 307.31 T
6 F
(category) 180 288.81 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 288.81 P
(the) 243 277.81 T
0 9 Q
(INI) 260.78 277.81 T
0 10 Q
( category into which the data should be written.) 275.44 277.81 T
6 F
(key) 180 259.81 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 259.81 P
(the) 243 248.81 T
0 9 Q
(INI) 260.78 248.81 T
0 10 Q
( key within) 275.44 248.81 T
6 F
(category) 330.27 248.81 T
0 F
( into which the data should be) 368.22 248.81 T
(written.) 243 237.81 T
6 F
(bool) 180 219.81 T
0 F
(The Boolean value to be written.) 243 219.81 T
(Once written, the Boolean value can be read with) 180 201.81 T
5 F
(InitFileReadBoolean\050\051) 410.96 201.81 T
0 F
(.) 527.06 201.81 T
2 F
(Include:) 99 183.31 T
0 F
(init\336le.h) 180 183.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "263" 27
%%Page: "264" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(264) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileW) 99 634.99 T
(riteData\050\051) 148.79 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(InitFileWriteData\050) 153 621.33 T
4 9 Q
(const char) 153 610.99 T
(*category,) 261 610.99 T
(const char) 153 600.99 T
(*key,) 261 600.99 T
(const void) 153 590.99 T
(*buffer,) 261 590.99 T
(word) 153 580.99 T
(bufSize\051;) 261 580.99 T
0 10 Q
-0.54 (This routine writes a given piece of data to the local) 180 563.33 P
0 9 Q
-0.49 (GEOS.INI) 415.91 563.33 P
0 10 Q
-0.54 ( \336le. Pass it the) 459.25 563.33 P
(following:) 180 551.83 T
6 F
(category) 180 533.33 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 533.33 P
(the) 243 522.33 T
0 9 Q
(INI) 260.78 522.33 T
0 10 Q
( category into which the data should be written.) 275.44 522.33 T
6 F
(key) 180 504.33 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 504.33 P
(the) 243 493.33 T
0 9 Q
(INI) 260.78 493.33 T
0 10 Q
( key within) 275.44 493.33 T
6 F
(category) 330.27 493.33 T
0 F
( into which the data should be) 368.22 493.33 T
(written.) 243 482.33 T
6 F
(buffer) 180 464.33 T
0 F
(A pointer to a locked or \336xed buffer containing the data to be) 243 464.33 T
(written.) 243 453.33 T
6 F
(bufSize) 180 435.33 T
0 F
(The size of the buffer in bytes.) 243 435.33 T
(Once data has been written to the) 180 417.33 T
0 9 Q
(INI) 339.66 417.33 T
0 10 Q
( \336le, it can be read with) 354.32 417.33 T
5 F
(InitFileReadDataBlock\050\051) 180 405.83 T
0 F
( or) 308.33 405.83 T
5 F
(InitFileReadDataBuffer\050\051) 323.33 405.83 T
0 F
(.) 455.36 405.83 T
2 F
(Include:) 99 387.33 T
0 F
(init\336le.h) 180 387.33 T
81 370.98 531 375.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 370.98 531 375.99 R
7 X
0 0 0 1 0 0 0 K
V
50 374.98 609.01 374.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 362.98 T
2 F
(InitFileW) 99 362.98 T
(riteInteger\050\051) 148.79 362.98 T
3 10 Q
(void) 99 348.32 T
4 F
(InitFileWriteInteger\050) 153 348.32 T
4 9 Q
(const char) 153 337.98 T
(*category,) 261 337.98 T
(const char) 153 327.98 T
(*key,) 261 327.98 T
(word) 153 317.98 T
(value\051;) 261 317.98 T
0 10 Q
-0.75 (This routine writes an integer into the category and key speci\336ed for the local) 180 300.32 P
0 9 Q
(GEOS.INI) 180 288.82 T
0 10 Q
( \336le. Pass the following:) 223.34 288.82 T
6 F
(category) 180 270.32 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 270.32 P
(the) 243 259.32 T
0 9 Q
(INI) 260.78 259.32 T
0 10 Q
( category into which the data should be written.) 275.44 259.32 T
6 F
(key) 180 241.32 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 241.32 P
(the) 243 230.32 T
0 9 Q
(INI) 260.78 230.32 T
0 10 Q
( key within) 275.44 230.32 T
6 F
(category) 330.27 230.32 T
0 F
( into which the data should be) 368.22 230.32 T
(written.) 243 219.32 T
6 F
(value) 180 201.32 T
0 F
(The integer to be written.) 243 201.32 T
(The integer) 180 183.32 T
(, once written, can be read with) 232.78 183.32 T
5 F
(InitFileReadInteger\050\051) 380.95 183.32 T
0 F
(.) 493.16 183.32 T
2 F
(Include:) 99 164.82 T
0 F
(init\336le.h) 180 164.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "264" 28
%%Page: "265" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(265) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InitFileW) 99 634.99 T
(riteString\050\051) 148.79 634.99 T
3 10 Q
(void) 99 621.33 T
4 F
(InitFileWriteString\050) 153 621.33 T
4 9 Q
(const char *category,) 153 610.99 T
(const char *key,) 153 600.99 T
(const char *str\051;) 153 590.99 T
0 10 Q
-0.82 (This routine writes an entire string into the category and key speci\336ed for the) 180 573.33 P
(local) 180 561.83 T
0 9 Q
(GEOS.INI) 204.08 561.83 T
0 10 Q
( \336le. Pass it the following:) 247.41 561.83 T
6 F
(category) 180 543.33 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 543.33 P
(the) 243 532.33 T
0 9 Q
(INI) 260.78 532.33 T
0 10 Q
( category into which the data should be written.) 275.44 532.33 T
6 F
(key) 180 514.33 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 514.33 P
(the) 243 503.33 T
0 9 Q
(INI) 260.78 503.33 T
0 10 Q
( key within) 275.44 503.33 T
6 F
(category) 330.27 503.33 T
0 F
( into which the data should be) 368.22 503.33 T
(written.) 243 492.33 T
6 F
(str) 180 474.33 T
0 F
(A pointer to the null-terminated string to be written. If the) 243 474.33 T
(string contains line feeds or carriage returns, it will) 243 463.33 T
-0.83 (automatically be parsed into string segments and be put within) 243 452.33 P
(curly braces; if it contains curly braces, all closing braces will) 243 441.33 T
(automatically have a backslash inserted before them.) 243 430.33 T
-0.29 (T) 180 412.33 P
-0.29 (o read a string written with this routine, use) 185.75 412.33 P
5 F
-0.3 (InitFileReadStringBlock\050\051) 392.21 412.33 P
0 F
(or) 180 400.83 T
5 F
(InitFileReadStringBuffer\050\051) 192.22 400.83 T
0 F
(.) 332.22 400.83 T
2 F
(Include:) 99 382.33 T
0 F
(init\336le.h) 180 382.33 T
81 365.98 531 370.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 365.98 531 370.99 R
7 X
0 0 0 1 0 0 0 K
V
50 369.98 609.01 369.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 357.98 T
2 F
(InitFileW) 99 357.98 T
(riteStringSection\050\051) 148.79 357.98 T
3 10 Q
(void) 99 343.32 T
4 F
(InitFileWriteStringSection\050) 153 343.32 T
4 9 Q
(const char *category,) 153 332.98 T
(const char *key,) 153 322.98 T
(const char *string\051;) 153 312.98 T
0 10 Q
-0.1 (This routine appends a string section onto the blob speci\336ed by the) 180 295.32 P
6 F
-0.1 (category) 490.37 295.32 P
0 F
-0.13 (and) 180 283.82 P
6 F
-0.13 (key) 200.06 283.82 P
0 F
-0.13 ( parameters. The string section will become part of the blob and will) 215.06 283.82 P
(be its last section. The section may not contain any carriage returns or line) 180 272.32 T
(feeds. Pass this routine the following:) 180 260.82 T
6 F
(category) 180 242.32 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 242.32 P
(the) 243 231.32 T
0 9 Q
(INI) 260.78 231.32 T
0 10 Q
( category into which the data should be written.) 275.44 231.32 T
6 F
(key) 180 213.32 T
0 F
-0.32 (A pointer to the null-terminated character string representing) 243 213.32 P
(the) 243 202.32 T
0 9 Q
(INI) 260.78 202.32 T
0 10 Q
( key within) 275.44 202.32 T
6 F
(category) 330.27 202.32 T
0 F
( into which the data should be) 368.22 202.32 T
(written.) 243 191.32 T
6 F
(string) 180 173.32 T
0 F
(A pointer to the string section to be written.) 243 173.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "265" 29
%%Page: "266" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(266) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(Once written, the segment may be read with) 180 641.33 T
5 F
(InitFileReadStringSectionBlock\050\051) 180 629.83 T
0 F
( or) 355.19 629.83 T
5 F
(Init\336leReadStringSectionBuffer\050\051) 180 618.33 T
0 F
(.) 354.82 618.33 T
2 F
(Include:) 99 599.83 T
0 F
(init\336le.h) 180 599.83 T
81 583.49 531 588.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 583.49 531 588.5 R
7 X
0 0 0 1 0 0 0 K
V
50 587.49 609.01 587.49 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 575.49 T
2 F
(InkDBGetDisplayInfo\050\051) 99 575.49 T
3 10 Q
(void) 99 560.83 T
4 F
(InkDBGetDisplayInfo\050) 153 560.83 T
4 9 Q
(InkDBDisplayInfo *) 153 550.49 T
(retVal,) 261 550.49 T
(VMFileHandle) 153 540.49 T
(fh\051;) 261 540.49 T
0 10 Q
(This routine returns the dword) 180 522.83 T
0 9 Q
( ID) 323.7 522.83 T
0 10 Q
( of the note or folder which is presently) 336.87 522.83 T
(being displayed by the Ink Database. It also returns the) 180 511.33 T
0 9 Q
(ID) 441.35 511.33 T
0 10 Q
( of the parent) 452.02 511.33 T
(folder) 180 499.83 T
(, and the page number) 205.92 499.83 T
(, if applicable.) 309.27 499.83 T
2 F
(Structures:) 99 481.33 T
0 F
(It returns this information by \336lling in an) 180 481.33 T
5 F
(InkDBDisplayInfo) 376.13 481.33 T
0 F
( structure:) 470.93 481.33 T
4 9 Q
(typedef struct {) 216 466.99 T
(dword) 252 456.99 T
(IDBDI_currentDisplay;) 288 456.99 T
(dword) 252 446.99 T
(IDBDI_parentFolder;) 288 446.99 T
(word) 252 436.99 T
(IDBDI_pageNumber;) 288 436.99 T
(} InkDBDisplayInfo;) 216 426.99 T
2 10 Q
(Include:) 99 409.33 T
0 F
(pen.goh) 180 409.33 T
81 392.98 531 397.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 392.98 531 397.99 R
7 X
0 0 0 1 0 0 0 K
V
50 396.98 609.01 396.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 384.98 T
2 F
(InkDBGetHeadFolder\050\051) 99 384.98 T
3 10 Q
(dword) 99 370.32 T
4 F
(InkDBGetHeadFolder\050) 153 370.32 T
4 9 Q
(VMFileHandle) 153 359.98 T
(fh\051;) 261 359.98 T
0 10 Q
-0.02 (This routine returns the dword) 180 342.32 P
0 9 Q
-0.02 (ID) 326.39 342.32 P
0 10 Q
-0.02 ( of the head folder of an Ink Database \336le.) 337.05 342.32 P
2 F
(Include:) 99 323.82 T
0 F
(pen.goh) 180 323.82 T
81 307.48 531 312.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 307.48 531 312.48 R
7 X
0 0 0 1 0 0 0 K
V
50 311.48 609.01 311.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 299.48 T
2 F
(InkDBInit\050\051) 99 299.48 T
3 10 Q
(void) 99 284.81 T
4 F
(InkDBInit\050) 153 284.81 T
4 9 Q
(VMFileHandle) 153 274.47 T
(fh\051;) 261 274.47 T
0 10 Q
(This routine takes a new Ink Database \336le. It initializes the \336le for use,) 180 256.81 T
(creating all needed maps and a top-level folder) 180 245.31 T
(.) 395.21 245.31 T
2 F
(Include:) 99 226.81 T
0 F
(pen.goh) 180 226.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "266" 30
%%Page: "267" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(267) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkDBSetDisplayInfo\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InkDBSetDisplayInfo\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(fh,) 261 609.99 T
(dword) 153 599.99 T
(ofh,) 261 599.99 T
(/* Parent Folder dword ID# */) 297 599.99 T
(dword) 153 589.99 T
(note,) 261 589.99 T
(/* ID# of note or folder to display */) 297 589.99 T
(word) 153 579.99 T
(page\051;) 261 579.99 T
(/* If displaying note, page # to display*/) 298.8 579.99 T
0 10 Q
(This routine sets the display information for an Ink Database \336le. This) 180 562.33 T
(routine sets the user) 180 550.83 T
(\325) 275.92 550.83 T
(s location in the database. The caller must supply the) 277.59 550.83 T
(dword) 180 539.33 T
0 9 Q
(ID) 211.48 539.33 T
0 10 Q
( number of the note or folder to display) 222.15 539.33 T
(, the parent folder \0500 if) 401.05 539.33 T
-0.31 (displaying the top level folder\051, and the page number to display if displaying) 180 527.83 P
(a note.) 180 516.33 T
2 F
(Include:) 99 497.83 T
0 F
(pen.goh) 180 497.83 T
81 481.48 531 486.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 481.48 531 486.49 R
7 X
0 0 0 1 0 0 0 K
V
50 485.48 609.01 485.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 473.48 T
2 F
(InkFolderCreateSubFolder\050\051) 99 473.48 T
3 10 Q
(dword) 99 458.82 T
4 F
(InkFolderCreateSubFolder\050) 153 458.82 T
4 9 Q
(dword) 153 448.48 T
(tag,) 261 448.48 T
(/* ID# of parent folder \0500 for top-level\051 */) 288 448.48 T
(VMFileHandle) 153 438.48 T
(fh\051;) 261 438.48 T
(/* Handle of Ink DB file */) 288 438.48 T
0 10 Q
(This routine creates a subfolder within the passed folder) 180 420.82 T
(. The new folder is) 440.39 420.82 T
(automatically added to it\325) 180 409.32 T
(s parent\325) 297.44 409.32 T
(s chunk array) 337.26 409.32 T
(. The return value is new) 400.41 409.32 T
(folder) 180 397.82 T
(\325) 207.21 397.82 T
(s dword) 208.88 397.82 T
0 9 Q
(ID) 247.77 397.82 T
0 10 Q
( number) 258.43 397.82 T
(.) 296.58 397.82 T
2 F
(Include:) 99 379.32 T
0 F
(pen.goh) 180 379.32 T
81 362.98 531 367.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 362.98 531 367.98 R
7 X
0 0 0 1 0 0 0 K
V
50 366.98 609.01 366.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 354.98 T
2 F
(InkFolderDelete\050\051) 99 354.98 T
3 10 Q
(void) 99 340.31 T
4 F
(InkFolderDelete\050) 153 340.31 T
4 9 Q
(dword) 153 329.98 T
(tag,) 261 329.98 T
(/* ID# of folder */) 297 329.98 T
(VMFileHandle) 153 319.98 T
(fh\051;) 261 319.98 T
(/* Handle of Ink DB file */) 297 319.98 T
0 10 Q
(This routine removes an Ink Database folder) 180 302.31 T
(.) 386.51 302.31 T
2 F
(Include:) 99 283.81 T
0 F
(pen.goh) 180 283.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "267" 31
%%Page: "268" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(268) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkFolderDepthFirstT) 99 634.99 T
(raverse\050\051) 219.68 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(InkFolderDepthFirstTraverse\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(rfldr,) 261 609.99 T
(/* ID# of folder at root of search tree */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh,) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
(Boolean) 153 589.99 T
(_pascal) 196.2 589.99 T
(\050*callback\051\050 /* far ptr to callback routine */) 261 589.99 T
(dword) 261 579.99 T
(fldr,) 333 579.99 T
(VMFileHandle) 261 569.99 T
(fh,) 333 569.99 T
(word *) 261 559.99 T
(info\051,) 333 559.99 T
(word *) 153 549.99 T
(info\051;) 261 549.99 T
(/* Extra data to pass to callback */) 297 549.99 T
0 10 Q
-0.77 (This routine does a depth-\336rst traversal of a folder tree. The callback routine,) 180 532.33 P
(which must be declared _pascal, can halt the search by returning) 180 520.83 T
6 F
(true) 483.73 520.83 T
0 F
(, in) 502.24 520.83 T
(which case the search routine will immediately return) 180 509.33 T
6 F
(true) 433.35 509.33 T
0 F
(; otherwise the) 451.86 509.33 T
(search will return) 180 497.83 T
6 F
(false) 265.74 497.83 T
0 F
(.) 287.02 497.83 T
2 F
(Include:) 99 479.33 T
0 F
(pen.goh) 180 479.33 T
81 462.98 531 467.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 462.98 531 467.99 R
7 X
0 0 0 1 0 0 0 K
V
50 466.98 609.01 466.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 454.98 T
2 F
(InkFolderDisplayChildInList\050\051) 99 454.98 T
3 10 Q
(void) 99 440.32 T
4 F
(InkFolderDisplayChildInList\050) 153 440.32 T
4 9 Q
(dword) 153 429.98 T
(fldr,) 261 429.98 T
(/* ID# of folder */) 297 429.98 T
(VMFileHandle) 153 419.98 T
(fh,) 261 419.98 T
(/* Handle of Ink DB file */) 297 419.98 T
(optr) 153 409.98 T
(list,) 261 409.98 T
(/* GenDynamicList */) 297 409.98 T
(word) 153 399.98 T
(entry,) 261 399.98 T
(/* entry number of child to display */) 298.8 399.98 T
(Boolean) 153 389.98 T
(displayFolders\051; /* Include monikers in count,) 261 389.98 T
(* return their monikers */) 333 379.98 T
0 10 Q
-0.6 (This routine requests that a dynamic list display the name of one of a folder) 180 362.32 P
-0.6 (\325) 522.52 362.32 P
-0.6 (s) 524.19 362.32 P
(children. It is normally called in an applications) 180 350.82 T
6 9 Q
(GDLI) 404.66 350.82 T
6 10 Q
(_queryMsg) 428.33 350.82 T
0 F
( handler) 478.13 350.82 T
(.) 516.28 350.82 T
2 F
(Include:) 99 332.32 T
0 F
(pen.goh) 180 332.32 T
81 315.98 531 320.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 315.98 531 320.98 R
7 X
0 0 0 1 0 0 0 K
V
50 319.98 609.01 319.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 307.98 T
2 F
(InkFolderGetChildInfo\050\051) 99 307.98 T
3 10 Q
(Boolean) 99 293.31 T
4 F
(InkFolderDisplayChildInfo\050 /* true if folder; else note */) 153 293.31 T
4 9 Q
(dword) 153 282.98 T
(fldr,) 261 282.98 T
(/* ID# of folder */) 297 282.98 T
(VMFileHandle) 153 272.97 T
(fh,) 261 272.97 T
(/* Handle of Ink DB file */) 297 272.97 T
(word) 153 262.97 T
(entry,) 261 262.97 T
(/* entry number of child */) 298.8 262.97 T
(dword *) 153 252.97 T
(childID\051;) 261 252.97 T
(/* Pointer to returned child ID # */) 309.6 252.97 T
0 10 Q
-0.67 (This routine returns information about one of a folder) 180 235.31 P
-0.67 (\325) 423.69 235.31 P
-0.67 (s children. The explicit) 425.36 235.31 P
-0.12 (return value will be true if the child is a folder) 180 223.81 P
-0.12 (, false if the child is a note. In) 392.29 223.81 P
-0.27 (addition, the passed dword pointer will point to the child\325) 180 212.31 P
-0.27 (s dword) 441.32 212.31 P
0 9 Q
-0.24 (ID) 479.67 212.31 P
0 10 Q
-0.27 ( number) 490.34 212.31 P
-0.27 (.) 528.22 212.31 P
2 F
(Include:) 99 193.81 T
0 F
(pen.goh) 180 193.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "268" 32
%%Page: "269" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(269) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkFolderGetChildNumber\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(InkFolderDisplayChildInList\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(fldr,) 261 609.99 T
(/* ID# of folder */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh,) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
(dword) 153 589.99 T
(note\051;) 261 589.99 T
(/* ID# of child note or folder */) 298.8 589.99 T
0 10 Q
(This routine returns the passed note or folder) 180 572.33 T
(\325) 391.29 572.33 T
(s entry number within its) 392.96 572.33 T
(passed parent folder) 180 560.83 T
(.) 273.52 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(pen.goh) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(InkFolderGetContents\050\051) 99 517.98 T
3 10 Q
(DBGroupAndItem) 99 503.32 T
4 F
(InkFolderGetContents\050) 189 503.32 T
4 9 Q
(dword) 153 492.98 T
(tag,) 261 492.98 T
(/* ID# of folder */) 333 492.98 T
(VMFileHandle) 153 482.98 T
(fh,) 261 482.98 T
(/* Handle of Ink DB file */) 333 482.98 T
(DBGroupAndItem *) 153 472.98 T
(subFolders\051;) 261 472.98 T
(/* pointer to return value */\051;) 331.2 472.98 T
0 10 Q
(This routine returns the contents of a folder) 180 455.32 T
(. It returns two chunk arrays,) 382.22 455.32 T
(each of which is \336lled with dword) 180 443.82 T
0 9 Q
(ID) 337.05 443.82 T
0 10 Q
( numbers of the folder) 347.71 443.82 T
(\325) 450.11 443.82 T
(s children. The) 451.79 443.82 T
(explicitly returned array holds the numbers of the folder) 180 432.32 T
(\325) 441.66 432.32 T
(s child notes. The) 443.33 432.32 T
-0.11 (routine also \336lls in a pointer with a) 180 420.82 P
0 9 Q
-0.1 (DB) 345.05 420.82 P
0 10 Q
-0.11 ( item holding a chunk array with the) 358.55 420.82 P
0 9 Q
(ID) 180 409.32 T
0 10 Q
( numbers of the subfolders.) 190.66 409.32 T
2 F
(Include:) 99 390.82 T
0 F
(pen.goh) 180 390.82 T
81 374.48 531 379.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 374.48 531 379.48 R
7 X
0 0 0 1 0 0 0 K
V
50 378.48 609.01 378.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 366.48 T
2 F
(InkFolderGetNumChildren\050\051) 99 366.48 T
3 10 Q
(dword) 99 351.81 T
4 F
(InkFolderGetNumChildren\050 /* Subfolders:Notes */) 153 351.81 T
4 9 Q
(dword) 153 341.48 T
(fldr,) 261 341.48 T
(/* ID# of folder */) 297 341.48 T
(VMFileHandle) 153 331.48 T
(fh\051;) 261 331.48 T
(/* Handle of Ink DB file */) 297 331.48 T
0 10 Q
(This message returns the number of children the Ink Database folder has.) 180 313.81 T
(The high word of the return value holds the number of sub folders; the low) 180 302.31 T
(word holds the number of notes.) 180 290.81 T
2 F
(Include:) 99 272.31 T
0 F
(pen.goh) 180 272.31 T
81 255.97 531 260.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 255.97 531 260.97 R
7 X
0 0 0 1 0 0 0 K
V
50 259.97 609.01 259.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 247.97 T
2 F
(InkFolderMove\050\051) 99 247.97 T
3 10 Q
(void) 99 233.3 T
4 F
(InkFolderMove\050) 153 233.3 T
4 9 Q
(dword) 153 222.97 T
(fldr,) 261 222.97 T
(/* ID# of folder to move */) 297 222.97 T
(dword) 153 212.97 T
(pfldr\051;/* ID# of new parent folder */) 261 212.97 T
0 10 Q
(This routine moves an Ink Database folder to a new location in the folder) 180 195.3 T
(tree.) 180 183.8 T
2 F
(Include:) 99 165.3 T
0 F
(pen.goh) 180 165.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "269" 33
%%Page: "270" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(270) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkFolderSetT) 99 634.99 T
(itle\050\051) 178.8 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InkFolderSetTitle\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of folder */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh,) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
(const char *) 153 589.99 T
(name\051;) 261 589.99 T
(/* Text object */\051;) 298.8 589.99 T
0 10 Q
(This routine renames an Ink Database folder) 180 572.33 T
(. The passed name should be) 387.81 572.33 T
(null-terminated.) 180 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(pen.goh) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(InkFolderSetT) 99 517.98 T
(itleFromT) 178.8 517.98 T
(extObject\050\051) 232.58 517.98 T
3 10 Q
(void) 99 503.32 T
4 F
(InkFolderSetTitleFromTextObject\050) 153 503.32 T
4 9 Q
(dword) 153 492.98 T
(tag,) 261 492.98 T
(/* ID# of folder */) 297 492.98 T
(FileHandle) 153 482.98 T
(fh,) 261 482.98 T
(/* Handle of Ink DB file */) 297 482.98 T
(optr) 153 472.98 T
(text\051;) 261 472.98 T
(/* Text object */\051;) 298.8 472.98 T
0 10 Q
(This routine sets the name of the passed Ink Database folder from the) 180 455.32 T
(contents of the passed V) 180 443.82 T
(isT) 291.6 443.82 T
(ext object.) 305.13 443.82 T
2 F
(Include:) 99 425.32 T
0 F
(pen.goh) 180 425.32 T
81 408.98 531 413.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 408.98 531 413.98 R
7 X
0 0 0 1 0 0 0 K
V
50 412.98 609.01 412.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 400.98 T
2 F
(InkGetDocPageInfo\050\051) 99 400.98 T
3 10 Q
(void) 99 386.31 T
4 F
(InkGetDocPageInfo\050) 153 386.31 T
4 9 Q
(PageSizeReport *) 153 375.98 T
(psr,) 261 375.98 T
(/* Structure to fill with return value */) 297 375.98 T
(VMFileHandle) 153 365.98 T
(fh\051;) 261 365.98 T
0 10 Q
-0.02 (This routine returns the dword) 180 348.31 P
0 9 Q
-0.02 (ID) 326.39 348.31 P
0 10 Q
-0.02 ( of the head folder of an Ink Database \336le.) 337.05 348.31 P
2 F
(Include:) 99 329.81 T
0 F
(pen.goh) 180 329.81 T
81 313.47 531 318.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 313.47 531 318.48 R
7 X
0 0 0 1 0 0 0 K
V
50 317.47 609.01 317.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 305.47 T
2 F
(InkGetDocCustomGString\050\051) 99 305.47 T
3 10 Q
(GStateHandle) 99 290.8 T
4 F
(InkGetDocCustomGString\050) 177 290.8 T
4 9 Q
(VMFileHandle) 153 280.47 T
(dbfh\051;) 261 280.47 T
0 10 Q
(This routine returns the custom GString associated with the passed Ink) 180 262.8 T
(Database \336le. Note that this custom background will only be used if the) 180 251.3 T
(document\325) 180 239.8 T
(s basic) 226.85 239.8 T
5 F
(InkBackgroundT) 260.38 239.8 T
(ype) 348.94 239.8 T
0 F
( is) 367.46 239.8 T
0 9 Q
(IBT_CUSTOM) 380.8 239.8 T
0 10 Q
(. \050This may be) 442.47 239.8 T
(determined using the) 180 228.3 T
5 F
(InkDBSetDocGString\050\051) 281.67 228.3 T
0 F
( routine.) 401.3 228.3 T
2 F
(Include:) 99 209.8 T
0 F
(pen.goh) 180 209.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "270" 34
%%Page: "271" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(271) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkGetDocGString\050\051) 99 634.99 T
3 10 Q
(InkBackgroundType) 99 620.33 T
4 F
(InkGetDocGString\050) 207 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(dbfh\051;) 261 609.99 T
0 10 Q
(This routine returns the standard GString to use as a background picture) 180 592.33 T
-0.77 (with the passed Ink Database \336le. If the returned background type is custom,) 180 580.83 P
(be sure to also call) 180 569.33 T
5 F
(InkGetDocCustomGString\050\051) 268.17 569.33 T
0 F
(.) 412.98 569.33 T
2 F
(Include:) 99 550.83 T
0 F
(pen.goh) 180 550.83 T
81 534.48 531 539.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 534.48 531 539.49 R
7 X
0 0 0 1 0 0 0 K
V
50 538.48 609.01 538.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 526.48 T
2 F
(InkGetParentFolder\050\051) 99 526.48 T
3 10 Q
(dword) 99 511.82 T
4 F
(InkGetParentFolder\050) 153 511.82 T
4 9 Q
(dword) 153 501.48 T
(tag,) 261 501.48 T
(/* ID# of folder or note */) 297 501.48 T
(VMFileHandle) 153 491.48 T
(fh\051;) 261 491.48 T
(/* Handle of Ink DB file */) 297 491.48 T
0 10 Q
-0.48 (This message returns the dword) 180 473.82 P
0 9 Q
-0.43 (ID) 329.48 473.82 P
0 10 Q
-0.48 ( of the passed Ink Database note or folder) 340.15 473.82 P
-0.48 (.) 528.22 473.82 P
2 F
(Include:) 99 455.32 T
0 F
(pen.goh) 180 455.32 T
81 438.98 531 443.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 438.98 531 443.98 R
7 X
0 0 0 1 0 0 0 K
V
50 442.98 609.01 442.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 430.98 T
2 F
(InkGetT) 99 430.98 T
(itle\050\051) 143.46 430.98 T
3 10 Q
(word) 99 416.31 T
4 F
(InkGetTitle\050) 153 416.31 T
4 9 Q
(dword) 153 405.98 T
(tag,) 261 405.98 T
(/* ID# of folder or note */) 297 405.98 T
(VMFileHandle) 153 395.98 T
(fh,) 261 395.98 T
(/* Handle of Ink DB file */) 297 395.98 T
(char *) 153 385.98 T
(dest\051;) 261 385.98 T
(/* should be INK_DB_MAX_TITLE_SIZE +1 */\051;) 298.8 385.98 T
0 10 Q
(This message \336lls the passed text buffer with the folder) 180 368.31 T
(\325) 437.06 368.31 T
(s or note\325) 438.73 368.31 T
(s title, a) 480.03 368.31 T
-0.74 (null-terminated string. The routine\325) 180 356.81 P
-0.74 (s explicit return value is the length of the) 343.17 356.81 P
(string \050including the terminator\051.) 180 345.31 T
2 F
(Include:) 99 326.81 T
0 F
(pen.goh) 180 326.81 T
81 310.47 531 315.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 310.47 531 315.48 R
7 X
0 0 0 1 0 0 0 K
V
50 314.47 609.01 314.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 302.47 T
2 F
(InkNoteCopyMoniker\050\051) 99 302.47 T
3 10 Q
(dword) 99 287.8 T
4 F
(InkNoteCopyMoniker\050) 153 287.8 T
4 9 Q
(dword) 153 277.47 T
(title,) 189 277.47 T
(/* ID# of parent folder */) 261 277.47 T
(optr) 153 267.47 T
(list,) 189 267.47 T
(/* Output list */) 261 267.47 T
(word) 153 257.47 T
(type,) 189 257.47 T
(/* 1: text note) 261 257.47 T
( * 0: ink note) 261 247.47 T
( * -1: folder */) 261 237.47 T
(word) 153 227.47 T
(entry\051;) 189 227.47 T
(/* Handle of Ink DB file */) 261 227.47 T
0 10 Q
(This routine copies the icon nd title into the V) 180 209.8 T
(isMoniker) 391.8 209.8 T
(.) 437.91 209.8 T
2 F
(Include:) 99 191.3 T
0 F
(pen.goh) 180 191.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "271" 35
%%Page: "272" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(272) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteCreate\050\051) 99 634.99 T
3 10 Q
(dword) 99 620.33 T
4 F
(InkNoteCreate\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of parent folder */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh\051;) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
0 10 Q
(This routine creates a note and adds it to the passed folder) 180 582.33 T
(\325) 451.88 582.33 T
(s child list. The) 453.55 582.33 T
(new note\325) 180 570.83 T
(s dword) 223.34 570.83 T
0 9 Q
(ID) 262.23 570.83 T
0 10 Q
( is returned.) 272.89 570.83 T
2 F
(Include:) 99 552.33 T
0 F
(pen.goh) 180 552.33 T
81 535.98 531 540.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 535.98 531 540.99 R
7 X
0 0 0 1 0 0 0 K
V
50 539.98 609.01 539.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 527.98 T
2 F
(InkNoteCreatePage\050\051) 99 527.98 T
3 10 Q
(word) 99 513.32 T
4 F
(InkNoteCreatePage\050) 153 513.32 T
4 9 Q
(dword) 153 502.98 T
(tag,) 261 502.98 T
(/* ID# of note */) 297 502.98 T
(VMFileHandle) 153 492.98 T
(fh,) 261 492.98 T
(/* Handle of Ink DB file */) 297 492.98 T
(word) 153 482.98 T
(page\051; /* Page number to insert before,) 261 482.98 T
( * CA_NULL_ELEMENT to append */) 279 472.98 T
0 10 Q
(This routine creates a new page within a note. It returns the new page) 180 455.32 T
(number) 180 443.82 T
(.) 215.37 443.82 T
2 F
(Include:) 99 425.32 T
0 F
(pen.goh) 180 425.32 T
81 408.98 531 413.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 408.98 531 413.98 R
7 X
0 0 0 1 0 0 0 K
V
50 412.98 609.01 412.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 400.98 T
2 F
(InkNoteDelete\050\051) 99 400.98 T
3 10 Q
(void) 99 386.31 T
4 F
(InkNoteDelete\050) 153 386.31 T
4 9 Q
(dword) 153 375.98 T
(tag,) 261 375.98 T
(/* ID# of note */) 297 375.98 T
(VMFileHandle) 153 365.98 T
(fh\051;) 261 365.98 T
(/* Handle of Ink DB file */) 297 365.98 T
0 10 Q
(This message deletes the passed note. All references to the note are deleted.) 180 348.31 T
2 F
(Include:) 99 329.81 T
0 F
(pen.goh) 180 329.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "272" 36
%%Page: "273" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(273) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteFindByKeywords\050\051) 99 634.99 T
3 10 Q
(ChunkHandle) 99 620.33 T
4 F
(InkNoteFindByKeywords\050) 171 620.33 T
(/* Return value is chunk array with elements:) 189 609.33 T
( *) 189 598.33 T
(FindNoteHeader) 213 598.33 T
( *) 189 587.33 T
(-dword tag-) 213 587.33 T
( *) 189 576.33 T
(-dword tag-) 213 576.33 T
( *) 189 565.33 T
( etc\311 */) 213 565.33 T
4 9 Q
(VMFileHandle) 153 554.99 T
(fh,) 261 554.99 T
(char *) 153 544.99 T
(strings,) 261 544.99 T
(/* strings to match \050separated by) 304.2 544.99 T
(* whitespace or commas\051, can contain) 297 534.99 T
(* C_WILDCARD or C_SINGLE_WILDCARD */) 297 524.99 T
(word) 153 514.99 T
(opt,) 261 514.99 T
(/* true to match all keywords;) 297 514.99 T
( * false to match at least one keyword */) 279 504.99 T
0 10 Q
(This routine returns a chunk array containing the dword) 180 487.33 T
0 9 Q
(ID) 446.12 487.33 T
0 10 Q
( numbers of all) 456.79 487.33 T
(notes whose keywords match the passed search string, preceded by the) 180 475.83 T
(number of matching notes. If no such notes are found, then the returned) 180 464.33 T
(handle will be) 180 452.83 T
0 9 Q
(NULL) 247.8 452.83 T
0 10 Q
(.) 274.48 452.83 T
-0.78 (Note that this routine will only return about 20K notes; if there are more that) 180 434.33 P
(match, only the \336rst 20K will be returned.) 180 422.83 T
2 F
(Include:) 99 404.33 T
0 F
(pen.goh) 180 404.33 T
81 387.98 531 392.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 387.98 531 392.99 R
7 X
0 0 0 1 0 0 0 K
V
50 391.98 609.01 391.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 379.98 T
2 F
(InkNoteFindByT) 99 379.98 T
(itle\050\051) 190.79 379.98 T
3 10 Q
(ChunkHandle) 99 365.32 T
4 F
(InkNoteFindByTitle\050) 171 365.32 T
(/* Return value is chunk array with elements:) 189 354.32 T
( *) 189 343.32 T
(FindNoteHeader) 213 343.32 T
( *) 189 332.32 T
(-dword tag-) 213 332.32 T
( *) 189 321.32 T
(-dword tag-) 213 321.32 T
( *) 189 310.32 T
( etc\311 */) 213 310.32 T
4 9 Q
(const char *) 153 299.98 T
(string,) 261 299.98 T
(/* string to match \050can contain C_WILDCARD) 298.8 299.98 T
(* or C_SINGLE_WILDCARD */) 289.8 289.98 T
(SearchOptions) 153 279.98 T
(opt,) 261 279.98 T
(/* Search options */) 297 279.98 T
(Boolean) 153 269.98 T
(Body,) 261 269.98 T
(/* true if you want to look in the body) 297 269.98 T
( * of text notes */) 279 259.98 T
(VMFileHandle) 153 249.98 T
(fh\051;) 261 249.98 T
(/* Handle of Ink DB file */) 297 249.98 T
0 10 Q
(This routine returns a chunk array containing the dword) 180 232.32 T
0 9 Q
(ID) 446.12 232.32 T
0 10 Q
( numbers of all) 456.79 232.32 T
(notes whose titles match the passed search string, preceded by the number) 180 220.82 T
-0.1 (of matching notes. If no such notes are found, then the returned handle will) 180 209.32 P
(be) 180 197.82 T
0 9 Q
(NULL) 193.34 197.82 T
0 10 Q
(.) 220.02 197.82 T
-0.78 (Note that this routine will only return about 20K notes; if there are more that) 180 179.32 P
(match, only the \336rst 20K will be returned.) 180 167.82 T
2 F
(Include:) 99 149.32 T
0 F
(pen.goh) 180 149.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "273" 37
%%Page: "274" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(274) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteGetCreationDate\050\051) 99 634.99 T
3 10 Q
(dword) 99 620.33 T
4 F
(InkNoteGetCreationDate\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of note */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh\051;) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
0 10 Q
(This routine gets a note\325) 180 582.33 T
(s creation date.) 291.5 582.33 T
2 F
(Include:) 99 563.83 T
0 F
(pen.goh) 180 563.83 T
81 547.48 531 552.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 547.48 531 552.49 R
7 X
0 0 0 1 0 0 0 K
V
50 551.48 609.01 551.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 539.48 T
2 F
(InkNoteGetKeywords\050\051) 99 539.48 T
3 10 Q
(void) 99 524.82 T
4 F
(InkNoteGetKeywords\050) 153 524.82 T
4 9 Q
(dword) 153 514.48 T
(tag,) 261 514.48 T
(/* ID# of note */) 297 514.48 T
(VMFileHandle) 153 504.48 T
(fh,) 261 504.48 T
(/* Handle of Ink DB file */) 297 504.48 T
(char *) 153 494.48 T
(text\051;) 261 494.48 T
(/* String to hold return value */\051;) 298.8 494.48 T
0 10 Q
(This routine \336lls the passed buffer with the note\325) 180 476.82 T
(s keywords. The target) 405.21 476.82 T
-0.34 (buffer should be of atleast length) 180 465.32 P
0 9 Q
-0.3 (INK_DB_MAX_NOTE_KEYWORDS_SIZE) 333.38 465.32 P
0 10 Q
-0.34 ( +1.) 511.71 465.32 P
(The string will be null-terminated.) 180 453.82 T
2 F
(Include:) 99 435.32 T
0 F
(pen.goh) 180 435.32 T
81 418.98 531 423.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 418.98 531 423.98 R
7 X
0 0 0 1 0 0 0 K
V
50 422.98 609.01 422.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 410.98 T
2 F
(InkNoteGetModi\336cationDate\050\051) 99 410.98 T
3 10 Q
(dword) 99 396.31 T
4 F
(InkNoteGetModificationDate\050) 153 396.31 T
4 9 Q
(dword) 153 385.98 T
(tag,) 261 385.98 T
(/* ID# of note */) 297 385.98 T
(VMFileHandle) 153 375.98 T
(fh\051;) 261 375.98 T
(/* Handle of Ink DB file */) 297 375.98 T
0 10 Q
(This routine gets a note\325) 180 358.31 T
(s modi\336cation date.) 291.5 358.31 T
2 F
(Include:) 99 339.81 T
0 F
(pen.goh) 180 339.81 T
81 323.47 531 328.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 323.47 531 328.48 R
7 X
0 0 0 1 0 0 0 K
V
50 327.47 609.01 327.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 315.47 T
2 F
(InkNoteGetNoteT) 99 315.47 T
(ype\050\051) 196.12 315.47 T
3 10 Q
(NoteType) 99 300.8 T
4 F
(InkNoteGetNoteType\050 /* 0: Ink, 1: Text */) 153 300.8 T
4 9 Q
(dword) 153 290.47 T
(tag,) 261 290.47 T
(/* ID# of note */) 297 290.47 T
(VMFileHandle) 153 280.47 T
(fh\051;) 261 280.47 T
(/* Handle of Ink DB file */) 297 280.47 T
0 10 Q
(This routine gets a note\325) 180 262.8 T
(s) 291.5 262.8 T
5 F
(NoteT) 298.91 262.8 T
(ype) 330.05 262.8 T
0 F
(:) 348.57 262.8 T
0 9 Q
(NT_INK) 354.13 262.8 T
0 10 Q
( or) 389.97 262.8 T
0 9 Q
(NT_TEXT) 404.97 262.8 T
0 10 Q
(.) 446.73 262.8 T
2 F
(Include:) 99 244.3 T
0 F
(pen.goh) 180 244.3 T
81 227.96 531 232.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 227.96 531 232.97 R
7 X
0 0 0 1 0 0 0 K
V
50 231.96 609.01 231.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 219.96 T
2 F
(InkNoteGetNumPages\050\051) 99 219.96 T
3 10 Q
(word) 99 205.29 T
4 F
(InkNoteGetNumPages\050) 153 205.29 T
4 9 Q
(dword) 153 194.96 T
(tag\051;) 261 194.96 T
(/* ID# of note */) 297 194.96 T
0 10 Q
(This routine returns the number of pages within the passed note.) 180 177.29 T
2 F
(Include:) 99 158.79 T
0 F
(pen.goh) 180 158.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "274" 38
%%Page: "275" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(275) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteGetPages\050\051) 99 634.99 T
3 10 Q
(DBGroupAndItem) 99 620.33 T
4 F
(InkNoteGetPages\050) 189 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of note */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh\051;) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
0 10 Q
(This routine returns a) 180 582.33 T
0 9 Q
(DB) 285.56 582.33 T
0 10 Q
( group and item containing a chunk array) 299.06 582.33 T
(. The) 490.93 582.33 T
(chunk array contains the page information of the note, either compressed) 180 570.83 T
(pen data or text. Each array element holds one page of data.) 180 559.33 T
2 F
(Include:) 99 540.83 T
0 F
(pen.goh) 180 540.83 T
81 524.48 531 529.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 524.48 531 529.49 R
7 X
0 0 0 1 0 0 0 K
V
50 528.48 609.01 528.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 516.48 T
2 F
(InkNoteLoadPage\050\051) 99 516.48 T
3 10 Q
(void) 99 501.82 T
4 F
(InkNoteLoadPage\050) 153 501.82 T
4 9 Q
(dword) 153 491.48 T
(tag,) 261 491.48 T
(/* ID# of note */) 297 491.48 T
(VMFileHandle) 153 481.48 T
(fh,) 261 481.48 T
(/* Handle of Ink DB file */) 297 481.48 T
(word) 153 471.48 T
(page,) 261 471.48 T
(/* Page number */) 297 471.48 T
(optr) 153 461.48 T
(obj,) 261 461.48 T
(/* an Ink or VisText object */) 297 461.48 T
(word) 153 451.48 T
(type\051;) 261 451.48 T
(/* note type 0: ink, 1: text */) 297 451.48 T
0 10 Q
-0.75 (This routine loads a visual object \050Ink or T) 180 433.82 P
-0.75 (ext\051 with the contents of the passed) 369.58 433.82 P
-0.69 (Ink Database page. Be sure to load only the correct type of data into an object.) 180 422.32 P
2 F
(Include:) 99 403.82 T
0 F
(pen.goh) 180 403.82 T
81 387.48 531 392.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 387.48 531 392.48 R
7 X
0 0 0 1 0 0 0 K
V
50 391.48 609.01 391.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 379.48 T
2 F
(InkNoteMove\050\051) 99 379.48 T
3 10 Q
(void) 99 364.81 T
4 F
(InkNoteMove\050) 153 364.81 T
4 9 Q
(dword) 153 354.48 T
(tag,) 261 354.48 T
(/* ID# of note */) 315 354.48 T
(dword) 153 344.48 T
(pfolder,) 261 344.48 T
(/* ID# of new parent folder */) 315 344.48 T
(VMFileHandle) 153 334.48 T
(fh\051;) 261 334.48 T
(/* Handle of Ink DB file */) 315 334.48 T
0 10 Q
(This message moves the passed note to a new location. All references to the) 180 316.81 T
(note are suitably altered.) 180 305.31 T
2 F
(Include:) 99 286.81 T
0 F
(pen.goh) 180 286.81 T
81 270.47 531 275.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 270.47 531 275.47 R
7 X
0 0 0 1 0 0 0 K
V
50 274.47 609.01 274.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 262.47 T
2 F
(InkNoteSavePage\050\051) 99 262.47 T
3 10 Q
(void) 99 247.8 T
4 F
(InkNoteSavePage\050) 153 247.8 T
4 9 Q
(dword) 153 237.47 T
(tag,) 261 237.47 T
(/* ID# of note */) 297 237.47 T
(VMFileHandle) 153 227.47 T
(fh,) 261 227.47 T
(/* Handle of Ink DB file */) 297 227.47 T
(word) 153 217.47 T
(page,) 261 217.47 T
(/* Page number */) 297 217.47 T
(optr) 153 207.47 T
(obj,) 261 207.47 T
(/* an Ink or VisText object */) 297 207.47 T
(word) 153 197.47 T
(type\051;) 261 197.47 T
(/* note type 0: ink, 1: text */) 297 197.47 T
0 10 Q
-0.02 (This routine saves the contents of a visual object \050Ink or T) 180 179.8 P
-0.02 (ext\051 to the passed) 447.19 179.8 P
(Ink Database page.) 180 168.3 T
2 F
(Include:) 99 149.8 T
0 F
(pen.goh) 180 149.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "275" 39
%%Page: "276" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(276) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteSendKeywordsdT) 99 634.99 T
(oT) 243.47 634.99 T
(extObject\050\051) 257.24 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InkNoteSendKeywordsToTextObject\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of note */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh,) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
(optr) 153 589.99 T
(text\051;) 261 589.99 T
(/* Text object to set */\051;) 298.8 589.99 T
0 10 Q
(This message replaces the passed V) 180 572.33 T
(isT) 344.58 572.33 T
(ext object\325) 358.11 572.33 T
(s text with the keywords) 403.67 572.33 T
(from the passed folder or note of an Ink Database \336le.) 180 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(pen.goh) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(InkNoteSetKeywords\050\051) 99 517.98 T
3 10 Q
(void) 99 503.32 T
4 F
(InkNoteSetKeywords\050) 153 503.32 T
4 9 Q
(dword) 153 492.98 T
(tag,) 261 492.98 T
(/* ID# of note */) 315 492.98 T
(VMFileHandle) 153 482.98 T
(fh,) 261 482.98 T
(/* Handle of Ink DB file */) 315 482.98 T
(const char *) 153 472.98 T
(text\051;) 261 472.98 T
(/* Keyword string */\051;) 315 472.98 T
0 10 Q
(This message sets an Ink Database note\325) 180 455.32 T
(s keywords. The passed string) 367.46 455.32 T
(should be null-terminated.) 180 443.82 T
2 F
(Include:) 99 425.32 T
0 F
(pen.goh) 180 425.32 T
81 408.98 531 413.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 408.98 531 413.98 R
7 X
0 0 0 1 0 0 0 K
V
50 412.98 609.01 412.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 400.98 T
2 F
(InkNoteSetKeywordsFromT) 99 400.98 T
(extObject\050\051) 255.47 400.98 T
3 10 Q
(void) 99 386.31 T
4 F
(InkNoteSetKeywordsFromTextObject\050) 153 386.31 T
4 9 Q
(dword) 153 375.98 T
(tag,) 261 375.98 T
(/* ID# of note */) 315 375.98 T
(VMFileHandle) 153 365.98 T
(fh,) 261 365.98 T
(/* Handle of Ink DB file */) 315 365.98 T
(optr *) 153 355.98 T
(text\051;) 261 355.98 T
(/* Text object */\051;) 315 355.98 T
0 10 Q
-0.85 (This message sets an Ink Database note\325) 180 338.31 P
-0.85 (s keywords by copying them from the) 362.34 338.31 P
(passed text object.) 180 326.81 T
2 F
(Include:) 99 308.31 T
0 F
(pen.goh) 180 308.31 T
81 291.97 531 296.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 291.97 531 296.98 R
7 X
0 0 0 1 0 0 0 K
V
50 295.97 609.01 295.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 283.97 T
2 F
(InkNoteSetModi\336cationDate\050\051) 99 283.97 T
3 10 Q
(void) 99 269.3 T
4 F
(InkNoteSetModificationDate\050) 153 269.3 T
4 9 Q
(word) 153 258.97 T
(tdft1,) 261 258.97 T
(/* First two words of */) 298.8 258.97 T
(word) 153 248.97 T
(tdft2,) 261 248.97 T
(/*) 297 248.97 T
(TimerDateAndTime structure */) 324 248.97 T
(dword) 153 238.97 T
(note,) 261 238.97 T
(/* ID# of note */) 297 238.97 T
(FileHandle) 153 228.97 T
(fh\051;) 261 228.97 T
(/* Handle of Ink DB file */) 297 228.97 T
0 10 Q
(This routine sets a note\325) 180 211.3 T
(s modi\336cation date.) 290.76 211.3 T
2 F
(Include:) 99 192.8 T
0 F
(pen.goh) 180 192.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "276" 40
%%Page: "277" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(277) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkNoteSetNoteT) 99 634.99 T
(ype\050\051) 194.78 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InkNoteSetNoteType\050) 153 620.33 T
4 9 Q
(dword) 153 609.99 T
(tag,) 261 609.99 T
(/* ID# of note */) 297 609.99 T
(VMFileHandle) 153 599.99 T
(fh,) 261 599.99 T
(/* Handle of Ink DB file */) 297 599.99 T
(NoteType) 153 589.99 T
(nt\051;) 261 589.99 T
(/* NT_INK or NT_TEXT */) 297 589.99 T
0 10 Q
(This routine sets a note\325) 180 572.33 T
(s type: text or ink.) 290.76 572.33 T
2 F
(Include:) 99 553.83 T
0 F
(pen.goh) 180 553.83 T
81 537.48 531 542.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 537.48 531 542.49 R
7 X
0 0 0 1 0 0 0 K
V
50 541.48 609.01 541.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 529.48 T
2 F
(InkNoteSetT) 99 529.48 T
(itle\050\051) 168.79 529.48 T
3 10 Q
(void) 99 514.82 T
4 F
(InkNoteSetTitle\050) 153 514.82 T
4 9 Q
(dword) 153 504.48 T
(tag,) 261 504.48 T
(/* ID# of note */) 315 504.48 T
(VMFileHandle) 153 494.48 T
(fh,) 261 494.48 T
(/* Handle of Ink DB file */) 315 494.48 T
(const char *) 153 484.48 T
(name\051;) 261 484.48 T
(/* Text object */\051;) 315 484.48 T
0 10 Q
(This message renames an Ink Database note. The passed name should be) 180 466.82 T
(null-terminated. The string may be up to) 180 455.32 T
0 9 Q
(INK_DB_MAX_NOTE_KEYWORDS_SIZE) 180 443.82 T
0 10 Q
( +1 in length.) 358.33 443.82 T
2 F
(Include:) 99 425.32 T
0 F
(pen.goh) 180 425.32 T
81 408.98 531 413.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 408.98 531 413.98 R
7 X
0 0 0 1 0 0 0 K
V
50 412.98 609.01 412.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 400.98 T
2 F
(InkNoteSetT) 99 400.98 T
(itleFromT) 168.79 400.98 T
(extObject\050\051) 222.58 400.98 T
3 10 Q
(void) 99 386.31 T
4 F
(InkNoteSetTitleFromTextObject\050) 153 386.31 T
4 9 Q
(dword) 153 375.98 T
(tag,) 261 375.98 T
(/* ID# of note */) 297 375.98 T
(FileHandle) 153 365.98 T
(fh,) 261 365.98 T
(/* Handle of Ink DB file */) 297 365.98 T
(optr) 153 355.98 T
(text\051;) 261 355.98 T
(/* Text object */\051;) 298.8 355.98 T
0 10 Q
(This message sets the name of the passed Ink Database note from the) 180 338.31 T
(contents of the passed V) 180 326.81 T
(isT) 291.6 326.81 T
(ext object.) 305.13 326.81 T
2 F
(Include:) 99 308.31 T
0 F
(pen.goh) 180 308.31 T
81 291.97 531 296.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 291.97 531 296.98 R
7 X
0 0 0 1 0 0 0 K
V
50 295.97 609.01 295.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 283.97 T
2 F
(InkSendT) 99 283.97 T
(itleT) 152.8 283.97 T
(oT) 176.58 283.97 T
(extObject\050\051) 190.36 283.97 T
3 10 Q
(void) 99 269.3 T
4 F
(InkSendTitleToTextObject\050) 153 269.3 T
4 9 Q
(dword) 153 258.97 T
(tag,) 261 258.97 T
(/* ID# of folder or note */) 297 258.97 T
(VMFileHandle) 153 248.97 T
(fh,) 261 248.97 T
(/* Handle of Ink DB file */) 297 248.97 T
(optr) 153 238.97 T
(to\051;) 261 238.97 T
(/* Text object to set */\051;) 297 238.97 T
0 10 Q
(This message replaces the passed V) 180 221.3 T
(isT) 344.58 221.3 T
(ext object\325) 358.11 221.3 T
(s text with the name from) 403.67 221.3 T
(the passed folder or note of an Ink Database \336le.) 180 209.8 T
2 F
(Include:) 99 191.3 T
0 F
(pen.goh) 180 191.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "277" 41
%%Page: "278" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(278) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(InkSetDocCustomGString\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(InkSetDocCustomGString\050) 153 620.33 T
4 9 Q
(VMFileHandle) 153 609.99 T
(dbfh,) 261 609.99 T
(Handle) 153 599.99 T
(gstring\051;) 261 599.99 T
0 10 Q
(This routine sets the custom GString to use as a background for the passed) 180 582.33 T
-0.11 (Ink Database \336le. Note that this custom background will only be used if the) 180 570.83 P
-0.54 (document\325) 180 559.33 P
-0.54 (s basic) 226.85 559.33 P
5 F
-0.55 (InkBackgroundT) 259.31 559.33 P
-0.55 (ype) 347.87 559.33 P
0 F
-0.54 ( is) 366.39 559.33 P
0 9 Q
-0.48 (IBT_CUSTOM) 378.66 559.33 P
0 10 Q
-0.54 (. \050Set this using the) 440.33 559.33 P
5 F
(InkDBSetDocGString\050\051) 180 547.83 T
0 F
( routine.\051) 299.63 547.83 T
2 F
(Include:) 99 529.33 T
0 F
(pen.goh) 180 529.33 T
81 512.98 531 517.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 512.98 531 517.99 R
7 X
0 0 0 1 0 0 0 K
V
50 516.98 609.01 516.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 504.98 T
2 F
(InkSetDocGString\050\051) 99 504.98 T
3 10 Q
(void) 99 490.32 T
4 F
(InkSetDocGString\050) 153 490.32 T
4 9 Q
(VMFileHandle) 153 479.98 T
(dbfh,) 261 479.98 T
(InkBackgroundType) 153 469.98 T
(type\051;) 261 469.98 T
0 10 Q
(This routine sets the standard GString to use as a background picture with) 180 452.32 T
(the passed Ink Database \336le. If the passed background type is custom, be) 180 440.82 T
(sure to also call) 180 429.32 T
5 F
(InkSetDocCustomGString\050\051) 254.83 429.32 T
0 F
(.) 397.98 429.32 T
2 F
(Include:) 99 410.82 T
0 F
(pen.goh) 180 410.82 T
81 394.48 531 399.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 394.48 531 399.48 R
7 X
0 0 0 1 0 0 0 K
V
50 398.48 609.01 398.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 386.48 T
2 F
(InkSetDocPageInfo\050\051) 99 386.48 T
3 10 Q
(void) 99 371.81 T
4 F
(InkSetDocPageInfo\050) 153 371.81 T
4 9 Q
(PageSizeReport *) 153 361.48 T
(psr,) 261 361.48 T
(VMFileHandle) 153 351.48 T
(fh\051;) 261 351.48 T
0 10 Q
(Set the page information for an Ink Database \336le.) 180 333.81 T
2 F
(Include:) 99 315.31 T
0 F
(pen.goh) 180 315.31 T
81 298.97 531 303.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 298.97 531 303.98 R
7 X
0 0 0 1 0 0 0 K
V
50 302.97 609.01 302.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 290.97 T
2 F
(IntegerOf\050\051) 99 290.97 T
3 10 Q
(word) 99 276.3 T
4 F
(IntegerOf\050) 153 276.3 T
4 9 Q
(WWFixedAsDWord) 153 265.97 T
(wwf\051) 261 265.97 T
0 10 Q
(This macro returns the integral portion of a) 180 248.3 T
5 F
(WWFixedAsDW) 384.64 248.3 T
(ord) 463.88 248.3 T
0 F
( value.) 481.85 248.3 T
2 F
(Include:) 99 229.8 T
0 F
(geos.h) 180 229.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "278" 42
%%Page: "279" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(279) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LMemAlloc\050\051) 99 634.99 T
3 10 Q
(ChunkHandle) 99 620.33 T
4 F
( LMemAlloc\050) 165 620.33 T
4 9 Q
(MemHandle) 153 609.99 T
(mh,) 261 609.99 T
(/* Handle of block containing heap */) 315 609.99 T
(word) 153 599.99 T
(chunkSize\051;) 261 599.99 T
(/* Size of new chunk in bytes */) 333 599.99 T
0 10 Q
(This routine allocates a new chunk in the LMem heap. The heap must be) 180 582.33 T
-0.54 (locked or \336xed. It allocates a chunk, expanding the chunk table if enccessary) 180 570.83 P
-0.54 (,) 525.98 570.83 P
(and returns the chunk\325) 180 559.33 T
(s handle. The chunk is not zero-initialized. If the) 285.74 559.33 T
(chunk could not be allocated, it returns a null handle. Chunks are) 180 547.83 T
(dword-aligned, so the chunk\325) 180 536.33 T
(s actual size may be slightly larger than you) 312.23 536.33 T
(request.) 180 524.83 T
2 F
(Include:) 99 506.33 T
0 F
(lmem.h) 180 506.33 T
2 F
(Be Sure T) 99 486.33 T
(o:) 144.94 486.33 T
0 F
(Lock the block on the global heap \050unless the block is \336xed\051.) 180 486.33 T
2 F
(W) 99 466.33 T
(arnings:) 108.07 466.33 T
0 F
-0.03 (The heap may be compacted; thus, all pointers to chunks are invalidated. If) 180 466.33 P
0 9 Q
-0.41 (LMF_NO_EXP) 180 453.33 P
-0.41 (AND) 242.01 453.33 P
0 10 Q
-0.46 ( is not set, the heap may be resized \050and thus moved\051, thus) 262.85 453.33 P
(invalidating all pointers to that block. Even \336xed blocks can be resized and) 180 440.33 T
(moved.) 180 427.33 T
2 F
(See Also:) 99 407.33 T
0 F
(LMemDeref\050\051, LMemReAlloc\050\051) 180 407.33 T
81 390.98 531 395.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 390.98 531 395.99 R
7 X
0 0 0 1 0 0 0 K
V
50 394.98 609.01 394.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 382.98 T
2 F
(LMemContract\050\051) 99 382.98 T
3 10 Q
(void) 99 368.32 T
4 F
(LMemContract\050) 153 368.32 T
4 9 Q
(MemHandle) 153 357.98 T
(mh\051;) 261 357.98 T
(/* Handle of LMem heap */) 297 357.98 T
0 10 Q
-0.12 (This routine contracts an LMem heap; that is, it deletes all the free chunks,) 180 340.32 P
-0.6 (moves all the used chunks to the beginning of the heap \050right after the chunk) 180 328.82 P
(handle table\051, and resizes the block to free the unused space at the end. It\325) 180 317.32 T
(s) 522.45 317.32 T
-0.71 (a good idea to call this routine if you have just freed a lot of chunks, since that) 180 305.82 P
(will free up some of the global heap. The LMem heap is guaranteed not to) 180 294.32 T
(move; however) 180 282.82 T
(, all pointers to chunks will be invalidated.) 247.78 282.82 T
2 F
(Be Sure T) 99 264.32 T
(o:) 144.94 264.32 T
0 F
(Lock the block on the global heap \050if it isn\325) 180 264.32 T
(t \336xed\051.) 375.05 264.32 T
2 F
(Include:) 99 244.32 T
0 F
(lmem.h) 180 244.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "279" 43
%%Page: "280" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(280) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LMemDeleteAt\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(LMemDeleteAt\050) 153 620.33 T
4 9 Q
(optr) 153 609.99 T
(chunk,) 189 609.99 T
(/* Chunk to resize */) 315 609.99 T
(word) 153 599.99 T
(deleteOffset,) 189 599.99 T
(/* Offset within chunk of first) 315 599.99 T
( * byte to be deleted */) 297 589.99 T
(word) 153 579.99 T
(deleteCount\051;) 189 579.99 T
(/* # of bytes to delete */) 315 579.99 T
0 10 Q
(This routine deletes a speci\336ed number of bytes from inside a chunk. It is) 180 562.33 T
(guaranteed not to cause the heap to be resized or compacted; thus, pointers) 180 550.83 T
(to other chunks remain valid.) 180 539.33 T
2 F
(Be Sure T) 99 520.83 T
(o:) 144.94 520.83 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 520.83 T
2 F
(W) 99 500.83 T
(arnings:) 108.07 500.83 T
0 F
-0.59 (The bytes you delete must all be in the chunk. If) 180 500.83 P
6 F
-0.59 (deleteOffset) 399.66 500.83 P
0 F
-0.59 ( and) 452.78 500.83 P
6 F
-0.59 (deleteCount) 474.57 500.83 P
0 F
(indicate bytes that are not in the chunk, results are unde\336ned.) 180 487.83 T
2 F
(Include:) 99 467.83 T
0 F
(lmem.h) 180 467.83 T
2 F
(See Also:) 99 447.83 T
0 F
(LMemReAlloc\050\051, LMemInsertAt\050\051, LMemDeleteAtHandles\050\051) 180 447.83 T
81 431.48 531 436.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 431.48 531 436.49 R
7 X
0 0 0 1 0 0 0 K
V
50 435.48 609.01 435.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 423.48 T
2 F
(LMemDeleteAtHandles\050\051) 99 423.48 T
3 10 Q
(void) 99 408.82 T
4 F
(LMemDeleteAtHandles\050) 153 408.82 T
4 9 Q
(MemHandle) 153 398.48 T
(mh,) 261 398.48 T
(/* Handle of LMem heap */) 333 398.48 T
(ChunkHandle) 153 388.48 T
(ch,) 261 388.48 T
(/* Handle of chunk to resize */) 333 388.48 T
(word) 153 378.48 T
(deleteOffset,) 261 378.48 T
(/* Offset within chunk of first) 333 378.48 T
( * byte to be deleted */) 315 368.48 T
(word) 153 358.48 T
(deleteCount\051;) 261 358.48 T
(/* # of bytes to delete */) 333 358.48 T
0 10 Q
(This routine is exactly like) 180 340.82 T
5 F
(LMemDeleteAt\050\051) 305.95 340.82 T
0 F
( above, except that the chunk) 391.31 340.82 T
(is speci\336ed by its global and chunk handles.) 180 329.32 T
2 F
(Be Sure T) 99 310.82 T
(o:) 144.94 310.82 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 310.82 T
2 F
(W) 99 290.82 T
(arnings:) 108.07 290.82 T
0 F
-0.59 (The bytes you delete must all be in the chunk. If) 180 290.82 P
6 F
-0.59 (deleteOffset) 399.66 290.82 P
0 F
-0.59 ( and) 452.78 290.82 P
6 F
-0.59 (deleteCount) 474.57 290.82 P
0 F
(indicate bytes that are not in the chunk, results are unde\336ned.) 180 277.82 T
2 F
(Include:) 99 257.82 T
0 F
(lmem.h) 180 257.82 T
81 241.48 531 246.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 241.48 531 246.48 R
7 X
0 0 0 1 0 0 0 K
V
50 245.48 609.01 245.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 233.47 T
2 F
(LMemDeref\050\051) 99 233.47 T
3 10 Q
(void *) 99 218.81 T
4 F
(LMemDeref\050) 153 218.81 T
4 9 Q
(optr) 153 208.47 T
(chunk\051;) 189 208.47 T
(/* optr to chunk to dereference */) 261 208.47 T
0 10 Q
(This routine translates an optr into the address of the chunk. The LMem) 180 190.81 T
(heap must be locked or \336xed on the global heap. Chunk addresses can be) 180 179.31 T
(invalidated by many LMem routines, forcing you to dereference the optr) 180 167.81 T
(again.) 180 156.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "280" 44
%%Page: "281" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(281) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Be Sure T) 99 641.33 T
(o:) 144.94 641.33 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 641.33 T
2 F
(Include:) 99 621.33 T
0 F
(lmem.h) 180 621.33 T
2 F
(See Also:) 99 601.33 T
0 F
(LMemDerefHandles\050\051) 180 601.33 T
81 584.99 531 590 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.99 531 590 R
7 X
0 0 0 1 0 0 0 K
V
50 588.99 609.01 588.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 576.99 T
2 F
(LMemDerefHandles\050\051) 99 576.99 T
3 10 Q
(void *) 99 562.33 T
4 F
(LMemDerefHandles\050) 153 562.33 T
4 9 Q
(MemHandle) 153 551.99 T
(mh,) 261 551.99 T
(/* Handle of LMem heap\325s block */) 333 551.99 T
(ChunkHandle) 153 541.99 T
(chunk\051;) 261 541.99 T
(/* Handle of chunk to dereference */) 333 541.99 T
0 10 Q
(This routine is exactly like) 180 524.33 T
5 F
(LMemDeref\050\051) 305.95 524.33 T
0 F
( above, except that the chunk is) 375.02 524.33 T
(speci\336ed by its global and chunk handles.) 180 512.83 T
2 F
(Be Sure T) 99 494.33 T
(o:) 144.94 494.33 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 494.33 T
2 F
(Include:) 99 474.33 T
0 F
(lmem.h) 180 474.33 T
2 F
(See Also:) 99 454.33 T
0 F
(LMemDeref\050\051) 180 454.33 T
81 437.98 531 442.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 437.98 531 442.99 R
7 X
0 0 0 1 0 0 0 K
V
50 441.98 609.01 441.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 429.98 T
2 F
(LMemFree\050\051) 99 429.98 T
3 10 Q
(void) 99 415.32 T
4 F
(LMemFree\050) 153 415.32 T
4 9 Q
(optr) 153 404.98 T
(chunk\051;) 189 404.98 T
(/*optr of chunk to free */) 315 404.98 T
0 10 Q
(This routine frees a chunk from an LMem heap. The chunk is added to the) 180 387.32 T
-0.18 (heap\325) 180 375.82 P
-0.18 (s free list. The routine is guaranteed not to compact or resize the heap;) 204.08 375.82 P
(thus, all pointers within the block remain valid \050except for pointers to data) 180 364.32 T
(in the freed chunk, of course\051.) 180 352.82 T
2 F
(Be Sure T) 99 334.32 T
(o:) 144.94 334.32 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 334.32 T
2 F
(Include:) 99 314.32 T
0 F
(lmem.h) 180 314.32 T
2 F
(See Also:) 99 294.32 T
0 F
(LMemFreeHandles\050\051) 180 294.32 T
81 277.98 531 282.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 277.98 531 282.98 R
7 X
0 0 0 1 0 0 0 K
V
50 281.98 609.01 281.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 269.97 T
2 F
(LMemFreeHandles\050\051) 99 269.97 T
3 10 Q
(void) 99 255.31 T
4 F
(LMemFreeHandles\050) 153 255.31 T
4 9 Q
(MemHandle) 153 244.97 T
(mh,) 261 244.97 T
(/* Handle of LMem heap */) 333 244.97 T
(ChunkHandle) 153 234.97 T
(chunk\051;) 261 234.97 T
(/* Handle of chunk to free */) 333 234.97 T
0 10 Q
(This routine is just like) 180 217.31 T
5 F
(LMemFree\050\051) 290.76 217.31 T
0 F
( above, except that the chunk is) 354.83 217.31 T
(speci\336ed by its global and chunk handles \050instead of by an optr\051.) 180 205.81 T
2 F
(Be Sure T) 99 187.31 T
(o:) 144.94 187.31 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 187.31 T
2 F
(Include:) 99 167.31 T
0 F
(lmem.h) 180 167.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "281" 45
%%Page: "282" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(282) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LMemGetChunkSize\050\051) 99 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(LMemGetChunkSize\050) 153 620.33 T
4 9 Q
(optr) 153 609.99 T
(chunk\051;) 189 609.99 T
(/* optr of subject chunk */) 333 609.99 T
0 10 Q
(This routine returns the size \050in bytes\051 of a chunk in an LMem heap. Since) 180 592.33 T
(LMem chunks are dword-aligned, the chunk\325) 180 580.83 T
(s size may be slightly larger) 386.49 580.83 T
-0.04 (than the size speci\336ed when it was allocated. The routine is guaranteed not) 180 569.33 P
(to compact or resize the heap; thus, all pointers within the block remain) 180 557.83 T
(valid.) 180 546.33 T
2 F
(Be Sure T) 99 527.83 T
(o:) 144.94 527.83 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 527.83 T
2 F
(Include:) 99 507.83 T
0 F
(lmem.h) 180 507.83 T
2 F
(See Also:) 99 487.83 T
0 F
(LMemGetChunkSizeHandles\050\051) 180 487.83 T
81 471.48 531 476.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.48 531 476.49 R
7 X
0 0 0 1 0 0 0 K
V
50 475.48 609.01 475.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 463.48 T
2 F
(LMemGetChunkSizeHandles\050\051) 99 463.48 T
3 10 Q
(word) 99 448.82 T
4 F
(Routine\050) 153 448.82 T
4 9 Q
(MemHandle) 153 438.48 T
(mh,) 261 438.48 T
(/* Handle of LMem heap */) 333 438.48 T
(ChunkHandle) 153 428.48 T
(chunk\051;) 261 428.48 T
(/* Handle of chunk in question */) 333 428.48 T
0 10 Q
(This routine is just like) 180 410.82 T
5 F
(LMemGetChunkSize\050\051) 290.76 410.82 T
0 F
( above, except that the) 405.75 410.82 T
(chunk is speci\336ed by its global and chunk handles \050instead of by an optr\051.) 180 399.32 T
2 F
(Be Sure T) 99 380.82 T
(o:) 144.94 380.82 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 380.82 T
2 F
(Include:) 99 360.82 T
0 F
(lmem.h) 180 360.82 T
2 F
(See Also:) 99 340.82 T
0 F
(LMemGetChunkSize\050\051) 180 340.82 T
81 324.48 531 329.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 324.48 531 329.48 R
7 X
0 0 0 1 0 0 0 K
V
50 328.48 609.01 328.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 316.48 T
2 F
(LMemInitHeap\050\051) 99 316.48 T
3 10 Q
(void) 99 301.81 T
4 F
(LMemInitHeap\050) 153 301.81 T
4 9 Q
(MemHandle) 153 291.48 T
(mh,) 261 291.48 T
(/* Handle of \050locked or fixed\051) 333 291.48 T
( * block which will contain heap) 315 281.48 T
(*/) 493.2 281.48 T
(LMemType) 153 271.47 T
(type,) 261 271.47 T
(/* Type of heap to create */) 333 271.47 T
(LocalMemoryFlags) 153 261.47 T
(flags,) 261 261.47 T
(/* Record of LocalMemoryFlags */) 333 261.47 T
(word) 153 251.47 T
(lmemOffset,) 261 251.47 T
(/* Offset of first chunk in heap \050or) 333 251.47 T
( * zero for default offset\051 */) 315 241.47 T
(word) 153 231.47 T
(numHandles,) 261 231.47 T
(/* Size of starter handle table */) 333 231.47 T
(word) 153 221.47 T
(freeSpace\051;) 261 221.47 T
(/* Size of first free chunk) 333 221.47 T
( * created */) 315 211.47 T
0 10 Q
-0.83 (This routine creates an LMem heap in a global memory block. The block must) 180 193.81 P
(be locked or \336xed in memory) 180 182.31 T
(. The routine initializes the) 311.12 182.31 T
5 F
(LMemBlockHeader) 180 170.81 T
0 F
(, creates a handle table, allocates a single free chunk,) 279.45 170.81 T
-0.38 (and turns on the) 180 159.31 P
0 9 Q
-0.34 (HF_LMEM) 258.32 159.31 P
0 10 Q
-0.38 ( \337ag for the block. The block will be reallocated if) 305.81 159.31 P
(necessary to make room for the heap. The routine takes six arguments:) 180 147.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "282" 46
%%Page: "283" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(283) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
6 10 Q
0 X
(mh) 180 641.33 T
0 F
(The memory block\325) 243 641.33 T
(s handle) 329.68 641.33 T
6 F
(type) 180 623.33 T
0 F
-0.32 (A member of the) 243 623.33 P
5 F
-0.33 (LMemT) 321.18 623.33 P
-0.33 (ype) 360.28 623.33 P
0 F
-0.32 (enumerated type, specifying the) 381.34 623.33 P
(kind of block to create. For most applications, this will be) 243 612.33 T
0 9 Q
(LMEM_TYPE_GENERAL.) 243 601.33 T
6 10 Q
(\337ags) 180 583.33 T
0 F
-0.55 (A record of) 243 583.33 P
5 F
-0.56 (LocalMemoryFlags) 294.31 583.33 P
0 F
-0.55 (, specifying certain properties) 393.38 583.33 P
(of the heap. Most applications will pass a null record.) 243 572.33 T
6 F
(lmemOffset) 180 554.33 T
0 F
(The offset within the block at which to start the heap. This) 243 554.33 T
(must be larger than the size of the) 243 543.33 T
5 F
(LMemBlockHeader) 404.87 543.33 T
0 F
(structure which begins every heap block, or it must be zero,) 243 532.33 T
(indicating that the heap should begin immediately after the) 243 521.33 T
(header) 243 510.33 T
(. Any space between the) 274.11 510.33 T
5 F
(LMemBlockHeader) 388.2 510.33 T
0 F
( and the) 488.39 510.33 T
(heap is left untouched by all LMem routines.) 243 499.33 T
6 F
(numHandles) 180 481.33 T
0 F
(The number of entries to create in the block\325) 243 481.33 T
(s chunk handle) 446.91 481.33 T
-0.75 (table. The chunk handle table will grow automatically when all) 243 470.33 P
-0.14 (entries have been used up. Applications should generally pass) 243 459.33 P
(the constant) 243 448.33 T
0 9 Q
(STD_LMEM_INIT_HANDLES) 303.19 448.33 T
0 10 Q
(; they should) 432.02 448.33 T
(de\336nitely pass a positive number) 243 437.33 T
(.) 395.06 437.33 T
6 F
(freeSpace) 180 419.33 T
0 F
(The amount of space to allocate to the \336rst free chunk.) 243 419.33 T
(Applications should generally pass the constant) 243 408.33 T
0 9 Q
(STD_LMEM_INIT_HEAP) 243 397.33 T
0 10 Q
( they should de\336nitely pass a positive) 351.83 397.33 T
(number) 243 386.33 T
(.) 278.37 386.33 T
(T) 180 368.33 T
(o destroy an LMem heap, call) 185.75 368.33 T
5 F
(MemFree\050\051) 324.66 368.33 T
0 F
( to free the block containing the) 381.51 368.33 T
(heap.) 180 356.83 T
2 F
(Structures:) 99 338.33 T
0 9 Q
(There are two special data types used by this routine:) 180 338.33 T
5 10 Q
(LMemT) 405.37 338.33 T
(ypes) 444.47 338.33 T
0 9 Q
( and) 467.99 338.33 T
5 10 Q
(LocalMemoryFlags) 180 327.33 T
0 9 Q
(.) 279.07 327.33 T
0 10 Q
(LMem heaps are created for many different purposes. Some of these) 180 309.33 T
-0.18 (purposes require the heap to have special functionality) 180 297.83 P
-0.18 (. For this reason, you) 431.34 297.83 P
-0.82 (must pass a member of the) 180 286.33 P
5 F
-0.85 (LMemT) 302.48 286.33 P
-0.85 (ypes) 341.58 286.33 P
0 F
-0.82 ( enumerated type to specify the kind) 365.1 286.33 P
(of heap to create. The following types can be used; other types exist but) 180 274.83 T
(should not be used with) 180 263.33 T
5 F
(LMemInitHeap\050\051) 292.61 263.33 T
0 F
(.) 379.26 263.33 T
0 9 Q
(LMEM_TYPE_GENERAL) 180 244.83 T
0 10 Q
(Ordinary heap. Most application LMem heaps will be of this) 243 233.83 T
(type.) 243 222.83 T
0 9 Q
(LMEM_TYPE_OBJ_BLOCK) 180 204.83 T
0 10 Q
(The heap will contain object instance chunks.) 243 193.83 T
(When an LMem heap is created, you must pass a record of \337ags to) 180 175.83 T
5 F
(LMemInitHeap\050\051) 180 164.33 T
0 F
( to indicate how the heap should be treated. Most of the) 266.65 164.33 T
5 F
(LocalMemoryFlags) 180 152.83 T
0 F
( are only passed by system routines; all the \337ags) 279.07 152.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "283" 47
%%Page: "284" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(284) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 10 Q
0 X
(available are listed below) 180 641.33 T
(. The \337ags can be read by examining the) 296.53 641.33 T
5 F
(LMemBlockHeader) 180 629.83 T
0 F
( structure at the beginning of the block. Ordinarily) 280.19 629.83 T
(,) 513.73 629.83 T
(general LMem heaps will have all \337ags cleared.) 180 618.33 T
0 9 Q
(LMF_HAS_FLAGS) 180 599.83 T
0 10 Q
(Set if the block has a chunk containing only \337ags. This \337ag is) 243 588.83 T
(set for object blocks; it is usually cleared for general LMem) 243 577.83 T
(heaps.) 243 566.83 T
0 9 Q
(LMF_DET) 180 548.83 T
(ACHABLE) 224.01 548.83 T
0 10 Q
-0.19 (Set if the block is an object block which can be saved to a state) 243 537.83 P
(\336le.) 243 526.83 T
0 9 Q
(LMF_NO_ENLARGE) 180 508.83 T
0 10 Q
(Indicates that the local-memory routines should not enlarge) 243 497.83 T
(this block to ful\336ll chunk requests. This guarantees that the) 243 486.83 T
-0.71 (block will not be moved by a chunk allocation request; however) 243 475.83 P
-0.71 (,) 526.15 475.83 P
(it makes these requests more likely to fail.) 243 464.83 T
0 9 Q
(LMF_RETURN_ERRORS) 180 446.83 T
0 10 Q
(Set if local memory routines should return errors when) 243 435.83 T
(allocation requests cannot be ful\336lled. If the \337ag is not set,) 243 424.83 T
(allocation routines will fatal-error if they cannot comply with) 243 413.83 T
(requests.) 243 402.83 T
0 9 Q
(STD_LMEM_OBJECT_FLAGS) 180 384.83 T
0 10 Q
(Not actually a \337ag; rather) 243 373.83 T
(, it is the combination of) 362.47 373.83 T
0 9 Q
(LMF_HAS_FLAGS) 243 362.83 T
0 10 Q
( and) 323.34 362.83 T
0 9 Q
(LMF_RELOCA) 346.31 362.83 T
(TED) 409.82 362.83 T
0 10 Q
(. These \337ags are set) 429.32 362.83 T
(for object blocks.) 243 351.83 T
2 F
(T) 99 333.83 T
(ips and T) 104.93 333.83 T
(ricks:) 148.28 333.83 T
0 F
-0.82 (If you want a \336xed data space after the header) 180 333.83 P
-0.82 (, declare a structure whose \336rst) 387.05 333.83 P
(element is an) 180 320.83 T
5 F
(LMemBlockHeader) 244.83 320.83 T
0 F
( and whose other \336elds are for the data) 345.02 320.83 T
(you will store in the \336xed data space. Pass the size of this structure as the) 180 307.83 T
6 F
-0.01 (LMemOffset) 180 294.83 P
0 F
-0.01 ( argument. Y) 236.28 294.83 P
-0.01 (ou can now access the \336xed data area by using the) 295.9 294.83 P
(\336elds of the structure.) 180 281.83 T
2 F
(Be Sure T) 99 261.83 T
(o:) 144.94 261.83 T
0 F
(Pass an offset of either zero or at least as large as) 180 261.83 T
5 F
-0.05 (sizeof\050LMemBlockHeader\051) 180 248.83 P
0 F
-0.05 (. If you pass a positive offset that is too small,) 317.78 248.83 P
(the results are unde\336ned. Lock the block on the global heap before calling) 180 235.83 T
(this routine \050unless the block is \336xed\051.) 180 222.83 T
2 F
(W) 99 202.83 T
(arnings:) 108.07 202.83 T
0 F
-0.35 (The block may be relocated, if its initial size is too small to accommodate the) 180 202.83 P
-0.18 (heap. This is true even for \336xed blocks. If the \337ag) 180 189.83 P
0 9 Q
-0.16 (LMF_NO_ENLARGE) 408.95 189.83 P
0 10 Q
-0.18 ( is set,) 499.12 189.83 P
-0.08 (the block will never be relocated; however) 180 176.83 P
-0.08 (, you must make sure it starts out) 371.96 176.83 P
(large enough to accommodate the entire heap.) 180 163.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "284" 48
%%Page: "285" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(285) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(lmem.h) 180 641.33 T
2 F
(See Also:) 99 621.33 T
0 F
(LMemBlockHeader) 180 621.33 T
(, LMemT) 269.07 621.33 T
(ype, LocalMemoryFlags, MemAlloc\050\051,) 310.78 621.33 T
(MemFree\050\051, VMAllocLMem\050\051) 180 608.33 T
81 591.99 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 591.99 531 597 R
7 X
0 0 0 1 0 0 0 K
V
50 595.99 609.01 595.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 583.99 T
2 F
(LMemInsertAt\050\051) 99 583.99 T
3 10 Q
(void) 99 569.33 T
4 F
(LMemInsertAt\050) 153 569.33 T
4 9 Q
(optr) 153 558.99 T
(chunk,) 189 558.99 T
(/* optr of chunk to resize */) 315 558.99 T
(word) 153 548.99 T
(insertOffset,) 189 548.99 T
(/* Offset within chunk of first byte) 315 548.99 T
( * to be added */) 297 538.99 T
(word) 153 528.99 T
(insertCount\051;) 189 528.99 T
(/* # of bytes to add */) 315 528.99 T
0 10 Q
(This routine inserts space in the middle of a chunk and zero-initializes the) 180 511.33 T
-0.48 (new space. The \336rst new byte will be at the speci\336ed offset within the chunk.) 180 499.83 P
2 F
(Be Sure T) 99 481.33 T
(o:) 144.94 481.33 T
0 F
-0.07 (Lock the block on the global heap \050unless it is \336xed\051. Make sure the offset is) 180 481.33 P
(within the speci\336ed chunk.) 180 468.33 T
2 F
(W) 99 448.33 T
(arnings:) 108.07 448.33 T
0 F
-0.7 (This routine may resize or compact the heap; thus, all pointers to data within) 180 448.33 P
(the block are invalidated.) 180 435.33 T
-0.12 (Y) 180 415.33 P
-0.12 (ou must pass an) 185.93 415.33 P
6 F
-0.12 (insertOffset) 263.45 415.33 P
0 F
-0.12 ( that is actually within the chunk; if the offset) 316.57 415.33 P
(is out-of-bounds, results are unde\336ned.) 180 403.83 T
2 F
(Include:) 99 385.33 T
0 F
(lmem.h) 180 385.33 T
2 F
(See Also:) 99 365.33 T
0 F
(LMemReAlloc\050\051, LMemDeleteAt\050\051, LMemInsertAtHandles\050\051) 180 365.33 T
81 348.98 531 353.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 348.98 531 353.99 R
7 X
0 0 0 1 0 0 0 K
V
50 352.98 609.01 352.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 340.98 T
2 F
(LMemInsertAtHandles\050\051) 99 340.98 T
3 10 Q
(void) 99 326.32 T
4 F
(LMemInsertAtHandles\050) 153 326.32 T
4 9 Q
(MemHandle) 153 315.98 T
(mh,) 261 315.98 T
(/* Handle of LMem heap */) 333 315.98 T
(ChunkHandle) 153 305.98 T
(chunk,) 261 305.98 T
(/* Chunk to resize */) 333 305.98 T
(word) 153 295.98 T
(insertOffset,) 261 295.98 T
(/* Offset within chunk of first byte) 333 295.98 T
( * to be added */) 315 285.98 T
(word) 153 275.98 T
(insertCount\051;) 261 275.98 T
(/* # of bytes to add */) 333 275.98 T
0 10 Q
(This routine is just like) 180 258.32 T
5 F
(LMemInsertAt\050\051) 290.76 258.32 T
0 F
( above, except that the chunk is) 374.27 258.32 T
(speci\336ed by its global and chunk handles \050instead of by an optr\051.) 180 246.82 T
2 F
(Be Sure T) 99 228.32 T
(o:) 144.94 228.32 T
0 F
-0.07 (Lock the block on the global heap \050unless it is \336xed\051. Make sure the offset is) 180 228.32 P
(within the speci\336ed chunk.) 180 215.32 T
2 F
(W) 99 195.32 T
(arnings:) 108.07 195.32 T
0 F
-0.7 (This routine may resize or compact the heap; thus, all pointers to data within) 180 195.32 P
(the block are invalidated.) 180 182.32 T
-0.12 (Y) 180 162.32 P
-0.12 (ou must pass an) 185.93 162.32 P
6 F
-0.12 (insertOffset) 263.45 162.32 P
0 F
-0.12 ( that is actually within the chunk; if the offset) 316.57 162.32 P
(is out-of-bounds, results are unde\336ned.) 180 150.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "285" 49
%%Page: "286" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(286) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(lmem.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(LMemReAlloc\050\051) 99 616.99 T
3 10 Q
(Boolean) 99 602.33 T
4 F
(LMemReAlloc\050) 153 602.33 T
4 9 Q
(optr) 153 591.99 T
(chunk,) 189 591.99 T
(/* optr of chunk to resize */) 315 591.99 T
(word) 153 581.99 T
(chunkSize\051;) 189 581.99 T
(/* New size of chunk in bytes */) 315 581.99 T
0 10 Q
-0.51 (This routine resizes a chunk in an LMem heap. The heap must be in a locked) 180 564.33 P
-0.05 (or \336xed block. If the routine succeeds, it returns zero. If it fails \050because the) 180 552.83 P
(heap ran out of space and could not be expanded\051, it returns non-zero.) 180 541.33 T
(If the new size is larger than the original size, extra bytes will be added to) 180 522.83 T
-0.1 (the end of the chunk. These bytes will not be zero-initialized. The heap may) 180 511.33 P
(have to be compacted or resized to accommodate the request; thus, all) 180 499.83 T
(pointers to data within the block are invalidated.) 180 488.33 T
(If the new size is smaller than the old, the chunk will be truncated. The) 180 469.83 T
(request is guaranteed to succeed, and the chunk will not be moved; neither) 180 458.33 T
(will the heap be compacted or resized. Thus, all pointers to other chunks) 180 446.83 T
(remain valid. Reallocating a chunk to zero bytes is the same as freeing it.) 180 435.33 T
2 F
(Be Sure T) 99 416.83 T
(o:) 144.94 416.83 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 416.83 T
2 F
(W) 99 396.83 T
(arnings:) 108.07 396.83 T
0 F
(As noted, if the new size is larger than the old, the heap may be compacted) 180 396.83 T
(or resized, invalidating pointers.) 180 383.83 T
2 F
(Include:) 99 363.83 T
0 F
(lmem.h) 180 363.83 T
2 F
(See Also:) 99 343.83 T
0 F
(LMemReAllocHandles\050\051, LMemInsertAt\050\051, LMemDeleteAt\050\051) 180 343.83 T
81 327.48 531 332.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 327.48 531 332.49 R
7 X
0 0 0 1 0 0 0 K
V
50 331.48 609.01 331.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 319.48 T
2 F
(LMemReAllocHandles\050\051) 99 319.48 T
3 10 Q
(void) 99 304.82 T
4 F
(LMemReAllocHandles\050) 153 304.82 T
4 9 Q
(MemHandle) 153 294.48 T
(mh,) 261 294.48 T
(/* Handle of LMem heap */) 333 294.48 T
(ChunkHandle) 153 284.48 T
(chunk,) 261 284.48 T
(/* Handle of chunk to resize */) 333 284.48 T
(word) 153 274.48 T
(chunkSize\051;) 261 274.48 T
(/* New size of chunk in bytes */) 333 274.48 T
0 10 Q
(This routine is just like) 180 256.82 T
5 F
(LMemReAlloc\050\051) 290.76 256.82 T
0 F
( above, except that the chunk is) 371.13 256.82 T
(speci\336ed by its global and chunk handles \050instead of by an optr\051.) 180 245.32 T
2 F
(Be Sure T) 99 226.82 T
(o:) 144.94 226.82 T
0 F
(Lock the block on the global heap \050unless it is \336xed\051.) 180 226.82 T
2 F
(W) 99 206.82 T
(arnings:) 108.07 206.82 T
0 F
(As noted, if the new size is larger than the old, the heap may be compacted) 180 206.82 T
(or resized, invalidating pointers.) 180 193.82 T
2 F
(Include:) 99 173.82 T
0 F
(lmem.h) 180 173.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "286" 50
%%Page: "287" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(287) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalAsciiT) 99 634.99 T
(oFixed\050\051) 165.47 634.99 T
3 10 Q
(WWFixedAsDWord) 99 620.33 T
4 F
( LocalAsciiToFixed\050) 183 620.33 T
4 9 Q
(const char *) 153 609.99 T
(buffer,) 261 609.99 T
(char **) 153 599.99 T
(parseEnd\051;) 261 599.99 T
0 10 Q
(This routines converts a string like \32212.345\323 to a \336xed point number) 180 582.33 T
(.) 493.02 582.33 T
2 F
(Include:) 99 563.83 T
0 F
(localize.h) 180 563.83 T
81 547.48 531 552.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 547.48 531 552.49 R
7 X
0 0 0 1 0 0 0 K
V
50 551.48 609.01 551.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 539.48 T
2 F
(LocalCmpStrings\050\051) 99 539.48 T
3 10 Q
(sword) 99 524.82 T
4 F
(LocalCmpStrings\050) 153 524.82 T
4 9 Q
(const char *) 153 514.48 T
(str1,) 261 514.48 T
(const char *) 153 504.48 T
7 F
(str2) 261 504.48 T
4 F
(,) 282.6 504.48 T
(word) 153 494.48 T
(strSize\051;) 261 494.48 T
0 10 Q
-0.57 (This routine compares two strings to determine which comes \336rst in a lexical) 180 476.82 P
-0.07 (\050i.e. alphabetic\051 ordering. If the return value is negative, then) 180 465.32 P
6 F
-0.07 (str1) 466.38 465.32 P
0 F
-0.07 ( is earlier) 484.34 465.32 P
(than) 180 453.82 T
6 F
(str2) 204.45 453.82 T
0 F
(. If the return value is positive, then) 222.41 453.82 T
6 F
(str1) 392.61 453.82 T
0 F
( is later than) 410.57 453.82 T
6 F
(str2) 473.18 453.82 T
0 F
(. If the) 491.14 453.82 T
(return value is zero, then the strings appear at the same place in) 180 442.32 T
(alphabetical order) 180 430.82 T
(.) 263.53 430.82 T
2 F
(Include:) 99 412.32 T
0 F
(localize.h) 180 412.32 T
81 395.98 531 400.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 395.98 531 400.98 R
7 X
0 0 0 1 0 0 0 K
V
50 399.98 609.01 399.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 387.98 T
2 F
(LocalCmpStringsDosT) 99 387.98 T
(oGeos\050\051) 227.46 387.98 T
3 10 Q
(sword) 99 373.31 T
4 F
(LocalCmpStringsDosToGeos\050) 153 373.31 T
4 9 Q
(const char *) 153 362.98 T
(str1,) 315 362.98 T
(const char *) 153 352.98 T
(str2,) 315 352.98 T
(word) 153 342.98 T
(strSize,) 315 342.98 T
(word) 153 332.98 T
(defaultChar,) 315 332.98 T
(LocalCmpStringsDosToGeosFlags) 153 322.98 T
(flags\051;) 315 322.98 T
0 10 Q
(This routine compares two strings to determine which comes \336rst in lexical) 180 305.31 T
(ordering. Either or both of these strings may be a) 180 293.81 T
0 9 Q
(DOS) 410.76 293.81 T
0 10 Q
( string.  If the return) 430.43 293.81 T
-0.67 (value is negative, then) 180 282.31 P
6 F
-0.67 (str1) 284.77 282.31 P
0 F
-0.67 ( is earlier than) 302.73 282.31 P
6 F
-0.67 (str2) 371.38 282.31 P
0 F
-0.67 (. If the return value is positive,) 389.34 282.31 P
-0.78 (then) 180 270.81 P
6 F
-0.78 (str1) 203.11 270.81 P
0 F
-0.78 ( is later than) 221.07 270.81 P
6 F
-0.78 (str2) 280.54 270.81 P
0 F
-0.78 (. If the return value is zero, then the strings appear) 298.5 270.81 P
(at the same place in alphabetical order) 180 259.31 T
(.) 359.11 259.31 T
2 F
(Structures:) 99 240.81 T
4 9 Q
(typedef ByteFlags LocalCmpStringsDosToGeosFlags;) 153 230.47 T
(/* The following flags may be combined using | and &:) 189 220.47 T
( *) 189 210.47 T
(LCSDTG_NO_CONVERT_STRING_2,) 199.8 210.47 T
( *) 189 200.47 T
(LCSDTG_NO_CONVERT_STRING_1 */) 205.2 200.47 T
2 10 Q
(Include:) 99 182.81 T
0 F
(localize.h) 180 182.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "287" 51
%%Page: "288" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(288) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalCmpStringsNoCase\050\051) 99 634.99 T
3 10 Q
(sword) 99 620.33 T
4 F
(LocalCmpStringsNoCase\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(str1,) 261 609.99 T
(const char *) 153 599.99 T
(str2,) 261 599.99 T
(word) 153 589.99 T
(strSize\051;) 261 589.99 T
0 10 Q
-0.57 (This routine compares two strings to determine which comes \336rst in a lexical) 180 572.33 P
(\050i.e. alphabetic\051 ordering. The comparison used is not case-sensitive.  If the) 180 560.83 T
-0.08 (return value is negative, then) 180 549.33 P
6 F
-0.08 (str1) 319.78 549.33 P
0 F
-0.08 ( is earlier than) 337.74 549.33 P
6 F
-0.08 (str2) 408.72 549.33 P
0 F
-0.08 (. If the return value is) 426.68 549.33 P
(positive, then) 180 537.83 T
6 F
(str1) 245.38 537.83 T
0 F
( is later than) 263.34 537.83 T
6 F
(str2) 325.95 537.83 T
0 F
(. If the return value is zero, then the) 343.91 537.83 T
(strings appear at the same place in alphabetical order) 180 526.33 T
(.) 428.93 526.33 T
2 F
(Include:) 99 507.83 T
0 F
(localize.h) 180 507.83 T
81 491.48 531 496.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 491.48 531 496.49 R
7 X
0 0 0 1 0 0 0 K
V
50 495.48 609.01 495.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 483.48 T
2 F
(LocalCodePageT) 99 483.48 T
(oGeos\050\051) 195.47 483.48 T
3 10 Q
(Boolean) 99 468.82 T
4 F
(LocalCodePageToGeos\050) 153 468.82 T
4 9 Q
(char *) 153 458.48 T
(str,) 261 458.48 T
(word) 153 448.48 T
(strSize,) 261 448.48 T
(/* Size of the string, in bytes */) 315 448.48 T
(DosCodePage) 153 438.48 T
(codePage,) 261 438.48 T
(word) 153 428.48 T
(defaultChar\051;) 261 428.48 T
0 10 Q
(This routine converts a) 180 410.82 T
0 9 Q
(DOS) 289.82 410.82 T
0 10 Q
( string to standard) 309.49 410.82 T
0 9 Q
(GEOS) 398.76 410.82 T
0 10 Q
( text using a speci\336ed) 424.94 410.82 T
(code page. Any characters for which there is no) 180 399.32 T
0 9 Q
(GEOS) 400.55 399.32 T
0 10 Q
( equivalent will be) 426.72 399.32 T
(replaced by the passed default character) 180 387.82 T
(.) 366.12 387.82 T
2 F
(Include:) 99 369.32 T
0 F
(localize.h) 180 369.32 T
81 352.98 531 357.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 352.98 531 357.98 R
7 X
0 0 0 1 0 0 0 K
V
50 356.98 609.01 356.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 344.98 T
2 F
(LocalCodePageT) 99 344.98 T
(oGeosChar\050\051) 195.47 344.98 T
3 10 Q
(word) 99 330.31 T
4 F
(LocalCodePageToGeosChar\050) 153 330.31 T
4 9 Q
(word) 153 319.98 T
(ch,) 189 319.98 T
(DosCodePage codePage,) 153 309.98 T
(word) 153 299.98 T
(defaultChar\051;) 189 299.98 T
0 10 Q
(This routine converts a) 180 282.31 T
0 9 Q
(DOS) 289.82 282.31 T
0 10 Q
( character to standard) 309.49 282.31 T
0 9 Q
(GEOS) 415.05 282.31 T
0 10 Q
( text using a) 441.23 282.31 T
-0.63 (speci\336ed code page. Any character for which there is no) 180 270.81 P
0 9 Q
-0.56 (GEOS) 432.24 270.81 P
0 10 Q
-0.63 ( equivalent will) 458.41 270.81 P
(be replaced by the passed default character) 180 259.31 T
(.) 379.46 259.31 T
2 F
(Include:) 99 240.81 T
0 F
(localize.h) 180 240.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "288" 52
%%Page: "289" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(289) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalCustomFormatDateT) 99 634.99 T
(ime\050\051) 248.8 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(LocalCustomFormatDateTime\050) 153 620.33 T
4 9 Q
(char *) 153 609.99 T
(str,) 189 609.99 T
(/* Buffer to save formatted text in */) 297 609.99 T
(const char *) 153 599.99 T
(format,) 217.8 599.99 T
(/* Format string */) 297 599.99 T
(const) 153 589.99 T
(TimerDateAndTime *dateTime\051;) 189 589.99 T
0 10 Q
(This routine takes a date or time and constructs a string using a custom) 180 572.33 T
(format.) 180 560.83 T
2 F
(Include:) 99 542.33 T
0 F
(localize.h) 180 542.33 T
81 525.98 531 530.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 525.98 531 530.99 R
7 X
0 0 0 1 0 0 0 K
V
50 529.98 609.01 529.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 517.98 T
2 F
(LocalCustomParseDateT) 99 517.98 T
(ime\050\051) 240.82 517.98 T
3 10 Q
(word) 99 504.32 T
4 F
(LocalCustomParseDateTime\050) 153 504.32 T
4 9 Q
(const char *) 153 493.98 T
(str,) 261 493.98 T
(DateTimeFormat) 153 483.98 T
(format,) 261 483.98 T
(TimerDateAndTime *) 153 473.98 T
(dateTime\051;) 261 473.98 T
0 10 Q
(This routine parses a date and time string by comparing it with the passed) 180 456.32 T
5 F
(DateT) 180 444.82 T
(imeFormat) 211.41 444.82 T
0 F
(. It \336lls in the \336elds of the) 269 444.82 T
5 F
(T) 391.24 444.82 T
(imerDateAndT) 398.21 444.82 T
(ime) 474.99 444.82 T
0 F
-0.59 (structure. Any \336elds which are not speci\336ed in the format string will be \336lled) 180 433.32 P
(with -1.) 180 421.82 T
(If the string parses correctly) 180 403.32 T
(,) 310.17 403.32 T
5 F
(LocalCustomParseDateT) 315.73 403.32 T
(ime\050\051) 444.92 403.32 T
0 F
( returns -1.) 471.77 403.32 T
(Otherwise it reutrns the offset to the start of the text which did not parse) 180 391.82 T
(correctly) 180 380.32 T
(.) 219.06 380.32 T
2 F
(Include:) 99 361.82 T
0 F
(localize.h) 180 361.82 T
81 345.48 531 350.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 345.48 531 350.48 R
7 X
0 0 0 1 0 0 0 K
V
50 349.48 609.01 349.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 337.48 T
2 F
(LocalDistanceFromAscii\050\051) 99 337.48 T
3 10 Q
(WWFixedAsDword) 99 322.81 T
4 F
(LocalDistanceFromAscii\050) 189 322.81 T
4 9 Q
(const char *) 153 312.48 T
(buffer,) 261 312.48 T
(DistanceUnit) 153 302.48 T
(distanceUnits,) 261 302.48 T
(MeasurementTypes) 153 292.48 T
(measurementType\051;) 261 292.48 T
0 10 Q
-0.5 (This routine takes a function like \32272 pt\323 and returns a number representing) 180 274.81 P
-0.38 (the distance. The returned answer represents the measure in points, inches,) 180 263.31 P
(centimeters, or some other measure as speci\336ed by the passed unit.) 180 251.81 T
2 F
(Include:) 99 233.31 T
0 F
(localize.h) 180 233.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "289" 53
%%Page: "290" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(290) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalDistanceT) 99 634.99 T
(oAscii\050\051) 186.8 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(LocalDistanceToAscii\050 /* Length of string, including NULL */) 153 620.33 T
4 9 Q
(char *) 153 609.99 T
(buffer,) 261 609.99 T
(/*Buffer to save formatted text in */) 315 609.99 T
(word) 153 599.99 T
(value,) 261 599.99 T
(DistanceUnit) 153 589.99 T
(distanceUnits,) 261 589.99 T
(MeasurementType) 153 579.99 T
(measurementType\051;) 261 579.99 T
0 10 Q
(This routine takes a distance and a set of units and returns a string) 180 562.33 T
(containing a properly formatted distance.) 180 550.83 T
2 F
(Include:) 99 532.33 T
0 F
(localize.h) 180 532.33 T
81 515.98 531 520.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.98 531 520.99 R
7 X
0 0 0 1 0 0 0 K
V
50 519.98 609.01 519.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 507.98 T
2 F
(LocalDosT) 99 507.98 T
(oGeos\050\051) 159.46 507.98 T
3 10 Q
(Boolean) 99 493.32 T
4 F
(LocalDosToGeos\050) 153 493.32 T
4 9 Q
(char *) 153 482.98 T
(str,) 189 482.98 T
(word) 153 472.98 T
(strSize,) 189 472.98 T
(word) 153 462.98 T
(defaultChar\051;) 189 462.98 T
0 10 Q
(Convert a) 180 445.32 T
0 9 Q
(DOS) 228.15 445.32 T
0 10 Q
( string to) 247.82 445.32 T
0 9 Q
(GEOS) 292.64 445.32 T
0 10 Q
( text. Any characters for which there is no) 318.82 445.32 T
0 9 Q
(GEOS) 180 433.82 T
0 10 Q
( equivalent will be replaced by the passed default character) 206.17 433.82 T
(.) 480.1 433.82 T
2 F
(Include:) 99 415.32 T
0 F
(localize.h) 180 415.32 T
81 398.98 531 403.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 398.98 531 403.98 R
7 X
0 0 0 1 0 0 0 K
V
50 402.98 609.01 402.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 390.98 T
2 F
(LocalDosT) 99 390.98 T
(oGeosChar\050\051) 159.46 390.98 T
3 10 Q
(word) 99 376.31 T
4 F
(LocalDosToGeosChar\050) 153 376.31 T
4 9 Q
(word) 153 365.98 T
(ch,) 189 365.98 T
(word) 153 355.98 T
(defaultChar\051;) 189 355.98 T
0 10 Q
-0.07 (Convert a) 180 338.31 P
0 9 Q
-0.06 (DOS) 228.01 338.31 P
0 10 Q
-0.07 ( character to) 247.69 338.31 P
0 9 Q
-0.06 (GEOS) 308.59 338.31 P
0 10 Q
-0.07 ( text. Any characters for which there is no) 334.76 338.31 P
0 9 Q
(GEOS) 180 326.81 T
0 10 Q
( equivalent will be replaced by the passed default character) 206.17 326.81 T
(.) 480.1 326.81 T
2 F
(Include:) 99 308.31 T
0 F
(localize.h) 180 308.31 T
81 291.97 531 296.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 291.97 531 296.98 R
7 X
0 0 0 1 0 0 0 K
V
50 295.97 609.01 295.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 283.97 T
2 F
(LocalDowncaseChar\050\051) 99 283.97 T
3 10 Q
(word) 99 269.3 T
4 F
(LocalDowncaseChar\050) 153 269.3 T
4 9 Q
(word) 153 258.97 T
(ch\051;) 189 258.97 T
0 10 Q
(Return the lower case equivalent, if any) 180 241.3 T
(, of the passed character) 363.54 241.3 T
(.) 475.21 241.3 T
2 F
(Include:) 99 222.8 T
0 F
(localize.h) 180 222.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "290" 54
%%Page: "291" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(291) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalDowncaseString\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(LocalDowncaseString\050) 153 620.33 T
4 9 Q
(char *) 153 609.99 T
(str,) 189 609.99 T
(word) 153 599.99 T
(size\051;) 189 599.99 T
(/* Size of string, in bytes */) 279 599.99 T
0 10 Q
(Convert the passed string to its all lower case equivalent.) 180 582.33 T
2 F
(Include:) 99 563.83 T
0 F
(localize.h) 180 563.83 T
81 547.48 531 552.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 547.48 531 552.49 R
7 X
0 0 0 1 0 0 0 K
V
50 551.48 609.01 551.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 539.48 T
2 F
(LocalFixedT) 99 539.48 T
(oAscii\050\051) 168.13 539.48 T
3 10 Q
(void) 99 524.82 T
4 F
(LocalFixedToAscii\050) 153 524.82 T
4 9 Q
(char *) 153 514.48 T
(buffer,) 189 514.48 T
(WWFixedAsDWord value,) 153 504.48 T
(word) 153 494.48 T
(fracDigits\051;) 189 494.48 T
0 10 Q
(This routine returns the) 180 476.82 T
0 9 Q
(ASCII) 295 476.82 T
0 10 Q
( expression of a \336xed point number) 320.99 476.82 T
(.) 482.11 476.82 T
2 F
(Include:) 99 458.32 T
0 F
(localize.h) 180 458.32 T
81 441.98 531 446.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 441.98 531 446.98 R
7 X
0 0 0 1 0 0 0 K
V
50 445.98 609.01 445.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 433.98 T
2 F
(LocalFormatDateT) 99 433.98 T
(ime\050\051) 204.13 433.98 T
3 10 Q
(word) 99 419.31 T
4 F
(LocalFormatDateTime\050 /* Length of returned string */) 153 419.31 T
4 9 Q
(char *) 153 408.98 T
(str,) 279 408.98 T
(DateTimeFormat) 153 398.98 T
(format,) 279 398.98 T
(const TimerDateAndTime *) 153 388.98 T
(dateTime\051;) 282.6 388.98 T
0 10 Q
(This routine returns the string \050e.g. \3229:37\323\051 corresponding to the passed) 180 371.31 T
(DateAndT) 180 359.81 T
(ime.) 227.72 359.81 T
2 F
(Include:) 99 341.31 T
0 F
(localize.h) 180 341.31 T
81 324.97 531 329.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 324.97 531 329.98 R
7 X
0 0 0 1 0 0 0 K
V
50 328.97 609.01 328.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 316.97 T
2 F
(LocalGeosT) 99 316.97 T
(oCodePage\050\051) 166.8 316.97 T
3 10 Q
(Boolean) 99 302.3 T
4 F
(LocalGeosToCodePage\050) 153 302.3 T
4 9 Q
(char *) 153 291.97 T
(str,) 261 291.97 T
(word) 153 281.97 T
(strSize,) 261 281.97 T
(DosCodePage) 153 271.97 T
(codePage,) 261 271.97 T
(word) 153 261.97 T
(defaultChar\051;) 261 261.97 T
0 10 Q
(Convert a) 180 244.3 T
0 9 Q
(GEOS) 228.15 244.3 T
0 10 Q
( string to) 254.32 244.3 T
0 9 Q
(DOS) 299.14 244.3 T
0 10 Q
( text, using the speci\336ed code page. Any) 318.82 244.3 T
(characters for which there is no) 180 232.8 T
0 9 Q
(DOS) 328.88 232.8 T
0 10 Q
(equivalent will be replaced by the) 351.06 232.8 T
(passed default character) 180 221.3 T
(.) 292.78 221.3 T
2 F
(Include:) 99 202.8 T
0 F
(localize.h) 180 202.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "291" 55
%%Page: "292" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(292) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalGeosT) 99 634.99 T
(oCodePageChar\050\051) 166.8 634.99 T
3 10 Q
(word) 99 620.33 T
4 F
(LocalGeosToCodePageChar\050) 153 620.33 T
4 9 Q
(word) 153 609.99 T
(ch,) 261 609.99 T
(DosCodePage) 153 599.99 T
(codePage,) 261 599.99 T
(word) 153 589.99 T
(defaultChar\051;) 261 589.99 T
0 10 Q
(Convert a) 180 572.33 T
0 9 Q
(GEOS) 228.15 572.33 T
0 10 Q
( character to) 254.32 572.33 T
0 9 Q
(DOS) 315.43 572.33 T
0 10 Q
( text, using the speci\336ed code page. Any) 335.11 572.33 T
-0.57 (character for which there is no) 180 560.83 P
0 9 Q
-0.51 (DOS) 320.85 560.83 P
0 10 Q
-0.57 (equivalent will be replaced by the passed) 342.52 560.83 P
(default character) 180 549.33 T
(.) 258.7 549.33 T
2 F
(Include:) 99 530.83 T
0 F
(localize.h) 180 530.83 T
81 514.48 531 519.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 514.48 531 519.49 R
7 X
0 0 0 1 0 0 0 K
V
50 518.48 609.01 518.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 506.48 T
2 F
(LocalGeosT) 99 506.48 T
(oDos\050\051) 166.8 506.48 T
3 10 Q
(Boolean) 99 491.82 T
4 F
(LocalGeosToDos\050) 153 491.82 T
4 9 Q
(char *) 153 481.48 T
(str,) 189 481.48 T
(word) 153 471.48 T
(strSize,) 189 471.48 T
(word) 153 461.48 T
(defaultChar\051;) 189 461.48 T
0 10 Q
-0.46 (Convert a) 180 443.82 P
0 9 Q
-0.41 (GEOS) 227.23 443.82 P
0 10 Q
-0.46 ( string to) 253.4 443.82 P
0 9 Q
-0.41 (DOS) 296.85 443.82 P
0 10 Q
-0.46 ( text. Any characters for which there is no) 316.52 443.82 P
0 9 Q
-0.41 (DOS) 509.24 443.82 P
0 10 Q
(equivalent will be replaced by the passed default character) 180 432.32 T
(.) 451.15 432.32 T
2 F
(Include:) 99 413.82 T
0 F
(localize.h) 180 413.82 T
81 397.48 531 402.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 397.48 531 402.48 R
7 X
0 0 0 1 0 0 0 K
V
50 401.48 609.01 401.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 389.48 T
2 F
(LocalGeosT) 99 389.48 T
(oDosChar\050\051) 166.8 389.48 T
3 10 Q
(word) 99 374.81 T
4 F
(LocalGeosToDosChar\050) 153 374.81 T
4 9 Q
(word) 153 364.48 T
(ch,) 189 364.48 T
(word) 153 354.48 T
(defaultChar\051;) 189 354.48 T
0 10 Q
(Convert a) 180 336.81 T
0 9 Q
(GEOS) 228.15 336.81 T
0 10 Q
( character to) 254.32 336.81 T
0 9 Q
(DOS) 315.43 336.81 T
0 10 Q
( text. Any character for which there is no) 335.11 336.81 T
0 9 Q
(DOS) 180 325.31 T
0 10 Q
(equivalent will be replaced by the passed default character) 202.18 325.31 T
(.) 473.33 325.31 T
2 F
(Include:) 99 306.81 T
0 F
(localize.h) 180 306.81 T
81 290.47 531 295.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 290.47 531 295.48 R
7 X
0 0 0 1 0 0 0 K
V
50 294.47 609.01 294.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 282.47 T
2 F
(LocalGetCodePage\050\051) 99 282.47 T
3 10 Q
(DosCodePage) 99 267.8 T
4 F
( LocalGetCodePage\050void\051;) 165 267.8 T
0 F
(This routine returns the current code page, used by) 180 249.8 T
0 9 Q
(DOS) 420.37 249.8 T
0 10 Q
( to handle) 440.04 249.8 T
(international character sets.) 180 238.3 T
2 F
(Include:) 99 219.8 T
0 F
(localize.h) 180 219.8 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "292" 56
%%Page: "293" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(293) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalGetCurrencyFormat\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(LocalGetCurrencyFormat\050) 153 620.33 T
4 9 Q
(LocalCurrencyFormat *) 153 609.99 T
(buf,) 279 609.99 T
(char *) 153 599.99 T
(symbol\051;) 279 599.99 T
0 10 Q
(This routine returns the current currency format and symbol.) 180 582.33 T
2 F
(Include:) 99 563.83 T
0 F
(localize.h) 180 563.83 T
81 547.48 531 552.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 547.48 531 552.49 R
7 X
0 0 0 1 0 0 0 K
V
50 551.48 609.01 551.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 539.48 T
2 F
(LocalGetDateT) 99 539.48 T
(imeFormat\050\051) 183.47 539.48 T
3 10 Q
(void) 99 524.82 T
4 F
(LocalGetDateTimeFormat\050) 153 524.82 T
4 9 Q
(char *) 153 514.48 T
(str,) 261 514.48 T
(DateTimeFormat) 153 504.48 T
(format\051;) 261 504.48 T
0 10 Q
(This routine returns the user) 180 486.82 T
(\325) 315.73 486.82 T
(s preferred time and date formats.) 317.4 486.82 T
2 F
(Include:) 99 468.32 T
0 F
(localize.h) 180 468.32 T
81 451.98 531 456.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 451.98 531 456.98 R
7 X
0 0 0 1 0 0 0 K
V
50 455.98 609.01 455.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 443.98 T
2 F
(LocalGetDefaultPrintSizes\050\051) 99 443.98 T
3 10 Q
(void) 99 429.31 T
4 F
(LocalGetDefaultPrintSizes\050) 153 429.31 T
4 9 Q
(DefaultPrintSizes *) 153 418.98 T
(sizes\051;) 261 418.98 T
0 10 Q
(This routine returns the system\325) 180 401.31 T
(s default page and document size.) 329.08 401.31 T
2 F
(Include:) 99 382.81 T
0 F
(localize.h) 180 382.81 T
81 366.47 531 371.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 366.47 531 371.48 R
7 X
0 0 0 1 0 0 0 K
V
50 370.47 609.01 370.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 358.47 T
2 F
(LocalGetMeasurementT) 99 358.47 T
(ype\050\051) 234.14 358.47 T
3 10 Q
(MeasurementTypes) 99 343.8 T
4 F
( LocalGetMeasurementType\050void\051;) 195 343.8 T
0 F
(This routine returns the user preference between) 180 325.8 T
0 9 Q
(US) 410.36 325.8 T
0 10 Q
( and metric) 423.36 325.8 T
(measurement systems.) 180 314.3 T
2 F
(Include:) 99 295.8 T
0 F
(localize.h) 180 295.8 T
81 279.46 531 284.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 279.46 531 284.47 R
7 X
0 0 0 1 0 0 0 K
V
50 283.46 609.01 283.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 271.46 T
2 F
(LocalGetNumericFormat\050\051) 99 271.46 T
3 10 Q
(void) 99 256.79 T
4 F
(LocalGetNumericFormat\050) 153 256.79 T
4 9 Q
(LocalNumericFormat *) 153 246.46 T
(buf\051;) 261 246.46 T
0 10 Q
(This routine returns the user) 180 228.79 T
(\325) 315.73 228.79 T
(s preferred format for numbers.) 317.4 228.79 T
2 F
(Include:) 99 210.29 T
0 F
(localize.h) 180 210.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "293" 57
%%Page: "294" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(294) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalGetQuotes\050\051) 99 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(LocalGetQuotes\050) 153 620.33 T
4 9 Q
(LocalQuotes *) 153 609.99 T
(quotes\051;) 261 609.99 T
0 10 Q
(This routine returns the user) 180 592.33 T
(\325) 315.73 592.33 T
(s preferred quote marks.) 317.4 592.33 T
2 F
(Include:) 99 573.83 T
0 F
(localize.h) 180 573.83 T
81 557.48 531 562.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 557.48 531 562.49 R
7 X
0 0 0 1 0 0 0 K
V
50 561.48 609.01 561.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 549.48 T
2 F
(LocalIsAlpha\050\051) 99 549.48 T
3 10 Q
(Boolean) 99 534.82 T
4 F
(LocalIsAlpha\050) 153 534.82 T
4 9 Q
(word) 153 524.48 T
(ch\051;) 189 524.48 T
0 10 Q
(This routine returns) 180 506.82 T
6 F
(true) 277.22 506.82 T
0 F
( if the passed character is alphabetic.) 295.73 506.82 T
2 F
(Include:) 99 488.32 T
0 F
(localize.h) 180 488.32 T
81 471.98 531 476.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.98 531 476.98 R
7 X
0 0 0 1 0 0 0 K
V
50 475.98 609.01 475.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 463.98 T
2 F
(LocalIsAlphaNumeric\050\051) 99 463.98 T
3 10 Q
(Boolean) 99 449.31 T
4 F
(LocalIsAlphaNumeric\050) 153 449.31 T
4 9 Q
(word) 153 438.98 T
(ch\051;) 189 438.98 T
0 10 Q
(This routine returns) 180 421.31 T
6 F
(true) 277.22 421.31 T
0 F
( if the passed character is alphanumeric.) 295.73 421.31 T
2 F
(Include:) 99 402.81 T
0 F
(localize.h) 180 402.81 T
81 386.47 531 391.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 386.47 531 391.48 R
7 X
0 0 0 1 0 0 0 K
V
50 390.47 609.01 390.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 378.47 T
2 F
(LocalIsControl\050\051) 99 378.47 T
3 10 Q
(Boolean) 99 363.8 T
4 F
(LocalIsControl\050) 153 363.8 T
4 9 Q
(word) 153 353.47 T
(ch\051;) 189 353.47 T
0 10 Q
(This routine returns) 180 335.8 T
6 F
(true) 277.22 335.8 T
0 F
( if the passed character is a control character) 295.73 335.8 T
(.) 503.14 335.8 T
2 F
(Include:) 99 317.3 T
0 F
(localize.h) 180 317.3 T
81 300.96 531 305.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 300.96 531 305.97 R
7 X
0 0 0 1 0 0 0 K
V
50 304.96 609.01 304.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 292.96 T
2 F
(LocalIsDateChar\050\051) 99 292.96 T
3 10 Q
(Boolean) 99 278.29 T
4 F
(LocalIsDateChar\050) 153 278.29 T
4 9 Q
(word) 153 267.96 T
(ch\051;) 189 267.96 T
0 10 Q
(This routine returns) 180 250.29 T
6 F
(true) 277.22 250.29 T
0 F
( if the passed character could be part of a date or) 295.73 250.29 T
(time.) 180 238.79 T
2 F
(Include:) 99 220.29 T
0 F
(localize.h) 180 220.29 T
81 203.95 531 208.96 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 203.95 531 208.96 R
7 X
0 0 0 1 0 0 0 K
V
50 207.95 609.01 207.95 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 195.95 T
2 F
(LocalIsDigit\050\051) 99 195.95 T
3 10 Q
(Boolean) 99 181.28 T
4 F
(LocalIsDigit\050) 153 181.28 T
4 9 Q
(word) 153 170.95 T
(ch\051;) 189 170.95 T
0 10 Q
(This routine returns) 180 153.28 T
6 F
(true) 277.22 153.28 T
0 F
( if the passed character is a decimal digit.) 295.73 153.28 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "294" 58
%%Page: "295" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(295) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
2 10 Q
0 X
(Include:) 99 641.33 T
0 F
(localize.h) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
2 F
(LocalIsDosChar\050\051) 99 616.99 T
3 10 Q
(Boolean) 99 602.33 T
4 F
(LocalIsDosChar\050) 153 602.33 T
4 9 Q
(word) 153 591.99 T
(ch\051;) 189 591.99 T
0 10 Q
-0.45 (This routine returns) 180 574.33 P
6 F
-0.45 (true) 275.88 574.33 P
0 F
-0.45 ( if the passed character is part of the) 294.39 574.33 P
0 9 Q
-0.4 (DOS) 462.78 574.33 P
0 10 Q
-0.45 ( character) 482.45 574.33 P
(set.) 180 562.83 T
2 F
(Include:) 99 544.33 T
0 F
(localize.h) 180 544.33 T
81 527.98 531 532.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 527.98 531 532.99 R
7 X
0 0 0 1 0 0 0 K
V
50 531.98 609.01 531.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 519.98 T
2 F
(LocalIsGraphic\050\051) 99 519.98 T
3 10 Q
(Boolean) 99 505.32 T
4 F
(LocalIsGraphic\050) 153 505.32 T
4 9 Q
(word) 153 494.98 T
(ch\051;) 189 494.98 T
0 10 Q
(This routine returns) 180 477.32 T
6 F
(true) 277.22 477.32 T
0 F
( if the passed character is displayable.) 295.73 477.32 T
2 F
(Include:) 99 458.82 T
0 F
(localize.h) 180 458.82 T
81 442.48 531 447.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 442.48 531 447.48 R
7 X
0 0 0 1 0 0 0 K
V
50 446.48 609.01 446.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 434.48 T
2 F
(LocalIsHexDigit\050\051) 99 434.48 T
3 10 Q
(Boolean) 99 419.81 T
4 F
(LocalIsHexDigit\050) 153 419.81 T
4 9 Q
(word) 153 409.48 T
(ch\051;) 189 409.48 T
0 10 Q
(This routine returns) 180 391.81 T
6 F
(true) 277.22 391.81 T
0 F
( if the passed character is a hexadecimal digit.) 295.73 391.81 T
2 F
(Include:) 99 373.31 T
0 F
(localize.h) 180 373.31 T
81 356.97 531 361.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 356.97 531 361.98 R
7 X
0 0 0 1 0 0 0 K
V
50 360.97 609.01 360.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 348.97 T
2 F
(LocalIsLower\050\051) 99 348.97 T
3 10 Q
(Boolean) 99 334.3 T
4 F
(LocalIsLower\050) 153 334.3 T
4 9 Q
(word) 153 323.97 T
(ch\051;) 189 323.97 T
0 10 Q
(This routine returns) 180 306.3 T
6 F
(true) 277.22 306.3 T
0 F
( if the passed character is a lower case alphabetic) 295.73 306.3 T
(character) 180 294.8 T
(.) 223.14 294.8 T
2 F
(Include:) 99 276.3 T
0 F
(localize.h) 180 276.3 T
81 259.96 531 264.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 259.96 531 264.97 R
7 X
0 0 0 1 0 0 0 K
V
50 263.96 609.01 263.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 251.96 T
2 F
(LocalIsNumChar\050\051) 99 251.96 T
3 10 Q
(Boolean) 99 237.29 T
4 F
(LocalIsNumChar\050) 153 237.29 T
4 9 Q
(word) 153 226.96 T
(ch\051;) 189 226.96 T
0 10 Q
(This routine returns) 180 209.29 T
6 F
(true) 277.22 209.29 T
0 F
( if the passed character is a number or part of the) 295.73 209.29 T
(number format.) 180 197.79 T
2 F
(Include:) 99 179.29 T
0 F
(localize.h) 180 179.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "295" 59
%%Page: "296" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(296) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalIsPrintable\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(LocalIsPrintable\050) 153 620.33 T
4 9 Q
(word) 153 609.99 T
(ch\051;) 189 609.99 T
0 10 Q
-0.13 (This routine returns) 180 592.33 P
6 F
-0.13 (true) 276.83 592.33 P
0 F
-0.13 ( if the passed character is printable \050i.e. takes up a) 295.34 592.33 P
(space when printing\051.) 180 580.83 T
2 F
(Include:) 99 562.33 T
0 F
(localize.h) 180 562.33 T
81 545.98 531 550.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 545.98 531 550.99 R
7 X
0 0 0 1 0 0 0 K
V
50 549.98 609.01 549.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 537.98 T
2 F
(LocalIsPunctuation\050\051) 99 537.98 T
3 10 Q
(Boolean) 99 523.32 T
4 F
(LocalIsPunctuation\050) 153 523.32 T
4 9 Q
(word) 153 512.98 T
(ch\051;) 189 512.98 T
0 10 Q
(This routine returns) 180 495.32 T
6 F
(true) 277.22 495.32 T
0 F
( if the passed character is a punctuation mark.) 295.73 495.32 T
2 F
(Include:) 99 476.82 T
0 F
(localize.h) 180 476.82 T
81 460.48 531 465.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 460.48 531 465.48 R
7 X
0 0 0 1 0 0 0 K
V
50 464.48 609.01 464.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 452.48 T
2 F
(LocalIsSpace\050\051) 99 452.48 T
3 10 Q
(Boolean) 99 437.81 T
4 F
(LocalIsSpace\050) 153 437.81 T
4 9 Q
(word) 153 427.48 T
(ch\051;) 189 427.48 T
0 10 Q
(This routine returns) 180 409.81 T
6 F
(true) 277.22 409.81 T
0 F
( if the passed character is whitespace.) 295.73 409.81 T
2 F
(Include:) 99 391.31 T
0 F
(localize.h) 180 391.31 T
81 374.97 531 379.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 374.97 531 379.98 R
7 X
0 0 0 1 0 0 0 K
V
50 378.97 609.01 378.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 366.97 T
2 F
(LocalIsSymbol\050\051) 99 366.97 T
3 10 Q
(Boolean) 99 352.3 T
4 F
(LocalIsSymbol\050) 153 352.3 T
4 9 Q
(word) 153 341.97 T
(ch\051;) 189 341.97 T
0 10 Q
(This routine returns) 180 324.3 T
6 F
(true) 277.22 324.3 T
0 F
( if the passed character is a symbol.) 295.73 324.3 T
2 F
(Include:) 99 305.8 T
0 F
(localize.h) 180 305.8 T
81 289.46 531 294.47 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 289.46 531 294.47 R
7 X
0 0 0 1 0 0 0 K
V
50 293.46 609.01 293.46 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 281.46 T
2 F
(LocalIsT) 99 281.46 T
(imeChar\050\051) 147.47 281.46 T
3 10 Q
(Boolean) 99 266.79 T
4 F
(LocalIsTimeChar\050) 153 266.79 T
4 9 Q
(word) 153 256.46 T
(ch\051;) 189 256.46 T
0 10 Q
(This routine returns) 180 238.79 T
6 F
(true) 277.22 238.79 T
0 F
( if the passed character is a number or part of the) 295.73 238.79 T
(user) 180 227.29 T
(\325) 200.73 227.29 T
(s time format.) 202.4 227.29 T
2 F
(Include:) 99 208.79 T
0 F
(localize.h) 180 208.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "296" 60
%%Page: "297" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(297) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalIsUpper\050\051) 99 634.99 T
3 10 Q
(Boolean) 99 620.33 T
4 F
(LocalIsUpper\050) 153 620.33 T
4 9 Q
(word) 153 609.99 T
(ch\051;) 189 609.99 T
0 10 Q
-0.27 (This routine returns) 180 592.33 P
6 F
-0.27 (true) 276.42 592.33 P
0 F
-0.27 ( if the passed character is an upper case alphabetic) 294.93 592.33 P
(character) 180 580.83 T
(.) 223.14 580.83 T
2 F
(Include:) 99 562.33 T
0 F
(localize.h) 180 562.33 T
81 545.98 531 550.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 545.98 531 550.99 R
7 X
0 0 0 1 0 0 0 K
V
50 549.98 609.01 549.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 537.98 T
2 F
(LocalLexicalV) 99 537.98 T
(alue\050\051) 178.38 537.98 T
3 10 Q
(word) 99 523.32 T
4 F
(LocalLexicalValue\050) 153 523.32 T
4 9 Q
(word) 153 512.98 T
(ch\051;) 189 512.98 T
0 10 Q
-0.45 (This routine returns the passed character) 180 495.32 P
-0.45 (\325) 371.26 495.32 P
-0.45 (s lexical value, useful when trying) 372.93 495.32 P
(to sort strings alphabetically) 180 483.82 T
(.) 311.69 483.82 T
2 F
(Include:) 99 465.32 T
0 F
(localize.h) 180 465.32 T
81 448.98 531 453.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 448.98 531 453.98 R
7 X
0 0 0 1 0 0 0 K
V
50 452.98 609.01 452.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 440.98 T
2 F
(LocalLexicalV) 99 440.98 T
(alueNoCase\050\051) 178.38 440.98 T
3 10 Q
(word) 99 426.31 T
4 F
(LocalLexicalValueNoCase\050) 153 426.31 T
4 9 Q
(word) 153 415.98 T
(ch\051;) 189 415.98 T
0 10 Q
(This routine returns the passed character) 180 398.31 T
(\325) 373.51 398.31 T
(s case-insensitive lexical value,) 375.18 398.31 T
(useful when trying to sort strings alphabetically) 180 386.81 T
(.) 401.69 386.81 T
2 F
(Include:) 99 368.31 T
0 F
(localize.h) 180 368.31 T
81 351.97 531 356.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 351.97 531 356.98 R
7 X
0 0 0 1 0 0 0 K
V
50 355.97 609.01 355.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 343.97 T
2 F
(LocalParseDateT) 99 343.97 T
(ime\050\051) 196.15 343.97 T
3 10 Q
(Boolean) 99 329.3 T
4 F
(LocalParseDateTime\050) 153 329.3 T
4 9 Q
(const char *) 153 318.97 T
(str,) 261 318.97 T
(DateTimeFormat) 153 308.97 T
(format,) 261 308.97 T
(TimerDateAndTime *) 153 298.97 T
(dateTime\051;) 261 298.97 T
0 10 Q
-0.09 (This routine takes a string describing a date or time \050e.g. \3229:37\323\051 and parses) 180 281.3 P
(it using the passed format.) 180 269.8 T
2 F
(Include:) 99 251.3 T
0 F
(localize.h) 180 251.3 T
81 234.96 531 239.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 234.96 531 239.97 R
7 X
0 0 0 1 0 0 0 K
V
50 238.96 609.01 238.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 226.96 T
2 F
(LocalSetCurrencyFormat\050\051) 99 226.96 T
3 10 Q
(void) 99 212.29 T
4 F
(LocalSetCurrencyFormat\050) 153 212.29 T
4 9 Q
(const LocalCurrencyFormat *) 153 201.96 T
(buf,) 298.8 201.96 T
(const char *) 153 191.96 T
(symbol\051;) 297 191.96 T
0 10 Q
(This routine changes the stored preferred currency format.) 180 174.29 T
2 F
(Include:) 99 155.79 T
0 F
(localize.h) 180 155.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "297" 61
%%Page: "298" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(298) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalSetDateT) 99 634.99 T
(imeFormat\050\051) 182.14 634.99 T
3 10 Q
(void) 99 620.33 T
4 F
(LocalSetDateTimeFormat\050) 153 620.33 T
4 9 Q
(const char *) 153 609.99 T
(str,) 261 609.99 T
(DateTimeFormat) 153 599.99 T
(format\051;) 261 599.99 T
0 10 Q
(This routine changes the stored preferred time and date format.) 180 582.33 T
2 F
(Include:) 99 563.83 T
0 F
(localize.h) 180 563.83 T
81 547.48 531 552.49 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 547.48 531 552.49 R
7 X
0 0 0 1 0 0 0 K
V
50 551.48 609.01 551.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 539.48 T
2 F
(LocalSetDefaultPrintSizes\050\051) 99 539.48 T
3 10 Q
(void) 99 524.82 T
4 F
(LocalSetDefaultPrintSizes\050) 153 524.82 T
4 9 Q
(const DefaultPrintSizes *) 153 514.48 T
(sizes\051;) 288 514.48 T
0 10 Q
(This routine changes the stored preferred default page and document sizes.) 180 496.82 T
2 F
(Include:) 99 478.32 T
0 F
(localize.h) 180 478.32 T
81 461.98 531 466.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 461.98 531 466.98 R
7 X
0 0 0 1 0 0 0 K
V
50 465.98 609.01 465.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 453.98 T
2 F
(LocalSetMeasurementT) 99 453.98 T
(ype\050\051) 232.81 453.98 T
3 10 Q
(void) 99 439.31 T
4 F
(LocalSetMeasurementType\050) 153 439.31 T
4 9 Q
(MeasurementTypes meas\051;) 153 428.98 T
0 10 Q
(This routine changes the stored preferred measurement type.) 180 411.31 T
2 F
(Include:) 99 392.81 T
0 F
(localize.h) 180 392.81 T
81 376.47 531 381.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 376.47 531 381.48 R
7 X
0 0 0 1 0 0 0 K
V
50 380.47 609.01 380.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 368.47 T
2 F
(LocalSetNumericFormat\050\051) 99 368.47 T
3 10 Q
(void) 99 353.8 T
4 F
(LocalSetNumericFormat\050) 153 353.8 T
4 9 Q
(const LocalNumericFormat *) 153 343.47 T
(buf\051;) 297 343.47 T
0 10 Q
(This routine changes the stored preferred number format.) 180 325.8 T
2 F
(Include:) 99 307.3 T
0 F
(localize.h) 180 307.3 T
81 290.96 531 295.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 290.96 531 295.97 R
7 X
0 0 0 1 0 0 0 K
V
50 294.96 609.01 294.96 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 282.96 T
2 F
(LocalSetQuotes\050\051) 99 282.96 T
3 10 Q
(void) 99 268.29 T
4 F
(LocalSetQuotes\050) 153 268.29 T
4 9 Q
(const LocalQuotes *) 153 257.96 T
(quotes\051;) 261 257.96 T
0 10 Q
(This routine changes the stored preferred quote marks.) 180 240.29 T
2 F
(Include:) 99 221.79 T
0 F
(localize.h) 180 221.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "298" 62
%%Page: "299" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
162 666.34 558 678.01 R
V
0 10 Q
0 X
(299) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
512 90 558 125 R
7 X
V
1 60 Q
0 X
(n) 512.17 85 T
315 104 510 126 R
7 X
V
2 24 Q
0 X
(Routines) 407.33 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
2 F
(LocalStringLength\050\051) 99 634.99 T
3 10 Q
(word) 99 621.33 T
4 F
(LocalStringLength\050) 153 621.33 T
4 9 Q
(const char *) 153 610.99 T
(str\051;) 261 610.99 T
0 10 Q
(This routine returns the length \050in characters\051 of a null-terminated string) 180 593.33 T
(\050not counting the null\051, even for multibyte character sets.) 180 581.83 T
2 F
(Include:) 99 563.33 T
0 F
(localize.h) 180 563.33 T
81 546.98 531 551.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 546.98 531 551.99 R
7 X
0 0 0 1 0 0 0 K
V
50 550.98 609.01 550.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 538.98 T
2 F
(LocalStringSize\050\051) 99 538.98 T
3 10 Q
(word) 99 525.32 T
4 F
(LocalStringSize\050) 153 525.32 T
4 9 Q
(const char *) 153 514.98 T
(str\051;) 261 514.98 T
0 10 Q
(This routine returns the size \050in bytes\051 of a null-terminated string.) 180 497.32 T
2 F
(Include:) 99 478.82 T
0 F
(localize.h) 180 478.82 T
81 462.48 531 467.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 462.48 531 467.48 R
7 X
0 0 0 1 0 0 0 K
V
50 466.48 609.01 466.48 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 454.48 T
2 F
(LocalUpcaseChar\050\051) 99 454.48 T
4 10 Q
(word) 99 439.81 T
(LocalUpcaseChar\050) 153 439.81 T
4 9 Q
(word) 153 429.48 T
(ch\051;) 189 429.48 T
0 10 Q
(This routine returns the upper case equivalent, if any) 180 411.81 T
(, of the passed) 426.87 411.81 T
(character) 180 400.31 T
(.) 223.14 400.31 T
2 F
(Include:) 99 381.81 T
0 F
(localize.h) 180 381.81 T
81 365.47 531 370.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 365.47 531 370.48 R
7 X
0 0 0 1 0 0 0 K
V
50 369.47 609.01 369.47 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
1 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 357.47 T
2 F
(LocalUpcaseString\050\051) 99 357.47 T
4 10 Q
(void) 99 342.8 T
(LocalUpcaseString\050) 153 342.8 T
4 9 Q
(char *) 153 332.47 T
(str,) 189 332.47 T
(word) 153 322.47 T
(size\051;) 189 322.47 T
0 10 Q
(This routine converts the passed string to its all upper case equivalent.) 180 304.8 T
2 F
(Include:) 99 286.3 T
0 F
(localize.h) 180 286.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "299" 63
%%Page: "300" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
54 666.34 450 678.01 R
V
0 10 Q
0 X
(300) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
1 60 Q
0 X
(n) 58.17 85 T
104 104 299 126 R
7 X
V
2 24 Q
0 X
(Routines) 104 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
306 123.5 486 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "300" 64
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 64
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Helvetica-Bold
%%+ Courier-Bold
%%+ Courier
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier-Oblique
%%EOF
