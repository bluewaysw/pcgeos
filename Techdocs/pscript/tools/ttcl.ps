%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 19 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Courier-BoldOblique FMFONTDEFINE
7 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
8 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "265" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using This Chapter) 429.65 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(265) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.1) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(Before using this chapter one should have a good understanding of how the) 180 609.36 T
(Swat commands function \322Swat Introduction,\323 Chapter) 180 596.36 T
(3, and of how the) 437.61 596.36 T
1 9 Q
(GEOS) 180 583.36 T
1 10 Q
( system works as a whole.) 206.17 583.36 T
(This chapter is designed to provide information about the T) 180 563.36 T
(ool Command) 454.11 563.36 T
(Language, abbreviated T) 180 550.36 T
(cl, \050the language in which Swat commands are) 294.78 550.36 T
-0.09 (written\051 so that new commands can be written and old commands modi\336ed.) 180 537.36 P
(This chapter contains the following main sections:) 180 524.36 T
2 F
(u) 180 504.37 T
1 F
(Using This Chapter) 198 504.37 T
(Discussion of the situations warranting the construction of a new) 198 492.37 T
(command in the T) 198 480.37 T
(ool Command Language.) 280.98 480.37 T
2 F
(u) 180 461.37 T
1 F
(Background and Description) 198 461.37 T
(Discussion of history of T) 198 449.37 T
(ool Command Language and general overview) 313.75 449.37 T
(of the language.) 198 437.37 T
2 F
(u) 180 418.37 T
1 F
(Syntax and Structure) 198 418.37 T
-0.09 (Description of the syntax and structure of the T) 198 406.37 P
-0.09 (ool Command Language.) 416.53 406.37 P
2 F
(u) 180 387.37 T
1 F
(Commands) 198 387.37 T
(List of all built-in commands for the language.) 198 375.37 T
2 F
(u) 180 356.37 T
1 F
(Coding) 198 356.37 T
-0.39 (Descriptions and examples of coding conventions, techniques, and tricks.) 198 344.37 P
2 F
(u) 180 325.37 T
1 F
(Installation) 198 325.37 T
-0.27 (Steps to take in order to be able to use a newly written command to help) 198 313.37 P
(debug an application.) 198 301.37 T
0 14 Q
(5.1) 142.54 250.03 T
0 24 Q
(Using This Chapter) 180 250.03 T
1 10 Q
-0.43 (This chapter provides the information needed to write a new Swat command) 180 224.37 P
-0.08 (in T) 180 211.37 P
-0.08 (cl. But, new commands need only be written in certain situations. Some) 197.82 211.37 P
(of the situations in which it is advantageous to write a new Swat command) 180 198.37 T
(in T) 180 185.37 T
(cl are:) 197.9 185.37 T
2 F
(u) 180 165.37 T
1 F
-0.38 (There is complex task that is being repeated often. For example, if one is) 198 165.37 P
(continually examining a certain piece of data in memory but has to go) 198 153.37 T
81 144 531 648 C
235.51 643.03 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.03 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "265" 1
%%Page: "266" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(266) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.2) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.46 (through many steps to do so, then it is helpful to write a single command) 198 641.33 P
(to perform all of the needed steps.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
-0.29 (When a new data-structure is created for an application. For example, if) 198 610.33 P
(one creates a look-up table for the application, then a T) 198 598.33 T
(cl command) 452.42 598.33 T
(should be written to examine that table in particular) 198 586.33 T
(.) 441.38 586.33 T
-0.11 (The existing Swat commands should take care of the bulk of debugging, but) 180 567.33 P
(sometimes an extra command can help.) 180 554.33 T
0 14 Q
(5.2) 142.54 502 T
0 24 Q
(Copyright Information) 180 502 T
1 10 Q
(The following sections of this chapter fall under the copyright below:) 180 476.33 T
(Background and Description, Syntax and Structure, and Commands.) 180 463.33 T
(Copyright \251 1987 Regents of the University of California) 180 443.33 T
(Permission to use, copy) 180 423.33 T
(, modify) 286.86 423.33 T
(, and distribute this software and its) 322.79 423.33 T
(documentation for any purpose and without fee is hereby granted, provided) 180 410.33 T
(that the above copyright notice appear in all copies. The University of) 180 397.33 T
-0.65 (California makes no representations about the suitability of this software for) 180 384.33 P
(any purpose. It is provided \322as is\323 without express or implied warranty) 180 371.33 T
(.) 505.77 371.33 T
0 14 Q
(5.3) 142.54 319 T
0 24 Q
(Background and Description) 180 319 T
1 10 Q
(The T) 180 293.33 T
(ool Command Language is abbreviated as T) 206.31 293.33 T
(cl and is pronounced) 407.96 293.33 T
(\322tickle\323. It was developed and written by Professor John Ousterhout at the) 180 280.33 T
-0.08 (University of California at Berkeley) 180 267.33 P
-0.08 (. T) 344.51 267.33 P
-0.08 (cl is a combination of two main parts:) 355.85 267.33 P
(a language and a library) 180 254.33 T
(.) 292.44 254.33 T
3 F
(Language) 180 234.33 T
1 F
(The T) 243 234.33 T
(cl language is a textual language intended primarily for) 269.42 234.33 T
-0.74 (issuing commands to interactive programs such as text editors,) 243 222.33 P
(illustrators, shells, and most importantly debuggers. It has a) 243 210.33 T
-0.19 (set syntax and is programmable, thus allowing users to create) 243 198.33 P
-0.55 (more powerful commands than the built-in command set listed) 243 186.33 P
(in \322Swat Reference,\323 Chapter) 243 174.33 T
(4.) 380.97 174.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "266" 2
%%Page: "267" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Syntax and Structure) 417.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(267) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(Library) 180 641.33 T
1 F
(T) 243 641.33 T
(cl also includes a library which can be imbedded in an) 248.86 641.33 T
(application, as it is in Swat. This library includes a parser for) 243 629.33 T
(the T) 243 617.33 T
(cl language, routines to implement the T) 266.64 617.33 T
(cl built-in) 453.82 617.33 T
(commands, and procedures allowing an application to extend) 243 605.33 T
(T) 243 593.33 T
(cl with additional commands.) 248.86 593.33 T
0 14 Q
(5.4) 142.54 542 T
0 24 Q
(Syntax and Structure) 180 542 T
1 10 Q
(T) 180 516.33 T
(cl supports only one type of data:) 185.86 516.33 T
4 F
(strings) 340.69 516.33 T
1 F
(. All commands, all arguments to) 372.34 516.33 T
(commands, all command results, and all variable values are strings. Where) 180 503.33 T
(commands require numeric arguments or return numeric results, the) 180 490.33 T
(arguments and results are passed as strings. Many commands expect their) 180 477.33 T
-0.54 (string arguments to have certain formats, but this interpretation is up to the) 180 464.33 P
(individual commands. For example, arguments often contain T) 180 451.33 T
(cl command) 469.78 451.33 T
-0.54 (strings, which may get executed as part of the commands. The easiest way to) 180 438.33 P
(understand the T) 180 425.33 T
(cl interpreter is to remember that everything is just an) 259.75 425.33 T
-0.12 (operation on a string. In many cases T) 180 412.33 P
-0.12 (cl constructs will look similar to more) 355.74 412.33 P
-0.28 (structured constructs from other languages. However) 180 399.33 P
-0.28 (, the T) 424.69 399.33 P
-0.28 (cl constructs are) 453.33 399.33 P
-0.22 (not structured at all; they are just strings of characters, and this gives them) 180 386.33 P
(a different behavior than the structures they may look like.) 180 373.33 T
-0.47 (Although the exact interpretation of a T) 180 353.33 P
-0.47 (cl string depends on who is doing the) 361.21 353.33 P
-0.07 (interpretation, there are three common forms that strings take:) 180 340.33 P
4 F
-0.07 (commands) 475.89 340.33 P
1 F
-0.07 (,) 525.51 340.33 P
4 F
(expressions) 180 327.33 T
1 F
(, and) 231.82 327.33 T
4 F
(lists) 257.57 327.33 T
1 F
(. This section will have the following main parts:) 276.63 327.33 T
2 F
(u) 180 307.33 T
1 F
(Basic Command Syntax) 198 307.33 T
(Description of the syntax common to all T) 198 295.33 T
(cl code: comments, argument) 389.99 295.33 T
(grouping, command grouping, variable substitution, backslash) 198 283.33 T
(substitution.) 198 271.33 T
2 F
(u) 180 252.33 T
1 F
(Expressions) 198 252.33 T
(Details on interpretation of expressions by T) 198 240.33 T
(cl.) 403.14 240.33 T
2 F
(u) 180 221.33 T
1 F
(Lists) 198 221.33 T
(Details on interpretation of lists by T) 198 209.33 T
(cl.) 368.89 209.33 T
2 F
(u) 180 190.33 T
1 F
(Command Results) 198 190.33 T
(What type of results a command can return.) 198 178.33 T
2 F
(u) 180 159.33 T
1 F
(Procedures) 198 159.33 T
(The structure and building of procedures in T) 198 147.33 T
(cl.) 407.93 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "267" 3
%%Page: "268" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(268) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(V) 198 641.33 T
(ariables) 204.3 641.33 T
(V) 198 629.33 T
(ariable declaration and description.) 204.3 629.33 T
0 14 Q
(5.4.1) 130.86 588 T
0 18 Q
(Basic Command Syntax) 180 588 T
1 10 Q
-0.16 (The T) 180 564.33 P
-0.16 (cl language has syntactic similarities to both Unix and Lisp. However) 206.26 564.33 P
-0.16 (,) 525.6 564.33 P
(the interpretation of commands is different in T) 180 551.33 T
(cl than in either of those) 400.31 551.33 T
-0.15 (other two systems. A T) 180 538.33 P
-0.15 (cl command string consists of one or more commands) 284.54 538.33 P
(separated by newline characters. Each command consists of a collection of) 180 525.33 T
(\336elds separated by white space \050spaces or tabs\051. The \336rst \336eld must be the) 180 512.33 T
-0.61 (name of a command, and the additional \336elds, if any) 180 499.33 P
-0.61 (, are arguments that will) 415.68 499.33 P
(be passed to that command. For example, the command:) 180 486.33 T
5 F
(var a 22) 216 470.33 T
1 F
-0.76 (has three \336elds: the \336rst,) 180 449.33 P
3 F
-0.78 (var) 295.11 449.33 P
1 F
-0.76 (, is the name of a T) 311.78 449.33 P
-0.76 (cl command, and the last two,) 394.78 449.33 P
3 F
(a) 180 436.33 T
1 F
( and) 186.11 436.33 T
3 F
(22) 209.08 436.33 T
1 F
(, will be passed as arguments to the) 220.56 436.33 T
3 F
(var) 388.75 436.33 T
1 F
( command. The command) 406.16 436.33 T
-0.32 (name may refer to a built-in T) 180 423.33 P
-0.32 (cl command, an application speci\336c command,) 317.14 423.33 P
(or a command procedure de\336ned with the built-in) 180 410.33 T
3 F
(proc) 411.86 410.33 T
1 F
( command.) 435.39 410.33 T
(Arguments are passed literally as text strings. Individual commands may) 180 397.33 T
(interpret those strings in any fashion they wish. The) 180 384.33 T
3 F
(var) 426.32 384.33 T
1 F
(command, for) 446.6 384.33 T
-0.72 (example, will treat its \336rst argument as the name of a variable and its second) 180 371.33 P
(argument as a string value to assign to that variable. For other commands,) 180 358.33 T
-0.67 (arguments may be interpreted as integers, lists, \336le names, or T) 180 345.33 P
-0.67 (cl commands.) 469.25 345.33 P
0 14 Q
(5.4.1.1) 119.19 311.67 T
(Comments) 180 311.67 T
1 10 Q
(If the \336rst non-blank character in a command is) 180 289.33 T
3 F
(#) 404.46 289.33 T
1 F
( \050a number sign\051, then) 410.2 289.33 T
(everything from the # up through the next newline character is treated as) 180 276.33 T
(comment and discarded by the parser) 180 263.33 T
(.) 352.97 263.33 T
0 14 Q
(5.4.1.2) 119.19 229.67 T
(Argument Grouping) 180 229.67 T
1 10 Q
-0.11 (Normally each argument \336eld ends at the next white space \050tabs or spaces\051,) 180 207.33 P
(but curly braces \050\322{\323 and \322}\323\051 may be used to group arguments in different) 180 194.33 T
-0.33 (ways. If an argument \336eld begins with a left brace, then the argument is not) 180 181.33 P
-0.31 (terminated by white space; it ends at the matching right brace. T) 180 168.33 P
-0.31 (cl will strip) 476.92 168.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "268" 4
%%Page: "269" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Syntax and Structure) 417.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(269) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(off the outermost layer of braces before passing the argument to the) 180 641.33 T
(command. For example, in the command:) 180 628.33 T
5 F
(var a {b c}) 216 612.33 T
1 F
-0.69 (the) 180 591.33 P
3 F
-0.71 (var) 197.09 591.33 P
1 F
-0.69 ( command will receive two arguments:) 214.5 591.33 P
3 F
-0.71 (a) 390.76 591.33 P
1 F
-0.69 ( and) 396.87 591.33 P
3 F
-0.71 ( b) 416.37 591.33 P
-0.71 (c) 430.04 591.33 P
1 F
-0.69 (. The matching right) 435.6 591.33 P
-0.15 (brace need not be on the same line as the left brace; in this case the newline) 180 578.33 P
-0.12 (will be included in the argument \336eld along with any other characters up to) 180 565.33 P
-0.11 (the matching right brace. In many cases an argument \336eld to one command) 180 552.33 P
(consists of a T) 180 539.33 T
(cl command string that will be executed later; braces allow) 244.57 539.33 T
-0.25 (complex command structures to be built up without confusion. For example,) 180 526.33 P
(the) 180 513.33 T
3 F
(eval) 197.78 513.33 T
1 F
( command takes one argument, which is a command string;) 219.26 513.33 T
3 F
(eval) 496.89 513.33 T
1 F
(invokes the T) 180 500.33 T
(cl interpreter to execute the command string. The command:) 241.61 500.33 T
5 F
(eval {) 216 484.33 T
(var a 22) 258 470.33 T
(var b 33) 258 456.33 T
(}) 216 442.33 T
1 F
(will assign the value 22 to) 180 421.33 T
3 F
(a) 303.56 421.33 T
1 F
( and 33 to) 309.67 421.33 T
3 F
(b) 358.21 421.33 T
1 F
(.) 364.69 421.33 T
(T) 180 401.33 T
(cl braces act like quote characters in most other languages, in that they) 185.86 401.33 T
(prevent any special interpretation of the characters between the left brace) 180 388.33 T
(and the matching right brace.) 180 375.33 T
(When an argument is in braces, then command, variable, and backslash) 180 355.33 T
-0.58 (substitutions do not occur in the normal fashion; all T) 180 342.33 P
-0.58 (cl does is to strip off the) 422.49 342.33 P
-0.22 (outer layer of braces and pass the contents to the command. Braces are only) 180 329.33 P
-0.36 (signi\336cant in a command \336eld if the \336rst character of the \336eld is a left brace.) 180 316.33 P
(Otherwise neither left nor right braces in the \336eld will be treated specially) 180 303.33 T
(\050except as part of variable substitution\051.) 180 290.33 T
0 14 Q
(5.4.1.3) 119.19 256.67 T
(Command Grouping) 180 256.67 T
1 10 Q
-0.37 (Normally) 180 234.33 P
-0.37 (, each command occupies one line \050the command is terminated by a) 222.6 234.33 P
(newline character\051. Thus, the string:) 180 221.33 T
5 F
(var a 22) 216 205.33 T
(var b 33) 216 191.33 T
1 F
(will be interpreted as two separate commands. However) 180 170.33 T
(, brackets may be) 438.55 170.33 T
(used to group commands in ways other than one-command-per) 180 157.33 T
(-line. If the) 469.64 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "269" 5
%%Page: "270" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(270) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\336rst character of a command is an open bracket, then the command is not) 180 641.33 T
(terminated by a newline character; instead, it consists of all the characters) 180 628.33 T
(up to the matching close bracket. Newline characters inside a bracketed) 180 615.33 T
(command are treated as white space \050they will act as argument separators) 180 602.33 T
(for arguments that are not enclosed in braces\051. For example, the string:) 180 589.33 T
5 F
([var a) 216 573.33 T
(22] [var b 33]) 216 559.33 T
1 F
(will have the same effect as the previous example.) 180 538.33 T
0 14 Q
(5.4.1.4) 119.19 504.67 T
(Command Substitution) 180 504.67 T
1 10 Q
(If an open bracket occurs in any of the \336elds of a command, then command) 180 482.33 T
-0.61 (substitution occurs. All of the text up to the matching close bracket is treated) 180 469.33 P
-0.12 (as a T) 180 456.33 P
-0.12 (cl command and executed immediately) 206.93 456.33 P
-0.12 (. The result of that command is) 384.42 456.33 P
(substituted for the bracketed text. For example, consider the command:) 180 443.33 T
5 F
(var a [var b]) 216 427.33 T
1 F
(When the) 180 406.33 T
3 F
(var) 227.59 406.33 T
1 F
( command has only a single argument, it is the name of a) 245 406.33 T
(variable and) 180 393.33 T
3 F
(var) 240.76 393.33 T
1 F
( returns the contents of that variable. In this case, if) 258.17 393.33 T
(variable) 180 380.33 T
3 F
(b) 220.57 380.33 T
1 F
( has the value) 227.05 380.33 T
4 F
(test) 294.66 380.33 T
1 F
(, then the command above is equivalent to the) 310.58 380.33 T
(command:) 180 367.33 T
5 F
(var a test) 216 351.33 T
1 F
(Brackets can be used in more complex ways. for example, if the variable) 180 330.33 T
3 F
( b) 512.45 330.33 T
1 F
(has the value) 180 317.33 T
4 F
(tmp) 244.83 317.33 T
1 F
( and the variable) 262.98 317.33 T
3 F
(c) 344.3 317.33 T
1 F
( has the value) 349.86 317.33 T
4 F
(val) 417.47 317.33 T
1 F
(, then the command:) 431.73 317.33 T
5 F
(var a test[var b].[var c]) 216 301.33 T
1 F
(is equivalent to the command:) 180 280.33 T
5 F
(var a testtmp.val) 216 264.33 T
1 F
-0.1 (If a \336eld is enclosed in braces then the brackets and the characters between) 180 243.33 P
-0.38 (them are not interpreted specially; they are passed through to the argument) 180 230.33 P
(verbatim.) 180 217.33 T
0 14 Q
(5.4.1.5) 119.19 183.67 T
(V) 180 183.67 T
(ariable Substitution) 188.57 183.67 T
1 10 Q
-0.14 (The dollar sign \050$\051 may be used as a special shorthand form for substituting) 180 161.33 P
(variables. If $ appears in an argument that is not enclosed in braces then) 180 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "270" 6
%%Page: "271" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Syntax and Structure) 417.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(271) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(variable substitution will occur) 180 641.33 T
(. The characters after the $, up to the \336rst) 323.17 641.33 T
-0.24 (character that is not a number) 180 628.33 P
-0.24 (, letter) 319.76 628.33 P
-0.24 (, or underscore, are taken as a variable) 349.71 628.33 P
-0.28 (name and the string value of that variable is substituted for the name. Or) 180 615.33 P
-0.28 (, if) 516.75 615.33 P
(the dollar sign is followed by an open curly brace, then the variable name) 180 602.33 T
-0.31 (consists of all the characters up to the next close curly brace. For example, if) 180 589.33 P
(variable) 180 576.33 T
3 F
(out\336le) 220.57 576.33 T
1 F
( has the value) 253.9 576.33 T
4 F
(test) 321.51 576.33 T
1 F
(, then the command:) 337.43 576.33 T
5 F
(var a $outfile.c) 216 560.33 T
1 F
(is equivalent to the command:) 180 539.33 T
5 F
(var a test.c) 216 523.33 T
1 F
( and the command:) 180 502.33 T
5 F
(var a abc${outfile}tmp) 216 486.33 T
1 F
(is equivalent to the command:) 180 465.33 T
5 F
(var a abctesttmp) 216 449.33 T
1 F
(V) 180 428.33 T
(ariable substitution does not occur in arguments that are enclosed in) 186.3 428.33 T
(braces: the dollar sign and variable name are passed through to the) 180 415.33 T
(argument verbatim.) 180 402.33 T
(The dollar sign abbreviation is simply a shorthand form.) 180 382.33 T
3 F
($a) 443.75 382.33 T
1 F
( is completely) 455.6 382.33 T
(equivalent to) 180 369.33 T
3 F
( [var a]) 240.57 369.33 T
1 F
(; it is provided as a convenience to reduce typing.) 277.61 369.33 T
0 14 Q
(5.4.1.6) 119.19 335.67 T
(Backslash Substitution) 180 335.67 T
1 10 Q
(Backslashes may be used to insert non-printing characters into command) 180 313.33 T
-0.25 (\336elds and also to insert braces, brackets, and dollar signs into \336elds without) 180 300.33 P
(them being interpreted specially as previously described. The backslash) 180 287.33 T
(sequences understood by the T) 180 274.33 T
(cl interpreter are listed in T) 321.05 274.33 T
(able) 449.51 274.33 T
(5-) 471.56 274.33 T
(1. In each) 480.45 274.33 T
(case, the backslash sequence is replaced by the given character) 180 261.33 T
(.) 470.77 261.33 T
(For example, in the command:) 180 241.33 T
5 F
(var a \134{x\134[\134 yz\134141) 216 225.33 T
1 F
(the second argument to) 180 204.33 T
3 F
(var) 291.3 204.33 T
1 F
( is) 308.71 204.33 T
3 F
({x[) 322.05 204.33 T
(yza) 344.55 204.33 T
1 F
( \050note the <space> as part of the) 362.14 204.33 T
(argument\051.) 180 191.33 T
(If a backslash is followed by something other than one of the options in) 180 171.33 T
(T) 180 158.33 T
(able) 186.05 158.33 T
(5-) 208.1 158.33 T
(1, then the backslash is transmitted to the argument \336eld without) 216.99 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "271" 7
%%Page: "272" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(272) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.8 (any special processing, and the T) 180 641.33 P
-0.8 (cl scanner continues normal processing with) 328.19 641.33 P
(the next character) 180 628.33 T
(. For example, in the command:) 264.07 628.33 T
5 F
(var \134*a \134\134\134{test) 216 612.33 T
1 F
(the \336rst argument will be) 180 591.33 T
3 F
(\134*a) 301.13 591.33 T
1 F
( and the second) 318.3 591.33 T
3 F
(\134{test) 392.75 591.33 T
1 F
(.) 421.96 591.33 T
(If an argument is enclosed in braces, then backslash sequences inside the) 180 289.33 T
(argument are parsed but no substitution occurs. In particular) 180 276.33 T
(, backslashed) 464.27 276.33 T
-0.06 (braces are not counted in locating the matching right brace that terminates) 180 263.33 P
(the argument. for example, in the command:) 180 250.33 T
5 F
(var a {\134{abc}) 216 234.33 T
1 F
(the second argument to var will be) 180 213.33 T
3 F
(\134{abc) 342.8 213.33 T
1 F
(.) 370.9 213.33 T
(The backslash mechanism is not suf\336cient to generate any argument) 180 193.33 T
(structure; it only covers the most common cases. T) 180 180.33 T
(o produce particularly) 412.05 180.33 T
(complicated arguments it will probably be easiest to use the) 180 167.33 T
3 F
(format) 459.5 167.33 T
1 F
(command along with command substitution.) 180 154.33 T
81 144 531 648 C
180 306 531 588 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 306 531 588 R
7 X
0 0 0 1 0 0 0 K
V
181 300 531 554.5 R
V
0 10 Q
0 X
(T) 181 547.83 T
(able) 186.37 547.83 T
(5-) 209.16 547.83 T
(1) 218.05 547.83 T
4 F
(Backslash Sequences) 226.39 547.83 T
181 526.52 531 531.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181 526.52 531 531.5 R
7 X
0 0 0 1 0 0 0 K
V
153 529.48 756 529.48 2 L
V
0.5 H
2 Z
0 X
N
180 306 531 588 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Sequence) 181 534.83 T
(Replaced Value) 289 534.83 T
1 F
(\134b) 181 517.86 T
(Backspace \050octal 10\051) 289 517.86 T
(\134e) 181 503.86 T
(Escape \050octal 33\051) 289 503.86 T
(\134n) 181 489.86 T
(Newline \050octal 15\051) 289 489.86 T
(\134t) 181 475.86 T
(Tab \050octal 11\051) 289 475.86 T
(\134{) 181 461.86 T
(Left brace \050\322{\322\051) 289 461.86 T
(\134}) 181 447.86 T
(Right brace \050\322}\323\051) 289 447.86 T
(\134[) 181 433.86 T
(Open bracket \050\322[\322\051) 289 433.86 T
(\134]) 181 419.86 T
(Close bracket \050\322]\323\051) 289 419.86 T
(\134<space>) 181 405.86 T
(Space \050note: does not terminate the argument\051) 289 405.86 T
(\134\134) 181 391.86 T
(Backslash \050\322\134\323\051) 289 391.86 T
(\134C) 181 377.86 T
4 F
(x) 194.28 377.86 T
1 F
(Control-) 289 377.86 T
4 F
(x) 327.14 377.86 T
1 F
( for any) 332.14 377.86 T
1 9 Q
(ASCII) 370.29 377.86 T
4 10 Q
(x) 399.06 377.86 T
1 F
( except M \050see below\051) 404.06 377.86 T
(\134M) 181 363.86 T
4 F
(x) 196.5 363.86 T
1 F
(Meta-) 289 363.86 T
4 F
(x) 316.22 363.86 T
1 F
( for any) 321.22 363.86 T
1 9 Q
(ASCII) 359.37 363.86 T
4 10 Q
(x) 388.14 363.86 T
1 F
(\134CM) 181 349.86 T
4 F
(x) 203.72 349.86 T
1 F
(Control-meta-) 289 349.86 T
4 F
(x) 353.81 349.86 T
1 F
( for any) 358.81 349.86 T
1 9 Q
(ASCII) 396.96 349.86 T
4 10 Q
(x) 425.73 349.86 T
1 F
(\134) 181 335.86 T
4 F
(ddd) 187.06 335.86 T
1 F
(The digits) 289 335.86 T
4 F
(ddd) 338.27 335.86 T
1 F
( \050one, two, or three of them\051 give the) 356.6 335.86 T
(octal value of the character) 181 323.86 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "272" 8
%%Page: "273" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Syntax and Structure) 417.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(273) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.2) 130.86 636 T
0 18 Q
(Expressions) 180 636 T
1 10 Q
(The second major interpretation applied to strings in T) 180 612.33 T
(cl is as) 433.47 612.33 T
4 F
(expressions) 467.37 612.33 T
1 F
(.) 519.19 612.33 T
-0.11 (Several commands, such as) 180 599.33 P
3 F
-0.12 (expr) 309.01 599.33 P
1 F
-0.11 (,) 331.98 599.33 P
3 F
-0.12 (for) 337.43 599.33 P
1 F
-0.11 (, and) 351.88 599.33 P
3 F
-0.12 (if) 377.4 599.33 P
1 F
-0.11 (, treat some of their arguments) 384.99 599.33 P
(as expressions and call the T) 180 586.33 T
(cl expression processor \050T) 312.36 586.33 T
(cl_Expr\051 to evaluate) 429.87 586.33 T
-0.14 (them. A T) 180 573.33 P
-0.14 (cl expression has C-like syntax and evaluates to an integer result.) 225.04 573.33 P
(Expressions may contain integer values, variable names in $ notation \050the) 180 560.33 T
-0.77 (variables\325 values must be integer strings\051, commands \050embedded in brackets\051) 180 547.33 P
-0.47 (that produce integer string results, parentheses for grouping, and operators.) 180 534.33 P
(Numeric values, whether they are passed directly or through variable or) 180 521.33 T
-0.3 (command substitution, may be speci\336ed either in decimal \050the normal case\051,) 180 508.33 P
-0.29 (in octal \050if the \336rst character of the value of the \336rst character is 0 \050zero\051\051, or) 180 495.33 P
(in hexadecimal \050if the \336rst two characters of the value are 0x\051. The valid) 180 482.33 T
(operators are listed in T) 180 469.33 T
(able) 290.69 469.33 T
(5-) 312.74 469.33 T
(2 grouped in decreasing order of precedence.) 321.63 469.33 T
-0.62 (See a C manual for more details on the results produced by each operator) 180 211.33 P
-0.62 (. All) 510.37 211.33 P
-0.07 (of the binary operators group left to right within the same precedence level.) 180 198.33 P
(for example, the expression:) 180 185.33 T
5 F
(\0504*2\051<7) 216 169.33 T
1 F
(evaluates to zero. Evaluating the expression string:) 180 148.33 T
81 144 531 648 C
180 228 531 466 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 228 531 466 R
7 X
0 0 0 1 0 0 0 K
V
181 242 531 450.5 R
V
0 10 Q
0 X
(T) 181 443.83 T
(able) 186.37 443.83 T
(5-) 209.16 443.83 T
(2) 218.05 443.83 T
4 F
(V) 226.39 443.83 T
(alid Operators) 232.14 443.83 T
181 422.52 531 427.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181 422.52 531 427.5 R
7 X
0 0 0 1 0 0 0 K
V
153 425.48 756 425.48 2 L
V
0.5 H
2 Z
0 X
N
180 228 531 466 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Operators) 181 430.83 T
(Description) 289 430.83 T
1 F
(-) 181 413.86 T
(~) 192.67 413.86 T
( !) 204.29 413.86 T
(Unary minus, bit-wise) 289 413.86 T
1 9 Q
(NOT) 395.13 413.86 T
1 10 Q
(, logical) 415.47 413.86 T
1 9 Q
(NOT) 453.63 413.86 T
1 10 Q
(*) 181 399.86 T
(/) 194.34 399.86 T
( %) 202.68 399.86 T
(Multiply, divide, remainder) 289 399.86 T
(+) 181 385.86 T
(-) 195.4 385.86 T
(Add and subtract) 289 385.86 T
(<<) 181 371.86 T
( >>) 198.68 371.86 T
(Left and right shift) 289 371.86 T
(< >) 181 357.86 T
(<=) 204.24 357.86 T
( >=) 221.92 357.86 T
(Boolean less, greater, less than or equal, and) 289 357.86 T
(greater than or equal. Each operator produces 1 if) 181 345.86 T
(the) 505 345.86 T
(condition is true, 0 otherwise) 181 333.86 T
(==) 181 319.86 T
(!=) 201.46 319.86 T
(Boolean equal and not equal) 289 319.86 T
(&) 181 305.86 T
(Bit-wise) 289 305.86 T
1 9 Q
(AND) 329.93 305.86 T
1 10 Q
(^) 181 291.86 T
(Bit-wise exclusive) 289 291.86 T
1 9 Q
(OR) 374.93 291.86 T
1 10 Q
(|) 181 277.86 T
(Bit-wise) 289 277.86 T
1 9 Q
(OR) 329.93 277.86 T
1 10 Q
(&&) 181 263.86 T
(Logical) 289 263.86 T
1 9 Q
(AND) 325.12 263.86 T
1 10 Q
(||) 181 249.86 T
(Logical) 289 249.86 T
1 9 Q
(OR) 325.12 249.86 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "273" 9
%%Page: "274" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(274) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 10 Q
0 X
(\050$a+3\051<[var b]) 216 641.33 T
1 F
-0.22 (will cause the values of the variables) 180 620.33 P
3 F
-0.23 ( a) 348.87 620.33 P
1 F
-0.22 ( and) 357.62 620.33 P
3 F
-0.23 (b) 380.14 620.33 P
1 F
-0.22 ( to be examined; the result will) 386.62 620.33 P
(be 1 if) 180 607.33 T
3 F
( b) 208.16 607.33 T
1 F
( is greater than) 217.51 607.33 T
3 F
(a) 291.78 607.33 T
1 F
( by at least 3; otherwise the result will be 0.) 297.89 607.33 T
(In general it is safest to enclose an expression in braces when entering it in) 180 587.33 T
(a command; otherwise, if the expression contains any white space then the) 180 574.33 T
(T) 180 561.33 T
(cl interpreter will split it among several arguments. For example, the) 185.86 561.33 T
(command:) 180 548.33 T
5 F
(expr $a + $b) 216 532.33 T
1 F
-0.18 (results in three arguments being passed to) 180 511.33 P
3 F
-0.19 (expr) 379.13 511.33 P
1 F
-0.18 (:) 402.84 511.33 P
3 F
-0.19 ($a) 408.22 511.33 P
1 F
-0.18 (,) 420.07 511.33 P
3 F
-0.19 (+) 425.45 511.33 P
1 F
-0.18 (, and) 431.51 511.33 P
3 F
-0.19 ($b) 456.9 511.33 P
1 F
-0.18 (. In addition,) 469.12 511.33 P
(if the expression is not in braces then the T) 180 498.33 T
(cl interpreter will perform) 379.21 498.33 T
(variable and command substitution immediately \050it will happen in the) 180 485.33 T
(command parser rather than in the expression parser\051. In many cases the) 180 472.33 T
(expression is being passed to a command that will evaluate the expression) 180 459.33 T
(later \050or even many times if, for example, the expression is to be used to) 180 446.33 T
-0.54 (decide when to exit a loop\051. usually the desired goal is to re-do the variable or) 180 433.33 P
(command substitutions each time the expression is evaluated, rather than) 180 420.33 T
-0.45 (once and for all at the beginning. For an example of a mistake, the command:) 180 407.33 P
5 F
(for {var i 1} $i<=10 {var i [expr $i+1]} {body\311}) 216 391.33 T
1 F
(is probably intended to iterate over all values of) 180 370.33 T
3 F
(i) 403.56 370.33 T
1 F
( from 1 to 10. After each) 407.26 370.33 T
(iteration of the body of the loop, for will pass its second argument to the) 180 357.33 T
(expression evaluator to see whether or not to continue processing.) 180 344.33 T
(Unfortunately) 180 331.33 T
(, in this case the value of) 245 331.33 T
3 F
(i) 362.43 331.33 T
1 F
( in the second argument will be) 366.13 331.33 T
-0.67 (substituted once and for all when the for command is parsed. If) 180 318.33 P
3 F
-0.69 (i) 466.99 318.33 P
1 F
-0.67 ( was 0 before) 470.7 318.33 P
(the for command was invoked then) 180 305.33 T
3 F
(for) 344.46 305.33 T
1 F
(\325) 360.2 305.33 T
(s second argument will be) 361.87 305.33 T
3 F
(0<=10) 484.48 305.33 T
1 F
(which will always evaluate to 1, even though) 180 292.33 T
3 F
( i) 387.27 292.33 T
1 F
(\325) 393.84 292.33 T
(s value eventually becomes) 395.51 292.33 T
-0.03 (greater than 10. In the above case the loop will never terminate. By placing) 180 279.33 P
(the expression in braces, the substitution of) 180 266.33 T
3 F
(i) 384.65 266.33 T
1 F
(\325) 388.35 266.33 T
(s value will be delayed; it will) 390.02 266.33 T
(be re-done each time the expression is evaluated, which is probably the) 180 253.33 T
(desired result:) 180 240.33 T
5 F
(for {var i 1} {$i<=10} {var i [expr $i+1]} {body\311}) 216 224.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "274" 10
%%Page: "275" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Syntax and Structure) 417.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(275) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.3) 130.86 636 T
0 18 Q
(Lists) 180 636 T
1 10 Q
-0.17 (The third major way that strings are interpreted in T) 180 612.33 P
-0.17 (cl is a) 424.37 612.33 P
4 F
-0.17 (list) 453.13 612.33 P
1 F
-0.17 (. A list is just) 467.75 612.33 P
(a string with a list-like structure consisting of \336elds separated by white) 180 599.33 T
(space. For example, the string:) 180 586.33 T
5 F
(Al Sue Anne John) 216 570.33 T
1 F
(is a list with four elements or \336elds. Lists have the same basic structure as) 180 549.33 T
-0.78 (command strings, except that a newline character in a list is treated as a \336eld) 180 536.33 P
-0.77 (separator just like a space or tab. Conventions for braces and backslashes are) 180 523.33 P
(the same for lists as for commands. For example, the string:) 180 510.33 T
5 F
(a b\134 c {d e {f g h}}) 216 494.33 T
1 F
-0.11 (is a list with three elements:) 180 473.33 P
3 F
-0.11 (a) 314.02 473.33 P
1 F
-0.11 (,) 320.14 473.33 P
3 F
-0.11 ( b c) 322.92 473.33 P
1 F
-0.11 (, and) 340.48 473.33 P
3 F
-0.11 (d e {f g h}) 366.02 473.33 P
1 F
-0.11 (. Note the space between) 414.1 473.33 P
(the) 180 460.33 T
3 F
(b) 197.78 460.33 T
1 F
( and) 204.26 460.33 T
3 F
( c) 224.45 460.33 T
1 F
(. Whenever an element is extracted from a list, the same rules) 232.88 460.33 T
(about backslashes and braces are applied as for commands. Thus in the) 180 447.33 T
-0.68 (above example when the third element is extracted from the list, the result is:) 180 434.33 P
5 F
(d e {f g h}) 216 418.33 T
1 F
(\050when the \336eld was extracted, all that happened was to strip off the) 180 397.33 T
-0.48 (outermost layer of braces\051. Command substitution is never made on a list \050at) 180 384.33 P
(least, not by the list-processing commands; the list can always be passed to) 180 371.33 T
(the T) 180 358.33 T
(cl interpreter for evaluation\051.) 203.64 358.33 T
(The T) 180 338.33 T
(cl commands) 206.42 338.33 T
3 F
(concat) 268.83 338.33 T
1 F
(,) 303.28 338.33 T
3 F
(foreach) 308.84 338.33 T
1 F
(,) 348.29 338.33 T
3 F
(index) 353.85 338.33 T
1 F
(,) 382.92 338.33 T
3 F
(length) 388.48 338.33 T
1 F
(,) 421.81 338.33 T
3 F
(list) 427.37 338.33 T
1 F
(, and) 443.85 338.33 T
3 F
(range) 469.6 338.33 T
1 F
( allow) 499.6 338.33 T
(you to build lists, extract elements from them, search them, and perform) 180 325.33 T
(other list-related functions.) 180 312.33 T
0 14 Q
(5.4.4) 130.86 270 T
0 18 Q
(Command Results) 180 270 T
1 10 Q
-0.28 (Each command produces two results: a) 180 246.33 P
4 F
-0.28 (code) 360.92 246.33 P
1 F
-0.28 ( and a) 380.91 246.33 P
4 F
-0.28 (string) 411.38 246.33 P
1 F
-0.28 (. The code indicates) 438.59 246.33 P
(whether the command completed successfully or not, and the string gives) 180 233.33 T
(additional information. The valid codes are de\336ned as follows:) 180 220.33 T
1 9 Q
(TCL) 180 200.33 T
3 F
(_OK) 198.5 200.33 T
1 10 Q
(This is the normal return code, and indicates that the) 243 200.33 T
(command completed successfully) 243 188.33 T
(. The string gives the) 393.92 188.33 T
(commands\325) 243 176.33 T
(s return value.) 293.93 176.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "275" 11
%%Page: "276" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(276) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 9 Q
0 X
(TCL) 180 641.33 T
3 F
(_ERROR) 198.5 641.33 T
1 10 Q
(Indicates that an error occurred; the string gives a message) 243 629.33 T
(describing the error) 243 617.33 T
(.) 333.73 617.33 T
1 9 Q
(TCL) 180 598.33 T
3 F
(_RETURN) 198.5 598.33 T
1 10 Q
-0.54 (Indicates that the return command has been invoked, and that) 243 586.33 P
(the current procedure should return immediately) 243 574.33 T
(. The string) 469.65 574.33 T
(gives the return value that procedure should return.) 243 562.33 T
1 9 Q
(TCL) 180 543.33 T
3 F
(_BREAK) 198.5 543.33 T
1 10 Q
(Indicates that the break command has been invoked, so the) 243 531.33 T
(innermost loop should abort immediately) 243 519.33 T
(. The string should) 432.1 519.33 T
(always be empty) 243 507.33 T
(.) 318.95 507.33 T
1 9 Q
(TCL) 180 488.33 T
3 F
(_CONTINUE) 198.5 488.33 T
1 10 Q
-0.3 (Indicates that the continue command has been invoked, so the) 243 476.33 P
(innermost loop should go on to the next iteration. The string) 243 464.33 T
(should always be empty) 243 452.33 T
(.) 352.47 452.33 T
(T) 180 433.33 T
(cl programmers do not normally need to think about return codes, since) 185.86 433.33 T
1 9 Q
(TCL) 180 420.33 T
3 F
(_OK) 198.5 420.33 T
1 10 Q
( is almost always returned. If anything else is returned by a) 217.84 420.33 T
-0.17 (command, then the T) 180 407.33 P
-0.17 (cl interpreter immediately stops processing commands) 277.21 407.33 P
(and returns to its caller) 180 394.33 T
(. If there are several nested invocations of the T) 288.71 394.33 T
(cl) 508.47 394.33 T
(interpreter in progress, then each nested command will usually return the) 180 381.33 T
(error to its caller) 180 368.33 T
(, until eventually the error is reported to the top-level) 257.22 368.33 T
-0.24 (application code. The application will then display the error message for the) 180 355.33 P
(user) 180 342.33 T
(.) 199.44 342.33 T
(In a few cases, some commands will handle certain \322error\323 conditions) 180 322.33 T
(themselves and not return them upwards. For example, the) 180 309.33 T
3 F
(for) 458.36 309.33 T
1 F
( command) 473.55 309.33 T
(checks for the) 180 296.33 T
1 9 Q
(TCL) 246.66 296.33 T
3 F
(_BREAK) 265.16 296.33 T
1 10 Q
( code; if it occurs, then) 305 296.33 T
3 F
(for) 411.11 296.33 T
1 F
( stops executing the) 426.3 296.33 T
(body of the loop and returns) 180 283.33 T
1 9 Q
(TCL) 312.6 283.33 T
3 F
(_OK) 331.1 283.33 T
1 10 Q
( to its caller) 350.44 283.33 T
(. The) 404.34 283.33 T
3 F
(for) 430.46 283.33 T
1 F
( command also) 445.65 283.33 T
(handles) 180 270.33 T
1 9 Q
(TCL) 219.08 270.33 T
3 F
(_CONTINUE) 237.58 270.33 T
1 10 Q
( codes and the procedure interpreter handles) 296.4 270.33 T
1 9 Q
(TCL) 180 257.33 T
3 F
(_RETURN) 198.5 257.33 T
1 10 Q
( codes. The) 246 257.33 T
3 F
(catch) 299.71 257.33 T
1 F
( command allows T) 328.05 257.33 T
(cl programs to catch) 416.15 257.33 T
(errors and handle them without aborting command interpretation any) 180 244.33 T
(further) 180 231.33 T
(.) 212.58 231.33 T
0 14 Q
(5.4.5) 130.86 189 T
0 18 Q
(Procedures) 180 189 T
1 10 Q
-0.54 (T) 180 165.33 P
-0.54 (cl allows one to extend the command interface by de\336ning procedures. A T) 185.86 165.33 P
-0.54 (cl) 521.17 165.33 P
-0.61 (procedure can be invoked just like any other T) 180 152.33 P
-0.61 (cl command \050it has a name and) 388.39 152.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "276" 12
%%Page: "277" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(277) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.4 (it receives one or more arguments\051. The only difference is that its body is not) 180 641.33 P
-0.65 (a piece of C code linked into the program; it is a string containing one or more) 180 628.33 P
-0.68 (other T) 180 615.33 P
-0.68 (cl commands. See the) 212.4 615.33 P
3 F
-0.7 (proc) 311.75 615.33 P
1 F
-0.68 ( command for information on how to de\336ne) 335.28 615.33 P
(procedures and what happens when they are invoked.) 180 602.33 T
0 14 Q
(5.4.6) 130.86 560 T
0 18 Q
(V) 180 560 T
(ariables) 191.02 560 T
1 10 Q
(T) 180 536.33 T
(cl allows the de\336nition of variables and the use of their values either) 185.86 536.33 T
(through $-style variable substitution, the) 180 523.33 T
3 F
(var) 373.55 523.33 T
1 F
( command, or a few other) 390.96 523.33 T
(mechanisms. V) 180 510.33 T
(ariables need not be declared: a new variable will) 249.27 510.33 T
(automatically be created each time a new variable name is used. V) 180 497.33 T
(ariables) 487.11 497.33 T
-0.16 (may be either global or local. If a variable name is used when a procedure is) 180 484.33 P
-0.05 (not being executed, then it automatically refers to a global invocation of the) 180 471.33 P
(procedure. Local variables are deleted whenever a procedure exits. The) 180 458.33 T
3 F
(global) 180 445.33 T
1 F
( command may be used to request that a name refer to a global) 211.85 445.33 T
(variable for the duration of the current procedure \050somewhat analogous to) 180 432.33 T
3 F
(extern) 180 419.33 T
1 F
( in C\051.) 213.89 419.33 T
0 14 Q
(5.5) 142.54 367 T
0 24 Q
(Commands) 180 367 T
1 10 Q
(The T) 180 341.33 T
(cl library provides the following built-in commands, which will be) 206.42 341.33 T
(available to any application using T) 180 328.33 T
(cl. In addition to these built-in) 344.61 328.33 T
(commands, there may be additional commands de\336ned in Swat, plus) 180 315.33 T
(commands de\336ned as T) 180 302.33 T
(cl procedures.) 287.35 302.33 T
0 14 Q
(5.5.1) 130.86 260 T
0 18 Q
(Notation) 180 260 T
1 10 Q
(The descriptions of the T) 180 236.33 T
(cl commands will follow the following notational) 294.01 236.33 T
(conventions:) 180 223.33 T
2 F
(u) 180 203.33 T
3 F
(command \050alternative1|alternative2|\311|alternativeN\051) 198 203.33 T
(\050\051) 198 191.33 T
1 F
( The parentheses enclose a set of alternatives separated by a vertical) 205.78 191.33 T
(line. For example, the expression) 198 179.33 T
3 F
(quit \050cont|leave\051) 353.76 179.33 T
1 F
( means that either) 441.76 179.33 T
3 F
(quit cont) 198 167.33 T
1 F
( or) 244.94 167.33 T
3 F
(quit leave) 259.94 167.33 T
1 F
(can be used.) 314.19 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "277" 13
%%Page: "278" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(278) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
3 F
(command [optional_argument]) 198 641.33 T
([]) 198 629.33 T
1 F
(The brackets enclose optional arguments to the command. For) 208.65 629.33 T
-0.08 (example, the command) 198 617.33 P
3 F
-0.08 (alias [<word[<command>]>]) 307.23 617.33 P
1 F
-0.08 ( could have zero,) 451.68 617.33 P
-0.13 (one, or two arguments because the <) 198 605.33 P
4 F
-0.13 (command) 366.28 605.33 P
1 F
-0.13 (> and <) 411.46 605.33 P
4 F
-0.13 (word>) 446.3 605.33 P
1 F
-0.13 ( arguments) 475.69 605.33 P
(are optional. Another example would be the command) 198 593.33 T
3 F
(objwalk) 450.07 593.33 T
([<addr>]) 198 581.33 T
1 F
(, which may take zero arguments if it is meant to use the) 242.54 581.33 T
(default address, and one argument if the user gives it a particular) 198 569.33 T
(address to look at.) 198 557.33 T
2 F
(u) 180 538.33 T
3 F
(command <type_of_argument>) 198 538.33 T
-0.45 (< >) 198 526.33 P
1 F
-0.44 ( The angled brackets enclose the type of an argument rather than the) 212.54 526.33 P
(actual string to be typed. For example,) 198 514.33 T
3 F
(<addr>) 379.33 514.33 T
1 F
( indicates an address) 416.09 514.33 T
(expression and) 198 502.33 T
3 F
(<argument>) 270.04 502.33 T
1 F
( indicates some sort of argument, but) 332.9 502.33 T
3 F
(\050addr|type\051) 198 490.33 T
1 F
( means either the string) 259.26 490.33 T
3 F
(addr) 373.53 490.33 T
1 F
( or the string) 398.17 490.33 T
3 F
(type) 461.32 490.33 T
1 F
(.) 484.1 490.33 T
2 F
(u) 180 471.33 T
3 F
(*) 198 471.33 T
(+) 214.48 471.33 T
1 F
(An asterisk following any of the previous constructs indicates zero or) 198 459.33 T
(more repetitions of the construct may be typed. An addition sign) 198 447.33 T
(indicates one or more repetitions of the construct may be used. For) 198 435.33 T
-0.73 (example,) 198 423.33 P
3 F
-0.76 (unalias) 241.54 423.33 P
-0.76 (word) 281.73 423.33 P
6 F
-1.58 (*) 308.58 423.33 P
1 F
-0.73 ( can be the) 314.58 423.33 P
3 F
-0.76 (unalias) 364.45 423.33 P
1 F
-0.73 ( command by itself, or it can) 402.59 423.33 P
(be followed by a list of words to be unaliased.) 198 411.33 T
0 14 Q
(5.5.2) 130.86 370 T
0 18 Q
(Built-in Commands) 180 370 T
1 10 Q
(The built-in T) 180 346.33 T
(cl commands are as follows:) 243.65 346.33 T
81 329.99 531 335 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 329.99 531 335 R
7 X
0 0 0 1 0 0 0 K
V
50 333.99 609.01 333.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 321.99 T
0 F
(bc) 99 321.99 T
0 10 Q
(Usage:) 99 304.33 T
1 F
(bc list <proc>) 180 304.33 T
(bc disasm <proc>) 180 291.33 T
(bc compile <proc>) 180 278.33 T
(bc fcompile <\336le> [<nohelp>]) 180 265.33 T
(bc \337oad <\336le>) 180 252.33 T
(bc fdisasm <\336le>) 180 239.33 T
(bc debug [1|0]) 180 226.33 T
0 F
(Examples:) 99 206.33 T
1 F
(\322bc compile poof\323) 180 186.33 T
(Compiles the body of the procedure \322poof\323 and replaces the) 243 174.33 T
(existing procedure with its compiled form.) 243 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "278" 14
%%Page: "279" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(279) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322bc fcomp bptutils.tcl\323) 180 641.33 T
-0.87 (Creates the \336le \322bptutils.tlc\323 that contains a stream of compiled) 243 629.33 P
(T) 243 617.33 T
(cl that will do exactly what sourcing bptutils.tcl does, except) 248.86 617.33 T
(the resulting procedures will be compiled T) 243 605.33 T
(cl, not interpreted) 441.83 605.33 T
(T) 243 593.33 T
(cl.) 248.86 593.33 T
(\322bc \337oad bptutils.tlc\323) 180 574.33 T
(Loads a \336le containing a stream of compiled T) 243 562.33 T
(cl code.) 454.82 562.33 T
0 F
(Synopsis:) 99 543.33 T
1 F
(The \322bc\323 command allows you to create and examine compiled T) 180 543.33 T
(cl code.) 474.42 543.33 T
-0.41 (Compiled T) 180 530.33 P
-0.41 (cl is not nearly as readable or changeable as interpreted T) 232.12 530.33 P
-0.41 (cl code,) 495.72 530.33 P
(but it\325) 180 517.33 T
(s 30-50% faster) 207.05 517.33 T
(.) 277.25 517.33 T
0 F
(Notes:) 99 497.33 T
1 F
(The \322list\323 subcommand doesn\325) 180 497.33 T
(t work as yet. Eventually it will attempt to) 317.99 497.33 T
(construct a more readable form of compiled code. For now) 180 484.33 T
(, the raw opcodes) 445.01 484.33 T
(will have to do.) 180 471.33 T
0 F
(See Also:) 99 451.33 T
3 F
(source) 180 451.33 T
1 F
(.) 214.45 451.33 T
81 434.99 531 440 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 434.99 531 440 R
7 X
0 0 0 1 0 0 0 K
V
50 438.99 609.01 438.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 426.99 T
0 F
(break) 99 426.99 T
0 10 Q
(Usage:) 99 409.33 T
1 F
(break) 180 409.33 T
0 F
(Examples:) 99 389.33 T
1 F
(\322break\323) 180 369.33 T
(Break out of the current loop.) 243 369.33 T
0 F
(Synopsis:) 99 350.33 T
1 F
(Breaks out of the current loop or the current nested interpreter) 180 350.33 T
(.) 471.83 350.33 T
0 F
(Notes:) 99 330.33 T
2 F
(u) 180 310.33 T
1 F
(Only the closest-enclosing loop can be exited via this command.) 198 310.33 T
2 F
(u) 180 291.33 T
1 F
(This command may be invoked only inside the body of a loop command) 198 291.33 T
(such as) 198 279.33 T
3 F
(for) 235.04 279.33 T
1 F
( or) 250.23 279.33 T
3 F
(foreach) 265.23 279.33 T
1 F
(. It returns a) 304.68 279.33 T
1 9 Q
(TCL_BREAK) 366.72 279.33 T
1 10 Q
( code to signal the) 422.72 279.33 T
(innermost containing loop command to return immediately) 198 267.33 T
(.) 469.87 267.33 T
2 F
(u) 180 248.33 T
1 F
(If you\325ve entered a nested interpreter) 198 248.33 T
(, e.g. by calling a function in the) 369.66 248.33 T
-0.21 (patient, use this to exit the interpreter and restore the registers to what) 198 236.33 P
(they were before you made the call.) 198 224.33 T
0 F
(See Also:) 99 205.33 T
1 F
(continue, for) 180 205.33 T
(.) 237.4 205.33 T
81 188.98 531 193.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 188.98 531 193.99 R
7 X
0 0 0 1 0 0 0 K
V
50 192.98 609.01 192.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 180.98 T
0 F
(case) 99 180.98 T
0 10 Q
(Usage:) 99 163.32 T
1 F
(case <string> [in] [<pat> <body>]+) 180 163.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "279" 15
%%Page: "280" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(280) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(Examples:) 99 641.33 T
1 F
(\322[case $c in) 180 621.33 T
( {[0-9]} {) 196.68 602.33 T
( # do something with digit) 196.68 583.33 T
( }) 185.56 564.33 T
( default {) 196.68 545.33 T
( # do something with non-digit) 199.46 526.33 T
( }) 185.56 507.33 T
( ]\323) 182.78 488.33 T
-0.34 (Do one of two things depending on whether the character in $c) 243 476.33 P
(is a digit.) 243 464.33 T
0 F
(Synopsis:) 99 445.33 T
1 F
-0.77 (Perform one of a set of actions based on whether a string matches one or more) 180 445.33 P
(patterns.) 180 432.33 T
0 F
(Notes:) 99 412.33 T
2 F
(u) 180 392.33 T
1 F
(Compares each of the <) 198 392.33 T
4 F
(pattern) 306.1 392.33 T
1 F
(> arguments to the given <) 339.61 392.33 T
4 F
(string) 464.52 392.33 T
1 F
(>,) 491.73 392.33 T
-0.13 (executing <) 198 380.33 P
4 F
-0.13 (body) 251.15 380.33 P
1 F
-0.13 (> following the \336rst <) 272.82 380.33 P
4 F
-0.13 (pattern) 371.64 380.33 P
1 F
-0.13 (> to match. <) 405.14 380.33 P
4 F
-0.13 (pattern) 465.77 380.33 P
1 F
-0.13 (> uses) 499.28 380.33 P
-0.54 (shell wildcard characters as for the string match command, but may also) 198 368.33 P
-0.69 (contain alternatives, which are separated by a vertical bar) 198 356.33 P
-0.69 (, thus allowing) 461.95 356.33 P
-0.38 (a <) 198 344.33 P
4 F
-0.38 (body) 212.02 344.33 P
1 F
-0.38 (> to be executed under one of several circumstances. In addition,) 233.69 344.33 P
-0.25 (if one <) 198 332.33 P
4 F
-0.25 (pattern) 231.71 332.33 P
1 F
-0.25 (> \050or element thereof\051 is the string default, the associated) 265.22 332.33 P
(<) 198 320.33 T
4 F
(body) 204.06 320.33 T
1 F
(> will be executed if none of the other patterns matches. For) 225.73 320.33 T
(example, the following:) 198 308.33 T
5 F
([case $test in) 216 293.33 T
( a|b {return 1}) 216 279.33 T
( {default|[DE]a*} {return 0}) 216 265.33 T
( ?c {return -1}]) 216 251.33 T
1 F
-0.23 (will return 1 if variable) 198 230.33 P
3 F
-0.24 (test) 307.79 230.33 P
1 F
-0.23 ( contains) 327.05 230.33 P
3 F
-0.24 (a) 371.03 230.33 P
1 F
-0.23 ( or) 377.14 230.33 P
3 F
-0.24 (b) 391.68 230.33 P
1 F
-0.23 (, -1 if it contains a two-letter) 398.16 230.33 P
-0.79 (string whose second letter is) 198 218.33 P
3 F
-0.82 (c) 328.13 218.33 P
1 F
-0.79 (, and 0 in all other cases, including the ones) 333.69 218.33 P
(where) 198 206.33 T
3 F
(test) 229.11 206.33 T
1 F
(\325) 248.37 206.33 T
(s \336rst two letters are either) 250.04 206.33 T
3 F
(Da) 379.68 206.33 T
1 F
( or) 394.12 206.33 T
3 F
(Ea) 409.12 206.33 T
1 F
(.) 422.82 206.33 T
2 F
(u) 180 187.33 T
1 F
(Each <pat> argument is a list of patterns of the form described for the) 198 187.33 T
(\322string match\323 command.) 198 175.33 T
2 F
(u) 180 156.33 T
1 F
(Each <pat> argument must be accompanied by a <body> to execute.) 198 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "280" 16
%%Page: "281" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(281) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(If a <pat> contains the special pattern \322default,\323 the associated <body>) 198 641.33 T
(will be executed if no other pattern matches. The difference between) 198 629.33 T
(\322default\323 and \322*\323 is a pattern of \322*\323 causes the <body> to be executed) 198 617.33 T
(regardless of the patterns in the remaining <pat> arguments, while) 198 605.33 T
(\322default\323 postpones the decision until all the remaining patterns have) 198 593.33 T
(been checked.) 198 581.33 T
2 F
(u) 180 562.33 T
1 F
(Y) 198 562.33 T
(ou can give the literal \322in\323 argument if you wish to enhance the) 203.93 562.33 T
(readability of your code.) 198 550.33 T
0 F
(See Also:) 99 531.33 T
1 F
(string, if.) 180 531.33 T
81 514.99 531 520 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 514.99 531 520 R
7 X
0 0 0 1 0 0 0 K
V
50 518.99 609.01 518.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 506.99 T
0 F
(catch) 99 506.99 T
5 10 Q
(catch <command> [<varName>]) 99 492.33 T
0 F
(Synopsis:) 99 474.33 T
1 F
(Executes a command, retaining control even if the command generates an) 180 474.33 T
(error \050which would otherwise cause execution to unwind completely\051.) 180 461.33 T
0 F
(Notes:) 99 441.33 T
2 F
(u) 180 421.33 T
1 F
(The) 198 421.33 T
3 F
(catch) 218.56 421.33 T
1 F
( command may be used to prevent errors from aborting) 246.9 421.33 T
(command interpretation.) 198 409.33 T
3 F
(catch) 316.34 409.33 T
1 F
( calls the T) 344.68 409.33 T
(cl interpreter recursively to) 394.81 409.33 T
(execute <) 198 397.33 T
4 F
(command) 241.65 397.33 T
1 F
(>, and always returns a) 286.83 397.33 T
1 9 Q
(TCL_OK) 399.21 397.33 T
1 10 Q
( code, regardless of) 436.22 397.33 T
(any errors that might occur while executing <) 198 385.33 T
4 F
(command) 409.43 385.33 T
1 F
(>. The return) 454.61 385.33 T
-0.13 (value from) 198 373.33 P
3 F
-0.13 (catch) 250.16 373.33 P
1 F
-0.13 ( is a decimal string giving the code returned by the T) 278.5 373.33 P
-0.13 (cl) 520.76 373.33 P
(interpreter after executing <) 198 361.33 T
4 F
(command) 330.16 361.33 T
1 F
(>. This will be zero \050) 375.34 361.33 T
1 9 Q
(TCL_OK) 469.01 361.33 T
1 10 Q
(\051 if) 506.02 361.33 T
-0.57 (there were no errors in command; otherwise it will have a non-zero value) 198 349.33 P
(corresponding to one of the exceptional return codes. If the <) 198 337.33 T
4 F
(varName) 477.75 337.33 T
1 F
(>) 520.34 337.33 T
-0.69 (argument is given, then it gives the name of a variable;) 198 325.33 P
3 F
-0.72 (catch) 448.57 325.33 P
1 F
-0.69 ( will set the) 476.91 325.33 P
(value of the variable to the string returned from command \050either a) 198 313.33 T
(result or an error message\051.) 198 301.33 T
2 F
(u) 180 282.33 T
1 F
(This returns an integer that indicates how <command> completed:) 198 282.33 T
3 F
(0) 213.36 263.33 T
1 F
-0.84 (Completed successfully; $<varName> contains the result of the) 243 263.33 P
(command.) 243 251.33 T
3 F
( 1) 210.58 232.33 T
1 F
(Generated an error; $<varName> contains the error message.) 243 232.33 T
3 F
( 2) 210.58 213.33 T
1 F
-0.86 (Executed \322return\323; $<varName> contains the argument passed) 243 213.33 P
(to \322return.\323) 243 201.33 T
3 F
(3) 213.36 182.33 T
1 F
(Executed \322break\323; $<varName> is empty) 243 182.33 T
(.) 430.15 182.33 T
3 F
(4) 213.36 163.33 T
1 F
(Executed \322continue\323; $<varName> is empty) 243 163.33 T
(.) 443.47 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "281" 17
%%Page: "282" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(282) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(See Also:) 99 641.33 T
1 F
(protect.) 180 641.33 T
81 624.99 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 624.99 531 630 R
7 X
0 0 0 1 0 0 0 K
V
50 628.99 609.01 628.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 616.99 T
0 F
(concat) 99 616.99 T
0 10 Q
(Usage:) 99 599.33 T
1 F
(concat <arg1>+) 180 599.33 T
0 F
(Examples:) 99 579.33 T
1 F
(\322concat $list1 $list2\323) 180 559.33 T
(Merges the lists in $list1 and $list2 into a single list whose) 243 547.33 T
(elements are the elements of the two lists.) 243 535.33 T
0 F
(Synopsis:) 99 516.33 T
1 F
(Concatenates multiple list arguments into a single list.) 180 516.33 T
0 F
(Notes:) 99 496.33 T
2 F
(u) 180 476.33 T
1 F
-0.76 (This command treats each argument as a list and concatenates them into) 198 476.33 P
(a single list. It permits any number of arguments. For example, the) 198 464.33 T
(command) 198 452.33 T
5 F
(concat a b {c d e} {f {g h}}) 216 437.33 T
1 F
(will return) 198 416.33 T
3 F
(a b c d e f {g h}) 250.78 416.33 T
1 F
( as its result.) 326.06 416.33 T
2 F
(u) 180 397.33 T
1 F
(There is a sometimes-subtle difference between this in the \322list\323) 198 397.33 T
-0.36 (command: Given two lists, \322concat\323 will form a list whose n elements are) 198 385.33 P
-0 (the combined elements of the two component lists, while \322list\323 will form) 198 373.33 P
(a list whose 2 elements are the two lists. For example,) 198 361.33 T
5 F
( concat a b {c d e} {f {g h}}) 216 346.33 T
1 F
( yields the list) 198 325.33 T
5 F
(a b c d e f {g h}) 216 310.33 T
1 F
(but) 198 289.33 T
5 F
(list a b {c d e} {f {g h}}) 216 274.33 T
1 F
(yields) 198 253.33 T
5 F
(a b {c d e} {f {g h}}) 216 238.33 T
0 F
(See Also:) 99 217.33 T
1 F
(list.) 180 217.33 T
81 200.98 531 205.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 200.98 531 205.99 R
7 X
0 0 0 1 0 0 0 K
V
50 204.98 609.01 204.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 192.98 T
0 F
(continue) 99 192.98 T
0 10 Q
(Usage:) 99 175.32 T
1 F
(continue) 180 175.32 T
0 F
(Examples:) 99 155.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "282" 18
%%Page: "283" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(283) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322continue\323) 180 641.33 T
(Return to the top of the enclosing loop.) 243 641.33 T
0 F
(Synopsis:) 99 622.33 T
1 F
(Skips the rest of the commands in the current loop iteration, continuing at) 180 622.33 T
(the top of the loop.) 180 609.33 T
0 F
(Notes:) 99 589.33 T
2 F
(u) 180 569.33 T
1 F
(Only the closest-enclosing loop can be continued via this command.) 198 569.33 T
2 F
(u) 180 550.33 T
1 F
(The <next> clause of the \322for\323 command is not part of the current) 198 550.33 T
(iteration, i.e. it will be executed even if you execute this command.) 198 538.33 T
2 F
(u) 180 519.33 T
1 F
(This command may be invoked only inside the body of a loop command) 198 519.33 T
(such as) 198 507.33 T
3 F
(for) 235.04 507.33 T
1 F
( or) 250.23 507.33 T
3 F
(foreach) 265.23 507.33 T
1 F
(. It returns a) 304.68 507.33 T
1 9 Q
(TCL_CONTINUE) 366.72 507.33 T
1 10 Q
( code to signal the) 441.39 507.33 T
(innermost containing loop command to skip the remainder of the loop\325) 198 495.33 T
(s) 520.99 495.33 T
(body but continue with the next iteration of the loop.) 198 483.33 T
0 F
(See Also:) 99 464.33 T
1 F
(break, for) 180 464.33 T
(.) 224.08 464.33 T
81 447.99 531 453 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 447.99 531 453 R
7 X
0 0 0 1 0 0 0 K
V
50 451.99 609.01 451.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 439.99 T
0 F
(defsubr) 99 439.99 T
0 10 Q
(Usage:) 99 422.33 T
1 F
(defsubr <name> <args> <body>) 180 422.33 T
0 F
(Examples:) 99 402.33 T
1 F
(\322defsubr poof {arg1 args} {return [list $arg1 $args]}\323) 180 382.33 T
(De\336nes a procedure poof that takes 1 or more arguments and) 243 370.33 T
(merges them into a list of two elements.) 243 358.33 T
0 F
(Synopsis:) 99 339.33 T
1 F
(This is the same as the \322proc\323 command, except the new procedure\325) 180 339.33 T
(s name) 488.91 339.33 T
(may not be abbreviated when it is invoked.) 180 326.33 T
0 F
(Notes:) 99 306.33 T
1 F
(Refer to the documentation for) 180 306.33 T
3 F
(proc) 324.44 306.33 T
1 F
( for more information.) 347.97 306.33 T
81 289.98 531 294.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 289.98 531 294.99 R
7 X
0 0 0 1 0 0 0 K
V
50 293.98 609.01 293.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 281.98 T
0 F
(error) 99 281.98 T
0 10 Q
(Usage:) 99 264.32 T
1 F
(error <message>) 180 264.32 T
0 F
(Examples:) 99 244.32 T
1 F
(\322error {invalid argument}\323) 180 224.32 T
-0.16 (Generates an error) 243 212.32 P
-0.16 (, giving the not-so-helpful message \322invalid) 329.9 212.32 P
(argument\323 to the caller) 243 200.32 T
(\325) 350.78 200.32 T
(s caller) 352.45 200.32 T
(.) 384.86 200.32 T
0 F
(Notes:) 99 181.32 T
2 F
(u) 180 161.32 T
1 F
(Unless one of the procedures in the call stack has executed a \322catch\323) 198 161.32 T
-0.87 (command, all procedures on the stack will be terminated with <message>) 198 149.32 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "283" 19
%%Page: "284" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(284) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\050and an indication of an error\051 being the result of the \336nal one so) 198 641.33 T
(terminated.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
(Any commands protected by the \322protect\323 command will be executed.) 198 610.33 T
0 F
(See Also:) 99 591.33 T
1 F
(return, catch.) 180 591.33 T
81 574.99 531 580 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 574.99 531 580 R
7 X
0 0 0 1 0 0 0 K
V
50 578.99 609.01 578.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 566.99 T
0 F
(eval) 99 566.99 T
0 10 Q
(Usage:) 99 549.33 T
1 F
(eval <body>) 180 549.33 T
0 F
(Examples:) 99 529.33 T
1 F
(\322eval $mangled_command\323) 180 509.33 T
(Evaluate the command contained in $mangled_command and) 243 497.33 T
(return its result.) 243 485.33 T
0 F
(Synopsis:) 99 466.33 T
1 F
(Evaluates the passed string as a command and returns the result of that) 180 466.33 T
(evaluation.) 180 453.33 T
2 F
(u) 180 433.33 T
3 F
(eval) 198 433.33 T
1 F
( takes one argument, which is a T) 219.48 433.33 T
(cl command \050or collection of T) 375 433.33 T
(cl) 511.41 433.33 T
(commands separated by newlines in the usual way\051.) 198 421.33 T
3 F
(eval) 441.56 421.33 T
1 F
( evaluates) 463.04 421.33 T
(<) 198 409.33 T
4 F
(body) 204.06 409.33 T
1 F
(> by passing it to the T) 225.73 409.33 T
(cl interpreter recursively) 331.38 409.33 T
(, and returns the) 445.62 409.33 T
(result of the last command. If an error occurs inside <) 198 397.33 T
4 F
(body) 446.28 397.33 T
1 F
(> then) 467.95 397.33 T
3 F
(eval) 500.68 397.33 T
1 F
(returns that error) 198 385.33 T
(.) 280.21 385.33 T
2 F
(u) 180 366.33 T
1 F
(This command is useful when one needs to cobble together a command) 198 366.33 T
-0.64 (from arguments or what have you. For example, if one of your arguments) 198 354.33 P
(is a list of arguments to pass to another command, the only way to) 198 342.33 T
-0.24 (accomplish that is to say something like \322eval [concat random-command) 198 330.33 P
($args]\323, which will form a list whose \336rst element is the command to be) 198 318.33 T
(executed, and whose remaining elements are the arguments for the) 198 306.33 T
(command. \322eval\323 will then execute that list properly) 198 294.33 T
(.) 436.92 294.33 T
2 F
(u) 180 275.33 T
1 F
(If the executed command generates an error) 198 275.33 T
(, \322eval\323 will propagate that) 401.51 275.33 T
(error just like any other command.) 198 263.33 T
0 F
(See Also:) 99 244.33 T
1 F
(concat, list.) 180 244.33 T
81 227.98 531 232.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 227.98 531 232.99 R
7 X
0 0 0 1 0 0 0 K
V
50 231.98 609.01 231.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 219.98 T
0 F
(expr) 99 219.98 T
0 10 Q
(Usage:) 99 202.32 T
1 F
(expr <expression> [\337oat]) 180 202.32 T
0 F
(Examples:) 99 182.32 T
1 F
(\322expr 36*25\323) 180 162.32 T
(Multiplies 36 by 25 and returns the result.) 243 162.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "284" 20
%%Page: "285" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(285) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
( \322expr $i/6 \337oat\323) 180 641.33 T
-0.19 (Divides the number in $i by 6 using \337oating- point arithmetic;) 243 629.33 P
(the result is a real number) 243 617.33 T
(.) 365.98 617.33 T
(\322expr 7.2*10 \337oat\323) 180 598.33 T
(Multiplies 7.2 by 10. Note that though the answer \05072\051 is an) 243 586.33 T
-0.08 (integer) 243 574.33 P
-0.08 (, we need to pass the \322\337oat\323 keyword to make sure that) 275.22 574.33 P
(the expression is interpreted correctly) 243 562.33 T
(.) 417.43 562.33 T
0 F
(Synopsis:) 99 543.33 T
1 F
(Evaluates an arithmetic expression and returns its value.) 180 543.33 T
0 F
(Notes:) 99 523.33 T
2 F
(u) 180 503.33 T
1 F
-0.03 (Most C operators are supported with the standard operator precedence.) 198 503.33 P
2 F
(u) 180 484.33 T
1 F
-0.35 (If you use a T) 198 484.33 P
-0.35 (cl variable in the expression, the variable may only contain) 258.75 484.33 P
(a number; it may not contain an expression.) 198 472.33 T
2 F
(u) 180 453.33 T
1 F
(The result of any T) 198 453.33 T
(cl command, in square brackets \050\322[ ]\323\051 must be a) 285.35 453.33 T
(number; it may not be an expression.) 198 441.33 T
2 F
(u) 180 422.33 T
1 F
(All the C and Esp radix speci\336ers are allowed.) 198 422.33 T
2 F
(u) 180 403.33 T
1 F
(Bitwise and boolean operators \050!, &, ^, |, &&, ||, >>, <<, ~\051 are not) 198 403.33 T
(permitted when the expression is being evaluated using \337oating-point) 198 391.33 T
(arithmetic.) 198 379.33 T
81 363.99 531 369 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 363.99 531 369 R
7 X
0 0 0 1 0 0 0 K
V
50 367.99 609.01 367.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 355.99 T
0 F
(\336le) 99 355.99 T
0 10 Q
(Usage:) 99 338.33 T
1 F
(\336le dirname <name>) 180 338.33 T
(\336le exists <name>) 180 325.33 T
(\336le extension <name>) 180 312.33 T
(\336le isdirectory <name>) 180 299.33 T
(\336le is\336le <name>) 180 286.33 T
(\336le readable <name>) 180 273.33 T
(\336le rootname <name>) 180 260.33 T
(\336le tail <name>) 180 247.33 T
(\336le writable <name>) 180 234.33 T
(\336le match <pattern>) 180 221.33 T
(\336le newer <name1> <name2>) 180 208.33 T
0 F
(Examples:) 99 188.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "285" 21
%%Page: "286" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(286) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322\336le match /pcgeos/tcl/*.tcl\323) 180 641.33 T
(Looks for all \336les/directories in /pcgeos/tcl whose name ends) 243 629.33 T
(with \322.tcl\323.) 243 617.33 T
( \322\336le isdir $path\323) 180 598.33 T
(See if the path stored in $path refers to a directory) 243 586.33 T
(.) 476.35 586.33 T
( \322\336le tail $path\323) 180 567.33 T
(Return the \336nal component of the path stored in $path) 243 555.33 T
0 F
(Synopsis:) 99 536.33 T
1 F
(Performs various checks and manipulations of \336le and directory names.) 180 536.33 T
0 F
(Notes:) 99 516.33 T
2 F
(u) 180 496.33 T
1 F
(The forward slash is the path separator for this command.) 198 496.33 T
2 F
(u) 180 477.33 T
1 F
(The predicate subcommands \050executable, exists, isdirectory) 198 477.33 T
(, is\336le,) 470.98 477.33 T
(owned, readable, and writable\051 all return 1 if the path meets the) 198 465.33 T
(requirements, or 0 if it doesn\325) 198 453.33 T
(t.) 333.76 453.33 T
2 F
(u) 180 434.33 T
1 F
(\322\336le match\323 takes a) 198 434.33 T
4 F
(pattern) 290.62 434.33 T
1 F
( made from the same components as are) 324.13 434.33 T
(described for \322string match\323. It is) 198 422.33 T
4 F
(not) 353.93 422.33 T
1 F
( the same as the standard) 368.56 422.33 T
1 9 Q
(DOS) 491.18 422.33 T
1 10 Q
(wildcarding, where \324.\325 serves to separate the root pattern from the) 198 410.33 T
(extension pattern. For this command \322*.*\323 would match only \336les that) 198 398.33 T
(actually have an extension.) 198 386.33 T
2 F
(u) 180 367.33 T
1 F
(\322\336le dirname\323 returns the directory portion of) 198 367.33 T
4 F
(name) 411.14 367.33 T
1 F
(. If) 436.32 367.33 T
4 F
(name) 452.06 367.33 T
1 F
( has no) 477.24 367.33 T
(directory portion, this returns \322.\323) 198 355.33 T
2 F
(u) 180 336.33 T
1 F
(\322\336le rootname\323 returns all leading directory components of) 198 336.33 T
4 F
(name) 471.34 336.33 T
1 F
(, plus) 496.52 336.33 T
-0.84 (the text before its extension, without the \322.\323 that separates the name from) 198 324.33 P
(the extension.) 198 312.33 T
2 F
(u) 180 293.33 T
1 F
(\322\336le tail\323 returns all of the characters in) 198 293.33 T
4 F
(name) 385.61 293.33 T
1 F
( after the \336nal forward) 410.79 293.33 T
(slash, or) 198 281.33 T
4 F
(name) 239.86 281.33 T
1 F
( if it contains no forward slashes.) 265.04 281.33 T
2 F
(u) 180 262.33 T
1 F
(\322\336le newer\323 returns 1 if) 198 262.33 T
4 F
(name1) 308.93 262.33 T
1 F
( was modi\336ed after) 339.67 262.33 T
4 F
(name2) 430.61 262.33 T
1 F
(. It returns 0) 461.35 262.33 T
(otherwise.) 198 250.33 T
0 F
(See Also:) 99 231.33 T
1 F
(string.) 180 231.33 T
81 214.99 531 220 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 214.99 531 220 R
7 X
0 0 0 1 0 0 0 K
V
50 218.99 609.01 218.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 206.99 T
0 F
(for) 99 206.99 T
0 10 Q
(Usage:) 99 189.33 T
1 F
(for <start> <test> <next> <body>) 180 189.33 T
0 F
(Examples:) 99 169.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "286" 22
%%Page: "287" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(287) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322for {var i 0} {$i < 10} {var i [expr $i+1]} {echo $i}\323) 180 641.33 T
( Prints the numbers from 0 to 9.) 243 629.33 T
0 F
(Synopsis:) 99 610.33 T
1 F
(This is T) 180 610.33 T
(cl\325) 219.76 610.33 T
(s main looping construct. It functions similarly to the \322for\323 in C.) 229.02 610.33 T
0 F
(Notes:) 99 590.33 T
2 F
(u) 180 570.33 T
1 F
-0.31 (<start> is a T) 198 570.33 P
-0.31 (cl command string \050which may involve multiple commands) 259.16 570.33 P
(over multiple lines, if desired\051 that is executed once at the very start of) 198 558.33 T
-0.72 (the loop. It is always executed. If it returns an error) 198 546.33 P
-0.72 (, or contains a \322break\323) 429.74 546.33 P
(command, no part of the loop will execute.) 198 534.33 T
2 F
(u) 180 515.33 T
1 F
-0.42 (<test> is an arithmetic expression that is passed to the \322expr\323 command.) 198 515.33 P
(If the result is non-zero, the <body> is executed.) 198 503.33 T
2 F
(u) 180 484.33 T
1 F
-0.12 (<next> is a T) 198 484.33 P
-0.12 (cl command string \050which may involve multiple commands) 257.67 484.33 P
(over multiple lines, if desired\051 that is executed at the end of each) 198 472.33 T
(iteration before <test> is evaluated again. If it returns an error) 198 460.33 T
(, or) 488.85 460.33 T
(contains a \322break\323 command, no part of the loop will execute.) 198 448.33 T
2 F
(u) 180 429.33 T
1 F
-0.08 (Y) 198 429.33 P
-0.08 (ou can exit the loop prematurely by executing the \322break\323 command in) 203.93 429.33 P
(any of the three T) 198 417.33 T
(cl command strings \050<start>, <next>, or <body>\051.) 279.79 417.33 T
2 F
(u) 180 398.33 T
1 F
(So long as there\325) 198 398.33 T
(s no error) 273.57 398.33 T
(, \322for\323 always returns the empty string as its) 317.45 398.33 T
(result.) 198 386.33 T
2 F
(u) 180 367.33 T
1 F
(If a) 198 367.33 T
3 F
(continue) 216.52 367.33 T
1 F
( command is invoked within <) 262.44 367.33 T
4 F
(body) 401.3 367.33 T
1 F
(> then any remaining) 422.97 367.33 T
(commands in the current execution of <) 198 355.33 T
4 F
(body) 381.09 355.33 T
1 F
(> are skipped; processing) 402.76 355.33 T
(continues by invoking the T) 198 343.33 T
(cl interpreter on <) 325.54 343.33 T
4 F
(next) 409.74 343.33 T
1 F
(>, then evaluating) 428.81 343.33 T
(<) 198 331.33 T
4 F
(test) 204.06 331.33 T
1 F
(>, and so on. If a) 219.98 331.33 T
3 F
(break) 299.39 331.33 T
1 F
( command is invoked within <) 329.58 331.33 T
4 F
(body) 468.44 331.33 T
1 F
(>, then) 490.11 331.33 T
(the) 198 319.33 T
3 F
(for) 215.78 319.33 T
1 F
( command will return immediately) 230.97 319.33 T
(. The operation of) 390.62 319.33 T
3 F
(break) 474.52 319.33 T
1 F
( and) 504.71 319.33 T
3 F
(continue) 198 307.33 T
1 F
( are similar to the corresponding statements in C.) 243.92 307.33 T
0 F
(See Also:) 99 288.33 T
1 F
(foreach, break, continue.) 180 288.33 T
81 271.99 531 277 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 271.99 531 277 R
7 X
0 0 0 1 0 0 0 K
V
50 275.99 609.01 275.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 263.99 T
0 F
(foreach) 99 263.99 T
0 10 Q
(Usage:) 99 246.33 T
1 F
(foreach <varname> <list> <body>) 180 246.33 T
0 F
(Examples:) 99 226.33 T
1 F
(\322foreach el $list {echo poof = $el}\323) 180 206.33 T
(Prints each element of the list $list preceded by the profound) 243 194.33 T
(words \322poof = \322) 243 182.33 T
0 F
(Synopsis:) 99 163.33 T
1 F
(This is a looping construct to easily iterate over all the elements of a list.) 180 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "287" 23
%%Page: "288" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(288) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(Notes:) 99 641.33 T
2 F
(u) 180 621.33 T
1 F
(<body> is evaluated once for each element in <list>. Before each) 198 621.33 T
(evaluation, the next element is placed in the variable <varName>.) 198 609.33 T
2 F
(u) 180 590.33 T
1 F
(Y) 198 590.33 T
(ou can exit the loop prematurely by executing the \322break\323 command.) 203.93 590.33 T
2 F
(u) 180 571.33 T
1 F
(As long as there\325) 198 571.33 T
(s no error) 274.12 571.33 T
(, \322foreach\323 always returns the empty string.) 318 571.33 T
2 F
(u) 180 552.33 T
1 F
(The) 198 552.33 T
3 F
(break) 218.56 552.33 T
1 F
( and) 248.75 552.33 T
3 F
(continue) 271.72 552.33 T
1 F
( statements may be invoked inside <) 317.64 552.33 T
4 F
(body) 486.33 552.33 T
1 F
(>,) 508 552.33 T
(with the same effect as in the) 198 540.33 T
3 F
(for) 336.91 540.33 T
1 F
( command.) 352.1 540.33 T
81 524.99 531 530 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 524.99 531 530 R
7 X
0 0 0 1 0 0 0 K
V
50 528.99 609.01 528.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 516.99 T
0 F
(format) 99 516.99 T
5 10 Q
(format <formatString> [<arg> ]*) 99 502.33 T
1 F
(This command generates a formatted string in the same way as the C) 180 484.33 T
3 F
(sprintf) 180 471.33 T
1 F
( procedure \050it uses) 215.56 471.33 T
3 F
(sprintf) 303.33 471.33 T
1 F
( in its implementation\051. <) 338.89 471.33 T
4 F
(formatString) 456.64 471.33 T
1 F
(>) 517 471.33 T
(indicates how to format the result, using) 180 458.33 T
4 F
( %) 367.61 458.33 T
1 F
( \336elds as in) 378.72 458.33 T
3 F
(sprintf) 433.92 458.33 T
1 F
(, and the) 469.48 458.33 T
-0.57 (additional arguments, if any) 180 445.33 P
-0.57 (, provide values to be substituted into the result.) 308.87 445.33 P
-0.39 (All of the) 180 432.33 P
3 F
-0.41 (sprintf) 224.01 432.33 P
1 F
-0.39 ( options are valid; see the) 259.57 432.33 P
3 F
-0.41 (sprintf) 377.79 432.33 P
1 F
-0.39 ( procedure in a C manual) 413.35 432.33 P
-0.11 (for more details. Each <) 180 419.33 P
4 F
-0.11 (arg) 290.08 419.33 P
1 F
-0.11 (> must match the expected type from the) 305.63 419.33 P
4 F
-0.11 (%) 497.32 419.33 P
1 F
-0.11 ( \336eld) 505.65 419.33 P
(in <) 180 406.33 T
4 F
(formatString) 198.1 406.33 T
1 F
(>; the) 258.46 406.33 T
3 F
(format) 287.86 406.33 T
1 F
( command converts each argument to the) 323.05 406.33 T
-0.83 (correct type \050\337oating, integer) 180 393.33 P
-0.83 (, etc.\051 before passing it to) 311.02 393.33 P
3 F
-0.86 (sprintf) 424.4 393.33 P
1 F
-0.83 ( for formatting.) 459.96 393.33 P
(The only unusual conversion is for) 180 380.33 T
4 F
( %c) 338.89 380.33 T
1 F
(; in this case the argument must be a) 354.44 380.33 T
(decimal string, which will then be converted to the corresponding) 180 367.33 T
1 9 Q
(ASCII) 484.64 367.33 T
1 10 Q
(character value.) 180 354.33 T
3 F
(format) 257.41 354.33 T
1 F
( does backslash substitution on its <) 292.6 354.33 T
4 F
(formatString) 460.18 354.33 T
1 F
(>) 520.54 354.33 T
(argument, so backslash sequences in <) 180 341.33 T
4 F
(formatString) 359.05 341.33 T
1 F
(> will be handled) 419.41 341.33 T
-0.25 (correctly even if the argument is in braces. The return value from) 180 328.33 P
3 F
-0.25 (format) 482.96 328.33 P
1 F
-0.25 ( is) 518.15 328.33 P
(the formatted string.) 180 315.33 T
81 298.98 531 303.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 298.98 531 303.99 R
7 X
0 0 0 1 0 0 0 K
V
50 302.98 609.01 302.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 290.98 T
0 F
(global) 99 290.98 T
0 10 Q
(Usage:) 99 273.32 T
1 F
(global <varname>+) 180 273.32 T
0 F
(Examples:) 99 253.32 T
1 F
(\322global attached\323) 180 233.32 T
-0.29 (When next the \322attached\323 variable is fetched or set, get it from) 243 221.32 P
(the global scope, not the local one.) 243 209.32 T
0 F
(Synopsis:) 99 190.32 T
1 F
(Declares the given variables to be from the global scope.) 180 190.32 T
0 F
(Notes:) 99 170.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "288" 24
%%Page: "289" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(289) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.77 (For the duration of the procedure in which this command is executed \050but) 198 641.33 P
(not in any procedure it invokes\051, the global variable of the given name) 198 629.33 T
(will be used when the variable is fetched or set.) 198 617.33 T
2 F
(u) 180 598.33 T
1 F
-0.43 (If no global variable of the given name exists, the setting of that variable) 198 598.33 P
(will de\336ne it in the global scope.) 198 586.33 T
2 F
(u) 180 567.33 T
1 F
(This command is ignored unless a T) 198 567.33 T
(cl procedure is being interpreted. If) 363.51 567.33 T
(so, then it declares the given <) 198 555.33 T
4 F
(varname) 339.26 555.33 T
1 F
(>\325) 379.81 555.33 T
(s to be global variables rather) 387.54 555.33 T
-0.77 (than local ones. For the duration of the current procedure \050and only while) 198 543.33 P
(executing in the current procedure\051, any reference to any of the) 198 531.33 T
(<) 198 519.33 T
4 F
(varname) 204.06 519.33 T
1 F
(> values will be bound to a global variable instead of a local) 244.61 519.33 T
(one.) 198 507.33 T
0 F
(See Also:) 99 488.33 T
1 F
(var) 180 488.33 T
(.) 194.63 488.33 T
81 471.99 531 477 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.99 531 477 R
7 X
0 0 0 1 0 0 0 K
V
50 475.99 609.01 475.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 463.99 T
0 F
(if) 99 463.99 T
0 10 Q
(Usage:) 99 446.33 T
1 F
(if <test> [then] <trueBody>) 180 446.33 T
(\050elif <test> [\050then\051] <trueBody>\051*) 216.14 433.33 T
([[else] <falseBody>]) 216.14 420.33 T
0 F
(Examples:) 99 400.33 T
1 F
(\322if {$v > 3} {echo yes} {echo no}\323) 180 380.33 T
(Prints \322yes\323 if $v is greater than 3, else it prints \322no\323.) 243 368.33 T
(\322if {$v > 3} then {echo yes} else {echo no}\323) 180 349.33 T
(Ditto.) 243 337.33 T
(\322if {$v > 3} then {echo yes} elif {$v == 3} {echo maybe} else {echo no}\323) 180 318.33 T
0 F
(Synopsis:) 99 299.33 T
1 F
(This is T) 180 299.33 T
(cl\325) 219.76 299.33 T
(s conditional, as you\325d expect from its name.) 229.02 299.33 T
0 F
(Notes:) 99 279.33 T
2 F
(u) 180 259.33 T
1 F
(The \322then\323 and \322else\323 keywords are optional, intended to delineate the) 198 259.33 T
(different sections of the command and make the whole easier to read.) 198 247.33 T
2 F
(u) 180 228.33 T
1 F
-0.17 (The \322elif\323 keyword is) 198 228.33 P
4 F
-0.17 (mandatory) 295.67 228.33 P
1 F
-0.17 ( if you want to perform additional tests.) 346.22 228.33 P
2 F
(u) 180 209.33 T
1 F
(The <expr> arguments are normal T) 198 209.33 T
(cl expressions. If the result is) 366.36 209.33 T
(non-zero, the appropriate <truebody> is executed. If none of the <expr>) 198 197.33 T
(arguments evaluates non-zero, <falsebody> is executed.) 198 185.33 T
2 F
(u) 180 166.33 T
1 F
-0.41 (If a <truebody> is empty and the test evaluated non-zero, \322if\323 will return) 198 166.33 P
(the result of the test. Otherwise \322if\323 returns the result from last) 198 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "289" 25
%%Page: "290" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(290) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(command executed in whichever <truebody> or <falsebody> argument) 198 641.33 T
(was \336nally executed. It returns an empty string if no <expr> evaluated) 198 629.33 T
(non-zero and no <falsebody> was given.) 198 617.33 T
2 F
(u) 180 598.33 T
1 F
-0.22 (The) 198 598.33 P
3 F
-0.23 (if) 218.34 598.33 P
1 F
-0.22 ( command evaluates <) 225.93 598.33 P
4 F
-0.22 (test) 328.56 598.33 P
1 F
-0.22 (> as an expression in the same way that) 344.48 598.33 P
3 F
(expr) 198 586.33 T
1 F
( evaluates its argument. If the result is non-zero then <) 221.71 586.33 T
4 F
(trueBody) 477.97 586.33 T
1 F
(>) 519.81 586.33 T
(is called by passing it to the T) 198 574.33 T
(cl interpreter) 335.19 574.33 T
(. Otherwise <) 395.92 574.33 T
4 F
(falseBody) 458.1 574.33 T
1 F
(> is) 502.71 574.33 T
-0.65 (executed by passing it to the T) 198 562.33 P
-0.65 (cl interpreter) 334.25 562.33 P
-0.65 (. <) 394.33 562.33 P
4 F
-0.65 (falseBody) 405.3 562.33 P
1 F
-0.65 (> is also optional;) 449.91 562.33 P
-0.05 (if it isn\325) 198 550.33 P
-0.05 (t speci\336ed then the command does nothing if <) 232.73 550.33 P
4 F
-0.05 (test) 447.67 550.33 P
1 F
-0.05 (> evaluates to) 463.59 550.33 P
-0.28 (zero. The return value from) 198 538.33 P
3 F
-0.28 (if) 327.17 538.33 P
1 F
-0.28 ( is the value of the last command executed) 334.76 538.33 P
(in <) 198 526.33 T
4 F
(trueBody) 216.1 526.33 T
1 F
(> or <) 257.94 526.33 T
4 F
(falseBody) 285.06 526.33 T
1 F
(> or the empty string if <) 329.67 526.33 T
4 F
(test) 445.87 526.33 T
1 F
(> evaluates to) 461.79 526.33 T
(zero and <) 198 514.33 T
4 F
(falseBody) 246.28 514.33 T
1 F
(> isn\325) 290.89 514.33 T
(t speci\336ed. Alternative test conditions can be) 315.48 514.33 T
(added by adding <) 198 502.33 T
4 F
(elif) 282.78 502.33 T
1 F
(> arguments.) 297.21 502.33 T
0 F
(See Also:) 99 483.33 T
1 F
(expr) 180 483.33 T
(.) 199.81 483.33 T
81 466.99 531 472 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 466.99 531 472 R
7 X
0 0 0 1 0 0 0 K
V
50 470.99 609.01 470.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 458.99 T
0 F
(index) 99 458.99 T
0 10 Q
(Usage:) 99 441.33 T
1 F
(index <value> <index> [chars]) 180 441.33 T
0 F
(Examples:) 99 421.33 T
1 F
(\322index {a b c} 1\323) 180 401.33 T
(Extracts \322b\323 from the list.) 243 389.33 T
(\322index {hi mom} 3 char\323) 180 370.33 T
(Extracts \322m\323 from the string.) 243 358.33 T
0 F
(Synopsis:) 99 339.33 T
1 F
-0.05 (\322index\323 is used to retrieve a single element or character from a list or string.) 180 339.33 P
0 F
(Notes:) 99 319.33 T
2 F
(u) 180 299.33 T
1 F
(Elements and characters are numbered from 0.) 198 299.33 T
2 F
(u) 180 280.33 T
1 F
-0.22 (If you request an element or character from beyond the end of the <list>) 198 280.33 P
(or <string>, you\325ll receive an empty list or string as a result.) 198 268.33 T
2 F
(u) 180 249.33 T
1 F
-0.72 (If the <) 198 249.33 P
4 F
-0.72 (chars) 230.57 249.33 P
1 F
-0.72 (> keyword isn\325) 255.74 249.33 P
-0.72 (t speci\336ed, then) 320.92 249.33 P
3 F
-0.75 (index) 394.68 249.33 P
1 F
-0.72 ( treats <) 423.75 249.33 P
4 F
-0.72 (value) 461.33 249.33 P
1 F
-0.72 (> as a list) 486.14 249.33 P
(and returns the <) 198 237.33 T
4 F
(index) 279.43 237.33 T
1 F
(>\325) 304.42 237.33 T
(th \336eld from it. In extracting the \336eld,) 312.34 237.33 T
3 F
(index) 491.24 237.33 T
1 F
(observes the same rules concerning braces and backslashes as the T) 198 225.33 T
(cl) 511.3 225.33 T
(command interpreter; however) 198 213.33 T
(, variable substitution and command) 340.03 213.33 T
(substitution do not occur) 198 201.33 T
(. If the <) 311.89 201.33 T
4 F
(chars) 351.47 201.33 T
1 F
(> keyword is speci\336ed \050or any) 376.64 201.33 T
-0.21 (abbreviation of it\051, then <) 198 189.33 P
4 F
-0.21 (value) 315.29 189.33 P
1 F
-0.21 (> is treated as a string and the command) 340.1 189.33 P
(returns the <) 198 177.33 T
4 F
(index) 259.24 177.33 T
1 F
(>\325) 284.23 177.33 T
(th character from it \050or the empty string if there) 292.15 177.33 T
(aren\325) 198 165.33 T
(t at least <) 220.97 165.33 T
4 F
(index) 270.94 165.33 T
1 F
(>+1 characters in the string\051.) 295.93 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "290" 26
%%Page: "291" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(291) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(info) 99 634.99 T
0 10 Q
(Usage:) 99 617.33 T
1 F
(info args <procname> [<pattern>]) 180 617.33 T
( info arglist <procname>) 180 604.33 T
( info body <procname>) 180 591.33 T
( info cmdcount) 180 578.33 T
( info commands [<pattern>]) 180 565.33 T
( info default <procname> <arg> <varname>) 180 552.33 T
( info globals [<pattern>]) 180 539.33 T
( info locals [<pattern>]) 180 526.33 T
( info procs [<pattern>]) 180 513.33 T
( info vars [<pattern>]) 180 500.33 T
0 F
(Examples:) 99 480.33 T
1 F
(\322info args fmtval\323 Retrieves the names of the arguments for the \322fmtval\323) 180 460.33 T
(command so you know in what order to pass things.) 243 448.33 T
(\322info body print-frame\323 Retrieves the string that is the body of the) 180 429.33 T
(\322print-frame\323 T) 243 417.33 T
(cl procedure.) 313.3 417.33 T
-0.07 (\322info commands) 180 398.33 P
4 F
-0.07 (reg) 256.15 398.33 P
1 F
-0.07 (\323 Retrieves a list of commands whose names contain the) 270.4 398.33 P
(string \322reg\323.) 243 386.33 T
0 F
(Synopsis:) 99 367.33 T
1 F
(This command provides information about a number of data structures) 180 367.33 T
(maintained by the T) 180 354.33 T
(cl interpreter) 273.29 354.33 T
(.) 334.02 354.33 T
0 F
(Notes:) 99 334.33 T
2 F
(u) 180 314.33 T
1 F
-0.5 (All the <pattern> arguments are standard wildcard patterns as are used) 198 314.33 P
(for the \322string match\323 and \322case\323 commands. See \322string\323 for a) 198 302.33 T
(description of these patterns.) 198 290.33 T
2 F
(u) 180 271.33 T
1 F
-0.18 (\322info args\323 returns the complete list of arguments for a T) 198 271.33 P
-0.18 (cl procedure, or) 457.47 271.33 P
(only those matching the <pattern>, if one is given. The arguments are) 198 259.33 T
(returned in the order in which they must be passed to the procedure.) 198 247.33 T
2 F
(u) 180 228.33 T
1 F
(\322info arglist\323 returns the complete list of arguments, and their default) 198 228.33 T
(values, for a T) 198 216.33 T
(cl procedure.) 263.13 216.33 T
2 F
(u) 180 197.33 T
1 F
-0.03 (\322info body\323 returns the command string that is the body of the given T) 198 197.33 P
-0.03 (cl) 520.66 197.33 P
(procedure.) 198 185.33 T
2 F
(u) 180 166.33 T
1 F
(\322info cmdcount\323 returns the total number of commands the T) 198 166.33 T
(cl) 478.68 166.33 T
(interpreter has executed in its lifetime.) 198 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "291" 27
%%Page: "292" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(292) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.17 (\322info commands\323 returns the list of all known commands, either built-in) 198 641.33 P
(or as T) 198 629.33 T
(cl procedures, known to the interpreter) 229.05 629.33 T
(. Y) 409.04 629.33 T
(ou may also specify a) 420.53 629.33 T
(pattern to restrict the commands to those whose names match the) 198 617.33 T
(pattern.) 198 605.33 T
2 F
(u) 180 586.33 T
1 F
(\322info default\323 returns non-zero if the argument named <arg> for the) 198 586.33 T
(given T) 198 574.33 T
(cl procedure has a default value. If it does, that default value is) 231.64 574.33 T
(stored in the variable whose name is <varname>.) 198 562.33 T
2 F
(u) 180 543.33 T
1 F
-0.31 (\322info globals\323 returns the list of all global variables accessible within the) 198 543.33 P
-0.8 (current variable scope \050i.e. only those that have been declared global with) 198 531.33 P
(the \322global\323 command, unless you issue this command from the) 198 519.33 T
(command-line, which is at the global scope\051, or those that match the) 198 507.33 T
(given pattern.) 198 495.33 T
2 F
(u) 180 476.33 T
1 F
-0.41 (\322info locals\323 returns the list of all local variables, or those that match the) 198 476.33 P
(given pattern.) 198 464.33 T
2 F
(u) 180 445.33 T
1 F
(\322info procs\323 returns the list of all known T) 198 445.33 T
(cl procedures, or those that) 391.28 445.33 T
(match the given pattern.) 198 433.33 T
2 F
(u) 180 414.33 T
1 F
-0.64 (\322info vars\323 returns the list of all known T) 198 414.33 P
-0.64 (cl variables in the current scope,) 381.89 414.33 P
(either local or global. Y) 198 402.33 T
(ou may also give a pattern to restrict the list to) 303.95 402.33 T
(only those that match.) 198 390.33 T
0 F
(See Also:) 99 371.33 T
1 F
(proc, defcmd, defcommand, defsubr) 180 371.33 T
(.) 342.21 371.33 T
81 354.99 531 360 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 354.99 531 360 R
7 X
0 0 0 1 0 0 0 K
V
50 358.99 609.01 358.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 346.99 T
0 F
(length) 99 346.99 T
0 10 Q
(Usage:) 99 329.33 T
1 F
(length <value> [<chars>]) 180 329.33 T
0 F
(Examples:) 99 309.33 T
1 F
(\322length $args\323) 180 289.33 T
(Returns the number of elements in the list $args) 243 277.33 T
(\322length $str char\323) 180 258.33 T
(Returns the number of characters in the string $str) 243 246.33 T
0 F
(Synopsis:) 99 227.33 T
1 F
(Determines the number of characters in a string, or elements in a list.) 180 227.33 T
0 F
(Notes:) 99 207.33 T
1 F
(If \050) 180 207.33 T
4 F
(chars) 193.51 207.33 T
1 F
(\051 isn\325) 218.68 207.33 T
(t speci\336ed,) 240.54 207.33 T
3 F
(length) 292.58 207.33 T
1 F
( treats <) 325.91 207.33 T
4 F
(value) 364.94 207.33 T
1 F
(> as a list and returns the) 389.75 207.33 T
-0.33 (number of elements in the list. If <) 180 194.33 P
4 F
-0.33 (chars) 338.56 194.33 P
1 F
-0.33 (> is speci\336ed \050or any abbreviation of) 363.73 194.33 P
(it\051, then) 180 181.33 T
3 F
(length) 219.82 181.33 T
1 F
( treats <) 253.15 181.33 T
4 F
(value) 292.18 181.33 T
1 F
(> as a string and returns the number of) 316.99 181.33 T
(characters in it \050not including the terminating null character\051.) 180 168.33 T
0 F
(See Also:) 99 148.33 T
1 F
(index, range.) 180 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "292" 28
%%Page: "293" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(293) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(list) 99 634.99 T
0 10 Q
(Usage:) 99 617.33 T
1 F
(list <arg>+) 180 617.33 T
0 F
(Examples:) 99 597.33 T
1 F
(\322list a b {c d e} {f {g h}}\323) 180 577.33 T
(Returns the list \322a b {c d e} {f {g h}}\323) 243 565.33 T
0 F
(Synopsis:) 99 546.33 T
1 F
(Joins any number of arguments into a single list, applying quoting braces) 180 546.33 T
(and backslashes as necessary to form a valid T) 180 533.33 T
(cl list.) 395.16 533.33 T
0 F
(Notes:) 99 513.33 T
2 F
(u) 180 493.33 T
1 F
-0.51 (If you use the \322index\323 command on the result, the 0th element will be the) 198 493.33 P
(\336rst argument that was passed, the 1st element will be the second) 198 481.33 T
(argument that was passed, etc.) 198 469.33 T
2 F
(u) 180 450.33 T
1 F
(The difference between \322list\323 and \322concat\323 is subtle. Given the above) 198 450.33 T
(arguments, \322concat\323 would return \322a b c d e f {g h}\323.) 198 438.33 T
2 F
(u) 180 419.33 T
1 F
(This command returns a list comprised of all the <) 198 419.33 T
4 F
(args) 431.49 419.33 T
1 F
(>. It also adds) 451.48 419.33 T
-0.65 (braces and backslashes as necessary) 198 407.33 P
-0.65 (, so that the) 363.02 407.33 P
3 F
-0.67 (index) 418.4 407.33 P
1 F
-0.65 ( command may be) 447.47 407.33 P
-0.06 (used on the result to re-extract the original arguments, and also so that) 198 395.33 P
3 F
(eval) 198 383.33 T
1 F
( may be used to execute the resulting list, with <) 219.48 383.33 T
4 F
(arg1) 444.28 383.33 T
1 F
(> comprising) 465.39 383.33 T
(the command\325) 198 371.33 T
(s name and the other <) 262.08 371.33 T
4 F
(args>) 369.08 371.33 T
1 F
( comprising its arguments.) 395.13 371.33 T
0 F
(See Also:) 99 352.33 T
1 F
(concat, index, range.) 180 352.33 T
81 335.98 531 340.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 335.98 531 340.99 R
7 X
0 0 0 1 0 0 0 K
V
50 339.98 609.01 339.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 327.98 T
0 F
(proc) 99 327.98 T
0 10 Q
(Usage:) 99 310.32 T
1 F
(proc <name> <args> <body>) 180 310.32 T
0 F
(Examples:) 99 290.32 T
1 F
(\322proc poof {{arg1 one} args} {return [list $arg1 $args]}\323) 180 270.32 T
-0.06 ( De\336nes a procedure poof that takes 0 or more arguments and) 243 258.32 P
(merges them into a list of two elements. If no argument is) 243 246.32 T
(given, the result will be the list {one {}}) 243 234.32 T
0 F
(Synopsis:) 99 215.32 T
1 F
(De\336nes a new T) 180 215.32 T
(cl procedure that can be invoked by typing a unique) 253.28 215.32 T
(abbreviation of the procedure name.) 180 202.32 T
0 F
(Notes:) 99 182.32 T
2 F
(u) 180 162.32 T
1 F
(Any existing procedure or built-in command with the same name is) 198 162.32 T
(overridden.) 198 150.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "293" 29
%%Page: "294" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(294) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.55 (<name> is the name of the new procedure and can consist of pretty much) 198 641.33 P
-0.82 (any character \050even a space or tab, if you enclose the argument in braces\051.) 198 629.33 P
2 F
(u) 180 610.33 T
1 F
(<args> is the, possibly empty) 198 610.33 T
(, list of formal parameters the procedure) 331.81 610.33 T
-0.42 (accepts. Each element of the list can be either the name of local variable,) 198 598.33 P
-0.17 (to which the corresponding actual parameter is assigned before the \336rst) 198 586.33 P
(command of the procedure is executed, or a two-element list, the \336rst) 198 574.33 T
(element of which is the local variable name, as above, and the second) 198 562.33 T
(element of which is the value to assign the variable if no actual) 198 550.33 T
(parameter is given.) 198 538.33 T
2 F
(u) 180 519.33 T
1 F
(If the \336nal formal parameter is named \322args\323, the remaining actual) 198 519.33 T
(parameters from that position on are cobbled into a list and assigned to) 198 507.33 T
(the local variable $args. This allows a procedure to receive a variable) 198 495.33 T
-0.58 (number of arguments \050even 0, in which case $args will be the empty list\051.) 198 483.33 P
2 F
(u) 180 464.33 T
1 F
(If the only formal parameter is \322noeval\323, all the actual parameters are) 198 464.33 T
-0.27 (merged into a list and assigned to $noeval. Moreover) 198 452.33 P
-0.27 (, neither command-) 439.03 452.33 P
(nor variable-substitution is performed on the actual parameters.) 198 440.33 T
2 F
(u) 180 421.33 T
1 F
-0.23 (The return value for the procedure is speci\336ed by executing the \322return\323) 198 421.33 P
-0.28 (command within the procedure. If no \322return\323 command is executed, the) 198 409.33 P
(return value for the procedure is the empty string.) 198 397.33 T
2 F
(u) 180 378.33 T
1 F
(Whenever the new command is invoked, the contents of <) 198 378.33 T
4 F
(body) 463.7 378.33 T
1 F
(> will be) 485.37 378.33 T
-0.52 (executed by the T) 198 366.33 P
-0.52 (cl interpreter) 277.12 366.33 P
-0.52 (. <) 337.33 366.33 P
4 F
-0.52 (args) 348.43 366.33 P
1 F
-0.52 (> speci\336es the formal arguments to) 368.42 366.33 P
-0.78 (the procedure. It consists of a list, possibly empty) 198 354.33 P
-0.78 (, each of whose elements) 418.61 354.33 P
-0.74 (speci\336es one argument. Braces and backslashes may be used in the usual) 198 342.33 P
(way to specify complex default values.) 198 330.33 T
2 F
(u) 180 311.33 T
1 F
(When <) 198 311.33 T
4 F
(name) 233.87 311.33 T
1 F
(> \050or a unique abbreviation of same\051 is invoked, a local) 259.05 311.33 T
(variable will be created for each of the formal arguments to the) 198 299.33 T
(procedure; its value will be the value of corresponding argument in the) 198 287.33 T
(invoking command or the argument\325) 198 275.33 T
(s default value. Arguments with) 365.42 275.33 T
-0.15 (default values need not be speci\336ed in a procedure invocation. However) 198 263.33 P
-0.15 (,) 525.59 263.33 P
(there must be enough actual arguments for all the formal arguments) 198 251.33 T
(that don\325) 198 239.33 T
(t have defaults, and there must not be any extra actual) 238.94 239.33 T
(arguments \050unless the \322args\323 keyword was used\051.) 198 227.33 T
2 F
(u) 180 208.33 T
1 F
(When <) 198 208.33 T
4 F
(body) 233.87 208.33 T
1 F
(> is being executed, variable names normally refer to local) 255.54 208.33 T
-0.23 (variables, which are created automatically when referenced and deleted) 198 196.33 P
-0.17 (when the procedure returns. One local variable is automatically created) 198 184.33 P
(for each of the procedure\325) 198 172.33 T
(s arguments. Global variables can only be) 313.91 172.33 T
(accessed by invoking the) 198 160.33 T
3 F
(global) 314.68 160.33 T
1 F
( command.) 346.53 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "294" 30
%%Page: "295" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(295) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The) 198 641.33 T
3 F
(proc) 218.56 641.33 T
1 F
( command itself returns the null string.) 242.09 641.33 T
0 F
(See Also:) 99 622.33 T
1 F
(defsubr) 180 622.33 T
(, return.) 214.07 622.33 T
81 605.99 531 611 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 605.99 531 611 R
7 X
0 0 0 1 0 0 0 K
V
50 609.99 609.01 609.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 597.99 T
0 F
(protect) 99 597.99 T
0 10 Q
(Usage:) 99 580.33 T
1 F
(protect <body> <cleanup>) 180 580.33 T
0 F
(Examples:) 99 560.33 T
1 F
(\322protect {) 180 540.33 T
( var s [stream open $\336le w]) 191.12 521.33 T
( # do stuff with the stream) 191.12 502.33 T
( } {) 180 483.33 T
( catch {stream close $s}) 191.12 464.33 T
( }\323) 180 445.33 T
(Perform some random operations on a \336le making sure the) 243 433.33 T
(stream gets closed, even if the user types control-C.) 243 421.33 T
0 F
(Synopsis:) 99 402.33 T
1 F
(Allows one to ensure that clean-up for a sequence of commands will always) 180 402.33 T
(happen, even if the user types control-C to interrupt the command.) 180 389.33 T
0 F
(Notes:) 99 369.33 T
2 F
(u) 180 349.33 T
1 F
(Since the interrupt can come at any time during the <body>, the) 198 349.33 T
(<cleanup> command string should not rely on any particular variables) 198 337.33 T
(being set. Hence the \322catch\323 command used in the <cleanup> clause of) 198 325.33 T
(the example.) 198 313.33 T
2 F
(u) 180 294.33 T
1 F
-0.84 (The <cleanup> clause will also be executed if any command in the <body>) 198 294.33 P
(generates an error) 198 282.33 T
(.) 282.81 282.33 T
0 F
(See Also:) 99 263.33 T
1 F
(catch.) 180 263.33 T
81 246.98 531 251.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 246.98 531 251.99 R
7 X
0 0 0 1 0 0 0 K
V
50 250.98 609.01 250.98 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 238.98 T
0 F
(range) 99 238.98 T
0 10 Q
(Usage:) 99 221.32 T
1 F
(range <value> <\336rst> <last> [chars]) 180 221.32 T
0 F
(Examples:) 99 201.32 T
1 F
(\322range {a b c} 1 end\323) 180 181.32 T
(Returns {b c} \050element 1 to the end\051) 243 169.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "295" 31
%%Page: "296" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(296) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322range {hi mom} 3 end chars\323) 180 641.33 T
(Returns \322mom\323) 243 629.33 T
0 F
(Synopsis:) 99 610.33 T
1 F
(Extracts a range of characters from a string, or elements from a list.) 180 610.33 T
0 F
(Notes:) 99 590.33 T
2 F
(u) 180 570.33 T
1 F
-0.07 (If you give an ending index that is greater than the number of elements) 198 570.33 P
-0.19 (in the list \050characters in the string\051, it will be adjusted to be the index of) 198 558.33 P
(the last element \050character\051.) 198 546.33 T
2 F
(u) 180 527.33 T
1 F
-0.03 (If you give a starting index that is greater than the number of elements) 198 527.33 P
(in the list \050characters in the string\051, the result will be the empty list) 198 515.33 T
(\050string\051.) 198 503.33 T
2 F
(u) 180 484.33 T
1 F
(Y) 198 484.33 T
(ou can give <end> as \322end\323 \050without the quotation marks, of course\051 to) 203.93 484.33 T
(indicate the extraction should go to the end of the list \050string\051.) 198 472.33 T
2 F
(u) 180 453.33 T
1 F
(The range is inclusive, so \322range {a b c} 0 0\323 returns \322a\323.) 198 453.33 T
2 F
(u) 180 434.33 T
1 F
(Neither index may be less than 0 or \322range\323 will generate an error) 198 434.33 T
(.) 503.04 434.33 T
2 F
(u) 180 415.33 T
1 F
-0.4 ( Return a range of \336elds or characters from value.   If the) 198 415.33 P
4 F
-0.4 (chars) 459.04 415.33 P
1 F
-0.4 ( keyword,) 484.2 415.33 P
(or any abbreviation of it, is speci\336ed, then) 198 403.33 T
3 F
(range) 394.7 403.33 T
1 F
( treats <value> as a) 424.7 403.33 T
(character string and returns characters <) 198 391.33 T
4 F
(\336rst) 389.97 391.33 T
1 F
(> through <) 408.48 391.33 T
4 F
(last) 463.19 391.33 T
1 F
(> of it,) 480.22 391.33 T
-0.12 (inclusive. If <) 198 379.33 P
4 F
-0.12 (last) 260.66 379.33 P
1 F
-0.12 (> is less than <) 277.69 379.33 P
4 F
-0.12 (\336rst) 347.29 379.33 P
1 F
-0.12 (> then an empty string is returned.) 365.8 379.33 P
-0.04 (Note:) 198 367.33 P
3 F
-0.04 (range value) 225.56 367.33 P
7 F
-0.04 (\336rst \336rst) 289.56 367.33 P
1 F
-0.04 ( does not always produce the same results) 334.23 367.33 P
-0.54 (as) 198 355.33 P
3 F
-0.55 ( index value) 208.19 355.33 P
7 F
-0.55 (\336rst) 272.54 355.33 P
1 F
-0.54 (\050although it often does for simple \336elds that are not) 295.78 355.33 P
-0.48 (enclosed in braces\051; it does, however) 198 343.33 P
-0.48 (, produce exactly the same results as) 361.73 343.33 P
3 F
(list [index value \336rst]) 198 331.33 T
1 F
(.) 309.57 331.33 T
0 F
(See Also:) 99 312.33 T
1 F
(index.) 180 312.33 T
81 295.99 531 301 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 295.99 531 301 R
7 X
0 0 0 1 0 0 0 K
V
50 299.99 609.01 299.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 287.99 T
0 F
(return) 99 287.99 T
0 10 Q
(Usage:) 99 270.33 T
1 F
(return [<value>]) 180 270.33 T
0 F
(Examples:) 99 250.33 T
1 F
(\322return $val\323) 180 230.33 T
(Returns the string in $val as the value for the current T) 243 218.33 T
(cl) 500.91 218.33 T
(procedure.) 243 206.33 T
0 F
(Synopsis:) 99 187.33 T
1 F
-0.5 (Causes an immediate return from the current T) 180 187.33 P
-0.5 (cl procedure, with or without) 397.01 187.33 P
(a value.) 180 174.33 T
0 F
(Notes:) 99 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "296" 32
%%Page: "297" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(297) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(Every T) 198 641.33 T
(cl procedure returns a string for a value. If the procedure was) 234.04 641.33 T
(called via command substitution \050having been placed between square) 198 629.33 T
(brackets as the argument to another command\051, the return value takes) 198 617.33 T
(the place of the command invocation.) 198 605.33 T
2 F
(u) 180 586.33 T
1 F
-0.18 (Execution of the current procedure terminates immediately) 198 586.33 P
-0.18 (, though any) 470.79 586.33 P
(<cleanup> clause for a containing \322protect\323 command will still be) 198 574.33 T
(executed.) 198 562.33 T
2 F
(u) 180 543.33 T
1 F
-0.35 (If no \322return\323 command is invoked within a T) 198 543.33 P
-0.35 (cl procedure, the procedure) 404.07 543.33 P
(returns the empty string by default.) 198 531.33 T
2 F
(u) 180 512.33 T
1 F
-0.5 (This command may be invoked only when a procedure call is in progress.) 198 512.33 P
(It causes the current procedure to return immediately) 198 500.33 T
(. If <) 446.69 500.33 T
4 F
(value) 468.49 500.33 T
1 F
(> is) 493.3 500.33 T
(speci\336ed, it will be the return value from the procedure. Otherwise the) 198 488.33 T
(current procedure will return the empty string.) 198 476.33 T
0 F
(See Also:) 99 457.33 T
1 F
(error) 180 457.33 T
(, proc, defsubr) 202.58 457.33 T
(, defcommand, defcmd.) 267.39 457.33 T
81 440.99 531 446 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 440.99 531 446 R
7 X
0 0 0 1 0 0 0 K
V
50 444.99 609.01 444.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 432.99 T
0 F
(scan) 99 432.99 T
0 10 Q
(Usage:) 99 415.33 T
1 F
(scan <string> <format> [<varname1> ]*) 180 415.33 T
0 F
(Examples:) 99 395.33 T
1 F
(\322scan $input {my name is %s} name\323) 180 375.33 T
(T) 243 363.33 T
(rims the leading string \322my name is \322 from the string in) 249.05 363.33 T
($input and stores the rest of the string within the variable) 243 351.33 T
($name) 243 339.33 T
0 F
(Synopsis:) 99 320.33 T
1 F
-0.64 (\322scan\323 parses \336elds from an input string, given the string and a format string) 180 320.33 P
(that de\336nes the various types of \336elds. The \336elds are assigned to variables) 180 307.33 T
(within the caller) 180 294.33 T
(\325) 257.04 294.33 T
(s scope.) 258.71 294.33 T
0 F
(Notes:) 99 274.33 T
2 F
(u) 180 254.33 T
1 F
(The <format> string consists of literal text, which must be matched) 198 254.33 T
-0.44 (explicitly) 198 242.33 P
-0.44 (, and \336eld de\336nitions. The <varName> arguments are names of) 239.3 242.33 P
(variables to which each successive \336eld value is assigned.) 198 230.33 T
2 F
(u) 180 211.33 T
1 F
(A single whitespace character \050space or tab\051 will match any number of) 198 211.33 T
-0.08 (whitespace characters in the input string. Fields are speci\336ed as for the) 198 199.33 P
(standard C library routine \322sscanf\323:) 198 187.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "297" 33
%%Page: "298" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(298) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
( %c) 210.58 641.33 T
1 F
-0.88 (A single character) 243 641.33 P
-0.88 (. The \336eld value stored is the decimal number) 324.58 641.33 P
-0.29 (of the) 243 629.33 P
1 9 Q
-0.27 (ASCII) 271.3 629.33 P
1 10 Q
-0.29 ( code for the character scanned. So if the character) 297.29 629.33 P
(were a space, the variable would receive the string \32232\323.) 243 617.33 T
3 F
(%d) 216.14 598.33 T
1 F
(A signed decimal integer is parsed and stored.) 243 598.33 T
3 F
(%o) 216.14 579.33 T
1 F
(An octal integer is parsed and stored, as a decimal number) 243 579.33 T
(.) 513.96 579.33 T
3 F
(%x) 216.14 560.33 T
1 F
(A hexadecimal integer is parsed and stored, as a decimal) 243 560.33 T
(number) 243 548.33 T
(.) 278.37 548.33 T
3 F
(%i) 218.92 529.33 T
1 F
(A signed integer) 243 529.33 T
(, following the standard C radix-speci\336cation) 318 529.33 T
(standard, is parsed and stored as a decimal number) 243 517.33 T
(.) 481.74 517.33 T
3 F
(%f) 218.92 498.33 T
1 F
(A \337oating-point number is parsed as a \322\337oat\323 and stored) 243 498.33 T
(without exponent, unless the exponent is less than -4.) 243 486.33 T
3 F
(%s) 218.92 467.33 T
1 F
(A whitespace-terminated string is parsed and stored.) 243 467.33 T
3 F
(%[<char) 218.92 448.33 T
(-class>]) 260.73 448.33 T
1 F
( A string consisting only of the characters in the given) 243 436.33 T
(character class \050see \322string match\323 for details on character) 243 424.33 T
(classes\051 is parsed and stored. The normal leading-whitespace) 243 412.33 T
(skipping is suppressed.) 243 400.33 T
3 F
(%%) 216.14 381.33 T
1 F
(Matches a single percent sign in the input.) 243 381.33 T
2 F
(u) 180 362.33 T
1 F
-0.49 (If the % of a \336eld speci\336er is followed by an *, the \336eld is parsed as usual,) 198 362.33 P
(consuming characters from the string, but the result is not stored) 198 350.33 T
(anywhere and you should not specify a variable to receive the value.) 198 338.33 T
2 F
(u) 180 319.33 T
1 F
(The maximum length of a \336eld may be speci\336ed by giving a decimal) 198 319.33 T
(number between the % and the \336eld-type character) 198 307.33 T
(. So \322%10s\323 will) 434.12 307.33 T
(extract out a string of at most 10 characters.) 198 295.33 T
2 F
(u) 180 276.33 T
1 F
(There is currently a limit of 5 \336elds.) 198 276.33 T
0 F
(See Also:) 99 257.33 T
1 F
(format.) 180 257.33 T
81 240.99 531 246 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 240.99 531 246 R
7 X
0 0 0 1 0 0 0 K
V
50 244.99 609.01 244.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 232.99 T
0 F
(source) 99 232.99 T
0 10 Q
(Usage:) 99 215.33 T
1 F
(source <\336leName>) 180 215.33 T
0 F
(Examples:) 99 195.33 T
1 F
(\322source coolness\323) 180 175.33 T
(Evaluates all commands within the \336le \322coolness.tcl\323 in the) 243 163.33 T
(current directory) 243 151.33 T
(.) 320.57 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "298" 34
%%Page: "299" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(299) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(Synopsis:) 99 641.33 T
1 F
(Reads and evaluates commands from a \336le.) 180 641.33 T
0 F
(Notes:) 99 621.33 T
2 F
(u) 180 601.33 T
1 F
-0.19 (If <\336le> has no extension and doesn\325) 198 601.33 P
-0.19 (t exist, \322source\323 will append \322.tcl\323 to) 364.73 601.33 P
(the end and try and read that \336le.) 198 589.33 T
2 F
(u) 180 570.33 T
1 F
(The return value of) 198 570.33 T
3 F
(source) 290.41 570.33 T
1 F
( is the return value of the last command) 324.86 570.33 T
-0.19 (executed from the \336le. If an error occurs in executing the contents of the) 198 558.33 P
(\336le, then the) 198 546.33 T
3 F
(source) 259.49 546.33 T
1 F
( command will return that error) 293.94 546.33 T
(.) 441.72 546.33 T
81 530.99 531 536 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 530.99 531 536 R
7 X
0 0 0 1 0 0 0 K
V
50 534.99 609.01 534.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 522.99 T
0 F
(string) 99 522.99 T
0 10 Q
(Usage:) 99 505.33 T
1 F
(string compare<string1> <string2> [no_case]) 180 505.33 T
(string \336rst<substring> <string> [no_case]) 180 492.33 T
(string last<substring> <string> [no_case]) 180 479.33 T
(string match<string> <pattern>) 180 466.33 T
(string subst <string> <search> <replace> [global]) 180 453.33 T
0 F
(Examples:) 99 433.33 T
1 F
(\322if {[string c [index $args 1] all] == 0}\323) 180 413.33 T
-0.79 (Do something if the 2nd element of the list in $args is the string) 243 401.33 P
(\322all\323.) 243 389.33 T
(\322while {[string m [index $args 0] -*]}\323) 180 370.33 T
(Loop while the \336rst element of the list in $args begins with a) 243 358.33 T
(hyphen.) 243 346.33 T
0 F
(Synopsis:) 99 327.33 T
1 F
(Examine strings in various ways.) 180 327.33 T
0 F
(Notes:) 99 307.33 T
2 F
(u) 180 287.33 T
1 F
-0.73 (\322string subst\323 searches <string> for occurrences of <search> and replaces) 198 287.33 P
(them with <replace>. If 5th argument is given as \322global\323 \050it may be) 198 275.33 T
-0.03 (abbreviated\051, then all \050non-overlapping\051 occurrences of <search> will be) 198 263.33 P
(replaced. If 5th argument is absent, only the \336rst occurrence will be) 198 251.33 T
(replaced.) 198 239.33 T
2 F
(u) 180 220.33 T
1 F
(\322string compare\323 compares the two strings character) 198 220.33 T
(-by-character) 440.41 220.33 T
(. It) 501.14 220.33 T
(returns -1, 0, or 1 depending on whether <string1> is lexicographically) 198 208.33 T
(less than, equal to, or greater than <string2>. If the no_case parameter) 198 196.33 T
(is passed than it does a case insensitive compare.) 198 184.33 T
2 F
(u) 180 165.33 T
1 F
-0.2 (\322string \336rst\323 searches <string> for the given <substring>. If it \336nds it, it) 198 165.33 P
(returns the index of the \336rst character in the \336rst such match. If) 198 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "299" 35
%%Page: "300" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(300) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.5) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.54 (<substring> isn\325) 198 641.33 P
-0.54 (t part of <string>, it returns -1. If the no_case parameter) 272 641.33 P
(is passed it does the search ignoring case.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
-0.08 (\322string last\323 is much like \322string \336rst\323, except it returns the index of the) 198 610.33 P
(\336rst character of the last match for the <substring> within <string>. If) 198 598.33 T
(there is no match, it returns -1.) 198 586.33 T
2 F
(u) 180 567.33 T
1 F
-0.49 (\322string match\323 compares <string> against <pattern> and returns 1 if the) 198 567.33 P
(two match, or 0 if they do not. For the strings to match, their contents) 198 555.33 T
(must be identical, except that the following special sequences may) 198 543.33 T
(appear in <pattern> with the following results:) 198 531.33 T
( *) 207.8 512.33 T
(Matches any sequence of characters, including none.) 243 512.33 T
( ?) 210.58 493.33 T
(Matches any single character) 243 493.33 T
( [<char) 207.8 474.33 T
(-class>]) 240.34 474.33 T
-0.17 (Matches a single character within the given set. The elements) 243 462.33 P
-0.21 (of the set are speci\336ed as single characters, or as ranges of the) 243 450.33 P
(form <start>-<end>. Thus [0-9x] matches a single character) 243 438.33 T
(that is a numeric digit or the letter x.) 243 426.33 T
( [^<char) 207.8 407.33 T
(-class>]) 246.4 407.33 T
(Matches a single character) 243 395.33 T
4 F
(not) 370.04 395.33 T
1 F
( within the given set.) 384.67 395.33 T
( \134*) 207.8 376.33 T
(Matches an asterisk.) 243 376.33 T
( \134?) 207.8 357.33 T
(Matches a question mark.) 243 357.33 T
( \134[) 207.8 338.33 T
(Matches an open-bracket.) 243 338.33 T
0 F
(See Also:) 99 319.33 T
1 F
(case.) 180 319.33 T
81 302.99 531 308 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 302.99 531 308 R
7 X
0 0 0 1 0 0 0 K
V
50 306.99 609.01 306.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 294.99 T
0 F
(uplevel) 99 294.99 T
0 10 Q
(Usage:) 99 277.33 T
1 F
(uplevel <level> <body>) 180 277.33 T
(uplevel <function> <body>) 180 264.33 T
0 F
(Examples:) 99 244.33 T
1 F
(\322uplevel print-frame {var found1}\323) 180 224.33 T
(Sets $found to 1 within the variables belonging to the nearest) 243 212.33 T
(invocation of print-frame on the call stack.) 243 200.33 T
(\322uplevel 0 {var foo-table}\323) 180 181.33 T
(Retrieves the value of the global variable foo-table.) 243 169.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "300" 36
%%Page: "301" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Commands) 481.77 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(301) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.5) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\322uplevel 1 {var found 1}\323) 180 641.33 T
(Sets $found to 1 within the scope of the procedure that called) 243 629.33 T
(the one executing the \322uplevel\323 command.) 243 617.33 T
0 F
(Synopsis:) 99 598.33 T
1 F
(Provides access to the variables of another procedure for fairly specialized) 180 598.33 T
(purposes.) 180 585.33 T
0 F
(Notes:) 99 565.33 T
2 F
(u) 180 545.33 T
1 F
(<level> is a signed integer with the following meaning:) 198 545.33 T
( > 0) 180 526.33 T
-0.74 (Indicates the number of scopes to go up. For example, if you say) 243 526.33 P
(\322uplevel 1 {var foo 36}\323, you would modify \050or create\051 the) 243 514.33 T
(variable \322foo\323 in your caller) 243 502.33 T
(\325) 369.49 502.33 T
(s scope.) 371.16 502.33 T
( <= 0) 180 483.33 T
-0.34 (Indicates the number of scopes to go down from the global one.) 243 483.33 P
(\322uplevel 0 <body>\323 will execute <body> in the top-most scope,) 243 471.33 T
(which means that no local variables are involved, and any) 243 459.33 T
-0.4 (variables created by the commands in <body> persist as global) 243 447.33 P
(variables.) 243 435.33 T
2 F
(u) 180 416.33 T
1 F
-0.09 (<function> is the name of a function known to be somewhere on the call) 198 416.33 P
(stack. If the named function isn\325) 198 404.33 T
(t on the call stack anywhere, \322uplevel\323) 346.72 404.33 T
(generates an error) 198 392.33 T
(.) 282.81 392.33 T
2 F
(u) 180 373.33 T
1 F
-0.06 (<body> may be spread over multiple arguments, allowing the command) 198 373.33 P
(to be executed to use variables local to the current procedure as) 198 361.33 T
-0.38 (arguments without having to use the \322list\323 command to form the <body>.) 198 349.33 P
0 F
(See Also:) 99 330.33 T
1 F
(global.) 180 330.33 T
81 313.99 531 319 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 313.99 531 319 R
7 X
0 0 0 1 0 0 0 K
V
50 317.99 609.01 317.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 305.99 T
0 F
(var) 99 305.99 T
0 10 Q
(Usage:) 99 288.33 T
1 F
(var <varname>) 180 288.33 T
(var \050<name> <value>\051+) 180 275.33 T
0 F
(Examples:) 99 255.33 T
1 F
(\322echo [var poof]\323) 180 235.33 T
(Prints the value stored in the variable \322poof\323) 243 223.33 T
(\322var a b c d\323) 180 204.33 T
-0 (Assigns the string \322b\323 to the variable \322a\323, and the string \322d\323 to) 243 204.33 P
(the variable \322c\323.) 243 192.33 T
(\322var yes $no no $yes\323) 180 173.33 T
(Exchanges the values of the \322yes\323 and \322no\323 variables) 243 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "301" 37
%%Page: "302" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(302) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(Synopsis:) 99 641.33 T
1 F
-0.15 (This is the means by which variables are de\336ned in T) 180 641.33 P
-0.15 (cl. Less often, it is also) 424.63 641.33 P
(used to retrieve the value of a variable \050usually that\325) 180 628.33 T
(s done via variable) 422.08 628.33 T
(substitution\051.) 180 615.33 T
0 F
(Notes:) 99 595.33 T
2 F
(u) 180 575.33 T
1 F
-0.69 (If you give only one argument, the value of that variable will be returned.) 198 575.33 P
-0.23 (If the variable has never been given a value, the variable will be created) 198 563.33 P
(and assigned the empty string, then the empty string will be returned.) 198 551.33 T
2 F
(u) 180 532.33 T
1 F
(Y) 198 532.33 T
(ou can set the value of a variable by giving the value as the second) 203.93 532.33 T
(argument, after the variable name. No value is returned by the \322var\323) 198 520.33 T
(command in this case.) 198 508.33 T
2 F
(u) 180 489.33 T
1 F
(Y) 198 489.33 T
(ou can assign values to multiple variables \322in parallel\323 by giving) 203.93 489.33 T
(successive name/value pairs.) 198 477.33 T
2 F
(u) 180 458.33 T
1 F
-0.29 (If invoked in a procedure on a variable that has not been declared global) 198 458.33 P
(\050using the \322global\323 command\051, this applies to the local variable of the) 198 446.33 T
(given name, even if it has no value yet.) 198 434.33 T
0 F
(See Also:) 99 415.33 T
1 F
(global.) 180 415.33 T
0 14 Q
(5.6) 142.54 363 T
0 24 Q
(Coding) 180 363 T
1 10 Q
(This section provides information about the features and commands of T) 180 337.33 T
(cl) 514.22 337.33 T
(that are important to know when using Swat, and the features and) 180 324.33 T
(commands of Swat that are important to know when using T) 180 311.33 T
(cl. These) 459.98 311.33 T
(features should be kept in mind while programming in T) 180 298.33 T
(cl because, if used) 441.26 298.33 T
(properly) 180 285.33 T
(, they make programming, debugging, and understanding existing) 217.77 285.33 T
(commands much easier) 180 272.33 T
(.This section will contain the following parts:) 287.41 272.33 T
2 F
(u) 180 252.33 T
1 F
(Swat Data Structures) 198 252.33 T
-0.35 (Descriptions of the major data structures and the commands that access) 198 240.33 P
(them.) 198 228.33 T
2 F
(u) 180 209.33 T
1 F
(Examples) 198 209.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "302" 38
%%Page: "303" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(303) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.6.1) 130.86 636 T
0 18 Q
(Swat Data Structure Commands) 180 636 T
5 10 Q
(symbol, type, patient, handle, brk, cbrk, event, thread,) 180 612.33 T
(src, cache, table) 180 599.33 T
1 F
(This section contains information about Swat\325) 180 579.33 T
(s built-in data structures and) 391.52 579.33 T
-0.6 (the commands that access them. These commands  examine and modify vital) 180 566.33 P
(information about the state of) 180 553.33 T
1 9 Q
(GEOS) 320.95 553.33 T
1 10 Q
( while it is running under Swat.) 347.12 553.33 T
81 536.99 531 542 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 536.99 531 542 R
7 X
0 0 0 1 0 0 0 K
V
50 540.99 609.01 540.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 528.99 T
0 F
(brk) 99 528.99 T
0 10 Q
(Usage:) 99 511.33 T
1 F
(brk <addr> [<command>]) 180 511.33 T
(brk pset <addr> [<command>]) 180 498.33 T
(brk aset <addr> [<command>]) 180 485.33 T
(brk tset <addr> [<command>]) 180 472.33 T
(brk clear <break>*) 180 459.33 T
(brk delete <break>*) 180 446.33 T
(brk enable <break>*) 180 433.33 T
(brk disable <break>*) 180 420.33 T
(brk address <break>) 180 407.33 T
(brk list [<addr>]) 180 394.33 T
(brk debug [<\337ag>]) 180 381.33 T
(brk isset <addr>) 180 368.33 T
(brk cond <break> <condition>*) 180 355.33 T
(brk cmd <break> [<command>]) 180 342.33 T
(brk delcmd <break> [<command>]) 180 329.33 T
0 F
(Examples:) 99 309.33 T
1 F
(\322brk W) 180 289.33 T
(inOpen\323) 212.04 289.33 T
-0.78 (Sets the machine to stop unconditionally when any thread calls) 243 277.33 P
(W) 243 265.33 T
(inOpen.) 252.44 265.33 T
( \322brk pset W) 180 246.33 T
(inOpen\323) 236.86 246.33 T
(Sets the machine to stop when any thread for the current) 243 234.33 T
(patient calls W) 243 222.33 T
(inOpen.) 312.27 222.33 T
( \322brk tset W) 180 203.33 T
(inOpen\323) 235.01 203.33 T
( Sets the machine to stop when any thread for the current) 243 191.33 T
(patient calls W) 243 179.33 T
(inOpen, and deletes the breakpoint when the) 312.27 179.33 T
(machine next stops.) 243 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "303" 39
%%Page: "304" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(304) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
( \322brk enable 1 3-5\323) 180 641.33 T
(Re-enables breakpoints 1, 3, 4, and 5) 243 629.33 T
( \322brk clear 2-\323) 180 610.33 T
(Clears all breakpoints from number 2 onward.) 243 598.33 T
( \322brk cond 3 cx=42\323) 180 579.33 T
-0.8 (Sets breakpoint 3 to be conditional, stopping when the machine) 243 567.33 P
(reaches the breakpoint\325) 243 555.33 T
(s address with CX being 42.) 350.79 555.33 T
( \322brk cond 2 \050ss:0\051!=1b80h\323) 180 536.33 T
-0.8 (Sets breakpoint 2 to be conditional, stopping when the machine) 243 524.33 P
(reaches the breakpoint\325) 243 512.33 T
(s address with the word at ss:0 not) 350.79 512.33 T
(being 1b80h. Note that the \322ss\323 is the value of the) 243 500.33 T
3 F
(ss) 474.73 500.33 T
1 F
( register) 484.73 500.33 T
(when the \322brk cond\323 command is executed, not when the) 243 488.33 T
(breakpoint is reached.) 243 476.33 T
0 F
(Synopsis:) 99 457.33 T
1 F
-0.45 (Allows you to specify that execution should stop when it reaches a particular) 180 457.33 P
-0.67 (point. These breakpoints can be conditional, and can execute an arbitrary T) 180 444.33 P
-0.67 (cl) 521.3 444.33 P
(command, which can say whether the machine is to remain stopped, or) 180 431.33 T
(continue on its way) 180 418.33 T
(.) 268.53 418.33 T
0 F
(Notes:) 99 398.33 T
2 F
(u) 180 378.33 T
1 F
(Once you\325ve set a breakpoint, \322brk\323 will return to you a token for that) 198 378.33 T
(breakpoint that begins with \322brk\323 and ends with a number) 198 366.33 T
(. When you) 468.06 366.33 T
-0.7 (refer to the breakpoint, you can use either the full name \050as you\325ll usually) 198 354.33 P
(do from a T) 198 342.33 T
(cl procedure\051, or just the number) 250.16 342.33 T
(.) 401.07 342.33 T
2 F
(u) 180 323.33 T
1 F
-0.11 (Breakpoints have four attributes: the address at which they are set, the) 198 323.33 P
(condition set on their being recognized, the T) 198 311.33 T
(cl command string to) 405.16 311.33 T
-0.76 (execute when they are recognized, and the T) 198 299.33 P
-0.76 (cl command string to execute) 397.41 299.33 P
(when they are deleted.) 198 287.33 T
2 F
(u) 180 268.33 T
1 F
(The condition is set either when the breakpoint is set, using the \322cbrk\323) 198 268.33 T
-0.09 (command, or after you\325ve set the breakpoint, by invoking the \322brk cond\323) 198 256.33 P
(command.) 198 244.33 T
2 F
(u) 180 225.33 T
1 F
( A breakpoint\325) 198 225.33 T
(s condition is evaluated \050very quickly\051 on the PC and can) 262.83 225.33 T
(check only word registers \050the 8 general registers, the three segment) 198 213.33 T
(registers other than CS, and the current thread; each register may be) 198 201.33 T
(checked only once in a condition\051 and a single word of memory) 198 189.33 T
(. Each) 484.31 189.33 T
-0.66 (<condition> argument is of the form \322<reg><op><value>\323. <reg> is one of) 198 177.33 P
(the 16-bit machine registers, \322thread\323 \050for the current thread\051, or the) 198 165.33 T
-0.39 (address of a word of memory to check, enclosed in parentheses. <op> is a) 198 153.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "304" 40
%%Page: "305" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(305) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(relational operator taken from the following set:) 198 641.33 T
( = equal-to) 198 629.33 T
( != not-equal-to) 198 617.33 T
( > < >= <= unsigned greater) 198 605.33 T
(-than, less-than, greater) 326.78 605.33 T
(-or) 438.83 605.33 T
(-equal, and) 451.42 605.33 T
( less-or) 211.9 593.33 T
(-equal) 244.68 593.33 T
( +> +< +>= +<= signed greater) 198 581.33 T
(-than, less-than, greater) 338.8 581.33 T
(-or) 450.85 581.33 T
(-equal, and) 463.44 581.33 T
( less-or) 211.9 569.33 T
(-equal) 244.68 569.33 T
( <value> is a regular Swat address expression. If it is handle-relative,) 198 545.33 T
-0.62 (and the <reg> is one of the three non-CS segment registers, the condition) 198 533.33 P
(will be for the segment of that handle and will change automatically as) 198 521.33 T
-0.79 (the handle\325) 198 509.33 P
-0.79 (s memory shifts about on the heap. Similar things will happen) 248.33 509.33 P
(if you specify a number as the <value> for a segment register and the) 198 497.33 T
(number is the current segment of a block on the heap.) 198 485.33 T
2 F
(u) 180 466.33 T
1 F
-0.55 (If you give no <condition> argument to the \322brk cond\323 command, you will) 198 466.33 P
(remove any condition the breakpoint might have, making it, therefore,) 198 454.33 T
(unconditional.) 198 442.33 T
2 F
(u) 180 423.33 T
1 F
(If a breakpoint is given an associated <command> string, it will be) 198 423.33 T
(evaluated before the breakpoint is taken. If the result of the evaluation) 198 411.33 T
-0.51 (is an error) 198 399.33 P
-0.51 (, a non-numeric string, or a numeric string that\325) 244.57 399.33 P
-0.51 (s non-zero, the) 461.98 399.33 P
(breakpoint will be taken. Otherwise, the machine will be allowed to) 198 387.33 T
-0.13 (continue \050so long as no other breakpoint command or other part of Swat) 198 375.33 P
(insists that it remain stopped\051. Y) 198 363.33 T
(ou can use this to simply print out) 349.51 363.33 T
(information when execution reaches the breakpoint address without) 198 351.33 T
(interrupting the machine\325) 198 339.33 T
(s execution.) 316.89 339.33 T
2 F
(u) 180 320.33 T
1 F
(The global variable \322breakpoint\323 contains the name of the breakpoint) 198 320.33 T
(whose command is being evaluated while that command is being) 198 308.33 T
(evaluated.) 198 296.33 T
2 F
(u) 180 277.33 T
1 F
-0.67 ( Y) 198 277.33 P
-0.67 (ou can change the command associated with a breakpoint with the \322brk) 206.04 277.33 P
-0.32 (cmd\323 command. If you give no <command> argument, then no command) 198 265.33 P
-0.19 (will be executed and the breakpoint will always be taken, so long as any) 198 253.33 P
(associated condition is also met.) 198 241.33 T
2 F
(u) 180 222.33 T
1 F
-0.11 ( If a breakpoint has both a condition and a command, the command will) 198 222.33 P
-0.12 (not be executed until the condition has been met, unless there\325) 198 210.33 P
-0.12 (s another) 484.95 210.33 P
(breakpoint at the same address with a different, or no, condition.) 198 198.33 T
2 F
(u) 180 179.33 T
1 F
-0.17 (Y) 198 179.33 P
-0.17 (ou can set a breakpoint to last only during the next continuation of the) 203.93 179.33 P
(machine by calling \322brk tset\323. The breakpoint thus set will be removed) 198 167.33 T
-0.29 (when next the machine comes to a full stop, regardless of why it stopped) 198 155.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "305" 41
%%Page: "306" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(306) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\050i.e. if it hits a different breakpoint, the temporary breakpoint will still) 198 641.33 T
(be removed\051. The breakpoint will only be taken if the thread executing) 198 629.33 T
(when it is hit is owned by the patient that was current when the) 198 617.33 T
(breakpoint was set.) 198 605.33 T
2 F
(u) 180 586.33 T
1 F
-0.72 (Each <break> argument to the \322brk clear\323, \322brk enable\323 and \322brk disable\323) 198 586.33 P
(commands can be either a single breakpoint token \050or number\051, or a) 198 574.33 T
-0.06 (range of the form <start>-<end>, where either <start> or <end> may be) 198 562.33 P
(absent. If <start> is missing, the command affects all breakpoints from) 198 550.33 T
(number 1 to <end>. If <end> is missing, the command affects all) 198 538.33 T
(breakpoints from <start> to the last one in existence.) 198 526.33 T
2 F
(u) 180 507.33 T
1 F
(If you give no <break> argument to \322brk clear\323, \322brk enable\323 or \322brk) 198 507.33 T
(disable\323, the command will apply to all breakpoints that are speci\336c to) 198 495.33 T
(the current patient, i.e. that were set with the \322brk pset\323 command,) 198 483.33 T
-0.15 (unless the current patient is the kernel, in which case they will apply to) 198 471.33 P
-0.36 (all breakpoints that are speci\336c to no patient \050i.e. those set with the \322brk) 198 459.33 P
(aset\323 or \322brk <addr>\323 commands\051.) 198 447.33 T
2 F
(u) 180 428.33 T
1 F
-0.52 (\322brk address\323 returns the address expression for where the breakpoint is) 198 428.33 P
(set. This will usually be of the form ^h<handle-id>:<offset>, with both) 198 416.33 T
(<handle-id> and <offset> in hex \050followed by an \322h\323, of course\051. If the) 198 404.33 T
(breakpoint is set at an absolute address, you will get back only a single) 198 392.33 T
(hex number) 198 380.33 T
(, being the linear address at which the breakpoint is set.) 252.63 380.33 T
2 F
(u) 180 361.33 T
1 F
-0.72 (If you type \322brk list\323 with no argument, Swat will print out a listing of the) 198 361.33 P
-0.33 (currently-active breakpoints. If you give an <addr> \050address expression\051) 198 349.33 P
-0.37 (argument, however) 198 337.33 P
-0.37 (, you\325ll be returned a list of the breakpoints set at the) 286.52 337.33 P
(given address. If there are no breakpoints there, the list will be empty) 198 325.33 T
(.) 520.45 325.33 T
2 F
(u) 180 306.33 T
1 F
-0.56 ( As a shortcut, you can invoke \322brk isset\323 to see if any breakpoints are set) 198 306.33 P
(at the given address, if you\325re not interested in which ones they are.) 198 294.33 T
81 278.99 531 284 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 278.99 531 284 R
7 X
0 0 0 1 0 0 0 K
V
50 282.99 609.01 282.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 270.99 T
0 F
(cache) 99 270.99 T
0 10 Q
(Usage:) 99 253.33 T
1 F
(cache create \050lru|\336fo\051 <maxSize> [<\337ushProc>]) 180 253.33 T
(cache destroy <cache> [\337ush|no\337ush]) 180 240.33 T
(cache lookup <cache> <key>) 180 227.33 T
(cache enter <cache> <key>) 180 214.33 T
(cache invalone <cache> <entry>) 180 201.33 T
(cache invalall <cache> [\337ush|no\337ush]) 180 188.33 T
(cache key <cache> <entry>) 180 175.33 T
(cache size <cache>) 180 162.33 T
(cache maxsize <cache>) 180 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "306" 42
%%Page: "307" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(307) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(cache setmaxsize <cache> <maxSize>) 180 641.33 T
(cache getval <cache> <entry>) 180 628.33 T
(cache setval <cache> <entry> <value>) 180 615.33 T
0 F
(Examples:) 99 595.33 T
1 F
(\322var cache [cache create lru 10]\323) 180 575.33 T
(Creates a cache of 10 items that are \337ushed on a) 243 563.33 T
-0.49 (least-recently-used basis. The returned token is saved for later) 243 551.33 P
(use.) 243 539.33 T
(\322var entry [cache lookup $cache mom]\323) 180 520.33 T
(Sees if an entry with the key \322mom\323 is in the cache and saves) 243 508.33 T
(its entry token if so.) 243 496.33 T
(\322echo mom=[cache getval $cache $entry]\323) 180 477.33 T
-0.45 (Retrieves the value stored in the entry for \322mom\323 and echoes it.) 243 465.33 P
(\322cache invalone $cache $entry\323) 180 446.33 T
(Flushes the entry just found from the cache.) 243 434.33 T
(\322cache destroy $cache\323) 180 415.33 T
(Destroys the cache.) 243 403.33 T
0 F
(Synopsis:) 99 384.33 T
1 F
-0.03 (The cache command, as the name implies, maintains a cache of data that is) 180 384.33 P
(keyed by strings. When a new entry is added to an already-full cache, an) 180 371.33 T
(existing entry is automatically \337ushed based on the usage message with) 180 358.33 T
-0.59 (which the cache was created:) 180 345.33 P
4 F
-0.59 (lru) 313.92 345.33 P
1 F
-0.59 ( \050last recently used\051 or) 327.8 345.33 P
4 F
-0.59 (\336fo) 430.98 345.33 P
1 F
-0.59 ( \050\336rst in, \336rst out\051.) 445.42 345.33 P
(If) 180 332.33 T
4 F
(lru) 190.18 332.33 T
1 F
(, the least-recently-used entry is \337ushed; if) 204.06 332.33 T
4 F
(\336fo) 404.62 332.33 T
1 F
(, the oldest entry is) 419.06 332.33 T
(\337ushed.) 180 319.33 T
0 F
(Notes:) 99 299.33 T
2 F
(u) 180 279.33 T
1 F
(Unlike the \322table\323 command, the \322cache\323 command returns tokens for) 198 279.33 T
-0.5 (entries, not their values. This allows entries to be individually \337ushed or) 198 267.33 P
(their values altered.) 198 255.33 T
2 F
(u) 180 236.33 T
1 F
-0.59 (If a <\337ushProc> is speci\336ed when the cache is created, the procedure will) 198 236.33 P
(be called each time an entry is \337ushed from the cache. It will be called) 198 224.33 T
-0.58 (\322<\337ushProc> <cache> <entry>\323 where <cache> is the token for the cache,) 198 212.33 P
(and <entry> is the token for the entry being \337ushed.) 198 200.33 T
2 F
(u) 180 181.33 T
1 F
(If the maximum size of a full cache is reduced, entries will be \337ushed) 198 181.33 T
(from the cache to bring it down to the new maximum size. The) 198 169.33 T
(<\337ushProc> will be called for each of them.) 198 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "307" 43
%%Page: "308" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(308) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(If the values stored in the cache entries should not be freed when the) 198 641.33 T
(cache is destroyed, pass \322no\337ush\323 to \322cache destroy\323. The default is to) 198 629.33 T
-0.42 (\337ush \050and hence call the <\337ushProc>\051 all entries from the cache before it) 198 617.33 P
(is destroyed.) 198 605.33 T
2 F
(u) 180 586.33 T
1 F
(If the values stored in the cache entries should not be freed when the) 198 586.33 T
(cache is \337ushed, pass \322no\337ush\323 to \322cache invalall\323. The default is to call) 198 574.33 T
(the <\337ushProc> for each entry in the cache before it is actually \337ushed.) 198 562.33 T
2 F
(u) 180 543.33 T
1 F
-0.42 (If an entry is not found in the cache, \322cache lookup\323 will return an empty) 198 543.33 P
(string.) 198 531.33 T
2 F
(u) 180 512.33 T
1 F
(When an entry is created, \322cache enter\323 returns a 2-list containing the) 198 512.33 T
(entry token as its \336rst element, and an integer) 198 500.33 T
(, as its second element,) 413.03 500.33 T
(that is either non-zero or 0, to tell if the entry is new or was already) 198 488.33 T
(present, respectively) 198 476.33 T
(.) 292.44 476.33 T
81 460.99 531 466 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 460.99 531 466 R
7 X
0 0 0 1 0 0 0 K
V
50 464.99 609.01 464.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 452.99 T
0 F
(cbrk) 99 452.99 T
0 10 Q
(Usage:) 99 435.33 T
1 F
(cbrk <addr> <condition>*) 180 435.33 T
(cbrk aset <addr> <condition>*) 180 422.33 T
(cbrk tset <addr> <condition>*) 180 409.33 T
(cbrk clear <break>*) 180 396.33 T
(cbrk delete <break>*) 180 383.33 T
(cbrk enable <break>*) 180 370.33 T
(cbrk disable <break>*) 180 357.33 T
(cbrk address <break>) 180 344.33 T
(cbrk list [<addr>]) 180 331.33 T
(cbrk debug [<\337ag>]) 180 318.33 T
(cbrk isset <addr>) 180 305.33 T
(cbrk cond <break> <condition>*) 180 292.33 T
(cbrk cmd <break> [<command>]) 180 279.33 T
(cbrk delcmd <break> [<command>]) 180 266.33 T
0 F
(Examples:) 99 246.33 T
1 F
(\322cbrk W) 180 226.33 T
(inOpen di=1b80h\323) 216.48 226.33 T
-0.26 (Stops the machine when execution reaches W) 243 214.33 P
-0.26 (inOpen\050\051 with) 451.6 214.33 P
3 F
-0.27 (di) 518.11 214.33 P
1 F
(set to 1b80h.) 243 202.33 T
0 F
(Synopsis:) 99 183.33 T
1 F
(Allows you to set fast conditional breakpoints.) 180 183.33 T
0 F
(Notes:) 99 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "308" 44
%%Page: "309" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(309) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(All these subcommands function the same as for the \322brk\323 command,) 198 641.33 T
(with the exception of the \322aset\323 and \322tset\323 commands, which expect the) 198 629.33 T
(condition for the breakpoint, rather than an associated command.) 198 617.33 T
2 F
(u) 180 598.33 T
1 F
-0.09 (There are a limited number of these sorts of breakpoints that can be set) 198 598.33 P
(in the) 198 586.33 T
1 9 Q
(PC) 227.82 586.33 T
1 10 Q
( \050currently 8\051, so they should be used mostly for) 240.32 586.33 T
(heavily-travelled areas of code \050e.g. inner loops, or functions like) 198 574.33 T
3 F
(ObjCallMethodT) 198 562.33 T
(able\050\051) 283.3 562.33 T
1 F
( in the kernel\051.) 312.93 562.33 T
2 F
(u) 180 543.33 T
1 F
-0.72 (For more information on the subcommands and the format of arguments,) 198 543.33 P
(see the documentation for the \322brk\323 command.) 198 531.33 T
81 515.99 531 521 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 515.99 531 521 R
7 X
0 0 0 1 0 0 0 K
V
50 519.99 609.01 519.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 507.99 T
0 F
(event) 99 507.99 T
5 10 Q
(event <subcommand>) 99 493.33 T
1 F
(The) 180 474.33 T
3 F
(event) 200.56 474.33 T
1 F
( command provides access to Swat\325) 229.26 474.33 T
(s internal events. The) 389.65 474.33 T
(subcommands are as follows:) 180 461.33 T
3 F
(handle <eventName> <handler> [<data>]) 135 441.33 T
1 F
0.69 0.58 (The <) 198 429.33 B
4 F
0.69 0.58 (handler) 228.2 429.33 B
1 F
0.69 0.58 (> procedure is invoked each time an event of type) 268.53 429.33 B
0.69 0.15 (<) 198 417.33 B
4 F
0.69 0.15 (eventName) 204.21 417.33 B
1 F
0.69 0.15 (> is dispatched. The handler receives two arguments: an) 256.47 417.33 B
0.51 (event-speci\336c piece of data, and the given <) 198 405.33 P
4 F
0.51 (data) 401.93 405.33 P
1 F
0.51 (>. A handler procedure) 423.04 405.33 P
(should be declared) 198 393.33 T
5 F
(proc <handler> {arg data} {<body>}) 216 378.33 T
1 F
-0.26 (The) 198 357.33 P
3 F
-0.27 (handle) 218.3 357.33 P
1 F
-0.26 ( subcommand returns an <event> for later use in deleting it.) 254.04 357.33 P
4.35 1.25 (The <) 198 345.33 B
4 F
4.35 1.25 (handler) 235.22 345.33 B
1 F
4.35 1.25 (> should return one of) 280.25 345.33 B
3 F
4.49 1.25 (event_handled) 435.86 345.33 B
1 F
4.35 1.25 (,) 528.22 345.33 B
3 F
0.72 0.83 (event_not_handled) 198 333.33 B
1 F
0.69 0.83 (, or) 310.5 333.33 B
3 F
0.72 0.83 (event_stop_handling) 333.83 333.33 B
1 F
0.69 0.83 (. If it returns) 457.07 333.33 B
3 F
0.72 0.12 (event_stop_handling) 198 321.33 B
1 F
0.69 0.12 (, the event will not be dispatched to any other) 307.74 321.33 B
(handlers of the event.) 198 309.33 T
3 F
(delete <event>) 135 290.33 T
1 F
(Deletes the given event handler given by the) 198 278.33 T
3 F
(event handle) 407.1 278.33 T
1 F
( command.) 474.41 278.33 T
3 F
(dispatch <eventName> <arg>) 135 259.33 T
1 F
0.46 (Dispatches the given event with the given <) 198 247.33 P
4 F
0.46 (arg) 403.94 247.33 P
1 F
0.46 (> to all handlers of that) 419.49 247.33 P
0.69 0.48 (event. If <) 198 235.33 B
4 F
0.69 0.48 (eventName) 251.88 235.33 B
1 F
0.69 0.48 (> is a pre-def) 307.16 235.33 B
0.69 0.48 (ined event type, <) 375.98 235.33 B
4 F
0.69 0.48 (arg) 469.32 235.33 B
1 F
0.69 0.48 (> will be) 486.33 235.33 B
0.41 (converted to the appropriate type before being dispatched. Otherwise it) 198 223.33 P
(is passed as a string.) 198 211.33 T
3 F
(create) 135 192.33 T
1 F
-0.13 (Returns a number that represents a new event type. Handlers may then) 198 192.33 P
(be de\336ned for and events dispatched of the new type.) 198 180.33 T
3 F
(list) 135 161.33 T
1 F
(Lists all T) 198 161.33 T
(cl-registered events by event-name and handler function.) 244.25 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "309" 45
%%Page: "310" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(310) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The events which are currently de\336ned are:) 180 641.33 T
3 9 Q
(FULLSTOP) 135 621.33 T
1 10 Q
-0.56 (Generated when patient stops for a while. Argument is string telling why) 198 609.33 P
(the patient stopped.) 198 597.33 T
3 9 Q
(CONTINUE) 135 578.33 T
1 10 Q
-0.44 (Generated just before the patient is continued. The argument is non-zero) 198 566.33 P
(if going to single-step.) 198 554.33 T
3 9 Q
(TRACE) 135 535.33 T
1 10 Q
-0.23 (Generated when the execution of a source line completes and the patient) 198 535.33 P
(is in line-trace mode.) 198 523.33 T
3 9 Q
(ST) 135 504.33 T
(ART) 147.01 504.33 T
1 10 Q
0.69 0.06 (Generated when a new patient/thread is created. Argument is patient) 198 504.33 B
(token of the patient involved.) 198 492.33 T
3 9 Q
(ST) 135 473.33 T
(ACK) 147.01 473.33 T
1 10 Q
-0.05 (Current stack frame has changed. The argument is non-zero if the stack) 198 473.33 P
0.69 0.09 (change comes from a change in patients/threads or zero if the change) 198 461.33 B
(comes from actually going up or down the stack in the current patient.) 198 449.33 T
3 9 Q
(DET) 135 430.33 T
(ACH) 155.33 430.33 T
1 10 Q
(Detaching from the) 198 430.33 T
1 9 Q
(PC) 290.41 430.33 T
1 10 Q
(. The argument is always zero.) 302.91 430.33 T
3 9 Q
(RESET) 135 411.33 T
1 10 Q
(Returning to the top level. The argument is always zero.) 198 411.33 T
3 9 Q
(A) 135 392.33 T
(TT) 141.34 392.33 T
(ACH) 153.84 392.33 T
1 10 Q
(Attached to the) 198 392.33 T
1 9 Q
(PC) 272.08 392.33 T
1 10 Q
(. The argument is always zero.) 284.58 392.33 T
3 9 Q
(RELOAD) 135 373.33 T
1 10 Q
(Kernel was reloaded. The argument is always zero.) 198 373.33 T
3 9 Q
(CHANGE) 135 354.33 T
1 10 Q
-0.42 (Current patient has changed. The argument is the token for the previous) 198 354.33 P
(patient.) 198 342.33 T
3 9 Q
(STEP) 135 323.33 T
1 10 Q
0.35 (Machine has stepped a single instruction. The argument is the value to) 198 323.33 P
(pass to) 198 311.33 T
3 F
(patient stop) 233.01 311.33 T
1 F
( if you wish the machine to stay stopped.) 295.51 311.33 T
3 9 Q
(STOP) 135 292.33 T
1 10 Q
0.69 0.21 (Machine has hit a breakpoint. The argument is the value to pass to) 198 292.33 B
3 F
(patient stop) 198 280.33 T
1 F
( if you wish the machine to stay stopped.) 260.5 280.33 T
3 9 Q
(INT) 135 261.33 T
1 10 Q
-0.31 (Machine has hit some other interrupt that\325) 198 261.33 P
-0.31 (s being caught. The argument) 393.91 261.33 P
0.69 0.05 (is the interrupt number) 198 249.33 B
0.69 0.05 (. The machine will remain stopped unless it is) 310.52 249.33 B
(continued with continue-patient.) 198 237.33 T
81 221.99 531 227 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 221.99 531 227 R
7 X
0 0 0 1 0 0 0 K
V
50 225.99 609.01 225.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 213.99 T
0 F
(handle) 99 213.99 T
0 10 Q
(Usage:) 99 196.33 T
1 F
(handle lookup <id>) 180 196.33 T
(handle \336nd <address>) 180 183.33 T
(handle all) 180 170.33 T
(handle nointerest <interest-record>) 180 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "310" 46
%%Page: "311" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(311) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(handle interest <handle> <proc> [<data>+]) 180 641.33 T
(handle segment <handle>) 180 628.33 T
(handle size <handle>) 180 615.33 T
(handle state <handle>) 180 602.33 T
(handle owner <handle>) 180 589.33 T
(handle patient <handle>) 180 576.33 T
(handle other <handle>) 180 563.33 T
(handle id <handle>) 180 550.33 T
(handle isthread <handle>) 180 537.33 T
(handle iskernel <handle>) 180 524.33 T
(handle is\336le <handle>) 180 511.33 T
(handle isvm <handle>) 180 498.33 T
(handle ismem <handle>) 180 485.33 T
0 F
(Examples:) 99 465.33 T
1 F
(\322handle lookup [read-reg bx]\323) 180 445.33 T
(get the handle token for the handle whose) 243 433.33 T
1 9 Q
(ID) 440.06 433.33 T
1 10 Q
( is in the) 450.73 433.33 T
1 9 Q
(BX) 493.89 433.33 T
1 10 Q
(register) 243 421.33 T
(.) 278.18 421.33 T
(\322handle interest $h ob-interest-proc [concat si=$chunk $message]\323) 180 402.33 T
(call ob-interest-proc, passing the list {si=$chunk $message},) 243 390.33 T
-0.32 (whenever the state of the handle whose token is in $h changes.) 243 378.33 P
(\322handle patient $h\323) 180 359.33 T
-0.48 (get the token for the patient that owns the handle whose token) 243 347.33 P
(is in $h) 243 335.33 T
(\322handle all\323) 180 316.33 T
-0.21 (get the list of the) 243 304.33 P
1 9 Q
-0.19 (ID) 323.27 304.33 P
1 10 Q
-0.21 (\325) 333.93 304.33 P
-0.21 (s of all handles currently in Swat\325) 335.6 304.33 P
-0.21 (s handle) 489.56 304.33 P
(table.) 243 292.33 T
0 F
(Synopsis:) 99 273.33 T
1 F
-0.04 (The \322handle\323 command provides access to the structures Swat uses to track) 180 273.33 P
(memory and thread allocation on the) 180 260.33 T
1 9 Q
(PC) 353.54 260.33 T
1 10 Q
(.) 366.04 260.33 T
0 F
(Notes:) 99 240.33 T
2 F
(u) 180 220.33 T
1 F
(As with most other commands that deal with Swat structures, you use) 198 220.33 T
(this one by calling a lookup function \050the \322lookup\323 and \322\336nd\323) 198 208.33 T
-0.34 (subcommands\051 to obtain a token that you use for further manipulations.) 198 196.33 P
(A handle token is also returned by a few other commands, such as) 198 184.33 T
(addr) 198 172.33 T
(-parse.) 219.3 172.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "311" 47
%%Page: "312" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(312) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.28 (Handle tokens are valid only until the machine is continued. If you need) 198 641.33 P
(to keep the token for a while, you will need to register interest in the) 198 629.33 T
(handle using the \322interest\323 subcommand. Most handles tokens will) 198 617.33 T
(simply be cached while the machine is stopped and \337ushed from the) 198 605.33 T
(cache when the machine continues. Only those handles for which all) 198 593.33 T
(state changes must be known remain in Swat\325) 198 581.33 T
(s handle table. For) 410.27 581.33 T
(example, when a conditional breakpoint has been registered with the) 198 569.33 T
(stub using the segment of a handle, the condition for that breakpoint) 198 557.33 T
(must be updated immediately should the memory referred to by the) 198 545.33 T
-0.19 (handle be moved, swapped or discarded. Keeping the number of tracked) 198 533.33 P
-0.4 (handles low reduces the number of calls the stub must make to tell Swat) 198 521.33 P
(about handle-state changes.) 198 509.33 T
2 F
(u) 180 490.33 T
1 F
(The <id> passed to the \322lookup\323 subcommand is an integer) 198 490.33 T
(. Its default) 468.31 490.33 T
(radix is decimal, but you can specify the radix to use in all the usual) 198 478.33 T
(ways. The value returned is the token to use to obtain further) 198 466.33 T
(information about the handle.) 198 454.33 T
2 F
(u) 180 435.33 T
1 F
(\322handle size\323 returns the number of bytes allocated to the handle.) 198 435.33 T
2 F
(u) 180 416.33 T
1 F
(\322handle segment\323 returns the handle\325) 198 416.33 T
(s segment \050if it\325) 370.42 416.33 T
(s resident\051 in) 440.8 416.33 T
(decimal, as it\325) 198 404.33 T
(s intended for use by T) 261.17 404.33 T
(cl programs, not people.) 365.74 404.33 T
2 F
(u) 180 385.33 T
1 F
(\322handle owner\323 returns the token of the handle that owns the given) 198 385.33 T
(handle, not its) 198 373.33 T
1 9 Q
(ID) 267.46 373.33 T
1 10 Q
(.) 278.12 373.33 T
2 F
(u) 180 354.33 T
1 F
(\322handle all\323 returns a list of handle) 198 354.33 T
1 9 Q
(ID) 363.77 354.33 T
1 10 Q
( numbers not a list of handle) 374.43 354.33 T
(tokens. The list is only those handles currently known to Swat.) 198 342.33 T
2 F
(u) 180 323.33 T
1 F
-0.73 (\322handle interest\323 tells Swat you wish to be informed when the handle you) 198 323.33 P
-0.63 (pass changes state in some way) 198 311.33 P
-0.63 (. The procedure <proc> will be called with) 339.86 311.33 P
-0.01 (two or more arguments. The \336rst is the token of the handle whose state) 198 299.33 P
(has changed, and the second is the state change the handle has) 198 287.33 T
(undergone, taken from the following set of strings:) 198 275.33 T
3 F
(swapin) 180 256.33 T
1 F
(Block swapped in from disk/memory) 243 256.33 T
3 F
(load) 180 237.33 T
1 F
(Resource freshly loaded from disk) 243 237.33 T
3 F
(swapout) 180 218.33 T
1 F
(Block swapped to disk/memory) 243 218.33 T
3 F
(discard) 180 199.33 T
1 F
(Block discarded) 243 199.33 T
3 F
(resize) 180 180.33 T
1 F
(Block changed size and maybe moved) 243 180.33 T
3 F
(move) 180 161.33 T
1 F
(Block moved on heap) 243 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "312" 48
%%Page: "313" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(313) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(free) 180 641.33 T
1 F
(Block has been freed) 243 641.33 T
3 F
(fchange) 180 622.33 T
1 F
(Block\325) 243 622.33 T
(s) 270.41 622.33 T
3 F
(HeapFlags) 277.82 622.33 T
1 F
( changed) 333 622.33 T
(Any further arguments are taken from the <data>+ arguments provided) 180 603.33 T
(when you expressed interest in the handle. This subcommand returns a) 180 590.33 T
-0.58 (token for an interest record that you pass to \322handle nointerest\323 when you no) 180 577.33 P
(longer care about the handle. When the block is freed \050the state change is) 180 564.33 T
(\322free\323\051, there is no need to call \322handle nointerest\323 as the interest record is) 180 551.33 T
(automatically deleted.) 180 538.33 T
2 F
(u) 180 518.33 T
1 F
-0.19 (\322handle state\323 returns an integer indicating the state of the handle. The) 198 518.33 P
(integer is a mask of bits that mean different things:) 198 506.33 T
-0.14 (When the integer is) 180 355.33 P
1 9 Q
-0.12 (AND) 273.35 355.33 P
1 10 Q
-0.14 (-ed with the mask for T) 294.18 355.33 P
-0.14 (ype \0500xf8000\051, the following) 401.33 355.33 P
(values indicate the following types of handles:) 180 342.33 T
81 144 531 648 C
171 371 531 503 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
171 371 531 503 R
7 X
0 0 0 1 0 0 0 K
V
180 282 531 495.5 R
V
0 10 Q
0 X
(T) 180 488.83 T
(able) 185.37 488.83 T
(5-) 208.16 488.83 T
(3) 217.05 488.83 T
4 F
(The State Subcommand: Block Information) 225.39 488.83 T
180 467.52 531 472.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 467.52 531 472.5 R
7 X
0 0 0 1 0 0 0 K
V
152 470.48 755 470.48 2 L
V
0.5 H
2 Z
0 X
N
171 371 531 503 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Mask) 180 475.83 T
(State) 252 475.83 T
(Mask) 360 475.83 T
(State) 432 475.83 T
1 F
(0xf8000) 180 458.86 T
(Type) 252 458.86 T
(0x00200) 360 458.86 T
(Attached) 432 458.86 T
(0x00040) 180 446.86 T
(Discarded) 252 446.86 T
(0x00008) 360 446.86 T
(Fixed) 432 446.86 T
(0x00001) 180 434.86 T
(Resident) 252 434.86 T
(0x00800) 360 434.86 T
(LMem) 432 434.86 T
(0x00100) 180 422.86 T
(Process) 252 422.86 T
(0x00020) 360 422.86 T
(Swapped) 432 422.86 T
(0x00004) 180 410.86 T
(Discardable) 252 410.86 T
(0x00400) 360 410.86 T
(Kernel) 432 410.86 T
(0x00080) 180 398.86 T
(Resource) 252 398.86 T
(0x00010) 360 398.86 T
(Shared) 432 398.86 T
(0x00002) 180 386.86 T
(Swapable) 252 386.86 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
171 153 531 339 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
171 153 531 339 R
7 X
0 0 0 1 0 0 0 K
V
180 114 531 327.5 R
V
0 10 Q
0 X
(T) 180 320.83 T
(able) 185.37 320.83 T
(5-) 208.16 320.83 T
(4) 217.05 320.83 T
4 F
(The State Subcommand: Block T) 225.39 320.83 T
(ype) 375.61 320.83 T
180 299.52 531 304.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 299.52 531 304.5 R
7 X
0 0 0 1 0 0 0 K
V
152 302.48 755 302.48 2 L
V
0.5 H
2 Z
0 X
N
171 153 531 339 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Mask) 180 307.83 T
(State) 252 307.83 T
1 F
(0xe0000) 180 290.86 T
(Thread) 252 290.86 T
(0xb0000) 180 278.86 T
(Semaphore) 252 278.86 T
(0x80000) 180 266.86 T
(Event with stack data chain) 252 266.86 T
(0x70000) 180 254.86 T
(Stack data chain element) 252 254.86 T
(0xd0000) 180 242.86 T
(File) 252 242.86 T
(0xa0000) 180 230.86 T
(Saved block) 252 230.86 T
(0x08000) 180 218.86 T
(Memory) 252 218.86 T
(0xc0000) 180 206.86 T
1 9 Q
(VM) 252 206.86 T
1 10 Q
( File) 266.99 206.86 T
(0x90000) 180 194.86 T
(Event) 252 194.86 T
(0x60000) 180 182.86 T
(Timer) 252 182.86 T
(0x40000) 180 170.86 T
(Event queue) 252 170.86 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "313" 49
%%Page: "314" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(314) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(\322handle other\323 returns the handle\325) 198 641.33 T
(s otherInfo \336eld. Note: This isn\325) 355.97 641.33 T
(t) 501.36 641.33 T
-0.58 (necessarily the otherInfo \336eld from the) 198 629.33 P
1 9 Q
-0.52 (PC) 377.31 629.33 P
1 10 Q
-0.58 (. E.g., for resource handles, it\325) 389.82 629.33 P
-0.58 (s) 524.17 629.33 P
(the symbol token of the module for the handle.) 198 617.33 T
81 601.99 531 607 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 601.99 531 607 R
7 X
0 0 0 1 0 0 0 K
V
50 605.99 609.01 605.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 593.99 T
0 F
(patient) 99 593.99 T
0 10 Q
(Usage:) 99 576.33 T
1 F
(patient \336nd <name>) 180 576.33 T
(patient name [<patient>]) 180 563.33 T
(patient fullname [<patient>]) 180 550.33 T
(patient data [<patient>]) 180 537.33 T
(patient threads [<patient>]) 180 524.33 T
(patient resources [<patient>]) 180 511.33 T
(patient libs [<patient>]) 180 498.33 T
(patient path [<patient>]) 180 485.33 T
(patient all) 180 472.33 T
(patient stop [<addr>]) 180 459.33 T
0 F
(Examples:) 99 439.33 T
1 F
( \322patient \336nd geos\323) 180 419.33 T
-0.29 (Returns the patient token for the kernel, if it\325) 243 407.33 P
-0.29 (s been loaded yet.) 449.99 407.33 P
( \322patient fullname $p\323) 180 388.33 T
( Returns the permanent name for the patient whose token is) 243 376.33 T
(stored in the variable p.) 243 364.33 T
( \322patient stop $data\323) 180 345.33 T
(T) 243 333.33 T
(ells the dispatcher of the) 248.75 333.33 T
1 9 Q
(STEP) 365.61 333.33 T
1 10 Q
( event that it should keep the) 389.78 333.33 T
(machine stopped when the) 243 321.33 T
1 9 Q
(STEP) 369.12 321.33 T
1 10 Q
( event has been handled by) 393.29 321.33 T
(everyone.) 243 309.33 T
0 F
(Synopsis:) 99 290.33 T
1 F
(This command provides access to the various pieces of information that are) 180 290.33 T
(maintained for each patient \050geode\051 loaded by) 180 277.33 T
1 9 Q
(GEOS) 393.73 277.33 T
1 10 Q
(.) 419.9 277.33 T
0 F
(Notes:) 99 257.33 T
2 F
(u) 180 237.33 T
1 F
(Subcommands may be abbreviated uniquely) 198 237.33 T
(.) 401.01 237.33 T
2 F
(u) 180 218.33 T
1 F
(Swat always has the notion of a \322current patient\323, whose name is) 198 218.33 T
(displayed in the prompt. It is this patient that is used if you do not) 198 206.33 T
-0.08 (provide a token to one of the subcommands that accepts a patient token.) 198 194.33 P
2 F
(u) 180 175.33 T
1 F
(\322patient name\323 returns the name of a patient. The name is the non-) 198 175.33 T
-0.14 (extension portion of the geode\325) 198 163.33 P
-0.14 (s permanent name. It will have a number) 337.26 163.33 P
(added to it if more than one instance of the geode is active on the PC.) 198 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "314" 50
%%Page: "315" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(315) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Thus, if two GeoW) 198 641.33 T
(rites are active, there will be two patients in Swat:) 282.83 641.33 T
(\322write\323 and \322write2\323.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
(\322patient fullname\323 returns the full permanent name of the patient. It is) 198 610.33 T
(padded with spaces to make up a full 12-character string. This doesn\325) 198 598.33 T
(t) 518.05 598.33 T
(mean you can obtain the non-extension part by extracting the 0th) 198 586.33 T
-0.14 (element of the result with the \322index\323 command, however; you\325ll have to) 198 574.33 P
-0.61 (use the \322range\323 command to get the \336rst 8 characters, then use \322index\323 to) 198 562.33 P
(trim the trailing spaces off, if you want to.) 198 550.33 T
2 F
(u) 180 531.33 T
1 F
(\322patient data\323 returns a three-element list: {<name> <fullname>) 198 531.33 T
-0.49 (<thread-number>} <name> and <fullname> are the same as returned by) 198 519.33 P
(the \322name\323 and \322fullname\323 subcommands. <thread-number> is the) 198 507.33 T
(number of the current thread for the patient. Each patient has a single) 198 495.33 T
(thread that is the one the user looked at most recently) 198 483.33 T
(, and that is its) 448.03 483.33 T
(current thread. The current thread of the current patient is, of course,) 198 471.33 T
(the current thread for the whole debugger) 198 459.33 T
(.) 391.51 459.33 T
2 F
(u) 180 440.33 T
1 F
(\322patient threads\323 returns a list of tokens, one for each of the patient\325) 198 440.33 T
(s) 512.85 440.33 T
(threads, whose elements can be passed to the \322thread\323 command to) 198 428.33 T
(obtain more information about the patient\325) 198 416.33 T
(s threads \050such as their) 395.26 416.33 T
(numbers, handle IDs, and the contents of their registers\051.) 198 404.33 T
2 F
(u) 180 385.33 T
1 F
(\322patient resources\323 returns a list of tokens, one for each of the patient\325) 198 385.33 T
(s) 521.17 385.33 T
(resources, whose elements can be passed to the \322handle\323 command to) 198 373.33 T
-0.67 (obtain more information about the patient\325) 198 361.33 P
-0.67 (s resources \050for example, their) 391.93 361.33 P
(names and handle IDs\051.) 198 349.33 T
2 F
(u) 180 330.33 T
1 F
-0.46 (\322patient libs\323 returns a list of patient tokens, one for each of the patient\325) 198 330.33 P
-0.46 (s) 524.05 330.33 P
(imported libraries. The kernel has all the loaded device drivers as its) 198 318.33 T
(\322imported\323 libraries.) 198 306.33 T
2 F
(u) 180 287.33 T
1 F
(\322patient path\323 returns the absolute path of the patient\325) 198 287.33 T
(s executable.) 450.82 287.33 T
2 F
(u) 180 268.33 T
1 F
-0.51 (\322patient all\323 returns a list of the tokens of all the patients known to Swat.) 198 268.33 P
2 F
(u) 180 249.33 T
1 F
-0.26 (\322patient stop\323 is used only in STEP) 198 249.33 P
-0.26 (, STOP and ST) 357.22 249.33 P
-0.26 (ART event handlers to) 424.81 249.33 P
-0.84 (indicate you want the machine to remain stopped once the event has been) 198 237.33 P
(dispatched to all interested parties. <addr> is the argument passed in) 198 225.33 T
(the STEP and STOP events. A ST) 198 213.33 T
(ART event handler should pass) 353.79 213.33 T
(nothing.) 198 201.33 T
2 F
(u) 180 182.33 T
1 F
-0.25 (A number of other commands provide patient tokens. \322patient \336nd\323 isn\325) 198 182.33 P
-0.25 (t) 524.58 182.33 P
(the only way to get one.) 198 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "315" 51
%%Page: "316" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(316) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
81 642.99 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 642.99 531 648 R
7 X
0 0 0 1 0 0 0 K
V
50 646.99 609.01 646.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 634.99 T
0 F
(src) 99 634.99 T
0 10 Q
(Usage:) 99 617.33 T
1 F
(src line <addr>) 180 617.33 T
(src read <\336le> <line>) 180 604.33 T
(src cache [<max>]) 180 591.33 T
(src addr <\336le> <line> [<patient>]) 180 578.33 T
0 F
(Examples:) 99 558.33 T
1 F
(\322src line cs:ip\323) 180 538.33 T
(Returns a two-list holding the source-line number) 243 526.33 T
(, and the) 472.82 526.33 T
-0.29 (absolute path of the \336le in which it lies \050not in this order\051, that) 243 514.33 P
(encompasses) 243 502.33 T
1 9 Q
(CS:IP) 305.41 502.33 T
1 10 Q
(.) 328.46 502.33 T
(\322src read /pcgeos/appl/sdk_c/hello/hello.goc 64\323) 180 483.33 T
(Reads the single given source line from the given \336le.) 243 471.33 T
(\322src addr icdecode.c 279\323) 180 452.33 T
(Returns an address-list for the start of the code produced for) 243 440.33 T
(the given line.) 243 428.33 T
(\322src cache 10\323) 180 409.33 T
(Allow 10 source \336les to be open at a time. This is the default.) 243 397.33 T
0 F
(Synopsis:) 99 378.33 T
1 F
-0.75 (The \322src\323 command allows the T) 180 378.33 P
-0.75 (cl programmer to manipulate the source- line) 324 378.33 P
(maps contained in all the geodes\325 symbol \336les.) 180 365.33 T
0 F
(Notes:) 99 345.33 T
2 F
(u) 180 325.33 T
1 F
-0.6 (The \322src line\323 commands returns its list as {<\336le> <line>}, with the <\336le>) 198 325.33 P
-0.1 (being absolute. If no source line can be found, the empty list is returned.) 198 313.33 P
2 F
(u) 180 294.33 T
1 F
(The <\336le> given to the \322src read\323 command must be absolute, as the) 198 294.33 T
(procedure using this command may well be wrong as to Swat\325) 198 282.33 T
(s current) 481.93 282.33 T
(directory) 198 270.33 T
(. T) 238.36 270.33 T
(ypically this name will come from the return value of a \322src) 250.07 270.33 T
(line\323 command, so you needn\325) 198 258.33 T
(t worry) 333.76 258.33 T
(.) 366.35 258.33 T
2 F
(u) 180 239.33 T
1 F
-0.42 (The line returned by \322src read\323 contains no tabs and does not include the) 198 239.33 P
(line terminator for the line \050the <lf> for) 198 227.33 T
1 9 Q
(UNIX) 382.9 227.33 T
1 10 Q
(, or the <cr><lf> pair for) 407.57 227.33 T
1 9 Q
(MS-DOS) 198 215.33 T
1 10 Q
(\051.) 234.84 215.33 T
2 F
(u) 180 196.33 T
1 F
-0.28 (\322src addr\323 returns an address-list, as returned from \322addr) 198 196.33 P
-0.28 (-parse\323, not an) 461.47 196.33 P
(address expression, as you would) 198 184.33 T
4 F
(pass) 353.94 184.33 T
1 F
( to \322addr) 374.3 184.33 T
(-parse\323. If the <\336le> and) 413.94 184.33 T
-0.12 (<line> cannot be mapped to an address, the result will be the empty list.) 198 172.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "316" 52
%%Page: "317" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(317) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The <\336le> given to \322src addr\323 must be the name that was given to the) 198 641.33 T
(assembler/compiler) 198 629.33 T
(. This includes any leading path if the \336le wasn\325) 286.71 629.33 T
(t in) 507.5 629.33 T
(the current directory when the assembler/compiler was run.) 198 617.33 T
2 F
(u) 180 598.33 T
1 F
(\322src cache\323 returns the current \050or new\051 number of open \336les that are) 198 598.33 T
(cached.) 198 586.33 T
81 570.99 531 576 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 570.99 531 576 R
7 X
0 0 0 1 0 0 0 K
V
50 574.99 609.01 574.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 562.99 T
0 F
(symbol) 99 562.99 T
0 10 Q
(Usage:) 99 545.33 T
1 F
(symbol \336nd <class> <name> [<scope>]) 180 545.33 T
(symbol faddr <class> <addr>) 180 532.33 T
(symbol match <class> <pattern>) 180 519.33 T
(symbol scope <symbol>) 180 506.33 T
(symbol name <symbol>) 180 493.33 T
(symbol fullname <symbol>) 180 480.33 T
(symbol class <symbol>) 180 467.33 T
(symbol type <symbol>) 180 454.33 T
(symbol get <symbol>) 180 441.33 T
(symbol patient <symbol>) 180 428.33 T
(symbol tget <symbol>) 180 415.33 T
(symbol addr <symbol>) 180 402.33 T
(symbol foreach <scope> <class> <callback> [<data>]) 180 389.33 T
0 F
(Examples:) 99 369.33 T
1 F
(\322symbol \336nd type LMemT) 180 349.33 T
(ype\323) 298.94 349.33 T
(Locate a type de\336nition named LMemT) 243 337.33 T
(ype) 424.73 337.33 T
(\322symbol faddr proc cs:ip\323) 180 318.33 T
(Locate the procedure in which) 243 306.33 T
1 9 Q
(CS:IP) 385.22 306.33 T
1 10 Q
( lies.) 409.56 306.33 T
(\322symbol faddr {proc label} cs:ip\323) 180 287.33 T
(Locate the procedure or label just before cs:ip.) 243 275.33 T
(\322symbol fullname $sym\323) 180 256.33 T
(Fetch the full name of the symbol whose token is in the $sym) 243 244.33 T
(variable.) 243 232.33 T
(\322symbol scope $sym\323) 180 213.33 T
-0.81 (Fetch the token of the scope containing the passed symbol. This) 243 201.33 P
(will give the structure containing a structure \336eld, or the) 243 189.33 T
(procedure containing a local variable, for example.) 243 177.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "317" 53
%%Page: "318" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(318) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
0 10 Q
0 X
(Synopsis:) 99 641.33 T
1 F
(Provides information on the symbols for all currently-loaded patients. Like) 180 641.33 T
(many of Swat\325) 180 628.33 T
(s commands, this operates by using a lookup function \050the) 245.02 628.33 T
(\322\336nd\323, \322faddr\323, \322match\323, or \322foreach\323 subcommands\051 to obtain a token for a) 180 615.33 T
-0.54 (piece of data that\325) 180 602.33 P
-0.54 (s internal to Swat. Given this token, you then use the other) 260.24 602.33 P
(subcommands \050such as \322name\323 or \322get\323\051 to obtain information about the) 180 589.33 T
(symbol you looked up.) 180 576.33 T
0 F
(Notes:) 99 556.33 T
2 F
(u) 180 536.33 T
1 F
(There are many types of symbols that have been grouped into classes) 198 536.33 T
(that may be manipulated with this command. For a list of the symbol) 198 524.33 T
-0.28 (types and their meaning, type \322help symbol-types\323. The type of a symbol) 198 512.33 P
(can be obtained with the \322symbol type\323 command.) 198 500.33 T
2 F
(u) 180 481.33 T
1 F
(The symbol classes are as follows:) 198 481.33 T
3 F
(type) 180 462.33 T
1 F
(describes any structured type: typedef, struct, record, etype,) 243 462.33 T
(union. Symbols of this class may also be used in place of type) 243 450.33 T
(tokens \050see the \322type\323 command\051.) 243 438.33 T
3 F
(\336eld) 180 419.33 T
1 F
(describes a \336eld in a structured type: \336eld, bit\336eld.) 243 419.33 T
3 F
(enum) 180 400.33 T
1 F
(describes a member of an enumerated type: enum, message.) 243 400.33 T
3 F
(const) 180 381.33 T
1 F
(a constant de\336ned with) 243 381.33 T
1 9 Q
(EQU) 353.94 381.33 T
1 10 Q
(:) 374.77 381.33 T
4 F
(const) 380.33 381.33 T
1 F
(.) 403.85 381.33 T
3 F
(var) 180 362.33 T
1 F
(describes any variable symbol: var) 243 362.33 T
(, chunk, locvar) 401.55 362.33 T
(, class,) 468.59 362.33 T
(masterclass, variantclass.) 243 350.33 T
3 F
(locvar) 180 331.33 T
1 F
(describes any local variable symbol: locvar) 243 331.33 T
(, locstatic.) 438.22 331.33 T
3 F
(scope) 180 312.33 T
1 F
(describes any symbol that holds other symbols within it:) 243 312.33 T
(module, proc, blockstart, struct, union, record, etype.) 243 300.33 T
3 F
(proc) 180 281.33 T
1 F
(describes only proc symbols.) 243 281.33 T
3 F
(label) 180 262.33 T
1 F
(describes any code-related symbol: label, proc, loclabel.) 243 262.33 T
3 F
(onstack) 180 243.33 T
1 F
(describes only symbols created by the directive.) 243 243.33 T
3 F
(module) 180 224.33 T
1 F
(describes only segment/group symbols.) 243 224.33 T
3 F
(pro\336le) 180 205.33 T
1 F
(describes a symbol that marks where pro\336ling code was) 243 205.33 T
(inserted by a compiler or assembler) 243 193.33 T
(.) 406.72 193.33 T
2 F
(u) 180 174.33 T
1 F
-0.1 (The <class> argument for the \322\336nd\323, \322faddr\323 and \322match\323 subcommands) 198 174.33 P
(may be a single class, or a space-separated list of classes. For example,) 198 162.33 T
(\322symbol faddr {proc label}) 198 150.33 T
1 9 Q
(CS:IP) 319.12 150.33 T
1 10 Q
(\323 would \336nd the symbol closest to) 343.46 150.33 T
1 9 Q
(CS:IP) 499.78 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "318" 54
%%Page: "319" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(319) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\050but whose address is still below or equal to) 198 641.33 T
1 9 Q
(CS:IP) 402.12 641.33 T
1 10 Q
(\051 that is either a) 426.46 641.33 T
(procedure or a label.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
-0.33 (The \322symbol \336nd\323 command locates a symbol given its name \050which may) 198 610.33 P
(be a symbol path\051.) 198 598.33 T
2 F
(u) 180 579.33 T
1 F
(The \322symbol faddr\323 command locates a symbol that is closest to the) 198 579.33 T
(passed address.) 198 567.33 T
2 F
(u) 180 548.33 T
1 F
-0.14 (A symbol\325) 198 548.33 P
-0.14 (s \322fullname\323 is the symbol path, from the current patient, that) 242.13 548.33 P
-0.72 (uniquely identi\336es the symbol. Thus if a procedure-local variable belongs) 198 536.33 P
(to the current patient, the fullname would be) 198 524.33 T
( <segment>::<procedure>::<name>) 198 512.33 T
-0.18 ( where <segment> is the segment holding the <procedure>, which is the) 198 500.33 P
(procedure for which the local variable named <name> is de\336ned.) 198 488.33 T
2 F
(u) 180 469.33 T
1 F
(Y) 198 469.33 T
(ou can force the prepending of the owning patient to the fullname by) 203.93 469.33 T
(passing <with-patient> as a non-empty argument \050\322yes\323 or \3221\323 are both) 198 457.33 T
(\336ne arguments, as is \322with-patient\323\051.) 198 445.33 T
2 F
(u) 180 426.33 T
1 F
(The \322symbol get\323 commands provides different data for each symbol) 198 426.33 T
(class, as follows:) 198 414.33 T
(var) 180 395.33 T
(, locvar) 194.63 395.33 T
(, chunk: {<addr> <sclass> <type>}) 227.41 395.33 T
-0.17 (<addr> is the symbol\325) 243 383.33 P
-0.17 (s address as for the \322addr\323 subcommand,) 341.46 383.33 P
-0.21 (<sclass> is the storage class of the variable and is one of static) 243 371.33 P
-0.87 (\050a statically allocated variable\051, lmem \050an lmem chunk\051, local \050a) 243 359.33 P
-0.52 (local variable below the frame pointer\051, param \050a local variable) 243 347.33 P
-0.35 (above the frame pointer\051, or reg \050a register variable; address is) 243 335.33 P
-0.64 (the machine register number -- and index into the list returned) 243 323.33 P
(by the \322current-registers\323 command\051.) 243 311.33 T
(object class: {<addr> <sclass> <type> <\337ag> <super>}) 180 292.33 T
(\336rst three elements same as for other variables. <\337ag> is) 243 280.33 T
-0.48 (\322variant\323 if the class is a variant class, \322master\323 if the class is a) 243 268.33 P
(master class, or empty if the class is nothing special. <super>) 243 256.33 T
(is the symbol token of the class\325) 243 244.33 T
(s superclass.) 388.4 244.33 T
(label-class: {<addr> \050near|far\051}) 180 225.33 T
-0.17 (<addr> is the symbol\325) 243 213.33 P
-0.17 (s address as for the \322addr\323 subcommand.) 341.46 213.33 P
-0.06 (The second element is \322near\323 or \322far\323 depending on the type of) 243 201.33 P
(label involved.) 243 189.33 T
(\336eld-class: {<bit-offset> <bit-width> <\336eld-type> <struct-type>}) 180 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "319" 55
%%Page: "320" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(320) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(<bit-offset> is the offset of the \336eld from the structure/union/record\325) 180 641.33 T
(s base) 491.92 641.33 T
(expressed in bits. <bit-width> is the width of the \336eld, in bits.) 243 629.33 T
(<\336eld-type> is the type for the \336eld itself, while <struct-type>) 243 617.33 T
(is the token for the containing structured type.) 243 605.33 T
(const: {<value>}) 180 586.33 T
(<value> is just the symbol\325) 243 574.33 T
(s value.) 366.07 574.33 T
(enum-class: {<value> <etype>}) 180 555.33 T
-0.87 (<value> is the symbol\325) 243 543.33 P
-0.87 (s value. <etype> is the enumerated type\325) 343.09 543.33 P
-0.87 (s) 524.46 543.33 P
(symbol.) 243 531.33 T
(blockstart, blockend: {<addr>}) 180 512.33 T
(<addr> is the address bound to the symbol.) 243 500.33 T
(onstack: {<addr> <data>}) 180 481.33 T
(<addr> is the address at which the ON_ST) 243 469.33 T
(ACK was declared.) 439.97 469.33 T
(<data> is the arguments given to the ON_ST) 243 457.33 T
(ACK directive.) 450.35 457.33 T
(module: {<patient>}) 180 438.33 T
(<patient> is the token for the patient owning the module.) 243 426.33 T
2 F
(u) 180 407.33 T
1 F
(A related command, \322symbol tget\323 will fetch the type token for symbols) 198 407.33 T
(that have data types \050var) 198 395.33 T
(-, \336eld- and enum-class symbols\051.) 314.51 395.33 T
2 F
(u) 180 376.33 T
1 F
-0.33 (\322symbol addr\323 can be used to obtain the address of symbols that actually) 198 376.33 P
(have one \050var) 198 364.33 T
(-, locvar) 260.23 364.33 T
(- and label-class symbols\051. For locvar symbols, the) 296.9 364.33 T
-0.74 (address is an offset from the frame pointer \050positive or negative\051. For var) 198 352.33 P
-0.74 (-) 525.63 352.33 P
(and label-class symbols \050remember that a procedure is a label-class) 198 340.33 T
(symbols\051, the returned integer is the offset of the symbol within its) 198 328.33 T
(segment.) 198 316.33 T
2 F
(u) 180 297.33 T
1 F
(\322symbol patient\323 returns the token of the patient to which the symbol) 198 297.33 T
(belongs.) 198 285.33 T
2 F
(u) 180 266.33 T
1 F
(\322symbol foreach\323 will call the <callback> procedure for each symbol in) 198 266.33 T
(<scope> \050a symbol token\051 that is in one of the classes given in the list) 198 254.33 T
(<class>. The \336rst argument will be the symbol token itself, while the) 198 242.33 T
(second argument will be <data>, if given. If <data> wasn\325) 198 230.33 T
(t provided,) 463.22 230.33 T
(<callback> will receive only 1 argument. <callback> should return 0 to) 198 218.33 T
(continue iterating, or non-zero to stop. A non-integer return is assumed) 198 206.33 T
(to mean stop. \322symbol foreach\323 returns whatever the last call to) 198 194.33 T
(<callback> returned.) 198 182.33 T
2 F
(u) 180 163.33 T
1 F
(By default, \322symbol scope\323 will return the physical scope of the symbol.) 198 163.33 T
-0.65 (The physical scope of a symbol is the symbol for the segment in which the) 198 151.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "320" 56
%%Page: "321" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(321) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(symbol lies, in contrast to the lexical scope of a symbol, which is where) 198 641.33 T
(the name of the symbol lies. The two scopes correspond for all symbols) 198 629.33 T
(but static variables local to a procedure. T) 198 617.33 T
(o obtain the lexical scope of a) 391.19 617.33 T
(symbol, pass <lexical> as a non-zero number) 198 605.33 T
(.) 403.48 605.33 T
0 F
(See Also:) 99 586.33 T
1 F
(symbol-types, type) 180 586.33 T
81 569.99 531 575 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 569.99 531 575 R
7 X
0 0 0 1 0 0 0 K
V
50 573.99 609.01 573.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 561.99 T
0 F
(table) 99 561.99 T
0 10 Q
(Usage:) 99 544.33 T
1 F
(table create [<initBuckets>]) 180 544.33 T
( table destroy <table>) 180 531.33 T
( table enter <table> <key> <value>) 180 518.33 T
( table lookup <table> <key>) 180 505.33 T
( table remove <table> <key>) 180 492.33 T
0 F
(Examples:) 99 472.33 T
1 F
(\322var kitchen [table create 32]\323) 180 452.33 T
(Create a new table with 32 hash buckets initially) 243 440.33 T
(.) 469.55 440.33 T
(\322table enter $t tbrk3 {1 2 3}\323) 180 421.33 T
-0.72 (Enter the value \3221 2 3\323 under the key \322tbrk3\323 in the table whose) 243 409.33 P
(token is stored in the variable t.) 243 397.33 T
(\322table lookup $t tbrk4\323) 180 378.33 T
-0.8 (Fetch the value, if any) 243 366.33 P
-0.8 (, stored under the key \322tbrk4\323 in the table) 342.41 366.33 P
(whose token is stored in the variable t.) 243 354.33 T
(\322table remove $t tbrk3\323) 180 335.33 T
(Remove the data stored in the table, whose token is stored in) 243 323.33 T
(the variable t, under the key \322tbrk3\323) 243 311.33 T
(\322table destroy $t\323) 180 292.33 T
(Destroy the table $t and all the data stored in it.) 243 280.33 T
81 248.97 531 260.99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 248.97 531 260.99 R
7 X
0 0 0 1 0 0 0 K
V
76.5 256.22 617.5 259.72 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Swat Display) 81 242.3 T
(5-) 145.47 242.3 T
(1 The table Structure) 154.36 242.3 T
5 9 Q
(\050mess1:0\051 159 =>) 81 227.97 T
8 F
(var yearTable [table create]) 172.8 227.97 T
5 F
(\050mess1:0\051 160 =>) 81 216.97 T
8 F
(table enter $yearTable synclavier 1979) 172.8 216.97 T
5 F
(\050mess1:0\051 161 =>) 81 205.97 T
8 F
(table enter $yearTable moog 1966) 172.8 205.97 T
5 F
(\050mess1:0\051 162 =>) 81 194.97 T
8 F
(table lookup $yearTable synclavier) 172.8 194.97 T
5 F
(1979) 81 183.97 T
(\050mess1:0\051 163 =>) 81 172.97 T
8 F
(var yearTable) 172.8 172.97 T
5 F
(1403188) 81 161.97 T
(\050mess1:0\051 164 =>) 81 150.97 T
8 F
(table lookup 1403188 moog) 172.8 150.97 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "321" 57
%%Page: "322" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(322) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 9 Q
0 X
(1966) 81 642 T
(\050mess1:0\051 165 =>) 81 631 T
8 F
(table remove $yearTable synclavier) 172.8 631 T
5 F
(\050mess1:0\051 166 =>) 81 620 T
8 F
(table lookup $yearTable synclavier) 172.8 620 T
5 F
(nil) 81 609 T
(\050mess1:0\051 167 =>) 81 598 T
8 F
(table destroy $yearTable) 172.8 598 T
81 573.98 531 586 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 573.98 531 586 R
7 X
0 0 0 1 0 0 0 K
V
76.5 581.23 617.5 584.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Synopsis:) 99 556.31 T
1 F
-0.22 (The \322table\323 command is used to create, manipulate and destroy hash tables.) 180 556.31 P
(The entries in the table are keyed on strings and contain strings, as you\325d) 180 543.31 T
(expect from T) 180 530.31 T
(cl.) 242.52 530.31 T
0 F
(Notes:) 99 510.31 T
2 F
(u) 180 490.31 T
1 F
(The <initBuckets> parameter to \322table create\323 is set based on the) 198 490.31 T
(number of keys you expect the table to have at any given time. The) 198 478.31 T
(number of buckets will automatically increase to maintain hashing) 198 466.31 T
(ef\336ciency) 198 454.31 T
(, should the need arise, so <initBuckets> isn\325) 239.84 454.31 T
(t a number that) 446.25 454.31 T
-0.77 (need be carefully chosen. It\325) 198 442.31 P
-0.77 (s best to start with the default \05016\051 or perhaps) 322.71 442.31 P
(a slightly larger number) 198 430.31 T
(.) 310.05 430.31 T
2 F
(u) 180 411.31 T
1 F
-0.28 (If no data are stored in the table under <key>, \322table lookup\323 will return) 198 411.31 P
(the string \322nil\323, for which you can test with the \322null\323 command.) 198 399.31 T
81 383.97 531 388.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 383.97 531 388.98 R
7 X
0 0 0 1 0 0 0 K
V
50 387.97 609.01 387.97 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 375.97 T
0 F
(thread) 99 375.97 T
0 10 Q
(Usage:) 99 358.3 T
1 F
(thread id <thread>) 180 358.3 T
(thread register <thread> <regName>) 180 345.3 T
(thread handle <thread>) 180 332.3 T
(thread endstack <thread>) 180 319.3 T
(thread number <thread>) 180 306.3 T
(thread all) 180 293.3 T
0 F
(Examples:) 99 273.3 T
1 F
(\322thread register $t cx\323) 180 253.3 T
(Fetches the value for the CX register for the given thread.) 243 241.3 T
(\322thread number $t\323) 180 222.3 T
(Fetches number swat assigned to thread when it was \336rst) 243 210.3 T
(encountered.) 243 198.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "322" 58
%%Page: "323" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(323) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Swat Display) 81 629.31 T
(5-) 145.47 629.31 T
(2 The thread Structure) 154.36 629.31 T
5 9 Q
(\050mess1:0\051 145 =>) 81 614.98 T
8 F
(patient threads) 172.8 614.98 T
5 F
(2667104) 81 603.98 T
(\050mess1:0\051 146 =>) 81 592.98 T
8 F
(thread id 2667104) 172.8 592.98 T
5 F
(11184) 81 581.98 T
(\050mess1:0\051 147 =>) 81 570.98 T
8 F
(thread all) 172.8 570.98 T
5 F
(767532 756068 1348520 1348868 1349216 1349748 1350236 1402096 1079392 2667104) 81 559.98 T
(\050mess1:0\051 148 =>) 81 548.98 T
8 F
(thread handle 756068) 172.8 548.98 T
5 F
(880428) 81 537.98 T
(\050mess1:0\051 149 =>) 81 526.98 T
8 F
(thread number 756068) 172.8 526.98 T
5 F
(0) 81 515.98 T
81 491.95 531 503.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 491.95 531 503.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 499.2 617.5 502.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Synopsis:) 99 474.29 T
1 F
(Returns information about a thread, given its thread token. Thread tokens) 180 474.29 T
(can be obtained via the \322patient threads\323 command, or the \322handle other\323) 180 461.29 T
(command applied to a thread handle\325) 180 448.29 T
(s token.) 351.14 448.29 T
0 F
(Notes:) 99 428.29 T
2 F
(u) 180 408.29 T
1 F
(Subcommands may be abbreviated uniquely) 198 408.29 T
(.) 401.01 408.29 T
2 F
(u) 180 389.29 T
1 F
-0.75 (\322thread id\323 returns the handle ID, in decimal, of the thread\325) 198 389.29 P
-0.75 (s handle. This) 465.29 389.29 P
(is simply a convenience.) 198 377.29 T
2 F
(u) 180 358.29 T
1 F
-0.23 (\322thread register\323 returns the contents of the given register in the thread) 198 358.29 P
-0.38 (when it was suspended. All registers except \322pc\323 are returned as a single) 198 346.29 P
-0.65 (decimal number) 198 334.29 P
-0.65 (. \322pc\323 is returned as two hexadecimal numbers separated) 271.43 334.29 P
-0.59 (by a colon, being the cs:ip for the thread. Note that) 198 322.29 P
1 9 Q
-0.53 (GEOS) 428.79 322.29 P
1 10 Q
-0.59 ( doesn\325) 454.96 322.29 P
-0.59 (t actually) 485.5 322.29 P
(save the) 198 310.29 T
1 9 Q
(AX) 239.12 310.29 T
1 10 Q
( and) 251.95 310.29 T
1 9 Q
(BX) 274.92 310.29 T
1 10 Q
( registers when it suspends a thread, at least not) 287.76 310.29 T
(where Swat can consistently locate them. These registers will always) 198 298.29 T
(hold 0xadeb unless the thread is the current thread for the machine \050as) 198 286.29 T
(opposed to the current thread for swat\051.) 198 274.29 T
2 F
(u) 180 255.29 T
1 F
(\322thread handle\323 returns the token for the thread\325) 198 255.29 T
(s handle.) 423.38 255.29 T
2 F
(u) 180 236.29 T
1 F
(\322thread endstack\323 returns the maximum value SP can hold for the) 198 236.29 T
-0.29 (thread, when it is operating off its own stack. Swat maintains this value) 198 224.29 P
(so it knows when to give up trying to decode the stack.) 198 212.29 T
2 F
(u) 180 193.29 T
1 F
-0.05 (\322thread number\323 returns the decimal number Swat assigned the thread) 198 193.29 P
-0.45 (when it \336rst encountered it. The \336rst thread for each patient is given the) 198 181.29 P
-0.84 (number 0 with successive threads being given the highest thread number) 198 169.29 P
(known for the patient plus one.) 198 157.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "323" 59
%%Page: "324" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(324) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.5 (\322thread all\323 returns a list of tokens for all the threads known to Swat \050for) 198 641.33 P
(all patients\051.) 198 629.33 T
81 613.99 531 619 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 613.99 531 619 R
7 X
0 0 0 1 0 0 0 K
V
50 617.99 609.01 617.99 2 L
V
1 H
2 Z
0 X
N
36 72 576 720 C
2 12 Q
0 X
0 0 0 1 0 0 0 K
(n) 81 605.99 T
0 F
(type) 99 605.99 T
0 10 Q
(Usage:) 99 588.33 T
1 F
(type <basic-type-name>) 180 588.33 T
(type make array <length> <base-type>) 180 575.33 T
(type make pstruct \050<\336eld> <type>\051+) 180 562.33 T
(type make struct \050<\336eld> <type> <bit-offset> <bit-length>\051+) 180 549.33 T
(type make union \050<\336eld> <type>\051+) 180 536.33 T
(type make <ptr) 180 523.33 T
(-type> <base-type>) 250.89 523.33 T
(type delete <type>) 180 510.33 T
(type size <type>) 180 497.33 T
(type class <type>) 180 484.33 T
(type name <type> <var) 180 471.33 T
(-name> <expand>) 287.27 471.33 T
(type aget <array-type>) 180 458.33 T
(type \336elds <struct-type>) 180 445.33 T
(type members <enum-type>) 180 432.33 T
(type pget <ptr) 180 419.33 T
(-type>) 245.51 419.33 T
(type emap <num> <enum-type>) 180 406.33 T
(type signed <type>) 180 393.33 T
(type \336eld <struct-type> <offset>) 180 380.33 T
(type bfget <bit\336eld-type>) 180 367.33 T
0 F
(Examples:) 99 347.33 T
1 F
( \322type word\323) 180 327.33 T
(Returns a type token for a word \0502-byte unsigned quantity\051.) 243 327.33 T
( \322type make array 10 [type char]\323) 180 308.33 T
( Returns a type token for a 10-character array) 243 296.33 T
(.) 455.05 296.33 T
( \322type make optr [symbol \336nd type GenBase]\323) 180 277.33 T
( Returns a type token for an optr \0504-byte global/local handle) 243 265.33 T
(pair\051 to a \322GenBase\323 structure.) 243 253.33 T
0 F
(Synopsis:) 99 234.33 T
1 F
(Provides access to the type descriptions by which all PC-based data are) 180 234.33 T
-0.61 (manipulated in Swat, and allows a T) 180 221.33 P
-0.61 (cl procedure to obtain information about) 345.58 221.33 P
(a type for display to the user) 180 208.33 T
(, or for its own purposes. As with other Swat) 311.68 208.33 T
-0.46 (commands, this works by calling one subcommand to obtain an opaque \322type) 180 195.33 P
(token\323, which you then pass to other commands.) 180 182.33 T
0 F
(Notes:) 99 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "324" 60
%%Page: "325" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(325) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(T) 198 641.33 T
(ype tokens and symbol tokens for type-class symbols may be freely) 204.15 641.33 T
(interchanged anywhere in Swat.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
( There are 1) 198 610.33 T
(1 prede\336ned basic types that can be given as the) 253.57 610.33 T
(<basic-type-name> argument in \322type <basic-type-name>\323. They are:) 198 598.33 T
3 F
(byte) 198 586.33 T
1 F
( \050single-byte unsigned integer\051,) 220.59 586.33 T
3 F
(char) 366.89 586.33 T
1 F
( \050single-byte character\051,) 390.6 586.33 T
3 F
-0.05 (double) 198 574.33 P
1 F
-0.05 ( \050eight-byte \337oating-point\051,) 233.37 574.33 P
3 F
-0.05 (dword) 360.08 574.33 P
1 F
-0.05 ( \050four) 393.61 574.33 P
-0.05 (-byte unsigned integer\051,) 418.37 574.33 P
3 F
(\337oat) 198 562.33 T
1 F
( \050four) 221.33 562.33 T
(-byte \337oating-point\051,) 246.14 562.33 T
3 F
(int) 343.37 562.33 T
1 F
( \050two-byte signed integer\051,) 358.18 562.33 T
3 F
(long) 481.52 562.33 T
1 F
(\050four) 198 550.33 T
(-byte signed integer\051,) 220.03 550.33 T
3 F
(sbyte) 320.59 550.33 T
1 F
( \050single-byte signed integer\051,) 348.18 550.33 T
3 F
(short) 482.26 550.33 T
1 F
(\050two-byte signed integer\051,) 198 538.33 T
3 F
(void) 318.56 538.33 T
1 F
( \050nothing. useful as the base type for a) 341.15 538.33 T
(pointer type\051, and) 198 526.33 T
3 F
(word) 283.19 526.33 T
1 F
( \050two-byte unsigned integer\051) 310.05 526.33 T
2 F
(u) 180 507.33 T
1 F
(Most type tokens are obtained, via the \322symbol get\323 and \322symbol tget\323) 198 507.33 T
-0.54 (commands, from symbols that are de\336ned for a loaded patient. These are) 198 495.33 P
(known as \322external\323 type descriptions. \322Internal\323 type descriptions are) 198 483.33 T
-0.67 (created with the \322type make\323 command and should be deleted, with \322type) 198 471.33 P
(delete\323 when they are no longer needed.) 198 459.33 T
2 F
(u) 180 440.33 T
1 F
(An internal structure type description can be created using either the) 198 440.33 T
-0.45 (\322pstruct\323 \050packed structure\051 or \322struct\323 subcommands. Using \322pstruct\323 is) 198 428.33 P
-0.73 (simpler) 198 416.33 P
-0.73 (, but you have no say in where each \336eld is placed \050they are placed) 232.26 416.33 P
-0.31 (at sequential offsets with no padding between \336elds\051, and all \336elds must) 198 404.33 P
(be a multiple of 8 bits long. The \322struct\323 subcommand is more complex,) 198 392.33 T
(but does allow you to specify bit\336elds.) 198 380.33 T
2 F
(u) 180 361.33 T
1 F
(\322type make pstruct\323 takes 1 or more pairs of arguments of the form) 198 361.33 T
-0.01 (\322<\336eld> <type>\323, where <\336eld> is the name for the \336eld and <type> is a) 198 349.33 P
(type token giving the data type for the \336eld. All \336elds must be speci\336ed) 198 337.33 T
-0.78 (for the structure in this call; \336elds cannot be appended to an existing type) 198 325.33 P
(description.) 198 313.33 T
2 F
(u) 180 294.33 T
1 F
(\322type make struct\323 takes 1 or more 4-tuples of arguments of the form) 198 294.33 T
(\322<\336eld> <type> <bit-offset> <bit-length>\323. <\336eld> is the name of the) 198 282.33 T
(\336eld, and <type> is its data type. <bit-offset> is the offset, in bits, from) 198 270.33 T
-0.11 (the start of the structure \050starting with 0, as you\325d expect\051. <bit-length>) 198 258.33 P
(is the length of the \336eld, in bits \050starting with 1, as you\325d expect\051. For a) 198 246.33 T
(bit\336eld, <type> should be the \336eld within which the bit\336eld is de\336ned.) 198 234.33 T
(For example, the C declaration:) 198 222.33 T
(struct {) 200.78 210.33 T
( word a:6;) 209.12 198.33 T
( word b:10;) 209.12 186.33 T
( word c;) 209.12 174.33 T
( }) 200.78 162.33 T
-0.3 (would result in the command \322type make struct a [type word] 0 6 b [type) 198 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "325" 61
%%Page: "326" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(326) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.73 (word] 6 10 c [type word] 16 16\323, because a and b are de\336ned within a word) 198 641.33 P
(type, and c is itself a word.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
-0.76 (\322type make union\323 is similar to \322type make pstruct\323, except all \336elds start) 198 610.33 P
-0.25 (at offset 0. Like \322pstruct\323, this cannot be used to hold bit\336elds, except by) 198 598.33 P
-0.24 (specifying a type created via \322type make struct\323 command as the <type>) 198 586.33 P
(for one of the \336elds.) 198 574.33 T
2 F
(u) 180 555.33 T
1 F
-0.09 (\322type make array <length> <base-type>\323 returns a token for an array of) 198 555.33 P
-0.76 (<length> elements of the given <base-type>, which may be any valid type) 198 543.33 P
(token, including another array type.) 198 531.33 T
2 F
(u) 180 512.33 T
1 F
-0.06 (\322type make <ptr) 198 512.33 P
-0.06 (-type> <base-type>\323 returns a token for a pointer to the) 272.66 512.33 P
(given <base-type>. There are 6 different classes of pointers in) 198 500.33 T
1 9 Q
(GEOS) 485.14 500.33 T
1 10 Q
(:) 511.31 500.33 T
3 F
(nptr) 207.8 481.33 T
1 F
(a near pointer) 243 481.33 T
(. 16-bits. points to something in the same) 307.82 481.33 T
(segment as the pointer itself.) 243 469.33 T
3 F
(fptr) 207.8 450.33 T
1 F
( a far pointer) 243 450.33 T
(. 32-bits. segment in high word, offset in the low) 302.82 450.33 T
(.) 524.16 450.33 T
3 F
(sptr) 207.8 431.33 T
1 F
(a segment pointer) 243 431.33 T
(. 16-bits. contains a segment only) 325.6 431.33 T
(.) 478.6 431.33 T
3 F
(lptr) 207.8 412.33 T
1 F
(an lmem pointer) 243 412.33 T
(. 16-bits. contains a local-memory \322chunk) 318.75 412.33 T
-0.25 (handle\323. data pointed to is assumed to be in the same segment) 243 400.33 P
(as the lptr itself, but requires two indirections to get to it.) 243 388.33 T
3 F
(hptr) 210.58 369.33 T
1 F
( a handle pointer) 243 369.33 T
(. 16-bits. a) 321.16 369.33 T
1 9 Q
(GEOS) 372.3 369.33 T
1 10 Q
( handle.) 398.47 369.33 T
3 F
(optr) 210.58 350.33 T
1 F
(an object pointer) 243 350.33 T
(. 32-bits. contains a) 319.67 350.33 T
1 9 Q
(GEOS) 412.48 350.33 T
1 10 Q
( memory handle in) 438.65 350.33 T
-0 (the high word, and a) 243 338.33 P
1 9 Q
-0 (GEOS) 341.33 338.33 P
1 10 Q
-0 ( local-memory chunk handle in the) 367.5 338.33 P
(low) 243 326.33 T
(.) 258.01 326.33 T
2 F
(u) 180 307.33 T
1 F
-0.19 (\322type delete\323 is used to delete a type description created by \322type make\323.) 198 307.33 P
(Y) 198 295.33 T
(ou should do this whenever possible to avoid wasting memory) 203.93 295.33 T
(.) 487.67 295.33 T
2 F
(u) 180 276.33 T
1 F
(Any type created by the \322type make\323 command is subject to garbage) 198 276.33 T
-0.43 (collection unless it is registered with the garbage collector) 198 264.33 P
-0.43 (. If you need to) 461.83 264.33 P
(keep a type description beyond the end of the command being executed,) 198 252.33 T
(you must register it. See the \322gc\323 command for details.) 198 240.33 T
2 F
(u) 180 221.33 T
1 F
(\322type size\323 returns the size of the passed type, in bytes.) 198 221.33 T
2 F
(u) 180 202.33 T
1 F
(\322type class\323 returns the class of a type, a string in the following set:) 198 202.33 T
3 F
(char) 180 183.33 T
1 F
(for the basic \322char\323 type only) 243 183.33 T
(.) 374.86 183.33 T
3 F
(int) 180 164.33 T
1 F
(any integer) 243 164.33 T
(, signed or unsigned.) 295.04 164.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "326" 62
%%Page: "327" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(327) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
3 10 Q
0 X
(struct) 180 641.33 T
1 F
(a structure, record, or union.) 243 641.33 T
3 F
(enum) 180 622.33 T
1 F
(an enumerated type.) 243 622.33 T
3 F
(array) 180 603.33 T
1 F
(an array) 243 603.33 T
(, of course,) 281.71 603.33 T
3 F
(pointer) 180 584.33 T
1 F
(a pointer to another type.) 243 584.33 T
3 F
(void) 180 565.33 T
1 F
(nothingness. Often a base for a pointer) 243 565.33 T
(.) 421.91 565.33 T
3 F
(function) 180 546.33 T
1 F
( a function, used solely as a base for a pointer) 243 546.33 T
(.) 452.48 546.33 T
3 F
(\337oat) 180 527.33 T
1 F
(a \337oating-point number) 243 527.33 T
(.) 351.9 527.33 T
2 F
(u) 180 508.33 T
1 F
( Each type class has certain data associated with it that can only be) 198 508.33 T
(obtained by using the proper subcommand.) 198 496.33 T
2 F
(u) 180 477.33 T
1 F
(\322type aget\323 applies only to an array-class type token. It returns a) 198 477.33 T
-0.56 (four) 198 465.33 P
-0.56 (-element list: {<base-type> <low> <high> <index-type>} <base-type>) 216.7 465.33 P
(is the type token describing elements of the array) 198 453.33 T
(. <low> is the lower) 425.8 453.33 T
(bound for an index into the array \050currently always 0\051, <high> is the) 198 441.33 T
-0.1 (inclusive upper bound for an index into the array) 198 429.33 P
-0.1 (, and <index-type> is a) 423.28 429.33 P
(token for the data type that indexes the array \050currently always [type) 198 417.33 T
(int]\051.) 198 405.33 T
2 F
(u) 180 386.33 T
1 F
(\322type \336elds\323 applies only to a struct-class type token. It returns a list of) 198 386.33 T
-0.06 (four) 198 374.33 P
-0.06 (-tuples {<name> <offset> <length> <type>}, one for each \336eld in the) 216.7 374.33 P
(structure. <offset> is the) 198 362.33 T
4 F
(bit) 314.93 362.33 T
1 F
( offset from the start of the structure, while) 327.34 362.33 T
(<length> is the length of the \336eld, again in) 198 350.33 T
4 F
(bits) 398.3 350.33 T
1 F
(. <type> is the token for) 415.15 350.33 T
(the data type of the \336eld, and <name> is, of course, the \336eld\325) 198 338.33 T
(s name.) 476.27 338.33 T
2 F
(u) 180 319.33 T
1 F
-0.77 (\322type members\323 applies only to an enum-class type token. It returns a list) 198 319.33 P
(of {<name> <value>} pairs for the members of the enumerated type.) 198 307.33 T
2 F
(u) 180 288.33 T
1 F
-0.24 (\322type pget\323 applies only to a pointer) 198 288.33 P
-0.24 (-class type token. It returns the type) 361.21 288.33 P
(of pointer \050\322near\323, \322far\323, \322seg\323, \322lmem\323, \322handle\323, or \322object\323\051 and the) 198 276.33 T
(token for the type to which it points.) 198 264.33 T
2 F
(u) 180 245.33 T
1 F
(\322type bfget\323 returns a three-list for the given bit\336eld type: {<offset>) 198 245.33 T
(<width> <is-signed>}) 198 233.33 T
2 F
(u) 180 214.33 T
1 F
(\322type signed\323 returns non-zero if the type is signed. If the <type> is not) 198 214.33 T
(an int-class type, it is considered unsigned.) 198 202.33 T
2 F
(u) 180 183.33 T
1 F
(\322type emap\323 can be used to map an integer to its corresponding) 198 183.33 T
-0.52 (enumerated constant. If no member of the enumerated type described by) 198 171.33 P
(<type> has the value indicated, \322nil\323 is returned, else the name of the) 198 159.33 T
(matching constant is returned.) 198 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "327" 63
%%Page: "328" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(328) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.6) 54.33 539.67 T
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(\322type \336eld\323 maps an offset into the passed struct-class type into a triple) 198 641.33 T
(of the form {<name> <length> <ftype>}, where <name> can be either a) 198 629.33 T
-0.65 (straight \336eld name, or a string of the form <\336eld>.<\336eld>... with as many) 198 617.33 P
(.<\336eld> clauses as necessary to get to the smallest \336eld in the nested) 198 605.33 T
-0.37 (structure <type> that covers the given byte <offset> bytes from the start) 198 593.33 P
-0.18 (of the structure. <length> is the) 198 581.33 P
4 F
-0.18 (bit) 347.17 581.33 P
1 F
-0.18 ( length of the \336eld, and <ftype> is its) 359.58 581.33 P
(type.) 198 569.33 T
2 F
(u) 180 550.33 T
1 F
(\322type name\323 produces a printable description of the given type, using) 198 550.33 T
1 9 Q
(C) 518.95 550.33 T
1 10 Q
-0.65 (syntax. <varname> is the name of the variable to which the type belongs.) 198 538.33 P
(It will be placed at the proper point in the resulting string. If <expand>) 198 526.33 T
-0.59 (is non-zero, structured types \050including enumerated types\051 are expanded) 198 514.33 P
(to display their \336elds \050or members, as the case may be\051.) 198 502.33 T
0 F
(See Also:) 99 483.33 T
1 F
(gc, symbol, symbol-types, value) 180 483.33 T
0 14 Q
(5.6.2) 130.86 441 T
0 18 Q
(Examples) 180 441 T
1 10 Q
(This section will contain a few examples of T) 180 417.33 T
(cl code for Swat commands,) 385.71 417.33 T
(showing the use of some of included T) 180 404.33 T
(cl commands. A good way to view the) 353.83 404.33 T
(code for a particular procedure is to type:) 180 391.33 T
5 F
(info body <procname>) 216 375.33 T
1 F
(on the Swat command line. This will print out the body of the given) 180 354.33 T
(<) 180 341.33 T
4 F
(procname) 186.06 341.33 T
1 F
(> . One thing to watch out for) 230.86 341.33 T
(, however) 366.38 341.33 T
(, is the case when a) 409.9 341.33 T
-0.3 (procedure has not been loaded into Swat yet \050i.e. it has not been used yet\051. If) 180 328.33 P
-0.08 (this is the case, Swat will have no information about the procedure and will) 180 315.33 P
(thus print nothing. The command must be loaded into Swat either with the) 180 302.33 T
3 F
(load) 180 289.33 T
1 F
( command, or by just typing the command name which will usually) 202.41 289.33 T
(autoload the command. \050See section 5.7 on page 330.\051 Then the) 180 276.33 T
3 F
( info body) 470.43 276.33 T
(<procname>) 180 263.33 T
1 F
( command can be used.) 243.98 263.33 T
(Some code examples:) 180 243.33 T
81 210.98 531 223 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 210.98 531 223 R
7 X
0 0 0 1 0 0 0 K
V
76.5 218.23 617.5 221.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Swat Display) 81 204.31 T
(5-) 145.47 204.31 T
(3 The Whatat Command) 154.36 204.31 T
5 9 Q
([defcommand whatat {addr} output) 81 189.98 T
({Given an address, print the name of the variable at that address}) 81 178.98 T
({) 81 167.98 T
( var a [sym faddr var $addr]) 81 156.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "328" 64
%%Page: "329" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Coding) 509.78 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(329) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.6) 546.55 539.67 T
81 144 531 648 R
7 X
V
5 9 Q
0 X
(if {[null $a]}{) 125 642 T
( echo *nil*) 125 631 T
(} else {) 125 620 T
( echo [sym name $a]) 125 609 T
( }) 81 598 T
(}]) 81 587 T
4 10 Q
-0.28 (This example shows the code of the) 81 568.33 P
7 F
-0.29 (whatat) 241.01 568.33 P
4 F
-0.28 ( command. Note the use of the) 277.67 568.33 P
7 F
-0.29 (sym) 415.67 568.33 P
4 F
-0.28 ( \050an abbreviation for) 435.11 568.33 P
7 F
(symbol) 81 556.33 T
4 F
(\051 command to \336nd the address of the given variable) 116.18 556.33 T
7 F
(<addr>) 353.74 556.33 T
4 F
( of class) 391.06 556.33 T
7 F
(<var>) 430.12 556.33 T
4 F
(.) 459.66 556.33 T
81 537.98 531 550 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 537.98 531 550 R
7 X
0 0 0 1 0 0 0 K
V
76.5 545.23 617.5 548.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
81 507.95 531 519.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 507.95 531 519.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 515.2 617.5 518.7 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Swat Display) 81 501.29 T
(5-) 145.47 501.29 T
(4 The Bytes Command) 154.36 501.29 T
5 9 Q
(1) 81 486.95 T
(var addr [get-address $addr ds:si]) 125 486.95 T
(2) 81 475.95 T
(var base [index [addr-parse $addr] 1]) 125 475.95 T
(3) 81 464.95 T
(echo {Addr: +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +a +b +c +d +e +f}) 125 464.95 T
(4) 81 453.95 T
(#fetch the bytes themselves) 125 453.95 T
(5) 81 442.95 T
(var bytes [value fetch $addr [type make array $num [type byte]]]) 125 442.95 T
(6) 81 431.95 T
(#) 125 431.95 T
(# $s is the index of the first byte to display on this row, $e is the) 125 420.95 T
(# index of the last one. $e can get > $num. The loop handles this case.) 125 409.95 T
(#) 125 398.95 T
(var s 0 e [expr 16-\050$base&0xf\051-1]) 125 387.95 T
(#) 125 376.95 T
(# $pre can only be non-zero for the first line, so set it once here.) 125 365.95 T
(# We\325ll set it to zero when done with the first line.) 125 354.95 T
(# $post can be non-zero only for the last line, but we can\325t just) 125 343.95 T
(# set it to zero and let the loop handle it, as the first may be the) 125 332.95 T
(# last, so\311) 125 321.95 T
(#) 125 310.95 T
(var pre [expr 16-\050$e-$s\051-1]) 125 299.95 T
(if {$e > $num} {) 125 288.95 T
(var post [expr $e-\050$num-1\051]) 125 277.95 T
(} else {) 125 266.95 T
(var post 0) 125 255.95 T
(}) 125 244.95 T
([for {var start [expr {$base&~0xf}]}) 125 222.95 T
({$s < $num}) 125 211.95 T
({var start [expr $start+16]}) 125 200.95 T
({) 125 189.95 T
(28) 81 178.95 T
(#extract the bytes we want) 125 178.95 T
(29) 81 167.95 T
(var bs [range $bytes $s $e]) 125 167.95 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "329" 65
%%Page: "330" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(330) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
5 9 Q
0 X
(30) 81 642 T
(echo [format {%04xh: %*s%s%*s \322%*s%s%*s\323} $start) 125 642 T
([expr $pre*3] {}) 125 631 T
([map i $bs {format %02x $i}]) 125 620 T
([expr $post*3] {}) 125 609 T
($pre {}) 125 598 T
([mapconcat i $bs {) 125 587 T
(if {$i >= 32 && $i < 127} {) 125 576 T
(format %c $i) 125 565 T
(} else {) 125 554 T
(format .) 125 543 T
(}) 125 532 T
(}]) 125 521 T
($post {}]) 125 510 T
(var s [expr $e+1] e [expr $e+16] pre 0) 125 499 T
(if {$e >= $num} {) 125 488 T
(var post [expr $e-\050$num-1\051]) 125 477 T
(}) 125 466 T
(}]) 125 455 T
(set-address $addr+$num-1) 125 444 T
(set-repeat [format {$0 {%s} $2} $addr+$num]) 125 433 T
4 10 Q
(This example shows the code for the) 81 414.33 T
7 F
(bytes) 247.44 414.33 T
4 F
( commands. Notice the use of the) 272.81 414.33 T
7 F
(type) 425.01 414.33 T
4 F
( command on the) 445.94 414.33 T
(\336fth line, and the) 81 402.33 T
7 F
(range) 163.21 402.33 T
4 F
( command on the twenty-ninth line.) 193.22 402.33 T
81 383.98 531 396 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 383.98 531 396 R
7 X
0 0 0 1 0 0 0 K
V
76.5 391.23 617.5 394.73 R
4 X
V
0.5 H
2 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.7) 142.54 333.98 T
0 24 Q
(Using a New Command) 180 333.98 T
1 10 Q
-0.62 (Once a new command is written, it needs to be loaded into Swat so that it can) 180 308.31 P
-0.69 (be used. Depending on how the command is to be used, you may be interested) 180 295.31 P
(in any of the following topics:) 180 282.31 T
2 F
(u) 180 262.31 T
1 F
(Compilation) 198 262.31 T
2 F
(u) 180 243.31 T
1 F
(Autoloading) 198 243.31 T
2 F
(u) 180 224.31 T
1 F
(Explicit loading) 198 224.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "330" 66
%%Page: "331" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using a New Command) 402.42 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(331) 541.32 671.34 T
324 684 580 684 2 L
3 H
2 Z
N
495 90 558 125 R
7 X
V
2 60 Q
0 X
(!) 497.28 85 T
0 24 Q
(T) 438.77 110 T
(ools) 451.66 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.7) 546.55 539.67 T
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.7.1) 130.86 636 T
0 18 Q
(Compilation) 180 636 T
1 10 Q
-0.43 (It is possible to byte-compile a T) 180 612.33 P
-0.43 (cl script. The) 325.51 612.33 P
3 F
-0.45 (bc) 386.99 612.33 P
1 F
-0.43 ( T) 399.03 612.33 P
-0.43 (cl command creates a .) 407.24 612.33 P
1 9 Q
-0.39 (TLC) 510.15 612.33 P
1 10 Q
(\336le containing compiled T) 180 599.33 T
(cl code\321this code will run faster than normal T) 298.46 599.33 T
(cl) 517.85 599.33 T
(code. When loading, Swat will load a .) 180 586.33 T
1 9 Q
(TLC) 354.86 586.33 T
1 10 Q
( \336le instead of a .) 373.36 586.33 T
1 9 Q
(TCL) 452.27 586.33 T
1 10 Q
( \336le where) 470.78 586.33 T
(possible. Making changes to compiled T) 180 573.33 T
(cl functions involves changing the) 362.18 573.33 T
(source code and re-compiling.) 180 560.33 T
0 14 Q
(5.7.2) 130.86 518 T
0 18 Q
(Autoloading) 180 518 T
1 10 Q
(If the development environment has been set up properly) 180 494.33 T
(, there should) 443.71 494.33 T
-0.39 (already exist the) 180 481.33 P
3 F
-0.4 (/pcgeos/T) 259.04 481.33 P
-0.4 (ools/swat/lib) 306.09 481.33 P
1 F
-0.39 ( directory on the workstation. This) 370.35 481.33 P
-0.26 (directory will contain all of the code \336les for the built-in Swat commands. T) 180 468.33 P
-0.26 (o) 523.48 468.33 P
(autoload a new command, copy its code \336le to the) 180 455.33 T
3 F
(/pcgeos/T) 410.22 455.33 T
(ools/swat/lib) 457.27 455.33 T
1 F
-0.31 (directory and add its name to the) 180 442.33 P
3 F
-0.32 (autoload.) 334.3 442.33 P
1 F
-0.31 (tcl \336le in the directory) 382.82 442.33 P
-0.31 (. This will) 483.03 442.33 P
-0.73 (load the command into Swat every time Swat is started. For example, say the) 180 429.33 P
-0.35 (command) 180 416.33 P
3 F
-0.36 (blitzburp) 227.06 416.33 P
1 F
-0.35 ( has just been written to examine a new data structure.) 275.58 416.33 P
(First, copy the \336le containing its code \050say) 180 403.33 T
3 F
(blitz.) 377.24 403.33 T
1 F
(tcl\051 into the) 403.35 403.33 T
3 F
(/pcgeos/T) 180 390.33 T
(ools/swat/lib) 227.05 390.33 T
1 F
( directory) 291.31 390.33 T
(. Next, edit the) 334.45 390.33 T
3 F
(autoload.) 406.32 390.33 T
1 F
(tcl \336le and add) 454.84 390.33 T
4 F
(one) 180 377.33 T
1 F
( of the following lines:) 195.55 377.33 T
5 F
([autoload blitzburp 0 blitz]) 216 361.33 T
([autoload blitzburp 1 blitz]) 216 344.33 T
1 F
-0.12 (This will ensure that) 180 323.33 P
3 F
-0.13 (blitz.tcl) 279.16 323.33 P
1 F
-0.12 ( will be loaded when the command) 318.61 323.33 P
3 F
-0.13 (blitzburp) 479.82 323.33 P
1 F
(is \336rst used. The 0 indicates that the command must be typed exactly) 180 310.33 T
(, and) 500.05 310.33 T
-0.77 (the 1 indicates that the interpreter will not evaluate arguments passed to the) 180 297.33 P
(command. \050See \322Swat Reference,\323 Chapter) 180 284.33 T
(4, for more information on the) 378.53 284.33 T
3 F
(autoload) 180 271.33 T
1 F
( command.\051) 225.74 271.33 T
0 14 Q
(5.7.3) 130.86 229 T
0 18 Q
(Explicit Loading) 180 229 T
1 10 Q
-0.23 (Another way to load a command into Swat is to use the) 180 205.33 P
3 F
-0.24 (load) 434.66 205.33 P
1 F
-0.23 ( command from) 457.07 205.33 P
-0.47 (the Swat command line. This command is simply) 180 192.33 P
3 F
-0.48 (load <path>/<\336lename>) 405.76 192.33 P
1 F
-0.47 (.) 525.91 192.33 P
-0.05 (If no path is given, then the <) 180 179.33 P
4 F
-0.05 (\336le) 316.64 179.33 P
1 F
-0.05 (> is loaded from the directories speci\336ed in) 330.52 179.33 P
(the) 180 166.33 T
3 F
(load-path) 197.78 166.33 T
1 F
( variable. The) 247.41 166.33 T
3 F
(load) 314.1 166.33 T
1 F
( command will load the given \336le \050a T) 336.51 166.33 T
(cl) 509.07 166.33 T
-0.31 (procedure or subroutine\051 into Swat for subsequent use, and it is mostly used) 180 153.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "331" 67
%%Page: "332" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Tool Command Language) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(332) 54 671.34 T
32 684 288 684 2 L
3 H
2 Z
N
54 90 117 125 R
7 X
V
2 60 Q
0 X
(!) 56.28 85 T
0 24 Q
(T) 102 110 T
(ools) 114.89 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.7) 54.33 539.67 T
81 144 531 648 R
7 X
V
1 10 Q
0 X
(to load infrequently accessed \336les. \050See \322Swat Reference,\323 Chapter) 180 641.33 T
(4, for) 488.91 641.33 T
(more information on the) 180 628.33 T
3 F
(load) 295.19 628.33 T
1 F
( command.\051) 317.6 628.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "332" 68
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 68
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Courier-BoldOblique
%%+ NewCenturySchlbk-BoldItalic
%%+ Courier-Bold
%%EOF
