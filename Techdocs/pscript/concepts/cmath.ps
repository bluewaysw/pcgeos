%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 26 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /Courier FMFONTDEFINE
5 0 /NewCenturySchlbk-Italic FMFONTDEFINE
6 0 /Courier-BoldOblique FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "945" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Math Functions) 413.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(945) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.1) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(The Math Library allows high precision computations not available) 189 610.3 T
(through standard integer operations. Floating Point \050) 189 597.3 T
1 9 Q
(FP) 435.69 597.3 T
1 10 Q
(\051 numbers use) 447.7 597.3 T
(decimal representation to express fractional quantities. This format also) 189 584.3 T
(allows scienti\336c notation to represent very large and very small numbers.) 189 571.3 T
(T) 189 551.3 T
(o enable \337oating point operations, an application must include a) 194.75 551.3 T
1 9 Q
(GEOS) 494.25 551.3 T
1 10 Q
-0.27 (Math Library) 189 538.3 P
-0.27 (. There are two Math Libraries:) 250.59 538.3 P
3 F
-0.28 ( math.h) 395.21 538.3 P
1 F
-0.27 ( and) 434.28 538.3 P
3 F
-0.28 (math.goh) 456.71 538.3 P
1 F
-0.27 (. The) 505.42 538.3 P
(\336le) 189 525.3 T
3 F
(math.h) 206.04 525.3 T
1 F
( includes what you need to get \337oating point numbers to work) 242.52 525.3 T
(within your application. The object \336le,) 189 512.3 T
3 F
(math.goh) 372.73 512.3 T
1 F
( \050which includes) 421.43 512.3 T
3 F
-0.81 (math.h) 189 499.3 P
1 F
-0.78 (\051, includes the \337oat-format controller) 225.48 499.3 P
-0.78 (, an object that allows the user) 391.8 499.3 P
-0.23 (to control how \337oating point numbers are formatted within an application.) 189 486.3 P
(In most cases, the mere inclusion of the Math Library will eliminate the) 189 466.3 T
-0.26 (need to directly call Math Library routines. \050The C compiler will parse the) 189 453.3 P
(mathematical expressions into appropriate \337oating point routines.\051 Y) 189 440.3 T
(ou) 508.11 440.3 T
-0.72 (may) 189 427.3 P
-0.72 (, however) 207.71 427.3 P
-0.72 (, wish to call some of these routines directly) 250.51 427.3 P
-0.72 (. Developers using) 445.55 427.3 P
(Object Assembly must use this latter approach. C developers may also) 189 414.3 T
(want to directly manipulate the) 189 401.3 T
1 9 Q
(FP) 338.47 401.3 T
1 10 Q
( stack for involved computations that) 350.48 401.3 T
-0.06 (they would rather not leave to the compiler) 189 388.3 P
-0.06 (. This approach is discussed in) 387.65 388.3 P
(the latter half of this chapter) 189 375.3 T
(.) 322.53 375.3 T
-0.22 (Use of) 189 355.3 P
3 F
-0.23 (math.goh) 220.23 355.3 P
1 F
-0.22 ( is optional, depending on the purpose of the application.) 268.93 355.3 P
(A spreadsheet application, for example, might want to allow the user to) 189 342.3 T
-0.16 (format) 189 329.3 P
1 9 Q
-0.14 (FP) 222.73 329.3 P
1 10 Q
-0.16 ( numbers. Other applications might not want to include this \336le.) 234.74 329.3 P
0 14 Q
(D.1) 149.22 276.97 T
0 24 Q
(Basic Math Functions) 189 276.97 T
1 10 Q
(The Math Library includes many routines and structures that make the) 189 251.3 T
-0.4 (manipulation of) 189 238.3 P
1 9 Q
-0.36 (FP) 264.5 238.3 P
1 10 Q
-0.4 ( numbers possible. Most of these are transparent to a C) 276.51 238.3 P
(programmer) 189 225.3 T
(.) 246.03 225.3 T
(C includes the following \337oating point types:) 189 205.3 T
3 F
(\337oat) 397.54 205.3 T
1 F
(,) 420.87 205.3 T
3 F
(double) 426.43 205.3 T
1 F
(, and) 461.8 205.3 T
3 F
(long) 487.55 205.3 T
-0.72 (double) 189 192.3 P
1 F
-0.69 (. A \337oating point number in) 224.37 192.3 P
1 9 Q
-0.62 (GEOS) 351.34 192.3 P
1 10 Q
-0.69 ( is of type) 377.51 192.3 P
3 F
-0.72 (FloatNum) 421.97 192.3 P
1 F
-0.69 (, which uses) 474 192.3 P
-0.48 (the) 189 179.3 P
1 9 Q
-0.43 (IEEE) 206.3 179.3 P
1 10 Q
-0.48 ( 80 bit standard \050equivalent to a long double\051 to represent \337oating) 229.46 179.3 P
-0.5 (point values.) 189 166.3 P
3 F
-0.51 (FloatNum) 250.06 166.3 P
1 F
-0.5 ( has overloaded the \337oat, double, long double, and) 302.09 166.3 P
(all basic match functions.) 189 153.3 T
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "945" 1
%%Page: "946" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(946) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(A) 189 641.33 T
3 F
(FloatNum) 199 641.33 T
1 F
( consists of a one bit sign, a 15 bit exponent, and a 64 bit) 251.03 641.33 T
-0.82 (mantissa. The maximum exponent allowed is) 189 628.33 P
1 9 Q
-0.74 (7FFE) 395.99 628.33 P
1 10 Q
-0.82 (h. An exponent of) 419.5 628.33 P
1 9 Q
-0.74 ( 7FFF) 498.15 628.33 P
1 10 Q
-0.82 (h) 522.93 628.33 P
-0.62 (\050) 189 615.33 P
1 9 Q
-0.56 (FP_NAN) 192.33 615.33 P
1 10 Q
-0.62 (\051 signals an under\337ow or over\337ow) 230 615.33 P
-0.62 (. Y) 381.89 615.33 P
-0.62 (ou may check the value of this) 392.76 615.33 P
-0.06 (exponent using the macro) 189 602.33 P
1 9 Q
-0.05 (FLOA) 310.82 602.33 P
-0.05 (T_EXPONENT) 335.83 602.33 P
1 10 Q
-0.06 ( to extract the exponent of a) 399.34 602.33 P
3 F
(FloatNum) 189 589.33 T
1 F
(.) 241.03 589.33 T
81 556.98 531 569 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 556.98 531 569 R
7 X
0 0 0 1 0 0 0 K
V
76.5 564.23 617.5 567.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 550.31 T
(D-) 147.13 550.31 T
(1 Extracting an Exponent) 157.68 550.31 T
4 9 Q
(FloatNum myNum;) 81 535.98 T
(if \050FLOAT_EXPONENT\050\050&myNum\051\051 == FP_NAN\051) 81 517.98 T
({) 81 506.98 T
(return\050ERROR\051;) 108 495.98 T
(}) 81 484.98 T
81 460.95 531 472.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 460.95 531 472.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 468.2 617.5 471.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.83 (If you use any \337oats, doubles, or long doubles in your application,) 189 443.29 P
1 9 Q
-0.75 (GEOS) 483.7 443.29 P
1 10 Q
-0.83 ( will) 509.87 443.29 P
(convert these types into) 189 430.29 T
3 F
(FloatNum) 301.78 430.29 T
1 F
( values automatically and call the) 353.81 430.29 T
-0.83 (appropriate) 189 417.29 P
1 9 Q
-0.75 (GEOS) 245.21 417.29 P
1 10 Q
-0.83 ( functions to manipulate the numbers. As this is the case,) 271.38 417.29 P
(it is usually easier to declare any \337oating point variables in your) 189 404.29 T
(application as) 189 391.29 T
3 F
(FloatNum) 256.24 391.29 T
1 F
( types \050or long doubles\051. This cuts down on) 308.27 391.29 T
(conversion time.) 189 378.29 T
(The Math Library provides all the familiar mathematical functions to) 189 358.29 T
-0.92 (manipulate these) 189 345.29 P
1 9 Q
-0.83 (GEOS) 270.52 345.29 P
-0.83 (FP) 298.55 345.29 P
1 10 Q
-0.92 ( numbers \050addition, multiplication, computation) 310.56 345.29 P
(of logarithms, etc.\051. In C, most of these functions will automatically be) 189 332.29 T
(called when their corresponding C operation involving) 189 319.29 T
1 9 Q
(FP) 442.15 319.29 T
1 10 Q
( numbers take) 454.16 319.29 T
(place. \050For example, when using the \324+\325 binary operator to add two) 189 306.29 T
1 9 Q
(FP) 497.33 306.29 T
1 10 Q
(numbers, the Math Library will use the corresponding) 189 293.29 T
3 F
(FloatAdd\050\051) 443.09 293.29 T
1 F
(routine.\051) 189 280.29 T
(Y) 189 260.29 T
(ou may) 194.93 260.29 T
(, under special circumstances, wish to use these math routines) 227.53 260.29 T
(directly) 189 247.29 T
(. If you do so, you will need to manipulate the \337oating point stack) 223.07 247.29 T
-0.25 (manually) 189 234.29 P
-0.25 (, pushing numbers on the stack and making sure numbers are in) 231.79 234.29 P
-0.03 (the proper stack location to perform each operation. In most cases, the) 189 221.29 P
1 9 Q
-0.03 (FP) 516.24 221.29 P
1 10 Q
(math routines operate on numbers already in place on the) 189 208.29 T
1 9 Q
(FP) 460.14 208.29 T
1 10 Q
( stack; they) 472.15 208.29 T
(take and return no arguments of their own.) 189 195.29 T
(T) 189 175.29 T
(wo functions you will need to use if you take this approach are) 194.96 175.29 T
3 F
(FloatPushNumber\050\051) 189 162.29 T
1 F
( and) 292.51 162.29 T
3 F
( FloatPopNumber\050\051) 312.7 162.29 T
1 F
(.) 413.16 162.29 T
3 F
(FloatPushNumber\050\051) 418.72 162.29 T
1 F
(takes the address of a variable \050of type) 189 149.29 T
3 F
(FloatNum) 370.33 149.29 T
1 F
(\051 to push onto the) 422.36 149.29 T
1 9 Q
(FP) 506.07 149.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "946" 2
%%Page: "947" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Math Functions) 413.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(947) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.1) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(stack;) 189 641.33 T
3 F
(FloatPopNumber\050\051) 219.01 641.33 T
1 F
( takes the address of a buffer to place an) 316.6 641.33 T
1 9 Q
(FP) 506.26 641.33 T
1 10 Q
-0.54 (number popped off the) 189 628.33 P
1 9 Q
-0.49 (FP) 293.69 628.33 P
1 10 Q
-0.54 ( stack. Other routines \050for example,) 305.69 628.33 P
3 F
-0.56 (FloatAdd\050\051) 469.5 628.33 P
1 F
-0.54 (\051) 525.43 628.33 P
-0.35 (can then be called to operate on the) 189 615.33 P
1 9 Q
-0.31 (FP) 352.89 615.33 P
1 10 Q
-0.35 ( stack. \050See Code Display) 364.9 615.33 P
-0.35 (D-) 482.6 615.33 P
-0.35 (2 for an) 493.71 615.33 P
(example using this approach.\051) 189 602.33 T
-0.85 (There are many other routines that perform stack manipulation by shifting) 189 582.33 P
(locations of) 189 569.33 T
1 9 Q
(FP) 243.82 569.33 T
1 10 Q
( numbers on the stack \050) 255.83 569.33 T
3 F
(FloatRoll\050\051) 364.36 569.33 T
1 F
(,) 420.66 569.33 T
3 F
(FloatDrop\050\051) 426.22 569.33 T
1 F
(, etc.\051.) 487.52 569.33 T
(These routines are covered in detail in the latter part of this chapter) 189 556.33 T
(because they are seldom needed in a C applications.) 189 543.33 T
0 14 Q
(D.1.1) 137.54 501 T
0 18 Q
(Algebraic Functions) 189 501 T
1 10 Q
-0.5 (Algebraic routines perform algebraic operations on) 189 477.33 P
1 9 Q
-0.45 (FP) 423.58 477.33 P
1 10 Q
-0.5 ( numbers. The Math) 435.59 477.33 P
(Library provides all of the basic algebraic routines that operate on) 189 464.33 T
1 9 Q
(GEOS) 498.12 464.33 T
(FP) 189 451.33 T
1 10 Q
( numbers \050addition, subtraction, etc.\051. The table in T) 201.01 451.33 T
(able) 442.47 451.33 T
(D-) 464.52 451.33 T
(1 lists the) 475.63 451.33 T
(function names and the operations they perform.) 189 438.33 T
(If you wish to call these routines directly rather than rely on the C) 189 418.33 T
(operations, you may manipulate the \337oating point stack directly) 189 405.33 T
(. T) 484.6 405.33 T
(o add) 495.91 405.33 T
(two numbers using) 189 392.33 T
3 F
(FloatAdd\050\051) 280.12 392.33 T
1 F
( for example, you would use) 336.05 392.33 T
3 F
(FloatPushNumber\050\051) 189 379.33 T
1 F
( twice to push the two values to add onto the) 292.51 379.33 T
1 9 Q
(FP) 501.25 379.33 T
1 10 Q
(stack, and then call) 189 366.33 T
3 F
(FloatAdd\050\051) 282.17 366.33 T
1 F
( to operate on the) 338.1 366.33 T
1 9 Q
(FP) 421.63 366.33 T
1 10 Q
( stack. \050See Code) 433.64 366.33 T
(Display) 189 353.33 T
(D-) 227.16 353.33 T
(2.\051) 238.27 353.33 T
81 320.98 531 333 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 320.98 531 333 R
7 X
0 0 0 1 0 0 0 K
V
76.5 328.23 617.5 331.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 314.31 T
(D-) 147.13 314.31 T
(2 Adding T) 157.68 314.31 T
(wo FP Numbers) 208.61 314.31 T
4 9 Q
(/*) 81 299.98 T
( * The following two methods each add two FP numbers and return the result. The) 81 288.98 T
( * first method is familiar C code. The second example uses the floating point) 81 277.98 T
( * routines from math.h directly. Note that the C code will be assembled into code) 81 266.98 T
( * that uses FloatAdd\050\051 also, but that this is transparent to the code.) 81 255.98 T
( */) 81 244.98 T
(@method MyProcessClass, MSG_SUM_FLOATS {) 81 226.98 T
(long double) 102.6 215.98 T
(number1, number2, number3;) 212.5 215.98 T
(number1 = 1.0;) 102.6 197.98 T
(number2 = 2.0;) 102.6 186.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "947" 3
%%Page: "948" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(948) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 9 Q
0 X
(number3 = number1 + number2;) 102.6 642 T
(return\050number3\051;) 102.6 631 T
(}) 81 620 T
(@method MyProcessClass, MSG_SUM_FLOATS_MANUALLY {) 81 602 T
(long double) 102.6 591 T
(number1, number2, number3;) 212.5 591 T
(number1 = 1.0;) 102.6 573 T
(number2 = 2.0;) 102.6 562 T
(FloatPushNumber\050&number1\051;) 102.6 544 T
(/* Push number1 onto the FP stack. */) 256.5 544 T
(FloatPushNumber\050&number2\051;) 102.6 533 T
(/* Push number2 onto the FP stack. */) 256.5 533 T
(FloatAdd\050\051;) 102.6 522 T
(/* Add the top two numbers on the FP stack. The) 256.5 522 T
( * result will be placed on top of the FP stack.*/) 256.5 511 T
(FloatPopNumber\050&number3\051;) 102.6 500 T
(/* Pop the result into the number3 variable. */) 256.5 500 T
(return\050number3\051;) 102.6 489 T
(}) 81 478 T
81 453.98 531 466 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 453.98 531 466 R
7 X
0 0 0 1 0 0 0 K
V
76.5 461.23 617.5 464.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.56 (Algebraic routines included in the Math Library are listed in T) 189 436.31 P
-0.56 (able) 473.2 436.31 P
-0.56 (D-) 495.26 436.31 P
-0.56 (1. As) 506.36 436.31 P
-0.28 (can be seen in the table, several functions have no equivalent C operation.) 189 423.31 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "948" 4
%%Page: "949" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Math Functions) 413.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(949) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.1) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.7 (Consult \322Direct FP Operations\323 on page 964 for more details on using these) 189 641.33 P
(functions.) 189 628.33 T
0 14 Q
(D.1.2) 137.54 271 T
0 18 Q
(T) 189 271 T
(ranscendental Functions) 199.01 271 T
1 10 Q
(The Math Library provides an array of transcendental routines that) 189 247.33 T
(operate on) 189 234.33 T
1 9 Q
(GEOS) 240.3 234.33 T
(FP) 269.25 234.33 T
1 10 Q
( numbers. A transcendental function is one which) 281.26 234.33 T
(cannot be derived through algebraic means. Examples of transcendental) 189 221.33 T
(functions include the trigonometric functions \050sine, cosine, etc.\051 and the) 189 208.33 T
(logarithmic functions \050log, natural log, etc.\051.) 189 195.33 T
(The table in T) 189 175.33 T
(able) 253.59 175.33 T
(4-) 275.64 175.33 T
(2 lists the function names and the operations they) 284.53 175.33 T
-0.49 (perform. T) 189 162.33 P
-0.49 (ypical functions in C are listed alongside. \050The basic language of) 237.06 162.33 P
-0.46 (C itself includes no such transcendental functions but almost all compilers) 189 149.33 P
81 144 531 648 C
180 310 531 625 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 310 531 616 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 609.33 T
(able) 185.37 609.33 T
(D-) 208.16 609.33 T
(1) 218.71 609.33 T
5 F
(Basic FP Functions and corresponding C operations \050if any\051) 227.05 609.33 T
180 588.02 531 593 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 588.02 531 593 R
7 X
0 0 0 1 0 0 0 K
V
152 590.98 755 590.98 2 L
V
0.5 H
2 Z
0 X
N
180 310 531 625 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Function) 180 596.33 T
(C Operation) 288 596.33 T
(Function) 360 596.33 T
3 F
(FloatAdd\050\051) 180 579.36 T
5 F
(+) 288 579.36 T
(addition) 360 579.36 T
3 F
(FloatSub\050\051) 180 565.36 T
5 F
( -) 288 565.36 T
(subtraction) 360 565.36 T
3 F
(FloatMultiply\050\051) 180 551.36 T
5 F
(*) 288 551.36 T
(multiplication) 360 551.36 T
3 F
(FloatDivide\050\051) 180 537.36 T
5 F
(/) 288 537.36 T
(division) 360 537.36 T
3 F
(FloatDIV\050\051) 180 523.36 T
5 F
(\050int\051 \050X/Y\051) 288 523.36 T
(division returning integer result) 360 523.36 T
3 F
(FloatMod\050\051) 180 509.36 T
5 F
(X % Y) 288 509.36 T
(modulo) 360 509.36 T
3 F
(FloatFactorial\050\051) 180 495.36 T
5 F
(factorial) 360 495.36 T
3 F
(FloatNegate\050\051) 180 481.36 T
5 F
(-X) 288 481.36 T
(negation) 360 481.36 T
3 F
(FloatInverse\050\051) 180 467.36 T
5 F
(1/X) 288 467.36 T
(inversion) 360 467.36 T
3 F
(FloatAbs\050\051) 180 453.36 T
5 F
(abs\050X\051) 288 453.36 T
(absolute value) 360 453.36 T
3 F
(FloatMax\050\051) 180 439.36 T
5 F
(maximum of two numbers) 360 439.36 T
3 F
(FloatMin\050\051) 180 425.36 T
5 F
(minimum of two numbers) 360 425.36 T
3 F
(FloatLt0\050\051) 180 411.36 T
5 F
(X < 0) 288 411.36 T
(less than 0) 360 411.36 T
3 F
(FloatGt0\050\051) 180 397.36 T
5 F
(X > 0) 288 397.36 T
(greater than 0) 360 397.36 T
3 F
(FloatEq0\050\051) 180 383.36 T
5 F
(X = 0) 288 383.36 T
(equal to 0) 360 383.36 T
3 F
(FloatFrac\050\051) 180 369.36 T
5 F
(returns fractional portion of X) 360 369.36 T
3 F
(FloatT) 180 355.36 T
(runc\050\051) 213.82 355.36 T
5 F
(truncates X to its integer value) 360 355.36 T
3 F
(FloatInt\050\051) 180 341.36 T
5 F
(\050int\051 X) 288 341.36 T
(returns integer of X, rounded down) 360 341.36 T
3 F
(FloatIntFrac\050\051) 180 327.36 T
5 F
(separates X into integer and fraction) 360 327.36 T
3 F
(FloatRound\050\051) 180 313.36 T
5 F
(rounds X to a given decimal places) 360 313.36 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "949" 5
%%Page: "950" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(950) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(include a C math library that does.\051 As can be seen in the table, several) 189 641.33 T
-0.67 (functions have no equivalent C operation. Consult \322Float Formats\323 on page) 189 628.33 P
(960 for more details on using these functions.) 189 615.33 T
0 14 Q
(D.1.3) 137.54 573 T
0 18 Q
(Random Number Generation) 189 573 T
4 10 Q
(FloatRandomize\050\051, FloatRandom\050\051, FloatRandomN\050\051) 189 549.33 T
1 F
-0.56 (The Math Library also provides routines to create random numbers. Using) 189 529.33 P
-0.69 (any of these routines requires that you manually push and pop numbers on) 189 516.33 P
(the) 189 503.33 T
1 9 Q
(FP) 206.78 503.33 T
1 10 Q
( stack.) 218.79 503.33 T
81 144 531 648 C
180 144 531 486 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 144 531 468 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 461.33 T
(able) 185.37 461.33 T
(4-) 208.16 461.33 T
(2) 217.05 461.33 T
5 F
(T) 225.39 461.33 T
(ranscendental Floating Point Functions) 231.35 461.33 T
180 440.02 531 445 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 440.02 531 445 R
7 X
0 0 0 1 0 0 0 K
V
152 442.98 755 442.98 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 486 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Function) 180 448.33 T
(C Equivalent) 288 448.33 T
(Operation) 360 448.33 T
3 F
(FloatSin\050\051) 180 431.36 T
5 F
(sin\050\051) 288 431.36 T
(sine) 360 431.36 T
3 F
(FloatCos\050\051) 180 417.36 T
5 F
(cos\050\051) 288 417.36 T
(cosine) 360 417.36 T
3 F
(FloatT) 180 403.36 T
(an\050\051) 213.82 403.36 T
5 F
(tan\050\051) 288 403.36 T
(tangent) 360 403.36 T
3 F
(FloatArcSin\050\051) 180 389.36 T
5 F
(asin\050\051) 288 389.36 T
(arc-sine \050inverse sine\051) 360 389.36 T
3 F
(FloatArcCos\050\051) 180 375.36 T
5 F
(acos\050\051) 288 375.36 T
(arc-cosine \050inverse cosine\051) 360 375.36 T
3 F
(FloatArcT) 180 361.36 T
(an\050\051) 232.16 361.36 T
5 F
(atan\050\051) 288 361.36 T
(arc-tangent \050inverse tangent\051) 360 361.36 T
3 F
(FloatArcT) 180 347.36 T
(an2\050\051) 232.16 347.36 T
5 F
(arc-tangent given two coordinates) 360 347.36 T
3 F
(FloatSinh\050\051) 180 333.36 T
5 F
(sinh\050\051) 288 333.36 T
(hyperbolic sine) 360 333.36 T
3 F
(FloatCosh\050\051) 180 319.36 T
5 F
(cosh\050\051) 288 319.36 T
(hyperbolic cosine) 360 319.36 T
3 F
(FloatT) 180 305.36 T
(anh\050\051) 213.82 305.36 T
5 F
(tanh\050\051) 288 305.36 T
(hyperbolic tangent) 360 305.36 T
3 F
(FloatArcSinh\050\051) 180 291.36 T
5 F
(asinh\050\051) 288 291.36 T
(hyperbolic arc-sine) 360 291.36 T
3 F
(FloatArcCosh\050\051) 180 277.36 T
5 F
(acosh\050\051) 288 277.36 T
(hyperbolic arc-cosine) 360 277.36 T
3 F
(FloatArcT) 180 263.36 T
(anh\050\051) 232.16 263.36 T
5 F
(atanh\050\051) 288 263.36 T
(hyperbolic arc-tangent) 360 263.36 T
3 F
(FloatExp\050\051) 180 249.36 T
5 F
(e raised to the power X) 360 249.36 T
3 F
(FloatExponential\050\051) 180 235.36 T
5 F
(exp\050\051) 288 235.36 T
(X raised to the Y power) 360 235.36 T
3 F
(FloatLg\050\051) 180 221.36 T
5 F
(logarithm to the base 2) 360 221.36 T
3 F
(FloatLog\050\051) 180 207.36 T
5 F
(log\050\051) 288 207.36 T
(logarithm to the base 10) 360 207.36 T
3 F
(FloatLn\050\051) 180 193.36 T
5 F
(logarithm to the base e \050natural log\051) 360 193.36 T
3 F
(FloatLn1plusX\050\051) 180 179.36 T
5 F
(natural log of \0501 + X\051) 360 179.36 T
3 F
(FloatSqr\050\051) 180 165.36 T
5 F
(square of X) 360 165.36 T
3 F
(FloatSqrt\050\051) 180 151.36 T
5 F
(sqrt\050\051) 288 151.36 T
(square root) 360 151.36 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "950" 6
%%Page: "951" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Conversions to Other Types) 370.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(951) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
-0.39 (FloatRandomize\050\051) 189 641.33 P
1 F
-0.38 ( primes the random number generator) 282.33 641.33 P
-0.38 (, in preparation) 457.12 641.33 P
-0.54 (for a call to) 189 628.33 P
3 F
-0.56 (FloatRandom\050\051) 241.48 628.33 P
1 F
-0.54 ( or) 320 628.33 P
3 F
-0.56 (FloatRandomN\050\051) 333.92 628.33 P
1 F
-0.54 (. If) 420.77 628.33 P
3 F
-0.56 (FloatRandomize\050\051) 435.43 628.33 P
1 F
-0.31 (is passed the \337ag) 189 615.33 P
1 9 Q
-0.28 (RGIF_USE_SEED) 270 615.33 P
1 10 Q
-0.31 (, the routine must also pass a developer) 347.34 615.33 P
(supplied seed.) 189 602.33 T
3 F
(FloatRandom\050\051) 189 582.33 T
1 F
( returns a random value between 0 \050inclusive\051 and 1) 267.52 582.33 T
(\050exclusive\051. The number is placed on top of the) 189 569.33 T
1 9 Q
(FP) 406.05 569.33 T
1 10 Q
( stack. T) 418.06 569.33 T
(o assign that) 456.6 569.33 T
(value to a variable, use) 189 556.33 T
3 F
(FloatPopNumber\050\051) 298.85 556.33 T
1 F
(.) 396.44 556.33 T
3 F
(FloatRandomN\050\051) 189 536.33 T
1 F
( returns a random value between 0 \050inclusive\051 and N) 275.85 536.33 T
-0.09 (\050exclusive\051, where N is an integer) 189 523.33 P
-0.09 (. The integer value must be on top of the) 342.25 523.33 P
1 9 Q
(FP) 189 510.33 T
1 10 Q
( stack. The returned integer is pushed onto the) 201.01 510.33 T
1 9 Q
(FP) 420.84 510.33 T
1 10 Q
( stack.T) 432.84 510.33 T
(o assign that) 468.6 510.33 T
(value to a variable, use) 189 497.33 T
3 F
(FloatPopNumber\050\051) 298.85 497.33 T
1 F
(.) 396.44 497.33 T
81 464.98 531 477 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 464.98 531 477 R
7 X
0 0 0 1 0 0 0 K
V
76.5 472.23 617.5 475.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 458.31 T
(D-) 147.13 458.31 T
(3 Creating a Random Number) 157.68 458.31 T
4 9 Q
(/*) 81 443.98 T
( * This method takes a passed seed \050passedSeed\051 and returns a random integer) 81 432.98 T
( * between 0 and 100.) 81 421.98 T
( */) 81 410.98 T
(@method MyProcessClass, MSG_GET_RANDOM_FLOAT {) 81 392.98 T
(long double) 102.6 381.98 T
(randomX;) 212.5 381.98 T
(/* Prime the random number generator. */) 125 370.98 T
(FloatRandomize\050RGIF_USE_SEED, passedSeed\051;) 102.6 359.98 T
(randomX = 100;) 102.6 348.98 T
(FloatPushNumber\050&randomX\051;) 102.6 337.98 T
(FloatRandomN\050\051;) 102.6 326.98 T
(FloatPopNumber\050&randomX\051;) 102.6 315.98 T
(return\050randomX\051;) 102.6 304.98 T
(}) 81 293.98 T
81 269.95 531 281.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 269.95 531 281.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 277.2 617.5 280.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(D.2) 149.22 219.95 T
0 24 Q
(Conversions to Other T) 189 219.95 T
(ypes) 453.94 219.95 T
1 10 Q
-0.19 (In many cases,) 189 194.29 P
1 9 Q
-0.17 (FP) 259.93 194.29 P
1 10 Q
-0.19 ( numbers will need to be converted to different types for) 271.93 194.29 P
(use in different parts of an application. For example, \337oating point) 189 181.29 T
-0.57 (numbers may be involved in a complex function that returns an integer) 189 168.29 P
-0.57 (.) 511.8 168.29 P
1 9 Q
-0.51 (FP) 516.79 168.29 P
1 10 Q
(numbers may also need to appear to the user as) 189 155.29 T
1 9 Q
(ASCII) 412.74 155.29 T
1 10 Q
( text.) 438.73 155.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "951" 7
%%Page: "952" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(952) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Converting Into Other Floats) 180 640 T
1 10 Q
-0.75 (There are several routines which convert) 189 618.33 P
1 9 Q
-0.67 (GEOS) 376.74 618.33 P
-0.67 (FP) 404.94 618.33 P
1 10 Q
-0.75 ( numbers into other \337oat) 416.95 618.33 P
-0.68 (formats, compatible with the C types) 189 605.33 P
3 F
-0.7 (\337oat) 358.28 605.33 P
1 F
-0.68 ( and) 381.61 605.33 P
3 F
-0.7 (double) 403.23 605.33 P
1 F
-0.68 (. T) 438.6 605.33 P
-0.68 (ypically in C, this) 449.63 605.33 P
-0.2 (conversion is accomplished by casting the) 189 592.33 P
1 9 Q
-0.18 (FP) 382.42 592.33 P
1 10 Q
-0.2 ( numbers into the other type.) 394.43 592.33 P
(It is therefore done automatically for you.) 189 579.33 T
-0.81 (If you are working in Assembly or you wish to directly pass \337oats or doubles) 189 559.33 P
(to C stubs, consult \322Direct FP Operations\323 on page 964.) 189 546.33 T
0 12 Q
(Converting ASCII to FP Numbers) 180 520 T
4 10 Q
(FloatAsciiToFloat\050\051) 189 498.33 T
3 F
(FloatAsciiT) 189 478.33 T
(oFloat\050\051) 248.07 478.33 T
1 F
(converts a number represented in an) 292.05 478.33 T
1 9 Q
(ASCII) 465.2 478.33 T
1 10 Q
( text) 491.19 478.33 T
(format into a) 189 465.33 T
1 9 Q
(FP) 252.16 465.33 T
1 10 Q
( number) 264.17 465.33 T
(. The routine recognizes two \337ags:) 302.32 465.33 T
2 F
(u) 189 445.33 T
1 9 Q
(F) 207 445.33 T
(AF_PUSH_RESUL) 212.34 445.33 T
(T) 291.85 445.33 T
1 10 Q
(Pushes the result onto the) 207 433.33 T
1 9 Q
(FP) 331.27 433.33 T
1 10 Q
( stack.) 343.28 433.33 T
2 F
(u) 189 414.33 T
1 9 Q
(F) 207 414.33 T
(AF_STORE_NUMBER) 212.34 414.33 T
1 10 Q
(Stores the result in a speci\336ed address.) 207 402.33 T
(The routine must also be passed a pointer to the string to convert, the) 189 383.33 T
-0.26 (number of characters in the string to convert \050starting at the address\051 and) 189 370.33 P
(the buffer to store the) 189 357.33 T
1 9 Q
(FP) 292.52 357.33 T
1 10 Q
( number if passing) 304.53 357.33 T
1 9 Q
(F) 393.43 357.33 T
(AF_STORE_NUMBER) 398.76 357.33 T
1 10 Q
(.) 494.6 357.33 T
0 12 Q
(Converting FP Numbers to ASCII) 180 331 T
4 10 Q
(FloatFloatToAscii\050\051, FloatFloatToAscii_StdFormat\050\051,) 189 309.33 T
(FloatFloatIEEE64ToAscii_StdFormat\050\051) 189 296.33 T
3 F
(FloatFloatT) 189 276.33 T
(oAscii\050\051) 249.74 276.33 T
1 F
(converts an) 292.05 276.33 T
1 9 Q
(FP) 348.16 276.33 T
1 10 Q
( number into) 360.17 276.33 T
1 9 Q
(ASCII) 422.77 276.33 T
1 10 Q
( text format. The) 448.76 276.33 T
-0.1 (routine must be passed a stack frame, which may be set up by declaring a) 189 263.33 P
(local variable of type) 189 250.33 T
3 F
(FF) 287.54 250.33 T
(A_stackFrame) 301.24 250.33 T
1 F
(and moving data into the) 378.19 250.33 T
-0.28 (appropriate \336elds. Y) 189 237.33 P
-0.28 (ou should also pass the routine a pointer to a buffer to) 281.59 237.33 P
(store the resultant string.) 189 224.33 T
(The) 189 204.33 T
3 F
(FF) 209.56 204.33 T
(A_stackFrame) 223.26 204.33 T
1 F
( is a union of two structures:) 297.34 204.33 T
3 F
-0.46 (FloatFloatAsciiData) 189 191.33 P
1 F
-0.45 ( or) 293.8 191.33 P
3 F
-0.46 (FloatFloatT) 307.91 191.33 P
-0.46 (oDateT) 368.65 191.33 P
-0.46 (imeData) 406.17 191.33 P
1 F
-0.45 (. Y) 450.05 191.33 P
-0.45 (ou will want to) 461.09 191.33 P
(use the) 189 178.33 T
3 F
(FloatFloatT) 225.3 178.33 T
(oAsciiData) 286.04 178.33 T
1 F
( structure in most cases;) 342.51 178.33 T
3 F
(FloatFloatT) 189 165.33 T
(oAsciiDateT) 249.74 165.33 T
(imeData) 312.81 165.33 T
1 F
( is used to format a) 356.69 165.33 T
1 9 Q
(FP) 448.19 165.33 T
1 10 Q
( number) 460.2 165.33 T
(\050representing a date and time\051 into a date-time format passed in the) 189 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "952" 8
%%Page: "953" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Conversions to Other Types) 370.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(953) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.1 (structure. The routine checks a bit in the structure to see which structure) 189 641.33 P
(is being passed.) 189 628.33 T
0 14 Q
(D.2.0.1) 125.86 594.67 T
(Normal Conversions) 189 594.67 T
1 10 Q
(The) 189 572.33 T
3 F
( FloatFloatT) 206.78 572.33 T
(oAsciiData) 270.39 572.33 T
1 F
( structure is used most often in formatting) 326.86 572.33 T
-0.08 (FP numbers into ASCII. The structure is rather large and cumbersome to) 189 559.33 P
-0.71 (set up. Y) 189 546.33 P
-0.71 (ou may wish to use the routine) 227.22 546.33 P
3 F
-0.73 (FloatFloatT) 367.63 546.33 P
-0.73 (oAscii_StdFormat\050\051) 428.37 546.33 P
1 F
-0.29 (which sets up many of these entries automatically) 189 533.33 P
-0.29 (. \050Code Display) 417.71 533.33 P
-0.29 (D-) 489.91 533.33 P
-0.29 (4 lists) 501.02 533.33 P
(the entries of the) 189 520.33 T
3 F
(FloatFloatT) 270.67 520.33 T
(oAsciiData) 331.41 520.33 T
1 F
( structure.\051) 387.88 520.33 T
81 487.98 531 500 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 487.98 531 500 R
7 X
0 0 0 1 0 0 0 K
V
76.5 495.23 617.5 498.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 481.31 T
(D-) 147.13 481.31 T
(4 FloatFloatT) 157.68 481.31 T
(oAsciiData Structure) 219.17 481.31 T
4 9 Q
(typedef struct {) 81 466.98 T
(/*) 81 448.98 T
( * FFA_params stores the entries that the caller must set up.) 81 437.98 T
( */) 81 426.98 T
(FloatFloatToAsciiParams) 125 415.98 T
(FFA_params;) 256.5 415.98 T
(/*) 81 397.98 T
( * These entries store information returned by FloatFloatToAscii\050\051 that may be) 81 386.98 T
( * examined.) 81 375.98 T
( */) 81 364.98 T
(word) 125 353.98 T
(FFA_startNumber;) 256.5 353.98 T
(word) 125 342.98 T
(FFA_decimalPoint;) 256.5 342.98 T
(word) 125 331.98 T
(FFA_endNumber;) 256.5 331.98 T
(word) 125 320.98 T
(FFA_numChars;) 256.5 320.98 T
(word) 125 309.98 T
(FFA_startExponent;) 256.5 309.98 T
(/*) 81 291.98 T
( * The rest of the entries are for internal use only.) 81 280.98 T
( */) 81 269.98 T
(word) 125 258.98 T
(FFA_bufSize;) 256.5 258.98 T
(word) 125 247.98 T
(FFA_saveDI;) 256.5 247.98 T
(word) 125 236.98 T
(FFA_numSign;) 256.5 236.98 T
(byte) 125 225.98 T
(FFA_startSigCount;) 256.5 225.98 T
(byte) 125 214.98 T
(FFA_sigCount;) 256.5 214.98 T
(byte) 125 203.98 T
(FFA_noMoreSigInfo;) 256.5 203.98 T
(byte) 125 192.98 T
(FFA_startDecCount;) 256.5 192.98 T
(byte) 125 181.98 T
(FFA_decCount;) 256.5 181.98 T
(word) 125 170.98 T
(FFA_decExponent;) 256.5 170.98 T
(word) 125 159.98 T
(FFA_curExponent;) 256.5 159.98 T
(byte) 125 148.98 T
(FFA_useCommas;) 256.5 148.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "953" 9
%%Page: "954" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(954) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 9 Q
0 X
(byte) 125 642 T
(FFA_charsToComma;) 256.5 642 T
(char) 125 631 T
(FFA_commaChar;) 256.5 631 T
(char) 125 620 T
(FFA_decimalChar;) 256.5 620 T
(} FloatFloatToAsciiData;) 81 609 T
81 584.98 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.98 531 597 R
7 X
0 0 0 1 0 0 0 K
V
76.5 592.23 617.5 595.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
5 9 Q
0 X
0 0 0 1 0 0 0 K
(FF) 189 567.31 T
(A_) 200.34 567.31 T
5 10 Q
(params) 211.18 567.31 T
1 F
( is a structure that stores the following entries of its own:) 246.17 567.31 T
3 F
(formatFlags) 189 547.31 T
1 F
0.69 0.1 (Flags specifying the look and feel of the) 252 535.31 B
1 9 Q
0.62 0.1 (ASCII) 447.14 535.31 B
1 10 Q
0.69 0.1 ( text format) 473.65 535.31 B
(\050see below for allowed \337ags\051.) 252 523.31 T
3 F
(decimalOffset) 189 504.31 T
1 F
-0.01 (Integer which speci\336es the number of decimal places to shift) 252 492.31 P
0.69 0.18 (the output. For example, to display a number in terms of) 252 480.31 B
0.59 (millions, a) 252 468.31 P
3 F
0.61 (decimalOffset) 304.32 468.31 P
1 F
0.59 (of -6 shifts the decimal point six) 379.84 468.31 P
0.01 (places to the left; to display in terms of tenths would require) 252 456.31 P
(a) 252 444.31 T
3 F
(decimalOffset) 260.34 444.31 T
1 F
(of 1.) 335.25 444.31 T
3 F
(totalDigits) 189 425.31 T
1 F
0.69 0.24 (Integer which specif) 252 413.31 B
0.69 0.24 (ies the maximum number of decimal) 351.06 413.31 B
0.69 0.17 (places \050integer and decimal portions\051 that the) 252 401.31 B
1 9 Q
0.62 0.17 (FP) 478.07 401.31 B
1 10 Q
0.69 0.17 ( number) 490.41 401.31 B
-0.47 (may exhibit. The) 252 389.31 P
1 9 Q
-0.42 (ASCII) 331.54 389.31 P
1 10 Q
-0.47 ( string is truncated if the length of the) 357.53 389.31 P
(string is greater than this number) 252 377.31 T
(.) 409.79 377.31 T
3 F
(decimalLimit) 189 358.31 T
1 F
-0.26 (Integer which speci\336es the maximum number of digits to the) 252 346.31 P
-0.15 (right of the decimal point. For example a) 252 334.31 P
3 F
-0.15 (decimalLimit) 442.32 334.31 P
1 F
-0.15 (of 2) 514.48 334.31 P
(would print out 123.456789 as 123.46.) 252 322.31 T
3 F
(preNegative) 189 303.31 T
1 F
-0.17 (Characters used to precede a negative number) 252 291.31 P
-0.17 (, in the format) 465.03 291.31 P
(of a null terminated text string.) 252 279.31 T
3 F
(postNegative) 189 260.31 T
1 F
-0.47 (Characters used to follow a negative number) 252 248.31 P
-0.47 (, in the format of) 455.29 248.31 P
(a null terminated text string.) 252 236.31 T
3 F
(prePositive) 189 217.31 T
1 F
0.22 (Characters used to precede a positive number) 252 205.31 P
0.22 (, in the format) 463.86 205.31 P
(of a null terminated text string.) 252 193.31 T
3 F
(postPositive) 189 174.31 T
1 F
-0.12 (Characters used to follow a positive number) 252 162.31 P
-0.12 (, in the format of) 453.88 162.31 P
(a null terminated text string.) 252 150.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "954" 10
%%Page: "955" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Conversions to Other Types) 370.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(955) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(header) 189 641.33 T
1 F
0.69 0.09 (Characters used to precede the number) 252 641.33 B
0.69 0.09 (, in the format of a) 439.95 641.33 B
-0.42 (null terminated text string. For example, a typical header for) 252 629.33 P
(a currency format might be \322$\323.) 252 617.33 T
3 F
(trailer) 189 598.33 T
1 F
-0.69 (Characters used to follow a FP number) 252 598.33 P
-0.69 (, in the format of a null) 427.89 598.33 P
(terminated text string.) 252 586.33 T
(The) 189 567.33 T
3 F
(formatFlags) 209.56 567.33 T
1 F
(record is a record of type) 275.58 567.33 T
3 F
(FloatFloatT) 189 554.33 T
(oAsciiFormatFlags) 249.74 554.33 T
1 F
( and de\336nes the format of the) 347.88 554.33 T
1 9 Q
(ASCII) 486.78 554.33 T
1 10 Q
(output. Set the appropriate \337ags to get the desired output.) 189 541.33 T
2 F
(u) 189 521.33 T
1 9 Q
(FF) 207 521.33 T
(AF_FROM_ADDR) 218.34 521.33 T
-0.42 (Set if routine should take the FP number from a speci\336ed address, rather than) 207 509.33 P
(the FP stack. This pointer \050*number\051 should be passed to) 207 497.33 T
3 10 Q
(FloatFloatT) 207 485.33 T
(oAscii\050\051) 267.74 485.33 T
1 9 Q
( if this \337ag is set.) 307.18 485.33 T
2 10 Q
(u) 189 466.33 T
1 9 Q
(FF) 207 466.33 T
(AF_DONT_USE_SCIENTIFIC) 218.34 466.33 T
1 10 Q
(Set if the result should not be expressed in scienti\336c notation under) 207 454.33 T
(any condition. If this is set, the number will always be formatted in) 207 442.33 T
(\336xed format.) 207 430.33 T
2 F
(u) 189 411.33 T
1 9 Q
(FF) 207 411.33 T
(AF_SCIENTIFIC) 218.34 411.33 T
1 10 Q
(Set if the result should be expressed in scienti\336c notation even if the) 207 399.33 T
(number can be expressed in \336xed point format. For example, the) 207 387.33 T
(number \3242\325 will be expressed as \3222 x 10) 207 375.33 T
1 8 Q
(0) 384.46 379.33 T
1 10 Q
(.\323) 388.91 375.33 T
2 F
(u) 189 356.33 T
1 9 Q
(FF) 207 356.33 T
(AF_PERCENT) 218.34 356.33 T
1 10 Q
(Set if the result should be expressed as a percentage.) 207 344.33 T
2 F
(u) 189 325.33 T
1 9 Q
(FF) 207 325.33 T
(AF_USE_COMMAS) 218.34 325.33 T
1 10 Q
(Set if the result should use commas to separate thousands.) 207 313.33 T
2 F
(u) 189 294.33 T
1 9 Q
(FF) 207 294.33 T
(AF_NO_TRAIL_ZEROS) 218.34 294.33 T
1 10 Q
(Set if extraneous zeros to the right of the decimal point should be) 207 282.33 T
(ignored. For example, \322123.67000000\323 will be reduced to \322123.67.\323) 207 270.33 T
2 F
(u) 189 251.33 T
1 9 Q
(FF) 207 251.33 T
(AF_NO_LEAD_ZEROS) 218.34 251.33 T
1 10 Q
-0.17 (Set to ignore the lead zero for a number less than one. That is, \3220.123\323) 207 239.33 P
(is reduced to \322.123.\323) 207 227.33 T
2 F
(u) 189 208.33 T
1 9 Q
(FF) 207 208.33 T
(AF_HEADER_PRESENT) 218.34 208.33 T
1 10 Q
(Set if a header is present; this speeds up conversion.) 207 196.33 T
2 F
(u) 189 177.33 T
1 9 Q
(FF) 207 177.33 T
(AF_TRAILER_PRESENT) 218.34 177.33 T
1 10 Q
(Set if a trailer is present; this speeds up conversion.) 207 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "955" 11
%%Page: "956" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(956) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 189 641.33 T
1 9 Q
(FF) 207 641.33 T
(AF_SIGN_CHAR_TO_FOLLOW_HEADER) 218.34 641.33 T
1 10 Q
(Set if sign character\050s\051 should follow the header) 207 629.33 T
(.) 426.82 629.33 T
2 F
(u) 189 610.33 T
1 9 Q
(FF) 207 610.33 T
(AF_SIGN_CHAR_TO_PRECEDE_TRAILER) 218.34 610.33 T
1 10 Q
(Set if sign character\050s\051 should precede the trailer) 207 598.33 T
(.) 432.55 598.33 T
-0.43 (The rest of the entries in) 189 579.33 P
3 F
-0.44 (FloatFloatT) 303.65 579.33 P
-0.44 (oAsciiData) 364.39 579.33 P
1 F
-0.43 ( store information \336lled) 420.86 579.33 P
(in by) 189 566.33 T
3 F
(FloatFloatT) 214.75 566.33 T
(oAscii\050\051) 275.49 566.33 T
1 F
(. These entries are described below:) 314.93 566.33 T
5 9 Q
-0.27 (FF) 189 546.33 P
-0.27 (A_) 200.34 546.33 P
5 10 Q
-0.3 (startNumber) 211.18 546.33 P
1 F
-0.3 ( stores the offset to the start of numeric characters in the) 270.43 546.33 P
1 9 Q
(ASCII) 252 534.33 T
1 10 Q
( buffer) 277.99 534.33 T
(.) 307.8 534.33 T
5 9 Q
-0.18 (FF) 189 515.33 P
-0.18 (A_) 200.34 515.33 P
5 10 Q
-0.2 (decimalPoint) 211.18 515.33 P
1 F
-0.2 ( stores the offset to the decimal point character or zero if) 272.09 515.33 P
(no decimal point is present.) 252 503.33 T
5 9 Q
0.59 (FF) 189 484.33 P
0.59 (A_) 200.34 484.33 P
5 10 Q
0.66 (endNumber) 211.18 484.33 P
1 F
0.66 ( stores the offset to the end of the numeric characters in) 265.43 484.33 P
(the) 252 472.33 T
1 9 Q
(ASCII) 269.78 472.33 T
1 10 Q
( buffer) 295.77 472.33 T
(.) 325.58 472.33 T
5 9 Q
0.62 0.01 (FF) 189 453.33 B
0.62 0.01 (A_) 200.37 453.33 B
5 10 Q
0.69 0.01 (numChars) 211.23 453.33 B
1 F
0.69 0.01 ( stores the total number of characters in the) 260.4 453.33 B
1 9 Q
0.62 0.01 (ASCII) 473.61 453.33 B
1 10 Q
0.69 0.01 ( buffer) 499.67 453.33 B
-0.21 (\050excluding the null terminator\051. This entry is set to zero if an) 252 441.33 P
(error is encountered.) 252 429.33 T
5 9 Q
-0.28 (FF) 189 410.33 P
-0.28 (A_) 200.34 410.33 P
5 10 Q
-0.31 (startExponent) 211.18 410.33 P
1 F
-0.31 ( stores the offset to the \322) 275.98 410.33 P
1 9 Q
-0.28 (E) 386.35 410.33 P
1 10 Q
-0.31 (\323 character in the) 392.85 410.33 P
1 9 Q
-0.28 (ASCII) 474.77 410.33 P
1 10 Q
-0.31 ( buffer) 500.76 410.33 P
-0.03 (or zero if no exponent is present. Applications can check this) 252 398.33 P
0.69 0.25 (to see if the number was expressed in scientif) 252 386.33 B
0.69 0.25 (ic notation) 478.69 386.33 B
(using the \324) 252 374.33 T
1 9 Q
(E) 299.97 374.33 T
1 10 Q
(\325 format.) 306.47 374.33 T
0 14 Q
(D.2.0.2) 125.86 341.67 T
(Date-T) 189 341.67 T
(ime Conversions) 232.3 341.67 T
3 10 Q
(FF) 189 319.33 T
(A_stackFrame) 202.7 319.33 T
1 F
( may contain) 276.78 319.33 T
3 F
(FloatFloatT) 339.2 319.33 T
(oAsciiDateT) 399.94 319.33 T
(imeData) 463.01 319.33 T
1 F
( if) 506.89 319.33 T
3 F
(FloatFloatT) 189 306.33 T
(oAscii\050\051) 249.74 306.33 T
1 F
( is being used to convert a) 289.18 306.33 T
1 9 Q
(FP) 411.79 306.33 T
1 10 Q
( number into a) 423.8 306.33 T
(date-time format. In that case) 189 293.33 T
3 F
(FF) 330.5 293.33 T
(A_stackFrame) 344.2 293.33 T
1 F
( contains the structure) 418.28 293.33 T
3 F
(FloatFloatT) 189 280.33 T
(oDateT) 249.74 280.33 T
(imeData) 287.26 280.33 T
1 F
( instead of) 331.14 280.33 T
3 F
(FloatFloatT) 381.89 280.33 T
(oAsciiData) 442.63 280.33 T
1 F
(.) 499.1 280.33 T
(\050) 189 267.33 T
3 F
(FF) 192.33 267.33 T
(A_stackFrame) 206.03 267.33 T
1 F
( is a union.\051) 280.11 267.33 T
3 F
(FloatFloatT) 189 247.33 T
(oDateT) 249.74 247.33 T
(imeData) 287.26 247.33 T
1 F
( contains one entry) 331.14 247.33 T
(,) 418.18 247.33 T
5 9 Q
(FF) 423.74 247.33 T
(A_) 435.08 247.33 T
5 10 Q
(dateT) 445.92 247.33 T
(imeParams) 471.87 247.33 T
1 F
(.) 524.45 247.33 T
(This structure contains several \337ags which specify how the date-time) 189 234.33 T
(should be formatted and a number of entries which break down the) 189 221.33 T
(date-time into its respective parts \050year) 189 208.33 T
(, month, day etc.\051 If none of these) 371.05 208.33 T
(entries are \336lled in, the date-time is taken from the top of the) 189 195.33 T
1 9 Q
(FP) 475.89 195.33 T
1 10 Q
( stack.) 487.9 195.33 T
(Date-times are represented by) 189 175.33 T
1 9 Q
(FP) 332.16 175.33 T
1 10 Q
( numbers in) 344.17 175.33 T
1 9 Q
(GEOS) 402.51 175.33 T
1 10 Q
(. The integer portion) 428.68 175.33 T
-0.58 (represents dates as integers counted from Jan 1, 1900, which is designated) 189 162.33 P
-0.77 (as 1. The highest date allowed is 73050 \050December 31, 2099\051.) 189 149.33 P
-0.77 (The fractional) 464.57 149.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "956" 12
%%Page: "957" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Conversions to Other Types) 370.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(957) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(portion represents a fraction of the day between midnight \0500.000000\051 and) 189 641.33 T
(1) 189 628.33 T
(1:59:59 p.m. \0500.999988\051. This fractional value is derived from the hour) 194.01 628.33 T
(,) 516.68 628.33 T
(minute and second of the day) 189 615.33 T
(.) 323.27 615.33 T
81 582.98 531 595 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 582.98 531 595 R
7 X
0 0 0 1 0 0 0 K
V
76.5 590.23 617.5 593.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 576.31 T
(D-) 147.13 576.31 T
(5 DateT) 157.68 576.31 T
(ime Parameters) 193.62 576.31 T
4 9 Q
(typedef struct {) 81 561.98 T
(FloatFloatToDateTimeFlags) 125 550.98 T
(FFA_dateTimeFlags;) 301 550.98 T
(word) 125 539.98 T
(FFA_year;) 301 539.98 T
(byte) 125 528.98 T
(FFA_month;) 301 528.98 T
(byte) 125 517.98 T
(FFA_day;) 301 517.98 T
(byte) 125 506.98 T
(FFA_weekday;) 301 506.98 T
(byte) 125 495.98 T
(FFA_hours;) 301 495.98 T
(byte) 125 484.98 T
(FFA_minutes;) 301 484.98 T
(byte) 125 473.98 T
(FFA_seconds;) 301 473.98 T
(} FloatFloatToDateTimeParams;) 81 462.98 T
(/*) 81 444.98 T
( *) 81 433.98 T
(FloatFloatToDateTimeFlags record) 125 433.98 T
( */) 81 422.98 T
(typedef WordFlags FloatFloatToDateTimeFlags;) 81 404.98 T
(#define) 81 393.98 T
(FFDT_DATE_TIME_OP) 168.98 393.98 T
(0x8000) 301 393.98 T
(#define) 81 382.98 T
(FFDT_FROM_ADDR) 168.98 382.98 T
(0x4000) 301 382.98 T
(#define) 81 371.98 T
(FFDT_FORMAT) 168.98 371.98 T
(0x3fff) 301 371.98 T
81 347.95 531 359.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 347.95 531 359.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 355.2 617.5 358.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(The \337ag) 189 330.29 T
1 9 Q
(FFDT_DA) 229.38 330.29 T
(TE_TIME_OP) 271.9 330.29 T
1 10 Q
( is set to notify the) 331.06 330.29 T
3 F
(FloatFloatT) 419.78 330.29 T
(oAscii\050\051) 480.52 330.29 T
1 F
(routine that this operation is a date-time format, not a normal \337oat to) 189 317.29 T
1 9 Q
(ASCII) 189 304.29 T
1 10 Q
( conversion. This \337ag must be set if you want to convert the) 214.99 304.29 T
1 9 Q
(FP) 492.8 304.29 T
1 10 Q
(number into a date-time format using) 189 291.29 T
3 F
(FloatFloatT) 366.43 291.29 T
(oAscii\050\051) 427.17 291.29 T
1 F
(.) 466.61 291.29 T
1 9 Q
(FFDT_FROM_ADDR) 189 271.29 T
1 10 Q
( is set if the date-time) 278.01 271.29 T
1 9 Q
(FP) 381.92 271.29 T
1 10 Q
( number should not be taken) 393.93 271.29 T
(from the) 189 258.29 T
1 9 Q
(FP) 231.22 258.29 T
1 10 Q
( stack \050or passed directly in the) 243.23 258.29 T
3 F
(FloatFloatT) 189 245.29 T
(oDateT) 249.74 245.29 T
(imeParams) 287.26 245.29 T
1 F
( structure\051 but should instead be taken) 345.96 245.29 T
(from the address passed in) 189 232.29 T
3 F
(FloatFloatT) 315.86 232.29 T
(oAscii\050\051) 376.6 232.29 T
1 F
(.) 416.04 232.29 T
1 9 Q
(FFDT_FORMA) 189 212.29 T
(T) 252.51 212.29 T
1 10 Q
( stores the) 258.52 212.29 T
3 F
(DateT) 309.45 212.29 T
(imeFormat) 340.86 212.29 T
1 F
( that the routine will use to) 398.45 212.29 T
(format the number into a date-time string.) 189 199.29 T
(If the date-time is directly passed in, and not taken from an) 189 179.29 T
1 9 Q
(FP) 467.74 179.29 T
1 10 Q
( date-time) 479.75 179.29 T
(number either at a passed address or the top of an) 189 166.29 T
1 9 Q
(FP) 424.4 166.29 T
1 10 Q
( stack,) 436.41 166.29 T
3 F
(FloatFloatT) 189 153.29 T
(oAscii\050\051) 249.74 153.29 T
1 F
( looks at the other passed parameters.) 289.18 153.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "957" 13
%%Page: "958" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(958) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(FF) 189 641.33 T
(A_) 200.34 641.33 T
5 10 Q
(year) 211.18 641.33 T
1 F
( speci\336es the year) 230.8 641.33 T
(. The value must be between 1900 and 2099.) 312.47 641.33 T
-0.58 (This is not a one-based year) 189 628.33 P
-0.58 (, as it is when presented as a date-time number) 314.48 628.33 P
-0.58 (.) 528.22 628.33 P
5 9 Q
(FF) 189 608.33 T
(A_) 200.34 608.33 T
5 10 Q
(month) 211.18 608.33 T
1 F
( is the month of the year) 240.81 608.33 T
(, a value between 1 and 12.) 353.23 608.33 T
5 9 Q
(FF) 189 588.33 T
(A_) 200.34 588.33 T
5 10 Q
(day) 211.18 588.33 T
1 F
( is the day of a month, a value between 1 and 31.) 228.03 588.33 T
5 9 Q
(FF) 189 568.33 T
(A_) 200.34 568.33 T
5 10 Q
(hour) 211.18 568.33 T
1 F
( speci\336es the hour of the day) 232.84 568.33 T
(, a value between 0 and 23. Zero) 363.77 568.33 T
(speci\336es midnight.) 189 555.33 T
5 9 Q
(FF) 189 535.33 T
(A_) 200.34 535.33 T
5 10 Q
(minutes) 211.18 535.33 T
1 F
( speci\336es the minute of the hour) 248.02 535.33 T
(, a value between 0 and 59.) 395.8 535.33 T
5 9 Q
(FF) 189 515.33 T
(A_) 200.34 515.33 T
5 10 Q
(seconds) 211.18 515.33 T
1 F
( speci\336es the second of the minute, a value between 0 and 59.) 246.16 515.33 T
0 14 Q
(D.2.0.3) 125.86 481.67 T
(Using Standard Formats) 189 481.67 T
3 10 Q
-0.7 (FloatFloatT) 189 459.33 P
-0.7 (oAscii_StdFormat\050\051) 249.74 459.33 P
1 F
-0.68 (uses a pre-set stack frame, eliminating) 352.47 459.33 P
-0.05 (the need to set up the variables of the) 189 446.33 P
3 F
-0.06 (FloatFloatT) 365.39 446.33 P
-0.06 (oAsciiData) 426.13 446.33 P
1 F
-0.05 ( structure) 482.6 446.33 P
(manually) 189 433.33 T
(. The only \337ags recognized are) 231.79 433.33 T
1 9 Q
(FF) 374.39 433.33 T
(AF_FROM_ADDR,) 385.73 433.33 T
(FF) 189 420.33 T
(AF_SCIENTIFIC, FF) 200.34 420.33 T
(AF_PERCENT) 289.18 420.33 T
(, FF) 350.68 420.33 T
(AF_USE_COMMAS,) 367.03 420.33 T
1 10 Q
(and) 455.7 420.33 T
1 9 Q
(FF) 189 407.33 T
(AF_NO_TRAIL_ZEROS.) 200.34 407.33 T
1 10 Q
(The developer must pass the number of total) 305.51 407.33 T
(digits and the number of decimal digits desired. If the \337ag) 189 394.33 T
1 9 Q
-0.16 (FF) 189 381.33 P
-0.16 (AF_FROM_ADDR) 200.34 381.33 P
1 10 Q
-0.18 ( is used, a pointer to a) 276.84 381.33 P
1 9 Q
-0.16 (FP) 380.44 381.33 P
1 10 Q
-0.18 ( number \050not on the) 392.45 381.33 P
1 9 Q
-0.16 (FP) 486.01 381.33 P
1 10 Q
-0.18 ( stack\051) 498.01 381.33 P
(must also be passed.) 189 368.33 T
-0.57 (The standard format sets the following elements of the stack frame to zero:) 189 348.33 P
3 F
(decimalOffset, header) 189 335.33 T
(, trailer) 302.25 335.33 T
(, postNegative, prePositive) 340.87 335.33 T
1 F
(, and) 480.12 335.33 T
3 F
(postPositive) 189 322.33 T
1 F
(. The structure element) 253.25 322.33 T
3 F
(preNegative) 364.92 322.33 T
1 F
(is set to the minus) 431.49 322.33 T
(sign \050\322) 189 309.33 T
6 F
(-) 218.26 309.33 T
1 F
(\323\051.) 224.26 309.33 T
3 F
(FloatFloatIEEE64T) 189 289.33 T
(oAscii_StdFormat\050\051) 288.43 289.33 T
1 F
( performs the same operation) 388.99 289.33 T
-0.62 (as) 189 276.33 P
3 F
-0.64 (FloatFloatT) 201.35 276.33 P
-0.64 (oAscii_StdFormat\050\051) 262.09 276.33 P
1 F
-0.62 ( except that the) 362.65 276.33 P
1 9 Q
-0.56 (FP) 435.17 276.33 P
1 10 Q
-0.62 ( number is passed) 447.18 276.33 P
(\050in 64 bit format\051 and is not taken from the stack. The entire) 189 263.33 T
1 9 Q
(FP) 471.83 263.33 T
1 10 Q
( number) 483.84 263.33 T
(\050not just a pointer to it\051 must be passed. All criteria for) 189 250.33 T
3 F
-0.2 (FloatFloatT) 189 237.33 P
-0.2 (oAscii_StdFormat\050\051) 249.74 237.33 P
1 F
-0.19 ( applies to this routine, except that the) 350.3 237.33 P
(\337ag) 189 224.33 T
1 9 Q
(FF) 208.82 224.33 T
(AF_FROM_ADDR) 220.16 224.33 T
1 10 Q
( is not used.) 296.66 224.33 T
0 14 Q
(D.2.0.4) 125.86 190.67 T
(Date and T) 189 190.67 T
(ime Routines) 260.32 190.67 T
4 10 Q
(FloatGetDateNumber\050\051, FloatDateNumberGetYear\050\051,) 189 168.33 T
(FloatDateNumberGetMonthAndDay\050\051,) 189 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "958" 14
%%Page: "959" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Conversions to Other Types) 370.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(959) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(FloatDateNumberGetWeekday\050\051, FloatGetTimeNumber\050\051,) 189 641.33 T
(FloatTimeNumberGetHour\050\051, FloatTimeNumberGetMinutes\050\051,) 189 628.33 T
(FloatTimeNumberGetSeconds\050\051) 189 615.33 T
3 F
-0.79 (FloatGetDateNumber\050\051) 189 595.33 P
1 F
-0.77 (, when passed the month, day) 308.99 595.33 P
-0.77 (, and year) 441.47 595.33 P
-0.77 (, converts) 485.32 595.33 P
-0.14 (the data into an) 189 582.33 P
1 9 Q
-0.12 (FP) 265.14 582.33 P
1 10 Q
-0.14 ( \322date number\323 representation. This format represents) 277.14 582.33 P
(dates as integers counted from Jan 1, 1900, which is designated as 1. The) 189 569.33 T
(highest date allowed is 73050 \050December 31, 2099\051.) 189 556.33 T
3 F
(FloatDateNumberGetY) 189 536.33 T
(ear\050\051,) 307.32 536.33 T
(FloatDateNumberGetMonthAndDay\050\051) 189 523.33 T
1 F
(and) 387.4 523.33 T
3 F
-0.89 (FloatDateNumberGetW) 189 510.33 P
-0.89 (eekday\050\051) 310.47 510.33 P
1 F
-0.86 (all return the appropriate data, either) 357.27 510.33 P
-0.59 (the year) 189 497.33 P
-0.59 (, month and day) 225.82 497.33 P
-0.59 (, or weekday) 298.15 497.33 P
-0.59 (, given an) 354.03 497.33 P
1 9 Q
-0.53 (FP) 400.06 497.33 P
1 10 Q
-0.59 ( \322date number\323 as de\336ned) 412.06 497.33 P
(above. All data are returned as integers, not as) 189 484.33 T
1 9 Q
(FP) 409.04 484.33 T
1 10 Q
( numbers, and the) 421.05 484.33 T
-0.24 (original) 189 471.33 P
1 9 Q
-0.22 (FP) 227.47 471.33 P
1 10 Q
-0.24 ( \322date number\323 is popped off of the stack. Y) 239.48 471.33 P
-0.24 (ears are returned as) 435.29 471.33 P
-0.56 (integers between 1900 and 2099. Month and Days are returned as integers) 189 458.33 P
(between 1 and 12, and 1 and 31, respectively) 189 445.33 T
(. W) 394.8 445.33 T
(eekdays are returned as) 409.62 445.33 T
(integers between 1 and 7, where 1 is Sunday) 189 432.33 T
(, 2 is Monday) 394.23 432.33 T
(, etc.) 454.8 432.33 T
3 F
(FloatGetT) 189 412.33 T
(imeNumber\050\051) 241.52 412.33 T
1 F
(when passed hours, minutes, and seconds) 313.46 412.33 T
(returns an) 189 399.33 T
1 9 Q
(FP) 240.85 399.33 T
1 10 Q
( decimal representation between midnight \0500.000000\051 and) 252.86 399.33 T
(1) 189 386.33 T
(1:59:59 p.m. \0500.999988\051.) 194.01 386.33 T
3 F
(FloatT) 189 366.33 T
(imeNumberGetHour\050\051, FloatT) 223.19 366.33 T
(imeNumberGetMinutes\050\051) 377.28 366.33 T
1 F
(and) 509.76 366.33 T
3 F
(FloatT) 189 353.33 T
(imeNumberGetSeconds\050\051) 223.19 353.33 T
1 F
(return the appropriate data given an) 356.06 353.33 T
1 9 Q
(FP) 189 340.33 T
1 10 Q
( \322time number\323 as de\336ned above. The original) 201.01 340.33 T
1 9 Q
(FP) 414.94 340.33 T
1 10 Q
( \322time number\323 is) 426.94 340.33 T
(popped off of the stack.) 189 327.33 T
-0.52 (Note that both \322date numbers\323 and \322time numbers\323 can be added to specify) 189 307.33 P
(a speci\336c point in time. For example, 73050.999988 would specify) 189 294.33 T
(December 31, 2099, 1) 189 281.33 T
(1:59:59. Since these formats are in) 287.38 281.33 T
1 9 Q
(FP) 449.83 281.33 T
1 10 Q
( format, they) 461.84 281.33 T
(can be operated on with all standard functions in the) 189 268.33 T
1 9 Q
(FP) 436.44 268.33 T
1 10 Q
( library) 448.45 268.33 T
(.) 481.79 268.33 T
0 14 Q
(D.2.0.5) 125.86 234.67 T
(Miscellaneous Date T) 189 234.67 T
(ime Routines) 331.13 234.67 T
4 10 Q
(FloatGetDaysInMonth\050\051, FloatGetNumDigitsInIntegerPart\050\051,) 189 212.33 T
(FloatFormatNumber\050\051) 189 199.33 T
3 F
(FloatGetDaysInMonth\050\051) 189 179.33 T
1 F
( returns the total number of days in a speci\336c) 313.05 179.33 T
(month, for a speci\336c year) 189 166.33 T
(. The routine must be passed the appropriate) 304.37 166.33 T
(month and year) 189 153.33 T
(.) 261.6 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "959" 15
%%Page: "960" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(960) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
-0.84 (FloatGetNumDigitsInIntegerPart\050\051) 189 641.33 P
1 F
-0.81 ( returns the number of digits in the) 371.01 641.33 P
(integer portion of an) 189 628.33 T
1 9 Q
(FP) 286.41 628.33 T
1 10 Q
( number) 298.42 628.33 T
(. Numbers between zero and one will) 336.57 628.33 T
(return one as the number of digits.) 189 615.33 T
4 F
(FloatStringGetDateNumber\050\051, FloatStringGetTimeNumber\050\051) 189 595.33 T
0 14 Q
(D.3) 149.22 543 T
0 24 Q
(Float Formats) 189 543 T
1 9 Q
-0.5 (FP) 189 517.33 P
1 10 Q
-0.56 ( numbers can be displayed in many ways. For example, as we have seen,) 201.01 517.33 P
-0.63 (an) 189 504.33 P
1 9 Q
-0.57 (FP) 202.82 504.33 P
1 10 Q
-0.63 ( number may actually represent a date-time. When we display the) 214.83 504.33 P
1 9 Q
-0.57 (FP) 516.84 504.33 P
1 10 Q
(number 366.0000, we may want to how it \050in text\051 as \322Jan 1, 1901.\323 The) 189 491.33 T
(Math Library has a number of system-de\336ned formats for your use. Y) 189 478.33 T
(ou) 509.39 478.33 T
(may also allow users to de\336ne their own formats with the Float Format) 189 465.33 T
(controller) 189 452.33 T
(.) 232.88 452.33 T
(The underlying structures and routines to use and create \337oat format) 189 432.33 T
(options are explained in the next section. In most cases, however) 189 419.33 T
(, the) 487.36 419.33 T
(simple inclusion of a Float Format controller \050of) 189 406.33 T
3 F
(FloatFormatClass) 412.54 406.33 T
1 F
(\051) 505.69 406.33 T
(provides all of the) 189 393.33 T
1 9 Q
(UI) 274.38 393.33 T
1 10 Q
( and functionality to create and apply formats to) 285.38 393.33 T
1 9 Q
(FP) 511.89 393.33 T
1 10 Q
(numbers within text objects.) 189 380.33 T
0 14 Q
(D.3.1) 137.54 338 T
0 18 Q
(System-de\336ned Formats) 189 338 T
1 10 Q
-0.17 (A system-de\336ned) 189 314.33 P
1 9 Q
-0.15 (FP) 270.88 314.33 P
1 10 Q
-0.17 ( format is stored within a) 282.89 314.33 P
3 F
-0.17 (FormatParams) 401.9 314.33 P
1 F
-0.17 ( structure.) 480.05 314.33 P
-0.43 (This structure de\336nes whether the) 189 301.33 P
1 9 Q
-0.39 (FP) 350.18 301.33 P
1 10 Q
-0.43 ( number is a number to be converted) 362.19 301.33 P
(into numerical text or a date-time. These format parameters are stored) 189 288.33 T
(within arrays managed by the format control code.) 189 275.33 T
81 242.98 531 255 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 242.98 531 255 R
7 X
0 0 0 1 0 0 0 K
V
76.5 250.23 617.5 253.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 236.31 T
(D-) 147.13 236.31 T
(6 System-de\336ned Float Formats) 157.68 236.31 T
4 9 Q
(/*) 81 221.98 T
( * System-defined float formats are stored in an array that is maintained and) 81 210.98 T
( * accessed by the float controller code. Each element is made up of a) 81 199.98 T
( * FormatParams structure.) 81 188.98 T
( */) 81 177.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "960" 16
%%Page: "961" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Float Formats) 465.43 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(961) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.3) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 9 Q
0 X
(typedef struct {) 81 642 T
(/*) 125 631 T
( * The FloatFloatToAsciiParams_Union stores either a) 125 620 T
( * FloatFloatToAsciiParams structure if the number is a \324pure\325 FP number,) 125 609 T
( * or a FloatFloatToDateTimeParams structure if the number is a date-time.) 125 598 T
( * In this way, it is essentially the same as the FFA_stackFrame discussed) 125 587 T
( * earlier.) 125 576 T
( */) 125 565 T
(FloatFloatToAsciiParams_Union) 125 554 T
(FP_params;) 301 554 T
(/*) 125 536 T
( * FP_formatName stores the name of this formatting option that will be) 125 525 T
( * displayed in the float controller\325s dynamic list. This name is loaded) 125 514 T
( * from the optr given in FP_nameHan and FP_nameOff.\050The table where these) 125 503 T
( * strings are kept is within a localizable resource and therefore will) 125 492 T
( * have different text under different country setups.\051) 125 481 T
( */) 125 470 T
(char) 125 459 T
(FP_formatName[FORMAT_NAME_LENGTH+1];) 301 459 T
(word) 125 448 T
(FP_nameHan;) 301 448 T
(/* MemHandle */) 388 448 T
(word) 125 437 T
(FP_nameOff;) 301 437 T
(/* ChunkHandle */) 388 437 T
(/*) 125 419 T
( * FP_listEntryNum stores the zero-based position of this FormatParams) 125 408 T
( * entry within the table.) 125 397 T
( */) 125 386 T
(word) 125 375 T
(FP_listEntryNum;) 301 375 T
(/*) 125 357 T
( * FP_signature is an internal field used for error-checking.) 125 346 T
( */) 125 335 T
(word) 125 324 T
(FP_signature;) 301 324 T
(} FormatParams;) 81 313 T
81 288.98 531 301 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 288.98 531 301 R
7 X
0 0 0 1 0 0 0 K
V
76.5 296.23 617.5 299.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.74 (An application will never need to access this table of formats directly) 189 271.31 P
-0.74 (.) 497.96 271.31 P
1 9 Q
-0.66 (GEOS) 502.79 271.31 P
1 10 Q
-0.73 (contains several routines \050in) 189 258.31 P
3 F
-0.75 (math.goh) 320.15 258.31 P
1 F
-0.73 (\051 that can access this table and add,) 368.85 258.31 P
(delete and modify table entries. Usually) 189 245.31 T
(, it is easiest to include a Float) 372.74 245.31 T
(Format controller in your application if you intend to allow the user to) 189 232.31 T
(change \337oat formats with these routines.) 189 219.31 T
-0.8 (There are many system-de\336ned \337oat formatting options. These formats are) 189 199.31 P
(identi\336ed by) 189 186.31 T
3 F
(FormatIdT) 249.38 186.31 T
(ype) 305.71 186.31 T
1 F
( enumerations. Each type corresponds to a) 324.23 186.31 T
3 F
(FormatParams) 189 173.31 T
1 F
( structure.) 267.15 173.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "961" 17
%%Page: "962" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(962) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Each) 189 641.33 T
3 F
(FormatIdT) 215.11 641.33 T
(ype) 271.44 641.33 T
1 F
( enumeration is a direct offset into the \337oat format) 289.96 641.33 T
(lookup table. T) 189 628.33 T
(o distinguish between system-de\336ned and user) 257.18 628.33 T
(-de\336ned) 473.31 628.33 T
-0.38 (formats, the high bit of a) 189 615.33 P
3 F
-0.39 (FormatIdT) 304.15 615.33 P
-0.39 (ype) 360.48 615.33 P
1 F
-0.38 ( is set to indicate that the format) 379 615.33 P
(is system-de\336ned. Thus, 8000h refers to the \336rst system-de\336ned format,) 189 602.33 T
(8000h + \050size\050) 189 589.33 T
3 F
(FormatParams) 253.22 589.33 T
1 F
(\051\051 refers to the second system-de\336ned) 331.37 589.33 T
(format, etc.) 189 576.33 T
-0.07 (The format strings themselves are stored within a localizable resource, so) 189 556.33 P
(that they may appear in a manner relevant to the particular country) 189 543.33 T
(involved. For example, an) 189 530.33 T
1 9 Q
(FP) 311.06 530.33 T
1 10 Q
( number of 12.0 using the) 323.07 530.33 T
3 F
(FormatIdT) 444.02 530.33 T
(ype) 500.35 530.33 T
1 9 Q
(FORMA) 189 517.33 T
(T_ID_CURRENCY) 223 517.33 T
1 10 Q
( might appear in the U.S. as $12.00, but will) 302.17 517.33 T
(appear as \24312.00 in Great Britain.) 189 504.33 T
81 471.98 531 484 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 471.98 531 484 R
7 X
0 0 0 1 0 0 0 K
V
76.5 479.23 617.5 482.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 465.31 T
(D-) 147.13 465.31 T
(7 Float Format IDs) 157.68 465.31 T
4 9 Q
(typedef) 81 450.98 T
(enum {) 125 450.98 T
(FORMAT_ID_GENERAL) 125 439.98 T
(= 0x8000,) 344 439.98 T
(FORMAT_ID_FIXED) 125 428.98 T
(= 0x8061,) 344 428.98 T
(FORMAT_ID_FIXED_WITH_COMMAS) 125 417.98 T
(= 0x80c2,) 344 417.98 T
(FORMAT_ID_FIXED_INTEGER) 125 406.98 T
(= 0x8123,) 344 406.98 T
(FORMAT_ID_CURRENCY) 125 395.98 T
(= 0x8184,) 344 395.98 T
(FORMAT_ID_CURRENCY_WITH_COMMAS) 125 384.98 T
(= 0x81e5,) 344 384.98 T
(FORMAT_ID_CURRENCY_INTEGER) 125 373.98 T
(= 0x8246,) 344 373.98 T
(FORMAT_ID_PERCENTAGE) 125 362.98 T
(= 0x82a7,) 344 362.98 T
(FORMAT_ID_PERCENTAGE_INTEGER) 125 351.98 T
(= 0x8308,) 344 351.98 T
(FORMAT_ID_THOUSANDS) 125 340.98 T
(= 0x8369,) 344 340.98 T
(FORMAT_ID_MILLIONS) 125 329.98 T
(= 0x83ca,) 344 329.98 T
(FORMAT_ID_SCIENTIFIC) 125 318.98 T
(= 0x842b,) 344 318.98 T
(FORMAT_ID_DATE_LONG) 125 300.98 T
(= 0x848c,) 344 300.98 T
(FORMAT_ID_DATE_LONG_CONDENSED) 125 289.98 T
(= 0x84ed,) 344 289.98 T
(FORMAT_ID_DATE_LONG_NO_WKDAY) 125 278.98 T
(= 0x854e,) 344 278.98 T
(FORMAT_ID_DATE_LONG_NO_WKDAY_CONDENSED) 125 267.98 T
(= 0x85af,) 344 267.98 T
(FORMAT_ID_DATE_SHORT) 125 256.98 T
(= 0x8610,) 344 256.98 T
(FORMAT_ID_DATE_SHORT_ZERO_PADDED) 125 245.98 T
(= 0x8671,) 344 245.98 T
(FORMAT_ID_DATE_LONG_MD) 125 234.98 T
(= 0x86d2,) 344 234.98 T
(FORMAT_ID_DATE_LONG_MD_NO_WKDAY) 125 223.98 T
(= 0x8733,) 344 223.98 T
(FORMAT_ID_DATE_SHORT_MD) 125 212.98 T
(= 0x8794,) 344 212.98 T
(FORMAT_ID_DATE_LONG_MY) 125 201.98 T
(= 0x87f5,) 344 201.98 T
(FORMAT_ID_DATE_SHORT_MY) 125 190.98 T
(= 0x8856,) 344 190.98 T
(FORMAT_ID_DATE_YEAR) 125 179.98 T
(= 0x88b7,) 344 179.98 T
(FORMAT_ID_DATE_MONTH) 125 168.98 T
(= 0x8918,) 344 168.98 T
(FORMAT_ID_DATE_DAY) 125 157.98 T
(= 0x8979,) 344 157.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "962" 18
%%Page: "963" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Float Formats) 465.43 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(963) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.3) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 9 Q
0 X
(FORMAT_ID_DATE_WEEKDAY) 125 642 T
(= 0x89da,) 344 642 T
(FORMAT_ID_TIME_HMS) 125 631 T
(= 0x8a3b,) 344 631 T
(FORMAT_ID_TIME_HM) 125 620 T
(= 0x8a9c,) 344 620 T
(FORMAT_ID_TIME_H) 125 609 T
(= 0x8afd,) 344 609 T
(FORMAT_ID_TIME_MS) 125 598 T
(= 0x8b5e,) 344 598 T
(FORMAT_ID_TIME_HMS_24HR) 125 587 T
(= 0x8bbf,) 344 587 T
(FORMAT_ID_TIME_HM_24HR) 125 576 T
(= 0x8c20,) 344 576 T
(FORMAT_ID_INDETERMINATE) 125 558 T
(= 0xffff) 344 558 T
(} FormatIdType;) 81 547 T
81 522.98 531 535 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 522.98 531 535 R
7 X
0 0 0 1 0 0 0 K
V
76.5 530.23 617.5 533.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(D.3.2) 137.54 482.98 T
0 18 Q
(User-de\336ned Formats) 189 482.98 T
1 10 Q
(Users may also design their own \337oat formatting options. These) 189 459.31 T
-0.19 (user) 189 446.31 P
-0.19 (-de\336ned formats are stored in) 209 446.31 P
3 F
-0.19 (FormatEntry) 347.68 446.31 P
1 F
-0.19 ( structures. The array of) 416.2 446.31 P
(these user) 189 433.31 T
(-de\336ned formats is kept separate from the system-de\336ned) 236.41 433.31 T
(formats. \050user) 189 420.31 T
(-de\336ned formats are stored within their own) 253.63 420.31 T
1 9 Q
(VM) 461.23 420.31 T
1 10 Q
( block\051.) 476.22 420.31 T
(User) 189 400.31 T
(-de\336ned) 211.04 400.31 T
3 F
(FormatIdT) 250.85 400.31 T
(ype) 307.18 400.31 T
1 F
( enums do not have the high bit \0508000h\051 set) 325.7 400.31 T
(in order to distinguish them from system-de\336ned) 189 387.31 T
3 F
(FormatIdT) 418.26 387.31 T
(ype) 474.59 387.31 T
1 F
( enums.) 493.11 387.31 T
81 354.95 531 366.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 354.95 531 366.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 362.2 617.5 365.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 348.29 T
(D-) 147.13 348.29 T
(8 User-de\336ned Formats) 157.68 348.29 T
4 9 Q
(/*) 81 333.95 T
( * User-defined formats are stored in a VM block that is created and maintained by) 81 322.95 T
( * the float controller code. As each new format is added, space is made for a) 81 311.95 T
( * FormatEntry structure. As formats are deleted, their entry\325s FE_used field is) 81 300.95 T
( * set to zero to indicate that the entry is free for new formats to overwrite.) 81 289.95 T
( */) 81 278.95 T
(typedef struct {) 81 260.95 T
(/*) 125 242.95 T
( * Each FormatEntry contains a corresponding FormatParams structure.) 125 231.95 T
( */) 125 220.95 T
(FormatParams) 125 209.95 T
(FE_params;) 212.5 209.95 T
(/*) 125 191.95 T
( * FE_listEntryNumber is the zero-based position of the format counting) 125 180.95 T
( * both previous user-defined formats and system-defined formats. For) 125 169.95 T
( * example, if there are 10 system-defined formats, the first user-defined) 125 158.95 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "963" 19
%%Page: "964" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(964) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 9 Q
0 X
( * format will have a FE_listEntryNumber of 10 \050because positions are) 125 642 T
( * zero-based\051.) 125 631 T
( */) 125 620 T
(word) 125 609 T
(FE_listEntryNumber;) 212.5 609 T
(/*) 125 591 T
( * FE_used, if non-zero, indicates that this entry within the user-defined) 125 580 T
( * list is currently in use. If FE_used is zero, then this entry position) 125 569 T
( * may be used to add a new user-defined entry without increasing the size) 125 558 T
( * of the VM block.) 125 547 T
( */) 125 536 T
(byte) 125 525 T
(FE_used;) 212.5 525 T
(/*) 125 507 T
( * FE_sig is an error-checking field used internally.) 125 496 T
( */) 125 485 T
(word) 125 474 T
(FE_sig;) 212.5 474 T
(} FormatEntry;) 81 463 T
81 438.98 531 451 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 438.98 531 451 R
7 X
0 0 0 1 0 0 0 K
V
76.5 446.23 617.5 449.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(D.4) 149.22 388.98 T
0 24 Q
(Direct FP Operations) 189 388.98 T
1 10 Q
(The Math Library allows your application to use \337oating point \050) 189 363.31 T
1 9 Q
(FP) 483.49 363.31 T
1 10 Q
(\051) 495.5 363.31 T
(numbers. C Developers will \336nd little reason to make direct calls to) 189 350.31 T
-0.3 (functions in the Math Library as most of this functionality is taken care of) 189 337.31 P
(for you in the C environment. \050An exception is conversions from) 189 324.31 T
1 9 Q
(FP) 485.84 324.31 T
1 10 Q
(numbers to) 189 311.31 T
1 9 Q
(ASCII) 244.19 311.31 T
1 10 Q
( text characters and use of special date-time routines.\051) 270.18 311.31 T
(Assembly developers, however) 189 298.31 T
(, will \336nd direct use of the functions and) 328.82 298.31 T
(structures in the Math Library essential.) 189 285.31 T
-0.45 (The latter half of this chapter \050from this point on\051 is provided for Assembly) 189 265.31 P
(developers who need more complete information about the intricacies of) 189 252.31 T
(the Math Library) 189 239.31 T
(. Much of this information may also be useful for C) 268.64 239.31 T
-0.47 (developers who wish to make direct calls to the functions in this library for) 189 226.31 P
(optimization purposes.) 189 213.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "964" 20
%%Page: "965" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(965) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(D.4.1) 137.54 636 T
0 18 Q
(Floating Point Numbers) 189 636 T
1 10 Q
(The Math Library de\336nes \337oating point numbers by using binary point) 189 612.33 T
-0.42 (representation. In this format the bit in the zeros place is multiplied by 2) 189 599.33 P
1 8 Q
-0.33 (0) 521.41 603.33 P
1 10 Q
-0.42 (,) 525.86 599.33 P
-0.25 (the bit in the minus-ones place is multiplied by 2) 189 586.33 P
1 8 Q
-0.2 (-1) 412.76 590.33 P
1 10 Q
-0.25 (, etc. The exponent is in) 419.87 586.33 P
(base 2. For example, the Binary Point representation for 5 is:.) 189 573.33 T
(Floating Point Numbers in) 189 433.33 T
1 9 Q
(GEOS) 315.88 433.33 T
1 10 Q
( follow the) 342.05 433.33 T
1 9 Q
(IEEE) 392.8 433.33 T
1 10 Q
( 754 standard used by) 415.96 433.33 T
-0.05 (Intel. In this format a \337oating point number is represented in an 80 bit \0505) 189 420.33 P
(word\051 format. \050In C, this type is known as a) 189 407.33 T
3 F
(long) 392.73 407.33 T
(double) 418.1 407.33 T
1 F
(.\051 This format) 453.47 407.33 T
(speci\336es that the 80 bits contain:) 189 394.33 T
2 F
(u) 189 374.33 T
1 F
(a 1 bit sign \050the most signi\336cant bit\051.) 207 374.33 T
2 F
(u) 189 355.33 T
1 F
(a 15 bit exponent \0500000h to 7FFFh\051.) 207 355.33 T
2 F
(u) 189 336.33 T
1 F
(a 64 bit mantissa.) 207 336.33 T
-0.14 (The 15 bit exponent is biased by 3) 189 317.33 P
1 9 Q
-0.12 (FFF) 345.12 317.33 P
1 10 Q
-0.14 (h, so that an exponent of 1 would be) 363.13 317.33 P
(represented by 4000h, and an exponent of -1 would be represented by) 189 304.33 T
-0.03 (3) 189 291.33 P
1 9 Q
-0.03 (FFE) 194.56 291.33 P
1 10 Q
-0.03 (h. This produces a hexadecimal range for the exponent of) 213.06 291.33 P
7 F
-0.03 (\261) 479.44 291.33 P
1 F
-0.03 (4000h, or) 484.93 291.33 P
(a decimal range of) 189 278.33 T
7 F
(\261) 276.42 278.33 T
1 F
(4932.) 281.91 278.33 T
-0.62 (In\336nity is represented by 7) 189 258.33 P
1 9 Q
-0.56 (FFF) 311.72 258.33 P
1 10 Q
-0.62 (h in the exponent and 1 followed by 63 zeros) 329.73 258.33 P
-0.55 (in the mantissa. Therefore, all exponent bits are set to 1. \050Negative in\336nity) 189 245.33 P
(is the same except that the sign bit is also set to 1\051.) 189 232.33 T
(Zero is a special case in which all 80 bits\321 sign, exponent, and) 189 212.33 T
(mantissa\321are set to zero.) 189 199.33 T
(The mantissa is normalized so that the most signi\336cant bit is always 1) 189 179.33 T
(\050except when the) 189 166.33 T
1 9 Q
(FP) 270.11 166.33 T
1 10 Q
( number is zero\051. The binary point follows this 1 bit.) 282.12 166.33 T
(This produces a precision of approximately 19 decimal places, which is) 189 153.33 T
81 144 531 648 C
189 450 531 570 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 450 531 570 R
7 X
0 0 0 1 0 0 0 K
V
189 453 540 484.97 R
V
0 10 Q
0 X
(Figure) 189 478.3 T
(D-) 222.34 478.3 T
(1) 232.89 478.3 T
5 F
(T) 241.23 478.3 T
(ranslating FP to decimal) 247.19 478.3 T
(Binary Point Representation for the number \336ve, translated) 189 464.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 20 Q
(1.01) 240.3 543.22 T
1 16 Q
(10) 278.34 551.22 T
1 15 Q
(= \0501 x 2) 229.18 523.22 T
1 12 Q
(0) 280.51 529.22 T
1 15 Q
( + 0 x 2) 287.18 523.22 T
1 12 Q
(-1) 337.68 529.22 T
1 15 Q
( + 1 x 2) 348.35 523.22 T
1 12 Q
(-2) 398.86 529.22 T
1 15 Q
(\051 x \0502) 409.52 523.22 T
1 12 Q
(2) 444.25 529.22 T
1 15 Q
(\051) 450.92 523.22 T
(= \0501.25\051 x 4) 229.18 505.3 T
(= 5) 229.18 490.3 T
81 144 531 648 C
36 72 576 720 C
81 337 171 427 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 337 171 427 R
7 X
0 0 0 1 0 0 0 K
V
81 337 171 419.66 R
V
0 9 Q
0 X
(FP Format) 81 413.66 T
1 F
-0.92 (+3.2 x 10) 81 397.66 P
1 7.2 Q
-0.73 (4) 116.98 401.26 P
1 9 Q
-0.92 ( is a \337oating) 120.98 397.66 P
(point representation) 81 386.66 T
(of 32,000. In the) 81 375.66 T
(above example, the) 81 364.66 T
(mantissa is 3.2 and) 81 353.66 T
(the exponent is 4.) 81 342.66 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
60 428.15 170.5 428.15 2 L
7 X
V
1 H
2 Z
0 X
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "965" 21
%%Page: "966" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(966) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.04 (adequate for most needs. This most signi\336cant bit is not \322assumed away\323;) 189 641.33 P
(it is always present in the mantissa.) 189 628.33 T
(Note that in most uses, the use of binary point representation is) 189 487.3 T
(transparent to the application.) 189 474.3 T
0 14 Q
(D.4.2) 137.54 431.97 T
0 18 Q
(The Floating Point Stack) 189 431.97 T
1 10 Q
(Floating Point \050) 189 408.3 T
1 9 Q
(FP) 261.61 408.3 T
1 10 Q
(\051 numbers are placed and manipulated on an) 273.62 408.3 T
1 9 Q
(FP) 483.65 408.3 T
1 10 Q
( stack.) 495.65 408.3 T
(Numbers can be rearranged, operated on, and removed from this stack) 189 395.3 T
(through pushes, pops, and the use of special routines.) 189 382.3 T
0 14 Q
(D.4.2.1) 125.86 348.64 T
(Initialization of the FP Stack) 189 348.64 T
4 10 Q
(FloatInit\050\051, FloatExit\050\051) 189 326.3 T
1 F
(Before performing any \337oating point operations, a thread needs to call) 189 306.3 T
3 F
(FloatInit\050\051) 189 293.3 T
1 F
( to create and initialize an) 243.25 293.3 T
1 9 Q
(FP) 367.35 293.3 T
1 10 Q
( stack. Each thread using \337oats) 379.36 293.3 T
(must have its own unique) 189 280.3 T
1 9 Q
(FP) 311.06 280.3 T
1 10 Q
( stack. This call to) 323.07 280.3 T
3 F
(FloatInit\050\051) 409.95 280.3 T
1 F
( is) 464.2 280.3 T
(automatically performed by any application that includes the Math) 189 267.3 T
(Library) 189 254.3 T
(.) 223.08 254.3 T
3 F
-0.13 (FloatInit\050\051) 189 234.3 P
1 F
-0.12 ( creates a swapable block of memory for the thread, initializes) 243.25 234.3 P
(various stack pointers, and stores the handle for the block in the thread\325) 189 221.3 T
(s) 522 221.3 T
(data structure.) 189 208.3 T
3 F
(FloatInit\050\051) 261.04 208.3 T
1 F
( must be passed the size of the stack to create) 315.29 208.3 T
(\050in bytes\051 and the type of stack \050) 189 195.3 T
3 F
(FloatStackT) 337.35 195.3 T
(ype) 400.54 195.3 T
1 F
(\051 to create.) 419.06 195.3 T
(The default) 189 175.3 T
1 9 Q
(FP) 245.12 175.3 T
1 10 Q
( stack holds 25) 257.13 175.3 T
1 9 Q
(FP) 328.45 175.3 T
1 10 Q
( elements \050250 bytes\051. An) 340.45 175.3 T
1 9 Q
(FP) 459.92 175.3 T
1 10 Q
( stack must) 471.93 175.3 T
(be able to hold at least 5) 189 162.3 T
1 9 Q
(FP) 304.42 162.3 T
1 10 Q
( elements.) 316.43 162.3 T
441 485 531 539 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
441 485 531 539 R
7 X
0 0 0 1 0 0 0 K
V
441 485 531 533.69 R
V
1 9 Q
0 X
-0.21 (In most cases, binary) 441 527.69 P
(point representation) 441 516.69 T
(is transparent to the) 441 505.69 T
(application.) 441 494.69 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
81 144 531 648 C
189 503.97 531 625 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 503.97 531 625 R
7 X
0 0 0 1 0 0 0 K
V
189 508 540 539.97 R
V
0 10 Q
0 X
(Figure) 189 533.3 T
(D-) 222.34 533.3 T
(2) 232.89 533.3 T
5 F
(Diagram of an 80-bit Floating Point Number) 241.23 533.3 T
(Here we see 5\050 1.25 x 2) 189 519.3 T
5 5.6 Q
(2) 294.56 522.1 T
5 10 Q
(\051 represented as a \337oating point number) 297.67 519.3 T
(.) 479.3 519.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
234 571 513 589 R
7 X
V
0.5 H
0 Z
0 X
N
457.2 589 457.2 571 2 L
7 X
V
2 Z
0 X
N
401.4 589 401.4 571 2 L
7 X
V
0 X
N
345.6 589 345.6 571 2 L
7 X
V
0 X
N
289.8 589 289.8 571 2 L
7 X
V
0 X
N
245.33 588.17 245.33 570.17 2 L
7 X
V
11 X
N
1 F
0 X
( 0) 234 573.02 T
(4001h) 256.75 573.02 T
(5000h) 304.56 573.02 T
(0000h) 360.36 573.02 T
(0000h) 416.16 573.02 T
(0000h) 473.11 573.02 T
(sign bit) 207 608.66 T
(exponent) 243 600.02 T
( mantissa) 377.83 600.05 T
230.35 591.43 234 580 224.85 587.76 227.6 589.6 4 Y
V
216 607 227.6 589.6 2 L
7 X
V
1 H
0 X
N
291.67 616.07 291.67 593.75 2 L
7 X
V
0.5 H
0 X
N
510.41 616.07 510.41 593.75 2 L
7 X
V
0 X
N
307.67 599.37 296.14 602.68 307.67 605.99 307.67 602.68 4 Y
V
372.02 602.68 307.67 602.68 2 L
7 X
V
1 H
0 X
N
494.41 605.99 505.94 602.68 494.41 599.37 494.41 602.68 4 Y
V
430.06 602.68 494.41 602.68 2 L
7 X
V
0 X
N
5 F
(5 words) 355.6 558.04 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "966" 22
%%Page: "967" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(967) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The default \337oating point stack is) 189 641.33 T
1 9 Q
(FLOA) 347.55 641.33 T
(T_ST) 372.56 641.33 T
(ACK_GROW) 394.24 641.33 T
1 10 Q
( which instructs) 448.07 641.33 T
(the system to increase the size of the stack whenever its bounds are) 189 628.33 T
(reached. This is done automatically) 189 615.33 T
(.) 351.99 615.33 T
(Other) 189 595.33 T
3 F
(FloatStackT) 219 595.33 T
(ype) 282.19 595.33 T
1 F
( types are) 300.71 595.33 T
1 9 Q
(FLOA) 348.68 595.33 T
(T_ST) 373.69 595.33 T
(ACK_WRAP) 395.37 595.33 T
1 10 Q
(, which drops the) 446.41 595.33 T
1 9 Q
-0.54 (FP) 189 582.33 P
1 10 Q
-0.6 ( numbers at the low end of the stack \050effectively wrapping over that end\051) 201.01 582.33 P
-0.76 (and) 189 569.33 P
1 9 Q
-0.68 (FLOA) 208.43 569.33 P
-0.68 (T_ST) 233.44 569.33 P
-0.68 (ACK_ERROR) 255.12 569.33 P
1 10 Q
-0.76 ( which signals an error when the stack limit has) 312.62 569.33 P
(been reached.) 189 556.33 T
3 F
(FloatExit\050\051) 189 536.33 T
1 F
( detaches the \337oating point stack for the current thread and) 245.66 536.33 T
(frees its memory) 189 523.33 T
(.) 265.11 523.33 T
3 F
(FloatExit\050\051) 270.67 523.33 T
1 F
( only frees the) 327.33 523.33 T
1 9 Q
(FP) 395.48 523.33 T
1 10 Q
( stack associated with the) 407.49 523.33 T
(current thread; other) 189 510.33 T
1 9 Q
(FP) 289.73 510.33 T
1 10 Q
( stacks in other threads remain unaffected. As is) 301.74 510.33 T
(the case with) 189 497.33 T
3 F
(FloatInit\050\051) 252.9 497.33 T
1 F
(, the call to) 307.15 497.33 T
3 F
(FloatExit\050\051) 361.24 497.33 T
1 F
( is automatically) 417.9 497.33 T
(performed by any application that includes the Math Library) 189 484.33 T
(.) 470.14 484.33 T
(If) 189 464.33 T
3 F
(FloatInit\050\051) 199.18 464.33 T
1 F
(is called twice before calling) 256.3 464.33 T
3 F
(FloatExit\050\051) 388.54 464.33 T
1 F
(, the data on the) 445.2 464.33 T
(original \337oating point stack will be lost.) 189 451.33 T
0 14 Q
(D.4.2.2) 125.86 417.67 T
(Pushing and Popping on the FP Stack) 189 417.67 T
4 10 Q
(FloatPushNumber\050\051, FloatPopNumber\050\051, FloatDepth\050\051) 189 395.33 T
3 F
(FloatPushNumber\050\051) 189 375.33 T
1 F
(pushes an) 295.38 375.33 T
1 9 Q
(FP) 344.83 375.33 T
1 10 Q
( number onto the top of the) 356.84 375.33 T
1 9 Q
(FP) 485.37 375.33 T
1 10 Q
( stack) 497.37 375.33 T
(for the current thread from a passed buffer) 189 362.33 T
(. The number must be already) 386.95 362.33 T
(set up in 80 bit,) 189 349.33 T
1 9 Q
(FP) 264.03 349.33 T
1 10 Q
( format. The routine must be passed the pointer to the) 276.04 349.33 T
(buffer storing the number) 189 336.33 T
(.) 308.07 336.33 T
-0.11 (Similarly) 189 316.33 P
-0.11 (,) 231.05 316.33 P
3 F
-0.11 (FloatPopNumber\050\051) 236.5 316.33 P
1 F
-0.11 ( pops an) 334.09 316.33 P
1 9 Q
-0.1 (FP) 374.89 316.33 P
1 10 Q
-0.11 ( number from the top of the) 386.89 316.33 P
1 9 Q
-0.1 (FP) 516.32 316.33 P
1 10 Q
(stack for the current thread into a passed buffer) 189 303.33 T
(.) 410.67 303.33 T
3 F
-0.63 (FloatDepth\050\051) 189 283.33 P
1 F
-0.61 (returns the number of) 258.09 283.33 P
1 9 Q
-0.55 (FP) 360.84 283.33 P
1 10 Q
-0.61 ( numbers currently in place on the) 372.85 283.33 P
(stack.) 189 270.33 T
(Note: For clarity in diagrams within this chapter) 189 250.33 T
(, stack locations will be) 414.4 250.33 T
(numbered in order from the top position of the stack, S1 being \336rst, S2) 189 237.33 T
-0.36 (being second, etc. V) 189 224.33 P
-0.36 (ariables will be numbered in the order they are pushed) 277.55 224.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "967" 23
%%Page: "968" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(968) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(onto the stack, so that if X1, X2, and X3 are pushed onto the stack, the) 189 641.33 T
(format in Figure) 189 628.33 T
(D-) 268.45 628.33 T
(3 will result.) 279.56 628.33 T
0 14 Q
(D.4.2.3) 125.86 492.71 T
(FP Stack Manipulation) 189 492.71 T
4 10 Q
(FloatRoll\050\051, FloatRollDown\050\051, FloatRot\050\051, FloatSwap\050\051) 189 470.38 T
1 F
(Besides basic pushing and popping, the Float Library also includes many) 189 450.38 T
(other routines which manage) 189 437.38 T
1 9 Q
(FP) 326.97 437.38 T
1 10 Q
( numbers on the stack. Unless otherwise) 338.98 437.38 T
-0.25 (speci\336ed, an operation that pushes, pops, or extracts an) 189 424.38 P
1 9 Q
-0.22 (FP) 446.63 424.38 P
1 10 Q
-0.25 ( number on the) 458.64 424.38 P
(stack affects all other) 189 411.38 T
1 9 Q
(FP) 291.05 411.38 T
1 10 Q
( numbers below the position of the operation by) 303.06 411.38 T
(shifting their location in the stack either up or down, in standard stack) 189 398.38 T
(fashion.) 189 385.38 T
3 F
(FloatRoll\050\051) 189 365.38 T
1 F
(pushes a selected) 248.17 365.38 T
1 9 Q
(FP) 331.14 365.38 T
1 10 Q
( number \050S) 343.15 365.38 T
5 F
(X) 394.45 365.38 T
1 F
(\051 onto the top of the stack) 401.49 365.38 T
-0.32 (\050S1\051, removing it from location S) 189 352.38 P
5 F
-0.32 (X) 337.22 352.38 P
1 F
-0.32 ( in the process.) 344.26 352.38 P
3 F
-0.33 (FloatRoll\050\051) 415.02 352.38 P
1 F
-0.32 (passed with) 473.85 352.38 P
(a value of 3 would move the) 189 339.38 T
1 9 Q
(FP) 320.14 339.38 T
1 10 Q
( number in S3 onto the top of the stack,) 332.15 339.38 T
(pushing the stack in the process. All) 189 326.38 T
1 9 Q
(FP) 359.57 326.38 T
1 10 Q
( numbers below the extracted) 371.58 326.38 T
(number remain unaffected by this routine.) 189 313.38 T
3 F
-0.66 (FloatRollDown\050\051) 189 199.13 P
1 F
-0.64 (performs the inverse operation of) 277.69 199.13 P
3 F
-0.66 (FloatRoll\050\051) 430.79 199.13 P
1 F
-0.64 (. popping) 487.09 199.13 P
(the top stack value \050S1\051 into the speci\336ed location on the stack \050S) 189 186.13 T
5 F
(X) 489.6 186.13 T
1 F
(\051.) 496.64 186.13 T
3 F
-0.16 (FloatRollDown\050\051) 189 173.13 P
1 F
-0.15 (passed with a value of 3 would move the) 278.19 173.13 P
1 9 Q
-0.14 (FP) 465.74 173.13 P
1 10 Q
-0.15 ( number in) 477.75 173.13 P
(S1 into location S3, shifting the stack in the process.) 189 160.13 T
81 144 531 648 C
189 523.05 531 625 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189 523.05 531 625 R
7 X
0 0 0 1 0 0 0 K
V
191.02 504.47 526.03 539.97 R
V
0 10 Q
0 X
(Figure) 191.02 533.3 T
(D-) 224.36 533.3 T
(3) 234.91 533.3 T
5 F
(The Floating Point Stack) 243.25 533.3 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
261 553 315 607 R
7 X
V
0.5 H
0 Z
0 X
N
459 553 513 607 R
7 X
V
0 X
N
261 589 315 589 2 L
7 X
V
2 Z
0 X
N
261 571 315 571 2 L
7 X
V
0 X
N
459 589 513 589 2 L
7 X
V
0 X
N
459 571 513 571 2 L
7 X
V
0 X
N
1 F
(S1) 208.37 595.77 T
(S2) 208.37 577.48 T
(S3) 208.37 559.62 T
358.63 553.14 412.63 607.14 R
7 X
V
0 Z
0 X
N
358.63 589.14 412.63 589.14 2 L
7 X
V
2 Z
0 X
N
358.63 571.14 412.63 571.14 2 L
7 X
V
0 X
N
(X1) 279 591.02 T
(X1) 378 573.02 T
(X2) 378 591.02 T
(X1) 477 554.66 T
(X2) 477 573.02 T
(X3) 477 590.66 T
249.46 601.31 261 598 249.46 594.69 249.46 598 4 Y
V
225 598 249.46 598 2 L
7 X
V
0 X
N
249.46 583.31 261 580 249.46 576.69 249.46 580 4 Y
V
225 580 249.46 580 2 L
7 X
V
0 X
N
249.46 565.31 261 562 249.46 558.69 249.46 562 4 Y
V
225 562 249.46 562 2 L
7 X
V
0 X
N
335.56 586.97 358.63 580.36 335.56 573.74 335.56 580.36 4 Y
V
318.46 580.36 335.56 580.36 2 L
7 X
V
4 H
0 X
N
433.77 586.97 456.84 580.36 433.77 573.74 433.77 580.36 4 Y
V
416.66 580.36 433.77 580.36 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
187.06 215.8 531 310.05 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
187.06 215.8 531 310.05 R
7 X
0 0 0 1 0 0 0 K
V
238.9 222.23 292.9 276.23 R
V
0.5 H
0 Z
0 X
N
238.9 258.23 292.9 258.23 2 L
7 X
V
2 Z
0 X
N
238.9 240.23 292.9 240.23 2 L
7 X
V
0 X
N
1 10 Q
(S1) 191.52 265 T
(S2) 191.52 246.71 T
(S3) 191.52 228.85 T
466.87 221.66 520.87 275.66 R
7 X
V
0 Z
0 X
N
466.87 257.66 520.87 257.66 2 L
7 X
V
2 Z
0 X
N
466.87 239.66 520.87 239.66 2 L
7 X
V
0 X
N
(X3) 259.6 262.75 T
(X3) 487.57 245.01 T
227.62 270.54 239.15 267.23 227.62 263.92 227.62 267.23 4 Y
V
203.15 267.23 227.62 267.23 2 L
7 X
V
0 X
N
227.62 252.54 239.15 249.23 227.62 245.92 227.62 249.23 4 Y
V
203.15 249.23 227.62 249.23 2 L
7 X
V
0 X
N
227.42 234.67 238.96 231.36 227.42 228.05 227.42 231.36 4 Y
V
202.96 231.36 227.42 231.36 2 L
7 X
V
0 X
N
(X1) 487.57 262.41 T
(X2) 259.6 245.96 T
(X2) 487.57 226.7 T
(X1) 259.6 227.57 T
3 F
(FloatRoll\050) 349.52 244.55 T
1 F
(3) 401.93 244.55 T
3 F
(\051) 407.49 244.55 T
293.18 229.95 342.28 229.95 2 L
7 X
V
0 X
N
342.28 229.95 342.28 293.41 2 L
7 X
V
0 X
N
342.28 294.24 491.56 294.24 2 L
7 X
V
0 X
N
496.54 287.09 493.23 275.55 489.92 287.09 493.23 287.09 4 Y
V
493.23 293.41 493.23 287.09 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "968" 24
%%Page: "969" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(969) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Both of these routines must be passed a stack location to move to or from.) 189 533.1 T
3 F
-0.69 (FloatRot\050\051) 189 513.1 P
1 F
-0.67 (rotates the top three numbers on the stack, placing S3 onto the) 244.7 513.1 P
-0.28 (top of the stack. This is equivalent to a) 189 500.1 P
3 F
-0.29 (FloatRoll\050\051) 368.34 500.1 P
1 F
-0.28 (passed with a value of) 427.21 500.1 P
(3.) 189 487.1 T
3 F
(FloatSwap\050\051) 189 360.68 T
1 F
(exchanges S1 and S2.) 255.21 360.68 T
-0.82 (Repetitious applications of these routines will return the stack to its former) 189 242.48 P
(state.) 189 229.48 T
0 14 Q
(D.4.2.4) 125.86 195.81 T
(Copying and Deleting Numbers on the FP Stack) 189 195.81 T
4 10 Q
(FloatPick\050\051, FloatOver\050\051, FloatDrop\050\051, FloatDup\050\051) 189 173.48 T
81 144 531 648 C
189.65 546.77 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 546.77 531 648 R
7 X
0 0 0 1 0 0 0 K
V
243.02 569.99 297.02 623.99 R
V
0.5 H
0 Z
0 X
N
243.02 605.99 297.02 605.99 2 L
7 X
V
2 Z
0 X
N
243.02 587.99 297.02 587.99 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 612.76 T
(S2) 195.65 594.47 T
(S3) 195.65 576.61 T
470.99 569.41 524.99 623.41 R
7 X
V
0 Z
0 X
N
470.99 605.41 524.99 605.41 2 L
7 X
V
2 Z
0 X
N
470.99 587.41 524.99 587.41 2 L
7 X
V
0 X
N
(X3) 263.72 610.51 T
(X1) 491.69 592.76 T
231.74 618.3 243.28 614.99 231.74 611.68 231.74 614.99 4 Y
V
207.28 614.99 231.74 614.99 2 L
7 X
V
0 X
N
231.74 600.3 243.28 596.99 231.74 593.68 231.74 596.99 4 Y
V
207.28 596.99 231.74 596.99 2 L
7 X
V
0 X
N
231.74 582.3 243.28 578.99 231.74 575.68 231.74 578.99 4 Y
V
207.28 578.99 231.74 578.99 2 L
7 X
V
0 X
N
(X2) 491.69 610.16 T
(X2) 263.72 593.72 T
(X3) 491.69 574.45 T
(X1) 263.72 575.33 T
3 F
(FloatRollDown\050) 353.64 592.31 T
1 F
(3) 436.23 592.31 T
3 F
(\051) 441.8 592.31 T
296.78 616.75 345.89 616.75 2 L
7 X
V
0 X
N
345.89 576.58 345.89 616.75 2 L
7 X
V
0 X
N
459.46 579.88 470.99 576.58 459.46 573.27 459.46 576.58 4 Y
V
345.89 576.58 459.46 576.58 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
189.65 377.35 531 483.77 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 377.35 531 483.77 R
7 X
0 0 0 1 0 0 0 K
V
243.02 390.6 297.02 444.6 R
V
0.5 H
0 Z
0 X
N
243.02 426.6 297.02 426.6 2 L
7 X
V
2 Z
0 X
N
243.02 408.6 297.02 408.6 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 433.37 T
(S2) 195.65 415.08 T
(S3) 195.65 397.23 T
470.99 390.03 524.99 444.03 R
7 X
V
0 Z
0 X
N
470.99 426.03 524.99 426.03 2 L
7 X
V
2 Z
0 X
N
470.99 408.03 524.99 408.03 2 L
7 X
V
0 X
N
(X3) 263.72 431.12 T
(X3) 491.69 413.38 T
231.74 438.91 243.28 435.6 231.74 432.29 231.74 435.6 4 Y
V
207.28 435.6 231.74 435.6 2 L
7 X
V
0 X
N
231.74 420.91 243.28 417.6 231.74 414.29 231.74 417.6 4 Y
V
207.28 417.6 231.74 417.6 2 L
7 X
V
0 X
N
231.74 402.91 243.28 399.6 231.74 396.29 231.74 399.6 4 Y
V
207.28 399.6 231.74 399.6 2 L
7 X
V
0 X
N
(X1) 491.69 430.78 T
(X2) 263.72 414.33 T
(X2) 491.69 395.07 T
(X1) 263.72 395.94 T
3 F
(FloatRot\050\051) 353.64 412.92 T
296.78 397.99 345.89 397.99 2 L
7 X
V
0 X
N
345.89 397.99 345.89 461.45 2 L
7 X
V
0 X
N
345.89 461.45 495.16 461.45 2 L
7 X
V
0 X
N
500.14 455.13 496.83 443.59 493.52 455.13 496.83 455.13 4 Y
V
496.83 461.45 496.83 455.13 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
189.65 259.14 531 357.35 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 259.14 531 357.35 R
7 X
0 0 0 1 0 0 0 K
V
243.02 275.68 297.02 329.68 R
V
0.5 H
0 Z
0 X
N
243.02 311.68 297.02 311.68 2 L
7 X
V
2 Z
0 X
N
243.02 293.68 297.02 293.68 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 318.45 T
(S2) 195.65 300.17 T
(S3) 195.65 282.31 T
470.99 275.11 524.99 329.11 R
7 X
V
0 Z
0 X
N
470.99 311.11 524.99 311.11 2 L
7 X
V
2 Z
0 X
N
470.99 293.11 524.99 293.11 2 L
7 X
V
0 X
N
(X3) 263.72 316.2 T
(X3) 491.69 298.46 T
231.74 323.99 243.28 320.68 231.74 317.38 231.74 320.68 4 Y
V
207.28 320.68 231.74 320.68 2 L
7 X
V
0 X
N
231.74 305.99 243.28 302.68 231.74 299.38 231.74 302.68 4 Y
V
207.28 302.68 231.74 302.68 2 L
7 X
V
0 X
N
231.74 287.99 243.28 284.68 231.74 281.38 231.74 284.68 4 Y
V
207.28 284.68 231.74 284.68 2 L
7 X
V
0 X
N
(X2) 491.69 315.86 T
(X2) 263.72 299.41 T
(X1) 491.69 280.15 T
(X1) 263.72 281.02 T
3 F
(FloatSwap\050\051) 353.64 298.01 T
296.78 322.45 439.63 322.45 2 L
7 X
V
0 X
N
439.63 299.97 439.63 323.25 2 L
7 X
V
0 X
N
459.35 303.28 470.88 299.97 459.35 296.67 459.35 299.97 4 Y
V
439.63 299.97 459.35 299.97 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "969" 25
%%Page: "970" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(970) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(FloatPick\050\051) 189 641.33 T
1 F
(copies the contents of S) 250.39 641.33 T
5 F
(X) 358.17 641.33 T
1 F
(and pushes that value onto the) 367.99 641.33 T
1 9 Q
(FP) 513.94 641.33 T
1 10 Q
-0.11 (stack. The entire stack is pushed in the process.) 189 628.33 P
3 F
-0.11 (FloatPick\050\051) 412.14 628.33 P
1 F
-0.11 (passed with) 473.42 628.33 P
(a value of 3 would copy the contents of S3 onto the FP stack.) 189 615.33 T
3 F
-0.43 (FloatOver\050\051) 189 493.38 P
1 F
-0.42 (copies S2 to the top of the stack, equivalent to a) 251.81 493.38 P
3 F
-0.43 (FloatPick\050\051) 470.04 493.38 P
1 F
(passed with a value of 2.) 189 480.38 T
3 F
(FloatDrop\050\051) 189 460.38 T
1 F
( drops \050pops\051 the top number \050S1\051 off the) 250.3 460.38 T
1 9 Q
(FP) 439.56 460.38 T
1 10 Q
( stack. This) 451.57 460.38 T
-0.7 (routine is different than) 189 447.38 P
3 F
-0.72 (FloatPopNumber\050\051) 300.47 447.38 P
1 F
-0.7 (because the routine does not) 400.21 447.38 P
(place the popped number into a memory address, and is therefore much) 189 434.38 T
(faster) 189 421.38 T
(.) 215.11 421.38 T
3 F
-0.73 (FloatDup\050\051) 189 303.17 P
1 F
-0.71 ( duplicates the value at S1, pushing it onto the top of the stack.) 245.85 303.17 P
(The stack is pushed in the process.) 189 290.17 T
81 144 531 648 C
187.49 510.05 531 612 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
187.49 510.05 531 612 R
7 X
0 0 0 1 0 0 0 K
V
239.95 540 293.95 594 R
V
0.5 H
0 Z
0 X
N
239.95 576 293.95 576 2 L
7 X
V
2 Z
0 X
N
239.95 558 293.95 558 2 L
7 X
V
0 X
N
1 10 Q
(S1) 192.57 582.77 T
(S2) 192.57 564.48 T
(S3) 192.57 546.62 T
450.28 522.72 504.28 594 R
7 X
V
0 Z
0 X
N
450.28 576 504.28 576 2 L
7 X
V
2 Z
0 X
N
450.28 558 504.28 558 2 L
7 X
V
0 X
N
(X3) 260.65 580.52 T
(X3) 470.98 562.82 T
228.67 588.31 240.2 585 228.67 581.69 228.67 585 4 Y
V
204.2 585 228.67 585 2 L
7 X
V
0 X
N
228.67 570.31 240.2 567 228.67 563.69 228.67 567 4 Y
V
204.2 567 228.67 567 2 L
7 X
V
0 X
N
228.67 552.81 240.2 549.5 228.67 546.2 228.67 549.5 4 Y
V
204.2 549.5 228.67 549.5 2 L
7 X
V
0 X
N
(X1) 470.98 580.75 T
(X2) 260.65 563.73 T
(X2) 470.98 544.9 T
(X1) 260.65 545.34 T
(X1) 470.98 526.97 T
450.33 540.58 503.9 540.58 2 L
7 X
V
0 X
N
293.95 549.32 433.01 549.5 2 L
7 X
V
0 X
N
433.01 549.5 433.01 607.54 2 L
7 X
V
0 X
N
433.01 607.54 477.28 607.54 2 L
7 X
V
0 X
N
480.59 605.54 477.28 594 473.98 605.54 477.28 605.54 4 Y
V
477.28 607.54 477.28 605.54 2 L
7 X
V
0 X
N
3 F
(FloatPick\050) 330.34 567.36 T
1 F
(3) 384.97 567.36 T
3 F
(\051) 390.53 567.36 T
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
189.65 319.84 531 418.05 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 319.84 531 418.05 R
7 X
0 0 0 1 0 0 0 K
V
243.02 336.38 297.02 390.38 R
V
0.5 H
0 Z
0 X
N
243.02 372.38 297.02 372.38 2 L
7 X
V
2 Z
0 X
N
243.02 354.38 297.02 354.38 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 379.15 T
(S2) 195.65 360.86 T
(S3) 195.65 343.01 T
470.99 335.8 524.99 389.8 R
7 X
V
0 Z
0 X
N
470.99 371.8 524.99 371.8 2 L
7 X
V
2 Z
0 X
N
470.99 353.8 524.99 353.8 2 L
7 X
V
0 X
N
(X3) 263.72 376.9 T
(X1) 491.69 359.15 T
231.74 384.69 243.28 381.38 231.74 378.07 231.74 381.38 4 Y
V
207.28 381.38 231.74 381.38 2 L
7 X
V
0 X
N
231.74 366.69 243.28 363.38 231.74 360.07 231.74 363.38 4 Y
V
207.28 363.38 231.74 363.38 2 L
7 X
V
0 X
N
231.74 348.69 243.28 345.38 231.74 342.07 231.74 345.38 4 Y
V
207.28 345.38 231.74 345.38 2 L
7 X
V
0 X
N
(X2) 491.69 376.56 T
(X2) 263.72 360.11 T
(...) 493.82 340.85 T
(X1) 263.72 341.72 T
3 F
(FloatDrop\050\051) 353.64 358.7 T
81 144 531 648 C
36 72 576 720 C
81 144 531 648 C
189.65 188.63 531 286.84 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 188.63 531 286.84 R
7 X
0 0 0 1 0 0 0 K
V
243.02 205.17 297.02 259.17 R
V
0.5 H
0 Z
0 X
N
243.02 241.17 297.02 241.17 2 L
7 X
V
2 Z
0 X
N
243.02 223.17 297.02 223.17 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 247.94 T
(S2) 195.65 229.65 T
(S3) 195.65 211.8 T
470.99 204.6 524.99 258.6 R
7 X
V
0 Z
0 X
N
470.99 240.6 524.99 240.6 2 L
7 X
V
2 Z
0 X
N
470.99 222.6 524.99 222.6 2 L
7 X
V
0 X
N
(X2) 263.72 245.69 T
(X2) 491.69 227.95 T
231.74 253.48 243.28 250.17 231.74 246.87 231.74 250.17 4 Y
V
207.28 250.17 231.74 250.17 2 L
7 X
V
0 X
N
231.74 235.48 243.28 232.17 231.74 228.87 231.74 232.17 4 Y
V
207.28 232.17 231.74 232.17 2 L
7 X
V
0 X
N
231.74 217.48 243.28 214.17 231.74 210.87 231.74 214.17 4 Y
V
207.28 214.17 231.74 214.17 2 L
7 X
V
0 X
N
(X2) 491.69 245.35 T
(X1) 263.72 228.9 T
(X1) 491.69 209.64 T
(...) 265.85 210.51 T
3 F
(FloatDup\050\051) 353.64 227.49 T
501.3 270.13 497.99 258.6 494.69 270.13 497.99 270.13 4 Y
V
497.99 282.38 497.99 270.13 2 L
7 X
V
0 X
N
470.88 282.38 497.99 282.38 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "970" 26
%%Page: "971" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(971) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(D.4.2.5) 125.86 638.67 T
(Comparing Numbers on the FP Stack) 189 638.67 T
4 10 Q
(FloatComp\050\051, FloatCompESDI\050\051, FloatCompAndDrop\050\051) 189 616.33 T
1 F
(These routines essentially perform the same operation as the Assembly) 189 596.33 T
(command) 189 583.33 T
3 F
(cmp) 236.41 583.33 T
1 F
(.) 258.27 583.33 T
3 F
(FloatComp\050\051) 263.83 583.33 T
1 F
( performs a compare of the top two) 329.02 583.33 T
1 9 Q
(FP) 491.99 583.33 T
1 10 Q
(numbers \050S1 and S2\051 and sets the appropriate \337ags in the \337ags register) 189 570.33 T
(.) 518.49 570.33 T
(The two) 189 557.33 T
1 9 Q
(FP) 229.01 557.33 T
1 10 Q
( numbers remain on the stack.) 241.02 557.33 T
3 F
( FloatCompESDI\050\051) 382.15 557.33 T
1 F
(compares) 480.11 557.33 T
(the contents of) 189 544.33 T
3 F
(es:[di]) 259.74 544.33 T
1 F
( with the value in S1 \050and the) 291.41 544.33 T
1 9 Q
(FP) 431.63 544.33 T
1 10 Q
( number in S1) 443.64 544.33 T
(remains on the stack\051.) 189 531.33 T
3 F
(FloatCompAndDrop\050\051) 294.57 531.33 T
1 F
(performs a compare of S1) 410.04 531.33 T
(and S2 and drops both from the) 189 518.33 T
1 9 Q
(FP) 337.91 518.33 T
1 10 Q
( stack.) 349.92 518.33 T
0 14 Q
(D.4.2.6) 125.86 484.67 T
(Recovery of the FP Stack) 189 484.67 T
4 10 Q
(FloatGetStackPointer\050\051, FloatSetStackPointer\050\051) 189 462.33 T
3 F
(FloatGetStackPointer\050\051) 189 442.33 T
1 F
( returns the current stack pointer value of the) 311.04 442.33 T
1 9 Q
(FP) 189 429.33 T
1 10 Q
( stack.) 201.01 429.33 T
3 F
(FloatSetStackPointer\050\051) 233.8 429.33 T
1 F
(sets the stack pointer to a previous) 357.05 429.33 T
-0.3 (position. This routine must be passed a value that is greater than or equal) 189 416.33 P
(to the current value of the stack pointer) 189 403.33 T
(. \050I.e. you must be throwing) 372.34 403.33 T
(something, or nothing, away) 189 390.33 T
(.\051) 319.39 390.33 T
-0.68 (These routines may be useful before the execution of involved routines that) 189 370.33 P
(may push many numbers onto the stack. If an unrecoverable error is) 189 357.33 T
-0.51 (encountered, the programmer need not pop the intermediate values off the) 189 344.33 P
-0.14 (stack to return to the previous stack con\336guration. Only the stack pointer) 189 331.33 P
(is saved; the state of the stack is not. If any numbers below the stack) 189 318.33 T
(pointer are popped or altered,) 189 305.33 T
3 F
(FloatSetStackPointer\050\051) 329.19 305.33 T
1 F
( will not recover) 449.57 305.33 T
(the previous state of the stack.) 189 292.33 T
0 14 Q
(D.4.3) 137.54 250 T
0 18 Q
(Floating Point Math Routines) 189 250 T
1 10 Q
-0.06 (The Float Library provides a number of routines to modify data on the) 189 226.33 P
1 9 Q
-0.05 (FP) 516.27 226.33 P
1 10 Q
(stack. These routines can be categorized in several major groups:) 189 213.33 T
2 F
(u) 189 193.33 T
1 F
(Constant Routines) 207 193.33 T
2 F
(u) 189 174.33 T
1 F
(Math Routines) 207 174.33 T
2 F
(u) 189 155.33 T
1 F
(T) 207 155.33 T
(ranscendental Routines) 213.05 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "971" 27
%%Page: "972" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(972) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 189 641.33 T
1 F
(Conversion Routines) 207 641.33 T
2 F
(u) 189 622.33 T
1 F
(Date and T) 207 622.33 T
(ime Routines) 258.62 622.33 T
0 14 Q
(D.4.3.1) 125.86 589.67 T
(Constant Routines) 189 589.67 T
4 10 Q
(Float0\050\051, FloatPoint5\050\051, Float1\050\051, FloatMinusPoint5\050\051,) 189 567.33 T
-1.5 (FloatMinus1\050\051,Float2\050\051, Float5\050\051, Float10\050\051, Float3600\050\051,) 189 554.33 P
(Float16384\050\051, Float86400\050\051) 189 541.33 T
(FloatPi\050\051, FloatPiDiv2\050\051,FloatLg10\050\051, FloatLn2\050\051,) 189 521.33 T
(FloatLn10\050\051, FloatSqrt2\050\051) 189 508.33 T
1 F
-0.44 (The Constant Routines provide a means of quickly obtaining an often used) 189 488.33 P
-0.22 (number or an often used operation with a constant operand. Each of these) 189 475.33 P
(functions pushes the constant) 189 462.33 T
1 9 Q
(FP) 329.74 462.33 T
1 10 Q
( value onto the top of the) 341.75 462.33 T
1 9 Q
(FP) 459.36 462.33 T
1 10 Q
( stack. \050For) 471.36 462.33 T
(example,) 189 449.33 T
3 F
(FloatMinusPoint5\050\051) 233.27 449.33 T
1 F
( pushes -.5 onto the) 334.73 449.33 T
1 9 Q
(FP) 427.52 449.33 T
1 10 Q
( stack.\051) 439.53 449.33 T
3 F
(FloatPi\050\051) 189 429.33 T
1 F
(,) 235.29 429.33 T
3 F
(FloatPiDiv2\050\051) 240.85 429.33 T
1 F
(,) 311.02 429.33 T
3 F
(FloatLg10\050\051) 316.58 429.33 T
1 F
(,) 376.39 429.33 T
3 F
(FloatLn2\050\051) 381.95 429.33 T
1 F
(,) 436.76 429.33 T
3 F
(FloatLn10\050\051) 442.32 429.33 T
1 F
(, and) 502.87 429.33 T
3 F
-0.41 (FloatSqrt2\050\051) 189 416.33 P
1 F
-0.4 (each push the speci\336ed transcendental constant onto the) 254.8 416.33 P
1 9 Q
-0.36 (FP) 516.61 416.33 P
1 10 Q
-0.62 (stack:) 189 403.33 P
7 14 Q
-0.78 (p) 218.39 403.33 P
1 10 Q
-0.62 (,) 226.08 403.33 P
7 14 Q
-0.78 (p) 228.86 403.33 P
1 10 Q
-0.62 (/2, the log of 10, the natural log of 2, the natural log of 10,and the) 236.54 403.33 P
(square root of 2, respectively) 189 390.33 T
(. \050See also T) 320.49 390.33 T
(ranscendental Routines.\051) 375.63 390.33 T
0 14 Q
(D.4.3.2) 125.86 356.67 T
(Constant Operands) 189 356.67 T
4 10 Q
(FloatMultiply2\050\051, FloatMultiply10\050\051, FloatDivide2\050\051,) 189 334.33 T
(FloatDivide10\050\051, Float10ToTheX\050\051) 189 321.33 T
3 F
(FloatMultiply2\050\051, FloatMultiply10\050\051, FloatDivide2\050\051,) 189 301.33 T
(FloatDivide10\050\051) 189 288.33 T
1 F
(perform the speci\336ed operations on the contents of S1,) 272.6 288.33 T
(either multiplying or dividing the contents of S1 by 2 or 10, and push the) 189 275.33 T
-0.28 (result onto the) 189 262.33 P
1 9 Q
-0.25 (FP) 258.73 262.33 P
1 10 Q
-0.28 ( stack. The original value in S1 is popped off of the stack.) 270.74 262.33 P
3 F
(Float10T) 189 242.33 T
(oTheX\050\051) 234 242.33 T
1 F
(pushes 10 to a passed exponent onto the) 277.79 242.33 T
1 9 Q
(FP) 466.34 242.33 T
1 10 Q
( stack.) 478.35 242.33 T
0 14 Q
(D.4.3.3) 125.86 208.67 T
(Algebraic Routines) 189 208.67 T
4 10 Q
(FloatAbs\050\051, FloatAdd\050\051, FloatSub\050\051, FloatDivide\050\051,) 189 186.33 T
-2 (FloatMultiply\050\051, FloatDIV\050\051, FloatMod\050\051,FloatFactorial\050\051,) 189 173.33 P
(FloatNegate\050\051, FloatInverse\050\051) 189 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "972" 28
%%Page: "973" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(973) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.56 (The Math Routines perform various operations on numbers already placed) 189 641.33 P
-0.36 (on the FP stack. All of the following routines pop the operated numbers off) 189 628.33 P
(of the stack and push the result onto S1.) 189 615.33 T
3 F
-0.57 (FloatAdd\050\051) 189 595.33 P
1 F
-0.55 (adds the contents of S1 and S2, and pushes the result onto the) 247.23 595.33 P
(top of the FP stack. The original values are popped off the stack.) 189 582.33 T
3 F
(FloatSub\050\051) 189 562.33 T
1 F
(subtracts) 246.87 562.33 T
(the contents of S1 from the contents of S2, and) 292.89 562.33 T
(pushes the result onto the top of the) 189 549.33 T
1 9 Q
(FP) 358.64 549.33 T
1 10 Q
( stack. The original values are) 370.65 549.33 T
(popped off the stack.) 189 536.33 T
(Note that, in general, numbers will be pushed onto the stack in the order) 189 516.33 T
(they would normally be operated on. For example, to obtain X1-X2, the) 189 503.33 T
(programmer would \336rst push X1, then X2, and call) 189 490.33 T
3 F
(FloatSub) 426.81 490.33 T
1 F
(, as in the) 474.03 490.33 T
(following diagram:) 189 477.33 T
(since X1 would now be in location S2, while X2 is in location S1.) 189 343.33 T
3 F
(FloatMultiply\050\051) 189 323.33 T
1 F
(multiplies the contents of S1 and S2 and pushes the) 271.31 323.33 T
(result onto the top of the) 189 310.33 T
1 9 Q
(FP) 305.86 310.33 T
1 10 Q
( stack. The original values are popped off the) 317.87 310.33 T
(stack.) 189 297.33 T
3 F
-0.42 (FloatDivide\050\051) 189 277.33 P
1 F
-0.41 (divides the contents of S2 by the contents of S1 and pushes) 260.7 277.33 P
(the result onto the top of the) 189 264.33 T
1 9 Q
(FP) 323.64 264.33 T
1 10 Q
( stack. The original values are popped off) 335.65 264.33 T
(the stack.) 189 251.33 T
3 F
-0.9 (FloatDIV\050\051) 189 231.33 P
1 F
-0.87 (performs a) 246.33 231.33 P
3 F
-0.9 (FloatDivide\050\051) 297.17 231.33 P
1 F
-0.87 (, truncating the fractional portion of) 366.42 231.33 P
-0.05 (the number and returning only the integer result. The original values are) 189 218.33 P
(popped off the stack.) 189 205.33 T
3 F
-0.41 (FloatMod\050\051) 189 185.33 P
1 F
-0.4 (pushes S2 mod S1 \050the remainder of) 249.05 185.33 P
3 F
-0.41 (FloatDivide\050\051) 416.28 185.33 P
1 F
-0.4 (\051 onto the) 485.53 185.33 P
(top of the) 189 172.33 T
1 9 Q
(FP) 235.3 172.33 T
1 10 Q
( stack. The original values are popped off the stack.) 247.31 172.33 T
81 144 531 648 C
189.65 360 531 474 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
189.65 360 531 474 R
7 X
0 0 0 1 0 0 0 K
V
243.02 377.33 297.02 431.33 R
V
0.5 H
0 Z
0 X
N
243.02 413.33 297.02 413.33 2 L
7 X
V
2 Z
0 X
N
243.02 395.33 297.02 395.33 2 L
7 X
V
0 X
N
1 10 Q
(S1) 195.65 420.1 T
(S2) 195.65 401.81 T
(S3) 195.65 383.96 T
470.99 376.76 524.99 430.76 R
7 X
V
0 Z
0 X
N
470.99 412.76 524.99 412.76 2 L
7 X
V
2 Z
0 X
N
470.99 394.76 524.99 394.76 2 L
7 X
V
0 X
N
(X1) 263.72 417.85 T
(...) 493.82 400.11 T
231.74 425.64 243.28 422.33 231.74 419.03 231.74 422.33 4 Y
V
207.28 422.33 231.74 422.33 2 L
7 X
V
0 X
N
231.74 407.64 243.28 404.33 231.74 401.03 231.74 404.33 4 Y
V
207.28 404.33 231.74 404.33 2 L
7 X
V
0 X
N
231.74 389.64 243.28 386.33 231.74 383.03 231.74 386.33 4 Y
V
207.28 386.33 231.74 386.33 2 L
7 X
V
0 X
N
(X1- X2) 482.34 417.51 T
(...) 265.85 401.06 T
(...) 493.82 381.8 T
(...) 265.85 382.67 T
3 F
(FloatDup) 353.64 399.65 T
349.92 378.22 403.92 432.22 R
7 X
V
0 Z
0 X
N
349.92 414.22 403.92 414.22 2 L
7 X
V
2 Z
0 X
N
349.92 396.22 403.92 396.22 2 L
7 X
V
0 X
N
1 F
(X2) 370.62 418.73 T
(X1) 370.62 401.95 T
(...) 372.75 383.55 T
273.32 442.87 270.02 431.33 266.7 442.87 270.01 442.87 4 Y
V
270 454.54 270.01 442.87 2 L
7 X
V
1 H
0 X
N
380.34 443.72 376.92 432.22 373.72 443.78 377.03 443.75 4 Y
V
377.14 454.54 377.03 443.75 2 L
7 X
V
0 X
N
(push X1) 203.04 445.61 T
(push X2) 310.18 445.61 T
3 F
(FloatSub\050\051) 411.48 405.43 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "973" 29
%%Page: "974" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(974) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(FloatAbs\050\051) 189 641.33 T
1 F
(pushes the absolute value of S1 onto the top of the) 245.94 641.33 T
1 9 Q
(FP) 480.98 641.33 T
1 10 Q
( stack.) 492.99 641.33 T
(The original value is popped off the stack.) 189 628.33 T
3 F
-0.6 (FloatFactorial\050\051) 189 608.33 P
1 F
-0.58 (pushes the factorial \050x!\051 of the value in S1 onto the top of) 274.05 608.33 P
(the) 189 595.33 T
1 9 Q
(FP) 206.78 595.33 T
1 10 Q
( stack. The original value is popped off the stack.) 218.79 595.33 T
3 F
-0.31 (FloatNegate\050\051) 189 575.33 P
1 F
-0.3 (negates the value in S1 and pushes the result onto the top) 262.85 575.33 P
(of the) 189 562.33 T
1 9 Q
(FP) 217.89 562.33 T
1 10 Q
( stack. The) 229.9 562.33 T
(original value is popped off the stack.) 283.34 562.33 T
3 F
-0.11 (FloatInverse\050\051) 189 542.33 P
1 F
-0.1 (pushes the inverse of the value in S1 \050-S1\051 onto the top of) 265.83 542.33 P
(the) 189 529.33 T
1 9 Q
(FP) 206.78 529.33 T
1 10 Q
( stack. The original value is popped off of the stack.) 218.79 529.33 T
0 14 Q
(D.4.3.4) 125.86 495.67 T
(Comparison Routines) 189 495.67 T
4 10 Q
-1.5 (FloatMax\050\051, FloatMin\050\051, FloatLt0\050\051, FloatEq0\050\051, FloatGt0\050\051) 189 473.33 P
3 F
(FloatMax\050\051) 189 453.33 T
1 F
(performs a compare of the) 248.9 453.33 T
1 9 Q
(FP) 372.23 453.33 T
1 10 Q
( numbers in S1 and S2 and, if) 384.24 453.33 T
(necessary) 189 440.33 T
(, swaps the greater number into S1.) 233.07 440.33 T
3 F
(FloatMin\050\051) 189 420.33 T
1 F
(performs a compare of the) 247.23 420.33 T
1 9 Q
(FP) 370.56 420.33 T
1 10 Q
( numbers in S1 and S2 and, if) 382.57 420.33 T
(necessary) 189 407.33 T
(, swaps the lesser number into S1.) 233.07 407.33 T
3 F
-0.05 (FloatLt0\050\051, FloatEq0\050\051, FloatGt0\050\051) 189 387.33 P
1 F
-0.05 (check whether the) 363.38 387.33 P
1 9 Q
-0.04 (FP) 450.83 387.33 P
1 10 Q
-0.05 ( number in S1) 462.84 387.33 P
-0.12 (is less than zero, equal to zero, or greater than zero. The carry bit is set to) 189 374.33 P
1 9 Q
(TRUE) 189 361.33 T
1 10 Q
( if the relationship is true. The original value is popped off of the) 215.33 361.33 T
(stack.) 189 348.33 T
0 14 Q
(D.4.3.5) 125.86 314.67 T
(Fractional and Integral Routines) 189 314.67 T
4 10 Q
(FloatFrac\050\051, FloatTrunc\050\051, FloatInt\050\051, FloatIntFrac\050\051,) 189 292.33 T
(FloatRound\050\051) 189 279.33 T
3 F
(FloatFrac\050\051) 189 259.33 T
1 F
(pushes the fractional portion of S1 onto the) 250.95 259.33 T
1 9 Q
(FP) 453.56 259.33 T
1 10 Q
( stack. The) 465.57 259.33 T
(original value is popped off of the stack.) 189 246.33 T
3 F
-0.56 (FloatT) 189 226.33 P
-0.56 (runc\050\051) 222.82 226.33 P
1 F
-0.55 (pushes the integral portion of the contents of S1 onto the) 257.36 226.33 P
1 9 Q
-0.49 (FP) 516.76 226.33 P
1 10 Q
(stack. This amounts to a rounding of the) 189 213.33 T
1 9 Q
(FP) 379.03 213.33 T
1 10 Q
( number toward zero, so that) 391.04 213.33 T
3 F
(FloatT) 189 200.33 T
(runc\050\051) 222.82 200.33 T
1 F
(performed on -7.8 would return -7. The original value is) 257.92 200.33 T
(popped off the stack.) 189 187.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "974" 30
%%Page: "975" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(975) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(FloatInt\050\051) 189 641.33 T
1 F
(rounds S1 down to its integral component, so that) 242.42 641.33 T
3 F
(FloatInt\050\051) 475.23 641.33 T
1 F
-0.18 (performed on -7.8 would return -8. Note that for negative numbers, this is) 189 628.33 P
(different from) 189 615.33 T
3 F
(FloatT) 256.21 615.33 T
(runc\050\051) 290.03 615.33 T
1 F
(. The original value is popped off the stack.) 322.26 615.33 T
3 F
-0.62 (FloatIntFrac\050\051) 189 595.33 P
1 F
-0.6 (splits a number into its fractional and integral parts, with) 265.88 595.33 P
(the fractional part in S1 and the integral part in S2. The original value is) 189 582.33 T
(popped off the stack.) 189 569.33 T
3 F
(FloatRound\050\051) 189 549.33 T
1 F
(rounds S1 to a given number of decimal places.) 261.5 549.33 T
3 F
-0.19 (FloatRound\050\051) 189 536.33 P
1 F
-0.18 (passed with zero as an argument rounds S1 to the nearest) 261.31 536.33 P
(integer) 189 523.33 T
(, rounding up if greater than or equal to .5, rounding down if less) 221.22 523.33 T
(than) 189 510.33 T
(.5) 213.45 510.33 T
0 14 Q
(D.4.3.6) 125.86 476.67 T
(Routines that Return Random V) 189 476.67 T
(alues) 399.8 476.67 T
4 10 Q
(FloatRandom\050\051, FloatRandomN\050\051, FloatRandomize\050\051) 189 454.33 T
3 F
(FloatRandom\050\051) 189 434.33 T
1 F
(pushes a random number between 0 \050inclusive\051 and 1) 270.39 434.33 T
(\050exclusive\051 onto the stack.) 189 421.33 T
3 F
(FloatRandomN\050\051) 189 401.33 T
1 F
(pushes a random integer between 0 \050inclusive\051 and N) 278.72 401.33 T
(\050exclusive\051 onto the stack.) 189 388.33 T
3 F
(FloatRandomize\050\051) 189 368.33 T
1 F
( primes the random number generator) 282.33 368.33 T
(. This routine) 459 368.33 T
(expects a seed and some) 189 355.33 T
3 F
(RandomGenInitFlags) 303.83 355.33 T
1 F
(. If the \337ag) 415.48 355.33 T
1 9 Q
(RGIF_USE_SEED) 189 342.33 T
1 10 Q
(is passed, then a developer) 268.84 342.33 T
(-supplied seed will be used.) 392.75 342.33 T
(Otherwise, a seed based on the timer clock will be used.) 189 329.33 T
3 F
(FloatRandomize\050\051) 189 309.33 T
1 F
(should always be called before any of the) 285.2 309.33 T
3 F
(FloatRandom\050\051) 189 296.33 T
1 F
(routines to ensure a high degree of randomness.) 270.39 296.33 T
(The random number generation method uses the linear congruential) 189 276.33 T
(method, an algorithm which ensures a high degree of randomness in the) 189 263.33 T
(computation method.) 189 250.33 T
0 14 Q
(D.4.3.7) 125.86 216.67 T
(T) 189 216.67 T
(ranscendental Functions) 196.78 216.67 T
1 10 Q
(T) 189 194.33 T
(ranscendental functions are functions that cannot be constructed using) 195.05 194.33 T
(normal arithmetic routines. Care must be taken with the following) 189 181.33 T
(routines to ensure that they are operating on a valid range of values.) 189 168.33 T
(Otherwise, the routines will return an error) 189 155.33 T
(.) 391.04 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "975" 31
%%Page: "976" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(976) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(T) 180 640 T
(rigonometric Routines) 186.67 640 T
4 10 Q
(FloatSin\050\051, FloatCos\050\051, FloatTan\050\051, FloatArcSin\050\051,) 189 618.33 T
(FloatArcCos\050\051, FloatArcTan\050\051, FloatArcTan2\050\051,) 189 605.33 T
(FloatSinh\050\051, FloatCosh\050\051, FloatTanh\050\051, FloatArcSinh\050\051,) 189 592.33 T
(FloatArcCosh\050\051, FloatArcTanh\050\051) 189 579.33 T
3 F
(FloatSin\050\051, FloatCos\050\051) 189 559.33 T
1 F
(, and) 300.76 559.33 T
3 F
( FloatT) 323.73 559.33 T
(an\050\051) 360.42 559.33 T
1 F
(perform the given operation on) 384.03 559.33 T
(the contents of S1, pushing the result onto the) 189 546.33 T
1 9 Q
(FP) 405.5 546.33 T
1 10 Q
( stack. S1 must be) 417.51 546.33 T
(expressed in radians. The original value is popped off of the stack.) 189 533.33 T
3 F
(FloatArcSin\050\051, FloatArcCos\050\051) 189 513.33 T
1 F
(, and) 337.44 513.33 T
3 F
(FloatArcT) 363.19 513.33 T
(an\050\051) 415.35 513.33 T
1 F
(perform) 438.96 513.33 T
(the given) 478.67 513.33 T
-0.48 (inverse operation on S1, pushing the result onto the) 189 500.33 P
1 9 Q
-0.43 (FP) 427.48 500.33 P
1 10 Q
-0.48 ( stack. The result is) 439.49 500.33 P
(given in radians. The original value is popped off of the stack.) 189 487.33 T
3 F
(FloatArcT) 189 467.33 T
(an2\050\051) 241.16 467.33 T
1 F
(calculates the arc tangent given cartesian coordinates) 270.51 467.33 T
5 F
(x) 522.01 467.33 T
1 F
-0.8 (and) 189 454.33 P
5 F
-0.8 (y) 208.39 454.33 P
1 F
-0.8 (. The arctangent is calculated from the x-axis through the origin to the) 212.28 454.33 P
(given point. The value returned is expressed in radians, between -) 189 441.33 T
7 14 Q
(p) 494.4 441.33 T
1 10 Q
(\050exclusive\051 and +) 189 428.33 T
7 14 Q
(p) 266.91 428.33 T
1 10 Q
( \050inclusive\051. The original values are popped off of the) 274.6 428.33 T
(stack.) 189 415.33 T
3 F
(FloatSinh\050\051, FloatCosh\050\051) 189 395.33 T
1 F
(, and) 314.46 395.33 T
3 F
(FloatT) 340.21 395.33 T
(anh\050\051) 374.03 395.33 T
1 F
(perform the given) 404.49 395.33 T
(hyperbolic operations on S1, pushing the result onto the) 189 382.33 T
1 9 Q
(FP) 450.69 382.33 T
1 10 Q
( stack. The) 462.7 382.33 T
(original value is popped off of the stack.) 189 369.33 T
3 F
(FloatArcSinh\050\051, FloatArcCosh\050\051) 189 349.33 T
1 F
(, and) 351.14 349.33 T
3 F
( FloatArcT) 374.11 349.33 T
(anh\050\051) 429.14 349.33 T
1 F
(perform the) 459.6 349.33 T
(given inverse hyperbolic operations on S1, pushing the result onto the) 189 336.33 T
1 9 Q
(FP) 514.95 336.33 T
1 10 Q
(stack. The original value is popped off of the stack.) 189 323.33 T
0 12 Q
(Exponential Routines) 180 297 T
4 10 Q
(FloatExp\050\051, FloatExponential\050\051, FloatLg\050\051, FloatLog\050\051,) 189 275.33 T
(FloatLn\050\051, FloatLn1plusX\050\051, FloatSqr\050\051, FloatSqrt\050\051) 189 262.33 T
3 F
(FloatExp\050\051) 189 242.33 T
1 F
(performs the exponentiation of) 247.24 242.33 T
5 F
(e) 392.24 242.33 T
1 F
( to the power of S1, pushing) 396.68 242.33 T
(the result onto the) 189 229.33 T
1 9 Q
(FP) 277.34 229.33 T
1 10 Q
( stack. The original value is popped off of the stack.) 289.35 229.33 T
3 F
-0.72 (FloatExponential\050\051) 189 209.33 P
1 F
-0.7 (performs the exponentiation of S2 to the power of S1,) 289.66 209.33 P
-0.15 (pushing the result onto the) 189 196.33 P
1 9 Q
-0.13 (FP) 316.6 196.33 P
1 10 Q
-0.15 ( stack. The original values are popped off of) 328.6 196.33 P
(the stack.) 189 183.33 T
3 F
(FloatLg\050\051) 189 163.33 T
1 F
( performs the logarithm to the base 2 on S1, pushing the result) 237.33 163.33 T
(onto the) 189 150.33 T
1 9 Q
(FP) 229.56 150.33 T
1 10 Q
( stack. The original value is popped off of the stack.) 241.57 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "976" 32
%%Page: "977" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Direct FP Operations) 418.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(977) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(D.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
-0.88 (FloatLog\050\051) 189 641.33 P
1 F
-0.85 ( performs the logarithm to the base 10 on S1. The original value) 243.44 641.33 P
(is popped off the stack.) 189 628.33 T
3 F
-0.19 (FloatLn\050\051) 189 608.33 P
1 F
-0.18 (performs the natural logarithm \050log base) 240.75 608.33 P
5 F
-0.18 (e) 430.78 608.33 P
1 F
-0.18 (\051 on S1. The original) 435.22 608.33 P
(value is popped off the stack.) 189 595.33 T
3 F
-0.04 (FloatLn1plusX\050\051) 189 575.33 P
1 F
-0.04 (performs the natural log of \0501 + S1\051. The original value) 275.9 575.33 P
(is popped off the stack.) 189 562.33 T
3 F
(FloatSqr\050\051) 189 542.33 T
1 F
(performs the square of S1, pushing) 245.21 542.33 T
(the result onto the) 409.94 542.33 T
1 9 Q
(FP) 498.28 542.33 T
1 10 Q
(stack. The original value is popped off the stack.) 189 529.33 T
3 F
-0.58 (FloatSqrt\050\051) 189 509.33 P
1 F
-0.56 (performs the square root of S1, pushing the result onto the) 248.89 509.33 P
1 9 Q
-0.51 (FP) 516.78 509.33 P
1 10 Q
(stack. The original value is popped off the stack.) 189 496.33 T
0 14 Q
(D.4.3.8) 125.86 462.67 T
(Conversion Routines) 189 462.67 T
1 10 Q
(At some point 80-bit) 189 440.33 T
1 9 Q
(FP) 285.69 440.33 T
1 10 Q
( numbers may need to be converted into different) 297.7 440.33 T
(formats, or you may need to convert these differently formatted numbers) 189 427.33 T
(into a \337oating point representation. The Math Library provides for this) 189 414.33 T
(contingency) 189 401.33 T
(.) 242.88 401.33 T
0 12 Q
(Conversions Between Integers and FP Numbers) 180 375 T
4 10 Q
(FloatDwordToFloat\050\051, FloatWordToFloat\050\051,) 189 353.33 T
(FloatFloatToDword\050\051) 189 340.33 T
3 F
(FloatDwordT) 189 320.33 T
(oFloat\050\051 converts a passed double-word signed) 257.71 320.33 T
-0.53 (integer into a \337oating point number) 189 307.33 P
-0.53 (, and pushes that number onto) 372.89 307.33 P
(the) 189 294.33 T
1 9 Q
(FP) 208.72 294.33 T
3 10 Q
( stack.) 220.73 294.33 T
-0.86 (FloatW) 189 274.33 P
-0.86 (ordT) 225.48 274.33 P
-0.86 (oFloat\050\051) 249.75 274.33 P
1 F
-0.83 (converts) 292.87 274.33 P
-0.83 (a passed word signed integer into a \337oating) 333.76 274.33 P
(point number) 189 261.33 T
(, and pushes that number onto the FP stack.) 251.04 261.33 T
3 F
(FloatFloatT) 189 241.33 T
(oDword\050\051) 249.74 241.33 T
1 F
(converts the) 301.69 241.33 T
1 9 Q
(FP) 361.13 241.33 T
1 10 Q
( number in S1 into a double-word) 373.14 241.33 T
-0.66 (signed integer) 189 228.33 P
-0.66 (. The) 253.34 228.33 P
1 9 Q
-0.59 (FP) 278.15 228.33 P
1 10 Q
-0.66 ( number is converted into an integer by rounding the) 290.15 228.33 P
1 9 Q
(FP) 189 215.33 T
1 10 Q
( number to zero decimal places.) 201.01 215.33 T
(Y) 189 195.33 T
(ou can convert a) 194.93 195.33 T
1 9 Q
(FP) 273.08 195.33 T
1 10 Q
( number into a word value by using) 285.09 195.33 T
3 F
(FloatFloatT) 189 182.33 T
(oDword\050\051) 249.74 182.33 T
1 F
( and just using the low word.) 298.82 182.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "977" 33
%%Page: "978" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Math Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(978) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(D.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Conversions Between 80 bit FP Numbers and Other Floats) 180 640 T
4 10 Q
(FloatGeos80ToIEEE64\050\051, FloatGeos80ToIEEE32\050\051,) 189 618.33 T
(FloatIEEE64ToGeos80\050\051, FloatIEEE32ToGeos80\050\051) 189 605.33 T
3 F
(FloatGeos80T) 189 585.33 T
(oIEEE64\050\051) 259.18 585.33 T
1 F
( converts a) 311.76 585.33 T
1 9 Q
(GEOS) 364.54 585.33 T
(FP) 393.49 585.33 T
1 10 Q
( number \05080 bits\051 into a 64) 405.5 585.33 T
(bit \337oating point number \050in C, a type of) 189 572.33 T
3 F
(double) 378.29 572.33 T
1 F
(\051.) 413.66 572.33 T
3 F
(FloatGeos80T) 189 552.33 T
(oIEEE32\050\051) 259.18 552.33 T
1 F
( converts a) 311.76 552.33 T
1 9 Q
(GEOS) 364.54 552.33 T
(FP) 393.49 552.33 T
1 10 Q
( number \05080 bits\051 into a 32) 405.5 552.33 T
(bit \337oating point number \050in C, a type of) 189 539.33 T
3 F
(\337oat) 378.29 539.33 T
1 F
(\051.) 401.62 539.33 T
3 F
-0.34 (FloatIEEE64T) 189 519.33 P
-0.34 (oGeos80\050\051) 261.21 519.33 P
1 F
-0.33 ( converts a 64 bit) 311.76 519.33 P
1 9 Q
-0.3 (FP) 392.15 519.33 P
1 10 Q
-0.33 ( number into a) 404.16 519.33 P
1 9 Q
-0.3 (GEOS) 473.77 519.33 P
1 10 Q
-0.33 ( 80 bit) 499.94 519.33 P
1 9 Q
(FP) 189 506.33 T
1 10 Q
( number \050in C, a type of) 201.01 506.33 T
3 F
(long) 313.06 506.33 T
(double) 338.43 506.33 T
1 F
(\051.) 373.8 506.33 T
3 F
-0.34 (FloatIEEE32T) 189 486.33 P
-0.34 (oGeos80\050\051) 261.21 486.33 P
1 F
-0.33 ( converts a 32 bit) 311.76 486.33 P
1 9 Q
-0.3 (FP) 392.15 486.33 P
1 10 Q
-0.33 ( number into a) 404.16 486.33 P
1 9 Q
-0.3 (GEOS) 473.77 486.33 P
1 10 Q
-0.33 ( 80 bit) 499.94 486.33 P
1 9 Q
(FP) 189 473.33 T
1 10 Q
( number \050in C, a type of) 201.01 473.33 T
3 F
(long) 313.06 473.33 T
(double) 338.43 473.33 T
1 F
(\051.) 373.8 473.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "978" 34
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 34
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ NewCenturySchlbk-Italic
%%+ Courier-BoldOblique
%%+ Symbol
%%EOF
