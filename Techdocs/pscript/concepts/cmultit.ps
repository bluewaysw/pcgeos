%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "913" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Multitasking Goals) 433.53 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(913) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.1) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(One of the most impressive features of) 189 597.5 T
1 9 Q
(GEOS) 369.38 597.5 T
1 10 Q
( is its ability to perform) 395.55 597.5 T
-0.86 (several tasks simultaneously) 189 584.5 P
-0.86 (, even on the least powerful) 320.26 584.5 P
1 9 Q
-0.78 (PC) 444.91 584.5 P
1 10 Q
-0.86 (s. Of course, the) 457.41 584.5 P
1 9 Q
(PC) 189 571.5 T
1 10 Q
( has only one processor and can execute only one instruction at a time.) 201.5 571.5 T
1 9 Q
-0.18 (GEOS) 189 558.5 P
1 10 Q
-0.2 ( keeps track of the various tasks, or) 215.17 558.5 P
3 F
-0.2 (threads) 380.86 558.5 P
1 F
-0.2 (, that are underway) 415.66 558.5 P
-0.2 (, and) 505.64 558.5 P
-0.67 (by switching from one thread to another many times per second creates the) 189 545.5 P
(illusion that the) 189 532.5 T
1 9 Q
(PC) 266.24 532.5 T
1 10 Q
( is actually doing all the jobs at the same time.) 278.74 532.5 T
(This chapter covers) 189 512.5 T
2 F
(u) 189 492.5 T
1 F
(the basic concepts of multitasking,) 207 492.5 T
2 F
(u) 189 473.5 T
1 F
(the) 207 473.5 T
1 9 Q
(GEOS) 224.78 473.5 T
1 10 Q
( multitasking scheme,) 250.95 473.5 T
2 F
(u) 189 454.5 T
1 F
(the steps to creating a multi-threaded application, and) 207 454.5 T
2 F
(u) 189 435.5 T
1 F
(the use of semaphores to synchronize threads and avoid deadlock.) 207 435.5 T
(Y) 189 416.5 T
(ou will need to know the information in this appendix if you will be) 194.93 416.5 T
(writing a multi-threaded application. The information in the appendix is) 189 403.5 T
(not essential if your application will be single-threaded or if you will use) 189 390.5 T
(the standard) 189 377.5 T
1 9 Q
(GEOS) 251.23 377.5 T
1 10 Q
( dual-thread architecture. For a dual-thread) 277.4 377.5 T
-0.55 (application, be careful not to send a message with) 189 364.5 P
4 F
-0.57 (@call) 416.84 364.5 P
1 F
-0.55 ( from an object run) 443.02 364.5 P
(by a user interface thread to an object run by any other thread of the) 189 351.5 T
(application.) 189 338.5 T
0 14 Q
(B.1) 149.22 286.17 T
0 24 Q
(Multitasking Goals) 189 286.17 T
1 10 Q
(The) 189 260.5 T
1 9 Q
(GEOS) 209.56 260.5 T
1 10 Q
( multitasking system is one of the most sophisticated available) 235.73 260.5 T
-0.53 (for) 189 247.5 P
1 9 Q
-0.48 (PC) 204.02 247.5 P
1 10 Q
-0.53 (s today) 216.52 247.5 P
-0.53 (. It was designed with the latest available technology and was) 247.85 247.5 P
(created to serve the following two primary goals:) 189 234.5 T
2 F
(u) 189 214.5 T
1 F
(Fast Response) 207 214.5 T
(The) 207 202.5 T
1 9 Q
(GEOS) 227.56 202.5 T
1 10 Q
( multitasking system was designed with a strong emphasis) 253.73 202.5 T
-0.39 (on rapid response to user input. Prompt, visible reaction to user action) 207 190.5 P
(is the single most important factor contributing to the perception of) 207 178.5 T
(speed. For example, if a user changes an element in a spreadsheet) 207 166.5 T
(\050requiring the whole spreadsheet to be recomputed\051 and then pulls) 207 154.5 T
81 144 531 648 C
235.51 643.17 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.17 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "913" 1
%%Page: "914" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(914) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(down a menu, he wants the menu to appear right away) 207 641.33 T
(. If the menu) 461.12 641.33 T
-0.63 (does not appear until the computation is \336nished, the system will seem) 207 629.33 P
(sluggish. If the computation takes a few seconds or longer) 207 617.33 T
(, the user) 473.5 617.33 T
(may wonder whether the system has crashed altogether) 207 605.33 T
(.) 464.98 605.33 T
2 F
(u) 189 586.33 T
1 F
(Ease of Programming) 207 586.33 T
-0.7 (Making the programmer) 207 574.33 P
-0.7 (\325) 320.04 574.33 P
-0.7 (s job easy is another motive behind the design) 321.71 574.33 P
(of) 207 562.33 T
1 9 Q
(GEOS) 218.11 562.33 T
1 10 Q
( multitasking. Ideally) 244.28 562.33 T
(, the programmer should not need to be) 343.38 562.33 T
(aware that his program will run in a multitasking environment. The) 207 550.33 T
-0.31 (program should proceed as though it were the only one running on the) 207 538.33 P
-0.03 (system. Besides certain \322good citizen\323 rules, application programs are) 207 526.33 P
(isolated from the multitasking environment. On the other hand, if a) 207 514.33 T
-0.4 (programmer wants to take advantage of the multitasking capability of) 207 502.33 P
1 9 Q
(GEOS) 207 490.33 T
1 10 Q
( \050by designing a program to perform more than one task) 233.17 490.33 T
(concurrently\051 the system is designed to make this as simple and) 207 478.33 T
(ef\336cient as possible.) 207 466.33 T
0 14 Q
(B.2) 149.22 415 T
0 24 Q
(T) 189 415 T
(wo Models of Multitasking) 201.89 415 T
1 10 Q
(Many operating systems provide the ability to carry out multiple tasks at) 189 389.33 T
(the same time. While each operating system has its own unique way of) 189 376.33 T
(managing this, there are two fundamental types of multitasking:) 189 363.33 T
-0.03 (cooperative \050used by Microsoft W) 189 350.33 P
-0.03 (indows\051, and preemptive \050used by) 341.08 350.33 P
1 9 Q
-0.03 (GEOS) 498.72 350.33 P
1 10 Q
-0.03 (\051.) 524.89 350.33 P
0 14 Q
(B.2.1) 137.54 308 T
0 18 Q
(Cooperative Multitasking) 189 308 T
1 10 Q
-0.01 (A cooperative multitasking system, as the name suggests, is one in which) 189 284.33 P
(the various programs cooperate. They agree to share the system and its) 189 271.33 T
(resources. Each program running under a system has complete control) 189 258.33 T
(while it is actually running. Every so often, when it reaches a convenient) 189 245.33 T
(place, it calls a special system routine \050called a context-switch routine\051 to) 189 232.33 T
(see if any other program has work do to. If so, that program takes control) 189 219.33 T
(of the system until it in turn reaches a convenient stopping point and) 189 206.33 T
(passes control on to the next waiting program. If several programs are) 189 193.33 T
(ready to run, they wait in a queue so that each one gets a chance to run) 189 180.33 T
(before the \336rst program runs again. \050It is also possible to implement a) 189 167.33 T
(cooperative multitasking system where some programs have a higher) 189 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "914" 2
%%Page: "915" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Two Models of Multitasking) 375.2 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(915) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.2) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(priority than others. In this case, a more complicated algorithm might be) 189 641.33 T
-0.59 (used by the context-switch routine to determine which program gets to run) 189 628.33 P
(next.\051) 189 615.33 T
(Smooth operation of a cooperative multitasking system requires that all) 189 595.33 T
(programs be written to call the context-switch routine frequently) 189 582.33 T
(. When) 487.9 582.33 T
(large calculations are being performed, programmers tend to \336nd this) 189 569.33 T
-0.19 (requirement inconvenient. W) 189 556.33 P
-0.19 (riting well-behaved programs \050i.e., programs) 323.24 556.33 P
(that do not keep control of the processor for too long at a stretch\051 is) 189 543.33 T
-0.24 (especially dif\336cult because most cooperative multitasking systems impose) 189 530.33 P
(restrictions on when a context switch can take place.) 189 517.33 T
0 14 Q
(B.2.2) 137.54 475 T
0 18 Q
(Preemptive Multitasking) 189 475 T
1 10 Q
(In a preemptive multitasking system, programs do not have to relinquish) 189 451.33 T
(control of the system voluntarily) 189 438.33 T
(. Instead of calling a context-switch) 338.08 438.33 T
-0.67 (routine, the program is written as though it were going to run continuously) 189 425.33 P
-0.55 (from start to \336nish. The hardware generates a timer interrupt a number of) 189 412.33 P
-0 (times each second, and that interrupt triggers the kernel\325) 189 399.33 P
-0 (s context-switch) 453.79 399.33 P
(mechanism.) 189 386.33 T
-0.28 (The context switch can also be triggered by other interrupts. For example,) 189 366.33 P
-0.7 (if the user moves the mouse in) 189 353.33 P
1 9 Q
-0.63 (GEOS) 328.02 353.33 P
1 10 Q
-0.7 (, the mouse will generate an interrupt.) 354.19 353.33 P
1 9 Q
-0.66 (GEOS) 189 340.33 P
1 10 Q
-0.74 ( responds by marking the input thread runnable; the thread will then) 215.17 340.33 P
(run after the interrupt is complete. This is how) 189 327.33 T
1 9 Q
(GEOS) 409.57 327.33 T
1 10 Q
( achieves its) 435.74 327.33 T
(extraordinary response times to user input.) 189 314.33 T
-0.06 (W) 189 294.33 P
-0.06 (ith preemptive multitasking, each program can have the illusion that it) 198.44 294.33 P
(is running continuously and has complete control of the system. It also) 189 281.33 T
(enables the system to interact quickly with the user even when) 189 268.33 T
(applications are busily computing new results.) 189 255.33 T
(For example, a spreadsheet program can keep running until the timer) 189 235.33 T
(interrupt causes a context switch. Other programs, including the one) 189 222.33 T
-0.29 (responsible for drawing menus, then get their turns to run. If a user clicks) 189 209.33 P
(on a pull-down menu, the menu will appear) 189 196.33 T
(. When the spreadsheet) 389.77 196.33 T
(program regains control of the system, it can carry on from where it was) 189 183.33 T
(interrupted, blissfully unaware that any of this has taken place.) 189 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "915" 3
%%Page: "916" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(916) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(While preemptive multitasking makes most things simpler for the user) 189 641.33 T
-0.06 (and application programmer) 189 628.33 P
-0.06 (, there are a few important issues to consider) 320.38 628.33 P
(in writing programs for a preemptive multitasking system such as) 189 615.33 T
1 9 Q
(GEOS) 498.29 615.33 T
1 10 Q
(.) 524.46 615.33 T
(When the context switches are controlled by a timer interrupt, they can) 189 602.33 T
-0.2 (occur between any two instructions. If a program is interrupted while it is) 189 589.33 P
(updating a data structure, that data structure may be left in an) 189 576.33 T
-0.36 (inconsistent state while another thread is running. If the data structure is) 189 563.33 P
(not accessed by any other process running on the system, there is no) 189 550.33 T
(problem: the update will be completed when the program resumes.) 189 537.33 T
(However) 189 524.33 T
(, some data structures \050including system resources\051 may be) 229.18 524.33 T
-0.69 (accessed by more than one program. It is important that two updates to the) 189 511.33 P
(same data do not happen at the same time.) 189 498.33 T
(This problem is analogous to one often experienced by network users. If a) 189 478.33 T
(text \336le is being edited at the same time by two different users and they) 189 465.33 T
-0.61 (both save their changes to the \336le, whoever saves \336rst will have his version) 189 452.33 P
-0.8 (overwritten by the other) 189 439.33 P
-0.8 (. Many systems have a means of locking a \336le while) 298.64 439.33 P
(you are editing it; no one else can begin editing the \336le while you have it) 189 426.33 T
(locked. A preemptive multitasking system must have a similar locking) 189 413.33 T
-0.59 (scheme to prevent two accesses to the same data structure from happening) 189 400.33 P
(at the same time. The locking mechanism should be as transparent as) 189 387.33 T
(possible to the programmer) 189 374.33 T
(. For example, the locking and unlocking of) 315.12 374.33 T
(system resources should happen automatically so that application) 189 361.33 T
(programmers need not concern themselves with it.) 189 348.33 T
-0.17 (This is exactly how) 189 328.33 P
1 9 Q
-0.15 (GEOS) 279.45 328.33 P
1 10 Q
-0.17 ( coordinates its resources, as you shall see in the) 305.63 328.33 P
(following sections.) 189 315.33 T
0 14 Q
(B.3) 149.22 263 T
0 24 Q
(GEOS Multitasking) 189 263 T
1 9 Q
(GEOS) 189 237.33 T
1 10 Q
( implements a preemptive multitasking scheme. Application) 215.17 237.33 T
(programs are required to follow certain \322good citizen\323 rules and are) 189 224.33 T
(otherwise given the illusion that they are alone on the system. The) 189 211.33 T
(applications themselves are, for the most part, isolated from the) 189 198.33 T
(multitasking environment.) 189 185.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "916" 4
%%Page: "917" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Multitasking) 431.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(917) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.3) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(B.3.1) 137.54 636 T
0 18 Q
(GEOS Threads) 189 636 T
1 10 Q
(The various units that take turns running in the system are called) 189 612.33 T
-0.54 (\322threads\323 in) 189 599.33 P
1 9 Q
-0.48 (GEOS) 245.9 599.33 P
1 10 Q
-0.54 (. Threads can have different priorities; a thread that has) 272.07 599.33 P
(a higher priority \050indicated by a lower priority number\051 will generally get) 189 586.33 T
(more processor time.) 189 573.33 T
0 14 Q
(B.3.1.1) 125.86 539.67 T
(Keeping T) 189 539.67 T
(rack of Threads) 255.91 539.67 T
1 10 Q
-0.67 (In order to switch among threads, the system needs to keep track of certain) 189 517.33 P
-0.26 (things about each one. For each thread, the system keeps track of priority) 189 504.33 P
-0.26 (,) 525.7 504.33 P
-0.52 (the most recent values of the registers, and \337ags. The priorities are used to) 189 491.33 P
(determine which thread is going to run next. When the thread is run, the) 189 478.33 T
(appropriate registers are reset to the values they had the last time the) 189 465.33 T
-0.33 (thread was stopped. This allows the thread to resume execution as though) 189 452.33 P
(it had never been interrupted.) 189 439.33 T
(Like other things in) 189 419.33 T
1 9 Q
( GEOS) 281.05 419.33 T
1 10 Q
(, each thread has a handle, a sixteen-bit value) 309.72 419.33 T
(which programs use to refer to the thread. When calling thread-related) 189 406.33 T
(routines \050e.g., to set the thread\325) 189 393.33 T
(s priority\051, programs use the handle to) 333.09 393.33 T
(specify the thread.) 189 380.33 T
0 14 Q
(B.3.1.2) 125.86 346.67 T
(Event-Driven and Procedural Threads) 189 346.67 T
1 9 Q
(GEOS) 189 324.33 T
1 10 Q
( uses two different types of threads. The two types differ only in the) 215.17 324.33 T
-0.13 (way they run when their turn comes and in the way they are created. The) 189 311.33 P
(discussions about priority) 189 298.33 T
(, context switches, and synchronization) 306.97 298.33 T
(elsewhere in this chapter apply equally to both types.) 189 285.33 T
-0.38 (The \336rst type of) 189 265.33 P
1 9 Q
-0.34 (GEOS) 263.78 265.33 P
1 10 Q
-0.38 ( thread is an \322event-driven\323 thread. An event-driven) 289.95 265.33 P
(thread normally executes code for one or more objects. Each event-driven) 189 252.33 T
-0.61 (thread has an event queue; when a message is sent to any object created by) 189 239.33 P
(the thread, the message is placed in the thread\325) 189 226.33 T
(s event queue. The thread) 407.92 226.33 T
(processes each event in the order received by executing the appropriate) 189 213.33 T
(message handler from the object\325) 189 200.33 T
(s class de\336nition.) 340.49 200.33 T
(Messages can also be sent to the thread itself rather than to an object) 189 180.33 T
(created by the thread. When the thread is created, it is assigned a) 189 167.33 T
-0.17 (class\321normally a subclass of) 189 154.33 P
4 F
-0.17 (ProcessClass) 326.12 154.33 P
1 F
-0.17 ( \050for non-application threads\051) 393.72 154.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "917" 5
%%Page: "918" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(918) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.79 (or) 189 641.33 P
4 F
-0.82 (GenProcessClass) 200.43 641.33 P
1 F
-0.79 ( \050for application threads\051\321to determine the handlers) 288.95 641.33 P
(to use when messages are sent directly to the thread. In this sense, the) 189 628.33 T
(thread can be considered an instance of the given class.) 189 615.33 T
-0.34 (The second type of thread is procedural. Rather than running handlers for) 189 595.33 P
-0.58 (messages in an object-oriented scheme, it simply executes procedural code.) 189 582.33 P
(The system does not provide an event queue for a procedural thread, and) 189 569.33 T
(messages cannot be sent to such a thread.) 189 556.33 T
0 14 Q
(B.3.2) 137.54 514 T
0 18 Q
(Context Switches) 189 514 T
1 10 Q
-0.83 (Context switches are triggered in two ways under) 189 490.33 P
1 9 Q
-0.75 (GEOS) 414.78 490.33 P
1 10 Q
-0.83 (. The \336rst is a timer) 440.96 490.33 P
-0.39 (or other hardware interrupt. The second occurs when the thread reaches a) 189 477.33 P
(point where it cannot continue right away) 189 464.33 T
(, such as when the thread exits) 381.98 464.33 T
(or when it attempts to access a locked resource.) 189 451.33 T
(The) 189 431.33 T
1 9 Q
(PC) 209.56 431.33 T
1 10 Q
( hardware generates a timer interrupt sixty times per second. The) 222.06 431.33 T
-0.84 (time between timer interrupts is called a) 189 418.33 P
3 F
-0.84 (tick) 375.01 418.33 P
1 F
-0.84 (. Each thread is allowed to run) 391.86 418.33 P
(for a speci\336ed number of ticks before the timer interrupt routine will) 189 405.33 T
-0.07 (transfer control to a different thread. This number of ticks is the same for) 189 392.33 P
(all threads; it is called a) 189 379.33 T
3 F
(time slice) 303.11 379.33 T
1 F
(.) 346.05 379.33 T
-0.21 (When a thread begins its turn,) 189 359.33 P
1 9 Q
-0.19 (GEOS) 332.59 359.33 P
1 10 Q
-0.21 ( sets a counter to the number of ticks) 358.77 359.33 P
(in a time slice. At each timer interrupt,) 189 346.33 T
1 9 Q
(GEOS) 373.28 346.33 T
1 10 Q
( decrements the counter) 399.45 346.33 T
(. If) 510.18 346.33 T
(the counter has not reached zero, control is immediately returned to the) 189 333.33 T
-0.73 (running thread. When the counter reaches zero,) 189 320.33 P
1 9 Q
-0.66 (GEOS) 408.48 320.33 P
1 10 Q
-0.73 ( checks to see if some) 434.65 320.33 P
(other thread has reached a higher priority than the current thread. If so,) 189 307.33 T
-0.43 (the current thread is placed in the system\325) 189 294.33 P
-0.43 (s list of runnable threads \050called) 381.35 294.33 P
-0.31 (the) 189 281.33 P
3 F
-0.31 (run queue) 206.47 281.33 P
1 F
-0.31 (\051, and the highest priority thread begins running. Otherwise) 252.26 281.33 P
(the current thread gets to run for another time slice.) 189 268.33 T
(Sometimes a thread will try to access a system resource \050or shared data) 189 248.33 T
-0.75 (object\051 which is currently in use by another thread. When this happens, the) 189 235.33 P
(thread must wait until the desired resource is available. The thread is) 189 222.33 T
-0.34 (placed on a queue, and a new thread is selected from the run queue. Every) 189 209.33 P
-0.11 (thread that is not currently running is either in the run queue \050waiting to) 189 196.33 P
(be executed\051 or in another queue waiting for a needed resource to become) 189 183.33 T
-0.67 (available. When the resource becomes available, the thread is moved to the) 189 170.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "918" 6
%%Page: "919" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Multitasking) 431.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(919) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.3) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.6 (run queue and is ready to be run again. This process is described in greater) 189 641.33 P
(detail in section) 189 628.33 T
2 F
(l) 265.31 628.33 T
1 F
(B.5 on page B\320926.) 276 628.33 T
0 14 Q
(B.3.3) 137.54 586 T
0 18 Q
(Thread Scheduling) 189 586 T
1 10 Q
-0.65 (When there is a context switch,) 189 562.33 P
1 9 Q
-0.59 (GEOS) 333.06 562.33 P
1 10 Q
-0.65 ( must determine which thread will be) 359.24 562.33 P
(executed next. It does this by examining the run queue and selecting the) 189 549.33 T
(most important thread to run. A thread\325) 189 536.33 T
(s importance is re\337ected in its) 373.46 536.33 T
(priority: the lower the priority number) 189 523.33 T
(, the more important the thread.) 366.78 523.33 T
0 14 Q
(B.3.3.1) 125.86 489.67 T
(Base Priority) 189 489.67 T
1 10 Q
(Each thread gets a base priority) 189 467.33 T
(, a value from zero to 255. Applications) 336.24 467.33 T
-0.44 (generally have a priority between 128 and 191. Threads that are critical to) 189 454.33 P
(quick system response \050such as user input threads that manage such) 189 441.33 T
(things as pull-down menus and dialog boxes\051 are given lower numbers.) 189 428.33 T
(Higher numbers can be given to less time-critical threads such as those) 189 415.33 T
(used for print spooling and other background activities. T) 189 402.33 T
(o provide faster) 453.84 402.33 T
(response to the user) 189 389.33 T
(,) 281.22 389.33 T
1 9 Q
(GEOS) 286.78 389.33 T
1 10 Q
( temporarily reduces an application\325) 312.95 389.33 T
(s base) 478.89 389.33 T
-0.52 (priority by 32 \050giving it a higher priority\051 when the user is interacting with) 189 376.33 P
(it. When the user switches to interact with another application, the \336rst) 189 363.33 T
(application\325) 189 350.33 T
(s base priority returns to normal, and the new one gets a) 242.16 350.33 T
(reduced base priority number) 189 337.33 T
(.) 325.11 337.33 T
0 14 Q
(B.3.3.2) 125.86 303.67 T
(Recent CPU Usage) 189 303.67 T
1 9 Q
-0.64 (GEOS) 189 281.33 P
1 10 Q
-0.71 ( keeps track of a thread\325) 215.17 281.33 P
-0.71 (s recent) 322.37 281.33 P
1 9 Q
-0.64 ( CPU) 357.95 281.33 P
1 10 Q
-0.71 ( usage with a number that varies) 379.65 281.33 P
-0.53 (from zero to 60. Starting at zero, the number is incremented at every timer) 189 268.33 P
(interrupt while the thread is running. Once each second, the recent) 189 255.33 T
1 9 Q
(CPU) 503.26 255.33 T
1 10 Q
(usage is halved, so that as a thread\325) 189 242.33 T
(s) 353.86 242.33 T
1 9 Q
(CPU) 361.27 242.33 T
1 10 Q
( usage recedes into the past, its) 381.11 242.33 T
-0.83 (recent) 189 229.33 P
1 9 Q
-0.75 (CPU) 219.83 229.33 P
1 10 Q
-0.83 ( usage number will diminish. The resulting number re\337ects how) 239.66 229.33 P
(much time the thread has had control of the) 189 216.33 T
1 9 Q
(CPU) 395.31 216.33 T
1 10 Q
( and how long ago this) 415.15 216.33 T
(time was.) 189 203.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "919" 7
%%Page: "920" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(920) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(B.3.3.3) 125.86 638.67 T
(Current Priority) 189 638.67 T
1 10 Q
(Once each second, the current priority of each thread is recomputed by) 189 616.33 T
-0.18 (adding the base priority to the recent) 189 603.33 P
1 9 Q
-0.16 (CPU) 362.58 603.33 P
1 10 Q
-0.18 ( usage. The resulting number is) 382.42 603.33 P
(the one used in selecting a thread from the run queue.) 189 590.33 T
(When it is time for a context switch,) 189 570.33 T
1 9 Q
(GEOS) 358.83 570.33 T
1 10 Q
( selects the thread with the) 385 570.33 T
(lowest current priority number from the run queue. If there is a tie, the) 189 557.33 T
-0.5 (selection is arbitrary) 189 544.33 P
-0.5 (. However) 283.02 544.33 P
-0.5 (, because recent) 328.26 544.33 P
1 9 Q
-0.45 (CPU) 403.07 544.33 P
1 10 Q
-0.5 ( usage counts against a) 422.9 544.33 P
(thread, two threads of equal priority will not stay that way) 189 531.33 T
(. One will run,) 459.98 531.33 T
(and its recent) 189 518.33 T
1 9 Q
(CPU) 255.3 518.33 T
1 10 Q
( usage \050and thus its current priority number\051 will be) 275.14 518.33 T
(increased. The other thread will therefore get its chance to run.) 189 505.33 T
0 14 Q
(B.3.4) 137.54 463 T
0 18 Q
(Applications and Threads) 189 463 T
1 10 Q
-0.44 (There are two standard architectures for) 189 439.33 P
1 9 Q
-0.4 (GEOS) 377.44 439.33 P
1 10 Q
-0.44 ( applications: single-thread) 403.61 439.33 P
(and dual-thread. While the single-thread option is somewhat easier to) 189 426.33 T
(program, there are distinct advantages to the dual-thread method.) 189 413.33 T
-0.58 (In the dual-thread architecture, one thread manages the application\325) 189 393.33 P
-0.58 (s user) 501.79 393.33 P
(interface while the other manages the rest of the application\325) 189 380.33 T
(s) 470.14 380.33 T
(functionality) 189 367.33 T
(. Since both threads are event-driven, each has an event) 247.15 367.33 T
(queue. Messages that are sent to user interface objects \050resulting from) 189 354.33 T
(mouse clicks, keyboard input, etc.\051 can be handled without waiting for) 189 341.33 T
-0.13 (other tasks in the application to be completed. This allows the application) 189 328.33 P
-0.63 (to respond to user input \050by putting up menus, moving windows, and so on\051) 189 315.33 P
(without \336rst completing the current non-user) 189 302.33 T
(-interface task \050which may) 398.62 302.33 T
(involve a lot of computation\051.) 189 289.33 T
(The dual-thread architecture, however) 189 269.33 T
(, poses a problem of) 366.96 269.33 T
-0.75 (synchronization: One thread can get ahead of the other) 189 256.33 P
-0.75 (. Threads that count) 436.93 256.33 P
(on each other must keep track of each other) 189 243.33 T
(\325) 391.78 243.33 T
(s progress in order to avoid) 393.45 243.33 T
(this; when potential problems are identi\336ed, use semaphores to keep the) 189 230.33 T
(threads in line \050see section) 189 217.33 T
2 F
(l) 315.12 217.33 T
1 F
(B.5 on page B\320926\051.) 325.81 217.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "920" 8
%%Page: "921" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Multiple Threads) 403.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(921) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(B.4) 149.22 632 T
0 24 Q
(Using Multiple Threads) 189 632 T
1 10 Q
-0.32 (It is possible for an application to create additional threads for a variety of) 189 606.33 P
-0.73 (purposes. For example, a terminal emulation program might have a thread) 189 593.33 P
(whose sole purpose is to monitor the serial line for incoming characters.) 189 580.33 T
-0.1 (This might avert the danger of a serial input buffer or stream over\337owing) 189 567.33 P
-0.59 (while the application is performing an involved task, such as loading a text) 189 554.33 P
-0.83 (\336le from disk, while not requiring a great deal of \336xed memory for the serial) 189 541.33 P
(driver) 189 528.33 T
(\325) 217.69 528.33 T
(s input buffer) 219.36 528.33 T
(.) 281.58 528.33 T
0 14 Q
(B.4.1) 137.54 486 T
0 18 Q
(How GEOS Threads Are Created) 189 486 T
1 9 Q
(GEOS) 189 462.33 T
1 10 Q
( threads can be created in three different ways. The \336rst thread \050or) 215.17 462.33 T
(pair of threads, in the dual-thread architecture\051 for each application is) 189 449.33 T
(created automatically when the application is launched. By calling the) 189 436.33 T
(appropriate routines, the application can create additional threads to) 189 423.33 T
(handle messages sent to certain objects or to run procedural code.) 189 410.33 T
0 14 Q
(B.4.1.1) 125.86 376.67 T
(The Application\325) 189 376.67 T
(s Primary Thread) 297.39 376.67 T
1 10 Q
(The application\325) 189 354.33 T
(s primary thread is created automatically by) 262.72 354.33 T
1 9 Q
(GEOS) 471.64 354.33 T
1 10 Q
( when) 497.81 354.33 T
-0.27 (the application is launched. \050See "Applications and Geodes," Chapter) 189 341.33 P
-0.27 (6 for) 507.64 341.33 P
(information on launching applications.\051 For example, if a user) 189 328.33 T
(double-clicks on your application\325) 189 315.33 T
(s icon in a GeoManager window) 342.16 315.33 T
(,) 488.11 315.33 T
-0.85 (GeoManager calls the library routine) 189 302.33 P
4 F
-0.88 (UserLoadApplication\050\051) 359.19 302.33 P
1 F
-0.85 (, specifying) 478.08 302.33 P
(the geode \336le and certain other parameters. This calls the) 189 289.33 T
4 F
( GeodeLoad\050\051) 456.25 289.33 T
1 F
(routine in the) 189 276.33 T
1 9 Q
(GEOS) 255.3 276.33 T
1 10 Q
( kernel.) 281.47 276.33 T
(If the program is written using the single-thread model,) 189 256.33 T
1 9 Q
(GEOS) 450.31 256.33 T
1 10 Q
( creates an) 476.48 256.33 T
-0.31 (event-driven thread to handle messages sent to any object in the program.) 189 243.33 P
(If the program is written using the dual-thread model,) 189 230.33 T
1 9 Q
(GEOS) 443.46 230.33 T
1 10 Q
(creates one) 472.13 230.33 T
(event-driven thread to handle messages sent to the program\325) 189 217.33 T
(s user) 469.39 217.33 T
(interface objects and another to handle messages sent to other objects in) 189 204.33 T
(the program.) 189 191.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "921" 9
%%Page: "922" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(922) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(If the program requires more than two threads, the extra thread\050s\051 must) 189 641.33 T
-0.82 (be allocated manually on startup and destroyed before the application exits) 189 628.33 P
(completely) 189 615.33 T
(.) 237.52 615.33 T
0 14 Q
(B.4.1.2) 125.86 581.67 T
(Event-Driven Threads) 189 581.67 T
5 10 Q
(ThreadAttachToQueue\050\051) 189 559.33 T
1 F
(T) 189 539.33 T
(o create an event-driven thread \050one that handles messages sent to) 194.75 539.33 T
(certain objects\051, send a) 189 526.33 T
1 9 Q
( MSG_PROCESS_CREA) 294.56 526.33 T
(TE_EVENT_THREAD) 396.57 526.33 T
1 10 Q
( to your) 490.89 526.33 T
-0.44 (application\325) 189 513.33 P
-0.44 (s primary thread, passing as arguments the object class for the) 242.16 513.33 P
(new thread \050a sublass of) 189 500.33 T
4 F
( ProcessClass) 301.24 500.33 T
1 F
(\051 and the stack size for the new) 371.71 500.33 T
(thread \0501) 189 487.33 T
1 9 Q
(K) 234.19 487.33 T
1 10 Q
( bytes is usually a good value, or around 3) 241.19 487.33 T
1 9 Q
(K) 437.9 487.33 T
1 10 Q
( bytes for threads) 444.9 487.33 T
(that will handle keyboard navigation or manage a text object\051. This) 189 474.33 T
-0.56 (message is detailed in \322System Classes,\323 Chapter) 189 461.33 P
-0.56 (1 of the Object Reference) 415.85 461.33 P
(Book.) 189 448.33 T
1 9 Q
(GEOS) 189 428.33 T
1 10 Q
( will create the new thread, give it an event queue, and send it a) 215.17 428.33 T
1 9 Q
(MSG_MET) 189 415.33 T
(A_A) 235.17 415.33 T
(TT) 252.17 415.33 T
(ACH) 263.68 415.33 T
1 10 Q
(. Initially) 284.17 415.33 T
(, the thread will handle only messages sent) 326.23 415.33 T
(to the thread itself. If the thread creates any new objects, however) 189 402.33 T
(, it will) 494.39 402.33 T
-0.73 (handle messages sent to those objects as well. T) 189 389.33 P
-0.73 (o control the behavior of the) 403.18 389.33 P
(new thread, de\336ne a subclass of) 189 376.33 T
4 F
(ProcessClass) 338.65 376.33 T
1 F
( and a new handler for) 406.25 376.33 T
1 9 Q
(MSG_MET) 189 363.33 T
(A_A) 235.17 363.33 T
(TT) 252.17 363.33 T
(ACH) 263.68 363.33 T
1 10 Q
(. The new handler can create objects or perform) 284.17 363.33 T
(whatever task is needed.) 189 350.33 T
(Be sure to start your new handler with) 306.52 350.33 T
4 F
(@callsuper\050\051) 189 337.33 T
1 F
( so that the prede\336ned initializations are done as well.) 252.41 337.33 T
-0.55 (If you have a thread that you want attached to a different event queue, you) 189 317.33 P
-0.47 (can use) 189 304.33 P
4 F
-0.48 (ThreadAttachT) 225.47 304.33 P
-0.48 (oQueue\050\051) 304.18 304.33 P
1 F
-0.47 (. This routine is not widely used except) 351.58 304.33 P
-0.85 (when applications are shutting down and objects need to continue handling) 189 291.33 P
-0.3 (messages while not returning anything. It\325) 189 278.33 P
-0.3 (s unlikely you will ever use this) 384 278.33 P
(routine.) 189 265.33 T
0 14 Q
(B.4.1.3) 125.86 231.67 T
(Threads That Run Procedural Code) 189 231.67 T
5 10 Q
(ThreadCreate\050\051) 189 209.33 T
1 F
-0.6 (T) 189 189.33 P
-0.6 (o create a thread to run procedural code, \336rst load the initial function into) 194.75 189.33 P
-0.19 (\336xed memory) 189 176.33 P
-0.19 (. Then call the system routine) 250.29 176.33 P
4 F
-0.2 (ThreadCreate\050\051) 389.89 176.33 P
1 F
-0.19 (, passing the) 470.27 176.33 P
(following arguments: The base priority for the new thread, an optional) 189 163.33 T
-0.82 (sixteen-bit argument to pass to the new thread, the entry point for the code,) 189 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "922" 10
%%Page: "923" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Multiple Threads) 403.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(923) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.78 (the amount of stack space) 189 641.33 P
1 9 Q
-0.7 (GEOS) 307.72 641.33 P
1 10 Q
-0.78 ( should allocate for the new thread, and the) 333.89 641.33 P
(owner of the new thread.) 189 628.33 T
0 14 Q
(B.4.2) 137.54 586 T
0 18 Q
(Managing Priority V) 189 586 T
(alues) 357.05 586 T
5 10 Q
(ThreadGetInfo\050\051, ThreadModify\050\051, ThreadGetInfoType) 189 562.33 T
1 F
(Y) 189 542.33 T
(ou can ascertain and modify the priority of any thread in the system,) 194.93 542.33 T
(given the thread\325) 189 529.33 T
(s handle. The handle is provided by the routines that) 266.97 529.33 T
(create threads, and it can be provided by one thread to another in a) 189 516.33 T
(message. The following system routines relate to the priority of a thread:) 189 503.33 T
4 F
(ThreadGetInfo\050\051) 189 483.33 T
1 F
(returns information about a thread. When calling) 277.05 483.33 T
4 F
(ThreadGetInfo\050\051) 189 470.33 T
1 F
(, pass the handle of the thread in question and a value) 274.18 470.33 T
(of the type) 189 457.33 T
4 F
(ThreadGetInfoT) 240.67 457.33 T
(ype) 324.77 457.33 T
1 F
( \050see below\051. If zero is passed as the) 343.29 457.33 T
-0.61 (thread handle,) 189 444.33 P
4 F
-0.63 (ThreadGetInfo\050\051) 258.54 444.33 P
1 F
-0.61 ( returns information on whatever thread) 343.71 444.33 P
(executed the call.) 189 431.33 T
4 F
(ThreadGetInfoT) 189 411.33 T
(ype) 273.1 411.33 T
1 F
( is an enumerated type with three possible values:) 291.62 411.33 T
1 9 Q
(TGIT_PRIORITY_AND_USAGE) 189 391.33 T
1 10 Q
(This requests the base priority and recent) 252 379.33 T
1 9 Q
(CPU) 448.5 379.33 T
1 10 Q
( usage of a) 468.34 379.33 T
(thread. \050T) 252 367.33 T
(o determine the current priority) 297.38 367.33 T
(, simply add the) 444.22 367.33 T
(base priority to the recent) 252 355.33 T
1 9 Q
(CPU) 374.6 355.33 T
1 10 Q
( usage.\051) 394.44 355.33 T
1 9 Q
(TGIT_THREAD_HANDLE) 189 336.33 T
1 10 Q
(This requests the handle of the thread. Use this \050with a) 252 324.33 T
(thread handle of zero\051 to get the caller) 252 312.33 T
(\325) 429.22 312.33 T
(s own thread handle.) 430.89 312.33 T
1 9 Q
(TGIT_QUEUE_HANDLE) 189 293.33 T
1 10 Q
(This requests the handle of the event queue for an) 252 281.33 T
-0.24 (event-driven thread. It returns a zero handle if the thread is) 252 269.33 P
(not event-driven.) 252 257.33 T
4 F
-0.23 (T) 189 238.33 P
-0.23 (hreadModify\050\051) 196.22 238.33 P
1 F
-0.22 ( changes the priority of a thread. The arguments to pass) 270.85 238.33 P
(include the handle of the thread to modify \050zero for the thread executing) 189 225.33 T
(the call\051, a new base priority for the thread, and two \337ags: One that) 189 212.33 T
(indicates whether to change the thread\325) 189 199.33 T
(s base priority and one that) 371.79 199.33 T
-0.47 (indicates whether to reset the thread\325) 189 186.33 P
-0.47 (s recent) 359.82 186.33 P
1 9 Q
-0.42 (CPU) 397.95 186.33 P
1 10 Q
-0.47 ( usage to zero. If the \337ag) 417.79 186.33 P
(to change the thread\325) 189 173.33 T
(s base priority is not set, the new base priority) 286.23 173.33 T
(argument is ignored. In general, you should only lower a thread\325) 189 160.33 T
(s priority) 485.32 160.33 T
(\050i.e., raise its base priority number\051. Applications that raise their own) 189 147.33 T
72 146.17 162 245 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 146.17 162 245 R
7 X
0 0 0 1 0 0 0 K
V
72.83 135.33 162 189.33 R
V
1 9 Q
0 X
(It is rarely a good) 72.83 183.33 T
(idea to lower a) 72.83 172.33 T
-0.67 (thread\325) 72.83 161.33 P
-0.67 (s base priority) 102 161.33 P
(number) 72.83 150.33 T
(.) 104.67 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 92.92 217.87 G
4 H
0 Z
90 450 13.5 13.5 92.92 217.87 A
0 0 0 1 0 0 0 K
72.67 197.75 113.17 238.25 R
1 H
0 X
N
0 0 0 1 0 0 0 K
72 245 162 245 2 L
2 Z
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 86.92 205.81 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "923" 11
%%Page: "924" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(924) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(priority damage the performance of the system as a whole. Keep in mind) 189 641.33 T
(that) 189 628.33 T
1 9 Q
(GEOS) 211.23 628.33 T
1 10 Q
( already favors the thread with which the user is interacting.) 237.4 628.33 T
(There are several pre-de\336ned priority levels you can use to set a thread\325) 189 608.33 T
(s) 520.13 608.33 T
-0.32 (priority) 189 595.33 P
-0.32 (. Y) 223.07 595.33 P
-0.32 (ou may wish to use these when debugging to raise the priority of) 234.24 595.33 P
(a potentially buggy thread for ef\336cient debugging. These are listed below) 189 582.33 T
(,) 524.79 582.33 T
(each a different constant.) 189 569.33 T
2 F
(u) 189 549.33 T
1 9 Q
(PRIORITY_TIME_CRITICAL) 207 549.33 T
1 10 Q
(Threads should not be set time-critical unless they must own the) 207 537.33 T
(processor exclusively for a certain amount of time. Excluding other) 207 525.33 T
(threads can have undesirable side effects.) 207 513.33 T
2 F
(u) 189 494.33 T
1 F
(PRIORITY_HIGH) 207 494.33 T
2 F
(u) 189 475.33 T
1 F
(PRIORITY_UI) 207 475.33 T
2 F
(u) 189 456.33 T
1 F
(PRIORITY_FOCUS) 207 456.33 T
2 F
(u) 189 437.33 T
1 F
(PRIORITY_ST) 207 437.33 T
(ANDARD) 275.16 437.33 T
2 F
(u) 189 418.33 T
1 F
(PRIORITY_LOW) 207 418.33 T
2 F
(u) 189 399.33 T
1 F
(PRIORITY_LOWEST) 207 399.33 T
0 14 Q
(B.4.3) 137.54 358 T
0 18 Q
(Handling Errors in a Thread) 189 358 T
5 10 Q
(ThreadHandleException\050\051, ThreadException) 189 334.33 T
1 F
(Some threads in) 189 314.33 T
1 9 Q
(GEOS) 267.16 314.33 T
1 10 Q
( will want to handle certain errors in special ways.) 293.33 314.33 T
(The errors a particular thread can intercept and handle are listed in an) 189 301.33 T
(enumerated type called) 189 288.33 T
4 F
(ThreadException) 300.12 288.33 T
1 F
(, the elements of which are) 390.49 288.33 T
(shown below:) 189 275.33 T
2 F
(u) 189 255.33 T
1 F
(TE_DIVIDE_BY_ZERO) 207 255.33 T
2 F
(u) 189 236.33 T
1 F
(TE_OVERFLOW) 207 236.33 T
2 F
(u) 189 217.33 T
1 F
(TE_BOUND) 207 217.33 T
2 F
(u) 189 198.33 T
1 F
(TE_FPU_EXCEPTION) 207 198.33 T
2 F
(u) 189 179.33 T
1 F
(TE_SINGLE_STEP) 207 179.33 T
2 F
(u) 189 160.33 T
1 F
(TE_BREAKPOINT) 207 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "924" 12
%%Page: "925" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Multiple Threads) 403.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(925) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.4) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.29 (A thread can handle a particular exception by setting up a special handler) 189 641.33 P
(routine and calling) 189 628.33 T
4 F
(ThreadHandleException\050\051) 279.38 628.33 T
1 F
( when one of these) 415.12 628.33 T
-0.41 (exceptions occurs. This is useful if a number of objects are run by the same) 189 615.33 P
(thread and all should handle a particular exception in the same way; the) 189 602.33 T
(routine can be thread-speci\336c rather than object-speci\336c.) 189 589.33 T
4 F
(ThreadHandleException\050\051) 189 576.33 T
1 F
( must be passed the thread\325) 324.74 576.33 T
(s handle, the) 451.43 576.33 T
(exception type, and a pointer to the handler routine\325) 189 563.33 T
(s entry point.) 429.39 563.33 T
0 14 Q
(B.4.4) 137.54 521 T
0 18 Q
(When a Thread Is Finished) 189 521 T
5 10 Q
(ThreadDestroy\050\051) 189 497.33 T
1 F
(Whenever an application creates an additional thread with) 189 477.33 T
1 9 Q
-0.34 (MSG_PROCESS_CREA) 189 464.33 P
-0.34 (TE_EVENT_THREAD) 288.5 464.33 P
1 10 Q
-0.37 ( or) 382.83 464.33 P
4 F
-0.38 (ThreadCreate\050\051) 397.09 464.33 P
1 F
-0.37 (, it must be) 477.47 464.33 P
(sure that the thread exits when it is \336nished. Simply exiting the) 189 451.33 T
(application may not eliminate any additional threads, and these threads) 189 438.33 T
(can cause) 189 425.33 T
1 9 Q
(GEOS) 236.41 425.33 T
1 10 Q
( to hang when shutting down the system.) 262.58 425.33 T
-0.56 (When a thread exits, it should \336rst release any semaphores or thread locks) 189 405.33 P
(it has locked and free any memory or other resources that are no longer) 189 392.33 T
(needed. Resources in memory do not have to be freed in the same thread) 189 379.33 T
(that allocated them, but you should be sure that they are freed before the) 189 366.33 T
(application exits.) 189 353.33 T
(A procedural thread exits by calling) 189 333.33 T
4 F
(ThreadDestroy\050\051) 357.16 333.33 T
1 F
( with two) 443.46 333.33 T
(arguments: an error code and an optr) 189 320.33 T
(. When the thread exits, it sends \050as) 361.04 320.33 T
(its last act\051 a) 189 307.33 T
1 9 Q
(MSG_PROCESS_NOTIFY_THREAD_EXIT) 251.8 307.33 T
1 10 Q
( to the application\325) 433.64 307.33 T
(s) 519.03 307.33 T
(primary thread and a) 189 294.33 T
1 9 Q
(MSG_MET) 291.42 294.33 T
(A_ACK) 337.59 294.33 T
1 10 Q
( to the object descriptor passed.) 368.59 294.33 T
(Each message has the error code as an argument. In designing a) 189 281.33 T
(multi-threaded application, you can create methods for) 189 268.33 T
1 9 Q
-0.34 (MSG_PROCESS_NOTIFY_THREAD_EXIT) 189 255.33 P
1 10 Q
-0.38 ( \050in your primary thread\325) 370.85 255.33 P
-0.38 (s class\051 or) 483.98 255.33 P
1 9 Q
-0.43 (MSG_MET) 189 242.33 P
-0.43 (A_ACK) 235.17 242.33 P
1 10 Q
-0.48 ( \050in any class\051 for communication among threads, and you) 266.17 242.33 P
-0.04 (may use the error code for any data you choose. The convention is that an) 189 229.33 P
(error code of zero represents successful completion of a thread\325) 189 216.33 T
(s task.) 477.12 216.33 T
-0.6 (An event-driven thread should not call) 189 196.33 P
4 F
-0.62 (ThreadDestroy\050\051) 366.69 196.33 P
1 F
-0.6 ( directly because) 452.99 196.33 P
-0.06 (its event queue must be removed from the system cleanly) 189 183.33 P
-0.06 (. Instead, send a) 452.53 183.33 P
1 9 Q
(MSG_MET) 189 170.33 T
(A_DET) 235.17 170.33 T
(ACH) 265.18 170.33 T
1 10 Q
( to the thread, passing the same arguments as for) 285.67 170.33 T
4 F
(ThreadDestroy\050\051) 189 157.33 T
1 F
(. The handler for) 275.3 157.33 T
1 9 Q
(MSG_MET) 355.86 157.33 T
(A_DET) 402.03 157.33 T
(ACH) 432.04 157.33 T
1 10 Q
( in) 452.53 157.33 T
4 F
(MetaClass) 467.35 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "925" 13
%%Page: "926" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(926) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(cleanly removes the event queue and terminates the thread, sending the) 189 641.33 T
(same messages as described above. Y) 189 628.33 T
(ou may write a special handler for) 359.78 628.33 T
1 9 Q
-0.46 (MSG_MET) 189 615.33 P
-0.46 (A_DET) 235.17 615.33 P
-0.46 (ACH) 265.18 615.33 P
1 10 Q
-0.51 ( when you subclass) 285.67 615.33 P
4 F
-0.53 ( ProcessClass) 372.65 615.33 P
1 F
-0.51 (, but be sure to end) 442.59 615.33 P
(the handler with) 189 602.33 T
4 F
( @callsuper\050\051) 266.6 602.33 T
1 F
( so the thread exits properly) 332.88 602.33 T
(.) 461.96 602.33 T
0 14 Q
(B.5) 149.22 550 T
0 24 Q
(Synchronizing Threads) 189 550 T
1 10 Q
(Because) 189 524.33 T
1 9 Q
(GEOS) 229.74 524.33 T
1 10 Q
( is a preemptive multitasking environment, it needs a way) 255.91 524.33 T
(to prevent two threads from accessing system resources \050or other shared) 189 511.33 T
(data\051 simultaneously) 189 498.33 T
(. Otherwise, data could be corrupted.) 285.5 498.33 T
1 9 Q
(GEOS) 458.85 498.33 T
1 10 Q
( uses) 485.02 498.33 T
-0.84 (semaphores to prevent to threads from performing con\337icting operations at) 189 485.33 P
(the same time.) 189 472.33 T
0 14 Q
(B.5.1) 137.54 430 T
0 18 Q
(Semaphores: The Concept) 189 430 T
1 10 Q
(A semaphore is a data structure on which three basic operations are) 189 406.33 T
(performed. These operations allow threads to avoid con\337icting with other) 189 393.33 T
-0.52 (threads. Think of a semaphore as a \337ag which programs can set to indicate) 189 380.33 P
(that some resource is locked. Anyone else who wants to use the resource) 189 367.33 T
(must wait in line until whoever set the \337ag resets it. The three basic) 189 354.33 T
(operations on a semaphore are initialize, set, and reset.) 189 341.33 T
0 14 Q
(B.5.1.1) 125.86 307.67 T
(Initialize) 189 307.67 T
1 10 Q
(The \322initialize\323 operation creates a semaphore and gives it a name. In its) 189 285.33 T
(initial state, the semaphore is \322unlocked,\323 meaning the \336rst process that) 189 272.33 T
(attempts to access it will succeed right away) 189 259.33 T
(. A semaphore must be) 393.29 259.33 T
-0.39 (initialized before it can be used, although the initialization can be handled) 189 246.33 P
(by the operating system so that it is transparent to the programmer) 189 233.33 T
(.) 502.37 233.33 T
0 14 Q
(B.5.1.2) 125.86 199.67 T
(Set \050the \322P\323 Operation\051) 189 199.67 T
1 10 Q
(The \322) 189 177.33 T
1 9 Q
(P) 213.45 177.33 T
1 10 Q
(\323 operation is what a program performs in order to make sure it is) 219.45 177.33 T
(allowed to proceed. For example, if the program is about to access shared) 189 164.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "926" 14
%%Page: "927" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Synchronizing Threads) 403.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(927) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.5) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(data, it performs the \322) 189 641.33 T
1 9 Q
(P) 291.05 641.33 T
1 10 Q
(\323 operation on the semaphore protecting that data) 297.05 641.33 T
(to make sure no other program is accessing it.) 189 628.33 T
-0.55 (If the semaphore is unlocked and a thread performs the \322) 189 608.33 P
1 9 Q
-0.5 (P) 447.38 608.33 P
1 10 Q
-0.55 (\323 operation on it,) 453.38 608.33 P
(the thread simply marks the semaphore locked and proceeds normally) 189 595.33 T
(. If) 512.73 595.33 T
-0.07 (the semaphore is locked, a thread performing the \322) 189 582.33 P
1 9 Q
-0.07 (P) 422.49 582.33 P
1 10 Q
-0.07 (\323 operation will) 428.5 582.33 P
3 F
-0.07 (block) 501.62 582.33 P
1 F
-0.07 (.) 525.51 582.33 P
-0.36 (This means the thread will stop running and will wait in the thread queue) 189 569.33 P
(associated with the semaphore. When its turn to perform the protected) 189 556.33 T
(operation arrives, the thread will proceed.) 189 543.33 T
0 14 Q
(B.5.1.3) 125.86 509.67 T
(Reset \050the \322V\323 Operation\051) 189 509.67 T
1 10 Q
(When a thread has \336nished a protected operation, it performs the \322) 189 487.33 T
1 9 Q
(V) 498.83 487.33 T
1 10 Q
(\323) 505.33 487.33 T
-0.35 (operation to unlock the semaphore. If there are other threads in the queue) 189 474.33 P
(for this semaphore, one of them is restarted and takes over) 189 461.33 T
(, keeping the) 460.69 461.33 T
(semaphore locked. Thus only one thread at a time runs the protected) 189 448.33 T
-0.62 (operation. If a thread performs the \322) 189 435.33 P
1 9 Q
-0.56 (V) 352.7 435.33 P
1 10 Q
-0.62 (\323 operation on a semaphore and there) 359.2 435.33 P
-0.04 (are no other threads waiting in the semaphore\325) 189 422.33 P
-0.04 (s queue, the thread simply) 405.43 422.33 P
(marks the semaphore unlocked and proceeds.) 189 409.33 T
(Programs must always reset a semaphore when they are done with it. If) 189 389.33 T
(you fail to reset a semaphore, other threads may wait forever) 189 376.33 T
(.) 470.88 376.33 T
(Because only one thread at a time is performing the protected operation) 189 356.33 T
-0.64 (and this thread is responsible for unlocking the semaphore, it is sometimes) 189 343.33 P
-0.58 (said to \322have\323 the semaphore. The \322) 189 330.33 P
1 9 Q
-0.52 (P) 349.8 330.33 P
1 10 Q
-0.58 (\323 and \322) 355.8 330.33 P
1 9 Q
-0.52 (V) 385.38 330.33 P
1 10 Q
-0.58 (\323 operations are often referred) 391.88 330.33 P
(to as \322grabbing\323 and \322releasing\323 a semaphore, respectively) 189 317.33 T
(.) 456.82 317.33 T
0 14 Q
(B.5.1.4) 125.86 283.67 T
(The Dreaded Deadlock Problem) 189 283.67 T
1 10 Q
-0.13 (When semaphores are not used carefully) 189 261.33 P
-0.13 (, they can cause programs to stop) 375.21 261.33 P
(running entirely) 189 248.33 T
(. Suppose Thread) 264.18 248.33 T
1 9 Q
(A) 347.34 248.33 T
1 10 Q
( tries to grab a semaphore which) 353.84 248.33 T
(Thread) 189 235.33 T
1 9 Q
(B) 225.3 235.33 T
1 10 Q
( has locked. Thread) 231.8 235.33 T
1 9 Q
(A) 324.78 235.33 T
1 10 Q
( stops running until Thread) 331.28 235.33 T
1 9 Q
(B) 462.4 235.33 T
1 10 Q
( releases the) 468.89 235.33 T
-0.61 (semaphore. Thread) 189 222.33 P
1 9 Q
-0.55 (B) 280.01 222.33 P
1 10 Q
-0.61 ( then tries to grab a second semaphore, which Thread) 286.51 222.33 P
1 9 Q
-0.33 (A) 189 209.33 P
1 10 Q
-0.37 ( has previously locked. Thread) 195.5 209.33 P
1 9 Q
-0.33 (B) 337.39 209.33 P
1 10 Q
-0.37 ( waits for Thread) 343.89 209.33 P
1 9 Q
-0.33 (A) 424.84 209.33 P
1 10 Q
-0.37 ( to release the second) 431.34 209.33 P
(semaphore, but Thread) 189 196.33 T
1 9 Q
(A) 299.57 196.33 T
1 10 Q
( is waiting for Thread) 306.07 196.33 T
1 9 Q
(B) 409.05 196.33 T
1 10 Q
( to release the \336rst) 415.55 196.33 T
(semaphore. Neither thread will ever wake up. This situation is called) 189 183.33 T
(\322deadlock.\323) 189 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "927" 15
%%Page: "928" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(928) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 189 641.33 T
(o avoid deadlock, follow these guidelines:) 194.75 641.33 T
2 F
(u) 189 621.33 T
1 F
(When possible, avoid having a thread attempt to lock one semaphore) 207 621.33 T
(while it already has another one locked.) 207 609.33 T
2 F
(u) 189 590.33 T
1 F
-0.8 (When two or more semaphores may be locked by the same thread at the) 207 590.33 P
-0.34 (same time, they should always be used in the same order) 207 578.33 P
-0.34 (. Semaphores) 466.66 578.33 P
-0.73 (are often arranged in a hierarchy) 207 566.33 P
-0.73 (, with the coarsest \050the one controlling) 356.12 566.33 P
(access to the most resources\051 at the top and the \336nest at the bottom.) 207 554.33 T
(Any thread grabbing multiple semaphores in this hierarchy must) 207 542.33 T
(always grab from top to bottom; that is, no thread should grab a) 207 530.33 T
(semaphore \322above\323 one it already has locked.) 207 518.33 T
2 F
(u) 189 499.33 T
1 F
-0.3 (In certain situations, a semaphore is used \322between\323 two threads. One) 207 499.33 P
-0.22 (thread needs to wait until another performs a speci\336c action. The \336rst) 207 487.33 P
(thread is said to \322block\323 on the second. Of course, two threads must) 207 475.33 T
(never block on each other) 207 463.33 T
(. T) 324.04 463.33 T
(o ensure this situation never arises, only) 335.35 463.33 T
(one of the threads should use the) 207 451.33 T
4 F
(@call) 362.75 451.33 T
1 F
( keyword when sending) 388.93 451.33 T
(messages to the other; the other should always use) 207 439.33 T
4 F
(@send) 444.81 439.33 T
1 F
( and, when) 476.54 439.33 T
-0.69 (getting return information, have some sort of noti\336cation message sent) 207 427.33 P
(in response.) 207 415.33 T
2 F
(u) 189 396.33 T
1 F
-0.51 (When using the) 207 396.33 P
1 9 Q
-0.46 (GEOS) 281.2 396.33 P
1 10 Q
-0.51 ( messaging system to send a message with) 307.37 396.33 P
4 F
-0.53 (@call) 502.55 396.33 P
1 F
-0.65 (to an object in another thread, the sending thread automatically blocks) 207 384.33 P
-0.18 (on the receiving thread. Since a number of user interface objects must) 207 372.33 P
-0.26 (be sent messages with) 207 360.33 P
4 F
-0.27 (@call) 311.91 360.33 P
1 F
-0.26 (, the application thread sometimes blocks) 338.09 360.33 P
(on the user interface thread. T) 207 348.33 T
(o avoid deadlock, code that runs in the) 347.38 348.33 T
-0.05 (user interface thread must never send messages with) 207 336.33 P
4 F
-0.05 (@call) 456.25 336.33 P
1 F
-0.05 ( to objects) 482.43 336.33 P
(in the application thread. \050This is a particular example of the above) 207 324.33 T
(rule being implemented.\051) 207 312.33 T
0 14 Q
(B.5.2) 137.54 271 T
0 18 Q
(Semaphores In GEOS) 189 271 T
1 9 Q
-0.58 (GEOS) 189 247.33 P
1 10 Q
-0.64 ( contains several system resources that are protected by semaphores.) 215.17 247.33 P
-0.78 (Since application programs can access these resources only through library) 189 234.33 P
-0.08 (routines, the programmer does not need to be aware of these semaphores;) 189 221.33 P
-0.12 (the required operations are performed by the library routines. For system) 189 208.33 P
(resources \050e.g. \336les, memory) 189 195.33 T
(, handles\051,) 318.44 195.33 T
1 9 Q
(GEOS) 369.19 195.33 T
1 10 Q
( de\336nes semaphores and) 395.36 195.33 T
-0.41 (provides special routines to set and reset them. The chapter that describes) 189 182.33 P
(each system resource explains how to use the special semaphores that) 189 169.33 T
(protect the resource.) 189 156.33 T
0 0 0 1 0 0 0 K
81 537.8 171 647.45 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(A) 81 594.45 T
(void deadlock!) 87.17 594.45 T
1 F
-0.12 (Be very careful when) 81 578.45 P
(using multiple) 81 567.45 T
(semaphores.) 81 556.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81.5 646.95 170.5 646.95 2 L
1 H
2 Z
N
1 X
90 450 13.5 13.5 101.25 623.33 G
4 H
90 450 13.5 13.5 101.25 623.33 A
81 603.21 121.5 643.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
6 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 611.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "928" 16
%%Page: "929" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Synchronizing Threads) 403.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(929) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.5) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.48 (The routines described in this section illustrate) 189 641.33 P
1 9 Q
-0.44 (GEOS) 407.12 641.33 P
1 10 Q
-0.48 ( semaphores and can) 433.29 641.33 P
(be used to create semaphores to protect resources de\336ned within a) 189 628.33 T
(multithreaded application. There are routines for each of the operations) 189 615.33 T
-0.14 (\050initialization,) 189 602.33 P
1 9 Q
-0.12 (P) 257.58 602.33 P
1 10 Q
-0.14 (, and) 262.29 602.33 P
1 9 Q
-0.12 (V) 287.77 602.33 P
1 10 Q
-0.14 (\051, and there are special routines which simplify the) 294.27 602.33 P
(use of a semaphore by multiple objects within the same thread.) 189 589.33 T
-0.4 (Note that it is possible to create a semaphore with a starting value greater) 189 569.33 P
-0.82 (than one. That is, you can create a semaphore that will allow more than one) 189 556.33 P
(thread to grab it at once. T) 189 543.33 T
(ypically) 312.21 543.33 T
(, if only one thread may grab the) 347.03 543.33 T
(semaphore, the thread is called a \322mutual exclusion,\323 or \322mutex,\323) 189 530.33 T
(semaphore, because it is normally used to make sure two threads don\325) 189 517.33 T
(t) 512.2 517.33 T
(mutually grab a particular resource.) 189 504.33 T
(Semaphores that can be grabbed by more than one thread are generally) 189 484.33 T
(called \322scheduling semaphores\323 because they allow easy manipulation of) 189 471.33 T
-0.86 (scheduled resources. The classic example of this is the \322producer\320consumer) 189 458.33 P
(problem\323 wherein one thread produces buffers and another consumes) 189 445.33 T
(them. Initially) 189 432.33 T
(, no buffers exist, so the semaphore starts at zero. The) 254.94 432.33 T
(consumer goes into a loop wherein it simply) 189 419.33 T
1 9 Q
(P) 394.02 419.33 T
1 10 Q
(\325) 400.02 419.33 T
(s the semaphore \050blocking) 401.69 419.33 T
(until a buffer exists\051, takes the \336rst buffer in the queue, processes the) 189 406.33 T
(buffer) 189 393.33 T
(, destroys the buffer) 216.03 393.33 T
(, and then returns to the top of the loop. The) 307.88 393.33 T
-0.56 (producer) 189 380.33 P
-0.56 (, meanwhile, can produce any number of buffers, queue them, and) 229.17 380.33 P
1 9 Q
(V) 189 367.33 T
1 10 Q
( the semaphore once for each consumable buffer) 195.5 367.33 T
(. The consumer thread) 416.24 367.33 T
-0.35 (will continue to process until all the buffers are consumed, and then it will) 189 354.33 P
(block and wait for more buffers.) 189 341.33 T
0 14 Q
(B.5.2.1) 125.86 307.67 T
(Operations on a Semaphore) 189 307.67 T
5 10 Q
(ThreadAllocSem\050\051, ThreadPSem\050\051, ThreadPTimedSem\050\051,) 189 285.33 T
(ThreadVSem\050\051, ThreadFreeSem\050\051) 189 272.33 T
1 F
(T) 189 252.33 T
(o create a semaphore, simply call the routine) 194.75 252.33 T
4 F
(ThreadAllocSem\050\051) 404.96 252.33 T
1 F
(,) 498.86 252.33 T
-0.29 (passing an initial value for the semaphore. This should normally be one to) 189 239.33 P
-0.76 (indicate the semaphore is unlocked. If you want the semaphore to be locked) 189 226.33 P
-0.68 (initially) 189 213.33 P
-0.68 (, pass an initial value of zero. In either case, the returned value will) 224.57 213.33 P
(be the handle of the newly created semaphore. Use this handle with the) 189 200.33 T
(routines described below) 189 187.33 T
(.) 302.16 187.33 T
(Once a semaphore is created, a thread can lock it \050i.e., perform the \322) 189 167.33 T
1 9 Q
(P) 502.55 167.33 T
1 10 Q
(\323) 508.55 167.33 T
-0.63 (operation\051 by calling the routine) 189 154.33 P
4 F
-0.65 (ThreadPSem\050\051) 337.55 154.33 P
1 F
-0.63 (, passing the semaphore\325) 412.74 154.33 P
-0.63 (s) 524.22 154.33 P
81.5 144 171.5 285.34 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81.5 144 171.5 285.34 R
7 X
0 0 0 1 0 0 0 K
V
81.5 122.67 171.5 284.67 R
V
0 9 Q
0 X
(Multiple-Use) 81.5 278.67 T
(Semaphores) 81.5 267.67 T
1 F
(By specifying an) 81.5 251.67 T
-0.3 (initial value of two or) 81.5 240.67 P
-0.2 (more, you can set the) 81.5 229.67 P
(number of threads) 81.5 218.67 T
(that can access a) 81.5 207.67 T
(semaphore at the) 81.5 196.67 T
(same time. This is) 81.5 185.67 T
(often used to track) 81.5 174.67 T
(multiple instances of) 81.5 163.67 T
(a particular resource.) 81.5 152.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "929" 17
%%Page: "930" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(930) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(handle as an argument. If the semaphore is unlocked, the thread locks it) 189 641.33 T
-0.4 (and proceeds; otherwise the thread waits in the semaphore\325) 189 628.33 P
-0.4 (s thread queue.) 460.3 628.33 P
-0.73 (Another routine that performs the \322) 189 608.33 P
1 9 Q
-0.65 (P) 350.55 608.33 P
1 10 Q
-0.73 (\323 operation is) 356.55 608.33 P
4 F
-0.75 (ThreadPT) 418.27 608.33 P
-0.75 (imedSem\050\051) 470.61 608.33 P
1 F
-0.73 (.) 526.17 608.33 P
-0.21 (When calling this routine, pass as arguments the semaphore\325) 189 595.33 P
-0.21 (s handle and) 469.58 595.33 P
(an integer representing a number of ticks. This integer is a time limit: If) 189 582.33 T
-0.59 (another thread has the semaphore locked and does not unlock it within the) 189 569.33 P
-0.33 (speci\336ed number of ticks, the routine will return with a \337ag indicating the) 189 556.33 P
(lock was unsuccessful. Programs that use) 189 543.33 T
4 F
(ThreadPT) 383.83 543.33 T
(imedSem\050\051) 436.17 543.33 T
1 F
( must) 491.73 543.33 T
-0.71 (check this \337ag and must not perform the protected operation if it is set. The) 189 530.33 P
-0.23 (most common use of this routine is with a time limit of zero, meaning that) 189 517.33 P
(the semaphore should be locked only if it is available right away\321if it is) 189 504.33 T
(not available, the thread will continue with some other action.) 189 491.33 T
(T) 189 471.33 T
(o release the semaphore \050by performing the \322) 194.75 471.33 T
1 9 Q
(V) 401.98 471.33 T
1 10 Q
(\323 operation\051, the thread) 408.48 471.33 T
(calls) 189 458.33 T
4 F
(ThreadVSem\050\051) 212.71 458.33 T
1 F
(, again passing the semaphore\325) 287.9 458.33 T
(s handle. If there are) 429.78 458.33 T
(other threads waiting for the semaphore, the one with the lowest current) 189 445.33 T
(priority number takes over) 189 432.33 T
(.) 312.71 432.33 T
(When a semaphore is no longer needed, it can be destroyed by calling) 189 412.33 T
4 F
(ThreadFreeSem\050\051) 189 399.33 T
1 F
( with the semaphore\325) 280.49 399.33 T
(s handle as an argument.) 376.8 399.33 T
0 14 Q
(B.5.2.2) 125.86 365.67 T
(Operations on a Thread Lock) 189 365.67 T
5 10 Q
(ThreadAllocThreadLock\050\051, ThreadGrabThreadLock\050\051,) 189 343.33 T
(ThreadReleaseThreadLock\050\051, ThreadFreeThreadLock\050\051) 189 330.33 T
1 F
(At times it is convenient to have a program lock a semaphore that it has) 189 310.33 T
(already locked. For example, one routine might lock a semaphore) 189 297.33 T
-0.25 (protecting a piece of memory and then call itself recursively) 189 284.33 P
-0.25 (. A thread lock) 461.6 284.33 P
-0.69 (is a semaphore that can be locked any number of times, as long as each lock) 189 271.33 P
-0.48 (is performed by the same thread. If another thread tries to grab the thread) 189 258.33 P
-0.55 (lock, it will wait until the \336rst thread has performed the \322) 189 245.33 P
1 9 Q
-0.49 (V) 449.48 245.33 P
1 10 Q
-0.55 (\323 operation once) 455.98 245.33 P
-0.01 (for each time it has run the \322) 189 232.33 P
1 9 Q
-0.01 (P) 322.09 232.33 P
1 10 Q
-0.01 (\323 operation. It is possible to write reentrant) 328.09 232.33 P
(routines using thread locks but not using regular semaphores.) 189 219.33 T
-0.19 (A thread lock is initialized with the) 189 199.33 P
4 F
-0.2 (ThreadAllocThreadLock\050\051) 354.15 199.33 P
1 F
-0.19 ( routine,) 489.35 199.33 P
(which takes no arguments. A thread lock is always created unlocked. T) 189 186.33 T
(o) 516.46 186.33 T
(perform the \322) 189 173.33 T
1 9 Q
(P) 250.29 173.33 T
1 10 Q
(\323 and \322) 256.29 173.33 T
1 9 Q
(V) 287.04 173.33 T
1 10 Q
(\323 operation on a thread lock, use) 293.54 173.33 T
4 F
(ThreadGrabThreadLock\050\051) 189 160.33 T
1 F
( and) 324.01 160.33 T
4 F
(ThreadReleaseThreadLock\050\051) 346.98 160.33 T
1 F
(,) 495.88 160.33 T
(respectively) 189 147.33 T
(, and pass the semaphore\325) 243.07 147.33 T
(s handle as an argument. These) 361.98 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "930" 18
%%Page: "931" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Synchronizing Threads) 403.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(931) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(B.5) 545.22 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(routines are analogous to) 189 641.33 T
4 F
( ThreadPSem\050\051) 306.05 641.33 T
1 F
( and) 384.11 641.33 T
4 F
( ThreadVSem\050\051) 404.3 641.33 T
1 F
( for) 482.36 641.33 T
(semaphores. When a thread lock is no longer needed, it should be freed) 189 628.33 T
(with a call to) 189 615.33 T
4 F
(ThreadFreeThreadLock\050\051) 251.8 615.33 T
1 F
(.) 384.59 615.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "931" 19
%%Page: "932" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Threads and Semaphores) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(932) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(B.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "932" 20
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 20
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ Times-Bold
%%EOF
