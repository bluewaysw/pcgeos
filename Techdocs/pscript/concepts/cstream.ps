%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 12 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "773" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams: The Basics) 377.5 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(773) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.08 (It is often useful for an application to be able to write out data in an orderly) 180 606.33 P
(manner to be read by another program or sent to a device such as a printer) 180 593.33 T
(or modem.) 180 580.33 T
1 9 Q
( GEOS) 228.52 580.33 T
1 10 Q
( provides a mechanism called a) 257.19 580.33 T
3 F
(stream) 403.88 580.33 T
1 F
( to allow an orderly) 435.35 580.33 T
-0.54 (\337ow of data between two programs, between two threads of a multi-threaded) 180 567.33 P
-0.49 (program, or between a program and a device such as a serial or parallel port.) 180 554.33 P
(The stream interface includes various ways to notify a program that bytes) 180 541.33 T
(are available to read, or that there is room to write additional data.) 180 528.33 T
(The) 180 508.33 T
1 9 Q
(GEOS) 200.56 508.33 T
1 10 Q
( parallel and serial port drivers use the stream mechanism, so) 226.73 508.33 T
-0.16 (programs that will use these ports must do so via this mechanism; however) 180 495.33 P
-0.16 (,) 525.59 495.33 P
(libraries exist to handle some of the more common uses for port) 180 482.33 T
(communications. If you wish to monitor a serial line for pccom) 180 469.33 T
-0.7 (communications from another machine, you will be working with the PCCom) 180 456.33 P
-0.64 (library and should read \322PCCom Library) 180 443.33 P
-0.64 (,\323 Chapter) 364.24 443.33 P
-0.64 (22. Programs do not need) 413.8 443.33 P
-0.59 (to access the serial or parallel ports in order to print because the spooler does) 180 430.33 P
(it for them. For more information about the spooler and printing, see \322The) 180 417.33 T
(Spool Library) 180 404.33 T
(,\323 Chapter) 242.05 404.33 T
(17 of the Object Reference Book.) 292.24 404.33 T
(This chapter may be read with only a general understanding of) 180 384.33 T
1 9 Q
(GEOS) 474.48 384.33 T
1 10 Q
(and) 503.15 384.33 T
(Object Assembly) 180 371.33 T
(. Messaging is used heavily in informing the application) 255.75 371.33 T
(using a stream of the stream\325) 180 358.33 T
(s status, so a good understanding of) 314.65 358.33 T
-0.82 (object-oriented programming will be helpful. Y) 180 345.33 P
-0.82 (ou should also be familiar with) 390.35 345.33 P
-0.17 (the) 180 332.33 P
1 9 Q
-0.15 (GEOS) 197.61 332.33 P
1 10 Q
-0.17 ( memory manager) 223.78 332.33 P
-0.17 (. The chapter is divided into three main sections:) 306.78 332.33 P
2 F
(u) 180 312.33 T
1 F
(A general description of a) 198 312.33 T
1 9 Q
(GEOS) 318.93 312.33 T
1 10 Q
( stream and how the two sides \050writers) 345.1 312.33 T
(and readers\051 access it.) 198 300.33 T
2 F
(u) 180 281.33 T
1 F
(A description of the speci\336c routines and conventions for using streams) 198 281.33 T
(to send data to and receive data from a serial port.) 198 269.33 T
2 F
(u) 180 250.33 T
1 F
-0.2 (A description of the speci\336c routines and conventions for using a stream) 198 250.33 P
(to send data to a parallel port.) 198 238.33 T
0 14 Q
(21.1) 134.76 187 T
0 24 Q
(Using Streams: The Basics) 180 187 T
1 10 Q
-0.6 (A stream is a path along which information \337ows in one direction. At one end) 180 161.33 P
-0.13 (of the stream is a) 180 148.33 P
3 F
-0.13 (writer) 262.35 148.33 P
1 F
-0.13 (, who puts data into the stream. At the opposite end) 289.56 148.33 P
81 144 531 648 C
235.5 630 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 630 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 280.8 171 390.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 X
0 0 0 1 0 0 0 K
90 450 13.5 13.5 101.25 366.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 366.33 A
0 0 0 1 0 0 0 K
81 346.21 121.5 386.71 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "773" 1
%%Page: "774" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(774) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.26 (of the stream is a) 180 641.33 P
3 F
-0.26 (reader) 261.7 641.33 P
1 F
-0.26 (, who receives data from the stream. The writer and) 290.57 641.33 P
-0.23 (reader can be) 180 628.33 P
1 9 Q
-0.21 (GEOS) 244.5 628.33 P
1 10 Q
-0.23 ( programs or device drivers. Data \337ow in both directions) 270.68 628.33 P
-0.01 (can be achieved by using two streams, one in each direction; this is how the) 180 615.33 P
(serial port driver is implemented. See Figure) 180 602.33 T
(21-) 390.76 602.33 T
(1 for an illustration.) 405.21 602.33 T
(Even though the stream driver is loaded automatically when a stream is) 180 582.33 T
(created, you will need to initialize, con\336gure, and destroy any streams you) 180 569.33 T
(use. The speci\336c steps involved in this process are) 180 556.33 T
4 F
(1) 180 536.33 T
1 F
(Get the handle of the stream driver) 198 536.33 T
(.) 361.16 536.33 T
(Y) 198 524.33 T
(ou will need to get this handle to use most of the stream-library) 203.93 524.33 T
(routines. Y) 198 512.33 T
(ou can get this handle by calling) 247.82 512.33 T
4 F
(GeodeGetInfo\050\051) 400.07 512.33 T
1 F
(.) 480.06 512.33 T
4 F
(2) 180 493.33 T
1 F
(Create the stream.) 198 493.33 T
(Y) 198 481.33 T
(ou must create each stream you plan on using. When a stream is) 203.93 481.33 T
-0.1 (initialized, it is designated a token that is used when calling the stream) 198 469.33 P
(driver) 198 457.33 T
(\325) 226.69 457.33 T
(s strategy routine.) 228.36 457.33 T
4 F
(3) 180 438.33 T
1 F
(Con\336gure the stream.) 198 438.33 T
(Arrange how your geode will be noti\336ed by the stream driver when) 198 426.33 T
(certain situations \050error received or buffer full/empty\051 arise, and make) 198 414.33 T
(sure that all geodes accessing the stream have been given the stream\325) 198 402.33 T
(s) 519.34 402.33 T
(token.) 198 390.33 T
4 F
(4) 180 371.33 T
1 F
(Use the stream.) 198 371.33 T
4 F
(5) 180 352.33 T
1 F
(Shut down the stream.) 198 352.33 T
(Not a trivial task, shutting down a stream can involve several) 198 340.33 T
(synchronization issues.) 198 328.33 T
81 144 531 648 C
180.67 144 531 296.67 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.67 144 531 296.67 R
7 X
0 0 0 1 0 0 0 K
V
182.67 214.19 256.68 264.19 R
V
0.5 H
0 Z
0 X
N
330.31 241.96 341.83 238.57 330.27 235.34 330.29 238.65 4 Y
V
256.51 239.19 330.29 238.65 2 L
7 X
V
2 Z
0 X
N
1 10 Q
(W) 204.58 239.15 T
(riter) 213.84 239.15 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
341.65 214.19 415.67 264.19 R
7 X
V
0 Z
0 X
N
(Reader) 362.18 239.15 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
299.17 247.2 307.3 239.07 299.17 230.93 291.04 239.07 4 Y
3 X
V
0 X
N
3 F
(Stream) 282.32 221.26 T
(Buffer) 284.73 209.27 T
181.82 146.67 525.99 197.5 R
7 X
V
0 F
0 X
(Figure) 181.82 190.83 T
(21-) 215.16 190.83 T
(1) 229.62 190.83 T
3 F
(Stream W) 237.96 190.83 T
(riter and Reader Interaction) 282.95 190.83 T
(Every stream has a writer on one end and a reader on the other) 181.82 176.83 T
(, and each) 469.73 176.83 T
(has access to the stream\325) 181.82 164.83 T
(s central buffer) 292.9 164.83 T
(. Note that two-way data transfer) 360.85 164.83 T
(requires the use of two separate streams, one in each direction.) 181.82 152.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "774" 2
%%Page: "775" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams: The Basics) 377.5 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(775) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Streams are created and managed by the Stream) 180 641.33 T
3 F
(Driver) 409.67 641.33 T
1 F
(. Programs written) 438.55 641.33 T
-0.43 (in Object-Assembly can call the driver directly) 180 628.33 P
-0.43 (. Goc programs cannot do this;) 390.4 628.33 P
(instead, they make calls to the Stream) 180 615.33 T
3 F
(Library) 360.97 615.33 T
1 F
(, which in turn calls the) 395.04 615.33 T
(Stream Driver) 180 602.33 T
(, and passes back any return values.) 246.3 602.33 T
0 14 Q
(21.1.1) 123.08 560 T
0 18 Q
(Initializing a Stream) 180 560 T
1 10 Q
(A stream is essentially a \336rst-in-\336rst-out data buffer) 180 536.33 T
(, in which the writer is) 422.24 536.33 T
(different from the reader) 180 523.33 T
(. When the writer writes data to the stream, the) 294.43 523.33 T
-0.38 (kernel stores it in the buffer; when the reader requests information from the) 180 510.33 P
(stream, the kernel retrieves the oldest data not yet read. The data is stored) 180 497.33 T
-0.57 (in a memory block; this block may be either \336xed or movable. If it is movable,) 180 484.33 P
-0.33 (both the reader and the writer must lock the block before calling any stream) 180 471.33 P
(routines.) 180 458.33 T
-0.5 (Note that the kernel does not enforce who is the reader or writer to a stream.) 180 438.33 P
(Any geode may call the appropriate stream library routine, passing in the) 180 425.33 T
(token for a stream, and read or write data. However) 180 412.33 T
(, in practice, only those) 420.03 412.33 T
(threads with a legitimate interest in a stream will know the stream\325) 180 399.33 T
(s token.) 493.96 399.33 T
-0.74 (The serial and parallel drivers are built on top of the stream driver) 180 379.33 P
-0.74 (. There are) 479.88 379.33 P
(separate routines to access the serial and parallel ports; these routines are) 180 366.33 T
(discussed in \322Using the Serial Ports\323 on page 782 for the serial driver and) 180 353.33 T
(\322Using the Parallel Ports\323 on page 789 for the parallel driver) 180 340.33 T
(.) 459.68 340.33 T
0 14 Q
(21.1.1.1) 111.4 306.67 T
(Creating a Stream) 180 306.67 T
5 10 Q
(StreamOpen\050\051) 180 284.33 T
1 F
-0.08 (T) 180 264.33 P
-0.08 (o create and initialize a new stream, call the routine) 185.75 264.33 P
4 F
-0.08 (StreamOpen\050\051) 429.28 264.33 P
1 F
-0.08 (. This) 502.25 264.33 P
(routine takes \336ve arguments:) 180 251.33 T
2 F
(u) 180 231.33 T
1 F
(The handle of the stream driver) 198 231.33 T
(.) 344.49 231.33 T
2 F
(u) 180 212.33 T
1 F
-0.68 (The size of the stream buffer) 198 212.33 P
-0.68 (, in bytes. This may not be larger than 32767.) 326.65 212.33 P
2 F
(u) 180 193.33 T
1 F
(The) 198 193.33 T
4 F
(GeodeHandle) 218.56 193.33 T
1 F
( of the geode that will own this stream. When this) 288.74 193.33 T
(geode exits, the stream will be freed; however) 198 181.33 T
(, you should call) 407.84 181.33 T
4 F
(StreamClose\050\051) 198 169.33 T
1 F
( before this happens.) 271.53 169.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "775" 3
%%Page: "776" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(776) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.31 (A set of) 198 641.33 P
4 F
-0.32 (HeapFlags) 234.48 641.33 P
1 F
-0.31 (. The routine will have to allocate a block to hold the) 289.66 641.33 P
(stream. The) 198 629.33 T
4 F
(HeapFlags) 256.53 629.33 T
1 F
( specify whether that block will be \336xed or) 311.71 629.33 T
(movable. If it is \336xed, this argument should contain the \337ag) 198 617.33 T
1 9 Q
(HF_FIXED) 477.3 617.33 T
1 10 Q
(;) 524.8 617.33 T
(otherwise it should be blank.) 198 605.33 T
2 F
(u) 180 586.33 T
1 F
-0.37 (The pointer to a) 198 586.33 P
4 F
-0.38 (StreamT) 273.19 586.33 P
-0.38 (oken) 317.09 586.33 P
1 F
-0.37 ( variable.) 342.46 586.33 P
4 F
-0.38 (StreamOpen\050\051) 387.84 586.33 P
1 F
-0.37 ( will create the) 460.81 586.33 P
(stream and write its token to this variable. Y) 198 574.33 T
(ou will need this token) 405.09 574.33 T
(whenever you access the stream, for reading or writing.) 198 562.33 T
(If the creation is successful,) 180 543.33 T
4 F
(StreamOpen\050\051) 310.92 543.33 T
1 F
( will return zero and store the) 383.89 543.33 T
(stream\325) 180 530.33 T
(s token in the) 214.08 530.33 T
4 F
(StreamT) 280.02 530.33 T
(oken) 323.92 530.33 T
1 F
( variable. Y) 349.29 530.33 T
(ou must see to it that both) 401.35 530.33 T
(the reader and the writer have this token. If the stream cannot be created,) 180 517.33 T
(the strategy routine will set an error \337ag and return) 180 504.33 T
(either) 424.55 504.33 T
1 9 Q
(STREAM_CANNOT_ALLOC) 180 491.33 T
1 10 Q
( \050if the memory for the stream\325) 301.34 491.33 T
(s buffer cannot be) 442.27 491.33 T
(allocated\051 or) 180 478.33 T
1 9 Q
(STREAM_BUFFER_TOO_LARGE) 239.82 478.33 T
1 10 Q
( \050if the requested stream size) 384.32 478.33 T
(was greater than 32767\051.) 180 465.33 T
0 14 Q
(21.1.1.2) 111.4 431.67 T
(Assigning Readers and W) 180 431.67 T
(riters) 352.45 431.67 T
1 10 Q
(Once a stream is created, you must make sure that both ends will be) 180 409.33 T
(managed\321a stream that has only a writer or only a reader is not a useful) 180 396.33 T
(stream.) 180 383.33 T
-0.38 (When communicating with a device such as a serial or parallel port, the port) 180 363.33 P
(is considered to be the entity on the other end. However) 180 350.33 T
(, if two threads are) 437.05 350.33 T
-0.24 (communicating via a stream, you must make sure the other thread can gain) 180 337.33 P
-0.18 (access to the stream. The best way to do this is to set up a message that will) 180 324.33 P
-0.22 (be sent by the creator to the other geode. This message should contain as an) 180 311.33 P
(argument the token of the stream and probably the direction of the stream) 180 298.33 T
(\050whether the creator will be reading or writing\051.) 180 285.33 T
(Once both geodes have the stream\325) 180 265.33 T
(s token, each can access the stream) 339.65 265.33 T
(normally) 180 252.33 T
(. The next several sections explain how to access a stream for) 220.56 252.33 T
(writing and reading.) 180 239.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "776" 4
%%Page: "777" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams: The Basics) 377.5 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(777) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.1.2) 123.08 636 T
0 18 Q
(Blocking on Read or W) 180 636 T
(rite) 376.7 636 T
5 10 Q
(StreamBlocker, StreamError) 180 612.33 T
1 F
-0.5 (A stream is a data buffer of limited size. When a thread writes to the stream,) 180 592.33 P
(there is a chance it could run out of space. Similarly) 180 579.33 T
(, when a thread reads) 418.91 579.33 T
-0.21 (from the stream, there is a possibility that it will try to read more data than) 180 566.33 P
-0.34 (is available; for example, it might try to read 500 bytes, when only 250 bytes) 180 553.33 P
(of data are sitting in the stream.) 180 540.33 T
-0.01 (There are two ways you can deal with these situations. One way is, you can) 180 520.33 P
(instruct the thread to block. For example, if you try to write 500 bytes to a) 180 507.33 T
-0.78 (stream and there is only 200 bytes of space available, the driver will write the) 180 494.33 P
(\336rst 200 bytes to that space, then have the writing thread block until more) 180 481.33 T
(space is available \050i.e. until the reading thread has read some data\051. The) 180 468.33 T
-0.4 (writing thread will not resume execution until all the data has been written.) 180 455.33 P
-0.6 (Similarly) 180 442.33 P
-0.6 (, a reading thread could block until the stream provided all the data) 222.05 442.33 P
(it requested.) 180 429.33 T
-0.37 (The other approach is to have the stream driver write or read all it can, then) 180 409.33 P
(return an appropriate error code. This requires a little more work by the) 180 396.33 T
-0.83 (calling thread, as it cannot assume that all the data is always read or written;) 180 383.33 P
(however) 180 370.33 T
(, it avoids the risk of deadlock.) 217.96 370.33 T
(All read and write routines are passed a member of the) 180 350.33 T
4 F
(StreamBlocker) 437.81 350.33 T
1 F
(enumerated type. This type has two members:) 180 337.33 T
1 9 Q
(STREAM_BLOCK) 396.7 337.33 T
1 10 Q
(, indicating) 473.87 337.33 T
(that the calling thread should block in the situations described above; and) 180 324.33 T
1 9 Q
-0.38 (STREAM_NO_BLOCK) 180 311.33 P
1 10 Q
-0.42 (, indicating that the routine should immediately return) 276 311.33 P
(with an error if enough space is not available. A single thread may) 180 298.33 T
(, if it) 486.53 298.33 T
(wishes, pass) 180 285.33 T
1 9 Q
(STREAM_BLOCK) 240.2 285.33 T
1 10 Q
( sometimes and) 317.37 285.33 T
1 9 Q
(STREAM_NO_BLOCK) 392.2 285.33 T
1 10 Q
(sometimes.) 180 272.33 T
(If a stream routine returns an error) 180 252.33 T
(, the error will be a member of the) 344.62 252.33 T
4 F
(StreamError) 180 239.33 T
1 F
( enumerated type. The possible error values are described in) 246.87 239.33 T
(the section for each routine.) 180 226.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "777" 5
%%Page: "778" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(778) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.1.3) 123.08 636 T
0 18 Q
(W) 180 636 T
(riting Data to a Stream) 196.67 636 T
5 10 Q
(StreamWrite\050\051, StreamWriteByte\050\051) 180 612.33 T
1 F
(T) 180 592.33 T
(o write data into a stream, call the routine) 185.75 592.33 T
4 F
(StreamW) 384.68 592.33 T
(rite\050\051) 431.54 592.33 T
1 F
(. This routine) 458.21 592.33 T
(takes six arguments:) 180 579.33 T
2 F
(u) 180 559.33 T
1 F
(The) 198 559.33 T
4 F
(GeodeHandle) 218.56 559.33 T
1 F
( of the stream driver) 288.74 559.33 T
(.) 383 559.33 T
2 F
(u) 180 540.33 T
1 F
(The) 198 540.33 T
4 F
(StreamT) 218.56 540.33 T
(oken) 262.46 540.33 T
1 F
( of the stream.) 287.83 540.33 T
2 F
(u) 180 521.33 T
1 F
(A member of the) 198 521.33 T
4 F
(StreamBlocker) 277.45 521.33 T
1 F
( enumerated type, as described in) 355.62 521.33 T
(section 21.1.2 on page 777.) 198 509.33 T
2 F
(u) 180 490.33 T
1 F
(The amount of data to be written, in bytes.) 198 490.33 T
2 F
(u) 180 471.33 T
1 F
-0.2 (A pointer to a data buffer; the data will be copied from that buffer to the) 198 471.33 P
(stream.) 198 459.33 T
2 F
(u) 180 440.33 T
1 F
(A pointer to an integer) 198 440.33 T
(.) 302.45 440.33 T
4 F
(StreamW) 308.01 440.33 T
(rite\050\051) 354.87 440.33 T
1 F
( will write the number of bytes) 381.54 440.33 T
(actually copied to that integer) 198 428.33 T
(.) 335.98 428.33 T
-0.31 (If all the data was written successfully) 180 409.33 P
-0.31 (,) 355.96 409.33 P
4 F
-0.32 (StreamW) 361.22 409.33 P
-0.32 (rite\050\051) 408.08 409.33 P
1 F
-0.31 ( will return zero and) 434.75 409.33 P
(write the number of bytes written \050i.e. the size of the data buffer passed\051 to) 180 396.33 T
-0.7 (the integer pointed to by the sixth argument. If it could not successfully write) 180 383.33 P
(all the data, it will return one of the following) 180 370.33 T
4 F
(StreamError) 393.93 370.33 T
1 F
( values:) 460.8 370.33 T
1 9 Q
(STREAM_WOULD_BLOCK) 180 350.33 T
(STREAM_BLOCK) 243 338.33 T
1 10 Q
( had been passed, and there was no room to) 320.17 338.33 T
-0.44 (write any data to the stream. The sixth argument will be set to) 243 326.33 P
(zero.) 243 314.33 T
1 9 Q
(STREAM_SHORT_READ_WRITE) 180 295.33 T
1 10 Q
(If) 243 283.33 T
1 9 Q
(STREAM_NOBLOCK) 253.18 283.33 T
1 10 Q
( had been passed, this means there was) 344.68 283.33 T
-0.01 (not enough room to write all the data. If) 243 271.33 P
1 9 Q
-0.01 (STREAM_BLOCK) 430.89 271.33 P
1 10 Q
-0.01 ( had) 508.05 271.33 P
(been passed, this means the stream was closed before all the) 243 259.33 T
(data could be written. The sixth argument will contain the) 243 247.33 T
(number of bytes actually written to the stream.) 243 235.33 T
1 9 Q
(STREAM_CLOSING) 180 216.33 T
1 10 Q
(The stream is in the process of being closed; no writing is) 243 204.33 T
-0.2 (permitted while this is happening. The sixth argument will be) 243 192.33 P
(set to zero.) 243 180.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "778" 6
%%Page: "779" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams: The Basics) 377.5 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(779) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(STREAM_CLOSED) 180 641.33 T
1 10 Q
(The stream has already been closed. The sixth argument will) 243 629.33 T
(be set to zero.) 243 617.33 T
(Y) 180 598.33 T
(ou may often want to write a single byte to the stream. There is a special) 185.93 598.33 T
(routine to do this,) 180 585.33 T
4 F
(StreamW) 265.01 585.33 T
(riteByte\050\051) 311.87 585.33 T
1 F
(. This routine takes four arguments:) 362.43 585.33 T
2 F
(u) 180 565.33 T
1 F
(The) 198 565.33 T
4 F
(GeodeHandle) 218.56 565.33 T
1 F
( of the stream driver) 288.74 565.33 T
(.) 383 565.33 T
2 F
(u) 180 546.33 T
1 F
(The) 198 546.33 T
4 F
(StreamT) 218.56 546.33 T
(oken) 262.46 546.33 T
1 F
( of the stream.) 287.83 546.33 T
2 F
(u) 180 527.33 T
1 F
(A member of the) 198 527.33 T
4 F
(StreamBlocker) 277.45 527.33 T
1 F
( enumerated type, as described in) 355.62 527.33 T
(section 21.1.2 on page 777.) 198 515.33 T
2 F
(u) 180 496.33 T
1 F
(The byte to be written.) 198 496.33 T
(If the byte is written successfully) 180 477.33 T
(,) 332.04 477.33 T
4 F
(StreamW) 337.6 477.33 T
(riteByte\050\051) 384.46 477.33 T
1 F
( will return zero.) 435.02 477.33 T
(Otherwise, it will return one of the following error values:) 180 464.33 T
1 9 Q
(STREAM_WOULD_BLOCK) 180 444.33 T
(STREAM_BLOCK) 243 432.33 T
1 10 Q
( had been passed, and there was no room to) 320.17 432.33 T
(write any data to the stream.) 243 420.33 T
1 9 Q
(STREAM_CLOSING) 180 401.33 T
1 10 Q
(The stream is in the process of being closed; no writing is) 243 389.33 T
(permitted while this is happening.) 243 377.33 T
1 9 Q
(STREAM_CLOSED) 180 358.33 T
1 10 Q
(The stream has already been closed.) 243 346.33 T
0 14 Q
(21.1.4) 123.08 305 T
0 18 Q
(Reading Data from a Stream) 180 305 T
5 10 Q
(StreamRead\050\051, StreamReadByte\050\051) 180 281.33 T
1 F
(T) 180 261.33 T
(o write data into a stream, call the routine) 185.75 261.33 T
4 F
(StreamRead\050\051) 384.68 261.33 T
1 F
(. This routine) 456.73 261.33 T
(takes six arguments:) 180 248.33 T
2 F
(u) 180 228.33 T
1 F
(The) 198 228.33 T
4 F
(GeodeHandle) 218.56 228.33 T
1 F
( of the stream driver) 288.74 228.33 T
(.) 383 228.33 T
2 F
(u) 180 209.33 T
1 F
(The) 198 209.33 T
4 F
(StreamT) 218.56 209.33 T
(oken) 262.46 209.33 T
1 F
( of the stream.) 287.83 209.33 T
2 F
(u) 180 190.33 T
1 F
(A member of the) 198 190.33 T
4 F
(StreamBlocker) 277.45 190.33 T
1 F
( enumerated type, as described in) 355.62 190.33 T
(section 21.1.2 on page 777.) 198 178.33 T
2 F
(u) 180 159.33 T
1 F
(The amount of data to be read, in bytes.) 198 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "779" 7
%%Page: "780" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(780) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.55 (A pointer to a data buffer; the data will be read from the stream into that) 198 641.33 P
(buffer) 198 629.33 T
(.) 225.03 629.33 T
2 F
(u) 180 610.33 T
1 F
(A pointer to an integer) 198 610.33 T
(.) 302.45 610.33 T
4 F
(StreamRead\050\051) 308.01 610.33 T
1 F
( will write the number of bytes) 380.06 610.33 T
(actually read to that integer) 198 598.33 T
(.) 327.65 598.33 T
(If the requested amount of data was read successfully) 180 579.33 T
(,) 427.24 579.33 T
4 F
(StreamRead\050\051) 432.8 579.33 T
1 F
( will) 504.85 579.33 T
-0.66 (return zero and write the number of bytes read \050i.e. the size of the data buffer) 180 566.33 P
(passed\051 to the integer pointed to by the sixth argument. If it could not) 180 553.33 T
(successfully read the requested amount of data, it will return one of the) 180 540.33 T
(following) 180 527.33 T
4 F
(StreamError) 224.82 527.33 T
1 F
( values:) 291.69 527.33 T
1 9 Q
(STREAM_WOULD_BLOCK) 180 507.33 T
(STREAM_BLOCK) 243 495.33 T
1 10 Q
( had been passed, and there was no data) 320.17 495.33 T
(waiting in the stream. The sixth argument will be set to zero.) 243 483.33 T
1 9 Q
(STREAM_SHORT_READ_WRITE) 180 464.33 T
1 10 Q
-0.5 (If) 243 452.33 P
1 9 Q
-0.45 (STREAM_NOBLOCK) 252.68 452.33 P
1 10 Q
-0.5 ( had been passed, this means the stream) 344.19 452.33 P
-0.38 (did not have the amount of data requested. If) 243 440.33 P
1 9 Q
-0.34 (STREAM_BLOCK) 451.44 440.33 P
1 10 Q
-0.04 (had been passed, this means the stream was closed before the) 243 428.33 P
(requested amount of data could be read. The sixth argument) 243 416.33 T
-0.5 (will contain the number of bytes actually read from the stream.) 243 404.33 P
1 9 Q
(STREAM_CLOSING) 180 385.33 T
1 10 Q
(The stream is in the process of being closed; no reading is) 243 373.33 T
-0.2 (permitted while this is happening. The sixth argument will be) 243 361.33 P
(set to zero.) 243 349.33 T
-0.22 (Y) 180 330.33 P
-0.22 (ou may often want to read a single byte from the stream. There is a special) 185.93 330.33 P
(routine to do this,) 180 317.33 T
4 F
(StreamReadByte\050\051) 265.01 317.33 T
1 F
(. This routine takes four arguments:) 360.95 317.33 T
2 F
(u) 180 297.33 T
1 F
(The) 198 297.33 T
4 F
(GeodeHandle) 218.56 297.33 T
1 F
( of the stream driver) 288.74 297.33 T
(.) 383 297.33 T
2 F
(u) 180 278.33 T
1 F
(The) 198 278.33 T
4 F
(StreamT) 218.56 278.33 T
(oken) 262.46 278.33 T
1 F
( of the stream.) 287.83 278.33 T
2 F
(u) 180 259.33 T
1 F
(A member of the) 198 259.33 T
4 F
(StreamBlocker) 277.45 259.33 T
1 F
( enumerated type, as described in) 355.62 259.33 T
(section 21.1.2 on page 777.) 198 247.33 T
2 F
(u) 180 228.33 T
1 F
(A pointer to a byte-sized variable; the data byte read will be written to) 198 228.33 T
(this variable.) 198 216.33 T
(If the byte is written successfully) 180 197.33 T
(,) 332.04 197.33 T
4 F
(StreamReadByte\050\051) 337.6 197.33 T
1 F
( will return zero.) 433.54 197.33 T
(Otherwise, it will return one of the following error values:) 180 184.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "780" 8
%%Page: "781" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams: The Basics) 377.5 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(781) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(STREAM_WOULD_BLOCK) 180 641.33 T
(STREAM_BLOCK) 243 629.33 T
1 10 Q
( had been passed, and there was no data) 320.17 629.33 T
(waiting in the stream.) 243 617.33 T
1 9 Q
(STREAM_CLOSING) 180 598.33 T
1 10 Q
(The stream is in the process of being closed; no reading is) 243 586.33 T
(permitted while this is happening.) 243 574.33 T
0 14 Q
(21.1.5) 123.08 533 T
0 18 Q
(Shutting Down a Stream) 180 533 T
5 10 Q
(StreamClose\050\051) 180 509.33 T
1 F
(Either the writer or the reader can instigate stream shutdown by calling) 180 489.33 T
4 F
(StreamClose\050\051) 180 476.33 T
1 F
(. When one of the two calls this routine, the shut-down) 253.53 476.33 T
(process is started; it will not be completed until the other calls the routine.) 180 463.33 T
-0.65 (If the writer calls) 180 443.33 P
4 F
-0.67 (StreamClose\050\051) 260.56 443.33 P
1 F
-0.65 (, it may specify that the data already in the) 334.09 443.33 P
(buffer be) 180 430.33 T
3 F
(\337ushed) 223.89 430.33 T
1 F
( \050immediately cleared\051, or that it) 257.21 430.33 T
3 F
(linger) 410.38 430.33 T
1 F
(. If you specify that) 436.66 430.33 T
(the data should linger) 180 417.33 T
(, the data will be preserved as long as the reader has) 281.31 417.33 T
-0.47 (the stream open. The reader can continue to read data normally until it runs) 180 404.33 P
(out of data. The last read-operation will most likely return) 180 391.33 T
1 9 Q
(STREAM_SHORT_READ_WRITE) 180 378.33 T
1 10 Q
(; after that, all attempts to read data will) 323.82 378.33 T
(generate the error) 180 365.33 T
1 9 Q
(STREAM_CLOSING) 267.03 365.33 T
1 10 Q
(. At that point, the reader should call) 354.37 365.33 T
4 F
-0.73 (StreamClose\050\051) 180 352.33 P
1 F
-0.71 (. \050If the data was \337ushed by the writer) 253.53 352.33 P
-0.71 (, the next read attempt) 424.9 352.33 P
(will return) 180 339.33 T
1 9 Q
(STREAM_CLOSING) 232.78 339.33 T
1 10 Q
(.\051) 320.12 339.33 T
(T) 180 319.33 T
(o shut down the stream, call the routine) 185.75 319.33 T
4 F
(StreamClose\050\051) 373.55 319.33 T
1 F
(. This routine is) 447.08 319.33 T
(passed the following arguments:) 180 306.33 T
2 F
(u) 180 286.33 T
1 F
(The) 198 286.33 T
4 F
(GeodeHandle) 218.56 286.33 T
1 F
( of the stream driver) 288.74 286.33 T
(.) 383 286.33 T
2 F
(u) 180 267.33 T
1 F
(The) 198 267.33 T
4 F
(StreamT) 218.56 267.33 T
(oken) 262.46 267.33 T
1 F
( of the stream.) 287.83 267.33 T
2 F
(u) 180 248.33 T
1 F
(A Boolean value saying whether the data in the stream should be kept) 198 248.33 T
(until it\325) 198 236.33 T
(s read;) 231.9 236.33 T
3 F
(false) 265.61 236.33 T
1 F
( \050i.e. zero\051 indicates it should be \337ushed.) 286.89 236.33 T
-0.79 (If you are using the Serial or Parallel drivers \050described later in this chapter\051,) 180 217.33 P
(you do not have to coordinate the closure of a stream.) 180 204.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "781" 9
%%Page: "782" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(782) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.1.6) 123.08 636 T
0 18 Q
(Miscellaneous Functions) 180 636 T
5 10 Q
(StreamFlush\050\051, StreamQuery\050\051) 180 612.33 T
1 F
(T) 180 592.33 T
(o \337ush all the pending \050written but unread\051 data from a stream, call the) 185.75 592.33 T
(routine) 180 579.33 T
4 F
(StreamFlush\050\051) 216.48 579.33 T
1 F
(. This routine is passed two arguments:) 291.3 579.33 T
2 F
(u) 180 559.33 T
1 F
(The) 198 559.33 T
4 F
(GeodeHandle) 218.56 559.33 T
1 F
( of the stream driver) 288.74 559.33 T
(.) 383 559.33 T
2 F
(u) 180 540.33 T
1 F
(The) 198 540.33 T
4 F
(StreamT) 218.56 540.33 T
(oken) 262.46 540.33 T
1 F
( of the stream.) 287.83 540.33 T
(T) 180 521.33 T
(o \336nd out how much free space is available in a stream, or how much data) 185.75 521.33 T
(is waiting to be read, call) 180 508.33 T
4 F
(StreamQuery\050\051) 298.74 508.33 T
1 F
(. This routine is passed four) 376.34 508.33 T
(arguments:) 180 495.33 T
2 F
(u) 180 475.33 T
1 F
(The) 198 475.33 T
4 F
(GeodeHandle) 218.56 475.33 T
1 F
( of the stream driver) 288.74 475.33 T
(.) 383 475.33 T
2 F
(u) 180 456.33 T
1 F
(The) 198 456.33 T
4 F
(StreamT) 218.56 456.33 T
(oken) 262.46 456.33 T
1 F
( of the stream.) 287.83 456.33 T
2 F
(u) 180 437.33 T
1 F
(A member of the) 198 437.33 T
4 F
(StreamRoles) 277.45 437.33 T
1 F
( enumerated type. The only appropriate) 343.57 437.33 T
(values here are) 198 425.33 T
1 9 Q
(STREAM_ROLES_WRITER) 271.71 425.33 T
1 10 Q
( \050to \336nd the amount of free) 390.03 425.33 T
(space available for writing\051 or) 198 413.33 T
1 9 Q
(STREAM_ROLES_READER) 338.76 413.33 T
1 10 Q
( \050to \336nd the) 458.59 413.33 T
(amount of data waiting to be read\051.) 198 401.33 T
2 F
(u) 180 382.33 T
1 F
(A pointer to an integer variable.) 198 382.33 T
(If the call is successful,) 180 363.33 T
4 F
(StreamQuery\050\051) 289.63 363.33 T
1 F
( returns zero and writes its return) 367.23 363.33 T
(value to the fourth argument. If you pass) 180 350.33 T
1 9 Q
(STREAM_ROLES_WRITER) 372.79 350.33 T
1 10 Q
(,) 491.11 350.33 T
4 F
(StreamQuery\050\051) 180 337.33 T
1 F
( writes the number of bytes of free space available in the) 257.6 337.33 T
(stream buffer) 180 324.33 T
(. If you pass) 242.22 324.33 T
1 9 Q
(STREAM_ROLES_READER) 300.56 324.33 T
1 10 Q
(,) 420.39 324.33 T
4 F
(StreamQuery\050\051) 425.95 324.33 T
1 F
(returns the number of bytes of data waiting to be read. If the call is) 180 311.33 T
(unsuccessful,) 180 298.33 T
4 F
(StreamQuery\050\051) 244.25 298.33 T
1 F
( returns a) 321.85 298.33 T
4 F
(StreamError) 370.37 298.33 T
1 F
(.) 436.5 298.33 T
0 14 Q
(21.2) 134.76 246 T
0 24 Q
(Using the Serial Ports) 180 246 T
1 10 Q
(The serial driver uses streams to control the \337ow of data to and from serial) 180 220.33 T
(ports. The kernel automatically copies data from the serial port into one) 180 207.33 T
-0.3 (stream for reading, and sends data from another stream into the serial port.) 180 194.33 P
(An application which wishes to use the serial port simply reads and writes) 180 181.33 T
(data from those streams.) 180 168.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "782" 10
%%Page: "783" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using the Serial Ports) 412.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(783) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.2.1) 123.08 636 T
0 18 Q
(Initializing a Serial Port) 180 636 T
1 10 Q
(Like the stream driver) 180 612.33 T
(, the serial driver is not accessed directly from Goc) 283.9 612.33 T
(code. Instead, a Goc application makes calls to the Stream Library) 180 599.33 T
(, which) 485.8 599.33 T
(passes the requests through to the Serial Driver) 180 586.33 T
(\325) 403.16 586.33 T
(s strategy routine. Each) 404.83 586.33 T
(serial-port command must be passed the) 180 573.33 T
4 F
(GeodeHandle) 370.02 573.33 T
1 F
( of the Serial) 440.2 573.33 T
(Library; again, you can \336nd this handle by calling) 180 560.33 T
4 F
(GeodeGetInfo\050\051) 413.38 560.33 T
1 F
(.) 493.37 560.33 T
(The serial driver uses two streams, one for data going out to the serial port) 180 540.33 T
(\050outgoing\051 and one for data coming in from the serial port \050incoming\051. Y) 180 527.33 T
(our) 508.53 527.33 T
-0.66 (program is the writer of the outgoing and the reader of the incoming. \050In both) 180 514.33 P
(cases, the port acts as the opposite user) 180 501.33 T
(.\051) 361.87 501.33 T
0 14 Q
(21.2.1.1) 111.4 467.67 T
(Opening a Serial Port) 180 467.67 T
5 10 Q
(SerialOpen\050\051) 180 445.33 T
1 F
(T) 180 425.33 T
(o open a serial port, call the routine) 185.75 425.33 T
4 F
(SerialOpen\050\051) 353.18 425.33 T
1 F
(. This routine is passed) 419.48 425.33 T
(the following arguments:) 180 412.33 T
2 F
(u) 180 392.33 T
1 F
(The) 198 392.33 T
4 F
(GeodeHandle) 218.56 392.33 T
1 F
( of the serial-port driver) 288.74 392.33 T
(.) 398.92 392.33 T
2 F
(u) 180 373.33 T
1 F
-0.77 (A member of the) 198 373.33 P
4 F
-0.8 (SerialUnit) 274.36 373.33 P
1 F
-0.77 ( enumerated type; this speci\336es which serial) 328.43 373.33 P
(port is being opened. The type\325) 198 361.33 T
(s members are) 338.76 361.33 T
1 9 Q
(SERIAL_COM1) 409.14 361.33 T
1 10 Q
(,) 475.47 361.33 T
1 9 Q
(SERIAL_COM2) 198 349.33 T
1 10 Q
(, and so on up to) 264.33 349.33 T
1 9 Q
(SERIAL_COM8) 342.68 349.33 T
1 10 Q
(.) 409.01 349.33 T
2 F
(u) 180 330.33 T
1 F
-0.23 (A member of the) 198 330.33 P
4 F
-0.24 (StreamOpenFlags) 276.51 330.33 P
1 F
-0.23 (enumerated type, indicating what) 372.29 330.33 P
(to do if the requested serial port is busy \050either) 198 318.33 T
1 9 Q
-0.74 (STREAM_OPEN_NO_BLOCK) 198 306.33 P
1 10 Q
-0.82 (, indicating that the routine should return an) 325.34 306.33 P
(error immediately; or) 198 294.33 T
1 9 Q
(STREAM_OPEN_TIMEOUT) 299.67 294.33 T
1 10 Q
(, indicating that the) 419.25 294.33 T
-0.64 (routine should wait a speci\336ed number of clock ticks to see if the port will) 198 282.33 P
(free up\051.) 198 270.33 T
2 F
(u) 180 251.33 T
1 F
(The total size of the stream to be used as an input buffer) 198 251.33 T
(, in bytes.) 458.78 251.33 T
2 F
(u) 180 232.33 T
1 F
(The total size of the stream to be used as an output buffer) 198 232.33 T
(, in bytes.) 464.52 232.33 T
2 F
(u) 180 213.33 T
1 F
(The maximum number of ticks to wait for the serial port to become) 198 213.33 T
(available \050if) 198 201.33 T
1 9 Q
(STREAM_OPEN_TIMEOUT) 255.43 201.33 T
1 10 Q
( was passed\051.) 375.93 201.33 T
-0.16 (A \337ag is returned to indicate whether the serial port could be opened; if not,) 180 182.33 P
(a value of type) 180 169.33 T
4 F
(StreamError) 250.2 169.33 T
1 F
( will be returned to indicate the reason.) 317.07 169.33 T
(Possible stream error values are) 180 156.33 T
1 9 Q
(STREAM_BUFFER_TOO_LARGE) 332.24 156.33 T
1 10 Q
( and) 476.74 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "783" 11
%%Page: "784" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(784) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
-0.71 (STREAM_CANNOT_CREA) 180 641.33 P
-0.71 (TE) 294.83 641.33 P
1 10 Q
-0.79 (, and the additional values) 307.33 641.33 P
1 9 Q
-0.71 (STREAM_NO_DEVICE) 429.35 641.33 P
1 10 Q
-0.52 (\050if the serial port does not exist\051 or) 180 628.33 P
1 9 Q
-0.47 (STREAM_DEVICE_IN_USE) 338.08 628.33 P
1 10 Q
-0.52 ( \050if the device is) 458.4 628.33 P
(busy and the) 180 615.33 T
4 F
(StreamOpenFlags) 242.42 615.33 T
1 F
( passed indicate not to wait\051.) 335.57 615.33 T
(Note that when using the serial driver) 180 595.33 T
(, you do not identify the stream by a) 356.87 595.33 T
-0.26 (stream token but rather by the serial port number) 180 582.33 P
-0.26 (, known as a) 409.78 582.33 P
3 F
-0.26 (unit number) 469.31 582.33 P
1 F
-0.26 (.) 525.7 582.33 P
(When accessing a serial port, you simply pass the port\325) 180 569.33 T
(s unit number along) 432.43 569.33 T
(with either) 180 556.33 T
1 9 Q
(STREAM_READ) 234.08 556.33 T
1 10 Q
( \050if reading from the stream\051 or) 304.74 556.33 T
1 9 Q
(STREAM_WRITE) 451.22 556.33 T
1 10 Q
-0.48 (\050if writing to the stream\051; because each port has two streams associated with) 180 543.33 P
-0.86 (it, you must specify both parameters. The serial driver will understand which) 180 530.33 P
(stream you are accessing.) 180 517.33 T
0 14 Q
(21.2.1.2) 111.4 483.67 T
(Con\336guring a Serial Port) 180 483.67 T
5 10 Q
(SerialSetFormat\050\051, SerialGetFormat\050\051,SerialSetModem\050\051,) 180 461.33 T
(SerialGetModem\050\051, SerialSetFlowControl\050\051) 180 448.33 T
1 F
(Communication using a serial port requires that parity) 180 428.33 T
(, speed, and \337ow) 433.73 428.33 T
(control be properly set. T) 180 415.33 T
(o control these settings, call) 294.64 415.33 T
4 F
(SerialSetFormat\050\051) 425.95 415.33 T
1 F
(,) 519.85 415.33 T
(passing the following arguments:) 180 402.33 T
2 F
(u) 180 382.33 T
1 F
(The) 198 382.33 T
4 F
(GeodeHandle) 218.56 382.33 T
1 F
( of the serial-port driver) 288.74 382.33 T
(.) 398.92 382.33 T
2 F
(u) 180 363.33 T
1 F
(The member of the) 198 363.33 T
4 F
(SerialUnit) 288.01 363.33 T
1 F
( enumerated type.) 342.08 363.33 T
2 F
(u) 180 344.33 T
1 F
(A one-byte record of type) 198 344.33 T
4 F
(SerialFormat) 315.77 344.33 T
1 F
(, specifying the parity) 385.22 344.33 T
(, word) 484.67 344.33 T
(length, and number of stop bits to be used on the serial line; this record) 198 332.33 T
(is described below) 198 320.33 T
(.) 280.61 320.33 T
2 F
(u) 180 301.33 T
1 F
-0.22 (A member of the) 198 301.33 P
4 F
-0.22 (SerialMode) 276.59 301.33 P
1 F
-0.22 ( enumerated type, set to indicate the level) 335.85 301.33 P
(of \337ow control:) 198 289.33 T
1 9 Q
(SM_COOKED) 268.37 289.33 T
1 10 Q
( to indicate) 328.04 289.33 T
1 9 Q
(XON/XOFF) 382.31 289.33 T
1 10 Q
( \337ow control with) 430.83 289.33 T
(characters stripped to seven bits,) 198 277.33 T
1 9 Q
(SM_RARE) 353.75 277.33 T
1 10 Q
( to indicate) 398.41 277.33 T
1 9 Q
(XON/XOFF) 452.68 277.33 T
1 10 Q
( \337ow) 501.2 277.33 T
-0.56 (control but incoming characters left alone, or) 198 265.33 P
1 9 Q
-0.5 (SM_RA) 404.29 265.33 P
-0.5 (W) 435.12 265.33 P
1 10 Q
-0.56 ( to indicate no \337ow) 443.95 265.33 P
(control.) 198 253.33 T
2 F
(u) 180 234.33 T
1 F
(The baud rate to use, a member of the enumerated type) 198 234.33 T
4 F
(SerialBauds) 458.04 234.33 T
1 F
(,) 521.38 234.33 T
(which has the following members:) 198 222.33 T
5 F
(typedef) 216 207.33 T
(enum) 258 207.33 T
({) 216 193.33 T
(SERIAL_BAUD_115200) 252 179.33 T
(= 1,) 396 179.33 T
(SERIAL_BAUD_57600) 252 165.33 T
(= 2,) 396 165.33 T
(SERIAL_BAUD_38400) 252 151.33 T
(= 3,) 396 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "784" 12
%%Page: "785" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using the Serial Ports) 412.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(785) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(SERIAL_BAUD_19200) 252 641.33 T
(= 6,) 396 641.33 T
(SERIAL_BAUD_14400) 252 627.33 T
(= 8,) 396 627.33 T
(SERIAL_BAUD_9600) 252 613.33 T
(= 12,) 396 613.33 T
(SERIAL_BAUD_7200) 252 599.33 T
(= 16,) 396 599.33 T
(SERIAL_BAUD_4800) 252 585.33 T
(= 24,) 396 585.33 T
(SERIAL_BAUD_3600) 252 571.33 T
(= 32,) 396 571.33 T
(SERIAL_BAUD_2400) 252 557.33 T
(= 48,) 396 557.33 T
(SERIAL_BAUD_2000) 252 543.33 T
(= 58,) 396 543.33 T
(SERIAL_BAUD_1800) 252 529.33 T
(= 64,) 396 529.33 T
(SERIAL_BAUD_1200) 252 515.33 T
(= 96,) 396 515.33 T
(SERIAL_BAUD_600) 252 501.33 T
(= 192,) 396 501.33 T
(SERIAL_BAUD_300) 252 487.33 T
(= 384) 396 487.33 T
(} SerialBaud;) 216 473.33 T
4 F
(SerialFormat) 180 452.33 T
1 F
( is a byte-sized record that speci\336es the parity) 249.45 452.33 T
(, word-length,) 460.76 452.33 T
-0.55 (and number of stop bits for the serial line. The record has the following \336elds:) 180 439.33 P
1 9 Q
(SERIAL_FORMA) 180 419.33 T
(T_DLAB) 253.33 419.33 T
1 10 Q
(This is for internal use only; it must be set to zero.) 243 407.33 T
1 9 Q
(SERIAL_FORMA) 180 388.33 T
(T_BREAK) 253.33 388.33 T
1 10 Q
-0.44 (If set, this causes a) 243 376.33 P
1 9 Q
-0.4 (BREAK) 332.09 376.33 P
1 10 Q
-0.44 ( condition to be asserted on the line.) 365.08 376.33 P
(Y) 243 364.33 T
(ou must explicitly clear this bit again to resume normal) 248.93 364.33 T
(operation.) 243 352.33 T
1 9 Q
(SERIAL_FORMA) 180 333.33 T
(T_P) 253.33 333.33 T
(ARITY) 269.17 333.33 T
1 10 Q
-0.75 (This three-bit \336eld holds the parity to expect on receive and use) 243 321.33 P
-0.53 (on transmit. It uses the) 243 309.33 P
4 F
-0.55 (SerialParity) 352.01 309.33 P
1 F
-0.53 ( enumerated type, which) 415.9 309.33 P
(has the following members:) 243 297.33 T
5 F
(typedef) 216 282.33 T
(enum {) 288 282.33 T
(SERIAL_PARITY_NONE) 252 268.33 T
(= 0,) 396 268.33 T
(SERIAL_PARITY_ODD) 252 254.33 T
(= 1,) 396 254.33 T
(SERIAL_PARITY_EVEN) 252 240.33 T
(= 3,) 396 240.33 T
(SERIAL_PARITY_ONE) 252 226.33 T
(= 5,) 396 226.33 T
(SERIAL_PARITY_MARK) 252 212.33 T
(= 5,) 396 212.33 T
(SERIAL_PARITY_ZERO) 252 198.33 T
(= 7,) 396 198.33 T
(SERIAL_PARITY_SPACE) 252 184.33 T
(= 7) 396 184.33 T
(} SerialParity;) 216 170.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "785" 13
%%Page: "786" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(786) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(SERIAL_FORMA) 180 641.33 T
(T_EXTRA_STOP) 253.33 641.33 T
1 10 Q
-0.36 (If this is set, extra stop-bits will be sent. One stop bit is always) 243 629.33 P
(sent. However) 243 617.33 T
(, if you set this \337ag, an extra 1/2 stop bit will be) 308.37 617.33 T
-0.32 (sent if the word-length is 5 bits long; an extra 1 stop bit will be) 243 605.33 P
(sent if the frame is 6, 7, or 8 bits long.) 243 593.33 T
1 9 Q
(SERIAL_FORMA) 180 574.33 T
(T_LENGTH) 253.33 574.33 T
1 10 Q
-0.76 (This two-bit \336eld holds the length of each data word, minus \336ve) 243 562.33 P
(\050i.e. a \336ve-bit word is represented with a zero, a six-bit word) 243 550.33 T
(with a one\051.) 243 538.33 T
(T) 180 519.33 T
(o \336nd out the current settings of a serial port, call) 185.75 519.33 T
4 F
(SerialGetFormat\050\051) 418.36 519.33 T
1 F
(.) 513.92 519.33 T
(This routine is passed \336ve arguments:) 180 506.33 T
2 F
(u) 180 486.33 T
1 F
(The) 198 486.33 T
4 F
(GeodeHandle) 218.56 486.33 T
1 F
( of the serial-port driver) 288.74 486.33 T
(.) 398.92 486.33 T
2 F
(u) 180 467.33 T
1 F
(The member of the) 198 467.33 T
4 F
(SerialUnit) 288.01 467.33 T
1 F
( enumerated type.) 342.08 467.33 T
2 F
(u) 180 448.33 T
1 F
(A pointer to a) 198 448.33 T
4 F
(SerialFormat) 264.12 448.33 T
1 F
( variable.) 333.57 448.33 T
4 F
(SerialGetFormat\050\051) 379.7 448.33 T
1 F
( will write) 475.26 448.33 T
(the format data to this variable.) 198 436.33 T
2 F
(u) 180 417.33 T
1 F
-0.17 (A pointer to a) 198 417.33 P
4 F
-0.17 (SerialMode) 263.45 417.33 P
1 F
-0.17 ( variable.) 322.71 417.33 P
4 F
-0.17 (SerialGetFormat\050\051) 368.5 417.33 P
1 F
-0.17 ( will write the) 464.06 417.33 P
(appropriate mode constant \050) 198 405.33 T
1 9 Q
(SM_COOKED) 328.19 405.33 T
1 10 Q
(,) 387.86 405.33 T
1 9 Q
(XON/XOFF) 393.42 405.33 T
1 10 Q
(, or) 440.83 405.33 T
1 9 Q
(SM_RARE) 458.61 405.33 T
1 10 Q
(\051 to) 503.27 405.33 T
(this variable.) 198 393.33 T
2 F
(u) 180 374.33 T
1 F
(A pointer to a) 198 374.33 T
4 F
(SerialBaud) 264.12 374.33 T
1 F
( variable.) 322.46 374.33 T
4 F
(SerialFormat\050\051) 368.59 374.33 T
1 F
( will write the) 445.82 374.33 T
(appropriate constant to this variable.) 198 362.33 T
(As with other serial port routines, if the routine is successful, it will return) 180 343.33 T
(zero; if it is unsuccessful, it will return an error code.) 180 330.33 T
-0.22 (If you are using a modem\325) 180 310.33 P
-0.22 (s hardware \337ow control, you will have to con\336gure) 297.79 310.33 P
(the modem appropriately) 180 297.33 T
(. Y) 295.75 297.33 T
(ou can do this by calling) 307.24 297.33 T
4 F
(SerialSetModem\050\051) 421.52 297.33 T
1 F
(.) 514.86 297.33 T
(This routine is passed three arguments:) 180 284.33 T
2 F
(u) 180 264.33 T
1 F
(The) 198 264.33 T
4 F
(GeodeHandle) 218.56 264.33 T
1 F
( of the serial-port driver) 288.74 264.33 T
(.) 398.92 264.33 T
2 F
(u) 180 245.33 T
1 F
(The member of the) 198 245.33 T
4 F
(SerialUnit) 288.01 245.33 T
1 F
( enumerated type.) 342.08 245.33 T
2 F
(u) 180 226.33 T
1 F
(A record of type) 198 226.33 T
4 F
(SerialModem) 273.73 226.33 T
1 F
(. This record has four \336elds:) 342.62 226.33 T
1 9 Q
(SERIAL_MODEM_OUT2) 198 214.33 T
1 10 Q
(,) 304.67 214.33 T
1 9 Q
(SERIAL_MODEM_OUT1) 310.23 214.33 T
1 10 Q
(,) 416.9 214.33 T
1 9 Q
(SERIAL_MODEM_RTS) 422.46 214.33 T
1 10 Q
(,) 521.95 214.33 T
(and) 198 202.33 T
1 9 Q
( SERIAL_MODEM_DTR) 215.41 202.33 T
1 10 Q
(. Set these \336elds to indicate how the) 318.74 202.33 T
(control-bits should be set.) 198 190.33 T
(T) 180 171.33 T
(o \336nd out what \337ow control is being used, call) 185.75 171.33 T
4 F
(SerialGetModem\050\051) 399.3 171.33 T
1 F
(. This) 494.3 171.33 T
(routine is passed three arguments:) 180 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "786" 14
%%Page: "787" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using the Serial Ports) 412.51 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(787) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The) 198 641.33 T
4 F
(GeodeHandle) 218.56 641.33 T
1 F
( of the serial-port driver) 288.74 641.33 T
(.) 398.92 641.33 T
2 F
(u) 180 622.33 T
1 F
(The member of the) 198 622.33 T
4 F
(SerialUnit) 288.01 622.33 T
1 F
( enumerated type.) 342.08 622.33 T
2 F
(u) 180 603.33 T
1 F
-0.67 (A pointer to a record of type) 198 603.33 P
4 F
-0.69 (SerialModem) 325.15 603.33 P
1 F
-0.67 (.) 394.04 603.33 P
4 F
-0.69 (SerialGetModem\050\051) 398.92 603.33 P
1 F
-0.67 ( will set) 493.92 603.33 P
(this record\325) 198 591.33 T
(s) 249.29 591.33 T
1 9 Q
(SERIAL_MODEM_OUT2) 256.7 591.33 T
1 10 Q
(,) 363.37 591.33 T
1 9 Q
(SERIAL_MODEM_OUT1) 368.93 591.33 T
1 10 Q
(,) 475.6 591.33 T
1 9 Q
(SERIAL_MODEM_RTS) 198 579.33 T
1 10 Q
(, and) 297.49 579.33 T
1 9 Q
( SERIAL_MODEM_DTR) 320.46 579.33 T
1 10 Q
( bits appropriately) 423.79 579.33 T
(.) 508.25 579.33 T
-0.46 (Y) 180 560.33 P
-0.46 (ou can also set the \337ow control without setting the other format options. Do) 185.93 560.33 P
(this by calling) 180 547.33 T
4 F
(SerialSetFlowControl\050\051) 247.98 547.33 T
1 F
(. This routine is passed the) 368.92 547.33 T
(following arguments:) 180 534.33 T
2 F
(u) 180 514.33 T
1 F
(The) 198 514.33 T
4 F
(GeodeHandle) 218.56 514.33 T
1 F
( of the serial-port driver) 288.74 514.33 T
(.) 398.92 514.33 T
2 F
(u) 180 495.33 T
1 F
(The member of the) 198 495.33 T
4 F
(SerialUnit) 288.01 495.33 T
1 F
( enumerated type.) 342.08 495.33 T
2 F
(u) 180 476.33 T
1 F
(A record of type) 198 476.33 T
4 F
(SerialModem) 273.73 476.33 T
1 F
(. This record has four \336elds:) 342.62 476.33 T
1 9 Q
(SERIAL_MODEM_OUT2) 198 464.33 T
1 10 Q
(,) 304.67 464.33 T
1 9 Q
(SERIAL_MODEM_OUT1) 310.23 464.33 T
1 10 Q
(,) 416.9 464.33 T
1 9 Q
(SERIAL_MODEM_RTS) 422.46 464.33 T
1 10 Q
(,) 521.95 464.33 T
(and) 198 452.33 T
1 9 Q
( SERIAL_MODEM_DTR) 215.41 452.33 T
1 10 Q
(. Set these \336elds to indicate how the) 318.74 452.33 T
(control-bits should be set.) 198 440.33 T
2 F
(u) 180 421.33 T
1 F
-0.22 (A member of the) 198 421.33 P
4 F
-0.22 (SerialMode) 276.59 421.33 P
1 F
-0.22 ( enumerated type, set to indicate the level) 335.85 421.33 P
(of \337ow control:) 198 409.33 T
1 9 Q
(SM_COOKED) 268.37 409.33 T
1 10 Q
( to indicate) 328.04 409.33 T
1 9 Q
(XON/XOFF) 382.31 409.33 T
1 10 Q
( \337ow control with) 430.83 409.33 T
(characters stripped to seven bits,) 198 397.33 T
1 9 Q
(SM_RARE) 353.75 397.33 T
1 10 Q
( to indicate) 398.41 397.33 T
1 9 Q
(XON/XOFF) 452.68 397.33 T
1 10 Q
( \337ow) 501.2 397.33 T
-0.56 (control but incoming characters left alone, or) 198 385.33 P
1 9 Q
-0.5 (SM_RA) 404.29 385.33 P
-0.5 (W) 435.12 385.33 P
1 10 Q
-0.56 ( to indicate no \337ow) 443.95 385.33 P
(control.) 198 373.33 T
2 F
(u) 180 354.33 T
1 F
(A record of type) 198 354.33 T
4 F
(SerialModemStatus) 273.73 354.33 T
1 F
( to indicate which lines \050chosen) 375.77 354.33 T
(from) 198 342.33 T
1 9 Q
(DCD) 222.44 342.33 T
1 10 Q
(,) 242.94 342.33 T
1 9 Q
(DSR) 248.5 342.33 T
1 10 Q
(, and) 267.67 342.33 T
1 9 Q
(CTS) 293.42 342.33 T
1 10 Q
(\051 should be used to control outgoing data \050if) 311.59 342.33 T
(hardware \337ow control is selected\051. When one of the selected lines is) 198 330.33 T
-0.46 (de-asserted by the remote system, the serial driver will not transmit any) 198 318.33 P
(more data until the state changes.) 198 306.33 T
0 14 Q
(21.2.2) 123.08 265 T
0 18 Q
(Communicating) 180 265 T
5 10 Q
(SerialRead\050\051, SerialReadByte\050\051, SerialWrite\050\051,) 180 241.33 T
(SerialWriteByte\050\051, SerialQuery\050\051, SerialFlush\050\051) 180 228.33 T
1 F
-0.25 (Communicating with a serial port is very much like using any other stream.) 180 208.33 P
(Special versions of the stream routines are provided, but they function just) 180 195.33 T
(like their stream counterparts.) 180 182.33 T
(T) 180 162.33 T
(o read data from a serial port, call) 185.75 162.33 T
4 F
(SerialRead\050\051) 345.78 162.33 T
1 F
( or) 411.16 162.33 T
4 F
(SerialReadByte\050\051) 426.16 162.33 T
1 F
(.) 515.43 162.33 T
-0.22 (These routines take the same arguments as their) 180 149.33 P
4 F
-0.23 (Stream\311\050\051) 408.47 149.33 P
1 F
-0.22 ( counterparts,) 463.85 149.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "787" 15
%%Page: "788" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(788) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.13 (except that each one must be passed the handle of the Serial Driver) 180 641.33 P
-0.13 (, not the) 490.28 641.33 P
(Stream Driver) 180 628.33 T
(, and each routine is passed the) 246.3 628.33 T
4 F
(SerialUnit) 394.84 628.33 T
1 F
( for the) 448.91 628.33 T
(appropriate port, instead of being passed a stream token. These routines) 180 615.33 T
(behave exactly like their) 180 602.33 T
4 F
(Stream\311\050\051) 296.32 602.33 T
1 F
( counterparts.) 351.7 602.33 T
(T) 180 582.33 T
(o write data to a serial port, call) 185.75 582.33 T
4 F
(SerialW) 336.53 582.33 T
(rite\050\051) 376.72 582.33 T
1 F
( or) 403.39 582.33 T
4 F
(SerialW) 418.39 582.33 T
(riteByte\050\051) 458.58 582.33 T
1 F
(.) 509.14 582.33 T
(Again, these routines behave like their) 180 569.33 T
4 F
(Stream\311\050\051) 362.25 569.33 T
1 F
( counterparts, and take) 417.63 569.33 T
(similar arguments.) 180 556.33 T
(T) 180 536.33 T
(o \336nd out if you can read or write data to the port, call) 185.75 536.33 T
4 F
(SerialQuery\050\051) 438.93 536.33 T
1 F
(.) 509.86 536.33 T
-0.73 (Again, this routine behaves like its) 180 523.33 P
4 F
-0.75 (Stream\311\050\051) 340.12 523.33 P
1 F
-0.73 ( equivalent. T) 395.5 523.33 P
-0.73 (o \337ush any data) 457.04 523.33 P
(from the input or output stream, call) 180 510.33 T
4 F
(SerialFlush\050\051) 352.79 510.33 T
1 F
(.) 420.94 510.33 T
0 14 Q
(21.2.3) 123.08 468 T
0 18 Q
(Closing a Serial Port) 180 468 T
5 10 Q
(SerialClose\050\051, SerialCloseWithoutReset\050\051) 180 444.33 T
1 F
(T) 180 424.33 T
(o close a serial port, call the routine) 185.75 424.33 T
4 F
(SerialClose\050\051) 353.55 424.33 T
1 F
(. This routine is passed) 420.41 424.33 T
(three arguments:) 180 411.33 T
2 F
(u) 180 391.33 T
1 F
(The) 198 391.33 T
4 F
(GeodeHandle) 218.56 391.33 T
1 F
( of the serial-port driver) 288.74 391.33 T
(.) 398.92 391.33 T
2 F
(u) 180 372.33 T
1 F
(The member of the) 198 372.33 T
4 F
(SerialUnit) 288.01 372.33 T
1 F
( enumerated type.) 342.08 372.33 T
2 F
(u) 180 353.33 T
1 F
-0.34 (Either) 198 353.33 P
1 9 Q
-0.31 (STREAM_LINGER) 230.25 353.33 P
1 10 Q
-0.34 ( \050to instruct the kernel to close the port after all) 311.41 353.33 P
(outgoing data in the buffer has been sent\051, or) 198 341.33 T
1 9 Q
(STREAM_DISCARD) 408.95 341.33 T
1 10 Q
( \050to) 495.94 341.33 T
(instruct the kernel to close the port right away and discard all buffered) 198 329.33 T
(data\051.) 198 317.33 T
-0.71 (This function returns immediately whether the port was closed right away or) 180 298.33 P
-0.49 (not. However) 180 285.33 P
-0.49 (, if) 240.25 285.33 P
1 9 Q
-0.44 (STREAM_LINGER) 254.08 285.33 P
1 10 Q
-0.49 ( is speci\336ed, the port may not be re-opened) 335.24 285.33 P
(until all the data in the Serial Port\325) 180 272.33 T
(s buffer has been dealt with.) 343.01 272.33 T
(Y) 180 252.33 T
(ou can also instruct the serial driver to close the stream to a port, without) 185.93 252.33 T
-0.22 (actually resetting the port. Do this by calling) 180 239.33 P
4 F
-0.23 (SerialCloseW) 388.44 239.33 P
-0.23 (ithoutReset\050\051) 456.96 239.33 P
1 F
-0.22 (.) 525.66 239.33 P
(This routine is passed the same arguments as) 180 226.33 T
4 F
(SerialClose\050\051) 394.85 226.33 T
1 F
(.) 461.71 226.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "788" 16
%%Page: "789" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using the Parallel Ports) 400.84 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(789) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(21.3) 134.76 632 T
0 24 Q
(Using the Parallel Ports) 180 632 T
1 10 Q
(Using a parallel port is simpler than using a serial port since data goes in) 180 606.33 T
(only one direction.) 180 593.33 T
1 9 Q
(GEOS) 267.78 593.33 T
1 10 Q
( does not currently support reading data from a) 293.95 593.33 T
(parallel port.) 180 580.33 T
-0.25 (Parallel ports are used primarily for printing, which is handled by the Spool) 180 560.33 P
-0.63 (Object Library) 180 547.33 P
-0.63 (. The information in this section is useful only to programmers) 245.86 547.33 P
(whose applications will need to send data out through the parallel port) 180 534.33 T
-0.83 (without using the spooler) 180 521.33 P
-0.83 (. Most applications, however) 294.37 521.33 P
-0.83 (, will use the spooler for) 422.82 521.33 P
(any and all parallel port use.) 180 508.33 T
0 14 Q
(21.3.1) 123.08 466 T
0 18 Q
(Initializing a Parallel Port) 180 466 T
5 10 Q
(ParallelOpen\050\051) 180 442.33 T
1 F
(T) 180 422.33 T
(o open a parallel port, call the routine) 185.75 422.33 T
4 F
(ParallelOpen\050\051) 363 422.33 T
1 F
(. This routine is) 439.67 422.33 T
(passed the following arguments:) 180 409.33 T
2 F
(u) 180 389.33 T
1 F
(The) 198 389.33 T
4 F
(GeodeHandle) 218.56 389.33 T
1 F
( of the parallel-port driver) 288.74 389.33 T
(.) 408.74 389.33 T
2 F
(u) 180 370.33 T
1 F
(A member of the) 198 370.33 T
4 F
(ParallelUnit) 277.45 370.33 T
1 F
( enumerated type; this speci\336es which) 341.89 370.33 T
(parallel port is being opened. The type\325) 198 358.33 T
(s members are) 377.29 358.33 T
1 9 Q
(P) 447.67 358.33 T
(ARALLEL_LPT1) 453.01 358.33 T
1 10 Q
(,) 524.52 358.33 T
1 9 Q
(P) 198 346.33 T
(ARALLEL_LPT2) 203.34 346.33 T
1 10 Q
(,) 274.85 346.33 T
1 9 Q
(P) 280.41 346.33 T
(ARALLEL_LPT3) 285.75 346.33 T
1 10 Q
(, and) 357.26 346.33 T
1 9 Q
(P) 383.01 346.33 T
(ARALLEL_COM4) 388.35 346.33 T
1 10 Q
(.) 463.85 346.33 T
2 F
(u) 180 327.33 T
1 F
-0.23 (A member of the) 198 327.33 P
4 F
-0.24 (StreamOpenFlags) 276.51 327.33 P
1 F
-0.23 (enumerated type, indicating what) 372.29 327.33 P
(to do if the requested parallel port is busy \050either) 198 315.33 T
1 9 Q
-0.74 (STREAM_OPEN_NO_BLOCK) 198 303.33 P
1 10 Q
-0.82 (, indicating that the routine should return an) 325.34 303.33 P
(error immediately; or) 198 291.33 T
1 9 Q
(STREAM_OPEN_TIMEOUT) 299.67 291.33 T
1 10 Q
(, indicating that the) 419.25 291.33 T
-0.64 (routine should wait a speci\336ed number of clock ticks to see if the port will) 198 279.33 P
(free up\051.) 198 267.33 T
2 F
(u) 180 248.33 T
1 F
-0.04 (The unit number of the parallel port in question\321this is a value of type) 198 248.33 P
4 F
(ParallelPortNums) 198 236.33 T
1 F
(.) 292.26 236.33 T
2 F
(u) 180 217.33 T
1 F
(The total size of the stream to be used as an output buffer) 198 217.33 T
(, in bytes.) 464.52 217.33 T
2 F
(u) 180 198.33 T
1 F
(The maximum number of ticks to wait for the parallel port to become) 198 198.33 T
(available \050if) 198 186.33 T
1 9 Q
(STREAM_OPEN_TIMEOUT) 255.43 186.33 T
1 10 Q
( was passed\051.) 375.93 186.33 T
-0.81 (A \337ag is returned to indicate whether the parallel port could be opened; if not,) 180 167.33 P
(a value of type) 180 154.33 T
4 F
(StreamError) 250.2 154.33 T
1 F
( will be returned to indicate the reason.) 317.07 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "789" 17
%%Page: "790" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(790) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Possible stream error values are) 180 641.33 T
1 9 Q
(STREAM_BUFFER_TOO_LARGE) 332.24 641.33 T
1 10 Q
( and) 476.74 641.33 T
1 9 Q
-0.71 (STREAM_CANNOT_CREA) 180 628.33 P
-0.71 (TE) 294.83 628.33 P
1 10 Q
-0.79 (, and the additional values) 307.33 628.33 P
1 9 Q
-0.71 (STREAM_NO_DEVICE) 429.35 628.33 P
1 10 Q
-0.5 (\050if the parallel port does not exist\051 or) 180 615.33 P
1 9 Q
-0.45 (STREAM_DEVICE_IN_USE) 348.05 615.33 P
1 10 Q
-0.5 ( \050if the device) 468.37 615.33 P
(is busy and the) 180 602.33 T
4 F
(StreamOpenFlags) 252.98 602.33 T
1 F
( passed indicate not to wait \050or not to) 346.13 602.33 T
(wait any longer\051\051.) 180 589.33 T
-0.36 (Note that when using the parallel driver) 180 569.33 P
-0.36 (, you do not identify the stream by a) 364.55 569.33 P
(stream token but rather by the parallel port number) 180 556.33 T
(, known as a) 421.7 556.33 T
3 F
(unit) 482.28 556.33 T
(number) 180 543.33 T
1 F
(. When accessing a parallel port, you simply pass the port\325) 214.81 543.33 T
(s unit) 482.62 543.33 T
(number along with either) 180 530.33 T
1 9 Q
(STREAM_READ) 300.94 530.33 T
1 10 Q
( \050if reading from the stream\051 or) 371.6 530.33 T
1 9 Q
(STREAM_WRITE) 180 517.33 T
1 10 Q
( \050if writing to the stream\051; because each port has two) 255.65 517.33 T
(streams associated with it, you must specify both parameters. The parallel) 180 504.33 T
(driver will understand which stream you are accessing.) 180 491.33 T
-0.69 (Once the port is selected, the PC will assert the) 180 471.33 P
1 9 Q
-0.62 (SLCTIN) 395.03 471.33 P
1 10 Q
-0.69 ( signal, which usually) 430.2 471.33 P
(will place the device on-line.) 180 458.33 T
0 14 Q
(21.3.2) 123.08 416 T
0 18 Q
(Communicating) 180 416 T
5 10 Q
(ParallelWrite\050\051, ParallelWriteByte\050\051) 180 392.33 T
1 F
-0.02 (W) 180 372.33 P
-0.02 (riting to a parallel port is much like writing to any other stream. T) 189.26 372.33 P
-0.02 (o write) 496.23 372.33 P
-0.62 (data, call) 180 359.33 P
4 F
-0.63 (ParallelW) 224.16 359.33 P
-0.63 (rite\050\051) 274.72 359.33 P
1 F
-0.62 ( or) 301.39 359.33 P
4 F
-0.63 (ParallelW) 315.16 359.33 P
-0.63 (riteByte\050\051) 365.72 359.33 P
1 F
-0.62 (. These routines take the) 416.28 359.33 P
-0.82 (same arguments as their) 180 346.33 P
4 F
-0.85 (Stream\311\050\051) 294.69 346.33 P
1 F
-0.82 ( components, except that each one must) 350.07 346.33 P
-0.25 (be passed the handle of the Parallel Driver) 180 333.33 P
-0.25 (, not the Stream Driver) 375.69 333.33 P
-0.25 (, and each) 482.11 333.33 P
-0.5 (routine is passed the) 180 320.33 P
4 F
-0.52 (ParallelUnit) 276.88 320.33 P
1 F
-0.5 ( for the appropriate port, instead of being) 341.32 320.33 P
-0.35 (passed a stream token. These routines behave exactly like their) 180 307.33 P
4 F
-0.36 (Stream\311\050\051) 473.19 307.33 P
1 F
(counterparts.) 180 294.33 T
0 14 Q
(21.3.3) 123.08 252 T
0 18 Q
(Closing a Parallel Port) 180 252 T
5 10 Q
(ParallelClose\050\051) 180 228.33 T
1 F
(T) 180 208.33 T
(o close a parallel port,) 185.75 208.33 T
4 F
(ParallelClose\050\051) 290.03 208.33 T
1 F
(. This routine takes the following) 367.26 208.33 T
(arguments:) 180 195.33 T
2 F
(u) 180 175.33 T
1 F
(The) 198 175.33 T
4 F
(GeodeHandle) 218.56 175.33 T
1 F
( of the parallel-port driver) 288.74 175.33 T
(.) 408.74 175.33 T
2 F
(u) 180 156.33 T
1 F
(The member of the) 198 156.33 T
4 F
(ParallelUnit) 288.01 156.33 T
1 F
( enumerated type.) 352.45 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "790" 18
%%Page: "791" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using the Parallel Ports) 400.84 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(791) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(21.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
-0.34 (Either) 198 641.33 P
1 9 Q
-0.31 (STREAM_LINGER) 230.25 641.33 P
1 10 Q
-0.34 ( \050to instruct the kernel to close the port after all) 311.41 641.33 P
(outgoing data in the buffer has been sent\051, or) 198 629.33 T
1 9 Q
(STREAM_DISCARD) 408.95 629.33 T
1 10 Q
( \050to) 495.94 629.33 T
(instruct the kernel to close the port right away and discard all buffered) 198 617.33 T
(data\051.) 198 605.33 T
-0.71 (This function returns immediately whether the port was closed right away or) 180 586.33 P
-0.49 (not. However) 180 573.33 P
-0.49 (, if) 240.25 573.33 P
1 9 Q
-0.44 (STREAM_LINGER) 254.08 573.33 P
1 10 Q
-0.49 ( is speci\336ed, the port may not be re-opened) 335.24 573.33 P
(until all the data in the parallel port\325) 180 560.33 T
(s buffer has been dealt with.) 350.23 560.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "791" 19
%%Page: "792" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Streams) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(792) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(21.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "792" 20
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 20
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%EOF
