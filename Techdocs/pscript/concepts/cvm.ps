%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 23 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
7 0 /Times-Roman FMFONTDEFINE
8 0 /Times-Italic FMFONTDEFINE
9 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "673" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Design Philosophy) 431.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(673) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(Most disk-operating systems provide minimal \336le functionality) 180 610.3 T
(. A \336le is) 469.47 610.3 T
-0.61 (simply treated as a sequence of bytes; applications can copy data from \336les to) 180 597.3 P
-0.82 (memory or vice versa, but nothing more elaborate.) 180 584.3 P
1 9 Q
-0.74 (GEOS) 409.03 584.3 P
1 10 Q
-0.82 ( provides much more) 435.2 584.3 P
(elaborate functionality with its) 180 571.3 T
3 F
(V) 326.14 571.3 T
(irtual Memory) 332.56 571.3 T
1 F
( \336les.) 399.02 571.3 T
(V) 180 551.3 T
(irtual Memory \050) 186.78 551.3 T
1 9 Q
(VM) 260.11 551.3 T
1 10 Q
(\051 is very useful for two reasons. First, it is often) 275.1 551.3 T
(impractical to read an entire disk \336le into contiguous memory; indeed, it is) 180 538.3 T
(impossible to do so if the \336le is larger than 64K. The use of virtual memory) 180 525.3 T
(allows each \336le to grow arbitrarily large. Second, each disk \336le is one long,) 180 512.3 T
-0.27 (cumbersome stream of data. By using virtual memory \336les, applications can) 180 499.3 P
(break \336les down into smaller) 180 486.3 T
(, more manageable blocks which the memory) 313.36 486.3 T
(manager can handle more ef\336ciently) 180 473.3 T
(.) 347.6 473.3 T
(Before you read this chapter) 180 453.3 T
(, you should have read \322Handles,\323 Chapter) 310.55 453.3 T
(14,) 509.83 453.3 T
(and \322Memory Management,\323 Chapter) 180 440.3 T
(15. Y) 356.12 440.3 T
(ou should also be familiar with) 378.73 440.3 T
(the) 180 427.3 T
1 9 Q
(GEOS) 197.78 427.3 T
1 10 Q
( \336le system; you should have at least skimmed \322File System,\323) 223.95 427.3 T
(Chapter) 180 414.3 T
(17, although you need not have read it in depth.) 220.74 414.3 T
0 14 Q
(18.1) 134.76 361.97 T
0 24 Q
(Design Philosophy) 180 361.97 T
1 10 Q
(The) 180 336.3 T
1 9 Q
(GEOS) 200.56 336.3 T
1 10 Q
( V) 226.73 336.3 T
(irtual Memory \336le management system is designed to provide) 236.29 336.3 T
-0.2 (features not easily available with standard \336le systems. Designed primarily) 180 323.3 P
(for use by applications for long-term data storage, it is also used by the) 180 310.3 T
-0.1 (system for many other purposes, such as to provide state saving \050in the UI\051.) 180 297.3 P
(The main bene\336ts it provides to applications include the following:) 180 284.3 T
2 F
(u) 180 264.3 T
1 F
(Convenient \336le structure) 198 264.3 T
1 9 Q
-0.3 (GEOS) 198 252.3 P
1 10 Q
-0.34 ( divides) 224.17 252.3 P
1 9 Q
-0.3 (VM) 261.84 252.3 P
1 10 Q
-0.34 ( \336les into) 276.83 252.3 P
1 9 Q
-0.3 (VM) 321.2 252.3 P
1 10 Q
-0.34 ( blocks, each of which is accessed via a) 336.2 252.3 P
1 9 Q
-0.3 (VM) 513.56 252.3 P
1 10 Q
(block handle. This structure is much like a \322disk-based heap,\323 and is) 198 240.3 T
(analogous to \050and compatible with\051 the memory heap.) 198 228.3 T
1 9 Q
(VM) 448.78 228.3 T
1 10 Q
( blocks are) 463.77 228.3 T
-0.04 (accessed the same way whether they are on disk or resident in memory) 198 216.3 P
-0.04 (.) 525.48 216.3 P
(They can be independently resized and locked.) 198 204.3 T
2 F
(u) 180 185.3 T
1 F
(Ease of \336le manipulation) 198 185.3 T
(Many \336le manipulation techniques are much simpler with) 198 173.3 T
1 9 Q
(VM) 469.88 173.3 T
1 10 Q
( \336les. For) 484.87 173.3 T
(example, geodes do not have to keep track of which blocks they have) 198 161.3 T
(changed; instead, when they change a block, they mark it as dirty) 198 149.3 T
(, and) 500.83 149.3 T
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 403.1 171 459.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 X
0 0 0 1 0 0 0 K
90 450 13.5 13.5 101.25 435.3 G
4 H
0 Z
90 450 13.5 13.5 101.25 435.3 A
0 0 0 1 0 0 0 K
81 415.18 121.5 455.68 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "673" 1
%%Page: "674" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(674) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(when they update the \336le, the virtual memory routines will) 198 641.33 T
(automatically copy just the changed blocks to the disk.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
(Sharing of Data Files) 198 610.33 T
1 9 Q
(GEOS) 198 598.33 T
1 10 Q
( maintains information about each) 224.17 598.33 T
1 9 Q
(VM) 386.98 598.33 T
1 10 Q
( \336le and knows when more) 401.98 598.33 T
(than one thread is using it. This allows the system to notify all users) 198 586.33 T
(when one thread has modi\336ed a \336le. The system provides data) 198 574.33 T
(synchronization for individual blocks.) 198 562.33 T
2 F
(u) 180 543.33 T
1 F
(Integrity of Data Files) 198 543.33 T
1 9 Q
(GEOS) 198 531.33 T
1 10 Q
( provides several features to protect the integrity of) 224.17 531.33 T
1 9 Q
(VM) 464.36 531.33 T
1 10 Q
( \336les. For) 479.36 531.33 T
-0.49 (example, you can request that) 198 519.33 P
1 9 Q
-0.44 (GEOS) 337.6 519.33 P
1 10 Q
-0.49 ( maintain a backup that can be used) 363.77 519.33 P
-0.12 (to restore the \336le to its last-saved state. In addition, you can have) 198 507.33 P
1 9 Q
-0.11 (GEOS) 502.17 507.33 P
1 10 Q
-0.09 (do all writing to the \336le synchronously to ensure that all the data in the) 198 495.33 P
(\336le stays consistent even if) 198 483.33 T
1 9 Q
(GEOS) 325.05 483.33 T
1 10 Q
( is somehow interrupted.) 351.22 483.33 T
2 F
(u) 180 464.33 T
1 F
(Uniform File Structure) 198 464.33 T
-0.56 (Because all) 198 452.33 P
1 9 Q
-0.51 (GEOS) 252.26 452.33 P
1 10 Q
-0.56 ( data \336les are based on) 278.43 452.33 P
1 9 Q
-0.51 (VM) 383.98 452.33 P
1 10 Q
-0.56 ( \336les, utilities can be written) 398.97 452.33 P
(which work for all) 198 440.33 T
1 9 Q
(VM) 284.49 440.33 T
1 10 Q
( \336les. For example, the Document Control objects) 299.48 440.33 T
(can take care of opening, closing, and saving all data \336les which are) 198 428.33 T
(based on) 198 416.33 T
1 9 Q
(VM) 241.16 416.33 T
1 10 Q
( \336les. Furthermore, data structures can be designed which) 256.15 416.33 T
(can be added at will into any) 198 404.33 T
1 9 Q
(VM) 333.78 404.33 T
1 10 Q
( \336le.) 348.77 404.33 T
0 14 Q
(18.2) 134.76 353 T
0 24 Q
(VM Structure) 180 353 T
1 10 Q
(V) 180 327.33 T
(irtual memory can be thought of as a heap stored in a disk \336le. Like the) 186.78 327.33 T
-0.05 (global heap, it is divided into blocks which are 64K or smaller; each block is) 180 314.33 P
(accessed via a handle. Blocks can be locked, which brings them into main) 180 301.33 T
-0.1 (memory) 180 288.33 P
-0.1 (. If blocks are modi\336ed while in memory) 216.48 288.33 P
-0.1 (, they are copied back to the) 399.67 288.33 P
(\336le when the \336le is updated.) 180 275.33 T
-0.67 (The primary component of virtual memory is the) 180 255.33 P
1 9 Q
-0.6 (VM) 402.8 255.33 P
1 10 Q
-0.67 ( \336le. The) 417.79 255.33 P
1 9 Q
-0.6 (VM) 458.94 255.33 P
1 10 Q
-0.67 ( \336le consists) 473.93 255.33 P
-0.13 (of a) 180 242.33 P
1 9 Q
-0.12 (VM) 199.18 242.33 P
1 10 Q
-0.13 ( File Header) 214.18 242.33 P
-0.13 (, a collection of) 270.77 242.33 P
1 9 Q
-0.12 (VM) 341.36 242.33 P
1 10 Q
-0.13 ( blocks, and a special structure called) 356.35 242.33 P
-0.54 (a) 180 229.33 P
1 9 Q
-0.49 (VM) 187.8 229.33 P
1 10 Q
-0.54 ( Header) 202.79 229.33 P
-0.54 (. The) 238.35 229.33 P
1 9 Q
-0.49 (VM) 263.39 229.33 P
1 10 Q
-0.54 ( File Header is a standard) 278.38 229.33 P
1 9 Q
-0.49 (GEOS) 398.85 229.33 P
1 10 Q
-0.54 ( \336le header) 425.02 229.33 P
-0.54 (, containing) 474.86 229.33 P
(the \336le\325) 180 216.33 T
(s extended attributes and system bookkeeping information. Geodes) 213.71 216.33 T
(may not access it directly; instead, they can make calls to the) 180 203.33 T
3 F
(extended) 465.42 203.33 T
-0.6 (attributes) 180 190.33 P
1 F
-0.6 ( routines to access data in the header) 224.62 190.33 P
-0.6 (. \050See section 17.5.3 of chapter) 391.95 190.33 P
-0.16 (17.\051 The) 180 177.33 P
1 9 Q
-0.14 (VM) 220.25 177.33 P
1 10 Q
-0.16 ( blocks and the) 235.24 177.33 P
1 9 Q
-0.14 (VM) 306.85 177.33 P
1 10 Q
-0.16 ( Header do not occupy \336xed places in the \336le.) 321.84 177.33 P
-0.37 (In particular) 180 164.33 P
-0.37 (, the) 238.33 164.33 P
1 9 Q
-0.33 (VM) 260.94 164.33 P
1 10 Q
-0.37 ( Header does not necessarily come before all the blocks.) 275.93 164.33 P
(Instead, the) 180 151.33 T
1 9 Q
(VM) 238.34 151.33 T
1 10 Q
( File Header stores the offset within the \336le to the) 253.33 151.33 T
1 9 Q
(VM) 487.06 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "674" 2
%%Page: "675" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Structure) 470.88 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(675) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Header) 180 641.33 T
(, and the) 213.33 641.33 T
1 9 Q
(VM) 256.86 641.33 T
1 10 Q
( Header stores information about the blocks \050such as) 271.85 641.33 T
-0.28 (their locations in the \336le\051. Furthermore, the blocks in a) 180 628.33 P
1 9 Q
-0.25 (VM) 434.5 628.33 P
1 10 Q
-0.28 ( \336le are arranged) 449.5 628.33 P
(in no particular order; they are not necessarily arranged in the order they) 180 615.33 T
-0.18 (were created, or in any other sequence. See Figure) 180 602.33 P
-0.18 (18-) 414.48 602.33 P
-0.18 (1 below for a diagram) 428.92 602.33 P
(of a) 180 589.33 T
1 9 Q
(VM) 199.45 589.33 T
1 10 Q
( \336le.) 214.44 589.33 T
-0.72 (The) 180 569.33 P
1 9 Q
-0.65 (VM) 199.84 569.33 P
1 10 Q
-0.72 ( Header maintains all the bookkeeping information about the) 214.83 569.33 P
1 9 Q
-0.65 (VM) 494.85 569.33 P
1 10 Q
-0.72 ( \336le.) 509.85 569.33 P
-0.58 (For example, it contains the) 180 556.33 P
1 9 Q
-0.52 (VM) 309.55 556.33 P
1 10 Q
-0.58 ( Block T) 324.54 556.33 P
-0.58 (able. The block table is much like the) 360.74 556.33 P
(global handle table. Block handles are offsets into the block handle table; a) 180 543.33 T
(block\325) 180 530.33 T
(s entry in the table contains information about the block, such as the) 205.75 530.33 T
-0.74 (block\325) 180 517.33 P
-0.74 (s location in the \336le. Usually) 205.75 517.33 P
-0.74 (, the Block T) 333.21 517.33 P
-0.74 (able contains entries for blocks) 388.92 517.33 P
-0.22 (that haven\325) 180 504.33 P
-0.22 (t been created yet; when all of these handles have been used, the) 232.02 504.33 P
1 9 Q
-0.15 (VM) 180 491.33 P
1 10 Q
-0.17 ( Manager expands the block table. For details, see section 18.2.3 on page) 194.99 491.33 P
(677.) 180 478.33 T
0 14 Q
(18.2.1) 123.08 436 T
0 18 Q
(The VM Manager) 180 436 T
1 10 Q
(The) 180 412.33 T
1 9 Q
(VM) 200.56 412.33 T
1 10 Q
( manager can be thought of as a memory manager for a disk-based) 215.55 412.33 T
-0.47 (heap, providing all the services a memory manager would and more. The) 180 399.33 P
1 9 Q
-0.42 (VM) 513.69 399.33 P
1 10 Q
(manager provides for allocation, use, and deallocation of virtual memory) 180 386.33 T
-0.35 (blocks. It manages the Block T) 180 373.33 P
-0.35 (able, enlarging it as necessary when more) 319.51 373.33 P
1 9 Q
-0.31 (VM) 513.58 373.33 P
1 10 Q
-0.76 (block handles are needed. It keeps track of which) 180 360.33 P
1 9 Q
-0.69 (VM) 403.32 360.33 P
1 10 Q
-0.76 ( blocks have been loaded) 418.32 360.33 P
(into memory) 180 347.33 T
(, which are currently in use, and which have been \322dirtied\323) 237.41 347.33 T
-0.77 (\050modi\336ed\051 since they were read from the disk; it also keeps track of how many) 180 334.33 P
81 144 531 648 C
180 144 531 323.5 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 191.33 T
(18-) 213.34 191.33 T
(1) 227.79 191.33 T
3 F
(Structure of a) 236.13 191.33 T
3 9 Q
(VM) 302.23 191.33 T
3 10 Q
( File) 317.06 191.33 T
(The) 180 177.33 T
3 9 Q
(VM) 200.18 177.33 T
3 10 Q
( File Header contains information about the) 215.01 177.33 T
3 9 Q
(VM) 419.23 177.33 T
3 10 Q
( \336le and the offset to) 434.06 177.33 T
-0.69 (the) 180 165.33 P
3 9 Q
-0.62 (VM) 196.16 165.33 P
3 10 Q
-0.69 ( Header; the) 210.99 165.33 P
3 9 Q
-0.62 (VM) 267.6 165.33 P
3 10 Q
-0.69 ( Header contains information about the) 282.44 165.33 P
3 9 Q
-0.62 (VM) 461.95 165.33 P
3 10 Q
-0.69 ( Blocks and) 476.79 165.33 P
(their offsets.) 180 153.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
183.78 221.06 235.43 296.11 R
7 X
V
0.5 H
0 Z
0 X
N
235.43 221.06 282.21 296.11 R
7 X
V
0 X
N
455.31 221.06 490.55 296.11 R
7 X
V
0 X
N
419.25 221.06 455.31 296.11 R
7 X
V
0 X
N
384.29 221.06 419.25 296.11 R
7 X
V
0 X
N
317.45 221.06 384.29 296.11 R
7 X
V
0 X
N
282.21 221.06 317.45 296.11 R
7 X
V
0 X
N
3 9 Q
(VM) 251.4 280.61 T
3 10 Q
(Block) 246.04 270.61 T
3 9 Q
(VM) 292.42 280.61 T
3 10 Q
(Block) 287.06 270.61 T
3 9 Q
(VM) 394.36 280.61 T
3 10 Q
(Block) 389 270.61 T
3 9 Q
(VM) 429.87 280.61 T
3 10 Q
(Block) 424.51 270.61 T
3 9 Q
(VM) 465.52 280.61 T
3 10 Q
(Block) 460.16 270.61 T
3 9 Q
(VM) 325.32 274.58 T
3 10 Q
( Header) 340.15 274.58 T
3 9 Q
(VM) 191.91 280.61 T
3 10 Q
( File) 206.74 280.61 T
(Header) 192.85 270.61 T
322.7 307.09 317.45 298 312.2 307.09 317.45 307.09 4 Y
3 X
V
208.86 296.11 208.86 318 317.45 318 317.45 307.09 4 L
3 H
2 Z
N
230.18 209.74 235.43 218.83 240.68 209.74 235.43 209.74 4 Y
V
339.33 221.06 339.33 203.83 235.43 203.83 235.43 209.74 4 L
N
276.96 209.74 282.21 218.83 287.46 209.74 282.21 209.74 4 Y
V
339.33 221.06 339.33 203.83 282.21 203.83 282.21 209.74 4 L
N
379.04 209.74 384.29 218.83 389.54 209.74 384.29 209.74 4 Y
V
339.33 221.06 339.33 203.83 384.29 203.83 384.29 209.74 4 L
N
414 209.74 419.25 218.83 424.5 209.74 419.25 209.74 4 Y
V
338.5 221.06 338.5 203.83 419.25 203.83 419.25 209.74 4 L
N
450.06 209.74 455.31 218.83 460.56 209.74 455.31 209.74 4 Y
V
338.5 221.06 338.5 203.83 455.31 203.83 455.31 209.74 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "675" 3
%%Page: "676" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(676) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(threads are accessing a given) 180 641.33 T
1 9 Q
(VM) 318.16 641.33 T
1 10 Q
( \336le at any time. The) 333.15 641.33 T
1 9 Q
(VM) 432.07 641.33 T
1 10 Q
( manager also) 447.07 641.33 T
(accomplishes all swapping and read/write operations involving) 180 628.33 T
1 9 Q
(VM) 472.63 628.33 T
1 10 Q
( \336les.) 487.62 628.33 T
0 14 Q
(18.2.2) 123.08 586 T
0 18 Q
(VM Handles) 180 586 T
1 10 Q
(There are several different types of handles associated with) 180 562.33 T
1 9 Q
(VM) 458.17 562.33 T
1 10 Q
( \336les. It is) 473.16 562.33 T
(important not to get them confused.) 180 549.33 T
2 F
(u) 180 529.33 T
1 F
(File Handles) 198 529.33 T
(When you open or create a) 198 517.33 T
1 9 Q
(VM) 323.37 517.33 T
1 10 Q
( \336le, it is assigned a \336le handle, as) 338.36 517.33 T
-0.44 (discussed in \322File System,\323 Chapter) 198 505.33 P
-0.44 (17. Whenever you call a) 364.05 505.33 P
1 9 Q
-0.39 (VM) 474.84 505.33 P
1 10 Q
-0.44 ( routine,) 489.83 505.33 P
(you must specify the) 198 493.33 T
1 9 Q
(VM) 295.78 493.33 T
1 10 Q
( \336le by passing this handle. The \336le handle can) 310.77 493.33 T
(change each time the \336le is opened. Furthermore, if two different) 198 481.33 T
(network users have the same) 198 469.33 T
1 9 Q
(VM) 335.98 469.33 T
1 10 Q
( \336le open at the same time, each user) 350.97 469.33 T
(might have a different \336le handle for the same \336le.) 198 457.33 T
2 F
(u) 180 438.33 T
1 9 Q
(VM) 198 438.33 T
1 10 Q
( Block Handles) 212.99 438.33 T
-0.27 (The) 198 426.33 P
1 9 Q
-0.25 (VM) 218.29 426.33 P
1 10 Q
-0.27 ( \336le has a block table in the) 233.28 426.33 P
1 9 Q
-0.25 (VM) 360.95 426.33 P
1 10 Q
-0.27 ( Header) 375.94 426.33 P
-0.27 (. The block table contains) 411.78 426.33 P
-0.69 (the locations of blocks in the \336le. A given block has the same block handle) 198 414.33 P
-0.15 (every time the \336le is opened. If a \336le is duplicated, blocks in the new \336le) 198 402.33 P
-0.7 (will have the same) 198 390.33 P
1 9 Q
-0.63 (VM) 284.66 390.33 P
1 10 Q
-0.7 ( handles as the corresponding blocks in the old \336le.) 299.66 390.33 P
(In this chapter) 198 378.33 T
(, references to \322block handles\323 or \322) 265.96 378.33 T
1 9 Q
(VM) 423.19 378.33 T
1 10 Q
( handles\323 are) 438.18 378.33 T
(referring to) 198 366.33 T
1 9 Q
(VM) 253.73 366.33 T
1 10 Q
( block handles unless otherwise noted.) 268.72 366.33 T
2 F
(u) 180 347.33 T
1 F
(Memory Block Handles) 198 347.33 T
-0.69 (When a) 198 335.33 P
1 9 Q
-0.62 (VM) 234.76 335.33 P
1 10 Q
-0.69 ( block is locked, it is copied into a memory block. This memory) 249.76 335.33 P
(block has an entry in the global handle table. The memory block may) 198 323.33 T
(persist even after the) 198 311.33 T
1 9 Q
(VM) 299.3 311.33 T
1 10 Q
( block has been unlocked. Ordinarily) 314.29 311.33 T
(, you can) 482.28 311.33 T
-0.48 (refer to a) 198 299.33 P
1 9 Q
-0.43 (VM) 241.56 299.33 P
1 10 Q
-0.48 ( block by its) 256.56 299.33 P
1 9 Q
-0.43 (VM) 312.44 299.33 P
1 10 Q
-0.48 ( block handle whether or not it is resident in) 327.43 299.33 P
-0.38 (memory; however) 198 287.33 P
-0.38 (, in some cases, you may want to use the memory block) 278.73 287.33 P
(handle instead of the) 198 275.33 T
1 9 Q
(VM) 298.2 275.33 T
1 10 Q
( block handle. This saves time when you know) 313.19 275.33 T
-0.53 (the block is resident in memory) 198 263.33 P
-0.53 (, because the) 339.82 263.33 P
1 9 Q
-0.47 (VM) 400.66 263.33 P
1 10 Q
-0.53 ( manager doesn\325) 415.65 263.33 P
-0.53 (t have to) 489.42 263.33 P
-0.39 (translate the) 198 251.33 P
1 9 Q
-0.35 (VM) 260.02 251.33 P
1 10 Q
-0.39 ( block handle into the corresponding global handle. It is) 275.01 251.33 P
-0.15 (also necessary if you need to resize or dirty a) 198 239.33 P
1 9 Q
-0.13 (VM) 406.17 239.33 P
1 10 Q
-0.15 ( block. Y) 421.16 239.33 P
-0.15 (ou can instruct) 459.22 239.33 P
(the) 198 227.33 T
1 9 Q
(VM) 215.78 227.33 T
1 10 Q
( manager to use the same global handle each time a given) 230.77 227.33 T
1 9 Q
(VM) 500.83 227.33 T
1 10 Q
(block is locked until the \336le is closed; otherwise, the memory handle for) 198 215.33 T
(a) 198 203.33 T
1 9 Q
(VM) 206.34 203.33 T
1 10 Q
( block may change each time the block is locked.) 221.33 203.33 T
2 F
(u) 180 184.33 T
1 F
(Chunk Handles and Database/Cell Handles) 198 184.33 T
(A) 198 172.33 T
1 9 Q
(VM) 208 172.33 T
1 10 Q
( block can contain a local memory heap. If so, that block will have) 222.99 172.33 T
(its own chunk handle table. Also, the Database and Cell libraries have) 198 160.33 T
(been designed to let the) 198 148.33 T
1 9 Q
(VM) 310.24 148.33 T
1 10 Q
( \336le ef\336ciently manipulate small pieces of) 325.23 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "676" 4
%%Page: "677" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Structure) 470.88 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(677) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(data. These libraries are based on the LMem library) 198 641.33 T
(. Each item of data) 438.42 641.33 T
-0.34 (has its own) 198 629.33 P
1 9 Q
-0.3 (DB) 252.19 629.33 P
1 10 Q
-0.34 ( handle as well as a) 265.69 629.33 P
1 9 Q
-0.3 (VM) 357.05 629.33 P
1 10 Q
-0.34 ( Block handle. Database items are) 372.04 629.33 P
(discussed in depth in \322Database Library) 198 617.33 T
(,\323 Chapter) 382.48 617.33 T
(19.) 432.67 617.33 T
0 14 Q
(18.2.3) 123.08 576 T
0 18 Q
(V) 180 576 T
(irtual Memory Blocks) 191.68 576 T
1 10 Q
(Most \336le systems treat \336les as a string of bytes. A user can read a \336le) 180 552.33 T
(sequentially or can start reading at a speci\336ed distance into the \336le. This) 180 539.33 T
(makes it dif\336cult to work with large \336les. Reading an entire large \336le into) 180 526.33 T
-0.07 (memory may be impractical, and it may be dif\336cult to access different parts) 180 513.33 P
(of the \336le at once.) 180 500.33 T
(For this reason,) 180 480.33 T
1 9 Q
(GEOS) 255.75 480.33 T
1 10 Q
( divides its V) 281.92 480.33 T
(irtual Memory \336les into) 341.49 480.33 T
1 9 Q
(VM) 454.09 480.33 T
1 10 Q
( blocks. This) 469.09 480.33 T
-0.7 (division is entirely internal to) 180 467.33 P
1 9 Q
-0.63 (GEOS) 316.9 467.33 P
1 10 Q
-0.7 (. When the \336le is written to disk, it is still) 343.07 467.33 P
-0.04 (a sequence of bytes, and other operating systems can copy the \336le normally) 180 454.33 P
-0.04 (.) 525.48 454.33 P
(However) 180 441.33 T
(,) 220.18 441.33 T
1 9 Q
(GEOS) 225.74 441.33 T
1 10 Q
( geodes can access the \336le much more conveniently by) 251.91 441.33 T
(specifying the blocks they wish to access.) 180 428.33 T
0 14 Q
(18.2.3.1) 111.4 394.67 T
(The Nature of VM Blocks) 180 394.67 T
1 10 Q
-0.16 (A) 180 372.33 P
1 9 Q
-0.14 (VM) 189.85 372.33 P
1 10 Q
-0.16 ( block is a sequence of bytes in a) 204.84 372.33 P
1 9 Q
-0.14 (VM) 355.33 372.33 P
1 10 Q
-0.16 ( \336le. It must be small enough to \336t) 370.33 372.33 P
(in a global memory block \050i.e. 64K or less, preferably 2K-6K\051. It may move) 180 359.33 T
(about in the \336le; for this reason, it is accessed by a) 180 346.33 T
1 9 Q
(VM) 415.6 346.33 T
1 10 Q
( block handle. Blocks) 430.59 346.33 T
-0.1 (are either) 180 333.33 P
3 F
-0.1 (free) 227.96 333.33 P
1 F
-0.1 ( or) 244.61 333.33 P
3 F
-0.1 (used) 259.42 333.33 P
1 F
-0.1 (. A used block has an entry in the block table and also) 280.52 333.33 P
-0.48 (a space allocated in the \336le. \050This could be a block of free space, which will be) 180 320.33 P
-0.02 (freed the next time the \336le is compacted.\051 A free block has a slot in the \336le\325) 180 307.33 P
-0.02 (s) 523.61 307.33 P
(handle table but no space in the \336le; it is available if a thread needs to) 180 294.33 T
(allocate a block.) 180 281.33 T
(Blocks persist after a \336le has been closed and) 180 261.33 T
1 9 Q
(GEOS) 392.25 261.33 T
1 10 Q
( has been shut down. A) 418.42 261.33 T
-0.03 (given block is always accessed by the same block handle. There are utilities) 180 248.33 P
-0.08 (to copy blocks within a) 180 235.33 P
1 9 Q
-0.07 (VM) 287.39 235.33 P
1 10 Q
-0.08 ( \336le or between \336les. Blocks in a) 302.39 235.33 P
1 9 Q
-0.07 (VM) 452.88 235.33 P
1 10 Q
-0.08 ( \336le are in no) 467.88 235.33 P
-0.47 (particular order) 180 222.33 P
-0.47 (. If an application wants to set up a sequence of blocks, it can) 252.67 222.33 P
-0.07 (create a) 180 209.33 P
1 9 Q
-0.07 (VM) 219.3 209.33 P
1 10 Q
-0.07 ( Chain, in which the \336rst word of each block is the handle of the) 234.3 209.33 P
-0.46 (next block in the chain. However) 180 196.33 P
-0.46 (, even chained blocks will probably not be in) 328.63 196.33 P
(order in the actual \336le.) 180 183.33 T
(Each) 180 163.33 T
1 9 Q
(VM) 206.11 163.33 T
1 10 Q
( block can be assigned a \322user) 221.1 163.33 T
1 9 Q
(ID) 361.13 163.33 T
1 10 Q
(\323 number) 371.8 163.33 T
(. Y) 413.84 163.33 T
(ou can request the) 425.33 163.33 T
-0.74 (handles of the) 180 150.33 P
1 9 Q
-0.66 (VM) 245.76 150.33 P
1 10 Q
-0.74 ( blocks with any given) 260.76 150.33 P
1 9 Q
-0.66 (ID) 362.66 150.33 P
1 10 Q
-0.74 ( number) 373.33 150.33 P
-0.74 (. Y) 410.74 150.33 P
-0.74 (ou do not have to assign) 421.5 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "677" 5
%%Page: "678" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(678) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(ID) 180 641.33 T
1 10 Q
( numbers to blocks, but it is sometimes convenient. The) 190.66 641.33 T
1 9 Q
(ID) 449.79 641.33 T
1 10 Q
( numbers are) 460.45 641.33 T
-0.58 (stored in the handles\325 entries in the block table, not in the blocks themselves;) 180 628.33 P
(this makes it easy to \336nd a block with a speci\336ed user) 180 615.33 T
1 9 Q
(ID) 431.72 615.33 T
1 10 Q
(. User) 442.39 615.33 T
1 9 Q
(ID) 472.95 615.33 T
1 10 Q
(s can be) 483.61 615.33 T
-0.59 (changed at will with the routine) 180 602.33 P
4 F
-0.61 (VMModifyUserID\050\051) 327.77 602.33 P
1 F
-0.59 (. Note that all user) 426.27 602.33 P
1 9 Q
-0.53 (ID) 513.52 602.33 P
1 10 Q
-0.59 (s) 524.18 602.33 P
-0.16 (from 0xff00 to 0xffff are reserved for system use. Y) 180 589.33 P
-0.16 (ou can \336nd a block with a) 411.35 589.33 P
(speci\336c user) 180 576.33 T
1 9 Q
(ID) 239.25 576.33 T
1 10 Q
( by calling) 249.91 576.33 T
4 F
(VMFind\050\051) 300.11 576.33 T
1 F
(; see page 691.) 349.73 576.33 T
0 14 Q
(18.2.3.2) 111.4 542.67 T
(Creating and Using VM Blocks) 180 542.67 T
1 10 Q
(There are two ways you can create a) 180 520.33 T
1 9 Q
(VM) 350.95 520.33 T
1 10 Q
( block. The \336rst is to request a) 365.94 520.33 T
1 9 Q
(VM) 508.75 520.33 T
1 10 Q
(block: Y) 180 507.33 T
(ou specify the size of the block, the block is created, and you are) 215.57 507.33 T
-0.35 (returned the handle. This is the method ordinarily used. The second method) 180 494.33 P
(is to attach memory to a block: Y) 180 481.33 T
(ou create a global memory block, and) 330.41 481.33 T
(instruct the) 180 468.33 T
1 9 Q
(VM) 237.22 468.33 T
1 10 Q
( manager to add it to the) 252.21 468.33 T
1 9 Q
(VM) 369.46 468.33 T
1 10 Q
( \336le. There are sometimes) 384.46 468.33 T
(advantages to this technique; for example, you can create an LMem heap,) 180 455.33 T
81 144 531 648 C
180 144 531 450.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.83 379.06 224.5 427.39 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
3 10 Q
(File) 194.78 405.57 T
(Header) 186.92 395.57 T
313.67 379.06 359.5 427.39 R
7 X
V
0 X
N
3 9 Q
(VM) 329.17 405.57 T
3 10 Q
(Header) 319.83 395.57 T
224.5 379.06 250.34 427.39 R
7 X
V
0 X
N
(B1) 231.03 399.54 T
250.34 379.06 313.67 427.39 R
7 X
V
0 X
N
(B2) 275.61 399.54 T
382.68 379.06 423.76 427.39 R
7 X
V
0 X
N
(B4) 396.83 399.54 T
359.5 379.06 382.68 427.39 R
7 X
V
0 X
N
423.76 379.06 454 427.39 R
7 X
V
0 X
N
(B5) 432.49 399.54 T
382.68 427.39 359.5 379.06 2 L
7 X
V
3 H
2 Z
4 X
N
359.5 427.39 382.68 379.06 2 L
7 X
V
4 X
N
0 F
0 X
(Figure) 180 231.33 T
(18-) 213.34 231.33 T
(2) 227.79 231.33 T
3 F
(A Fragmenting) 236.13 231.33 T
3 9 Q
(VM) 308.72 231.33 T
3 10 Q
( File) 323.55 231.33 T
(As blocks are freed and resized, the percentage of the \336le being used steadily) 180 217.33 T
(decreases:) 180 205.33 T
(1. A) 180 191.33 T
3 9 Q
(VM) 200.94 191.33 T
3 10 Q
( \336le with several blocks. The application is now freeing block 3.) 215.77 191.33 T
(2. Block 3 has been freed. The application now needs to expand block 1.) 180 177.33 T
-0.56 (3. Block 1 has been moved to the end of the \336le, where it has room to grow) 180 163.33 P
-0.56 (. The) 506.38 163.33 P
(\336le now contains a lot of unused space.) 180 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
182.83 312.53 224.5 360.86 R
7 X
V
0.5 H
0 Z
0 X
N
(File) 194.78 339.04 T
(Header) 186.92 329.04 T
313.67 312.53 359.5 360.86 R
7 X
V
0 X
N
3 9 Q
(VM) 329.17 339.04 T
3 10 Q
(Header) 319.83 329.04 T
224.5 312.53 250.34 360.86 R
7 X
V
0 X
N
(B1) 231.03 333.01 T
250.34 312.53 313.67 360.86 R
7 X
V
0 X
N
(B2) 275.61 333.01 T
382.68 312.53 423.76 360.86 R
7 X
V
0 X
N
(B4) 396.83 333.01 T
359.5 312.53 382.68 360.86 R
5 X
V
0 X
N
423.76 312.53 454 360.86 R
7 X
V
0 X
N
(B5) 432.48 333.01 T
261.19 329.92 270.28 324.67 261.19 319.42 261.19 324.67 4 Y
2 X
V
250.34 324.67 261.19 324.67 2 L
7 X
V
3 H
2 Z
2 X
N
182.83 246 224.5 294.33 R
7 X
V
0.5 H
0 Z
0 X
N
(File) 194.78 272.51 T
(Header) 186.92 262.51 T
313.67 246 359.5 294.33 R
7 X
V
0 X
N
3 9 Q
(VM) 329.17 272.51 T
3 10 Q
(Header) 319.83 262.51 T
224.5 246 250.34 294.33 R
5 X
V
0 X
N
250.34 246 313.67 294.33 R
7 X
V
0 X
N
(B2) 275.61 266.48 T
382.68 246 423.76 294.33 R
7 X
V
0 X
N
(B4) 396.83 266.48 T
359.5 246 382.68 294.33 R
5 X
V
0 X
N
423.76 246 454 294.33 R
7 X
V
0 X
N
(B5) 432.48 266.48 T
453.99 246.04 499.64 294.36 R
7 X
V
0 X
N
(B1) 470.43 266.52 T
(1.) 182.83 433.83 T
(2.) 182.83 367.3 T
(3.) 182.83 300.77 T
(B3) 364.7 399.54 T
270.34 312.53 270.34 360.86 2 L
7 X
V
2 Z
11 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "678" 6
%%Page: "679" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Structure) 470.88 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(679) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(and then attach it to the) 180 641.33 T
1 9 Q
(VM) 295.58 641.33 T
1 10 Q
( \336le; it will then be saved with the \336le. Y) 310.57 641.33 T
(ou can) 496.55 641.33 T
(also attach a memory block to an existing) 180 628.33 T
1 9 Q
(VM) 374.49 628.33 T
1 10 Q
( block; this will destroy) 389.48 628.33 T
(whatever used to be in the) 180 615.33 T
1 9 Q
(VM) 305.02 615.33 T
1 10 Q
( block and replace it with the contents of the) 320.01 615.33 T
(new block.) 180 602.33 T
-0.67 (Y) 180 582.33 P
-0.67 (ou can dynamically resize a) 185.93 582.33 P
1 9 Q
-0.61 (VM) 312.77 582.33 P
1 10 Q
-0.67 ( block by locking it into memory) 327.76 582.33 P
-0.67 (, resizing the) 470.24 582.33 P
(memory block, and saving it back to the disk.) 180 569.33 T
-0.55 (These techniques are described in detail in \322Creating and Freeing Blocks\323 on) 180 549.33 P
(page 687 and \322Attaching Memory Blocks\323 on page 689.) 180 536.33 T
0 14 Q
(18.2.3.3) 111.4 502.67 T
(File Compaction) 180 502.67 T
1 10 Q
(When a) 180 480.33 T
1 9 Q
(VM) 218.15 480.33 T
1 10 Q
( block is freed, the) 233.14 480.33 T
1 9 Q
(VM) 320.19 480.33 T
1 10 Q
( manager will note that there is empty) 335.19 480.33 T
(space in the \336le. It will use that space when new blocks are allocated.) 180 467.33 T
81 144 531 648 C
180 144 531 457.34 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
454.4 323.74 520.34 372.07 R
5 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
224.88 393.08 250.71 441.41 R
5 X
V
0 X
N
250.71 393.08 314.04 441.41 R
7 X
V
0 X
N
3 10 Q
(B2) 275.98 413.56 T
337.47 393.08 378.55 441.41 R
7 X
V
0 X
N
(B4) 351.62 413.56 T
314.04 393.08 337.47 441.41 R
5 X
V
0 X
N
0 F
(Figure) 180 243.51 T
(18-) 213.34 243.51 T
(3) 227.79 243.51 T
3 9 Q
(VM) 236.13 243.51 T
3 10 Q
( File Compaction) 250.96 243.51 T
-0.76 (When the percentage of a \336le which contains data falls below the \322compression) 180 229.51 P
(threshold,\323 the) 180 217.51 T
3 9 Q
(VM) 249.8 217.51 T
3 10 Q
( manager compacts the \336le.) 264.63 217.51 T
(1. A fragmented \336le.) 180 203.51 T
-0.61 (2. The) 180 189.51 P
3 9 Q
-0.55 (VM) 210.09 189.51 P
3 10 Q
-0.61 ( Manager \336rst copies all the data to the beginning of the \336le, leaving) 224.92 189.51 P
(the free space at the end. It updates the File Header and) 180 177.51 T
3 9 Q
(VM) 438.64 177.51 T
3 10 Q
( Header) 453.47 177.51 T
(appropriately) 180 165.51 T
(.) 241.65 165.51 T
(3. The) 180 151.51 T
3 9 Q
(VM) 211.3 151.51 T
3 10 Q
( Manager then deletes the free bytes from the end of the \336le.) 226.13 151.51 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
183.21 393.08 224.88 441.41 R
7 X
V
0 X
N
(File) 195.16 419.59 T
(Header) 187.29 409.59 T
378.55 393.08 424.38 441.41 R
7 X
V
0 X
N
3 9 Q
(VM) 394.05 419.59 T
3 10 Q
(Header) 384.71 409.59 T
424.38 393.08 454.62 441.41 R
7 X
V
0 X
N
(B3) 433.11 413.56 T
471.29 393.08 520.34 441.41 R
7 X
V
0 X
N
(B1) 489.42 413.56 T
(1.) 183.21 447.85 T
454.62 393.08 471.29 441.41 R
5 X
V
0 X
N
375.62 254.4 405.86 302.73 R
7 X
V
0 X
N
(B3) 384.35 274.88 T
405.86 254.4 454.9 302.73 R
7 X
V
0 X
N
(B1) 423.99 274.88 T
224.88 254.4 288.71 302.73 R
7 X
V
0 X
N
(B2) 250.4 274.88 T
183.21 254.4 224.88 302.73 R
7 X
V
0 X
N
(File) 195.16 280.91 T
(Header) 187.29 270.91 T
329.78 254.4 375.62 302.73 R
7 X
V
0 X
N
3 9 Q
(VM) 345.28 280.91 T
3 10 Q
(Header) 335.95 270.91 T
(3.) 183.21 309.17 T
288.71 254.4 329.78 302.73 R
7 X
V
0 X
N
(B4) 302.86 274.88 T
224.88 323.74 288.21 372.07 R
7 X
V
0 X
N
(B2) 250.15 344.22 T
288.21 323.74 329.28 372.07 R
7 X
V
0 X
N
(B4) 302.36 344.22 T
183.21 323.74 224.88 372.07 R
7 X
V
0 X
N
(File) 195.16 350.25 T
(Header) 187.29 340.25 T
329.28 323.74 375.12 372.07 R
7 X
V
0 X
N
3 9 Q
(VM) 344.78 350.25 T
3 10 Q
(Header) 335.45 340.25 T
375.12 323.74 405.36 372.07 R
7 X
V
0 X
N
(B3) 383.85 344.22 T
405.36 323.74 454.4 372.07 R
7 X
V
0 X
N
(B1) 423.49 344.22 T
(2.) 183.21 378.51 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "679" 7
%%Page: "680" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(680) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(However) 180 641.33 T
(, since new blocks will probably not \336t exactly in the spaces left by) 220.18 641.33 T
(freed blocks, some space may be wasted. \050See Figure) 180 628.33 T
(18-) 425.04 628.33 T
(2 below) 439.49 628.33 T
(.\051) 473.4 628.33 T
-0.14 (In time, the percentage of wasted \336le space can grow unacceptably large. T) 180 608.33 P
-0.14 (o) 523.36 608.33 P
(prevent this, the V) 180 595.33 T
(irtual Memory manager periodically compacts the \336les.) 266.23 595.33 T
(When the ratio of data to free space drops below a certain threshold, the) 180 582.33 T
(V) 180 569.33 T
(irtual Memory manager copies the data in the \336le over the free space \050see) 186.78 569.33 T
-0.46 (Figure) 180 556.33 P
-0.46 (18-) 213.52 556.33 P
-0.46 (3 on page) 227.97 556.33 P
2 F
-0.46 (l) 273.73 556.33 P
1 F
-0.46 (679\051. While a \336le is being compacted, any requests for) 284.42 556.33 P
-0.41 (access to the \336le will block until compaction is \336nished. Note that the format) 180 543.33 P
(of the data is not changed; the free space between data blocks is simply) 180 530.33 T
(removed.) 180 517.33 T
(When a geode creates a) 180 497.33 T
1 9 Q
(VM) 291.12 497.33 T
1 10 Q
( \336le, it can specify a \322compression threshold.\323) 306.11 497.33 T
(When the percentage of used space drops below this threshold, the) 180 484.33 T
1 9 Q
(VM) 490.01 484.33 T
1 10 Q
-0.08 (manager will automatically compact the \336le without any attention from the) 180 471.33 P
(application. The geode should take care in setting the threshold. If the) 180 458.33 T
(threshold is too low) 180 445.33 T
(, the \336le may grow unacceptably large before it is) 269.09 445.33 T
(compacted; on the other hand, if the threshold is too high, the) 180 432.33 T
1 9 Q
(VM) 467.43 432.33 T
1 10 Q
( manager) 482.42 432.33 T
-0.01 (might spend too much time compacting the \336le for relatively low gains. The) 180 419.33 P
-0.41 (application can specify a threshold of zero; this will cause the system default) 180 406.33 P
(threshold to be used.) 180 393.33 T
-0.41 (Note that if a \336le is in \322backup mode,\323 the \336le will be compacted only on calls) 180 373.33 P
(to) 180 360.33 T
4 F
(VMSave\050\051) 191.67 360.33 T
1 F
(,) 241.48 360.33 T
4 F
(VMSaveAs\050\051) 247.04 360.33 T
1 F
(, or) 309.44 360.33 T
4 F
(VMRevert\050\051) 327.22 360.33 T
1 F
(. If the \336le is not in backup) 387.59 360.33 T
(mode, it can be compacted on any call to) 180 347.33 T
4 F
(VMUpdate\050\051) 368.18 347.33 T
1 F
(.) 431.14 347.33 T
0 14 Q
(18.2.3.4) 111.4 313.67 T
(File Updating and Backup) 180 313.67 T
1 10 Q
(When a block is locked into memory) 180 291.33 T
(, the) 345.02 291.33 T
1 9 Q
(VM) 368.36 291.33 T
1 10 Q
( manager copies the data from) 383.35 291.33 T
(the disk block to the global memory block. When the block is unlocked, the) 180 278.33 T
1 9 Q
-0.38 (VM) 180 265.33 P
1 10 Q
-0.42 ( manager assumes that it can discard the memory block, since the data is) 194.99 265.33 P
(already on the disk in the) 180 252.33 T
1 9 Q
(VM) 301.32 252.33 T
1 10 Q
( block.) 316.31 252.33 T
-0.21 (If you alter the data in a block, you must notify the) 180 232.33 P
1 9 Q
-0.19 (VM) 416.09 232.33 P
1 10 Q
-0.21 ( manager of this fact.) 431.09 232.33 P
(Y) 180 219.33 T
(ou do this by marking the block as) 185.93 219.33 T
3 F
(dirty) 347.45 219.33 T
1 F
(. When a block has been marked) 368.74 219.33 T
-0.27 (dirty) 180 206.33 P
-0.27 (, the) 201.48 206.33 P
1 9 Q
-0.24 (VM) 224.29 206.33 P
1 10 Q
-0.27 ( manager knows that the version in memory is more up-to-date) 239.28 206.33 P
(than the version in the disk \336le. If the \337ag) 180 193.33 T
1 9 Q
(VMA_SYNC_UPDA) 378.36 193.33 T
(TE) 461.03 193.33 T
1 10 Q
( is) 473.54 193.33 T
3 F
(off) 486.88 193.33 T
1 F
( \050the) 498.54 193.33 T
(default\051, the block will be written back to the \336le as soon as possible. If the) 180 180.33 T
(attribute is) 180 167.33 T
3 F
(on) 234.83 167.33 T
1 F
(, the block will not be copied back to the disk \336le until) 245.94 167.33 T
4 F
(VMUpdate\050\051) 180 154.33 T
1 F
( is called; until then, the block will be copied to the disk swap) 242.96 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "680" 8
%%Page: "681" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Structure) 470.88 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(681) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.7 (space if memory is needed. The next time you lock the block, you will be given) 180 641.33 P
(the new) 180 628.33 T
(, changed version.) 215.75 628.33 T
-0.32 (When you want to write the dirty blocks to the disk, you can instruct the) 180 608.33 P
1 9 Q
-0.29 (VM) 513.55 608.33 P
1 10 Q
-0.28 (manager to) 180 595.33 P
3 F
-0.28 (update) 234.81 595.33 P
1 F
-0.28 ( the \336le. This copies all the dirtied blocks back to the disk) 266.47 595.33 P
(and marks all blocks as) 180 582.33 T
3 F
(clean) 291.52 582.33 T
1 F
(. The) 315.58 582.33 T
1 9 Q
(VM) 341.7 582.33 T
1 10 Q
( manager also automatically updates) 356.69 582.33 T
-0.05 (the \336le when it is closed. The updating routines check if the \336le is currently) 180 569.33 P
(clean; thus, very little time is lost if you try to update a clean \336le.) 180 556.33 T
(The) 180 536.33 T
1 9 Q
(VM) 200.56 536.33 T
1 10 Q
( manager can be instructed to notify all users of a \336le when the \336le) 215.55 536.33 T
(changes from clean to dirty) 180 523.33 T
(. This has two main uses: it helps maintain data) 304.63 523.33 T
(synchronization if many geodes are using the same \336le, and it lets the) 180 510.33 T
(document control objects know when to enable the \322Save\323 and \322Revert\323) 180 497.33 T
(triggers. \050See \322GenDocument,\323 Chapter) 180 484.33 T
(13 of the Object Reference Book.\051) 364.45 484.33 T
(The) 180 464.33 T
1 9 Q
(VM) 200.56 464.33 T
1 10 Q
( manager can be instructed to maintain a backup of a \336le. If it is so) 215.55 464.33 T
-0.7 (instructed, it will not overwrite the original block when it updates it; instead,) 180 451.33 P
(it will keep a copy of the original block as well as a copy of the new version.) 180 438.33 T
(This is transparent to the application. When the) 180 425.33 T
1 9 Q
(VM) 406.14 425.33 T
1 10 Q
( Manager is instructed) 421.13 425.33 T
-0.48 (to) 180 412.33 P
3 F
-0.48 (save) 191.19 412.33 P
1 F
-0.48 ( the \336le, it deletes all the backup blocks. If it is instructed to) 211 412.33 P
3 F
-0.48 (revert) 484.92 412.33 P
1 F
-0.48 ( the) 511.39 412.33 P
-0.65 (\336le to its last-saved version, it replaces the new version of the changed blocks) 180 399.33 P
-0.47 (with the backup versions, thus restoring the \336le to its condition as of the last) 180 386.33 P
-0.52 (time it was saved. If the) 180 373.33 P
1 9 Q
-0.47 (VM) 290.99 373.33 P
1 10 Q
-0.52 ( manager is instructed to) 305.98 373.33 P
3 F
-0.52 (\322save-as\323) 422.29 373.33 P
1 F
-0.52 ( the \336le, it will) 463.39 373.33 P
(create a new \336le, which does not contain the backup blocks; that is, it) 180 360.33 T
(contains the \336le as it currently exists. It will then revert the original \336le to) 180 347.33 T
(its last-saved version and close it.) 180 334.33 T
0 14 Q
(18.2.4) 123.08 292 T
0 18 Q
(VM File Attributes) 180 292 T
5 10 Q
(VMAttributes) 180 268.33 T
1 F
(Each) 180 248.33 T
1 9 Q
(VM) 206.11 248.33 T
1 10 Q
( \336le has a set of attributes which determine how the) 221.1 248.33 T
1 9 Q
(VM) 464.47 248.33 T
1 10 Q
( Manager) 479.47 248.33 T
-0.5 (treats the \336le. These attributes are speci\336ed by a set of) 180 235.33 P
4 F
-0.51 (VMAttributes) 431.25 235.33 P
1 F
-0.5 ( \337ags.) 501.98 235.33 P
-0.18 (When a) 180 222.33 P
1 9 Q
-0.17 (VM) 217.78 222.33 P
1 10 Q
-0.18 ( \336le is created, all of these attributes are off; after a \336le has been) 232.78 222.33 P
-0.62 (created, you can change the attributes with) 180 209.33 P
4 F
-0.64 (VMSetAttributes\050\051) 379.17 209.33 P
1 F
-0.62 ( \050see section) 474.35 209.33 P
(18.3.3 on page 687\051. The following \337ags are available:) 180 196.33 T
1 9 Q
(VMA_SYNC_UPDA) 180 176.33 T
(TE) 262.67 176.33 T
1 10 Q
(Allow synchronous updates only) 243 164.33 T
(. Instructs) 390.78 164.33 T
1 9 Q
(VM) 441.33 164.33 T
1 10 Q
( Manager to) 456.32 164.33 T
(update the \336le only when you call un updating routine) 243 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "681" 9
%%Page: "682" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(682) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.68 (\050) 243 641.33 P
4 F
-0.7 (VMUpdate\050\051) 246.33 641.33 P
1 F
-0.68 (,) 309.29 641.33 P
4 F
-0.7 (VMSave\050\051) 314.17 641.33 P
1 F
-0.68 (, etc.\051. This attribute is) 363.98 641.33 P
3 F
-0.68 (off) 469.32 641.33 P
1 F
-0.68 ( by default) 480.98 641.33 P
(\050indicating that the) 243 629.33 T
1 9 Q
(VM) 335.79 629.33 T
1 10 Q
( manager should feel free to update) 350.78 629.33 T
(blocks whenever they are unlocked\051. Y) 243 617.33 T
(ou should set this) 419.31 617.33 T
-0.7 (attribute if the \336le might not be in a consistent state every time) 243 605.33 P
(a block is unlocked.) 243 593.33 T
1 9 Q
(VMA_BACKUP) 180 574.33 T
1 10 Q
(Maintain a backup copy of all data. The \336le can then be) 243 562.33 T
(restored to its last stored state. This is described above.) 243 550.33 T
1 9 Q
(VMA_OBJECT_RELOC) 180 531.33 T
1 10 Q
-0.39 (Use the built-in object relocation routines. This attribute must) 243 519.33 P
(be set if the) 243 507.33 T
1 9 Q
(VM) 299.68 507.33 T
1 10 Q
( \336le contains object blocks.) 314.67 507.33 T
1 9 Q
(VMA_NOTIFY_DIRTY) 180 488.33 T
1 10 Q
(If this attribute is set, the) 243 476.33 T
1 9 Q
(VM) 365.43 476.33 T
1 10 Q
( Manager will notify all threads) 380.42 476.33 T
(which have the) 243 464.33 T
1 9 Q
(VM) 315.97 464.33 T
1 10 Q
( \336le open when the \336le changes from clean) 330.96 464.33 T
-0.15 (to dirty) 243 452.33 P
-0.15 (. It noti\336es threads by sending a) 276 452.33 P
1 9 Q
-0.13 (MSG_VM_FILE_DIRTY) 427.04 452.33 P
1 10 Q
-0.28 (to each process that has the \336le open. \050This message is de\336ned) 243 440.33 P
(for) 243 428.33 T
4 F
(MetaClass) 258.55 428.33 T
1 F
(, so any object can handle it.\051) 311.88 428.33 T
1 9 Q
(VMA_NO_DISCARD_IF_IN_USE) 180 409.33 T
1 10 Q
-0.25 (If this attribute is set, the) 243 397.33 P
1 9 Q
-0.22 (VM) 363.95 397.33 P
1 10 Q
-0.25 ( manager will not discard LMem) 378.94 397.33 P
(blocks of type) 243 385.33 T
1 9 Q
(LMEM_TYPE_OBJ_BLOCK) 308.38 385.33 T
1 10 Q
( if) 427.72 385.33 T
3 9 Q
(OLMBH) 243 373.33 T
3 10 Q
(_inUseCount) 278.5 373.33 T
1 F
( is non-zero. This attribute must be set if) 337.93 373.33 T
(the \336le contains object blocks. If this attribute is set, each) 243 361.33 T
(object block will be kept in memory as long as any thread is) 243 349.33 T
(using an object in the block.) 243 337.33 T
1 9 Q
(VMA_COMP) 180 318.33 T
(ACT_OBJ_BLOCK) 233.32 318.33 T
1 10 Q
(If set, the) 243 306.33 T
1 9 Q
(VM) 290.04 306.33 T
1 10 Q
( manager will unrelocate generic-object blocks) 305.03 306.33 T
(before writing them. It does this by calling) 243 294.33 T
4 F
-0.34 (CompactObjBlock\050\051) 243 282.33 P
1 F
-0.33 (. This allows a) 344.87 282.33 P
1 9 Q
-0.3 (VM) 412.84 282.33 P
1 10 Q
-0.33 ( \336le to contain generic) 427.83 282.33 P
(object blocks.) 243 270.33 T
1 9 Q
(VMA_SINGLE_THREAD_ACCESS) 180 251.33 T
1 10 Q
(Set this if only a single thread will be accessing the \336le. This) 243 239.33 T
(allows optimizations in) 243 227.33 T
4 F
(VMLock\050\051) 352.84 227.33 T
1 F
(.) 403.58 227.33 T
1 9 Q
(VMA_OBJECT_A) 180 208.33 T
(TTRS) 254 208.33 T
1 10 Q
(This is not, strictly speaking, a) 243 196.33 T
1 9 Q
(VM) 388.59 196.33 T
1 10 Q
( attribute. Rather) 403.58 196.33 T
(, it is a) 484.89 196.33 T
(mask which combines the \337ags) 243 184.33 T
1 9 Q
(VMA_OBJECT_RELOC,) 388.95 184.33 T
(VMA_NO_DISCARD_IF_IN_USE) 243 172.33 T
1 10 Q
(, and) 384.33 172.33 T
1 9 Q
(VMA_SINGLE_THREAD_ACCESS) 243 160.33 T
1 10 Q
(. All of these attributes must) 391.49 160.33 T
(be set if the \336le contains object blocks.) 243 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "682" 10
%%Page: "683" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(683) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(18.3) 134.76 632 T
0 24 Q
(Using V) 180 632 T
(irtual Memory) 268.92 632 T
1 10 Q
-0.5 (The most common way applications will use V) 180 606.33 P
-0.5 (irtual Memory is for their data) 389.02 606.33 P
(\336les. However) 180 593.33 T
(, there are other uses; for example,) 244.63 593.33 T
1 9 Q
(VM) 408.16 593.33 T
1 10 Q
( provides a convenient) 423.15 593.33 T
(way to maintain working memory) 180 580.33 T
(. Some data structures \050such as Huge) 335.4 580.33 T
-0.49 (Arrays\051 can only exist in) 180 567.33 P
1 9 Q
-0.44 (VM) 293.5 567.33 P
1 10 Q
-0.49 ( \336les; an application may create a temporary) 308.49 567.33 P
1 9 Q
-0.44 (VM) 513.71 567.33 P
1 10 Q
(\336le just for these structures.) 180 554.33 T
0 14 Q
(18.3.1) 123.08 512 T
0 18 Q
(How to Use VM) 180 512 T
1 10 Q
-0.54 (There are \336ve basic steps to using) 180 488.33 P
1 9 Q
-0.49 (VM) 335.85 488.33 P
1 10 Q
-0.54 ( \336les. The steps are outlined below) 350.85 488.33 P
-0.54 (, and) 506.33 488.33 P
(described in greater detail in the following sections.) 180 475.33 T
2 F
(u) 180 455.33 T
1 F
(Open \050or create\051 the) 198 455.33 T
1 9 Q
(VM) 293.18 455.33 T
1 10 Q
( \336le) 308.17 455.33 T
(Before you perform any actions on a) 198 443.33 T
1 9 Q
(VM) 367.26 443.33 T
1 10 Q
( \336le, you must open it with) 382.25 443.33 T
4 F
-0.74 (VMOpen\050\051) 198 431.33 P
1 F
-0.71 (. This routine can be used to open an existing) 250.77 431.33 P
1 9 Q
-0.64 (VM) 455.71 431.33 P
1 10 Q
-0.71 ( \336le or create) 470.7 431.33 P
(a new one. If you use the document control objects, they will open and) 198 419.33 T
-0.69 (create \336les automatically) 198 407.33 P
-0.69 (. Once you have created a) 312.02 407.33 P
1 9 Q
-0.62 (VM) 428.85 407.33 P
1 10 Q
-0.69 ( \336le, you may want) 443.84 407.33 P
(to change its attributes with) 198 395.33 T
4 F
(VMSetAttributes\050\051) 332.1 395.33 T
1 F
(.) 427.28 395.33 T
2 F
(u) 180 376.33 T
1 F
(Bring a) 198 376.33 T
1 9 Q
(VM) 235.41 376.33 T
1 10 Q
( block into the global memory heap) 250.4 376.33 T
-0.07 (After you open a) 198 364.33 P
1 9 Q
-0.07 (VM) 276.6 364.33 P
1 10 Q
-0.07 ( \336le, you can bring blocks from the \336le into memory) 291.59 364.33 P
(with) 198 352.33 T
4 F
(VMLock\050\051) 221.71 352.33 T
1 F
(. Y) 272.45 352.33 T
(ou can also create new blocks with) 283.94 352.33 T
4 F
(VMAlloc\050\051) 445.82 352.33 T
1 F
( and) 497.3 352.33 T
4 F
(VMAttach\050\051) 198 340.33 T
1 F
(.) 257.81 340.33 T
2 F
(u) 180 321.33 T
1 F
(Access the data) 198 321.33 T
-0.7 (Once a) 198 309.33 P
1 9 Q
-0.63 (VM) 231.04 309.33 P
1 10 Q
-0.7 ( block has been brought into memory) 246.04 309.33 P
-0.7 (, you can access it the way) 411.65 309.33 P
(you would any other memory block. When you are done with the data,) 198 297.33 T
(you should unlock it with) 198 285.33 T
4 F
(VMUnlock\050\051) 317.83 285.33 T
1 F
(. If you change the memory) 380.05 285.33 T
(, you) 504.68 285.33 T
(should mark it dirty with) 198 273.33 T
4 F
(VMDirty\050\051) 318.02 273.33 T
1 F
( before unlocking it. This ensures) 370.79 273.33 T
(that the new version of the block will be written to the disk.) 198 261.33 T
2 F
(u) 180 242.33 T
1 F
(Update the) 198 242.33 T
1 9 Q
(VM) 252.64 242.33 T
1 10 Q
( \336le) 267.63 242.33 T
-0.61 (Use one of the several) 198 230.33 P
1 9 Q
-0.55 (VM) 299.23 230.33 P
1 10 Q
-0.61 ( updating routines to copy the dirty blocks back) 314.22 230.33 P
-0.3 (to the disk. \050If asynchronous update is allowed, the) 198 218.33 P
1 9 Q
-0.27 (VM) 433.66 218.33 P
1 10 Q
-0.3 ( \336le manager will) 448.66 218.33 P
(try to update blocks whenever they are unlocked.\051) 198 206.33 T
2 F
(u) 180 187.33 T
1 F
(Close the) 198 187.33 T
1 9 Q
(VM) 243.56 187.33 T
1 10 Q
( \336le) 258.55 187.33 T
(Use) 198 175.33 T
4 F
(VMClose\050\051) 218.56 175.33 T
1 F
( when you are done with the \336le. It will update the \336le) 271.89 175.33 T
(and close it.) 198 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "683" 11
%%Page: "684" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(684) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(18.3.2) 123.08 636 T
0 18 Q
(Opening or Creating a VM File) 180 636 T
5 10 Q
(VMOpen\050\051, VMOpenTypes, VMAccessFlags) 180 612.33 T
1 F
-0.29 (T) 180 592.33 P
-0.29 (o create or open a) 185.75 592.33 P
1 9 Q
-0.26 (VM) 268.39 592.33 P
1 10 Q
-0.29 ( \336le, call the routine) 283.39 592.33 P
4 F
-0.3 (VMOpen\050\051) 377.89 592.33 P
1 F
-0.29 (. Y) 430.66 592.33 P
-0.29 (ou may not need to) 441.86 592.33 P
(open and create \336les directly; if you use the document control objects, they) 180 579.33 T
(automatically create and open \336les as the user requests. \050See) 180 566.33 T
-0.75 (\322GenDocument,\323 Chapter) 180 553.33 P
-0.75 (13 of the Object Reference Book.\051) 299.43 553.33 P
4 F
-0.78 (VMOpen\050\051) 450.47 553.33 P
1 F
-0.75 ( looks) 503.24 553.33 P
-0.33 (for the \336le in the thread\325) 180 540.33 P
-0.33 (s working directory \050unless a temporary \336le is being) 290.96 540.33 P
(created, as described below\051.) 180 527.33 T
4 F
(VMOpen\050\051) 314.46 527.33 T
1 F
( takes four arguments and returns) 367.23 527.33 T
(the \336le handle. The arguments are:) 180 514.33 T
2 F
(u) 180 494.33 T
1 F
(File name) 198 494.33 T
(This argument is a pointer to a string of characters. This string is a) 198 482.33 T
-0.19 (relative or absolute path specifying the \336le to open; if a temporary \336le is) 198 470.33 P
-0.75 (being created, the string is the path of the directory in which to place that) 198 458.33 P
-0.81 (\336le, followed by fourteen null bytes \050counting the string-ending null\051. The) 198 446.33 P
(name of the temporary \336le is appended to the path.) 198 434.33 T
2 F
(u) 180 415.33 T
4 F
(VMAccessFlags) 198 415.33 T
1 F
(This argument is a set of \337ags which speci\336es how the \336le is accessed.) 198 403.33 T
(The \337ags are described below) 198 391.33 T
(.) 332.84 391.33 T
2 F
(u) 180 372.33 T
4 F
(VMOpenT) 198 372.33 T
(ypes) 249.69 372.33 T
1 F
( enumerated type) 273.21 372.33 T
(This argument speci\336es how the \336le should be opened. The) 198 360.33 T
4 F
(VMOpenT) 198 348.33 T
(ypes) 249.69 348.33 T
1 F
( are described below) 273.21 348.33 T
(.) 365.82 348.33 T
2 F
(u) 180 329.33 T
1 F
(Compression threshold) 198 329.33 T
-0.14 (This is the minimum percentage of a \336le which must be used for data at) 198 317.33 P
(any given time. If the percentage drops below this threshold, the \336le is) 198 305.33 T
-0.04 (compacted. If you pass a threshold of zero, the system default threshold) 198 293.33 P
(is used. The compression threshold is set only when the \336le is created;) 198 281.33 T
(this argument is ignored if an existing \336le is opened.) 198 269.33 T
(When you use) 180 250.33 T
4 F
(VMOpen\050\051) 247.59 250.33 T
1 F
(, you must specify how the \336le should be opened.) 300.36 250.33 T
(Y) 180 237.33 T
(ou do this by passing a member of the) 185.93 237.33 T
4 F
(VMOpenT) 363.37 237.33 T
(ypes) 415.06 237.33 T
1 F
( enumerated type.) 438.58 237.33 T
(The types are as follows:) 180 224.33 T
1 9 Q
(VMO_TEMP_FILE) 180 204.33 T
1 10 Q
-0.73 (If this is passed, the \336le will be a temporary data \336le. When you) 243 192.33 P
(create a temporary \336le, you pass a directory path, not a \336le) 243 180.33 T
(name. The path should be followed by fourteen null bytes,) 243 168.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "684" 12
%%Page: "685" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(685) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.41 (including the string\325) 243 641.33 P
-0.41 (s terminating null. The system will choose) 335.33 641.33 P
(an appropriate \336le name and add it to the path string.) 243 629.33 T
1 9 Q
(VMO_CREA) 180 610.33 T
(TE_ONL) 231.99 610.33 T
(Y) 268.51 610.33 T
1 10 Q
(If this is passed, the document will be created. If a document) 243 598.33 T
-0.78 (with the speci\336ed name already exists in the working directory) 243 586.33 P
-0.78 (,) 526.22 586.33 P
4 F
(VMOpen\050\051) 243 574.33 T
1 F
( will return an error condition.) 295.77 574.33 T
(VMO_CREA) 180 555.33 T
(TE) 237.77 555.33 T
(If this is passed, the \336le will be created if it does not already) 243 543.33 T
(exist; otherwise it will be opened.) 243 531.33 T
1 9 Q
(VMO_CREA) 180 512.33 T
(TE_TRUNCA) 231.99 512.33 T
(TE) 288.67 512.33 T
1 10 Q
(If this is passed, the \336le will be created if it does not already) 243 500.33 T
(exist; otherwise, it will be opened and truncated \050all data) 243 488.33 T
(blocks will be freed\051.) 243 476.33 T
1 9 Q
(VMO_OPEN) 180 457.33 T
1 10 Q
(Open an existing \336le. If the \336le does not exist, return an error) 243 445.33 T
(condition.) 243 433.33 T
1 9 Q
(VMO_NA) 180 414.33 T
(TIVE_WITH_EXT_A) 219.83 414.33 T
(TTRS) 306.83 414.33 T
1 10 Q
(The \336le will have a name compatible with the native) 243 402.33 T
-0.56 (\336lesystem, but it will have) 243 390.33 P
1 9 Q
-0.51 (GEOS) 365.4 390.33 P
1 10 Q
-0.56 ( extended attributes. This \337ag) 391.57 390.33 P
(can be combined with any of the other) 243 378.33 T
4 F
(VMOpenT) 421.54 378.33 T
(ype) 473.23 378.33 T
1 F
( values) 491.75 378.33 T
(with a bit-wise) 243 366.33 T
3 F
(or) 314.32 366.33 T
1 F
(.) 323.02 366.33 T
-0.28 (Y) 180 347.33 P
-0.28 (ou also have to specify what type of access to the \336le you would like. Y) 185.93 347.33 P
-0.28 (ou do) 504.15 347.33 P
(this by passing a record of) 180 334.33 T
4 F
(VMAccessFlags) 303.53 334.33 T
1 F
(. This is a byte-length bit\336eld.) 383.34 334.33 T
(The following \337ags are available:) 180 321.33 T
1 9 Q
(VMAF_FORCE_READ_ONL) 180 301.33 T
(Y) 299.5 301.33 T
1 10 Q
-0.8 (If set, the \336le will be opened read-only) 243 289.33 P
-0.8 (, even if the default would) 412.81 289.33 P
(be to open the \336le read/write. Blocks in read-only \336les cannot) 243 277.33 T
(be dirtied, and changes in memory blocks will not be updated) 243 265.33 T
(to the disk) 243 253.33 T
1 9 Q
(VM) 294.68 253.33 T
1 10 Q
( blocks.) 309.67 253.33 T
1 9 Q
(VMAF_FORCE_READ_WRITE) 180 234.33 T
1 10 Q
(If set, the \336le will be opened for read/write access, even if the) 243 222.33 T
(default would be to open the \336le for read-only access.) 243 210.33 T
1 9 Q
(VMAF_SHARED_MEMOR) 180 191.33 T
(Y) 292.82 191.33 T
1 10 Q
-0.26 (If set, the) 243 179.33 P
1 9 Q
-0.23 (VM) 289.26 179.33 P
1 10 Q
-0.26 ( manager should try to use shared memory when) 304.25 179.33 P
-0.42 (locking) 243 167.33 P
1 9 Q
-0.38 (VM) 278.51 167.33 P
1 10 Q
-0.42 ( blocks; that is, the same memory block will be used) 293.51 167.33 P
(for a given) 243 155.33 T
1 9 Q
(VM) 294.67 155.33 T
1 10 Q
( block no matter which thread locks the block.) 309.66 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "685" 13
%%Page: "686" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(686) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(VMAF_FORCE_DENY_WRITE) 180 641.33 T
1 10 Q
(If set, the \336le will be opened deny-write; that is, no other) 243 629.33 T
(threads will be allowed to open the \336le for read/write access.) 243 617.33 T
1 9 Q
(VMAF_DISALLOW_SHARED_MUL) 180 598.33 T
(TIPLE) 332.67 598.33 T
1 10 Q
(If this \337ag is set, \336les with the \336le attribute) 243 586.33 T
1 9 Q
(GFHF_SHARED_MUL) 243 574.33 T
(TIPLE) 339.51 574.33 T
1 10 Q
( cannot be opened.) 367.68 574.33 T
1 9 Q
(VMAF_USE_BLOCK_LEVEL_SYNCHRONIZA) 180 555.33 T
(TION) 378.84 555.33 T
1 10 Q
(If set, the block-level synchronization mechanism of the) 243 543.33 T
1 9 Q
(VM) 503.01 543.33 T
1 10 Q
(manager is assumed to be suf\336cient; the more restrictive) 243 531.33 T
(\336le-level synchronization is not used. This is primarily) 243 519.33 T
(intended for system software. \050See \322File-Access) 243 507.33 T
(Synchronization\323 on page 697.\051) 243 495.33 T
(If you open a \336le with) 180 476.33 T
1 9 Q
(VMAF_FORCE_READ_ONL) 283.16 476.33 T
(Y) 402.66 476.33 T
1 10 Q
(, it\325) 407.89 476.33 T
(s generally a good idea) 422.16 476.33 T
(to also open it with) 180 463.33 T
1 9 Q
(VMAF_FORCE_DENY_WRITE) 270.95 463.33 T
1 10 Q
(. When you open a \336le) 403.11 463.33 T
1 9 Q
-0.59 (VMAF_FORCE_READ_ONL) 180 450.33 P
-0.59 (Y) 299.5 450.33 P
1 10 Q
-0.66 (, if the \336le is writable, and is located on a writable) 304.73 450.33 P
-0.64 (device which can be used by other machines \050e.g. a network drive\051, the kernel) 180 437.33 P
(will load the entire \336le into memory and make the blocks non-discardable) 180 424.33 T
(\050even when they are clean\051; this keeps the \336le you see consistent, even if) 180 411.33 T
(another user changes the version of the \336le on the disk. However) 180 398.33 T
(, this can) 478.9 398.33 T
(cause problems if the machine has limited swap space. If the \336le is opened) 180 385.33 T
-0.16 (with) 180 372.33 P
1 9 Q
-0.14 (VMAF_FORCE_DENY_WRITE) 203.55 372.33 P
1 10 Q
-0.16 (, no other device will be allowed to change) 335.71 372.33 P
(the \336le while you have it open, which means the kernel can just load and) 180 359.33 T
(discard blocks as necessary) 180 346.33 T
(.) 305.01 346.33 T
(The routine) 180 326.33 T
4 F
(VMOpen\050\051) 237.04 326.33 T
1 F
( returns the \336le handle. If it cannot satisfy the) 289.81 326.33 T
(request, it returns a null handle and sets the thread error word. The error) 180 313.33 T
(word can be recovered with the) 180 300.33 T
4 F
(ThreadGetError\050\051) 326.67 300.33 T
1 F
( routine. The possible) 419.83 300.33 T
(error conditions are:) 180 287.33 T
1 9 Q
(VM_FILE_EXISTS) 180 267.33 T
4 10 Q
(VMOpen\050\051) 243 255.33 T
1 F
( was passed) 295.77 255.33 T
1 9 Q
(VMO_CREA) 353.38 255.33 T
(TE_ONL) 405.37 255.33 T
(Y) 441.89 255.33 T
1 10 Q
(, but the \336le) 447.11 255.33 T
(already exists.) 243 243.33 T
1 9 Q
(VM_FILE_NOT_FOUND) 180 224.33 T
4 10 Q
-0.02 (VMOpen\050\051) 243 212.33 P
1 F
-0.02 ( was passed) 295.77 212.33 P
1 9 Q
-0.02 (VMO_OPEN) 353.32 212.33 P
1 10 Q
-0.02 (, but the \336le does not exist.) 406.65 212.33 P
1 9 Q
(VM_SHARING_DENIED) 180 193.33 T
1 10 Q
(The \336le was opened by another geode, and access was denied.) 243 181.33 T
81 372.8 171 482.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
0 0 0 1 0 0 0 K
90 450 13.5 13.5 101.25 458.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 458.33 A
0 0 0 1 0 0 0 K
81 438.21 121.5 478.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 446.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "686" 14
%%Page: "687" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(687) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(VM_OPEN_INV) 180 641.33 T
(ALID_VM_FILE) 247.33 641.33 T
4 10 Q
(VMOpen\050\051) 243 629.33 T
1 F
( was instructed to open an invalid) 295.77 629.33 T
1 9 Q
(VM) 455.24 629.33 T
1 10 Q
( \336le \050or a) 470.23 629.33 T
(non-) 243 617.33 T
1 9 Q
(VM) 263.55 617.33 T
1 10 Q
( \336le\051.) 278.54 617.33 T
1 9 Q
(VM_CANNOT_CREA) 180 598.33 T
(TE) 270.16 598.33 T
4 10 Q
-0.57 (VMOpen\050\051) 243 586.33 P
1 F
-0.55 ( cannot create the \336le \050but it does not already exist\051.) 295.77 586.33 P
1 9 Q
(VM_TRUNCA) 180 567.33 T
(TE_F) 239.17 567.33 T
(AILED) 261.5 567.33 T
4 10 Q
(VMOpen\050\051) 243 555.33 T
1 F
( was passed) 295.77 555.33 T
1 9 Q
(VMO_CREA) 353.38 555.33 T
(TE_TRUNCA) 405.37 555.33 T
(TE) 462.05 555.33 T
1 10 Q
(; the \336le) 474.55 555.33 T
(exists but could not be truncated.) 243 543.33 T
1 9 Q
(VM_WRITE_PROTECTED) 180 524.33 T
4 10 Q
(VMOpen\050\051) 243 512.33 T
1 F
( was passed) 295.77 512.33 T
1 9 Q
(VMAF_FORCE_READ_WRITE) 353.38 512.33 T
1 10 Q
(, but the) 484.86 512.33 T
(\336le or disk was write-protected.) 243 500.33 T
0 14 Q
(18.3.3) 123.08 459 T
0 18 Q
(Changing VM File Attributes) 180 459 T
5 10 Q
(VMGetAttributes\050\051, VMSetAttributes\050\051) 180 435.33 T
1 F
-0.02 (When a) 180 415.33 P
1 9 Q
-0.02 (VM) 218.11 415.33 P
1 10 Q
-0.02 ( \336le is created, it is given a set of) 233.1 415.33 P
4 F
-0.02 (VMAttributes) 386.81 415.33 P
1 F
-0.02 ( \050see page 681\051.) 457.54 415.33 P
-0.88 (These attributes can be examined with the routine) 180 402.33 P
4 F
-0.91 (VMGetAttributes\050\051) 409.81 402.33 P
1 F
-0.88 (. The) 506.65 402.33 P
(routine takes one argument, namely the handle of the) 180 389.33 T
1 9 Q
(VM) 432.07 389.33 T
1 10 Q
( \336le \050which is) 447.06 389.33 T
(overridden if a default) 180 376.33 T
1 9 Q
(VM) 285.93 376.33 T
1 10 Q
( \336le is set\051. It returns the) 300.92 376.33 T
4 F
(VMAttributes) 419.63 376.33 T
1 F
( \337ags.) 490.36 376.33 T
(Y) 180 356.33 T
(ou can change the attributes by calling) 185.93 356.33 T
4 F
(VMSetAttributes\050\051) 368.18 356.33 T
1 F
(. This routine) 463.36 356.33 T
(takes three arguments: the \336le handle \050which may be overridden\051, a set of) 180 343.33 T
-0.09 (bits which should be turned on, and a set of bits which should be turned off.) 180 330.33 P
(It returns the new) 180 317.33 T
4 F
(VMAttributes) 267.59 317.33 T
1 F
( \337ags.) 338.32 317.33 T
0 14 Q
(18.3.4) 123.08 275 T
0 18 Q
(Creating and Freeing Blocks) 180 275 T
5 10 Q
(VMAlloc\050\051, VMAllocLMem\050\051, VMFree\050\051) 180 251.33 T
1 F
-0.37 (Once you have created a) 180 231.33 P
1 9 Q
-0.33 (VM) 293.54 231.33 P
1 10 Q
-0.37 ( \336le, you have to allocate blocks in order to write) 308.53 231.33 P
(data to the \336le. The usual way to do this is with) 180 218.33 T
4 F
(VMAlloc\050\051) 403.21 218.33 T
1 F
(. This routine) 454.69 218.33 T
(takes three word-sized arguments:) 180 205.33 T
2 F
(u) 180 185.33 T
1 F
(The \336le handle) 198 185.33 T
(This argument is overridden if a default) 198 173.33 T
1 9 Q
(VM) 385.98 173.33 T
1 10 Q
( \336le is set.) 400.97 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "687" 15
%%Page: "688" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(688) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(A user) 198 641.33 T
(-) 228 641.33 T
1 9 Q
(ID) 231.33 641.33 T
1 10 Q
( number) 241.99 641.33 T
-0.24 (This can be any word of data the application wants to associate with the) 198 629.33 P
1 9 Q
-0.49 (VM) 198 617.33 P
1 10 Q
-0.54 ( block. The application can locate blocks with a given user) 212.99 617.33 P
1 9 Q
-0.49 (ID) 477.31 617.33 P
1 10 Q
-0.54 ( by using) 487.98 617.33 P
4 F
(VMFind\050\051) 198 605.33 T
1 F
( \050see page 691\051.) 247.62 605.33 T
2 F
(u) 180 586.33 T
1 F
(The number of bytes in the block) 198 586.33 T
-0.24 (This may be zero, in which case no memory is allocated; a memory block) 198 574.33 P
-0.39 (must be speci\336cally attached with) 198 562.33 P
4 F
-0.4 (VMAttach\050\051) 355.89 562.33 P
1 F
-0.39 ( \050see \322Attaching Memory) 415.7 562.33 P
(Blocks\323 on page 689\051.) 198 550.33 T
-0.59 (The routine returns the handle of the) 180 531.33 P
1 9 Q
-0.53 (VM) 351.44 531.33 P
1 10 Q
-0.59 ( block. Before you can use the block,) 366.43 531.33 P
(you have to lock it with) 180 518.33 T
4 F
(VMLock\050\051) 290.58 518.33 T
1 F
(. The block is marked dirty when it is) 341.32 518.33 T
(allocated.) 180 505.33 T
-0.32 (There is a routine to allocate a block and initialize it as an LMem heap. This) 180 485.33 P
(is useful if you are storing object blocks in a) 180 472.33 T
1 9 Q
(VM) 384.84 472.33 T
1 10 Q
( \336le. The routine,) 399.83 472.33 T
4 F
(VMAllocLMem\050\051) 180 459.33 T
1 F
(, takes three arguments:) 263.88 459.33 T
2 F
(u) 180 439.33 T
1 F
(The) 198 439.33 T
1 9 Q
(VM) 218.56 439.33 T
1 10 Q
( \336le handle) 233.55 439.33 T
(This is overridden if a default) 198 427.33 T
1 9 Q
(VM) 337.83 427.33 T
1 10 Q
( \336le is set.) 352.82 427.33 T
2 F
(u) 180 408.33 T
1 F
(A member of the) 198 408.33 T
4 F
(LMemT) 277.45 408.33 T
(ypes) 316.55 408.33 T
1 F
( enumerated type) 340.07 408.33 T
(This speci\336es what kind of heap the LMem heap will be. \050See section) 198 396.33 T
(16.2.3 of chapter 16.\051) 198 384.33 T
2 F
(u) 180 365.33 T
1 F
(The size of the block header) 198 365.33 T
-0.56 (Use this if you want to store extra data in the LMem block header) 198 353.33 P
-0.56 (. T) 495.06 353.33 P
-0.56 (o use) 505.81 353.33 P
-0.71 (the standard LMem header) 198 341.33 P
-0.71 (, pass an argument of zero. \050See section 16.3.1) 321.99 341.33 P
(of chapter 16.\051) 198 329.33 T
(The routine creates a) 180 310.33 T
1 9 Q
(VM) 281.12 310.33 T
1 10 Q
( block and allocates a global memory block to go) 296.11 310.33 T
-0.74 (with it. It initializes the heap in the global block and marks the block as dirty) 180 297.33 P
-0.74 (.) 526.18 297.33 P
-0.33 (The LMem heap will begin with two LMem handles and a 64-byte heap; this) 180 284.33 P
(will grow as necessary) 180 271.33 T
(. The) 282.42 271.33 T
1 9 Q
(VM) 308.54 271.33 T
1 10 Q
( block will have a user) 323.53 271.33 T
1 9 Q
(ID) 429.3 271.33 T
1 10 Q
( of zero; you can) 439.97 271.33 T
-0.35 (change this if you wish. The routine returns the handle of the new) 180 258.33 P
1 9 Q
-0.32 (VM) 484.3 258.33 P
1 10 Q
-0.35 ( block.) 499.29 258.33 P
-0.61 (There are two other ways to create LMem blocks in a) 180 238.33 P
1 9 Q
-0.55 (VM) 421.27 238.33 P
1 10 Q
-0.61 ( \336le; these ways give) 436.26 238.33 P
(you more control of the block\325) 180 225.33 T
(s initialization. Y) 314.82 225.33 T
(ou can allocate a) 393.55 225.33 T
1 9 Q
(VM) 473.2 225.33 T
1 10 Q
( block) 488.19 225.33 T
-0.61 (normally) 180 212.33 P
-0.61 (, lock that block, then get the handle of the associated memory block) 220.56 212.33 P
(and initialize an LMem heap in it; or you can allocate an LMem heap) 180 199.33 T
(normally) 180 186.33 T
(, and attach that memory block to the) 220.56 186.33 T
1 9 Q
(VM) 397.45 186.33 T
1 10 Q
( \336le using) 412.44 186.33 T
4 F
(VMAttach\050\051) 460.41 186.33 T
1 F
(.) 520.22 186.33 T
(For more details on LMem heaps, see \322Local Memory) 180 173.33 T
(,\323 Chapter) 424.1 173.33 T
(16.) 474.29 173.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "688" 16
%%Page: "689" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(689) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.7 (T) 180 641.33 P
-0.7 (o free a) 185.75 641.33 P
1 9 Q
-0.63 (VM) 220.32 641.33 P
1 10 Q
-0.7 ( block, call) 235.32 641.33 P
4 F
-0.72 (VMFree\050\051) 284.72 641.33 P
1 F
-0.7 (. This routine is passed two arguments: the) 333.79 641.33 P
1 9 Q
(VM) 180 628.33 T
1 10 Q
( \336le handle, and the) 194.99 628.33 T
1 9 Q
(VM) 290.01 628.33 T
1 10 Q
( block handle. The handle will immediately be) 305.01 628.33 T
(freed, even if it is locked. Any associated memory will also be freed. If you) 180 615.33 T
-0.46 (want to keep the memory) 180 602.33 P
-0.46 (, detach the global memory block from the \336le \050with) 294.65 602.33 P
4 F
(VMDetach\050\051) 180 589.33 T
1 F
(\051 before you free the block.) 242.03 589.33 T
0 14 Q
(18.3.5) 123.08 547 T
0 18 Q
(Attaching Memory Blocks) 180 547 T
5 10 Q
(VMAttach\050\051, VMDetach\050\051) 180 523.33 T
1 F
-0.18 (When you use) 180 503.33 P
4 F
-0.19 (VMAlloc\050\051) 247.04 503.33 P
1 F
-0.18 (, the) 298.52 503.33 P
1 9 Q
-0.17 (VM) 321.5 503.33 P
1 10 Q
-0.18 ( manager allocates a global memory block) 336.49 503.33 P
(and attaches it to a) 180 490.33 T
1 9 Q
(VM) 271.88 490.33 T
1 10 Q
( block. However) 286.87 490.33 T
(, sometimes you want to allocate the) 359.47 490.33 T
-0.42 (block yourself, or you may have an existing memory block which you want to) 180 477.33 P
(copy into the) 180 464.33 T
1 9 Q
(VM) 242.04 464.33 T
1 10 Q
( \336le. T) 257.03 464.33 T
(o do this, you call the routine) 285.38 464.33 T
4 F
(VMAttach\050\051) 422.62 464.33 T
1 F
(.) 482.43 464.33 T
4 F
(VMAttach\050\051) 180 444.33 T
1 F
( takes three arguments:) 239.81 444.33 T
2 F
(u) 180 424.33 T
1 F
(The) 198 424.33 T
1 9 Q
(VM) 218.56 424.33 T
1 10 Q
( \336le handle) 233.55 424.33 T
(The handle of the \336le to attach.) 198 412.33 T
2 F
(u) 180 393.33 T
1 F
(The) 198 393.33 T
1 9 Q
(VM) 218.56 393.33 T
1 10 Q
( block handle) 233.55 393.33 T
-0.06 (If you pass a null handle, a free) 198 381.33 P
1 9 Q
-0.06 (VM) 346.03 381.33 P
1 10 Q
-0.06 ( block will be allocated and attached) 361.02 381.33 P
(to the global memory block. If you pass the handle of an existing block,) 198 369.33 T
-0.05 (the data in the) 198 357.33 P
1 9 Q
-0.05 (VM) 268.93 357.33 P
1 10 Q
-0.05 ( block will be replaced with the contents of the global) 283.92 357.33 P
(memory block.) 198 345.33 T
2 F
(u) 180 326.33 T
1 F
(The global memory handle) 198 326.33 T
(The memory block must be swappable. After the block is attached, the) 198 314.33 T
1 9 Q
-0.19 (VM) 198 302.33 P
1 10 Q
-0.21 ( manager may discard or free it, as with any other global blocks used) 212.99 302.33 P
(by the) 198 290.33 T
1 9 Q
(VM) 229.49 290.33 T
1 10 Q
( \336le.) 244.48 290.33 T
4 F
(VMAttach\050\051) 180 271.33 T
1 F
( attaches the global memory block to the) 239.81 271.33 T
1 9 Q
(VM) 429.48 271.33 T
1 10 Q
( block. The) 444.47 271.33 T
1 9 Q
(VM) 497.45 271.33 T
1 10 Q
(Manager becomes the owner of the memory block. The next time the \336le is) 180 258.33 T
-0.74 (updated, the memory block will be copied to the \336le.) 180 245.33 P
4 F
-0.76 (VMAttach\050\051) 415.44 245.33 P
1 F
-0.74 ( returns the) 475.25 245.33 P
(handle of the) 180 232.33 T
1 9 Q
(VM) 243.34 232.33 T
1 10 Q
( block. If it could not perform the attach, it returns a null) 258.33 232.33 T
(handle and leaves the global memory block unchanged.) 180 219.33 T
(Y) 180 199.33 T
(ou can also detach the global memory block from a) 185.93 199.33 T
1 9 Q
(VM) 421.71 199.33 T
1 10 Q
( block. The routine) 436.7 199.33 T
4 F
(VMDetach\050\051) 180 186.33 T
1 F
( disassociates a global memory block from its) 242.03 186.33 T
1 9 Q
(VM) 452.63 186.33 T
1 10 Q
( block. The) 467.62 186.33 T
-0.44 (routine takes three arguments: the) 180 173.33 P
1 9 Q
-0.4 (VM) 342.63 173.33 P
1 10 Q
-0.44 ( \336le handle; the) 357.63 173.33 P
1 9 Q
-0.4 (VM) 430.7 173.33 P
1 10 Q
-0.44 ( block handle; and) 445.7 173.33 P
-0.53 (the) 180 160.33 P
4 F
-0.54 (GeodeHandle) 197.25 160.33 P
1 F
-0.53 ( of the geode which will be made the owner of the memory) 267.43 160.33 P
-0.25 (block. \050Passing a null) 180 147.33 P
4 F
-0.25 (GeodeHandle) 280.52 147.33 P
1 F
-0.25 ( will make the calling geode the block\325) 350.7 147.33 P
-0.25 (s) 523.84 147.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "689" 17
%%Page: "690" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(690) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.41 (owner) 180 641.33 P
-0.41 (.\051 The) 207.59 641.33 P
1 9 Q
-0.37 (VM) 236.21 641.33 P
1 10 Q
-0.41 ( manager disassociates the memory block from the) 251.21 641.33 P
1 9 Q
-0.37 (VM) 484.41 641.33 P
1 10 Q
-0.41 ( block,) 499.41 641.33 P
(changes the memory block\325) 180 628.33 T
(s owner) 303.9 628.33 T
(, marks it \322non-discardable,\323 and returns) 338.9 628.33 T
(its handle. If the) 180 615.33 T
1 9 Q
(VM) 259.64 615.33 T
1 10 Q
( block is not currently in memory) 274.63 615.33 T
(,) 426.86 615.33 T
4 F
(VMDetach\050\051) 432.42 615.33 T
1 F
( will) 494.45 615.33 T
-0.13 (automatically allocate a memory block, copy the) 180 602.33 P
1 9 Q
-0.12 (VM) 403.59 602.33 P
1 10 Q
-0.13 ( block\325) 418.58 602.33 P
-0.13 (s data into it, and) 446.98 602.33 P
-0.58 (return the memory block\325) 180 589.33 P
-0.58 (s handle. If the) 294.93 589.33 P
1 9 Q
-0.52 (VM) 365.22 589.33 P
1 10 Q
-0.58 ( block was dirty) 380.21 589.33 P
-0.58 (, the block will be) 450.34 589.33 P
-0.61 (updated to the \336le before it is detached. The next time the) 180 576.33 P
1 9 Q
-0.55 (VM) 443.43 576.33 P
1 10 Q
-0.61 ( block is locked,) 458.43 576.33 P
(a new global memory block will be allocated for it.) 180 563.33 T
0 14 Q
(18.3.6) 123.08 521 T
0 18 Q
(Accessing and Altering VM Blocks) 180 521 T
5 10 Q
(VMLock\050\051, VMUnlock\050\051, VMDirty\050\051, VMFind\050\051,) 180 497.33 T
(VMModifyUserID\050\051, VMPreserveBlocksHandle\050\051) 180 484.33 T
1 F
-0.23 (Once you have opened a) 180 464.33 P
1 9 Q
-0.21 (VM) 292.73 464.33 P
1 10 Q
-0.23 ( \336le and allocated blocks, you will need to access) 307.73 464.33 P
(blocks. The) 180 451.33 T
1 9 Q
(VM) 234.83 451.33 T
1 10 Q
( library provides many routines for doing this.) 249.82 451.33 T
-0.75 (If you need to access the data in a) 180 431.33 P
1 9 Q
-0.67 (VM) 332.17 431.33 P
1 10 Q
-0.75 ( \336le, you can use the routine) 347.16 431.33 P
4 F
-0.77 (VMLock\050\051) 475.45 431.33 P
1 F
-0.75 (.) 526.19 431.33 P
-0.59 (This routine moves a) 180 418.33 P
1 9 Q
-0.53 (VM) 277.46 418.33 P
1 10 Q
-0.59 ( block onto the global heap. It does this by allocating) 292.45 418.33 P
(a global memory block \050if the) 180 405.33 T
1 9 Q
(VM) 316.51 405.33 T
1 10 Q
( block is not already associated with a) 331.5 405.33 T
-0.4 (memory block\051, reallocating the global block if it had been discarded, locking) 180 392.33 P
(the memory block on the global heap, and copying the) 180 379.33 T
1 9 Q
(VM) 431.15 379.33 T
1 10 Q
( block into the) 446.14 379.33 T
(global block, if necessary) 180 366.33 T
(. \050It will copy the) 293.54 366.33 T
1 9 Q
(VM) 374.29 366.33 T
1 10 Q
( block to memory only if) 389.28 366.33 T
-0.15 (necessary) 180 353.33 P
-0.15 (, i.e. if the memory block is newly-allocated, or had been discarded) 224.07 353.33 P
(and reallocated.\051) 180 340.33 T
4 F
(VMLock\050\051) 260.01 340.33 T
1 F
( takes three arguments: the handle of the) 310.75 340.33 T
1 9 Q
(VM) 505.22 340.33 T
1 10 Q
-0.09 (\336le, the VMBlockHandle of the block to lock, and a pointer to a memHandle) 180 327.33 P
(variable. It returns a pointer to the start of the block, and writes the global) 180 314.33 T
(block\325) 180 301.33 T
(s handle into the memHandle variable. Y) 205.75 301.33 T
(ou can now access the block) 395.05 301.33 T
-0.02 (the same way you would any other block, with one exception: When you are) 180 288.33 P
-0.23 (done with the block, you do not call) 180 275.33 P
4 F
-0.23 (MemUnlock\050\051) 343.59 275.33 P
1 F
-0.23 (; instead, call the routine) 413.59 275.33 P
4 F
(VMUnlock\050\051) 180 262.33 T
1 F
(, passing it the handle of the) 242.22 262.33 T
3 F
(global memory) 376.69 262.33 T
1 F
( block \050not the) 444.46 262.33 T
(handle of the) 180 249.33 T
1 9 Q
(VM) 243.34 249.33 T
1 10 Q
( block\051. This will unlock the global block on the heap.) 258.33 249.33 T
-0.41 (If you alter the global memory block, you will need to notify the) 180 229.33 P
1 9 Q
-0.37 (VM) 470.33 229.33 P
1 10 Q
-0.41 ( manager) 485.32 229.33 P
-0.12 (of this so it will know to copy the changes back to the) 180 216.33 P
1 9 Q
-0.1 (VM) 426.49 216.33 P
1 10 Q
-0.12 ( \336le. Y) 441.49 216.33 P
-0.12 (ou do this by) 469.79 216.33 P
-0.07 (calling the routine) 180 203.33 P
4 F
-0.07 (VMDirty\050\051) 267.76 203.33 P
1 F
-0.07 (.) 320.53 203.33 P
4 F
-0.07 (VMDirty\050\051) 326.02 203.33 P
1 F
-0.07 ( takes one argument, the handle) 378.79 203.33 P
(of the global memory block \050) 180 190.33 T
3 F
(not) 310.02 190.33 T
1 F
( the) 324.65 190.33 T
1 9 Q
(VM) 345.21 190.33 T
1 10 Q
( block\051. It is important to dirty the) 360.2 190.33 T
-0.23 (block while it is still locked on the heap; as soon as you unlock a clean block,) 180 177.33 P
-0.46 (the) 180 164.33 P
1 9 Q
-0.41 (VM) 197.32 164.33 P
1 10 Q
-0.46 ( manager may choose to discard it. Dirty blocks are copied back to the) 212.32 164.33 P
1 9 Q
(VM) 180 151.33 T
1 10 Q
( \336le when it is updated. Note that if an object in a) 194.99 151.33 T
1 9 Q
(VM) 427.08 151.33 T
1 10 Q
( block is marked) 442.08 151.33 T
81 144 171 286.16 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Dirtying Blocks) 81 233.16 T
1 F
-0.27 (It is important to call) 81 217.16 P
4 F
-0.4 (VMDirty\050\051) 81 206.16 P
1 F
-0.39 ( while the) 128.49 206.16 P
(memory block is still) 81 195.16 T
-0.95 (locked; otherwise, the) 81 184.16 P
-0.71 (memory block may be) 81 173.16 P
(discarded before you) 81 162.16 T
(dirty it.) 81 151.16 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 262.03 G
4 H
0 Z
90 450 13.5 13.5 101.25 262.03 A
0 0 0 1 0 0 0 K
81 241.92 121.5 282.42 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 249.97 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "690" 18
%%Page: "691" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(691) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.02 (dirty \050via) 180 641.33 P
4 F
-0.02 (ObjMarkDirty\050\051) 225.53 641.33 P
1 F
-0.02 (\051, the block is automatically dirtied. Similarly) 307.01 641.33 P
-0.02 (, if) 516.21 641.33 P
(you attach a global memory block to a) 180 628.33 T
1 9 Q
(VM) 357.64 628.33 T
1 10 Q
( block \050via) 372.63 628.33 T
4 F
(VMAttach\050\051) 422.46 628.33 T
1 F
(\051, the) 482.27 628.33 T
1 9 Q
(VM) 508.94 628.33 T
1 10 Q
(block is automatically dirtied.) 180 615.33 T
(Y) 180 595.33 T
(ou can dynamically resize) 185.93 595.33 T
1 9 Q
(VM) 307.79 595.33 T
1 10 Q
( blocks. T) 322.78 595.33 T
(o do this, lock the) 365.58 595.33 T
1 9 Q
(VM) 449.3 595.33 T
1 10 Q
( block with) 464.3 595.33 T
4 F
(VMLock\050\051) 180 582.33 T
1 F
(; then resize the global memory block with) 230.74 582.33 T
4 F
(MemReAlloc\050\051) 429.29 582.33 T
1 F
(. Be) 502.44 582.33 T
-0.76 (sure to mark the block dirty so the changes will be copied to the disk \336le. Note) 180 569.33 P
(that although the global memory block will remain locked, it may move on) 180 556.33 T
-0.3 (the global heap when it is resized. Y) 180 543.33 P
-0.3 (ou will therefore need to dereference the) 343.86 543.33 P
(global memory handle \050with) 180 530.33 T
4 F
(MemDeref\050\051) 312.43 530.33 T
1 F
(\051 before accessing the memory) 374.28 530.33 T
(.) 511.87 530.33 T
(Y) 180 510.33 T
(ou can locate) 185.93 510.33 T
1 9 Q
(VM) 248.53 510.33 T
1 10 Q
( blocks by their user) 263.52 510.33 T
1 9 Q
(ID) 359.83 510.33 T
1 10 Q
( numbers. The routine) 370.5 510.33 T
4 F
(VMFind\050\051) 476.62 510.33 T
1 F
-0.04 (takes three arguments: the) 180 497.33 P
1 9 Q
-0.03 (VM) 308.2 497.33 P
1 10 Q
-0.04 ( \336le handle, a) 323.19 497.33 P
1 9 Q
-0.03 (VM) 388.43 497.33 P
1 10 Q
-0.04 ( block handle, and the user) 403.43 497.33 P
1 9 Q
-0.31 (ID) 180 484.33 P
1 10 Q
-0.35 ( for which to look. The routine looks through the block table, starting with) 190.66 484.33 P
-0.11 (the handle) 180 471.33 P
3 F
-0.11 (after) 232.01 471.33 P
1 F
-0.11 ( the one passed, until it \336nds a block with the speci\336ed user) 253.48 471.33 P
1 9 Q
(ID) 180 458.33 T
1 10 Q
(. If it does not \336nd such a block, it returns a null handle; otherwise, it) 190.66 458.33 T
(returns the block\325) 180 445.33 T
(s VMBlockHandle. Thus, by passing in a block handle of) 260.93 445.33 T
-0.75 (zero, you will get the handle of the \336rst block with the speci\336ed) 180 432.33 P
1 9 Q
-0.67 (ID) 465.33 432.33 P
1 10 Q
-0.75 (; by passing) 476 432.33 P
(back in that block\325) 180 419.33 T
(s handle, you will get the next block with that) 264.29 419.33 T
1 9 Q
(ID) 478.97 419.33 T
1 10 Q
(; and so) 489.64 419.33 T
(on, until you get all the blocks \050after which you will be returned a null) 180 406.33 T
(handle\051.) 180 393.33 T
(Y) 180 373.33 T
(ou can change a block\325) 185.93 373.33 T
(s user) 288.17 373.33 T
1 9 Q
(ID) 318.54 373.33 T
1 10 Q
( number by calling the routine) 329.2 373.33 T
4 F
(VMModifyUserID\050\051) 180 360.33 T
1 F
(. This routine takes three arguments: the) 278.5 360.33 T
1 9 Q
(VM) 472.23 360.33 T
1 10 Q
( \336le) 487.22 360.33 T
-0.63 (handle, the) 180 347.33 P
1 9 Q
-0.57 (VM) 233.75 347.33 P
1 10 Q
-0.63 ( block handle, and the new user) 248.74 347.33 P
1 9 Q
-0.57 (ID) 393.81 347.33 P
1 10 Q
-0.63 ( number) 404.47 347.33 P
-0.63 (. Since user) 441.99 347.33 P
1 9 Q
-0.57 (ID) 496.4 347.33 P
1 10 Q
-0.63 (s are) 507.07 347.33 P
-0.46 (maintained in the block table, not in the blocks themselves, it doesn\325) 180 334.33 P
-0.46 (t matter) 490.79 334.33 P
-0.37 (whether the block is locked, or even whether it is associated with data in the) 180 321.33 P
(\336le. \050For example, a block allocated with a size of zero can have its user) 180 308.33 T
(-) 509.5 308.33 T
1 9 Q
(ID) 512.83 308.33 T
1 10 Q
(changed.\051) 180 295.33 T
(Ordinarily) 180 275.33 T
(, the) 227.78 275.33 T
1 9 Q
(VM) 251.12 275.33 T
1 10 Q
( manager can free any unlocked, clean global block if the) 266.11 275.33 T
(space is needed. However) 180 262.33 T
(, you can instruct the) 297.04 262.33 T
1 9 Q
(VM) 397.97 262.33 T
1 10 Q
( manager not to free the) 412.96 262.33 T
(global block associated with a speci\336c block by calling the routine) 180 249.33 T
4 F
(VMPreserveBlocksHandle\050\051) 180 236.33 T
1 F
(. The routine takes two arguments, namely) 323.71 236.33 T
-0.62 (the) 180 223.33 P
1 9 Q
-0.56 (VM) 197.16 223.33 P
1 10 Q
-0.62 ( \336le handle and the) 212.15 223.33 P
1 9 Q
-0.56 (VM) 301.3 223.33 P
1 10 Q
-0.62 ( block handle. It sees to it that the speci\336ed) 316.29 223.33 P
1 9 Q
-0.56 (VM) 513.84 223.33 P
1 10 Q
(block will remain attached to the same global block until the) 180 210.33 T
1 9 Q
(VM) 462.48 210.33 T
1 10 Q
( block is) 477.47 210.33 T
(speci\336cally detached \050or reattached\051.) 180 197.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "691" 19
%%Page: "692" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(692) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(18.3.7) 123.08 636 T
0 18 Q
(VM Block Information) 180 636 T
5 10 Q
(VMVMBlockToMemBlock\050\051, VMMemBlockToVMBlock\050\051, VMInfo\050\051) 180 612.33 T
1 F
(Several utilities are provided to give you information about) 180 592.33 T
1 9 Q
(VM) 456.15 592.33 T
1 10 Q
( blocks.) 471.14 592.33 T
(If you know the handle of a) 180 572.33 T
1 9 Q
(VM) 308.72 572.33 T
1 10 Q
( block, you can \336nd out the handle of the) 323.71 572.33 T
-0.44 (associated global block by calling the routine) 180 559.33 P
4 F
-0.45 (VMVMBlockT) 386.43 559.33 P
-0.45 (oMemBlock\050\051) 457.17 559.33 P
1 F
-0.44 (.) 525.88 559.33 P
(This routine takes two arguments, namely the) 180 546.33 T
1 9 Q
(VM) 397.26 546.33 T
1 10 Q
( \336le handle and the) 412.25 546.33 T
1 9 Q
(VM) 504.49 546.33 T
1 10 Q
(block handle. It returns the global memory handle of the associated block;) 180 533.33 T
(however) 180 520.33 T
(, note the caveats regarding global handles in the above section. If) 217.96 520.33 T
(the) 180 507.33 T
1 9 Q
(VM) 197.78 507.33 T
1 10 Q
( block is not currently associated with a global memory block, the) 212.77 507.33 T
-0.6 (routine will allocate a memory block, copy the) 180 494.33 P
1 9 Q
-0.54 (VM) 389.65 494.33 P
1 10 Q
-0.6 ( block into it, and return its) 404.64 494.33 P
-0.45 (handle. If the) 180 481.33 P
1 9 Q
-0.4 (VM) 243.85 481.33 P
1 10 Q
-0.45 ( handle is not associated with any data in the \336le and is not) 258.85 481.33 P
-0.06 (attached to a global memory block,) 180 468.33 P
4 F
-0.06 (VMVMBlockT) 343.21 468.33 P
-0.06 (oMemBlock\050\051) 413.95 468.33 P
1 F
-0.06 ( returns a) 482.66 468.33 P
(null handle.) 180 455.33 T
-0.6 (Conversely) 180 435.33 P
-0.6 (, if you know the handle of a global memory block and want to \336nd) 230.18 435.33 P
(out the) 180 422.33 T
1 9 Q
(VM) 215.56 422.33 T
1 10 Q
( \336le and block to which it is attached, call the routine) 230.55 422.33 T
4 F
-0.64 (VMMemBlockT) 180 409.33 P
-0.64 (oVMBlock\050\051) 258.52 409.33 P
1 F
-0.62 (. This routine takes two arguments: the global) 319.45 409.33 P
(memory handle, and a pointer to a) 180 396.33 T
4 F
(VMFileHandle) 342.25 396.33 T
1 F
( variable. It returns the) 417.42 396.33 T
1 9 Q
-0.33 (VM) 180 383.33 P
1 10 Q
-0.37 ( block handle of the associated) 194.99 383.33 P
1 9 Q
-0.33 (VM) 336.14 383.33 P
1 10 Q
-0.37 ( block, and writes the handle of the) 351.14 383.33 P
1 9 Q
-0.33 (VM) 513.59 383.33 P
1 10 Q
-0.36 (\336le to the address passed. If the global memory block is not attached to a) 180 370.33 P
1 9 Q
-0.32 (VM) 513.58 370.33 P
1 10 Q
(\336le, it returns null handles.) 180 357.33 T
(The Boolean routine) 180 337.33 T
4 F
(VMInfo\050\051) 276.86 337.33 T
1 F
( is an omnibus information routine. It takes) 323.33 337.33 T
(three arguments: the handle of a) 180 324.33 T
1 9 Q
(VM) 334.46 324.33 T
1 10 Q
( \336le, the handle of a) 349.45 324.33 T
1 9 Q
(VM) 443.73 324.33 T
1 10 Q
( block, and a) 458.73 324.33 T
-0.9 (pointer to a) 180 311.33 P
4 F
-0.93 (VMInfoStruct) 233.41 311.33 P
1 F
-0.9 ( structure \050described below in Code Display) 304.89 311.33 P
-0.9 (18-) 503 311.33 P
-0.9 (1\051.) 517.45 311.33 P
(If the) 180 298.33 T
1 9 Q
(VM) 207.96 298.33 T
1 10 Q
( block is free, out of range, or otherwise invalid, it returns) 222.95 298.33 T
3 F
(false) 492.42 298.33 T
1 F
(;) 513.7 298.33 T
(otherwise, it returns) 180 285.33 T
3 F
(true) 277.78 285.33 T
1 F
( \050i.e. non-zero\051 and \336lls in the \336elds of the) 296.29 285.33 T
4 F
(VMInfoStruct) 180 272.33 T
1 F
(.) 251.48 272.33 T
81 239.98 531 252 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 239.98 531 252 R
7 X
0 0 0 1 0 0 0 K
V
76.5 247.23 617.5 250.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 233.31 T
(18-) 147.13 233.31 T
(1 VMInfoStruct) 161.58 233.31 T
5 9 Q
(/* This is the definition of the VMInfoStruct. A pointer to a VMInfoStruct is) 81 218.98 T
( * passed to the routine VMInfo\050\051. The routine fills in the structure\325s fields.) 81 207.98 T
( */) 81 196.98 T
(typedef struct {) 81 185.98 T
(MemHandle) 125 174.98 T
(mh;) 212.5 174.98 T
(/* Null handle returned if no block is attached */) 256.5 174.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "692" 20
%%Page: "693" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(693) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(word) 125 642 T
(size;) 212.5 642 T
(/* Size of VM block in bytes */) 256.5 642 T
(word) 125 631 T
(userID;) 212.5 631 T
(/* User ID \050or zero if no user ID was specified\051) 256.5 631 T
(*/) 81 620 T
(} VMInfoStruct;) 81 609 T
81 584.98 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.98 531 597 R
7 X
0 0 0 1 0 0 0 K
V
76.5 592.23 617.5 595.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(18.3.8) 123.08 544.98 T
0 18 Q
(Updating and Saving Files) 180 544.98 T
5 10 Q
(VMUpdate\050\051, VMSave\050\051, VMSaveAs\050\051, VMRevert\050\051,) 180 521.31 T
(VMGetDirtyState\050\051 VMSave\050\051) 180 508.31 T
1 F
-0.78 (When you dirty a memory block, that action noti\336es the) 180 488.31 P
1 9 Q
-0.7 (VM) 432.62 488.31 P
1 10 Q
-0.78 ( manager that the) 447.61 488.31 P
(block will need to be written back to the \336le. If the attribute) 180 475.31 T
1 9 Q
-0.56 (VMA_SYNC_UPDA) 180 462.31 P
-0.56 (TE is) 262.67 462.31 P
3 F
-0.56 (off) 286.06 462.31 P
1 10 Q
-0.62 (, the) 296.56 462.31 P
1 9 Q
-0.56 (VM) 318.65 462.31 P
1 10 Q
-0.62 ( manager will try to update the block to the) 333.65 462.31 P
(disk \336le as soon as the block is unlocked, and will then mark the block as) 180 449.31 T
3 F
-0.47 (clean) 180 436.31 P
1 F
-0.47 (. However) 204.06 436.31 P
-0.47 (, if the \337ag is) 249.33 436.31 P
3 F
-0.47 (on) 309.95 436.31 P
1 F
-0.47 (, the manager does not write the block until it) 321.05 436.31 P
(is speci\336cally told to) 180 423.31 T
3 F
(update) 276.31 423.31 T
1 F
( the \336le. At this point, it copies any dirty blocks) 307.97 423.31 T
-0.6 (back over their attached) 180 410.31 P
1 9 Q
-0.54 (VM) 292.79 410.31 P
1 10 Q
-0.6 ( blocks, then marks all blocks as) 307.78 410.31 P
3 F
-0.6 (clean) 455.83 410.31 P
1 F
-0.6 (. If you use) 479.89 410.31 P
-0.12 (the document control objects, they will take care of updating and saving the) 180 397.31 P
(\336le. However) 180 384.31 T
(, you may need to call the updating routines speci\336cally) 240 384.31 T
(.) 495.77 384.31 T
-0.44 (The routine) 180 364.31 P
4 F
-0.46 (VMUpdate\050\051) 236.15 364.31 P
1 F
-0.44 ( instructs the) 299.11 364.31 P
1 9 Q
-0.4 (VM) 362.41 364.31 P
1 10 Q
-0.44 ( manager to write all dirty blocks) 377.4 364.31 P
-0.34 (to the disk. It takes one argument, the) 180 351.31 P
1 9 Q
-0.31 (VM) 357.85 351.31 P
1 10 Q
-0.34 ( \336le handle \050which is overridden if) 372.84 351.31 P
-0.14 (a thread \336le has been set\051. It returns zero if the update proceeded normally;) 180 338.31 P
(otherwise, it returns either one of the) 180 325.31 T
4 F
(FileErrors) 355.93 325.31 T
1 F
( or one of the three) 410.38 325.31 T
4 F
(VMUpdate\050\051) 180 312.31 T
1 F
( status codes:) 242.96 312.31 T
1 9 Q
(VM_UPDA) 180 292.31 T
(TE_NOTHING_DIRTY) 225.84 292.31 T
1 10 Q
(All blocks were clean, so the) 243 280.31 T
1 9 Q
(VM) 375.8 280.31 T
1 10 Q
( disk \336le was not changed.) 390.79 280.31 T
1 9 Q
(VM_UPDA) 180 261.31 T
(TE_INSUFFICIENT_DISK_SP) 225.84 261.31 T
(ACE) 355.85 261.31 T
1 10 Q
(The \336le has grown since the last update, and there is not) 243 249.31 T
(enough room on the disk to accommodate it.) 243 237.31 T
1 9 Q
(VM_UPDA) 180 218.31 T
(TE_BLOCK_W) 225.84 218.31 T
(AS_LOCKED) 288.34 218.31 T
1 10 Q
(Some of the) 243 206.31 T
1 9 Q
(VM) 299.86 206.31 T
1 10 Q
( blocks were locked by another thread, so they) 314.85 206.31 T
(could not be updated to the disk.) 243 194.31 T
4 F
(VMUpdate\050\051) 180 175.31 T
1 F
( is optimized for updating clean \336les; thus, it costs very little) 242.96 175.31 T
-0.14 (time to call) 180 162.31 P
4 F
-0.15 (VMUpdate\050\051) 234.03 162.31 P
1 F
-0.14 ( when you are not sure if the \336le is dirty) 296.99 162.31 P
-0.14 (. If a \336le is) 480.03 162.31 P
(auto-saved,) 180 149.31 T
4 F
(VMUpdate\050\051) 235.75 149.31 T
1 F
( is used.) 298.71 149.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "693" 21
%%Page: "694" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(694) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(A) 180 641.33 T
1 9 Q
(VM) 190 641.33 T
1 10 Q
( \336le can maintain backup copies of updated blocks. If so, updating the) 204.99 641.33 T
(\336le will write changes to the disk, but will not alter those backup blocks. T) 180 628.33 T
(o) 523.05 628.33 T
(\336nalize the changes, call the routine) 180 615.33 T
4 F
(VMSave\050\051) 350.57 615.33 T
1 F
(. This routine updates the) 400.38 615.33 T
(\336le, then deletes all the backup blocks and compacts the \336le. \050See) 180 602.33 T
(Figure) 180 589.33 T
(18-) 213.52 589.33 T
(4.\051 If the \336le does not have backup capability) 227.97 589.33 T
(,) 433.75 589.33 T
4 F
(VMSave\050\051) 439.31 589.33 T
1 F
( acts the) 489.12 589.33 T
(same as) 180 576.33 T
4 F
(VMUpdate\050\051) 219.83 576.33 T
1 F
(.) 282.79 576.33 T
(If a \336le has the backup capability) 180 556.33 T
(, you cannot directly access the backup) 333 556.33 T
(blocks. However) 180 543.33 T
(, you can instruct the) 254.45 543.33 T
1 9 Q
(VM) 355.38 543.33 T
1 10 Q
( manager to restore the \336le to its) 370.37 543.33 T
(last-saved state. The command) 180 530.33 T
4 F
(VMRevert\050\051) 326.14 530.33 T
1 F
( causes the) 386.51 530.33 T
1 9 Q
(VM) 440.22 530.33 T
1 10 Q
( manager to) 455.21 530.33 T
(check the) 180 517.33 T
1 9 Q
(VM) 226.48 517.33 T
1 10 Q
( \336le for blocks which have backups. It then deletes the) 241.47 517.33 T
3 F
-0.28 (non-backup) 180 504.33 P
1 F
-0.28 ( block, and changes the backup block into a regular block. It also) 233.7 504.33 P
81 144 531 648 C
180 144 531 491.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 243.48 T
(18-) 213.34 243.48 T
(4) 227.79 243.48 T
3 F
(Saving a backup-enabled) 236.13 243.48 T
3 9 Q
(VM) 354.83 243.48 T
3 10 Q
( \336le) 369.66 243.48 T
-0.23 (1\051) 180 229.48 P
-0.23 (This is the \336le when) 191.67 229.48 P
6 F
-0.24 (VMSave\050\051) 285.31 229.48 P
3 F
-0.23 ( is called. Backup blocks are noted with an) 334.57 229.48 P
(apostrophe.) 180 217.48 T
-0.47 (2\051) 180 203.48 P
-0.47 (The \336le is updated \050all dirty blocks are written to the disk\051. This may cause) 191.67 203.48 P
(more backup blocks to be created.) 180 191.48 T
(3\051) 180 177.48 T
(All backup blocks are freed.) 191.67 177.48 T
(4\051) 180 163.48 T
(The \336le is always compacted at the end of a save, whether or not it has) 191.67 163.48 T
(fallen below the compression threshold.) 180 151.48 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
223.17 315.76 295.67 356.59 R
4 X
V
0.5 H
0 Z
0 X
N
182.83 436.76 223.17 477.59 R
7 X
V
0 X
N
(File) 192.72 459.51 T
(Header) 186.25 449.51 T
295.67 436.76 336 477.59 R
7 X
V
0 X
N
3 9 Q
(VM) 307.03 459.51 T
3 10 Q
(Header) 299.08 449.51 T
351.84 436.76 383.5 477.59 R
7 X
V
0 X
N
(1) 364.89 453.49 T
383.5 436.76 432.67 477.59 R
7 X
V
0 X
N
(2) 405.31 453.49 T
336 436.76 351.84 477.59 R
7 X
V
0 X
N
(3) 341.14 453.49 T
223.17 436.76 254.83 477.59 R
7 X
V
0 X
N
(4) 236.22 453.49 T
254.83 436.76 295.67 477.59 R
7 X
V
0 X
N
(2') 271.08 453.49 T
182.83 376.26 223.17 417.09 R
7 X
V
0 X
N
(File) 192.72 399.01 T
(Header) 186.25 389.01 T
295.67 376.26 336 417.09 R
7 X
V
0 X
N
3 9 Q
(VM) 307.03 399.01 T
3 10 Q
(Header) 299.08 389.01 T
351.84 376.26 383.5 417.09 R
7 X
V
0 X
N
(1') 363.5 392.99 T
383.5 376.26 432.67 417.09 R
7 X
V
0 X
N
(2) 405.31 392.99 T
336 376.26 351.84 417.09 R
7 X
V
0 X
N
(3) 341.14 392.99 T
223.17 376.26 254.83 417.09 R
7 X
V
0 X
N
(4') 234.83 392.99 T
254.83 376.26 295.67 417.09 R
7 X
V
0 X
N
(2') 271.08 392.99 T
432.67 376.26 464.34 417.09 R
7 X
V
0 X
N
(1) 445.72 392.99 T
464.34 376.26 505.17 417.09 R
7 X
V
0 X
N
(4) 481.97 392.99 T
182.83 315.76 223.17 356.59 R
7 X
V
0 X
N
(File) 192.72 338.51 T
(Header) 186.25 328.51 T
295.67 315.76 336 356.59 R
7 X
V
0 X
N
3 9 Q
(VM) 307.03 338.51 T
3 10 Q
(Header) 299.08 328.51 T
351.84 315.76 383.5 356.59 R
4 X
V
0 X
N
383.5 315.76 432.67 356.59 R
7 X
V
0 X
N
(2) 405.31 332.49 T
336 315.76 351.84 356.59 R
7 X
V
0 X
N
(3) 341.14 332.49 T
432.67 315.76 464.34 356.59 R
7 X
V
0 X
N
(1) 445.72 332.49 T
464.34 315.76 505.17 356.59 R
7 X
V
0 X
N
(4) 481.97 332.49 T
(1.) 182.83 479.64 T
(2.) 182.83 419.14 T
(3.) 182.83 358.64 T
182.83 255.26 223.17 296.09 R
7 X
V
0 X
N
(File) 192.72 278.02 T
(Header) 186.25 268.02 T
223.17 255.26 263.5 296.09 R
7 X
V
0 X
N
3 9 Q
(VM) 234.53 278.02 T
3 10 Q
(Header) 226.58 268.02 T
279.34 255.26 328.5 296.09 R
7 X
V
0 X
N
(2) 301.14 271.99 T
263.5 255.26 279.34 296.09 R
7 X
V
0 X
N
(3) 268.64 271.99 T
328.5 255.26 360.17 296.09 R
7 X
V
0 X
N
(1) 341.56 271.99 T
360.17 255.26 401 296.09 R
7 X
V
0 X
N
(4) 377.81 271.99 T
(4.) 182.83 298.14 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "694" 22
%%Page: "695" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(695) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(discards all blocks in memory that were attached to the blocks which just) 180 641.33 T
-0.48 (reverted. The \336le will then be in its condition as of the last time it was saved.) 180 628.33 P
-0.82 (The routine may not be used on \336les which do not have the \337ag) 180 615.33 P
1 9 Q
-0.74 (VMA_BACKUP) 463.21 615.33 P
1 10 Q
(set.) 180 602.33 T
(Y) 180 582.33 T
(ou can save a \336le under a new name with the routine) 185.93 582.33 T
4 F
(VMSaveAs\050\051) 433.93 582.33 T
1 F
(. If the) 496.33 582.33 T
(\336le has backup capability) 180 569.33 T
(, the old \336le will be restored to its last-saved) 296.7 569.33 T
(condition \050as if) 180 556.33 T
4 F
(VMRevert\050\051) 250.93 556.33 T
1 F
( had been called\051; otherwise, the old \336le will be) 311.3 556.33 T
-0.26 (left in the \336le\325) 180 543.33 P
-0.26 (s current state. The routine is passed the name of the new \336le.) 243.11 543.33 P
4 F
-0.19 (VMSaveAs\050\051) 180 530.33 P
1 F
-0.18 ( copies all the blocks from the old \336le to the new one. If a block) 242.4 530.33 P
(has a backup copy) 180 517.33 T
(, the more recent version is copied. The new \336le will thus) 262.98 517.33 T
(have the \336le in its current state; block handles will be preserved. After the) 180 504.33 T
(new \336le has been created, if the \336le has backup-capability) 180 491.33 T
(,) 446.16 491.33 T
4 F
(VMSaveAs\050\051) 451.72 491.33 T
1 F
(reverts the original \336le to its last-saved state. It then closes the old \336le and) 180 478.33 T
(returns the handle of the new \336le.) 180 465.33 T
-0.69 (If you manage) 180 445.33 P
1 9 Q
-0.62 (VM) 246.63 445.33 P
1 10 Q
-0.69 ( \336les with the document control objects, you generally don\325) 261.62 445.33 P
-0.69 (t) 525.02 445.33 P
-0.75 (have to call the update or save routines. The document control objects will set) 180 432.33 P
-0.38 (up a \336le menu with appropriate commands \050\322Save,\323 \322Save As,\323 etc.\051, and will) 180 419.33 P
(call the appropriate routines whenever the user chooses a command.) 180 406.33 T
(If you need to \336nd out whether a \336le is dirty) 180 386.33 T
(, call the routine) 382.79 386.33 T
4 F
(VMGetDirtyState\050\051) 180 373.33 T
1 F
(. This routine returns a two-byte value. The more) 278.14 373.33 T
(signi\336cant byte is non-zero if any blocks have been dirtied since the last) 180 360.33 T
(update or auto-save. The less signi\336cant byte is non-zero if any blocks have) 180 347.33 T
(been dirtied since the last save, save-as, or revert action. If the \336le does not) 180 334.33 T
(have backup-capability) 180 321.33 T
(, both bytes will always be equal. Note that) 285.95 321.33 T
4 F
(VMUpdate\050\051) 180 308.33 T
1 F
( is optimized for clean \336les, so it is generally faster to call) 242.96 308.33 T
4 F
(VMUpdate\050\051) 180 295.33 T
1 F
( even if the \336le might be clean, rather than checking the) 242.96 295.33 T
(dirty-state with) 180 282.33 T
4 F
(VMGetDirtyState\050\051) 255.38 282.33 T
1 F
(.) 353.52 282.33 T
0 14 Q
(18.3.9) 123.08 240 T
0 18 Q
(Closing Files) 180 240 T
5 10 Q
(VMClose\050\051) 180 216.33 T
1 F
-0.38 (When you are done with a) 180 196.33 P
1 9 Q
-0.34 (VM) 301.26 196.33 P
1 10 Q
-0.38 ( \336le for the time being, you should close it with) 316.25 196.33 P
4 F
(VMClose\050\051) 180 183.33 T
1 F
(. This routine updates all the dirty blocks, frees all the global) 233.33 183.33 T
(memory blocks attached to the \336le, and closes the \336le \050thus freeing its) 180 170.33 T
-0.02 (handle\051. The routine is passed two arguments. The \336rst is the handle of the) 180 157.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "695" 23
%%Page: "696" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(696) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(\336le to close. The second is a Boolean value,) 180 641.33 T
3 F
(noErrorFlag) 380.22 641.33 T
1 F
(. If this \337ag is) 437.98 641.33 T
3 F
(true) 504.66 641.33 T
1 F
(,) 523.17 641.33 T
4 F
-0.12 (VMClose\050\051) 180 628.33 P
1 F
-0.12 ( will not return error conditions; if it could not successfully close) 233.33 628.33 P
(the \336le, it will fatal-error) 180 615.33 T
(.) 294.83 615.33 T
-0.38 (If) 180 595.33 P
3 F
-0.38 (noErrorFlag) 189.8 595.33 P
1 F
-0.38 ( is) 247.56 595.33 P
3 F
-0.38 (false) 260.15 595.33 P
1 F
-0.38 (,) 281.43 595.33 P
4 F
-0.39 (VMClose\050\051) 286.61 595.33 P
1 F
-0.38 ( will update the \336le and close it. If the \336le) 339.94 595.33 P
-0.05 (could not be updated, it will return an error condition. Be warned, however) 180 582.33 P
-0.05 (,) 525.49 582.33 P
(that if for some reason) 180 569.33 T
4 F
( VMClose\050\051) 284.08 569.33 T
1 F
( could not \336nish updating a \336le \050for) 340.28 569.33 T
-0.29 (example, because the disk ran out of space\051,) 180 556.33 P
4 F
-0.31 (VMClose\050\051) 383.04 556.33 P
1 F
-0.29 ( will return an error) 436.37 556.33 P
-0.21 (message, but will close the \336le and free the memory anyway) 180 543.33 P
-0.21 (. Thus, the most) 454.23 543.33 P
-0.22 (recent changes will be lost. For this reason, it is usually safer to \336rst update) 180 530.33 P
(the \336le \050and handle any error messages returned\051 and then close it.) 180 517.33 T
(When) 180 497.33 T
1 9 Q
(GEOS) 209.81 497.33 T
1 10 Q
( shuts down, all \336les are closed. When it restarts, you can open) 235.98 497.33 T
(the \336les manually) 180 484.33 T
(.) 262.24 484.33 T
-0.7 (If the \336le is backup-enabled, the backup blocks will be preserved until the \336le) 180 464.33 P
-0.65 (is next opened. That means, for example, that the next time you open the \336le,) 180 451.33 P
-0.25 (you can continue working on it normally) 180 438.33 P
-0.25 (, or you can immediately revert it to) 364.08 438.33 P
(its condition as of the last time it was saved \050in the earlier) 180 425.33 T
1 9 Q
(GEOS) 451.72 425.33 T
1 10 Q
( session\051.) 477.89 425.33 T
0 14 Q
(18.3.10) 115.3 383 T
0 18 Q
(The VM File\325) 180 383 T
(s Map Block) 284.36 383 T
5 10 Q
(VMGetMapBlock\050\051, VMSetMapBlock\050\051) 180 359.33 T
1 F
(When they\325re created, the blocks of a) 180 339.33 T
1 9 Q
(VM) 352.79 339.33 T
1 10 Q
( \336le are in no particular order) 367.78 339.33 T
(. Y) 504.45 339.33 T
(ou) 515.94 339.33 T
(will need some way to keep track of) 180 326.33 T
1 9 Q
(VM) 346.7 326.33 T
1 10 Q
( block handles so you can \336nd each) 361.69 326.33 T
(block when you need it. The usual way to do this is with a) 180 313.33 T
3 F
(map block) 449.88 313.33 T
1 F
(.) 496.92 313.33 T
(A map block is just like any other) 180 293.33 T
1 9 Q
(VM) 337.81 293.33 T
1 10 Q
( block. Like other blocks, it can be a) 352.8 293.33 T
(standard block, an LMem heap, etc. It is different in only one way: the) 180 280.33 T
1 9 Q
(VM) 507.64 280.33 T
1 10 Q
(manager keeps track of its handle. By calling the routine) 180 267.33 T
4 F
(VMGetMapBlock\050\051) 180 254.33 T
1 F
(, you can get the) 275.74 254.33 T
1 9 Q
(VM) 354.27 254.33 T
1 10 Q
( handle of the map block. Y) 369.26 254.33 T
(ou can) 493.92 254.33 T
(then look inside the map block to get information about the other blocks.) 180 241.33 T
(Note that the structure of the) 180 221.33 T
1 9 Q
(VM) 319.45 221.33 T
1 10 Q
( map block is entirely the concern of the) 334.44 221.33 T
-0.08 (creating geode. The) 180 208.33 P
1 9 Q
-0.07 (VM) 272.73 208.33 P
1 10 Q
-0.08 ( manager neither requires nor speci\336es any internal) 287.73 208.33 P
(structure or information content.) 180 195.33 T
(T) 180 175.33 T
(o create a map block, allocate a) 185.75 175.33 T
1 9 Q
(VM) 332.46 175.33 T
1 10 Q
( block through any of the normal) 347.45 175.33 T
-0.49 (techniques, then pass its) 180 162.33 P
1 9 Q
-0.44 (VM) 295.3 162.33 P
1 10 Q
-0.49 ( handle as an argument to) 310.29 162.33 P
4 F
-0.5 (VMSetMapBlock\050\051) 431.85 162.33 P
1 F
-0.49 (.) 525.93 162.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "696" 24
%%Page: "697" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(697) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.05 (That block will be the new map block. If there already was a map block, the) 180 641.33 P
(old block will become an ordinary) 180 628.33 T
1 9 Q
(VM) 337.25 628.33 T
1 10 Q
( block.) 352.24 628.33 T
-0.31 (In addition to setting a map block, you can set a) 180 608.33 P
3 F
-0.31 (map database item) 400.89 608.33 P
1 F
-0.31 ( with the) 487.66 608.33 P
(command) 180 595.33 T
4 F
(DBSetMap\050\051) 227.41 595.33 T
1 F
(. For details, see section 19.2.5 of chapter 19.) 290.56 595.33 T
0 14 Q
(18.3.1) 116.07 553 T
(1) 154.22 553 T
0 18 Q
(File-Access Synchronization) 180 553 T
5 10 Q
(VMGrabExclusive\050\051, VMReleaseExclusive\050\051) 180 529.33 T
1 F
(Sometimes several different geodes will need access to the same) 180 509.33 T
1 9 Q
(VM) 478.18 509.33 T
1 10 Q
( \336le.) 493.17 509.33 T
(Generally) 180 496.33 T
(, these will be several different copies of the same application,) 224.45 496.33 T
(perhaps running on different machines on a network.) 180 483.33 T
1 9 Q
(GEOS) 429.45 483.33 T
1 10 Q
( provides three) 455.62 483.33 T
(different ways shared-access can be handled.) 180 470.33 T
(A) 180 450.33 T
1 9 Q
(VM) 190 450.33 T
1 10 Q
( \336le can be one of three different types: standard, \322public,\323 and) 204.99 450.33 T
-0.61 (\322shared-multiple.\323 By default, all new) 180 437.33 P
1 9 Q
-0.55 (VM) 354.2 437.33 P
1 10 Q
-0.61 ( \336les are standard. The \336le\325) 369.19 437.33 P
-0.61 (s type is) 492.08 437.33 P
(one of its extended attributes, and can be changed with the routine) 180 424.33 T
4 F
(FileSetHandleExtendedAttributes\050\051) 180 411.33 T
1 F
( \050see section 17.5.3 of chapter 17\051.) 365.18 411.33 T
(The document control automatically lets the user select what kind of \336le to) 180 398.33 T
-0.51 (create, and changes its type accordingly) 180 385.33 P
-0.51 (. \050See \322GenDocument,\323 Chapter) 360.4 385.33 P
-0.51 (13 of) 507.02 385.33 P
(the Object Reference Book.\051) 180 372.33 T
(Only one geode may write to a standard) 180 352.33 T
1 9 Q
(GEOS) 367.07 352.33 T
(VM) 396.02 352.33 T
1 10 Q
( \336le at a time. If a geode) 411.02 352.33 T
-0.38 (has the \336le open for read/write access, no other geode will be allowed to open) 180 339.33 P
(that \336le. If a geode has the \336le open for read-only access, other geodes are) 180 326.33 T
-0.14 (allowed to open it for read-only access, but not for read-write access. If a \336le) 180 313.33 P
-0.49 (is opened for read-only access, blocks cannot be dirtied or updated. If a geode) 180 300.33 P
(tries to open a \336le for writing when the \336le is already open, or if the geode) 180 287.33 T
-0.45 (tries to open it for reading when the \336le has already been opened for writing,) 180 274.33 P
4 F
(VMOpen\050\051) 180 261.33 T
1 F
( will return an error) 232.77 261.33 T
(.) 325.36 261.33 T
-0.66 (In general, when a \336le is opened, it is by default opened for read-write access.) 180 241.33 P
-0.77 (For example, the document control objects present a dialog box which lets the) 180 228.33 P
(\336le be opened for read-only access, but has this option initially turned off.) 180 215.33 T
(However) 180 202.33 T
(, some \336les are used mainly for reference and are infrequently) 220.18 202.33 T
(changed. For example, a company might keep a client address book on a) 180 189.33 T
(network drive. Most of the time, people would just read this \336le; the \336le) 180 176.33 T
(would only occasionally be changed. For this reason,) 180 163.33 T
1 9 Q
(GEOS) 424.29 163.33 T
1 10 Q
( lets you declare) 450.46 163.33 T
1 9 Q
-0.58 (VM) 180 150.33 P
1 10 Q
-0.64 ( \336le as \322public.\323 Public \336les are, by default, opened for read-only access. In) 194.99 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "697" 25
%%Page: "698" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(698) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(all other respects the \336le is the same as a standard) 180 641.33 T
1 9 Q
(GEOS) 418.19 641.33 T
(VM) 447.14 641.33 T
1 10 Q
( \336le; it can be) 462.14 641.33 T
(opened by several readers at a time, but by only one geode at a time if the) 180 628.33 T
(geode will be writing.) 180 615.33 T
(Sometimes several geodes will need to be able to write to a \336le at once. For) 180 595.33 T
(example, a company might have a large customer database, and several) 180 582.33 T
(users might be writing records to the database at the same time. For this) 180 569.33 T
-0.71 (reason,) 180 556.33 P
1 9 Q
-0.64 (GEOS) 215.59 556.33 P
1 10 Q
-0.71 ( lets you create \322shared-multiple\323 \336les. Several geodes can have) 241.76 556.33 P
-0.38 (a \322shared-multiple\323 \336le open at once. However) 180 543.33 P
-0.38 (, a geode cannot access the \336le) 390.69 543.33 P
(whenever it wants. Instead, it must get the \336le\325) 180 530.33 T
(s semaphore to access the) 398.37 530.33 T
(\336le\325) 180 517.33 T
(s data. When it needs to access the \336le, it calls) 195.93 517.33 T
4 F
(VMGrabExclusive\050\051) 412.82 517.33 T
1 F
(.) 514.29 517.33 T
(This routine takes four arguments:) 180 504.33 T
2 F
(u) 180 484.33 T
1 F
(The handle of the) 198 484.33 T
1 9 Q
(VM) 281.9 484.33 T
1 10 Q
( \336le) 296.89 484.33 T
2 F
(u) 180 465.33 T
1 F
(A timeout value) 198 465.33 T
-0.25 (If a timeout value is passed,) 198 453.33 P
4 F
-0.25 (VMGrabExclusive\050\051) 329.14 453.33 P
1 F
-0.25 ( will give up trying to) 430.61 453.33 P
(get the semaphore after a speci\336ed number of seconds has passed. If a) 198 441.33 T
-0.03 (timeout value of zero is passed,) 198 429.33 P
4 F
-0.04 (VMGrabExclusive\050\051) 345.04 429.33 P
1 F
-0.03 ( will block until it) 446.51 429.33 P
(can get the \336le\325) 198 417.33 T
(s semaphore.) 267.64 417.33 T
2 F
(u) 180 398.33 T
1 F
(A member of the) 198 398.33 T
4 F
(VMOperations) 277.45 398.33 T
1 F
( enumerated type) 352.81 398.33 T
-0.75 (This speci\336es the kind of operation to be performed on the locked \336le. The) 198 386.33 P
3 F
(VMOperations) 198 374.33 T
1 F
( values are described below) 265.02 374.33 T
(.) 390.23 374.33 T
2 F
(u) 180 355.33 T
1 F
(A pointer to a word-length variable.) 198 355.33 T
(If this call to) 198 343.33 T
4 F
(VMGrabExclusive\050\051) 259.49 343.33 T
1 F
( fails and times out, the operation) 360.96 343.33 T
(currently being performed will be written here.) 198 331.33 T
(The routine returns a member of the) 180 312.33 T
4 F
(VMStartExclusiveReturnV) 352.23 312.33 T
(alue) 490.01 312.33 T
1 F
(enumerated type. The following return values are possible:) 180 299.33 T
1 9 Q
(VMSER) 180 279.33 T
(V_NO_CHANGES) 213.33 279.33 T
1 10 Q
(No other thread has changed this \336le since the last time this) 243 267.33 T
(thread had access to the \336le.) 243 255.33 T
1 9 Q
(VMSER) 180 236.33 T
(V_CHANGES) 213.33 236.33 T
1 10 Q
(The \336le may have been altered since the last time this thread) 243 224.33 T
(had access to it; the thread should take appropriate actions) 243 212.33 T
(\050such as re-reading any cached data\051.) 243 200.33 T
1 9 Q
(VMSER) 180 181.33 T
(V_TIMEOUT) 213.33 181.33 T
1 10 Q
-0.58 (This call to) 243 169.33 P
4 F
-0.59 (VMGrabExclusive\050\051) 295.36 169.33 P
1 F
-0.58 ( failed and timed out without) 396.83 169.33 P
(getting access to the \336le.) 243 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "698" 26
%%Page: "699" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Virtual Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(699) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(When a geode calls) 180 641.33 T
4 F
(VMGrabExclusive\050\051) 270.75 641.33 T
1 F
(, it must pass a member of the) 372.22 641.33 T
4 F
-0.27 (VMOperations) 180 628.33 P
1 F
-0.26 ( enumerated type. Most of the values are used internally by) 255.36 628.33 P
(the system; while a geode should never pass these values, they may be) 180 615.33 T
-0.31 (returned by) 180 602.33 P
4 F
-0.33 (VMGrabExclusive\050\051) 236.59 602.33 P
1 F
-0.31 ( if the call times out. The following values) 338.06 602.33 P
(are de\336ned in) 180 589.33 T
4 F
(vm.h) 246.3 589.33 T
1 F
(:) 271.67 589.33 T
1 9 Q
(VMO_READ) 180 569.33 T
1 10 Q
(This indicates that the geode will not change the \336le during) 243 557.33 T
(this access. This lets the kernel perform some optimizations.) 243 545.33 T
1 9 Q
(VMO_INTERNAL) 180 526.33 T
(VMO_SA) 180 507.33 T
(VE) 217.66 507.33 T
(VMO_SA) 180 488.33 T
(VE_AS) 217.66 488.33 T
(VMO_REVERT) 180 469.33 T
(VMO_UPDA) 180 450.33 T
(TE) 232.84 450.33 T
1 10 Q
(These values are set only by the kernel. Applications should) 243 438.33 T
(never pass them.) 243 426.33 T
1 9 Q
(VMO_WRITE) 180 407.33 T
1 10 Q
(This indicates that the geode may write to the \336le during this) 243 395.33 T
(access.) 243 383.33 T
(The application may also pass any value between) 180 364.33 T
1 9 Q
(VMO_FIRST_APP_CODE) 410.8 364.33 T
1 10 Q
(and) 180 351.33 T
4 F
(0xffff) 200.19 351.33 T
1 F
(. The kernel treats all these values as synonymous with) 227.6 351.33 T
1 9 Q
(VMO_WRITE) 180 338.33 T
1 10 Q
(; however) 237.99 338.33 T
(, the application may choose to associate meanings) 281.51 338.33 T
-0.21 (with numbers in this range \050perhaps by de\336ning an enumerated type whose) 180 325.33 P
(starting value is) 180 312.33 T
1 9 Q
(VMO_FIRST_APP_CODE) 258.35 312.33 T
1 10 Q
(\051.) 367.19 312.33 T
(When a thread is done accessing a \336le, it should release its exclusive access) 180 292.33 T
(by calling) 180 279.33 T
4 F
(VMReleaseExclusive\050\051) 227.42 279.33 T
1 F
(. The routine takes one argument,) 342.78 279.33 T
(namely the \336le handle. It does not return anything.) 180 266.33 T
0 14 Q
(18.3.12) 115.3 224 T
0 18 Q
(Other VM Utilities) 180 224 T
5 10 Q
(VMCopyVMBlock\050\051, VMSetReloc\050\051) 180 200.33 T
1 F
(If you would like to duplicate a) 180 180.33 T
1 9 Q
(VM) 325.58 180.33 T
1 10 Q
( block, or copy it to another \336le, call) 340.57 180.33 T
4 F
(VMCopyVMBlock\050\051) 180 167.33 T
1 F
(. This routine is passed three arguments:) 278.89 167.33 T
2 F
(u) 180 147.33 T
1 F
(The) 198 147.33 T
4 F
(VMFileHandle) 218.56 147.33 T
1 F
( of the \336le containing the source block.) 293.73 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "699" 27
%%Page: "700" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(700) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The) 198 641.33 T
4 F
(VMBlockHandle) 218.56 641.33 T
1 F
( of the source block.) 303.19 641.33 T
2 F
(u) 180 622.33 T
1 F
(The) 198 622.33 T
4 F
(VMFileHandle) 218.56 622.33 T
1 F
( of the destination \336le \050which may be the same as) 293.73 622.33 T
(the source \336le\051.) 198 610.33 T
-0.34 (The routine makes a complete duplicate of the source block, copying it to the) 180 591.33 P
-0.47 (source \336le. It returns the) 180 578.33 P
4 F
-0.49 (VMBlockHandle) 295.77 578.33 P
1 F
-0.47 ( of the duplicate block. Note that) 380.4 578.33 P
(the duplicate block will almost certainly have a different block handle than) 180 565.33 T
(the source block. If the block contains a copy of its own handle, you should) 180 552.33 T
(update it accordingly) 180 539.33 T
(.) 276.3 539.33 T
-0.62 (Sometimes you will need to perform special actions whenever loading a block) 180 519.33 P
(into memory or writing it to the disk. For example, you may store data in a) 180 506.33 T
(compressed format on the disk, and need to expand it when it\325) 180 493.33 T
(s loaded into) 465.96 493.33 T
(memory) 180 480.33 T
(. For this reason, you can set a) 216.48 480.33 T
3 F
(relocation) 360.58 480.33 T
1 F
( routine. This routine will) 405.93 480.33 T
(be called whenever the following situations occur:) 180 467.33 T
2 F
(u) 180 447.33 T
1 F
-0.21 (A) 198 447.33 P
1 9 Q
-0.19 (VM) 207.79 447.33 P
1 10 Q
-0.21 ( block has just been copied from the disk into memory \050routine will) 222.78 447.33 P
(be passed the \337ag) 198 435.33 T
1 9 Q
(VMRT_RELOCA) 283.02 435.33 T
(TE_AFTER_READ) 353.52 435.33 T
1 10 Q
(\051.) 433.01 435.33 T
2 F
(u) 180 416.33 T
1 F
-0.42 (A block is about to be written from memory to the disk \050routine is passed) 198 416.33 P
1 9 Q
(VMRT_UNRELOCA) 198 404.33 T
(TE_BEFORE_WRITE) 283.17 404.33 T
1 10 Q
(\051.) 375.16 404.33 T
2 F
(u) 180 385.33 T
1 F
(A block in memory has just been written to the disk, but is not being) 198 385.33 T
(discarded \050routine is passed) 198 373.33 T
1 9 Q
(VMRT_RELOCA) 329.67 373.33 T
(TE_AFTER_WRITE) 400.17 373.33 T
1 10 Q
(\051.) 484.66 373.33 T
2 F
(u) 180 354.33 T
1 F
(A) 198 354.33 T
1 9 Q
(VM) 208 354.33 T
1 10 Q
( block has just been loaded from a resource \050routine is passed) 222.99 354.33 T
1 9 Q
(VMRT_RELOCA) 198 342.33 T
(TE_FROM_RESOURCE) 268.5 342.33 T
1 10 Q
(\051. This is called by the relocating) 370.49 342.33 T
(object, not by the) 198 330.33 T
1 9 Q
(VM) 279.68 330.33 T
1 10 Q
( manager) 294.67 330.33 T
(.) 337.64 330.33 T
2 F
(u) 180 311.33 T
1 F
(A) 198 311.33 T
1 9 Q
(VM) 208 311.33 T
1 10 Q
( block is about to be written to a resource \050routine is passed) 222.99 311.33 T
1 9 Q
(VMRT_UNRELOCA) 198 299.33 T
(TE_FROM_RESOURCE) 283.17 299.33 T
1 10 Q
(\051. This is called by the) 385.16 299.33 T
(unrelocating object, not by the) 198 287.33 T
1 9 Q
(VM) 340.79 287.33 T
1 10 Q
( manager) 355.78 287.33 T
(.) 398.75 287.33 T
(Using the routine) 180 268.33 T
4 F
(VMSetReloc\050\051) 264.45 268.33 T
1 F
(, you can instruct the) 335.38 268.33 T
1 9 Q
(VM) 436.31 268.33 T
1 10 Q
( manager to call) 451.3 268.33 T
(your relocation routine whenever appropriate.) 180 255.33 T
0 14 Q
(18.4) 134.76 203 T
0 24 Q
(VM Chains) 180 203 T
1 10 Q
(A) 180 177.33 T
1 9 Q
(VM) 190 177.33 T
1 10 Q
( \336le is just a collection of blocks. These blocks are not kept in any) 204.99 177.33 T
(particular order) 180 164.33 T
(. If the application wants to keep the blocks in some kind of) 253.14 164.33 T
(order) 180 151.33 T
(, it must set up some mechanism to do this.) 203.88 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "700" 28
%%Page: "701" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Chains) 486.43 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(701) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.13 (One common mechanism is the) 180 641.33 P
1 9 Q
-0.12 (VM) 326.03 641.33 P
1 10 Q
-0.13 ( chain. This is simply a way of arranging) 341.02 641.33 P
(blocks in a sequence, in which each block contains the handle of the next) 180 628.33 T
(block.) 180 615.33 T
1 9 Q
(GEOS) 209.64 615.33 T
1 10 Q
( has a standard format for) 235.81 615.33 T
1 9 Q
(VM) 359.9 615.33 T
1 10 Q
( chains and provides utility) 374.9 615.33 T
(routines which work with chains of this format.) 180 602.33 T
-0.15 (In general usage, a \322chain\323 is a simple tree in which each block has a link to) 180 582.33 P
(at most one other block. However) 180 569.33 T
(, the) 333.35 569.33 T
1 9 Q
(GEOS) 356.69 569.33 T
(VM) 385.64 569.33 T
1 10 Q
( chain can also contain) 400.64 569.33 T
-0.47 (special \322tree blocks,\323 which may have links to any number of child blocks. By) 180 556.33 P
(using these blocks, an application can set up) 180 543.33 T
1 9 Q
(VM) 388.37 543.33 T
1 10 Q
( trees of unlimited) 403.36 543.33 T
(complexity) 180 530.33 T
(.) 228.89 530.33 T
0 14 Q
(18.4.1) 123.08 488 T
0 18 Q
(Structure of a VM Chain) 180 488 T
1 10 Q
-0.66 (A) 180 464.33 P
1 9 Q
-0.6 (VM) 189.34 464.33 P
1 10 Q
-0.66 ( chain is composed of two kinds of blocks: chain blocks \050which are linked) 204.33 464.33 P
(to at most one other block\051, and tree blocks \050which may be linked to any) 180 451.33 T
(number of other blocks\051. One block is the head of the chain; chain utility) 180 438.33 T
(routines can be passed the handle of this block, and they will act on all the) 180 425.33 T
-0.59 (blocks in the chain. If a block is a \322leaf\323 block, it should contain a null handle.) 180 412.33 P
(An example of a) 180 399.33 T
1 9 Q
(VM) 257.05 399.33 T
1 10 Q
( chain with tree blocks is shown in Figure) 272.04 399.33 T
(18-) 467.81 399.33 T
(5 on) 482.26 399.33 T
(page) 180 386.33 T
2 F
(l) 204.45 386.33 T
1 F
(701.) 215.14 386.33 T
81 144 531 648 C
180 149.72 531 383 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
405.97 301.19 411.17 298.19 405.97 295.19 405.97 298.19 4 Y
0 X
0 0 0 1 0 0 0 K
V
405.97 298.19 387.83 298.19 2 L
0.5 H
2 Z
N
255.14 214.52 260.33 211.52 255.14 208.52 255.14 211.52 4 Y
V
235.33 236.52 248.67 236.52 248.67 211.52 255.14 211.52 4 L
N
181.87 242.36 233.67 309.86 R
0 Z
N
0 10 Q
(Figure) 180 195.83 T
(18-) 213.34 195.83 T
(5) 227.79 195.83 T
3 F
(A) 236.13 195.83 T
3 9 Q
(VM) 245.95 195.83 T
3 10 Q
( Chain) 260.78 195.83 T
(This chain contains a tree node, which allows it to branch. A utility routine) 180 181.83 T
(can be passed the handle of the head; the utility will then work on the entire) 180 169.83 T
(chain.) 180 157.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
181.87 227.89 233.79 242.36 R
N
1 F
(Data) 196.38 272.42 T
(0x01a0) 191.25 231.75 T
(Handle:) 189.5 217.19 T
(0x0010) 191.25 207.77 T
258.68 242.36 310.48 324.86 R
N
258.68 227.89 310.61 242.36 R
N
(Data) 273.19 279.7 T
(0x02fc) 269.74 231.75 T
(Handle:) 266.31 217.19 T
(0x01a0) 268.06 207.77 T
335.5 242.36 387.42 275.98 R
N
335.5 227.89 387.42 242.36 R
N
(Data) 350.06 256 T
1 9 Q
(TREE) 348.71 231.75 T
1 10 Q
(Handle:) 343.19 217.19 T
(0x02fc) 346.61 207.77 T
335.5 275.98 387.42 290.45 R
N
(0x0088) 344.87 279.85 T
335.5 290.45 387.42 304.93 R
N
(0x02o4) 345.15 294.32 T
412.37 329.59 464.17 374.59 R
N
412.37 315.12 464.29 329.59 R
N
(Data) 426.88 348.75 T
1 9 Q
(NULL) 425 318.99 T
1 10 Q
(Handle:) 420 304.42 T
(0x0204) 421.75 295.01 T
412.37 242.36 464.17 287.36 R
N
412.37 227.89 464.29 242.36 R
N
(Data) 426.88 261.52 T
1 9 Q
(NULL) 425 231.75 T
1 10 Q
(Handle:) 420 217.19 T
(0x0088) 421.75 207.77 T
330.14 213.02 335.33 210.02 330.14 207.02 330.14 210.02 4 Y
V
310.33 236.69 323.67 236.69 323.67 210.02 330.14 210.02 4 L
2 Z
N
406.8 213.69 412 210.69 406.8 207.69 406.8 210.69 4 Y
V
387.42 282.95 402 282.95 402 210.69 406.8 210.69 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "701" 29
%%Page: "702" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(702) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Be warned that a) 180 641.33 T
1 9 Q
(VM) 262.98 641.33 T
1 10 Q
( chain must not contain any circuits. That is, by) 277.97 641.33 T
-0.57 (following links, you should not be able to go from any block back to itself; and) 180 628.33 P
(there should not be two different routes from any one block to any other) 180 615.33 T
(. If) 511.13 615.33 T
(you create such a) 180 602.33 T
1 9 Q
(VM) 262.78 602.33 T
1 10 Q
( chain and pass it to a chain utility) 277.77 602.33 T
(, the results are) 437.81 602.33 T
(unde\336ned. It is your responsibility to make sure no loops occur) 180 589.33 T
(.) 468.9 589.33 T
-0.43 (A) 180 569.33 P
1 9 Q
-0.38 (VM) 189.57 569.33 P
1 10 Q
-0.43 ( chain block is the same as any other) 204.57 569.33 P
1 9 Q
-0.38 (VM) 373.73 569.33 P
1 10 Q
-0.43 ( block, with one exception: The) 388.72 569.33 P
(block must begin with a) 180 556.33 T
4 F
(VMChain) 293.18 556.33 T
1 F
( structure. This structure contains a) 341.87 556.33 T
-0.8 (single data \336eld,) 180 543.33 P
3 9 Q
-0.72 (VMC) 256.87 543.33 P
3 10 Q
-0.8 (_next) 278.2 543.33 P
1 F
-0.8 (, which is the handle of the next block in the chain.) 302.27 543.33 P
-0.57 (If the block is in a chain but has no next link,) 180 530.33 P
3 9 Q
-0.51 (VMC) 385.46 530.33 P
3 10 Q
-0.57 (_next) 406.79 530.33 P
1 F
-0.57 ( is a null handle. This) 430.86 530.33 P
(means, for example, that LMem heaps cannot belong to a) 180 517.33 T
1 9 Q
(VM) 447.27 517.33 T
1 10 Q
( chain \050since) 462.26 517.33 T
(LMem heaps must begin with an) 180 504.33 T
4 F
(LMemHeader) 335.03 504.33 T
1 F
( structure\051.) 405.58 504.33 T
-0.51 (In addition to chain blocks, a) 180 484.33 P
1 9 Q
-0.46 (VM) 313.46 484.33 P
1 10 Q
-0.51 ( chain may contain a tree block. A tree block) 328.45 484.33 P
(may have several links to blocks. The structure of a tree block is shown in) 180 471.33 T
(Figure) 180 458.33 T
(18-) 213.52 458.33 T
(6. A tree block begins with a) 227.97 458.33 T
4 F
(VMChainT) 361.71 458.33 T
(ree) 417 458.33 T
1 F
( structure. This) 433.67 458.33 T
(structure has three \336elds:) 180 445.33 T
3 9 Q
(VMCT_) 180 425.33 T
3 10 Q
(meta) 211.99 425.33 T
1 F
(This is a) 243 413.33 T
4 F
(VMChain) 285.24 413.33 T
1 F
( structure. Every block in a) 333.93 413.33 T
1 9 Q
(VM) 462.64 413.33 T
1 10 Q
( chain,) 477.63 413.33 T
(including a tree block, must begin with such a structure.) 243 401.33 T
-0.87 (However) 243 389.33 P
-0.87 (, to indicate that this is a tree block, the) 283.18 389.33 P
3 9 Q
-0.78 (VMC) 461.77 389.33 P
3 10 Q
-0.87 (_next) 483.11 389.33 P
1 F
-0.87 ( \336eld) 507.17 389.33 P
(must be set to the special value) 243 377.33 T
1 9 Q
(VM_CHAIN_TREE) 390.81 377.33 T
1 10 Q
(.) 471.79 377.33 T
3 9 Q
(VMCT_) 180 358.33 T
3 10 Q
(offset) 211.99 358.33 T
1 F
(This is the offset within the block to the \336rst link. All data in) 243 346.33 T
(the tree block must be placed between the) 243 334.33 T
4 F
(VMChainT) 439.7 334.33 T
(ree) 494.99 334.33 T
1 F
(structure and the \336rst link. If you will not put data in this) 243 322.33 T
(block, set this \336eld to) 243 310.33 T
4 F
(sizeof\050VMChainT) 343.95 310.33 T
(ree\051) 432.94 310.33 T
1 F
(.) 453.5 310.33 T
3 9 Q
(VMCT_) 180 291.33 T
3 10 Q
(count) 211.99 291.33 T
1 F
(This is the number of links in the tree block.) 243 279.33 T
-0.6 (Any of the links may be a null handle. T) 180 260.33 P
-0.6 (o delete the last link in the block, just) 359.3 260.33 P
-0.6 (decrement) 180 247.33 P
3 9 Q
-0.54 (VMCT_) 230.69 247.33 P
3 10 Q
-0.6 (count) 262.68 247.33 P
1 F
-0.6 ( \050and, if you wish, resize the block\051. T) 287.86 247.33 P
-0.6 (o delete a link in) 454.18 247.33 P
(the midst of a block, just change the link to a null handle without) 180 234.33 T
(decrementing) 180 221.33 T
3 9 Q
(VMCT_) 245.92 221.33 T
3 10 Q
(count) 277.92 221.33 T
1 F
(. T) 303.1 221.33 T
(o add a new link to a) 314.4 221.33 T
1 9 Q
(VM) 413.14 221.33 T
1 10 Q
( tree block, you can) 428.14 221.33 T
(either add the handle after the last link and increment) 180 208.33 T
3 9 Q
(VMCT_) 436.33 208.33 T
3 10 Q
(count) 468.33 208.33 T
1 F
(; or you) 493.51 208.33 T
(can replace a null handle \050if there are any\051 with the new handle, without) 180 195.33 T
(changing) 180 182.33 T
3 9 Q
(VMCT_) 225 182.33 T
3 10 Q
(count) 256.99 182.33 T
1 F
(.) 282.17 182.33 T
81 564.46 171 647.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(W) 81 594.45 T
(arning) 89.16 594.45 T
1 F
(VM chains must not) 81 578.45 T
(contain loops.) 81 567.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 623.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 623.33 A
0 0 0 1 0 0 0 K
81 603.21 121.5 643.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 611.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "702" 30
%%Page: "703" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(VM Chains) 486.43 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(703) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(18.4.2) 123.08 282.89 T
0 18 Q
(VM Chain Utilities) 180 282.89 T
5 10 Q
(VMChainHandle, VMFreeVMChain\050\051, VMCompareVMChains\050\051,) 180 259.22 T
(VMCopyVMChain\050\051, VMCHAIN_IS_DBITEM\050\051,) 180 246.22 T
(VMCHAIN_GET_VM_BLOCK\050\051, VMCHAIN_MAKE_FROM_VM_BLOCK\050\051) 180 233.22 T
1 F
-0.28 (Several utilities are provided for working with) 180 213.22 P
1 9 Q
-0.25 (VM) 395.08 213.22 P
1 10 Q
-0.28 ( chains. They allow you to) 410.08 213.22 P
(compare, free, or copy entire) 180 200.22 T
1 9 Q
(VM) 313.88 200.22 T
1 10 Q
( chains with a single command.) 328.87 200.22 T
(For convenience, all of these routines can work on either a) 180 180.22 T
1 9 Q
(VM) 451.87 180.22 T
1 10 Q
( chain or a) 466.86 180.22 T
(database item. This is useful, because sometimes you will want to use the) 180 167.22 T
(utility on a data structure without knowing in advance how large it will be.) 180 154.22 T
81 144 531 648 C
180 318.89 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
420.49 527.55 410.1 533.55 420.49 539.55 420.49 533.55 4 Y
4 X
0 0 0 1 0 0 0 K
V
408.88 403.52 431.83 403.52 431.83 533.55 420.49 533.55 4 L
4 H
2 Z
N
310.29 533.52 408.88 600.19 R
6 X
V
0.5 H
0 Z
0 X
N
310.29 378.19 408.5 428.52 R
6 X
V
539.97 622.86 545.17 619.86 539.97 616.86 539.97 619.86 4 Y
0 X
V
408.5 590.69 491.83 590.69 491.83 619.86 539.97 619.86 4 L
2 Z
N
0 10 Q
(Figure) 180 360.83 T
(18-) 213.34 360.83 T
(6) 227.79 360.83 T
3 F
(Structure of a) 236.13 360.83 T
3 9 Q
(VM) 302.23 360.83 T
3 10 Q
( tree block) 317.06 360.83 T
(This is a sample) 180 346.83 T
3 9 Q
(VM) 257.94 346.83 T
3 10 Q
( tree block. It contains links to four other link \050or chain\051) 272.77 346.83 T
(blocks, and enough extra space for 0x100 bytes of data.) 180 334.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 F
(0x000) 440.17 374.51 T
413.7 375.19 408.5 378.19 413.7 381.19 413.7 378.19 4 Y
V
434.33 378.19 413.7 378.19 2 L
N
(0x006) 441.37 424.86 T
414.9 425.55 409.7 428.55 414.9 431.55 414.9 428.55 4 Y
V
435.54 428.55 414.9 428.55 2 L
N
(0x106) 441.37 529.86 T
414.9 530.55 409.7 533.55 414.9 536.55 414.9 533.55 4 Y
V
435.54 533.55 414.9 533.55 2 L
N
539.97 512.86 545.17 509.86 539.97 506.86 539.97 509.86 4 Y
V
408.5 540.69 491 540.69 491 509.86 539.97 509.86 4 L
N
534.14 534.52 539.34 531.52 534.14 528.52 534.14 531.52 4 Y
V
408.5 559.02 508.5 559.02 508.5 531.52 534.14 531.52 4 L
N
538.24 585.98 532.66 588.19 537.36 591.92 537.8 588.95 4 Y
V
408.5 574.02 509.33 574.02 509.33 591.52 555.17 591.52 537.81 588.95 5 L
N
475.33 577.06 480.53 574.06 475.33 571.06 475.33 574.06 4 Y
V
408.53 574.06 475.33 574.06 2 L
N
475.33 562.01 480.53 559.01 475.33 556.01 475.33 559.01 4 Y
V
408.53 559.01 475.33 559.01 2 L
N
475.33 543.72 480.53 540.72 475.33 537.72 475.33 540.72 4 Y
V
408.53 540.72 475.33 540.72 2 L
N
475.33 593.69 480.53 590.69 475.33 587.69 475.33 590.69 4 Y
V
475.33 590.69 408.53 590.69 2 L
N
6 F
(VMChainT) 189.62 399.67 T
(ree) 244.65 399.67 T
3 F
( structure) 260.22 399.67 T
(Links to next chain blocks) 185.58 563.17 T
310.29 378.52 408.88 395.19 R
0 Z
N
1 9 Q
(VM_CHAIN_TREE) 319.09 383.17 T
310.29 395.19 408.88 411.86 R
N
1 10 Q
(0x106) 345.78 399.84 T
310.29 411.86 408.88 428.52 R
N
(4) 356.8 416.51 T
310.29 428.52 408.88 533.52 R
N
310.29 566.86 408.88 583.52 R
N
3 9 Q
(VM) 334.86 571.51 T
3 10 Q
( handle) 349.69 571.51 T
310.29 550.19 408.88 566.86 R
N
3 9 Q
(VM) 334.86 554.84 T
3 10 Q
( handle) 349.69 554.84 T
310.29 533.52 408.88 550.19 R
N
3 9 Q
(VM) 334.86 538.17 T
3 10 Q
( handle) 349.69 538.17 T
310.29 583.52 408.88 600.19 R
N
3 9 Q
(VM) 334.86 588.17 T
3 10 Q
( handle) 349.69 588.17 T
1 F
(Data) 348.19 477.34 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "703" 31
%%Page: "704" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(704) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.05 (This way) 180 641.33 P
-0.05 (, if there is a small amount of data, you can store it in a) 220.89 641.33 P
1 9 Q
-0.04 (DB) 479.11 641.33 P
1 10 Q
-0.05 ( item; if) 492.61 641.33 P
-0.66 (there is a lot, you can store it in a) 180 628.33 P
1 9 Q
-0.59 (VM) 331.25 628.33 P
1 10 Q
-0.66 ( chain of any length. Whichever way you) 346.24 628.33 P
(store the data, you can use the same chain utilities to manipulate it.) 180 615.33 T
(The routines all take, as an argument, a dword-sized structure called a) 180 595.33 T
4 F
-0.14 (VMChain) 180 582.33 P
1 F
-0.14 (. This structure identi\336es the chain or) 228.69 582.33 P
1 9 Q
-0.13 (DB) 406.05 582.33 P
1 10 Q
-0.14 ( item. It is two words in) 419.55 582.33 P
(length. If it refers to a) 180 569.33 T
1 9 Q
(DB) 284.82 569.33 T
1 10 Q
( item, it will be the item\325) 298.32 569.33 T
(s) 411.14 569.33 T
4 F
(DBGroupAndItem) 418.55 569.33 T
1 F
-0.58 (structure. If it refers to a) 180 556.33 P
1 9 Q
-0.52 (VM) 294.68 556.33 P
1 10 Q
-0.58 ( chain, the less signi\336cant two bytes will be null,) 309.67 556.33 P
(and the more signi\336cant two bytes will be the) 180 543.33 T
1 9 Q
(VM) 393.19 543.33 T
1 10 Q
( handle of the head of the) 408.18 543.33 T
-0.23 (chain. Note that none of the blocks in the) 180 530.33 P
1 9 Q
-0.21 (VM) 371.11 530.33 P
1 10 Q
-0.23 ( chain need be locked when the) 386.11 530.33 P
(routine is called; the routine will lock the blocks as necessary) 180 517.33 T
(, and unlock) 461.52 517.33 T
(them when \336nished. Similarly) 180 504.33 T
(, a) 318.91 504.33 T
1 9 Q
(DB) 332.81 504.33 T
1 10 Q
( item need not be locked before being) 346.31 504.33 T
-0.74 (passed to one of these routines. However) 180 491.33 P
-0.74 (, the) 362.82 491.33 P
1 9 Q
-0.66 (VM) 384.68 491.33 P
1 10 Q
-0.74 ( \336le containing the structure) 399.68 491.33 P
(must be open.) 180 478.33 T
(If you want to free an entire) 180 458.33 T
1 9 Q
(VM) 312.6 458.33 T
1 10 Q
( chain at once, call the routine) 327.59 458.33 T
4 F
-0.45 (VMFreeVMChain\050\051) 180 445.33 P
1 F
-0.44 (. This routine takes two arguments, namely the) 277.76 445.33 P
1 9 Q
-0.4 (VM) 497.07 445.33 P
1 10 Q
-0.44 ( \336le) 512.06 445.33 P
-0.77 (handle and the) 180 432.33 P
4 F
-0.8 (VMChain) 250.09 432.33 P
1 F
-0.77 ( structure. It frees every block in the) 298.78 432.33 P
1 9 Q
-0.7 (VM) 464.43 432.33 P
1 10 Q
-0.77 ( chain, and) 479.43 432.33 P
(returns nothing.) 180 419.33 T
-0.71 (Y) 180 399.33 P
-0.71 (ou can compare two different) 185.93 399.33 P
1 9 Q
-0.64 (VM) 319.23 399.33 P
1 10 Q
-0.71 ( chains, whether in the same or in different) 334.23 399.33 P
-0.18 (\336les, by calling) 180 386.33 P
4 F
-0.19 (VMCompareVMChains\050\051) 251.33 386.33 P
1 F
-0.18 (. This Boolean routine takes four) 377.43 386.33 P
-0.44 (arguments, namely the handles of the two \336les \050which may be the same\051 and) 180 373.33 P
(the) 180 360.33 T
4 F
(VMChain) 197.78 360.33 T
1 F
( structures of the two chains or items. The geode must have) 246.47 360.33 T
(both \336les open when it calls this routine. The routine returns) 180 347.33 T
3 F
(true) 465.21 347.33 T
1 F
( \050i.e.) 483.72 347.33 T
(non-zero\051 if the two chains are identical \050i.e. the trees have the same) 180 334.33 T
(structures, and all data bytes are identical\051. Note that if the chains contain) 180 321.33 T
(tree blocks which are identical except in the order of their links, the chains) 180 308.33 T
(will not be considered identical and the routine will return) 180 295.33 T
3 F
(false) 453.36 295.33 T
1 F
( \050i.e. zero\051.) 474.64 295.33 T
(Y) 180 275.33 T
(ou can make a copy of a) 185.93 275.33 T
1 9 Q
(VM) 297.99 275.33 T
1 10 Q
( chain with the routine) 312.98 275.33 T
4 F
(VMCopyVMChain\050\051) 421.88 275.33 T
1 F
(.) 522.42 275.33 T
-0.62 (This routine copies the entire chain to a speci\336ed \336le, which may be the same) 180 262.33 P
(as the source \336le. The blocks in the duplicate chain will have the same user) 180 249.33 T
1 9 Q
(ID) 180 236.33 T
1 10 Q
( numbers as the corresponding original blocks. The routine takes three) 190.66 236.33 T
-0.63 (arguments: the handle of the source \336le, the) 180 223.33 P
4 F
-0.65 (VMChain) 381.64 223.33 P
1 F
-0.63 ( of the source chain or) 430.33 223.33 P
(item, and the handle of the destination \336le. It copies the chain or item and) 180 210.33 T
(returns the) 180 197.33 T
4 F
(VMChain) 235.18 197.33 T
1 F
( handle of the duplicate structure. As noted, if this) 283.87 197.33 T
(structure is a) 180 184.33 T
1 9 Q
(VM) 244.63 184.33 T
1 10 Q
( chain, the less signi\336cant word of the) 259.62 184.33 T
4 F
(VMChain) 437.23 184.33 T
1 F
( will be) 485.92 184.33 T
-0.03 (null, and the more signi\336cant word will be the) 180 171.33 P
1 9 Q
-0.03 (VM) 396.04 171.33 P
1 10 Q
-0.03 ( handle of the head of the) 411.03 171.33 P
(chain. The geode must have both \336les open when it calls this routine.) 180 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "704" 32
%%Page: "705" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(705) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Several utilities are provided for working with) 180 641.33 T
4 F
(VMChain) 397.06 641.33 T
1 F
( structures. They) 445.75 641.33 T
(are implemented as preprocessor macros, so they are very fast. The macro) 180 628.33 T
1 9 Q
-0.44 (VMCHAIN_IS_DBITEM\050\051) 180 615.33 P
1 10 Q
-0.49 ( is passed a) 288.97 615.33 P
4 F
-0.51 (VMChain) 342.76 615.33 P
1 F
-0.49 ( structure. It returns non-zero) 391.45 615.33 P
(if the structure identi\336es a) 180 602.33 T
1 9 Q
(DB) 306.67 602.33 T
1 10 Q
( item \050i.e. if the less signi\336cant word is) 320.17 602.33 T
(non-zero\051; it returns zero if the structure identi\336es a) 180 589.33 T
1 9 Q
(VM) 424.61 589.33 T
1 10 Q
( chain. The macro) 439.6 589.33 T
1 9 Q
(VMCHAIN_GET_VM_BLOCK) 180 576.33 T
1 10 Q
(\050\051 is passed a) 307.48 576.33 T
4 F
(VMChain) 369.9 576.33 T
1 F
( structure which) 418.6 576.33 T
-0.75 (identi\336es a) 180 563.33 P
1 9 Q
-0.68 (VM) 232.4 563.33 P
1 10 Q
-0.75 ( chain. It returns the) 247.39 563.33 P
1 9 Q
-0.68 (VM) 343.27 563.33 P
1 10 Q
-0.75 ( handle \050i.e. the more signi\336cant word) 358.27 563.33 P
(of the structure\051. Finally) 180 550.33 T
(, the macro) 292.78 550.33 T
1 9 Q
(VMCHAIN_MAKE_FROM_VM_BLOCK) 347.23 550.33 T
1 10 Q
(\050\051) 516.21 550.33 T
(takes a) 180 537.33 T
4 F
(VMBlockHandle) 216.13 537.33 T
1 F
( value and casts it to type) 300.76 537.33 T
4 F
(VMChain) 421.9 537.33 T
1 F
(.) 470.59 537.33 T
0 14 Q
(18.5) 134.76 485 T
0 24 Q
(Huge Arrays) 180 485 T
1 10 Q
(Sometimes a geode needs to work with an array that can get very large.) 180 459.33 T
(Chunk arrays are very convenient, but they are limited to the size of an) 180 446.33 T
-0.52 (LMem heap, which is slightly less than 64K; furthermore, their performance) 180 433.33 P
(begins to degrade when they get larger than 6K. Similarly) 180 420.33 T
(, if a geode uses) 448.01 420.33 T
(raw memory for an array) 180 407.33 T
(, it is limited to the maximum size of a global) 295.19 407.33 T
(memory block, again 64K.) 180 394.33 T
(For this reason,) 180 374.33 T
1 9 Q
(GEOS) 255.75 374.33 T
1 10 Q
( provides the Huge Array library) 281.92 374.33 T
(. A Huge Array is) 432.29 374.33 T
(stored in a) 180 361.33 T
1 9 Q
(VM) 231.86 361.33 T
1 10 Q
( \336le. All the elements are stored in) 246.85 361.33 T
1 9 Q
(VM) 409.28 361.33 T
1 10 Q
( blocks, as is the) 424.28 361.33 T
(directory information. The application can specify an array element by its) 180 348.33 T
(index, and the Huge Array routine will lock the block containing that) 180 335.33 T
(element and return its address. Array indices are dword-sized, meaning a) 180 322.33 T
(Huge Array can have up to) 180 309.33 T
( elements. Since elements are stored in) 320.89 309.33 T
1 9 Q
(VM) 504.43 309.33 T
1 10 Q
(blocks, each element has a maximum size of 64K; however) 180 296.33 T
(, the size of the) 448.94 296.33 T
-0.52 (entire array is limited only by the amount of disk space available. The blocks) 180 283.33 P
-0.12 (in a Huge Array are linked together in a) 180 270.33 P
1 9 Q
-0.11 (VM) 368.16 270.33 P
1 10 Q
-0.12 ( chain, so the) 383.15 270.33 P
1 9 Q
-0.11 (VM) 446.55 270.33 P
1 10 Q
-0.12 ( chain utilities) 461.54 270.33 P
(can be used to duplicate, free, and compare Huge Arrays.) 180 257.33 T
(There are a couple of disadvantages to using Huge Arrays. The main) 180 237.33 T
-0.07 (disadvantage is that it takes longer to access an element: the routine has to) 180 224.33 P
-0.75 (lock the directory block, look up the index to \336nd out which block contains the) 180 211.33 P
-0.04 (element, lock that block, calculate the offset into that block for the element,) 180 198.33 P
(and return its address. \050However) 180 185.33 T
(, elements are consecutive within blocks;) 332.22 185.33 T
(thus, you can often make many array accesses with a single Huge Array) 180 172.33 T
(lookup command.\051 There is also a certain amount of memory overhead for) 180 159.33 T
307.41 306.38 320.89 319.6 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(2) 307.68 309.33 T
7 7 Q
(3) 312.63 312.1 T
(2) 316.13 312.1 T
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "705" 33
%%Page: "706" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(706) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Huge Arrays. Thus, if you are con\336dent that the array size will be small) 180 641.33 T
(enough for a single block, you are generally better off with a Chunk Array) 180 628.33 T
(\050see section 16.4.1 of chapter 16\051.) 180 615.33 T
-0.16 (Huge arrays may have \336xed-size or variable-sized elements. If elements are) 180 595.33 P
(variable-sized, there is a slight increase in memory overhead, but no) 180 582.33 T
(signi\336cant slowdown in data-access time.) 180 569.33 T
0 14 Q
(18.5.1) 123.08 527 T
0 18 Q
(Structure of a Huge Array) 180 527 T
1 10 Q
-0.37 (The huge array has two different type of blocks: a single directory block, and) 180 503.33 P
(zero or more data blocks. The blocks are linked together in a simple \050i.e.,) 180 490.33 T
(non-branching\051) 180 477.33 T
1 9 Q
(VM) 253.51 477.33 T
1 10 Q
( chain. The directory block is the head of the chain. \050See) 268.5 477.33 T
(Figure) 180 464.33 T
(18-) 213.52 464.33 T
(7 below) 227.97 464.33 T
(.\051 A Huge Array is identi\336ed by the handles of the) 261.88 464.33 T
1 9 Q
(VM) 494.86 464.33 T
1 10 Q
( \336le) 509.85 464.33 T
(containing the array and the directory block at the head of the array) 180 451.33 T
(.) 495.03 451.33 T
(The directory block is a special kind of LMem block. It contains a header) 180 431.33 T
(structure of type) 180 418.33 T
4 F
(HugeArrayDirectory) 259.62 418.33 T
1 F
( \050which begins with an) 367.4 418.33 T
4 F
(LMemBlockHeader) 180 405.33 T
1 F
( structure\051, followed by an optional \336xed data area,) 280.19 405.33 T
(which is followed by a chunk array) 180 392.33 T
(. The chunk array is an array of) 339.65 392.33 T
4 F
-0.2 (HugeArrayDirEntry) 180 379.33 P
1 F
-0.19 ( structures. There is one such structure for each data) 284.81 379.33 P
(block; the structure contains the handle of the data block, the size of the) 180 366.33 T
(block, and the index number of the last element in the block.) 180 353.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "706" 34
%%Page: "707" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(707) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Each data block is also a special LMem block. It contains a) 180 641.33 T
4 F
(HugeArrayBlock) 180 628.33 T
1 F
( structure \050which begins with an) 267.23 628.33 T
4 F
(LMemBlockHeader) 420.2 628.33 T
1 F
(structure\051 and is followed by a chunk array of elements. If the Huge Array) 180 615.33 T
(has variable-sized elements, so will each data block\325) 180 602.33 T
(s chunk array) 419.13 602.33 T
(.) 482.28 602.33 T
(When you want to look up a speci\336c element, the Huge Array routines lock) 180 582.33 T
-0.06 (the directory block. They then read through the directory chunk array until) 180 569.33 P
(they \336nd the block which contains the speci\336ed element. At this point, the) 180 556.33 T
(routine knows both which data block contains the element and which) 180 543.33 T
-0.62 (element it is in that block\325) 180 530.33 P
-0.62 (s chunk array) 297.14 530.33 P
-0.62 (. \050For example, if you look up element) 359.05 530.33 P
-0.33 (1,000, the Huge Array routine might \336nd out that block) 180 517.33 P
3 F
-0.33 (x) 436.75 517.33 P
1 F
-0.33 ( ends with element) 441.75 517.33 P
(950 and block) 180 504.33 T
3 F
(y) 246.51 504.33 T
1 F
( ends with element 1,020. The routine thus knows that) 251.51 504.33 T
(element 1,000 in the Huge Array is in the chunk array in block) 180 491.33 T
3 F
(y) 473.75 491.33 T
1 F
(, and its) 477.64 491.33 T
(element number is 50 in that block\325) 180 478.33 T
(s array) 343.19 478.33 T
(.\051) 374.86 478.33 T
(The routine then unlocks the directory block, and locks the data block) 180 458.33 T
-0.3 (containing that element. It returns a pointer to that element. It also returns) 180 445.33 P
(the number of elements occurring before and after that element in that) 180 432.33 T
(chunk array) 180 419.33 T
(. The calling geode can access all the elements in that block) 235.74 419.33 T
(without further calls to Huge Array routines.) 180 406.33 T
(When you insert or delete an element, the Huge Array routines look up the) 180 386.33 T
(element index as described above. They then call the appropriate chunk) 180 373.33 T
-0.41 (array routine to insert or delete the element in that data block. They then go) 180 360.33 P
(through the directory and adjust the element numbers throughout. If) 180 347.33 T
-0.25 (inserting an element in a data block would bring the block\325) 180 334.33 P
-0.25 (s size above some) 448.65 334.33 P
81 144 531 648 C
180 144 531 323.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
182.18 258.53 243.85 300.62 R
7 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
0 10 Q
(Figure) 180 200.98 T
(18-) 213.34 200.98 T
(7) 227.79 200.98 T
3 F
(Huge Array Structure) 236.13 200.98 T
(The Huge Array comprises a) 180 186.98 T
3 9 Q
(VM) 313.11 186.98 T
3 10 Q
( chain, which begins with a single directory) 327.94 186.98 T
(block, followed by one or more data blocks. The directory block has) 180 174.98 T
-0.73 (information on which blocks contain which elements. Elements are sequential) 180 162.98 P
(within a data block.) 180 150.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(Directory) 191.82 302.67 T
182.18 216.45 243.85 239.78 R
7 X
V
0 X
N
(Header) 196.27 224.43 T
182.18 239.78 243.85 258.53 R
7 X
V
0 X
N
(Extra Data) 187.28 245.47 T
443.52 216.45 489.35 238.12 R
7 X
V
0 X
N
(Header) 449.68 223.6 T
443.52 238.12 489.35 308.95 R
7 X
V
0 X
N
(Data) 455.04 275.88 T
(Elements) 445.24 265.88 T
(Data) 455.04 311 T
270.76 221.7 279.85 216.45 270.76 211.2 270.76 216.45 4 Y
3 X
V
243.85 216.45 270.76 216.45 2 L
3 H
2 Z
N
352.59 221.7 361.68 216.45 352.59 211.2 352.59 216.45 4 Y
V
325.68 216.45 352.59 216.45 2 L
N
434.42 221.7 443.52 216.45 434.42 211.2 434.42 216.45 4 Y
V
407.52 216.45 434.42 216.45 2 L
N
274.65 219.45 279.85 216.45 274.65 213.45 274.65 216.45 4 Y
0 X
V
243.85 266.67 261 266.67 261 216.45 274.65 216.45 4 L
1 H
N
356.49 219.45 361.68 216.45 356.49 213.45 356.49 216.45 4 Y
V
243.85 279.58 341.83 279.58 341.83 216.45 356.49 216.45 4 L
N
438.32 219.45 443.52 216.45 438.32 213.45 438.32 216.45 4 Y
V
243.85 292.5 425.17 292.5 425.17 216.45 438.32 216.45 4 L
N
279.85 216.45 325.68 238.12 R
7 X
V
0.5 H
0 Z
0 X
N
(Header) 286.02 223.6 T
279.85 238.12 325.68 308.95 R
7 X
V
0 X
N
(Data) 291.38 275.88 T
(Elements) 281.57 265.88 T
(Data) 291.38 311 T
361.68 216.45 407.52 238.12 R
7 X
V
0 X
N
(Header) 367.85 223.6 T
361.68 238.12 407.52 308.95 R
7 X
V
0 X
N
(Data) 373.21 275.88 T
(Elements) 363.41 265.88 T
(Data) 373.21 311 T
(References) 189.05 275.89 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "707" 35
%%Page: "708" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(708) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.26 (system-de\336ned threshold, the Huge Array routine automatically divides the) 180 641.33 P
(data block.) 180 628.33 T
-0.4 (When the) 180 608.33 P
1 9 Q
-0.36 (VM) 226.79 608.33 P
1 10 Q
-0.4 ( routines resize an element block, they automatically make the) 241.79 608.33 P
(block larger than necessary) 180 595.33 T
(. This leaves extra space for future insertions in) 306.12 595.33 T
-0.01 (that block, so the block won\325) 180 582.33 P
-0.01 (t have to be resized the next time an element is) 309.61 582.33 P
(added. This improves ef\336ciency) 180 569.33 T
(, since you may often be adding several) 323.52 569.33 T
-0.71 (elements to the same block. However) 180 556.33 P
-0.71 (, this also means that most Huge Arrays) 347.03 556.33 P
(have a fair amount of unused space. If you won\325) 180 543.33 T
(t be adding elements to a) 399.47 543.33 T
(Huge Array for a while, you should compact the Huge Array with) 180 530.33 T
4 F
(HugeArrayCompressBlocks) 180 517.33 T
1 F
( \050see section 18.5.3 on page 713\051.) 323.35 517.33 T
(Ordinarily) 180 497.33 T
(,) 227.78 497.33 T
1 9 Q
(VM) 233.34 497.33 T
1 10 Q
( Chains may not contain LMem heaps. Huge Arrays are an) 248.33 497.33 T
(exception. The reason LMem blocks cannot belong to) 180 484.33 T
1 9 Q
(VM) 426.14 484.33 T
1 10 Q
( chains is simple.) 441.13 484.33 T
-0.81 (Each block in a) 180 471.33 P
1 9 Q
-0.72 (VM) 250.13 471.33 P
1 10 Q
-0.81 ( chain begins with the handle of the next block in the chain) 265.12 471.33 P
(\050or) 180 458.33 T
1 9 Q
(VM_CHAIN_TREE) 195.55 458.33 T
1 10 Q
( if it is a tree block\051. However) 276.53 458.33 T
(, each LMem heap has to) 411.55 458.33 T
-0.15 (begin with an) 180 445.33 P
4 F
-0.16 (LMemBlockHeader) 245.68 445.33 P
1 F
-0.15 ( structure, the \336rst word of which is the) 345.87 445.33 P
-0.38 (global handle of the memory block. In order for these blocks to serve as both,) 180 432.33 P
(special actions have to be taken. When a Huge Array block is unlocked, its) 180 419.33 T
(\336rst word is the handle of the next block in the chain. It is thus a) 180 406.33 T
1 9 Q
(VM) 483.19 406.33 T
1 10 Q
( chain) 498.18 406.33 T
(block and not a valid LMem heap. When the Huge Array routine needs to) 180 393.33 T
(access the block, it locks the block and copies the block\325) 180 380.33 T
(s global handle into) 433.75 380.33 T
(the \336rst word, storing the chain link in another word. This makes the block) 180 367.33 T
(a valid LMem heap, but it \050temporarily\051 invalidates the) 180 354.33 T
1 9 Q
(VM) 438.94 354.33 T
1 10 Q
( chain.) 453.93 354.33 T
-0.43 (Although) 180 334.33 P
1 9 Q
-0.39 (VM) 225.31 334.33 P
1 10 Q
-0.43 ( chain utilities work on Huge Arrays, you must be sure that the) 240.3 334.33 P
(Huge Array is a valid) 180 321.33 T
1 9 Q
(VM) 282.05 321.33 T
1 10 Q
( chain when you call the utility) 297.04 321.33 T
(. In practice, this) 439.47 321.33 T
(means you cannot use a) 180 308.33 T
1 9 Q
(VM) 292.98 308.33 T
1 10 Q
( chain utility when any block in the chain is) 307.97 308.33 T
(locked or while any thread might be accessing the array) 180 295.33 T
(. If more than one) 437.25 295.33 T
(thread might be using the array) 180 282.33 T
(, you should not use the chain utilities.) 327.24 282.33 T
0 14 Q
(18.5.2) 123.08 240 T
0 18 Q
(Basic Huge Array Routines) 180 240 T
5 10 Q
(HugeArrayCreate\050\051, HugeArrayDestroy\050\051, HugeArrayLock\050\051,) 180 216.33 T
(HugeArrayUnlock\050\051, HugeArrayDirty\050\051, HugeArrayAppend\050\051,) 180 203.33 T
81 371.5 171 503.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(A Chain of Heaps?) 81 450.45 T
1 F
(The Huge Array) 81 434.45 T
(routines take special) 81 423.45 T
(steps to link LMem) 81 412.45 T
-0.1 (heaps in a VM chain.) 81 401.45 P
(Applications can\325) 81 390.45 T
(t do) 151.68 390.45 T
(this directly) 81 379.45 T
(.) 130.17 379.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 479.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 479.33 A
0 0 0 1 0 0 0 K
81 459.21 121.5 499.71 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "708" 36
%%Page: "709" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(709) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
-0.75 (Huge ArrayInsert\050\051, HugeArrayReplace\050\051, HugeArrayDelete\050\051,) 180 641.33 P
(HugeArrayGetCount\050\051) 180 628.33 T
1 9 Q
(GEOS) 180 608.33 T
1 10 Q
( provides many routines for dealing with Huge Arrays. The basic) 206.17 608.33 T
(routines are described in this section. Some additional routines which can) 180 595.33 T
-0.09 (help optimize your code are described in \322Huge Array Utilities\323 on page 713.) 180 582.33 P
-0.5 (Note that you should never have more than one block of a Huge Array locked) 180 562.33 P
(at a time. Furthermore, when you call any routine in this section \050except) 180 549.33 T
4 F
-0.03 (HugeArrayUnlock\050\051) 180 536.33 P
1 F
-0.03 (,) 282.41 536.33 P
4 F
-0.03 (HugeArrayDirty\050\051) 287.94 536.33 P
1 F
-0.03 (, and) 380.9 536.33 P
4 F
-0.03 (HugeArrayGetCount\050\051) 406.59 536.33 P
1 F
-0.03 (\051,) 522.14 536.33 P
(you should not have) 180 523.33 T
3 F
(any) 275.38 523.33 T
1 F
( blocks locked. The next section contains several) 292.23 523.33 T
(routines which may be used while a block is locked. Also, if you use any) 180 510.33 T
1 9 Q
(VM) 512.65 510.33 T
1 10 Q
(chain routines on a Huge Array) 180 497.33 T
(, you should make sure that no blocks are) 325 497.33 T
(locked.) 180 484.33 T
(T) 180 464.33 T
(o create a Huge Array) 185.75 464.33 T
(, call) 286.49 464.33 T
4 F
(HugeArrayCreate\050\051) 311.13 464.33 T
1 F
(. This routine allocates a) 411.32 464.33 T
(directory block and initializes it. The routine takes three arguments:) 180 451.33 T
2 F
(u) 180 431.33 T
1 F
(The handle of the) 198 431.33 T
1 9 Q
(VM) 281.9 431.33 T
1 10 Q
( \336le in which to create the huge array) 296.89 431.33 T
(. This) 469.31 431.33 T
(argument is ignored if a default) 198 419.33 T
1 9 Q
(VM) 347.46 419.33 T
1 10 Q
( \336le has been set for this thread.) 362.45 419.33 T
2 F
(u) 180 400.33 T
1 F
-0.13 (The size of each element. A size of zero indicates that arguments will be) 198 400.33 P
(variable-sized.) 198 388.33 T
2 F
(u) 180 369.33 T
1 F
-0.4 (The size to allocate for the directory block\325) 198 369.33 P
-0.4 (s header) 389.69 369.33 P
-0.4 (. If you want to have a) 427.82 369.33 P
(\336xed data area between the) 198 357.33 T
4 F
(HugeArrayDirectory) 328.77 357.33 T
1 F
( structure and the) 436.55 357.33 T
-0.84 (chunk array of directory entries, you can pass an argument here. The size) 198 345.33 P
(must be at least as large as) 198 333.33 T
4 F
(sizeof\050HugeArrayDirectory\051) 327.12 333.33 T
1 F
(.) 472.49 333.33 T
(Alternatively) 198 321.33 T
(, you can pass an argument of zero, indicating that there) 258.19 321.33 T
(will be no extra data area, and the default header size should be used.) 198 309.33 T
4 F
(HugeArrayCreate\050\051) 180 290.33 T
1 F
( returns the) 280.19 290.33 T
1 9 Q
(VM) 338.15 290.33 T
1 10 Q
( handle of the directory block. This is) 353.14 290.33 T
(also the handle of the Huge Array itself; you will pass it as an argument to) 180 277.33 T
(most of the other Huge Array routines.) 180 264.33 T
(When you are done with a Huge Array) 180 244.33 T
(, destroy it by calling) 357.04 244.33 T
4 F
-0.82 (HugeArrayDestroy\050\051) 180 231.33 P
1 F
-0.8 (. This routine frees all of the blocks in the Huge Array) 286.11 231.33 P
-0.8 (.) 526.24 231.33 P
-0.11 (It takes two arguments, namely the global handle of the) 180 218.33 P
1 9 Q
-0.1 (VM) 440.99 218.33 P
1 10 Q
-0.11 ( \336le and the) 455.98 218.33 P
1 9 Q
-0.1 (VM) 513.34 218.33 P
1 10 Q
-0.54 (handle of the Huge Array) 180 205.33 P
-0.54 (. It does not return anything. Y) 294.7 205.33 P
-0.54 (ou should make sure) 434.62 205.33 P
-0.24 (that none of the data blocks are locked when you call this since all of the) 180 192.33 P
1 9 Q
-0.22 (VM) 513.46 192.33 P
1 10 Q
(chain links must be valid when this routine is called.) 180 179.33 T
81 416.3 171 568.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Locked Blocks in) 81 515.45 T
(Huge Arrays) 81 504.45 T
1 F
(Y) 81 488.45 T
(ou should never) 86.34 488.45 T
(have more than one) 81 477.45 T
(Huge Array block) 81 466.45 T
(locked; for many) 81 455.45 T
(routines, you must) 81 444.45 T
(have no blocks) 81 433.45 T
(locked.) 81 422.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 544.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 544.33 A
0 0 0 1 0 0 0 K
81 524.21 121.5 564.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 532.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
81 144 171 253.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Unlock All Blocks) 81 200.66 T
(Before Freeing Array) 81 189.66 T
1 F
-0.63 (While data blocks are) 81 173.66 P
(locked, the VM links) 81 162.66 T
(are invalid.) 81 151.66 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 229.53 G
4 H
0 Z
90 450 13.5 13.5 101.25 229.53 A
0 0 0 1 0 0 0 K
81 209.42 121.5 249.92 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 217.47 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "709" 37
%%Page: "710" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(710) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 180 641.33 T
(o access an element in the array) 185.75 641.33 T
(, call) 333.36 641.33 T
4 F
(HugeArrayLock\050\051) 358 641.33 T
1 F
(. This routine) 448.93 641.33 T
(takes four arguments:) 180 628.33 T
2 F
(u) 180 608.33 T
1 F
(The global handle of the) 198 608.33 T
1 9 Q
(VM) 312.47 608.33 T
1 10 Q
( \336le which contains the Huge Array) 327.46 608.33 T
(.) 490.61 608.33 T
2 F
(u) 180 589.33 T
1 F
(The) 198 589.33 T
1 9 Q
(VM) 218.56 589.33 T
1 10 Q
( handle of the Huge Array) 233.55 589.33 T
(.) 353.18 589.33 T
2 F
(u) 180 570.33 T
1 F
(The \05032-bit\051 index number of the element.) 198 570.33 T
2 F
(u) 180 551.33 T
1 F
(A pointer to a pointer to an element.) 198 551.33 T
(The routine \336gures out which block has the element speci\336ed \050as described) 180 532.33 T
(above\051. It then locks that block. It writes a pointer to that element in the) 180 519.33 T
-0.51 (location passed. It returns a dword. The more signi\336cant word is the number) 180 506.33 P
-0.49 (of consecutive elements in that block, starting with the pointer returned; the) 180 493.33 P
(less signi\336cant word is the number of elements in that block before \050and) 180 480.33 T
(including\051 the element speci\336ed. For example, suppose you lock element) 180 467.33 T
(1,000. Let\325) 180 454.33 T
(s assume that this element is in block) 227.81 454.33 T
3 F
(x) 404.89 454.33 T
1 F
(; block) 409.89 454.33 T
3 F
(x) 442.31 454.33 T
1 F
( has 50 elements,) 447.31 454.33 T
(and element 1,000 in the huge array is the 30th element in block) 180 441.33 T
3 F
(x) 482.11 441.33 T
1 F
(. The) 487.11 441.33 T
-0.71 (routine would write a pointer to element 1,000 in the pointer passed; it would) 180 428.33 P
-0.07 (then return the dword 0x0015001e. The upper word \0500x0015\051 indicates that) 180 415.33 P
-0.48 (element 1,000 is the \336rst of the last 21 consecutive elements in the block; the) 180 402.33 P
(lower word \0500x001e\051 indicates that the element is the last of the \336rst 30) 180 389.33 T
(consecutive elements. Y) 180 376.33 T
(ou thus know which other elements in the Huge) 289.08 376.33 T
(Array are in this block and can be examined without further calls to) 180 363.33 T
4 F
(HugeArrayLock\050\051) 180 350.33 T
1 F
(.) 270.93 350.33 T
-0.17 (When you are done examining a block in the Huge Array) 180 330.33 P
-0.17 (, you should unlock) 439.81 330.33 P
-0.52 (the block with) 180 317.33 P
4 F
-0.53 (HugeArrayUnlock\050\051) 246.8 317.33 P
1 F
-0.52 (. This routine takes only one argument,) 349.21 317.33 P
(namely a pointer to any element in that block. It does not return anything.) 180 304.33 T
-0.75 (Note that you don\325) 180 291.33 P
-0.75 (t have to pass it the same pointer as the one you were given) 262.77 291.33 P
-0.84 (by) 180 278.33 P
4 F
-0.87 (HugeArrayLock\050\051) 192.87 278.33 P
1 F
-0.84 (. Thus, you can get a pointer) 283.8 278.33 P
-0.84 (, increment it to work your) 409.54 278.33 P
-0.24 (way through the block, and unlock the block with whatever address you end) 180 265.33 P
(up with.) 180 252.33 T
(Whenever you insert or delete an element, the Huge Array routines) 180 232.33 T
(automatically mark the relevant blocks as dirty) 180 219.33 T
(. However) 399.12 219.33 T
(, if you change an) 444.86 219.33 T
-0.57 (element, you need to dirty the block yourself or the changes won\325) 180 206.33 P
-0.57 (t be saved to) 472.5 206.33 P
-0.14 (the disk. T) 180 193.33 P
-0.14 (o do this, call the routine) 228.26 193.33 P
4 F
-0.14 (HugeArrayDirty\050\051) 345.42 193.33 P
1 F
-0.14 (. This routine takes) 438.38 193.33 P
-0.46 (one argument, namely a pointer to an element in a Huge Array) 180 180.33 P
-0.46 (. It dirties the) 465.96 180.33 P
(data block containing that element. Naturally) 180 167.33 T
(, if you change several) 391.16 167.33 T
(elements in a block, you only need to call this routine once.) 180 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "710" 38
%%Page: "711" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(711) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(If you want to add elements to the end of a Huge Array) 180 641.33 T
(, call) 433.54 641.33 T
4 F
(HugeArrayAppend\050\051) 180 628.33 T
1 F
(. If elements are of uniform size, you can add up to) 285.56 628.33 T
(elements with one call to this routine. Y) 193.48 615.33 T
(ou can also pass a pointer to a) 377.03 615.33 T
-0.38 (template element; it will copy the template into each new element it creates.) 180 602.33 P
(This routine takes four arguments:) 180 589.33 T
2 F
(u) 180 569.33 T
1 F
(The global handle of the) 198 569.33 T
1 9 Q
(VM) 312.47 569.33 T
1 10 Q
( \336le containing the Huge Array) 327.46 569.33 T
(. This) 470.24 569.33 T
(argument is ignored if a default \336le has been set.) 198 557.33 T
2 F
(u) 180 538.33 T
1 F
(The) 198 538.33 T
1 9 Q
(VM) 218.56 538.33 T
1 10 Q
( handle of the Huge Array) 233.55 538.33 T
(.) 353.18 538.33 T
2 F
(u) 180 519.33 T
1 F
-0.62 (The number of elements to append, if the elements are of uniform size; or) 198 519.33 P
(the size of the element to append, if elements are of variable size.) 198 507.33 T
2 F
(u) 180 488.33 T
1 F
(A pointer to a template element to copy into each new element \050pass a) 198 488.33 T
(null pointer to leave the elements uninitialized\051.) 198 476.33 T
(The routine returns the index of the new element. If several elements were) 180 457.33 T
-0.04 (created, it returns the index of the \336rst of the new elements. This index is a) 180 444.33 P
(dword.) 180 431.33 T
(Y) 180 411.33 T
(ou can also insert one or more elements in the middle of a Huge Array) 185.93 411.33 T
(. T) 508.73 411.33 T
(o) 520.04 411.33 T
(do this, call the routine) 180 398.33 T
4 F
(HugeArrayInsert\050\051) 290.2 398.33 T
1 F
(. As with) 387.05 398.33 T
4 F
-0.72 (HugeArrayAppend\050\051) 180 385.33 P
1 F
-0.69 (, you can insert many uniform-sized elements at once,) 285.56 385.33 P
(and you can pass a pointer to a template to initialize elements with. The) 180 372.33 T
(routine takes \336ve arguments:) 180 359.33 T
2 F
(u) 180 339.33 T
1 F
(The global handle of the) 198 339.33 T
1 9 Q
(VM) 312.47 339.33 T
1 10 Q
( \336le containing the Huge Array) 327.46 339.33 T
(. This) 470.24 339.33 T
(argument is ignored if a default \336le has been set.) 198 327.33 T
2 F
(u) 180 308.33 T
1 F
(The) 198 308.33 T
1 9 Q
(VM) 218.56 308.33 T
1 10 Q
( handle of the Huge Array) 233.55 308.33 T
(.) 353.18 308.33 T
2 F
(u) 180 289.33 T
1 F
-0.14 (The number of elements to insert, if the elements are of uniform size; or) 198 289.33 P
(the size of the element to insert, if elements are of variable size.) 198 277.33 T
2 F
(u) 180 258.33 T
1 F
-0.67 (The index of the \336rst of the new elements \050the element that currently has) 198 258.33 P
(that index will follow the inserted elements\051.) 198 246.33 T
2 F
(u) 180 227.33 T
1 F
(A pointer to a template element to copy into each new element \050pass a) 198 227.33 T
(null pointer to leave the elements uninitialized\051.) 198 215.33 T
(It returns the index of the \336rst of the new elements. Ordinarily) 180 196.33 T
(, this will be) 470.38 196.33 T
-0.46 (the index you passed it; however) 180 183.33 P
-0.46 (, if you pass an index which is out of bounds,) 327.52 183.33 P
-0.17 (the new elements will be put at the end of the array) 180 170.33 P
-0.17 (, and the index returned) 416.67 170.33 P
(will thus be different.) 180 157.33 T
180 612.38 193.48 625.6 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(2) 180.27 615.33 T
7 7 Q
(1) 185.22 618.1 T
(6) 188.72 618.1 T
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "711" 39
%%Page: "712" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(712) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.8 (T) 180 641.33 P
-0.8 (o delete elements in a Huge Array) 185.75 641.33 P
-0.8 (, call) 337.63 641.33 P
4 F
-0.83 (HugeArrayDelete\050\051) 360.67 641.33 P
1 F
-0.8 (. Y) 459.37 641.33 P
-0.8 (ou can delete) 470.06 641.33 P
(many elements \050whether uniform-sized or variable-sized\051 with one call to) 180 628.33 T
4 F
(HugeArrayDelete\050\051) 180 615.33 T
1 F
(. The routine takes four arguments:) 278.7 615.33 T
2 F
(u) 180 595.33 T
1 F
(The global handle of the) 198 595.33 T
1 9 Q
(VM) 312.47 595.33 T
1 10 Q
( \336le containing the Huge Array) 327.46 595.33 T
(. This) 470.24 595.33 T
(argument is ignored if a default \336le has been set.) 198 583.33 T
2 F
(u) 180 564.33 T
1 F
(The) 198 564.33 T
1 9 Q
(VM) 218.56 564.33 T
1 10 Q
( handle of the Huge Array) 233.55 564.33 T
(.) 353.18 564.33 T
2 F
(u) 180 545.33 T
1 F
(The number of elements to delete.) 198 545.33 T
2 F
(u) 180 526.33 T
1 F
(The index of the \336rst element to delete.) 198 526.33 T
(Y) 180 507.33 T
(ou can erase or replace the data in one or more elements with a call to) 185.93 507.33 T
4 F
(HugeArrayReplace\050\051) 180 494.33 T
1 F
(. This is also the only way to resize a variable-sized) 286.86 494.33 T
(element. Y) 180 481.33 T
(ou can pass a pointer to a template to copy into the element or) 228.53 481.33 T
(elements, or you can have the element\050s\051 initialized with null bytes. The) 180 468.33 T
(routine takes \336ve arguments:) 180 455.33 T
2 F
(u) 180 435.33 T
1 F
(The global handle of the) 198 435.33 T
1 9 Q
(VM) 312.47 435.33 T
1 10 Q
( \336le containing the Huge Array) 327.46 435.33 T
(. This) 470.24 435.33 T
(argument is ignored if a default \336le has been set.) 198 423.33 T
2 F
(u) 180 404.33 T
1 F
(The) 198 404.33 T
1 9 Q
(VM) 218.56 404.33 T
1 10 Q
( handle of the Huge Array) 233.55 404.33 T
(.) 353.18 404.33 T
2 F
(u) 180 385.33 T
1 F
-0.28 (The number of elements to replace, if the elements are uniform-sized; or) 198 385.33 P
(the new size for the element, if elements are variable-sized.) 198 373.33 T
2 F
(u) 180 354.33 T
1 F
(The index of the \336rst of the elements to replace.) 198 354.33 T
2 F
(u) 180 335.33 T
1 F
(A pointer to a template element to copy into each new element \050pass a) 198 335.33 T
(null pointer to \336ll the elements with null bytes\051.) 198 323.33 T
(Y) 180 304.33 T
(ou can \336nd out the number of elements in a Huge Array with a call to) 185.93 304.33 T
4 F
-0.51 (HugeArrayGetCount\050\051) 180 291.33 P
1 F
-0.49 (. This routine takes two arguments, namely the \336le) 295.55 291.33 P
-0.43 (handle and the handle of the Huge Array) 180 278.33 P
-0.43 (. The routine returns the number of) 366.24 278.33 P
(elements in the array) 180 265.33 T
(. Since array indices begin at zero, if) 278.53 265.33 T
4 F
-0.04 (HugeArrayGetCount\050\051) 180 252.33 P
1 F
-0.04 ( returns) 295.55 252.33 P
-0.04 (, the last element in the array has index) 342.98 252.33 P
(.) 207.69 239.33 T
335.65 248.86 342.98 261.54 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 12 Q
0 X
0 0 0 1 0 0 0 K
(x) 336.15 252.33 T
36 72 576 720 C
180 235.34 207.69 246.48 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
8 9 Q
0 X
0 0 0 1 0 0 0 K
(x) 183.57 239.33 T
7 F
(1) 196.57 239.33 T
(\320) 189.82 239.33 T
9 F
(\050) 179.71 239.33 T
(\051) 201.48 239.33 T
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "712" 40
%%Page: "713" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(713) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(18.5.3) 123.08 636 T
0 18 Q
(Huge Array Utilities) 180 636 T
5 10 Q
(HugeArrayNext\050\051, HugeArrayPrev\050\051, HugeArrayExpand\050\051,) 180 612.33 T
(HugeArrayContract\050\051, HugeArrayEnum\050\051,) 180 599.33 T
(HugeArrayCompressBlocks\050\051, ECCheckHugeArray\050\051) 180 586.33 T
1 F
(The routines in the other section may be all you will need for using Huge) 180 566.33 T
(Arrays. However) 180 553.33 T
(, you can improve access time by taking advantage of the) 257.4 553.33 T
-0.16 (structure of a Huge Array) 180 540.33 P
-0.16 (. As noted above, you can use any of the) 298.06 540.33 P
1 9 Q
-0.14 (VM) 482.61 540.33 P
1 10 Q
-0.16 ( Chain) 497.61 540.33 P
(routines on a Huge Array) 180 527.33 T
(, as long as none of the blocks are locked.) 296.85 527.33 T
-0.63 (If you have been accessing an element in a Huge Array and you want to move) 180 507.33 P
-0.08 (on to the next one, you can call the routine) 180 494.33 P
4 F
-0.08 (HugeArrayNext\050\051) 378.83 494.33 P
1 F
-0.08 (. The routine) 468.64 494.33 P
-0.53 (takes a pointer to a pointer to the element. It changes that pointer to point to) 180 481.33 P
-0.81 (the next element in the array) 180 468.33 P
-0.81 (, which may be in a different block. If the routine) 310.79 468.33 P
(changes blocks, it will unlock the old block and lock the new one. It returns) 180 455.33 T
(the number of consecutive elements starting with the element we just) 180 442.33 T
-0.31 (advanced to. If we were at the last element in the Huge Array) 180 429.33 P
-0.31 (, it unlocks the) 460.93 429.33 P
(block, writes a null pointer to the address, and returns zero.) 180 416.33 T
(If you want to move to the previous element instead of the next one, call) 180 396.33 T
4 F
(HugeArrayPrev\050\051) 180 383.33 T
1 F
(. It also takes a pointer to a pointer to an element. It) 270 383.33 T
(changes that pointer to a pointer to the previous element; if this means) 180 370.33 T
(switching blocks, it unlocks the current block and locks the previous one. It) 180 357.33 T
(returns the number of consecutive elements ending with the one we just) 180 344.33 T
(arrived at. If the pointer was to the \336rst element in the Huge Array) 180 331.33 T
(, it) 490.76 331.33 T
(unlocks the block, writes a null pointer to the address, and returns zero.) 180 318.33 T
(If you have a block of the Huge Array locked and you want to insert an) 180 298.33 T
(element or elements at an address in that block, call the routine) 180 285.33 T
4 F
(HugeArrayExpand\050\051) 180 272.33 T
1 F
(. It takes three arguments:) 285.37 272.33 T
2 F
(u) 180 252.33 T
1 F
(A pointer to a pointer to the location where we you want to insert the) 198 252.33 T
(elements. This element must be in a locked block.) 198 240.33 T
2 F
(u) 180 221.33 T
1 F
(The number of elements to insert, if the elements are uniform-sized; or) 198 221.33 T
(the size of the element to insert, if elements are variable-sized.) 198 209.33 T
2 F
(u) 180 190.33 T
1 F
-0.22 (A pointer to a template to copy into each new element. If you pass a null) 198 190.33 P
(pointer) 198 178.33 T
(, elements will not be initialized.) 230.59 178.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "713" 41
%%Page: "714" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(714) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The routine inserts the elements, dirtying any appropriate blocks. It writes) 180 641.33 T
(a pointer to the \336rst new element into the pointer passed. Since the data) 180 628.33 T
(block may be resized or divided to accommodate the request, this address) 180 615.33 T
(may be different from the one you pass. The routine returns the number of) 180 602.33 T
(consecutive elements beginning with the one whose address was written. If) 180 589.33 T
-0.52 (the new element is in a different block from the address passed, the old block) 180 576.33 P
(will be unlocked, and the new one will be locked.) 180 563.33 T
-0.69 (If you have a block of a Huge Array locked and you want to delete one or more) 180 543.33 P
(elements starting with one within the block, you can call) 180 530.33 T
4 F
(HugeArrayContract\050\051) 180 517.33 T
1 F
(. This routine takes two arguments:) 291.49 517.33 T
2 F
(u) 180 497.33 T
1 F
-0.11 (A pointer to the \336rst element to be deleted. The block with that element) 198 497.33 P
(must be locked.) 198 485.33 T
2 F
(u) 180 466.33 T
1 F
(The number of elements to delete. Not all of these elements need be in) 198 466.33 T
(the same block as the \336rst.) 198 454.33 T
(The routine deletes the elements, dirtying any appropriate blocks. It then) 180 435.33 T
-0.56 (changes the pointer to point to the \336rst element after the deleted ones. If this) 180 422.33 P
(element is in a different block, it will unlock the old block and lock the new) 180 409.33 T
(one. It returns the number of consecutive elements following the one whose) 180 396.33 T
(address was written.) 180 383.33 T
(Y) 180 363.33 T
(ou may wish to perform the same operation on a number of consecutive) 185.93 363.33 T
-0.69 (elements of a Huge Array) 180 350.33 P
-0.69 (.) 294.63 350.33 P
4 F
-0.72 (HugeArrayEnum\050\051) 299.5 350.33 P
1 F
-0.69 ( is a routine which lets you do) 395.79 350.33 P
(this ef\336ciently) 180 337.33 T
(.) 245 337.33 T
4 F
(HugeArrayEnum\050\051) 250.56 337.33 T
1 F
( takes six arguments:) 346.85 337.33 T
2 F
(u) 180 317.33 T
1 F
(The VMFileHandle of the) 198 317.33 T
1 9 Q
(VM) 318.75 317.33 T
1 10 Q
( \336le containing the Huge Array) 333.74 317.33 T
(.) 476.52 317.33 T
2 F
(u) 180 298.33 T
1 F
(The VMBlockHandle of the Huge Array) 198 298.33 T
(.) 380.03 298.33 T
2 F
(u) 180 279.33 T
1 F
(The index of the \336rst element to be enumerated \050remember) 198 279.33 T
(, the \336rst) 470.61 279.33 T
(element has index zero\051.) 198 267.33 T
2 F
(u) 180 248.33 T
1 F
(The number of elements to enumerate, or -1 to enumerate to the end of) 198 248.33 T
(the array) 198 236.33 T
(.) 240.04 236.33 T
2 F
(u) 180 217.33 T
1 F
(A void pointer; this pointer will be passed to the callback routine.) 198 217.33 T
2 F
(u) 180 198.33 T
1 F
-0.82 (A pointer to a Boolean callback routine. This callback routine should take) 198 198.33 P
-0.28 (two arguments: a void pointer to an element, and the void pointer which) 198 186.33 P
(was passed to) 198 174.33 T
4 F
(HugeArrayEnum\050\051) 264.5 174.33 T
1 F
(. The callback routine can abort the) 360.79 174.33 T
(enumeration by returning) 198 162.33 T
3 F
(true) 321.15 162.33 T
1 F
( \050i.e. non-zero\051.) 339.66 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "714" 42
%%Page: "715" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Huge Arrays) 474.76 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(715) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(18.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(HugeArrayEnum\050\051) 180 641.33 T
1 F
( calls the callback routine for every element, in order) 276.29 641.33 T
(,) 519.64 641.33 T
-0.63 (from the \336rst element. It passes the callback a pointer to the element and the) 180 628.33 P
(pointer passed to) 180 615.33 T
4 F
(HugeArrayEnum\050\051) 261.86 615.33 T
1 F
(. The callback routine may not do) 358.15 615.33 T
(anything which would invalidate any pointers to the Huge Array; for) 180 602.33 T
(example, it may not allocate, delete, or resize any of the elements. The) 180 589.33 T
(callback routine should restrict itself to examining elements and altering) 180 576.33 T
(them \050) 180 563.33 T
3 F
(without) 210 563.33 T
1 F
( resizing them\051. The callback routine can abort the) 245.37 563.33 T
(enumeration by returning) 180 550.33 T
3 F
(true) 303.15 550.33 T
1 F
( \050i.e. non-zero\051; if it does so,) 321.66 550.33 T
4 F
(HugeArrayEnum\050\051) 180 537.33 T
1 F
( will return) 276.29 537.33 T
3 F
(true) 331.85 537.33 T
1 F
(. If) 350.36 537.33 T
4 F
(HugeArrayEnum\050\051) 366.1 537.33 T
1 F
( \336nishes the) 462.39 537.33 T
(enumeration without aborting, it returns) 180 524.33 T
3 F
(false) 372.61 524.33 T
1 F
( \050i.e. zero\051.) 393.89 524.33 T
-0.1 (If the count is large enough to take) 180 504.33 P
4 F
-0.1 (HugeArrayEnum\050\051) 343.64 504.33 P
1 F
-0.1 ( past the end of the) 439.93 504.33 P
(array) 180 491.33 T
(,) 204.26 491.33 T
4 F
(HugeArrayEnum\050\051) 209.82 491.33 T
1 F
( will simply enumerate up to the last element,) 306.11 491.33 T
-0.7 (then stop. For example, if you pass a start index of 9,000 and a count of 2,000,) 180 478.33 P
(but the Huge Array has only 10,000 elements,) 180 465.33 T
4 F
(HugeArrayEnum\050\051) 395.6 465.33 T
1 F
( will) 491.89 465.33 T
(enumerate up through the last element \050with index 9,999\051 then stop.) 180 452.33 T
(However) 180 439.33 T
(, the starting index) 220.18 439.33 T
3 F
(must) 311.49 439.33 T
1 F
( be the index of an element in the Huge) 334.45 439.33 T
(Array) 180 426.33 T
(. Y) 205.92 426.33 T
(ou can also pass a count of -1, indicating that) 217.41 426.33 T
4 F
(HugeArrayEnum\050\051) 428.56 426.33 T
1 F
(should enumerate through the last element of the array) 180 413.33 T
(. Therefore, to) 436.87 413.33 T
-0.28 (enumerate the entire array) 180 400.33 P
-0.28 (, pass a starting element of zero and a count of -1.) 304.36 400.33 P
(As noted above, most Huge Arrays contain a fair amount of unused space.) 180 380.33 T
(This makes it much faster to add and remove elements, since blocks don\325) 180 367.33 T
(t) 515.61 367.33 T
-0.09 (need to be resized very often. However) 180 354.33 P
-0.09 (, if you have a Huge Array that is not) 356.68 354.33 P
-0.49 (frequently changed, this is an inef\336cient use of space. Y) 180 341.33 P
-0.49 (ou can free this space) 431.39 341.33 P
(by calling) 180 328.33 T
4 F
(HugeArrayCompressBlocks\050\051) 227.42 328.33 T
1 F
(. This routine is passed two) 378.55 328.33 T
-0.4 (arguments: the handle of the) 180 315.33 P
1 9 Q
-0.35 (VM) 314.7 315.33 P
1 10 Q
-0.4 ( \336le, and the) 329.7 315.33 P
4 F
-0.41 (VMBlockHandle) 388.69 315.33 P
1 F
-0.4 ( of the Huge) 473.32 315.33 P
-0.5 (Array) 180 302.33 P
-0.5 (. The routine does not change any element in the Huge Array; it simply) 205.92 302.33 P
(resizes the directory and data blocks to be no larger than necessary to hold) 180 289.33 T
(their elements. The routine does not return anything.) 180 276.33 T
(If you want to verify \050in error) 180 256.33 T
(-checking code\051 that a given) 315.18 256.33 T
1 9 Q
(VM) 446.48 256.33 T
1 10 Q
( block is the) 461.47 256.33 T
(directory block of a Huge Array) 180 243.33 T
(, you can call) 324.07 243.33 T
4 F
(ECCheckHugeArray\050\051) 386.86 243.33 T
1 F
(. This) 500.2 243.33 T
-0.6 (routine is passed the) 180 230.33 P
1 9 Q
-0.54 (VM) 276.5 230.33 P
1 10 Q
-0.6 ( \336le and block handles of the block in question. If the) 291.49 230.33 P
(block is the directory block of a Huge Array) 180 217.33 T
(, the routine returns normally;) 379.27 217.33 T
(otherwise it causes a fatal error) 180 204.33 T
(. The routine should not, therefore, be used) 325.94 204.33 T
(in non-) 180 191.33 T
1 9 Q
(EC) 212.59 191.33 T
1 10 Q
( code.) 225.59 191.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "715" 43
%%Page: "716" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Virtual Memory) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(716) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(18.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "716" 44
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 44
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ NewCenturySchlbk-BoldItalic
%%+ Times-Roman
%%+ Times-Italic
%%+ Symbol
%%EOF
