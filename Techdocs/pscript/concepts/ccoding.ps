%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 19 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "141" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Data Types and Structures) 339.38 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(141) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.1) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
-0.44 (Because) 180 610.3 P
1 9 Q
-0.39 (GEOS) 220.3 610.3 P
1 10 Q
-0.44 ( implements its own messaging and object system, standard) 246.47 610.3 P
1 9 Q
-0.39 ( C) 520.05 610.3 P
1 10 Q
-0.44 (programming must be supplemented with) 180 597.3 P
1 9 Q
-0.4 (GEOS) 374.67 597.3 P
1 10 Q
-0.44 (-speci\336c programming. This) 400.84 597.3 P
-0.67 (chapter describes the syntax and commands available to) 180 584.3 P
1 9 Q
-0.6 (GEOS) 438.21 584.3 P
1 10 Q
-0.67 ( programmers) 464.38 584.3 P
(in the Goc preprocessor) 180 571.3 T
(.) 287.58 571.3 T
(This chapter will not endeavor to teach) 180 551.3 T
1 9 Q
( C) 360.76 551.3 T
1 10 Q
( or object-oriented programming) 369.76 551.3 T
(concepts\321you should be familiar with both before continuing. Additionally) 180 538.3 T
(,) 524.66 538.3 T
(you should have read both \322System Architecture,\323 Chapter) 180 525.3 T
(3 and \322First) 453.53 525.3 T
(Steps: Hello W) 180 512.3 T
(orld,\323 Chapter) 247.79 512.3 T
(4.) 316.31 512.3 T
0 14 Q
(5.1) 142.54 459.97 T
0 24 Q
(Basic Data T) 180 459.97 T
(ypes and) 322.27 459.97 T
(Structures) 180 431.97 T
1 10 Q
(In addition to the standard data types available in) 180 406.3 T
1 9 Q
( C) 413.02 406.3 T
1 10 Q
(, the Goc preprocessor) 422.02 406.3 T
-0.31 (handles several other types speci\336c to) 180 393.3 P
1 9 Q
-0.28 (GEOS) 355.77 393.3 P
1 10 Q
-0.31 (. These are all de\336ned in the \336le) 381.94 393.3 P
3 F
(geos.h) 180 380.3 T
1 F
(. Some of these types were carried over from the world of assembly) 212.59 380.3 T
(language and \050along with the standard) 180 367.3 T
1 9 Q
( C) 359.66 367.3 T
1 10 Q
( types\051 are shown in T) 368.66 367.3 T
(able) 470.46 367.3 T
(5-) 492.51 367.3 T
(1.) 501.4 367.3 T
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 495 171 557.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81.5 556.92 170.5 556.92 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
1 X
90 450 13.5 13.5 101.25 533.3 G
4 H
0 Z
90 450 13.5 13.5 101.25 533.3 A
0 0 0 1 0 0 0 K
81 513.18 121.5 553.68 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
81 144 531 648 C
180 144 531 348.7 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 141.7 531 317.02 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 310.36 T
(able) 185.37 310.36 T
(5-) 208.16 310.36 T
(1) 217.05 310.36 T
4 F
(Basic Data T) 225.39 310.36 T
(ypes) 284.86 310.36 T
180 289.05 531 294.02 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 289.05 531 294.02 R
7 X
0 0 0 1 0 0 0 K
V
152 292.01 755 292.01 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 348.7 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Type Name) 180 297.36 T
(Description) 288 297.36 T
1 F
(byte) 180 280.38 T
(An unsigned, 8-bit field.) 288 280.38 T
(sbyte) 180 266.38 T
(A signed, 8-bit field \050same as char\051.) 288 266.38 T
(word) 180 252.38 T
(An unsigned, 16-bit field.) 288 252.38 T
(wchar) 180 238.38 T
(An unsigned, 16-bit field \050same as word\051.) 288 238.38 T
(sword) 180 224.38 T
(A signed, 16-bit field \050same as short\051.) 288 224.38 T
(dword) 180 210.38 T
(An unsigned, 32-bit field.) 288 210.38 T
(sdword) 180 196.38 T
(A signed, 32-bit field \050same as long\051.) 288 196.38 T
(Boolean) 180 182.38 T
(A type \05016 bits\051 used for Boolean functions.) 288 182.38 T
4 F
-0.3 (Additional basic types supported by) 180 168.38 P
4 9 Q
-0.27 (GEOS) 344.77 168.38 P
4 10 Q
-0.3 (. The standard types de\336ned in the) 371.28 168.38 P
(C programming language are also supported.) 180 156.38 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "141" 1
%%Page: "142" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(142) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The Boolean type behaves as most Boolean types\321any nonzero value) 180 641.33 T
(represents a) 180 628.33 T
4 F
(true) 240 628.33 T
1 F
( state, and zero represents the) 258.51 628.33 T
4 F
(false) 401.48 628.33 T
1 F
( state. Throughout the) 422.76 628.33 T
-0.28 (documentation,) 180 615.33 P
4 F
-0.28 (true) 254.17 615.33 P
1 F
-0.28 ( and) 272.68 615.33 P
4 F
-0.28 (false) 295.08 615.33 P
1 F
-0.28 ( are taken to be these meanings. Note that the) 316.36 615.33 P
(constants) 180 602.33 T
1 9 Q
(TRUE) 227.04 602.33 T
1 10 Q
( and) 253.37 602.33 T
1 9 Q
(F) 276.34 602.33 T
(ALSE) 281.68 602.33 T
1 10 Q
( are de\336ned and may be used as return values) 306.35 602.33 T
(from your functions and methods. Do not compare Boolean variables,) 180 589.33 T
(however) 180 576.33 T
(, against these constants. A Boolean may be) 217.96 576.33 T
4 F
(true) 423.56 576.33 T
1 F
( without actually) 442.07 576.33 T
(equaling the) 180 563.33 T
1 9 Q
(TRUE) 240.57 563.33 T
1 10 Q
( value.) 266.9 563.33 T
0 14 Q
(5.1.1) 130.86 521 T
0 18 Q
(Records and Enumerated T) 180 521 T
(ypes) 412.72 521 T
1 9 Q
(GEOS) 180 497.33 T
1 10 Q
( objects and routines make extensive use of \337ag records and) 206.17 497.33 T
(enumerated types. A \337ag record is a byte, word, or dword in which each bit) 180 484.33 T
(represents the state \050on or off\051 of a particular attribute or function. An) 180 471.33 T
-0.02 (enumerated type is a byte or word in which each enumeration has a unique) 180 458.33 P
(constant value.) 180 445.33 T
(There are three basic types of \337ag records, shown in T) 180 425.33 T
(able) 429.21 425.33 T
(5-) 451.26 425.33 T
(2. T) 460.15 425.33 T
(o de\336ne a) 477.02 425.33 T
-0.1 (\337ag record, you should use one of these types and then de\336ne the \337ags to be) 180 412.33 P
-0.07 (bits within the record. T) 180 399.33 P
-0.07 (o set \337ags,) 290.85 399.33 P
1 9 Q
-0.06 (OR) 341.95 399.33 P
1 10 Q
-0.07 ( them \050bitwise) 355.45 399.33 P
1 9 Q
-0.06 (OR) 423.96 399.33 P
1 10 Q
-0.07 (\051 with the record; to) 437.46 399.33 P
(clear them,) 180 386.33 T
1 9 Q
(AND) 234.82 386.33 T
1 10 Q
( their bitwise inverses \050bitwise) 255.65 386.33 T
1 9 Q
(AND) 400.12 386.33 T
1 10 Q
(\051 with the record.) 420.96 386.33 T
(Creating and working with \337ag records is shown in Code Display) 180 373.33 T
(5-) 483.18 373.33 T
(1.) 492.07 373.33 T
(There are two basic enumerated types: The standard enumerated type) 180 353.33 T
(supported by your) 180 340.33 T
1 9 Q
(C) 266.48 340.33 T
1 10 Q
( compiler uses word-sized values.) 272.98 340.33 T
1 9 Q
(GEOS) 429.28 340.33 T
1 10 Q
( also allows) 455.45 340.33 T
(byte-sized enumerated types with the) 180 327.33 T
3 F
( ByteEnum) 353.9 327.33 T
1 F
( type. Use of this type is) 411.58 327.33 T
(shown in Code Display) 180 314.33 T
(5-) 288.35 314.33 T
(1.) 297.24 314.33 T
81 144 531 648 C
180 144 531 306.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 117.13 531 271.96 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180 265.3 T
(able) 185.37 265.3 T
(5-) 208.16 265.3 T
(2) 217.05 265.3 T
4 F
(Flag Records and ByteEnum) 225.39 265.3 T
180 243.99 531 248.96 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180 243.99 531 248.96 R
7 X
0 0 0 1 0 0 0 K
V
152 246.95 755 246.95 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 306.97 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Type Name) 180 252.3 T
(Description) 288 252.3 T
1 F
(ByteFlags) 180 235.32 T
(An 8-bit record of bit flags.) 288 235.32 T
(WordFlags) 180 221.32 T
(A 16-bit record of bit flags.) 288 221.32 T
(DWordFlags) 180 207.32 T
(A 32-bit record of bit flags.) 288 207.32 T
(ByteEnum) 180 193.32 T
(An 8-bit enumerated type to complement the) 288 193.32 T
(16-bit type supported by standard) 288 181.32 T
1 9 Q
(C) 447.84 181.32 T
1 10 Q
( compilers.) 454.34 181.32 T
4 F
(T) 180 167.32 T
(ypes of) 185.96 167.32 T
4 9 Q
(GEOS) 219.47 167.32 T
4 10 Q
( \337ags records and ByteEnum.) 245.98 167.32 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "142" 2
%%Page: "143" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Data Types and Structures) 339.38 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(143) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.1) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(5-) 147.13 629.31 T
(1 Flag Records and ByteEnums) 156.02 629.31 T
5 9 Q
(/* Define flag records to be the optimized length for the number of flags. For) 81 614.98 T
( * example, the sample type MyFlag has six flags and therefore should be a byte.) 81 603.98 T
( * Flag values should be constants equivalent to having a single bit set in the) 81 592.98 T
( * flag record. */) 81 581.98 T
(typedef ByteFlags MyFlag;) 81 563.98 T
(#define MF_FIRST_FLAG) 81 552.98 T
(0x01) 212.5 552.98 T
(#define MF_SECOND_FLAG) 81 541.98 T
(0x02) 212.5 541.98 T
(#define MF_THIRD_FLAG) 81 530.98 T
(0x04) 212.5 530.98 T
(#define MF_FOURTH_FLAG) 81 519.98 T
(0x08) 212.5 519.98 T
(#define MF_FIFTH_FLAG) 81 508.98 T
(0x10) 212.5 508.98 T
(#define MF_SIXTH_FLAG) 81 497.98 T
(0x20) 212.5 497.98 T
(/* In a section of code, to set a flag, bitwise OR it with the record. To clear the) 81 479.98 T
( * flag, bitwise AND its inverse with the record. You can set any number of flags) 81 468.98 T
( * at a time as shown in the following examples. */) 81 457.98 T
(...) 102.6 439.98 T
(MyFlag) 102.6 428.98 T
(myFlagsRecord;) 168.98 428.98 T
(/* Set up a variable of the flag record type */) 256.5 428.98 T
(/* Set the second and fourth flag. */) 125 410.98 T
(myFlagsRecord = MF_SECOND_FLAG | MF_FOURTH_FLAG;) 102.6 399.98 T
(/* Set the first flag and then clear the fifth and sixth flags. */) 125 381.98 T
(myFlagsRecord = \050myFlagsRecord | MF_FIRST_FLAG\051 & ~\050MF_FIFTH_FLAG |) 102.6 370.98 T
(MF_SIXTH_FLAG\051;) 365.6 359.98 T
(/* The ByteEnum type can be used instead of the standard enumerated type, which) 81 341.98 T
( * is implemented by most compilers as a word type. To define a ByteEnum, define) 81 330.98 T
( * the type and then a unique constant value for each enumeration as in the) 81 319.98 T
( * following example. */) 81 308.98 T
(typedef ByteEnum USCity;) 81 290.98 T
(#define USC_HARTFORD) 81 279.98 T
(0x00) 212.5 279.98 T
(#define USC_CHARLOTTE) 81 268.98 T
(0x01) 212.5 268.98 T
(#define USC_WICHITA) 81 257.98 T
(0x02) 212.5 257.98 T
(#define USC_PIERRE) 81 246.98 T
(0x03) 212.5 246.98 T
(#define USC_ORLANDO) 81 235.98 T
(0x04) 212.5 235.98 T
81 211.95 531 223.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 211.95 531 223.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 219.2 617.5 222.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "143" 3
%%Page: "144" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(144) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.1.2) 130.86 636 T
0 18 Q
(Handles and Pointers) 180 636 T
1 10 Q
(Handles and pointers are present everywhere in) 180 612.33 T
1 9 Q
(GEOS) 405.93 612.33 T
1 10 Q
(\321they are the) 432.1 612.33 T
(essential elements that make dynamic linking and ef\336cient memory) 180 599.33 T
(management possible.) 180 586.33 T
1 9 Q
(GEOS) 180 566.33 T
1 10 Q
( pointers are all far pointers; that is, they are 32-bit addresses that) 206.17 566.33 T
(reference speci\336c locations in memory) 180 553.33 T
(. They are normal) 354.06 553.33 T
1 9 Q
(C) 439.26 553.33 T
1 10 Q
( pointers and can) 445.76 553.33 T
(be used as such. T) 180 540.33 T
(wo other pointer types are also used by) 263.38 540.33 T
1 9 Q
(GEOS) 446.55 540.33 T
1 10 Q
(: Object) 472.72 540.33 T
(pointers \050optrs\051 and segment pointers. Object pointers are described below;) 180 527.33 T
-0.1 (segment pointers are 16-bit addresses described in \322Memory Management,\323) 180 514.33 P
(Chapter) 180 501.33 T
(15.) 220.74 501.33 T
0 14 Q
(5.1.2.1) 119.19 467.67 T
(Handles) 180 467.67 T
1 10 Q
-0.37 (Handles are 16-bit, unsigned values used for several purposes. They provide) 180 445.33 P
(abstraction when the exact address of a data structure or other item is not) 180 432.33 T
(known or is an inconsistent state. The kernel maintains a handle table to) 180 419.33 T
(keep track of many of the handles in the system. Each entry in the handle) 180 406.33 T
-0.09 (table is 16 bytes that contains information about the item referenced by the) 180 393.33 P
(handle; these 16 bytes are opaque to applications and libraries and can not) 180 380.33 T
-0.45 (be accessed or altered except by the kernel. Other handle types are managed) 180 367.33 P
(in other tables by the kernel.) 180 354.33 T
(Handles are used for the following primary purposes. For a full description) 180 334.33 T
(of how handles are used, see \322Handles,\323 Chapter) 180 321.33 T
(14.) 406.69 321.33 T
2 F
(u) 180 301.33 T
1 F
(Memory reference) 198 301.33 T
-0.81 (Entries for memory handles contain pointers to memory blocks; when the) 198 289.33 P
-0.54 (blocks move, the pointers are updated. However) 198 277.33 P
-0.54 (, the handle\325) 415.89 277.33 P
-0.54 (s integrity is) 471.5 277.33 P
(preserved, and applications keep track of just the handle value.) 198 265.33 T
2 F
(u) 180 246.33 T
1 F
(V) 198 246.33 T
(irtual Memory reference) 204.78 246.33 T
-0.44 (Entries for) 198 234.33 P
1 9 Q
-0.4 (VM) 249.88 234.33 P
1 10 Q
-0.44 ( handles indirectly reference) 264.87 234.33 P
1 9 Q
-0.4 (VM) 397.71 234.33 P
1 10 Q
-0.44 ( blocks similar to the way) 412.71 234.33 P
(memory handles reference blocks of memory) 198 222.33 T
(.) 402.07 222.33 T
1 9 Q
(VM) 407.63 222.33 T
1 10 Q
( handles may be used) 422.62 222.33 T
(whether the) 198 210.33 T
1 9 Q
(VM) 256.89 210.33 T
1 10 Q
( block is resident in memory or not.) 271.88 210.33 T
2 F
(u) 180 191.33 T
1 F
(File and disk reference) 198 191.33 T
(Entries for \336le and disk handles contain information about the location) 198 179.33 T
-0.63 (and status of the referenced \336le/disk. They provide indirect access to \336les) 198 167.33 P
(and disks in a manner similar to memory handles.) 198 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "144" 4
%%Page: "145" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Data Types and Structures) 339.38 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(145) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.1) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(Data structure implementation) 198 641.33 T
-0.57 (Certain frequently-used system data structures require a storage format) 198 629.33 P
(that provides for quick and convenient access at all times. These data) 198 617.33 T
(structures \050for example, threads, event queues, messages, timers, and) 198 605.33 T
(semaphores\051 are stored in Handle T) 198 593.33 T
(able entries.) 363.13 593.33 T
2 F
(u) 180 574.33 T
1 F
(Optimization) 198 574.33 T
-0.6 (The kernel will, if space permits, sometimes use Handle T) 198 562.33 P
-0.6 (able entries for) 460.19 562.33 P
-0.86 (optimized temporary storage. \050For example, when passing parameters on) 198 550.33 P
(the stack with messages, the kernel will occasionally use handles for) 198 538.33 T
(storing the parameters.\051) 198 526.33 T
(The) 180 507.33 T
3 F
(NullHandle) 200.56 507.33 T
1 F
( value \050zero\051 is used to indicate a null handle.) 260.37 507.33 T
-0.66 (There are over a dozen different types of handles that can be used by any sort) 180 487.33 P
-0.31 (of geode. These are listed in T) 180 474.33 P
-0.31 (able) 315.31 474.33 P
-0.31 (5-) 337.36 474.33 P
-0.31 (3, along with a brief description of each.) 346.25 474.33 P
(All are 16-bit unsigned integers.) 180 461.33 T
81 144 531 648 C
180 144 531 443.8 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.83 144 531 433.3 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(T) 180.83 426.64 T
(able) 186.2 426.64 T
(5-) 208.99 426.64 T
(3) 217.88 426.64 T
4 F
(Handle T) 226.22 426.64 T
(ypes) 269.02 426.64 T
180.83 405.33 531 410.3 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
180.83 405.33 531 410.3 R
7 X
0 0 0 1 0 0 0 K
V
152.83 408.29 755.83 408.29 2 L
V
0.5 H
2 Z
0 X
N
180 144 531 443.8 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Type Name) 180.83 413.64 T
(Description) 288.83 413.64 T
1 F
(Handle) 180.83 396.66 T
(All-purpose handle.) 288.83 396.66 T
(MemHandle) 180.83 382.66 T
(References a block of memory.) 288.83 382.66 T
(DiskHandle) 180.83 368.66 T
(References a particular disk.) 288.83 368.66 T
(FileHandle) 180.83 354.66 T
(References a particular file.) 288.83 354.66 T
(ThreadHandle) 180.83 340.66 T
(References a thread.) 288.83 340.66 T
(QueueHandle) 180.83 326.66 T
(References an event queue structure.) 288.83 326.66 T
(TimerHandle) 180.83 312.66 T
(References a timer data structure.) 288.83 312.66 T
(GeodeHandle) 180.83 298.66 T
(References a geode.) 288.83 298.66 T
(GStateHandle) 180.83 284.66 T
(References a graphic state.) 288.83 284.66 T
(WindowHandle) 180.83 270.66 T
(References a window.) 288.83 270.66 T
(SemaphoreHandle) 180.83 256.66 T
(References a semaphore data structure.) 288.83 256.66 T
(EventHandle) 180.83 242.66 T
(References a particular event in an event queue.) 288.83 242.66 T
(ThreadLockHandle) 180.83 228.66 T
(References a thread lock data structure.) 288.83 228.66 T
(VMFileHandle) 180.83 214.66 T
(References a) 288.83 214.66 T
1 9 Q
(VM) 350.12 214.66 T
1 10 Q
( file.) 365.12 214.66 T
(VMBlockHandle) 180.83 200.66 T
(References a) 288.83 200.66 T
1 9 Q
(VM) 350.12 200.66 T
1 10 Q
( block \050with a) 365.12 200.66 T
1 9 Q
(VM) 430.14 200.66 T
1 10 Q
( file handle\051.) 445.13 200.66 T
(NullHandle) 180.83 186.66 T
(The null value of any handle.) 288.83 186.66 T
4 F
-0.34 (The internal structure of every handle type is opaque and can not be accessed) 180.83 172.66 P
-0.77 (except by the kernel. Swat, the) 180.83 160.66 P
4 9 Q
-0.7 (GEOS) 316.74 160.66 P
4 10 Q
-0.77 ( debugger) 343.25 160.66 P
-0.77 (, provides commands that allow) 385.81 160.66 P
(you to access the data referenced by the various handles.) 180.83 148.66 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "145" 5
%%Page: "146" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(146) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.1.2.2) 119.19 638.67 T
(Chunk Handles and Object Pointers) 180 638.67 T
1 10 Q
(Objects and small data structures are stored in small memory pieces called) 180 616.33 T
-0.31 (chunks. Chunks are stored in memory blocks known as local memory heaps,) 180 603.33 P
(and each local memory heap can contain several chunks. Each chunk is) 180 590.33 T
-0.35 (referenced by a combination of two handles: The MemHandle handle locates) 180 577.33 P
(the local memory heap, and the ChunkHandle locates the chunk within the) 180 564.33 T
(block. \050The ChunkHandle type is not shown in T) 180 551.33 T
(able) 403.3 551.33 T
(5-) 425.35 551.33 T
(3 because it is not a) 434.24 551.33 T
(normal handle and must be used with a MemHandle.\051 A null chunk handle) 180 538.33 T
(value is speci\336ed by) 180 525.33 T
3 F
(NullChunk) 274.83 525.33 T
1 F
(.) 332.05 525.33 T
-0.53 (Objects are referenced in the same way as chunks, but the handle and chunk) 180 505.33 P
-0.38 (handle are combined into a single structure called an Object Pointer) 180 492.33 P
-0.38 (, or optr) 490.47 492.33 P
-0.38 (.) 525.82 492.33 P
(Each optr uniquely identi\336es a particular object in the system. Note that) 180 479.33 T
(optrs are often used to reference non-object chunks and data structures. A) 180 466.33 T
(null value is speci\336ed by) 180 453.33 T
3 F
(NullOptr) 296.13 453.33 T
1 F
(.) 342.06 453.33 T
1 9 Q
-0.74 (GEOS) 180 433.33 P
1 10 Q
-0.82 ( provides several macros, all de\336ned in) 206.17 433.33 P
3 F
-0.85 (geos.h) 382.68 433.33 P
1 F
-0.82 (, for creating and parsing) 415.27 433.33 P
(optrs.) 180 420.33 T
2 F
(u) 180 400.33 T
3 F
(ConstructOptr\050\051) 198 400.33 T
1 F
(This macro constructs an optr from a MemHandle and a ChunkHandle.) 198 388.33 T
2 F
(u) 180 369.33 T
3 F
(OptrT) 198 369.33 T
(oHandle\050\051) 228.75 369.33 T
1 F
(This macro extracts the MemHandle portion of the given optr) 198 357.33 T
(.) 481.34 357.33 T
2 F
(u) 180 338.33 T
3 F
(OptrT) 198 338.33 T
(oChunk\050\051) 228.75 338.33 T
1 F
(This macro extracts the chunk handle portion of a given optr) 198 326.33 T
(.) 477.83 326.33 T
0 14 Q
(5.1.2.3) 119.19 293.67 T
(Pointers) 180 293.67 T
1 10 Q
(Pointers can be used normally as in C. All Goc-generated pointers are far) 180 271.33 T
(pointers; that is, they are 32-bits long, composed of a 16-bit segment and a) 180 258.33 T
(16-bit offset.) 180 245.33 T
1 9 Q
(GEOS) 180 225.33 T
1 10 Q
( provides macros for extracting the segment and handle portions of) 206.17 225.33 T
(pointers.) 180 212.33 T
2 F
(u) 180 192.33 T
3 F
(PtrT) 198 192.33 T
(oSegment\050\051) 221.34 192.33 T
1 F
-0.58 (This macro returns the segment portion of the given pointer \050returned as) 198 180.33 P
(type \322word\323\051.) 198 168.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "146" 6
%%Page: "147" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Basic Data Types and Structures) 339.38 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(147) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.1) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
3 F
(PtrT) 198 641.33 T
(oOffset\050\051) 221.34 641.33 T
1 F
(This macro returns the offset portion of the given pointer \050returned as) 198 629.33 T
(type \322word\323\051.) 198 617.33 T
1 9 Q
(GEOS) 180 598.33 T
1 10 Q
( automatically loads code resources when needed. However) 206.17 598.33 T
(, when you) 477.85 598.33 T
(call routines through pointers, you must take special measures to see to it) 180 585.33 T
(that the routine is properly loaded into memory) 180 572.33 T
(. This is discussed below in) 399.09 572.33 T
(section 5.2.4 on page 152.) 180 559.33 T
0 14 Q
(5.1.3) 130.86 517 T
0 18 Q
(Fixed Point Structures) 180 517 T
1 10 Q
(When you want to represent non-integral numbers \050i.e., real numbers\051, you) 180 493.33 T
(can use either the standard) 180 480.33 T
1 9 Q
(C) 310.01 480.33 T
1 10 Q
( \337oating-point format or the following special) 316.51 480.33 T
(structures of) 180 467.33 T
1 9 Q
(GEOS) 241.47 467.33 T
1 10 Q
( for \336xed point math. Note that \336xed-point calculations) 267.64 467.33 T
(are faster than the corresponding \337oating-point math, so if you want to) 180 454.33 T
-0.25 (optimize your code, you should use the) 180 441.33 P
1 9 Q
-0.22 (GEOS) 359.21 441.33 P
1 10 Q
-0.25 ( \336xed-point structures with the) 385.38 441.33 P
1 9 Q
(GEOS) 180 428.33 T
1 10 Q
( math routines.) 206.17 428.33 T
81 395.98 531 408 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 395.98 531 408 R
7 X
0 0 0 1 0 0 0 K
V
76.5 403.23 617.5 406.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 389.31 T
(5-) 147.13 389.31 T
(2 GEOS Data Structures) 156.02 389.31 T
5 9 Q
(/* Fixed-Point Structures) 81 374.98 T
( *) 81 363.98 T
(The following structures are used to represent fixed-point numbers:) 113.4 363.98 T
( *) 81 352.98 T
(numbers with a fractional portion and an integral portion. Notice that) 113.4 352.98 T
( *) 81 341.98 T
(there are several formats of fixed-point numbers; each uses a different) 113.4 341.98 T
( *) 81 330.98 T
(number of bits for the parts of the number. Choose whichever is most) 113.4 330.98 T
( *) 81 319.98 T
(appropriate \050for optimization\051. */) 113.4 319.98 T
(/* BBFixed) 125 301.98 T
( * One byte integer, one byte fraction */) 125 290.98 T
(typedef struct {) 81 279.98 T
(byte) 102.6 268.98 T
(BBF_frac;) 168.98 268.98 T
(/* fractional portion */) 256.5 268.98 T
(byte) 102.6 257.98 T
(BBF_int;) 168.98 257.98 T
(/* integral portion */) 256.5 257.98 T
(} BBFixed;) 81 246.98 T
(/* BBFixedAsWord) 125 228.98 T
( * Sometimes it is convenient to refer to a BBFixed value as type word.) 125 217.98 T
( * The BBFixedAsWord type is used for this purpose. */) 125 206.98 T
(typedef word) 81 195.98 T
(BBFixedAsWord;) 168.98 195.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "147" 7
%%Page: "148" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(148) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.1) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(/* WBFixed) 125 642 T
( * One word integer, one byte fraction */) 125 631 T
(typedef struct {) 81 620 T
(byte) 102.6 609 T
(WBF_frac;) 168.98 609 T
(/* fractional portion */) 256.5 609 T
(word) 102.6 598 T
(WBF_int;) 168.98 598 T
(/* integral portion */) 256.5 598 T
(} WBFixed;) 81 587 T
(/* WWFixed) 125 569 T
( * One word integer, one word fraction */) 125 558 T
(typedef struct {) 81 547 T
(word) 102.6 536 T
(WWF_frac;) 168.98 536 T
(/* fractional portion */) 256.5 536 T
(word) 102.6 525 T
(WWF_int;) 168.98 525 T
(/* integral portion */) 256.5 525 T
(} WWFixed;) 81 514 T
(/* WWFixedAsDWord) 125 496 T
( * Sometimes it is convenient to refer to a WWFixed value as type dword.) 125 485 T
( * The WWFixedAsDWord type is used for this purpose. */) 125 474 T
(typedef dword) 81 463 T
(WWFixedAsDWord;) 168.98 463 T
(/* DWFixed) 125 445 T
( * two words \050one dword\051 integer, one word fraction */) 125 434 T
(typedef struct {) 81 423 T
(word) 102.6 412 T
(DWF_frac;) 168.98 412 T
(/* fractional portion */) 256.5 412 T
(sdword) 102.6 401 T
(DWF_int;) 168.98 401 T
(/* integral portion */) 256.5 401 T
(} DWFixed;) 81 390 T
(/* Three-byte structure) 81 372 T
( * The WordAndAHalf structure is used when you need a 24-bit value and you want to) 81 361 T
( * optimize and avoid using a 32-bit value. */) 81 350 T
(typedef struct {) 81 332 T
(word) 102.6 321 T
(WAAH_low;) 168.98 321 T
(/* the low 16 bits */) 256.5 321 T
(byte) 102.6 310 T
(WAAH_high;) 168.98 310 T
(/* the high 8 bits */) 256.5 310 T
(} WordAndAHalf;) 81 299 T
81 274.98 531 287 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 274.98 531 287 R
7 X
0 0 0 1 0 0 0 K
V
76.5 282.23 617.5 285.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Three special macros are also available to work with the) 180 257.31 T
3 F
(WWFixed) 443.02 257.31 T
1 F
( type.) 492.08 257.31 T
(These are listed below:) 180 244.31 T
2 F
(u) 180 224.31 T
3 F
(MakeWWFixed) 198 224.31 T
1 F
(This macro creates a) 198 212.31 T
3 F
(WWFixed) 296.53 212.31 T
1 F
( structure from a given \337oating-point) 345.59 212.31 T
(number or dword number) 198 200.31 T
(.) 315.96 200.31 T
2 F
(u) 180 181.31 T
3 F
(WWFixedT) 198 181.31 T
(oFrac) 253.36 181.31 T
1 F
(This macro produces the fractional portion of a) 198 169.31 T
3 F
(WWFixed) 417.08 169.31 T
1 F
( structure.) 466.14 169.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "148" 8
%%Page: "149" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Goc and C) 487.99 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(149) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.2) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
3 F
(WWFixedT) 198 641.33 T
(oInt) 253.36 641.33 T
1 F
(This macro produces the integral portion of a) 198 629.33 T
3 F
(WWFixed) 409.12 629.33 T
1 F
( structure.) 458.18 629.33 T
-0.22 (T) 180 610.33 P
-0.22 (wo other macros are provided for use with) 185.96 610.33 P
3 F
-0.23 (WWFixedAsDword) 381.24 610.33 P
1 F
-0.22 ( structures:) 478.08 610.33 P
2 F
(u) 180 590.33 T
3 F
(IntegerOf\050\051) 198 590.33 T
1 F
(This macro returns the integral portion of a) 198 578.33 T
3 F
(WWFixedAsDword) 402.64 578.33 T
1 F
(structure.) 198 566.33 T
2 F
(u) 180 547.33 T
3 F
(FractionOf\050\051) 198 547.33 T
1 F
(This macro returns the fractional portion of a) 198 535.33 T
3 F
(WWFixedAsDword) 410.6 535.33 T
1 F
(structure.) 198 523.33 T
0 14 Q
(5.2) 142.54 472 T
0 24 Q
(Goc and C) 180 472 T
1 10 Q
-0.58 (Goc is a superset of the standard) 180 446.33 P
1 9 Q
-0.52 (C) 330.38 446.33 P
1 10 Q
-0.58 ( programming language. Goc actually acts) 336.88 446.33 P
-0.79 (as a sort of preprocessor before the code is run through a standard) 180 433.33 P
1 9 Q
-0.71 (C) 478.67 433.33 P
1 10 Q
-0.79 ( compiler) 485.16 433.33 P
-0.79 (.) 526.23 433.33 P
(There are several differences you must be aware of, though. These) 180 420.33 T
(differences are covered in the following sections as well as throughout the) 180 407.33 T
(documentation.) 180 394.33 T
0 14 Q
(5.2.1) 130.86 352 T
0 18 Q
(Goc File T) 180 352 T
(ypes) 265.7 352 T
5 10 Q
(@include, @optimize) 180 328.33 T
1 F
-0.14 (When programming in Goc, you will use several different types of code \336les.) 180 308.33 P
-0.78 (Files ending in) 180 295.33 P
3 F
-0.8 (.goh) 249.34 295.33 P
1 F
-0.78 ( are the Goc equivalent of) 271.19 295.33 P
1 9 Q
-0.7 (C) 387.65 295.33 P
3 10 Q
-0.8 (.h) 396.15 295.33 P
1 F
-0.78 ( \336les\321they contain routine) 405.78 295.33 P
-0.53 (headers, constants, and other included data and structures necessary for the) 180 282.33 P
(program. Files ending in) 180 269.33 T
3 F
(.goc) 296.68 269.33 T
1 F
( are the Goc equivalent of) 317.24 269.33 T
1 9 Q
(C) 438.37 269.33 T
3 10 Q
(.c) 447.65 269.33 T
1 F
( \336les\321they) 455.99 269.33 T
-0.65 (contain code and data for the program. Y) 180 256.33 P
-0.65 (ou should keep any Goc-speci\336c code) 363.42 256.33 P
-0.5 (or header information strictly in the Goc \336les, and standard) 180 243.33 P
1 9 Q
-0.45 (C) 453.9 243.33 P
1 10 Q
-0.5 ( code should be) 460.4 243.33 P
(kept in) 180 230.33 T
1 9 Q
(C) 215.38 230.33 T
1 10 Q
( \336les.) 221.88 230.33 T
1 9 Q
(C) 249.11 230.33 T
1 10 Q
( code can also be put in) 255.61 230.33 T
3 F
(.goc) 365.26 230.33 T
1 F
( and) 385.82 230.33 T
3 F
(.goh) 408.79 230.33 T
1 F
( \336les, but for) 430.64 230.33 T
(consistency) 180 217.33 T
(, you should try to keep it separate.) 231.66 217.33 T
(Not all of your program\325) 180 197.33 T
(s header \336les need be) 290.38 197.33 T
3 F
(.goh) 392.06 197.33 T
1 F
( \336les\321if the header \336le) 413.91 197.33 T
(contains only) 180 184.33 T
1 9 Q
(C) 244.08 184.33 T
1 10 Q
( constructions \050structures, routine de\336nitions, and so on\051,) 250.58 184.33 T
(then you may leave it as a standard) 180 171.33 T
1 9 Q
(C) 348.19 171.33 T
3 10 Q
(.h) 357.47 171.33 T
1 F
( \336le, included by means of the) 367.1 171.33 T
(#include directive.) 180 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "149" 9
%%Page: "150" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(150) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.22 (The rule of thumb is that if a header \336le contains any Goc code or includes a) 180 641.33 P
3 F
-0.1 (.goh) 180 628.33 P
1 F
-0.1 ( \336le, then it must be a) 201.85 628.33 P
3 F
-0.1 (.goh) 305.45 628.33 P
1 F
-0.1 ( \336le. Note also that) 327.3 628.33 P
3 F
-0.1 (.goh) 417.58 628.33 P
1 F
-0.1 ( \336les are allowed to) 439.43 628.33 P
(contain simple standard) 180 615.33 T
1 9 Q
(C) 294.83 615.33 T
1 10 Q
( code; if you are not sure, then, you can make all) 301.33 615.33 T
(your header \336les) 180 602.33 T
3 F
(.goh) 260 602.33 T
1 F
(.) 281.85 602.33 T
-0.35 (Standard) 180 582.33 P
1 9 Q
-0.32 (C) 225.77 582.33 P
1 10 Q
-0.35 ( programs use the) 232.27 582.33 P
3 F
-0.36 (#include) 316.79 582.33 P
1 F
-0.35 ( directive to include header \050) 361.42 582.33 P
3 F
-0.36 (.h) 491.51 582.33 P
1 F
-0.35 (\051 \336les.) 501.14 582.33 P
-0.16 (When using Goc, you can use this directive in standard) 180 569.33 P
3 F
-0.16 (.c) 435.84 569.33 P
1 F
-0.16 ( and) 444.18 569.33 P
3 F
-0.16 (.h) 466.83 569.33 P
1 F
-0.16 ( \336les; when) 476.46 569.33 P
(including) 180 556.33 T
3 F
(.goh) 226.11 556.33 T
1 F
( \336les in) 247.96 556.33 T
3 F
(.goc) 284.45 556.33 T
1 F
( \336les, though, you have to use the) 305.01 556.33 T
3 F
(@include) 462.44 556.33 T
1 F
(directive, which is Goc-speci\336c. It has the same syntax as) 180 543.33 T
3 F
(#include) 447.43 543.33 T
1 F
(.) 492.06 543.33 T
(An example of using) 180 523.33 T
3 F
(@include) 276.86 523.33 T
1 F
( comes from the Hello W) 323.22 523.33 T
(orld application,) 435.63 523.33 T
(which includes the) 180 510.33 T
3 F
(stdapp.goh) 269.26 510.33 T
1 F
( \336le. \050All) 326.49 510.33 T
1 9 Q
(GEOS) 368.72 510.33 T
1 10 Q
( applications will need to) 394.89 510.33 T
(include this \336le to compile properly; it must be) 180 497.33 T
3 F
(@include) 397.8 497.33 T
1 F
(d before any) 444.16 497.33 T
(standard C headers are) 180 484.33 T
3 F
(#include) 291.49 484.33 T
1 F
(d.\051 The line from Hello W) 336.12 484.33 T
(orld is) 452.61 484.33 T
5 F
(@include <stdapp.goh>) 216 468.33 T
1 F
-0.68 (The syntax of this directive, as stated above, is the same as for the) 180 447.33 P
1 9 Q
-0.62 (C) 480.13 447.33 P
1 10 Q
-0.68 ( directive) 486.63 447.33 P
3 F
(#include) 180 434.33 T
1 F
(. One exception is that the) 224.63 434.33 T
3 F
(@include) 348.91 434.33 T
1 F
( directive will include a \336le) 395.27 434.33 T
(just once, even if it is included by an included \336le\321there is no need to) 180 421.33 T
-0.58 (conditionally include a \336le \050checking \336rst to make sure it hasn\325) 180 408.33 P
-0.58 (t already been) 464.03 408.33 P
(included\051.) 180 395.33 T
-0.78 (If you will be including a Goc \336le in many different applications, or if it is very) 180 375.33 P
-0.5 (long and elaborate, it is a good idea to put the keyword) 180 362.33 P
3 F
-0.52 (@optimize) 430.15 362.33 P
1 F
-0.5 ( at the top) 482.8 362.33 P
(of the \336le. This instructs the Goc preprocessor to generate a special) 180 349.33 T
(stripped-down version of the \336le with a) 180 336.33 T
3 F
(.poh) 363.53 336.33 T
1 F
( suf\336x. The compiler will then) 385.94 336.33 T
-0.78 (automatically keep the) 180 323.33 P
3 F
-0.81 (.poh) 286.39 323.33 P
1 F
-0.78 ( \336le up to date, and use it in compilations instead) 308.8 323.33 P
(of the) 180 310.33 T
3 F
(.goh) 208.89 310.33 T
1 F
( \336le. The) 230.74 310.33 T
3 F
(.poh) 273.9 310.33 T
1 F
( \336le contains all the data of the) 296.31 310.33 T
3 F
(.goh) 442.64 310.33 T
1 F
( \336le, but is) 464.49 310.33 T
(somewhat faster to compile into an application; thus, by using the) 180 297.33 T
3 F
(@optimize) 180 284.33 T
1 F
( keyword, you incur a longer compilation whenever you make a) 232.65 284.33 T
(change to the) 180 271.33 T
3 F
(.goh) 244.82 271.33 T
1 F
( \336le, but a shorter compilation time when the) 266.67 271.33 T
3 F
(.goh) 478.37 271.33 T
1 F
( \336le is) 500.22 271.33 T
(unchanged since the last compilation. Y) 180 258.33 T
(ou may choose to leave the) 362.8 258.33 T
3 F
(@optimize) 180 245.33 T
1 F
( directive out while the header is being developed, then put it in) 232.65 245.33 T
(when the header is fairly stable.) 180 232.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "150" 10
%%Page: "151" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Goc and C) 487.99 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(151) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.2) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.2.2) 130.86 636 T
0 18 Q
(Conditional Code in Goc) 180 636 T
5 10 Q
(@if, @ifdef, @ifndef, @endif) 180 612.33 T
1 F
(Many) 180 592.33 T
1 9 Q
(C) 209.26 592.33 T
1 10 Q
( programs use the directives) 215.76 592.33 T
3 F
(#if) 349.28 592.33 T
1 F
(,) 362.61 592.33 T
3 F
(#ifdef) 368.17 592.33 T
1 F
(,) 397.8 592.33 T
3 F
(#ifndef) 403.36 592.33 T
1 F
(, and) 439.84 592.33 T
3 F
(#endif) 465.59 592.33 T
1 F
( to) 498.18 592.33 T
-0.3 (de\336ne conditional code\321code that should be compiled into the program only) 180 579.33 P
(if certain conditions are met. When working with standard) 180 566.33 T
1 9 Q
(C) 454.28 566.33 T
1 10 Q
( code in your) 460.78 566.33 T
1 9 Q
-0.12 (GEOS) 180 553.33 P
1 10 Q
-0.14 ( applications, you should still use these directives; when working with) 206.17 553.33 P
-0.3 (Goc code, however \050in) 180 540.33 P
3 F
-0.31 (.goh) 281.39 540.33 P
1 F
-0.3 ( and) 303.24 540.33 P
3 F
-0.31 (.goc) 325.61 540.33 P
1 F
-0.3 ( \336les\051, you should use the Goc directives) 346.17 540.33 P
3 F
(@if) 180 527.33 T
1 F
(,) 195.06 527.33 T
3 F
(@ifdef) 200.62 527.33 T
1 F
(,) 231.98 527.33 T
3 F
(@ifndef) 237.54 527.33 T
1 F
(, and) 275.75 527.33 T
3 F
(@endif) 301.5 527.33 T
1 F
(.) 335.82 527.33 T
(Goc conditionals are more limited than) 180 507.33 T
1 9 Q
(C) 362.8 507.33 T
1 10 Q
( conditionals. Conditional) 369.3 507.33 T
(expressions may be based on numbers, names of macros, and the Boolean) 180 494.33 T
(operators) 180 481.33 T
1 9 Q
(OR) 226.48 481.33 T
1 10 Q
( \050) 239.98 481.33 T
3 F
(||) 246.09 481.33 T
1 F
(\051 and) 258.21 481.33 T
1 9 Q
(AND) 284.51 481.33 T
1 10 Q
( \050) 305.35 481.33 T
3 F
(&&) 311.45 481.33 T
1 F
(\051. Some examples of Goc conditional) 328.49 481.33 T
(expressions are shown below:) 180 468.33 T
5 F
(@ifdef \050MyMacro\051) 216 452.33 T
(/* code compiled if MyMacro is defined */) 252 438.33 T
(@endif) 216 424.33 T
(@if 0) 216 407.33 T
(/* code that will not be compiled at all */) 252 393.33 T
(@endif) 216 379.33 T
(@if defined\050MyMacro\051 || MY_CONSTANT) 216 362.33 T
(/* code compiled if either MyMacro is) 252 348.33 T
( * defined or MY_CONSTANT is not zero */) 252 334.33 T
(@endif) 216 320.33 T
(@ifndef 0) 216 303.33 T
(/* code always compiled */) 252 289.33 T
(@endif) 216 275.33 T
0 14 Q
(5.2.3) 130.86 232 T
0 18 Q
(Macros in Goc) 180 232 T
5 10 Q
(@def) 180 208.33 T
(ine) 204 208.33 T
1 F
-0.2 (The) 180 188.33 P
1 9 Q
-0.18 (C) 200.36 188.33 P
1 10 Q
-0.2 ( programming language allows de\336nition and use of macros, and most) 206.86 188.33 P
(programmers use macros extensively) 180 175.33 T
(. Y) 350.37 175.33 T
(ou can use the) 361.86 175.33 T
3 F
(#de\336ne) 430.94 175.33 T
1 F
( directive in) 468.53 175.33 T
(standard) 180 162.33 T
1 9 Q
(C) 224.45 162.33 T
1 10 Q
( code in your) 230.95 162.33 T
1 9 Q
(GEOS) 292.43 162.33 T
1 10 Q
( programs to de\336ne macros that use only) 318.6 162.33 T
(standard) 180 149.33 T
1 9 Q
(C) 224.45 149.33 T
1 10 Q
( code.) 230.95 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "151" 11
%%Page: "152" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(152) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Similarly) 180 641.33 T
(, you can use the) 222.05 641.33 T
3 F
(@de\336ne) 302.06 641.33 T
1 F
( Goc directive to create macros in Goc.) 341.38 641.33 T
-0.83 (\050Macros must be de\336ned with) 180 628.33 P
3 F
-0.86 (@de\336ne) 315.28 628.33 P
1 F
-0.83 (; otherwise, the Goc processor will skip) 354.6 628.33 P
-0.35 (the) 180 615.33 P
3 F
-0.37 (#de\336ne) 197.43 615.33 P
1 F
-0.35 ( directive and process the macro as if it were standard code to be) 235.01 615.33 P
(processed normally) 180 602.33 T
(.\051) 267.96 602.33 T
(Macros in Goc have a somewhat different syntax than standard) 180 582.33 T
1 9 Q
(C) 476.51 582.33 T
1 10 Q
( macros) 483.01 582.33 T
(though they are very similar) 180 569.33 T
(. Some examples of simple Goc macros follow) 311.49 569.33 T
(below:) 180 556.33 T
5 F
(@define mlply\050val1,val2\051) 216 540.33 T
(val1 * val2) 396 540.33 T
(@define defChunk\050a\051) 216 526.33 T
(@chunk char a[] = \322text\323) 360 526.33 T
1 F
-0.81 (When using Goc macros in your code, you must preface them with the \322) 180 505.33 P
3 F
-0.84 (@) 498.49 505.33 P
1 F
-0.81 (\323 Goc) 505.96 505.33 P
(marker) 180 492.33 T
(, indicating to the processor that it is a macro. If you do not preface) 213.52 492.33 T
-0.36 (the macro with \322) 180 479.33 P
3 F
-0.37 (@) 255.4 479.33 P
1 F
-0.36 (\323, then Goc will pass over it and will not process it, leaving) 262.87 479.33 P
(it up to the) 180 466.33 T
1 9 Q
(C) 233.9 466.33 T
1 10 Q
( compiler\321which will likely give an error) 240.4 466.33 T
(. For example, using) 430.6 466.33 T
(the second macro de\336ned above \050defChunk\051, you could create a number of) 180 453.33 T
(chunks easily:) 180 440.33 T
5 F
(@defChunk\050firstText\051) 216 424.33 T
(@defChunk\050secondText\051) 216 410.33 T
(@defChunk\050thirdText\051) 216 396.33 T
1 F
(The above would equate to the following:) 180 375.33 T
5 F
(@chunk char[] firstText = \322text\323;) 216 359.33 T
(@chunk char[] secondText = \322text\323;) 216 345.33 T
(@chunk char[] thirdText = \322text\323;) 216 331.33 T
1 F
(Using \322defChunk\323 without the \322) 180 310.33 T
3 F
(@) 326.68 310.33 T
1 F
(\323 marker would most likely result in a) 334.15 310.33 T
(compilation error in the) 180 297.33 T
1 9 Q
(C) 292.78 297.33 T
1 10 Q
( compiler) 299.28 297.33 T
(.) 341.13 297.33 T
0 14 Q
(5.2.4) 130.86 255 T
0 18 Q
(Using Routine Pointers in Goc) 180 255 T
5 10 Q
(ProcCallFixedOrMovable_cdecl\050\051,) 180 231.33 T
(ProcCallFixedOrMovable_pascal\050\051) 180 218.33 T
1 F
-0.12 (Most) 180 198.33 P
1 9 Q
-0.11 (GEOS) 205.62 198.33 P
1 10 Q
-0.12 ( code is kept in movable resources. If you call a routine explicitly) 231.79 198.33 P
-0.85 (from source code the Goc preprocessor generates appropriate directives to see) 180 185.33 P
-0.76 (to it that the resource is loaded into memory when it is called. However) 180 172.33 P
-0.76 (, if you) 499.21 172.33 P
(call a routine with a routine-pointer) 180 159.33 T
(,) 345.57 159.33 T
1 9 Q
(GEOS) 351.13 159.33 T
1 10 Q
( cannot take these precautions.) 377.3 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "152" 12
%%Page: "153" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Goc and C) 487.99 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(153) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.2) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Accordingly) 180 641.33 T
(, when you are calling a routine with a pointer) 233.32 641.33 T
(, you must either) 446.87 641.33 T
(see to it that the resource is loaded, or use one of the two) 180 628.33 T
3 F
(ProcCallFixedOrMovable) 180 615.33 T
1 F
( routines to instruct the kernel to lock the) 312.22 615.33 T
(appropriate resource.) 180 602.33 T
(If you know the routine is in a resource which is locked or \336xed in memory) 180 582.33 T
(,) 522.79 582.33 T
(you can use the routine pointer exactly the way you would in standard C.) 180 569.33 T
(This is usually because the calling routine is in the same resource as the) 180 556.33 T
(routine or routines which may be called.) 180 543.33 T
(If you are not sure that the resource is loaded, you should call the routine) 180 523.33 T
(with either) 180 510.33 T
3 F
(ProcCallFixedOrMovable_cdecl\050\051) 234.08 510.33 T
1 F
( or) 406.13 510.33 T
3 F
-0.09 (ProcCallFixedOrMovable_pascal\050\051) 180 497.33 P
1 F
-0.09 (. Each of these routines is passed the) 357.97 497.33 P
(following arguments:) 180 484.33 T
2 F
(u) 180 464.33 T
1 F
(A pointer to the routine to be called) 198 464.33 T
2 F
(u) 180 445.33 T
1 F
(All the arguments passed to the routine, in exactly the order which the) 198 445.33 T
(routine expects.) 198 433.33 T
(Both routines return whatever the called routine returns.) 180 414.33 T
(If the routine to be called was de\336ned with standard C calling conventions) 180 394.33 T
(\050the default\051, you should use) 180 381.33 T
3 F
(ProcCallFixedOrMovable_cdecl\050\051) 314.08 381.33 T
1 F
(. If the) 486.13 381.33 T
(routine was declared with the keyword) 180 368.33 T
3 F
(_pascal) 362.61 368.33 T
1 F
(, it uses Pascal\325) 400.58 368.33 T
(s calling) 470.79 368.33 T
(conventions; you must then use the routine) 180 355.33 T
3 F
(ProcCallFixedOrMovable_pascal\050\051) 180 342.33 T
1 F
(. Most kernel and system-library) 357.97 342.33 T
(routines are declared with Pascal\325) 180 329.33 T
(s calling conventions.) 336.13 329.33 T
81 296.98 531 309 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 296.98 531 309 R
7 X
0 0 0 1 0 0 0 K
V
76.5 304.23 617.5 307.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 290.31 T
(5-) 147.13 290.31 T
(3 Using ProcCallFixedOrMovable_cdecl\050\051) 156.02 290.31 T
5 9 Q
(extern int) 81 275.98 T
(SomeRoutineCalledViaAPointer\050int anArg, int anotherArg, const char *someText\051;) 81 264.98 T
(int \050*funcPtr\051 \050int, int, const char *\051;) 81 246.98 T
(/* A function pointer */) 301 246.98 T
(funcPtr = SomeRoutineCalledViaAPointer;) 81 228.98 T
(/* We want to do) 81 210.98 T
( *) 81 199.98 T
(SomeRoutineCalledViaAPointer\0501, 2, "Franklin T. Poomm"\051;) 125 199.98 T
( * but we want to call it through the pointer, even though it\325s in another) 81 188.98 T
( * resource:) 81 177.98 T
( */) 81 166.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "153" 13
%%Page: "154" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(154) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(ProcCallFixedOrMovable_cdecl\050funcPtr,) 81 642 T
(/* The pointer to the routine */) 301 642 T
(1, 2, "Franklin T. Poomm"\051;) 256.5 631 T
81 606.98 531 619 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 606.98 531 619 R
7 X
0 0 0 1 0 0 0 K
V
76.5 614.23 617.5 617.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.3) 142.54 556.98 T
0 24 Q
(The GEOS Object System) 180 556.98 T
1 9 Q
(GEOS) 180 531.31 T
1 10 Q
( is almost entirely object-oriented. Its object system supports true) 206.17 531.31 T
(object-oriented principles such as encapsulation, inheritance, and message) 180 518.31 T
(dispatching through the kernel.) 180 505.31 T
-0.2 (The following section describes the class and object structures of) 180 485.31 P
1 9 Q
-0.18 (GEOS) 478 485.31 P
1 10 Q
-0.2 (, how) 504.17 485.31 P
-0.48 (to declare and de\336ne classes and objects, and how the messaging system and) 180 472.31 P
(the kernel\325) 180 459.31 T
(s message dispatcher work.) 229.08 459.31 T
0 14 Q
(5.3.1) 130.86 416.98 T
0 18 Q
(GEOS T) 180 416.98 T
(erminology) 246.69 416.98 T
1 10 Q
(Though you should be familiar with general object-oriented programming) 180 393.31 T
(terms, there are quite a few for which the meaning is slightly different in) 180 380.31 T
1 9 Q
(GEOS) 180 367.31 T
1 10 Q
(, and there are others which are entirely new to) 206.17 367.31 T
1 9 Q
(GEOS) 429.15 367.31 T
1 10 Q
(. This section is) 455.32 367.31 T
-0.32 (divided into four categories: General T) 180 354.31 P
-0.32 (erms, Class T) 355.28 354.31 P
-0.32 (erms, Object T) 416.88 354.31 P
-0.32 (erms, and) 482.93 354.31 P
(Messaging T) 180 341.31 T
(erms.) 237.79 341.31 T
0 14 Q
(5.3.1.1) 119.19 307.64 T
(General T) 180 307.64 T
(erms) 243.55 307.64 T
3 10 Q
(chunk) 180 285.31 T
1 F
(A chunk is a small section of memory located in a Local) 243 285.31 T
(Memory Heap. Object instance data is stored in a chunk, one) 243 273.31 T
-0.68 (chunk per object. Local Memory and chunks are described fully) 243 261.31 P
(in \322Local Memory) 243 249.31 T
(,\323 Chapter) 323.56 249.31 T
(16.) 373.75 249.31 T
3 F
(fptr) 180 230.31 T
1 F
-0.34 (An fptr is a \322far pointer\323\321a 32-bit pointer to a speci\336c location) 243 230.31 P
(of memory) 243 218.31 T
(. It is a standard) 290.59 218.31 T
1 9 Q
(C) 370.24 218.31 T
1 10 Q
( pointer) 376.74 218.31 T
(.) 412.11 218.31 T
3 F
(handle) 180 199.31 T
1 F
(A handle is a 16-bit index into a Handle T) 243 199.31 T
(able and is used to) 436.32 199.31 T
-0.83 (reference memory blocks. For more information, see \322Handles,\323) 243 187.31 P
(Chapter) 243 175.31 T
(14.) 283.74 175.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "154" 14
%%Page: "155" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(155) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(object block) 180 641.33 T
1 F
(An object block is a speci\336c type of Local Memory block that) 243 629.33 T
(contains object chunks.) 243 617.33 T
3 F
(optr) 180 598.33 T
1 F
-0.43 (An optr is a unique identi\336er for an object and is therefore also) 243 598.33 P
-0.38 (referred to as an \322Object Pointer) 243 586.33 P
-0.38 (.\323 An optr is used to locate and) 390.16 586.33 P
(access any object in the system, and because it is made up of) 243 574.33 T
-0.04 (handles and chunk handles, it will always stay the same even) 243 562.33 P
(when the object moves in memory) 243 550.33 T
(.) 398.38 550.33 T
3 F
(thread) 180 531.33 T
1 F
(A thread is a single executable entity that runs either) 243 531.33 T
(procedural code or one or more objects. If a thread is) 243 519.33 T
(\322event-driven,\323 it executes code for a given set of objects,) 243 507.33 T
-0.46 (receiving messages and dispatching them to the proper objects.) 243 495.33 P
0 14 Q
(5.3.1.2) 119.19 462.67 T
(Class T) 180 462.67 T
(erms) 228.76 462.67 T
3 10 Q
(class) 180 440.33 T
1 F
-0.4 (A class is the de\336nition of a set of instance data structures and) 243 440.33 P
-0.05 (the methods that work on those structures. An object is called) 243 428.33 P
(an \322instance\323 of its class.) 243 416.33 T
3 F
(class tree) 180 397.33 T
1 F
(A class tree represents the hierarchy of inheritance from) 243 397.33 T
(superclass to subclass. If a message is not handled by a given) 243 385.33 T
-0.62 (class, it will be automatically passed up the class tree until it is) 243 373.33 P
(handled or the root of the tree is reached, after which the) 243 361.33 T
(message is discarded.) 243 349.33 T
3 F
(inheritance) 180 330.33 T
1 F
(Inheritance is the term given to the way an object of a) 243 330.33 T
(particular class has all the same instance variables and) 243 318.33 T
(methods as an instance of the object\325) 243 306.33 T
(s superclasses.) 411.54 306.33 T
3 F
(initialize) 180 287.33 T
1 F
(Initialization of an object is when a master part \050or master) 243 287.33 T
(group\051 of the object\325) 243 275.33 T
(s instance data is \336lled out. This occurs) 333.18 275.33 T
-0.15 (whenever a class in the master group not yet initialized in the) 243 263.33 P
(object receives its \336rst message.) 243 251.33 T
3 F
(master) 180 232.33 T
1 F
(The term \322master\323 is used in several cases, all related. A) 243 232.33 T
(master class is generally considered the top class in a single) 243 220.33 T
-0.57 (class tree. Although the master class may have superclasses, it) 243 208.33 P
(provides a conceptual break and creation of a new subtree.) 243 196.33 T
3 F
(master group) 180 177.33 T
1 F
(The section of an object\325) 243 165.33 T
(s instance data belonging to a) 352.64 165.33 T
-0.54 (particular master class and all its subclasses is called a master) 243 153.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "155" 15
%%Page: "156" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(156) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.05 (group. A master group is initialized when the master class \050or) 243 641.33 P
(one of its subclasses\051 receives its \336rst message.) 243 629.33 T
3 F
(resolve) 180 610.33 T
1 F
(Resolution of a variant class occurs when the variant\325) 243 610.33 T
(s) 489.69 610.33 T
-0.78 (superclass is determined. Each instance of a variant class must) 243 598.33 P
(be resolved individually) 243 586.33 T
(.) 352.09 586.33 T
3 F
(subclass) 180 567.33 T
1 F
(The term \322subclass\323 is used to show relationships between) 243 567.33 T
(classes. A subclass is de\336ned on another class, from which it) 243 555.33 T
-0.15 (inherits instance data and methods. This other class is known) 243 543.33 P
(as a \322superclass,\323 below) 243 531.33 T
(.) 351.55 531.33 T
3 F
(superclass) 180 512.33 T
1 F
(The term \322superclass\323 is used to show relationships between) 243 512.33 T
(classes. A superclass passes on its instance data and methods) 243 500.33 T
(to all classes de\336ned as subclasses of it.) 243 488.33 T
3 F
(variant) 180 469.33 T
1 F
(A variant class may have different superclasses. However) 243 469.33 T
(, an) 508.94 469.33 T
-0.59 (instance of a variant class may have only one superclass at any) 243 457.33 P
-0.65 (given moment. The use of variant classes can provide much the) 243 445.33 P
(same functionality as the multiple inheritance found in some) 243 433.33 T
(other object systems.) 243 421.33 T
0 14 Q
(5.3.1.3) 119.19 388.67 T
(Object T) 180 388.67 T
(erms) 234.98 388.67 T
3 10 Q
(child) 180 366.33 T
1 F
-0.13 (A child object is one that sits below another object in an object) 243 366.33 P
-0.59 (tree. The terms child, parent, and sibling are used only to show) 243 354.33 P
(relationships between objects.) 243 342.33 T
3 F
(composite) 180 323.33 T
1 F
-0.76 (A composite object is one that can have children. The composite) 243 323.33 P
(has a \322composite link\323 \050an optr\051 to its \336rst child and a \322sibling) 243 311.33 T
-0.61 (link\323 to its next sibling. If it has no next sibling, the sibling link) 243 299.33 P
(instead points to the object\325) 243 287.33 T
(s parent object.) 369.13 287.33 T
3 F
(instance) 180 268.33 T
1 F
-0.07 (An instance is a particular manifestation of a class. This term) 243 268.33 P
(is almost always interchangeable with \322object,\323 though) 243 256.33 T
(sometimes it speci\336cally refers to the chunk containing the) 243 244.33 T
(object\325) 243 232.33 T
(s instance data rather than to the object as a whole.) 271.52 232.33 T
3 F
(link) 180 213.33 T
1 F
-0.39 (A link is typically an optr pointing to an object\325) 243 213.33 P
-0.39 (s next sibling in) 456.04 213.33 P
-0.62 (an object tree. It is also used more generally to refer to any optr) 243 201.33 P
(linking two objects in an object tree \050parent and child, or last) 243 189.33 T
(sibling and parent\051.) 243 177.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "156" 16
%%Page: "157" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(157) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(object) 180 641.33 T
1 F
(An object is a speci\336c manifestation of a class. T) 243 641.33 T
(ypically) 464.55 641.33 T
(, this) 499.37 641.33 T
(term is interchangeable with \322instance\323; however) 243 629.33 T
(, sometimes) 469.69 629.33 T
(the term \322object\323 refers to the combination of an object\325) 243 617.33 T
(s) 495.98 617.33 T
-0.29 (methods and instance data whereas the term \322instance\323 refers) 243 605.33 P
(to just the object\325) 243 593.33 T
(s instance data chunk.) 321.34 593.33 T
3 F
(object tree) 180 574.33 T
1 F
-0.38 (An object tree is a means of organizing objects into a hierarchy) 243 574.33 P
(for display or organizational purposes. Do not confuse it with) 243 562.33 T
(the \322class tree,\323 the structure which represents class) 243 550.33 T
(relationships. An object tree is made up of composite objects,) 243 538.33 T
(each of which may have children or be the child of another) 243 526.33 T
(object. The topmost object in the tree is called the \322root,\323 and) 243 514.33 T
(the bottommost objects are called the \322leaves\323 or \322nodes.\323) 243 502.33 T
(Non-composite objects may be placed in the tree as leaves but) 243 490.33 T
(may not have children.) 243 478.33 T
3 F
(parent) 180 459.33 T
1 F
(A parent object is one that has children in an object tree. The) 243 459.33 T
-0.14 (parent contains a composite link \050an optr\051 to its \336rst child and) 243 447.33 P
(is pointed to by its last child.) 243 435.33 T
3 F
(state \336le) 180 416.33 T
1 F
(A state \336le is a V) 243 416.33 T
(irtual Memory \336le used to store the state of) 321.47 416.33 T
(objects. T) 243 404.33 T
(ypically) 286.19 404.33 T
(, object blocks will be written to or extracted) 321.01 404.33 T
(from the state \336le. Generic) 243 392.33 T
1 9 Q
(UI) 369.49 392.33 T
1 10 Q
( objects have this functionality) 380.49 392.33 T
(built in automatically; other objects may manage their own) 243 380.33 T
(state saving by managing the state \336le.) 243 368.33 T
0 14 Q
(5.3.1.4) 119.19 335.67 T
(Messaging T) 180 335.67 T
(erms) 263.76 335.67 T
3 10 Q
(blocking) 180 313.33 T
1 F
(A thread \322blocks\323 when it must wait for resources or return) 243 313.33 T
(values from messages sent to objects in another thread.) 243 301.33 T
(Speci\336cally) 243 289.33 T
(, a thread blocks when one of its objects sends a) 294.3 289.33 T
(message to another thread with the \322call\323 command; if the) 243 277.33 T
(\322send\323 command is used, the thread will continue executing) 243 265.33 T
(normally) 243 253.33 T
(.) 283.56 253.33 T
3 F
(call) 180 234.33 T
1 F
(A message sent with the call command causes the calling) 243 234.33 T
-0.65 (thread to block until the message is handled by the recipient. If) 243 222.33 P
-0.11 (the recipient is in the calling thread, the code will be executed) 243 210.33 P
(immediately) 243 198.33 T
(.) 299.68 198.33 T
3 F
(dispatcher) 180 179.33 T
1 F
(The) 243 179.33 T
1 9 Q
(GEOS) 263.56 179.33 T
1 10 Q
( dispatcher is internal to the kernel and passes) 289.73 179.33 T
(messages on to their proper recipients. The dispatcher will) 243 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "157" 17
%%Page: "158" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(158) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(dynamically locate the proper object and method and will) 243 641.33 T
(invoke the method.) 243 629.33 T
3 F
(message) 180 610.33 T
1 F
(A message is a directive, query) 243 610.33 T
(, or other instruction sent from) 384.87 610.33 T
-0.46 (one object to another) 243 598.33 P
-0.46 (. Messages may take parameters and may) 337.17 598.33 P
(return information.) 243 586.33 T
3 F
(method) 180 567.33 T
1 F
-0.22 (A method, also called a \322message handler) 243 567.33 P
-0.22 (,\323 is the code invoked) 432.27 567.33 P
-0.34 (by a message. A method may do anything a normal function or) 243 555.33 P
-0.69 (procedure may do, including alter instance data. It is poor style) 243 543.33 P
-0.54 (and highly discouraged for one object\325) 243 531.33 P
-0.54 (s method to alter another) 413.48 531.33 P
(object\325) 243 519.33 T
(s instance data directly) 271.52 519.33 T
(.) 378.2 519.33 T
3 F
(send) 180 500.33 T
1 F
(A message sent with the send command will be placed in the) 243 500.33 T
(recipient\325) 243 488.33 T
(s event queue and will not cause the sender to block.) 285.59 488.33 T
(Messages that return information or pass pointers should) 243 476.33 T
(never be dispatched with the send command; use the call) 243 464.33 T
(command in those cases.) 243 452.33 T
0 14 Q
(5.3.2) 130.86 411 T
0 18 Q
(Object Structures) 180 411 T
1 10 Q
(Y) 180 387.33 T
(ou do not need to know what data structures are used to store objects and) 185.93 387.33 T
(classes; understanding them can make programming) 180 374.33 T
1 9 Q
(GEOS) 427.8 374.33 T
1 10 Q
( much easier) 453.97 374.33 T
(,) 512.12 374.33 T
(however) 180 361.33 T
(.) 217.96 361.33 T
(Each object is implemented in two parts: the instance data chunk and the) 180 341.33 T
(class de\336nition. Although both are integral parts of the object and they are) 180 328.33 T
(interconnected, they are stored in different places.) 180 315.33 T
-0.55 (An object\325) 180 295.33 P
-0.55 (s instance data is stored in an instance chunk. This instance chunk) 224.08 295.33 P
-0.57 (is sometimes referred to as the object itself, but this isn\325) 180 282.33 P
-0.57 (t quite accurate\321the) 432.32 282.33 P
-0.78 (instance chunk contains only the object\325) 180 269.33 P
-0.78 (s data along with a pointer to its class) 359.63 269.33 P
(structure. The structure of the instance chunk is given in section 5.3.2.1 on) 180 256.33 T
(page 159.) 180 243.33 T
-0.08 (An object\325) 180 223.33 P
-0.08 (s class structure contains all the code for the class. Since the class) 224.55 223.33 P
-0.75 (code may be accessed by many objects, the class de\336nition resides in a geode\325) 180 210.33 P
-0.75 (s) 524.34 210.33 P
(\336xed memory resource. Every class \050except the root,) 180 197.33 T
3 F
(MetaClass) 422.58 197.33 T
1 F
(\051 has a) 475.91 197.33 T
-0.01 (pointer to its superclass so it can inherit that class\325 methods and structures.) 180 184.33 P
(All objects of a given class use the same code\321the class\325 code\321for their) 180 164.33 T
-0.28 (functions. They dynamically access this code so the code blocks need to be in) 180 151.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "158" 18
%%Page: "159" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(159) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(memory only once, no matter how many objects are actively using them.) 180 641.33 T
(Additionally) 180 628.33 T
(, each class dynamically accesses its superclass\325 code, so any) 236.12 628.33 T
(class may be accessed by all the objects of the subclasses as well. Class) 180 615.33 T
(structures are shown in section 5.3.2.3 on page 164.) 180 602.33 T
0 14 Q
(5.3.2.1) 119.19 568.67 T
(Instance Chunk Structures) 180 568.67 T
1 10 Q
(Each object\325) 180 546.33 T
(s instance data is stored in a Local Memory chunk. Several) 234.63 546.33 T
(chunks are stored in one memory block, called a local memory heap. \050See) 180 533.33 T
-0.28 (\322Local Memory) 180 520.33 P
-0.28 (,\323 Chapter) 248.24 520.33 P
-0.28 (16.\051 This local memory heap, containing objects, is) 298.16 520.33 P
(known as an) 180 507.33 T
4 F
(object block) 241.13 507.33 T
1 F
(.) 293.91 507.33 T
-0.6 (Each object block has a special header type that distinguishes it from normal) 180 487.33 P
-0.34 (local memory heaps. After the header in the block is the chunk handle table:) 180 474.33 P
(a table containing offsets to each object in the block. Following the chunk) 180 461.33 T
(handle table are the objects.) 180 448.33 T
-0.15 (Each object is referenced by an object pointer) 180 428.33 P
-0.15 (, or optr) 386.88 428.33 P
-0.15 (. The optr contains two) 422.68 428.33 P
-0.26 (items: the global memory handle of the object block and the chunk handle of) 180 415.33 P
-0.1 (the object. Note that because the optr is made up of handles, an object must) 180 402.33 P
(be locked before its instance data can be accessed. The) 180 389.33 T
1 9 Q
(GEOS) 433.93 389.33 T
1 10 Q
( kernel takes) 460.1 389.33 T
-0.86 (care of this automatically when executing methods. For an illustration of how) 180 376.33 P
(an optr references an object\325) 180 363.33 T
(s instance chunk, see Figure) 309.44 363.33 T
(5-) 443.71 363.33 T
(1.) 452.6 363.33 T
-0.11 (Only the object\325) 180 343.33 P
-0.11 (s instance data is stored in the chunk pointed to by the optr;) 251.27 343.33 P
(the method table and code used by the object are stored in the class\325 data) 180 330.33 T
(structures, not the object\325) 180 317.33 T
(s. T) 297.22 317.33 T
(o reconcile this separation of code and data,) 313.16 317.33 T
(every object\325) 180 304.33 T
(s \336rst four bytes of instance data are a pointer to the object\325) 236.48 304.33 T
(s) 511.14 304.33 T
(class de\336nition. This pointer is traversed by the kernel automatically and) 180 291.33 T
(should not be altered or accessed by applications. A simpli\336ed diagram of) 180 278.33 T
(how this pointer allows the kernel to traverse class trees when handling) 180 265.33 T
(messages is shown in Figure) 180 252.33 T
(5-) 315.02 252.33 T
(2.) 323.91 252.33 T
-0.27 (Included in an object\325) 180 232.33 P
-0.27 (s instance chunk are certain \336elds generated and \336lled) 277.33 232.33 P
(by either Goc or the kernel. Following these \336elds is the object\325) 180 219.33 T
(s instance) 469.11 219.33 T
-0.78 (data, grouped by master part. It\325) 180 206.33 P
-0.78 (s unlikely you\325ll ever have to know the actual) 326.31 206.33 P
(structures used in the instance chunk because the kernel automatically) 180 193.33 T
(calculates the proper offsets to individual instance data \336elds. However) 180 180.33 T
(,) 509.47 180.33 T
-0.88 (understanding the underlying structures may help in understanding how the) 180 167.33 P
(object system of) 180 154.33 T
1 9 Q
(GEOS) 255.93 154.33 T
1 10 Q
( works.) 282.1 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "159" 19
%%Page: "160" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(160) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.85 (Instance data within an instance chunk is stored in \322master parts\323 or \322master) 180 400.33 P
(groups.\323 A master group is simply a number of instance data \336elds grouped) 180 387.33 T
(according to their appropriate master class levels. Master classes are) 180 374.33 T
(detailed in section 5.3.2.2 on page 163.) 180 361.33 T
-0.33 (A class designated as a master class resembles a normal class in all respects) 180 341.33 P
(save one: it determines how instance data is grouped in a chunk. Each) 180 328.33 T
-0.53 (master class is the head of a class subtree; all the classes below it in the class) 180 315.33 P
-0.58 (tree \050down to the next master class\051 are considered to be in that master class\325) 180 302.33 P
-0.27 (group. Instance data for all classes in the master group are lumped together) 180 289.33 P
-0.58 (in the instance chunk; each master group\325) 180 276.33 P
-0.58 (s instance data within the chunk is) 369.67 276.33 P
(accessed via a special offset stored within the chunk.) 180 263.33 T
(Sample instance chunks are shown in Figure) 180 243.33 T
(5-) 390.95 243.33 T
(3. The \336rst four bytes of an) 399.84 243.33 T
(object\325) 180 230.33 T
(s chunk contain a pointer to the object\325) 208.52 230.33 T
(s class structure. The class) 386.87 230.33 T
-0.04 (structure \050described in section 5.3.2.3 on page 164\051 resides in \336xed memory) 180 217.33 P
-0.04 (.) 525.48 217.33 P
(\050A variant-class object has a slightly different structure; this is detailed in) 180 204.33 T
(section 5.3.2.4 on page 171.\051) 180 191.33 T
(An object that has no master classes in its class ancestry \050unusual\051 has its) 180 171.33 T
-0.57 (instance data directly following its class pointer) 180 158.33 P
-0.57 (. Objects belonging to master) 396.79 158.33 P
81 144 531 648 C
180 414 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
422.85 446.38 491.01 619.22 R
3 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
411.13 450.79 422.67 447.49 411.13 444.18 411.13 447.49 4 Y
3 X
V
336.17 463.49 360.03 463.49 360.03 447.49 411.13 447.49 4 L
2 Z
N
410.58 477.68 422.11 474.38 410.58 471.07 410.58 474.38 4 Y
0 X
V
335.61 474.38 410.58 474.38 2 L
N
502.92 550.37 491.39 553.68 502.92 556.99 502.92 553.68 4 Y
V
491.39 479.21 511.89 479.21 511.89 553.68 502.92 553.68 4 L
N
0 10 Q
(Figure) 181 600.46 T
(5-) 214.34 600.46 T
(1) 223.23 600.46 T
4 F
(An Object Pointer) 231.57 600.46 T
(The optr \050below\051 references the beginning of) 181 586.46 T
-0.8 (the object block through its global handle. The) 181 574.46 P
(chunk handle consists of an offset into the) 181 562.46 T
(chunk handle table, where an offset to the) 181 550.46 T
(object\325) 181 538.46 T
(s instance data is stored.) 208.78 538.46 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
280.86 468.85 337.8 481.04 R
7 X
V
0 Z
0 X
N
4 8 Q
(chunk handle) 284.15 471.61 T
280.86 456.67 337.8 468.85 R
7 X
V
0 X
N
(handle) 296.59 459.42 T
4 12 Q
(optr) 276.67 484.69 T
(Object Block) 413.89 624.39 T
422.85 446.38 491.01 509.84 R
5 X
V
0 X
N
4 9 Q
(chunk handle) 428.6 502.45 T
422.85 474.12 491.01 485.04 R
7 X
V
0 X
N
422.85 553.39 491.01 583.23 R
7 X
V
0 X
N
4 8 Q
(offset to object) 431.23 477.14 T
4 10 Q
(Object) 424.11 575 T
4 9 Q
(table) 446.76 494.89 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "160" 20
%%Page: "161" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(161) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(classes or their subclasses, however) 180 641.33 T
(, are somewhat more complex. This) 344.27 641.33 T
(distinction can be mostly ignored by application and library programmers) 180 628.33 T
(\050with the exception of deciding which classes should be master classes and) 180 615.33 T
(which should not\051.) 180 602.33 T
(Each master part of the chunk is located by an offset inserted directly after) 180 582.33 T
(the object\325) 180 569.33 T
(s class pointer in the chunk. The position of the word containing) 226.3 569.33 T
-0.55 (this offset is then stored in the master class structure so the class can \336nd its) 180 556.33 P
(instance data later) 180 543.33 T
(. The combination of the class pointer and the various) 266.5 543.33 T
-0.43 (master offsets make up the object\325) 180 530.33 P
-0.43 (s \322base structure.\323 When a typical object is) 334.75 530.33 P
(instantiated, the base structure is all that is created.) 180 517.33 T
(Each master part is left unallocated \050for ef\336ciency\051 until it is \336rst accessed) 180 497.33 T
-0.54 (via a message sent to a class in the master group. When a class in the master) 180 484.33 P
(group receives its \336rst message, the entire master part of the chunk is) 180 471.33 T
-0.66 (allocated and initialized. This means that an object\325) 180 458.33 P
-0.66 (s chunk remains as small) 413.74 458.33 P
(as possible until it absolutely must grow larger) 180 445.33 T
(. Some classes even detect) 396.71 445.33 T
-0.82 (when a master part of the object will no longer be needed and actually remove) 180 432.33 P
-0.49 (\050shrink to zero\051 the unwanted instance data from the chunk \050) 180 419.33 P
3 F
-0.5 (GenClass) 457.72 419.33 P
1 F
-0.49 ( does) 506.05 419.33 P
81 144 531 648 C
180 144 531 401.53 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
443.8 346.94 455.34 343.64 443.8 340.33 443.8 343.64 4 Y
0 X
0 0 0 1 0 0 0 K
V
412.56 343.64 443.8 343.64 2 L
0.5 H
2 Z
N
454.73 315.02 505.84 343.91 R
0 Z
N
4 9 Q
(code for) 464.29 332.08 T
(method S1) 458.19 323.42 T
330.76 366.39 342.3 363.08 330.76 359.77 330.76 363.08 4 Y
V
387.58 270.3 394.78 270.3 394.78 324.23 327 324.23 327 363.08 330.76 363.08 6 L
2 Z
N
418.8 226.94 430.34 223.64 418.8 220.33 418.8 223.64 4 Y
V
383.67 245.3 414.37 245.3 414.37 223.64 418.8 223.64 4 L
N
419.91 262.5 431.45 259.19 419.91 255.88 419.91 259.19 4 Y
V
388.67 259.19 419.91 259.19 2 L
N
430.83 230.91 481.95 259.8 R
0 Z
N
(code for) 440.4 247.41 T
(method 1) 437.31 238.75 T
430.83 194.82 481.95 223.71 R
N
(code for) 440.4 211.88 T
(method 2) 437.31 203.22 T
303.8 283.05 315.34 279.75 303.8 276.44 303.8 279.75 4 Y
V
253.67 279.75 303.8 279.75 2 L
2 Z
N
4 12 Q
(Class T) 307.78 282.3 T
(able) 348.65 282.3 T
315.13 266.72 387.91 280 R
7 X
V
0 Z
0 X
N
4 8 Q
(ptr to superclass) 321.38 269.81 T
315.13 253.43 387.91 266.72 R
7 X
V
0 X
N
(ptr to method 1) 323.44 256.53 T
315.13 240.14 387.91 253.43 R
7 X
V
0 X
N
(ptr to method 2) 323.44 243.24 T
190.89 194.78 253.67 374.75 R
6 X
V
0 X
N
0 10 Q
(Figure) 181 175.39 T
(5-) 214.34 175.39 T
(2) 223.23 175.39 T
4 F
(Object and Class Interaction) 231.57 175.39 T
(The kernel uses pointers internal to classes to traverse the class tree to the) 181 161.39 T
(appropriate message handlers and data structures.) 181 149.39 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
190.89 274.75 253.67 326.97 R
7 X
V
0 X
N
4 12 Q
(Object Block) 182 381.14 T
4 8 Q
(Object\325) 208.28 318.64 T
(s) 232.73 318.64 T
190.89 274.75 253.67 285.86 R
7 X
V
0 X
N
(class ptr) 206.73 278.64 T
4 12 Q
(Class T) 335.78 365.97 T
(able) 376.65 365.97 T
343.13 350.2 413.69 363.11 R
7 X
V
0 X
N
4 8 Q
(ptr to superclass) 348.27 353.15 T
343.13 337.28 413.69 350.2 R
7 X
V
0 X
N
(ptr to method S1) 347.67 340.23 T
(low address) 255.36 195.79 T
(high address) 255.56 370.06 T
(Instance Data) 196.51 310.64 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "161" 21
%%Page: "162" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(162) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.12 (this by shrinking the V) 180 641.33 P
-0.12 (is master part to zero size when a gadget is taken off) 286.12 641.33 P
(the screen\051.) 180 628.33 T
-0.74 (Any object may have \322variable data\323 instance data \336elds; these are \336elds that) 180 608.33 P
-0.07 (may be added or removed dynamically to keep from having unused space in) 180 595.33 P
(the instance chunk. Generic) 180 582.33 T
1 9 Q
(UI) 312.41 582.33 T
1 10 Q
( hints are \322variable data\323 \050also called) 323.41 582.33 T
4 F
(vardata) 180 569.33 T
1 F
(\051\321if an object has the hint, it appears in its instance chunk, if the) 216.48 569.33 T
(object does not have the hint, the chunk does not have unused space in it.) 180 556.33 T
(V) 180 536.33 T
(ardata entries are stored all together at the end of the instance chunk,) 186.3 536.33 T
(regardless of their master groups. An object with two master groups and) 180 523.33 T
(three variable data \336elds, for example, would look like Figure) 180 510.33 T
(5-) 467.28 510.33 T
(4. V) 476.17 510.33 T
(ariable) 493.59 510.33 T
(data and its use are discussed in full in section 5.4.1.4 on page 195.) 180 497.33 T
81 144 531 648 C
180 144 531 425.32 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
380.69 314.19 369.15 317.5 380.69 320.81 380.69 317.5 4 Y
0 X
0 0 0 1 0 0 0 K
V
364.98 362.5 386.65 362.5 386.65 317.5 380.69 317.5 4 L
0.5 H
2 Z
N
254.37 317.76 369.13 333.17 R
7 X
V
0 Z
0 X
N
254.77 382.43 368.85 382.43 2 L
7 X
V
2 Z
4 X
N
254.28 371.14 369.27 393.22 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class Pointer) 284.12 384.41 T
4 12 Q
(Object with N) 240.4 409.12 T
254.28 340.3 369.27 355.72 R
7 X
V
0 X
N
4 8 Q
(Offset to 2nd master group) 262.82 344.33 T
254.28 355.72 369.27 371.14 R
7 X
V
0 X
N
(Offset to 1st master group) 264.52 359.75 T
(Offset to Nth master group) 262.82 321.78 T
370.9 339.48 368.06 338.19 371.07 336.77 368.73 335.61 4 L
7 X
V
2 Z
0 X
N
252.65 339.48 255.49 338.19 252.49 336.77 254.82 335.61 4 L
7 X
V
0 X
N
254.45 278.34 369.1 317.76 R
7 X
V
0 Z
0 X
N
(First master group\325) 265.34 305.38 T
(s data) 335.55 305.38 T
370.9 237.98 368.06 236.69 371.07 235.27 368.73 234.11 4 L
7 X
V
2 Z
0 X
N
252.65 237.98 255.49 236.69 252.49 235.27 254.82 234.11 4 L
7 X
V
0 X
N
254.45 238.84 369.1 278.26 R
7 X
V
0 Z
0 X
N
(Second master group\325) 261.19 265.88 T
(s data) 339.7 265.88 T
254.45 193.34 369.1 232.76 R
7 X
V
0 X
N
(Nth master group\325) 267.19 220.38 T
(s data) 333.7 220.38 T
4 12 Q
(master classes) 240.4 397.12 T
0 10 Q
(Figure) 181.83 176.16 T
(5-) 215.17 176.16 T
(3) 224.06 176.16 T
4 F
(Structures of an Object) 232.4 176.16 T
-0.55 (All objects have class pointers, though only those with master classes in their) 181.83 162.16 P
(ancestries have master groups and master group offsets.) 181.83 150.16 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
430.99 380.95 530.63 380.95 2 L
2 Z
4 X
N
430.56 371.14 531 393.22 R
0 Z
0 X
N
4 9 Q
(Class Pointer) 453.12 384.33 T
4 12 Q
(Object with no) 418.43 409.12 T
430.56 305.68 531 371.14 R
N
4 8 Q
(Instance data) 455.67 357.24 T
4 12 Q
(master classes) 418.43 397.12 T
4 8 Q
(high address) 204.47 192.63 T
(high address) 380.8 304.63 T
(low address) 208.32 391.37 T
(low address) 384.64 391.71 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "162" 22
%%Page: "163" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(163) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.3.2.2) 119.19 638.67 T
(Master Classes) 180 638.67 T
1 10 Q
(A master class provides a conceptual break between levels within a class) 180 616.33 T
(tree. Each master class is the head of a class subtree, and all its subclasses) 180 603.33 T
(are considered to be in its \322master group.\323 Figure) 180 590.33 T
(5-) 410.02 590.33 T
(5 shows a simpli\336ed) 418.91 590.33 T
(diagram of a class tree and its master groups.) 180 577.33 T
-0.31 (The purpose of making a class a master class is to separate its instance data) 180 557.33 P
(from that of its superclass. Each master group\325) 180 544.33 T
(s instance data is lumped) 395.75 544.33 T
(together in one section of the object\325) 180 531.33 T
(s instance chunk and is not initialized) 344.82 531.33 T
-0.24 (until a class in the master group is accessed. The initialization \050allocation of) 180 518.33 P
(extra memory within the instance chunk\051 occurs automatically) 180 505.33 T
(.) 469.09 505.33 T
-0.03 (As shown in Figure) 180 485.33 P
-0.03 (5-) 272.51 485.33 P
-0.03 (5 and Figure) 281.4 485.33 P
-0.03 (5-) 343.39 485.33 P
-0.03 (6, an object of) 352.28 485.33 P
3 F
-0.03 (RookClass) 418.48 485.33 P
1 F
-0.03 ( would have) 472.93 485.33 P
(an instance chunk with two master groups, one for the) 180 472.33 T
3 F
(PieceClass) 435.02 472.33 T
1 F
( master) 490.76 472.33 T
-0.64 (class and one for the) 180 459.33 P
3 F
-0.66 (GamePcClass) 274.41 459.33 P
1 F
-0.64 (master class. The \336rst of the two master) 347 459.33 P
(parts represents the instance data for) 180 446.33 T
3 F
(PieceClass) 357.23 446.33 T
1 F
( only; the second master) 412.97 446.33 T
(part represents the object\325) 180 433.33 T
(s instance data for all of) 300.37 433.33 T
3 F
(GamePcClass) 414.28 433.33 T
1 F
(,) 484.65 433.33 T
3 F
(ChessClass) 180 420.33 T
1 F
(, and) 237.78 420.33 T
3 F
(RookClass) 263.53 420.33 T
1 F
(.) 317.98 420.33 T
81 144 531 648 C
180 144 531 393.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
309.76 311.97 298.22 315.28 309.76 318.58 309.76 315.28 4 Y
0 X
0 0 0 1 0 0 0 K
V
294.06 337.5 315.72 337.5 315.72 315.28 309.76 315.28 4 L
0.5 H
2 Z
N
183.85 357.43 297.92 357.43 2 L
4 X
N
183.35 346.14 298.34 368.22 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class Pointer) 213.19 359.41 T
183.35 315.3 298.34 330.72 R
7 X
V
0 X
N
4 8 Q
(Offset to 2nd master group) 191.89 319.33 T
183.35 330.72 298.34 346.14 R
7 X
V
0 X
N
(Offset to 1st master group) 193.6 334.75 T
183.22 276.12 298.17 315.54 R
7 X
V
0 X
N
(First master group\325) 194.26 303.15 T
(s data) 264.47 303.15 T
183.22 236.62 298.17 276.04 R
7 X
V
0 X
N
(Second master group\325) 190.11 263.65 T
(s data) 268.61 263.65 T
183.22 197.23 298.17 236.65 R
7 X
V
0 X
N
(All vardata \336elds) 208.63 224.26 T
0 10 Q
(Figure) 181.83 175.61 T
(5-) 215.17 175.61 T
(4) 224.06 175.61 T
4 F
(An Object with V) 232.4 175.61 T
(ardata) 309.27 175.61 T
-0.19 (All vardata entries are stored at the end of the instance chunk, regardless of) 181.83 161.61 P
(the master group with which they are associated.) 181.83 149.61 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
309.76 272.24 298.22 275.55 309.76 278.86 309.76 275.55 4 Y
V
298.22 323.33 323.22 323.33 323.22 275.55 309.76 275.55 4 L
2 Z
N
81 144 531 648 C
36 72 576 720 C
81 486.94 171 622.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Advanced T) 81 569.45 T
(opic) 131.35 569.45 T
1 F
(Most programmers) 81 553.45 T
(will not have to) 81 542.45 T
(understand the) 81 531.45 T
(implementation of) 81 520.45 T
(master and variant) 81 509.45 T
(classes.) 81 498.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 598.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 598.33 A
0 0 0 1 0 0 0 K
81 578.21 121.5 618.71 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "163" 23
%%Page: "164" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(164) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The functionality of master classes is required to implement) 180 419.7 T
1 9 Q
(GEOS) 460.77 419.7 T
1 10 Q
( variant) 486.94 419.7 T
-0.33 (classes \050see section 5.3.2.4 on page 171\051. A variant class allows a single class) 180 406.7 P
(to have a version of \322multiple inheritance\323 in that it can have different) 180 393.7 T
(superclasses depending on the system context.) 180 380.7 T
0 14 Q
(5.3.2.3) 119.19 347.03 T
(Class Structure and Class T) 180 347.03 T
(rees) 365.18 347.03 T
1 10 Q
-0.75 (For the most part, you won\325) 180 324.7 P
-0.75 (t ever need or want to know the internal structure) 303.31 324.7 P
(of a class as implemented in memory) 180 311.7 T
(. The class structure is created and) 349.47 311.7 T
(partially \336lled by the Goc preprocessor and Glue linker; the remainder is) 180 298.7 T
(\336lled by the kernel when the class is loaded. It\325) 180 285.7 T
(s unlikely you will need to) 396.52 285.7 T
(know the actual class structures; you won\325) 180 272.7 T
(t ever have to manually build a) 375.21 272.7 T
(class unless your program dynamically creates it \050not a common procedure) 180 259.7 T
(for typical applications\051.) 180 246.7 T
(This section will describe how the class is implemented and how class trees) 180 226.7 T
(are structured and managed. However) 180 213.7 T
(, it will not discuss creating new) 357.41 213.7 T
(classes during execution.) 180 200.7 T
-0.3 (Classes are implemented with special data structures and code blocks. Each) 180 180.7 P
-0.38 (class is de\336ned within and exported by a particular geode; when the geode is) 180 167.7 P
(loaded the class de\336nition and its code are loaded into the geode\325) 180 154.7 T
(s \336xed) 477.82 154.7 T
81 144 531 648 C
180 433.36 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
323.38 612.17 215.6 589.39 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
323.38 612.17 431.16 589.39 2 L
N
323.38 612.17 323.38 588.28 2 L
N
323.38 575.17 254.49 552.39 2 L
N
323.38 575.17 392.27 552.39 2 L
N
323.38 575.17 323.38 551.28 2 L
N
389.89 539.62 352.66 516.28 2 L
N
427.11 516.28 389.89 539.62 2 L
N
0 10 Q
(Figure) 181.83 477.17 T
(5-) 215.17 477.17 T
(5) 224.06 477.17 T
4 F
(Master Classes and Master Groups) 232.4 477.17 T
(Each master class heads its own master group. The outlined classes are all) 181.83 463.17 T
(in the same master group.) 181.83 451.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
290.05 612.37 356.71 626.82 7.22 RR
7 X
V
0 Z
0 X
N
4 9 Q
(PieceClass) 301.56 617.39 T
226.34 539.17 286.23 553.62 R
7 X
V
0 X
N
(CheckerClass) 228.47 544.19 T
184.6 575.22 258.91 589.66 7.22 RR
7 X
V
0 X
N
(MapPcClass) 196.01 580.24 T
290.12 575.22 357.2 589.66 7.22 RR
7 X
V
0 X
N
(GamePcClass) 295.25 580.24 T
393.42 575.22 460.49 589.66 7.22 RR
7 X
V
0 X
N
(PartPcClass) 401.46 580.24 T
293.43 539.17 353.33 553.62 R
7 X
V
0 X
N
(StoneClass) 300.47 544.19 T
360.53 539.17 420.42 553.62 R
7 X
V
0 X
N
(ChessClass) 367.15 544.19 T
326.98 503.13 386.87 517.57 R
7 X
V
0 X
N
(KingClass) 335.6 508.15 T
394.07 503.13 453.97 517.57 R
7 X
V
0 X
N
(RookClass) 402.36 508.15 T
284.89 609.62 361.55 629.06 R
3 X
N
370.66 572.73 465.11 592.17 R
N
181.99 573.06 278.11 592.51 R
N
282.93 592.39 282.93 564.61 220.44 564.61 220.44 498.5 458.77 498.5 458.77 565.17 364.33 565.17
 364.33 592.39 8 Y
N
81 144 531 648 C
36 72 576 720 C
81 231.14 171 330.82 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Advanced T) 81 277.82 T
(opic) 131.35 277.82 T
1 F
(Most programmers) 81 261.82 T
(will never access the) 81 250.82 T
(class structures.) 81 239.82 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 306.7 G
4 H
0 Z
90 450 13.5 13.5 101.25 306.7 A
0 0 0 1 0 0 0 K
81 286.58 121.5 327.08 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "164" 24
%%Page: "165" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(165) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(memory) 180 641.33 T
(. All references to the class are then relocated by the kernel into) 216.48 641.33 T
(pointers. For example, if a class is de\336ned by a library) 180 628.33 T
(, that library\325) 429.12 628.33 T
(s \322core) 490.25 628.33 T
(block\323 \050the special information kept about it by the kernel\051 contains an) 180 615.33 T
-0.32 (absolute pointer to the class\325 de\336nition in a \336xed memory resource owned by) 180 602.33 P
(the library) 180 589.33 T
(. Any applications then using that class load the library) 228.34 589.33 T
(. The) 484.31 589.33 T
(kernel examines the library\325) 180 576.33 T
(s core block for the proper pointer and uses it) 310.02 576.33 T
(each time the application references that class.) 180 563.33 T
(Because of this, each class is loaded into memory just once; all objects that) 180 543.33 T
-0.65 (use the class use the same class structure and code. Each object has a pointer) 180 530.33 P
(in its instance chunk directly to the class structure; each class contains a) 180 517.33 T
-0.69 (pointer to its superclass\325 class structure. Using these pointers, the kernel can) 180 504.33 P
-0.47 (travel up an object\325) 180 491.33 P
-0.47 (s class tree to access any appropriate code. See Figure) 266.39 491.33 P
-0.47 (5-) 514.24 491.33 P
-0.47 (7) 523.13 491.33 P
(for a simpli\336ed illustration of how these pointers are followed by the kernel.) 180 478.33 T
(A class is a combination of data structure and code. The data structure) 180 458.33 T
(\050) 180 445.33 T
3 F
(ClassStruct) 183.33 445.33 T
1 F
(\051 contains information about the class, its superclass, its) 243.53 445.33 T
-0.39 (methods, and the structure and size of its instance data. The code consists of) 180 432.33 P
(methods \050message handlers\051. A diagram of the data structure is given in) 180 419.33 T
(Figure) 180 406.33 T
(5-) 213.52 406.33 T
(8; its components are detailed below.) 222.41 406.33 T
81 144 531 648 C
180 144 531 381.6 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
335.44 333.12 346.97 329.82 335.44 326.51 335.44 329.82 4 Y
0 X
0 0 0 1 0 0 0 K
V
296 329.82 335.44 329.82 2 L
0.5 H
2 Z
N
310.36 249.13 298.82 252.44 310.36 255.75 310.36 252.44 4 Y
V
293.16 294.66 322.61 294.66 322.61 252.44 310.36 252.44 4 L
N
309.2 284.35 297.66 287.66 309.2 290.97 309.2 287.66 4 Y
V
293.49 310.44 315.16 310.44 315.16 287.66 309.2 287.66 4 L
N
193.93 330.37 297.25 330.37 2 L
4 X
N
193.52 319.08 297.67 341.16 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class Pointer) 217.94 332.35 T
4 12 Q
(Instance of) 182.26 357.06 T
193.52 288.24 297.67 303.66 R
7 X
V
0 X
N
4 8 Q
(GamePcClass master offset) 195.91 292.27 T
193.52 303.66 297.67 319.08 R
7 X
V
0 X
N
(PieceClass master offset) 201.76 307.69 T
4 12 Q
(RookClass) 182.26 345.06 T
0 10 Q
(Figure) 181.83 177.44 T
(5-) 215.17 177.44 T
(6) 224.06 177.44 T
4 F
(A Sample Instance Chunk) 232.4 177.44 T
(The RookClass chunk has two master groups, each having an offset stored) 181.83 163.44 T
(after the class pointer) 181.83 151.44 T
(.) 279.39 151.44 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
193.52 252.83 297.67 287.69 R
7 X
V
0 X
N
4 8 Q
(PieceClass master group) 200.72 276.3 T
193.52 196.32 297.67 252.83 R
7 X
V
0 X
N
(GamePcClass master group) 194.87 243.66 T
(Instance Data) 219.82 268.3 T
(Instance Data) 219.82 235.66 T
(\050includes subclasses\051) 207.54 227.66 T
4 9 Q
(Pointer to RookClass\325) 352.92 330.93 T
(class structure in \336xed) 352.92 321.93 T
(memory) 352.92 312.93 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "165" 25
%%Page: "166" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(166) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Class_superClass) 180 362.18 T
1 10 Q
-0.05 (Every class has as its \336rst four bytes a pointer to its superclass. This points) 180 340.52 P
-0.1 (to the superclass\325) 180 327.52 P
3 F
-0.1 (ClassStruct) 262.31 327.52 P
1 F
-0.1 ( structure in all cases except two: The root of) 322.51 327.52 P
(any class tree has a null superclass pointer) 180 314.52 T
(, indicating that the root has no) 378.54 314.52 T
(superclass. V) 180 301.52 T
(ariant classes have the integer 1 \050one\051 always, indicating that) 240.19 301.52 T
(the superclass is determined in a special manner) 180 288.52 T
(. For more information on) 405.39 288.52 T
(variant classes, see section 5.3.2.4 on page 171.) 180 275.52 T
(Class trees are constructed when classes are de\336ned; a new class is created) 180 255.52 T
(as the subclass of some existing class, and its) 180 242.52 T
4 F
(Class_superClass) 391.71 242.52 T
1 F
( pointer is) 472.22 242.52 T
(automatically set to point to the superclass. There is no need to point down) 180 229.52 T
(the tree; messages are always passed to superclasses and never to) 180 216.52 T
(subclasses. An example of the use of) 180 203.52 T
4 F
(Class_superClass) 350.02 203.52 T
1 F
( is shown in) 430.53 203.52 T
(Figure) 180 190.52 T
(5-) 213.52 190.52 T
(7.) 222.41 190.52 T
81 144 531 648 C
180 382.18 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
485.8 492.51 497.47 492.51 497.47 514.2 386.91 514.2 4 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
188.15 554.82 199.69 551.51 188.15 548.2 188.15 551.51 4 Y
V
265.24 492.07 274.69 492.07 274.69 516.65 181.91 516.65 181.91 551.51 188.15 551.51 6 L
N
360.37 554.26 371.91 550.95 360.37 547.65 360.37 550.95 4 Y
V
389.13 492.07 395.24 492.07 395.24 514.2 344.13 514.2 344.13 550.95 360.37 550.95 6 L
N
0 10 Q
(Figure) 181 439.33 T
(5-) 214.34 439.33 T
(7) 223.23 439.33 T
4 F
(A Class T) 231.57 439.33 T
(ree) 275.3 439.33 T
(It is simple to \336nd the root of any class tree by following Class_superClass) 181 425.33 T
-0.48 (links. This is how inheritance is implemented for methods; if a class does not) 181 413.33 P
(recognize a message, the kernel looks in the superclass.) 181 401.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
4 9 Q
(ClassStruct) 371.33 558.94 T
(ClassStruct\321root) 277.06 621.16 T
291.63 609.99 347.74 619.42 R
7 X
V
0 Z
0 X
N
4 8 Q
(Null) 311.32 611.52 T
291.63 588.31 347.74 609.99 R
7 X
V
0 X
N
(class data) 301.17 598.01 T
371.33 546.44 438.78 556.38 R
7 X
V
0 X
N
(Class_superClass) 372.85 549.28 T
371.33 523.6 438.78 546.44 R
7 X
V
0 X
N
(class data) 386.54 533.93 T
4 9 Q
(ClassStruct) 199.6 558.94 T
199.6 546.44 267.05 556.38 R
7 X
V
0 X
N
4 8 Q
(Class_superClass) 201.12 549.28 T
199.6 523.6 267.05 546.44 R
7 X
V
0 X
N
(class data) 214.82 533.93 T
4 9 Q
(ClassStruct) 199.6 499.83 T
199.6 487.33 267.05 497.27 R
7 X
V
0 X
N
4 8 Q
(Class_superClass) 201.12 490.17 T
199.6 464.49 267.05 487.33 R
7 X
V
0 X
N
(class data) 214.82 474.82 T
4 9 Q
(ClassStruct) 322.05 499.83 T
322.05 487.33 389.5 497.27 R
7 X
V
0 X
N
4 8 Q
(Class_superClass) 323.57 490.17 T
322.05 464.49 389.5 487.33 R
7 X
V
0 X
N
(class data) 337.26 474.82 T
4 9 Q
(ClassStruct) 420.61 499.83 T
420.61 487.33 488.06 497.27 R
7 X
V
0 X
N
4 8 Q
(Class_superClass) 422.13 490.17 T
420.61 464.49 488.06 487.33 R
7 X
V
0 X
N
(class data) 435.82 474.82 T
280.58 617.04 292.11 613.73 280.58 610.42 280.58 613.73 4 Y
V
265.45 550.95 273.78 550.95 273.78 613.73 280.58 613.73 4 L
2 Z
N
437.11 550.95 447.67 550.95 447.67 572.62 274.33 572.62 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "166" 26
%%Page: "167" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(167) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Class_masterOffset) 180 640 T
4 10 Q
(Class_masterOffset) 180 618.33 T
1 F
( stores the offset indicating how far into the instance) 268.48 618.33 T
(chunk the object\325) 180 605.33 T
(s offset to this class\325 master part is. Figure) 257.78 605.33 T
(5-) 457.07 605.33 T
(9 shows how) 465.96 605.33 T
-0.01 (this \336eld allows a class to locate the appropriate master part. Note that use) 180 592.33 P
-0.09 (of this offset is entirely internal; individual classes do not have to \336gure out) 180 579.33 P
(where their instance data is within the chunk \050they may) 180 566.33 T
(, however) 439.66 566.33 T
(, have to) 483.18 566.33 T
(know what master level each class is\051.) 180 553.33 T
(The master offset is used primarily because an object can have some of its) 180 533.33 T
(master parts initialized and others uninitialized. If only one master part of) 180 520.33 T
81 144 531 648 C
180 144 531 506.23 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
197.2 371.23 395.2 380.23 R
7 X
0 0 0 1 0 0 0 K
V
192.36 288.41 400.05 288.41 2 L
V
0.5 H
2 Z
4 X
N
192.96 313.9 399.44 313.9 2 L
7 X
V
4 X
N
296.2 244.17 296.2 474.21 2 L
7 X
V
5 X
N
0 10 Q
0 X
(Figure) 181 202 T
(5-) 214.34 202 T
(8) 223.23 202 T
4 F
(The ClassStruct Structure) 231.57 202 T
(This structure has two basic parts: The class information and the method) 181 188 T
-0.42 (table. The class information has eight \336elds in eight words; the method table) 181 176 P
(varies in size and consists of a message number table followed by a table of) 181 164 T
(pointers to the actual method code.) 181 152 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
192.41 448.92 400 474.41 R
0 Z
N
4 9 Q
(Class_superClass) 259.97 458.19 T
4 10 Q
(ClassStruct) 182 480.29 T
192.41 423.07 400 435.99 R
N
4 8 Q
(Class_methodCount) 259.32 426.1 T
192.41 410.15 400 423.07 R
N
(Class_instanceSize) 261.25 413.18 T
192.41 397.23 400 410.15 R
N
(Class_vdRelocT) 259.69 400.26 T
(able) 317.45 400.26 T
(Class_relocT) 265.4 387.34 T
(able) 311.75 387.34 T
192.41 384.31 400 397.23 R
N
(Class_\337ags) 200.67 374.34 T
192.41 435.99 400 448.92 R
N
(Class_masterOffset) 260.81 439.02 T
(Class_masterMessages) 302.71 374.26 T
(Class_methodT) 229.7 361.5 T
(able \050\336rst message #\051) 285.98 361.5 T
192.29 358.47 400.11 371.39 R
N
(second message #) 264.43 348.58 T
192.29 345.55 400.11 358.47 R
N
(Nth message number) 257.54 329.68 T
192.29 326.65 400.11 339.57 R
N
403.21 344.34 398.08 343.26 403.52 342.07 399.29 341.1 4 L
2 Z
N
189.19 344.02 194.32 342.94 188.89 341.75 193.11 340.78 4 L
N
192.44 301.16 399.96 326.65 R
0 Z
N
(offset into code block for \336rst method) 229.03 316.49 T
(location of \336rst method\325) 231.7 305.6 T
(s code block) 317.61 305.6 T
192.44 275.66 399.96 301.16 R
N
(offset into code block for second method) 224.22 291 T
(location of second method\325) 226.88 280.1 T
(s code block) 322.42 280.1 T
403.21 274.46 398.08 273.38 403.52 272.19 399.29 271.22 4 L
2 Z
N
189.19 274.13 194.32 273.05 188.89 271.86 193.11 270.89 4 L
N
192.96 256.94 399.44 256.94 2 L
4 X
N
192.44 244.19 399.96 269.69 R
0 Z
0 X
N
(offset into code block for Nth method) 229.32 259.53 T
(location of Nth method\325) 231.99 248.63 T
(s code block) 317.32 248.63 T
192.46 371.55 399.94 384.47 R
N
296.2 384.35 296.2 371.77 2 L
2 Z
N
192.44 219.05 399.96 244.55 R
0 Z
N
(Special information for methods coded) 225.41 233.33 T
(in C\321three bytes for each method) 234.59 225.33 T
(low address) 405.74 471.39 T
(high address) 405.74 218.39 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "167" 27
%%Page: "168" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(168) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.41 (the object had been initialized, the location of the instance data in the chunk) 180 641.33 P
(may be different than if all master parts had been initialized.) 180 628.33 T
0 12 Q
(Class_methodCount) 180 602 T
4 10 Q
(Class_methodCount) 180 580.33 T
1 F
( stores the total number of methods referenced in the) 272.2 580.33 T
-0.58 (class\325 method table. This is the total number of methods de\336ned for this class) 180 567.33 P
-0.48 (only; other methods de\336ned in other classes \050even in the same master group\051) 180 554.33 P
(are stored in the method tables of those classes.) 180 541.33 T
0 12 Q
(Class_instanceSize) 180 515 T
4 10 Q
(Class_instanceSize) 180 493.33 T
1 F
( holds the number of bytes to be allocated whenever an) 267.37 493.33 T
-0.17 (object of this class is instantiated. If the class is a master class or a subclass) 180 480.33 P
-0.64 (of a master class, this is the size of the master part. If the class has no master) 180 467.33 P
(class above it, this is the number of bytes to allocate for the entire object) 180 454.33 T
(\050including superclass pointer\051.) 180 441.33 T
0 12 Q
(Class_vdRelocT) 180 415 T
(able) 271.81 415 T
4 10 Q
(Class_vdRelocT) 180 393.33 T
(able) 252.2 393.33 T
1 F
( is a near pointer \05016 bit offset\051 to the variable-data) 271.27 393.33 T
(relocation information. The relocation information contains the type of) 180 380.33 T
(relocation to be done for each data type. There is one entry in the variable) 180 367.33 T
81 144 531 648 C
180 144 531 353.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
286 276.81 274.47 280.12 286 283.42 286 280.12 4 Y
2 X
0 0 0 1 0 0 0 K
V
270.45 301.56 293.78 301.56 293.78 280.12 286 280.12 4 L
0.5 H
2 Z
N
282.73 243.62 271.2 246.93 282.73 250.24 282.73 246.93 4 Y
V
269.89 286.75 300.45 286.75 300.45 246.93 282.73 246.93 4 L
N
320.65 326.11 332.5 324.23 321.45 319.55 321.05 322.83 4 Y
V
271.56 316.78 321.05 322.83 2 L
N
0 10 Q
0 X
(Figure) 181.83 182.01 T
(5-) 215.17 182.01 T
(9) 224.06 182.01 T
4 F
(Class_masterOffset) 232.4 182.01 T
-0.02 (The instance chunk holds an offset to the master group\325) 181.83 168.01 P
-0.02 (s instance data; this) 433.78 168.01 P
(offset is referenced by the class\325 Class_masterOffset \336eld.) 181.83 156.01 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
199.46 309.52 273.35 324.26 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class Pointer) 208.74 313.8 T
199.46 294.77 273.35 309.52 R
7 X
V
0 X
N
(10h) 228.65 299.06 T
199.46 280.03 273.35 294.77 R
7 X
V
0 X
N
(32h) 228.65 284.31 T
199.46 247.14 273.35 280.03 R
7 X
V
0 X
N
(Instance data for) 201.16 269.28 T
199.46 201.21 273.35 247.14 R
7 X
V
0 X
N
(Instance data for) 201.16 235.49 T
(master part #1) 205.99 260.09 T
(master part #2) 205.99 226.3 T
402.65 324.06 332.65 324.06 332.65 282.39 337.2 287.95 348.56 281.28 358.11 289.06 371.74 281.28
 375.83 285.73 384.01 280.17 394.47 290.17 402.65 283.51 402.65 283.51 402.65 288.51 13 Y
7 X
V
0 X
N
332.88 309.62 402.42 309.62 2 L
7 X
V
2 Z
0 X
N
332.88 296.06 402.42 296.06 2 L
7 X
V
0 X
N
(superclass ptr) 338.83 315.17 T
(6h) 362.4 300.17 T
4 8 Q
(Class_superClass) 405.11 312.95 T
(Class_masterOffset) 405.11 299.62 T
(00h) 182.66 318.24 T
(04h) 182.66 300.88 T
(06h) 182.66 285.05 T
(10h) 182.66 273.82 T
(32h) 182.66 238.59 T
4 9 Q
(The object\325) 376 260.12 T
(s class pointer points to) 419.17 260.12 T
(the lowest class in the last master) 376 251.12 T
(group; therefore, the class\325 master) 376 242.12 T
(offset \336eld holds the offset of the) 376 233.12 T
(offset of the last master part.) 376 224.12 T
4 10 Q
(Instance Chunk) 200.24 328.56 T
(ClassStruct) 331.63 328.06 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "168" 28
%%Page: "169" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(169) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(data relocation table for each relocatable \336eld in each particular) 180 641.33 T
-0.06 (variable-data type. V) 180 628.33 P
-0.06 (ariable data \050also called) 276.39 628.33 P
4 F
-0.06 (vardata) 389.14 628.33 P
1 F
-0.06 (\051 is described in full in) 425.62 628.33 P
(\322De\336ning and W) 180 615.33 T
(orking W) 255.75 615.33 T
(ith V) 297.97 615.33 T
(ariable Data Fields\323 on page 195.) 320.2 615.33 T
0 12 Q
(Class_relocT) 180 589 T
(able) 253.81 589 T
4 10 Q
-0.58 (Class_relocT) 180 567.33 P
-0.58 (able) 237.93 567.33 P
1 F
-0.58 ( is a near pointer \05016 bit offset\051 to the relocation information) 257 567.33 P
(for the non-variable data instance \336elds of the class. The relocation) 180 554.33 T
-0.69 (information contains the type of relocation done for each relocatable instance) 180 541.33 P
(\336eld \050other than variable-data entries\051. A relocatable instance \336eld is one) 180 528.33 T
-0.32 (which must be updated when the object is loaded\321pointers, offsets, etc. The) 180 515.33 P
(entry in the relocation table is de\336ned with the) 180 502.33 T
3 F
(@reloc) 400.4 502.33 T
1 F
( keyword, described) 433.99 502.33 T
(on page 202.) 180 489.33 T
0 12 Q
(Class_\337ags) 180 463 T
4 10 Q
(Class_\337ags) 180 441.33 T
1 F
( contains seven \337ags \050shown below\051 that determine the) 231.83 441.33 T
(characteristics of the class. Declarers for these \337ags are used in the) 180 428.33 T
3 F
(@classdecl) 180 415.33 T
1 F
( declaration \050see section 5.4.1 on page 184\051.) 234.15 415.33 T
1 9 Q
(CLASSF_HAS_DEF) 180 395.33 T
(AUL) 263.84 395.33 T
(T) 283.18 395.33 T
1 10 Q
(This \337ag indicates that the class has a special default method) 243 383.33 T
(to handle unrecognized messages \050typically) 243 371.33 T
(, this handler) 441.71 371.33 T
-0.33 (simply passes the unrecognized message on to the superclass\051.) 243 359.33 P
-0.03 (This \337ag is not implemented in) 243 347.33 P
1 9 Q
-0.03 (C) 389.69 347.33 P
1 10 Q
-0.03 (. This \337ag is set by declaring) 396.19 347.33 P
(the class as) 243 335.33 T
4 F
(hasDefault) 298.94 335.33 T
1 F
(.) 349.48 335.33 T
1 9 Q
(CLASSF_MASTER_CLASS) 180 316.33 T
1 10 Q
-0 (This \337ag is set if the class is a master class. This \337ag is set by) 243 304.33 P
(declaring the class as) 243 292.33 T
4 F
(master) 344.68 292.33 T
1 F
(.) 375.41 292.33 T
1 9 Q
(CLASSF_V) 180 273.33 T
(ARIANT_CLASS) 226.34 273.33 T
1 10 Q
-0.11 (This \337ag is set if the class is a variant class. This \337ag is set by) 243 261.33 P
(declaring the class as) 243 249.33 T
4 F
(variant) 344.68 249.33 T
1 F
( \050all variants must also be) 378.75 249.33 T
(declared as masters\051.) 243 237.33 T
1 9 Q
(CLASSF_DISCARD_ON_SA) 180 218.33 T
(VE) 298.18 218.33 T
1 10 Q
(This \337ag indicates the instance data for the class can be) 243 206.33 T
(discarded when the object is saved. This \337ag applies only to) 243 194.33 T
-0.32 (master classes and will be heeded only when the master group) 243 182.33 P
-0.85 (is immediately above a variant-master group. This \337ag is set by) 243 170.33 P
(declaring the class) 243 158.33 T
4 F
(discardOnSave) 331.71 158.33 T
1 F
(.) 402.25 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "169" 29
%%Page: "170" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(170) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(CLASSF_NEVER_SA) 180 641.33 T
(VED) 269.84 641.33 T
1 10 Q
(This \337ag indicates objects of this class are never saved to a) 243 629.33 T
(state \336le or loaded in from a resource. Goc will not build a) 243 617.33 T
-0.17 (relocation table for a class with this \337ag set. This \337ag is set by) 243 605.33 P
(declaring the class) 243 593.33 T
4 F
(neverSaved) 331.71 593.33 T
1 F
(.) 384.48 593.33 T
1 9 Q
(CLASSF_HAS_RELOC) 180 574.33 T
1 10 Q
(This \337ag indicates that the class has a special routine for) 243 562.33 T
(relocating and unrelocating objects of the class when they are) 243 550.33 T
-0.2 (loaded from or written to disk. This \337ag is set by declaring the) 243 538.33 P
(class) 243 526.33 T
4 F
(hasReloc) 268.19 526.33 T
1 F
(.) 309.1 526.33 T
1 9 Q
(CLASSF_C_HANDLERS) 180 507.33 T
1 10 Q
(This \337ag indicates the class\325 methods are written in) 243 495.33 T
1 9 Q
(C) 484.52 495.33 T
1 10 Q
( rather) 491.02 495.33 T
(than in assembly) 243 483.33 T
(. This \337ag is set by the compiler and should) 321.17 483.33 T
(not be set by applications.) 243 471.33 T
0 12 Q
(Class_masterMessages) 180 446 T
4 10 Q
(Class_masterMessages) 180 424.33 T
1 F
( contains a number of \337ags set by Goc indicating) 284.39 424.33 T
(whether this class has methods for messages de\336ned within a given master) 180 411.33 T
(level. It is used to optimize the search for a method to handle a message.) 180 398.33 T
(These \337ags are internal and should not be used by programmers.) 180 385.33 T
0 12 Q
(The Method T) 180 359 T
(able) 257.11 359 T
1 10 Q
-0.51 (Every class has a method table, a table that indicates the location of the code) 180 337.33 P
(to be executed when a certain message is received. The method table is in) 180 324.33 T
-0.68 (three parts and begins at the byte labelled) 180 311.33 P
4 F
-0.68 (Class_methodT) 373.34 311.33 P
-0.68 (able) 443.69 311.33 P
1 F
-0.68 ( \050this is simply) 462.76 311.33 P
(a label, not a speci\336c data \336eld\051.) 180 298.33 T
(The \336rst part of the method table is a list of messages the class can handle.) 180 278.33 T
(Each entry in this list is two bytes and contains the message number of a) 180 265.33 T
(message handled by the class.) 180 252.33 T
(The second part of the method table is a list of pointers to methods. Each) 180 232.33 T
-0.24 (entry in this list is a pointer \050four bytes\051 which points to a speci\336c routine in) 180 219.33 P
-0.33 (a code block. If the code is in a \336xed block, the pointer will be a far pointer; if) 180 206.33 P
-0.77 (the code is in a moveable or discardable block, the pointer will be a far pointer) 180 193.33 P
-0.38 (containing a) 180 180.33 P
4 F
-0.38 (virtual segment) 239.25 180.33 P
1 F
-0.38 (. \050A virtual segment, something you do not need) 310.52 180.33 P
(to know about, is a handle shifted right four bits with the top four bits set.) 180 167.33 T
(Since this represents an illegal segment address,) 180 154.33 T
1 9 Q
(GEOS) 408.73 154.33 T
1 10 Q
( recognizes it as a) 434.9 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "170" 30
%%Page: "171" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(171) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(virtual segment and will take the necessary actions to lock the block into) 180 641.33 T
-0.11 (memory before access and unlock it after access. Manipulation of the bits in) 180 628.33 P
(the virtual segment is completely internal to) 180 615.33 T
1 9 Q
(GEOS) 388.73 615.33 T
1 10 Q
(.\051) 414.9 615.33 T
(The kernel searches the message list until it comes across the appropriate) 180 595.33 T
-0.19 (message number and notes the message\325) 180 582.33 P
-0.19 (s position in the table. It then looks) 365.96 582.33 P
(at the corresponding position in the pointer list. If the pointer there is a) 180 569.33 T
-0.69 (virtual segment and offset, it will load the appropriate code block, lock it, and) 180 556.33 P
(execute the code. If the pointer points to \336xed memory) 180 543.33 T
(, the code will be) 429.63 543.33 T
-0.03 (executed immediately) 180 530.33 P
-0.03 (. \050If the message number is not found in the table, the) 279.98 530.33 P
(kernel will either execute the class\325 default handler or pass the message on) 180 517.33 T
(to the class\325 superclass.\051) 180 504.33 T
0 14 Q
(5.3.2.4) 119.19 470.67 T
(V) 180 470.67 T
(ariant Classes) 188.57 470.67 T
1 10 Q
(A variant class is one which has no set superclass. The variant\325) 180 448.33 T
(s superclass) 471.34 448.33 T
(is determined at run-time based on context and other criteria. Note that) 180 435.33 T
4 F
(objects) 180 422.33 T
1 F
( may not be variant\321only classes may be variant. An object always) 210.55 422.33 T
-0.26 (has a speci\336c class to which it belongs, and its class pointer) 180 409.33 P
4 F
-0.26 (always) 453.99 409.33 P
1 F
-0.26 ( points to) 486.02 409.33 P
-0.34 (that class\325) 180 396.33 P
3 F
-0.34 (ClassStruct) 228.79 396.33 P
1 F
-0.34 ( structure. In addition, every variant class) 288.99 396.33 P
4 F
-0.34 (must) 484.81 396.33 P
1 F
-0.34 ( also) 507.77 396.33 P
(be a master class.) 180 383.33 T
-0.4 (A variant class, however) 180 363.33 P
-0.4 (, may have different superclasses at different times.) 291.59 363.33 P
(This functionality provides a form of \322multiple inheritance\323: the class may) 180 350.33 T
-0.01 (inherit the instance data and functions of different classes depending on its) 180 337.33 P
-0.77 (attributes and desired features. Note, however) 180 324.33 P
-0.77 (, that a variant class may have) 390.8 324.33 P
(only one superclass at any given moment.) 180 311.33 T
(The most visible example of a variant class is) 180 291.33 T
3 F
(GenClass) 392.09 291.33 T
1 F
( and how a generic) 440.42 291.33 T
(object is resolved into its speci\336c) 180 278.33 T
1 9 Q
(UI) 332.97 278.33 T
1 10 Q
(\325) 343.97 278.33 T
(s appropriate representation. Each) 345.64 278.33 T
(generic object \050for example, a GenT) 180 265.33 T
(rigger\051, is a subclass of the master class) 342.35 265.33 T
3 F
(GenClass) 180 252.33 T
1 F
(. All the instance data belonging to) 228.33 252.33 T
3 F
(GenT) 392.44 252.33 T
(riggerClass) 419.96 252.33 T
1 F
( and) 479.41 252.33 T
3 F
-0.33 (GenClass) 180 239.33 P
1 F
-0.32 (, therefore, is stored in the Gen master part of the instance chunk.) 228.33 239.33 P
3 F
(GenClass) 180 219.33 T
1 F
(, however) 228.33 219.33 T
(, is a variant class, meaning that it does not know its) 271.85 219.33 T
-0.41 (superclass when the object is instantiated. Each generic object\325) 180 206.33 P
-0.41 (s class will be) 466.71 206.33 P
-0.46 (linked directly to another class provided by the speci\336c) 180 193.33 P
1 9 Q
-0.42 (UI) 432.13 193.33 P
1 10 Q
-0.46 ( in use: the speci\336c) 443.13 193.33 P
1 9 Q
(UI) 180 180.33 T
1 10 Q
(\325) 191 180.33 T
(s class provides the visual representation while the generic) 192.67 180.33 T
1 9 Q
(UI) 468.43 180.33 T
1 10 Q
( class) 479.43 180.33 T
(provides the object\325) 180 167.33 T
(s functionality) 268.15 167.33 T
(. In this way) 333.71 167.33 T
(, the object can actually) 390.39 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "171" 31
%%Page: "172" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(172) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(perform many of its generic functions without having a visual) 180 641.33 T
(representation.) 180 628.33 T
(The resolution of the superclass comes when the generic object is displayed) 180 608.33 T
-0.63 (on the screen: the kernel sees that the object has no superclass and looks into) 180 595.33 P
(its instance data and class structure. The kernel then determines what the) 180 582.33 T
(appropriate speci\336c) 180 569.33 T
1 9 Q
(UI) 273.33 569.33 T
1 10 Q
( class will be for the object\325) 284.33 569.33 T
(s class and provides the) 407.5 569.33 T
-0.33 (superclass link necessary) 180 556.33 P
-0.33 (. It also then initializes the superclass\325 master part) 295.63 556.33 P
(of the object \050in this case, the master part belonging to) 180 543.33 T
3 F
(V) 434.29 543.33 T
(isClass) 441.44 543.33 T
1 F
(\051, updating) 477.55 543.33 T
(all the master part offsets in the instance chunk\325) 180 530.33 T
(s master offset \336elds.) 404.47 530.33 T
(Y) 180 510.33 T
(ou can see from the above discussion that) 185.93 510.33 T
3 F
(GenClass) 380.21 510.33 T
1 F
( must know at least) 428.54 510.33 T
(something about its potential superclasses. In fact, all variant classes must) 180 497.33 T
(know at least the topmost class of all its potential superclasses. The) 180 484.33 T
(de\336nition of) 180 471.33 T
3 F
(GenClass) 238.15 471.33 T
1 F
( is) 286.48 471.33 T
5 F
(@class GenClass, VisClass, master, variant;) 216 455.33 T
1 F
-0.32 (The) 180 434.33 P
3 F
-0.33 (@class) 200.24 434.33 P
1 F
-0.32 ( keyword declares the new class,) 232.9 434.33 P
3 F
-0.33 (GenClass) 383.99 434.33 P
1 F
-0.32 (.) 432.32 434.33 P
3 F
-0.33 (GenClass) 437.56 434.33 P
1 F
-0.32 ( is to be a) 485.89 434.33 P
-0.25 (variant class and therefore must also be a master class. All the superclasses) 180 421.33 P
(of) 180 408.33 T
3 F
(GenClass) 191.11 408.33 T
1 F
( will be related to) 239.44 408.33 T
3 F
(V) 322.8 408.33 T
(isClass) 329.95 408.33 T
1 F
(; this means that all speci\336c) 366.06 408.33 T
1 9 Q
(UI) 498.31 408.33 T
1 10 Q
(classes which may act as Gen\325) 180 395.33 T
(s superclass must be subclassed from) 317.99 395.33 T
3 F
(V) 180 382.33 T
(isClass) 187.15 382.33 T
1 F
(. \050Another way of looking at the de\336nition is that) 223.26 382.33 T
3 F
(GenClass) 451.63 382.33 T
1 F
( is an) 499.96 382.33 T
4 F
-0.51 (eventual) 180 369.33 P
1 F
-0.51 ( subclass of) 218.88 369.33 P
3 F
-0.53 (V) 272.73 369.33 P
-0.53 (isClass) 279.88 369.33 P
1 F
-0.51 (\321you have no way of knowing beforehand how) 315.99 369.33 P
(many class layers may be between the two, however) 180 356.33 T
(.\051) 419.86 356.33 T
(The variant must specify an eventual superclass so the kernel knows how) 180 336.33 T
-0.22 (many master offset \336elds it must allocate when an instance of the variant is) 180 323.33 P
(created. For example, a GenT) 180 310.33 T
(rigger has two master groups: that of) 316.07 310.33 T
3 F
(GenClass) 180 297.33 T
1 F
(, and that of) 228.33 297.33 T
3 F
(V) 287.42 297.33 T
(isClass) 294.57 297.33 T
1 F
(. Because the) 330.68 297.33 T
3 F
(GenClass) 394.76 297.33 T
1 F
( master group is) 443.09 297.33 T
-0.79 (necessarily below the) 180 284.33 P
3 F
-0.82 (V) 278.93 284.33 P
-0.82 (isClass) 286.08 284.33 P
1 F
-0.79 ( master group in the class hierarchy \050after the) 322.2 284.33 P
(superclass link has been resolved\051, the) 180 271.33 T
3 F
(GenClass) 360.76 271.33 T
1 F
( master offset in the) 409.09 271.33 T
-0.69 (instance chunk must be after the) 180 258.33 P
3 F
-0.71 (V) 331.44 258.33 P
-0.71 (isClass) 338.59 258.33 P
1 F
-0.69 ( master offset. If the de\336nition did) 374.7 258.33 P
-0.16 (not specify) 180 245.33 P
3 F
-0.17 (V) 231.9 245.33 P
-0.17 (isClass) 239.05 245.33 P
1 F
-0.16 ( as an eventual superclass, no master offset \336eld would) 275.16 245.33 P
(be allocated for it, and the) 180 232.33 T
4 F
(Class_masterOffset) 303.73 232.33 T
1 F
( \336eld of) 392.21 232.33 T
3 F
(GenClass) 428.88 232.33 T
1 F
(\325 Class) 477.21 232.33 T
(structure would not be able to hold any particular value.) 180 219.33 T
(As stated at the beginning of this section, there are no \322variant objects.\323) 180 199.33 T
(Every object belongs to a speci\336c class, and the object\325) 180 186.33 T
(s class can never) 428.17 186.33 T
-0.41 (change. All instances of a variant class, however) 180 173.33 P
-0.41 (, can be resolved to different) 400.12 173.33 P
(superclasses due to the way the superclass of each variant is resolved. One) 180 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "172" 32
%%Page: "173" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(173) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(example of this is the generic-to-speci\336c mapping of the GenInteraction) 180 641.33 T
(object.) 180 628.33 T
-0.26 (All GenInteractions are of class) 180 608.33 P
3 F
-0.27 (GenInteractionClass) 327.04 608.33 P
1 F
-0.26 (; this never changes.) 434.44 608.33 P
3 F
-0.42 (GenInteractionClass) 180 595.33 P
1 F
-0.4 (, however) 287.4 595.33 P
-0.4 (, is a subclass of) 330.52 595.33 P
3 F
-0.42 (GenClass) 405.56 595.33 P
1 F
-0.4 (, a variant class.) 453.89 595.33 P
(This means that the class tree of the GenInteraction object is only partially) 180 582.33 T
-0.05 (completed; before the GenInteraction is resolved, it looks like the simpli\336ed) 180 569.33 P
(diagram in Figure) 180 556.33 T
(5-) 267.05 556.33 T
(10.) 275.94 556.33 T
(The GenInteraction object may be resolved into one of several different) 180 314.64 T
-0.81 (speci\336c UI classes. For example, the) 180 301.64 P
3 F
-0.84 (motif.geo) 344.95 301.64 P
1 F
-0.81 ( library has several classes for) 393.27 301.64 P
-0.24 (GenInteractions; among them are the classes that implement menus, dialog) 180 288.64 P
-0.7 (boxes, and grouping interactions. These classes are all specialized subclasses) 180 275.64 P
(of) 180 262.64 T
3 F
(V) 191.11 262.64 T
(isClass) 198.26 262.64 T
1 F
(, the eventual superclass of) 234.37 262.64 T
3 F
(GenClass) 362.9 262.64 T
1 F
(.) 411.23 262.64 T
(Notice from Figure) 180 242.64 T
(5-) 270.37 242.64 T
(10 that the class tree of the GenInteraction is not) 279.26 242.64 T
-0.01 (complete. A class tree must have links all the way back to) 180 229.64 P
3 F
-0.01 (MetaClass) 449.55 229.64 P
1 F
-0.01 ( for it) 502.88 229.64 P
-0.36 (to be complete; this only goes to) 180 216.64 P
3 F
-0.37 (GenClass) 326.61 216.64 P
1 F
-0.36 (.) 374.94 216.64 P
3 F
-0.37 (GenClass) 380.14 216.64 P
1 F
-0.36 ( has a special value in) 428.47 216.64 P
-0.77 (its) 180 203.64 P
4 F
-0.77 (Class_superClass) 193.68 203.64 P
1 F
-0.77 ( \336eld, 0001h:0000h. This represents a reserved \322pointer\323) 274.18 203.64 P
(that indicates to the kernel that the class is a master class.) 180 190.64 T
-0.27 (The superclass of the variant can be different for every instance because the) 180 170.64 P
(superclass pointer is actually stored in the object\325) 180 157.64 T
(s instance chunk rather) 407.61 157.64 T
81 144 531 648 C
180 331.31 531 553 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
428.91 508.3 440.45 505 428.91 501.69 428.91 505 4 Y
0 X
0 0 0 1 0 0 0 K
V
398.78 505 428.91 505 2 L
0.5 H
2 Z
N
322.07 510.39 333.78 507.78 322.46 503.79 322.27 507.09 4 Y
V
268.22 503.89 322.27 507.09 2 L
N
0 10 Q
(Figure) 181.83 407.07 T
(5-) 215.17 407.07 T
(10) 224.06 407.07 T
4 F
(A V) 237.96 407.07 T
(ariant Class Object) 253.53 407.07 T
-0.51 (A variant class always has the constant 0001h:0000h instead of a superclass) 181.83 393.07 P
(pointer) 181.83 381.07 T
(. The class pointer of the variant class is stored in the \336rst four bytes) 213.12 381.07 T
-0.83 (of the variant class\325 master part in the instance chunk. Until the variant class) 181.83 369.07 P
-0.17 (is resolved, this pointer is null and the master part of the superclass \050in this) 181.83 357.07 P
(case V) 181.83 345.07 T
(isClass\051 is not initialized.) 210.09 345.07 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
199.61 498.59 270.72 509.7 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class pointer) 207.93 501.07 T
199.61 487.48 270.72 498.59 R
7 X
V
0 X
N
4 8 Q
(V) 218.76 489.96 T
(is offset) 223.89 489.96 T
199.61 476.37 270.72 487.48 R
7 X
V
0 X
N
(Gen offset) 217.1 478.85 T
199.61 434.7 270.72 476.36 R
7 X
V
0 X
N
(GenClass) 217.77 457.55 T
(Instance data) 210.06 448.55 T
(superclass ptr) 209.55 468.66 T
206.56 467 263.78 467 2 L
7 X
V
2 Z
3 X
N
4 9 Q
0 X
(GenInteraction object) 192.67 520 T
333.33 480.89 401.66 510.33 R
7 X
V
0 Z
0 X
N
(GenInteractionClass) 326 522 T
(ClassStruct) 326 513 T
(Instance chunk) 192.67 511 T
4 8 Q
(superclass ptr) 341.88 503.66 T
338.88 500.44 396.1 500.44 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 347.87 490.33 T
441.33 480.89 509.66 510.33 R
7 X
V
0 Z
0 X
N
4 9 Q
(GenClass) 434 522 T
(ClassStruct) 434 513 T
4 8 Q
(0001h:0000h) 451.7 503.66 T
446.88 500.44 504.1 500.44 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 455.87 490.33 T
287.58 471.02 276 474.1 287.46 477.62 287.52 474.32 4 Y
2 X
V
511.32 505 M
 521.44 501.72 526 487.68 514.86 478.78 D
 501.7 468.24 480.96 478.37 327.11 476.44 D
 318.17 476.33 300.74 474.9 287.52 474.32 D
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "173" 33
%%Page: "174" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(174) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.69 (than in the class\325) 180 310.71 P
3 F
-0.71 (ClassStruct) 258.75 310.71 P
1 F
-0.69 ( structure. This also allows a class tree to have) 318.95 310.71 P
(more than one variant class in its hierarchy; for example, one variant could) 180 297.71 T
(be resolved to be the subclass of another variant. The tree must always be) 180 284.71 T
(headed by) 180 271.71 T
3 F
(MetaClass) 229.64 271.71 T
1 F
(.) 282.97 271.71 T
(As shown in Figure) 180 251.71 T
(5-) 272.6 251.71 T
(10, the superclass pointer for the variant is stored in) 281.49 251.71 T
(the variant\325) 180 238.71 T
(s master group instance data. Not all master groups have) 233.53 238.71 T
-0.12 (superclass pointers; only those for variant classes. After the GenInteraction) 180 225.71 P
-0.24 (is resolved, the pointer \050the \336rst four bytes of the Gen master part\051 points to) 180 212.71 P
(the proper superclass for this object \050in this case,) 180 199.71 T
3 F
(OLMenuW) 408.89 199.71 T
(inClass) 463.13 199.71 T
1 F
(\051. The) 501.09 199.71 T
(object, with its full class tree, is shown in Figure) 180 186.71 T
(5-) 406.7 186.71 T
(1) 415.59 186.71 T
(1.) 420.6 186.71 T
81 144 531 648 C
180 317.38 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
221.13 401.86 232.66 398.55 221.13 395.24 221.13 398.55 4 Y
0 X
0 0 0 1 0 0 0 K
V
259.33 528.55 271.55 528.55 271.55 479.11 206.55 479.11 206.55 398.55 221.13 398.55 6 L
0.5 H
2 Z
N
441.13 485.64 452.66 482.33 441.13 479.02 441.13 482.33 4 Y
V
480.44 439 493.77 439 493.77 457.89 438.22 457.89 438.22 482.33 441.13 482.33 6 L
N
404.46 444.08 416 440.77 404.46 437.47 404.46 440.77 4 Y
V
443.78 397.44 457.11 397.44 457.11 416.33 401.55 416.33 401.55 440.77 404.46 440.77 6 L
N
366.13 401.3 377.67 397.99 366.13 394.69 366.13 397.99 4 Y
V
412.11 527.44 423.22 527.44 423.22 464.11 383.22 464.11 382.67 427.44 349.33 427.44 349.33 397.99
 366.13 397.99 8 L
N
258.91 444.64 270.44 441.33 258.91 438.02 258.91 441.33 4 Y
V
296.55 397.44 313.22 397.44 313.22 417.24 253.22 417.24 253.22 441.33 258.91 441.33 6 L
N
296.91 486.08 308.44 482.77 296.91 479.47 296.91 482.77 4 Y
V
334.55 440.55 351.22 440.55 351.22 459.6 291.22 459.6 291.22 482.77 296.91 482.77 6 L
N
334.35 529.19 345.89 525.89 334.35 522.58 334.35 525.89 4 Y
V
372 483.66 388.67 483.66 388.67 502.71 328.67 502.71 328.67 525.89 334.35 525.89 6 L
N
420.58 608.78 432.11 605.47 420.58 602.17 420.58 605.47 4 Y
V
390.44 605.47 420.58 605.47 2 L
N
313.73 610.87 325.44 608.25 314.12 604.27 313.93 607.57 4 Y
V
259.89 604.36 313.93 607.57 2 L
N
0 10 Q
(Figure) 181.83 362.83 T
(5-) 215.17 362.83 T
(1) 224.06 362.83 T
(1) 229.07 362.83 T
4 F
(A Resolved V) 237.41 362.83 T
(ariant Object) 296.12 362.83 T
(The GenInteraction menu object has been resolved to belong to) 181.83 348.83 T
(OLMenuW) 181.83 336.83 T
(inClass, thus completing the object\325) 230.9 336.83 T
(s class tree as shown.) 391.61 336.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
190.94 599.07 262.05 610.18 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class pointer) 199.26 601.55 T
190.94 587.95 262.05 599.06 R
7 X
V
0 X
N
4 8 Q
(V) 210.09 590.44 T
(is offset) 215.22 590.44 T
190.94 576.84 262.05 587.95 R
7 X
V
0 X
N
(Gen offset) 208.43 579.33 T
190.94 492.4 262.05 534.06 R
7 X
V
0 X
N
(GenClass) 209.1 515.25 T
(Instance data) 201.39 506.25 T
(superclass ptr) 200.88 526.36 T
197.89 524.7 255.11 524.7 2 L
7 X
V
2 Z
3 X
N
4 9 Q
0 X
(GenInteraction object) 184.33 620.47 T
324.99 589.7 393.32 610.81 R
7 X
V
0 Z
0 X
N
(GenInteractionClass) 317.67 622.47 T
(ClassStruct) 317.67 613.47 T
(Instance chunk) 184.33 611.47 T
4 8 Q
(superclass ptr) 333.54 604.14 T
330.54 600.92 387.77 600.92 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 339.53 593.03 T
432.99 589.7 501.32 610.81 R
7 X
V
0 Z
0 X
N
4 9 Q
(GenClass) 425.67 622.47 T
(ClassStruct) 425.67 613.47 T
4 8 Q
(0001h:0000h) 443.36 604.14 T
438.55 600.92 495.77 600.92 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 447.53 593.03 T
190.94 534.4 262.05 576.07 R
7 X
V
0 Z
0 X
N
(V) 210.75 567.25 T
(isClass) 215.89 567.25 T
(Instance data) 201.39 558.25 T
346.38 511.14 414.71 531.7 R
7 X
V
0 X
N
(OLCtrlClass) 341.83 533.92 T
(superclass ptr) 354.93 525.03 T
351.93 521.81 409.16 521.81 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 360.92 514.47 T
308.62 468.07 376.95 488.63 R
7 X
V
0 Z
0 X
N
(OL) 304.07 490.85 T
(W) 315.19 490.85 T
(inClass) 322.01 490.85 T
(superclass ptr) 317.17 481.96 T
314.17 478.74 371.4 478.74 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 323.16 471.4 T
270.86 425 339.19 445.55 R
7 X
V
0 Z
0 X
N
(OLPopupW) 266.31 447.78 T
(inClass) 308.1 447.78 T
(superclass ptr) 279.41 438.89 T
276.41 435.67 333.64 435.67 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 285.4 428.33 T
233.1 381.93 301.43 402.48 R
7 X
V
0 Z
0 X
N
(OLMenuW) 228.55 404.71 T
(inClass) 267.81 404.71 T
(superclass ptr) 241.65 395.82 T
238.65 392.6 295.88 392.6 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 247.64 385.26 T
377.98 381.93 446.31 402.48 R
7 X
V
0 Z
0 X
N
(V) 373.43 404.71 T
(isCompClass) 378.57 404.71 T
(superclass ptr) 386.53 395.82 T
383.54 392.6 440.76 392.6 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 392.52 385.26 T
415.74 425 484.07 445.55 R
7 X
V
0 Z
0 X
N
(V) 411.19 447.78 T
(isClass) 416.33 447.78 T
(superclass ptr) 424.29 438.89 T
421.29 435.67 478.52 435.67 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 430.28 428.33 T
453.5 468.07 521.83 488.63 R
7 X
V
0 Z
0 X
N
(MetaClass) 448.95 490.85 T
(null) 480.11 481.96 T
459.05 478.74 516.28 478.74 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 468.04 471.4 T
276.6 534.95 264.89 532.44 273.49 540.78 275.04 537.87 4 Y
2 X
V
504.89 606.33 M
 514.14 600.63 506.46 583.3 496.55 579.99 D
 440.01 561.04 376.95 592.46 321 576.91 D
 297.76 570.45 290.24 549.22 275.05 537.86 D
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "174" 34
%%Page: "175" 35
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(175) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.3.2.5) 119.19 638.67 T
(An In-Depth Example) 180 638.67 T
1 10 Q
(This section gives an example of a GenT) 180 616.33 T
(rigger object after its variant part) 364.97 616.33 T
-0.44 (has been resolved. This example provides in-depth diagrams of the class and) 180 603.33 P
(instance structures for those programmers who wish to understand them.) 180 590.33 T
(There is no need to know them, however; you will not likely ever need to) 180 577.33 T
(access the internals of either a class structure or an instance structure.) 180 564.33 T
-0.66 (The GenT) 180 544.33 P
-0.66 (rigger taken as an example is the \322New Game\323 trigger of the T) 224.84 544.33 P
-0.66 (icT) 505.24 544.33 P
-0.66 (ac) 518.88 544.33 P
(sample application. This trigger is the only child of the Game menu) 180 531.33 T
(GenInteraction; it is shown in Figure) 180 518.33 T
(5-) 354.46 518.33 T
(12. The code de\336ning the trigger is) 363.35 518.33 T
(given in Code Display) 180 505.33 T
(5-) 283.72 505.33 T
(4.) 292.61 505.33 T
81 285.72 531 297.74 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 285.72 531 297.74 R
7 X
0 0 0 1 0 0 0 K
V
76.5 292.97 617.5 296.47 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 279.05 T
(5-) 147.13 279.05 T
(4 T) 156.02 279.05 T
(icT) 170.29 279.05 T
(ac\325) 184 279.05 T
(s New Game T) 197.53 279.05 T
(rigger) 265.34 279.05 T
5 9 Q
(/* The TicTacNewTrigger has a moniker and an output. All its other instance data) 81 264.72 T
( * is set to the GenClass defaults. The content of these fields is not important) 81 253.72 T
( * for this example, however. */) 81 242.72 T
81 144 531 648 C
180 314.74 531 502 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 181.83 346.05 T
(5-) 215.17 346.05 T
(12) 224.06 346.05 T
4 F
(T) 237.96 346.05 T
(icT) 244.1 346.05 T
(ac\325) 257.98 346.05 T
(s New Game T) 269.83 346.05 T
(rigger) 335.79 346.05 T
-0.31 (This trigger is used as the in-depth example object. The mouse pointer in the) 181.83 332.05 P
(diagram points to the trigger) 181.83 320.05 T
(.) 312.92 320.05 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
%%BeginBinary:  4724     
308 235 154 117.5 0 186.48 363.78
/red <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FFFFFFFF55555555AAAAAAAA00000000
> store
/green <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FFFF5555FFFF5555AA550000AAAA0000
> store
/blue <
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000FF55FF55FF55FF55AA00AA00AA00AA00
> store
 BEGINBITMAPCOLORc
"z"
F8T>F0F7"z#z#z
F0>F8F7F0S,F8F7F0>F8


;z
T6F7<z"z"z#
9F0F7S-F0F79F0F7F0=z8z8z
8F8S,F78F8Jz"
T$0F0FFJz
T%/F8J*>'E'
P@F0F0F0F0F0F0F7F0F0F0F0F0F0F0F0F0F0F0F0F0F0J#8&>#8#E#8#
P@F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7J#8%@%9%@%9%
PGF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0Az"J'>.>.
/F0FFP/F0F0F7F7F0F0F0F0F7F7F0F0F7F0F0F7F7F0F0F0F0F7F7F0F0F7F0F0F7F7F0F0ByJ#>%=#G#
F8P4F7F7F7F0F0F0F7F7F0F0AZJ%J%
/P>F0F0F7F7:F7F7F7F7AzJ#I#I#
0F8P3F0F0F0F0F0F0J'>%9'>.
PJF7F0F0F0F0F7F7F0F0F0F7F0F0F0F0F7F7F0F0F0F0F7F7F7F0F0F0F0F7J#9#8%:#:&8%:#:%9%JZ
PBF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7P'0Jz
T$1F8
<zJz
;F7S-9F77%J&
F7F7F7F7T5F7F7F7F7F77&z'
F0F0F0F0F7T3F0F7F0F0F0F0F07%8zJz8%
F8F8F8F8AF8O R?F8F8F8F8F8J"
OGF7Jz"
JJF8F7
CP'J%
F8FFFFF8FFFF7FFFFFFFFE'J'
F8F8F8F8F8F89FFFFF8F8FFFFI#;%J#8%8T9%
FFFFFFFFFFFF4F8F8FFFFFFFFFFFFFFFFE#>'J'9#8,
FFFFFFFFF8F8FFFF6FFFFF8F8FFFFF8F8F8F8FFFFF8FFFFF8F8FFFFE#@#J)F#
F8F8FFFF4FFFFFFF8F8FFFFFFFFFFJ%H"9%F%
;F8F8F8F8F8FFFFF8F8F8F8F8F8J#J#
=FFFFLFFFFJ'E%9%D'
9F8FFFFFFFFF8F8FFFFFFF8FFFFFFF8FFFFFFFFF8C#:&8%G&8s8#8#8%
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8CP
C&Jz
F8F8F8F8F87KF7J"
HF7<zzz
CF7P$F0Q:F7<z"z"z
BF8F0P$F8F7Q:F8

?zJz
?F7P&Q7F7@zJ$Jz"
>FE:FFFFFFO7Q6FEF0J"=$
O7FFFFFFFFJ"
O>FFJ$S#
O4F0F0F0F0F0J%r#
O4FFFFFFFFF0FFFFJx:R
O'F0JW
O(Jx
O'F8JzHz
R?2F12F1J#J'
O"FFFF4F8F8F8F8F8F8J"
O>F8J#I"=$
O"F8F8F8F8F8F8J$
O4F8F8F8

Jz
JP"F0J"
PKF7Jz"
LOLF8F7
J#9#J%
O"FFFFFFFF8FFFFFFFFJ"J'
O$FF;FFFFF8F8FFFFJ";%8#8#8#?#8%8T9%
O%FFFFFFFFFFFFFFFFFFFFFFF8F8FFFFFFFFFFFFFFFFJ$9'J'9#8,:$
O$F8FFFFFFFFF8F8FFFF7FFFFF8F8FFFFF8F8F8F8FFFFF8FFFFF8F8FFFFF0F0F0J"<#J)F#=%
O%F8FFFF5FFFFFFF8F8FFFFFFFFFFFFFFF0F0J";%I"9%F%=%
O&F8F8F8F8F8F8FFFFF8F8F8F8F8F8FFFFF0F0J#J#:#9%
O.FFFFMFFFFF8F0FFFFF0F0J,8%;%9%D'A%JzHz
O*F8FFFFFFFFF8F8F8FFFFFFFFFFFFF8F8FFFFFFF8FFFFFFF8FFFFFFFFF8FFFFF0F0OM2FE2FEJ#9#8%9s=&8s8#8#8%<#<%
O"F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F0FFFFF0F0J$
P@FFFFF0Jz"@r
KO;F7F0F7J"J%
JF7OBF0F0F0F7Jz";#v
JO=F8F0FFF0F8Jz:"8#v
HO?F7F0FFF0F7Jz"z"9"8'r
H>FEF1O!FEF0F0FFF0FEFEFEF1FEJ#8#
P>FEF0FFF0J(8#
P:FEF0F0FEFEFEF0FFF0J#9#
P;FEFEFEF0J$
PAFEF0F0J$
PBFEFEFE




JzHzHz
R-2F12F12F1














Ez
Q@F1Ez"z"z
O)FEF1O-FEF1O(FEJzHzHz
R-2FE2FE2FE




















































J%J%
RFF8F8F8F8@F8F8F8F8J#:"J#:"
RDF8F8F8=F8F8F8J"=#J"=#
RCF8F8F8:F8F8F8J"@"J"@"
RBF8F88F8F8EzJ"B"J"B"
Q@F1@F8F86F8F8Ez"z"zJ"D"J"D"
O)FEF1O-FEF1O(FE?F8F84F8F8J"J"
S"F8CF8J"J"
R?F8CF8



J"J"
R?FECFE
J"E"I"E"
R@FEFEFEFEJ"C"J"C"
RAFEFE5FEFEJ"A"J"A"
RBFEFE7FEFEJ"?"J"?"
RCFEFE9FEFEJtJt
RDFE;FE










J%J%J%
R4F8F8F8F8@F8F8F8F8@F8F8F8F8J#:"J#:"J#:"
R2F8F8F8=F8F8F8=F8F8F8J"=#J"=#J"=#
R1F8F8F8:F8F8F8:F8F8F8J"@"J"@"J"@"
R0F8F88F8F88F8F8J"B"J"B"J"B"
R/F8F86F8F86F8F8J"D"J"D"J"D"
R.F8F84F8F84F8F8J"J"J"
R>F8CF8CF8J"J"J"
R-F8CF8CF8



J"J"J"
R-FECFECFE
J"E"I"E"I"E"
R.FEFEFEFEFEFEJ"C"J"C"J"C"
R/FEFE5FEFE5FEFEJ"A"J"A"J"A"
R0FEFE7FEFE7FEFEJ"?"J"?"J"?"
R1FEFE9FEFE9FEFE7%JtJtJtJ%
F7F7F7F7R-FE;FE;FE4F7F7F7F77%J%
F0F0F0F0T6F0F0F0F07%J%
F8F8F8F8T6F8F8F8F8







J"J"
O8FEO-FE



@z
T,F0?z
T.F8

<z
T4F0;z#z#z
:F8F7F0S,F8F7F0:F8


z
T?F7
ENDBITMAP
%%EndBinary
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "175" 35
%%Page: "176" 36
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(176) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(@object GenTriggerClass TicTacNewTrigger = {) 81 642 T
(GI_visMoniker = \322New Game\323;) 102.6 631 T
(GTI_destination = TicTacBoard;) 102.6 620 T
(/* Send the action message to the) 301 620 T
( * TicTac game board object. */) 301 609 T
(GTI_actionMsg = MSG_TICTAC_NEW_GAME;) 102.6 598 T
(/* The action message. */) 302.4 598 T
(}) 81 587 T
81 562.98 531 575 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 562.98 531 575 R
7 X
0 0 0 1 0 0 0 K
V
76.5 570.23 617.5 573.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(The GenT) 180 538.98 T
(rigger) 234.68 538.98 T
(\325) 269.14 538.98 T
(s Instance Chunk) 272.03 538.98 T
1 10 Q
(The GenT) 180 517.31 T
(rigger object has two master parts, just like the GenInteraction) 225.5 517.31 T
-0.65 (object shown in \322V) 180 504.31 P
-0.65 (ariant Classes\323 on page 171: the Gen master part holds the) 262.33 504.31 P
(instance data for) 180 491.31 T
3 F
(GenClass) 260.75 491.31 T
1 F
( and) 309.08 491.31 T
3 F
(GenT) 332.05 491.31 T
(riggerClass) 359.57 491.31 T
1 F
(. The V) 419.02 491.31 T
(is master part) 451.92 491.31 T
81 144 531 648 C
180 144 531 480.89 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 181.83 172.83 T
(5-) 215.17 172.83 T
(13) 224.06 172.83 T
4 F
(GenT) 237.96 172.83 T
(rigger) 262.25 172.83 T
(\325) 290.19 172.83 T
(s Instance Chunk) 291.86 172.83 T
(The T) 181.83 158.83 T
(icT) 208.15 158.83 T
(acNewT) 222.03 158.83 T
(rigger trigger has a Gen and a V) 258.54 158.83 T
(is master part and no) 406.78 158.83 T
(vardata entries.) 181.83 146.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
282.08 434.61 417.15 445.17 R
0.5 H
0 Z
N
4 8 Q
(ui::dgroup::GenT) 297.54 437.11 T
(riggerClass) 359.64 437.11 T
(MI_base) 244.92 436.94 T
282.08 424.04 417.15 434.61 R
N
(8) 347.39 426.54 T
(Offset to V) 186.61 426.38 T
(is master part) 224.48 426.38 T
282.08 413.48 417.15 424.04 R
N
(32) 345.17 415.98 T
(Offset to Gen master part) 183.3 415.81 T
282.08 402.91 417.15 413.48 R
N
({ \0502, 20\051 to \05096, 36\051 }) 313.75 405.42 T
(VI_bounds) 236.32 405.25 T
282.08 392.35 417.15 402.91 R
N
(VTF_IS_GEN) 323.83 394.85 T
(VI_typeFlags) 227.59 394.68 T
282.08 381.78 417.15 392.35 R
N
(V) 321.84 384.29 T
(A_\311 \050several\051) 326.58 384.29 T
(VI_attrs) 245.66 384.12 T
282.08 371.22 417.15 381.78 R
N
(0) 347.39 373.72 T
(VI_optFlags) 231.14 373.55 T
282.08 360.65 417.15 371.22 R
N
(VGA_\311 \050several\051) 318.29 363.16 T
(VI_geoAttrs) 232.77 362.99 T
282.08 350.09 417.15 360.65 R
N
(SA_\311 \050several\051) 321.55 352.59 T
(VI_specAttrs) 229.37 352.43 T
282.08 339.52 417.15 350.09 R
N
(^l4660h:0026h \050parent\051) 306.29 342.03 T
(VI_link) 248.32 341.86 T
282.08 328.96 417.15 339.52 R
N
(002ah) 338.2 331.46 T
(OLBI_genChunk) 213.66 331.3 T
282.08 318.39 417.15 328.96 R
N
(0) 347.39 320.9 T
(OLBI_\336xedAttrs) 215.59 320.73 T
282.08 307.83 417.15 318.4 R
N
(0) 347.39 310.33 T
(OLBI_moreAttrs) 214.7 310.17 T
282.08 297.27 417.15 307.83 R
N
(OLBOF_\311 \050several\051) 312.58 299.77 T
(OLBI_optFlags) 219.43 299.6 T
282.08 286.7 417.15 297.27 R
N
(OLBSS_IN_MENU) 313.54 289.2 T
(OLBI_specState) 216.92 289.04 T
282.08 276.14 417.15 286.7 R
N
(motif::dgroup::OLButtonClass) 293.99 278.64 T
(Gen_metaInstance) 208.04 278.47 T
282.08 265.57 417.15 276.14 R
N
(^l4660h:0026h \050parent\051) 306.29 268.08 T
(GI_link) 247.73 267.91 T
282.08 255.01 417.15 265.57 R
N
(null) 342.06 257.51 T
(GI_comp) 243.14 257.34 T
282.08 244.44 417.15 255.01 R
N
(0028h) 338.27 246.95 T
(GI_visMoniker) 221.37 246.78 T
282.08 233.88 417.15 244.44 R
N
({ 0, 0, 0, 0, 0, C_NULL }) 305.74 236.38 T
(GI_kbdAccelerator) 207.6 236.22 T
282.08 223.31 417.15 233.88 R
N
(0) 347.39 225.82 T
(GI_attrs) 245.07 225.65 T
282.08 212.75 417.15 223.31 R
N
(GS_USABLE, GS_ENABLED) 294.12 215.25 T
(GI_states) 241.51 215.09 T
282.08 202.18 417.15 212.75 R
N
(^l3dd0h:001eh) 322.07 204.69 T
(GTI_destination) 215.6 204.52 T
282.08 191.62 417.15 202.18 R
N
(4c00h) 338.72 194.12 T
(GTI_actionMsg) 219 193.96 T
4 10 Q
(T) 193.22 455.28 T
(icT) 199.36 455.28 T
(acNewT) 213.24 455.28 T
(rigger) 249.75 455.28 T
421.45 413.66 431.45 413.66 2 L
2 Z
N
421.45 445.44 431.45 445.44 2 L
N
423.14 434.21 426.45 445.75 429.75 434.21 426.45 434.21 4 Y
V
429.75 425.2 426.45 413.66 423.14 425.2 426.45 425.2 4 Y
V
426.45 434.21 426.45 425.2 2 L
0 Z
N
421.45 286.89 431.45 286.89 2 L
2 Z
N
423.14 401.88 426.45 413.42 429.75 401.88 426.45 401.88 4 Y
V
429.75 298.42 426.45 286.89 423.14 298.42 426.45 298.42 4 Y
V
426.45 401.88 426.45 298.42 2 L
0 Z
N
421.45 191.66 431.45 191.66 2 L
2 Z
N
423.14 275.1 426.45 286.64 429.75 275.1 426.45 275.1 4 Y
V
429.75 203.2 426.45 191.66 423.14 203.2 426.45 203.2 4 Y
V
426.45 275.1 426.45 203.2 2 L
0 Z
N
4 9 Q
(Basic structure) 433.78 426.39 T
(V) 433.78 346.84 T
(is Master Part) 439.56 346.84 T
(Gen Master Part) 433.78 235.84 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "176" 36
%%Page: "177" 37
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(177) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.25 (holds the instance data for) 180 641.33 P
3 F
-0.25 (V) 304.7 641.33 P
-0.25 (isClass) 311.86 641.33 P
1 F
-0.25 ( and) 347.96 641.33 P
3 F
-0.25 (OLButtonClass) 370.44 641.33 P
1 F
-0.25 (. The) 449.51 641.33 P
3 F
-0.25 (MetaClass) 475.14 641.33 P
1 F
(instance data consists only of the object\325) 180 628.33 T
(s class pointer and has no master) 364.28 628.33 T
(part.) 180 615.33 T
-0.2 (Figure) 180 595.33 P
-0.2 (5-) 213.52 595.33 P
-0.2 (13 shows the structure of T) 222.41 595.33 P
-0.2 (icT) 347.29 595.33 P
-0.2 (acNewT) 360.92 595.33 P
-0.2 (rigger) 397.9 595.33 P
-0.2 (\325) 426.23 595.33 P
-0.2 (s instance chunk. The) 427.89 595.33 P
(chunk\325) 180 582.33 T
(s basic structure consists of the class pointer \050four bytes\051 followed by) 210.37 582.33 T
-0.66 (two words of offset into the chunk. The \336rst offset gives the location of the V) 180 569.33 P
-0.66 (is) 521.1 569.33 P
-0.13 (master part, and the second gives the location of the Gen master part. After) 180 556.33 P
(the offsets are the master parts themselves, and if the trigger had any) 180 543.33 T
(variable data, it would appear at the end of the chunk.) 180 530.33 T
-0.6 (Each master part has the master class\325 instance \336elds \336rst, followed by those) 180 510.33 P
-0.22 (of its subclasses. All the \336elds that belong to) 180 497.33 P
3 F
-0.23 (V) 385.83 497.33 P
-0.23 (isClass) 392.98 497.33 P
1 F
-0.22 ( begin) 429.09 497.33 P
1 9 Q
-0.2 (VI_) 459.39 497.33 P
1 10 Q
-0.22 (\311, all those) 474.05 497.33 P
(that belong to) 180 484.33 T
3 F
(OLButtonClass) 246.87 484.33 T
1 F
( begin) 325.94 484.33 T
1 9 Q
(OLBI_) 356.69 484.33 T
1 10 Q
(\311, etc.) 384.36 484.33 T
-0.44 (Notice also the \336rst four bytes of the Gen master part: they contain a pointer) 180 464.33 P
-0.83 (to the \322superclass\323 of) 180 451.33 P
3 F
-0.85 (GenClass) 276.14 451.33 P
1 F
-0.83 ( for the trigger) 324.47 451.33 P
-0.83 (. Although the trigger typically) 389.02 451.33 P
-0.28 (does not have different forms in any given speci\336c) 180 438.33 P
1 9 Q
-0.26 (UI) 410.95 438.33 P
1 10 Q
-0.28 ( \050as the GenInteraction) 421.95 438.33 P
(does\051, it will have a different class for each speci\336c) 180 425.33 T
1 9 Q
(UI) 415.94 425.33 T
1 10 Q
( it encounters. For) 426.94 425.33 T
-0.72 (example, the) 180 412.33 P
1 9 Q
-0.65 (OSF) 240.6 412.33 P
1 10 Q
-0.72 (/Motif class is) 259.28 412.33 P
3 F
-0.75 (OLButtonClass) 323.23 412.33 P
1 F
-0.72 (; another speci\336c) 402.3 412.33 P
1 9 Q
-0.65 (UI) 480.86 412.33 P
1 10 Q
-0.72 ( will use) 491.86 412.33 P
(a different class for GenT) 180 399.33 T
(riggers.) 296.79 399.33 T
81 144 531 648 C
180 144 531 362.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
272.6 242.83 283.22 237.24 271.26 236.36 271.93 239.59 4 Y
0 X
0 0 0 1 0 0 0 K
V
256.56 242.8 271.93 239.59 2 L
0.5 H
2 Z
N
360.5 237.77 372.03 234.46 360.5 231.16 360.5 234.46 4 Y
V
348.44 234.46 360.5 234.46 2 L
N
448.7 237.77 460.23 234.46 448.7 231.16 448.7 234.46 4 Y
V
438.32 234.46 448.7 234.46 2 L
N
417.24 323.77 428.78 320.46 417.24 317.15 417.24 320.46 4 Y
V
387.11 320.46 417.24 320.46 2 L
N
310.4 325.86 322.11 323.24 310.79 319.26 310.59 322.56 4 Y
V
256.55 319.35 310.59 322.56 2 L
N
0 10 Q
(Figure) 181.83 186.16 T
(5-) 215.17 186.16 T
(14) 224.06 186.16 T
4 F
(T) 237.96 186.16 T
(icT) 244.1 186.16 T
(acNewT) 257.98 186.16 T
(rigger) 294.49 186.16 T
(\325) 322.43 186.16 T
(s Class T) 324.1 186.16 T
(ree) 365.23 186.16 T
-0.02 (T) 181.83 172.16 P
-0.02 (icT) 187.97 172.16 P
-0.02 (acNewT) 201.85 172.16 P
-0.02 (rigger is of GenT) 238.36 172.16 P
-0.02 (riggerClass, a subclass of GenClass. GenClass) 314.42 172.16 P
-0.66 (is a variant and is resolved to OLButtonClass at run-time. OLButtonClass is) 181.83 160.16 P
(subclassed off V) 181.83 148.16 T
(isClass, which is subclassed off MetaClass.) 254.52 148.16 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
187.61 314.05 258.72 325.16 R
7 X
V
0 Z
0 X
N
4 9 Q
(Class pointer) 195.93 316.53 T
187.61 302.94 258.72 314.05 R
7 X
V
0 X
N
4 8 Q
(V) 206.75 305.42 T
(is offset) 211.89 305.42 T
187.61 291.83 258.72 302.94 R
7 X
V
0 X
N
(Gen offset) 205.1 294.31 T
187.61 207.38 258.72 249.05 R
7 X
V
0 X
N
(GenClass) 205.76 230.24 T
(Instance data) 198.06 221.24 T
(superclass ptr) 197.55 241.35 T
194.55 239.68 251.77 239.68 2 L
7 X
V
2 Z
3 X
N
4 9 Q
0 X
(T) 181 335.46 T
(icT) 186.52 335.46 T
(acNewT) 199.01 335.46 T
(rigger) 231.87 335.46 T
(\325) 257.02 335.46 T
(s) 258.52 335.46 T
321.66 304.68 389.99 325.8 R
7 X
V
0 Z
0 X
N
(GenT) 314.33 337.46 T
(riggerClass) 336.19 337.46 T
(ClassStruct) 314.33 328.46 T
(Instance chunk) 181 326.46 T
4 8 Q
(superclass ptr) 330.21 319.13 T
327.21 315.91 384.43 315.91 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 336.2 308.02 T
429.66 304.68 497.99 325.8 R
7 X
V
0 Z
0 X
N
4 9 Q
(GenClass) 422.33 337.46 T
(ClassStruct) 422.33 328.46 T
4 8 Q
(0001h:0000h) 440.03 319.13 T
435.21 315.91 492.43 315.91 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 444.2 308.02 T
187.61 249.38 258.72 291.05 R
7 X
V
0 Z
0 X
N
(V) 207.42 282.24 T
(isClass) 212.56 282.24 T
(Instance data) 198.06 273.24 T
283.71 219.25 352.81 239.81 R
7 X
V
0 X
N
(OLButtonClass) 279.11 242.03 T
(superclass ptr) 292.64 233.14 T
289.32 229.92 347.19 229.92 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 298.63 222.58 T
273.27 249.94 261.55 247.43 270.15 255.77 271.71 252.85 4 Y
2 X
V
501.55 321.32 M
 510.81 315.62 503.12 298.29 493.22 294.97 D
 436.67 276.03 373.61 307.45 317.67 291.9 D
 294.42 285.44 286.9 264.21 271.72 252.85 D
N
371.96 219.25 441.06 239.81 R
7 X
V
0 Z
0 X
N
(V) 367.37 242.03 T
(isClass) 372.5 242.03 T
(superclass ptr) 380.9 233.14 T
377.58 229.92 435.45 229.92 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 386.89 222.58 T
460.22 219.25 529.33 239.81 R
7 X
V
0 Z
0 X
N
(MetaClass) 455.63 242.03 T
(superclass ptr) 469.16 233.14 T
465.84 229.92 523.71 229.92 2 L
7 X
V
2 Z
3 X
N
0 X
(Class data) 475.15 222.58 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "177" 37
%%Page: "178" 38
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(178) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(The GenT) 180 640 T
(rigger) 234.68 640 T
(\325) 269.14 640 T
(s Full Class T) 272.03 640 T
(ree) 348.73 640 T
1 10 Q
-0.85 (Figure) 180 618.33 P
-0.85 (5-) 213.52 618.33 P
-0.85 (14 shows T) 222.41 618.33 P
-0.85 (icT) 271.96 618.33 P
-0.85 (acNewT) 285.6 618.33 P
-0.85 (rigger) 322.58 618.33 P
-0.85 (\325) 350.9 618.33 P
-0.85 (s full class tree in a simpli\336ed diagram.) 352.57 618.33 P
-0.8 (Since) 180 605.33 P
3 F
-0.82 (GenClass) 206.98 605.33 P
1 F
-0.8 ( is a variant, it has a superclass pointer of 0001h:0000h. This) 255.31 605.33 P
(special value \050with an illegal segment address\051 indicates to the kernel that) 180 592.33 T
-0.17 (this object\325) 180 579.33 P
-0.17 (s) 228.91 579.33 P
3 F
-0.17 (GenClass) 236.16 579.33 P
1 F
-0.17 ( superclass is stored in the instance chunk itself. The) 284.49 579.33 P
(superclass is stored in the \336rst four bytes of the Gen master part, as shown) 180 566.33 T
(in the previous section.) 180 553.33 T
0 12 Q
(GenT) 180 527 T
(riggerClass\325 ClassStruct Structur) 210.01 527 T
(e) 399.4 527 T
1 10 Q
(Because all classes have the same class structure, only) 180 505.33 T
3 F
(GenT) 435.77 505.33 T
(riggerClass) 463.29 505.33 T
1 F
-0.37 (will be examined here. The class structure and the instance chunk structure) 180 492.33 P
(are closely linked in several ways, as shown in Figure) 180 479.33 T
(5-) 430.97 479.33 T
(15.) 439.86 479.33 T
81 144 531 648 C
180 144 531 475.61 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
344.81 436.9 356.56 434.44 345.29 430.3 345.05 433.6 4 Y
0 X
0 0 0 1 0 0 0 K
V
280.45 428.89 345.05 433.6 2 L
0.5 H
2 Z
N
0 10 Q
(Figure) 181.28 161.99 T
(5-) 214.62 161.99 T
(15) 223.51 161.99 T
4 F
(GenT) 237.41 161.99 T
(riggerClass Subclassed) 261.7 161.99 T
(The class structure and instance structure are linked in several ways.) 181.28 147.99 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
182.3 425.16 280.15 435.73 R
0 Z
N
4 8 Q
(MI_base) 215.75 427.66 T
182.3 414.6 280.15 425.16 R
N
(Offset to V) 186.59 417.1 T
(is master part) 224.46 417.1 T
182.3 404.03 280.15 414.6 R
N
(Offset to Gen master part) 184.93 406.54 T
182.3 393.47 280.15 404.03 R
N
(VI_bounds) 211.45 395.97 T
182.3 382.9 280.15 393.47 R
N
(VI_typeFlags) 207.08 385.4 T
182.3 372.34 280.15 382.9 R
N
(VI_attrs) 216.11 374.84 T
182.3 361.77 280.15 372.34 R
N
(VI_optFlags) 208.85 364.28 T
182.3 351.21 280.15 361.77 R
N
(VI_geoAttrs) 209.67 353.71 T
182.3 340.64 280.15 351.21 R
N
(VI_specAttrs) 207.97 343.15 T
182.3 330.08 280.15 340.64 R
N
(VI_link) 217.45 332.58 T
182.3 319.51 280.15 330.08 R
N
(OLBI_genChunk) 200.11 322.02 T
182.3 308.95 280.15 319.52 R
N
(OLBI_\336xedAttrs) 201.08 311.45 T
182.3 298.39 280.15 308.95 R
N
(OLBI_moreAttrs) 200.63 300.89 T
182.3 287.82 280.15 298.39 R
N
(OLBI_optFlags) 203 290.32 T
182.3 277.26 280.15 287.82 R
N
(OLBI_specState) 201.75 279.76 T
182.3 266.69 280.15 277.26 R
N
(Gen_metaInstance) 197.31 269.19 T
182.3 256.13 280.15 266.69 R
N
(GI_link) 217.15 258.63 T
182.3 245.56 280.15 256.13 R
N
(GI_comp) 214.85 248.07 T
182.3 235 280.15 245.56 R
N
(GI_visMoniker) 203.97 237.5 T
182.3 224.43 280.15 235 R
N
(GI_kbdAccelerator) 197.08 226.94 T
182.3 213.87 280.15 224.43 R
N
(GI_attrs) 215.82 216.37 T
182.3 203.3 280.15 213.87 R
N
(GI_states) 214.04 205.81 T
182.3 192.74 280.15 203.3 R
N
(GTI_destination) 201.08 195.24 T
182.3 182.17 280.15 192.74 R
N
(GTI_actionMsg) 202.79 184.68 T
4 10 Q
(T) 182.3 447.78 T
(icT) 188.44 447.78 T
(acNewT) 202.32 447.78 T
(rigger) 238.83 447.78 T
357.11 424.06 439.89 435.73 R
N
4 8 Q
(ui::dgroup::GenClass) 359.77 426.84 T
357.11 412.39 439.89 424.06 R
N
(6h) 393.83 415.17 T
357.11 400.73 439.89 412.39 R
N
(7h) 393.83 403.51 T
357.11 389.06 439.89 400.73 R
N
(18h) 391.61 391.84 T
357.11 377.39 439.89 389.06 R
N
(null) 390.95 380.17 T
357.11 365.73 439.89 377.39 R
N
(02eah) 387.54 368.5 T
357.11 354.06 398.5 365.73 R
N
(0) 375.58 356.84 T
398.5 354.06 439.89 365.73 R
N
(9h) 414.53 356.84 T
4 9 Q
(Method table) 443.84 346.63 T
4 10 Q
(instance chunk) 182.3 437.78 T
4 8 Q
(Class_superClass) 443.84 426.95 T
(Class_masterOffset) 443.84 415.28 T
(Class_methodCount) 443.84 403.61 T
357.11 345.09 439.89 354.06 R
N
(0010h) 387.16 346.73 T
357.11 336.12 439.89 345.09 R
N
(61afh) 387.98 337.77 T
357.11 327.15 439.89 336.12 R
N
(6800h) 387.16 328.8 T
357.11 318.19 439.89 327.16 R
N
(6801h) 387.16 319.83 T
357.11 309.22 439.89 318.19 R
N
(6802h) 387.16 310.86 T
357.11 300.25 439.89 309.22 R
N
(6803h) 387.16 301.89 T
357.11 291.28 439.89 300.25 R
N
(6804h) 387.16 292.93 T
357.11 226.84 439.89 236.04 R
N
(pointer to 7th method) 359.02 228.58 T
357.11 236.04 439.89 245.25 R
N
(pointer to 6th method) 359.02 237.79 T
357.11 245.25 439.89 254.46 R
N
(pointer to 5th method) 359.02 246.99 T
357.11 254.46 439.89 263.66 R
N
(pointer to 4th method) 359.02 256.2 T
357.11 263.66 439.89 272.87 R
N
(pointer to 3rd method) 358.65 265.41 T
357.11 272.87 439.89 282.08 R
N
(pointer to 2nd method) 357.99 274.61 T
357.11 282.08 439.89 291.28 R
N
(pointer to 1st method) 359.69 283.82 T
(Message numbers) 443.84 337.39 T
(Pointers to methods) 443.84 283.73 T
(Class_instanceSize) 443.84 391.95 T
(Class_vdRelocT) 443.84 380.28 T
(able) 501.6 380.28 T
(Class_relocT) 443.84 368.61 T
(able) 490.18 368.61 T
(Class_\337ags) 314.33 356.22 T
(Class_masterMessages) 443.84 356.95 T
4 10 Q
(GenT) 357.11 447.78 T
(riggerClass) 381.4 447.78 T
(ClassStruct) 357.11 437.78 T
182.89 404.17 279.56 404.17 2 L
1 H
2 Z
N
182.89 277.28 279.56 277.28 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
4 8 Q
(6h) 282.11 407.78 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
304.51 408.1 292.67 410 303.72 414.67 304.12 411.38 4 Y
2 X
V
357.11 417.78 304.12 411.38 2 L
0.5 H
N
291 274.19 280.45 277.22 291 280.24 291 277.22 4 Y
V
278.78 407.78 291 397.78 291 277.22 291 277.22 4 L
N
281.55 182.18 291.55 182.18 2 L
0 X
N
283.25 264.39 286.56 275.93 289.86 264.39 286.56 264.39 4 Y
V
289.86 193.71 286.56 182.18 283.25 193.71 286.56 193.71 4 Y
V
286.56 264.39 286.56 193.71 2 L
0 Z
N
(instance size) 289.33 232.22 T
298.09 236.69 286.56 240 298.09 243.3 298.09 240 4 Y
2 X
V
357.11 393.89 307.11 370 307.67 240 298.09 240 4 L
2 Z
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "178" 38
%%Page: "179" 39
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(179) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.59 (As shown in the diagram, the instance chunk points directly to the class. The) 180 641.33 P
(class points to its superclass, thereby providing inheritance of all the) 180 628.33 T
-0.4 (methods and structures of classes higher in the class tree such as) 180 615.33 P
3 F
-0.41 (GenClass) 479.89 615.33 P
1 F
-0.4 (.) 528.22 615.33 P
(The class structure contains some information about the instance chunk\325) 180 595.33 T
(s) 515.58 595.33 T
(format, speci\336cally) 180 582.33 T
4 F
(Class_masterOffset) 270.19 582.33 T
1 F
( and) 358.67 582.33 T
4 F
(Class_instanceSize) 381.64 582.33 T
1 F
(.) 469.01 582.33 T
4 F
-0.09 (Class_masterOffset) 180 569.33 P
1 F
-0.09 ( gives the offset into the instance chunk where the offset) 268.48 569.33 P
(to the master part is stored.) 180 556.33 T
4 F
(Class_instanceSize) 311.87 556.33 T
1 F
( contains the size of the) 399.24 556.33 T
(master part so the kernel can quickly allocate the needed space when the) 180 543.33 T
(master part is initialized.) 180 530.33 T
(The method table resides at the end of the class, and it has entries for each) 180 510.33 T
(message handled by the class.) 180 497.33 T
3 F
(GenT) 321.51 497.33 T
(riggerClass) 349.03 497.33 T
1 F
( handles seven messages) 408.48 497.33 T
-0.56 (\050stored in) 180 484.33 P
4 F
-0.56 (Class_methodCount) 225.72 484.33 P
1 F
-0.56 (\051; any message received by this trigger and not) 317.92 484.33 P
(recognized by) 180 471.33 T
3 F
(GenT) 245.55 471.33 T
(riggerClass) 273.07 471.33 T
1 F
( is passed up the class tree for handling.) 332.52 471.33 T
-0.15 (Thus, a) 180 458.33 P
1 9 Q
-0.14 (MSG_GEN_SET_NOT_ENABLED) 217.12 458.33 P
1 10 Q
-0.15 ( sent to the trigger will be passed on) 361.96 458.33 P
(to) 180 445.33 T
3 F
(GenClass) 191.67 445.33 T
1 F
( and will be handled there.) 240 445.33 T
(The method table has two parts: The \336rst part is a listing of message) 180 425.33 T
(numbers, and the second part is a listing of pointers to the method code.) 180 412.33 T
(When the object receives a message, the kernel scans the \336rst part to see if) 180 399.33 T
(the class handles the message. If it does, the kernel then scans the second) 180 386.33 T
-0.52 (part of the table to get the pointer to the code. It then executes the code there) 180 373.33 P
(as if that code were a function called by the object\325) 180 360.33 T
(s code.) 411.51 360.33 T
0 12 Q
(How a Message Is Handled) 180 334 T
1 10 Q
(Most aspects of messages and messaging are described in the following) 180 312.33 T
(section. This section, however) 180 299.33 T
(, describes how the kernel \336nds and executes) 316.86 299.33 T
(the code when a message is sent to the GenT) 180 286.33 T
(rigger) 386.08 286.33 T
(. The message is) 413.11 286.33 T
1 9 Q
(MSG_GEN_SET_USABLE) 180 273.33 T
1 10 Q
( \050handled by) 292.18 273.33 T
3 F
(GenClass) 352.19 273.33 T
1 F
(\051.) 400.52 273.33 T
-0.41 (Messages are sent directly to an object using its optr) 180 253.33 P
-0.41 (. That is, when you send) 418.22 253.33 P
(a message to this particular GenT) 180 240.33 T
(rigger) 336.63 240.33 T
(, you send it directly to) 363.66 240.33 T
(T) 180 227.33 T
(icT) 186.42 227.33 T
(acNewT) 200.06 227.33 T
(rigger) 237.04 227.33 T
(, not to some monolithic \322case\323 statement run by your) 264.07 227.33 T
(application. Since the object\325) 180 214.33 T
(s optr uniquely identi\336es the location of the) 311.13 214.33 T
-0.42 (object\325) 180 201.33 P
-0.42 (s instance chunk in memory) 208.52 201.33 P
-0.42 (, the kernel can quickly access the code for) 335.91 201.33 P
(the handler) 180 188.33 T
(.) 233.15 188.33 T
-0.63 (When) 180 168.33 P
1 9 Q
-0.56 (MSG_GEN_SET_USABLE) 209.18 168.33 P
1 10 Q
-0.63 ( is sent to the T) 321.36 168.33 P
-0.63 (icT) 389.85 168.33 P
-0.63 (acNewT) 403.49 168.33 P
-0.63 (rigger) 440.47 168.33 P
-0.63 (, for example,) 467.5 168.33 P
-0.25 (the kernel looks in the object\325) 180 155.33 P
-0.25 (s instance chunk for its class pointer) 313.78 155.33 P
-0.25 (. It follows) 480.62 155.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "179" 39
%%Page: "180" 40
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(180) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.23 (this pointer and then looks in) 180 641.33 P
3 F
-0.24 (GenT) 317.9 641.33 P
-0.24 (riggerClass) 345.42 641.33 P
1 F
-0.23 (\325) 404.87 641.33 P
3 F
-0.24 (ClassStruct) 409.46 641.33 P
1 F
-0.23 ( structure. It) 469.66 641.33 P
-0.18 (scans the \336rst part of the class\325 method table for) 180 628.33 P
1 9 Q
-0.16 (MSG_GEN_SET_USABLE) 403.44 628.33 P
1 10 Q
-0.18 (. If) 515.61 628.33 P
(the message is not there \050and it isn\325) 180 615.33 T
(t\051, the kernel will then follow the class\325) 344.29 615.33 T
4 F
(Class_superClass) 180 602.33 T
1 F
( pointer and look in) 260.51 602.33 T
3 F
(GenClass) 353.49 602.33 T
1 F
(\325) 401.82 602.33 T
3 F
(ClassStruct) 406.64 602.33 T
1 F
( structure. It) 466.84 602.33 T
(then scans the \336rst part of) 180 589.33 T
3 F
(GenClass) 305.19 589.33 T
1 F
(\325 method table for the message.) 353.52 589.33 T
3 F
(GenClass) 180 576.33 T
1 F
( has an entry for) 228.33 576.33 T
1 9 Q
(MSG_GEN_SET_USABLE) 307.78 576.33 T
1 10 Q
(, and therefore the) 419.96 576.33 T
(kernel checks the second part of the method table for the code pointer) 180 563.33 T
(. It) 500.75 563.33 T
-0.67 (follows this pointer to the method\325) 180 550.33 P
-0.67 (s entry point and begins executing the code) 333.91 550.33 P
(there.) 180 537.33 T
0 14 Q
(5.3.3) 130.86 495 T
0 18 Q
(The GEOS Message System) 180 495 T
1 10 Q
(Because objects are independent entities, they must have some means of) 180 471.33 T
-0.41 (communicating with other objects in the system. As shown in the example of) 180 458.33 P
(the calculator and requestor objects in \322System Architecture,\323 Chapter) 180 445.33 T
(3,) 508.71 445.33 T
(communication is implemented through the use of messages and methods.) 180 432.33 T
0 14 Q
(5.3.3.1) 119.19 398.67 T
(The Messaging Process) 180 398.67 T
1 10 Q
(When an object needs to notify another object of some event, retrieve data) 180 376.33 T
-0.7 (from another object, or send data to another object, it sends a message to that) 180 363.33 P
(object. Sending a message is similar to calling a function in) 180 350.33 T
1 9 Q
(C) 456.16 350.33 T
1 10 Q
( in that the) 462.66 350.33 T
(message can take parameters \050including pointers\051 and give return values.) 180 337.33 T
(However) 180 324.33 T
(, messages are also quite different from function calls in the) 220.18 324.33 T
(multithreaded environment of) 180 311.33 T
1 9 Q
(GEOS) 322.41 311.33 T
1 10 Q
(.) 348.58 311.33 T
(Each object block in the system is associated with a single thread of) 180 291.33 T
-0.67 (execution. Each thread that runs objects \050some run only procedural code\051 has) 180 278.33 P
(an) 180 265.33 T
4 F
(event queue) 194.45 265.33 T
1 F
(, a queue in which messages are stored until they can be) 247.59 265.33 T
-0.64 (handled. Every message sent to an object from another thread gets put in the) 180 252.33 P
(object\325) 180 239.33 T
(s thread\325) 208.52 239.33 T
(s event queue. \050Messages sent between objects within the) 248.34 239.33 T
(same thread are not handled via the queue unless forced that way) 180 226.33 T
(.\051 Thus, a) 484.3 226.33 T
(single thread\325) 180 213.33 T
(s event queue can have messages for many different objects.) 242.6 213.33 T
-0.13 (For most single-thread applications, the programmer will not have to worry) 180 200.33 P
(about synchronization issues.) 180 187.33 T
-0.25 (The sender of a message has to be aware of synchronization issues raised by) 180 167.33 P
-0.01 (having multiple threads in the system. Essentially) 180 154.33 P
-0.01 (, you can send a message) 412.92 154.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "180" 40
%%Page: "181" 41
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The GEOS Object System) 387.61 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(181) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.3) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.82 (two ways: The \336rst, \322calling\323 the message, allows the use of return values and) 180 641.33 P
(acts almost exactly like a function call in) 180 628.33 T
1 9 Q
(C) 371.15 628.33 T
1 10 Q
(. This places the message in the) 377.65 628.33 T
-0.42 (recipient\325) 180 615.33 P
-0.42 (s event queue and then halts the sender until the return values are) 222.59 615.33 P
(received. The sender \322goes to sleep\323 until the message has been processed) 180 602.33 T
(and is then awoken by the kernel, thus ensuring the message is handled) 180 589.33 T
-0.64 (before the sender executes another line of code. The call option should also be) 180 576.33 P
-0.37 (used when passing pointers; otherwise, the item pointed to may move before) 180 563.33 P
(the message can be handled, invalidating the pointer) 180 550.33 T
(.) 424.3 550.33 T
-0.11 (The second, \322sending\323 the message, is used primarily when synchronization) 180 530.33 P
(is not an issue. For example, if the message merely noti\336es the recipient of) 180 517.33 T
(some condition or event, or if it sends data with no expectation of a return) 180 504.33 T
(value, the send option can be used. Essentially) 180 491.33 T
(, the sender will send off the) 394.48 491.33 T
-0.11 (message and then forget about it, continuing on with its own business. \050The) 180 478.33 P
-0.55 (exception to this is an object sending a message to another object in the same) 180 465.33 P
(thread; then the message is handled immediately) 180 452.33 T
(, as if it had been called.\051) 407.26 452.33 T
-0.82 (When an object sends a message, the message actually \336rst gets passed to the) 180 432.33 P
-0.63 (kernel \050this is all automatic\051. The kernel will put the message into the proper) 180 419.33 P
(thread\325) 180 406.33 T
(s event queue and, if necessary) 212.41 406.33 T
(, put the sender) 354.83 406.33 T
(\325) 428.16 406.33 T
(s thread temporarily) 429.83 406.33 T
(to sleep. When the recipient\325) 180 393.33 T
(s thread is ready to handle the message, the) 310.93 393.33 T
(kernel pulls it from the event queue.) 180 380.33 T
(The kernel then locates and loads the recipient object into memory \050if) 180 360.33 T
(necessary\051. The recipient\325) 180 347.33 T
(s object block will be loaded and locked, and the) 297.22 347.33 T
(object will be locked while processing the event. \050Note, however) 180 334.33 T
(, that it is) 471.88 334.33 T
-0.16 (possible for the object to move if the recipient makes a call to) 180 321.33 P
3 F
-0.16 (LMemAlloc\050\051) 461.9 321.33 P
1 F
(or does something else that can cause shuf\337ing of the object chunks.\051 The) 180 308.33 T
(kernel will follow the object\325) 180 295.33 T
(s class pointer to its class and will scan the) 308.91 295.33 T
(method table. If the class can handle the message, the proper method code) 180 282.33 T
(will be executed. If the class can not handle the message, the kernel will) 180 269.33 T
-0.55 (follow the superclass pointer and check the method table there. The message) 180 256.33 P
-0.44 (will continue up the class tree like this until either it is handled or it reaches) 180 243.33 P
(the root and returns unprocessed.) 180 230.33 T
(After the method code has been executed, the kernel collects any return) 180 210.33 T
-0.42 (values and wakes up the caller thread again if necessary) 180 197.33 P
-0.42 (. T) 437 197.33 P
-0.42 (o the caller) 447.89 197.33 P
-0.42 (, it\325) 497.61 197.33 P
-0.42 (s as) 511.46 197.33 P
-0.17 (if the message were handled instantaneously \050with the call option\051. Senders) 180 184.33 P
-0.05 (are never blocked; only messages called \050with the call option\051 may block the) 180 171.33 P
-0.42 (caller) 180 158.33 P
-0.42 (\325) 206.29 158.33 P
-0.42 (s thread. If a message is sent to an object in the same thread, however) 207.96 158.33 P
-0.42 (,) 525.86 158.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "181" 41
%%Page: "182" 42
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(182) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(it will be executed as a call and will be handled immediately) 180 641.33 T
(, unless the) 457.3 641.33 T
(sender explicitly states that it should go through the message queue.) 180 628.33 T
-0.07 (Be careful, though, if you are writing code in multiple threads \050for example,) 180 608.33 P
-0.06 (if you subclass) 180 595.33 P
1 9 Q
-0.06 (UI) 249.82 595.33 P
1 10 Q
-0.06 ( objects and write new method code for them\051. Y) 260.82 595.33 P
-0.06 (ou have to) 480.81 595.33 P
(make sure that two threads never call each other; this can lead to deadlock) 180 582.33 T
-0.53 (if the calls happen to overlap. The easiest way to deal with this is to have one) 180 569.33 P
-0.48 (thread always send a message requesting a return message with any needed) 180 556.33 P
-0.39 (return values. The other thread will then send off a return message with the) 180 543.33 P
-0.51 (data. For example, a) 180 530.33 P
1 9 Q
-0.46 (UI) 275.75 530.33 P
1 10 Q
-0.51 ( object may require information from an application\325) 286.75 530.33 P
-0.51 (s) 524.1 530.33 P
(object. The) 180 517.33 T
1 9 Q
(UI) 232.97 517.33 T
1 10 Q
( object sends) 243.97 517.33 T
1 9 Q
(MSG_REQUEST_INFORMA) 305.27 517.33 T
(TION) 425.94 517.33 T
1 10 Q
( \050or something) 449.94 517.33 T
(similar\051. The application\325) 180 504.33 T
(s object then receives that message and responds) 295.58 504.33 T
(with a) 180 491.33 T
1 9 Q
(MSG_RETURNING_REQUESTED_INFORMA) 212.05 491.33 T
(TION) 408.89 491.33 T
1 10 Q
( \050or something) 432.89 491.33 T
(similar\051. W) 180 478.33 T
(ith this scheme, the application\325) 231.3 478.33 T
(s object is free to use call) 378.36 478.33 T
(whenever it wants, but the) 180 465.33 T
1 9 Q
(UI) 307.06 465.33 T
1 10 Q
( object must always use send.) 318.06 465.33 T
0 14 Q
(5.3.3.2) 119.19 431.67 T
(Message Structures and Conventions) 180 431.67 T
1 10 Q
(A message is simply a 16-bit number determined at compile time.) 180 409.33 T
-0.21 (Speci\336cally) 180 396.33 P
-0.21 (, it is an enumerated type\321this ensures that no two messages in) 231.3 396.33 P
(the same class can have the same number) 180 383.33 T
(.) 373.55 383.33 T
(An event is an opaque structure containing the message number and) 180 363.33 T
-0.01 (information about the recipient, the sender) 180 350.33 P
-0.01 (, parameters, and return values.) 378.46 350.33 P
(When an object sends a message, the kernel automatically builds out the) 180 337.33 T
-0.86 (event structure \050generally stored in the handle table for speed and ef\336ciency\051.) 180 324.33 P
(Y) 180 311.33 T
(ou will never have to know the structure of an event.) 185.93 311.33 T
0 14 Q
(5.4) 142.54 259 T
0 24 Q
(Using Classes and Objects) 180 259 T
1 10 Q
(The previous sections dealt with the internals of the) 180 233.33 T
1 9 Q
(GEOS) 423.73 233.33 T
1 10 Q
( object system.) 449.9 233.33 T
(This section describes how you can create classes and objects and manage) 180 220.33 T
(them during execution using Goc keywords and kernel routines. Almost all) 180 207.33 T
(Goc keywords begin with \322) 180 194.33 T
3 F
(@) 302.24 194.33 T
1 F
(\323 \050one notable exception is) 309.71 194.33 T
3 F
(gcnList) 432.69 194.33 T
1 F
(\051.) 471.39 194.33 T
-0.7 (All the most useful keywords available in Goc are shown in Code Display) 180 174.33 P
-0.7 (5-) 511.69 174.33 P
-0.7 (5.) 520.58 174.33 P
-0.29 (This display is for initial reference; all the keywords are detailed in depth in) 180 161.33 P
(the following sections of this chapter and in the Routines Book.) 180 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "182" 42
%%Page: "183" 43
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(183) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(5-) 147.13 629.31 T
(5 Goc Keywords) 156.02 629.31 T
5 9 Q
(/* Including .goh files */) 125 614.98 T
(@include <fname>;) 81 603.98 T
(/* Defining New Classes and Subclasses */) 125 585.98 T
(@class) 81 574.98 T
(<cname>, <super> [, master [, variant]];) 125 574.98 T
(@endc) 81 563.98 T
(/* Declaring a class */) 125 545.98 T
(@classdecl <cname> [, <cflags>];) 81 534.98 T
(/* Defining messages for a class */) 125 516.98 T
(@message <retType> <mname>\050[@stack] <param>*\051;) 81 505.98 T
(@reserveMessages <num>;) 81 494.98 T
(@exportMessages <expName>, <num>;) 81 483.98 T
(@importMessage <expName>, <messageDef>;) 81 472.98 T
(@alias\050<protoMsg>\051 <messageDef>;) 81 461.98 T
(@prototype <messageDef>;) 81 450.98 T
(/* Defining instance data fields for a class */) 125 432.98 T
(@instance <insType> <iname> [ = <default>];) 81 421.98 T
(gcnList\050<manufID>, <ltype>\051 = <oname> [, <oname>]*;) 81 410.98 T
(@instance @composite <iname> [ = <linkName>];) 81 399.98 T
(@instance @link <iname> [ = <default>];) 81 388.98 T
(@instance @visMoniker <iname> [ = <default>];) 81 377.98 T
(@instance @kbdAccelerator <iname> [ = <default>];) 81 366.98 T
(@reloc <iname>, [ \050<count>, <struct>\051, ] <ptrType>;) 81 355.98 T
(@noreloc <iname>;) 81 344.98 T
(@default <iname> = <default>;) 81 333.98 T
(/* Defining vardata fields for a class */) 125 315.98 T
(@vardata <type> <vname>;) 81 304.98 T
(@vardataAlias \050<origName>\051 <newType> <newName>;) 81 293.98 T
(@reloc <vname>, <fn>, [ \050<count>, <struct>\051, ] <ptrType>;) 81 282.98 T
(/* Defining methods \050message handlers\051 */) 125 264.98 T
(@method [ <hname>, ] <cname> [, <mname>]+;) 81 253.98 T
(@method [ <hname>, ] <cname> _reloc;) 81 242.98 T
(/* Defining library code and resources */) 125 224.98 T
(@optimize) 81 213.98 T
(@deflib <libname>) 81 202.98 T
(@endlib) 81 191.98 T
(@start <segname> [ , <flags> ];) 81 180.98 T
(@header <type> [ = <init> ];) 81 169.98 T
(@end <segname>) 81 158.98 T
(@chunk <type> <name> [ = <init> ];) 81 147.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "183" 43
%%Page: "184" 44
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(184) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(@chunkArray <stype> <aname> [ = {<init>} ];) 81 642 T
(@elementArray <stype> <aname> [ = {<init>} ];) 81 631 T
(@extern <type> <name>;) 81 620 T
(@gstring;) 81 609 T
(/* Declaring an object */) 125 591 T
(@object <class> <name> <flags>* = {) 81 580 T
([<fieldName> = <init>];*) 102.6 569 T
([<varName> [ = <init> ]]*;) 102.6 558 T
(}) 81 547 T
(/* Sending and calling messages */) 125 529 T
(@send [<flags>,+] <obj>::[{<cast>}] <msg>\050<params>*\051;) 81 518 T
(<ret> = @call [<flags>,+] [{<cast>}] <obj>::[{<cast2>}]<msg>\050<params>*\051;) 81 507 T
(@callsuper\050\051;) 81 496 T
(@callsuper <obj>::<class>::<msg>\050<params>*\051 [<flags>,];) 81 485 T
(<event> = @record <obj>::<msg>\050<params>*\051;) 81 474 T
(@dispatch [noFree] <nObj>::<nMsg>::<event>;) 81 463 T
(<ret> = @dispatchCall [noFree] [{<cast>}] <nobj>::<nMsg>::<event>;) 81 452 T
(/* Using conditional code */) 125 434 T
(@if <cond>) 81 423 T
(@if defined\050<item>\051) 81 412 T
(@ifdef <cond>) 81 401 T
(@ifndef <cond>) 81 390 T
(/* Creating Goc macros */) 125 372 T
(@define <mname> <macro>) 81 361 T
81 336.98 531 349 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 336.98 531 349 R
7 X
0 0 0 1 0 0 0 K
V
76.5 344.23 617.5 347.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.1) 130.86 296.98 T
0 18 Q
(De\336ning a New Class or Subclass) 180 296.98 T
5 10 Q
(@class, @classdecl, @endc, @default, @uses) 180 273.31 T
1 F
(Y) 180 253.31 T
(ou can create new classes in) 185.93 253.31 T
1 9 Q
(GEOS) 318.35 253.31 T
1 10 Q
( by using the Goc keywords) 344.52 253.31 T
3 F
(@class) 473.61 253.31 T
1 F
( and) 506.27 253.31 T
3 F
(@endc) 180 240.31 T
1 F
(. These frame the class de\336nition as shown in Code Display) 212.29 240.31 T
(5-) 489.37 240.31 T
(6; the) 498.26 240.31 T
3 F
(@endc) 180 227.31 T
1 F
( keyword takes no parameters, but) 212.29 227.31 T
3 F
(@class) 375.84 227.31 T
1 F
( takes the following) 408.5 227.31 T
(parameters:) 180 214.31 T
5 F
(@class) 216 198.31 T
(<cname>, <super> [, master [, variant]];) 276 198.31 T
3 F
(cname) 180 177.31 T
1 F
(This is the name of the new class.) 243 177.31 T
3 F
(super) 180 158.31 T
1 F
(This is the class name of the superclass.) 243 158.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "184" 44
%%Page: "185" 45
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(185) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(master) 180 641.33 T
1 F
(When included, this word makes the new class a master class.) 243 641.33 T
3 F
(variant) 180 622.33 T
1 F
-0.34 (When included, this word makes the new class a variant class.) 243 622.33 P
(All variant classes must also be declared master classes.) 243 610.33 T
(Every class must have a class structure \050) 180 591.33 T
3 F
(ClassStruct) 369.08 591.33 T
1 F
(\051 in memory) 429.28 591.33 T
(. This is) 483.91 591.33 T
(created and \336lled automatically by Goc and the kernel; however) 180 578.33 T
(, you must) 474.3 578.33 T
-0.29 (use the) 180 565.33 P
3 F
-0.3 (@classdecl) 215.73 565.33 P
1 F
-0.29 ( keyword to make sure the structure gets built. Only one) 269.88 565.33 P
3 F
-0.69 (@classdecl) 180 552.33 P
1 F
-0.67 ( statement may be used for each class, however\321Goc will give an) 234.15 552.33 P
(error if the class is declared twice. This is also shown in Code Display) 180 539.33 T
(5-) 503.93 539.33 T
(6,) 512.82 539.33 T
(and its parameters are as follows:) 180 526.33 T
5 F
(@classdecl) 216 510.33 T
(<cname> [, <cflags>];) 300 510.33 T
3 F
(cname) 180 489.33 T
1 F
(This is the name of the class being declared.) 243 489.33 T
3 F
(c\337ags) 180 470.33 T
1 F
(These are optional \337ags, described below) 243 470.33 T
(.) 430.63 470.33 T
(The optional \337ags that can be used with a class declaration determine how) 180 451.33 T
(objects of the class get shut down \050see \322Class_\337ags\323 on page 169\051. The \337ags) 180 438.33 T
(you can use with) 180 425.33 T
3 F
(@classdecl) 260.38 425.33 T
1 F
( are) 314.53 425.33 T
4 F
(neverSaved) 180 405.33 T
1 F
(This \337ag indicates that objects of this class will neither be) 243 405.33 T
-0.65 (written to a state \336le nor be loaded in from a resource. This \337ag) 243 393.33 P
(should only be used for classes whose objects will only be) 243 381.33 T
(created at run-time \050not declared in the) 243 369.33 T
3 F
(.goc) 428.56 369.33 T
1 F
( \336le\051 and for) 449.12 369.33 T
(process classes.) 243 357.33 T
4 F
(discardOnSave) 180 338.33 T
1 F
(This \337ag applies only to master classes. Objects of this class) 243 326.33 T
(will never be saved to a state \336le and must be re-initialized) 243 314.33 T
(each time they are loaded. If you want an object simply to) 243 302.33 T
-0.73 (revert to its default con\336guration each time it is loaded, use the) 243 290.33 P
(\337ag) 243 278.33 T
4 F
(ignoreDirty) 262.82 278.33 T
1 F
( instead in the object\325) 315.58 278.33 T
(s declaration \050see) 413.56 278.33 T
3 F
(@object) 243 266.33 T
1 F
(, below\051.) 282.14 266.33 T
(In addition, any variant class can have a default superclass. The variant is) 180 247.33 T
-0.04 (resolved at compile-time to have the default superclass as its superclass. T) 180 234.33 P
-0.04 (o) 523.26 234.33 P
(set a default superclass for a variant class, add a line with the following) 180 221.33 T
(structure in the class de\336nition:) 180 208.33 T
5 F
(@default <varRoot> = <super>;) 216 192.33 T
3 F
(varRoot) 180 171.33 T
1 F
(The name of the variant class with \322Class\323 removed. \050For) 243 171.33 T
(example, GenClass would be speci\336ed as \322Gen.\323\051) 243 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "185" 45
%%Page: "186" 46
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(186) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(super) 180 641.33 T
1 F
(The name of the superclass to set as the default.) 243 641.33 T
-0.06 (Sometimes a variant class will know that it will be the subclass of a speci\336c) 180 622.33 P
-0.38 (class, though it doesn\325) 180 609.33 P
-0.38 (t know \050at compile time\051 just how that ancestry will be) 280.35 609.33 P
(traced. Y) 180 596.33 T
(ou can use the) 220.56 596.33 T
3 F
(@uses) 289.64 596.33 T
1 F
( directive to let the compiler know this; that) 319.7 596.33 T
-0.13 (way) 180 583.33 P
-0.13 (, the variant class can de\336ne handlers for the \322used\323 class. For example,) 197.6 583.33 P
-0.38 (if you know that variant class) 180 570.33 P
3 F
-0.4 (MyV) 318.09 570.33 P
-0.4 (ariantClass) 340.68 570.33 P
1 F
-0.38 ( will always be resolved as a) 400.31 570.33 P
(descendant of) 180 557.33 T
3 F
(MyAncestorClass) 246.11 557.33 T
1 F
(, you can put the directive) 335.74 557.33 T
5 F
(@uses MyAncestorClass;) 216 541.33 T
1 F
(in the de\336nition of) 180 520.33 T
3 F
(MyV) 267.97 520.33 T
(ariantClass) 290.56 520.33 T
1 F
(. The general format is) 350.19 520.33 T
5 F
(@uses <class>;) 216 504.33 T
3 F
(class) 180 483.33 T
1 F
(The class which will always be an ancestor to this class.) 243 483.33 T
81 451.98 531 464 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 451.98 531 464 R
7 X
0 0 0 1 0 0 0 K
V
76.5 459.23 617.5 462.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 445.31 T
(5-) 147.13 445.31 T
(6 De\336ning Classes) 156.02 445.31 T
5 9 Q
(/* The @class keyword defines a new class or subclass. @endc ends the class) 81 430.98 T
( * definition, and @classdecl must be put somewhere in the code to make sure Glue) 81 419.98 T
( * will link the class structure into the compiled geode.*/) 81 408.98 T
(@class) 81 390.98 T
(MyNewClass, VisClass;) 125 390.98 T
(/* Message declarations would go here. See @message.) 102.6 379.98 T
( * Instance data field declarations would go here. See @instance) 102.6 368.98 T
( *) 102.6 357.98 T
(and @vardata. */) 344 357.98 T
(@endc) 81 346.98 T
(@classdecl MyNewClass, neverSaved;) 81 335.98 T
(@class) 81 317.98 T
(MyTriggerClass, GenTriggerClass;) 125 317.98 T
(/* New messages for this subclass are defined here. */) 102.6 306.98 T
(/* New instance data fields for this subclass are defined here. */) 102.6 295.98 T
(@endc) 81 284.98 T
(@classdecl MyTriggerClass;) 81 273.98 T
(/* When defining a variant class \050which must also be a master class\051, you can) 81 255.98 T
( * set a superclass for the variant at compile-time using @default. */) 81 244.98 T
(@class) 81 226.98 T
(MyNewVariantClass, MetaClass, master, variant;) 125 226.98 T
(@default) 102.6 215.98 T
(MyNewVariant = VisClass;) 168.98 215.98 T
(@endc) 81 204.98 T
(MyNewVariantClass) 125 204.98 T
(@classdecl MyNewVariantClass;) 81 193.98 T
81 169.95 531 181.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 169.95 531 181.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 177.2 617.5 180.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
81 518.8 171 628.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(@uses directive) 81 575.45 T
1 F
(If you do not create) 81 559.45 T
(variant classes, you) 81 548.45 T
-0.63 (will never need to use) 81 537.45 P
(the @uses directive.) 81 526.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81.5 627.95 170.5 627.95 2 L
1 H
2 Z
N
1 X
90 450 13.5 13.5 101.25 604.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 604.33 A
0 0 0 1 0 0 0 K
81 584.21 121.5 624.71 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "186" 46
%%Page: "187" 47
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(187) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.1.1) 119.19 638.67 T
(De\336ning New Messages for a Class) 180 638.67 T
5 10 Q
(@message, @stack, @reserveMessages, @exportMessages,) 180 616.33 T
(@importMessage, @alias, @prototype) 180 603.33 T
1 F
(As discussed in section 5.3.3 on page 180, messages are simply 16-bit) 180 583.33 T
(numbers allocated as an enumerated type. When a new class is de\336ned, a) 180 570.33 T
-0.29 (constant is automatically created representing the \336rst message number for) 180 557.33 P
-0.18 (the class. This constant is then used as the \336rst number in the enumeration) 180 544.33 P
(of messages.) 180 531.33 T
-0.46 (The constant is built off the class\325 superclass.) 180 511.33 P
3 F
-0.47 (MetaClass) 387.87 511.33 P
1 F
-0.46 ( has the \336rst 16384) 441.2 511.33 P
(messages reserved for its use. Each master level gets 8192, and the \336rst) 180 498.33 T
-0.08 (master class of a level gets 2048 of these. All other classes are allocated 512) 180 485.33 P
-0.86 (message spots. Thus, a master class subclassed directly off) 180 472.33 P
3 F
-0.88 (MetaClass) 446.04 472.33 P
1 F
-0.86 ( would) 499.37 472.33 P
-0.37 (have 2048 messages beginning with number #16384 \050since the numbering is) 180 459.33 P
(zero-based\051. A subclass of this would have 512 messages beginning with) 180 446.33 T
(number #18432.) 180 433.33 T
-0.44 (This numbering scheme ensures that no two classes at different levels in the) 180 413.33 P
-0.35 (class hierarchy will have the same message number) 180 400.33 P
-0.35 (. Speci\336cally) 416.81 400.33 P
-0.35 (, a class will) 473.32 400.33 P
(never have the same message number as one of its sub- or superclasses.) 180 387.33 T
(New messages must be de\336ned in the class de\336nition between the) 180 367.33 T
3 F
(@class) 487.27 367.33 T
1 F
(and) 180 354.33 T
3 F
(@endc) 200.19 354.33 T
1 F
( keywords \050see above\051. They are de\336ned much like normal) 232.48 354.33 T
(function calls and follow the normal) 180 341.33 T
1 9 Q
(C) 348.72 341.33 T
1 10 Q
( calling conventions \050see Code) 355.22 341.33 T
(Display) 180 328.33 T
(5-) 218.16 328.33 T
(7 for examples\051. If your class uses messages from its superclass,) 227.05 328.33 T
-0.14 (you do) 180 315.33 P
4 F
-0.14 (not) 212.5 315.33 P
1 F
-0.14 ( have to declare these messages in your class de\336nition\321they are) 227.13 315.33 P
-0.04 (inherited automatically) 180 302.33 P
-0.04 (. This is true even if you are subclassing the method) 287.94 302.33 P
(to alter its functionality) 180 289.33 T
(.) 289.09 289.33 T
(T) 180 269.33 T
(o de\336ne a new message, use the) 185.75 269.33 T
3 F
(@message) 335.22 269.33 T
1 F
( keyword. This keyword takes) 386.02 269.33 T
(the following parameters:) 180 256.33 T
5 F
(@message) 216 240.33 T
(<retType> <mname>\050<param>*\051;) 282 240.33 T
3 F
(retT) 180 219.33 T
(ype) 201.89 219.33 T
1 F
-0.2 (This is the data type of the return value of the message. It can) 243 219.33 P
-0.51 (be any standard) 243 207.33 P
1 9 Q
-0.46 (C) 319.08 207.33 P
1 10 Q
-0.51 ( or) 325.58 207.33 P
1 9 Q
-0.46 (GEOS) 339.56 207.33 P
1 10 Q
-0.51 ( data type \050excluding structures\051, or) 365.73 207.33 P
(a pointer to a structure. If this message has multiple return) 243 195.33 T
-0.1 (values, you must do as in) 243 183.33 P
1 9 Q
-0.09 (C) 361.86 183.33 P
1 10 Q
-0.1 ( function calls and pass pointers to) 368.36 183.33 P
(buffers for the return information.) 243 171.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "187" 47
%%Page: "188" 48
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(188) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(mname) 180 641.33 T
1 F
-0.64 (This is the name of the message. By convention, it will be) 243 641.33 P
1 9 Q
-0.57 (MSG_) 503.19 641.33 P
1 10 Q
(followed by a shortened version of the name of the class and) 243 629.33 T
(then some useful name \050e.g.,) 243 617.33 T
1 9 Q
(MSG_MET) 377.46 617.33 T
(A_INITIALIZE) 423.63 617.33 T
1 10 Q
(\051.) 487.12 617.33 T
3 F
(param) 180 598.33 T
1 F
(This represents one or more parameters. Messages may have) 243 598.33 T
(no parameters, one parameter) 243 586.33 T
(, or several parameters.) 382.27 586.33 T
(Parameter de\336nition is essentially the same as de\336nition of) 243 574.33 T
(function parameters; see Code Display) 243 562.33 T
(5-) 423.94 562.33 T
(7 for examples.) 432.83 562.33 T
1 9 Q
(NOTE) 180 543.33 T
1 10 Q
(: When de\336ning a function with no parameters, it is best to declare it) 206.84 543.33 T
-0.34 (with \322void\323 between the parentheses. This will make sure Goc gives an error) 180 530.33 P
(if the function is called with arguments.) 180 517.33 T
0 12 Q
(Messages for Use with Assembly Code) 180 491 T
1 10 Q
( The) 180 469.33 T
3 F
(@stack) 203.34 469.33 T
1 F
( keyword indicates that parameters are passed on the stack; it) 238.41 469.33 T
(is important to note that because of calling conventions, parameters passed) 180 456.33 T
-0.72 (on the stack must be listed in the message de\336nition) 180 443.33 P
4 F
-0.72 (in reverse order) 418.36 443.33 P
1 F
-0.72 ( from the) 488.17 443.33 P
-0.02 (way the handler pops them from the stack. This keyword is used only when) 180 430.33 P
-0.2 (the message may be handled by an assembly language method; its format is) 180 417.33 P
(shown below:) 180 404.33 T
5 F
(@message <retType> <mname>\050@stack <param>*\051;) 216 388.33 T
1 F
(All the parameters shown in the formats are the same as in the normal) 180 367.33 T
3 F
(@message) 180 354.33 T
1 F
( format.) 230.8 354.33 T
81 321.98 531 334 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 321.98 531 334 R
7 X
0 0 0 1 0 0 0 K
V
76.5 329.23 617.5 332.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 315.31 T
(5-) 147.13 315.31 T
(7 De\336ning Messages) 156.02 315.31 T
5 9 Q
(/* Each message is defined for a class within the class definition. */) 125 300.98 T
(@class) 81 289.98 T
(MyTriggerClass, GenTriggerClass;) 125 289.98 T
(/* All the new messages MyTriggerClass can handle are defined here. */) 125 278.98 T
(@message void MSG_MYTRIG_SET_COLOR\050colors colorIndex\051;) 81 267.98 T
(@message optr MSG_MYTRIG_RETURN_OPTR\050 void \051;) 81 256.98 T
(@message void MSG_MYTRIG_COLLECT_PARAMS\050byte bParam, word wParam, char * string\051;) 81 245.98 T
(/* Instance data fields would be defined here. */) 125 234.98 T
(@endc) 81 216.98 T
(@classdecl MyTriggerClass;) 81 205.98 T
81 181.95 531 193.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 181.95 531 193.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 189.2 617.5 192.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "188" 48
%%Page: "189" 49
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(189) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Exporting, Importing, and Reserving Message Ranges) 180 640 T
1 10 Q
(As discussed above, message numbers are assigned based on the class\325) 180 618.33 T
(location in the class tree. No message number will ever con\337ict with) 180 605.33 T
-0.9 (messages de\336ned in the class\325 superclasses. However) 180 592.33 P
-0.9 (, the assignment scheme) 418.3 592.33 P
-0.28 (opens up the possibility that classes on the same level in the class tree could) 180 579.33 P
(have con\337icting message numbers \050see Figure) 180 566.33 T
(5-) 395.01 566.33 T
(7\051.) 403.9 566.33 T
-0.73 (Normally) 180 309.47 P
-0.73 (, this is not a problem. If subclasses are to receive the same message) 222.6 309.47 P
(and handle it differently) 180 296.47 T
(, the message can typically be de\336ned in the) 291.86 296.47 T
-0.77 (superclass and simply be intercepted by the subclasses. Sometimes, however) 180 283.47 P
-0.77 (,) 526.22 283.47 P
(different subclasses will need to have different de\336nitions for the same) 180 270.47 T
-0.24 (messages. For example, a class supplied by a library may be used by several) 180 257.47 P
-0.15 (applications; if the applications each create a subclass, these subclasses can) 180 244.47 P
-0.33 (import particular messages that will be the same for all the subclasses in all) 180 231.47 P
(the applications.) 180 218.47 T
(Goc therefore allows a class to export a range of message numbers which) 180 198.47 T
(subclasses can import and create speci\336c de\336nitions for) 180 185.47 T
(. This allows you) 435.19 185.47 T
(greater control over what aspects of the class you can de\336ne.) 180 172.47 T
81 144 531 648 C
180 326.14 531 563 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 181 393.84 T
(5-) 214.34 393.84 T
(16) 223.23 393.84 T
4 F
(Con\337icting Message Numbers) 237.13 393.84 T
-0.12 (Although no class\325 message numbers will ever con\337ict with its superclasses\325,) 181 379.84 P
-0.1 (it is possible, and even likely) 181 367.84 P
-0.1 (, for classes of the same level to have con\337icting) 310.66 367.84 P
(message numbers. For example,) 181 355.84 T
4 9 Q
(MSG_S2_C) 329.12 355.84 T
4 10 Q
( and) 377.13 355.84 T
4 9 Q
(MSG_S3_C) 400.65 355.84 T
4 10 Q
( both have the) 448.65 355.84 T
(message number) 181 343.84 T
(.) 255.8 343.84 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
301.93 507.73 397.36 538.84 R
7 X
V
0.5 H
0 Z
0 X
N
(Root Class) 325.2 543.67 T
4 8 Q
(MSG_RC_A = 16384) 311.6 530.16 T
(MSG_RC_B = 16385) 311.6 521.16 T
(MSG_RC_C = 16386) 311.6 512.16 T
181.73 427.8 276.6 452.8 R
7 X
V
0 X
N
4 10 Q
(Subclass 1) 204.63 458.45 T
4 8 Q
(MSG_S1_A = 18432) 192.13 442.46 T
(MSG_S2_B = 18433) 192.06 433.46 T
304.43 419.46 399.3 452.8 R
7 X
V
0 X
N
4 10 Q
(Subclass 2) 327.33 458.45 T
4 8 Q
(MSG_S2_A = 18432) 314.83 441.9 T
(MSG_S2_B = 18433) 314.76 432.9 T
(MSG_S2_C = 18434) 314.76 423.9 T
427.12 411.13 521.99 452.8 R
7 X
V
0 X
N
4 10 Q
(Subclass 3) 450.02 458.45 T
4 8 Q
(MSG_S3_A = 18432) 437.53 442.46 T
(MSG_S3_B = 18433) 437.45 433.46 T
(MSG_S3_C = 18434) 437.45 424.46 T
(MSG_S3_D = 18435) 437.23 415.46 T
319.2 503.78 253.48 469.34 2 L
7 X
V
1 H
2 Z
3 X
N
384.53 503.78 450.25 469.34 2 L
7 X
V
3 X
N
353.04 503.5 353.04 469.61 2 L
7 X
V
3 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "189" 49
%%Page: "190" 50
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(190) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.84 (T) 180 641.33 P
-0.84 (o export a range of messages, use the) 185.75 641.33 P
3 F
-0.86 (@exportMessages) 353.34 641.33 P
1 F
-0.84 ( keyword. This will) 443.4 641.33 P
-0.79 (set aside several message numbers which can then be imported by subclasses) 180 628.33 P
(using the) 180 615.33 T
3 F
(@importMessage) 225.93 615.33 T
1 F
( keyword.) 312.47 615.33 T
(Another potential problem is upgrading your program from release to) 180 595.33 T
(release. If you create classes that may grow in the future, you may want to) 180 582.33 T
-0.32 (reserve a number of message spots to ensure that those spots can be \336lled in) 180 569.33 P
-0.57 (later) 180 556.33 P
-0.57 (. Nothing is done with the spots; they are simply place holders for future) 201.3 556.33 P
(upgrades. Y) 180 543.33 T
(ou can use the) 234.08 543.33 T
3 F
(@reserveMessages) 303.16 543.33 T
1 F
( keyword to reserve a range) 397.85 543.33 T
(of any size. The parameters of these three keywords are shown below:) 180 530.33 T
5 F
(@reserveMessages) 216 514.33 T
(<num>;) 336 514.33 T
(@exportMessages) 216 500.33 T
(<expName>, <num>;) 336 500.33 T
(@importMessage) 216 486.33 T
(<expName>, <messageDef>;) 336 486.33 T
3 F
(num) 180 465.33 T
1 F
(This is the number of messages in the exported range.) 243 465.33 T
3 F
(expName) 180 446.33 T
1 F
(This is the name of the exported range. This is used when) 243 446.33 T
(importing messages to ensure that the proper numbers are) 243 434.33 T
(used.) 243 422.33 T
3 F
(messageDef) 180 403.33 T
1 F
(This is a standard message de\336nition line, the same as would) 243 391.33 T
(be found with the) 243 379.33 T
3 F
(@message) 326.9 379.33 T
1 F
( keyword \050though) 377.7 379.33 T
3 F
(@message) 461.22 379.33 T
1 F
( is) 512.02 379.33 T
(left out\051.) 243 367.33 T
(Note that you do not) 180 348.33 T
4 F
(need) 277.61 348.33 T
1 F
( to reserve messages for upgrades; any class can) 298.71 348.33 T
-0.5 (always have messages tacked on to the end of its class de\336nition. If you want) 180 335.33 P
(to group the messages logically) 180 322.33 T
(, however) 322.61 322.33 T
(, you should reserve ranges where) 366.13 322.33 T
(you expect additions to be made.) 180 309.33 T
0 12 Q
(Aliasing Messages) 180 283 T
1 10 Q
(The) 180 261.33 T
3 F
(@alias) 200.56 261.33 T
1 F
( keyword allows a single message to have more than one) 232.47 261.33 T
(pass/return format. The) 180 248.33 T
3 F
(@prototype) 293.34 248.33 T
1 F
( keyword allows quick, clean, and) 351.93 248.33 T
-0.07 (convenient repetition of a single format for many different messages; it also) 180 235.33 P
-0.29 (allows a class to create a prototype so users of a message can have their own) 180 222.33 P
(messages with the same format.) 180 209.33 T
3 F
(@alias) 180 189.33 T
1 F
( is used when a single method takes conditional parameters. For) 211.91 189.33 T
-0.81 (example, a method may take a word value in a certain case and a dword value) 180 176.33 P
-0.72 (in another \050dependent upon a passed \337ag\051. Each condition must be accounted) 180 163.33 P
(for in its own message format. Rather than create a message and a method) 180 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "190" 50
%%Page: "191" 51
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(191) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(for each case, you can create a single assembly-language method for all the) 180 641.33 T
(different pass/return formats; then, you can use) 180 628.33 T
3 F
(@alias) 403.52 628.33 T
1 F
( to make several) 435.43 628.33 T
(messages refer to the same method, each using a different format.) 180 615.33 T
5 F
(@alias\050<protoMsg>\051 <msgDef>;) 216 599.33 T
3 F
(protoMsg) 180 578.33 T
1 F
-0.42 (The name of the original message. The new message may have) 243 578.33 P
(different pass/return values but will invoke the same method) 243 566.33 T
(code and will have the same message number) 243 554.33 T
(.) 452.85 554.33 T
3 F
(msgDef) 180 535.33 T
1 F
(The new message de\336nition. It follows the same format as) 243 535.33 T
(messages de\336ned with the) 243 523.33 T
3 F
(@message) 367.46 523.33 T
1 F
( keyword \050with) 418.26 523.33 T
3 F
(@message) 243 511.33 T
1 F
( left off\051.) 293.8 511.33 T
-0.04 (In addition, if you have a single pass/return format for many messages, you) 180 492.33 P
(can use the) 180 479.33 T
3 F
(@prototype) 235.19 479.33 T
1 F
( keyword as coding shorthand. For example, if an) 293.78 479.33 T
(object has ten messages that all take two parameters and return a single) 180 466.33 T
-0.57 (value, you can set up the format with the) 180 453.33 P
3 F
-0.59 (@prototype) 367.85 453.33 P
1 F
-0.57 ( keyword and then use) 426.44 453.33 P
(a simpler format for de\336nition of your messages. An example is shown in) 180 440.33 T
(Code Display) 180 427.33 T
(5-) 243.9 427.33 T
(8, and the parameters of this keyword are shown below) 252.79 427.33 T
(.) 507.28 427.33 T
5 F
(@prototype <msgDef>;) 216 411.33 T
3 F
(msgDef) 180 390.33 T
1 F
(This is the standard message de\336nition. For the message) 243 390.33 T
(name, use something like \322) 243 378.33 T
1 9 Q
(MY_PROTOTYPE) 367.47 378.33 T
1 10 Q
(\323 that you can) 444.15 378.33 T
-0.52 (insert later into the de\336nitions of your real messages. All other) 243 366.33 P
(parts of the message de\336nition are the same as would be) 243 354.33 T
(declared with) 243 342.33 T
3 F
(@message) 308.56 342.33 T
1 F
( \050with) 359.36 342.33 T
3 F
(@message) 389.18 342.33 T
1 F
( left off\051.) 439.98 342.33 T
81 310.98 531 323 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 310.98 531 323 R
7 X
0 0 0 1 0 0 0 K
V
76.5 318.23 617.5 321.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 304.31 T
(5-) 147.13 304.31 T
(8 Aliasing Messages) 156.02 304.31 T
5 9 Q
(/* MyClass in this example uses both prototype and aliased messages. */) 125 289.98 T
(@class MyClass, MetaClass;) 81 278.98 T
(/* The following is a normal message declaration. The register that this) 125 267.98 T
( * parameter uses is specified because the handler \050method\051 is written in) 125 256.98 T
( * assembly language. */) 125 245.98 T
(@message void MSG_MESSAGE_WITH_WORD\050byte flag = cl, word value = dx\051;) 81 234.98 T
(/* The following message invokes the same method as the alias above.) 125 216.98 T
( * It has the same message number but passes a different sized parameter) 125 205.98 T
( * in different registers. */) 125 194.98 T
(@alias\050MSG_MESSAGE_WITH_WORD\051 void MSG_MESSAGE_WITH_DWORD\050byte flag = cl,) 81 183.98 T
(dword value = dx:bp\051;) 388 172.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "191" 51
%%Page: "192" 52
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(192) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(/* The following message is not used. Its pass and return values can) 125 642 T
( * be used elsewhere, however, to ensure that all handlers of this message) 125 631 T
( * type are given the same format. */) 125 620 T
(@prototype int MSG_MYCLASS_PROTO\050int a, int b\051;) 81 609 T
(/* The following have the same return values and parameters) 125 591 T
( * as the prototype above. */) 125 580 T
(@message\050MSG_MYCLASS_PROTO\051 MSG_MY_CLASS_ADD;) 81 569 T
(@message\050MSG_MYCLASS_PROTO\051 MSG_MY_CLASS_SUBTRACT;) 81 558 T
(@message\050MSG_MYCLASS_PROTO\051 MSG_MY_CLASS_MULTIPLY;) 81 547 T
(@endc) 81 529 T
(@classdecl MyClass;) 81 518 T
81 493.98 531 506 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 493.98 531 506 R
7 X
0 0 0 1 0 0 0 K
V
76.5 501.23 617.5 504.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.1.2) 119.19 462.64 T
(De\336ning Instance Data Fields) 180 462.64 T
5 10 Q
-1.8 (@instance, @composite, @link, @visMoniker, @kbdAccelerator,) 180 440.31 P
(@activeList) 180 427.31 T
1 F
(Instance data \336elds are all de\336ned with the) 180 407.31 T
3 F
(@instance) 383.92 407.31 T
1 F
( keyword. Other) 435.46 407.31 T
-0.11 (keywords may be included in the) 180 394.31 P
3 F
-0.11 (@instance) 333.99 394.31 P
1 F
-0.11 ( declaration for special types of) 385.54 394.31 P
(data. All instance data de\336nitions must appear between the class\325) 180 381.31 T
3 F
(@class) 486.73 381.31 T
1 F
(and) 180 368.31 T
3 F
(@endc) 200.19 368.31 T
1 F
( keywords \050see above under class de\336nition\051.) 232.48 368.31 T
-0.1 (The) 180 348.31 P
3 F
-0.1 (@instance) 200.46 348.31 P
1 F
-0.1 ( keyword is used to de\336ne normal instance data. If you have) 252 348.31 P
(data that must be added or removed dynamically \050such as hints\051, use the) 180 335.31 T
3 F
-0.87 (@vardata) 180 322.31 P
1 F
-0.85 ( keyword, described in section 5.4.1.4 on page 195. Also, if you have) 228.03 322.31 P
-0.32 (data that requires relocation \050such as pointers to \336xed data\051 when the object) 180 309.31 P
(is loaded, use the) 180 296.31 T
3 F
(@reloc) 262.61 296.31 T
1 F
( keyword.) 296.2 296.31 T
(The format of the) 180 276.31 T
3 F
(@instance) 263.34 276.31 T
1 F
( keyword is as follows:) 314.88 276.31 T
5 F
(@instance) 216 260.31 T
(<insType>) 294 260.31 T
(<iname> = <default>;) 372 260.31 T
3 F
(insT) 180 239.31 T
(ype) 202.25 239.31 T
1 F
-0.05 (A standard) 243 239.31 P
1 9 Q
-0.05 (C) 297.34 239.31 P
1 10 Q
-0.05 ( or) 303.84 239.31 P
1 9 Q
-0.05 (GEOS) 318.73 239.31 P
1 10 Q
-0.05 ( data or structure type representing the) 344.9 239.31 P
(data type of the instance \336eld.) 243 227.31 T
3 F
(iname) 180 208.31 T
1 F
(The name of the instance \336eld.) 243 208.31 T
3 F
(default) 180 189.31 T
1 F
-0.19 (The default value of the instance \336eld if it is not \336lled in when) 243 189.31 P
-0.8 (an object of this class is instantiated. The value must, of course,) 243 177.31 P
(be appropriate for the data type.) 243 165.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "192" 52
%%Page: "193" 53
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(193) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Goc has several special types of instance data \336elds that you can declare) 180 641.33 T
-0.19 (along with) 180 628.33 P
3 F
-0.19 (@instance) 231.3 628.33 P
1 F
-0.19 ( to make object de\336nition easier) 282.85 628.33 P
-0.19 (. The format for using) 428.23 628.33 P
-0.25 (one of the special types is shown below \050with examples in Code Display) 180 615.33 P
-0.25 (5-) 507.92 615.33 P
-0.25 (9\051.) 516.8 615.33 P
(Each of the types is also described below) 180 602.33 T
(.) 366.14 602.33 T
5 F
(@instance) 216 586.33 T
(<specType> <iname>;) 294 586.33 T
3 F
(specT) 180 565.33 T
(ype) 209.67 565.33 T
1 F
-0.09 (This is the keyword \050one of those shown in the list below\051 that) 243 565.33 P
(de\336nes the special type of this \336eld.) 243 553.33 T
3 F
(iname) 180 534.33 T
1 F
(This is the name of the instance \336eld.) 243 534.33 T
(The special types are given here:) 180 515.33 T
3 F
(@composite) 180 495.33 T
1 F
(This \336eld is used when objects of the class being de\336ned are) 243 495.33 T
(allowed to have children. The) 243 483.33 T
3 F
(@composite) 381.91 483.33 T
1 F
( \336eld will actually) 442.16 483.33 T
(contain an optr to the \336rst child object in an object tree. Since) 243 471.33 T
(most objects in object trees are subclassed from) 243 459.33 T
3 F
(V) 464.31 459.33 T
(isClass) 471.46 459.33 T
1 F
( or) 507.57 459.33 T
3 F
(GenClass) 243 447.33 T
1 F
(, you will most likely never use the) 291.33 447.33 T
3 F
(@composite) 454.88 447.33 T
1 F
(keyword. Both) 243 435.33 T
3 F
(V) 312.82 435.33 T
(isCompClass) 319.97 435.33 T
1 F
( and) 386.27 435.33 T
3 F
(GenClass) 409.24 435.33 T
1 F
( have) 457.57 435.33 T
3 F
(@composite) 243 423.33 T
1 F
( \336elds prede\336ned. The) 303.25 423.33 T
3 F
(@composite) 408.44 423.33 T
1 F
( type has a) 468.69 423.33 T
(special format, shown below:) 243 411.33 T
5 F
(@instance) 216 396.33 T
(@composite <iname> = <linkName>;) 282 396.33 T
1 F
-0.29 (where) 243 375.33 P
4 F
-0.29 (iname) 273.82 375.33 P
1 F
-0.29 ( is the name of the instance \336eld and) 302.33 375.33 P
4 F
-0.29 (linkName) 472.69 375.33 P
1 F
-0.29 ( is) 518.24 375.33 P
(the name of the \336eld designated as) 243 363.33 T
3 F
(@link) 406.73 363.33 T
1 F
( \050below\051. Note that) 434.94 363.33 T
(there must be a) 243 351.33 T
3 F
(@link) 318.2 351.33 T
1 F
( \336eld in every class that has a) 346.41 351.33 T
3 F
(@composite) 243 339.33 T
1 F
( \336eld. See section 5.4.6.4 on page 232 for more) 303.25 339.33 T
(information on object trees and the composite and link \336elds.) 243 327.33 T
3 F
(@link) 180 308.33 T
1 F
(This \336eld is used by objects that can be children in an object) 243 308.33 T
-0.1 (tree. Where the) 243 296.33 P
3 F
-0.11 (@composite) 317.5 296.33 P
1 F
-0.1 ( \336eld points to the \336rst child, the) 377.75 296.33 P
3 F
-0.64 (@link) 243 284.33 P
1 F
-0.62 ( \336eld points to the next sibling. If there is no next sibling,) 271.21 284.33 P
-0.74 (this \336eld will point back to the parent object. Since most objects) 243 272.33 P
-0.53 (in object trees are subclassed from) 243 260.33 P
3 F
-0.54 (V) 401.7 260.33 P
-0.54 (isClass) 408.85 260.33 P
1 F
-0.53 ( or) 444.96 260.33 P
3 F
-0.54 (GenClass) 458.9 260.33 P
1 F
-0.53 (, you) 507.23 260.33 P
(will most likely never use the) 243 248.33 T
3 F
(@link) 381.73 248.33 T
1 F
( keyword. Both) 409.94 248.33 T
3 F
(V) 482.54 248.33 T
(isClass) 489.69 248.33 T
1 F
(and) 243 236.33 T
3 F
(GenClass) 263.19 236.33 T
1 F
( have) 311.52 236.33 T
3 F
(@link) 339.12 236.33 T
1 F
( \336elds prede\336ned.) 367.33 236.33 T
3 F
(@visMoniker) 180 217.33 T
1 F
-0.71 (This \336eld is designated as holding a pointer to a visual moniker) 243 205.33 P
(chunk for the object. It is used in) 243 193.33 T
3 F
(GenClass) 397.82 193.33 T
1 F
(\321see \322GenClass,\323) 446.15 193.33 T
(Chapter) 243 181.33 T
(2 of the Objects Book for information on the) 283.74 181.33 T
4 9 Q
-0.8 (GI) 243 169.33 P
4 10 Q
-0.88 (_visMoniker) 253.66 169.33 P
1 F
-0.88 ( \336eld. The moniker or moniker list must be in the) 309.95 169.33 P
(same resource as the generic object using that moniker since) 243 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "193" 53
%%Page: "194" 54
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(194) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.11 (only the chunk\325) 243 641.33 P
-0.11 (s handle is stored. A moniker list can store full) 313.35 641.33 P
-0.59 (object pointers to its monikers, so monikers referenced by a list) 243 629.33 P
-0.36 (need not be in the same resource as that list; thus if an object\325) 243 617.33 P
-0.36 (s) 523.95 617.33 P
-0.62 (moniker is speci\336ed via a list, then while the list must be in the) 243 605.33 P
-0.44 (same resource as the object, the monikers themselves need not) 243 593.33 P
(be.) 243 581.33 T
3 F
(@kbdAccelerator) 180 562.33 T
1 F
(This \336eld contains a character sequence that, when typed by) 243 550.33 T
-0.27 (the user) 243 538.33 P
-0.27 (, causes the object to execute its default operation. For) 279.95 538.33 P
(example, a keyboard accelerator could invoke a trigger) 243 526.33 T
(implemented as a menu item. It is used in) 243 514.33 T
3 F
(GenClass) 440.63 514.33 T
1 F
( only) 488.96 514.33 T
(.) 510.26 514.33 T
81 482.98 531 495 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 482.98 531 495 R
7 X
0 0 0 1 0 0 0 K
V
76.5 490.23 617.5 493.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 476.31 T
(5-) 147.13 476.31 T
(9 Declaring Instance Data Fields) 156.02 476.31 T
5 9 Q
(/* GenClass is a good example of many of the different types of fields. */) 81 461.98 T
(@class) 81 443.98 T
(GenClass, VisClass, master, variant;) 125 443.98 T
(/* The GenClass messages are defined here. */) 125 425.98 T
(@instance @link GI_link;) 102.6 407.98 T
(@instance @composite GI_comp = GI_link;) 102.6 396.98 T
(@instance @visMoniker GI_visMoniker;) 102.6 385.98 T
(@instance @kbdAccelerator GI_kbdAccelerator;) 102.6 374.98 T
(@instance byte GI_attrs = 0;) 102.6 363.98 T
(@instance byte GI_states = \050GS_USABLE|GS_ENABLED\051;) 102.6 352.98 T
(/* Hints and other variable data fields are defined with @vardata. */) 125 334.98 T
(@endc) 81 316.98 T
81 292.95 531 304.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 292.95 531 304.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 300.2 617.5 303.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.1.3) 119.19 261.62 T
(New Defaults for Subclassed Instance Data Fields) 180 261.62 T
5 10 Q
(@default) 180 239.29 T
1 F
(Recall that when de\336ning an instance data \336eld you can set up a default) 180 219.29 T
(value for that \336eld. When creating a subclass, you may wish to specify that) 180 206.29 T
(the subclass should have a different default value for a given \336eld than the) 180 193.29 T
(superclass does. Use the) 180 180.29 T
3 F
(@default) 295.38 180.29 T
1 F
( keyword to do this:) 339.89 180.29 T
5 F
(@default) 216 164.29 T
(<iname> = <default>;) 270 164.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "194" 54
%%Page: "195" 55
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(195) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(iname) 180 641.33 T
1 F
(The name of the instance \336eld.) 243 641.33 T
3 F
(default) 180 622.33 T
1 F
(The new default value of the instance \336eld if it is not \336lled in) 243 622.33 T
-0.19 (when an object of this class is instantiated. The value must, of) 243 610.33 P
-0.75 (course, be appropriate for the data type. Y) 243 598.33 P
-0.75 (ou may use) 431.68 598.33 P
3 F
-0.77 (@default) 484.46 598.33 P
1 F
-0.13 (as part of this value; this @default will be treated as the value) 243 586.33 P
(of the superclass. \050If this seems confusing, try looking at the) 243 574.33 T
(example.\051) 243 562.33 T
(For example, a subclass of GenInteraction could set) 180 543.33 T
1 9 Q
(GIV_DIALOG) 420.95 543.33 T
1 10 Q
( as its) 479.78 543.33 T
(default value for the GenInteraction instance \336eld) 180 530.33 T
4 9 Q
(GII) 414.64 530.33 T
4 10 Q
(_visibility) 428.97 530.33 T
1 F
(:) 474.33 530.33 T
5 F
(@default GII_visibility = GIV_DIALOG;) 216 514.33 T
1 F
(A generic class might want to have the same value for its) 180 493.33 T
4 9 Q
(GI) 446.89 493.33 T
4 10 Q
(_states) 457.55 493.33 T
1 F
( \336eld as) 488.65 493.33 T
(its superclass, except with the) 180 480.33 T
1 9 Q
(GS_USABLE) 322.05 480.33 T
1 10 Q
( \337ag turned off:) 377.72 480.33 T
5 F
(@default GI_states = @default & ~GS_USABLE;) 216 464.33 T
0 14 Q
(5.4.1.4) 119.19 429.67 T
(De\336ning and W) 180 429.67 T
(orking W) 281.64 429.67 T
(ith V) 341.41 429.67 T
(ariable Data Fields) 370.97 429.67 T
5 10 Q
(@vardata, @vardataAlias, ObjVarAddData\050\051,) 180 407.33 T
-3 (ObjVarDeleteData\050\051, ObjVarDeleteDataAt\050\051, ObjVarScanData\050\051,) 180 394.33 P
(ObjVarFindData\050\051, ObjVarDerefData\050\051,) 180 381.33 T
(ObjVarDeleteDataRange\050\051, ObjVarCopyDataRange\050\051,) 180 368.33 T
(MSG_META_ADD_VAR_DATA, MSG_META_DELETE_VAR_DATA,) 180 355.33 T
(MSG_META_INITIALIZE_VAR_DATA, MSG_META_GET_VAR_DATA) 180 342.33 T
1 F
(Most classes will have well-de\336ned instance data \336elds; each object in the) 180 322.33 T
(class will have the same data structures, and all the instance chunks will) 180 309.33 T
(look relatively similar and will be the same size.) 180 296.33 T
(Many classes, however) 180 276.33 T
(, will also use \322variable data,\323 or instance \336elds that) 284.82 276.33 T
(may be added or removed dynamically) 180 263.33 T
(. This allows objects within the same) 356.32 263.33 T
(class to have more or less instance data than other objects in the class. One) 180 250.33 T
(example of variable data is the use of hints in generic) 180 237.33 T
1 9 Q
(UI) 429.67 237.33 T
1 10 Q
( objects. Because) 440.67 237.33 T
(each object in a given class may or may not have hints, the objects can) 180 224.33 T
(actually have different instance sizes. V) 180 211.33 T
(ariable data instance \336elds are) 363.35 211.33 T
(de\336ned with the use of the) 180 198.33 T
3 F
(@vardata) 305.38 198.33 T
1 F
( keyword.) 353.41 198.33 T
(Using variable data, however) 180 178.33 T
(, is somewhat more complex than using) 315.03 178.33 T
-0.37 (standard instance data. Y) 180 165.33 P
-0.37 (ou must use special kernel routines or messages to) 297.26 165.33 P
(get a pointer to the data; then you can use the pointer to access the \336eld.) 180 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "195" 55
%%Page: "196" 56
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(196) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(V) 180 641.33 T
(ariable data is stored together at the end of the instance chunk in \322data) 186.3 641.33 T
-0.28 (entries.\323 Each entry consists of a primary word and optional extra data. The) 180 628.33 P
-0.7 (primary word represents a data type de\336ned by the keyword) 180 615.33 P
3 F
-0.72 (@vardata) 455.46 615.33 P
1 F
-0.7 (. This) 503.49 615.33 P
(type is created automatically by Goc when the) 180 602.33 T
3 F
(@vardata) 395.96 602.33 T
1 F
( keyword is used.) 443.99 602.33 T
-0.66 (Each data entry is associated with a master class level and is considered part) 180 318.21 P
(of the instance data for that master level \050despite being stored at the end of) 180 305.21 T
-0.2 (the instance chunk\051. Thus, when a master part of an object is destroyed, the) 180 292.21 P
-0.8 (variable data entries associated with that master class will also be destroyed.) 180 279.22 P
-0.26 (For example, when a) 180 266.22 P
1 9 Q
-0.24 (UI) 278.22 266.22 P
1 10 Q
-0.26 ( object is set not usable \050taken off the screen\051, its V) 289.22 266.22 P
-0.26 (is) 520.7 266.22 P
(master part is removed from the instance chunk; any variable data entries) 180 253.22 T
(associated with) 180 240.22 T
3 F
(V) 254.09 240.22 T
(isClass) 261.24 240.22 T
1 F
( will also be destroyed.) 297.35 240.22 T
-0.3 (V) 180 220.22 P
-0.3 (ariable data may also be tagged for saving to the state \336le. That is, you can) 186.3 220.22 P
-0.05 (set up individual data entries to be saved to a state \336le and to be reinstated) 180 207.22 P
(when the object is loaded from the state \336le. For more information about) 180 194.22 T
(state saving, see section 5.4.6.6 on page 237.) 180 181.22 T
(V) 180 161.22 T
(ariable data may be de\336ned in an object\325) 186.3 161.22 T
(s declaration in your) 372.46 161.22 T
3 F
(.goc) 470.43 161.22 T
1 F
( \336le or) 490.99 161.22 T
(may be added and removed during execution. This gives the potential for) 180 148.22 T
81 144 531 648 C
180 334.88 531 599 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 181.83 450.39 T
(5-) 215.17 450.39 T
(17) 224.06 450.39 T
4 F
(V) 237.96 450.39 T
(ariable Data Storage) 243.71 450.39 T
(The V) 181.83 436.39 T
(arDataEntry structure contains a single variable data entry) 207.76 436.39 T
(. If it has) 481.22 436.39 T
(no \322extra data,\323 the) 181.83 424.39 T
4 9 Q
(VDE) 272.94 424.39 T
4 10 Q
(_entrySize and) 292.78 424.39 T
4 9 Q
(VDE) 363.88 424.39 T
4 10 Q
(_extraData \336elds will not exist) 383.71 424.39 T
(in the entry) 181.83 412.39 T
(. Otherwise,) 233.86 412.39 T
4 9 Q
(VDE) 291.26 412.39 T
4 10 Q
(_entrySize will contain the entire size of the) 311.1 412.39 T
(entry) 181.83 400.39 T
(, and) 204.79 400.39 T
4 9 Q
(VDE) 231.09 400.39 T
4 10 Q
(_extraData will contain the actual data of the type found in) 250.93 400.39 T
4 9 Q
(VDE) 181.83 388.39 T
4 10 Q
(_dataT) 201.67 388.39 T
(ype. The two shaded boxes in) 233.74 388.39 T
4 9 Q
(VDE) 368.91 388.39 T
4 10 Q
(_dataT) 388.74 388.39 T
(ype represent the two) 420.82 388.39 T
(least signi\336cant bits of that \336eld; they are used to store two \337ags. Note that) 181.83 376.39 T
(this structure is shown for illustration only; application programmers will) 181.83 364.39 T
(never have to access it directly) 181.83 352.39 T
(.) 319.2 352.39 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
182.21 560.64 314.19 575.27 R
7 X
V
0.5 H
0 Z
0 X
N
(VDE_dataT) 213.56 564.55 T
(ype) 267.67 564.55 T
182.21 546.01 314.19 560.64 R
7 X
V
0 X
N
(VDE_entrySize) 213.39 549.92 T
182.21 478.7 314.19 546.01 R
7 X
V
0 X
N
(VDE_extraData) 211.72 506.26 T
301.1 560.64 307.65 575.27 R
3 X
V
0 X
N
307.65 560.64 314.19 575.27 R
3 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "196" 56
%%Page: "197" 57
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(197) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(using variable data as temporary storage in an object\325) 180 641.33 T
(s instance chunk;) 428.01 641.33 T
-0.04 (however) 180 628.33 P
-0.04 (, temporary data used in this manner should be kept small to avoid) 217.96 628.33 P
(slowing down the system\321constantly resizing instance chunks to add and) 180 615.33 T
(remove vardata \336elds makes more work for the memory manager) 180 602.33 T
(.) 481.51 602.33 T
-0.45 (T) 180 582.33 P
-0.45 (o de\336ne a variable data type in a given class, use the) 185.75 582.33 P
3 F
-0.46 (@vardata) 426.53 582.33 P
1 F
-0.45 ( keyword as) 474.56 582.33 P
(follows \050an example is given in Code Display) 180 569.33 T
(5-) 388.37 569.33 T
(1) 397.26 569.33 T
(1\051:) 402.27 569.33 T
5 F
(@vardata) 216 553.33 T
(<type>) 288 553.33 T
(<vname>;) 330 553.33 T
3 F
(type) 180 532.33 T
1 F
(This is the data type of any extra data associated with the) 243 532.33 T
-0.68 (variable data. It must be a standard) 243 520.33 P
1 9 Q
-0.61 (C) 408.27 520.33 P
1 10 Q
-0.68 ( or) 414.77 520.33 P
1 9 Q
-0.61 (GEOS) 428.41 520.33 P
1 10 Q
-0.68 ( data type. If the) 454.58 520.33 P
(type) 243 508.33 T
4 F
(void) 265.78 508.33 T
1 F
( is speci\336ed, no extra data will be added to the data) 285.41 508.33 T
(entry when it is created. \050An instance data \336eld may be) 243 496.33 T
(declared as an array) 243 484.33 T
(, just as in standard C.\051) 336.53 484.33 T
3 F
(vname) 180 465.33 T
1 F
(This is the name of the variable data type. This name is used) 243 465.33 T
(whenever referring to the vardata entry) 243 453.33 T
(. Note that no two) 426.7 453.33 T
-0.52 (variable data types should have the same name, even if they\325re) 243 441.33 P
-0.54 (in different classes. Doing so will cause a compilation error) 243 429.33 P
-0.54 (. It\325) 509.48 429.33 P
-0.54 (s) 524.13 429.33 P
(a good practice to put the class name within the data type) 243 417.33 T
(name.) 243 405.33 T
81 373.98 531 386 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 373.98 531 386 R
7 X
0 0 0 1 0 0 0 K
V
76.5 381.23 617.5 384.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 367.31 T
(5-) 147.13 367.31 T
(10 Examples of Instance Data Declarations) 156.02 367.31 T
5 9 Q
(/* These are some data fields for MyDataClass.) 81 352.98 T
( */) 81 341.98 T
(@instance) 102.6 323.98 T
(ChunkHandle) 168.98 323.98 T
(MDI_aChunk;) 256.5 323.98 T
(@instance) 102.6 312.98 T
(HelloInfoFlags) 168.98 312.98 T
(MDI_flags;) 256.5 312.98 T
(@instance) 102.6 301.98 T
(byte) 168.98 301.98 T
(MDI_lotsOfNumbers[32];) 256.5 301.98 T
81 277.95 531 289.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 277.95 531 289.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 285.2 617.5 288.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Some vardata types may have varying amounts of extra data. For example,) 180 260.29 T
-0.15 (one type may have either a word or a dword of extra data. T) 180 247.29 P
-0.15 (o allow this, you) 453.81 247.29 P
(can set up an alias with the new type attached using the keyword) 180 234.29 T
3 F
(@vardataAlias) 180 221.29 T
1 F
(:) 253.95 221.29 T
5 F
(@vardataAlias) 216 205.29 T
(\050<origName>\051 <newType> <newName>;) 306 205.29 T
3 F
(origName) 180 184.29 T
1 F
(This is the name of the original variable data \336eld already) 243 184.29 T
(de\336ned with) 243 172.29 T
3 F
(@vardata) 303.19 172.29 T
1 F
(.) 351.22 172.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "197" 57
%%Page: "198" 58
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(198) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(newT) 180 641.33 T
(ype) 208.18 641.33 T
1 F
-0.23 (This is the data type of the new variable data \336eld, a standard) 243 641.33 P
1 9 Q
(C) 243 629.33 T
1 10 Q
( or) 249.5 629.33 T
1 9 Q
(GEOS) 264.5 629.33 T
1 10 Q
( data type.) 290.67 629.33 T
3 F
(newName) 180 610.33 T
1 F
-0.26 (This is the name of the new variable data \336eld. In essence, the) 243 610.33 P
(original and new \336elds will have the same data type word but) 243 598.33 T
(will have different extra data size.) 243 586.33 T
(As noted earlier and as shown in Figure) 180 567.33 T
(5-) 367.8 567.33 T
(17 on page) 376.69 567.33 T
2 F
(l) 428.93 567.33 T
1 F
(196, the data type) 439.62 567.33 T
(\336eld in the data entry has two \337ags associated with it. These \337ags are each) 180 554.33 T
(one bit:) 180 541.33 T
1 9 Q
(VDF_EXTRA_DA) 180 521.33 T
(T) 253.34 521.33 T
(A) 258.85 521.33 T
1 10 Q
(This \337ag indicates that this data type carries extra data.) 243 509.33 T
1 9 Q
(VDF_SA) 180 490.33 T
(VE_TO_ST) 215.17 490.33 T
(A) 261.35 490.33 T
(TE) 267.35 490.33 T
1 10 Q
(This \337ag indicates that this particular data entry should be) 243 478.33 T
(saved along with all the other object\325) 243 466.33 T
(s instance data when the) 411.92 466.33 T
-0.42 (state is saved. It should likewise be restored when the object is) 243 454.33 P
(restored from the state \336le. Unless set) 243 442.33 T
4 F
(off) 422.46 442.33 T
1 F
( explicitly) 434.12 442.33 T
(, this \337ag) 478.2 442.33 T
(will be set for every data type de\336ned in a) 243 430.33 T
3 F
(.goc) 439.33 430.33 T
1 F
( or) 459.89 430.33 T
3 F
(.goh) 474.89 430.33 T
1 F
( \336le.) 496.74 430.33 T
(The bitmask) 180 411.33 T
1 9 Q
(VDF_TYPE) 240.95 411.33 T
1 10 Q
( is a bitwise) 289.79 411.33 T
1 9 Q
(OR) 347.41 411.33 T
1 10 Q
( of) 360.91 411.33 T
1 9 Q
(VDF_EXTRA_DA) 374.8 411.33 T
(T) 448.14 411.33 T
(A) 453.65 411.33 T
1 10 Q
( and) 460.15 411.33 T
1 9 Q
(VDF_SA) 180 398.33 T
(VE_TO_ST) 215.17 398.33 T
(A) 261.35 398.33 T
(TE) 267.35 398.33 T
1 10 Q
(. Y) 279.86 398.33 T
(ou can use it to mask out all but those bits.) 291.35 398.33 T
81 365.98 531 378 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 365.98 531 378 R
7 X
0 0 0 1 0 0 0 K
V
76.5 373.23 617.5 376.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 359.31 T
(5-) 147.13 359.31 T
(1) 156.02 359.31 T
(1 De\336ning V) 161.03 359.31 T
(ariable Data) 218.27 359.31 T
5 9 Q
(/* Hints are defined with the @vardata command, as is shown in GenClass. Only a) 81 344.98 T
( * small portion of the hints for GenClass are shown here. Those with structures) 81 333.98 T
( * or data types \050not \322void\323\051 have extra data fields associated with them. */) 81 322.98 T
(@class GenClass, VisClass, master, variant;) 81 304.98 T
(/* Messages are defined here. */) 125 293.98 T
(/* Followed by instance data defined with @instance. */) 125 282.98 T
(@vardata void HINT_CENTER_MONIKER;) 102.6 271.98 T
(@vardata SpecSizeSpec HINT_CUSTOM_CHILD_SPACING;) 102.6 260.98 T
(@vardata char[] ATTR_GEN_INIT_FILE_KEY;) 102.6 249.98 T
(/* Relocatable instance fields \050see the next section\051 are defined with) 125 231.98 T
( * @reloc. This field contains an object pointer that must be resolved) 125 220.98 T
( * when the GenClass object is loaded. */) 125 209.98 T
(@instance @link GI_link;) 102.6 198.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "198" 58
%%Page: "199" 59
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(199) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(@reloc GI_link, optr;) 125 642 T
(@vardata DestinationClassArgs ATTR_GEN_DESTINATION_CLASS;) 102.6 631 T
(@reloc ATTR_GEN_DESTINATION_CLASS, 0, optr;) 125 620 T
(@endc) 81 609 T
81 584.98 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.98 531 597 R
7 X
0 0 0 1 0 0 0 K
V
76.5 592.23 617.5 595.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.14 (The kernel provides a number of routines an object may use to add, remove,) 180 567.31 P
(and change its own vardata entries. Note that all these routines must be) 180 554.31 T
(called from within the object containing the variable data entries; since) 180 541.31 T
(variable data is instance data, it is against) 180 528.31 T
1 9 Q
(OOP) 380.07 528.31 T
1 10 Q
( doctrine for one object to) 400.08 528.31 T
(alter another object\325) 180 515.31 T
(s variable data directly) 272.23 515.31 T
(.) 377.81 515.31 T
(Instead,) 180 495.31 T
3 F
(MetaClass) 220.56 495.31 T
1 F
( provides vardata messages that can be sent by one) 273.89 495.31 T
(object to another to add, remove, change, or retrieve vardata entries of) 180 482.31 T
(another object. The kernel routines and) 180 469.31 T
3 F
(MetaClass) 365.57 469.31 T
1 F
( messages are outlined) 418.9 469.31 T
(below:) 180 456.31 T
2 F
(u) 180 436.31 T
3 F
(ObjV) 198 436.31 T
(arAddData\050\051) 223 436.31 T
1 F
(This routine adds an new entry for the passed data type or replaces the) 198 424.31 T
(extra data associated with a particular data type entry) 198 412.31 T
(.) 450.27 412.31 T
2 F
(u) 180 393.31 T
3 F
(ObjV) 198 393.31 T
(arDeleteData\050\051) 223 393.31 T
1 F
-0.5 (This routine deletes the entry for a particular data type when passed the) 198 381.31 P
(data type.) 198 369.31 T
2 F
(u) 180 350.31 T
3 F
(ObjV) 198 350.31 T
(arDeleteDataAt\050\051) 223 350.31 T
1 F
(This routine deletes a particular data entry when passed the entry\325) 198 338.31 T
(s) 507.85 338.31 T
(pointer as returned by) 198 326.31 T
3 F
(ObjV) 304.3 326.31 T
(arAddData\050\051) 329.3 326.31 T
1 F
(,) 394.12 326.31 T
3 F
(ObjV) 399.68 326.31 T
(arFindData\050\051) 424.68 326.31 T
1 F
(, or) 493.01 326.31 T
3 F
(ObjV) 198 314.31 T
(arDerefData\050\051) 223 314.31 T
1 F
(.) 295.78 314.31 T
2 F
(u) 180 295.31 T
3 F
(ObjV) 198 295.31 T
(arScanData\050\051) 223 295.31 T
1 F
(This routine causes the kernel to scan all data entries in an object\325) 198 283.31 T
(s) 504.53 283.31 T
(variable data and call any \322handler routines\323 listed for them. This) 198 271.31 T
(process is described below) 198 259.31 T
(.) 317.27 259.31 T
2 F
(u) 180 240.31 T
3 F
(ObjV) 198 240.31 T
(arFindData\050\051) 223 240.31 T
1 F
(This routine searches for and returns \050if possible\051 a pointer to a data) 198 228.31 T
(entry of the passed data type.) 198 216.31 T
2 F
(u) 180 197.31 T
3 F
(ObjV) 198 197.31 T
(arDerefData\050\051) 223 197.31 T
1 F
(This routine returns a pointer to a data entry when passed the object\325) 198 185.31 T
(s) 518.96 185.31 T
(optr and the data type. If the entry does not exist, this routine will call) 198 173.31 T
(on the object to create and initialize the entry) 198 161.31 T
(. Such variable data then) 407.65 161.31 T
(behaves much like instance data. The object containing the vardata is) 198 149.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "199" 59
%%Page: "200" 60
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(200) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.21 (responsible for creating the entry and then initializing it upon receipt of) 198 641.33 P
(a) 198 629.33 T
1 9 Q
(MSG_MET) 206.34 629.33 T
(A_INITIALIZE_V) 252.51 629.33 T
(AR_DA) 325.99 629.33 T
(T) 356.5 629.33 T
(A) 362 629.33 T
1 10 Q
(, described below) 368.5 629.33 T
(.) 446.11 629.33 T
2 F
(u) 180 610.33 T
3 F
(ObjV) 198 610.33 T
(arDeleteDataRange\050\051) 223 610.33 T
1 F
(This routine deletes all data entries with types in the passed range.) 198 598.33 T
2 F
(u) 180 579.33 T
3 F
(ObjV) 198 579.33 T
(arCopyDataRange\050\051) 223 579.33 T
1 F
(This routine copies all data entries within the passed range from one) 198 567.33 T
(object\325) 198 555.33 T
(s instance chunk to another\324s. If any entries are copied, the) 226.52 555.33 T
(destination object will be marked dirty for saving. This routine must be) 198 543.33 T
(called by the destination object; it is bad policy for one object to alter) 198 531.33 T
-0.64 (another object\325) 198 519.33 P
-0.64 (s instance data. This routine is primarily for copying hints) 264.77 519.33 P
(from one) 198 507.33 T
1 9 Q
(UI) 241.33 507.33 T
1 10 Q
( object to another and is not commonly used by applications.) 252.33 507.33 T
-0.28 (The four messages \050in) 180 488.33 P
3 F
-0.28 (MetaClass) 282.98 488.33 P
1 F
-0.28 (\051 that can be used to add, delete, and alter) 336.31 488.33 P
(variable data entries remotely are listed below) 180 475.33 T
(. Classes will never need to) 394.31 475.33 T
(intercept and subclass these messages because the proper functionality is) 180 462.33 T
(implemented in) 180 449.33 T
3 F
(MetaClass) 255.38 449.33 T
1 F
(.) 308.71 449.33 T
1 9 Q
(MSG_MET) 180 429.33 T
(A_ADD_V) 226.17 429.33 T
(AR_DA) 267.67 429.33 T
(T) 298.17 429.33 T
(A) 303.68 429.33 T
1 10 Q
(Adds a new vardata type to the recipient object. If the type) 243 417.33 T
(already exists, the passed type replaces the old one.) 243 405.33 T
1 9 Q
(MSG_MET) 180 386.33 T
(A_DELETE_V) 226.17 386.33 T
(AR_DA) 285.67 386.33 T
(T) 316.17 386.33 T
(A) 321.68 386.33 T
1 10 Q
-0.67 (Deletes a vardata type from the recipient\325) 243 374.33 P
-0.67 (s instance data. If the) 431.02 374.33 P
(type does not exist, nothing is done.) 243 362.33 T
1 9 Q
(MSG_MET) 180 343.33 T
(A_INITIALIZE_V) 226.17 343.33 T
(AR_DA) 299.65 343.33 T
(T) 330.16 343.33 T
(A) 335.66 343.33 T
1 10 Q
(Used when something is trying to access an object\325) 243 331.33 T
(s vardata) 475.8 331.33 T
-0.4 (\336eld remotely but the \336eld has not yet been added to the object) 243 319.33 P
(or initialized. The object must create and/or initialize the) 243 307.33 T
(vardata \336eld at this point.) 243 295.33 T
1 9 Q
(MSG_MET) 180 276.33 T
(A_GET_V) 226.17 276.33 T
(AR_DA) 266.67 276.33 T
(T) 297.17 276.33 T
(A) 302.68 276.33 T
1 10 Q
(Returns the extra data set for the passed data type.) 243 264.33 T
-0.6 (In addition to supporting variable data structures,) 180 245.33 P
1 9 Q
-0.54 (GEOS) 411.74 245.33 P
1 10 Q
-0.6 ( allows you to set up) 437.92 245.33 P
(\322handlers\323 for different variable data types. Handlers are routines that) 180 232.33 T
(process a given data entry; for example, each generic) 180 219.33 T
1 9 Q
(UI) 426.68 219.33 T
1 10 Q
( object stores a) 437.68 219.33 T
(number of hints. Speci\336c) 180 206.33 T
1 9 Q
(UI) 297.41 206.33 T
1 10 Q
( classes, when attached to the generic object,) 308.41 206.33 T
(have a speci\336c routine to handle each hint supported. Some speci\336c) 180 193.33 T
1 9 Q
(UI) 494.09 193.33 T
1 10 Q
(s do) 505.09 193.33 T
-0.06 (nothing with certain hints; these speci\336c) 180 180.33 P
1 9 Q
-0.05 (UI) 370.4 180.33 P
1 10 Q
-0.06 (s do not have handlers for those) 381.4 180.33 P
(hints.) 180 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "200" 60
%%Page: "201" 61
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(201) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Handlers are associated with data types through the use of a) 180 641.33 T
3 F
(V) 180 628.33 T
(arDataCHandler) 186.67 628.33 T
1 F
( table. This is a table that you set up in your) 273.34 628.33 T
3 F
(.goc) 481.18 628.33 T
1 F
( \336le) 501.74 628.33 T
(that contains pairings of routine names with) 180 615.33 T
3 F
(@vardata) 389.1 615.33 T
1 F
( \336eld names. An) 437.13 615.33 T
(example of the) 180 602.33 T
3 F
(V) 250.38 602.33 T
(arDataCHandler) 257.05 602.33 T
1 F
( table is shown in Code Display) 343.72 602.33 T
(5-) 491.35 602.33 T
(12.) 500.24 602.33 T
-0.81 (A handler is simply a normal) 180 582.33 P
1 9 Q
-0.73 (C) 312.58 582.33 P
1 10 Q
-0.81 ( routine or function and is de\336ned as such. The) 319.08 582.33 P
(handler should be declared as an) 180 569.33 T
3 F
(_pascal) 335.02 569.33 T
1 F
( routine.The table pairs the) 372.99 569.33 T
(handler with the) 180 556.33 T
3 F
(@vardata) 260.38 556.33 T
1 F
( data type, and when) 308.41 556.33 T
3 F
(ObjV) 408.25 556.33 T
(arScanData\050\051) 433.25 556.33 T
1 F
( is) 502.33 556.33 T
(called, all handlers for all data types are called in order) 180 543.33 T
(. This is true for the) 435.41 543.33 T
(object\325) 180 530.33 T
(s class and all its superclasses since variable data is inherited just as) 208.52 530.33 T
(normal instance data is. The handler can do almost anything appropriate) 180 517.33 T
-0.78 (with the exception of destroying the object or adding or deleting variable data) 180 504.33 P
(from the object.) 180 491.33 T
81 458.98 531 471 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 458.98 531 471 R
7 X
0 0 0 1 0 0 0 K
V
76.5 466.23 617.5 469.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 452.31 T
(5-) 147.13 452.31 T
(12 V) 156.02 452.31 T
(ariable Data Handlers) 176.04 452.31 T
5 9 Q
(/* This example is taken from the C VarData sample application. */) 125 437.98 T
(/* This is a VarDataCHandler. It is called by the ObjVarScanData\050\051 routine when) 81 419.98 T
( * the data type corresponding to this routine in the VarDataCHandlerTable) 81 408.98 T
( * is encountered. The parameters indicated are passed.) 81 397.98 T
( *) 81 386.98 T
( * This particular handler is actually used for several different data types) 81 375.98 T
( * \050see VarDataCHandlerTable below\051. The data type can be distinguished by) 81 364.98 T
( * the \324dataType\325 parameter.) 81 353.98 T
(*) 86.4 342.98 T
(* NOTE: VarDataInteractionHintHandler, like any handler used in a) 86.4 331.98 T
(* VarDataCHandler structure, must be declared _pascal. */) 86.4 320.98 T
(void _pascal VarDataInteractionHintHandler\050MemHandle mh, ChunkHandle chnk,) 81 302.98 T
(void *data, word dataType, HandlerData *handlerData\051 {) 168.98 291.98 T
(if \050dataType == HINT_ORIENT_CHILDREN_HORIZONTALLY\051 {) 102.6 273.98 T
(handlerData->HD_flags.has_horiz = 1;) 125 262.98 T
(} else if \050dataType == HINT_ORIENT_CHILDREN_VERTICALLY\051 {) 102.6 251.98 T
(handlerData->HD_flags.has_vert = 1;) 125 240.98 T
(} else if \050dataType == HINT_ALLOW_CHILDREN_TO_WRAP\051 {) 102.6 229.98 T
(handlerData->HD_flags.has_allow_wrap = 1;) 125 218.98 T
(} else if \050\050dataType == HINT_WRAP_AFTER_CHILD_COUNT\051 &&) 102.6 207.98 T
(\050\050\050WrapAfterChildCountData *\051 data\051->WACCE_childCount == 2\051\051 {) 168.98 196.98 T
(handlerData->HD_flags.has_wrap_after = 1;) 125 185.98 T
(}) 102.6 174.98 T
(}) 81 163.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "201" 61
%%Page: "202" 62
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(202) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(/* This is the VarDataCHandler Table. It consists of data type/VarDataCHandler) 81 642 T
( * pairs. The VarDataCHandlers are far routines. */) 81 631 T
(static VarDataCHandler varDataInteractionHandlerTable[] = {) 81 613 T
({HINT_ORIENT_CHILDREN_HORIZONTALLY, VarDataInteractionHintHandler},) 102.6 602 T
({HINT_ORIENT_CHILDREN_VERTICALLY, VarDataInteractionHintHandler},) 102.6 591 T
({HINT_ALLOW_CHILDREN_TO_WRAP, VarDataInteractionHintHandler},) 102.6 580 T
({HINT_WRAP_AFTER_CHILD_COUNT, VarDataInteractionHintHandler}) 102.6 569 T
(};) 81 558 T
81 533.98 531 546 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 533.98 531 546 R
7 X
0 0 0 1 0 0 0 K
V
76.5 541.23 617.5 544.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.1.5) 119.19 502.64 T
(De\336ning Relocatable Data) 180 502.64 T
5 10 Q
(@reloc) 180 480.31 T
1 F
-0.71 (Some objects and classes may have instance data \336elds that must be resolved) 180 460.31 P
(when the object is loaded and linked at run-time. For example, if the object) 180 447.31 T
-0.67 (contains an optr to another object, that optr must be updated when the object) 180 434.31 P
(is loaded and resolved since the global memory handle can\325) 180 421.31 T
(t be known at) 452.08 421.31 T
(compile-time.) 180 408.31 T
(For some special instance \336elds, this happens automatically) 180 388.31 T
(. For example,) 456.34 388.31 T
(the) 180 375.31 T
3 F
(@composite) 197.78 375.31 T
1 F
( and) 258.03 375.31 T
3 F
(@link) 281 375.31 T
1 F
( \336elds as well as optrs are automatically) 309.21 375.31 T
(resolved. However) 180 362.31 T
(, if you add your own instance \336elds requiring relocation,) 264.07 362.31 T
-0 (you will have to set them up with the) 180 349.31 P
3 F
-0 (@reloc) 354.82 349.31 P
1 F
-0 ( keyword. This is true for both) 388.41 349.31 P
(static and variable data.) 180 336.31 T
(This keyword uses two formats. The \336rst listed here is for normal, static) 180 316.31 T
(instance data, and the second is used with variable data.) 180 303.31 T
5 F
(@reloc) 216 287.31 T
(<iname>, [\050<count>, <struct>\051] <ptrType>;) 276 287.31 T
3 F
(iname) 180 266.31 T
1 F
(This is the name of the relocatable instance \336eld.) 243 266.31 T
3 F
(count) 180 247.31 T
1 F
(If the instance variable is an array of relocatable data or) 243 247.31 T
(structures containing relocatable \336elds, this is the number of) 243 235.31 T
(elements in the array) 243 223.31 T
(.) 341.53 223.31 T
3 F
(struct) 180 204.31 T
1 F
-0.61 (If the relocatable data is an array of structures, this represents) 243 204.31 P
(the name of the \336eld within each structure that requires) 243 192.31 T
(relocation.) 243 180.31 T
3 F
(ptrT) 180 161.31 T
(ype) 202.82 161.31 T
1 F
(This is the type of relocatable data contained in the \336eld. It) 243 161.31 T
(may be one of) 243 149.31 T
4 F
(optr) 308.94 149.31 T
1 F
(,) 326.9 149.31 T
4 F
(ptr) 332.46 149.31 T
1 F
(, or) 345.42 149.31 T
4 F
(handle) 363.2 149.31 T
1 F
(.) 395.04 149.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "202" 62
%%Page: "203" 63
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(203) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(@reloc) 216 641.33 T
(<vname>, <fn>, [\050<count>, <struct>\051] ptrType;) 258 641.33 T
3 F
(vname) 180 620.33 T
1 F
(This is the name of the variable data type.) 243 620.33 T
3 F
(fn) 180 601.33 T
1 F
(This is the name of the \336eld within the variable data\325) 243 601.33 T
(s extra) 488.43 601.33 T
(data. If there is no extra data with this data type, put a zero) 243 589.33 T
(rather than a name.) 243 577.33 T
3 F
(count) 180 558.33 T
1 F
(If the instance variable is an array of relocatable data or) 243 558.33 T
(structures containing relocatable \336elds, this is the number of) 243 546.33 T
(elements in the array) 243 534.33 T
(.) 341.53 534.33 T
3 F
(struct) 180 515.33 T
1 F
-0.61 (If the relocatable data is an array of structures, this represents) 243 515.33 P
(the name of the \336eld within each structure that requires) 243 503.33 T
(relocation.) 243 491.33 T
3 F
(ptrT) 180 472.33 T
(ype) 202.82 472.33 T
1 F
(This is the type of relocatable data contained in the \336eld. It) 243 472.33 T
(may be one of) 243 460.33 T
4 F
(optr) 308.94 460.33 T
1 F
(,) 326.9 460.33 T
4 F
(ptr) 332.46 460.33 T
1 F
(, or) 345.42 460.33 T
4 F
(handle) 363.2 460.33 T
1 F
(.) 395.04 460.33 T
0 14 Q
(5.4.2) 130.86 419 T
0 18 Q
(Non-relocatable Data) 180 419 T
5 10 Q
(@noreloc) 180 395.33 T
1 F
-0.11 (T) 180 375.33 P
-0.11 (o force an instance data \336eld which would normally be relocatable \050e.g., an) 185.75 375.33 P
(optr\051 to not be relocatable, use the) 180 362.33 T
3 F
(@noreloc) 340.58 362.33 T
1 F
( keyword. Use this keyword) 387.13 362.33 T
(together with the name of the \336eld to be marked non-relocatable directly) 180 349.33 T
(after de\336ning the instance \336eld itself as shown in Code Display) 180 336.33 T
(5-) 474.85 336.33 T
(13.) 483.74 336.33 T
81 303.98 531 316 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 303.98 531 316 R
7 X
0 0 0 1 0 0 0 K
V
76.5 311.23 617.5 314.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 297.31 T
(5-) 147.13 297.31 T
(13 Use of the @noreloc Keyword) 156.02 297.31 T
5 9 Q
(@instance optr MCI_ruler;) 125 282.98 T
(/* Normally MCI_ruler would be reloc\311 */) 301 282.98 T
(@noreloc MCI_ruler;) 125 271.98 T
(/* \311but now it isn\325t. */) 301 271.98 T
81 247.95 531 259.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 247.95 531 259.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 255.2 617.5 258.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "203" 63
%%Page: "204" 64
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(204) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.3) 130.86 636 T
0 18 Q
(De\336ning Methods) 180 636 T
5 10 Q
(@method, @extern) 180 612.33 T
1 F
-0.2 (Methods are the routines executed when an object receives a message. Each) 180 592.33 P
-0.11 (class understands a certain set of messages; each of these has a place in the) 180 579.33 P
(class\325 method table and corresponds to one method.) 180 566.33 T
-0.81 (Although methods are class-speci\336c, they are not de\336ned between the) 180 546.33 P
3 F
-0.83 (@class) 496.37 546.33 P
1 F
-0.29 (and) 180 533.33 P
3 F
-0.3 (@endc) 199.9 533.33 P
1 F
-0.29 ( of class de\336nition. Instead, their declaration line links them to a) 232.19 533.33 P
-0.19 (single class and to a speci\336c message. Goc, Glue, and) 180 520.33 P
1 9 Q
-0.17 (GEOS) 425.19 520.33 P
1 10 Q
-0.19 ( build each class\325) 451.36 520.33 P
(method table automatically; you do not have to create the table yourself.) 180 507.33 T
(T) 180 487.33 T
(o de\336ne a method, use the) 185.75 487.33 T
3 F
(@method) 309.1 487.33 T
1 F
( keyword. This has the following) 355.83 487.33 T
(structure:) 180 474.33 T
5 F
(@method) 216 458.33 T
([<hname>,] <cname>, <mname>+;) 282 458.33 T
3 F
(hname) 180 437.33 T
1 F
(The handler name, if any) 243 437.33 T
(. If you wish to use the method as a) 358.76 437.33 T
-0.1 (function, it must have a handler name. If you do not provide a) 243 425.33 P
-0.25 (handler name, Goc will create one for you. This name is useful) 243 413.33 P
(for setting breakpoints when debugging. If you do not provide) 243 401.33 T
(a name, Goc constructs the name by concatenating the class) 243 389.33 T
-0.66 (name \050with the -Class suf\336x, if any) 243 377.33 P
-0.66 (, removed\051 with the message) 399.82 377.33 P
(name \050with the) 243 365.33 T
1 9 Q
(MSG_) 316.16 365.33 T
1 10 Q
(- pre\336x, if any) 341.83 365.33 T
(, removed\051. For example,) 405.35 365.33 T
(Goc would call) 243 353.33 T
3 F
(MyClass) 312.64 353.33 T
1 F
(\325 handler for) 355.97 353.33 T
1 9 Q
(MSG_DO_SOMETHING) 415.23 353.33 T
1 10 Q
(\322My) 243 341.33 T
1 9 Q
(DO_SOMETHING) 261.7 341.33 T
1 10 Q
(\323.) 339.37 341.33 T
3 F
(cname) 180 322.33 T
1 F
(The name of the class to which this method belongs. Each) 243 322.33 T
(method may belong to only one class.) 243 310.33 T
3 F
(mname) 180 291.33 T
1 F
(The name of the message that invokes this method. The plus) 243 291.33 T
-0.88 (symbol indicates that one method may be invoked by more than) 243 279.33 P
-0.32 (one message as long as they all have the) 243 267.33 P
4 F
-0.32 (same) 429.57 267.33 P
1 F
-0.32 ( parameters and) 453.08 267.33 P
(return values. At least one message must be speci\336ed.) 243 255.33 T
-0.82 (Note that the name of the method \050the handler name\051 is optional. Parameters) 180 236.33 P
(and return values are not put in the method declaration\321these are de\336ned) 180 223.33 T
(with) 180 210.33 T
3 F
(@message) 203.71 210.33 T
1 F
( as discussed in section 5.3.3 on page 180.) 254.51 210.33 T
(If you will wish to call the method as a routine occasionally) 180 190.33 T
(, your compiler) 452.08 190.33 T
(will probably require that you provide a prototype for the routine. If your) 180 177.33 T
3 F
(@message) 180 164.33 T
1 F
( declaration looks like) 230.8 164.33 T
5 F
(@message word MSG_MC_DO_SOMETHING\050word thing\051;) 216 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "204" 64
%%Page: "205" 65
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(205) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(and your) 180 641.33 T
3 F
(@method) 223.89 641.33 T
1 F
( declaration looks like) 270.62 641.33 T
5 F
(@method DoSomething, MyClass, MSG_MC_DO_SOMETHING {) 216 625.33 T
(/* Code Here */ }) 216 611.33 T
1 F
(Then your protoype should look like) 180 590.33 T
5 F
(extern word _pascal DoSomething\050optr oself,) 216 574.33 T
(MyMessages message,) 408 560.33 T
(word thing\051;) 408 546.33 T
1 F
(The name of the type) 180 525.33 T
3 F
(MyMessages) 280.57 525.33 T
1 F
( is constructed automatically by taking) 345 525.33 T
(the name of the class, removing the \322Class\323 suf\336x, and replacing said suf\336x) 180 512.33 T
(with \322Messages\323.) 180 499.33 T
-0.1 (Normally) 180 479.33 P
-0.1 (, all of a class\325 methods will be coded in the same code \336le in which) 222.6 479.33 P
(the class is declared with) 180 466.33 T
3 F
(@classdecl) 299.09 466.33 T
1 F
(. If, however) 353.24 466.33 T
(, you \336nd you need to) 409.72 466.33 T
-0.45 (declare a class\325 methods in a different \336le, you can use the) 180 453.33 P
3 F
-0.47 (@extern) 445.72 453.33 P
1 F
-0.45 ( keyword) 487.08 453.33 P
-0.17 (to indicate a method is de\336ned and/or used in a different object \336le. Goc will) 180 440.33 P
(give no error if) 180 427.33 T
3 F
(@extern) 250.92 427.33 T
1 F
( is used and the method exists nowhere; Glue,) 292.28 427.33 T
(however) 180 414.33 T
(, will give a linking error in such a case. There is no such) 217.96 414.33 T
(requirement, however) 180 401.33 T
(, if you are putting only the class de\336nition \050the) 281.11 401.33 T
(de\336nitions between) 180 388.33 T
3 F
(@class) 272.79 388.33 T
1 F
( and) 305.45 388.33 T
3 F
(@endc) 328.42 388.33 T
1 F
(\051 in a different \336le. In this case, you) 360.71 388.33 T
-0.08 (can put the class de\336nition in a) 180 375.33 P
3 F
-0.08 (.goh) 327.25 375.33 P
1 F
-0.08 ( header \336le and the method code in the) 349.1 375.33 P
(same) 180 362.33 T
3 F
(.goc) 206.86 362.33 T
1 F
( \336le as the) 227.42 362.33 T
3 F
(@classdecl) 277.99 362.33 T
1 F
( statement; you must) 332.14 362.33 T
3 F
(@include) 432.9 362.33 T
1 F
( the) 479.26 362.33 T
3 F
(.goh) 499.82 362.33 T
1 F
-0.03 (\336le, but you won\325) 180 349.33 P
-0.03 (t need to use the) 258.09 349.33 P
3 F
-0.03 (@extern) 337.22 349.33 P
1 F
-0.03 ( directive \050as long as the method) 378.58 349.33 P
(code is in the same \336le as the) 180 336.33 T
3 F
(@classdecl) 317.99 336.33 T
1 F
( directive\051.) 372.14 336.33 T
(The format for using) 180 316.33 T
3 F
(@extern) 278.15 316.33 T
1 F
( is as follows:) 319.51 316.33 T
5 F
(/* In the file in which the class is declared with) 216 300.33 T
(*) 222 286.33 T
(@classdecl:) 234 286.33 T
(*/) 222 272.33 T
(@extern method <cname>, <mname>+;) 240 258.33 T
(/* In the file containing the method code: */) 216 241.33 T
(@extern method <cname>, <mname>+ {) 240 227.33 T
(...method code goes here...) 264 213.33 T
(}) 240 199.33 T
3 F
(cname) 180 178.33 T
1 F
(The name of the class for which the method is de\336ned.) 243 178.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "205" 65
%%Page: "206" 66
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(206) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(mname) 180 641.33 T
1 F
-0.46 (The name of the message which invokes the method. Note that) 243 641.33 P
(external method de\336nitions, like normal method de\336nitions,) 243 629.33 T
(can handle more than one message.) 243 617.33 T
(Three parameters are passed automatically with messages and do not have) 180 598.33 T
-0.71 (to be declared in the) 180 585.33 P
3 F
-0.74 (@message) 273.11 585.33 P
1 F
-0.71 ( de\336nition. They are important to know when) 323.91 585.33 P
(writing methods, however) 180 572.33 T
(, because they can greatly simplify your code.) 299.45 572.33 T
(These are standard parameters for all classes except) 180 559.33 T
3 F
(ProcessClass) 425.58 559.33 T
1 F
( and its) 493.18 559.33 T
(subclasses below:) 180 546.33 T
3 F
(pself) 180 526.33 T
1 F
(A far pointer to the object\325) 243 526.33 T
(s instance data.) 363.19 526.33 T
4 F
(pself) 438.58 526.33 T
1 F
( points to the) 459.86 526.33 T
(master group for the class for which the handler is de\336ned.) 243 514.33 T
(Note that this pointer may be invalidated by message calls,) 243 502.33 T
(variable data operations, or LMem allocations.) 243 490.33 T
3 F
(oself) 180 471.33 T
1 F
(An optr to the object\325) 243 471.33 T
(s instance data. It contains the global) 338.93 471.33 T
-0.11 (memory handle and chunk handle of the instance chunk. This) 243 459.33 P
(can be used for routines that act on the object\325) 243 447.33 T
(s instance data.) 455.24 447.33 T
3 F
(message) 180 428.33 T
1 F
(The message number of the message being handled.) 243 428.33 T
-0.81 (As mentioned,) 180 409.33 P
3 F
-0.83 (ProcessClass) 247.47 409.33 P
1 F
-0.81 ( is a special type of class. It has no true instance) 315.07 409.33 P
(data because it uses the standard) 180 396.33 T
1 9 Q
(PC) 337.81 396.33 T
1 10 Q
( structure of an application \050idata,) 350.31 396.33 T
(udata, etc.\051. It only has one standard parameter to each of its methods: the) 180 383.33 T
(message that was sent to it. This is because the \322instance data\323 of) 180 370.33 T
3 F
(ProcessClass) 180 357.33 T
1 F
( includes all the global variables of your program. Because) 247.6 357.33 T
(they are accessed automatically) 180 344.33 T
(, no oself or pself is required.) 325.76 344.33 T
81 311.98 531 324 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 311.98 531 324 R
7 X
0 0 0 1 0 0 0 K
V
76.5 319.23 617.5 322.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 305.31 T
(5-) 147.13 305.31 T
(14 A Class De\336nition) 156.02 305.31 T
5 9 Q
(/* The class ValClass defines four messages that invoke four different methods. The) 81 290.98 T
( * entire class is shown in this example; it will function properly if coded this) 81 279.98 T
( * way. Note that the methods have the class name in their declaration line) 81 268.98 T
( * and thus do not appear within the class definition. */) 81 257.98 T
(@class ValClass, MetaClass;) 81 239.98 T
(@instance int value;) 81 221.98 T
(/* instance data value: an uninitialized integer */) 212.5 221.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "206" 66
%%Page: "207" 67
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(207) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(/* message declarations) 125 642 T
( * All four messages will be handled by this class. They return) 125 631 T
( * the types shown and take the parameters defined. */) 125 620 T
(@message int MSG_VAL_GET_VALUE\050\051;) 81 609 T
(@message void MSG_VAL_SET_VALUE\050int newValue\051;) 81 598 T
(@message void MSG_VAL_NEGATE_VALUE\050\051;) 81 587 T
(@message Boolean MSG_VAL_IS_VALUE_BIGGER_THAN\050int newValue\051;) 81 576 T
(@endc) 81 558 T
(@classdecl ValClass;) 81 547 T
(/* the class structure must be put in memory */) 212.5 547 T
(/* Method Declarations) 125 529 T
( * Each of the four methods is a single line of code. Note that the) 125 518 T
( * parameters are automatically defined in the message definition and do) 125 507 T
( * not need to be restated in the method definition. The same is true of) 125 496 T
( * the return type. Note also that the class and message names appear in) 125 485 T
( * the @method line. */) 125 474 T
(@method) 81 456 T
(ValGetValue, MyClass, MSG_VAL_GET_VALUE {) 125 456 T
(return\050pself->value\051;) 102.6 445 T
(}) 81 434 T
(@method) 81 416 T
(ValSetValue, MyClass, MSG_VAL_SET_VALUE {) 125 416 T
(pself->value = newValue;) 102.6 405 T
(}) 81 394 T
(@method) 81 376 T
(ValNegateVal, MyClass, MSG_VAL_NEGATE_VALUE {) 125 376 T
(pself->value *= -1;) 102.6 365 T
(}) 81 354 T
(@method) 81 336 T
( ValClass, MSG_VAL_IS_VALUE_BIGGER_THAN {) 125 336 T
(/* This handler\325s name will automatically be created to be) 125 325 T
( * ValVAL_IS_VALUE_BIGGER_THAN. You can use this name as a) 125 314 T
( * C function call from within the same thread. */) 125 303 T
(return\050pself->value > newValue\051;) 102.6 292 T
(}) 81 281 T
81 256.98 531 269 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 256.98 531 269 R
7 X
0 0 0 1 0 0 0 K
V
76.5 264.23 617.5 267.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Y) 180 239.31 T
(ou may sometimes wish to call a method with normal C call-and-return) 185.93 239.31 T
(conventions, rather than by sending a message. T) 180 226.31 T
(o do so, you will have to) 408.37 226.31 T
-0.24 (declare the method as a routine as well as a method. The declaration should) 180 213.31 P
(have the following format:) 180 200.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "207" 67
%%Page: "208" 68
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(208) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(extern <type> _pascal <MethodName>\050) 216 641.33 T
(optr) 252 627.33 T
(oself,) 432 627.33 T
(<TruncatedClassName>Messages) 252 613.33 T
(message,) 432 613.33 T
(<type1>) 252 599.33 T
(<arg1>,) 432 599.33 T
(<type2>) 252 585.33 T
(<arg2>\051) 432 585.33 T
3 F
(type) 180 564.33 T
1 F
(This is the type returned by the method. It may be any data) 243 564.33 T
(type.) 243 552.33 T
3 F
(MethodName) 180 533.33 T
1 F
-0.24 (This is the name of the method. If you will be calling a method) 243 521.33 P
(as a routine, you must give the method a name when you) 243 509.33 T
(declare it \050see page 204\051. Use the same name here.) 243 497.33 T
3 F
(T) 180 478.33 T
(runcatedClassName) 186.6 478.33 T
1 F
(This is the name of the class, without the word \322Class\323. The) 243 466.33 T
(type of this argument is the truncated class name followed) 243 454.33 T
(\050with no space\051 by the word \322Messages\323. Thus, for) 243 442.33 T
(\322HelloCounterClass\323, the truncated class name would be) 243 430.33 T
(\322HelloCounter\323, and the type of this \336eld would be) 243 418.33 T
(\322HelloCounterMessages\323.) 243 406.33 T
3 F
(type) 180 387.33 T
6 F
(n) 202.78 387.33 T
3 F
(, arg) 209.63 387.33 T
6 F
(n) 232.69 387.33 T
1 F
-0.35 (Use these \336elds to declare each of the arguments passed to the) 243 387.33 P
(message. Be sure to use exactly the same arguments, and in) 243 375.33 T
(the same order) 243 363.33 T
(, as in the message declaration.) 311.52 363.33 T
81 331.98 531 344 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 331.98 531 344 R
7 X
0 0 0 1 0 0 0 K
V
76.5 339.23 617.5 342.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 325.31 T
(5-) 147.13 325.31 T
(15 Declaring a Method As a Routine) 156.02 325.31 T
5 9 Q
(@message int MSG_HELLO_COUNTER_RECALCULATE_VALUE\050 \134) 81 310.98 T
(HelloPriority) 256.5 299.98 T
(priority, \134) 344 299.98 T
(word) 256.5 288.98 T
(randomDatum, \134) 344 288.98 T
(char) 256.5 277.98 T
(aLetter\051;) 344 277.98 T
(extern int _pascal HelloCounterRecalculateValue\050) 81 259.98 T
(optr) 212.5 248.98 T
(oself,) 344 248.98 T
(HelloCounterMessages) 212.5 237.98 T
(message,) 344 237.98 T
(HelloPriority) 212.5 226.98 T
(priority,) 344 226.98 T
(word) 212.5 215.98 T
(randomDatum,) 344 215.98 T
(char) 212.5 204.98 T
(aLetter\051;) 344 204.98 T
(@method) 81 186.98 T
(HelloCounterRecalculate, HelloCounterClass, \134) 125 186.98 T
(MSG_HELLO_COUNTER_RECALCULATE_VALUE {) 168.98 175.98 T
(/* method code goes here... */) 125 157.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "208" 68
%%Page: "209" 69
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(209) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(}) 81 642 T
81 617.98 531 630 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 617.98 531 630 R
7 X
0 0 0 1 0 0 0 K
V
76.5 625.23 617.5 628.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.4) 130.86 577.98 T
0 18 Q
(Declaring Objects) 180 577.98 T
1 10 Q
-0.14 (In) 180 554.31 P
1 9 Q
-0.13 (GEOS) 192.82 554.31 P
1 10 Q
-0.14 ( programs, you can instantiate objects in two ways: Y) 218.99 554.31 P
-0.14 (ou can declare) 462.54 554.31 P
(them in your source code with the) 180 541.31 T
3 F
(@object) 339.26 541.31 T
1 F
( keyword, or you can instantiate) 378.4 541.31 T
-0.3 (them and \336ll in their instance data during execution. In most cases, you will) 180 528.31 P
(probably do the former) 180 515.31 T
(, especially with generic) 284.82 515.31 T
1 9 Q
(UI) 398.35 515.31 T
1 10 Q
( objects.) 409.35 515.31 T
(Additionally) 180 495.31 T
(, you can create resources and chunks with the) 236.12 495.31 T
3 F
(@start, @end) 455.2 495.31 T
1 F
(,) 519.87 495.31 T
3 F
-0.69 (@header) 180 482.31 P
1 F
-0.67 (, and) 223.03 482.31 P
3 F
-0.69 (@chunk) 247.43 482.31 P
1 F
-0.67 ( keywords.) 287.68 482.31 P
1 9 Q
-0.61 (GEOS) 338.57 482.31 P
1 10 Q
-0.67 ( libraries also need an additional set) 364.74 482.31 P
(of declarations in their de\336nition \050) 180 469.31 T
3 F
(.goh) 338.34 469.31 T
1 F
(\051 \336les; these declarations \050) 360.19 469.31 T
3 F
(@de\337ib) 480.94 469.31 T
1 F
(and) 180 456.31 T
3 F
(@endlib) 200.19 456.31 T
1 F
(\051 indicate that the code contained between them is part of the) 240.62 456.31 T
(speci\336ed library) 180 443.31 T
(.) 253.15 443.31 T
0 14 Q
(5.4.4.1) 119.19 409.64 T
(De\336ning Library Code) 180 409.64 T
5 10 Q
(@def) 180 387.31 T
(lib, @endlib) 204 387.31 T
1 F
(If your geode is a library) 180 367.31 T
(, it will likely have a number of) 292.23 367.31 T
3 F
(.goh) 439.31 367.31 T
1 F
( \336les. Each of) 461.16 367.31 T
(these \336les contains some portion of the library\325) 180 354.31 T
(s code and is included by) 395.39 354.31 T
(applications that use the library) 180 341.31 T
(. The library code must be delimited by the) 327.99 341.31 T
(two keywords) 180 328.31 T
3 F
(@de\337ib) 246.12 328.31 T
1 F
( and) 283.03 328.31 T
3 F
(@endlib) 306 328.31 T
1 F
(, which have the following formats:) 346.43 328.31 T
5 F
(@deflib <libname>) 216 312.31 T
(@endlib) 216 298.31 T
3 F
(libname) 180 277.31 T
1 F
-0.37 (The permanent name of the library with the extender stripped) 243 277.31 P
-0.41 (off. For example, the) 243 265.31 P
1 9 Q
-0.37 (UI) 339.52 265.31 P
1 10 Q
-0.41 ( library\325) 350.52 265.31 P
-0.41 (s name is ui.lib, and the format) 386.23 265.31 P
(would then be) 243 253.31 T
5 F
(@deflib ui) 216 238.31 T
(/* library code here */) 240 224.31 T
(@endlib) 216 210.31 T
1 F
(Note that these two keywords are only necessary in \336les that de\336ne classes) 180 189.31 T
(in the library) 180 176.31 T
(. Files that have just code or data used in the library do not) 240.38 176.31 T
(require them \050though they are allowed\051.) 180 163.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "209" 69
%%Page: "210" 70
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(210) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.4.2) 119.19 638.67 T
(Declaring Segment Resources and Chunks) 180 638.67 T
5 10 Q
-0.5 (@start, @end, @header, @chunk, @chunkArray, @elementArray,) 180 616.33 P
(@extern) 180 603.33 T
1 F
(There are essentially three types of resources in) 180 583.33 T
1 9 Q
(GEOS) 404.45 583.33 T
1 10 Q
(: code resources) 430.62 583.33 T
(containing routines and methods, object blocks containing object instance) 180 570.33 T
(chunks \050and often data chunks\051, and data resources containing only data) 180 557.33 T
(chunks. Code resources are created automatically) 180 544.33 T
(, and no declaration is) 408.34 544.33 T
-0.3 (required for them \050unless you require special segments; then you should use) 180 531.33 P
(the) 180 518.33 T
4 F
(pragmas) 197.78 518.33 T
1 F
( appropriate for your) 238.14 518.33 T
1 9 Q
(C) 337.21 518.33 T
1 10 Q
( compiler\051.) 343.71 518.33 T
-0.21 (Object blocks or other LMem resources are declared with) 180 498.33 P
3 F
-0.21 (@start) 444.07 498.33 P
1 F
-0.21 ( and) 476.36 498.33 P
3 F
-0.21 (@end) 498.92 498.33 P
1 F
-0.21 (.) 525.65 498.33 P
(Y) 180 485.33 T
(ou can set a special header on a local memory resource with the) 185.93 485.33 T
3 F
(@header) 482.44 485.33 T
1 F
(keyword. These are described below) 180 472.33 T
(, and an example of declaring the) 344.84 472.33 T
(resource block is given in Code Display) 180 459.33 T
(5-) 362.98 459.33 T
(16. Note that the) 371.87 459.33 T
3 F
(@header) 453.38 459.33 T
1 F
(keyword must come between the) 180 446.33 T
3 F
(@start) 333.35 446.33 T
1 F
( and) 365.64 446.33 T
3 F
(@end) 388.61 446.33 T
1 F
( delimiters.) 415.34 446.33 T
5 F
(@start) 216 430.33 T
(<segname> [, <flags>];) 276 430.33 T
(@header) 216 416.33 T
(<type> [= <init>];) 276 416.33 T
(@end) 216 402.33 T
(<segname>) 270 402.33 T
3 F
(segname) 180 381.33 T
1 F
(This is the name of the resource segment.) 243 381.33 T
3 F
(\337ags) 180 362.33 T
1 F
(These are optional \337ags that determine two characteristics of) 243 362.33 T
(the resource. If the \337ag) 243 350.33 T
4 F
(data) 353.18 350.33 T
1 F
( is set, the block will be set to a) 374.29 350.33 T
(data resource\321the default is an object block. If the \337ag) 243 338.33 T
4 F
(notDetachable) 243 326.33 T
1 F
( is set, the resource block will never be saved to) 308.73 326.33 T
(a state \336le.) 243 314.33 T
3 F
(type) 180 295.33 T
1 F
-0.31 (This is the name of a structure type that will act as the header) 243 295.33 P
(structure for the resource block. It must be some permutation) 243 283.33 T
(of either) 243 271.33 T
3 F
(LMemBlockHeader) 284.48 271.33 T
1 F
( \050for non object blocks\051 or) 384.67 271.33 T
3 F
(ObjLMemBlockHeader) 243 259.33 T
1 F
( \050for object blocks\051.) 361.52 259.33 T
3 F
(init) 180 240.33 T
1 F
(This is an initializer for the new header type. T) 243 240.33 T
(ypically) 461.03 240.33 T
(, some) 495.85 240.33 T
(data \336elds will be added on to the end of one of the standard) 243 228.33 T
(LMem block headers. These \336elds may be \336lled in with) 243 216.33 T
(initializer data with this optional argument.) 243 204.33 T
(The resource elements \050objects or chunks, for example\051 are also declared) 180 185.33 T
(within the) 180 172.33 T
3 F
(@start) 230.75 172.33 T
1 F
( and) 263.04 172.33 T
3 F
(@end) 286.01 172.33 T
1 F
( delimiters. The) 312.74 172.33 T
3 F
(@chunk) 388.68 172.33 T
1 F
( keyword declares a) 428.93 172.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "210" 70
%%Page: "211" 71
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(211) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(data chunk and is shown below) 180 641.33 T
(. For the) 323.74 641.33 T
3 F
(@object) 365.97 641.33 T
1 F
( keyword, see the next) 405.11 641.33 T
(section.) 180 628.33 T
5 F
(@chunk) 216 612.33 T
(<type> <name> [= <init>];) 276 612.33 T
3 F
(type) 180 591.33 T
1 F
(This is the data type that will be held in the chunk.) 243 591.33 T
3 F
(name) 180 572.33 T
1 F
(This is the name of the chunk. Y) 243 572.33 T
(ou may use this name as you) 392.1 572.33 T
(would a variable name to reference the chunk.) 243 560.33 T
3 F
(init) 180 541.33 T
1 F
-0.15 (This is initializer data in the standard) 243 541.33 P
1 9 Q
-0.14 (C) 421.96 541.33 P
1 10 Q
-0.15 ( format. If initializing) 428.46 541.33 P
(a structure, make sure you put the data within curly braces.) 243 529.33 T
-0.1 (T) 180 510.33 P
-0.1 (wo other types of resource elements may also be de\336ned, both of which are) 185.96 510.33 P
(array types. The) 180 497.33 T
3 F
(@chunkArray) 258.9 497.33 T
1 F
( keyword de\336nes a chunk array structure,) 329.34 497.33 T
(and the) 180 484.33 T
3 F
(@elementArray) 217.97 484.33 T
1 F
( keyword de\336nes an element array structure. See) 297.11 484.33 T
(\322Local Memory) 180 471.33 T
(,\323 Chapter) 248.52 471.33 T
(16, for information on the structure and usage of) 298.71 471.33 T
(chunk and element arrays. The formats for the keywords are described) 180 458.33 T
(below:) 180 445.33 T
5 F
(@chunkArray <stype> <aname> [= {<init>}];) 216 429.33 T
(@elementArray <stype> <aname> [ = {<init>} ];) 216 412.33 T
3 F
(stype) 180 391.33 T
1 F
(This is the type of structure stored in the array) 243 391.33 T
(.) 459.86 391.33 T
3 F
(aname) 180 372.33 T
1 F
(This is the name of the array) 243 372.33 T
(.) 376.17 372.33 T
3 F
(init) 180 353.33 T
1 F
(This is any initializer data. Initializer data is optional.) 243 353.33 T
(One other keyword,) 180 334.33 T
3 F
(@extern) 273.71 334.33 T
1 F
(, allows you to use chunks from a different) 315.07 334.33 T
-0 (compilation session. The) 180 321.33 P
3 F
-0 (@extern) 296.13 321.33 P
1 F
-0 ( keyword can be used to reference remote) 337.49 321.33 P
(\050external\051 chunks, objects, and visual monikers. If the item referenced by) 180 308.33 T
3 F
-0.37 (@extern) 180 295.33 P
1 F
-0.36 ( is not actually de\336ned anywhere, Glue will return an error when it) 221.36 295.33 P
(tries to link the item. \050Note also that Glue can not link through an external) 180 282.33 T
-0.47 (item; only one layer of external linkage is allowed. Thus, one object could not) 180 269.33 P
-0.64 (have an) 180 256.33 P
3 F
-0.66 (@extern) 217.99 256.33 P
1 F
-0.64 ( to a chunk that had an) 259.35 256.33 P
3 F
-0.66 (@extern) 365.99 256.33 P
1 F
-0.64 ( to a visMoniker) 407.35 256.33 P
-0.64 (.\051 Children) 479.69 256.33 P
(in object trees may not be de\336ned with) 180 243.33 T
3 F
(@extern) 361.32 243.33 T
1 F
(; Goc will produce an error) 402.68 243.33 T
(in this case. The format of this keyword is as follows:) 180 230.33 T
5 F
(@extern chunk <cname>;) 216 214.33 T
(@extern object <oname>;) 216 200.33 T
(@extern visMoniker <vmname>;) 216 186.33 T
3 F
(cname) 180 165.33 T
1 F
(This is the name of a chunk.) 243 165.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "211" 71
%%Page: "212" 72
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(212) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(oname) 180 641.33 T
1 F
(This is the name of an object.) 243 641.33 T
3 F
(vmname) 180 622.33 T
1 F
(This is the name of a visMoniker chunk.) 243 622.33 T
81 590.98 531 603 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 590.98 531 603 R
7 X
0 0 0 1 0 0 0 K
V
76.5 598.23 617.5 601.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 584.31 T
(5-) 147.13 584.31 T
(16 Declaring Data Resources) 156.02 584.31 T
5 9 Q
(/* This example declares a data block with three different chunks in it and) 81 569.98 T
( * its own header type. */) 81 558.98 T
(typedef struct {) 81 540.98 T
(LMemBlockHeader) 102.6 529.98 T
(MLMBH_meta;) 212.5 529.98 T
(/* basic header structure */) 309.7 529.98 T
(int) 102.6 518.98 T
(MLMBH_numEntries;) 212.5 518.98 T
(/* the number of entries in the block) 315.1 518.98 T
(*/) 81 507.98 T
(} StudentBlockHeader;) 81 496.98 T
(@start StudentBlock, data;) 81 478.98 T
(/* data flag indicates LMem block */) 301 478.98 T
(@header StudentBlockHeader = 1;) 81 467.98 T
(/* initialize new header fields */) 301 467.98 T
(/* The three chunks are defined below. Each represents a single field associated) 81 449.98 T
( * with a single student; that is why the header\325s MLMBH_numEntries field contains) 81 438.98 T
( * one \050rather than three\051. */) 81 427.98 T
(@chunk) 81 409.98 T
(char) 125 409.98 T
(firstName[] = \322John\323;) 168.98 409.98 T
(@chunk) 81 398.98 T
(char) 125 398.98 T
(lastName[] = \322Student\323;) 168.98 398.98 T
(@chunk) 81 387.98 T
(int) 125 387.98 T
(grade = 6;) 168.98 387.98 T
(@end StudentBlock) 81 369.98 T
(/* end of resource block */) 301 369.98 T
81 345.95 531 357.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 345.95 531 357.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 353.2 617.5 356.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.4.3) 119.19 314.62 T
(Declaring an Object) 180 314.62 T
5 10 Q
(@object, @default, @specif) 180 292.29 T
(icUI, gcnList) 336 292.29 T
1 F
(The) 180 272.28 T
3 F
(@object) 200.56 272.28 T
1 F
( keyword is much like the) 239.7 272.28 T
3 F
(@chunk) 361.2 272.28 T
1 F
( keyword in its use. It) 401.45 272.28 T
(allocates a chunk in a resource segment and \336lls it with initializer data.) 180 259.28 T
(However) 180 246.29 T
(, it also does much more in that it creates an object of a speci\336ed) 220.18 246.29 T
(class and \336lls it with default data if no initializer data is speci\336ed.) 180 233.29 T
(The) 180 213.29 T
3 F
(@object) 200.56 213.29 T
1 F
( keyword, like) 239.7 213.29 T
3 F
(@chunk) 307.31 213.29 T
1 F
(, must be used between the delimiters) 347.56 213.29 T
3 F
-0.38 (@start) 180 200.29 P
1 F
-0.37 ( and) 212.29 200.29 P
3 F
-0.38 (@end) 234.53 200.29 P
1 F
-0.37 ( \050see above\051. However) 261.26 200.29 P
-0.37 (, it must be used in an object block \050it) 359.24 200.29 P
-0.26 (can not be used in a data resource segment\051. Its format is below) 180 187.29 P
-0.26 (, and several) 470.09 187.29 P
(examples are shown in Code Display) 180 174.29 T
(5-) 352.25 174.29 T
(17.) 361.14 174.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "212" 72
%%Page: "213" 73
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(213) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(@object) 216 641.33 T
(<class> <name> = <flags>* {) 276 641.33 T
(<fieldName> = <init>;*) 240 627.33 T
(<varName> [= <init>];*) 240 613.33 T
(};) 216 599.33 T
3 F
(class) 180 578.33 T
1 F
-0.66 (The class of the object. It must be a valid class de\336ned either by) 243 578.33 P
1 9 Q
(GEOS) 243 566.33 T
1 10 Q
( or by your own code.) 269.17 566.33 T
3 F
(name) 180 547.33 T
1 F
(The name of the object. The object\325) 243 547.33 T
(s name will be used when) 402.28 547.33 T
(sending messages to it.) 243 535.33 T
3 F
(\337ags) 180 516.33 T
1 F
(Currently only one \337ag is allowed for objects:) 243 516.33 T
4 F
(ignoreDirty) 453.94 516.33 T
1 F
(.) 505.59 516.33 T
-0.23 (When set, it will cause the object to ignore when changes have) 243 504.33 P
(been made to its instance data; this means it will always be) 243 492.33 T
-0.42 (restored from a state \336le in the same way as it is de\336ned in the) 243 480.33 P
(code \336le. This \337ag should) 243 468.33 T
4 F
(not) 362.46 468.33 T
1 F
( be set for any generic objects.) 377.09 468.33 T
3 F
(\336eldName) 180 449.33 T
1 F
(The name of an instance data \336eld de\336ned for the class.) 243 449.33 T
3 F
(varName) 180 430.33 T
1 F
-0.31 (The name of a variable data instance \336eld. If the variable data) 243 430.33 P
(\336eld has extra data, you can initialize it with the optional) 243 418.33 T
(argument.) 243 406.33 T
3 F
(init) 180 387.33 T
1 F
(This is initializer data for the instance data \336eld. If you want) 243 387.33 T
-0.03 (default values in the \336eld, you can either leave the \336eld out of) 243 375.33 P
(the) 243 363.33 T
3 F
(@object) 260.78 363.33 T
1 F
( declaration or use the keyword) 299.92 363.33 T
3 F
(@default) 448.08 363.33 T
1 F
( for the) 492.59 363.33 T
(initializer) 243 351.33 T
(. When declaring variable data, though, be aware) 287.82 351.33 T
(that if the extra data is a structure, the initializer must be) 243 339.33 T
(enclosed in curly braces.) 243 327.33 T
1 9 Q
-0.13 (GEOS) 180 308.33 P
1 10 Q
-0.14 ( supports special instance data \336elds as described in section 5.4.1.2 on) 206.17 308.33 P
-0.23 (page 192. These are declared as normal \336elds and are described below) 180 295.33 P
-0.23 (. Also,) 500.33 295.33 P
(generic hints are implemented as variable data, so they are added to an) 180 282.33 T
(object in the same way as other variable data types.) 180 269.33 T
0 12 Q
(Object T) 180 243 T
(rees) 227.35 243 T
1 10 Q
(All objects declared in a static tree \050e.g., your application\325) 180 221.33 T
(s generic tree\051) 443.92 221.33 T
-0.3 (should be in the same source \336le. If they are in different \336les, then they may) 180 208.33 P
(be joined into a single tree only by dynamically adding objects from one \336le) 180 195.33 T
(as children to objects of the other) 180 182.33 T
(.) 332.41 182.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "213" 73
%%Page: "214" 74
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(214) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Note that if one \336le contains a tree of objects, then you may incorporate the) 180 641.33 T
-0.58 (whole tree by simply dynamically adding the top object in the \336le to the main) 180 628.33 P
(tree. Y) 180 615.33 T
(ou won\325) 209.82 615.33 T
(t have to add each object individually) 244.46 615.33 T
(.) 415.6 615.33 T
(If an object declared in one source \336le will send a message to an object in) 180 595.33 T
(another source \336le, you must include an) 180 582.33 T
3 F
(@extern) 367.6 582.33 T
1 F
( line in the source \336le) 408.96 582.33 T
(containing the sending object:) 180 569.33 T
5 F
(@extern object ReceivingObjectName;) 216 553.33 T
1 F
(The message itself should be sent in the following manner \050with variations) 180 532.33 T
(possible if you will be using) 180 519.33 T
3 F
(@call) 309.66 519.33 T
1 F
(, passing arguments, or what have you\051:) 335.84 519.33 T
5 F
(optr ROOptr;) 216 503.33 T
(ROOptr = GeodeGetOptrNS\050@ReceivingObjectName\051;) 216 489.33 T
(@send ROOptr::MSG_DO_SOMETHING\0500, 0\051;) 216 475.33 T
0 12 Q
(Declaring Children) 180 448 T
1 10 Q
-0.22 (If an object is to be part of an object tree, its class \050or one of its superclasses\051) 180 426.33 P
4 F
(must) 180 413.33 T
1 F
( have at least an) 202.96 413.33 T
3 F
(@link) 282.25 413.33 T
1 F
( instance data \336eld as does) 310.46 413.33 T
3 F
(GenClass) 437.34 413.33 T
1 F
(. If the) 485.67 413.33 T
(object is to be allowed to have children, it must also have a \336eld of type) 180 400.33 T
3 F
(@composite) 180 387.33 T
1 F
(. These allow Goc to automatically and correctly link the tree) 240.25 387.33 T
(together) 180 374.33 T
(.) 217.96 374.33 T
(As described in section 5.4.1.2 on page 192, the) 180 354.33 T
3 F
(@composite) 399.87 354.33 T
1 F
( \336eld points to) 460.12 354.33 T
(the \336rst child of an object, and the) 180 341.33 T
3 F
(@link) 340.94 341.33 T
1 F
( \336eld points either to the object\325) 369.15 341.33 T
(s) 514.35 341.33 T
-0.75 (next sibling or back to the parent if there is no next sibling. However) 180 328.33 P
-0.75 (, all child) 487.68 328.33 P
(declaration is done completely in the composite \336eld when using) 180 315.33 T
3 F
(@object) 479.47 315.33 T
1 F
(.) 518.61 315.33 T
(The format is as follows:) 180 302.33 T
5 F
(<fname> = <childName> [, <childname>]* ;) 216 286.33 T
3 F
(fname) 180 265.33 T
1 F
(This is the name of the \336eld de\336ned with) 243 265.33 T
3 F
(@composite) 434.88 265.33 T
1 F
( in the) 495.13 265.33 T
(class de\336nition.) 243 253.33 T
3 F
(childName) 180 234.33 T
1 F
-0.74 (This is the name of an object to be a child of this object. The star) 243 222.33 P
-0.22 (symbol indicates that one or more children may be included in) 243 210.33 P
-0.8 (the declaration line\321they should be separated by commas, and) 243 198.33 P
(each child must also be declared with an) 243 186.33 T
3 F
(@object) 433.03 186.33 T
1 F
( declaration.) 472.17 186.33 T
(There are many examples of this in the sample applications. Some simple) 180 167.33 T
(examples are shown below) 180 154.33 T
(.) 301.88 154.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "214" 74
%%Page: "215" 75
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(215) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(GI_comp = @TicTacPrimary;) 216 641.33 T
(GI_comp = @TicTacView, @TicTacGameMenu;) 216 624.33 T
(VCI_comp = @TTX1, @TTX2, @TTX3, @TTX4, @TTX5, @TTO1,) 216 607.33 T
( @TTO2, @TTO3, @TTO4, @TTO5;) 288 593.33 T
0 12 Q
(Declaring V) 180 566 T
(isual Monikers) 245.81 566 T
1 10 Q
-0.34 (For an object to have a visual moniker) 180 544.33 P
-0.34 (, it must have an instance data \336eld of) 353.98 544.33 P
-0.81 (type) 180 531.33 P
3 F
-0.84 (@visMoniker) 201.96 531.33 P
1 F
-0.81 ( as) 268.32 531.33 P
3 F
-0.84 (GenClass) 282.44 531.33 P
1 F
-0.81 ( does \050see section 5.4.1.2 on page 192\051. If you) 330.77 531.33 P
(are in fact working with GenClass\325 GI_visMoniker \336eld, you might want to) 180 518.33 T
(consult its description in \322GenClass,\323 Chapter) 180 505.33 T
(2 of the Objects Book.) 394.83 505.33 T
(V) 180 485.33 T
(isual monikers may take many forms, and the declaration line changes) 186.78 485.33 T
-0.17 (depending on which form you are using. The form ranges from a simple text) 180 472.33 P
-0.42 (\336eld to a complex list of possible monikers based on video resolution. Each of) 180 459.33 P
(these forms and the declaration line for it is given below) 180 446.33 T
(.) 438.74 446.33 T
(The following form is used for simple text strings \050shown with example\051:) 180 426.33 T
5 F
(<fname> = <string>;) 216 410.33 T
(GI_visMoniker = \322One\323;) 216 396.33 T
3 F
(fname) 180 375.33 T
1 F
(The name of the moniker) 243 375.33 T
(\325) 359.86 375.33 T
(s instance data \336eld.) 361.53 375.33 T
3 F
(string) 180 356.33 T
1 F
-0.2 (A string of text enclosed in quotation marks. This string is the) 243 356.33 P
(visual moniker for the object.) 243 344.33 T
(The following form is used for text strings that have a keyboard navigation) 180 325.33 T
(character) 180 312.33 T
(. A keyboard navigation character can be a character enclosed in) 223.14 312.33 T
(single quotation marks, a numerical constant, or a text string representing) 180 299.33 T
-0.18 (some constant de\336ned with) 180 286.33 P
3 F
-0.19 (#de\336ne) 308.17 286.33 P
1 F
-0.18 (. If it\325) 345.76 286.33 P
-0.18 (s a text string, the string is passed) 369.84 286.33 P
(on for the) 180 273.33 T
1 9 Q
(C) 227.22 273.33 T
1 10 Q
( compiler to parse. The form is shown below with an example.) 233.72 273.33 T
5 F
(<fname> = <nav>, <string>;) 216 257.33 T
(GI_visMoniker = \325V\325, \322View\323;) 216 243.33 T
3 F
(fname) 180 222.33 T
1 F
(The name of the moniker) 243 222.33 T
(\325) 359.86 222.33 T
(s instance data \336eld.) 361.53 222.33 T
3 F
(nav) 180 203.33 T
1 F
(A keyboard navigation character represented as described) 243 203.33 T
(above.) 243 191.33 T
3 F
(string) 180 172.33 T
1 F
(A text string enclosed in quotation marks.) 243 172.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "215" 75
%%Page: "216" 76
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(216) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The following form is used when a list of monikers is required. Most) 180 641.33 T
(frequently) 180 628.33 T
(, this form is used when de\336ning an application\325) 226.85 628.33 T
(s icons; one) 447.99 628.33 T
-0.15 (moniker for each potential screen resolution will be included in the list. The) 180 615.33 P
(form is shown below) 180 602.33 T
(, along with an example.) 272.98 602.33 T
5 F
(<fname> = list { <nameList> };) 216 586.33 T
(GI_visMoniker = list {) 216 572.33 T
( @DocDirButtonSCMoniker,) 216 558.33 T
( @DocDirButtonSMMoniker,) 216 544.33 T
( @DocDirButtonSCGAMoniker) 216 530.33 T
(}) 216 516.33 T
3 F
(fname) 180 495.33 T
1 F
(This is the name of the moniker) 243 495.33 T
(\325) 390.98 495.33 T
(s instance data \336eld.) 392.65 495.33 T
3 F
(nameList) 180 476.33 T
1 F
(This is a list of resource data chunk names separated by) 243 476.33 T
(commas. Each chunk can be de\336ned with the) 243 464.33 T
3 F
(@chunk) 453.76 464.33 T
1 F
( or) 494.01 464.33 T
3 F
(@visMoniker) 243 452.33 T
1 F
( keyword.) 309.35 452.33 T
(It is possible when declaring a list of visual monikers to have each moniker) 180 433.33 T
-0.2 (within a chunk or to declare each moniker with the) 180 420.33 P
3 F
-0.21 (@visMoniker) 417.45 420.33 P
1 F
-0.2 ( keyword.) 483.8 420.33 P
(If used on its own line, this keyword takes the form) 180 407.33 T
5 F
(@visMoniker <fname> = <init>;) 216 391.33 T
1 F
-0.68 (The \336elds are the name of the moniker \050same as that speci\336ed in the moniker) 180 370.33 P
(list\051 and the moniker data. The visual moniker will be put in its own chunk) 180 357.33 T
(just as if the moniker had been declared with the) 180 344.33 T
3 F
(@chunk) 409.66 344.33 T
1 F
( keyword, but) 449.91 344.33 T
(using) 180 331.33 T
3 F
(@visMoniker) 208.15 331.33 T
1 F
( often is clearer and easier) 274.5 331.33 T
(.) 395.99 331.33 T
0 12 Q
(Declaring GCN List Assignments) 180 305 T
1 9 Q
(GEOS) 180 283.33 T
1 10 Q
( employs a \322General Change Noti\336cation\323 \050) 206.17 283.33 T
1 9 Q
(GCN) 404.16 283.33 T
1 10 Q
(\051 system which allows) 425 283.33 T
(objects to register for noti\336cation of certain types of events. For example,) 180 270.33 T
(some applications may want to notify for changes in the \336le system \050\336le) 180 257.33 T
-0.22 (deletes, moves, copies, etc.\051; some objects may require noti\336cation each time) 180 244.33 P
-0.71 (the selection changes \050e.g., a PointSizeControl object needs to know when the) 180 231.33 P
-0.45 (user changes a text selection\051. For further information, see \322General Change) 180 218.33 P
(Noti\336cation,\323 Chapter) 180 205.33 T
(9.) 284.64 205.33 T
-0.59 (While many objects will add themselves to and remove themselves from) 180 185.33 P
1 9 Q
-0.53 (GCN) 507.98 185.33 P
1 10 Q
(lists dynamically) 180 172.33 T
(, others will need to be placed on certain) 257.61 172.33 T
1 9 Q
(GCN) 446.34 172.33 T
1 10 Q
( lists in their) 467.17 172.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "216" 76
%%Page: "217" 77
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(217) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.19 (de\336nitions. For this, the) 180 641.33 P
3 F
-0.2 (gcnList) 293.68 641.33 P
1 F
-0.19 ( keyword \050the only one not preceded by the) 332.38 641.33 P
(marker) 180 628.33 T
3 F
(@) 217.04 628.33 T
1 F
(\051 is used. Its format is shown below:) 224.51 628.33 T
5 F
(gcnList\050<manufID>, <ltype>\051 = <oname>,+;) 216 612.33 T
3 F
(manufID) 180 591.33 T
1 F
(This is the manufacturer) 243 591.33 T
1 9 Q
(ID) 361.34 591.33 T
1 10 Q
( of the manufacturer responsible) 372.01 591.33 T
(for creating the particular list type. It is used to differentiate) 243 579.33 T
(different manufacturers who may use the same list type) 243 567.33 T
(enumerator) 243 555.33 T
(. In many cases, this will be the type) 296.7 555.33 T
1 9 Q
(MANUF) 243 543.33 T
(ACTURER_ID_GEOWORKS) 278 543.33 T
1 10 Q
(.) 399 543.33 T
3 F
(ltype) 180 524.33 T
1 F
(This is the name of the) 243 524.33 T
1 9 Q
(GCN) 351.91 524.33 T
1 10 Q
( list. Most that you will use are) 372.74 524.33 T
-0.31 (de\336ned by GenApplication and begin) 243 512.33 P
1 9 Q
-0.28 (GAGCNL) 414.64 512.33 P
-0.28 (T_) 454.48 512.33 P
1 10 Q
-0.31 (\311. All the list) 464.98 512.33 P
-0.31 (types are de\336ned in the GenApplication chapter in the Objects) 243 500.33 P
(book.) 243 488.33 T
3 F
(oname) 180 469.33 T
1 F
(This is a list of objects that should be on the) 243 469.33 T
1 9 Q
(GCN) 448.97 469.33 T
1 10 Q
( list. The) 469.8 469.33 T
(objects are separated by commas.) 243 457.33 T
0 12 Q
(Declaring Keyboard Accelerators) 180 432 T
1 10 Q
-0.78 (A keyboard accelerator acts as a \322hot key) 180 410.33 P
-0.78 (,\323 invoking the object\325) 363.07 410.33 P
-0.78 (s default action) 459.45 410.33 P
(when pressed. The accelerator character is de\336ned in an instance \336eld) 180 397.33 T
(declared with) 180 384.33 T
3 F
(@kbdAccelerator) 245.56 384.33 T
1 F
( as shown in section 5.4.1.2 on page 192.) 333.42 384.33 T
(The form of declaration follows.) 180 371.33 T
5 F
(<fname> = [@specificUI] <mod>* <key>;) 216 355.33 T
3 F
(fname) 180 334.33 T
1 F
(This is the name of the) 243 334.33 T
3 F
(@kbdAccelerator) 351.91 334.33 T
1 F
( instance data \336eld.) 439.77 334.33 T
3 F
(@speci\336cUI) 180 315.33 T
1 F
(This is a Goc keyword that, when used in this declaration,) 243 315.33 T
-0.27 (allows your program to use a key combination reserved for the) 243 303.33 P
(speci\336c) 243 291.33 T
1 9 Q
(UI) 279.29 291.33 T
1 10 Q
(. This can have unde\336ned consequences and is) 290.29 291.33 T
(strongly discouraged.) 243 279.33 T
3 F
(mod) 180 260.33 T
1 F
(This is a modi\336er key) 243 260.33 T
(. Y) 341.54 260.33 T
(ou may put any or all of the modi\336ers) 353.03 260.33 T
(here, separated by spaces. The four modi\336ers are) 243 248.33 T
4 F
(alt) 472.46 248.33 T
1 F
(,) 485.05 248.33 T
4 F
(control) 490.61 248.33 T
1 F
(,) 522.45 248.33 T
4 F
(ctrl) 243 236.33 T
1 F
(, and) 258.73 236.33 T
4 F
(shift) 284.48 236.33 T
1 F
(.) 305.21 236.33 T
3 F
(key) 180 217.33 T
1 F
-0.12 (This is either a character enclosed in single quotes \050e.g., \324k\325\051 or) 243 217.33 P
(a numeric key constant \050e.g.,) 243 205.33 T
1 9 Q
(C_CTRL_A) 378.57 205.33 T
1 10 Q
( or 0x41\051.) 425.57 205.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "217" 77
%%Page: "218" 78
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(218) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Using Default V) 180 640 T
(alues) 268.02 640 T
1 10 Q
(Often an object will be declared with the default values of an instance data) 180 618.33 T
-0.24 (\336eld. Other times, especially with generic) 180 605.33 P
1 9 Q
-0.21 (UI) 373.24 605.33 P
1 10 Q
-0.24 ( object attributes, an object will) 384.23 605.33 P
(have the default values with one or two modi\336cations. In the \336rst case, the) 180 592.33 T
-0.52 (instance data \336eld does not need to be addressed at all; the default value will) 180 579.33 P
(be used if no declaration is made.) 180 566.33 T
(In the second case, however) 180 546.33 T
(, you must use the) 307.59 546.33 T
3 F
(@default) 395.01 546.33 T
1 F
( keyword to get the) 439.52 546.33 T
(default values. If modi\336cations are made and) 180 533.33 T
3 F
(@default) 391.51 533.33 T
1 F
( is not used, all) 436.02 533.33 T
(default values will be lost. This is normally used only with bit\336eld-type) 180 520.33 T
(attributes, and modi\336cations are made with bitwise operators. The use of) 180 507.33 T
3 F
(@default) 180 494.33 T
1 F
( is shown below) 224.51 494.33 T
(.) 295.83 494.33 T
5 F
(<fname> = @default [<op> [~]<attr>]*;) 216 478.33 T
3 F
(fname) 180 457.33 T
1 F
(This is the name of the instance data \336eld.) 243 457.33 T
3 F
(op) 180 438.33 T
1 F
-0.43 (This is a bitwise operator) 243 438.33 P
-0.43 (. If adding an attribute to the default,) 357.77 438.33 P
(use the bitwise) 243 426.33 T
1 9 Q
(OR) 315.24 426.33 T
1 10 Q
( operator \050|\051; if removing an attribute, use) 328.74 426.33 T
(the bitwise) 243 414.33 T
1 9 Q
(AND) 296.72 414.33 T
1 10 Q
( operator \050&\051 with the inverse of the attribute) 317.55 414.33 T
(\050see below\051. One operator is required for each attribute added) 243 402.33 T
(or removed. The priorities of the operators are the same as in) 243 390.33 T
(the standard) 243 378.33 T
1 9 Q
(C) 305.23 378.33 T
1 10 Q
( programming language.) 311.73 378.33 T
3 F
(~) 180 359.33 T
1 F
-0.87 (This is the bitwise operator) 243 359.33 P
1 9 Q
-0.79 (NOT) 368.1 359.33 P
1 10 Q
-0.87 (. If removing an attribute using) 387.52 359.33 P
(the bitwise) 243 347.33 T
1 9 Q
(AND) 296.72 347.33 T
1 10 Q
( operator) 317.55 347.33 T
(, you should include the) 358.67 347.33 T
1 9 Q
(NOT) 471.27 347.33 T
1 10 Q
( symbol) 491.61 347.33 T
(in front of the attribute.) 243 335.33 T
3 F
(attr) 180 316.33 T
1 F
(This is the name of the attribute being added or removed.) 243 316.33 T
81 284.98 531 297 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 284.98 531 297 R
7 X
0 0 0 1 0 0 0 K
V
76.5 292.23 617.5 295.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 278.31 T
(5-) 147.13 278.31 T
(17 Declaring Objects with @object) 156.02 278.31 T
5 9 Q
(/* This example shows the use of @start, @object, @visMoniker, and @end.) 125 263.98 T
( * It is taken from the TicTac sample application. */) 125 252.98 T
(@start AppResource;) 81 234.98 T
(/* The AppResource resource block contains the TicTacApp) 125 223.98 T
( * object and its visual moniker chunk. */) 125 212.98 T
(@object GenApplicationClass TicTacApp = {) 81 194.98 T
(GI_visMoniker = list { @TicTacTextMoniker };) 102.6 183.98 T
(GI_comp = @TicTacPrimary;) 102.6 172.98 T
(gcnList\050MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS\051 = @TicTacPrimary;) 102.6 161.98 T
(}) 81 150.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "218" 78
%%Page: "219" 79
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(219) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 9 Q
0 X
(@visMoniker TicTacTextMoniker = \322TicTacToe\323;) 81 642 T
(@end AppResource) 81 631 T
(@start Interface;) 81 613 T
(/* The Interface resource declares TicTac\325s primary window and other UI) 125 602 T
( * gadgetry. Only the GenView from this application is shown. */) 125 591 T
(@object GenViewClass TicTacView = {) 81 580 T
(GVI_content = @TicTacBoard;) 102.6 569 T
(/* A relocatable optr field */) 301 569 T
(GVI_docBounds = {0, 0, BOARD_WIDTH, BOARD_HEIGHT};) 102.6 558 T
(/* A Rectangle structure */) 301 547 T
(GVI_color = { C_BLUE, 0, 0, 0 };) 102.6 536 T
(/* A ColorQuad structure */) 301 536 T
(GVI_horizAttrs = @default | GVDA_NO_LARGER_THAN_CONTENT) 102.6 525 T
(| GVDA_NO_SMALLER_THAN_CONTENT) 234.1 514 T
(& ~GVDA_SCROLLABLE;) 234.1 503 T
(/* The NO_LARGER and NO_SMALLER attributes are set in the) 168.98 492 T
( * field, and SCROLLABLE is cleared. The SCROLLABLE attribute) 168.98 481 T
( * is not set by default for the GenView; it is shown here) 168.98 470 T
( * for illustration. */) 168.98 459 T
(GVI_vertAttrs = @default) 102.6 448 T
(| GVDA_NO_LARGER_THAN_CONTENT) 237.6 448 T
(| GVDA_NO_SMALLER_THAN_CONTENT;) 228.7 437 T
(}) 81 426 T
(@end Interface) 81 408 T
81 383.98 531 396 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 383.98 531 396 R
7 X
0 0 0 1 0 0 0 K
V
76.5 391.23 617.5 394.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(5.4.5) 130.86 343.98 T
0 18 Q
(Sending Messages) 180 343.98 T
5 10 Q
-0.6 (@send, @call, @callsuper, @record, @dispatch, @dispatchcall) 180 320.31 P
1 F
-0.05 (Often you will have to send messages to objects throughout the system. Y) 180 300.31 P
-0.05 (ou) 517.16 300.31 P
(can send messages in several ways, but the two most basic and most) 180 287.31 T
(frequently used involve the keywords) 180 274.31 T
3 F
(@call) 355.38 274.31 T
1 F
( and) 381.56 274.31 T
3 F
(@send) 404.53 274.31 T
1 F
(.) 436.26 274.31 T
(If a message is being sent across threads, you must be aware of) 180 254.31 T
-0.38 (synchronization issues. If the message does not cross thread boundaries, the) 180 241.31 P
(kernel will link the code directly as if it were a function call. \050This is an) 180 228.31 T
-0.69 (implementation difference only; you do not have to specify anything different) 180 215.31 P
(in your code.\051) 180 202.31 T
-0.05 (The) 180 182.31 P
3 F
-0.05 (@send) 200.51 182.31 P
1 F
-0.05 ( keyword causes the kernel to put the speci\336ed message into the) 232.24 182.31 P
(recipient\325) 180 169.31 T
(s event queue. Messages sent with) 222.59 169.31 T
3 F
(@send) 384.65 169.31 T
1 F
( may not give return) 416.38 169.31 T
(values and may not take pointers to locked memory as arguments. The) 180 156.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "219" 79
%%Page: "220" 80
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(220) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.53 (sender then continues executing without ever knowing whether the message) 180 641.33 P
(was properly handled or not.) 180 628.33 T
(The) 180 608.33 T
3 F
(@call) 200.56 608.33 T
1 F
( keyword is used when the message being sent must return) 226.74 608.33 T
-0.4 (information to the sender) 180 595.33 P
-0.4 (. It is also used when the message must be handled) 295.86 595.33 P
-0.01 (immediately) 180 582.33 P
-0.01 (, before the sender is allowed to continue executing. In essence,) 236.68 582.33 P
(the sender is \322put to sleep\323 until the message has been processed, at which) 180 569.33 T
-0.69 (time the sender is woken up and may continue executing. If the message sent) 180 556.33 P
(with) 180 543.33 T
3 F
(@call) 203.71 543.33 T
1 F
( is not handled \050passed up the recipient\325) 229.89 543.33 T
(s class tree and still not) 413.61 543.33 T
(handled\051, it will return as if it had been; no error message will be returned.) 180 530.33 T
(The formats for) 180 510.33 T
3 F
(@send) 254.63 510.33 T
1 F
( and) 286.36 510.33 T
3 F
(@call) 309.33 510.33 T
1 F
( are similar) 335.51 510.33 T
(. Use them like function calls.) 388.3 510.33 T
(Their format is given below:) 180 497.33 T
5 F
(@send [,<flags>]+ \134) 216 481.33 T
(<obj>::[{<cast2>}]<msg>\050<params>*\051;) 288 467.33 T
(<ret> = @call [,<flags>]+ [{<cast>}] <obj>::\134) 216 450.33 T
([{<cast2>}]<msg>\050<params>*\051;) 324 436.33 T
3 F
(\337ags) 180 415.33 T
1 F
(This is a list of \337ags separated by the commas. The allowed) 243 415.33 T
(\337ags are shown below) 243 403.33 T
(.) 343.21 403.33 T
3 F
(obj) 180 384.33 T
1 F
-0.77 (This is the name of the object to which the message will be sent.) 243 384.33 P
(It can also be an optr variable.) 243 372.33 T
3 F
(msg) 180 353.33 T
1 F
(This is the name of the message being sent.) 243 353.33 T
3 F
(params) 180 334.33 T
1 F
(This is a list of parameters, built exactly as it would be for a) 243 334.33 T
(standard) 243 322.33 T
1 9 Q
(C) 287.45 322.33 T
1 10 Q
( function call.) 293.95 322.33 T
3 F
(ret) 180 303.33 T
1 F
(This is a variable that will hold the return value, if any) 243 303.33 T
(. Note) 497.32 303.33 T
(that this is valid only with) 243 291.33 T
3 F
(@call) 368.22 291.33 T
1 F
( because) 394.4 291.33 T
3 F
(@send) 436.26 291.33 T
1 F
( does not) 467.99 291.33 T
(return anything.) 243 279.33 T
3 F
(cast) 180 260.33 T
1 F
-0.12 (If a message name is put here, Goc will automatically cast the) 243 260.33 P
(return type to whatever type is returned by) 243 248.33 T
3 F
(cast) 446.71 248.33 T
1 F
(.) 467.64 248.33 T
3 F
(cast2) 180 229.33 T
1 F
(If a message name is put here, Goc will assume that the) 243 229.33 T
(message is passed the same arguments as message) 243 217.33 T
3 F
(cast2) 481.75 217.33 T
1 F
(.) 508.42 217.33 T
(The \337ags allowed for these keywords are listed below) 180 198.33 T
(. They are rarely used) 424.49 198.33 T
(but are available.) 180 185.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "220" 80
%%Page: "221" 81
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(221) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(forceQueue) 180 641.33 T
1 F
-0.05 (This \337ag will cause the message to be placed in the recipient\325) 243 641.33 P
-0.05 (s) 523.64 641.33 P
-0.53 (event queue, even if it could have been handled by a direct call.) 243 629.33 P
(Do not use this \337ag with) 243 617.33 T
3 F
(@call) 358.95 617.33 T
1 F
(.) 385.13 617.33 T
4 F
(checkDuplicate) 180 598.33 T
1 F
-0.8 (This \337ag makes the kernel check if a message of the same name) 243 586.33 P
-0.09 (is already in the recipient\325) 243 574.33 P
-0.09 (s event queue. For this \337ag to work,) 363.2 574.33 P
4 F
-0.14 (forceQueue) 243 562.33 P
1 F
-0.14 ( must also be passed. Events are checked from \336rst) 293.53 562.33 P
(\050next-to-be-processed\051 to last.) 243 550.33 T
4 F
(checkLastOnly) 180 531.33 T
1 F
(This \337ag works with) 243 519.33 T
4 F
(checkDuplicate) 340.43 519.33 T
1 F
(, causing it to check only) 409.85 519.33 T
(the last message in the event queue.) 243 507.33 T
4 F
(replace) 180 488.33 T
1 F
(This \337ag modi\336es) 243 488.33 T
4 F
(checkDuplicate) 327.46 488.33 T
1 F
( and) 396.88 488.33 T
4 F
(checkLastOnly) 419.85 488.33 T
1 F
( by) 487.43 488.33 T
(superseding the duplicate \050old\051 event with the new one. The) 243 476.33 T
(new event will be put in the duplicate\325) 243 464.33 T
(s position in the event) 418.96 464.33 T
-0.43 (queue. If a duplicate is found but the) 243 452.33 P
4 F
-0.43 (replace) 412.76 452.33 P
1 F
-0.43 ( \337ag is not passed,) 445.33 452.33 P
(the duplicate will be dropped.) 243 440.33 T
4 F
(insertAtFront) 180 421.33 T
1 F
(This puts the message at the front of the recipient\325) 243 409.33 T
(s event) 476.17 409.33 T
(queue.) 243 397.33 T
4 F
(canDiscardIfDesperate) 180 378.33 T
1 F
(This \337ag indicates that this event may be discarded if the) 243 366.33 T
-0.59 (system is running extremely low on handles and requires more) 243 354.33 P
(space immediately) 243 342.33 T
(.) 327.83 342.33 T
-0.07 (The) 180 323.33 P
3 F
-0.07 (@call) 200.49 323.33 P
1 F
-0.07 ( command can also be used within an expression in the same way) 226.67 323.33 P
(a function call could. For example, the following conditional expression is) 180 310.33 T
(valid:) 180 297.33 T
5 F
(if \050@call MyObj::MSG_MYOBJ_TEST\050\051\051 {) 216 281.33 T
(/* conditional code */) 240 267.33 T
(}) 216 253.33 T
1 F
-0.63 (The result of the message call will be evaluated in the if statement. Note that) 180 232.33 P
(this may not be done with) 180 219.33 T
3 F
(@send) 302.62 219.33 T
1 F
( because it returns nothing.) 334.35 219.33 T
0 12 Q
(Nested Message Calls) 180 193 T
1 10 Q
(Because of the way Goc processes message calls, it is impossible to nest) 180 171.33 T
(messages on a single line. For example, this call is illegal:) 180 158.33 T
81 144 171 253.66 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Nested Messages) 81 200.66 T
1 F
(messages cannot be) 81 184.66 T
(nested on a single) 81 173.66 T
(line.) 81 162.66 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81.5 253.16 170.5 253.16 2 L
1 H
2 Z
N
0 0 0 1 0 0 0 K
81 209.42 121.5 249.92 R
0 Z
N
0 0 0 1 0 0 0 K
3 H
90 450 13.5 13.5 101.25 229.67 A
91.7 239.21 110.79 220.12 2 L
1 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "221" 81
%%Page: "222" 82
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(222) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
(@send Obj1::MSG_THATS_PASSED_AN_INT\050\134) 216 641.33 T
(@call Obj2::MSG_THAT_RETURNS_INT\050\051\051;) 288 627.33 T
1 F
(Any such call will generate a compile-time error) 180 606.33 T
(. Instead, you should use) 401.12 606.33 T
(temporary variables to break this up into several lines, e.g.:) 180 593.33 T
5 F
(int i;) 216 577.33 T
(i = @call Obj2::MSG_THAT_RETURNS_INT\050\051;) 216 560.33 T
(@send Obj2::MSG_THATS_PASSED_AN_INT\050i\051;) 216 543.33 T
0 12 Q
(Sending a Message to an Object\325) 180 516 T
(s Superclass) 366.95 516 T
1 10 Q
(Often you may wish to send a message directly to an object\325) 180 494.33 T
(s superclass to) 453.93 494.33 T
(ensure that default behavior is implemented. Use the) 180 481.33 T
3 F
(@callsuper) 429.85 481.33 T
1 F
( keyword) 485.48 481.33 T
(with the following format:) 180 468.33 T
5 F
(@callsuper <obj>::<class>::<msg>\050<pars>*\051 [<flgs>+];) 216 452.33 T
3 F
(obj) 180 431.33 T
1 F
(This is the object to send the message to, as in) 243 431.33 T
3 F
(@call) 459.34 431.33 T
1 F
( and) 485.52 431.33 T
3 F
(@send) 243 419.33 T
1 F
(. The object block must already be locked, and must be) 274.73 419.33 T
-0.35 (run by the current thread of execution. \050Usually an object uses) 243 407.33 P
3 F
(@callsuper\050\051) 243 395.33 T
1 F
( to send a message to itself.\051) 306.41 395.33 T
3 F
(class) 180 376.33 T
1 F
(This is the class whose superclass should receive the message.) 243 376.33 T
3 F
(msg) 180 357.33 T
1 F
(This is the message name.) 243 357.33 T
3 F
(pars) 180 338.33 T
1 F
(This is the parameter list, same as) 243 338.33 T
3 F
(@call) 406.19 338.33 T
1 F
( and) 432.37 338.33 T
3 F
(@send) 455.34 338.33 T
1 F
(.) 487.07 338.33 T
3 F
(\337gs) 180 319.33 T
1 F
(This is the \337ags list, same as) 243 319.33 T
3 F
(@call) 379.34 319.33 T
1 F
( and) 405.52 319.33 T
3 F
(@send) 428.49 319.33 T
1 F
(.) 460.22 319.33 T
(When used on a line by itself \050with no parameters or return values\051,) 180 300.33 T
3 F
(@callsuper\050\051) 180 287.33 T
1 F
( passes a received message on to the superclass. This is used) 243.41 287.33 T
(quite often when a subclass wants to alter existing behavior rather than) 180 274.33 T
(replace it.) 180 261.33 T
0 12 Q
(Encapsulating a Message) 180 235 T
1 10 Q
(By encapsulating messages, you can set up events to be sent out at a later) 180 213.33 T
-0.75 (time. An encapsulated message can include the message to be sent, the object) 180 200.33 P
(it should be sent to, and the parameters that should be passed. Using) 180 187.33 T
(encapsulated messages can sometimes simplify coding.) 180 174.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "222" 82
%%Page: "223" 83
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(223) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Messages can be encapsulated with the) 180 641.33 T
3 F
(@record) 364.47 641.33 T
1 F
( keyword and later) 406.4 641.33 T
(dispatched with) 180 628.33 T
3 F
(@dispatch) 256.49 628.33 T
1 F
( and) 308.78 628.33 T
3 F
(@dispatchcall) 331.75 628.33 T
1 F
(. \050Though the use of) 402.75 628.33 T
3 F
(@record) 180 615.33 T
1 F
( does not necessitate a later) 221.93 615.33 T
3 F
(@dispatch) 352.88 615.33 T
1 F
(\321instead, the recorded) 405.17 615.33 T
(event can be passed as a parameter to another class for dispatching.\051 In) 180 602.33 T
-0.59 (addition, when the event is dispatched, you can override the values set in the) 180 589.33 P
(encapsulated event to change the destination or the message. Y) 180 576.33 T
(ou can also) 472.26 576.33 T
-0.42 (cast the return value to another type if necessary) 180 563.33 P
-0.42 (. The formats of these three) 403.14 563.33 P
(keywords are as follows:) 180 550.33 T
5 F
(<event> = @record <obj>::[{<cast>}]<msg>\050<params>*\051;) 216 534.33 T
3 F
(event) 180 513.33 T
1 F
(The handle of the recorded event, of type) 243 513.33 T
3 F
(EventHandle) 434.3 513.33 T
1 F
(.) 502.44 513.33 T
3 F
(obj) 180 494.33 T
1 F
(The object set to receive the message when it is dispatched.) 243 494.33 T
(This \336eld may be set to) 243 482.33 T
4 F
(null) 353.03 482.33 T
1 F
( if the destination is determined) 371.91 482.33 T
(when the message is dispatched.) 243 470.33 T
3 F
(cast) 180 451.33 T
1 F
(The name of a message; if this is present, the event will have) 243 451.33 T
(the same argument types as the speci\336ed message.) 243 439.33 T
3 F
(msg) 180 420.33 T
1 F
-0.11 (The message set to be sent when the event is dispatched. This) 243 420.33 P
-0.26 (\336eld may be set to) 243 408.33 P
4 F
-0.26 (null) 328.36 408.33 P
1 F
-0.26 ( if the message is determined when it is) 347.24 408.33 P
(dispatched.) 243 396.33 T
3 F
(params) 180 377.33 T
1 F
(The parameter list \050same as in) 243 377.33 T
3 F
(@call) 387.66 377.33 T
1 F
( and) 413.84 377.33 T
3 F
(@send) 436.81 377.33 T
1 F
(\051 that will be) 468.54 377.33 T
(sent with the dispatched message.) 243 365.33 T
(The) 180 346.33 T
3 F
(@dispatch) 200.56 346.33 T
1 F
( keyword is used to dispatch an encapsulated event to its) 252.85 346.33 T
-0.18 (destination. This is similar to) 180 333.33 P
3 F
-0.18 (@send) 318.23 333.33 P
1 F
-0.18 ( in that it can have no return values. If) 349.96 333.33 P
(the event has return values, use) 180 320.33 T
3 F
(@dispatchcall) 331.68 320.33 T
1 F
( \050below\051.) 402.68 320.33 T
5 F
(@dispatch [noFree] \134) 216 304.33 T
(<nObj>::[{<cast>}]<nMsg>::<event>;) 288 290.33 T
3 F
(noFree) 180 269.33 T
1 F
(This \337ag indicates that the event\325) 243 269.33 T
(s handle should not be freed) 397.66 269.33 T
-0.08 (after the event has been dispatched. This is useful if the same) 243 257.33 P
(encapsulated event is to be used more than once.) 243 245.33 T
3 F
(nObj) 180 226.33 T
1 F
(This is an override destination. If the destination in the) 243 226.33 T
-0.83 (encapsulated event is null, then an object must be set here. Any) 243 214.33 P
-0.3 (object set will override that in the encapsulated message. If no) 243 202.33 P
(override object is desired, set this to) 243 190.33 T
4 F
(null) 411.9 190.33 T
1 F
(.) 430.78 190.33 T
3 F
(nMsg) 180 171.33 T
1 F
(This is an override message. If set, this message will be sent) 243 171.33 T
(rather than that in the encapsulated event. If no override) 243 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "223" 83
%%Page: "224" 84
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(224) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(message is desired, set this to) 243 641.33 T
4 F
(null) 383.21 641.33 T
1 F
(. Any override will be sent) 402.09 641.33 T
(with the same parameters as set in the encapsulated event.) 243 629.33 T
3 F
(event) 180 610.33 T
1 F
(This is the handle of the encapsulated event.) 243 610.33 T
(The) 180 591.33 T
3 F
(@dispatchcall) 200.56 591.33 T
1 F
( keyword works exactly like the) 271.56 591.33 T
3 F
(@dispatch) 420.29 591.33 T
1 F
( keyword) 472.58 591.33 T
-0.01 (above except that it allows the use of return values. The sender will be \322put) 180 578.33 P
(to sleep\323 if necessary while the recipient processes the message and will be) 180 565.33 T
(\322woken up\323 when the message returns.) 180 552.33 T
5 F
(<ret> = @dispatchcall [noFree] [{<cast>}] <nObj>::\134) 216 536.33 T
(<nMsg>::<event>;) 432 522.33 T
3 F
(ret) 180 501.33 T
1 F
(This is a variable that will contain the return value of the) 243 501.33 T
(message.) 243 489.33 T
3 F
(other parameters) 180 470.33 T
1 F
(All the other parameters are the same as those in) 243 458.33 T
3 F
(@dispatch) 475.07 458.33 T
1 F
(.) 527.36 458.33 T
0 12 Q
(Using Expressions with Messages) 180 433 T
1 10 Q
(All message-sending keywords described in the previous sections\321) 180 411.33 T
3 F
(@call) 489.64 411.33 T
1 F
(,) 515.82 411.33 T
3 F
-0.44 (@send) 180 398.33 P
1 F
-0.42 (,) 211.73 398.33 P
3 F
-0.44 (@record) 216.87 398.33 P
1 F
-0.42 (,) 258.8 398.33 P
3 F
-0.44 (@dispatch) 263.93 398.33 P
1 F
-0.42 (, and) 316.22 398.33 P
3 F
-0.44 (@dispatchcall) 341.12 398.33 P
1 F
-0.42 (\321can take expressions in) 412.12 398.33 P
(place of a destination object\325) 180 385.33 T
(s name. Additionally) 309.65 385.33 T
(, the) 404.3 385.33 T
3 F
(@dispatch) 427.64 385.33 T
1 F
( and) 479.93 385.33 T
3 F
-0.8 (@dispatchcall) 180 372.33 P
1 F
-0.78 ( keywords can take expressions in place of the message name.) 251 372.33 P
(However) 180 359.33 T
(, if an expression is used for the message, you must use a cast type) 220.18 359.33 T
-0.74 (to make sure Goc knows the return and parameter types. Note, however) 180 346.33 P
-0.74 (, that) 504.69 346.33 P
(casts in this case use curly braces rather than parentheses.) 180 333.33 T
0 12 Q
(Casting Message Call and Return T) 180 307 T
(ypes) 379.82 307 T
1 10 Q
(Goc allows you to cast a message\325) 180 285.33 T
(s pass and return values. This is best) 333.37 285.33 T
(explained by example:) 180 272.33 T
5 F
({) 216 256.33 T
( int swapInt;) 216 242.33 T
( char c;) 216 228.33 T
( c = @call {MSG_1} object:: {MSG_2} MSG_X\050swapInt\051;) 216 211.33 T
(}) 216 194.33 T
1 F
(In this case,) 180 173.33 T
1 9 Q
(MSG_2) 238.71 173.33 T
1 10 Q
( takes an integer argument and) 269.38 173.33 T
1 9 Q
(MSG_1) 418.48 173.33 T
1 10 Q
( returns a char) 449.15 173.33 T
(.) 517.48 173.33 T
(The casts tell Goc how) 180 160.33 T
1 9 Q
(MSG_X) 286.13 160.33 T
1 10 Q
( will receive parameters and return results.) 318.13 160.33 T
(Goc needs the casts in those cases where) 180 147.33 T
1 9 Q
(MSG_X) 370.57 147.33 T
1 10 Q
( doesn\325) 402.57 147.33 T
(t appear explicitly) 433.69 147.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "224" 84
%%Page: "225" 85
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(225) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.35 (\050perhaps it has been stored as an integer\051, and thus Goc would not be able to) 180 641.33 P
(parse the parameters or return values.) 180 628.33 T
(When Goc tries to determine proper parameters and returns, it will look to) 180 608.33 T
-0.26 (the following sources when available. When trying to \336gure out parameters,) 180 595.33 P
(it will look \336rst for) 180 582.33 T
1 9 Q
(MSG_2) 269.09 582.33 T
1 10 Q
(, then) 299.76 582.33 T
1 9 Q
(MSG_X) 329.21 582.33 T
1 10 Q
(, and) 361.22 582.33 T
1 9 Q
(MSG_1) 386.97 582.33 T
1 10 Q
( last. The \336rst one Goc) 417.64 582.33 T
(\336nds will determine the parameters.) 180 569.33 T
3 F
(@send) 180 549.33 T
1 F
( and) 211.73 549.33 T
3 F
(@record) 234.7 549.33 T
1 F
( don\325) 276.63 549.33 T
(t support return values, but on a) 298.12 549.33 T
3 F
(@call) 451.84 549.33 T
1 F
(, Goc will) 478.02 549.33 T
(\336gure out return values by looking at) 180 536.33 T
1 9 Q
(MSG_1) 355.39 536.33 T
1 10 Q
(,) 386.06 536.33 T
1 9 Q
(MSG_X) 391.62 536.33 T
1 10 Q
(, and \336nally) 423.63 536.33 T
1 9 Q
(MSG_2) 481.61 536.33 T
1 10 Q
(.) 512.28 536.33 T
( In this case, Goc will pass to fn\325) 180 516.33 T
(s method like) 327.62 516.33 T
1 9 Q
(MSG_CAST_2) 392.45 516.33 T
1 10 Q
( but will return) 452.29 516.33 T
(values as) 180 503.33 T
1 9 Q
(MSG_CAST_1) 225.57 503.33 T
1 10 Q
( does:) 285.41 503.33 T
5 F
(Message fn = GetMessageToCall\050\051;) 216 487.33 T
(c = @call {MSG_CAST_1} myObj:: {MSG_CAST_2} fn\050x\051;) 216 473.33 T
1 F
( Now we pass to) 180 452.33 T
1 9 Q
(MSG_B) 257.06 452.33 T
1 10 Q
( like) 289.23 452.33 T
1 9 Q
(MSG_CAST_2) 312.02 452.33 T
1 10 Q
(, but return like) 371.86 452.33 T
1 9 Q
(MSG_B) 448.54 452.33 T
1 10 Q
(:) 480.7 452.33 T
5 F
( c = @call myObj:: {MSG_CAST_2} MSG_B\050swapInt\051;) 216 436.33 T
0 12 Q
(Message Shortcuts) 180 409 T
1 10 Q
(All messages, when received, contain three basic parameters: the message) 180 387.33 T
(number \050) 180 374.33 T
4 F
(message) 222.22 374.33 T
1 F
(\051, the optr of the recipient \050) 259.98 374.33 T
4 F
(oself) 384.42 374.33 T
1 F
(\051, and a far pointer to the) 404.96 374.33 T
(recipient\325) 180 361.33 T
(s locked instance chunk \050) 222.59 361.33 T
4 F
(pself) 338.52 361.33 T
1 F
(\051. This allows several shortcuts and) 359.8 361.33 T
(shorthand formats for use within methods:) 180 348.33 T
5 F
(@callsuper;) 216 332.33 T
1 F
(When used in a method as above, the) 180 311.33 T
3 F
(@callsuper) 354.66 311.33 T
1 F
( keyword passes the) 410.29 311.33 T
(received message up to the object\325) 180 298.33 T
(s superclass. Use this whenever) 335.38 298.33 T
(subclassing a message when the default functionality must be preserved.) 180 285.33 T
5 F
(<ret> = @call self::<msg>\050<params>*\051;) 216 269.33 T
1 F
(Any object can send a message to itself using) 180 248.33 T
3 F
(@call) 390.21 248.33 T
1 F
( and \322self\323 as the) 416.39 248.33 T
(destination. The remainder of the command is the same as a normal) 180 235.33 T
3 F
(@call) 498.2 235.33 T
1 F
(.) 524.38 235.33 T
5 F
(<ret> = @call process::<msg>\050<params>*\051;) 216 219.33 T
1 F
-0.29 (Any object can send a message to its Process object with) 180 198.33 P
3 F
-0.3 (@call) 438.29 198.33 P
1 F
-0.29 ( and \322process\323) 464.47 198.33 P
(as the destination. \050The Process object is the object of class) 180 185.33 T
3 F
(ProcessClass) 453.92 185.33 T
1 F
(.\051) 521.52 185.33 T
(The remainder of the command is the same as a normal) 180 172.33 T
3 F
(@call) 440.41 172.33 T
1 F
(.) 466.59 172.33 T
5 F
(<ret> = @call application::<msg>\050<params>*\051;) 216 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "225" 85
%%Page: "226" 86
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(226) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Any object can send a message to its Application object \050of class) 180 641.33 T
3 F
-0.94 (GenApplicationClass) 180 628.33 P
1 F
-0.91 (\051 with) 289.07 628.33 P
3 F
-0.94 (@call) 317.07 628.33 P
1 F
-0.91 ( and \322application\323 as the destination. The) 343.25 628.33 P
(remainder of the command is the same as a normal) 180 615.33 T
3 F
(@call) 419.85 615.33 T
1 F
(.) 446.03 615.33 T
5 F
(<ret> = @call @visParent::<msg>\050<params>*\051;) 216 599.33 T
1 F
(Any object in a visible tree can use) 180 578.33 T
3 F
(@visParent) 342.8 578.33 T
1 F
( as the destination of an) 400.82 578.33 T
3 F
-0.58 (@call) 180 565.33 P
1 F
-0.56 ( command. The message will be sent to the object\325) 206.18 565.33 P
-0.56 (s parent in the visible) 430.26 565.33 P
(object tree. The remainder of the command is the same as a normal) 180 552.33 T
3 F
(@call) 493.93 552.33 T
1 F
(.) 520.11 552.33 T
5 F
(<ret> = @call @genParent::<msg>\050<params>*\051;) 216 536.33 T
1 F
(Any object in a generic tree can use) 180 515.33 T
3 F
(@genParent) 346.3 515.33 T
1 F
( as the destination of an) 408.21 515.33 T
3 F
-0.84 (@call) 180 502.33 P
1 F
-0.81 ( command. The message will be sent to the object\325) 206.18 502.33 P
-0.81 (s parent in the generic) 428.01 502.33 P
(object tree. The remainder of the command is the same as a normal) 180 489.33 T
3 F
(@call) 493.93 489.33 T
1 F
(.) 520.11 489.33 T
5 F
(@send @visChildren::<msg>\050<params>*\051;) 216 473.33 T
1 F
(Any composite object in a visible object tree \050therefore a subclass of) 180 452.33 T
3 F
-0.24 (V) 180 439.33 P
-0.24 (isCompClass) 187.15 439.33 P
1 F
-0.23 (\051 can send a message that will be dispatched at once to all of) 253.45 439.33 P
-0 (its children. Any message sent with) 180 426.33 P
3 F
-0 (@visChildren) 347.59 426.33 P
1 F
-0 ( as the destination must) 416.17 426.33 P
(be dispatched with the) 180 413.33 T
3 F
(@send) 287.61 413.33 T
1 F
( keyword and therefore can have no return) 319.34 413.33 T
(value.) 180 400.33 T
5 F
(@send @genChildren::<msg>\050<params>*\051;) 216 384.33 T
1 F
(Any composite object in a generic object tree \050therefore a subclass of) 180 363.33 T
3 F
(GenClass) 180 350.33 T
1 F
(\051 can send a message that will be dispatched at once to all of its) 228.33 350.33 T
-0.25 (children. Any message sent with) 180 337.33 P
3 F
-0.26 (@genChildren) 331.88 337.33 P
1 F
-0.25 ( as the destination must be) 404.35 337.33 P
-0.3 (dispatched with the) 180 324.33 P
3 F
-0.31 (@send) 273.36 324.33 P
1 F
-0.3 ( keyword and therefore can have no return value.) 305.09 324.33 P
(In addition to the above shortcuts, you may also pass the optr of an object) 180 304.33 T
(using) 180 291.33 T
3 F
(@) 208.15 291.33 T
6 F
(<obj>) 215.62 291.33 T
1 F
(, where) 243.29 291.33 T
4 F
(<obj>) 279.96 291.33 T
1 F
( represents the name of the object. This syntax) 305.79 291.33 T
(gets translated by Goc into) 180 278.33 T
4 F
(\050optr\051&<obj>) 307.06 278.33 T
1 F
(; this is similar to using the) 366.77 278.33 T
(ampersand \050&\051 to pass a pointer) 180 265.33 T
(.) 327.98 265.33 T
0 14 Q
(5.4.6) 130.86 223 T
0 18 Q
(Managing Objects) 180 223 T
1 10 Q
-0.12 (In addition to knowing how to declare objects and classes, you need to know) 180 199.33 P
(how to manage objects during execution. This includes instantiating new) 180 186.33 T
(objects, deleting objects, saving object state, and moving objects around) 180 173.33 T
(object trees.) 180 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "226" 86
%%Page: "227" 87
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(227) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Both the kernel and) 180 641.33 T
3 F
(MetaClass) 275.38 641.33 T
1 F
( \050the topmost class in any class hierarchy\051) 328.71 641.33 T
(have routines and methods to create, manage, and destroy objects. Y) 180 628.33 T
(ou will) 495.78 628.33 T
(probably not have to or want to use all these routines and methods, but) 180 615.33 T
-0.64 (understanding what they do and how they work can help you understand the) 180 602.33 P
(object system as a whole.) 180 589.33 T
0 14 Q
(5.4.6.1) 119.19 555.67 T
(Creating New Objects) 180 555.67 T
5 10 Q
(ObjDuplicateResource\050\051, ObjInstantiate\050\051,) 180 533.33 T
(MSG_META_INITIALIZE, MSG_GEN_COPY_TREE) 180 520.33 T
1 F
-0.38 (Y) 180 500.33 P
-0.38 (ou can introduce objects to the system in four basic ways. Each of these has) 185.93 500.33 P
-0.43 (bene\336ts and drawbacks, and each has an appropriate place and time for use.) 180 487.33 P
(It is unlikely) 180 474.33 T
(, however) 238.16 474.33 T
(, that you will use all four different means.) 281.68 474.33 T
0 12 Q
(Storing Objects in a Resource Block) 180 448 T
1 10 Q
(This is a common and simple way to introduce objects to the system. The) 180 426.33 T
(Hello W) 180 413.33 T
(orld sample application uses this method of creating and loading) 216.67 413.33 T
(objects. Resource blocks are contained in your geode\325) 180 400.33 T
(s executable \336le \050the) 422.23 400.33 T
3 F
-0.22 (.geo) 180 387.33 P
1 F
-0.22 ( \336le\051 and are automatically loaded when accessed. These resources may) 200.74 387.33 P
(also be tagged for saving to state \336les automatically) 180 374.33 T
(.) 418.39 374.33 T
-0.31 (Setting up an object resource is simply a matter of de\336ning the resource and) 180 354.33 P
(using the) 180 341.33 T
3 F
(@object) 225.93 341.33 T
1 F
( keyword to de\336ne each object in the resource. The object) 265.07 341.33 T
-0.32 (resource block is automatically created and put in your executable \336le. Each) 180 328.33 P
-0.22 (object de\336ned with) 180 315.33 P
3 F
-0.22 (@object) 269.17 315.33 P
1 F
-0.22 ( is allocated a chunk and a chunk handle within) 308.31 315.33 P
(the resource block. Because both the chunk handle and the handle of the) 180 302.33 T
(resource block are known, accessing individual objects in the resource is) 180 289.33 T
(simple. In essence, when you set up an object resource, you don\325) 180 276.33 T
(t need to) 474.09 276.33 T
(worry about bringing the objects into the system or shutting them down.) 180 263.33 T
(Using a resource for objects has limitations. Objects loaded from resources) 180 243.33 T
-0.66 (are always loaded with the same characteristics. This can be a problem if you) 180 230.33 P
-0.42 (need to have several different copies of a certain set of objects, and each copy) 180 217.33 P
(can be changed. In this case, you would duplicate the resource \050see below\051) 180 204.33 T
(before accessing the objects within it.) 180 191.33 T
(For an example of objects de\336ned by means of declaring them with the) 180 171.33 T
3 F
(@object) 180 158.33 T
1 F
( keyword within an object resource, see Code Display) 219.14 158.33 T
(5-) 466.94 158.33 T
(17.) 475.83 158.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "227" 87
%%Page: "228" 88
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(228) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.82 (T) 180 641.33 P
-0.82 (o de\336ne an object resource, you must know what objects you\325ll require before) 185.75 641.33 P
-0.81 (your geode is launched. Some complex programs will dynamically instantiate) 180 628.33 P
(individual objects or entire trees without knowing previously what objects) 180 615.33 T
(will be required. T) 180 602.33 T
(o do this, you\325ll need to use) 264.1 602.33 T
3 F
(ObjInstantiate\050\051) 391.16 602.33 T
1 F
( \050see below\051) 474.85 602.33 T
(for instantiating individual objects.) 180 589.33 T
0 12 Q
(Duplicating an Object Block Resource) 180 563 T
1 10 Q
(This is another common method employed by both the User Interface and) 180 541.33 T
(applications. It provides the simplicity of the object resource model \050above\051) 180 528.33 T
-0.22 (while allowing you to have several different copies of the resource. Thus, it\325) 180 515.33 P
-0.22 (s) 523.81 515.33 P
(perfect if you want to use templates for your object blocks \050this is what the) 180 502.33 T
(Document Control object does, as shown in the T) 180 489.33 T
(utorial application \050see) 404.31 489.33 T
1 9 Q
(APPL\134TUTORIAL\134MCHRT4\134MCHRT) 180 476.33 T
(.GOC) 344.03 476.33 T
1 10 Q
(\051\051.) 367.04 476.33 T
-0.62 (First, you must set up an object resource in your code \336le with) 180 456.33 P
3 F
-0.64 (@start) 462.11 456.33 P
1 F
-0.62 (,) 494.39 456.33 P
3 F
-0.64 (@end) 499.33 456.33 P
1 F
-0.62 (,) 526.06 456.33 P
-0.25 (and) 180 443.33 P
3 F
-0.25 (@object) 199.95 443.33 P
1 F
-0.25 (. The objects in such a \322template\323 resource should not be linked) 239.09 443.33 P
(to any object outside the block. Generic object branches created in this) 180 430.33 T
(manner should have their topmost object marked as not usable) 180 417.33 T
(\050~) 180 404.33 T
1 9 Q
(GS_USABLE) 189.39 404.33 T
1 10 Q
(\051; this is because it is illegal for a generic object to be usable) 245.06 404.33 T
(without having a generic parent. Instead of accessing these objects directly) 180 391.33 T
(,) 524.83 391.33 T
(you should duplicate the resource block. \050A resource can not be both) 180 378.33 T
-0.08 (duplicated and used directly) 180 365.33 P
-0.08 (.\051 This is done with) 309.59 365.33 P
3 F
-0.08 (ObjDuplicateResource\050\051) 400.33 365.33 P
1 F
-0.08 (,) 525.52 365.33 P
(which allocates a new block on the heap, sets it up properly) 180 352.33 T
(, and copies the) 453.19 352.33 T
(resource directly into it.) 180 339.33 T
-0.66 (Y) 180 319.33 P
-0.66 (ou are returned a handle to the new object block, which you can then modify) 185.93 319.33 P
-0.31 (any way you like. Because all the chunk handles of all the objects will be the) 180 306.33 P
-0.5 (same as in the source block, you can easily access any object in the duplicate.) 180 293.33 P
-0.76 (Once copied, the duplicate objects may be added to your generic tree and then) 180 280.33 P
-0.88 (set) 180 267.33 P
1 9 Q
-0.79 (GS_USABLE) 195.42 267.33 P
1 10 Q
-0.88 (. And, by using) 251.1 267.33 P
3 F
-0.91 (ObjDuplicateResource\050\051) 319.64 267.33 P
1 F
-0.88 ( more than once on) 444.83 267.33 P
-0.57 (the same resource, you can have several different, possibly modi\336ed versions) 180 254.33 P
(of the resource at once.) 180 241.33 T
-0.1 (As with using resource blocks, however) 180 221.33 P
-0.1 (, you must know the con\336guration of) 360.04 221.33 P
(all your template objects beforehand. Y) 180 208.33 T
(ou may still need to add new objects) 359.84 208.33 T
(to the resource or dynamically create other objects. This is the primary) 180 195.33 T
(drawback of this method.) 180 182.33 T
-0.81 (Additionally) 180 162.33 P
-0.81 (, if you duplicate resource blocks, you should also free them when) 236.12 162.33 P
(they\325re not needed any more. Generic objects in the block should be set not) 180 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "228" 88
%%Page: "229" 89
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(229) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.02 (usable and then removed from the tree before the resource is freed. Freeing) 180 641.33 P
(should be done by sending) 180 628.33 T
1 9 Q
(MSG_MET) 304.09 628.33 T
(A_BLOCK_FREE) 350.26 628.33 T
1 10 Q
( to any object in the) 424.26 628.33 T
(block or by calling) 180 615.33 T
3 F
(ObjFreeObjBlock\050\051) 266.5 615.33 T
1 F
(. Use of the kernel routine) 364.47 615.33 T
3 F
(ObjFreeDuplicate\050\051) 180 602.33 T
1 F
( is not recommended as it requires all objects in the) 280.74 602.33 T
(block to be thoroughly clean of any ties to the system.) 180 589.33 T
-0.65 (\050) 180 576.33 P
1 9 Q
-0.59 (MSG_MET) 183.33 576.33 P
-0.59 (A_BLOCK_FREE) 229.5 576.33 P
1 10 Q
-0.65 ( and) 303.5 576.33 P
3 F
-0.67 (ObjFreeObjBlock\050\051) 325.17 576.33 P
1 F
-0.65 ( ensure that the objects) 423.14 576.33 P
(have had adequate time to relinquish these ties \336rst.\051) 180 563.33 T
0 12 Q
(Instantiating an Individual Object) 180 537 T
1 10 Q
(The most complex of these three options, this can provide the \337exibility) 180 515.33 T
(needed for all cases. The actual act of instantiating an object is not dif\336cult) 180 502.33 T
-0.48 (or very complex. However) 180 489.33 P
-0.48 (, it is time and labor intensive and requires several) 297.07 489.33 P
(steps that are not necessary when using object resources. In addition,) 180 476.33 T
(cleaning up after objects created in this manner is more complex.) 180 463.33 T
-0.2 (T) 180 443.33 P
-0.2 (o create a new object on the \337y) 185.75 443.33 P
-0.2 (, you \336rst must set up a place to put it. T) 324.89 443.33 P
-0.2 (o do) 510.11 443.33 P
(this, allocate a memory block on the global heap \050you can instead use an) 180 430.33 T
-0.63 (existing object block, of course\051 and set it up with the proper \337ags and header) 180 417.33 P
(to be an object block. Then, lock the chosen block on the heap with) 180 404.33 T
3 F
(ObjLockObjBlock\050\051) 180 391.33 T
1 F
(. The block is now set up to receive the new object.) 279.64 391.33 T
-0.13 (To actually create the new object, call the kernel routine) 180 371.33 P
3 F
-0.13 (ObjInstantiate\050\051) 441.88 371.33 P
1 F
-0.13 (.) 525.57 371.33 P
(This will create a chunk in the object block and zero the instance chunk. If) 180 358.33 T
(the object is of a class with master parts, the instance chunk will remain) 180 345.33 T
(uninitialized until the \336rst time a class in the master group receives any) 180 332.33 T
-0.85 (message. If the class is a direct descendant of) 180 319.33 P
3 F
-0.88 (MetaClass) 384.58 319.33 P
1 F
-0.85 (, the instance chunk) 437.91 319.33 P
(will be immediately initialized to default values with) 180 306.33 T
1 9 Q
(MSG_MET) 180 293.33 T
(A_INITIALIZE) 226.17 293.33 T
1 10 Q
(. If you want to change or add to the default data of) 289.66 293.33 T
(this type of object, subclass) 180 280.33 T
1 9 Q
(MSG_MET) 308.35 280.33 T
(A_INITIALIZE) 354.52 280.33 T
1 10 Q
(; be sure to call the) 418.01 280.33 T
-0.21 (superclass \336rst. T) 180 267.33 P
-0.21 (o initialize any master group of an object, send it a classed) 261.07 267.33 P
(event that will be handled by a class in that master level.) 180 254.33 T
-0.63 (After calling) 180 234.33 P
3 F
-0.65 (ObjInstantiate\050\051) 239.11 234.33 P
1 F
-0.63 (, unlock the object block with) 322.8 234.33 P
3 F
-0.65 (MemUnlock\050\051) 456.07 234.33 P
1 F
-0.63 (.) 526.07 234.33 P
(An example of instantiating a new object is shown in Code Display) 180 221.33 T
(5-) 490.61 221.33 T
(18.) 499.5 221.33 T
-0.34 (Generic objects created this way may then be added to a generic tree and set) 180 208.33 P
(usable. They may be destroyed using) 180 195.33 T
1 9 Q
(MSG_GEN_DESTROY) 353.18 195.33 T
1 10 Q
(.) 448.08 195.33 T
81 232 171 377.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(MSG_MET) 81 324.45 T
(A_) 124.84 324.45 T
(INITIALIZE) 81 313.45 T
1 F
(Always call the) 81 297.45 T
(superclass prior to) 81 286.45 T
(handling the) 81 275.45 T
(message.) 81 264.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 353.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 353.33 A
0 0 0 1 0 0 0 K
81 333.21 121.5 373.71 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "229" 89
%%Page: "230" 90
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(230) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(5-) 147.13 629.31 T
(18 Instantiating an Object) 156.02 629.31 T
5 9 Q
(/* This sample of code belongs to a sample GenInteraction object \050the object would) 81 614.98 T
( * have to be a subclass of GenInteractionClass\051. It does several things:) 81 603.98 T
( *) 81 592.98 T
(1.) 125 592.98 T
(It instantiates a new GenTrigger object. The new) 168.98 592.98 T
( *) 81 581.98 T
(GenTrigger will be added to the same object block) 168.98 581.98 T
( *) 81 570.98 T
(containing the GenInteraction handling the message.) 168.98 570.98 T
( *) 81 559.98 T
(2.) 125 559.98 T
(It adds the new GenTrigger as a child of the) 168.98 559.98 T
( *) 81 548.98 T
(SampInteraction \050the handling object\051.) 168.98 548.98 T
( *) 81 537.98 T
(3.) 125 537.98 T
(It sets the GenTrigger usable and enabled. */) 168.98 537.98 T
(@method SampInteractionClass, MSG_SAMP_INTERACTION_CREATE_TRIGGER {) 81 519.98 T
(optr) 102.6 508.98 T
(newTrig;) 168.98 508.98 T
(newTrig = ObjInstantiate\050OptrToHandle\050oself\051,) 102.6 490.98 T
(\050ClassStruct *\051&GenTriggerClass\051;) 256.5 479.98 T
(/* The two parameters are the handle of an object block and the) 125 468.98 T
( * pointer to a class definition. The object block is the same) 125 457.98 T
( * one containing the GenInteraction, whose optr is contained in) 125 446.98 T
( * the standard oself parameter. The class structure pointer points) 125 435.98 T
( * to the class definition of GenTriggerClass. */) 125 424.98 T
(/* Now it is necessary to dereference our pself parameter. Because) 125 406.98 T
( * the ObjInstantiate\050\051 call could move this object block \050it must) 125 395.98 T
( * allocate new space in the block, and this can cause the block to) 125 384.98 T
( * move\051, we have to reset our pointer based on our optr. This is) 125 373.98 T
( * done with one of the dereference routines. */) 125 362.98 T
(pself = ObjDerefGen\050oself\051;) 102.6 351.98 T
(/* Now set the trigger as the last child of the GenInteraction. */) 125 333.98 T
(@call self::MSG_GEN_ADD_CHILD\050newTrig, \050CCO_MARK_DIRTY | CCF_LAST\051;) 102.6 322.98 T
(/* Now set the trigger usable and enabled. */) 125 304.98 T
(@call newTrig::MSG_GEN_SET_USABLE\050VUM_DELAYED_VIA_UI_QUEUE\051;) 102.6 293.98 T
(@call newTrig::MSG_GEN_SET_ENABLED\050VUM_NOW\051;) 102.6 282.98 T
(}) 81 271.98 T
81 247.95 531 259.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 247.95 531 259.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 255.2 617.5 258.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 12 Q
0 X
0 0 0 1 0 0 0 K
(Copying a Generic T) 180 223.95 T
(ree) 296.04 223.95 T
1 10 Q
(The fourth way to create new objects is by using the message) 180 202.28 T
1 9 Q
-0.31 (MSG_GEN_COPY_TREE) 180 189.28 P
1 10 Q
-0.35 (. This, when sent to a generic object in a generic tree,) 286.84 189.28 P
(copies an entire generic tree below and including the object into another) 180 176.28 T
(,) 512.24 176.28 T
(pre-existing object block.) 180 163.28 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "230" 90
%%Page: "231" 91
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(231) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.07 (This is an easy way to copy generic trees, one of the more common purposes) 180 641.33 P
-0.55 (of creating new objects. However) 180 628.33 P
-0.55 (, it only works with the generic objects \050with) 328.53 628.33 P
-0.05 (a superclass) 180 615.33 P
3 F
-0.05 (GenClass) 239.36 615.33 P
1 F
-0.05 (\051. T) 287.69 615.33 P
-0.05 (rees created using) 302.58 615.33 P
1 9 Q
-0.04 (MSG_GEN_COPY_TREE) 389.29 615.33 P
1 10 Q
-0.05 ( can be) 496.13 615.33 P
(destroyed with) 180 602.33 T
1 9 Q
(MSG_GEN_DESTROY) 251.3 602.33 T
1 10 Q
(.) 346.2 602.33 T
(For an example of) 180 582.33 T
1 9 Q
(MSG_GEN_COPY_TREE) 265.94 582.33 T
1 10 Q
( use, see the) 372.78 582.33 T
1 9 Q
(SDK_C) 432.05 582.33 T
1 10 Q
(\134) 462.72 582.33 T
1 9 Q
(GENTREE) 468.78 582.33 T
1 10 Q
(sample application.) 180 569.33 T
0 14 Q
(5.4.6.2) 119.19 535.67 T
(W) 180 535.67 T
(orking W) 192.96 535.67 T
(ith Object Blocks) 252.73 535.67 T
5 10 Q
-1 (ObjIncInUseCount\050\051, ObjDecInUseCount\050\051, ObjLockObjBlock\050\051,) 180 513.33 P
(ObjFreeObjBlock\050\051, ObjFreeDuplicate\050\051,) 180 500.33 T
(ObjTestIfObjBlockRunByCurThread\050\051, ObjBlockSetOutput\050\051,) 180 487.33 T
(ObjBlockGetOutput\050\051) 180 474.33 T
1 F
(Once you have an object block created, either with) 180 454.33 T
3 F
(ObjDuplicateResource\050\051) 180 441.33 T
1 F
( or with the memory routines, there are several) 305.19 441.33 T
(things you can do with it. It may be treated as a normal memory block, but) 180 428.33 T
(there are also several routines for use speci\336cally with object blocks:) 180 415.33 T
3 F
(ObjIncInUseCount\050\051) 180 395.33 T
1 F
( and) 285.17 395.33 T
3 F
(ObjDecInUseCount\050\051) 308.14 395.33 T
1 F
( increment and) 416.09 395.33 T
(decrement an object block\325) 180 382.33 T
(s in-use count \050used to ensure the block can\325) 301.12 382.33 T
(t be) 503.91 382.33 T
-0.44 (freed while an object is still receiving messages\051.) 180 369.33 P
3 F
-0.46 (ObjLockObjBlock\050\051) 403.53 369.33 P
1 F
-0.44 ( locks) 503.17 369.33 P
(the object block on the global heap.) 180 356.33 T
3 F
(ObjFreeObjBlock\050\051) 344.48 356.33 T
1 F
( frees any object) 442.45 356.33 T
(block.) 180 343.33 T
3 F
(ObjFreeDuplicate\050\051) 209.64 343.33 T
1 F
( is the low-level routine which frees an object) 310.38 343.33 T
(block created with) 180 330.33 T
3 F
(ObjDuplicateResource\050\051) 267.42 330.33 T
1 F
(.) 392.61 330.33 T
3 F
(ObjT) 180 317.33 T
(estIfObjBlockRunByCurThread\050\051) 204.63 317.33 T
1 F
( returns a Boolean value) 377.05 317.33 T
(indicating whether the calling thread runs a given object block.) 180 304.33 T
3 F
-0.59 (ObjBlockSetOutput\050\051) 180 291.33 P
1 F
-0.57 ( and) 289.64 291.33 P
3 F
-0.59 (ObjBlockGetOutput\050\051) 311.46 291.33 P
1 F
-0.57 ( set and return the optr) 422.77 291.33 P
(of the object set to receive output messages \050i.e., messages sent with travel) 180 278.33 T
-0.31 (option) 180 265.33 P
1 9 Q
-0.28 (TO_OBJ_BLOCK_OUTPUT) 211.35 265.33 P
1 10 Q
-0.31 (\051 from all the objects within the object block.) 329.05 265.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "231" 91
%%Page: "232" 92
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(232) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.6.3) 119.19 638.67 T
(W) 180 638.67 T
(orking W) 192.96 638.67 T
(ith Individual Objects) 252.73 638.67 T
5 10 Q
(ObjIsObjectInClass\050\051, ObjGetFlags\050\051, ObjSetFlags\050\051,) 180 616.33 T
-1 (ObjDoRelocation\050\051, ObjDoUnRelocation\050\051, ObjResizeMaster\050\051,) 180 603.33 P
(ObjInitializeMaster\050\051, ObjInitializePart\050\051) 180 590.33 T
1 F
(The kernel supplies several routines for working with and modifying) 180 570.33 T
-0.28 (individual object chunks and object data. These are all described fully in the) 180 557.33 P
(Routine Reference Book; most are not commonly used by applications.) 180 544.33 T
3 F
(ObjIsObjectInClass\050\051) 180 524.33 T
1 F
( takes a class and an optr and returns whether the) 288.14 524.33 T
-0.23 (object is a member of the class.) 180 511.33 P
3 F
-0.24 (ObjGetFlags\050\051) 324.31 511.33 P
1 F
-0.23 ( returns the object \337ags for a) 396.71 511.33 P
-0.01 (given object instance chunk;) 180 498.33 P
3 F
-0.01 (ObjSetFlags\050\051) 313.29 498.33 P
1 F
-0.01 ( sets the \337ags to passed values.) 384.02 498.33 P
3 F
-0.07 (ObjDoRelocation\050\051) 180 485.33 P
1 F
-0.07 ( processes any passed instance data \336elds in the object) 276.66 485.33 P
(declared as relocatable;) 180 472.33 T
3 F
(ObjDoUnRelocation\050\051) 291.13 472.33 T
1 F
( returns the passed) 402.97 472.33 T
(relocatable \336elds to their index values.) 180 459.33 T
3 F
(ObjInitializeMaster\050\051) 180 439.33 T
1 F
( causes the system to build out a particular master) 289.61 439.33 T
(group\325) 180 426.33 T
(s instance data for an object.) 208.33 426.33 T
3 F
(ObjInitializePart\050\051) 343.35 426.33 T
1 F
( causes the system) 440 426.33 T
(to build all master groups above and including the passed level. \050This will) 180 413.33 T
(also resolve variant classes.\051) 180 400.33 T
3 F
(ObjResizeMaster\050\051) 314.28 400.33 T
1 F
( resizes a given master) 410.2 400.33 T
(part of the instance chunk, causing the chunk to be resized.) 180 387.33 T
0 14 Q
(5.4.6.4) 119.19 353.67 T
(Managing Object T) 180 353.67 T
(rees) 304.47 353.67 T
5 10 Q
(ObjLinkFindParent\050\051, ObjCompAddChild\050\051,) 180 331.33 T
(ObjCompRemoveChild\050\051, ObjCompMoveChild\050\051,) 180 318.33 T
(ObjCompFindChildByOptr\050\051, ObjCompFindChildByNumber\050\051,) 180 305.33 T
(ObjCompProcessChildren\050\051) 180 292.33 T
1 F
(Many objects will be part of object trees. Nearly all generic) 180 272.33 T
1 9 Q
(UI) 453.92 272.33 T
1 10 Q
( and visible) 464.92 272.33 T
(objects exist as members of trees for organizational purposes. Object trees) 180 259.33 T
(can be useful, powerful, and convenient mechanisms for organizing your) 180 246.33 T
(objects.) 180 233.33 T
(An object tree is made up of \322composite\323 objects\321objects which may or may) 180 213.33 T
(not have children. The distinguishing characteristic of a composite object is) 180 200.33 T
(that it has one instance data \336eld declared with the) 180 187.33 T
3 F
(@composite) 421.34 187.33 T
1 F
( keyword) 481.59 187.33 T
(and another declared with the) 180 174.33 T
3 F
(@link) 322.42 174.33 T
1 F
( keyword. The) 350.63 174.33 T
3 F
(@composite) 418.79 174.33 T
1 F
( \336eld) 479.04 174.33 T
(contains a pointer to the object\325) 180 161.33 T
(s \336rst child in the tree, and the) 324.09 161.33 T
3 F
(@link) 470.4 161.33 T
1 F
( \336eld) 498.61 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "232" 92
%%Page: "233" 93
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(233) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(contains a pointer to the object\325) 180 641.33 T
(s next sibling. This representation is shown) 324.09 641.33 T
(in Figure) 180 628.33 T
(5-) 225.56 628.33 T
(18.) 234.45 628.33 T
(If you set up an object resource block containing composite objects, it\325) 180 608.33 T
(s very) 499.09 608.33 T
(easy to set up an object tree. Y) 180 595.33 T
(our generic) 319.84 595.33 T
1 9 Q
(UI) 374.46 595.33 T
1 10 Q
( objects are declared in a tree) 385.46 595.33 T
-0.13 (with the GenApplication object at its head. Additionally) 180 582.33 P
-0.13 (, it\325) 435.81 582.33 P
-0.13 (s easy to alter an) 449.95 582.33 P
(object tree once it\325) 180 569.33 T
(s been created. The kernel provides several routines, and) 262.78 569.33 T
3 F
-0.36 (MetaClass) 180 556.33 P
1 F
-0.35 ( uses several messages for adding, removing, and moving objects) 233.33 556.33 P
(to, from, and within trees.) 180 543.33 T
2 F
(u) 180 523.33 T
3 F
(ObjLinkFindParent\050\051) 198 523.33 T
1 F
-0.7 (This routine \336nds the optr of the calling object\325) 198 511.33 P
-0.7 (s direct parent. The kernel) 408.36 511.33 P
(traverses the link \336elds until it returns to the parent object.) 198 499.33 T
2 F
(u) 180 480.33 T
3 F
(ObjCompFindChildByOptr\050\051) 198 480.33 T
1 F
(This routine returns the number of the child \050\336rst, second, third, etc.\051) 198 468.33 T
(whose optr is passed. The child must exist and must be a child of the) 198 456.33 T
(calling object.) 198 444.33 T
2 F
(u) 180 425.33 T
3 F
(ObjCompFindChildByNumber\050\051) 198 425.33 T
1 F
(This routine returns the optr of the child whose number \050\336rst, second,) 198 413.33 T
(etc.\051 is passed.) 198 401.33 T
2 F
(u) 180 382.33 T
3 F
(ObjCompAddChild\050\051) 198 382.33 T
1 F
(This routine takes an object\325) 198 370.33 T
(s optr and adds it to the caller) 328.58 370.33 T
(\325) 468.04 370.33 T
(s list of) 469.71 370.33 T
-0.63 (children. Depending on the \337ags passed, the child may be inserted in any) 198 358.33 P
(child position \050\336rst, second, etc.\051.) 198 346.33 T
2 F
(u) 180 327.33 T
3 F
(ObjCompMoveChild\050\051) 198 327.33 T
1 F
-0.66 (This routine takes a child object and moves it to a new position. However) 198 315.33 P
-0.66 (,) 526.1 315.33 P
(it will still remain a child of the calling object. If you want to move the) 198 303.33 T
-0.1 (child to be a child of a different object, you must \336rst remove it from the) 198 291.33 P
(tree altogether and then add it to the other parent.) 198 279.33 T
2 F
(u) 180 260.33 T
3 F
(ObjCompRemoveChild\050\051) 198 260.33 T
1 F
(This routine removes a child object from the object tree.) 198 248.33 T
2 F
(u) 180 229.33 T
3 F
(ObjCompProcessChildren\050\051) 198 229.33 T
1 F
-0.36 (This routine calls a callback routine for each child of the calling object in) 198 217.33 P
-0.4 (turn. The callback routine may do virtually anything \050except destroy the) 198 205.33 P
(object or free its chunk or something similar\051.) 198 193.33 T
-0.71 (By using the above routines, you can fully manipulate any object tree and the) 180 174.33 P
(objects within it.) 180 161.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "233" 93
%%Page: "234" 94
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(234) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(5.4.6.5) 119.19 374.09 T
(Detaching and Destroying Objects) 180 374.09 T
5 10 Q
(MSG_META_DETACH, MSG_META_DETACH_COMPLETE, MSG_META_ACK,) 180 351.76 T
(MSG_META_OBJ_FLUSH_INPUT_QUEUE, MSG_META_OBJ_FREE,) 180 338.76 T
(MSG_META_FINAL_OBJ_FREE, ObjInitDetach\050\051, ObjIncDetach\050\051,) 180 325.76 T
(ObjEnableDetach\050\051, ObjFreeChunk\050\051) 180 312.76 T
1 F
(While creating objects is actually quite simple, detaching and destroying) 180 292.76 T
-0.15 (them can be quite involved. For this reason,) 180 279.76 P
1 9 Q
-0.14 (GEOS) 384.39 279.76 P
1 10 Q
-0.15 ( does most of the work for) 410.56 279.76 P
(you, and in most cases you won\325) 180 266.76 T
(t have to worry about what happens when) 326.51 266.76 T
(your application is shut down or saved to a state \336le. However) 180 253.76 T
(, if you) 466.52 253.76 T
-0.41 (instantiate individual objects of your own classes, you should be very careful) 180 240.76 P
(about how your objects are detached from the system and destroyed.) 180 227.76 T
-0.42 (Detaching objects involves severing all of the object\325) 180 207.76 P
-0.42 (s ties with the rest of the) 415.96 207.76 P
(system. Destruction of an object entails actually removing the object\325) 180 194.76 T
(s) 497.07 194.76 T
(instance chunk and related structures, making sure that it has handled all) 180 181.76 T
(its waiting messages.) 180 168.76 T
81 144 531 648 C
180 401.43 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 181 461.62 T
(5-) 214.34 461.62 T
(18) 223.23 461.62 T
4 F
(Structure of an Object T) 237.13 461.62 T
(ree) 346.97 461.62 T
(An object\325) 181 447.62 T
(s composite \336eld points to its \336rst child, and its link \336eld points) 224.71 447.62 T
-0.04 (either to its next sibling or back to the parent. Y) 181 435.62 P
-0.04 (ou can see that, by following) 396.69 435.62 P
(these links, any object is accessible from any other object in the tree.) 181 423.62 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
282.65 542.73 361.6 574.45 R
6 X
V
0.5 H
0 Z
0 X
N
285.15 561 359.1 572.15 R
7 X
V
0 X
N
4 9 Q
(@composite \336eld) 288.36 563.24 T
285.15 549.86 359.1 561 R
7 X
V
0 X
N
(@link \336eld) 300.27 552.1 T
183.35 542.73 262.31 574.45 R
6 X
V
0 X
N
185.86 561 259.8 572.15 R
7 X
V
0 X
N
(null) 214.33 563.24 T
185.86 549.86 259.8 561 R
7 X
V
0 X
N
(@link \336eld) 200.97 552.1 T
381.95 542.73 460.9 574.45 R
6 X
V
0 X
N
384.45 561 458.4 572.15 R
7 X
V
0 X
N
(null) 412.93 563.24 T
384.45 549.86 458.4 561 R
7 X
V
0 X
N
(@link \336eld) 399.57 552.1 T
282.65 602.23 361.6 633.95 R
6 X
V
0 X
N
285.15 620.5 359.1 631.65 R
7 X
V
0 X
N
(@composite \336eld) 288.36 622.74 T
285.15 609.35 359.1 620.5 R
7 X
V
0 X
N
(@link \336eld) 300.27 611.6 T
233 483.23 311.96 514.95 R
6 X
V
0 X
N
235.51 501.5 309.45 512.65 R
7 X
V
0 X
N
(null) 263.98 503.74 T
235.51 490.36 309.45 501.5 R
7 X
V
0 X
N
(@link \336eld) 250.62 492.6 T
332.3 483.23 411.25 514.95 R
6 X
V
0 X
N
334.8 501.5 408.75 512.65 R
7 X
V
0 X
N
(null) 363.28 503.74 T
334.8 490.36 408.75 501.5 R
7 X
V
0 X
N
(@link \336eld) 349.92 492.6 T
247.8 580.54 237.46 574.45 243 585.09 245.4 582.82 4 Y
V
285.03 624.6 245.4 582.82 2 L
7 X
V
1 H
2 Z
0 X
N
271.14 565.89 282.65 569.31 274.7 560.31 272.92 563.1 4 Y
1 X
V
259.82 554.73 272.93 563.1 2 L
7 X
V
1 X
N
320.52 507.67 332.02 511.09 324.08 502.1 322.3 504.89 4 Y
V
309.19 496.52 322.3 504.89 2 L
7 X
V
1 X
N
371.6 567.09 383.1 570.51 375.16 561.51 373.38 564.3 4 Y
V
360.27 555.93 373.38 564.3 2 L
7 X
V
1 X
N
264.75 523.09 256.01 514.86 259.06 526.47 261.9 524.78 4 Y
0 X
V
285.03 563.73 261.9 524.78 2 L
7 X
V
0 X
N
371.25 618.31 361.61 625.46 373.57 624.51 372.41 621.41 4 Y
1 X
V
458.16 555.16 469.11 555.16 469.11 585.16 372.41 621.41 4 L
N
368.96 535.29 359.23 542.3 371.2 541.51 370.08 538.4 4 Y
V
408.7 495.14 432 495.14 432 516.15 370.08 538.4 4 L
N
81 144 531 648 C
36 72 576 720 C
81 203.39 174.34 298.88 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Advanced T) 81 245.88 T
(opic) 131.35 245.88 T
1 F
(MetaClass handles) 81 229.88 T
(detaching and) 81 218.88 T
(destruction.) 81 207.88 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 274.76 G
4 H
0 Z
90 450 13.5 13.5 101.25 274.76 A
0 0 0 1 0 0 0 K
81 254.64 121.5 295.14 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "234" 94
%%Page: "235" 95
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(235) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Throughout its life, an object is likely to become involved with a number of) 180 641.33 T
-0.68 (other things\321other objects, drivers, \336les, streams, the memory manager) 180 628.33 P
-0.68 (, the) 509.02 628.33 P
-0.3 (kernel\321and each of these things may send the object messages from time to) 180 615.33 P
-0.25 (time. The task, when detaching an object from the system, is to sever all the) 180 602.33 P
(object\325) 180 589.33 T
(s ties with the outside world, to make sure that no other entity will) 208.52 589.33 T
(ever try to contact the object again.) 180 576.33 T
(T) 180 556.33 T
(o those unfamiliar with these problems, they can be overwhelming.) 185.75 556.33 T
-0.57 (However) 180 543.33 P
-0.57 (,) 220.18 543.33 P
1 9 Q
-0.51 (GEOS) 225.17 543.33 P
1 10 Q
-0.57 ( takes care of them for you in most situations. All generic and) 251.34 543.33 P
(visible objects, all objects in object trees, and all objects that maintain an) 180 530.33 T
(active list will automatically \050in nearly all cases\051 have the detach) 180 517.33 T
(functionality built in by) 180 504.33 T
3 F
(MetaClass) 292.43 504.33 T
1 F
(.) 345.76 504.33 T
0 12 Q
(The Detach Sequence) 180 478 T
1 10 Q
-0.33 (When an object receives) 180 456.33 P
1 9 Q
-0.29 (MSG_MET) 292.39 456.33 P
-0.29 (A_DET) 338.56 456.33 P
-0.29 (ACH) 368.56 456.33 P
1 10 Q
-0.33 (, it begins the detach sequence) 389.06 456.33 P
(to sever all its ties with other entities in the system. It must \336rst notify all) 180 443.33 T
(its children and all the objects on its various noti\336cation lists that it will be) 180 430.33 T
-0.71 (going away \050most often, all its children, by association, will also be detached\051.) 180 417.33 P
(It then must clear its message queues. Finally) 180 404.33 T
(, it must acknowledge its) 392.63 404.33 T
(detachment to the object that originally sent) 180 391.33 T
1 9 Q
(MSG_MET) 388.36 391.33 T
(A_DET) 434.53 391.33 T
(ACH) 464.54 391.33 T
1 10 Q
(. Each of) 485.03 391.33 T
-0.43 (these phases is described in detail below and is implemented by) 180 378.33 P
3 F
-0.44 (MetaClass) 472.54 378.33 P
1 F
-0.43 (.) 525.87 378.33 P
(Y) 180 365.33 T
(ou have to do none of this work unless your object is truly a special case.) 185.93 365.33 T
-0.57 (Detaching in conjunction with destruction is somewhat intricate because not) 180 345.33 P
(only must the object notify all other interested parties, but it must also) 180 332.33 T
(receive acknowledgment of the notice. Otherwise, the noti\336cation and some) 180 319.33 T
(other message could be sent at the same time, and the object could be) 180 306.33 T
-0.53 (destroyed before the noti\336cation can be handled. \050Destruction is discussed in) 180 293.33 P
(the following section.\051) 180 280.33 T
(Because any object may be put in the position of being detached and then) 180 260.33 T
-0.03 (immediately destroyed, it must send out noti\336cation and then wait until all) 180 247.33 P
-0.33 (the notices have been acknowledged before continuing with other tasks. The) 180 234.33 P
(kernel and) 180 221.33 T
3 F
(MetaClass) 232.6 221.33 T
1 F
( implement a mechanism for this using four kernel) 285.93 221.33 T
-0.24 (routines. Again, you do not need to do this since all classes have) 180 208.33 P
3 F
-0.24 (MetaClass) 475.12 208.33 P
1 F
(as their root.) 180 195.33 T
-0.65 (First the object being detached \050in its) 180 175.33 P
1 9 Q
-0.59 (MSG_MET) 350.45 175.33 P
-0.59 (A_DET) 396.62 175.33 P
-0.59 (ACH) 426.63 175.33 P
1 10 Q
-0.65 ( handler\051 calls the) 447.12 175.33 P
-0.35 (routine) 180 162.33 P
3 F
-0.36 (ObjInitDetach\050\051) 216.13 162.33 P
1 F
-0.35 (. This tells the kernel that the object is initiating a) 298.34 162.33 P
(detach sequence and that the acknowledgment mechanism must be set up.) 180 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "235" 95
%%Page: "236" 96
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(236) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The kernel will allocate a variable data entry to hold a count of the number) 180 641.33 T
(of notices sent and acknowledgments received.) 180 628.33 T
(After this, the object must send a) 180 608.33 T
1 9 Q
(MSG_MET) 336.31 608.33 T
(A_DET) 382.48 608.33 T
(ACH) 412.49 608.33 T
1 10 Q
( or its equivalent to) 432.98 608.33 T
-0.32 (each of its children and each of the objects on its active list. W) 180 595.33 P
-0.32 (ith each notice) 461.77 595.33 P
(sent, the object) 180 582.33 T
4 F
(must) 252.6 582.33 T
1 F
( call) 275.56 582.33 T
3 F
(ObjIncDetach\050\051) 297.42 582.33 T
1 F
(, which increments the notice) 377.23 582.33 T
(count.) 180 569.33 T
(After sending all the notices, the object then calls the kernel routine) 180 549.33 T
3 F
-0.28 (ObjEnableDetach\050\051) 180 536.33 P
1 F
-0.27 (. This noti\336es the kernel that all the notices have been) 279.25 536.33 P
(sent and that the object is waiting for the acknowledgments.) 180 523.33 T
(Acknowledgment comes in the form of) 180 503.33 T
1 9 Q
(MSG_MET) 358.52 503.33 T
(A_ACK) 404.69 503.33 T
1 10 Q
( and is received by) 435.69 503.33 T
(the object being detached.) 180 490.33 T
1 9 Q
(MSG_MET) 302.42 490.33 T
(A_ACK) 348.59 490.33 T
1 10 Q
( is handled by) 379.59 490.33 T
3 F
(MetaClass) 446.83 490.33 T
1 F
( and) 500.16 490.33 T
(will decrement the notice count, essentially saying there are one fewer) 180 477.33 T
(notices left to be received. When the \336nal) 180 464.33 T
1 9 Q
(MSG_MET) 373.16 464.33 T
(A_ACK) 419.33 464.33 T
1 10 Q
( is received) 450.33 464.33 T
(\050setting the notice count to zero\051 and) 180 451.33 T
3 F
(ObjEnableDetach\050\051) 351.85 451.33 T
1 F
( has) 451.1 451.33 T
4 F
(also) 472.96 451.33 T
1 F
( been) 491.47 451.33 T
(called, the kernel will automatically send a) 180 438.33 T
1 9 Q
(MSG_MET) 180 425.33 T
(A_DET) 226.17 425.33 T
(ACH_COMPLETE) 256.18 425.33 T
1 10 Q
( to the object. This assures the object that) 334.17 425.33 T
(it will never receive another message from another entity in the system.) 180 412.33 T
(The \336nal step in the detach sequence is acknowledging that the object has) 180 392.33 T
(been detached. In its) 180 379.33 T
1 9 Q
(MSG_MET) 278.9 379.33 T
(A_DET) 325.07 379.33 T
(ACH_COMPLETE) 355.08 379.33 T
1 10 Q
( handler) 433.07 379.33 T
(, the object) 471.22 379.33 T
(should send a) 180 366.33 T
1 9 Q
(MSG_MET) 246.12 366.33 T
(A_ACK) 292.29 366.33 T
1 10 Q
( to the object that originated the detach) 323.29 366.33 T
(sequence. This will allow that object to continue with its detach sequence if) 180 353.33 T
-0.62 (it was involved in one; without this step, only leaves of object trees could ever) 180 340.33 P
(be detached. This \336nal step is provided in default handlers in) 180 327.33 T
3 F
(MetaClass) 466.15 327.33 T
1 F
(and is inherited by all objects.) 180 314.33 T
0 12 Q
(The Destruction Sequence) 180 288 T
1 10 Q
-0.68 (The destruction sequence must be initiated from outside and will begin when) 180 266.33 P
(the object receives a) 180 253.33 T
1 9 Q
(MSG_MET) 275.56 253.33 T
(A_OBJ_FREE) 321.73 253.33 T
1 10 Q
(. Often, the) 381.23 253.33 T
1 9 Q
(MSG_MET) 180 240.33 T
(A_OBJ_FREE) 226.17 240.33 T
1 10 Q
( will be sent by the object to itself.) 285.67 240.33 T
-0.32 (The destruction sequence consists of three steps: First, the object must clear) 180 220.33 P
(out its message queues; even though it is detached and can not receive new) 180 207.33 T
(messages, there may be some left over in the queue \050an error if it occurs\051.) 180 194.33 T
-0.28 (Second, it must \336nish executing its code and working with its instance data.) 180 181.33 P
-0.34 (Third, it must free its instance chunk. Each of these steps is described below) 180 168.33 P
-0.34 (.) 528.22 168.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "236" 96
%%Page: "237" 97
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Classes and Objects) 378.27 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(237) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(5.4) 546.55 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Even though the object has noti\336ed the rest of the system that it is going) 180 641.33 T
(away) 180 628.33 T
(, it still must \337ush its message queues of any unhandled messages.) 203.16 628.33 T
(These messages could have been received between the time the original) 180 615.33 T
1 9 Q
(MSG_MET) 180 602.33 T
(A_OBJ_FREE) 226.17 602.33 T
1 10 Q
( was received and noti\336cation was sent out \050due to) 285.67 602.33 T
-0.69 (interrupts or context switching\051. T) 180 589.33 P
-0.69 (o clear its message queues, the object must) 335.39 589.33 P
-0.81 (send itself a) 180 576.33 P
1 9 Q
-0.73 (MSG_MET) 236.11 576.33 P
-0.73 (A_OBJ_FLUSH_INPUT_QUEUE) 282.28 576.33 P
1 10 Q
-0.81 (, which will ensure that) 422.8 576.33 P
(any messages in the queues are handled appropriately before the object) 180 563.33 T
(shuts down. This step is handled automatically by the) 180 550.33 T
1 9 Q
(MSG_MET) 180 537.33 T
(A_OBJ_FREE) 226.17 537.33 T
1 10 Q
( handler in) 285.67 537.33 T
3 F
(MetaClass) 339.38 537.33 T
1 F
(. Y) 392.71 537.33 T
(ou should never have to) 404.2 537.33 T
(send this message, and indeed its use is discouraged.) 180 524.33 T
(T) 180 504.33 T
(o the outside world, the second and third steps seem like a single step.) 185.75 504.33 T
(However) 180 491.33 T
(,) 220.18 491.33 T
1 9 Q
(MSG_MET) 225.74 491.33 T
(A_OBJ_FREE) 271.91 491.33 T
1 10 Q
( can not simply free the instance chunk) 331.41 491.33 T
(after the queues are cleared; it must be able to access the instance chunk) 180 478.33 T
(until all the method code has been executed. So,) 180 465.33 T
1 9 Q
(MSG_MET) 404.48 465.33 T
(A_OBJ_FREE) 450.65 465.33 T
1 10 Q
(sends the \336nal message to the object,) 180 452.33 T
1 9 Q
(MSG_MET) 354.1 452.33 T
(A_FINAL_OBJ_FREE) 400.27 452.33 T
1 10 Q
(, and) 493.77 452.33 T
-0.31 (then exits.) 180 439.33 P
1 9 Q
-0.28 (MSG_MET) 230.86 439.33 P
-0.28 (A_FINAL_OBJ_FREE) 277.03 439.33 P
1 10 Q
-0.31 ( waits a short while and then frees) 370.53 439.33 P
-0.86 (the object\325) 180 426.33 P
-0.86 (s chunk. This ensures that) 225.44 426.33 P
1 9 Q
-0.77 (MSG_MET) 347.09 426.33 P
-0.77 (A_OBJ_FREE) 393.26 426.33 P
1 10 Q
-0.86 ( has \336nished and) 452.76 426.33 P
(the chunk is not being used by any code.) 180 413.33 T
0 12 Q
(Possible Pitfalls) 180 387 T
1 10 Q
(If you\325re not careful, you can cause the detach mechanism to fail by) 180 365.33 T
-0.38 (instantiating an object on the \337y and saving that object\325) 180 352.33 P
-0.38 (s optr) 433.84 352.33 P
-0.38 (. If the object is) 459.2 352.33 P
-0.16 (then detached and you don\325) 180 339.33 P
-0.16 (t account for the saved optr) 305.69 339.33 P
-0.16 (, you could later send) 430.65 339.33 P
(a message to a nonexistent object. This has unde\336ned results and can be) 180 326.33 T
(nearly impossible to track down.) 180 313.33 T
(Note that objects created within resources and by) 180 293.33 T
3 F
-0.94 (ObjDuplicateResource\050\051) 180 280.33 P
1 F
-0.91 ( will almost always automatically be taken care of) 305.19 280.33 P
-0.5 (by the detach mechanism. Objects you create with) 180 267.33 P
3 F
-0.52 (ObjInstantiate\050\051) 410.47 267.33 P
1 F
-0.5 ( are the) 494.16 267.33 P
(ones to be careful with.) 180 254.33 T
0 14 Q
(5.4.6.6) 119.19 220.67 T
(Saving Object State) 180 220.67 T
5 10 Q
(ObjSaveBlock\050\051, ObjMarkDirty\050\051, ObjMapSavedToState\050\051,) 180 198.33 T
(ObjMapStateToSaved\050\051) 180 185.33 T
1 F
(Object state saving is almost entirely contained within the system. For the) 180 165.33 T
(most part, only) 180 152.33 T
1 9 Q
(UI) 252.79 152.33 T
1 10 Q
( objects are saved to state \336les; however) 263.79 152.33 T
(, you can mark) 447.52 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "237" 97
%%Page: "238" 98
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(GEOS Programming) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(238) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(5.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.62 (other object blocks for saving. State saving is described in full in section 6.1.4) 180 641.33 P
(of chapter 6.) 180 628.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "238" 98
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 98
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ NewCenturySchlbk-BoldItalic
%%EOF
