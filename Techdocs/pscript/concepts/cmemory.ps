%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 20 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Bold FMFONTDEFINE
4 0 /NewCenturySchlbk-Italic FMFONTDEFINE
5 0 /Courier FMFONTDEFINE
6 0 /Times-Roman FMFONTDEFINE
7 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "543" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Design Philosophy) 431.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(543) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(Managing memory in a multitasking system is complex because many) 180 610.3 T
(different entities\321the kernel, libraries, and applications\321are all trying to) 180 597.3 T
(use the same memory space. T) 180 584.3 T
(o ensure that each gets all the memory it) 320.21 584.3 T
(needs, without having to worry about what other memory users are doing,) 180 571.3 T
1 9 Q
(GEOS) 180 558.3 T
1 10 Q
( provides a memory manager) 206.17 558.3 T
(.) 339.7 558.3 T
(This chapter describes the memory management system used by) 180 538.3 T
1 9 Q
(GEOS) 481.14 538.3 T
1 10 Q
(. It) 507.31 538.3 T
(also describes the routines applications can use to get raw memory) 180 525.3 T
(. Before) 487.44 525.3 T
(you read this chapter) 180 512.3 T
(, you should be familiar with the use of handles \050see) 277.78 512.3 T
(\322Handles,\323 Chapter) 180 499.3 T
(14\051.) 272.6 499.3 T
0 14 Q
(15.1) 134.76 446.97 T
0 24 Q
(Design Philosophy) 180 446.97 T
1 10 Q
-0.54 (Some systems make each application maintain and manage its own memory) 180 421.3 P
-0.54 (.) 525.98 421.3 P
(In a multitasking system, this is not only dif\336cult and time-consuming but) 180 408.3 T
-0.44 (also potentially dangerous, as applications can easily start trashing memory) 180 395.3 P
(used by other processes.) 180 382.3 T
1 9 Q
(GEOS) 294.26 382.3 T
1 10 Q
( protects and relieves applications by) 320.43 382.3 T
(providing comprehensive memory management.) 180 369.3 T
(The) 180 349.3 T
1 9 Q
(GEOS) 200.56 349.3 T
1 10 Q
( memory management system is designed to meet rigorous) 226.73 349.3 T
(demands. Some of the requirements are) 180 336.3 T
2 F
(u) 180 316.3 T
1 F
(Independence of memory location) 198 316.3 T
(Ideally) 198 304.3 T
(, an application should not have to keep track of the address of) 228.93 304.3 T
(each of its data items; rather) 198 292.3 T
(, the memory management system should) 330.8 292.3 T
(allow the application to reference its memory virtually) 198 280.3 T
(.) 448.58 280.3 T
2 F
(u) 180 261.3 T
1 F
(Hardware independence) 198 261.3 T
(Applications are much easier to write and maintain if they can ignore) 198 249.3 T
(hardware speci\336cs. An application should be able to specify its memory) 198 237.3 T
-0.43 (requirements in generic terms \050\322I need a package this big which behaves) 198 225.3 P
(in this way\323\051 and let the memory manager worry about where it comes) 198 213.3 T
(from.) 198 201.3 T
2 F
(u) 180 182.3 T
1 F
(Ef\336cient use of memory) 198 182.3 T
-0.3 (A good operating system should be able to rearrange memory in order to) 198 170.3 P
-0.66 (gather as much space as possible. It should also be able to discard certain) 198 158.3 P
81 144 531 648 C
235.51 643.97 376.49 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.51 643.97 376.49 648 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
81 477 171 544.42 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
0 0 0 1 0 0 0 K
90 450 13.5 13.5 101.25 520.3 G
4 H
0 Z
90 450 13.5 13.5 101.25 520.3 A
0 0 0 1 0 0 0 K
81 500.18 121.5 540.68 R
1 H
0 X
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "543" 1
%%Page: "544" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(544) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.36 (data or copy it to mass-storage devices \050like a hard disk\051 if more memory) 198 641.33 P
(is needed.) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
(Management of Shared Data) 198 610.33 T
(Applications should be able to share common data or code. In a) 198 598.33 T
(multitasking system, proper synchronization of shared resources is) 198 586.33 T
(essential to maintain data integrity) 198 574.33 T
(.) 361.56 574.33 T
-0.65 (The) 180 555.33 P
1 9 Q
-0.59 (GEOS) 199.91 555.33 P
1 10 Q
-0.65 ( memory manager meets all of these needs. Applications often take) 226.08 555.33 P
-0.32 (advantage of the memory manager without trying; for example, the memory) 180 542.33 P
(manager swaps methods into memory when messages need to be handled.) 180 529.33 T
-0.25 (Applications can also request memory at run-time, either by requesting raw) 180 516.33 P
(memory from the memory manager) 180 503.33 T
(, or by creating V) 343.15 503.33 T
(irtual Memory \336les) 422.16 503.33 T
(through the) 180 490.33 T
1 9 Q
(VM) 237.59 490.33 T
1 10 Q
( library \050see \322V) 252.58 490.33 T
(irtual Memory) 321.22 490.33 T
(,\323 Chapter) 387.33 490.33 T
(18\051.) 437.52 490.33 T
0 14 Q
(15.2) 134.76 438 T
0 24 Q
(The Structure of Memory) 180 438 T
1 10 Q
(The) 180 412.33 T
1 9 Q
(GEOS) 200.56 412.33 T
1 10 Q
( memory manager currently uses real mode memory addressing,) 226.73 412.33 T
-0.32 (and is designed to run on) 180 399.33 P
1 9 Q
-0.29 (PC) 297.36 399.33 P
1 10 Q
-0.32 (s with as little as 512K) 309.86 399.33 P
1 9 Q
-0.29 (RAM) 417.25 399.33 P
1 10 Q
-0.32 (. T) 438.75 399.33 P
-0.32 (ypically) 450.14 399.33 P
-0.32 (, between) 484.96 399.33 P
-0.43 (30K and 160K of that is occupied by) 180 386.33 P
1 9 Q
-0.39 (DOS) 345.67 386.33 P
1 10 Q
-0.43 (. The remaining) 365.35 386.33 P
1 9 Q
-0.39 (RAM) 440.73 386.33 P
1 10 Q
-0.43 ( is used for the) 462.23 386.33 P
-0.07 (global handle table and the global heap \050described below\051. The) 180 373.33 P
1 9 Q
-0.06 (GEOS) 469.77 373.33 P
1 10 Q
-0.07 ( kernel) 495.94 373.33 P
(is kept in the global heap.) 180 360.33 T
(Because of the constraints of real-mode memory addressing,) 180 340.33 T
1 9 Q
(GEOS) 460.56 340.33 T
1 10 Q
( uses) 486.73 340.33 T
(memory in segments of at most 64K. Each segment may be subdivided and) 180 327.33 T
(parceled out to \336ll memory requests from applications. Sometimes an) 180 314.33 T
(application will need a seemingly contiguous section of memory which is) 180 301.33 T
(larger than 64K; in these situations, it should use the HugeArray routines) 180 288.33 T
(\050see section 18.4 of chapter 18\051.) 180 275.33 T
0 14 Q
(15.2.1) 123.08 233 T
0 18 Q
(Expanded/Extended Memory) 180 233 T
1 10 Q
(While) 180 209.33 T
1 9 Q
(GEOS) 210 209.33 T
1 10 Q
( is designed to run on a standard system, it makes ef\336cient use) 236.17 209.33 T
(of expanded and extended memory) 180 196.33 T
(, if it is available.) 339.45 196.33 T
1 9 Q
(GEOS) 422.27 196.33 T
1 10 Q
( treats extended) 448.44 196.33 T
(memory as a fast and convenient) 180 183.33 T
1 9 Q
(RAM) 335.02 183.33 T
1 10 Q
( disk, swapping blocks into the) 356.51 183.33 T
-0.27 (extended memory rather than out to a slower disk drive. This incurs none of) 180 170.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "544" 2
%%Page: "545" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Structure of Memory) 392.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(545) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.28 (the usual overhead of a) 180 641.33 P
1 9 Q
-0.25 (RAM) 289.18 641.33 P
1 10 Q
-0.28 ( disk such as a directory because it is treated as) 310.68 641.33 P
(normal memory) 180 628.33 T
(. Expanded memory is used in a similar manner) 252.41 628.33 T
(.) 473.92 628.33 T
0 14 Q
(15.2.2) 123.08 586 T
0 18 Q
(Main Memory) 180 586 T
1 10 Q
-0.09 (Memory available to applications is organized in a data structure called the) 180 562.33 P
-0.29 (Global Heap. The size of the global heap may vary from machine to machine) 180 549.33 P
(and can change from session to session, but during a single execution of) 180 536.33 T
1 9 Q
(GEOS) 180 523.33 T
1 10 Q
(, the heap size remains constant. Usually) 206.17 523.33 T
(, the global heap occupies) 395.83 523.33 T
(approximately 450K bytes of a 640K system.) 180 510.33 T
(When an application requests memory) 180 490.33 T
(, it is allocated a \322block\323 on the heap.) 357.05 490.33 T
-0.27 (Blocks may be of almost any size but may not be larger than 64K. \050However) 180 477.33 P
-0.27 (,) 525.71 477.33 P
(the heap is most ef\336cient when blocks are 2K-6K in size; see \322Memory) 180 464.33 T
-0.22 (Etiquette\323 on page 552.\051 Every block is allocated a unique handle \050described) 180 451.33 P
(below\051 from the Handle T) 180 438.33 T
(able; by calling a memory manager routine, the) 297.54 438.33 T
(application can translate a handle to a conventional pointer) 180 425.33 T
(.) 455.23 425.33 T
(When) 180 405.33 T
1 9 Q
(GEOS) 209.81 405.33 T
1 10 Q
( shuts down, all the blocks on the global heap are freed, even if) 235.98 405.33 T
(they are locked or \336xed. If an application will need to store the data over a) 180 392.33 T
-0.79 (shutdown, it should make the block part of a) 180 379.33 P
1 9 Q
-0.71 (VM) 381.86 379.33 P
1 10 Q
-0.79 ( \336le, which it can then reopen) 396.86 379.33 P
(when it restores from state. The) 180 366.33 T
1 9 Q
(GEOS) 330.94 366.33 T
1 10 Q
( kernel attaches object blocks to) 357.11 366.33 T
(system) 180 353.33 T
1 9 Q
(VM) 215.19 353.33 T
1 10 Q
( \336les and takes care of storing them to state and restoring them) 230.18 353.33 T
(when) 180 340.33 T
1 9 Q
(GEOS) 207.78 340.33 T
1 10 Q
( restarts.) 233.95 340.33 T
0 14 Q
(15.2.2.1) 111.4 306.67 T
(Blocks and Handles) 180 306.67 T
1 9 Q
(GEOS) 180 284.33 T
1 10 Q
( segments memory into blocks. A block is simply a number of) 206.17 284.33 T
-0.6 (contiguous bytes on the global heap in which code or data may be stored. Any) 180 271.33 P
(given block may be of any size but must be less than 64K, due to the) 180 258.33 T
-0.43 (segmented addressing scheme used by the 80x86 processors. A block\325) 180 245.33 P
-0.43 (s size is) 493.95 245.33 P
-0.69 (determined when it is allocated\321the process that requests the memory must) 180 232.33 P
(specify the desired size.) 180 219.33 T
(T) 180 199.33 T
(o facilitate ef\336cient memory usage and to present all applications with) 185.75 199.33 T
(enough memory to function, blocks are dynamic in nature. This means that) 180 186.33 T
(unless a block is \336xed or has been locked \050see section 15.3.4 on page 555\051,) 180 173.33 T
-0.14 (there is no telling its precise address on the heap, or indeed whether it is on) 180 160.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "545" 3
%%Page: "546" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(546) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.1 (the heap at all. For this reason, applications are not given the address of an) 180 641.33 P
(allocated block; rather) 180 628.33 T
(, they are given the block\325) 282.61 628.33 T
(s handle.) 400.41 628.33 T
(Memory handles are indexes into the global handle table. Geodes may not) 180 608.33 T
-0.27 (access the table directly) 180 595.33 P
-0.27 (. When they want to access the memory indicated by) 288.47 595.33 P
-0.43 (a handle, they pass the handle to the memory manager and are returned the) 180 582.33 P
(segment address of the block\325) 180 569.33 T
(s current location on the heap.) 314.83 569.33 T
-0.16 (In addition to storing the actual address of the block, the handle table entry) 180 549.33 P
(records the block\325) 180 536.33 T
(s attributes, such as whether the block is discardable,) 260 536.33 T
(swapable, or \336xed. The memory manager uses all these attributes to) 180 523.33 T
(manipulate the block.) 180 510.33 T
0 14 Q
(15.2.2.2) 111.4 476.67 T
(Enabling Block Access) 180 476.67 T
1 10 Q
(Dynamic memory) 180 454.33 T
(, while providing signi\336cant bene\336ts, poses one major) 260.56 454.33 T
-0.68 (problem: What happens if a block is accessed while being moved, swapped, or) 180 441.33 P
(discarded?) 180 428.33 T
1 9 Q
(GEOS) 231.66 428.33 T
1 10 Q
( responds to this problem with the implementation of a) 257.83 428.33 T
-0.4 (system for locking and unlocking blocks. When a block is locked on the heap,) 180 415.33 P
-0.18 (the Memory Manager may not move, swap, or discard it until it is unlocked.) 180 402.33 P
(This locking mechanism allows applications to gain control over their) 180 389.33 T
-0.79 (memory during periods of access and relinquish it when it is not in active use.) 180 376.33 P
-0.65 (Applications, however) 180 363.33 P
-0.65 (, should not leave blocks locked for extended periods as) 280.65 363.33 P
(this may interfere with heap compaction.) 180 350.33 T
-0.76 (When a process wants to use a block, it instructs the memory manager to lock) 180 330.33 P
(the block by calling) 180 317.33 T
3 F
(MemLock\050\051) 272.06 317.33 T
1 F
( \050see page 556\051. The application passes the) 330.58 317.33 T
-0.04 (handle of the block, and the memory manager locks the block and returns a) 180 304.33 P
(pointer to the block\325) 180 291.33 T
(s area in the global heap. While a block is unlocked, the) 271.31 291.33 T
(memory manager can, depending on the block\325) 180 278.33 T
(s category) 393.91 278.33 T
(, move the block on) 439.28 278.33 T
(the heap, swap it to disk or extended/expanded memory) 180 265.33 T
(, or discard it) 436.33 265.33 T
(altogether) 180 252.33 T
(.) 226.67 252.33 T
0 14 Q
(15.2.2.3) 111.4 218.67 T
(T) 180 218.67 T
(ypes of Blocks) 187.52 218.67 T
1 10 Q
(When a geode requests memory) 180 196.33 T
(, it may specify how that memory is to be) 325.56 196.33 T
(treated by the memory manager) 180 183.33 T
(. The memory request includes a set of) 328.35 183.33 T
3 F
(HeapFlags) 180 170.33 T
1 F
( \050see page 551\051 which speci\336es how and when the block can be) 235.18 170.33 T
-0.35 (moved. Broadly speaking, memory blocks can be divided into four categories:) 180 157.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "546" 4
%%Page: "547" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Structure of Memory) 392.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(547) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(Fixed) 198 641.33 T
(A \336xed block has the \337ag) 198 629.33 T
1 9 Q
(HF_FIXED) 316.54 629.33 T
1 10 Q
( set to one, and) 364.04 629.33 T
1 9 Q
(HF_DISCARDABLE) 436.65 629.33 T
1 10 Q
(and) 198 617.33 T
1 9 Q
(HF_SW) 218.19 617.33 T
(AP) 249.86 617.33 T
(ABLE) 261.7 617.33 T
1 10 Q
( set to zero. A \336xed block is allocated on the global) 287.19 617.33 T
(heap and stays exactly where it was created until it is freed. An) 198 605.33 T
-0.64 (application can therefore reference data within a \336xed block with normal) 198 593.33 P
(pointers; the application does not need to use the memory manager to) 198 581.33 T
(translate a handle into a pointer) 198 569.33 T
(. Accessing \336xed blocks is very quick) 347.66 569.33 T
(since the memory never needs to be read from disk and the handle does) 198 557.33 T
-0.62 (not need to be dereferenced. However) 198 545.33 P
-0.62 (, since the memory manager cannot) 367.3 545.33 P
(relocate \336xed blocks, they tend to degrade the memory manger) 198 533.33 T
(\325) 488.57 533.33 T
(s) 490.24 533.33 T
-0.79 (performance; therefore, applications should generally use small amounts) 198 521.33 P
-0.19 (of \336xed memory) 198 509.33 P
-0.19 (. Note that if a \336xed block is resized, it may be moved on) 270.22 509.33 P
(the global heap; therefore, after resizing a \336xed block, a geode should) 198 497.33 T
(reset its pointers within the block by dereferencing the block handle.) 198 485.33 T
2 F
(u) 180 466.33 T
1 F
(Moveable) 198 466.33 T
(A moveable block has the \337ag) 198 454.33 T
1 9 Q
(HF_FIXED) 337.85 454.33 T
1 10 Q
( set to zero. When a moveable) 385.35 454.33 T
(block is not in use \050i.e. unlocked\051, the memory manager may move it) 198 442.33 T
(within the global heap. This lets the memory manager keep the global) 198 430.33 T
(heap compacted \050see section 15.2.2.4 on page 548\051. Accessing moveable) 198 418.33 T
-0.42 (blocks is slightly slower than accessing \336xed blocks since the application) 198 406.33 P
(needs to call the memory manager to lock the block and translate the) 198 394.33 T
-0.05 (memory handle to a pointer) 198 382.33 P
-0.05 (. In addition to being moveable, a block may) 325.24 382.33 P
(also be swapable and/or discardable \050as described below\051.) 198 370.33 T
2 F
(u) 180 351.33 T
1 F
(Swapable) 198 351.33 T
(A swapable block has the \337ag) 198 339.33 T
1 9 Q
(HF_FIXED) 337.3 339.33 T
1 10 Q
( set to zero and) 384.8 339.33 T
1 9 Q
(HF_SW) 457.77 339.33 T
(AP) 489.44 339.33 T
(ABLE) 501.28 339.33 T
1 10 Q
-0.43 (set to one. If a block is marked \322swapable,\323 the memory manager has the) 198 327.33 P
(option of swapping it out of main memory \050either to the hard disk, or to) 198 315.33 T
-0.35 (extended or expanded memory\051 when it is unlocked. This keeps space on) 198 303.33 P
(the global heap free for other requests. If an application tries to lock a) 198 291.33 T
-0.83 (block which has been swapped out of main memory) 198 279.33 P
-0.83 (, the memory manager) 426.92 279.33 P
(will copy the entire block back to the global heap, then lock it normally) 198 267.33 T
(.) 524.18 267.33 T
(By using swapable memory) 198 255.33 T
(, geodes can potentially use much more) 323.76 255.33 T
(memory than the roughly 450K available in the global heap. However) 198 243.33 T
(,) 519.55 243.33 T
(accessing an unlocked swapable block can potentially be much slower) 198 231.33 T
-0.29 (than accessing a non-swapable block, as the block may have to be copied) 198 219.33 P
(in from the disk.) 198 207.33 T
2 F
(u) 180 188.33 T
1 F
(Discardable) 198 188.33 T
-0.41 (A discardable block has) 198 176.33 P
1 9 Q
-0.37 (HF_FIXED) 308.03 176.33 P
1 10 Q
-0.41 ( set to zero and) 355.53 176.33 P
1 9 Q
-0.37 (HF_DISCARDABLE) 426.42 176.33 P
1 10 Q
-0.41 ( set) 512.75 176.33 P
(to one. Sometimes it doesn\325) 198 164.33 T
(t make sense to copy a block to the disk. For) 323.03 164.33 T
-0.52 (example, many memory blocks contain code or unchanging data which is) 198 152.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "547" 5
%%Page: "548" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(548) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.17 (read in from the disk. It would make no sense to swap these blocks back) 198 641.33 P
(to disk, since the data is already there. Instead, one can mark a block) 198 629.33 T
(\322discardable.\323 This indicates that when the block is unlocked, the) 198 617.33 T
-0.22 (memory manager can, at will, discard the block. If a process attempts to) 198 605.33 P
-0.17 (lock a block which has been discarded, the memory manager will return) 198 593.33 P
(an error) 198 581.33 T
(. The application can then \322re-allocate\323 memory for that block) 235.03 581.33 T
-0.09 (\050see) 198 569.33 P
3 F
-0.09 (MemReAlloc\050\051) 218.65 569.33 P
1 F
-0.09 ( on page 554\051 and copy the data back from the disk.) 291.8 569.33 P
(\050The system takes care of reloading discarded code resources as) 198 557.33 T
(necessary) 198 545.33 T
(.\051 A block can be both discardable and swapable \050indeed,) 242.07 545.33 T
(discardable blocks are usually swapable\051. If a block has both) 198 533.33 T
1 9 Q
(HF_DISCARDABLE) 198 521.33 T
1 10 Q
( and) 284.33 521.33 T
1 9 Q
(HF_SW) 307.3 521.33 T
(AP) 338.97 521.33 T
(ABLE) 350.8 521.33 T
1 10 Q
( set, the memory manager can) 376.3 521.33 T
-0.28 (either swap the block to extended/expanded memory or discard it; it will) 198 509.33 P
(not swap the block to the disk.) 198 497.33 T
(Fixed blocks must be declared as such when they are allocated, and they) 180 478.33 T
(remain so until they are freed. However) 180 465.33 T
(, non-\336xed blocks may become or) 363.71 465.33 T
(cease to be discardable or swapable after they are created. T) 180 452.33 T
(o enable or) 457.46 452.33 T
-0.43 (disable these characteristics, call the routine) 180 439.33 P
3 F
-0.44 (MemModifyFlags\050\051) 387.1 439.33 P
1 F
-0.43 ( \050see page) 484.31 439.33 P
(562\051.) 180 426.33 T
0 14 Q
(15.2.2.4) 111.4 392.67 T
(Maximizing Free Space in Memory) 180 392.67 T
1 10 Q
-0.43 (Moveable, swapable, and discardable blocks are allocated from the top of the) 180 370.33 P
(heap using a \336rst-\336t method. Fixed blocks are allocated from the bottom of) 180 357.33 T
(the heap. If there is not enough contiguous free memory to satisfy an) 180 344.33 T
-0.67 (allocation request, the memory manager attempts to shuf\337e moveable blocks) 180 331.33 P
(in order to place all free memory together in one large mass.) 180 318.33 T
(This shuf\337ing is called heap compaction. If the free space resulting from) 180 298.33 T
(compaction still is not enough, blocks are discarded or swapped to liberate) 180 285.33 T
(more free space, and the heap is again compacted. Because of the) 180 272.33 T
(multitasking nature of) 180 259.33 T
1 9 Q
(GEOS) 287.61 259.33 T
1 10 Q
(, compaction occurs in the background and is) 313.78 259.33 T
-0.18 (invisible to both the user and applications. \050See Figure) 180 246.33 P
-0.18 (15-) 434.15 246.33 P
-0.18 (1 on page) 448.6 246.33 P
2 F
-0.18 (l) 494.92 246.33 P
1 F
-0.18 (549.\051) 505.61 246.33 P
-0.27 (The memory manager will also periodically compact memory during periods) 180 233.33 P
(of low activity; this helps insure that there will be memory instantly) 180 220.33 T
(available for a sudden large demand \050e.g. when an application is launched\051.) 180 207.33 T
-0.11 (The compaction is not arbitrary) 180 187.33 P
-0.11 (. The kernel decides which blocks to swap or) 324.75 187.33 P
-0.32 (discard based on recent usage patterns. This means, for example, that if you) 180 174.33 P
(haven\325) 180 161.33 T
(t used routines in a code resource for a while, that resource is more) 210.01 161.33 T
(likely to be discarded than the resources you\325ve accessed recently) 180 148.33 T
(. \050For this) 479.64 148.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "548" 6
%%Page: "549" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Structure of Memory) 392.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(549) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(reason, geodes normally isolate their initialization code in one resource,) 180 641.33 T
(which can be discarded later) 180 628.33 T
(.\051) 311.12 628.33 T
(One can see from Figure) 180 608.33 T
(15-) 295.93 608.33 T
(1 that a block left locked for extended periods) 310.38 608.33 T
(could interfere with heap compaction. Suppose, for example, that the) 180 595.33 T
(moveable locked block in the middle of the heap were left locked during an) 180 582.33 T
(application\325) 180 569.33 T
(s entire execution. Essentially) 233.16 569.33 T
(, this would cause the heap to be) 371.32 569.33 T
-0.18 (fractured into two subheaps, making compaction more dif\336cult and possibly) 180 556.33 P
(slowing the system down.) 180 543.33 T
81 144 531 648 C
180 144 531 528.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 200 T
(15-) 213.34 200 T
(1) 227.79 200 T
4 F
(Heap Compaction) 236.13 200 T
-0.55 (Compaction of the Global Heap: State 1 is prior to compaction, State 2 is after) 180 186 P
-0.55 (a single pass, and State 3 is after discardable blocks have been discarded and) 180 174 P
(swapable blocks have been swapped. Note that the \336xed blocks and locked) 180 162 T
(moveable blocks are not relocated.) 180 150 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
183.5 255.17 271.5 519.17 R
6 X
V
0.5 H
0 Z
0 X
N
185.1 500.17 269.9 515.67 R
7 X
V
0 X
N
185.1 402.92 269.9 439.42 R
7 X
V
0 X
N
185.1 473.92 269.9 488.92 R
7 X
V
0 X
N
185.1 379.17 269.9 401.67 R
7 X
V
0 X
N
185.1 260.53 269.9 283.53 R
7 X
V
0 X
N
185.1 291.7 269.9 321.7 R
7 X
V
0 X
N
199.8 409.17 255.2 433.17 R
7 X
V
4 9 Q
0 X
(M) 223.25 427.17 T
(\050locked\051) 211.51 414.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
200.66 476.67 254.34 486.17 R
7 X
V
0 X
(M) 223.25 480.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
190.29 503.17 264.71 512.67 R
7 X
V
0 X
(M,S,D) 214.25 506.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
200.66 385.67 254.34 395.17 R
7 X
V
0 X
(M,S) 219 389.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
200.66 301.95 254.34 311.45 R
7 X
V
0 X
(Fixed) 216 305.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
200.66 267.28 254.34 276.78 R
7 X
V
0 X
(Fixed) 216 270.78 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
185.1 350.92 269.9 378.42 R
7 X
V
0 X
N
199.8 352.67 255.2 376.67 R
7 X
V
0 X
(M) 223.25 370.67 T
(\050locked\051) 211.51 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.5 255.17 393.5 519.17 R
6 X
V
0 X
N
307.1 503.17 391.9 518.67 R
7 X
V
0 X
N
307.1 402.92 391.9 439.42 R
7 X
V
0 X
N
307.1 488.17 391.9 503.17 R
7 X
V
0 X
N
307.1 465.67 391.9 488.17 R
7 X
V
0 X
N
321.8 409.17 377.2 433.17 R
7 X
V
0 X
(M) 345.25 427.17 T
(\050locked\051) 333.51 414.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
322.66 490.92 376.34 500.42 R
7 X
V
0 X
(M) 345.25 494.42 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
312.29 506.17 386.71 515.67 R
7 X
V
0 X
(M,S,D) 336.25 509.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
322.66 472.17 376.34 481.67 R
7 X
V
0 X
(M,S) 341 475.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
307.1 350.92 391.9 378.42 R
7 X
V
0 X
N
321.8 352.67 377.2 376.67 R
7 X
V
0 X
(M) 345.25 370.67 T
(\050locked\051) 333.51 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
427.5 255.17 515.5 519.17 R
6 X
V
0 X
N
429.1 402.92 513.9 439.42 R
7 X
V
0 X
N
429.1 503.17 513.9 518.17 R
7 X
V
0 X
N
443.8 409.17 499.2 433.17 R
7 X
V
0 X
(M) 467.25 427.17 T
(\050locked\051) 455.51 414.17 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
444.66 505.92 498.34 515.42 R
7 X
V
0 X
(M) 467.25 509.42 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
429.1 350.92 513.9 378.42 R
7 X
V
0 X
N
443.8 352.67 499.2 376.67 R
7 X
V
0 X
(M) 467.25 370.67 T
(\050locked\051) 455.51 357.67 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
185.25 227.67 269.75 247.17 R
7 X
V
4 10 Q
0 X
(State 1) 211.38 240.5 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
307.25 228.67 391.75 247.17 R
7 X
V
0 X
(State 2) 333.39 240.5 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
429.25 228.67 513.75 247.17 R
7 X
V
0 X
(State 3) 455.39 240.5 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
307.91 260.53 392.71 283.53 R
7 X
V
0 X
N
307.91 291.7 392.71 321.7 R
7 X
V
0 X
N
323.47 301.95 377.15 311.45 R
7 X
V
4 9 Q
0 X
(Fixed) 338.81 305.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
323.47 267.28 377.15 276.78 R
7 X
V
0 X
(Fixed) 338.81 270.78 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
430.08 260.53 514.87 283.53 R
7 X
V
0 X
N
430.08 291.7 514.87 321.7 R
7 X
V
0 X
N
445.63 301.95 499.32 311.45 R
7 X
V
0 X
(Fixed) 460.98 305.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
445.63 267.28 499.32 276.78 R
7 X
V
0 X
(Fixed) 460.98 270.78 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
4 10 Q
(M=movable, S=swappable, D=discardable) 252.74 220 T
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "549" 7
%%Page: "550" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(550) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(All compaction, swapping, and discarding are functions of the Memory) 180 641.33 T
(Manager) 180 628.33 T
(. Applications need only indicate how much space is needed and) 220.74 628.33 T
(when space can be freed. Applications may also resize blocks at will; if) 180 615.33 T
(necessary) 180 602.33 T
(, the memory manager will compact the heap to accommodate the) 224.07 602.33 T
(request.) 180 589.33 T
0 14 Q
(15.2.2.5) 111.4 555.67 T
(Block Attributes) 180 555.67 T
5 10 Q
(HeapAllocFlags, HeapFlags) 180 533.33 T
1 F
(Blocks are allocated with certain \337ags that help the Memory Manager) 180 513.33 T
(manipulate memory ef\336ciently) 180 500.33 T
(. These \337ags can be found in the) 320.75 500.33 T
1 9 Q
(GEOS) 472.07 500.33 T
1 10 Q
( \336le) 498.24 500.33 T
3 F
(heap.h) 180 487.33 T
1 F
(, which should be included in all applications that plan to allocate) 215 487.33 T
(memory dynamically with the memory manager routines.) 180 474.33 T
(The \337ags fall into two categories: those used when the block is allocated) 180 454.33 T
(\050stored in a record called) 180 441.33 T
3 F
(HeapAllocFlags) 296.85 441.33 T
1 F
(\051 and those used to describe the) 378.33 441.33 T
(block as it is manipulated \050stored in a record called) 180 428.33 T
3 F
(HeapFlags) 418.74 428.33 T
1 F
(\051.) 473.92 428.33 T
-0.86 (The) 180 408.33 P
3 F
-0.88 (HeapAllocFlags) 199.71 408.33 P
1 F
-0.86 ( record is used to determine what qualities the memory) 281.18 408.33 P
-0.04 (manager should give the block when it is \336rst allocated. Some of these \337ags) 180 395.33 P
-0.2 (are also relevant when memory is being reallocated. These qualities include:) 180 382.33 P
1 9 Q
(HAF_ZERO_INIT) 180 362.33 T
1 10 Q
(Upon allocation, initialize data in block to zeros.) 243 350.33 T
1 9 Q
(HAF_LOCK) 180 331.33 T
1 10 Q
-0.37 (Upon allocation, the block should be locked on the global heap.) 243 331.33 P
(Use) 243 319.33 T
3 F
(MemDeref\050\051) 263.56 319.33 T
1 F
( \050page 561\051 to get a pointer to the block.) 325.41 319.33 T
1 9 Q
(HAF_NO_ERR) 180 300.33 T
1 10 Q
(Do not return error codes; system error if block cannot be) 243 288.33 T
(allocated. Use of this \337ag is strongly discouraged.) 243 276.33 T
1 9 Q
(HAF_OBJECT_RESOURCE) 180 257.33 T
1 10 Q
(This block is an object-block. This is set by the system) 243 245.33 T
4 F
(only) 494.91 245.33 T
1 F
(.) 513.24 245.33 T
1 9 Q
(HAF_UI) 180 226.33 T
1 10 Q
(If both) 243 226.33 T
1 9 Q
(HAF_OBJECT_RESOURCE) 276.52 226.33 T
1 10 Q
( and) 395.52 226.33 T
1 9 Q
(HAF_UI) 418.49 226.33 T
1 10 Q
( are set, the) 453.98 226.33 T
-0.86 (memory manager will set the block to allow the application\325) 243 214.33 P
-0.86 (s UI) 510.31 214.33 P
(thread to manipulate objects in the block. This is set by the) 243 202.33 T
(system) 243 190.33 T
4 F
(only) 278.19 190.33 T
1 F
(.) 296.52 190.33 T
1 9 Q
(HAF_READ_ONL) 180 171.33 T
(Y) 255.01 171.33 T
1 10 Q
(This block\325) 243 159.33 T
(s data will not be modi\336ed.) 292.09 159.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "550" 8
%%Page: "551" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Structure of Memory) 392.31 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(551) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(HAF_CODE) 180 641.33 T
1 10 Q
(This block contains executable code.) 243 641.33 T
1 9 Q
(HAF_CONFORMING) 180 622.33 T
1 10 Q
(If this block contains code, the code may be run by a less) 243 610.33 T
(privileged entity) 243 598.33 T
(. If the block contains data, the data may be) 318.19 598.33 T
(accessed or altered by a less privileged entity) 243 586.33 T
(.) 450.43 586.33 T
(Once a block is allocated, it has certain properties that govern how the) 180 567.33 T
(Memory Manager manipulates it. These properties are determined by the) 180 554.33 T
3 F
-0.34 (HeapFlags) 180 541.33 P
1 F
-0.34 (. The) 235.18 541.33 P
3 F
-0.34 (HeapFlags) 260.63 541.33 P
1 F
-0.34 ( also contain data about whether the block has) 315.81 541.33 P
-0.54 (been swapped or discarded. These \337ags are stored in the block\325) 180 528.33 P
-0.54 (s handle-table) 463.73 528.33 P
-0.75 (entry) 180 515.33 P
-0.75 (, so they can be retrieved without locking the block. T) 203.7 515.33 P
-0.75 (o retrieve the \337ags,) 442.15 515.33 P
(call the routine) 180 502.33 T
3 F
(MemGetInfo\050\051) 253.34 502.33 T
1 F
( with the \337ag) 325.92 502.33 T
1 9 Q
(MGIT_FLAGS_AND_LOCK_COUNT) 180 489.33 T
1 10 Q
(. \050See) 334.93 489.33 T
3 F
(MemGetInfo\050\051) 362.9 489.33 T
1 F
( on page 562.\051 Some) 435.48 489.33 T
-0.37 (of the \337ags can be changed after the block has been allocated; for details, see) 180 476.33 P
3 F
(MemModifyFlags\050\051) 180 463.33 T
1 F
( on page 562. The \337ags include) 277.21 463.33 T
1 9 Q
(HF_FIXED) 180 443.33 T
1 10 Q
-0.05 (The block will not move from its place in the global heap until) 243 443.33 P
-0.65 (it is freed. If this \337ag is) 243 431.33 P
4 F
-0.65 (off) 349.04 431.33 P
1 F
-0.65 (, the memory manager may move the) 360.7 431.33 P
(block when it is unlocked. If it is) 243 419.33 T
4 F
(on) 395.62 419.33 T
1 F
(, the block may not be) 406.73 419.33 T
(locked. This \337ag) 243 407.33 T
4 F
(cannot) 320.98 407.33 T
1 F
( be changed after the block has been) 351.9 407.33 T
(allocated.) 243 395.33 T
1 9 Q
(HF_SHARABLE) 180 376.33 T
1 10 Q
-0.05 (The block may be locked by geodes other than the owner) 243 364.33 P
-0.05 (. This) 502.2 364.33 P
(\337ag can be changed with) 243 352.33 T
3 F
(MemModifyFlags\050\051) 359.87 352.33 T
1 F
(.) 457.08 352.33 T
1 9 Q
(HF_DISCARDABLE) 180 333.33 T
1 10 Q
(If the block is unlocked and space is needed, the memory) 243 321.33 T
(manager may discard it. This \337ag can be changed with) 243 309.33 T
3 F
(MemModifyFlags\050\051) 243 297.33 T
1 F
(.) 340.21 297.33 T
1 9 Q
(HF_SW) 180 278.33 T
(AP) 211.67 278.33 T
(ABLE) 223.51 278.33 T
1 10 Q
-0.57 (If the block is unlocked and space is needed, it may be swapped) 243 266.33 P
-0.2 (to expanded or extended memory or to the hard disk. This \337ag) 243 254.33 P
(can be changed with) 243 242.33 T
3 F
(MemModifyFlags\050\051) 340.05 242.33 T
1 F
(.) 437.26 242.33 T
1 9 Q
(HF_LMEM) 180 223.33 T
1 10 Q
(The block is a local-memory block, managed by the LMem) 243 211.33 T
(module \050see \322Local Memory) 243 199.33 T
(,\323 Chapter) 368.93 199.33 T
(16\051. The \337ag is set) 419.12 199.33 T
(automatically by) 243 187.33 T
3 F
(LMemInitHeap\050\051) 323.21 187.33 T
1 F
(. It can be changed with) 409.86 187.33 T
3 F
(MemModifyFlags\050\051) 243 175.33 T
1 F
(; however) 340.21 175.33 T
(, an application should not) 383.73 175.33 T
(change this \337ag.) 243 163.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "551" 9
%%Page: "552" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(552) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(HF_DISCARDED) 180 641.33 T
1 10 Q
(The block has been discarded by the memory manager) 243 629.33 T
(. Only) 493.22 629.33 T
(the system can set or clear this \337ag.) 243 617.33 T
1 9 Q
(HF_SW) 180 598.33 T
(APPED) 211.67 598.33 T
1 10 Q
-0.19 (The block has been swapped to extended or expanded memory) 243 586.33 P
(or to the hard disk. Only the system can set or clear this \337ag.) 243 574.33 T
0 14 Q
(15.3) 134.76 523 T
0 24 Q
(Using Global Memory) 180 523 T
1 10 Q
(When an application needs more raw memory at run-time, it can use the) 180 497.33 T
(memory manager kernel routines to allocate, use, and free new blocks. An) 180 484.33 T
(application can also create a V) 180 471.33 T
(irtual Memory \336le to get memory with more) 320.51 471.33 T
-0.09 (advanced functionality) 180 458.33 P
-0.09 (, such as the ability to save to a disk \336le \050see \322V) 284.36 458.33 P
-0.09 (irtual) 502.01 458.33 P
(Memory) 180 445.33 T
(,\323 Chapter) 217.03 445.33 T
(18\051. However) 267.22 445.33 T
(, one must understand the raw memory) 327.41 445.33 T
(routines in order to use) 180 432.33 T
1 9 Q
(VM) 290.74 432.33 T
1 10 Q
( \336les.) 305.73 432.33 T
-0.57 (If you will be storing small pieces of information in a block, you should create) 180 412.33 P
-0.2 (a local memory heap \050a special kind of memory block\051. LMem heaps are also) 180 399.33 P
(useful for storing arrays of information or for storing objects. For more) 180 386.33 T
(information, see \322Local Memory) 180 373.33 T
(,\323 Chapter) 326.12 373.33 T
(16.) 376.31 373.33 T
0 14 Q
(15.3.1) 123.08 331 T
0 18 Q
(Memory Etiquette) 180 331 T
1 10 Q
-0.47 (The) 180 307.33 P
1 9 Q
-0.42 (GEOS) 200.09 307.33 P
1 10 Q
-0.47 ( memory manager tries to ful\336ll every memory request. It does not) 226.26 307.33 P
(enforce many rules on how the geodes should use memory) 180 294.33 T
(. This gives each) 446.3 294.33 T
(geode maximum \337exibility) 180 281.33 T
(, but it also means that the geodes have to take) 301.32 281.33 T
-0.55 (responsibility for their behavior; they must see to it that their memory usage) 180 268.33 P
(does not degrade the system\325) 180 255.33 T
(s performance.) 312.42 255.33 T
(First and foremost, applications should never use memory which has not) 180 235.33 T
(been assigned to them by the memory manager) 180 222.33 T
(. Unlike some operating) 397.81 222.33 T
(systems \050e.g.) 180 209.33 T
1 9 Q
(UNIX) 241.86 209.33 T
1 10 Q
(\051,) 266.53 209.33 T
1 9 Q
(GEOS) 275.42 209.33 T
1 10 Q
( does not enforce divisions between memory) 301.59 209.33 T
-0.51 (spaces. This allows) 180 196.33 P
1 9 Q
-0.46 (GEOS) 269.43 196.33 P
1 10 Q
-0.51 ( to run on) 295.6 196.33 P
1 9 Q
-0.46 (PC) 341.36 196.33 P
1 10 Q
-0.51 (s which do not provide protected-mode) 353.86 196.33 P
-0.11 (access. It means, however) 180 183.33 P
-0.11 (, that the system will not stop an application from) 298.37 183.33 P
-0.75 (loading a bad address into a pointer) 180 170.33 P
-0.75 (, accessing that address, and thus writing) 340.7 170.33 P
(to another memory space. An application should access only that memory) 180 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "552" 10
%%Page: "553" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(553) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(which the memory manager assigns to it directly \050via calls to memory) 180 641.33 T
(routines or data-space assigned at startup\051 or indirectly \050through other) 180 628.33 T
-0.03 (libraries, such as the) 180 615.33 P
1 9 Q
-0.02 (VM) 279.36 615.33 P
1 10 Q
-0.03 ( library\051. This also means that you should not save) 294.35 615.33 P
-0.69 (pointers to movable memory after unlocking the memory block. If you are not) 180 602.33 P
(careful, you can accidently access memory which no longer contains your) 180 589.33 T
(data, with sometimes-fatal results.) 180 576.33 T
-0.64 (Another rule is to minimize the amount of memory you keep locked at a time.) 180 556.33 P
(When memory is locked, the memory manager cannot move it on the global) 180 543.33 T
(heap or swap it out of memory) 180 530.33 T
(. This can result in the heap becoming) 319.09 530.33 T
(fragmented, which in turn makes it more likely that memory requests will) 180 517.33 T
(fail. Keep memory unlocked as much as possible. It\325) 180 504.33 T
(s worthwhile to unlock) 418 504.33 T
(memory even if you\325ll be locking it again very soon; this gives the memory) 180 491.33 T
-0.49 (manager a chance to compact the heap. If you have some data which you will) 180 478.33 P
-0.06 (need locked for long periods of time, it is best to put it in a \336xed block, since) 180 465.33 P
-0.12 (\336xed blocks are allocated from the bottom of the global heap and thus cause) 180 452.33 P
(less fragmentation. Of course, you should free the \336xed block as soon as) 180 439.33 T
(possible.) 180 426.33 T
(T) 180 406.33 T
(ry to have as few blocks locked at a time as possible. Every locked block) 186.05 406.33 T
(increases the danger that the heap will be unable to comply with a memory) 180 393.33 T
(request. T) 180 380.33 T
(ry to organize your use of memory to minimize the number of) 226.24 380.33 T
(blocks you will have to keep locked at a time.) 180 367.33 T
(In the same vein, try to keep the amount of memory you have on the global) 180 347.33 T
(heap to a minimum. Y) 180 334.33 T
(ou should declare all of your non-\336xed memory as) 281.88 334.33 T
-0.37 (swappable and/or discardable. Remember) 180 321.33 P
-0.37 (, you can use) 370.61 321.33 P
3 F
-0.38 (MemModifyFlags\050\051) 431.38 321.33 P
1 F
(to change these characteristics; during a timing-critical period, you could) 180 308.33 T
-0.84 (have a block set as non-swappable, and then make it swappable again as soon) 180 295.33 P
(as timing becomes less important. If you use V) 180 282.33 T
(irtual Memory \336les, the) 394.77 282.33 T
1 9 Q
(VM) 507 282.33 T
1 10 Q
(Manager does much of this for you.) 180 269.33 T
(T) 180 249.33 T
(ry to keep your memory blocks small. Although memory blocks can, in) 186.05 249.33 T
(principle, grow to 64K, the memory manager is best suited for dealing with) 180 236.33 T
-0.16 (blocks in the 2K-6K range. If you need a contiguous data space which grows) 180 223.33 P
(beyond 8K in size, you should use the Huge Array mechanism \050see section) 180 210.33 T
-0.02 (18.4 of chapter 18\051, which automatically \050and almost transparently\051 divides) 180 197.33 P
(a large data space across several smaller memory blocks. If you use many) 180 184.33 T
-0.02 (small data items, you should use the Database library) 180 171.33 P
-0.02 (, which automatically) 428.62 171.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "553" 11
%%Page: "554" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(554) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(distributes data items among different memory blocks, keeping each block) 180 641.33 T
(near the optimum size. \050See \322Database Library) 180 628.33 T
(,\323 Chapter) 395.97 628.33 T
(19\051.) 446.16 628.33 T
0 14 Q
(15.3.2) 123.08 586 T
0 18 Q
(Requesting Memory) 180 586 T
5 10 Q
(MemAlloc\050\051, MemAllocSetOwner\050\051, MemReAlloc\050\051) 180 562.33 T
1 F
(When you need a block of raw memory) 180 542.33 T
(, you must use one of the kernel\325) 357.05 542.33 T
(s) 505.77 542.33 T
(memory allocation routines. Y) 180 529.33 T
(ou also must use kernel memory routines to) 317.98 529.33 T
(change the size of a block or to reallocate space for a discarded block.) 180 516.33 T
3 F
-0.2 (MemAlloc\050\051) 180 496.33 P
1 F
-0.2 ( creates a block and assigns a handle to it. The routine must be) 239.26 496.33 P
(passed the size \050in bytes\051 of the block to be allocated, along with the) 180 483.33 T
3 F
(HeapAllocFlags) 180 470.33 T
1 F
( and) 261.48 470.33 T
3 F
(HeapFlags) 284.45 470.33 T
1 F
( for that block.) 339.63 470.33 T
3 F
(MemAlloc\050\051) 409.83 470.33 T
1 F
( will set the) 469.09 470.33 T
(block\325) 180 457.33 T
(s owner as the owner of the thread that called it. It will return the) 205.75 457.33 T
(handle of the newly-allocated block.) 180 444.33 T
3 F
(MemAllocSetOwner\050\051) 180 424.33 T
1 F
( is the same as) 290.93 424.33 T
3 F
(MemAlloc\050\051) 361.88 424.33 T
1 F
(, except that the caller) 421.14 424.33 T
-0.7 (explicitly sets the owner of the new block by passing the handle of the owning) 180 411.33 P
(geode. Like) 180 398.33 T
3 F
(MemAlloc\050\051) 235.2 398.33 T
1 F
(, it returns the handle of the new block. This is) 294.46 398.33 T
(commonly used by drivers and shared libraries, which allocate memory) 180 385.33 T
-0.67 (owned by the geode which calls them. When the block\325) 180 372.33 P
-0.67 (s owner exits, the block) 423.6 372.33 P
(will be freed, even if the block\325) 180 359.33 T
(s creator is still running.) 319.47 359.33 T
(If you request a \336xed block or pass the \337ag) 180 339.33 T
1 9 Q
(HAF_LOCK) 380.21 339.33 T
1 10 Q
(, the block will be) 431.21 339.33 T
(allocated locked on the heap. However) 180 326.33 T
(, the routine will still return just the) 356.13 326.33 T
(memory handle. T) 180 313.33 T
(o translate this handle to a pointer) 263.35 313.33 T
(, call the routine) 423.75 313.33 T
3 F
-0.34 (MemDeref\050\051) 180 300.33 P
1 F
-0.33 (.) 241.85 300.33 P
3 F
-0.34 (MemDeref\050\051) 247.08 300.33 P
1 F
-0.33 ( is passed a block\325) 308.93 300.33 P
-0.33 (s handle and returns a pointer) 389.1 300.33 P
(to the block \050or a null pointer if the block has been discarded\051.) 180 287.33 T
-0.54 (T) 180 267.33 P
-0.54 (o change the size of a block, call the routine) 185.75 267.33 P
3 F
-0.56 (MemReAlloc\050\051) 384.07 267.33 P
1 F
-0.54 (. This routine is) 457.22 267.33 P
-0.61 (also used to allocate memory for a block that has been discarded. The routine) 180 254.33 P
(is passed the memory handle, the new size, and the) 180 241.33 T
3 F
(HeapAllocFlags) 420.59 241.33 T
1 F
(; it) 502.07 241.33 T
-0.68 (returns the block\325) 180 228.33 P
-0.68 (s memory handle. Y) 259.57 228.33 P
-0.68 (ou can reallocate a \336xed or locked block;) 348.46 228.33 P
(however) 180 215.33 T
(, the block may be moved on the global heap to satisfy the request.) 217.96 215.33 T
-0.1 (\050This is the only way a \336xed block can move.\051 As with) 180 202.33 P
3 F
-0.1 (MemAlloc\050\051) 428.32 202.33 P
1 F
-0.1 (, you can) 487.58 202.33 P
-0.84 (request that the memory manager lock the block after reallocating it; you will) 180 189.33 P
-0.67 (then have to call) 180 176.33 P
3 F
-0.69 (MemDeref\050\051) 256.78 176.33 P
1 F
-0.67 ( to get the address of the block. Note that if the) 318.63 176.33 P
(new size is) 180 163.33 T
4 F
(smaller) 232.6 163.33 T
1 F
( than the original size, the routine is guaranteed to) 267.21 163.33 T
-0.51 (succeed, and the block will not move from its current position. Reallocating a) 180 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "554" 12
%%Page: "555" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(555) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.22 (block to zero bytes discards the block but preserves its handle; the block can) 180 641.33 P
(then be reallocated later) 180 628.33 T
(.) 292.24 628.33 T
-0.59 (If the memory manager is unable to accommodate a request, it will return an) 180 608.33 P
-0.81 (error condition. The requestor can prevent error messages by passing the \337ag) 180 595.33 P
1 9 Q
(HAF_NO_ERR) 180 582.33 T
1 10 Q
(; this will result in a system error if the memory cannot be) 242.83 582.33 T
(allocated. Passing) 180 569.33 T
1 9 Q
(HAF_NO_ERR) 265.95 569.33 T
1 10 Q
( is therefore strongly discouraged.) 328.78 569.33 T
0 14 Q
(15.3.3) 123.08 527 T
0 18 Q
(Freeing Memory) 180 527 T
5 10 Q
(MemFree\050\051) 180 503.33 T
1 F
(When you are done using a block, you should free it. Every block takes up) 180 483.33 T
-0.46 (space in the global handle table; if blocks are not freed, the handle table may) 180 470.33 P
-0.26 (\336ll up, causing a system error) 180 457.33 P
-0.26 (. Furthermore, non-swapable, non-discardable) 315.55 457.33 P
(blocks take up space in the global heap until they are freed.) 180 444.33 T
-0.34 (T) 180 424.33 P
-0.34 (o free a block, call) 185.75 424.33 P
3 F
-0.35 (MemFree\050\051) 269.46 424.33 P
1 F
-0.34 ( and pass the handle of the block to be freed.) 326.32 424.33 P
-0.34 (The block will be freed even if it is locked. Therefore, if the block can be used) 180 411.33 P
-0.37 (by other threads, you should make sure no other thread has locked the block) 180 398.33 P
(before you free it.) 180 385.33 T
-0.4 (Y) 180 365.33 P
-0.4 (ou can also set a reference count for a block. When a block\325) 185.93 365.33 P
-0.4 (s reference count) 450.93 365.33 P
-0.03 (drops to zero, the memory manager will automatically free it. This is useful) 180 352.33 P
-0.67 (if several threads will be accessing the same block. For more information, see) 180 339.33 P
(\322The Reference Count\323 on page 563.) 180 326.33 T
(When a geode exits, all blocks owned by it are automatically freed.) 180 306.33 T
0 14 Q
(15.3.4) 123.08 264 T
0 18 Q
(Accessing Data in a Block) 180 264 T
5 10 Q
(MemLock\050\051, MemUnlock\050\051) 180 240.33 T
1 F
(Because the memory manager is constantly reorganizing the global heap,) 180 220.33 T
(applications must have a way of making sure a block stays put when they) 180 207.33 T
-0.66 (want to use it. Applications must also have a way of recalling swapped blocks) 180 194.33 P
(when they are needed.) 180 181.33 T
(These requirements are met by the memory manager) 180 161.33 T
(\325) 426.87 161.33 T
(s locking scheme.) 428.54 161.33 T
-0.41 (Whenever you need to access data in a non-\336xed block, you must \336rst lock it.) 180 148.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "555" 13
%%Page: "556" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(556) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(This will cause the memory manager to copy the block back into the global) 180 641.33 T
(heap if it had been swapped; the memory manager will not move, swap, or) 180 628.33 T
(discard a block while the block is locked.) 180 615.33 T
-0.5 (Any block may be locked several times. Each lock increments the block\325) 180 595.33 P
-0.5 (s lock) 503.28 595.33 P
-0.28 (count \050to a maximum of 255 locks per block\051, and each unlock decrements it.) 180 582.33 P
(The memory manager can only move the block when the lock count is zero.) 180 569.33 T
(One warning about locking blocks: Do not try to lock a block which was) 180 549.33 T
(allocated as \336xed. Attempting to do so will result in a system error) 180 536.33 T
(. If you) 486.71 536.33 T
(need to translate a \336xed-block handle to a pointer) 180 523.33 T
(, call) 409.11 523.33 T
3 F
(MemDeref\050\051) 433.75 523.33 T
1 F
(.) 495.6 523.33 T
3 F
-0.45 (MemLock\050\051) 180 503.33 P
1 F
-0.44 ( locks a block on the heap. It is passed the handle of the block; it) 238.52 503.33 P
(returns a pointer to the start of the block on the heap. If the block has been) 180 490.33 T
(discarded,) 180 477.33 T
3 F
(MemLock\050\051) 230 477.33 T
1 F
( returns a null pointer) 288.52 477.33 T
(.) 390.93 477.33 T
-0.49 (Immediately after you are done using a block, you should unlock it by calling) 180 457.33 P
3 F
(MemUnlock\050\051) 180 444.33 T
1 F
(. It is better to lock and unlock the same block several times) 250 444.33 T
(than to retain control of it for an extended period, as locked blocks degrade) 180 431.33 T
(the performance of the heap compaction mechanism. T) 180 418.33 T
(o unlock a block, call) 431.68 418.33 T
3 F
(MemUnlock\050\051) 180 405.33 T
1 F
(, passing the handle of the block to be unlocked.) 250 405.33 T
3 F
(MemUnlock\050\051) 180 392.33 T
1 F
( decrements the lock count.) 250 392.33 T
-0.27 (A block may be locked by any of the threads run by its creator; if the block is) 180 372.33 P
-0.03 (sharable, it may be run by any other thread as well. There is nothing in the) 180 359.33 P
3 F
-0.28 (MemLock\050\051) 180 346.33 P
1 F
-0.27 ( routine to prevent different threads from locking a block at the) 238.52 346.33 P
(same time, causing potential synchronization problems. For this reason, if) 180 333.33 T
-0.61 (threads will be sharing a block, they should use the synchronization routines) 180 320.33 P
(\050see section 15.3.6 on page 558\051.) 180 307.33 T
0 14 Q
(15.3.5) 123.08 265 T
0 18 Q
(Accessing Data: An Example) 180 265 T
1 10 Q
-0.7 (Code Display) 180 241.33 P
-0.7 (15-) 243.2 241.33 P
-0.7 (1 shows how to allocate a block, lock it, access a word of data) 257.64 241.33 P
(in the block, and unlock the block. This example shows the basic principles) 180 228.33 T
(of using blocks.) 180 215.33 T
81 401.63 171 555.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(W) 81 502.45 T
(arning) 89.16 502.45 T
1 F
(Do not lock a \336xed) 81 486.45 T
(block; an error will) 81 475.45 T
(result.) 81 464.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 531.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 531.33 A
0 0 0 1 0 0 0 K
81 511.21 121.5 551.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 519.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "556" 14
%%Page: "557" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(557) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(15-) 147.13 629.31 T
(1 Allocating and Using a Block) 161.58 629.31 T
5 9 Q
(/*) 81 614.98 T
( * Variable Declarations) 81 603.98 T
( */) 81 592.98 T
(MemHandle) 81 574.98 T
(myBlockHandle;) 135 574.98 T
(char) 81 563.98 T
(charArray[50], *blockBaseAddress;) 125 563.98 T
(/* First, we allocate a block of the desired size. Since we\325ll use the block right) 81 545.98 T
( * away, we allocate the block already locked.) 81 534.98 T
( */) 81 523.98 T
(myBlockhandle = MemAlloc\050) 81 512.98 T
(/* MemAlloc returns the block handle */) 301 512.98 T
(2048,) 212.5 501.98 T
(/* Allocate 2K of memory */) 301 501.98 T
(HF_SWAPABLE,) 212.5 490.98 T
(/* HeapFlags: Make block swapable */) 301 490.98 T
(HAF_ZERO_INIT|HAF_LOCK\051;) 212.5 479.98 T
(/* HeapAllocFlags: Initialize) 344 479.98 T
( * the memory to zero & lock it */) 344 468.98 T
(/* The block is already locked on the global heap. However, we do not have the) 81 439.98 T
( * block\325s address; we just have its handle. Therefore, we need to call a routine) 81 428.98 T
( * to dereference the handle. */) 81 417.98 T
(blockBaseAddress = \050char *\051 MemDeref\050myBlockHandle\051;) 81 406.98 T
(/* Returns a ptr to base of) 361.8 406.98 T
( * block */) 344 395.98 T
(/* Enter some data in the block */) 81 377.98 T
(strcpy\050blockBaseAddress,) 81 366.98 T
("I can resist anything except temptation.\134n) 125 355.98 T
(--Wilde") 373.4 355.98 T
(/* We\325re done with the block for the moment, so we unlock it. */) 81 337.98 T
(MemUnlock\050myBlockHandle\051; /* blockBaseAddress is now meaningless */) 81 326.98 T
(/* Here we do some other stuff . . . */) 81 308.98 T
(/* Now we want to use the block again. First we have to lock it. */) 81 290.98 T
(blockBaseAddress = \050byte *\051 MemLock\050myBlockHandle\051;) 81 279.98 T
(/* Returns a ptr to locked) 356.4 279.98 T
( * block */) 344 268.98 T
(/* Read a string from the block: */) 81 250.98 T
(strcpy\050charArray, blockBaseAddress\051;) 81 239.98 T
(/* We\325re done with the block, so we free it. Note that we can free the block) 81 221.98 T
( * without unlocking it first.) 81 210.98 T
( */) 81 199.98 T
(MemFree\050myBlockhandle\051; /* myBlockHandle is now meaningless */) 81 188.98 T
81 164.95 531 176.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 164.95 531 176.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 172.2 617.5 175.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "557" 15
%%Page: "558" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(558) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(15.3.6) 123.08 636 T
0 18 Q
(Data-Access Synchronization) 180 636 T
5 10 Q
(MemThreadGrab\050\051, MemThreadGrabNB\050\051, MemThreadRelease\050\051,) 180 612.33 T
(MemLockShared\050\051, MemUnlockShared\050\051, MemLockExcl\050\051,) 180 599.33 T
(MemDowngradeExclLock\050\051, MemUpgradeSharedLock\050\051,) 180 586.33 T
(MemUnlockExcl\050\051, HandleP\050\051, HandleV\050\051, MemPLock\050\051,) 180 573.33 T
(MemUnlockV\050\051) 180 560.33 T
1 F
-0.37 (Blocks can have the property of being sharable\321that is, the same block may) 180 540.33 P
(be locked by threads owned by several different geodes. However) 180 527.33 T
(, this can) 478.54 527.33 T
(cause data synchronization problems; one application can be changing data) 180 514.33 T
-0.05 (while another application is trying to use it. T) 180 501.33 P
-0.05 (o prevent this,) 390.98 501.33 P
1 9 Q
-0.04 (GEOS) 460.29 501.33 P
1 10 Q
-0.05 ( provides) 486.46 501.33 P
(semaphore routines. Only one thread can have the block\325) 180 488.33 T
(s semaphore at a) 441.88 488.33 T
(time. When an application wants to use a shared block, it should call a) 180 475.33 T
(routine to set the semaphore. Once the routine returns, the application can) 180 462.33 T
(use the block; when it is done, it should release the block\325) 180 449.33 T
(s semaphore so) 443.94 449.33 T
(other applications can use the block.) 180 436.33 T
-0.15 (Note that use of semaphores is entirely voluntary by each application. Even) 180 416.33 P
-0.02 (if thread A has the semaphore on a block, thread B can call) 180 403.33 P
3 F
-0.02 (MemLock\050\051) 455.86 403.33 P
1 F
-0.02 ( on) 514.38 403.33 P
(the block and start changing it. However) 180 390.33 T
(, all threads using shared blocks) 367.8 390.33 T
(ought to use the semaphore routines to prevent confusion.) 180 377.33 T
(There are several different sets of routines which can be used to control a) 180 357.33 T
(block\325) 180 344.33 T
(s semaphore. The different sets of routines make different trade-offs) 205.75 344.33 T
(between faster operation and increased \337exibility) 180 331.33 T
(. Any one block should be) 407.25 331.33 T
(accessed with only one set of routines; different threads should all be using) 180 318.33 T
(the same routines to access a given block, and a thread should not switch) 180 305.33 T
(from one set of routines to another for a particular block. If this rule isn\325) 180 292.33 T
(t) 513.17 292.33 T
-0.69 (followed, results are unde\336ned. All of these routines access the) 180 279.33 P
4 9 Q
-0.62 (HM) 465.9 279.33 P
4 10 Q
-0.69 (_otherInfo) 481.89 279.33 P
1 F
(word of the handle table entry; if the block will be locked by any of these) 180 266.33 T
(routines, you must not alter that word. None of these routines is used to) 180 253.33 T
(access object blocks; instead, special object-block locking routines are) 180 240.33 T
(provided.) 180 227.33 T
-0.2 (Most geodes should use) 180 207.33 P
3 F
-0.21 (MemThreadGrab\050\051) 290.49 207.33 P
1 F
-0.2 (,) 387.34 207.33 P
3 F
-0.21 (MemThreadGrabNB\050\051) 392.7 207.33 P
1 F
-0.2 (, and) 505.65 207.33 P
3 F
(MemThreadRelease\050\051) 180 194.33 T
1 F
( to access sharable blocks. These routines provide) 290.74 194.33 T
(the maximum protection against deadlock in exchange for a slightly slower) 180 181.33 T
(execution.) 180 168.33 T
81 268.63 171 422.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(W) 81 369.45 T
(arning) 89.16 369.45 T
1 F
-0 (Use of semaphores is) 81 353.45 P
(voluntary; a thread) 81 342.45 T
(can lock a block) 81 331.45 T
(without having its) 81 320.45 T
(semaphore.) 81 309.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 398.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 398.33 A
0 0 0 1 0 0 0 K
81 378.21 121.5 418.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 386.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "558" 16
%%Page: "559" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(559) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 10 Q
0 X
(MemThreadGrab\050\051) 180 641.33 T
1 F
( gives the thread the semaphore for the block in) 276.85 641.33 T
-0.38 (question and locks the block. It is passed the handle of the block and returns) 180 628.33 P
(the block\325) 180 615.33 T
(s address on the global heap. If no thread has the block\325) 223.53 615.33 T
(s) 479.87 615.33 T
-0.51 (semaphore, it gives the semaphore to the calling thread. If the calling thread) 180 602.33 P
-0.2 (already has the semaphore, a \322semaphore count\323 is incremented; the thread) 180 589.33 P
-0.4 (will not release the semaphore until it has been released as many times as it) 180 576.33 P
-0.74 (has been grabbed. \050For example, two different objects run by the same thread) 180 563.33 P
(could each grab the semaphore; the semaphore would not be released until) 180 550.33 T
(each object called) 180 537.33 T
3 F
(MemThreadRelease\050\051) 263.34 537.33 T
1 F
(.\051 If another thread has the) 374.08 537.33 T
(semaphore,) 180 524.33 T
3 F
(MemThreadGrab\050\051) 235.93 524.33 T
1 F
( blocks until it can get the semaphore; it) 332.78 524.33 T
(then increments the semaphore, locks the block, and returns the address.) 180 511.33 T
3 F
(MemThreadGrabNB\050\051) 180 491.33 T
1 F
( is the same as) 292.96 491.33 T
3 F
(MemThreadGrab\050\051) 363.91 491.33 T
1 F
(, except that it) 460.76 491.33 T
(never blocks. If you call) 180 478.33 T
3 F
(MemThreadGrabNB\050\051) 291.49 478.33 T
1 F
( while another thread has) 404.45 478.33 T
(the semaphore, the routine will immediately return an error) 180 465.33 T
(.) 458.35 465.33 T
3 F
(MemThreadGrabNB\050\051) 180 452.33 T
1 F
( takes the handle of the block; it increments the) 292.96 452.33 T
(semaphore, locks the block, and returns the block\325) 180 439.33 T
(s address on the heap.) 410.4 439.33 T
3 F
(MemThreadRelease\050\051) 180 419.33 T
1 F
( releases a block grabbed by either) 290.74 419.33 T
3 F
(MemThreadGrab\050\051) 180 406.33 T
1 F
( or) 276.85 406.33 T
3 F
(MemThreadGrabNB\050\051) 291.85 406.33 T
1 F
(. It is passed the block\325) 404.81 406.33 T
(s) 509.28 406.33 T
(handle. It unlocks the block and decrements the block\325) 180 393.33 T
(s semaphore.) 430.4 393.33 T
(One common situation is that several threads may need to read a block but) 180 373.33 T
-0.76 (only once in a while will an application need to write to the block. In this case,) 180 360.33 P
(there is no synchronization problem in having several readers at once;) 180 347.33 T
(however) 180 334.33 T
(, if any thread is writing, no other thread should be reading or) 217.96 334.33 T
(writing. For this situation,) 180 321.33 T
1 9 Q
(GEOS) 305.95 321.33 T
1 10 Q
( provides this set of) 332.12 321.33 T
3 F
(MemLock) 424.72 321.33 T
1 F
( routines:) 475.46 321.33 T
3 F
(MemLockShared\050\051) 180 308.33 T
1 F
(,) 275.75 308.33 T
3 F
(MemUnlockShared\050\051) 281.31 308.33 T
1 F
(,) 388.54 308.33 T
3 F
(MemLockExcl\050\051) 394.1 308.33 T
1 F
(, and) 475.4 308.33 T
3 F
(MemUnlockExcl\050\051) 180 295.33 T
1 F
(.) 272.78 295.33 T
(These routines, like the others, maintain a queue of threads which have) 180 275.33 T
(requested thread access. The difference is that any number of readers can) 180 262.33 T
(have access at once. When a thread wants read access, it calls) 180 249.33 T
3 F
(MemLockShared\050\051) 180 236.33 T
1 F
(. If the queue is empty and the block is unlocked or) 275.75 236.33 T
-0.58 (locked for reading, the routine returns and the thread is given shared access;) 180 223.33 P
-0.22 (otherwise, the thread is blocked, and the request goes on the queue. When a) 180 210.33 P
(routine is \336nished reading the block, it should call) 180 197.33 T
3 F
(MemUnlockShared\050\051) 414.66 197.33 T
1 F
(.) 521.89 197.33 T
-0.05 (When a routine needs to write to a block, it should call) 180 177.33 P
3 F
-0.05 (MemLockExcl\050\051) 434.06 177.33 P
1 F
-0.05 (. If) 515.36 177.33 P
(nobody has locked the block \050and thus the queue is empty\051, the thread will) 180 164.33 T
-0.15 (immediately be given exclusive access; otherwise, the thread will block, and) 180 151.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "559" 17
%%Page: "560" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(560) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(the request will go on the queue. When the thread no longer needs write) 180 641.33 T
(access, it should call) 180 628.33 T
3 F
(MemUnlockExcl\050\051) 276.68 628.33 T
1 F
(.) 369.46 628.33 T
-0.57 (When all threads with access to a block have released their locks, the queued) 180 608.33 P
-0.04 (thread with the highest priority will be awakened and given the lock on the) 180 595.33 P
(block. If that thread had requested shared access, all other threads on the) 180 582.33 T
(queue that had requested shared access will also be awakened and given) 180 569.33 T
(locks.) 180 556.33 T
(A thread can change its lock from shared to exclusive or vice versa. If a) 180 536.33 T
(thread has an exclusive lock on a block, it can change the lock to shared by) 180 523.33 T
(calling) 180 510.33 T
3 F
(MemDowngradeExclLock\050\051) 213.71 510.33 T
1 F
(. This routine takes one argument,) 355.01 510.33 T
(namely the block\325) 180 497.33 T
(s global handle. It changes the lock to \322shared\323 and wakes) 260.39 497.33 T
-0.63 (up all sleeping threads which are waiting for shared access. For convenience,) 180 484.33 P
3 F
-0.76 (MemDowngradeExclLock\050\051) 180 471.33 P
1 F
-0.73 ( returns the address of the block; however) 321.3 471.33 P
-0.73 (, the) 509.13 471.33 P
(block is guaranteed not to move.) 180 458.33 T
(If a thread has shared access and wants exclusive access, it can call) 180 438.33 T
3 F
(MemUpgradeSharedLock\050\051) 180 425.33 T
1 F
(. If the thread has the only lock on the block,) 320.57 425.33 T
-0.66 (its lock will be changed to \322exclusive\323 \050even if there are writers on the queue\051.) 180 412.33 P
(If any other threads have the block locked, the routine will release the) 180 399.33 T
-0.43 (thread\325) 180 386.33 P
-0.43 (s lock and put the thread on the queue. When the thread comes to the) 212.41 386.33 P
-0.01 (head of the queue, the routine will wake the thread and give it an exclusive) 180 373.33 P
(lock. The routine returns the block\325) 180 360.33 T
(s address on the global heap. Note that) 342.05 360.33 T
(the block may be altered or moved during this call if the call blocked.) 180 347.33 T
(Once a thread has been given a shared lock, there is nothing to prevent it) 180 327.33 T
(from altering \050or even freeing\051 the block. The routines rely on good) 180 314.33 T
-0.07 (citizenship by the threads using them.Also, if a thread isn\325) 180 301.33 P
-0.07 (t careful, there is) 449.23 301.33 P
-0.84 (a great danger of deadlock. If \050for example\051 a thread requests exclusive access) 180 288.33 P
(to a block when it already has access, the thread will deadlock: it will block) 180 275.33 T
-0.49 (until the threads with access all release the block, but it can\325) 180 262.33 P
-0.49 (t release its own) 454.63 262.33 P
-0.19 (lock because it is blocked. If you may need to have multiple locks on a block,) 180 249.33 P
(use the) 180 236.33 T
3 F
(MemThread) 216.3 236.33 T
1 F
( routines, which check for these situations.) 279.26 236.33 T
(There are other sets of routines which can be used to access a block\325) 180 216.33 T
(s) 492.25 216.33 T
-0.18 (semaphore. As noted, a block should be accessed via just one set of routines.) 180 203.33 P
(These routines provide less protection against deadlock than the) 180 190.33 T
3 F
-0.64 (MemThread) 180 177.33 P
1 F
-0.62 ( routines do; however) 242.96 177.33 P
-0.62 (, they have a slightly faster response time.) 339.23 177.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "560" 18
%%Page: "561" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(561) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(A more primitive group of routines is) 180 641.33 T
3 F
(HandleP\050\051) 353.89 641.33 T
1 F
(,) 406.85 641.33 T
3 F
(HandleV\050\051) 412.41 641.33 T
1 F
(,) 465.37 641.33 T
3 F
-0.27 (MemPLock\050\051) 180 628.33 P
1 F
-0.26 (, and) 246.11 628.33 P
3 F
-0.27 (MemUnlockV\050\051) 271.34 628.33 P
1 F
-0.26 (. These routines function much like the) 348.93 628.33 P
3 F
-0.82 (MemThread) 180 615.33 P
1 F
-0.8 ( routines.) 242.96 615.33 P
3 F
-0.82 (HandleP\050\051) 288.04 615.33 P
1 F
-0.8 ( grabs the block\325) 341 615.33 P
-0.8 (s semaphore and returns;) 413.26 615.33 P
(it does not lock the block. This makes it very useful for working with \336xed) 180 602.33 T
(blocks \050which cannot be locked\051.) 180 589.33 T
3 F
(HandleV\050\051) 330.57 589.33 T
1 F
( releases the block\325) 383.53 589.33 T
(s semaphore) 470.03 589.33 T
-0.78 (and returns; it does not unlock the block. Note, however) 180 576.33 P
-0.78 (, that) 430.59 576.33 P
3 F
-0.81 (HandleP\050\051) 456.81 576.33 P
1 F
-0.78 ( will) 509.77 576.33 P
(block if) 180 563.33 T
4 F
(any) 216.12 563.33 T
1 F
( thread controls the semaphore, even the thread that called) 232.97 563.33 T
3 F
(HandleP\050\051) 180 550.33 T
1 F
(. If a thread calls) 232.96 550.33 T
3 F
(HandleP\050\051) 314.27 550.33 T
1 F
( while it controls the semaphore, it) 367.23 550.33 T
-0.46 (will block until the semaphore is released, but it can\325) 180 537.33 P
-0.46 (t release the semaphore) 419.66 537.33 P
(because it has blocked. Thus, the thread will deadlock, and no other thread) 180 524.33 T
-0.54 (will be able to get the semaphore. Therefore, a thread should use) 180 511.33 P
3 F
-0.56 (HandleP\050\051) 475.8 511.33 P
1 F
(only if it is very con\336dent that it will never try to double-set the semaphore.) 180 498.33 T
-0.37 (Usually) 180 478.33 P
-0.37 (, when a thread grabs a block\325) 215.01 478.33 P
-0.37 (s semaphore, it needs to have the block) 350.42 478.33 P
(locked on the heap. For this reason,) 180 465.33 T
1 9 Q
(GEOS) 347.43 465.33 T
1 10 Q
( provides the routines) 373.6 465.33 T
3 F
-0.48 (MemPLock\050\051) 180 452.33 P
1 F
-0.47 ( and) 246.11 452.33 P
3 F
-0.48 (MemUnlockV\050\051) 268.14 452.33 P
1 F
-0.47 (.) 345.73 452.33 P
3 F
-0.48 (MemPLock\050\051) 350.82 452.33 P
1 F
-0.47 ( simply calls) 416.93 452.33 P
3 F
-0.48 (HandleP\050\051) 475.73 452.33 P
1 F
(and then calls) 180 439.33 T
3 F
(MemLock\050\051) 247.79 439.33 T
1 F
(.) 306.31 439.33 T
3 F
(MemUnlockV\050\051) 311.87 439.33 T
1 F
(, correspondingly) 389.46 439.33 T
(, calls) 467.6 439.33 T
3 F
(MemUnlock\050\051) 180 426.33 T
1 F
( and then calls) 250 426.33 T
3 F
(HandleV\050\051) 320.57 426.33 T
1 F
(. These routines are completely) 373.53 426.33 T
(compatible with) 180 413.33 T
3 F
(HandleP\050\051) 256.87 413.33 T
1 F
( and) 309.83 413.33 T
3 F
(HandleV\050\051) 332.8 413.33 T
1 F
(; for example, a thread could) 385.76 413.33 T
-0.71 (grab and lock a block with) 180 400.33 P
3 F
-0.73 (MemPLock\050\051) 299.86 400.33 P
1 F
-0.71 (, then unlock it with) 365.97 400.33 P
3 F
-0.73 (MemUnlock\050\051) 458.93 400.33 P
1 F
(and release it with) 180 387.33 T
3 F
(HandleV\050\051) 269.28 387.33 T
1 F
(.) 322.24 387.33 T
3 F
(HandleP\050\051) 180 367.33 T
1 F
( and) 232.96 367.33 T
3 F
(HandleV\050\051) 255.93 367.33 T
1 F
( are general-purpose handle routines. They can) 308.89 367.33 T
(be called on any type of global handle. For example, if two threads need to) 180 354.33 T
(synchronize their access to a \336le, they can lock and unlock the \336le handle) 180 341.33 T
(with) 180 328.33 T
3 F
(HandleP\050\051) 203.71 328.33 T
1 F
( and) 256.67 328.33 T
3 F
(HandleV\050\051) 279.64 328.33 T
1 F
(. However) 332.6 328.33 T
(, they are most commonly used) 378.34 328.33 T
(with memory blocks.) 180 315.33 T
0 14 Q
(15.3.7) 123.08 273 T
0 18 Q
(Retrieving Block Information) 180 273 T
5 10 Q
(MemDeref\050\051, MemGetInfo\050\051, MemModifyFlags\050\051,) 180 249.33 T
(HandleModifyOwner\050\051, MemModifyOtherInfo\050\051) 180 236.33 T
1 9 Q
(GEOS) 180 216.33 T
1 10 Q
( offers several routines to retrieve and change information about a) 206.17 216.33 T
-0.09 (block. Each of these routines has a full entry in the Routine Reference Book.) 180 203.33 P
3 F
(MemDeref\050\051) 180 183.33 T
1 F
( is passed the handle of a block on the global heap; it returns) 241.85 183.33 T
-0.18 (the block\325) 180 170.33 P
-0.18 (s address on the global heap. As noted above, this routine is useful) 223.35 170.33 P
81 493.63 171 647.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Deadlock W) 81 594.45 T
(arning) 131.68 594.45 T
1 F
(These routines will) 81 578.45 T
-0.9 (deadlock if a thread is) 81 567.45 P
-0.92 (not very careful. Most) 81 556.45 P
-0.97 (of the time you should) 81 545.45 P
-0.61 (use the) 81 534.45 P
3 F
-0.63 (MemThread) 112.45 534.45 P
1 F
-0.56 (routines, which avoid) 81 523.45 P
(some deadlock) 81 512.45 T
(situations.) 81 501.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 623.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 623.33 A
0 0 0 1 0 0 0 K
81 603.21 121.5 643.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 611.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "561" 19
%%Page: "562" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(562) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(when you allocate a \336xed or locked block. If the block has been discarded, it) 180 641.33 T
(returns a null pointer) 180 628.33 T
(.) 279.63 628.33 T
3 F
(MemGetInfo\050\051) 180 608.33 T
1 F
( is a general-purpose block information routine. It is passed) 252.58 608.33 T
(two arguments: the handle of the block, and a member of the) 180 595.33 T
3 F
(MemGetInfoT) 180 582.33 T
(ype) 251.5 582.33 T
1 F
( enumerated type. The return value is always) 270.02 582.33 T
(word-length; however) 180 569.33 T
(, its signi\336cance depends on the) 279.44 569.33 T
3 F
(MemGetInfoT) 428.71 569.33 T
(ype) 500.21 569.33 T
1 F
(value passed:) 180 556.33 T
1 9 Q
(MGIT_SIZE) 180 536.33 T
1 10 Q
(Returns the size of the memory block \050in bytes\051.) 243 536.33 T
1 9 Q
(MGIT_FLAGS_AND_LOCK_COUNT) 180 517.33 T
1 10 Q
-0.5 (Upper byte is the number of locks on the block; lower eight bits) 243 505.33 P
(are the block\325) 243 493.33 T
(s) 304.31 493.33 T
3 F
(HeapFlags) 311.72 493.33 T
1 F
( record \050see page 551\051.) 366.9 493.33 T
1 9 Q
(MGIT_OWNER_OR_VM_FILE_HANDLE) 180 474.33 T
1 10 Q
(If the block is attached to a) 243 462.33 T
1 9 Q
(GEOS) 371.36 462.33 T
1 10 Q
( V) 397.53 462.33 T
(irtual Memory \336le,) 407.09 462.33 T
3 F
(MemGetInfo\050\051) 243 450.33 T
1 F
( returns the) 315.58 450.33 T
1 9 Q
(VM) 373.54 450.33 T
1 10 Q
( \336le handle. Otherwise, it) 388.53 450.33 T
(returns the) 243 438.33 T
3 F
(GeodeHandle) 298.18 438.33 T
1 F
( of the owning thread.) 368.36 438.33 T
1 9 Q
(MGIT_ADDRESS) 180 419.33 T
1 10 Q
-0.5 (Returns the block\325) 243 407.33 P
-0.5 (s segment address, if it is on the global heap;) 325.72 407.33 P
-0.84 (otherwise, it returns zero. If the block is resized or is not locked,) 243 395.33 P
(the address may change without warning. Note that the) 243 383.33 T
-0.4 (segment address is returned as a word, not as a pointer; this is) 243 371.33 P
(of limited utility in C.) 243 359.33 T
1 9 Q
(MGIT_OTHER_INFO) 180 340.33 T
1 10 Q
(Returns the) 243 328.33 T
4 F
(HM_otherInfo) 300.96 328.33 T
1 F
( word from the block\325) 365.75 328.33 T
(s handle table) 462.24 328.33 T
(entry) 243 316.33 T
(. The usage of this word varies depending on the block\325) 266.7 316.33 T
(s) 518.77 316.33 T
(nature; for example, semaphore routines use this word.) 243 304.33 T
1 9 Q
(MGIT_EXEC_THREAD) 180 285.33 T
1 10 Q
(This is useful for object blocks only) 243 273.33 T
(. Returns the handle of the) 403.2 273.33 T
(thread executing methods for objects in the block.) 243 261.33 T
3 F
-0.32 (MemModifyFlags\050\051) 180 242.33 P
1 F
-0.31 ( is used to change a block\325) 277.21 242.33 P
-0.31 (s) 394.05 242.33 P
3 F
-0.32 (HeapFlags) 401.15 242.33 P
1 F
-0.31 ( record. It takes) 456.33 242.33 P
-0.76 (three arguments: The handle of the block, the) 180 229.33 P
3 F
-0.79 (HeapFlags) 387.99 229.33 P
1 F
-0.76 ( to turn on, and the) 443.17 229.33 P
3 F
-0.11 (HeapFlags) 180 216.33 P
1 F
-0.1 ( to clear) 235.18 216.33 P
-0.1 (. It returns nothing. Not all) 271.27 216.33 P
3 F
-0.11 (HeapFlags) 400.11 216.33 P
1 F
-0.1 ( can be changed) 455.29 216.33 P
(after a block is created; only) 180 203.33 T
1 9 Q
(HF_SHARABLE, HF_DISCARDABLE,) 312.8 203.33 T
(HF_SW) 180 190.33 T
(AP) 211.67 190.33 T
(ABLE,) 223.51 190.33 T
1 10 Q
( and) 251.51 190.33 T
1 9 Q
(HF_LMEM) 274.48 190.33 T
1 10 Q
( can be so changed.) 321.97 190.33 T
3 F
(HandleModifyOwner\050\051) 180 170.33 T
1 F
( changes the geode owning a given block. It takes) 296.66 170.33 T
(two arguments, namely the handle of the block and the handle of the new) 180 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "562" 20
%%Page: "563" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Global Memory) 414.08 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(563) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(owner) 180 641.33 T
(. It returns nothing. If the block is not sharable, only the owner of a) 207.59 641.33 T
(block can change the block\325) 180 628.33 T
(s owner) 304.65 628.33 T
(.) 339.65 628.33 T
3 F
(MemModifyOtherInfo\050\051) 180 608.33 T
1 F
( changes the) 300.91 608.33 T
4 F
(HM_otherInfo) 361.47 608.33 T
1 F
( word of the block\325) 426.26 608.33 T
(s) 509.42 608.33 T
-0.34 (handle table entry) 180 595.33 P
-0.34 (. It takes two arguments: The handle of the block, and one) 263.4 595.33 P
(word of data to store in the) 180 582.33 T
4 F
(HM_otherInfo) 307.61 582.33 T
1 F
( \336eld. It returns nothing.) 372.4 582.33 T
0 14 Q
(15.3.8) 123.08 540 T
0 18 Q
(The Reference Count) 180 540 T
5 10 Q
(MemInitRefCount\050\051, MemIncRefCount\050\051, MemDecRefCount\050\051) 180 516.33 T
1 F
(Sometimes several different threads will need to look at the same block of) 180 496.33 T
(memory) 180 483.33 T
(. For example, a single thread might need to send the same) 216.48 483.33 T
(information to objects in several different threads. The simplest way to do) 180 470.33 T
-0.57 (that would be to write the information in a global memory block and pass the) 180 457.33 P
-0.53 (block\325) 180 444.33 P
-0.53 (s handle to the objects. However) 205.75 444.33 P
-0.53 (, it\325) 351.63 444.33 P
-0.53 (s a bad idea to allocate global blocks) 365.37 444.33 P
(for longer than necessary) 180 431.33 T
(, since this uses up handles. It therefore becomes) 295.92 431.33 T
(important to free these blocks when everyone\325) 180 418.33 T
(s done with them.) 391.31 418.33 T
1 9 Q
-0.42 (GEOS) 180 398.33 P
1 10 Q
-0.47 ( provides a simple mechanism for managing this. Every block can have) 206.17 398.33 P
-0.11 (a) 180 385.33 P
4 F
-0.11 (reference count) 188.23 385.33 P
1 F
-0.11 (. When a reference count for a block reaches zero, the block) 256.6 385.33 P
-0.4 (is automatically freed. That way) 180 372.33 P
-0.4 (, for example, if an object needed to send the) 327.16 372.33 P
(same information to \336ve objects, it could give the block a reference count of) 180 359.33 T
-0.71 (\336ve and send its handle to the objects. Each object, when it \336nished accessing) 180 346.33 P
(the data, would decrement the reference count. When all \336ve objects had) 180 333.33 T
(decremented the reference count, the block would be freed.) 180 320.33 T
(Y) 180 300.33 T
(ou must be careful about a few things while using the reference count) 185.93 300.33 T
-0.41 (mechanism. First of all, the reference count is kept in the) 180 287.33 P
4 9 Q
-0.37 (HM) 443.25 287.33 P
4 10 Q
-0.41 (_otherInfo) 459.25 287.33 P
1 F
-0.41 ( \336eld) 506.27 287.33 P
(of the block\325) 180 274.33 T
(s handle table entry) 234.64 274.33 T
(. For this reason, you must not use the) 326.14 274.33 T
(reference count routines if you will be using) 180 261.33 T
4 9 Q
(HM) 385 261.33 T
4 10 Q
(_otherInfo) 400.99 261.33 T
1 F
( for any other) 448.01 261.33 T
(purpose. In particular) 180 248.33 T
(, you may not use any of the data-access) 280.92 248.33 T
(synchronization routines described in section 15.3.6, since all of those) 180 235.33 T
-0.27 (routines store the semaphore in) 180 222.33 P
4 9 Q
-0.24 (HM) 328.47 222.33 P
4 10 Q
-0.27 (_otherInfo) 344.47 222.33 P
1 F
-0.27 (. Y) 391.49 222.33 P
-0.27 (ou should generally use the) 402.71 222.33 P
-0.14 (reference count only for blocks that will not be changed until they are freed,) 180 209.33 P
(so that data synchronization will not be an issue.) 180 196.33 T
(Second, once the reference count is decremented to zero, the block is) 180 176.33 T
4 F
(immediately) 180 163.33 T
1 F
( freed. Once a block is freed, its handle may be used for) 237.02 163.33 T
(something else. If you try to increment or decrement the reference count of) 180 150.33 T
81 175.47 171 306.45 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(W) 81 253.45 T
(arning) 89.16 253.45 T
1 F
(These routines use) 81 237.45 T
(the) 81 226.45 T
4 F
(HM_otherInfo) 97 226.45 T
1 F
(\336eld. Therefore, you) 81 215.45 T
-0.63 (cannot use them with) 81 204.45 P
-0.42 (any of the semaphore) 81 193.45 P
(routines.) 81 182.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 282.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 282.33 A
0 0 0 1 0 0 0 K
81 262.21 121.5 302.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 270.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "563" 21
%%Page: "564" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(564) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(the block, the results are unde\336ned. For this reason, you should make sure) 180 641.33 T
(that the reference count does not reach zero until all threads are done with) 180 628.33 T
(the block. One way to arrange for this is to have a single thread do all the) 180 615.33 T
(decrementing. For example, an object might set the reference count to \336ve,) 180 602.33 T
-0.71 (and send the handle to \336ve other objects. Each of these objects, when \336nished) 180 589.33 P
(with the block, would send a message back to the \336rst object, which would) 180 576.33 T
-0.35 (decrement the reference count. As an alternative, you could have each of the) 180 563.33 P
-0.41 (objects decrement the count itself when it was \336nished. In this case, the \336rst) 180 550.33 P
(object would have to assume that the block was freed as soon as it sent out) 180 537.33 T
(all of the messages, since it would have no way of knowing when the other) 180 524.33 T
(objects would be \336nished with the block.) 180 511.33 T
(Finally) 180 491.33 T
(, since the reference count is stored in) 212.05 491.33 T
4 9 Q
(HM) 389.45 491.33 T
4 10 Q
(_otherInfo) 405.44 491.33 T
1 F
(, it has a) 452.46 491.33 T
-0.2 (maximum value of) 180 478.33 P
-0.2 (. If you try to increment the reference count past) 305.8 478.33 P
(this value, the results are unde\336ned. This will not be a problem for most) 180 465.33 T
(applications.) 180 452.33 T
(T) 180 432.33 T
(o set up a reference count for a block, call) 185.75 432.33 T
3 F
(MemInitRefCount\050\051) 379.28 432.33 T
1 F
(. This) 481.12 432.33 T
(routine takes two arguments: the handle of a global memory block, and the) 180 419.33 T
-0.78 (reference count for that block. The reference count must be greater than zero.) 180 406.33 P
3 F
(MemInitRefCount\050\051) 180 393.33 T
1 F
( sets the block\325) 281.84 393.33 T
(s) 349.08 393.33 T
4 9 Q
(HM) 356.49 393.33 T
4 10 Q
(_otherInfo) 372.48 393.33 T
1 F
( \336eld to the speci\336ed) 419.5 393.33 T
(reference count.) 180 380.33 T
3 F
(MemInitRefCount\050\051) 256.65 380.33 T
1 F
( does not return anything.) 358.49 380.33 T
-0.12 (T) 180 360.33 P
-0.12 (o increment the reference count, call) 185.75 360.33 P
3 F
-0.13 (MemIncRefCount\050\051) 356.11 360.33 P
1 F
-0.12 (. This routine is) 455.55 360.33 P
(passed a single argument, namely the handle of the global memory block.) 180 347.33 T
(The routine simply increments) 180 334.33 T
4 9 Q
(HM) 325.19 334.33 T
4 10 Q
(_otherInfo) 341.18 334.33 T
1 F
(. It does not return anything.) 388.2 334.33 T
-0.55 (T) 180 314.33 P
-0.55 (o decrement the reference count, call) 185.75 314.33 P
3 F
-0.57 (MemDecRefCount\050\051) 355.04 314.33 P
1 F
-0.55 (. This routine is) 457.26 314.33 P
(passed the handle of a global memory block. It decrements the block\325) 180 301.33 T
(s) 496.53 301.33 T
4 9 Q
(HM) 180 288.33 T
4 10 Q
(_otherInfo) 195.99 288.33 T
1 F
( \336eld. If the \336eld reaches zero,) 243.01 288.33 T
3 F
(MemDecRefCount\050\051) 384.86 288.33 T
1 F
( will) 487.08 288.33 T
(immediately free the block. The routine does not return anything.) 180 275.33 T
0 14 Q
(15.4) 134.76 223 T
0 24 Q
(malloc\050\051) 180 223 T
5 10 Q
(malloc\050\051, calloc\050\051, realloc\050\051, free\050\051) 180 197.33 T
1 9 Q
(GEOS) 180 177.33 T
1 10 Q
( provides support for the Standard C memory allocation routines.) 206.17 177.33 T
-0.81 (However) 180 164.33 P
-0.81 (, support is limited by the nature of the 80x86 and the) 220.18 164.33 P
1 9 Q
-0.73 (GEOS) 463.3 164.33 P
1 10 Q
-0.81 ( memory) 489.47 164.33 P
(management system.) 180 151.33 T
268.12 474.34 305.8 488.6 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
6 9 Q
0 X
0 0 0 1 0 0 0 K
(2) 273.96 478.33 T
6 7 Q
(1) 278.91 481.1 T
(6) 282.41 481.1 T
6 9 Q
(1) 294.9 478.33 T
(\320) 288.16 478.33 T
7 F
(\050) 270.1 478.33 T
(\051) 299.82 478.33 T
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "564" 22
%%Page: "565" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(malloc\050\051) 504.32 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(565) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(15.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(A geode can request memory with) 180 641.33 T
3 F
(malloc\050\051) 339.27 641.33 T
1 F
( or) 381.5 641.33 T
3 F
(calloc\050\051) 396.5 641.33 T
1 F
(. When a geode does) 434.66 641.33 T
(this for the \336rst time, the memory manager will allocate a \336xed block and) 180 628.33 T
(return a pointer to within the \336xed block. \050This block is actually a special) 180 615.33 T
-0.15 (kind of LMem heap.\051 Because the memory is in a \336xed block, the geode does) 180 602.33 P
-0.34 (not need to access it with handles; it can use the pointer directly) 180 589.33 P
-0.34 (. If the block) 472 589.33 P
(\336lls up, the manager can allocate another \336xed block for these requests.) 180 576.33 T
-0.28 (However) 180 556.33 P
-0.28 (, there are some problems with this. The main problem is that \336xed) 220.18 556.33 P
(blocks degrade the memory manager) 180 543.33 T
(\325) 350.75 543.33 T
(s performance. The more a geode uses) 352.42 543.33 T
3 F
(malloc\050\051) 180 530.33 T
1 F
(, the more memory is tied up in \336xed blocks. And, as always,) 222.23 530.33 T
(contiguous memory is limited to 64K by the 80x86 segmented addressing) 180 517.33 T
(scheme.) 180 504.33 T
(Most of the time, geodes should use other types of memory allocation. For) 180 484.33 T
(allocating small chunks of data, applications should use) 180 471.33 T
3 F
(LMem) 440.79 471.33 T
1 F
( routines or) 473.19 471.33 T
(techniques built on top of them \050database items, chunk arrays, etc.\051; for) 180 458.33 T
-0.51 (larger chunks of memory) 180 445.33 P
-0.51 (, applications should use memory manager routines) 292.9 445.33 P
-0.23 (or HugeArrays. However) 180 432.33 P
-0.23 (, to help writers port C code to) 293.97 432.33 P
1 9 Q
-0.2 (GEOS) 434.75 432.33 P
1 10 Q
-0.23 (,) 460.92 432.33 P
3 F
-0.23 (malloc\050\051) 466.26 432.33 P
1 F
-0.23 ( and) 508.48 432.33 P
(its relatives are available.) 180 419.33 T
-0.55 (T) 180 399.33 P
-0.55 (o get a stretch of contiguous memory) 185.75 399.33 P
-0.55 (, use the routines) 350.95 399.33 P
3 F
-0.57 (malloc\050\051) 431.71 399.33 P
1 F
-0.55 ( or) 473.94 399.33 P
3 F
-0.57 (calloc\050\051) 487.83 399.33 P
1 F
-0.55 (.) 525.99 399.33 P
3 F
-0.69 (malloc\050\051) 180 386.33 P
1 F
-0.67 ( takes one argument, a size in bytes; it returns a void pointer to that) 222.23 386.33 P
(many bytes of \336xed memory) 180 373.33 T
(.) 308.53 373.33 T
3 F
(calloc\050\051) 314.09 373.33 T
1 F
( takes two arguments: a number of) 352.25 373.33 T
(structures, and the size of each such structure. It allocates enough memory) 180 360.33 T
(for that many structures and returns a void pointer to the memory) 180 347.33 T
(. Both) 486.86 347.33 T
3 F
(malloc\050\051) 180 334.33 T
1 F
( and) 222.23 334.33 T
3 F
(calloc\050\051) 245.2 334.33 T
1 F
( zero-initialize the memory when they allocate it.) 283.36 334.33 T
(If a routine wants to change the size of memory allocated with) 180 314.33 T
3 F
(malloc\050\051) 470.4 314.33 T
1 F
( or) 512.63 314.33 T
3 F
(calloc\050\051) 180 301.33 T
1 F
( it can use) 218.16 301.33 T
3 F
(realloc\050\051) 268.17 301.33 T
1 F
(.) 311.7 301.33 T
3 F
(realloc\050\051) 317.26 301.33 T
1 F
( takes two arguments: a pointer to a) 360.79 301.33 T
-0.58 (piece of memory allocated with) 180 288.33 P
3 F
-0.6 (malloc\050\051) 322.66 288.33 P
1 F
-0.58 ( or) 364.89 288.33 P
3 F
-0.6 (calloc\050\051) 378.73 288.33 P
1 F
-0.58 (, and a new size in bytes.) 416.89 288.33 P
(It returns a void pointer to the memory) 180 275.33 T
(, which may have been moved to) 360.56 275.33 T
-0.77 (satisfy the request. If it could not satisfy the request, it returns a null pointer) 180 262.33 P
-0.77 (,) 526.22 262.33 P
(and the original memory is untouched. Note that the pointer you pass) 180 249.33 T
3 F
(realloc\050\051) 180 236.33 T
4 F
(must) 226.31 236.33 T
1 F
( be the same pointer that was returned by) 249.27 236.33 T
3 F
(malloc/calloc) 446.34 236.33 T
1 F
(; if) 513.95 236.33 T
-0.2 (\050for example\051 you allocate 100 bytes and are returned 008Bh:30h, and try to) 180 223.33 P
(resize it by passing 008Bh:40h to) 180 210.33 T
3 F
(realloc\050\051) 335.78 210.33 T
1 F
(, inappropriate memory will be) 379.31 210.33 T
(affected, and the results are unde\336ned.) 180 197.33 T
(If you decrease the size of a memory section with) 180 177.33 T
3 F
(realloc\050\051) 408.71 177.33 T
1 F
(, the routine is) 452.24 177.33 T
-0.33 (guaranteed to succeed. If you increase the size, it may fail; if it does succeed,) 180 164.33 P
(the new memory will) 180 151.33 T
4 F
(not) 279.83 151.33 T
1 F
( be zero-initialized. Reallocating a block down to) 294.46 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "565" 23
%%Page: "566" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Memory Management) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(566) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(15.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.82 (zero memory is the same as freeing it. Y) 180 641.33 P
-0.82 (ou can pass a null pointer to) 357.71 641.33 P
3 F
-0.85 (realloc\050\051) 485.51 641.33 P
1 F
(along with the size; this makes) 180 628.33 T
3 F
(realloc\050\051) 325.96 628.33 T
1 F
( function like) 369.49 628.33 T
3 F
(malloc\050\051) 433.2 628.33 T
1 F
(.) 475.43 628.33 T
(When you are done with memory allocated by) 180 608.33 T
3 F
(malloc) 393.54 608.33 T
1 F
(-family routines, you) 427.99 608.33 T
(should call) 180 595.33 T
3 F
(free\050\051) 232.6 595.33 T
1 F
( to free the memory for other) 260.94 595.33 T
3 F
(malloc\050\051) 396.86 595.33 T
1 F
( calls. As with) 439.09 595.33 T
3 F
(realloc\050\051) 180 582.33 T
1 F
(, you must pass the same pointer that you were originally given.) 223.53 582.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "566" 24
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 24
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Courier
%%+ Times-Roman
%%+ Symbol
%%EOF
