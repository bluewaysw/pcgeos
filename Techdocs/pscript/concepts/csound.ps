%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 21 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /NewCenturySchlbk-Bold FMFONTDEFINE
5 0 /Courier-Oblique FMFONTDEFINE
6 0 /NewCenturySchlbk-Italic FMFONTDEFINE
7 0 /Times-Roman FMFONTDEFINE
8 0 /NewCenturySchlbk-BoldItalic FMFONTDEFINE
9 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "505" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Goals and Motives) 434.3 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(505) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 9 Q
0 X
(GEOS) 180 606.33 T
1 10 Q
( includes a powerful sound library) 206.17 606.33 T
(. The library allows users to play) 362.66 606.33 T
(individual notes, sequences of notes, and sampled sounds. It also provides) 180 593.33 T
(support for those sound devices which allow the sampling and playback of) 180 580.33 T
(digitized sounds.) 180 567.33 T
0 14 Q
(13.1) 134.76 515 T
0 24 Q
(Goals and Motives) 180 515 T
1 10 Q
-0.07 (The sound library provides multiple tiers of support for a variety of devices.) 180 489.33 P
-0.43 (Y) 180 476.33 P
-0.43 (ou may program multiple-voice compositions \050musical pieces which require) 185.93 476.33 P
(playing more than one note at a time\051, and the sound driver will determine) 180 463.33 T
(how to best play the sounds if the device does not have enough voices.) 180 450.33 T
-0.27 (The sound library also shows the advantage of a preemptive multithreading) 180 430.33 P
-0.37 (system like) 180 417.33 P
1 9 Q
-0.34 (GEOS) 234.46 417.33 P
1 10 Q
-0.37 (. The library sets up queues of sounds and arranges for the) 260.63 417.33 P
(kernel\325) 180 404.33 T
(s thread to call the sound driver functions at appropriate times. An) 211.3 404.33 T
-0.69 (application can thus arrange ten seconds of music then continue operation as) 180 391.33 P
(the music plays in the background.) 180 378.33 T
(The system provides a routine to play standard sounds. By using these, the) 180 358.33 T
-0.82 (programmer can keep his interface consistent with that of existing programs.) 180 345.33 P
(When the standard system sounds are inappropriate, the programmer can) 180 332.33 T
(use other routines to completely specify the sound\325) 180 319.33 T
(s pitch and duration.) 412.41 319.33 T
0 14 Q
(13.2) 134.76 267 T
0 24 Q
(Playing UI Sounds) 180 267 T
3 10 Q
(UserStandardSound\050\051) 180 241.33 T
1 F
-0.68 (When a program needs to create a) 180 221.33 P
1 9 Q
-0.61 (UI) 336.02 221.33 P
1 10 Q
-0.68 (-related sound, it should call the routine) 347.01 221.33 P
4 F
(UserStandardSound\050\051) 180 208.33 T
1 F
(. This routine plays a sound, silencing any other) 293.72 208.33 T
(sounds which may have been playing. The program may specify either a) 180 195.33 T
(system-standard sound, a custom sound, or a sequence of custom sounds.) 180 182.33 T
(Note that if the user has disabled) 180 162.33 T
1 9 Q
(UI) 337.44 162.33 T
1 10 Q
( sound \050via the Preference Manager) 348.44 162.33 T
-0.81 (application\051,) 180 149.33 P
4 F
-0.84 (UserStandardSound\050\051) 239.57 149.33 P
1 F
-0.81 ( will not play the sound. The sound will) 353.29 149.33 P
81 144 531 648 C
235.5 630 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 630 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "505" 1
%%Page: "506" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(506) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.76 (be played at a high priority\321the) 180 641.33 P
1 9 Q
-0.68 (UI) 329.19 641.33 P
1 10 Q
-0.76 ( sound will take over the speakers in spite) 340.18 641.33 P
(of any sound that some other program is generating.) 180 628.33 T
(T) 180 608.33 T
(o play one of the standard) 185.75 608.33 T
1 9 Q
(UI) 308.36 608.33 T
1 10 Q
( sounds, call) 319.36 608.33 T
4 F
(UserStandardSound\050\051) 379 608.33 T
1 F
( with a) 492.72 608.33 T
-0.76 (single argument\321a member of the) 180 595.33 P
4 F
-0.79 (StandardSoundT) 339.53 595.33 P
-0.79 (ype) 427.91 595.33 P
1 F
-0.76 ( enumerated type.) 446.43 595.33 P
4 F
(StandardSoundT) 180 582.33 T
(ype) 268.38 582.33 T
1 F
( has the following members:) 286.9 582.33 T
1 9 Q
(SST_ERROR) 180 562.33 T
1 10 Q
(The sound produced when an error box appears.) 243 562.33 T
1 9 Q
(SST_W) 180 543.33 T
(ARNING) 209.84 543.33 T
1 10 Q
(General-purpose warning tone.) 243 531.33 T
1 9 Q
(SST_NOTIFY) 180 512.33 T
1 10 Q
(General-purpose tone to notify the user of some occurrence.) 243 512.33 T
1 9 Q
(SST_NO_INPUT) 180 493.33 T
1 10 Q
(Sound produced when the user is making mouse-clicks or) 243 481.33 T
(keypresses that are not going anywhere\321the user is clicking) 243 469.33 T
(outside of a modal dialog box, etc.) 243 457.33 T
1 9 Q
(SST_KEY_CLICK) 180 438.33 T
1 10 Q
(Sound produced when the user types on a real or virtual) 243 426.33 T
(keyboard.) 243 414.33 T
1 9 Q
(SST_CUSTOM_SOUND) 180 395.33 T
(SST_CUSTOM_NOTE) 180 376.33 T
(SST_CUSTOM_BUFFER) 180 357.33 T
1 10 Q
-0.67 (These are not actually standard sound values, but in fact act as) 243 345.33 P
(signals that you wish to provide a custom sound buffer) 243 333.33 T
(.) 494.69 333.33 T
1 9 Q
(SST_CUSTOM_BUFFER) 243 321.33 T
1 10 Q
( means that you will provide a pointer) 349.18 321.33 T
(to a buffer containing the music data.) 243 309.33 T
1 9 Q
(SST_CUSTOM_SOUND) 419.32 309.33 T
1 10 Q
(signals that you are providing a handle to a pre-allocated) 243 297.33 T
(sampled sound.) 243 285.33 T
1 9 Q
(SST_CUSTOM_NOTE) 317.64 285.33 T
1 10 Q
( signals that you wish to) 411.83 285.33 T
(play a single note. T) 243 273.33 T
(o learn more about creating custom notes) 335.44 273.33 T
(and music buffers, see below) 243 261.33 T
(.) 374.13 261.33 T
0 14 Q
(13.3) 134.76 210 T
0 24 Q
(Representing T) 180 210 T
(ones) 352.92 210 T
1 10 Q
(T) 180 184.33 T
(ones are de\336ned by the following characteristics:) 185.75 184.33 T
2 F
(u) 180 164.33 T
1 F
-0.18 (Frequency \050i.e. pitch\051, expressed in terms of cycles/second \050Hertz or Hz\051.) 198 164.33 P
(The higher the frequency) 198 152.33 T
(, the higher the pitch.) 313.55 152.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "506" 2
%%Page: "507" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Representing Tones) 423.42 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(507) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(Duration, which may be measured in milliseconds, sixtieth of a second) 198 641.33 T
(ticks, or by means of a \322tempo.\323) 198 629.33 T
2 F
(u) 180 610.33 T
1 F
(V) 198 610.33 T
(olume, a relative measure of loudness.) 204.3 610.33 T
2 F
(u) 180 591.33 T
1 F
-0.11 (Instrument, which instructs sound cards which are capable of imitating) 198 591.33 P
(certain musical instruments to do so.) 198 579.33 T
(The sound library expects sounds to be speci\336ed in terms of cycles/second.) 180 560.33 T
-0.45 (However) 180 547.33 P
-0.45 (, constants have been de\336ned which associate three octaves of tones) 220.18 547.33 P
(with their values in Hz. As a benchmark, middle) 180 534.33 T
1 9 Q
(A) 407.44 534.33 T
1 10 Q
( is de\336ned as 880 Hz.) 413.94 534.33 T
(Doubling the frequency of a pitch is equivalent to raising it by one octave.) 180 521.33 T
(Since there are twelve equal half-steps in an octave, multiplying the) 180 508.33 T
(frequency of a tone by) 180 495.33 T
( is equivalent to raising the pitch by a single) 301.56 495.33 T
(half-step. The constants are de\336ned with the formats) 180 482.33 T
5 F
(octave) 216 466.33 T
3 F
(_) 252 466.33 T
5 F
(note) 258 466.33 T
(octave) 216 452.33 T
3 F
(_) 252 452.33 T
5 F
(note) 258 452.33 T
3 F
(_) 282 452.33 T
5 F
(accidental) 288 452.33 T
1 F
(where) 180 431.33 T
6 F
(octave) 211.11 431.33 T
1 F
( is \322) 239.44 431.33 T
1 9 Q
(LOW) 256.67 431.33 T
1 10 Q
(,\323 \322) 277.39 431.33 T
1 9 Q
(MIDDLE) 290.73 431.33 T
1 10 Q
(,\323 or \322) 329.4 431.33 T
1 9 Q
(HIGH) 354.96 431.33 T
1 10 Q
(\323;) 380.62 431.33 T
6 F
(note) 390.07 431.33 T
1 F
( is one of \322) 409.14 431.33 T
1 9 Q
(A) 456.37 431.33 T
1 10 Q
(\323 through \322) 462.86 431.33 T
1 9 Q
(G) 513.23 431.33 T
1 10 Q
(\323;) 520.24 431.33 T
-0.81 (and) 180 418.33 P
6 F
-0.81 (accidental) 199.38 418.33 P
1 F
-0.81 (, if present, is either \322) 246.58 418.33 P
1 9 Q
-0.73 (SH) 342.53 418.33 P
1 10 Q
-0.81 (\323 \050for sharp\051 or \322b\323 \050for \337at\051. The lowest) 355.7 418.33 P
-0.2 (constant de\336ned is) 180 405.33 P
1 9 Q
-0.18 (LOW_C) 268.84 405.33 P
1 10 Q
-0.2 (, approximated as 262 Hz; the highest is) 301.67 405.33 P
1 9 Q
-0.18 (HIGH_B) 488.98 405.33 P
1 10 Q
-0.2 (,) 525.64 405.33 P
(approximately 1,976 Hz.) 180 392.33 T
-0.05 (Y) 180 372.33 P
-0.05 (ou may use a frequency that is beyond the range of human hearing \050which) 185.93 372.33 P
(extends from about 20Hz-20,000Hz\051. Thus, keep in mind that if you can\325) 180 359.33 T
(t) 513.02 359.33 T
(hear a note, the problem may not be that you\325ve set the volume too low) 180 346.33 T
(.) 505.81 346.33 T
(Duration may be speci\336ed in a number of units, by means of the) 180 326.33 T
4 F
(SoundStreamDeltaT) 180 313.33 T
(imeT) 285.68 313.33 T
(ype) 311.45 313.33 T
1 F
( enumerated type.) 329.97 313.33 T
3 F
(#define SSDTT_MSEC 8) 216 297.33 T
(#define SSDTT_TICKS 10) 216 283.33 T
(#define SSDTT_TEMPO 12) 216 269.33 T
1 F
(Duration may be expressed in milliseconds, timer ticks \050each tick is one) 180 248.33 T
-0.5 (sixtieth of a second\051, or fractions of notes. Of course, there is no set length for) 180 235.33 P
(a note, but when you actually play the note, you will provide a) 180 222.33 T
6 F
(tempo) 470.06 222.33 T
1 F
( value) 497.65 222.33 T
-0.58 (which will be used to compute the actual sound length. This tempo is just the) 180 209.33 P
0 0 0 1 0 0 0 K
284.08 491.34 301.56 506.65 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(2) 295.37 495.33 T
7 7 Q
(1) 284.77 498.53 T
(2) 288.27 498.53 T
298.97 503.39 295.37 503.39 292.67 494.39 3 L
0.41 H
2 Z
N
292.67 494.39 290.87 496.96 289.98 495.67 3 L
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "507" 3
%%Page: "508" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(508) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(number of milliseconds to play a one-hundred-and-twenty-eighth note. A) 180 641.33 T
-0.04 (number of constants have been set up to aid you in computing note lengths:) 180 628.33 P
3 F
(#define WHOLE) 216 612.33 T
(128) 360 612.33 T
(#define HALF) 216 598.33 T
(64) 360 598.33 T
(#define QUARTER) 216 584.33 T
(32) 360 584.33 T
(#define EIGHTH) 216 570.33 T
(16) 360 570.33 T
(#define SIXTEENTH) 216 556.33 T
(8) 360 556.33 T
(#define THIRTYSECOND) 216 542.33 T
(4) 360 542.33 T
(#define SIXTYFOURTH) 216 528.33 T
(2) 360 528.33 T
(#define ONE_HUNDRED_TWENTY_EIGTH) 216 514.33 T
(1) 414 514.33 T
(#define DOUBLE_DOT_WHOLE \050WHOLE + HALF + QUARTER\051) 216 500.33 T
(#define DOUBLE_DOT_HALF \050HALF + QUARTER + EIGHTH\051) 216 486.33 T
(#define DOUBLE_DOT_QUARTER \134) 216 472.33 T
(\050QUARTER + EIGHTH + SIXTEENTH\051) 324 458.33 T
(#define DOUBLE_DOT_EIGHTH \134) 216 444.33 T
(\050EIGHTH + SIXTEENTH + THIRTYSECOND\051) 288 430.33 T
(#define DOUBLE_DOT_SIXTEENTH \134) 216 416.33 T
(\050SIXTEENTH + THIRTYSECOND + SIXTYFOURTH\051) 288 402.33 T
(#define DOTTED_WHOLE) 216 388.33 T
(\050WHOLE + HALF\051) 360 388.33 T
(#define DOTTED_HALF) 216 374.33 T
(\050HALF + QUARTER\051) 360 374.33 T
(#define DOTTED_QUARTER) 216 360.33 T
(\050QUARTER + EIGHTH\051) 360 360.33 T
(#define DOTTED_EIGHTH) 216 346.33 T
(\050EIGHTH + SIXTEENTH\051) 360 346.33 T
(#define DOTTED_SIXTEENTH \050SIXTEENTH + THIRTYSECOND\051) 216 332.33 T
(#define DOTTED_THIRTYSECOND \134) 216 318.33 T
(\050THIRTYSECOND + SIXTYFOURTH\051) 360 304.33 T
1 F
-0.81 (If you\325re not familiar with the terms \322double-dotted eighth note\323 and \322tempo,\323) 180 283.33 P
-0.74 (don\325) 180 270.33 P
-0.74 (t worry) 198.71 270.33 P
-0.74 (. Basically) 230.56 270.33 P
-0.74 (, tempo allows you specify your notes\325 durations in units) 276.5 270.33 P
(when de\336ning your sound buffer) 180 257.33 T
(, but delay specifying the length of those) 329.25 257.33 T
(units until playing time. Thus, you might specify that a note should be 16) 180 244.33 T
-0.17 (units long when composing your sound buffer) 180 231.33 P
-0.17 (. Y) 388.07 231.33 P
-0.17 (ou could then play that note) 399.39 231.33 P
-0.63 (with a tempo of 100 milliseconds and the note would sound for 1.600 seconds.) 180 218.33 P
-0.7 (Y) 180 205.33 P
-0.7 (ou might play the sound again later with tempo 50, and that note would last) 185.93 205.33 P
(only 0.800 seconds. Y) 180 192.33 T
(ou would not have to do anything to the musical) 277.25 192.33 T
(composition itself to change this time-scale.) 180 179.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "508" 4
%%Page: "509" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Representing Tones) 423.42 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(509) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(V) 180 641.33 T
(olume is a relative value, depending on the strength of the machine\325) 186.3 641.33 T
(s) 499.67 641.33 T
(speakers. Y) 180 628.33 T
(ou may specify the volume with a word-length value. The) 232.42 628.33 T
(following constants have been set up to aid you in specifying a volume:) 180 615.33 T
3 F
(#define DYNAMIC_FFFF) 216 599.33 T
(0xffff /* very loud */) 360 599.33 T
(#define DYNAMIC_FFF) 216 585.33 T
(0xdfff /* fortississimo */) 360 585.33 T
(#define DYNAMIC_FF) 216 571.33 T
(0xbfff /* fortissimo */) 360 571.33 T
(#define DYNAMIC_F) 216 557.33 T
(0x9fff /* forte */) 360 557.33 T
(#define DYNAMIC_MF) 216 543.33 T
(0x8fff /* mezzo forte */) 360 543.33 T
(#define DYNAMIC_MP) 216 529.33 T
(0x6fff /* mezzo piano */) 360 529.33 T
(#define DYNAMIC_P) 216 515.33 T
(0x5fff /* piano */) 360 515.33 T
(#define DYNAMIC_PP) 216 501.33 T
(0x3fff /* pianissimo */) 360 501.33 T
(#define DYNAMIC_PPP) 216 487.33 T
(0x1fff /* pianississimo */) 360 487.33 T
(#define DYNAMIC_PPPP) 216 473.33 T
(0x01ff /* is it playing? */) 360 473.33 T
1 F
(By way of comparison, a typical alert beep plays with) 180 452.33 T
1 9 Q
(DYNAMIC_FFF) 428.75 452.33 T
1 10 Q
(\050sometimes called \322fortissimo,\323 or even \322fortississimo\323\051 volume.) 180 439.33 T
-0.77 (Some sound devices emulate musical instruments. Y) 180 419.33 P
-0.77 (ou may ask that notes be) 417.26 419.33 P
(played using one of these instruments or even de\336ne your own instrument.) 180 406.33 T
(Y) 180 393.33 T
(ou will specify what sort of instrument you wish to use by means of a) 185.93 393.33 T
-0.61 (segment:offset pointer) 180 380.33 P
-0.61 (. If the segment is non-null, the pointer should point to) 281.61 380.33 P
-0.46 (the instrument\325) 180 367.33 P
-0.46 (s data \050for information about setting up this data, see section) 251.21 367.33 P
(13.10.3 on page 523\051; if the segment is) 180 354.33 T
1 9 Q
(NULL) 359.32 354.33 T
1 10 Q
(, then the \322offset\323 will be) 386 354.33 T
(interpreted as a standard instrument value. The standard instrument) 180 341.33 T
(\322patches\323 are listed in sound.h; they have names like) 180 328.33 T
1 9 Q
(IP_ACOUSTIC_GRAND_PIANO) 180 315.33 T
1 10 Q
( and) 317.17 315.33 T
1 9 Q
(IP_ELECTRIC_SNARE) 340.14 315.33 T
1 10 Q
(.) 439.46 315.33 T
-0.01 (Note that many simulated percussion instruments have been set up so that) 180 295.33 P
(they sound most realistic when playing notes of a particular frequency) 180 282.33 T
(. If) 504.28 282.33 T
(there is a frequency constant with a name derived from the name of the) 180 269.33 T
(instrument, you should probably play notes of that frequency) 180 256.33 T
(. For example,) 461.32 256.33 T
-0.56 (to simulate an \322electric snare,\323 you would use) 180 243.33 P
1 9 Q
-0.5 (IP_ELECTRIC_SNARE) 388.52 243.33 P
1 10 Q
-0.56 ( to play a) 487.84 243.33 P
(note of frequency) 180 230.33 T
1 9 Q
(FR_ELECTRIC_SNARE) 262.03 230.33 T
1 10 Q
(.) 364.19 230.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "509" 5
%%Page: "510" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(510) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(13.4) 134.76 632 T
0 24 Q
(Single Notes) 180 632 T
3 10 Q
(SoundAllocMusicNote\050\051, SoundPlayMusicNote\050\051,) 180 606.33 T
(SoundStopMusicNote\050\051, SoundReallocMusicNote\050\051,) 180 593.33 T
(SoundFreeMusicNote\050\051) 180 580.33 T
1 F
-0.67 (The simplest way to play a note is by using) 180 560.33 P
4 F
-0.69 (UserStandardSound\050\051) 375.02 560.33 P
1 F
-0.67 ( with the) 488.74 560.33 P
1 9 Q
-0.34 (SST_CUSTOM_NOTE) 180 547.33 P
1 10 Q
-0.38 ( sound type. In this mode, the routine takes a frequency) 274.18 547.33 P
-0.1 (and a duration in ticks. The sound will be played immediately) 180 534.33 P
-0.1 (, played using) 464.25 534.33 P
(the instrument patch) 180 521.33 T
1 9 Q
(IP_REED_ORGAN) 281.3 521.33 T
1 10 Q
( if the sound device supports) 360.8 521.33 T
(simulated instruments. The note will play with medium loudness.) 180 508.33 T
(T) 180 488.33 T
(o play a note at a lower priority \050so it won\325) 185.75 488.33 T
(t neccessarily interrupt other) 380.24 488.33 T
-0.05 (sounds\051, or with a different loudness, or as if by an instrument other than a) 180 475.33 P
(reed organ, you will create and play a custom note.) 180 462.33 T
(The task of playing a custom note breaks down as follows:) 180 442.33 T
4 F
(1) 180 422.33 T
1 F
(Allocate the note with) 198 422.33 T
4 F
(SoundAllocMusicNote\050\051) 302.46 422.33 T
1 F
(.) 425.05 422.33 T
4 F
(2) 180 403.33 T
1 F
(Play it with) 198 403.33 T
4 F
(SoundPlayMusicNote\050\051) 255.06 403.33 T
1 F
( or) 374.68 403.33 T
4 F
(UserStandardSound\050\051) 389.68 403.33 T
1 F
(.) 503.4 403.33 T
4 F
(3) 180 384.33 T
1 F
(Free it with) 198 384.33 T
4 F
(SoundStopMusicNote\050\051) 255.42 384.33 T
1 F
( and) 375.42 384.33 T
4 F
(SoundFreeMusicNote\050\051) 398.39 384.33 T
1 F
(.) 518.57 384.33 T
(First, you must set up the data structure containing the note\325) 180 365.33 T
(s data.) 462.99 365.33 T
4 F
(SoundAllocMusicNote\050\051) 180 352.33 T
1 F
( takes a frequency) 302.59 352.33 T
(, a duration, a volume, and an) 385.75 352.33 T
(instrument and returns the handle to a data structure which the sound) 180 339.33 T
(library will understand. See Code Display) 180 326.33 T
(13-) 376.33 326.33 T
(1 for an example.) 390.78 326.33 T
81 293.98 531 306 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 293.98 531 306 R
7 X
0 0 0 1 0 0 0 K
V
76.5 301.23 617.5 304.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 287.31 T
(13-) 147.13 287.31 T
(1 Allocating Single Music Notes) 161.58 287.31 T
3 9 Q
(/* BigBlatt is a Cb \050C flat\051 Half-note, which will sound as if played by a trumpet.) 81 272.98 T
( *) 81 261.98 T
(This means a tone of 494Hz with duration \050128 * playing tempo\051. */) 125 261.98 T
(SoundErr = SoundAllocMusicNote \050) 81 250.98 T
(IP_TRUMPET, 0,) 256.5 250.98 T
(/* Play as if with a trumpet */) 344 250.98 T
(MIDDLE_C_b,) 256.5 239.98 T
(/* C flat, 494 Hz. */) 344 239.98 T
(DYNAMIC_FFF,) 256.5 228.98 T
(/* Play it rather loudly */) 344 228.98 T
(SSDTT_TEMPO,) 256.5 217.98 T
(/* Length based on 128th notes */) 344 217.98 T
(WHOLE,) 256.5 206.98 T
(/* Duration = 128/128 notes */) 344 206.98 T
(&BigBlatt\051;) 256.5 195.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "510" 6
%%Page: "511" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Single Notes) 473.2 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(511) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 9 Q
0 X
(/* SubliminalTone is an A note lasting 0.3 sec which will sound as if it was being) 81 642 T
( *) 81 631 T
(played very quietly on an electric piano. It will play at 880Hz. */) 125 631 T
(SoundAllocMusicNote\050) 81 620 T
(IP_ELECTRIC_PIANO_1, 0, /* As if on piano */) 256.5 620 T
(MIDDLE_A,) 256.5 609 T
(/* Middle A, 880 Hz. */) 344 609 T
(DYNAMIC_PP,) 256.5 598 T
(/* Play it rather quietly. */) 344 598 T
(SSDTT_MSEC,) 256.5 587 T
(/* Length based on milliseconds */) 344 587 T
(300,) 256.5 576 T
(/* Duration = 0.300 seconds */) 344 576 T
(&SubliminalTone\051;) 256.5 565 T
81 540.98 531 553 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 540.98 531 553 R
7 X
0 0 0 1 0 0 0 K
V
76.5 548.23 617.5 551.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.77 (There are two ways to play a note. The \336rst is to call) 180 523.31 P
4 F
-0.79 (UserStandardSound\050\051) 415.27 523.31 P
1 F
-0.4 (with the) 180 510.31 P
1 9 Q
-0.36 (SST_CUSTOM_SOUNDS) 220.69 510.31 P
1 10 Q
-0.4 ( sound type, passing the handle returned by) 328.05 510.31 P
4 F
(SoundAllocMusicNote\050\051) 180 497.31 T
1 F
(. The other is to call) 302.59 497.31 T
4 F
( SoundPlayMusicNote\050\051) 394.46 497.31 T
1 F
(,) 516.95 497.31 T
-0.49 (supplying the proper tempo and priority level.) 180 484.31 P
4 F
-0.5 (UserStandardSound\050\051) 392.33 484.31 P
1 F
-0.49 ( uses) 506.05 484.31 P
(a tempo of 8 millisecond per one-hundred-and-twenty-eighth note; this is) 180 471.31 T
(somewhat fast; tempo-based notes are not normally used with) 180 458.31 T
4 F
(UserStandardSound\050\051) 180 445.31 T
1 F
(.) 293.72 445.31 T
-0.64 (When playing a note or sound buffer) 180 425.31 P
-0.64 (, you must provide a sound priority level.) 343.91 425.31 P
(Sounds may interrupt one another) 180 412.31 T
(, so if you ask to play a sound more) 339.08 412.31 T
(important than that which is presently playing, your sound will take) 180 399.31 T
-0.75 (precedence and will play immediately) 180 386.31 P
-0.75 (. The following sound priority levels are) 350.15 386.31 P
(available:) 180 373.31 T
3 F
(SP_SYSTEM_LEVEL) 216 357.31 T
(SP_IMMEDIATE) 396 357.31 T
(SP_ALARM) 216 343.31 T
(SP_THEME) 396 343.31 T
(SP_STANDARD) 216 329.31 T
(SP_GAME) 216 315.31 T
(SP_BACKGROUND) 216 301.31 T
1 F
-0.41 (The lower the priority\325) 180 280.31 P
-0.41 (s numerical value, the more important the sound. The) 282.1 280.31 P
1 9 Q
(SP_SYSTEM_LEVEL_IMMEDIA) 180 267.31 T
(TE) 319.17 267.31 T
1 10 Q
( constant is the most important of those) 331.67 267.31 T
(listed above and has the lowest numerical value.) 180 254.31 T
-0.68 (The) 180 234.31 P
1 9 Q
-0.61 (SP_IMMEDIA) 199.88 234.31 P
-0.61 (TE) 259.88 234.31 P
1 10 Q
-0.68 ( and) 272.38 234.31 P
1 9 Q
-0.61 (SP_THEME) 293.99 234.31 P
1 10 Q
-0.68 ( values are a bit unusual in that they are) 345.15 234.31 P
-0.21 (meant to be combined with the other priorities, as modi\336ers of base priority) 180 221.31 P
-0.21 (.) 525.65 221.31 P
(Thus a sound whose priority was \050) 180 208.31 T
1 9 Q
(SP_ST) 338.35 208.31 T
(ANDARD) 365.7 208.31 T
1 10 Q
( +) 406.53 208.31 T
1 9 Q
(SP_IMMEDIA) 418.15 208.31 T
(TE) 478.15 208.31 T
1 10 Q
(\051 would) 490.65 208.31 T
-0.27 (edge out a sound which was just) 180 195.31 P
1 9 Q
-0.24 (SP_ST) 329.98 195.31 P
-0.24 (ANDARD) 357.33 195.31 P
1 10 Q
-0.27 (. A sound which had priority) 398.17 195.31 P
(\050) 180 182.31 T
1 9 Q
(SP_ST) 183.33 182.31 T
(ANDARD) 210.68 182.31 T
1 10 Q
( +) 251.51 182.31 T
1 9 Q
(SP_THEME) 263.13 182.31 T
1 10 Q
(\051 would be edged out by the) 314.3 182.31 T
1 9 Q
-0.14 (SP_ST) 180 169.31 P
-0.14 (ANDARD_SOUND) 207.35 169.31 P
1 10 Q
-0.16 (. And all of these sounds would take precedence over) 287.03 169.31 P
(a sound whose base priority was) 180 156.31 T
1 9 Q
(SP_GAME) 332.25 156.31 T
1 10 Q
( or) 376.92 156.31 T
1 9 Q
(SP_BACKGROUND) 391.92 156.31 T
1 10 Q
(.) 476.76 156.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "511" 7
%%Page: "512" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(512) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(13-) 147.13 629.31 T
(2 Playing Single Music Notes) 161.58 629.31 T
3 9 Q
(/* UserStandardSound\050\051 with note:) 81 614.98 T
( * We will play a quick high E note for 0.020 seconds. */) 81 603.98 T
(UserStandardSound\050SST_CUSTOM_NOTE, HIGH_E, 20\051;) 81 592.98 T
(/* UserStandardSound\050\051 with allocated note:) 81 574.98 T
( * We will play the Subliminal tone immediately. */) 81 563.98 T
(UserStandardSound\050SST_CUSTOM_SOUND, SubliminalTone, 0\051;) 81 552.98 T
(/* SoundPlayNote\050\051:) 81 534.98 T
( * Total playing time of BigBlatt will be \050WHOLE*62\051=\050128*8\051=1024 msec = 1+ sec. */) 81 523.98 T
(SoundPlayMusicNote\050BigBlatt, SP_STANDARD + SP_IMMEDIATE, 8, EOSF_UNLOCK\051;) 81 512.98 T
81 488.95 531 500.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 488.95 531 500.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 496.2 617.5 499.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(Y) 180 471.29 T
(ou may stop a note from playing at any time by invoking) 185.93 471.29 T
4 F
(SoundStopMusicNote\050\051) 180 458.29 T
1 F
(.) 300 458.29 T
-0.01 (T) 180 438.29 P
-0.01 (o free the note\325) 185.75 438.29 P
-0.01 (s data structure, call) 253.49 438.29 P
4 F
-0.01 (SoundFreeMusicNote\050\051) 351.96 438.29 P
1 F
-0.01 (. Y) 472.14 438.29 P
-0.01 (ou should) 483.62 438.29 P
(make sure that the note has stopped playing \336rst \050call) 180 425.29 T
4 F
(SoundStopMusicNote\050\051) 180 412.29 T
1 F
( if you are not sure\051.) 300 412.29 T
(T) 180 392.29 T
(o change any of the characteristics of a note, call) 185.75 392.29 T
4 F
(SoundReallocMusicNote\050\051) 180 379.29 T
1 F
(. Y) 315 379.29 T
(ou should make sure that the note has) 326.49 379.29 T
(stopped playing \336rst \050call) 180 366.29 T
4 F
(SoundStopMusicNote\050\051) 300.01 366.29 T
1 F
( if you are not sure\051.) 420.01 366.29 T
81 333.93 531 345.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 333.93 531 345.95 R
7 X
0 0 0 1 0 0 0 K
V
76.5 341.18 617.5 344.68 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 327.26 T
(13-) 147.13 327.26 T
(3 Stopping and Freeing a Note) 161.58 327.26 T
3 9 Q
(/* Stop the SubliminalTone if we\325re playing it, then change the stored note */) 81 312.93 T
(SoundStopMusicNote\050SubliminalTone\051;) 81 301.93 T
(SoundReallocMusicNote\050SubliminalTone, LOW_C, DYNAMIC_PPP,) 81 290.93 T
(SSDTT_MSEC, 500, IP_TINKLE_BELL, 0\051;) 301 279.93 T
(/* Stop the BigBlatt if we\325re playing it, then discard it */) 81 261.93 T
(SoundStopMusicNote\050BigBlatt\051;) 81 250.93 T
(SoundFreeMusicNote\050BigBlatt\051;) 81 239.93 T
81 215.9 531 227.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 215.9 531 227.93 R
7 X
0 0 0 1 0 0 0 K
V
76.5 223.16 617.5 226.66 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "512" 8
%%Page: "513" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Declaring Music Buffers) 397.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(513) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(13.5) 134.76 632 T
0 24 Q
(Declaring Music Buffers) 180 632 T
1 10 Q
(Y) 180 606.33 T
(ou may set up a buffer of notes to be played. This buffer may include) 185.93 606.33 T
(information for several voices. If you are familiar with constructing) 180 593.33 T
1 9 Q
(MIDI) 493.34 593.33 T
1 10 Q
-0.67 (streams, you will \336nd that setting up) 180 580.33 P
1 9 Q
-0.61 (GEOS) 349.59 580.33 P
1 10 Q
-0.67 ( music buffers is a similar process.) 375.76 580.33 P
-0.69 (Sound buffers are made up of events and timer ticks. The various event types) 180 560.33 P
(are de\336ned in the enumerated type) 180 547.33 T
4 F
(SoundStreamEvent) 345.38 547.33 T
1 F
(\321each event is) 446.68 547.33 T
-0.36 (signalled by one of the values listed below and includes one or more words of) 180 534.33 P
(data describing the event speci\336cs:) 180 521.33 T
1 9 Q
(SSE_VOICE_ON) 135 501.33 T
1 10 Q
(Start a note. The next words of data contain the note\325) 198 489.33 T
(s characteristics:) 443.97 489.33 T
8 F
(voice) 180 470.33 T
1 F
(The voice on which the note should play) 243 470.33 T
(. If your composition) 426.35 470.33 T
-0.23 (has notes playing on more voices at a time than the device can) 243 458.33 P
(handle, then some will not be played.) 243 446.33 T
8 F
(frequency) 180 427.33 T
1 F
(The note\325) 243 427.33 T
(s frequency \050e.g.) 285.23 427.33 T
1 9 Q
(MIDDLE_C) 362.82 427.33 T
1 10 Q
(\051.) 412.48 427.33 T
8 F
(volume) 180 408.33 T
1 F
(The note\325) 243 408.33 T
(s loudness \050e.g.) 285.23 408.33 T
1 9 Q
(DYNAMIC_MF) 357.83 408.33 T
1 10 Q
(\051.) 422.66 408.33 T
1 9 Q
(SSE_VOICE_OFF) 135 389.33 T
1 10 Q
(End a note. This does not necessarily mean that the voice will stop) 198 377.33 T
(making sound\321this corresponds to releasing the key of a piano, and) 198 365.33 T
(some sound may linger on. Ending the note also signi\336es that the voice) 198 353.33 T
(is \322free\323; if another sound on the queue wants to appropriate that voice,) 198 341.33 T
(then it can. There is one word of data:) 198 329.33 T
8 F
(voice) 180 310.33 T
1 F
(The voice which should stop playing.) 243 310.33 T
1 9 Q
(SSE_CHANGE) 135 291.33 T
1 10 Q
(Change a voice\325) 198 279.33 T
(s instrument. There are three words of data:) 269.12 279.33 T
8 F
(voice) 180 260.33 T
1 F
(The voice to be changed.) 243 260.33 T
8 F
(pointer) 180 241.33 T
1 F
(Pointer \050two words\051 to new instrument structure to use \050or) 243 241.33 T
(standard) 243 229.33 T
4 F
(InstrumentPatch) 287.45 229.33 T
1 F
( value such as) 376.89 229.33 T
1 9 Q
(IP_CLARINET) 444.68 229.33 T
1 10 Q
(followed by the) 243 217.33 T
1 9 Q
(IP_ST) 315.42 217.33 T
(ANDARD_T) 340.76 217.33 T
(ABLE) 391.61 217.33 T
1 10 Q
( word constant to signal) 417.1 217.33 T
(that a standard instrument is being used\051.) 243 205.33 T
1 9 Q
(SSE_GENERAL) 135 186.33 T
1 10 Q
(A miscellaneous event \050some possible values are discussed below\051. The) 198 174.33 T
(number and meaning of data words will depend on the event.) 198 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "513" 9
%%Page: "514" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(514) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.5) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 180 641.33 T
(ime is expressed as a unit and a duration. The unit is one of the) 186.42 641.33 T
4 F
-0.09 (SoundStreamDeltaT) 180 628.33 P
-0.09 (imeT) 285.68 628.33 P
-0.09 (ype) 311.45 628.33 P
1 F
-0.08 ( values; the duration speci\336es how many of) 329.97 628.33 P
(these units should be allowed to pass.) 180 615.33 T
81 582.98 531 595 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 582.98 531 595 R
7 X
0 0 0 1 0 0 0 K
V
76.5 590.23 617.5 593.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 576.31 T
(13-) 147.13 576.31 T
(4 Simple Sound Buffer Example) 161.58 576.31 T
3 9 Q
(#define MELODY 0) 81 561.98 T
(#define PERC 1) 81 550.98 T
(static const word themeSongBuf[] = {) 81 539.98 T
(SSE_CHANGE,) 125 528.98 T
(MELODY, IP_FLUTE,) 212.5 528.98 T
(/* We want voice 0 to) 388 528.98 T
( * play like a flute. */) 388 517.98 T
(SSE_CHANGE,) 125 499.98 T
(PERC, IP_ACOUSTIC_SNARE,) 212.5 499.98 T
(/* voice 1 should play) 388 499.98 T
( * like a drum. */) 388 488.98 T
(SSE_GENERAL,) 125 470.98 T
(GE_SET_PRIORITY, SP_GAME,) 212.5 470.98 T
(/*Set priority of sound */) 388 470.98 T
(SSE_VOICE_ON,) 125 452.98 T
(PERC, FR_ACOUSTIC_SNARE, DYNAMIC_F,) 212.5 452.98 T
(/* Hit the drum. We are) 401.5 452.98 T
( * hitting it hard \050forte\051) 388 441.98 T
( * with a C note. */) 388 430.98 T
(SSDTT_TEMPO,) 125 412.98 T
(QUARTER,) 212.5 412.98 T
(/*A quarter note passes\311*/) 388 412.98 T
(SSE_VOICE_OFF) 125 394.98 T
(,) 195.2 394.98 T
(PERC,) 212.5 394.98 T
(/* Pick up drumstick\311 */) 388 394.98 T
(SSE_VOICE_ON,) 125 376.98 T
(PERC, FR_ACOUSTIC_SNARE, DYNAMIC_F,) 212.5 376.98 T
(/* hit the drum */) 401.5 376.98 T
(SSDTT_TEMPO,) 125 358.98 T
(EIGHTH,) 212.5 358.98 T
(SSE_VOICE_OFF) 125 347.98 T
(,) 195.2 347.98 T
(PERC,) 212.5 347.98 T
(/* Pick up drumstick */) 388 347.98 T
(SSDTT_TEMPO,) 125 329.98 T
(EIGHTH,) 212.5 329.98 T
(/* For one eighth-note, no) 388 329.98 T
( * instruments playing */) 388 318.98 T
(SSE_VOICE_ON,) 125 300.98 T
(PERC, FR_ACOUSTIC_SNARE, DYNAMIC_F,) 212.5 300.98 T
(/* Tap the drum\311 */) 401.5 300.98 T
(SSE_VOICE_ON,) 125 282.98 T
(MELODY, LOW_C, DYNAMIC_MP,) 212.5 282.98 T
(/* \311and start the flute */) 388 282.98 T
(SSDTT_TEMPO,) 125 264.98 T
(QUARTER,) 212.5 264.98 T
(/* Advance a quarter-note) 388 264.98 T
( * of time. */) 388 253.98 T
(SSE_VOICE_OFF) 125 235.98 T
(,) 195.2 235.98 T
(PERC,) 212.5 235.98 T
(/* Pick up the drum stick) 388 235.98 T
( * \050but we\325ll continue) 388 224.98 T
( * the flute\051 */) 388 213.98 T
(SSE_CHANGE,) 125 195.98 T
(PERC, IP_COWBELL,) 212.5 195.98 T
(/* Switch instruments */) 388 195.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "514" 10
%%Page: "515" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Declaring Music Buffers) 397.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(515) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.5) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 9 Q
0 X
(SSE_VOICE_ON,) 125 642 T
(PERC, FR_COWBELL, DYNAMIC_F,) 212.5 642 T
(/* Hit bell */) 388 642 T
(SSDTT_TEMPO,) 125 631 T
(EIGHTH,) 212.5 631 T
(/* Advance eighth note */) 344 631 T
(SSE_VOICE_OFF) 125 620 T
(,) 195.2 620 T
(PERC,) 212.5 620 T
(/* Stop hitting bell */) 344 620 T
(SSDTT_TEMPO,) 125 609 T
(EIGHTH,) 212.5 609 T
(/* Advance one more eighth\311 */) 344 609 T
(SSE_VOICE_OFF,) 125 591 T
(MELODY,) 212.5 591 T
(/* \311and stop blowing on flute */) 344 591 T
(SSDTT_TICKS,) 125 573 T
(120,) 212.5 573 T
(/* Let sound die out) 344 573 T
( * for two seconds */) 344 562 T
(SSE_GENERAL,) 125 544 T
(GE_END_OF_SONG};) 212.5 544 T
(/* We\324re done */) 344 544 T
81 519.98 531 532 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 519.98 531 532 R
7 X
0 0 0 1 0 0 0 K
V
76.5 527.23 617.5 530.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(The song buffer must end with a) 180 407.33 T
1 9 Q
(GE_END_OF_SONG) 332.98 407.33 T
1 10 Q
( event.) 420.83 407.33 T
(The following general events may be incorporated into any sound buffer:) 180 387.33 T
1 9 Q
(GE_NO_EVENT) 135 367.33 T
1 10 Q
(No event at this time. This event may be sandwiched between other) 198 355.33 T
(events when a long duration is necessary) 198 343.33 T
(.) 386.72 343.33 T
1 9 Q
(GE_END_OF_SONG) 135 324.33 T
1 10 Q
-0.58 (Signals the end of the sound buffer) 198 312.33 P
-0.58 (. Every song buffer must end with this) 355.27 312.33 P
(event.) 198 300.33 T
1 9 Q
(GE_SET_PRIORITY) 135 281.33 T
1 10 Q
(Change the sound\325) 198 269.33 T
(s priority) 283.19 269.33 T
(. It has one word of data:) 324.67 269.33 T
8 F
(priority) 180 250.33 T
1 F
(New priority level to use.) 243 250.33 T
1 9 Q
(GE_SET_TEMPO) 135 231.33 T
1 10 Q
(Change the sound\325) 198 219.33 T
(s tempo. It has one word of data:) 283.19 219.33 T
8 F
(tempo) 180 200.33 T
1 F
-0.22 (New tempo to use, as measured by the number of milliseconds) 243 200.33 P
(to apportion a one-hundred-and-twenty-eighth note.) 243 188.33 T
81 144 531 648 C
82 421 531 515.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
82 421 531 515.98 R
7 X
0 0 0 1 0 0 0 K
V
90 450 1.06 1.31 305.44 489.71 G
1 H
0 Z
0 X
90 450 1.06 1.31 305.44 489.71 A
7 X
90 450 1.38 1.62 303 501.65 G
0 X
90 450 1.38 1.62 303 501.65 A
214.83 477.52 253.5 481.11 R
7 X
V
0.5 H
0 X
N
216.74 479.15 221.31 482.07 R
7 X
V
0 X
N
84.5 407.98 523 465.16 R
7 X
V
0 10 Q
0 X
(Figure) 84.5 458.5 T
(13-) 117.84 458.5 T
(1) 132.29 458.5 T
6 F
(Sheet Music Excerpt for Example) 140.63 458.5 T
(Percussion will play two notes then rest. Next, melody will play a long note, while percussion) 84.5 444.5 T
(plays a note, switches instruments, plays another note, and rests.) 84.5 432.5 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
87 509.02 375.5 509.02 2 L
7 X
V
2 Z
0 X
N
87 503.26 375.5 503.26 2 L
7 X
V
0 X
N
87 497.5 375.5 497.5 2 L
7 X
V
0 X
N
87 491.74 375.5 491.74 2 L
7 X
V
0 X
N
87 485.98 375.5 485.98 2 L
7 X
V
0 X
N
149.5 497.25 149.5 475.27 2 L
7 X
V
1 H
0 X
N
208.5 497.5 208.5 475.27 2 L
7 X
V
0 X
N
233.75 498.77 236.25 501.27 1.25 RR
0.5 H
0 Z
N
234.75 501.27 244.75 501.27 240.25 489.52 3 L
2 Z
N
264.5 497.25 264.5 482.5 2 L
1 H
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
208 477.02 208.25 475.02 205.5 477.77 206.25 481.27 207.75 483.02 206.25 481.02 206.75 478.02 7 Y
V
0.5 H
0 Z
N
323.5 497.75 323.5 475.27 2 L
V
1 H
2 Z
N
349.25 498.77 351.75 501.27 1.25 RR
0.5 H
0 Z
N
350.25 501.27 360.25 501.27 355.75 489.52 3 L
2 Z
N
323 477.02 323.25 475.02 320.5 477.77 321.25 481.27 322.75 483.02 321.25 481.02 321.75 478.02 7 Y
V
0 Z
N
90 450 2.75 2.75 267.25 477.77 G
1 H
90 450 2.75 2.75 267.25 477.77 A
260.5 477.52 272.5 477.52 2 L
V
0.5 H
2 Z
N
7 X
90 450 8.25 3.88 134.75 484.4 G
1 H
0 Z
0 X
90 450 8.25 3.88 134.75 484.4 A
126.5 484.4 142.5 494.47 R
7 X
V
90 450 8.25 3.88 134.75 492.15 G
0 X
90 450 8.25 3.88 134.75 492.15 A
142.75 492.15 142.75 485.17 2 L
7 X
V
2 Z
0 X
N
126.5 491.76 126.5 484.4 2 L
7 X
V
0 X
N
126.25 486.72 127.5 489.82 129.25 481.3 132.75 487.5 135.5 481.3 138.75 489.05 141.25 482.85
 142.25 487.5 8 L
0.5 H
N
122.98 497.81 123.73 499.11 134.77 492.74 134.02 491.44 4 Y
7 X
V
0 Z
0 X
N
134.23 495.99 134.98 494.69 146.02 501.06 145.27 502.36 4 Y
7 X
V
0 X
N
3 X
90 450 1.21 0.65 219.16 481.34 G
0 X
90 450 1.21 0.65 219.16 481.34 A
3 X
90 450 1.21 0.8 226.38 480.31 G
0 X
90 450 1.21 0.8 226.38 480.31 A
3 X
90 450 1.21 0.8 237.84 480.31 G
0 X
90 450 1.21 0.8 237.84 480.31 A
3 X
90 450 1.21 0.8 232.11 480.31 G
0 X
90 450 1.21 0.8 232.11 480.31 A
3 X
90 450 1.21 0.8 243.56 480.31 G
0 X
90 450 1.21 0.8 243.56 480.31 A
97.73 474.96 97.73 512.54 2 L
3 X
V
0 X
N
97.73 512.54 M
 102.64 509.04 101.75 505.89 100.18 502.05 D
 97.13 494.6 86.5 493.5 89 485.33 D
 90.69 479.82 95.71 476.48 102.83 481.5 D
 107.74 485 102.54 491.75 97.33 491.5 D
 93.83 491.33 91 487.5 93.33 483.83 D
N
7 X
270 360 3 2.5 94.73 474.96 G
2 Z
0 X
270 360 3 2.5 94.73 474.96 A
4 12 Q
(?) 110.75 499.5 T
(4) 110 485.75 T
110 496.75 118.5 496.75 2 L
7 X
V
3 H
0 X
N
90 450 1.33 1.79 94.83 474.29 G
101.58 507.08 M
 101 508.5 101 508.5 99.83 504.83 D
 98.67 501.17 98.67 501.17 94.42 497.25 D
 90.17 493.33 90.17 493.33 89.33 490.58 D
 88.5 487.83 88.5 487.83 90.08 489.92 D
 91.67 492 91.67 492 96.08 495.75 D
 100.5 499.5 100.5 499.5 101.33 502.58 D
 102.17 505.67 102.17 505.67 101.58 507.08 D
O
V
0.5 H
0 Z
N
104.5 486.5 102.67 482.33 99 479.5 103.67 480.83 105.5 483.83 5 Y
V
N
300 500.5 306 500.5 307.5 490.75 299 490.75 4 Y
7 X
V
1 H
0 X
N
302.25 496.75 299.75 495 2 L
7 X
V
0.5 H
2 Z
0 X
N
302 494 299 492.25 2 L
7 X
V
0 X
N
302.5 499.5 300 498 2 L
7 X
V
0 X
N
149 503 155.5 497.75 2 L
7 X
V
0 X
N
155 503.25 149.5 498.25 2 L
7 X
V
0 X
N
208 502.5 214.5 497.25 2 L
7 X
V
0 X
N
214 502.75 208.5 497.75 2 L
7 X
V
0 X
N
264 502.75 270.5 497.5 2 L
7 X
V
0 X
N
270 503 264.5 498 2 L
7 X
V
0 X
N
323 503 329.5 497.75 2 L
7 X
V
0 X
N
329 503.25 323.5 498.25 2 L
7 X
V
0 X
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "515" 11
%%Page: "516" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(516) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.6) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 9 Q
0 X
(GE_SEND_NOTIFICA) 135 641.33 T
(TION) 230.18 641.33 T
1 10 Q
-0.54 (Send a message to an object upon reaching this point in the sound buffer) 198 629.33 P
-0.54 (.) 525.98 629.33 P
(It has three words of data, consisting of a Message and an optr:) 198 617.33 T
8 F
(message) 180 598.33 T
1 F
-0.74 (This is a Message value, the message to send to the object. Note) 243 598.33 P
(that this message should not require any arguments. This) 243 586.33 T
(message will be sent as if with the) 243 574.33 T
6 F
(forceQueue) 404.34 574.33 T
1 F
( message \337ag.) 454.87 574.33 T
8 F
(object) 180 555.33 T
1 F
(This is an optr) 243 555.33 T
(, the message\325) 309.68 555.33 T
(s intended recipient. This object) 373.77 555.33 T
(may be disabled.) 243 543.33 T
1 9 Q
(GE_V_SEMAPHORE) 135 524.33 T
1 10 Q
(Release a semaphore. There is one word of data:) 198 512.33 T
8 F
(semaphore) 180 493.33 T
1 F
(The handle of the semaphore to release \050\322) 243 493.33 T
1 9 Q
(V) 434.5 493.33 T
1 10 Q
(\323\051.) 441 493.33 T
0 14 Q
(13.6) 134.76 442 T
0 24 Q
(Playing Music Buffers) 180 442 T
3 10 Q
(SoundAllocMusic\050\051, SoundInitMusic\050\051, SoundPlayMusic\050\051,) 180 416.33 T
(SoundStopMusic\050\051, SoundReallocMusic\050\051, SoundFreeMusic\050\051) 180 403.33 T
1 F
-0.16 (If your sound buffer is stored in a movable resource, and you only want that) 180 383.33 P
(resource to be locked down while the music is playing, call) 180 370.33 T
4 F
-0.67 (SoundInitMusic\050\051) 180 357.33 P
1 F
-0.64 ( and pass the handle of a block containing the music. The) 271.1 357.33 P
(block should contain a SimpleSoundHeader structure which speci\336es the) 180 344.33 T
-0.31 (number of voices in the buffer) 180 331.33 P
-0.31 (, followed by a music buffer as described above.) 315.67 331.33 P
-0.13 (If your sound buffer is in \336xed or locked memory) 180 311.33 P
-0.13 (, you must allocate space in) 401.95 311.33 P
-0.65 (the area accessible to the sound library by calling) 180 298.33 P
4 F
-0.68 (SoundAllocMusic\050\051) 405.26 298.33 P
1 F
-0.65 (. This) 503.41 298.33 P
(returns a handle to a sound block which you will be passing to other sound) 180 285.33 T
-0.38 (routines. Y) 180 272.33 P
-0.38 (ou may pass a \337ag requesting that the data from which the sound) 229.44 272.33 P
-0.28 (was allocated be automatically unlocked and/or freed. Note that since sound) 180 259.33 P
-0.04 (buffers often become rather large, it is normally a bad idea to leave them in) 180 246.33 P
-0.14 (\336xed memory) 180 233.33 P
-0.14 (, and normally inadvisable to make them \336xed for very long. If) 241.34 233.33 P
-0.77 (you use) 180 220.33 P
4 F
-0.8 ( SoundAllocMusic\050\051) 214.23 220.33 P
1 F
-0.77 (, the sound buffer will have to remain locked for) 314.45 220.33 P
(as long as the music is playing.) 180 207.33 T
(T) 180 187.33 T
(o play the sound, call) 185.75 187.33 T
4 F
(SoundPlayMusic\050\051) 286.14 187.33 T
1 F
(. Y) 381.32 187.33 T
(ou must provide the handle) 392.81 187.33 T
(returned from the sound allocation, a tempo, and a priority) 180 174.33 T
(.) 451.69 174.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "516" 12
%%Page: "517" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Playing Music Buffers) 411.74 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(517) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.6) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
81 635.98 531 648 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 635.98 531 648 R
7 X
0 0 0 1 0 0 0 K
V
76.5 643.23 617.5 646.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 629.31 T
(13-) 147.13 629.31 T
(5 Preparing and Playing Sound Buffers) 161.58 629.31 T
3 9 Q
(SoundInitMusic\050MySongResource, 1\051;) 81 614.98 T
(SoundErr = SoundAllocMusic\050) 81 596.98 T
(&themeSongBuf,) 256.5 596.98 T
(2,) 256.5 585.98 T
(/* themeSongBuf has two voices,) 344 585.98 T
( * MELODY and PERC. */) 344 574.98 T
(&theSong\051;) 256.5 563.98 T
(SoundPlayMusic\050theSong, SP_STANDARD, 125, EOSF_UNLOCK\051;) 81 545.98 T
(UserStandardSound\050SST_CUSTOM_SOUND, MySongResource, 33\051;) 81 527.98 T
81 503.95 531 515.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 503.95 531 515.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 511.2 617.5 514.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(T) 180 486.29 T
(o stop playing the sound, call) 185.75 486.29 T
4 F
(SoundStopMusic\050\051) 322.81 486.29 T
1 F
(. This routine will not) 418.37 486.29 T
(affect songs which are not playing.) 180 473.29 T
(T) 180 453.29 T
(o free up the sound handle and data associated with the sound, call) 185.75 453.29 T
4 F
-0.09 (SoundFreeMusic\050\051) 180 440.29 P
1 F
-0.09 (. Y) 275.74 440.29 P
-0.09 (ou should never free a sound which is playing; if you) 287.14 440.29 P
-0.67 (think that a sound may be playing, call) 180 427.29 P
4 F
-0.69 (SoundStopMusic\050\051) 358.57 427.29 P
1 F
-0.67 ( before freeing it.) 454.12 427.29 P
(T) 180 407.29 T
(o reuse a sound handle with a new sound buffer) 185.75 407.29 T
(, call) 405.77 407.29 T
4 F
(SoundReallocMusic\050\051) 180 394.29 T
1 F
(. The number of voices may not be changed by) 290.56 394.29 T
(reallocation. Y) 180 381.29 T
(ou should never reallocate a sound which is playing; if you) 245.94 381.29 T
(think that a sound may be playing, call) 180 368.29 T
4 F
(SoundStopMusic\050\051) 363.94 368.29 T
1 F
(.) 459.5 368.29 T
81 335.93 531 347.95 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 335.93 531 347.95 R
7 X
0 0 0 1 0 0 0 K
V
76.5 343.18 617.5 346.68 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 329.26 T
(13-) 147.13 329.26 T
(6 Stopping and Freeing a Sound) 161.58 329.26 T
3 9 Q
(/* We are done with the theme song and want to play our ending song. Instead of) 81 314.93 T
( * allocating a new song handle, we\325ll just reallocate the one we were using to) 81 303.93 T
( * store the data taken from the themeSongBuf, and use the data from) 81 292.93 T
( * endingSongBuf. The endingSongBuf had better only contain data for two) 81 281.93 T
( * voices \050or fewer\051. */) 81 270.93 T
(SoundStopMusic\050theSong\051;) 81 259.93 T
(SoundReallocMusic\050theSong, \050_far\051&endingSongBuffer, FREE_ON_EOS\051;) 81 248.93 T
(SoundPlayMusic\050theSong, SP_STANDARD, 125\051;) 81 237.93 T
(/* If we\325re done with \322theSong\323 handle, then we can free it, after making sure) 81 219.93 T
( * it has stopped playing. */) 81 208.93 T
(SoundStopMusic\050theSong\051;) 81 197.93 T
(SoundFreeMusic\050theSong\051;) 81 186.93 T
81 162.9 531 174.93 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 162.9 531 174.93 R
7 X
0 0 0 1 0 0 0 K
V
76.5 170.16 617.5 173.66 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "517" 13
%%Page: "518" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(518) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.7) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(13.7) 134.76 632 T
0 24 Q
(Playing V) 180 632 T
(ery Large Music) 286.73 632 T
(Buffers) 180 604 T
3 10 Q
(SoundAllocMusicStream\050\051, SoundPlayToMusicStream\050\051,) 180 578.33 T
(SoundStopMusicStream\050\051, SoundFreeMusicStream\050\051) 180 565.33 T
1 F
-0.11 (Y) 180 545.33 P
-0.11 (ou may wish to play a sound which takes up a great deal of memory) 185.93 545.33 P
-0.11 (. If you) 496.32 545.33 P
(wish to play an extremely long music buffer) 180 532.33 T
(, you can play parts of it to a) 381.5 532.33 T
-0.45 (music stream. For instance, to play a 1 Megabyte music buffer \050requiring too) 180 519.33 P
-0.5 (large a block of memory for the routines described in the above sections\051, you) 180 506.33 P
-0.45 (would play 4) 180 493.33 P
1 9 Q
-0.4 (K) 237.82 493.33 P
1 10 Q
-0.45 ( of it at a time to a music stream, which would concatenate the) 244.82 493.33 P
(music together) 180 480.33 T
(. Normally) 247.96 480.33 T
(, these \322music stream\323 commands are the best to) 296.12 480.33 T
-0.41 (use when playing a music buffer whose sound resides on a disk. T) 180 467.33 P
-0.41 (o allocate a) 477.57 467.33 P
(special stream which will accept music data, call) 180 454.33 T
4 F
(SoundAllocMusicStream\050\051) 180 441.33 T
1 F
(. T) 315.75 441.33 T
(o play music into the stream, call) 327.06 441.33 T
4 F
(SoundPlayT) 180 428.33 T
(oMusicStream\050\051) 242.78 428.33 T
1 F
(, passing a pointer to the buffer of music to) 325.19 428.33 T
(play) 180 415.33 T
(. T) 198.71 415.33 T
(o stop the passage of music through the stream and \337ush the buffer) 210.02 415.33 T
(,) 521.52 415.33 T
(call) 180 402.33 T
4 F
(SoundStopMusicStream\050\051) 199.08 402.33 T
1 F
(. T) 332.24 402.33 T
(o free up the music stream, call) 343.55 402.33 T
4 F
(SoundFreeMusicStream\050\051) 180 389.33 T
1 F
(. Make sure that there is no music playing) 313.34 389.33 T
(through the stream when you free it; be sure to call) 180 376.33 T
4 F
(SoundStopMusicStream\050\051) 180 363.33 T
1 F
( if you are not otherwise sure.) 313.16 363.33 T
0 14 Q
(13.8) 134.76 311 T
0 24 Q
(Playing Sampled Sounds) 180 311 T
1 10 Q
(Once you have your sound data structure set up, the basic steps to playing) 180 285.33 T
(the sound are) 180 272.33 T
4 F
(1) 180 252.33 T
1 F
(Allocate a) 198 252.33 T
1 9 Q
(DAC) 246.53 252.33 T
1 10 Q
( stream.) 266.53 252.33 T
4 F
(2) 180 233.33 T
1 F
(Enable the) 198 233.33 T
1 9 Q
(DAC) 251.16 233.33 T
1 10 Q
( stream.) 271.16 233.33 T
4 F
(3) 180 214.33 T
1 F
(Play your sampled sound data into the enabled stream. Play the sound) 198 214.33 T
(as many times as you like. Y) 198 202.33 T
(ou may play other sampled sounds to the) 328.97 202.33 T
(same stream.) 198 190.33 T
4 F
(4) 180 171.33 T
1 F
(Disable the) 198 171.33 T
1 9 Q
(DAC) 253.39 171.33 T
1 10 Q
( stream when you\325re \336nished with it.) 273.39 171.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "518" 14
%%Page: "519" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Playing Sampled Sounds) 390.73 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(519) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.8) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 180 641.33 T
(o allocate a) 185.75 641.33 T
1 9 Q
(DAC) 240.4 641.33 T
1 10 Q
( stream, call) 260.4 641.33 T
4 F
(SoundAllocSampleStream\050\051) 320.23 641.33 T
1 F
(. This will) 463.4 641.33 T
(return a memory handle which you will use to identify the sound stream as) 180 628.33 T
(you manipulate it with other routines.) 180 615.33 T
(When you are ready to start playing sounds to the stream, call) 180 595.33 T
4 F
(SoundEnableSampleStream\050\051) 180 582.33 T
1 F
(. This routine grabs access to a physical) 333.16 582.33 T
1 9 Q
(DAC) 180 569.33 T
1 10 Q
( player device. Note that you will specify a) 200 569.33 T
4 F
(SoundPriority) 398.18 569.33 T
1 F
( for the) 473.18 569.33 T
(stream, and that you will not be able to change this priority from sample to) 180 556.33 T
(sample. Also note that if a sound is playing on the stream and you queue) 180 543.33 T
(another sound to the stream, then the second sound will be queued behind) 180 530.33 T
(the \336rst. Thus, if your application wishes to play simultaneous sounds) 180 517.33 T
(capable of interrupting one another) 180 504.33 T
(, it should allocate more than one sound) 343.34 504.33 T
(stream.) 180 491.33 T
-0.26 (If there are more) 180 471.33 P
1 9 Q
-0.23 (DAC) 260.25 471.33 P
1 10 Q
-0.26 ( streams than the sound device has) 280.25 471.33 P
1 9 Q
-0.23 (DAC) 444.18 471.33 P
1 10 Q
-0.26 ( outputs, then) 464.18 471.33 P
(the sound system will have to decide which sounds to play when too many) 180 458.33 T
(play at once.) 180 445.33 T
(Sounds with a higher priority will oust those with lower priority) 180 425.33 T
(. Note that) 475.4 425.33 T
-0.22 (the lower priority sound will not come back when the more important sound) 180 412.33 P
(is \336nished\321thus, a short alert noise might cause a few seconds of sampled) 180 399.33 T
(speech not to play at all. If your application will be playing sampled sounds) 180 386.33 T
(at more than one priority) 180 373.33 T
(, you may thus want to make sure that the) 295.75 373.33 T
(lower) 180 360.33 T
(-priority sounds are broken up into small pieces.) 205.19 360.33 T
(If a sound wants to play) 180 340.33 T
(, but all the available) 290.02 340.33 T
1 9 Q
(DAC) 391.18 340.33 T
1 10 Q
( outputs are playing) 411.18 340.33 T
(higher) 180 327.33 T
(-priority sounds, then the sound will not play) 210 327.33 T
(.) 417.61 327.33 T
(T) 180 307.33 T
(o actually play a sound to your enabled sound stream, call) 185.75 307.33 T
4 F
(SoundPlayT) 180 294.33 T
(oSampleStream\050\051) 242.78 294.33 T
1 F
(. This routine takes a pointer to the sound) 332.61 294.33 T
(data, \050which should be in a locked area of memory\051. The sound data will be) 180 281.33 T
-0.66 (copied to the) 180 268.33 P
1 9 Q
-0.6 (DAC) 239.31 268.33 P
1 10 Q
-0.66 ( stream\325) 259.31 268.33 P
-0.66 (s buffer) 295.5 268.33 P
-0.66 (, and you may thus free the sound data after) 329.28 268.33 P
-0.46 (you have played it to the) 180 255.33 P
1 9 Q
-0.41 (DAC) 293.95 255.33 P
1 10 Q
-0.46 ( stream. The sound will be queued at the end of) 313.95 255.33 P
-0.43 (the stream\325) 180 242.33 P
-0.43 (s data. The sound device\325) 231.43 242.33 P
-0.43 (s sound driver will read from the stream) 344.76 242.33 P
(and will eventually play the sound.) 180 229.33 T
-0.77 (When you are done playing sounds to a stream, you should free up the stream) 180 209.33 P
(by calling) 180 196.33 T
4 F
( SoundDisableSampleStream\050\051) 224.64 196.33 T
1 F
(.) 383.26 196.33 T
-0.5 (If you wish to enable a new) 180 176.33 P
1 9 Q
-0.45 (DAC) 305.25 176.33 P
1 10 Q
-0.5 ( stream with the same sound token, but with) 325.25 176.33 P
(a different) 180 163.33 T
4 F
(SoundPriority) 231.11 163.33 T
1 F
(, you may do so using) 305 163.33 T
4 F
(SoundEnableSampleStream\050\051) 180 150.33 T
1 F
( \050Y) 333.16 150.33 T
(ou should call) 345.2 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "519" 15
%%Page: "520" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(520) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.9) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(SoundDisableSampleStream\050\051) 180 641.33 T
1 F
( on the token before enabling it in this) 335.75 641.33 T
(way\051. Y) 180 628.33 T
(ou should eventually call) 213.53 628.33 T
4 F
(SoundDisableSampleStream\050\051) 331.51 628.33 T
1 F
( again in) 487.26 628.33 T
(this case.) 180 615.33 T
-0.41 (Once the) 180 595.33 P
1 9 Q
-0.37 (DAC) 223.08 595.33 P
1 10 Q
-0.41 ( stream has been disabled, you may free up the sound token by) 243.08 595.33 P
(calling) 180 582.33 T
4 F
(SoundFreeSampleStream\050\051) 213.71 582.33 T
1 F
(. Y) 354.47 582.33 T
(ou should call this with all sound) 365.96 582.33 T
(tokens before your application exits.) 180 569.33 T
0 14 Q
(13.9) 134.76 517 T
0 24 Q
(Grabbing the Sound Exclusive) 180 517 T
3 10 Q
(SoundGetExclusive\050\051, SoundGetExclusiveNB\050\051,) 180 491.33 T
(SoundReleaseExclusive\050\051) 180 478.33 T
1 F
-0.51 (If your sound device has multiple voices and/or) 180 458.33 P
1 9 Q
-0.46 (DAC) 395.38 458.33 P
1 10 Q
-0.51 ( outputs, then more than) 415.38 458.33 P
-0.09 (one application may play sound at a time. If the highest priority sound does) 180 445.33 P
-0.47 (not use all of the card\325) 180 432.33 P
-0.47 (s voices, then the next priority sound will be allowed to) 279.31 432.33 P
(use them.) 180 419.33 T
(Most of the time, this is the behavior you want. This allows you to have) 180 399.33 T
(sounds going on in the background and foreground at the same time.) 180 386.33 T
(However) 180 373.33 T
(, if your application will be creating some sound so important that) 220.18 373.33 T
-0.75 (no other application should be allowed to interrupt it, you may grab exclusive) 180 360.33 P
(access to the sound routines.) 180 347.33 T
4 F
-0.89 (SoundGetExclusive\050\051) 180 327.33 P
1 F
-0.86 ( grabs a semaphore associated with the sound library) 289.44 327.33 P
(\050performs a \322) 180 314.33 T
1 9 Q
(P) 239.81 314.33 T
1 10 Q
(\323 operation\051. Y) 245.81 314.33 T
(our thread thus makes it known that it wants) 311.19 314.33 T
(sole access to the sound library) 180 301.33 T
(, and will wait, if necessary) 322.42 301.33 T
(, for any other) 447.45 301.33 T
(thread which has grabbed sole access to \336nish. It will then grab exclusive) 180 288.33 T
(access to the sound library\325) 180 275.33 T
(s low level routines. Until you release the) 304.64 275.33 T
(exclusive, no other thread will be able to use the) 180 262.33 T
4 F
(SoundAllocMusic\050\051) 405.78 262.33 T
1 F
(,) 503.93 262.33 T
4 F
(SoundAllocMusicStream\050\051) 180 249.33 T
1 F
(,) 315.75 249.33 T
4 F
(SoundAllocMusicNote\050\051) 321.31 249.33 T
1 F
(,) 443.9 249.33 T
4 F
-0.55 (SoundPlayMusic\050\051) 180 236.33 P
1 F
-0.54 (,) 275.18 236.33 P
4 F
-0.55 (SoundPlayT) 280.2 236.33 P
-0.55 (oMusicStream\050\051) 342.98 236.33 P
1 F
-0.54 (,) 425.39 236.33 P
4 F
-0.55 (SoundStopMusic\050\051) 430.42 236.33 P
1 F
-0.54 (,) 525.98 236.33 P
4 F
(SoundStopMusicStream\050\051) 180 223.33 T
1 F
(,) 313.16 223.33 T
4 F
(SoundReallocMusic\050\051) 318.72 223.33 T
1 F
(,) 429.28 223.33 T
4 F
(SoundReallocMusicNote\050\051) 180 210.33 T
1 F
(,) 315 210.33 T
4 F
(SoundAllocSampleStream\050\051) 320.56 210.33 T
1 F
(,) 463.73 210.33 T
4 F
(SoundEnableSampleStream\050\051) 180 197.33 T
1 F
(, or) 333.16 197.33 T
4 F
(SoundPlayT) 350.94 197.33 T
(oSampleStream\050\051) 413.72 197.33 T
1 F
(routines.) 180 184.33 T
(The) 180 164.33 T
4 F
( SoundGetExclusiveNB\050\051) 197.78 164.33 T
1 F
( routine also locks the sound library for) 326.2 164.33 T
(exclusive access. However) 180 151.33 T
(, if any other thread has already grabbed the) 299.44 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "520" 16
%%Page: "521" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(521) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(exclusive,) 180 641.33 T
4 F
(SoundGetExclusiveNB\050\051) 227.78 641.33 T
1 F
(won\325) 356.2 641.33 T
(t wait; it will just grab the) 376.95 641.33 T
(exclusive away anyhow) 180 628.33 T
(.) 287.06 628.33 T
(T) 180 608.33 T
(o release the exclusive, call) 185.75 608.33 T
4 F
( SoundReleaseExclusive\050\051) 310.95 608.33 T
1 F
(. This will allow) 444.93 608.33 T
(sounds to enter the queue and will allow another thread which has called) 180 595.33 T
4 F
(SoundGetExclusive\050\051) 180 582.33 T
1 F
( to grab the exclusive.) 289.44 582.33 T
0 14 Q
(13.10) 126.97 530 T
0 24 Q
(Simulating Musical) 180 530 T
(Instruments) 180 502 T
1 10 Q
(In addition to the standard instruments provided by the system, you may) 180 476.33 T
-0.3 (de\336ne instruments of your own. T) 180 463.33 P
-0.3 (o do so, you must \336rst \336nd out what sort of) 333.89 463.33 P
(instrument format the user) 180 450.33 T
(\325) 307.4 450.33 T
(s sound driver expects. Y) 309.07 450.33 T
(ou will then pass a) 423.33 450.33 T
(pointer to the appropriate data structure.) 180 437.33 T
(T) 180 417.33 T
(o \336nd out what sort of data structure the sound driver expects, call) 185.75 417.33 T
4 F
(SoundSynthDriverInfo\050\051) 180 404.33 T
1 F
( and note the value returned at the) 307.22 404.33 T
6 F
(format) 472.24 404.33 T
1 F
(pointer argument.) 180 391.33 T
0 14 Q
(13.10.1) 115.3 349 T
0 18 Q
(Acoustics In Brief) 180 349 T
1 10 Q
-0.11 (Sound may be thought of in terms of waves. A pure tone manifests as a sine) 180 325.33 P
(wave. The higher the frequency of the wave \050as measured in Hertz\051, the) 180 312.33 T
(higher the pitch of the generated sound. A piccolo would generate a wave) 180 299.33 T
-0.68 (with a high frequency; a tuba would generate a low frequency) 180 286.33 P
-0.68 (. The amplitude) 456.92 286.33 P
-0.34 (of the wave translates to the sound\325) 180 273.33 P
-0.34 (s volume, or loudness. Cannons generate) 341.71 273.33 P
(sound waves with great amplitude.) 180 260.33 T
(A tone consists of a sound of one frequency) 180 240.33 T
(. Full, rich sounds are created by) 376.11 240.33 T
-0.8 (making sound at more than one frequency) 180 227.33 P
-0.8 (. If you generate sound at multiples) 369.32 227.33 P
(of the base frequency) 180 214.33 T
(, you get a good broad, rich sound and the frequencies) 276.67 214.33 T
-0.6 (beyond that of the note itself are known as \322harmonic\323 frequencies. However) 180 201.33 P
-0.6 (,) 526.04 201.33 P
-0.6 (the volume levels should be lower at these harmonic frequencies than at that) 180 188.33 P
-0.07 (of the note itself. T) 180 175.33 P
-0.07 (ogether) 265.86 175.33 P
-0.07 (, these frequencies can form the sounds of chords.) 299.93 175.33 P
(A rich instrument such as an organ will make sounds on many frequencies) 180 162.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "521" 17
%%Page: "522" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(522) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.82 (other than that of the main note. A violin, with a very pure tone, will generate) 180 641.33 P
(almost no sound on frequencies other than that of the note being played.) 180 628.33 T
0 14 Q
(13.10.2) 115.3 586 T
0 18 Q
(Simple Instrument Description) 180 586 T
1 10 Q
(The simple instrument description allows you to specify a way for less) 180 562.33 T
(powerful devices to emulate different musical instruments. Y) 180 549.33 T
(ou describe) 461.31 549.33 T
(three volume levels, each of which can be between 0 and 255. The) 180 536.33 T
(fundamental tone will play at the \336rst volume level; the second volume will) 180 523.33 T
-0.72 (be used for playing the \336rst harmonic frequency; the third volume for playing) 180 510.33 P
(the second harmonic.) 180 497.33 T
(Simple instruments have another characteristic: you can specify a noise) 180 477.33 T
-0.21 (component. By means of noise, you impart sibilance to the sound, giving it a) 180 464.33 P
(\322breathy) 180 451.33 T
(,\323 sometimes hissing quality) 218.71 451.33 T
(. A sound without noise will seem crisp) 347.63 451.33 T
-0.55 (by comparison. At this time, the simple sound format supports three kinds of) 180 438.33 P
(noise:) 180 425.33 T
1 9 Q
(NO_NOISE) 180 405.33 T
1 10 Q
(The lack of noise. Use for crisp, acute sounds. This value is) 243 405.33 T
(guaranteed to be zero.) 243 393.33 T
1 9 Q
(WHITE_NOISE) 180 374.33 T
1 10 Q
(Noise evenly distributed across all frequencies.) 243 362.33 T
1 9 Q
(MET) 180 343.33 T
(AL_NOISE) 200.5 343.33 T
1 10 Q
(Noise only at the lower frequencies\321you may think of this as) 243 331.33 T
-0.37 (standard white noise which has gone through a low-pass \336lter) 243 319.33 P
-0.37 (.) 525.81 319.33 P
(Noise generated will have a lower tone, and have a less) 243 307.33 T
(hiss-like quality than those with white noise. If cymbals have) 243 295.33 T
(white noise, then drums have metal noise.) 243 283.33 T
-0.71 (T) 180 264.33 P
-0.71 (o describe an instrument with no noise component, specify the three volume) 185.75 264.33 P
(levels and leave the noise component as zero.) 180 251.33 T
3 F
(CTIEnvelopeFormat BrokenTuba =) 216 235.33 T
({255,) 252 221.33 T
(/* Primary: full strength */) 324 221.33 T
( 64,) 252 207.33 T
(/* First harmonic: 25% strength */) 324 207.33 T
( 10,) 252 193.33 T
(/* 2nd harmonic: 10% strength */) 324 193.33 T
( 0};) 252 179.33 T
(/* No noise */) 324 179.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "522" 18
%%Page: "523" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(523) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(T) 180 641.33 T
(o describe an instrument with noise, you must specify a type and a degree) 185.75 641.33 T
-0.47 (of noise \050encoded as two bits describing what sort of noise) 180 628.33 P
1 9 Q
-0.43 (OR) 443.17 628.33 P
1 10 Q
-0.47 (\325d together with) 456.67 628.33 P
(six bits describing the degree of noise, if any\051:) 180 615.33 T
3 F
(CTIEnvelopeFormat FunkyPiano =) 216 599.33 T
({ 255, 32, 17, \050\050NT_WHITE_NOISE << 6\051 | 10\051 };) 252 585.33 T
(CTIEnvelopeFormat NoisyDrum =) 216 568.33 T
({ 0, 0, 0, \050\050NT_METAL_NOISE << 6\051 | 63 \051 };) 252 554.33 T
0 14 Q
(13.10.3) 115.3 511 T
0 18 Q
(Advanced Description) 180 511 T
1 10 Q
(The advanced instrument description data structures were set up with the) 180 487.33 T
(SoundBlaster card in mind; for detailed information \050i.e. timing numbers\051) 180 474.33 T
(about these \336elds, you should purchase a copy of the SoundBlaster) 180 461.33 T
(Development Kit and read the chapter about Programming the) 180 448.33 T
1 9 Q
(FM) 474.11 448.33 T
1 10 Q
( Chip.) 488.61 448.33 T
(However) 180 435.33 T
(, you may \336rst want to read the documentation below for an) 220.18 435.33 T
(introduction to some of the involved concepts:) 180 422.33 T
2 F
(u) 180 402.33 T
1 F
-0.34 (As with the simple instrument format, you\325ll specify the richness of your) 198 402.33 P
(instrument, how its sound shows up at frequencies other than the base) 198 390.33 T
(frequency) 198 378.33 T
(. This is done using a technique known as \322Frequency) 242.25 378.33 T
(Modulation.\323) 198 366.33 T
2 F
(u) 180 347.33 T
1 F
(Y) 198 347.33 T
(ou will also work with the instrument\325) 203.93 347.33 T
(s loudness, or sound level. Y) 380.26 347.33 T
(ou) 509.35 347.33 T
-0.4 (may specify that some instruments are louder than others. Y) 198 335.33 P
-0.4 (ou may also) 474.6 335.33 P
(specify how the sound level changes over time.) 198 323.33 T
0 12 Q
(Frequency Modulation) 180 298 T
1 10 Q
-0.52 (Frequency modulation allows you to specify how an instrument\325) 180 276.33 P
-0.52 (s sounds will) 470.14 276.33 P
(appear at its harmonic frequencies. Y) 180 263.33 T
(ou can even use it to set up sound at) 352.24 263.33 T
-0.06 (frequencies other than the harmonics. The sound device does this by means) 180 250.33 P
(of a \322modulating\323 frequency) 180 237.33 T
(.) 307.23 237.33 T
(The sound device actually keeps track of two frequencies. The) 180 217.33 T
6 F
(carrier) 467.99 217.33 T
1 F
(frequency) 180 204.33 T
(, corresponding to the note being played, can be thought of as) 224.25 204.33 T
(constant for a given note being played. This frequency may be input to a) 180 191.33 T
(sound wave generator) 180 178.33 T
(, and the resulting wave to a speaker) 280.93 178.33 T
(, resulting in a) 451.15 178.33 T
-0.17 (pure tone. A frequency modulating \050) 180 165.33 P
1 9 Q
-0.15 (FM) 346 165.33 P
1 10 Q
-0.17 (\051 system does not just use a constant) 360.49 165.33 P
-0.62 (frequency) 180 152.33 P
-0.62 (, but actually adds a wave signal to the carrier frequency to achieve) 224.25 152.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "523" 19
%%Page: "524" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(524) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(a frequency which changes over time. Consider a siren\321its frequency) 180 641.33 T
(changes over time. However) 180 628.33 T
(, in an) 309.26 628.33 T
1 9 Q
(FM) 341.31 628.33 T
1 10 Q
( system, these changes come much) 355.81 628.33 T
(more quickly) 180 615.33 T
(.) 238.71 615.33 T
(The wave signal which gets added to the carrier frequency is known as the) 180 595.33 T
6 F
(modulating signal) 180 582.33 T
1 F
(, and you may change the nature of your instrument\325) 264.61 582.33 T
(s) 507.96 582.33 T
(harmonics by changing the characteristics \050amplitude, frequency\051 of this) 180 569.33 T
(modulating signal.) 180 556.33 T
-0.62 (The input to the speaker\321this wave which is constantly changing frequency) 180 536.33 P
-0.62 (,) 526.06 536.33 P
(thanks to the modulating signal\321is called the) 180 523.33 T
6 F
(output signal) 396.34 523.33 T
1 F
(.) 457.44 523.33 T
(The net effect of this is that the carrier signal will contain several) 180 503.33 T
(frequencies. In fact, those frequencies will be spaced apart by a constant) 180 490.33 T
(distance\321the frequency of the modulating signal. If the modulating) 180 477.33 T
(frequency is the same as the frequency of the note being played, then this) 180 464.33 T
(means that the carrier will contain sounds at the note and its harmonic) 180 451.33 T
(frequencies.) 180 438.33 T
(Thus, you may use the modulating signal to set up sound on the harmonic) 180 418.33 T
-0.29 (frequencies, just as you did with the simple instrument description. The FM) 180 405.33 P
-0.68 (system is a bit more adaptable in that by making the modulating signal some) 180 392.33 P
(multiple of the main note, you can create sound at every other harmonic) 180 379.33 T
(frequency) 180 366.33 T
(, or possibly at each harmonic and any number of frequencies) 224.25 366.33 T
(between each harmonic.) 180 353.33 T
(Furthermore, you can change the strength of the sound at the various) 180 333.33 T
(frequencies by changing the amplitude, or level, of the modulating signal.) 180 320.33 T
0 12 Q
(Changing Sound Levels) 180 294 T
1 10 Q
(Notes in a sound buffer have a single volume, or loudness. However) 180 272.33 T
(, when) 491.51 272.33 T
(you play a note on a musical instrument, the volume level is not constant.) 180 259.33 T
(When you hit a drum, the sound is instantaneous\321it doesn\325) 180 246.33 T
(t matter if you) 456.7 246.33 T
(pull the drumstick back a moment or a minute later) 180 233.33 T
(, all the sound is) 419.67 233.33 T
-0.54 (generated in a single instant. When you press a piano key) 180 220.33 P
-0.54 (, a string inside the) 441.1 220.33 P
(piano will start vibrating, producing sound. This string will continue to) 180 207.33 T
(produce sound \050though it will grow gradually quieter\051. Thus, to truly) 180 194.33 T
-0.72 (differentiate instruments, we need a model for an instrument\325) 180 181.33 P
-0.72 (s loudness over) 460.01 181.33 P
(time. This change over time is known as an instrument\325) 180 168.33 T
(s) 437.08 168.33 T
6 F
(envelope) 444.49 168.33 T
1 F
(.) 483.18 168.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "524" 20
%%Page: "525" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(525) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(The advanced instrument description uses a standard) 180 641.33 T
1 9 Q
(ADSR) 431.87 641.33 T
1 10 Q
( model of an) 457.54 641.33 T
(instrument\325) 180 628.33 T
(s envelope. That means it breaks a sound\325) 233.89 628.33 T
(s life time into four) 426.53 628.33 T
-0.12 (parts: an Attack, Decay) 180 615.33 P
-0.12 (, Sustain, and Release. Each instrument has a value) 287.43 615.33 P
(for each stage of its envelope, and will determine the length of that stage of) 180 602.33 T
(the life-span. Also, you may use an envelope type to specify whether the) 180 589.33 T
-0.39 (sound should continue for as long as the voice is on \050like an organ\051, or should) 180 576.33 P
(die off automatically \050like a drum\051. In the) 180 563.33 T
1 9 Q
(GEOS) 374.1 563.33 T
1 10 Q
( model, attack, decay) 400.27 563.33 T
(, and) 496.22 563.33 T
-0.09 (release are all slopes; sustain is a sound level, expressed as a fraction of the) 180 550.33 P
(note\325) 180 537.33 T
(s volume.) 201.67 537.33 T
-0.09 (For a continuing \050organ-like\051 instrument, the sound level will progress thus:) 180 335.52 P
4 F
(Attack) 180 315.52 T
1 F
-0.24 (The sound level will build up to that speci\336ed for the note \050e.g.) 243 315.52 P
1 9 Q
-0.02 (DYNAMIC_MF) 243 303.52 P
1 10 Q
-0.02 (\051. The higher the attack value, the more quickly) 307.83 303.52 P
(this will occur) 243 291.52 T
(. Note that if the voice is turned off during this) 307.26 291.52 T
-0.25 (stage, the sound will go immediately to the release stage \050This) 243 279.52 P
-0.74 (simulates that the instrument was never allowed to reach peak) 243 267.52 P
(volume, as if an organist had tapped an organ key instead of) 243 255.52 T
(keeping it depressed.) 243 243.52 T
4 F
(Decay) 180 224.52 T
1 F
-0.69 (The sound level will decrease at a rate determined by the decay) 243 224.52 P
(value. The higher the decay) 243 212.52 T
(, the more quickly the sound level) 370.05 212.52 T
(will fall off. If the voice is turned off during this stage, the) 243 200.52 T
(sound will immediately enter the release stage.) 243 188.52 T
4 F
(Sustain Level) 180 169.52 T
1 F
-0.25 (The sound level will fall off at the decay rate until it has fallen) 243 157.52 P
81 144 531 648 C
181.01 352.18 531 534 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181.01 352.18 531 534 R
7 X
0 0 0 1 0 0 0 K
V
183.51 349.19 527 363.19 R
V
0 10 Q
0 X
(Figure) 183.51 356.52 T
(13-) 216.85 356.52 T
(2) 231.3 356.52 T
6 F
(Modeling with the ADSR envelope.) 239.64 356.52 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
212.51 454.17 M
 224.61 511.55 229.84 513.23 230.26 505 D
 230.67 497.21 234.51 494.34 277.88 491.06 D
 318.64 487.97 324.68 486.96 327.51 453.76 D
0.5 H
2 Z
N
211.51 376.29 M
 218.81 442.69 218.81 442.28 227.03 412.77 D
 233.46 390.16 239.82 388.17 343.01 376.29 D
N
(V) 0 -270 194.51 458.94 TF
(olume) 0 -270 194.51 464.69 TF
(V) 0 -270 194.01 385.15 TF
(olume) 0 -270 194.01 390.9 TF
(Continuing) 234.01 504.52 T
(Diminishing) 228.01 426.23 T
6 8 Q
(V) 198.01 517.64 T
(oiceOn) 202.61 517.64 T
(V) 303.51 516.91 T
(oiceOff) 308.11 516.91 T
211.51 376.28 211.51 515.24 2 L
1 H
11 X
N
315.01 376.28 315.01 514.83 2 L
N
199.01 438.18 342.01 453.76 R
7 X
V
6 10 Q
0 X
(T) 199.01 445.19 T
(ime) 205.15 445.19 T
199.01 454.17 343.01 513.19 R
0.5 H
0 Z
N
199.01 376.29 343.01 435.31 R
N
390.51 453.76 406.51 509.1 414.01 491.47 500.01 491.47 506.51 453.35 5 L
3 H
2 Z
N
390.51 376.7 399.51 427.52 409.01 392.27 521.01 376.7 4 L
N
6 8 Q
(Attack) 0 -270 394.51 477.43 TF
(Decay) 0 -270 418.01 501.79 TF
(Sustain) 441.01 495.18 T
(Release) 0 -270 508.51 484.49 TF
406.51 491.47 443.01 491.47 2 L
0.5 H
N
402.51 513.19 409.01 513.19 2 L
N
500.01 512.79 500.01 461.14 2 L
N
(V) 474.51 516.5 T
(oiceOff) 479.11 516.5 T
396.26 428.55 402.76 428.55 2 L
N
399.01 392.68 435.51 392.68 2 L
N
(Attack) 0 -270 392.51 406.11 TF
(Decay) 0 -270 414.01 409.97 TF
(Sustain) 424.01 400.91 T
421.49 395.07 415.5 394.73 418.2 400.09 419.85 397.58 4 Y
V
423.01 399.65 419.85 397.58 2 L
N
(Release) 0 -270 465.51 386.94 TF
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "525" 21
%%Page: "526" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(526) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.76 (to the sustain level. This sustain level is expressed as a fraction) 243 641.33 P
(of the note level, so you might, for example, specify that the) 243 629.33 T
-0.12 (sound level should stop decaying once it has fallen 25 percent.) 243 617.33 P
-0.4 (The sound level will remain at the sustain level until that note) 243 605.33 P
(ends \050i.e. the voice is turned off\051.) 243 593.33 T
4 F
(Release) 180 574.33 T
1 F
-0.82 (The voice will then decrease at a rate determined by the release) 243 574.33 P
-0.49 (value. The higher the release, the more quickly the sound level) 243 562.33 P
(will fall off. The sound will continue to fall until inaudible.) 243 550.33 T
(For a diminishing \050drum-like\051 instrument, the sound level progresses:) 180 291.33 T
4 F
(Attack) 180 271.33 T
1 F
-0.24 (The sound level will build up to that speci\336ed for the note \050e.g.) 243 271.33 P
1 9 Q
(DYNAMIC_FF) 243 259.33 T
1 10 Q
(\051. The higher the attack value, the more quickly) 305.33 259.33 T
(this will occur) 243 247.33 T
(. If the voice is turned off partway through the) 307.26 247.33 T
(attack the sound will immediately enter release, never) 243 235.33 T
(reaching full volume, and skipping the decay stage.) 243 223.33 T
4 F
(Decay) 180 204.33 T
1 F
-0.69 (The sound level will decrease at a rate determined by the decay) 243 204.33 P
(value. The higher the decay) 243 192.33 T
(, the more quickly the sound level) 370.05 192.33 T
-0.63 (will fall off. If the voice is turned off during this time, the sound) 243 180.33 P
(will go into release without waiting to reach the sustain level.) 243 168.33 T
81 144 531 648 C
181 307 531 547 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181 307 531 547 R
7 X
0 0 0 1 0 0 0 K
V
183.5 275.19 526.99 389.19 R
V
0 10 Q
0 X
(Figure) 183.5 382.52 T
(13-) 216.84 382.52 T
(3) 231.29 382.52 T
6 F
(Continuing Instrument Envelopes) 239.63 382.52 T
(The \337ute shows a typical continuing instrument envelope, made up of four) 183.5 368.52 T
-0.21 (segments. The guitar has a small decay value, and thus the volume has not) 183.5 356.52 P
(fallen to the sustain level when the voice goes off, and the volume starts) 183.5 344.52 T
-0.52 (falling at the release rate. Y) 183.5 332.52 P
-0.52 (ou can see how the V) 306.39 332.52 P
-0.52 (iolin can be similar to either) 397.77 332.52 P
(of these patterns, depending on when the voice is turned off.) 183.5 320.52 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(V) 0 -270 194.5 475.73 TF
(olume) 0 -270 194.5 481.48 TF
(V) 0 -270 194 403.38 TF
(olume) 0 -270 194 409.12 TF
(Acoustic Guitar) 442 517.48 T
6 8 Q
(V) 198 533.56 T
(oiceOn) 202.6 533.56 T
(V) 253.5 532.86 T
(oiceOff) 258.1 532.86 T
211.5 395 211.5 531.27 2 L
7 X
V
1 H
2 Z
11 X
N
265 395 265 530.86 2 L
7 X
V
11 X
N
199 455.7 342 470.97 R
7 X
V
6 10 Q
0 X
(T) 199 462.52 T
(ime) 205.14 462.52 T
199 471.37 343 529.26 R
0.5 H
0 Z
N
199 395 343 452.88 R
N
(V) 0 -270 368.5 475.73 TF
(olume) 0 -270 368.5 481.48 TF
(V) 0 -270 368 403.38 TF
(olume) 0 -270 368 409.12 TF
6 8 Q
(V) 372 533.56 T
(oiceOn) 376.6 533.56 T
(V) 427.5 532.86 T
(oiceOff) 432.1 532.86 T
385.5 395 385.5 531.27 2 L
1 H
2 Z
11 X
N
439 470.57 439 530.86 2 L
N
373 455.7 516 470.97 R
7 X
V
6 10 Q
0 X
(T) 373 462.52 T
(ime) 379.14 462.52 T
373 471.37 517 529.26 R
0.5 H
0 Z
N
373 395 517 452.88 R
N
(Flute) 300.94 518.28 T
(V) 301 438.7 T
(iolin) 307.42 438.7 T
(V) 431 438.7 T
(iolin, quick note) 437.42 438.7 T
410 395 410 455.3 2 L
1 H
2 Z
11 X
N
386 471.37 386 526.44 439.43 511.57 480 471.37 4 L
0 X
N
211.5 471.37 211.5 526.44 215.5 522 264.75 521.75 271.75 471.5 5 L
N
211 395 223 452.5 240.25 440.75 264.75 440.75 273 395 5 L
N
385.5 395 397 452.88 409.5 440.83 417 395 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "526" 22
%%Page: "527" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(527) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(Sustain Level) 180 641.33 T
1 F
-0.25 (The sound level will fall off at the decay rate until it has fallen) 243 629.33 P
-0.76 (to the sustain level. This sustain level is expressed as a fraction) 243 617.33 P
(of the note level, so you might, for example, specify that the) 243 605.33 T
-0.12 (sound level should stop decaying once it has fallen 25 percent.) 243 593.33 P
6 F
(Unlike a continuing instrument) 243 581.33 T
1 F
(, the sound level will) 388.34 581.33 T
(immediately move on to the release stage, regardless of) 243 569.33 T
(whether the voice has been turned off.) 243 557.33 T
4 F
(Release) 180 538.33 T
1 F
(The voice will decrease at a rate determined by the release) 243 538.33 T
-0.49 (value. The higher the release, the more quickly the sound level) 243 526.33 P
(will fall off. The sound will continue to fall until inaudible.) 243 514.33 T
(In case that isn\325) 180 294.54 T
(t enough to keep track of, consider the following: Y) 253.35 294.54 T
(ou may) 486.15 294.54 T
(also specify an) 180 281.54 T
1 9 Q
(ADSR) 250.01 281.54 T
1 10 Q
( envelope for your modulating signal. This actually) 275.68 281.54 T
(comes in handy\321many instruments attack with a rather broad sound, but) 180 268.54 T
(will sharpen to a single tone while sustaining or releasing. By setting up a) 180 255.54 T
(modulator envelope so that the modulator signal is strong while the main) 180 242.54 T
(signal is attacking but weak when the modulator is passed this point, you) 180 229.54 T
(may simulate this behavior) 180 216.54 T
(.) 305.77 216.54 T
81 144 531 648 C
181 310.21 531 511 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
181 310.21 531 511 R
7 X
0 0 0 1 0 0 0 K
V
183.5 264.19 526.99 347.19 R
V
0 10 Q
0 X
(Figure) 183.5 340.52 T
(13-) 216.84 340.52 T
(4) 231.29 340.52 T
6 F
(Diminishing Instrument Envelopes) 239.63 340.52 T
(The piano demonstrates the envelope of a typical diminishing instrument) 183.5 326.52 T
(envelope.) 183.5 314.52 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
(V) 0 -270 194.5 435.07 TF
(olume) 0 -270 194.5 440.82 TF
(V) 0 -270 194 361.72 TF
(olume) 0 -270 194 367.47 TF
(Grand Piano) 272 477.2 T
6 8 Q
(V) 198 493.51 T
(oiceOn) 202.6 493.51 T
(V) 253.5 492.79 T
(oiceOff) 258.1 492.79 T
211.5 353 211.5 491.14 2 L
7 X
V
1 H
2 Z
11 X
N
265 353 265 490.74 2 L
7 X
V
11 X
N
199 414.54 342 430.02 R
7 X
V
6 10 Q
0 X
(T) 199 421.49 T
(ime) 205.14 421.49 T
199 430.43 343 489.11 R
0.5 H
0 Z
N
199 353 343 411.68 R
N
(V) 0 -270 368.5 435.07 TF
(olume) 0 -270 368.5 440.82 TF
(V) 0 -270 368 361.72 TF
(olume) 0 -270 368 367.47 TF
6 8 Q
(V) 372 493.51 T
(oiceOn) 376.6 493.51 T
(V) 427.5 492.79 T
(oiceOff) 432.1 492.79 T
385.5 353 385.5 491.14 2 L
1 H
2 Z
11 X
N
439 429.61 439 490.74 2 L
N
373 414.54 516 430.02 R
7 X
V
6 10 Q
0 X
(T) 373 421.49 T
(ime) 379.14 421.49 T
373 430.43 517 489.11 R
0.5 H
0 Z
N
373 353 517 411.68 R
N
(Banjo) 484 478.02 T
(Bass Drum) 283 397.33 T
(Bass Drum, quick note) 400 397.33 T
410 353 410 414.13 2 L
1 H
2 Z
11 X
N
212 430.43 212 486.26 264.94 476.88 338.5 442 4 L
0 X
N
386 353.82 386 405.16 410 375.82 432.5 352.5 4 L
N
212 353 212 405.98 241.5 363.5 258 353 4 L
N
386 430.43 387 489.11 392 479.5 512.5 441.5 4 L
N
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "527" 23
%%Page: "528" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(528) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 12 Q
0 X
(Pieces of the Advanced Instrument Format) 180 640 T
1 10 Q
-0.15 (Now that you understand the main forces governing how your sound will be) 180 618.33 P
(modeled, you are ready to use the) 180 605.33 T
4 F
(SBIEnvelopeFormat) 337.98 605.33 T
1 F
( data structure.) 443.72 605.33 T
(This structure has \336elds for the following values:) 180 592.33 T
4 F
(SBIEF_carT) 135 572.33 T
(imbre: Carrier T) 197.53 572.33 T
(imbre) 282.66 572.33 T
1 F
(This \336eld contains several effects which may be applied to the carrier) 198 560.33 T
(wave.) 198 548.33 T
4 F
(Amplitude T) 180 529.33 T
(remolo) 244.1 529.33 T
1 F
(This \337ag requests that a wave signal be added to the carrier) 243 517.33 T
(\325) 521.38 517.33 T
(s) 523.05 517.33 T
(sound level, producing a sort of \322tremolo\323 effect.) 243 505.33 T
4 F
(Frequency V) 180 486.33 T
(ibrato) 245.76 486.33 T
1 F
(This \337ag requests that a wave signal be added to the carrier) 243 474.33 T
(\325) 521.38 474.33 T
(s) 523.05 474.33 T
(frequency) 243 462.33 T
(, producing a \322vibrato\323 effect. Note that the) 287.25 462.33 T
-0.17 (modulating signal adds a wave to the carrier) 243 450.33 P
-0.17 (\325) 449.08 450.33 P
-0.17 (s base frequency) 450.75 450.33 P
-0.17 (,) 525.61 450.33 P
(but vibrato is separate and different: The modulating) 243 438.33 T
(frequency is dependent on the note frequency) 243 426.33 T
(, but the vibrato) 451.51 426.33 T
(wave\325) 243 414.33 T
(s frequency is a constant; that is, you may control the) 268.38 414.33 T
(modulating amplitude, but the vibrato\325) 243 402.33 T
(s amplitude is \336xed.) 422.3 402.33 T
4 F
(Envelope T) 180 383.33 T
(ype) 237.9 383.33 T
1 F
(This \337ag speci\336es the envelope type of the) 243 371.33 T
(instrument\321continuing or diminishing.) 243 359.33 T
4 F
(Key Scaling Rate) 180 340.33 T
1 F
(Some instruments, especially stringed instruments, tend to) 243 328.33 T
(produce shorter notes at the higher frequencies. This \337ag) 243 316.33 T
(allows you to simulate this type of instrument\321at the higher) 243 304.33 T
(frequencies, the carrier) 243 292.33 T
(\325) 351.13 292.33 T
(s) 352.8 292.33 T
1 9 Q
(ADSR) 360.21 292.33 T
1 10 Q
( values will be boosted, so that) 385.88 292.33 T
(the note\325) 243 280.33 T
(s life span will be shorter) 282.45 280.33 T
(.) 398.21 280.33 T
4 F
(Frequency Multiplier) 180 261.33 T
1 F
-0.1 (Y) 243 249.33 P
-0.1 (ou may apply a multiplying factor to the carrier frequency) 248.93 249.33 P
-0.1 (. If) 515.46 249.33 P
-0.59 (this factor is greater than one, then the instrument will tend to) 243 237.33 P
(play notes at a higher pitch\321if the factor is two, for example,) 243 225.33 T
-0.22 (the instrument will play one octave higher than normal. If the) 243 213.33 P
(factor is one-half, then the instrument will play one octave) 243 201.33 T
(lower than normal.) 243 189.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "528" 24
%%Page: "529" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(529) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(SBIEF_carScaling: Carrier Scaling) 135 641.33 T
1 F
(This \336eld contains information about the carrier) 198 629.33 T
(\325) 421.9 629.33 T
(s basic scaling\321its) 423.57 629.33 T
(basic loudness, before the effects of the) 198 617.33 T
1 9 Q
(ADSR) 380.23 617.33 T
1 10 Q
( envelope are applied.) 405.9 617.33 T
4 F
(Key Scaling Level) 180 598.33 T
1 F
(Some instruments tend to play high-pitch notes quietly) 243 586.33 T
(. Y) 497.1 586.33 T
(ou) 508.59 586.33 T
-0.14 (may set this value to specify how much the sound level should) 243 574.33 P
(decrease when playing high frequencies: the higher the) 243 562.33 T
(number) 243 550.33 T
(, the faster the decrease. Zero means you want no) 278.37 550.33 T
(decrease.) 243 538.33 T
4 F
(T) 180 519.33 T
(otal Level) 186.3 519.33 T
1 F
(This is the base loudness of your instrument, but be) 243 519.33 T
-0.33 (careful\321the higher the number) 243 507.33 P
-0.33 (, the quieter the instrument. If) 387.94 507.33 P
(this value is zero, then you want your instrument to sound as) 243 495.33 T
(loud as possible.) 243 483.33 T
4 F
(SBIEF_carAttack: Carrier Attack/Decay) 135 464.33 T
1 F
(This \336eld contains the attack and decay portions of the carrier) 198 452.33 T
(\325) 486.35 452.33 T
(s) 488.02 452.33 T
1 9 Q
(ADSR) 495.43 452.33 T
1 10 Q
(envelope.) 198 440.33 T
4 F
(Attack) 180 421.33 T
1 F
(This is the instrument\325) 243 421.33 T
(s \322attack,\323 its rate of sound level) 348.57 421.33 T
(increase from none to the note\325) 243 409.33 T
(s sound level. This time could) 384.67 409.33 T
(range from something measured in seconds to nearly) 243 397.33 T
(instantaneous. Increasing the attack level by one effectively) 243 385.33 T
(doubles the attack rate. Percussive instruments tend to have) 243 373.33 T
(high attacks, bowed and wind instruments tend to have) 243 361.33 T
(medium to low attacks. Not many instruments have attack) 243 349.33 T
(levels towards the bottom of the scale, and the higher attack) 243 337.33 T
(levels are almost exclusively the province of special effects.) 243 325.33 T
4 F
(Decay) 180 306.33 T
1 F
(This is the instrument\325) 243 306.33 T
(s \322decay) 348.57 306.33 T
(,\323 its rate of decrease from the) 384.87 306.33 T
(note\325) 243 294.33 T
(s sound level to the sustain level. This rate of decay is) 264.67 294.33 T
(about one \336fteenth of an Attack of the same level \050i.e. decays) 243 282.33 T
(are on a slower scale than attacks\051. Instruments which get) 243 270.33 T
(quiet soon after being activated will have high attacks) 243 258.33 T
(\050especially diminishing-type instruments of this nature\051. A) 243 246.33 T
-0.34 (chime would have almost no decay) 243 234.33 P
-0.34 (, while a drum would have a) 399.84 234.33 P
-0.39 (medium-level decay\321almost no instruments will have a decay) 243 222.33 P
(more than halfway up the scale.) 243 210.33 T
4 F
(SBIEF_carSustain: Carrier Sustain/Release) 135 191.33 T
1 F
-0.36 (This \336eld contains the sustain and release portions of the carrier) 198 179.33 P
-0.36 (\325) 494.2 179.33 P
-0.36 (s) 495.87 179.33 P
1 9 Q
-0.33 (ADSR) 502.92 179.33 P
1 10 Q
(envelope.) 198 167.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "529" 25
%%Page: "530" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(530) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(Sustain) 180 641.33 T
1 F
-0.6 (This is the instrument\325) 243 641.33 P
-0.6 (s \322sustain.\323 It is a fraction, which will be) 346.76 641.33 P
(multiplied by the note level to \336nd the true sustain level.) 243 629.33 T
-0.56 (Continuing-type instruments will stay at this sound level until) 243 617.33 P
-0.47 (they encounter a voice-off command. Diminishing instruments) 243 605.33 P
(will not \050proceeding immediately to release\051.) 243 593.33 T
4 F
(Release) 180 574.33 T
1 F
-0.28 (This is the instrument\325) 243 574.33 P
-0.28 (s \322release,\323 its rate of decrease from the) 347.71 574.33 P
-0.45 (sustain level to silence. This rate will be the same as a decay of) 243 562.33 P
(the same level \050i.e. decays and releases happen at the same) 243 550.33 T
-0.6 (rate\051. In a piano, a damper hits the string when you release the) 243 538.33 P
(key) 243 526.33 T
(, stopping sound quickly; a piano has a high release. Bells,) 258.19 526.33 T
-0.43 (which continue vibrating for a long time after being hit, have a) 243 514.33 P
(low release rate.) 243 502.33 T
4 F
(SBIEF_carW) 135 483.33 T
(ave: Carrier W) 199.63 483.33 T
(ave) 274.08 483.33 T
1 F
(Most natural sounds correspond to a sine wave. However) 198 471.33 T
(, you may) 460.79 471.33 T
(request another type of wave.) 198 459.33 T
4 F
(W) 180 440.33 T
(ave T) 189.07 440.33 T
(ype) 216.6 440.33 T
1 F
(There are four choices of wave:) 243 440.33 T
2 F
(u) 180 421.33 T
1 F
(Sine wave. The standard y = sin\050x\051 curve.) 198 421.33 T
2 F
(u) 180 402.33 T
1 F
-0.36 (T) 198 402.33 P
-0.36 (runcated sine wave: y =) 204.05 402.33 P
1 9 Q
-0.32 ( MAX) 311.83 402.33 P
1 10 Q
-0.36 (\0500, sin\050x\051\051. This results in something like a) 335.33 402.33 P
(square wave.) 198 390.33 T
2 F
(u) 180 371.33 T
1 F
(Absolute value sine wave: y = |sin\050x\051|. This results in something) 198 371.33 T
(approaching a triangle wave. This results in a somewhat \322tinny\323 sound.) 198 359.33 T
2 F
(u) 180 340.33 T
1 F
-0.21 (Chopped sine wave: { 0) 198 340.33 P
9 F
-0.19 (\243) 305.67 340.33 P
1 F
-0.21 ( x) 311.15 340.33 P
9 F
-0.19 (\243) 321.66 340.33 P
1 F
-0.21 ( 90, 180) 327.15 340.33 P
9 F
-0.19 (\243) 365.44 340.33 P
1 F
-0.21 (x) 373.24 340.33 P
9 F
-0.19 (\243) 381.18 340.33 P
1 F
-0.21 ( 270: y = |sin\050x\051|; 90) 386.67 340.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
9 F
-0.19 (\243) 484.91 340.33 P
1 F
-0.21 ( x) 490.4 340.33 P
9 F
-0.19 (\243) 500.91 340.33 P
1 F
-0.21 ( 180,) 506.4 340.33 P
(270) 198 328.33 T
9 F
(\243) 217.46 328.33 T
1 F
( x) 222.95 328.33 T
9 F
( \243) 231.1 328.33 T
1 F
( 360: y = 0}. This wave is similar to a sawtooth wave.) 239.09 328.33 T
4 F
(SBIEF_modT) 135 309.33 T
(imbre: Modulator T) 203.08 309.33 T
(imbre) 303.94 309.33 T
1 F
(This \336eld contains a number of effects which you may apply to the) 198 297.33 T
(modulator signal. Thus, applying a tremolo effect results in a sound) 198 285.33 T
(which wobbles in breadth over time\321the amplitude of the modulator is) 198 273.33 T
(being changed, not that of the \336nal signal.) 198 261.33 T
4 F
(Amplitude T) 180 242.33 T
(remolo) 244.1 242.33 T
1 F
-0.59 (This \337ag adds a sine wave signal to the modulator) 243 230.33 P
-0.59 (\325) 470.31 230.33 P
-0.59 (s amplitude.) 471.98 230.33 P
-0.02 (Y) 243 218.33 P
-0.02 (ou will recall that the modulator) 248.93 218.33 P
-0.02 (\325) 399.58 218.33 P
-0.02 (s amplitude determines the) 401.25 218.33 P
(\322breadth\323 of the sound\321how far it will extend into other) 243 206.33 T
(frequencies. Applying a tremolo effect to this value will cause) 243 194.33 T
(the sound to vary in breadth over time.) 243 182.33 T
4 F
(Frequency V) 180 163.33 T
(ibrato) 245.76 163.33 T
1 F
-0.32 (This \337ag adds a sine wave signal to the modulator) 243 151.33 P
-0.32 (\325) 472.75 151.33 P
-0.32 (s frequency) 474.42 151.33 P
-0.32 (.) 525.76 151.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "530" 26
%%Page: "531" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(531) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Y) 243 641.33 T
(ou will recall that the frequency determines the distance) 248.93 641.33 T
(between frequencies at which the carrier signal will have) 243 629.33 T
-0.12 (sound. If you have set up the modulating signal to have sound) 243 617.33 P
(appear at the harmonics, then applying this effect will cause) 243 605.33 T
(the supplement sounds to warble around the harmony level.) 243 593.33 T
4 F
(Envelope T) 180 574.33 T
(ype) 237.9 574.33 T
1 F
(This \337ag speci\336es the envelope type of the modulator signal\325) 243 562.33 T
(s) 520.44 562.33 T
(envelope \050continuing or diminishing\051.) 243 550.33 T
4 F
(Key Scaling Rate) 180 531.33 T
1 F
-0.31 (This \337ag boosts the) 243 519.33 P
1 9 Q
-0.28 (ADSR) 334.17 519.33 P
1 10 Q
-0.31 ( values of the modulator signal when) 359.84 519.33 P
(the note is at a high pitch. Y) 243 507.33 T
(ou would apply this factor if an) 373.03 507.33 T
(instrument\325) 243 495.33 T
(s breadth dissipated faster at high frequencies.) 296.89 495.33 T
4 F
(Frequency Multiplier) 180 476.33 T
1 F
(This is the \336eld which gives you your main control over the) 243 464.33 T
(modulating signal\325) 243 452.33 T
(s frequency) 328.39 452.33 T
(. Y) 380.05 452.33 T
(ou may apply a multiplying) 391.54 452.33 T
(factor to the modulating signal\325) 243 440.33 T
(s frequency) 387.28 440.33 T
(. If the modulating) 438.94 440.33 T
-0.08 (signal\325) 243 428.33 P
-0.08 (s frequency is the same as the carrier frequency) 272.64 428.33 P
-0.08 (, then it) 491.98 428.33 P
(will create harmonic frequencies. If the modulating frequency) 243 416.33 T
(is a multiple of the carrier frequency) 243 404.33 T
(, then it will generate) 411.15 404.33 T
(harmonic frequencies, and others in between. If the) 243 392.33 T
(modulating frequency is a fraction of the carrier frequency) 243 380.33 T
(,) 511.88 380.33 T
(then it will generate some but not all harmonic frequencies.) 243 368.33 T
(Percussion instruments, whose sounds tend to manifest as) 243 356.33 T
(quick bursts of noise, tend to have very high modulator) 243 344.33 T
(frequency multipliers.) 243 332.33 T
4 F
(SBIEF_modScaling: Modulator Scaling) 135 313.33 T
1 F
-0.31 (These \336elds allow you to control the amplitude of the modulating signal,) 198 301.33 P
(and thus the breadth of the carrier signal.) 198 289.33 T
4 F
(Key Scaling Level) 180 270.33 T
1 F
-0.07 (This \336eld speci\336es that the amplitude should be lower when a) 243 258.33 P
(high-pitch note is played. This means that higher notes will) 243 246.33 T
-0.74 (seem sharper) 243 234.33 P
-0.74 (, more piercing. The greater the value of this \336eld,) 303.74 234.33 P
-0.66 (the more quickly the amplitude will fall off; if this value is zero,) 243 222.33 P
(then the amplitude will be unaffected.) 243 210.33 T
4 F
(T) 180 191.33 T
(otal Level) 186.3 191.33 T
1 F
(This \336eld allows you to directly change the amplitude of the) 243 191.33 T
(modulator signal\321but be careful: the higher the value of this) 243 179.33 T
-0.48 (\336eld, the lower the amplitude. The lower the value of this \336eld,) 243 167.33 P
(the broader the sound.) 243 155.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "531" 27
%%Page: "532" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(532) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(SBIEF_modAttack: Modulator Attack/Decay) 135 641.33 T
1 F
(These \336elds allow you to control the attack and decay portions of the) 198 629.33 T
(modulating signal\325) 198 617.33 T
(s) 283.39 617.33 T
1 9 Q
(ADSR) 290.8 617.33 T
1 10 Q
( envelope.) 316.47 617.33 T
4 F
(Attack) 180 598.33 T
1 F
-0.83 (This \336eld determines how quickly the modulating signal will go) 243 598.33 P
(to full amplitude\321creating the broadest sound. This is often) 243 586.33 T
(one or two levels higher than the carrier signal\325) 243 574.33 T
(s attack level) 461.72 574.33 T
(\050resulting in an actual attack rate two to four times faster\051,) 243 562.33 T
(resulting in a sound broadest during the carrier) 243 550.33 T
(\325) 464.48 550.33 T
(s attack) 466.15 550.33 T
-0.23 (period, characteristic of many instruments. W) 243 538.33 P
-0.23 (ind instruments) 454.05 538.33 P
(tend to have a slow modulating attack.) 243 526.33 T
4 F
(Decay) 180 507.33 T
1 F
(This \336eld determines the rate at which the modulating) 243 507.33 T
-0.28 (amplitude will decrease until it reaches the sustain level. This) 243 495.33 P
(value is normally kept low to maintain the instrument\325) 243 483.33 T
(s) 496.57 483.33 T
(breadth during and beyond the instrument\325) 243 471.33 T
(s attack.) 443.2 471.33 T
4 F
(SBIEF_modSustain: Modulator Sustain/Release) 135 452.33 T
1 F
(These \336elds control the sustain and release portions of the modulating) 198 440.33 T
(signal\325) 198 428.33 T
(s) 227.64 428.33 T
1 9 Q
(ADSR) 235.05 428.33 T
1 10 Q
( envelope.) 260.72 428.33 T
4 F
(Sustain) 180 409.33 T
1 F
(This determines the level to which the amplitude will be) 243 409.33 T
-0.56 (allowed to decay) 243 397.33 P
-0.56 (. If the modulating signal is continuing-type, it) 316.72 397.33 P
(will remain at this sustain level until the voice is turned off.) 243 385.33 T
4 F
(Release) 180 366.33 T
1 F
-0.24 (This determines the rate at which the amplitude will decrease) 243 366.33 P
(from the sustain level. The higher the value, the faster the) 243 354.33 T
(sound will reduce to a pure tone.) 243 342.33 T
4 F
(SBIEF_modW) 135 323.33 T
(ave: Modulator W) 205.18 323.33 T
(ave) 295.36 323.33 T
1 F
(Y) 198 311.33 T
(ou may apply any supported wave type in place of a sine wave for the) 203.93 311.33 T
(modulator signal. This allows you to change the distribution of sounds) 198 299.33 T
(over other frequencies.) 198 287.33 T
4 F
(W) 180 268.33 T
(ave T) 189.07 268.33 T
(ype) 216.6 268.33 T
1 F
(There are four choices of wave:) 243 268.33 T
2 F
(u) 180 249.33 T
1 F
(Sine wave. The standard y = sin\050x\051 curve.) 198 249.33 T
2 F
(u) 180 230.33 T
1 F
-0.38 (T) 198 230.33 P
-0.38 (runcated sine wave: y =) 204.05 230.33 P
1 9 Q
-0.34 (MAX) 314.15 230.33 P
1 10 Q
-0.38 (\0500, sin\050x\051\051. This results in something like a) 335.48 230.33 P
(square wave.) 198 218.33 T
2 F
(u) 180 199.33 T
1 F
(Absolute value sine wave: y = |sin\050x\051|. This results in something) 198 199.33 T
(approaching a triangle wave.) 198 187.33 T
2 F
(u) 180 168.33 T
1 F
-0.21 (Chopped sine wave: { 0) 198 168.33 P
9 F
-0.19 (\243) 305.67 168.33 P
1 F
-0.21 ( x) 311.15 168.33 P
9 F
-0.19 (\243) 321.66 168.33 P
1 F
-0.21 ( 90, 180) 327.15 168.33 P
9 F
-0.19 (\243) 365.44 168.33 P
1 F
-0.21 (x) 373.24 168.33 P
9 F
-0.19 (\243) 381.18 168.33 P
1 F
-0.21 ( 270: y = |sin\050x\051|; 90) 386.67 168.33 P
0 1 1 0 1 0 0 K
0 0 0 1 0 0 0 K
9 F
-0.19 (\243) 484.91 168.33 P
1 F
-0.21 ( x) 490.4 168.33 P
9 F
-0.19 (\243) 500.91 168.33 P
1 F
-0.21 ( 180,) 506.4 168.33 P
(270) 198 156.33 T
9 F
(\243) 217.46 156.33 T
1 F
( x) 222.95 156.33 T
9 F
( \243) 231.1 156.33 T
1 F
( 360: y = 0}. This wave is similar to a sawtooth wave.) 239.09 156.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "532" 28
%%Page: "533" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Simulating Musical Instruments) 347.17 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(533) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(13.10) 537.65 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
4 10 Q
0 X
(SBIEF_feedback: Feedback) 135 641.33 T
1 F
-0.69 (This \336eld allows you to change the way the modulator and carrier signals) 198 629.33 P
(are combined.) 198 617.33 T
4 F
(Feedback T) 180 598.33 T
(ype) 239.76 598.33 T
1 F
-0.17 (Instead of adding the modulating signal to the note frequency) 243 586.33 P
-0.17 (,) 525.61 586.33 P
(you can bypass all frequency modulation and just add the) 243 574.33 T
-0.37 (outputs of the \322modulator\323 and \322carrier\323 signals. If you set this) 243 562.33 P
-0.49 (\337ag, then both signals become, in effect \322carrier\323 signals\321both) 243 550.33 P
(will generate a note, not a breadth.) 243 538.33 T
4 F
(Feedback Level) 180 519.33 T
1 F
(Whether it\325) 243 507.33 T
(s being used as a modulator signal, or just as) 294.85 507.33 T
(another \322carrier) 243 495.33 T
(,\323 the modulator can feed back to itself. This) 316.51 495.33 T
(means that some fraction of its output in a given tick may be) 243 483.33 T
(added to its frequency input.) 243 471.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "533" 29
%%Page: "534" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Sound Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(534) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(13.10) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "534" 30
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 30
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ Courier
%%+ NewCenturySchlbk-Bold
%%+ Courier-Oblique
%%+ NewCenturySchlbk-Italic
%%+ Times-Roman
%%+ NewCenturySchlbk-BoldItalic
%%+ Symbol
%%EOF
