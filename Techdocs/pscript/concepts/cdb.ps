%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 19 FMDOCUMENT
0 0 /Helvetica-Bold FMFONTDEFINE
1 0 /NewCenturySchlbk-Roman FMFONTDEFINE
2 1 /ZapfDingbats FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Times-Bold FMFONTDEFINE
5 0 /NewCenturySchlbk-Bold FMFONTDEFINE
6 0 /Courier FMFONTDEFINE
7 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "719" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Design Philosophy) 431.97 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(719) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.1) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 10 Q
0 X
(Some applications need to keep track of many small pieces of data. For) 180 606.33 T
-0.44 (example, a database might use thousands of items of data, each of them only) 180 593.33 P
-0.03 (a paragraph long; in a spreadsheet, the data size might be only a few bytes.) 180 580.33 P
1 9 Q
-0.19 (GEOS) 180 567.33 P
1 10 Q
-0.21 ( provides a Database \050) 206.17 567.33 P
1 9 Q
-0.19 (DB) 307.94 567.33 P
1 10 Q
-0.21 (\051 library to make it easy to keep track of such) 321.44 567.33 P
(data and store them conveniently in a) 180 554.33 T
1 9 Q
(GEOS) 357.99 554.33 T
1 10 Q
( V) 384.16 554.33 T
(irtual Memory \336le.) 393.72 554.33 T
(The) 180 534.33 T
1 9 Q
(DB) 200.56 534.33 T
1 10 Q
( library manages Local Memory heaps in a) 214.06 534.33 T
1 9 Q
(VM) 413.91 534.33 T
1 10 Q
( \336le and uses these) 428.9 534.33 T
(heaps to store items. It lets the geode associate items into groups; these) 180 521.33 T
(groups can grow inde\336nitely) 180 508.33 T
(, unlike LMem heaps.) 310 508.33 T
(Before you read this chapter) 180 488.33 T
(, you should have read \322Handles,\323 Chapter) 310.55 488.33 T
(14,) 509.83 488.33 T
(and \322Memory Management,\323 Chapter) 180 475.33 T
(15. Y) 356.12 475.33 T
(ou should also be familiar with) 378.73 475.33 T
(basic LMem principles \050see \322Local Memory) 180 462.33 T
(,\323 Chapter) 376.49 462.33 T
(16\051 and with V) 426.68 462.33 T
(irtual) 494.59 462.33 T
(Memory \336les \050see \322V) 180 449.33 T
(irtual Memory) 274 449.33 T
(,\323 Chapter) 340.11 449.33 T
(18\051.) 390.3 449.33 T
0 14 Q
(19.1) 134.76 397 T
0 24 Q
(Design Philosophy) 180 397 T
1 10 Q
(A database manager should be \337exible, allowing applications to store a) 180 371.33 T
(variety of data items. It should be ef\336cient, with minimal overhead in) 180 358.33 T
-0.4 (data-access time as well as in memory usage \050whether in main memory or in) 180 345.33 P
(disk space\051. Ideally) 180 332.33 T
(, it ought to insulate applications from the details of) 267.42 332.33 T
-0.65 (memory allocation and data referencing. The) 180 319.33 P
1 9 Q
-0.59 (GEOS) 386.48 319.33 P
1 10 Q
-0.65 ( database manager meets) 412.65 319.33 P
(all of these requirements and several more:) 180 306.33 T
2 F
(u) 180 286.33 T
1 F
(Flexible Data Formats) 198 286.33 T
(The) 198 274.33 T
1 9 Q
(DB) 218.56 274.33 T
1 10 Q
( Manager does not care about the content of a) 232.06 274.33 T
1 9 Q
(DB) 445.6 274.33 T
1 10 Q
( item.) 459.1 274.33 T
-0.5 (Consequently) 198 262.33 P
-0.5 (, a) 260.04 262.33 P
1 9 Q
-0.45 (DB) 272.93 262.33 P
1 10 Q
-0.5 ( item can be anything that can \336t in an LMem chunk.) 286.43 262.33 P
(An application can use one \336le to store many different sizes of database) 198 250.33 T
(item.) 198 238.33 T
2 F
(u) 180 219.33 T
1 F
(Speed and Ef\336ciency) 198 219.33 T
(The) 198 207.33 T
1 9 Q
(GEOS) 218.56 207.33 T
(DB) 247.51 207.33 T
1 10 Q
( library uses the powerful) 261.01 207.33 T
1 9 Q
(GEOS) 382.5 207.33 T
1 10 Q
( memory management,) 408.67 207.33 T
-0.74 (V) 198 195.33 P
-0.74 (irtual Memory) 204.78 195.33 P
-0.74 (, and Local Memory routines. These enable it to store and) 270.15 195.33 P
-0.5 (access many database items with a minimal overhead in access time and) 198 183.33 P
(storage space.) 198 171.33 T
81 144 531 648 C
235.5 630 376.5 638 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
235.5 630 376.5 638 R
7 X
0 0 0 1 0 0 0 K
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 0 1 0 0 0 K
81 441.47 171 494.45 C
0 0 0 1 0 0 0 K
1 X
0 0 0 1 0 0 0 K
90 450 13.5 13.5 101.25 470.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 470.33 A
0 0 0 1 0 0 0 K
81 450.21 121.5 490.71 R
1 H
0 X
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "719" 1
%%Page: "720" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(720) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(Uniform Data-Access Format) 198 641.33 T
-0.42 (Database items are stored in standard) 198 629.33 P
1 9 Q
-0.38 (GEOS) 375.91 629.33 P
1 10 Q
-0.42 ( V) 402.08 629.33 P
-0.42 (irtual Memory \336les. All of) 411.22 629.33 P
(the \336le-access utilities \050such as the document control objects\051 can work) 198 617.33 T
(unchanged with database \336les. Furthermore,) 198 605.33 T
1 9 Q
(VM) 409.32 605.33 T
1 10 Q
( \336les can contain both) 424.31 605.33 T
(ordinary) 198 593.33 T
1 9 Q
(VM) 240.59 593.33 T
1 10 Q
( blocks and) 255.58 593.33 T
1 9 Q
(DB) 310.04 593.33 T
1 10 Q
( items in any combination.) 323.54 593.33 T
2 F
(u) 180 574.33 T
1 F
(Full Group Management) 198 574.33 T
(Applications can divide) 198 562.33 T
1 9 Q
(DB) 308.38 562.33 T
1 10 Q
( items into groups. Access time is improved) 321.88 562.33 T
(when items from the same group are accessed in succession. As an) 198 550.33 T
(alternative, applications can let the) 198 538.33 T
1 9 Q
(DB) 365.07 538.33 T
1 10 Q
( manager create and assign) 378.57 538.33 T
(groups for the items.) 198 526.33 T
2 F
(u) 180 507.33 T
1 F
(Sharable Data) 198 507.33 T
(Since) 198 495.33 T
1 9 Q
(DB) 225.78 495.33 T
1 10 Q
( items are stored in) 239.28 495.33 T
1 9 Q
(VM) 331.7 495.33 T
1 10 Q
( \336les, the \336les can be shared between) 346.69 495.33 T
(applications. All of the standard) 198 483.33 T
1 9 Q
(VM) 349.32 483.33 T
1 10 Q
( synchronization routines work for) 364.31 483.33 T
1 9 Q
(DB) 198 471.33 T
1 10 Q
( \336les.) 211.5 471.33 T
0 14 Q
(19.2) 134.76 420 T
0 24 Q
(Database Structure) 180 420 T
1 10 Q
(The Database Library uses a Database Manager to access and create) 180 394.33 T
1 9 Q
(DB) 501.37 394.33 T
1 10 Q
(items. These items are stored in a standard) 180 381.33 T
1 9 Q
(VM) 383.74 381.33 T
1 10 Q
( \336le. This chapter will) 398.73 381.33 T
(sometimes refer to a \322Database File\323; this simply means a) 180 368.33 T
1 9 Q
(VM) 450.07 368.33 T
1 10 Q
( \336le which) 465.06 368.33 T
(contains) 180 355.33 T
1 9 Q
(DB) 221.67 355.33 T
1 10 Q
( items.) 235.17 355.33 T
0 14 Q
(19.2.1) 123.08 313 T
0 18 Q
(DB Items) 180 313 T
1 10 Q
-0.17 (The basic unit of data is the) 180 289.33 P
3 F
-0.17 (item) 310.5 289.33 P
1 F
-0.17 (. Items are simply chunks in special LMem) 330.68 289.33 P
(heaps which are managed by the) 180 276.33 T
1 9 Q
(DB) 334.47 276.33 T
1 10 Q
( Manager; these heaps are called) 347.97 276.33 T
3 F
(item) 502.62 276.33 T
(blocks) 180 263.33 T
1 F
(. Y) 208.33 263.33 T
(ou will not need to use any of the LMem routines; the) 219.82 263.33 T
1 9 Q
(DB) 469.48 263.33 T
1 10 Q
( manager) 482.98 263.33 T
(will create and destroy LMem heaps as necessary and will call the) 180 250.33 T
(appropriate routines to lock) 180 237.33 T
1 9 Q
(DB) 311.12 237.33 T
1 10 Q
( items when needed.) 324.62 237.33 T
(Each) 180 217.33 T
1 9 Q
(DB) 206.11 217.33 T
1 10 Q
( item in a) 219.61 217.33 T
1 9 Q
(DB) 266.48 217.33 T
1 10 Q
( \336le is uniquely identi\336ed by the combination of a) 279.98 217.33 T
3 F
-0.24 (group-handle) 180 204.33 P
1 F
-0.24 ( and an) 241.83 204.33 P
3 F
-0.24 (item-handle) 278.52 204.33 P
1 F
-0.24 (. Note that these handles are not the same) 333.88 204.33 P
-0.81 (as the item\325) 180 191.33 P
-0.81 (s LMem Heap handle and its chunk handle. Y) 231.74 191.33 P
-0.81 (ou will not generally) 436.61 191.33 P
-0.66 (need to use the item\325) 180 178.33 P
-0.66 (s heap and chunk handles; the) 272.55 178.33 P
1 9 Q
-0.6 (DB) 412.48 178.33 P
1 10 Q
-0.66 ( routines store and use) 425.98 178.33 P
(these automatically) 180 165.33 T
(. However) 270.02 165.33 T
(, you can retrieve them if necessary \050for) 315.76 165.33 T
(example, if you want to use an LMem utility on a) 180 152.33 T
1 9 Q
(DB) 410.05 152.33 T
1 10 Q
( item\051.) 423.55 152.33 T
0 0 0 1 0 0 0 K
81 144 171 264.45 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Important) 81 211.45 T
1 F
(DB group- and) 81 195.45 T
(item-handles are) 81 184.45 T
(different from LMem) 81 173.45 T
(heap- and) 81 162.45 T
(chunk-handles.) 81 151.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
81.5 263.95 170.5 263.95 2 L
1 H
2 Z
N
1 X
90 450 13.5 13.5 101.25 240.33 G
4 H
90 450 13.5 13.5 101.25 240.33 A
81 220.21 121.5 260.71 R
1 H
0 X
N
0 0 0 0 1 1 1 K
4 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 228.27 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "720" 2
%%Page: "721" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Structure) 429.63 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(721) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.53 (The) 180 641.33 P
1 9 Q
-0.47 (DB) 200.03 641.33 P
1 10 Q
-0.53 ( Manager does not keep track of allocated items. Once you allocate an) 213.53 641.33 P
-0.33 (item, you must store the group- and item-handles. If you lose them, the item) 180 628.33 P
(will remain in the \336le, but you will not be able to \336nd it again.) 180 615.33 T
(Since) 180 595.33 T
1 9 Q
(DB) 207.78 595.33 T
1 10 Q
( items are chunks, their addresses are somewhat volatile. If you) 221.28 595.33 T
-0.24 (allocate an item in a group, other items in that group may move even if they) 180 582.33 P
(are locked. \050See section 16.2.2 of chapter 16.\051) 180 569.33 T
0 14 Q
(19.2.2) 123.08 527 T
0 18 Q
(DB Groups) 180 527 T
1 10 Q
-0.15 (Each) 180 503.33 P
1 9 Q
-0.13 (DB) 205.96 503.33 P
1 10 Q
-0.15 ( item is a member of a) 219.46 503.33 P
1 9 Q
-0.13 (DB) 323.82 503.33 P
1 10 Q
-0.15 ( group. The) 337.32 503.33 P
1 9 Q
-0.13 (DB) 392.43 503.33 P
1 10 Q
-0.15 ( group is a collection of) 405.93 503.33 P
1 9 Q
-0.13 (VM) 513.38 503.33 P
1 10 Q
(blocks; the group comprises a single) 180 490.33 T
3 F
(group block) 348.72 490.33 T
1 F
( and zero or more item) 402.05 490.33 T
(blocks.) 180 477.33 T
-0.62 (The group block contains information about each item block and each item in) 180 457.33 P
-0.32 (the group. For each item block, it records the) 180 444.33 P
1 9 Q
-0.29 (VM) 387.31 444.33 P
1 10 Q
-0.32 ( handle of the block and the) 402.3 444.33 P
-0.31 (number of) 180 431.33 P
1 9 Q
-0.28 (DB) 229.38 431.33 P
1 10 Q
-0.31 ( items in the block. For each) 242.88 431.33 P
1 9 Q
-0.28 (DB) 374.09 431.33 P
1 10 Q
-0.31 ( item, it records the) 387.59 431.33 P
1 9 Q
-0.28 (VM) 479.39 431.33 P
1 10 Q
-0.31 ( handle) 494.39 431.33 P
(of the item block in which the item is stored and the item\325) 180 418.33 T
(s chunk handle) 445.97 418.33 T
-0.32 (within that item block. The item blocks are simply LMem heaps with a little) 180 405.33 P
(extra information in the headers.) 180 392.33 T
-0.09 (The item\325) 180 372.33 P
-0.09 (s group-handle is simply the) 223.07 372.33 P
1 9 Q
-0.08 (VM) 356.52 372.33 P
1 10 Q
-0.09 ( handle of the group block for that) 371.52 372.33 P
(group. The item\325) 180 359.33 T
(s item-handle is an offset into the group block; the) 255.38 359.33 T
(information about the item is stored at that offset. When you lock an item,) 180 346.33 T
(the) 180 333.33 T
1 9 Q
(DB) 197.78 333.33 T
1 10 Q
( manager looks in that location in the group block and reads the) 211.28 333.33 T
(handles of the item block and the chunk associated with that item; it then) 180 320.33 T
-0.57 (locks the item block and returns the address of the chunk. \050In assembly code,) 180 307.33 P
(it returns the segment address and the chunk handle.\051 The relationship) 180 294.33 T
(between the different blocks and handles is shown in Figure) 180 281.33 T
(19-) 460.96 281.33 T
(1 on) 475.41 281.33 T
(page) 180 268.33 T
2 F
(l) 204.45 268.33 T
1 F
(722.) 215.14 268.33 T
-0.45 (Whenever you access a) 180 248.33 P
1 9 Q
-0.4 (DB) 286.91 248.33 P
1 10 Q
-0.45 ( item, the) 300.41 248.33 P
1 9 Q
-0.4 (DB) 346.12 248.33 P
1 10 Q
-0.45 ( manager has to lock the block. If you) 359.62 248.33 P
-0.06 (access several items in a row) 180 235.33 P
-0.06 (, the overall access time is better if they belong) 312.13 235.33 P
(to the same group since only one group block will need to be swapped in to) 180 222.33 T
-0.38 (memory) 180 209.33 P
-0.38 (. The items may also be in the same item-block since each item block) 216.48 209.33 P
-0.07 (contains items from only one group; again, this improves access time. Thus,) 180 196.33 P
(it is a good idea to distribute items in groups according to the way they will) 180 183.33 T
(be accessed; for example, an address-book database might group entries) 180 170.33 T
(according to the \336rst letter of the last name, thus speeding up alphabetical) 180 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "721" 3
%%Page: "722" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(722) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.2) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.31 (access. If you have no logical way to group items, see \322Ungrouped DB Items\323) 180 641.33 P
(on page 723.) 180 628.33 T
0 14 Q
(19.2.3) 123.08 586 T
0 18 Q
(Allocating Groups and Items) 180 586 T
1 10 Q
(When you need a new) 180 562.33 T
1 9 Q
(DB) 283.71 562.33 T
1 10 Q
( group, call the) 297.21 562.33 T
1 9 Q
(DB) 369.07 562.33 T
1 10 Q
( routine) 382.57 562.33 T
5 F
(DBGroupAlloc\050\051) 421.83 562.33 T
1 F
( \050see) 505.17 562.33 T
(page 725\051. This routine creates and initializes a) 180 549.33 T
1 9 Q
(DB) 402.64 549.33 T
1 10 Q
( group block.) 416.14 549.33 T
-0.7 (When you allocate a) 180 529.33 P
1 9 Q
-0.63 (DB) 273.13 529.33 P
1 10 Q
-0.7 ( item, you specify which group the item will go in. The) 286.63 529.33 P
1 9 Q
-0.2 (DB) 180 516.33 P
1 10 Q
-0.23 ( manager sets up an entry for the item in the group block. It then decides) 193.5 516.33 P
-0.27 (which item block to put the item in. It tries to keep all the item blocks at the) 180 503.33 P
(right size to optimize speed. If all of the group\325) 180 490.33 T
(s item blocks are too full, it) 393.9 490.33 T
-0.43 (allocates a new item block and allocates the new item in that block. In either) 180 477.33 P
(case, it returns the new item\325) 180 464.33 T
(s item-handle.) 314.46 464.33 T
81 144 531 648 C
0 0 0 1 0 0 0 K
180 144 531 459.81 C
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Figure) 180 246.81 T
(19-) 213.34 246.81 T
(1) 227.79 246.81 T
3 F
(Dereferencing a) 236.13 246.81 T
3 9 Q
(DB) 310.54 246.81 T
3 10 Q
( Item) 324.04 246.81 T
(A) 180 232.81 T
3 9 Q
(DB) 189.82 232.81 T
3 10 Q
( item\325) 203.32 232.81 T
(s group- and item-handles indicate an entry in the group block) 227.95 232.81 T
(which has information on that item\325) 180 220.81 T
(s item block handle and chunk handle.) 344.61 220.81 T
-0.35 (Here, we dereference the) 180 208.81 P
3 9 Q
-0.32 (DB) 291.49 208.81 P
3 10 Q
-0.35 ( item with group-handle 0x00a0 and item-handle) 304.99 208.81 P
(0x002c. The blocks are shown with their) 180 196.81 T
3 9 Q
(VM) 366.29 196.81 T
3 10 Q
( handles \050not their global) 381.12 196.81 T
(handles\051. Addresses next to the blocks indicate offsets into the blocks.) 180 184.81 T
(Note that the mechanics are transparent to the application, which simply) 180 170.81 T
(passes the) 180 158.81 T
3 9 Q
(DB) 228.87 158.81 T
3 10 Q
( group- & item-handles to the) 242.37 158.81 T
3 9 Q
(DB) 379.94 158.81 T
3 10 Q
( routine and is returned the) 393.44 158.81 T
(address of the) 180 146.81 T
3 9 Q
(DB) 246.46 146.81 T
3 10 Q
( item.) 259.96 146.81 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
227 285.82 295.33 409.15 R
4 X
V
1 H
0 Z
0 X
N
227.01 283.47 295.35 310.14 R
7 X
V
0.5 H
0 X
N
(Group Block) 232.48 299.15 T
(Header) 244.43 289.14 T
227 341.42 295.33 358.35 R
7 X
V
0 X
N
(IBH: 0x01f0) 233.29 346.24 T
227 358.35 295.33 375.28 R
7 X
V
0 X
N
(CH: 0x0034) 234.21 363.17 T
410.5 284.39 488.83 442.72 R
4 X
V
1 H
0 X
N
410.49 284.54 488.83 311.21 R
7 X
V
0.5 H
0 X
N
(Item Block) 425.04 300.22 T
(Header) 432.91 290.21 T
410.5 311.69 488.83 371.48 R
6 X
V
0 X
N
(Chunk Handle) 415.69 323.74 T
(T) 437.07 313.74 T
(able) 443.18 313.74 T
410.5 342.21 488.83 356.89 R
7 X
V
0 X
N
(0x0098) 433.26 345.87 T
410.5 409.71 488.83 433.05 R
7 X
V
0 X
N
3 9 Q
(DB) 431.06 417.7 T
3 10 Q
( Item) 444.56 417.7 T
3 9 Q
(VM) 233.95 273.1 T
3 10 Q
( Handle:) 248.78 273.1 T
(0x00a0) 244.68 263.1 T
3 9 Q
(VM) 423.55 272.52 T
3 10 Q
( handle:) 438.38 272.52 T
(0x01f0) 434.38 262.52 T
222.64 274.18 227.83 271.18 222.64 268.18 222.64 271.18 4 Y
V
183.67 271.18 222.64 271.18 2 L
7 X
V
2 Z
0 X
N
223.47 344.67 228.67 341.67 223.47 338.67 223.47 341.67 4 Y
V
183.67 271.18 200.33 271.18 200.33 341.67 223.47 341.67 4 L
N
1 F
(0x002c) 299.5 338.33 T
412.64 272.16 417.83 269.17 412.64 266.17 412.64 269.17 4 Y
V
295.33 349.89 379.5 349.89 379.5 269.17 412.64 269.17 4 L
N
403.47 345.5 408.67 342.5 403.47 339.5 403.47 342.5 4 Y
V
295.33 366.82 391.17 366.82 391.17 342.5 403.47 342.5 4 L
N
404.3 412.17 409.5 409.17 404.3 406.17 404.3 409.17 4 Y
V
407.5 348.66 397.83 348.66 397.83 409.17 404.3 409.17 4 L
N
(0x0034) 492.16 337.15 T
(0x0098) 492.16 405.82 T
(0x0000) 299.5 280.33 T
(0x0000) 492.16 279 T
3 F
(Item Block) 425.04 449.27 T
(Group Block) 232.47 413.77 T
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "722" 4
%%Page: "723" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Structure) 429.63 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(723) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.2) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.72 (Once an item has been allocated, it will stay in the same item block \050and have) 180 641.33 P
-0.13 (the same chunk handle\051 until it is freed or resized. If it is resized to a larger) 180 628.33 P
(size, it may be moved to a different item block belonging to the same group.) 180 615.33 T
0 14 Q
(19.2.4) 123.08 573 T
0 18 Q
(Ungrouped DB Items) 180 573 T
1 10 Q
(Sometimes there is no natural way to group) 180 549.33 T
1 9 Q
(DB) 385.4 549.33 T
1 10 Q
( items. For these situations,) 398.9 549.33 T
-0.85 (the) 180 536.33 P
1 9 Q
-0.76 (DB) 196.93 536.33 P
1 10 Q
-0.85 ( manager allows you to allocate) 210.43 536.33 P
3 F
-0.85 (ungrouped) 353.36 536.33 P
1 F
-0.85 ( items. These items actually) 402.79 536.33 P
(belong to special groups which are automatically allocated by the) 180 523.33 T
1 9 Q
(DB) 483.57 523.33 T
1 10 Q
(manager) 180 510.33 T
(. The) 220.19 510.33 T
1 9 Q
(DB) 246.31 510.33 T
1 10 Q
( manager tries to keep these groups at the right size for) 259.81 510.33 T
(optimum ef\336ciency) 180 497.33 T
(.) 266.29 497.33 T
-0.08 (When you allocate an ungrouped item, the) 180 477.33 P
1 9 Q
-0.07 (DB) 378.14 477.33 P
1 10 Q
-0.08 ( manager allocates an item in) 391.64 477.33 P
(one of its \322ungrouped groups.\323 If there are no such groups or if all of these) 180 464.33 T
(groups have too many items already) 180 451.33 T
(, the) 346.32 451.33 T
1 9 Q
(DB) 369.66 451.33 T
1 10 Q
( manager allocates a new) 383.16 451.33 T
(\322ungrouped\323 group.) 180 438.33 T
(For practical purposes, ungrouped) 180 418.33 T
1 9 Q
(DB) 341.29 418.33 T
1 10 Q
( items have a single, dword-sized) 354.79 418.33 T
-0.34 (handle. This \322handle\323 is of type) 180 405.33 P
5 F
-0.35 (DBGroupAndItem) 325.23 405.33 P
1 F
-0.34 (. The upper word of this) 419.67 405.33 P
(is the handle of the ungrouped group for this item; the lower word is the) 180 392.33 T
(item\325) 180 379.33 T
(s item-handle within that group. There are special versions of most) 202.6 379.33 T
(database routines for use with ungrouped items. These routines take a) 180 366.33 T
5 F
(DBGroupAndItem) 180 353.33 T
1 F
( argument instead of separate group-handle and) 274.44 353.33 T
(item-handle arguments. These routines are discussed in \322Routines for) 180 340.33 T
(Ungrouped Items\323 on page 729. This section also describes macros which) 180 327.33 T
(combine a group-handle and item-handle into a) 180 314.33 T
5 F
(DBGroupAndItem) 401.88 314.33 T
1 F
( and) 496.32 314.33 T
(which break a) 180 301.33 T
5 F
(DBGroupAndItem) 247.98 301.33 T
1 F
( into its constituent parts.) 342.42 301.33 T
0 14 Q
(19.2.5) 123.08 259 T
0 18 Q
(The DB Map Item) 180 259 T
1 10 Q
-0.22 (Y) 180 235.33 P
-0.22 (ou can designate a \322map item\323 for a) 185.93 235.33 P
1 9 Q
-0.2 (VM) 350.85 235.33 P
1 10 Q
-0.22 ( \336le with the routine) 365.84 235.33 P
5 F
-0.23 (DBSetMap\050\051) 462.51 235.33 P
1 F
-0.22 (.) 525.66 235.33 P
(Y) 180 222.33 T
(ou can recover the map item\325) 185.93 222.33 T
(s group and handle at will by calling) 318.53 222.33 T
5 F
(DBGetMap\050\051) 180 209.33 T
1 F
(. This is entirely separate from the \336le\325) 244.81 209.33 T
(s map block; indeed, a) 423.91 209.33 T
1 9 Q
(VM) 180 196.33 T
1 10 Q
( \336le can have both a map block and a map item, and they may be set,) 194.99 196.33 T
(locked, and changed independently) 180 183.33 T
(.) 341.12 183.33 T
(The map routines are described in detail in section 19.3.6 on page 728.) 180 163.33 T
0 0 0 1 0 0 0 K
81 362.96 171 503.45 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(\322Ungrouped\323 Items) 81 450.45 T
1 F
(If you allocate an) 81 434.45 T
(\322ungrouped\323 item,) 81 423.45 T
(the DB manager will) 81 412.45 T
(assign it to a group.) 81 401.45 T
(Y) 81 390.45 T
(ou will need that) 86.34 390.45 T
(group-handle to) 81 379.45 T
(access the item.) 81 368.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 479.33 G
4 H
0 Z
90 450 13.5 13.5 101.25 479.33 A
0 0 0 1 0 0 0 K
81 459.21 121.5 499.71 R
1 H
0 X
N
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "723" 5
%%Page: "724" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(724) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(19.3) 134.76 632 T
0 24 Q
(Using Database Routines) 180 632 T
1 9 Q
(GEOS) 180 606.33 T
1 10 Q
( provides a wide range of routines for working with databases. The) 206.17 606.33 T
(routines all require that the calling thread have the) 180 593.33 T
1 9 Q
(VM) 422.07 593.33 T
1 10 Q
( \336le open. Most) 437.06 593.33 T
(routines have to be passed the VMFileHandle of the appropriate) 180 580.33 T
1 9 Q
(VM) 480.03 580.33 T
1 10 Q
( \336le.) 495.02 580.33 T
(Almost all) 180 560.33 T
1 9 Q
(DB) 230.2 560.33 T
1 10 Q
( routines come in two forms. The standard form takes, among) 243.7 560.33 T
(its arguments, the group-handle and the item-handle of an item to be) 180 547.33 T
(affected. The other form is designed for use with \322ungrouped\323 items. This) 180 534.33 T
(form takes, as an argument, the item\325) 180 521.33 T
(s) 353.74 521.33 T
5 F
(DBGroupAndItem) 361.15 521.33 T
1 F
( structure.) 455.59 521.33 T
-0.23 (In addition to the routines listed here, all of the) 180 501.33 P
1 9 Q
-0.21 (VM) 400.3 501.33 P
1 10 Q
-0.23 ( chain routines can work) 415.3 501.33 P
(on) 180 488.33 T
1 9 Q
(DB) 193.89 488.33 T
1 10 Q
( items. Simply cast the) 207.39 488.33 T
5 F
(DBGroupAndItem) 315.75 488.33 T
1 F
( structure to type) 410.19 488.33 T
5 F
(VMChain) 180 475.33 T
1 F
(, and pass it in place of the chain argument\050s\051.) 228.69 475.33 T
(\050) 180 462.33 T
5 F
(VMCopyVMChain\050\051) 183.33 462.33 T
1 F
( will allocate the duplicate item as \322ungrouped.\323\051 For) 283.87 462.33 T
(more information about) 180 449.33 T
5 F
(VMChain) 292.42 449.33 T
1 F
( routines, see section 18.4 of chapter 18.) 341.11 449.33 T
0 14 Q
(19.3.1) 123.08 407 T
0 18 Q
(General Rules to Follow) 180 407 T
1 10 Q
-0.06 (There are certain rules of \322memory etiquette\323 you should follow when using) 180 383.33 P
1 9 Q
(DB) 180 370.33 T
1 10 Q
( \336les. For the most part, these rules are the same as the general rules of) 193.5 370.33 T
(memory etiquette.) 180 357.33 T
(First and foremost, try to keep as few blocks locked as possible, and keep) 180 337.33 T
(them locked for as short a time as possible. Y) 180 324.33 T
(ou should not usually need to) 387.45 324.33 T
(keep more than one item locked at a time. If you need another item, unlock) 180 311.33 T
-0.04 (the \336rst one \336rst, even if they\325re in the same item block. \050This will cost very) 180 298.33 P
-0.21 (little time since the item block is unlikely to be swapped to disk right away) 180 285.33 P
-0.21 (.\051) 522.32 285.33 P
-0.61 (The main reason you should have two or more items open at once is if you are) 180 272.33 P
(directly comparing them or copying data from one to another) 180 259.33 T
(. In this case,) 460.19 259.33 T
(you should unlock each item as soon as you\325re done with it.) 180 246.33 T
(Remember that items are implemented as chunks in LMem heaps. This) 180 226.33 T
(means, for example, that when you allocate an item \050or expand an existing) 180 213.33 T
(one\051, the heap it resides in \050i.e. the item block\051 may be compacted or moved) 180 200.33 T
(on the global heap \050even if it is locked\051. This will invalidate all pointers to) 180 187.33 T
(items in that item block. As a general rule, you should not allocate \050or) 180 174.33 T
-0.09 (expand\051 items if you have any items from that group locked. Do not allocate) 180 161.33 P
-0.49 (\322ungrouped\323 items if you have any items from any of the \322ungrouped\323 groups) 180 148.33 P
0 0 0 1 0 0 0 K
81 144 171 308.79 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.51 (Invalidating Pointers) 81 255.79 P
(to Items) 81 244.79 T
1 F
(Allocating or) 81 228.79 T
(expanding an item) 81 217.79 T
(can invalidate all) 81 206.79 T
(pointers to items in) 81 195.79 T
(that group. T) 81 184.79 T
(ry to) 135.45 184.79 T
(unlock items before) 81 173.79 T
-0.59 (doing an allocation or) 81 162.79 P
(resizing.) 81 151.79 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 284.66 G
4 H
0 Z
90 450 13.5 13.5 101.25 284.66 A
0 0 0 1 0 0 0 K
81 264.55 121.5 305.05 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 272.61 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "724" 6
%%Page: "725" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Database Routines) 389.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(725) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(locked. If you must keep an item locked, keep track of the item\325) 180 641.33 T
(s memory) 470.97 641.33 T
-0.01 (block and chunk handle so you can use) 180 628.33 P
5 F
-0.01 (DBDeref\050\051) 361.96 628.33 P
1 F
-0.01 ( to get the address again.) 414.74 628.33 P
(Finally) 180 608.33 T
(, try to keep the blocks small. Most of this is done for you. When you) 212.05 608.33 T
(allocate an item, the) 180 595.33 T
1 9 Q
(DB) 277.25 595.33 T
1 10 Q
( manager will put it in an uncrowded item block. If) 290.75 595.33 T
-0.06 (all item blocks are too large, it will allocate a new one. However) 180 582.33 P
-0.06 (, you should) 472.85 582.33 P
(keep items from getting too large. If individual items get into the) 180 569.33 T
(multi-kilobyte range, you should consider storing them a different way; for) 180 556.33 T
(example, you could make each f the larger items a) 180 543.33 T
1 9 Q
(VM) 414.11 543.33 T
1 10 Q
( block or a) 429.1 543.33 T
1 9 Q
(VM) 479.3 543.33 T
1 10 Q
( chain.) 494.3 543.33 T
0 14 Q
(19.3.2) 123.08 501 T
0 18 Q
(Allocating and Freeing Groups) 180 501 T
6 10 Q
(DBGroupAlloc\050\051, DBGroupFree\050\051) 180 477.33 T
1 F
-0.63 (Y) 180 457.33 P
-0.63 (ou can improve) 185.93 457.33 P
1 9 Q
-0.57 (DB) 257.19 457.33 P
1 10 Q
-0.63 ( access time by assigning items to groups such that items) 270.69 457.33 P
-0.04 (from the same group will generally be accessed together) 180 444.33 P
-0.04 (. This will cut down) 437.66 444.33 P
(on the number of times group and item blocks will have to be swapped into) 180 431.33 T
(memory) 180 418.33 T
(.) 216.48 418.33 T
-0.64 (T) 180 398.33 P
-0.64 (o allocate a group, call) 185.75 398.33 P
5 F
-0.66 (DBGroupAlloc\050\051) 288.5 398.33 P
1 F
-0.64 (. This routine takes one argument,) 371.84 398.33 P
-0.54 (namely the handle of the) 180 385.33 P
1 9 Q
-0.49 (VM) 295.27 385.33 P
1 10 Q
-0.54 ( \336le in which to create the group. It allocates the) 310.27 385.33 P
-0.17 (group and returns the group-handle \050i.e., the) 180 372.33 P
1 9 Q
-0.15 (VM) 388.47 372.33 P
1 10 Q
-0.17 ( handle of the group block\051.) 403.46 372.33 P
(If it is unable to allocate the group, it will return a null handle.) 180 359.33 T
-0.7 (If you are done with a) 180 339.33 P
1 9 Q
-0.63 (DB) 279.72 339.33 P
1 10 Q
-0.7 ( group, call) 293.22 339.33 P
5 F
-0.72 (DBGroupFree\050\051) 345.21 339.33 P
1 F
-0.7 (. This routine frees the) 426.14 339.33 P
(group\325) 180 326.33 T
(s group block and all of its item blocks. Any attached global memory) 208.33 326.33 T
(blocks will also be freed. Naturally) 180 313.33 T
(, all items in the group will be freed as) 339.3 313.33 T
-0.75 (well. Y) 180 300.33 P
-0.75 (ou can free a group even if some of its items are locked; those items will) 209.82 300.33 P
(be freed immediately) 180 287.33 T
(.) 276.31 287.33 T
0 14 Q
(19.3.3) 123.08 245 T
0 18 Q
(Allocating and Freeing Items) 180 245 T
6 10 Q
(DBAlloc\050\051, DBFree\050\051) 180 221.33 T
1 F
(T) 180 201.33 T
(o allocate a) 185.75 201.33 T
1 9 Q
(DB) 240.4 201.33 T
1 10 Q
( item, call) 253.9 201.33 T
5 F
(DBAlloc\050\051) 302.25 201.33 T
1 F
(. This routine takes three arguments:) 352.44 201.33 T
-0.5 (the handle of the) 180 188.33 P
1 9 Q
-0.45 (VM) 259.13 188.33 P
1 10 Q
-0.5 ( \336le, the) 274.12 188.33 P
1 9 Q
-0.45 (DB) 313.01 188.33 P
1 10 Q
-0.5 ( Group in which to allocate the item, and the) 326.51 188.33 P
(size of the item \050in bytes\051. The routine will allocate an item in one of that) 180 175.33 T
-0.03 (group\325) 180 162.33 P
-0.03 (s item blocks \050allocating a new item block if necessary\051; it returns the) 208.33 162.33 P
(new item\325) 180 149.33 T
(s item-handle.) 224.27 149.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "725" 7
%%Page: "726" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(726) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(Remember that when you allocate a) 180 641.33 T
1 9 Q
(DB) 348.92 641.33 T
1 10 Q
( item, the) 362.42 641.33 T
1 9 Q
(DB) 409.47 641.33 T
1 10 Q
( manager allocates a) 422.97 641.33 T
-0.43 (chunk in an LMem heap \050the item block\051. This can cause the item block to be) 180 628.33 P
-0.03 (compacted or resized; this will invalidate all pointers to items in that block.) 180 615.33 P
-0.5 (For this reason, you should not allocate items in a group while other items in) 180 602.33 P
(that group are locked. Similarly) 180 589.33 T
(, you should not allocate \322ungrouped\323 items) 326.32 589.33 T
(while any \322ungrouped\323 items are locked. Instead, unlock the items, allocate) 180 576.33 T
(the new one, and then lock the items again.) 180 563.33 T
-0.01 (When you are done with an item, free it with) 180 543.33 P
5 F
-0.01 (DBFree\050\051) 390.1 543.33 P
1 F
-0.01 (. This routine takes) 437.88 543.33 P
(three arguments: the \336le handle, the group-handle, and the item-handle. It) 180 530.33 T
(frees the item, making appropriate changes in the group block. If the item) 180 517.33 T
(was the only one in its item block, that item block will be freed as well.) 180 504.33 T
5 F
-0.79 (DBFree\050\051) 180 491.33 P
1 F
-0.76 ( does not return anything. Note that you should never free a locked) 227.78 491.33 P
-0.26 (item since the item-block\325) 180 478.33 P
-0.26 (s reference-count will not be decremented \050and the) 296.82 478.33 P
(block will never be unlocked\051. Always unlock an item before freeing it. \050Y) 180 465.33 T
(ou) 515.6 465.33 T
(need not, however) 180 452.33 T
(, unlock items before freeing their) 263.15 452.33 T
3 F
(group) 422.23 452.33 T
1 F
(; when a group is) 448.89 452.33 T
-0.57 (freed, all of its items are automatically freed, whether they are locked or not.\051) 180 439.33 P
0 14 Q
(19.3.4) 123.08 397 T
0 18 Q
(Accessing DB Items) 180 397 T
6 10 Q
(DBLock\050\051, DBLockGetRef\050\051, DBDeref\050\051, DBUnlock\050\051, DBDirty\050\051) 180 373.33 T
1 F
(T) 180 353.33 T
(o access a database item, lock it with) 185.75 353.33 T
5 F
(DBLock\050\051) 358.95 353.33 T
1 F
(. This routine takes three) 408.4 353.33 T
-0.48 (arguments: the handle of the) 180 340.33 P
1 9 Q
-0.43 (VM) 314.27 340.33 P
1 10 Q
-0.48 ( \336le, the item\325) 329.27 340.33 P
-0.48 (s group-handle, and the item\325) 390.8 340.33 P
-0.48 (s) 524.07 340.33 P
-0.62 (item-handle. The routine locks the item-block on the global heap and returns) 180 327.33 P
-0.01 (the address of the element. If the block is already locked \050generally because) 180 314.33 P
(another item in the item-block is locked\051, it increments the lock count.) 180 301.33 T
(In some circumstances it might be useful to know the global handle of the) 180 281.33 T
-0.66 (locked item-block and the chunk handle of the item. For example, if you want) 180 268.33 P
(to set up an item as a chunk array) 180 255.33 T
(, you will need this information. For this) 337.81 255.33 T
(reason, the library provides the routine) 180 242.33 T
5 F
(DBLockGetRef\050\051) 364.64 242.33 T
1 F
(. This routine is) 450.2 242.33 T
(just like) 180 229.33 T
5 F
(DBLock\050\051) 220.38 229.33 T
1 F
(, except that it takes one additional argument: the) 269.83 229.33 T
-0.01 (address of a variable of type optr) 180 216.33 P
-0.01 (.) 330.67 216.33 P
5 F
-0.01 (DBLockItemGetRef\050\051) 336.22 216.33 P
1 F
-0.01 ( writes global and) 445.85 216.33 P
-0.55 (chunk handles to the optr and returns the address of the locked) 180 203.33 P
1 9 Q
-0.5 (DB) 470.06 203.33 P
1 10 Q
-0.55 ( item. Y) 483.56 203.33 P
-0.55 (ou) 517.66 203.33 P
(can now use any of the LMem routines on the item, simply by passing the) 180 190.33 T
(optr) 180 177.33 T
(.) 198.33 177.33 T
0 0 0 1 0 0 0 K
81 439.8 171 549.45 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
(Never free a locked) 81 496.45 T
(item) 81 485.45 T
1 F
(The item-block isn\325) 81 469.45 T
(t) 159.69 469.45 T
(unlocked until the) 81 458.45 T
(last item is unlocked.) 81 447.45 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 505.21 121.5 545.71 R
1 H
0 Z
N
0 0 0 1 0 0 0 K
3 H
90 450 13.5 13.5 101.25 525.46 A
91.7 535.01 110.79 515.92 2 L
1 Z
N
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "726" 8
%%Page: "727" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Database Routines) 389.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(727) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.69 (Note that the memory block attached to the item block may change each time) 180 641.33 P
(the block is locked unless you have instructed the) 180 628.33 T
1 9 Q
(VM) 411.69 628.33 T
1 10 Q
( manager to preserve) 426.68 628.33 T
(the handle \050see section 18.3.6 of chapter 18\051. The chunk handle will not) 180 615.33 T
(change, even if the \336le is closed and reopened, unless the chunk is resized) 180 602.33 T
-0.29 (larger) 180 589.33 P
-0.29 (. \050When an item is resized larger) 207.22 589.33 P
-0.29 (, the) 355.69 589.33 P
1 9 Q
-0.26 (DB) 378.46 589.33 P
1 10 Q
-0.29 ( manager may choose to move) 391.96 589.33 P
(the item to a different item-block, thus changing its chunk handle.\051 In) 180 576.33 T
-0.54 (general, if you will need this information you should get it each time you lock) 180 563.33 P
(the item instead of trying to preserve it from one lock to the next.) 180 550.33 T
(If you have an optr to a) 180 530.33 T
3 F
(locked) 290.57 530.33 T
1 9 Q
(DB) 322.23 530.33 T
1 10 Q
( item, you can translate it to an address) 335.73 530.33 T
(with the routine) 180 517.33 T
5 F
(DBDeref\050\051) 257.97 517.33 T
1 F
(. This is useful if you have to keep one item) 310.75 517.33 T
(locked while allocating or expanding another item in that group. Since the) 180 504.33 T
(locked item might move as a result of the allocation, you can get the new) 180 491.33 T
-0.63 (address with) 180 478.33 P
5 F
-0.65 (DBDeref\050\051) 240.97 478.33 P
1 F
-0.63 (. In general, however) 293.75 478.33 P
-0.63 (, you should unlock all items in) 388.53 478.33 P
-0.44 (a group before allocating or resizing one there. Note that) 180 465.33 P
5 F
-0.45 (DBDeref) 440.27 465.33 P
1 F
-0.44 ( is simply) 485.27 465.33 P
(a synonym for) 180 452.33 T
5 F
(LMemDeref\050\051) 248.15 452.33 T
1 F
(; the two routines are exactly the same.) 317.22 452.33 T
-0.06 (When you are done accessing an item, call) 180 432.33 P
5 F
-0.06 (DBUnlock\050\051) 377.14 432.33 P
1 F
-0.06 (. This routine takes) 438.07 432.33 P
(one argument, the address of a locked item. The routine decrements the) 180 419.33 T
-0.02 (reference count of the item\325) 180 406.33 P
-0.02 (s item-block. If the reference count reaches zero,) 305.27 406.33 P
-0.57 (the routine unlocks the block. Thus, if you lock two different items in an item) 180 393.33 P
(block, you should unlock each item separately) 180 380.33 T
(. As noted above, you should) 390.77 380.33 T
(always unlock an item before freeing it.) 180 367.33 T
-0.34 (If you change a) 180 347.33 P
1 9 Q
-0.31 (DB) 251.77 347.33 P
1 10 Q
-0.34 ( item, you should mark the item\325) 265.27 347.33 P
-0.34 (s block as) 413.23 347.33 P
3 F
-0.34 (dirty) 459.43 347.33 P
1 F
-0.34 ( by calling) 481.83 347.33 P
5 F
-0.44 (DBDirty\050\051) 180 334.33 P
1 F
-0.42 (. This ensures that the changes will be copied to the disk the next) 231.48 334.33 P
-0.13 (time the \336le is saved or updated. The routine takes one argument, a pointer) 180 321.33 P
-0.49 (to an address in an item block \050generally the address of an item\051. It will dirty) 180 308.33 P
(the item-block containing that item. As with) 180 295.33 T
1 9 Q
(VM) 387.63 295.33 T
1 10 Q
( blocks, you must dirty the) 402.62 295.33 T
(item) 180 282.33 T
3 F
(before) 203.71 282.33 T
1 F
( you unlock it, as the memory manager can discard any clean) 230.92 282.33 T
(block from memory as soon as it is unlocked.) 180 269.33 T
0 14 Q
(19.3.5) 123.08 227 T
0 18 Q
(Resizing DB Items) 180 227 T
6 10 Q
(DBReAlloc\050\051, DBInsertAt\050\051, DBDeleteAt\050\051) 180 203.33 T
1 F
-0.83 (Database items may be resized after allocation. They may be expanded either) 180 183.33 P
(by having bytes added to the end or by having bytes inserted at a speci\336ed) 180 170.33 T
(offset within the item. Similarly) 180 157.33 T
(, items may be contracted by having bytes) 327.25 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "727" 9
%%Page: "728" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(728) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(truncated or by having bytes deleted from the middle of the item. When an) 180 641.33 T
(item is resized, the) 180 628.33 T
1 9 Q
(DB) 270.38 628.33 T
1 10 Q
( manager automatically dirties the item block \050or) 283.88 628.33 T
(blocks\051 affected.) 180 615.33 T
(As noted above, when an item is expanded, its item block can be compacted) 180 595.33 T
(or moved on the item heap \050even if the item is locked\051. Thus, pointers to all) 180 582.33 T
-0.43 (items in that item block may be invalidated, even if they are locked. For that) 180 569.33 P
(reason, you should unlock all items in the group before expanding any of) 180 556.33 T
(them. If you must leave an item locked, be sure to get its new address with) 180 543.33 T
5 F
(DBDeref\050\051) 180 530.33 T
1 F
(. If you) 232.78 530.33 T
3 F
(decrease) 267.78 530.33 T
1 F
( an item\325) 306.27 530.33 T
(s size, the item-block is guaranteed not) 346.1 530.33 T
-0.67 (to move or be compacted. Thus, you can safely contract locked items \050or items) 180 517.33 P
(in the same block as locked items\051.) 180 504.33 T
(T) 180 484.33 T
(o set a new size for an item, call) 185.75 484.33 T
5 F
(DBReAlloc\050\051) 335.78 484.33 T
1 F
(. This routine takes four) 399.86 484.33 T
-0.05 (arguments: the \336le handle, the group-handle, the item-handle, and the new) 180 471.33 P
-0.4 (size \050in bytes\051. If the new size is smaller than the old, bytes will be truncated) 180 458.33 P
(from the end of the item. If the new size is larger than the old, bytes will be) 180 445.33 T
(added to the end of the item; these bytes will not be zero-initialized.) 180 432.33 T
-0.4 (T) 180 412.33 P
-0.4 (o insert bytes in the middle of an item, call the routine) 185.75 412.33 P
5 F
-0.41 (DBInsertAt\050\051) 435.67 412.33 P
1 F
-0.4 (. This) 502.89 412.33 P
(routine takes \336ve arguments: the \336le handle, the group-handle, the) 180 399.33 T
-0.53 (item-handle, the offset \050within the item\051 at which to insert the bytes, and the) 180 386.33 P
(number of bytes to insert. The new bytes will be inserted beginning at that) 180 373.33 T
-0.37 (offset; they will be zero-initialized. Thus, if you insert ten bytes beginning at) 180 360.33 P
(offset 35, the new bytes will be at offsets 35-44; the byte which had been at) 180 347.33 T
(offset 35 will be moved to offset 45. T) 180 334.33 T
(o insert bytes at the beginning of an) 350.05 334.33 T
(item, pass an offset of zero.) 180 321.33 T
-0.2 (T) 180 301.33 P
-0.2 (o delete bytes from the middle of an item, call) 185.75 301.33 P
5 F
-0.2 (DBDeleteAt\050\051) 397.14 301.33 P
1 F
-0.2 (. This routine) 466.21 301.33 P
-0.52 (takes \336ve arguments: the \336le handle, the group-handle, the item-handle, the) 180 288.33 P
-0.21 (offset \050within the item\051 of the \336rst byte to delete, and the number of bytes to) 180 275.33 P
(delete. The routine does not return anything.) 180 262.33 T
0 14 Q
(19.3.6) 123.08 220 T
0 18 Q
(Setting and Using the Map Item) 180 220 T
6 10 Q
(DBSetMap\050\051, DBGetMap\050\051, DBLockMap\050\051) 180 196.33 T
1 F
(A) 180 176.33 T
1 9 Q
(VM) 190 176.33 T
1 10 Q
( \336le can have a) 204.99 176.33 T
3 F
(map block) 276.86 176.33 T
1 F
( and a) 323.9 176.33 T
3 F
(map item) 355.21 176.33 T
1 F
(. The map can be retrieved) 398.54 176.33 T
-0.78 (with a special-purpose routine, even if you don\325) 180 163.33 P
-0.78 (t know its handle \050or handles\051;) 391.77 163.33 P
-0.02 (thus, the map usually keeps track of the handles for the rest of the \336le. The) 180 150.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "728" 10
%%Page: "729" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Using Database Routines) 389.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(729) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.3) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(map can be retrieved even if the \336le is closed and re-opened. T) 180 641.33 T
(o set a map) 466.51 641.33 T
-0.73 (block, use the routine) 180 628.33 P
5 F
-0.75 (VMSetMap\050\051) 279.52 628.33 P
1 F
-0.73 ( \050see section 18.3.10 of chapter 18\051. T) 343.96 628.33 P
-0.73 (o set) 508.37 628.33 P
(a) 180 615.33 T
3 F
(map item) 188.34 615.33 T
1 F
(, use the routine) 231.67 615.33 T
5 F
(DBSetMap\050\051) 310.01 615.33 T
1 F
(.) 373.16 615.33 T
5 F
(DBSetMap\050\051) 378.72 615.33 T
1 F
( takes three) 441.87 615.33 T
(arguments: the \336le handle, the item\325) 180 602.33 T
(s group-handle, and the item\325) 347.99 602.33 T
(s) 483.19 602.33 T
-0.08 (item-handle. The routine sets the \336le\325) 180 589.33 P
-0.08 (s map item to the) 352.79 589.33 P
1 9 Q
-0.07 (DB) 435.95 589.33 P
1 10 Q
-0.08 ( item speci\336ed. A) 449.45 589.33 P
1 9 Q
(VM) 180 576.33 T
1 10 Q
( \336le can have both a map block and a map item; these are set) 194.99 576.33 T
(independently) 180 563.33 T
(.) 245 563.33 T
(Once you have set a map item, you can retrieve its handles with the) 180 543.33 T
-0.22 (command) 180 530.33 P
5 F
-0.23 (DBGetMap\050\051) 227.19 530.33 P
1 F
-0.22 (. This routine takes one argument, namely the \336le\325) 292 530.33 P
-0.22 (s) 523.81 530.33 P
(handle. It returns a) 180 517.33 T
5 F
(DBGroupAndItem) 273.71 517.33 T
1 F
( value containing the map item\325) 368.15 517.33 T
(s) 513.92 517.33 T
(handles. Y) 180 504.33 T
(ou can break this value into its constituent handles with) 227.79 504.33 T
5 F
(DBGroupFromGroupAndItem\050\051) 180 491.33 T
1 F
( and) 343.52 491.33 T
5 F
(DBItemFromGroupAndItem\050\051) 366.49 491.33 T
1 F
(\050see section 19.3.7 on page 729\051. Y) 180 478.33 T
(ou can also lock the map directly without) 336.16 478.33 T
(knowing its handles by calling the routine) 180 465.33 T
5 F
(DBLockMap\050\051) 377.44 465.33 T
1 F
(. This routine) 449.48 465.33 T
(takes one argument, namely the \336le handle. It locks the map item and) 180 452.33 T
-0.04 (returns the map\325) 180 439.33 P
-0.04 (s address. When you are done with the map item, unlock it) 256.97 439.33 P
(normally with a call to) 180 426.33 T
5 F
(DBUnlock\050\051) 287.25 426.33 T
1 F
(.) 348.18 426.33 T
0 14 Q
(19.3.7) 123.08 384 T
0 18 Q
(Routines for Ungrouped Items) 180 384 T
6 10 Q
(DBAllocUngrouped\050\051, DBFreeUngrouped\050\051, DBLockUngrouped\050\051,) 180 360.33 T
(DBLockGetRefUngrouped\050\051, DBReAllocUngrouped\050\051,) 180 347.33 T
(DBInsertAtUngrouped\050\051, DBDeleteAtUngrouped\050\051,) 180 334.33 T
(DBSetMapUngrouped\050\051) 180 321.33 T
1 F
(Special routines are provided for working with ungrouped items. These) 180 301.33 T
(routines are very similar to their standard counterparts. The routine) 180 288.33 T
5 F
(DBAllocUngrouped\050\051) 180 275.33 T
1 F
( allocates an ungrouped item. It takes two) 288.71 275.33 T
(arguments, the \336le handle and the size of the item to allocate. The) 180 262.33 T
1 9 Q
(DB) 489.31 262.33 T
1 10 Q
(manager allocates the item in one of the \322ungrouped\323 groups and returns a) 180 249.33 T
5 F
(DBGroupAndItem) 180 236.33 T
1 F
( value containing the group-handle and item-handle.) 274.44 236.33 T
-0.45 (Y) 180 223.33 P
-0.45 (ou can break this value into its components by calling the macros described) 185.93 223.33 P
-0.25 (in section 19.3.7 on page 729, or you can pass this value directly to the other) 180 210.33 P
(\322ungrouped\323 routines.) 180 197.33 T
(The rest of the routines listed above are exactly the same as their) 180 177.33 T
(counterparts with one exception: whereas their counterparts take, among) 180 164.33 T
(their arguments, the item\325) 180 151.33 T
(s group-handle and item-handle, the ungrouped) 301.31 151.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "729" 11
%%Page: "730" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(730) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.3) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(routines take a) 180 641.33 T
5 F
(DBGroupAndItem) 252.61 641.33 T
1 F
( value. Each routine\325) 347.05 641.33 T
(s other arguments) 442.06 641.33 T
(are unchanged, as is the return value.) 180 628.33 T
(These routines are provided as a convenience. If you allocate an ungrouped) 180 608.33 T
(item, you are perfectly free to break the) 180 595.33 T
5 F
(DBGroupAndItem) 365.94 595.33 T
1 F
( value into its) 460.38 595.33 T
(component handles, and pass those handles to the standard) 180 582.33 T
1 9 Q
(DB) 458.74 582.33 T
1 10 Q
( routines.) 472.24 582.33 T
-0.05 (Conversely) 180 569.33 P
-0.05 (, if you allocate a normal \322grouped\323 item, you are free to combine) 230.18 569.33 P
-0.34 (the two handles into a) 180 556.33 P
5 F
-0.35 (DBGroupAndItem) 283.88 556.33 P
1 F
-0.34 ( token and pass that token to the) 378.32 556.33 P
(\322ungrouped\323 routines.) 180 543.33 T
0 14 Q
(19.3.8) 123.08 501 T
0 18 Q
(Other DB Utilities) 180 501 T
6 10 Q
(DBCopyDBItem\050\051, DBCopyDBItemUngrouped\050\051,) 180 477.33 T
(DBGroupFromGroupAndItem\050\051, DBItemFromGroupAndItem\050\051,) 180 464.33 T
(DBCombineGroupAndItem\050\051) 180 451.33 T
1 F
(Y) 180 431.33 T
(ou can duplicate a) 185.93 431.33 T
1 9 Q
(DB) 272.61 431.33 T
1 10 Q
( item with the routine) 286.11 431.33 T
5 F
(DBCopyDBItem\050\051) 390.57 431.33 T
1 F
(. This) 481.31 431.33 T
-0.12 (routine takes \336ve arguments: the handle of the source \336le, the source item\325) 180 418.33 P
-0.12 (s) 523.72 418.33 P
(group-handle, the source item\325) 180 405.33 T
(s item-handle, the handle of the destination) 320 405.33 T
(\336le \050which may be the same as the source \336le\051, and the handle of the) 180 392.33 T
(destination group. The routine will allocate a new item in the speci\336ed \336le) 180 379.33 T
-0.76 (and group. It will then lock both items and copy the data from the source item) 180 366.33 P
(to the destination. Finally) 180 353.33 T
(, it will unlock both items and return the) 299.29 353.33 T
(item-handle of the duplicate item.) 180 340.33 T
(The routine) 180 320.33 T
5 F
(DBCopyDBItemUngrouped\050\051) 237.04 320.33 T
1 F
( is the same as) 386.3 320.33 T
5 F
(DBCopyDBItem\050\051) 180 307.33 T
1 F
(, except that it allocates an ungrouped item in the) 270.74 307.33 T
(speci\336ed \336le. It is passed the source \336le handle, the) 180 294.33 T
5 F
(DBGroupAndItem) 420.02 294.33 T
1 F
(value for the source item, and the destination \336le handle. It allocates an) 180 281.33 T
(ungrouped item and returns its) 180 268.33 T
5 F
( DBGroupAndItem) 325.37 268.33 T
1 F
( value.) 422.68 268.33 T
(Remember) 180 248.33 T
(, if you are allocating the duplicate in the same group as the) 229.26 248.33 T
(source, you should only call this routine when the source item is unlocked) 180 235.33 T
-0.81 (\050since its item-block may be compacted when the new item is allocated\051. If the) 180 222.33 P
-0.41 (destination is in another block, the source item may be locked or unlocked at) 180 209.33 P
(your preference. If it is locked when you call) 180 196.33 T
5 F
(DBCopyDBItem\050\051) 386.48 196.33 T
1 F
(, it will be) 477.22 196.33 T
(locked when the routine returns.) 180 183.33 T
(All of the) 180 163.33 T
1 9 Q
(VM) 225.19 163.33 T
1 10 Q
( chain utilities work on) 240.18 163.33 T
1 9 Q
(DB) 349.83 163.33 T
1 10 Q
( items as well as) 363.33 163.33 T
1 9 Q
(VM) 442.25 163.33 T
1 10 Q
( chains. The) 457.25 163.33 T
(routines are described in section 18.4 of chapter 18. T) 180 150.33 T
(o use a) 426.15 150.33 T
1 9 Q
(VM) 460.79 150.33 T
1 10 Q
( chain) 475.78 150.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "730" 12
%%Page: "731" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Cell Library) 452.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(731) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(routine, pass the item\325) 180 641.33 T
(s) 282.98 641.33 T
5 F
(DBGroupAndItem) 290.39 641.33 T
1 F
( value. For example,) 384.83 641.33 T
5 F
(VMCopyVMChain\050\051) 180 628.33 T
1 F
( will allocate an \322ungrouped\323 duplicate item in the) 280.54 628.33 T
(speci\336ed \336le and return its) 180 615.33 T
5 F
(DBGroupAndItem) 307.04 615.33 T
1 F
( value.) 401.48 615.33 T
(T) 180 595.33 T
(o build a) 185.75 595.33 T
5 F
(DBGroupAndItem) 228.36 595.33 T
1 F
( value from the group-handle and) 322.8 595.33 T
(item-handle, use the macro) 180 582.33 T
5 F
(DBCombineGroupAndItem\050\051) 308.9 582.33 T
1 F
(. This macro) 457.41 582.33 T
(takes the two handles and returns a) 180 569.33 T
5 F
(DBGroupAndItem) 350.03 569.33 T
1 F
( value. T) 444.47 569.33 T
(o extract) 483.75 569.33 T
(the component handles from a) 180 556.33 T
5 F
(DBGroupAndItem) 322.6 556.33 T
1 F
( value, use the macros) 417.04 556.33 T
5 F
(DBGroupFromGroupAndItem\050\051) 180 543.33 T
1 F
( and) 343.52 543.33 T
5 F
(DBItemFromGroupAndItem\050\051) 366.49 543.33 T
1 F
(.) 520.93 543.33 T
(These macros are passed a) 180 530.33 T
5 F
(DBGroupAndItem) 306.13 530.33 T
1 F
( value and return the) 400.57 530.33 T
(appropriate component.) 180 517.33 T
0 14 Q
(19.4) 134.76 465 T
0 24 Q
(The Cell Library) 180 465 T
1 10 Q
(The database library lets applications organize data into groups. This is an) 180 439.33 T
(intuitive way to organize data for many applications. However) 180 426.33 T
(, for some) 467.63 426.33 T
-0.14 (applications, it is more natural to organize data in a two-dimensional array) 180 413.33 P
-0.14 (.) 525.58 413.33 P
-0.02 (The classic example of this is the spreadsheet, in which every entry \050or) 180 400.33 P
3 F
-0.02 (cell) 509.37 400.33 P
1 F
-0.02 (\051) 524.91 400.33 P
(can be uniquely identi\336ed by two integers: the cell\325) 180 387.33 T
(s row and its column.) 413.74 387.33 T
(The) 180 367.33 T
1 9 Q
(GEOS) 200.56 367.33 T
1 10 Q
( cell library lets you arrange data this way) 226.73 367.33 T
(. W) 422.14 367.33 T
(ith the cell library) 437.14 367.33 T
(,) 519.93 367.33 T
-0.6 (you can organize data in rows and columns. The cell library saves the cells as) 180 354.33 P
1 9 Q
(DB) 180 341.33 T
1 10 Q
( items in a) 193.5 341.33 T
1 9 Q
(VM) 245 341.33 T
1 10 Q
( \336le. It insulates the application from the actual) 259.99 341.33 T
1 9 Q
(DB) 484.1 341.33 T
1 10 Q
(mechanism, letting the application behave as if its data is stored in a) 180 328.33 T
-0.4 (two-dimensional array) 180 315.33 P
-0.4 (. However) 283.13 315.33 P
-0.4 (, since the data is stored in) 328.48 315.33 P
1 9 Q
-0.36 (DB) 452.76 315.33 P
1 10 Q
-0.4 ( items, it may) 466.26 315.33 P
-0.47 (be kept in any ordinary) 180 302.33 P
1 9 Q
-0.42 (VM) 288.8 302.33 P
1 10 Q
-0.47 ( \336le. The library also provides routines to sort the) 303.79 302.33 P
(cells by row or by column and to apply a routine to every cell in a range of) 180 289.33 T
(rows and/or columns.) 180 276.33 T
(A collection of cells arranged into rows and columns is termed a) 180 256.33 T
3 F
(cell \336le) 476.87 256.33 T
1 F
(.) 509.07 256.33 T
(Every cell \336le is contained in a) 180 243.33 T
1 9 Q
(VM) 324.46 243.33 T
1 10 Q
( \336le. There is often a one-to-one) 339.45 243.33 T
(correspondence between cell \336les and the) 180 230.33 T
1 9 Q
(VM) 373.15 230.33 T
1 10 Q
( \336les which contain them.) 388.14 230.33 T
(However) 180 217.33 T
(, this correspondence is optional. There is nothing to stop an) 220.18 217.33 T
(application from maintaining several distinct cell \336les in a single) 180 204.33 T
1 9 Q
(VM) 483.01 204.33 T
1 10 Q
( \336le.) 498 204.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "731" 13
%%Page: "732" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(732) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
0 14 Q
0 X
(19.4.1) 123.08 636 T
0 18 Q
(Structure and Design) 180 636 T
1 10 Q
-0.13 (Most of the internal structure of a cell \336le is transparent to the geode which) 180 612.33 P
-0.24 (uses it. A geode can, for example, lock a cell with) 180 599.33 P
5 F
-0.24 (CellLock\050\051) 405.4 599.33 P
1 F
-0.24 (, specifying the) 459.3 599.33 P
-0.18 (cell\325) 180 586.33 P
-0.18 (s row and column. The cell library will \336nd the appropriate) 197.41 586.33 P
1 9 Q
-0.16 (DB) 471.37 586.33 P
1 10 Q
-0.18 ( item and) 484.87 586.33 P
(lock it, returning the locked item\325) 180 573.33 T
(s address. For most operations, the geode) 333.72 573.33 T
(does not need to know anything about the internal structure of the cell \336le.) 180 560.33 T
(However) 180 547.33 T
(, the internal structure does matter for some purposes. For this) 220.18 547.33 T
(reason, we present a quick overview of the structure of a cell \336le.) 180 534.33 T
-0.28 (A cell \336le can contain up to 16,512 rows, numbered from zero to 16,51) 180 514.33 P
-0.28 (1. This) 497.11 514.33 P
(is less than) 180 501.33 T
(, so a row index can \336t in a signed-word variable. Of these) 248.68 501.33 T
(16,512 rows, the last 128 are \322scratch-pad\323 rows. They are intended to be) 180 488.33 T
(used for holding information or formulae that will not be displayed or) 180 475.33 T
-0.25 (associated with a speci\336c cell. The scratch-pad rows are never shifted; if you) 180 462.33 P
(create a cell in the \336rst scratch-pad row) 180 449.33 T
(, it will always stay in that row) 362.6 449.33 T
(. All) 505.62 449.33 T
(other rows are called \322visible\323 rows. V) 180 436.33 T
(isible rows can be shifted when rows) 354.21 436.33 T
(are created or deleted. For example, if you insert a new row 10, all the cells) 180 423.33 T
-0.05 (in the old row 10 will now be in row 1) 180 410.33 P
-0.05 (1, and so on. The \336rst scratch-pad row) 351.95 410.33 P
-0.67 (will be unchanged. Be aware that the database will not delete cells from rows) 180 397.33 P
-0.57 (that are shifted off the spreadsheet. For example, if you insert a new row) 180 384.33 P
-0.57 (, the) 508.79 384.33 P
(last visible row will be shifted off the spreadsheet; the references to cells in) 180 371.33 T
(that row will be removed, but the cells themselves will stay as) 180 358.33 T
1 9 Q
(DB) 469.51 358.33 T
1 10 Q
( items in) 483.01 358.33 T
(the \336le. This is not generally a problem, since few cell \336les will need to use) 180 345.33 T
(the last visible rows. If you add a row that will cause cells to be shifted off,) 180 332.33 T
(you should delete those cells \336rst.) 180 319.33 T
-0.44 (The \336rst row has an index number of zero. \050See Figure) 180 299.33 P
-0.44 (19-) 430.48 299.33 P
-0.44 (2.\051 The last visible) 444.93 299.33 P
(row has an index equal to the preprocessor constant) 180 286.33 T
1 9 Q
(LARGEST_VISIBLE_ROW) 180 273.33 T
1 10 Q
(. The \336rst scratch-pad row has an index equal to) 292.88 273.33 T
(\050) 180 260.33 T
1 9 Q
(LARGEST_VISIBLE_ROW) 183.33 260.33 T
1 10 Q
(+) 300.1 260.33 T
(1\051. The last scratch-pad row has an index equal) 308.94 260.33 T
-0.55 (to) 180 247.33 P
1 9 Q
-0.49 (LARGEST_ROW) 191.12 247.33 P
1 10 Q
-0.55 ( \050which equals \050) 262.13 247.33 P
1 9 Q
-0.49 (LARGEST_VISIBLE_ROW) 333.09 247.33 P
1 10 Q
-0.55 (+) 449.86 247.33 P
-0.55 (128\051 or 16,51) 458.7 247.33 P
-0.55 (1\051.) 517.09 247.33 P
(The constants are all de\336ned in) 180 234.33 T
5 F
(cell.h) 328.54 234.33 T
1 F
(.) 356.51 234.33 T
(The basic data unit in a cell \336le is the) 180 214.33 T
3 F
(cell) 356.53 214.33 T
1 F
(. The cell library treats cells as) 372.07 214.33 T
(opaque data structures; their internal structure is entirely up to the geode) 180 201.33 T
(using them. Cells are stored as ungrouped) 180 188.33 T
1 9 Q
(DB) 378.16 188.33 T
1 10 Q
( items. This restricts cell size) 391.66 188.33 T
-0.61 (to the size of a) 180 175.33 P
1 9 Q
-0.55 (DB) 246.2 175.33 P
1 10 Q
-0.61 ( item; that is, a cell can theoretically be as large as 64K, but) 259.7 175.33 P
(in practice should not grow larger than around 8K \050and ideally should be) 180 162.33 T
(under a kilobyte in size\051. Remember) 180 149.33 T
(, whenever a) 346.13 149.33 T
1 9 Q
(DB) 407.62 149.33 T
1 10 Q
( item is created or) 421.12 149.33 T
0 0 0 1 0 0 0 K
235.2 498.38 248.68 511.6 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(2) 235.47 501.33 T
7 7 Q
(1) 240.42 504.1 T
(5) 243.92 504.1 T
0 0 0 1 0 0 0 K
36 72 576 720 C
81 144 171 275.12 C
0 0 0 1 0 0 0 K
0 9 Q
0 X
0 0 0 1 0 0 0 K
-0.17 (Cells are Ungrouped) 81 222.12 P
(DB Items) 81 211.12 T
1 F
(When you create or) 81 195.12 T
(resize a cell, you) 81 184.12 T
-0.56 (invalidate pointers to) 81 173.12 P
(all ungrouped items) 81 162.12 T
(in that VM \336le.) 81 151.12 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
1 X
90 450 13.5 13.5 101.25 251 G
4 H
0 Z
90 450 13.5 13.5 101.25 251 A
0 0 0 1 0 0 0 K
81 230.88 121.5 271.38 R
1 H
0 X
N
0 0 0 0 1 1 1 K
0 36 Q
7 X
0 0 0 0 1 1 1 K
(!) 95.26 238.94 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "732" 14
%%Page: "733" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Cell Library) 452.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(733) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(resized, pointers to all other items in the group are invalidated. Since cells) 180 332.52 T
-0.65 (are ungrouped items, whenever you create or resize a cell, you invalidate any) 180 319.52 P
(pointers to all other ungrouped items in that) 180 306.52 T
1 9 Q
(VM) 389.28 306.52 T
1 10 Q
( \336le. In particular) 404.27 306.52 T
(, you) 485.57 306.52 T
-0.46 (invalidate pointers to all other cells in that) 180 293.52 P
1 9 Q
-0.41 (VM) 377.46 293.52 P
1 10 Q
-0.46 ( \336le \050even if the cells belong to) 392.45 293.52 P
(another cell \336le in the) 180 280.52 T
1 9 Q
(VM) 284.27 280.52 T
1 10 Q
( \336le\051.) 299.26 280.52 T
-0.03 (Cells are grouped into) 180 260.53 P
3 F
-0.03 (rows) 284.68 260.53 P
1 F
-0.03 (. A row can have up to 256 cells, numbered from) 306.34 260.53 P
(zero to 255. W) 180 247.53 T
(ithin a row) 245.38 247.53 T
(, cells are identi\336ed by their column index. The) 295.21 247.53 T
-0.05 (column index can \336t into an) 180 234.53 P
3 F
-0.05 (unsigned) 311.36 234.53 P
1 F
-0.05 ( byte variable. The cell library creates) 353.38 234.53 P
-0.81 (a) 180 221.53 P
3 F
-0.81 (column array) 187.53 221.53 P
1 F
-0.81 ( for every row which contains cells. The column array contains) 248.75 221.53 P
(one entry for each cell in the row) 180 208.53 T
(. A row often contains just a few widely) 330.56 208.53 T
(scattered elements. For this reason, the column array is implemented as a) 180 195.53 T
3 F
(sparse array) 180 182.53 T
1 F
(. Each cell in the row has an entry consisting of two parts,) 236.27 182.53 T
-0.48 (namely the cell\325) 180 169.53 P
-0.48 (s column number and its) 251.1 169.53 P
5 F
-0.49 (DBGroupAndItem) 366.14 169.53 P
1 F
-0.48 ( structure. The) 460.58 169.53 P
(advantage of this arrangement is that the column array need only contain) 180 156.53 T
81 144 531 648 C
0 0 0 1 0 0 0 K
180 339.19 531 648 C
0 0 0 1 0 0 0 K
197.92 494.14 368.92 506.48 R
6 X
0 0 0 1 0 0 0 K
V
0.5 H
0 Z
0 X
N
3 10 Q
(V) 400.59 602.91 T
(isible Rows) 407.01 602.91 T
(Scratch-Pad Rows) 400.59 554.08 T
0 F
(Figure) 180 415.83 T
(19-) 213.34 415.83 T
(2) 227.79 415.83 T
3 F
(Inserting a New Row) 236.13 415.83 T
-0.57 (1\051 A cell \336le before a row is inserted. This is an abstract representation; in fact) 180 401.83 P
-0.05 (the rows contain references to cells, not the cells themselves. Real cell \336les, of) 180 389.83 P
(course, have many more visible and scratch-pad rows.) 180 377.83 T
-0.62 (2\051 A new row is inserted at position 2. This shifts all the following visible rows) 180 365.83 P
(down; it does not affect the scratch-pad rows.) 180 353.83 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
197.92 641.39 368.92 641.39 2 L
2 Z
N
197.92 629.05 368.92 629.05 2 L
N
197.92 616.7 368.92 616.7 2 L
N
197.92 604.36 368.92 604.36 2 L
N
197.92 592.02 368.92 592.02 2 L
N
197.92 579.68 368.92 579.68 2 L
N
197.92 567.34 368.92 567.34 2 L
3 H
3 X
N
197.92 554.99 368.92 554.99 2 L
0.5 H
0 X
N
197.92 542.65 368.92 542.65 2 L
N
197.92 641.39 197.92 542.65 2 L
N
216.92 641.39 216.92 542.65 2 L
N
235.92 641.39 235.92 542.65 2 L
N
254.92 641.39 254.92 542.65 2 L
N
273.92 641.39 273.92 542.65 2 L
N
292.92 641.39 292.92 542.65 2 L
N
311.92 641.39 311.92 542.65 2 L
N
330.92 641.39 330.92 542.65 2 L
N
349.92 641.39 349.92 542.65 2 L
N
368.92 641.39 368.92 542.65 2 L
N
(A) 204.75 632.08 T
(X) 262.75 631.58 T
(B) 283.25 606.91 T
(D) 318.75 619.74 T
(C) 241.75 594.24 T
(F) 336.59 558.58 T
(P) 222.09 546.41 T
(L) 283.42 545.91 T
380.72 544.8 368.92 542.65 377.79 550.73 379.26 547.77 4 Y
V
399.75 557.91 379.26 547.77 2 L
N
378.98 560.8 368.92 567.34 380.92 567.13 379.95 563.96 4 Y
V
399.75 557.91 379.95 563.96 2 L
N
378.48 574.58 368.92 567.34 373.19 578.55 375.84 576.57 4 Y
V
398.09 606.24 375.84 576.56 2 L
N
373.74 630.4 368.92 641.39 378.83 634.62 376.28 632.51 4 Y
V
398.09 606.24 376.29 632.51 2 L
N
(V) 400.59 492.69 T
(isible Rows) 407.01 492.69 T
(Scratch-Pad Rows) 400.59 443.86 T
197.92 531.17 368.92 531.17 2 L
N
197.92 518.82 368.92 518.82 2 L
N
197.92 506.48 368.92 506.48 2 L
N
197.92 494.14 368.92 494.14 2 L
N
197.92 481.8 368.92 481.8 2 L
N
197.92 469.45 368.92 469.45 2 L
N
197.92 457.11 368.92 457.11 2 L
3 H
3 X
N
197.92 444.77 368.92 444.77 2 L
0.5 H
0 X
N
197.92 432.43 368.92 432.43 2 L
N
197.92 531.17 197.92 432.43 2 L
N
216.92 531.17 216.92 432.43 2 L
N
235.92 531.17 235.92 432.43 2 L
N
254.92 531.17 254.92 432.43 2 L
N
273.92 531.17 273.92 432.43 2 L
N
292.92 531.17 292.92 432.43 2 L
N
311.92 531.17 311.92 432.43 2 L
N
330.92 531.17 330.92 432.43 2 L
N
349.92 531.17 349.92 432.43 2 L
N
368.92 531.17 368.92 432.43 2 L
N
(A) 204.75 521.86 T
(X) 262.75 521.36 T
(B) 283.25 485.02 T
(D) 318.75 509.52 T
(C) 241.75 472.36 T
(F) 336.59 448.36 T
(P) 222.09 436.19 T
(L) 283.42 435.69 T
380.72 434.58 368.92 432.43 377.79 440.51 379.26 437.55 4 Y
V
399.75 447.69 379.26 437.55 2 L
N
378.98 450.58 368.92 457.11 380.92 456.91 379.95 453.74 4 Y
V
399.75 447.69 379.95 453.74 2 L
N
378.48 464.36 368.92 457.11 373.19 468.33 375.84 466.34 4 Y
V
398.09 496.02 375.84 466.34 2 L
N
373.73 520.18 368.91 531.17 378.83 524.41 376.28 522.29 4 Y
V
398.09 496.02 376.29 522.29 2 L
N
(1\051) 181.83 634.02 T
(2\051) 181.83 523.8 T
(P) 225.42 497.02 T
(Q) 320.09 495.69 T
(R) 357.25 496.86 T
192.86 493.67 197.92 489.86 192.08 487.38 192.47 490.53 4 Y
V
90 236.99 10 4.17 197.92 494.02 A
192.86 481.51 197.92 477.69 192.08 475.22 192.47 478.36 4 Y
V
90 236.99 10 4.17 197.92 481.86 A
192.86 469.34 197.92 465.52 192.08 463.05 192.47 466.2 4 Y
V
90 236.99 10 4.17 197.92 469.69 A
0 0 0 1 0 0 0 K
81 144 531 648 C
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "733" 15
%%Page: "734" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(734) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.1 (entries for those cells which exist in the row \050instead of maintaining entries) 180 641.33 P
-0.06 (for the blank spaces between cells\051. The disadvantage is that when you lock) 180 628.33 P
(a cell, the cell manager has to make a search through the column array to) 180 615.33 T
(\336nd its reference; however) 180 602.33 T
(, this is generally a small cost.) 301.47 602.33 T
(The column arrays themselves belong to) 180 582.33 T
3 F
(row blocks) 368.91 582.33 T
1 F
(. Each row block is an) 417.24 582.33 T
-0.42 (LMem heap stored in the) 180 569.33 P
1 9 Q
-0.38 (VM) 297.16 569.33 P
1 10 Q
-0.42 ( \336le, and each of its column arrays is a chunk in) 312.15 569.33 P
-0.48 (that heap. Row blocks contain up to 32 rows. These rows are sequential; that) 180 556.33 P
-0.15 (is, any existing rows from row zero to row 31 will always belong to the same) 180 543.33 P
(row block, and none of them will ever be in the same row block as row 32.) 180 530.33 T
-0.58 (Since the row blocks and column arrays are not kept in) 180 517.33 P
1 9 Q
-0.52 (DB) 431.1 517.33 P
1 10 Q
-0.58 ( items, they can be) 444.6 517.33 P
-0.81 (accessed and altered without causing any locked items to move. T) 180 504.33 P
-0.81 (o keep track) 474.16 504.33 P
-0.31 (of the row blocks, you must have a) 180 491.33 P
5 F
-0.32 (CellFunctionParameters) 339.36 491.33 P
1 F
-0.31 ( structure for) 467.88 491.33 P
-0.56 (each cell \336le. That structure need not be kept in the) 180 478.33 P
1 9 Q
-0.51 (VM) 415.67 478.33 P
1 10 Q
-0.56 ( \336le \050although it often) 430.66 478.33 P
(is\051; rather) 180 465.33 T
(, you must pass the address of the structure to any cell library) 225.37 465.33 T
(routine you call.) 180 452.33 T
-0.26 (Owing to the structure of a cell \336le, some actions are faster than others. The) 180 432.33 P
-0.55 (essential thing to remember is that cells are grouped together in rows, which) 180 419.33 P
-0.17 (are themselves grouped together to form a cell \336le. This means that you can) 180 406.33 P
(access several cells belonging to the same row faster than you could access) 180 393.33 T
-0.81 (cells belonging to different rows. Similarly) 180 380.33 P
-0.81 (, if you insert a cell, it is much more) 370.59 380.33 P
(ef\336cient to shift the rest of the row over \050which involves accessing only that) 180 367.33 T
-0.21 (one row\051 than to shift the rest of the column down \050which involves accessing) 180 354.33 P
(every visible row\051. Similarly) 180 341.33 T
(, you can access groups of cells faster if they) 308.91 341.33 T
(belong to the same row block.) 180 328.33 T
0 14 Q
(19.4.2) 123.08 286 T
0 18 Q
(Using the Cell Library) 180 286 T
1 10 Q
(The cell library is versatile. The basic cell access routines are very simple,) 180 262.33 T
-0.67 (but more advanced utilities give you a wide range of actions. This section will) 180 249.33 P
-0.02 (explain the techniques used to set up and use a cell \336le, as well as the more) 180 236.33 P
(advanced techniques available.) 180 223.33 T
0 14 Q
(19.4.2.1) 111.4 189.67 T
(The CellFunctionParameters Structure) 180 189.67 T
1 10 Q
-0.69 (The cell library needs to have certain information about any cell \336le on which) 180 167.33 P
-0.6 (it acts; for example, it needs to know the handles of the) 180 154.33 P
1 9 Q
-0.54 (VM) 430.68 154.33 P
1 10 Q
-0.6 ( \336le and of the row) 445.67 154.33 P
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "734" 16
%%Page: "735" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Cell Library) 452.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(735) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
(blocks. That information is kept in a) 180 641.33 T
5 F
(CellFunctionParameters) 350.97 641.33 T
1 F
( structure.) 479.49 641.33 T
(The geode which uses a cell \336le is responsible for creating a) 180 628.33 T
5 F
(CellFunctionParameters) 180 615.33 T
1 F
( structure. The C de\336nition of the structure is) 308.52 615.33 T
(shown below) 180 602.33 T
(.) 237.98 602.33 T
81 569.98 531 582 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 569.98 531 582 R
7 X
0 0 0 1 0 0 0 K
V
76.5 577.23 617.5 580.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 563.31 T
(19-) 147.13 563.31 T
(1 CellFunctionParameters) 161.58 563.31 T
6 9 Q
(typedef) 81 548.98 T
(struct {) 125 548.98 T
(CellFunctionParameterFlags) 125 537.98 T
(CFP_flags;) 212.5 526.98 T
(/* Initialize this to zero. */) 301 526.98 T
(VMFileHandle) 125 515.98 T
(CFP_file;) 212.5 515.98 T
(/* The handle of the VM file containing) 301 515.98 T
( * the cell file. Reinitialize this each) 301 504.98 T
( * time you open the file. */) 301 493.98 T
(VMBlockHandle) 125 482.98 T
(CFP_rowBlocks[N_ROW_BLOCKS];) 212.5 482.98 T
(/* Initialize these to zero.) 363.7 482.98 T
(*/) 81 471.98 T
(} CellFunctionParameters;) 81 460.98 T
81 436.95 531 448.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 436.95 531 448.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 444.2 617.5 447.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(In order to create a cell \336le, you must create a) 180 419.29 T
5 F
(CellFunctionParameters) 394.83 419.29 T
1 F
-0.15 (structure. Simply allocate the space for the structure and initialize the data) 180 406.29 P
(\336elds. When you call a cell library routine, lock the structure on the global) 180 393.29 T
(heap and pass its address. Geodes will usually allocate a) 180 380.29 T
1 9 Q
(VM) 444.14 380.29 T
1 10 Q
( block in the) 459.13 380.29 T
(same \336le as the cell \336le, and use this block to hold the) 180 367.29 T
5 F
-0.82 (CellFunctionParameters) 180 354.29 P
1 F
-0.8 ( structure; this ensures that the structure will be) 308.52 354.29 P
-0.79 (saved along with the cell \336le. They may often declare this to be the map block,) 180 341.29 P
(making it easy to locate \050see section 18.3.10 of chapter 18\051. However) 180 328.29 T
(, this is) 493.58 328.29 T
(entirely at the programmer) 180 315.29 T
(\325) 307.22 315.29 T
(s discretion. All that the cell library requires is) 308.89 315.29 T
(that the structure be locked or \336xed in memory every time a cell library) 180 302.29 T
(routine is called.) 180 289.29 T
(The) 180 269.29 T
5 F
(CellFunctionParameters) 200.56 269.29 T
1 F
( structure contains the following \336elds:) 329.08 269.29 T
3 9 Q
(CFP_) 180 249.29 T
3 10 Q
(\337ags) 203 249.29 T
1 F
(The cell library uses this byte for miscellaneous bookkeeping.) 243 249.29 T
(When you create the structure, initialize this \336eld to zero.) 243 237.29 T
(There is only one \337ag which you should check or change; that) 243 225.29 T
(is the \337ag) 243 213.29 T
1 9 Q
( CFPF_DIRTY) 288.38 213.29 T
1 10 Q
(. The cell library routines set this bit) 348.28 213.29 T
(whenever they change the) 243 201.29 T
5 F
(CellFunctionParameters) 366.89 201.29 T
1 F
(structure, thus indicating that the structure ought to be) 243 189.29 T
(resaved. After you save it, you may clear this bit.) 243 177.29 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "735" 17
%%Page: "736" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(736) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
3 9 Q
0 X
(CFP_) 180 641.33 T
3 10 Q
(\336le) 203 641.33 T
1 F
-0.51 (This \336eld must contain the \336le handle of the) 243 641.33 P
1 9 Q
-0.46 (VM) 446.04 641.33 P
1 10 Q
-0.51 ( \336le containing) 461.04 641.33 P
(the cell \336le. A) 243 629.33 T
1 9 Q
(VM) 309.12 629.33 T
1 10 Q
( \336le can have a new \336le handle every time it) 324.11 629.33 T
-0.02 (is opened; thus, you must reinitialize this \336eld every time you) 243 617.33 P
(open the \336le.) 243 605.33 T
3 9 Q
(CFP_) 180 586.33 T
3 10 Q
(rowBlocks) 203 586.33 T
1 F
-0.83 (This \336eld is an array of) 243 574.33 P
1 9 Q
-0.74 (VM) 348.44 574.33 P
1 10 Q
-0.83 ( block handles, one for every existing) 363.43 574.33 P
(or potential row block. If a row block exists in the cell \336le, its) 243 562.33 T
(handle is recorded here. If it does not exist, a null handle is) 243 550.33 T
(kept in the appropriate place. The length of this array is a) 243 538.33 T
(number of words equal to the constant) 243 526.33 T
1 9 Q
(N_ROW_BLOCKS) 423.39 526.33 T
1 10 Q
(\050de\336ned in) 243 514.33 T
5 F
(cell.h) 294.85 514.33 T
1 F
(\051. When you create a cell \336le, initialize all of) 322.82 514.33 T
(these handles to zero; do not access or change this \336eld) 243 502.33 T
(thereafter) 243 490.33 T
(.) 288.92 490.33 T
(One warning: The cell library expects the) 180 471.33 T
5 F
(CellFunctionParameters) 373.91 471.33 T
1 F
(structure to remain motionless for the duration of a call. Therefore, if you) 180 458.33 T
-0.37 (allocate it as a) 180 445.33 P
1 9 Q
-0.33 (DB) 248.18 445.33 P
1 10 Q
-0.37 ( item in the same) 261.68 445.33 P
1 9 Q
-0.33 (VM) 343 445.33 P
1 10 Q
-0.37 ( \336le as the cell \336le, you must) 358 445.33 P
3 F
-0.37 (not) 489.51 445.33 P
1 F
-0.37 ( have) 504.14 445.33 P
(the structure be an ungrouped item. Remember) 180 432.33 T
(, all the cells are ungrouped) 399.45 432.33 T
1 9 Q
(DB) 180 419.33 T
1 10 Q
( items; allocating or resizing a cell can potentially move any or all of the) 193.5 419.33 T
(ungrouped) 180 406.33 T
1 9 Q
(DB) 232.4 406.33 T
1 10 Q
( items in that \336le.) 245.9 406.33 T
0 14 Q
(19.4.2.2) 111.4 372.67 T
(Basic Cell Array Routines) 180 372.67 T
6 10 Q
(CellReplace\050\051, CellLock\050\051, CellLockGetRef\050\051, CellDirty\050\051,) 180 350.33 T
(CellGetDBItem\050\051, CellGetExtent\050\051) 180 337.33 T
1 F
-0.31 (The basic cell routines are simple to use. One argument taken by all of them) 180 317.33 P
(is the address of the) 180 304.33 T
5 F
(CellFunctionParameters) 275.75 304.33 T
1 F
( structure. As noted, this) 404.27 304.33 T
(structure must be locked or \336xed in memory for the duration of a function) 180 291.33 T
-0.27 (call. Y) 180 278.33 P
-0.27 (ou can also access cells in any of the ways you would access a) 207.52 278.33 P
1 9 Q
-0.24 (DB) 488.77 278.33 P
1 10 Q
-0.27 ( item;) 502.27 278.33 P
(for example, you can resize a cell with) 180 265.33 T
5 F
(DBReAlloc\050\051) 358.35 265.33 T
1 F
(.) 422.43 265.33 T
(All of the routines use the) 180 245.33 T
1 9 Q
(VM) 302.6 245.33 T
1 10 Q
( \336le handle speci\336ed in the) 317.59 245.33 T
5 F
(CellFunctionParameters) 180 232.33 T
1 F
( structure.) 308.52 232.33 T
-0.48 (T) 180 212.33 P
-0.48 (o create, replace, or free a cell, call the routine) 185.75 212.33 P
5 F
-0.5 (CellReplace\050\051) 397.24 212.33 P
1 F
-0.48 (. This routine) 467.07 212.33 P
(takes \336ve arguments:) 180 199.33 T
2 F
(u) 180 179.33 T
1 F
(The address of the) 198 179.33 T
5 F
(CellFunctionParameters) 285.97 179.33 T
1 F
( structure.) 414.49 179.33 T
2 F
(u) 180 160.33 T
1 F
(The element\325) 198 160.33 T
(s row) 257.27 160.33 T
(.) 280.98 160.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "736" 18
%%Page: "737" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Cell Library) 452.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(737) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
2 10 Q
0 X
(u) 180 641.33 T
1 F
(The element\325) 198 641.33 T
(s column.) 257.27 641.33 T
2 F
(u) 180 622.33 T
1 F
(The address of the data to copy into the new cell. This must not move) 198 622.33 T
-0.23 (during the allocation; therefore, it must not be in an ungrouped) 198 610.33 P
1 9 Q
-0.2 (DB) 491.46 610.33 P
1 10 Q
-0.23 ( item) 504.96 610.33 P
(in the same) 198 598.33 T
1 9 Q
(VM) 254.68 598.33 T
1 10 Q
( \336le as the cell \336le. In particular) 269.67 598.33 T
(, it must not be another) 417.28 598.33 T
(cell. The data will not be changed.) 198 586.33 T
2 F
(u) 180 567.33 T
1 F
-0.17 (The size of the new cell. If you pass a size of zero, the cell will be deleted) 198 567.33 P
(if it already exists; otherwise, nothing will happen.) 198 555.33 T
(If the cell \336le already contains a cell with the speci\336ed coordinates,) 180 536.33 T
5 F
(CellReplace\050\051) 180 523.33 T
1 F
( will free it.) 249.83 523.33 T
5 F
(CellReplace\050\051) 305.77 523.33 T
1 F
( will then allocate a new cell and) 375.6 523.33 T
-0.08 (copy the speci\336ed data into it. The routine invalidates any existing pointers) 180 510.33 P
(to ungrouped) 180 497.33 T
1 9 Q
(DB) 244.07 497.33 T
1 10 Q
( items in the \336le.) 257.57 497.33 T
(Once you have created a cell, you can lock it with) 180 477.33 T
5 F
(CellLock\050\051) 409.66 477.33 T
1 F
(. This routine) 463.56 477.33 T
(takes three arguments: the address of the) 180 464.33 T
5 F
(CellFunctionParameters) 375.76 464.33 T
1 F
-0.6 (structure, the cell\325) 180 451.33 P
-0.6 (s row) 262.5 451.33 P
-0.6 (, and the cell\325) 285.6 451.33 P
-0.6 (s column. It locks the cell and returns its) 344.74 451.33 P
-0.23 (address \050the assembly version returns the cell\325) 180 438.33 P
-0.23 (s segment address and chunk) 392.88 438.33 P
(handle\051. Remember) 180 425.33 T
(, the cell is an ungrouped) 269.82 425.33 T
1 9 Q
(DB) 389.09 425.33 T
1 10 Q
( item, so its address may) 402.59 425.33 T
-0.76 (change the next time another ungrouped) 180 412.33 P
1 9 Q
-0.69 (DB) 366.72 412.33 P
1 10 Q
-0.76 ( item is allocated or resized, even) 380.22 412.33 P
(if the cell is locked.) 180 399.33 T
(Like all) 180 379.33 T
1 9 Q
(DB) 218.17 379.33 T
1 10 Q
( items, cells can \050under certain circumstances\051 be moved even) 231.67 379.33 T
(while locked. For this reason, a special locking routine is provided, namely) 180 366.33 T
5 F
-0.38 (CellLockGetRef\050\051) 180 353.33 P
1 F
-0.37 (. This routine is just like) 270.01 353.33 P
5 F
-0.38 (CellLock\050\051) 384.11 353.33 P
1 F
-0.37 ( except that it takes) 438.01 353.33 P
(one additional argument, namely the address of an optr) 180 340.33 T
(.) 436.7 340.33 T
5 F
(CellLockGetRef) 442.26 340.33 T
1 F
(writes the locked item\325) 180 327.33 T
(s global memory handle and chunk handle into the) 284.09 327.33 T
-0.47 (optr) 180 314.33 P
-0.47 (. Y) 198.33 314.33 P
-0.47 (ou can translate an optr to a cell into a pointer by calling) 209.35 314.33 P
5 F
-0.48 (CellDeref\050\051) 468.68 314.33 P
1 F
-0.47 (;) 525.91 314.33 P
(this is another synonym for) 180 301.33 T
5 F
(LMemDeref\050\051) 309.82 301.33 T
1 F
(, and is identical to it in all) 378.89 301.33 T
(respects. For more information, see section 19.3.4 on page 726.) 180 288.33 T
-0.1 (If you change a cell, you must mark it dirty to insure that it will be updated) 180 268.33 P
(on the disk. T) 180 255.33 T
(o do this, call the routine) 242.43 255.33 T
5 F
(CellDirty\050\051) 360.41 255.33 T
1 F
(. This routine takes two) 416.34 255.33 T
-0.46 (arguments, namely the address of the) 180 242.33 P
5 F
-0.47 (CellFunctionParameters) 354.88 242.33 P
1 F
-0.46 ( structure) 483.4 242.33 P
(and the address of the \050locked\051 cell. The routine marks the cell\325) 180 229.33 T
(s item block) 469.84 229.33 T
(as dirty) 180 216.33 T
(.) 214.45 216.33 T
(Sometimes you may need to get the) 180 196.33 T
1 9 Q
(DB) 346.51 196.33 T
1 10 Q
( handles for a cell. For example, you) 360.01 196.33 T
(may want to use a) 180 183.33 T
1 9 Q
(DB) 267.25 183.33 T
1 10 Q
( utility to resize the cell; to do this, you need to know) 280.75 183.33 T
(its handles. For these situations, call the routine) 180 170.33 T
5 F
(CellGetDBItem\050\051) 407.63 170.33 T
1 F
(. The) 494.48 170.33 T
(routine takes three arguments: the address of the) 180 157.33 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "737" 19
%%Page: "738" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(738) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
5 10 Q
0 X
-0.63 (CellFunctionParameters) 180 641.33 P
1 F
-0.61 ( structure, the cell\325) 308.52 641.33 P
-0.61 (s row) 393.18 641.33 P
-0.61 (, and the cell\325) 416.29 641.33 P
-0.61 (s column. It) 475.41 641.33 P
(returns the cell\325) 180 628.33 T
(s) 252.59 628.33 T
5 F
(DBGroupAndItem) 260 628.33 T
1 F
( value. Y) 354.44 628.33 T
(ou can pass this value to any) 393.9 628.33 T
(of the) 180 615.33 T
5 F
(DB\311Ungrouped\050\051) 208.89 615.33 T
1 F
( routines \050described in \322Routines for Ungrouped) 301.3 615.33 T
-0.12 (Items\323 on page 729\051, or you can break this value into its component handles) 180 602.33 P
(by calling) 180 589.33 T
5 F
(DBGroupFromGroupAndItem\050\051) 227.42 589.33 T
1 F
( or) 390.94 589.33 T
5 F
(DBItemFromGroupAndItem\050\051) 180 576.33 T
1 F
(.) 334.44 576.33 T
(If you want to \336nd out the bounds of an existing cell \336le, call the routine) 180 556.33 T
5 F
(CellGetExtent\050\051) 180 543.33 T
1 F
(. This routine takes two arguments: the address of the) 261.48 543.33 T
5 F
(CellFunctionParameters) 180 530.33 T
1 F
(, and the address of a) 308.52 530.33 T
5 F
(RangeEnumParams) 410.02 530.33 T
1 F
(structure. For the purposes of this routine, only one of its \336elds matters,) 180 517.33 T
(namely the \336eld) 180 504.33 T
3 9 Q
(REP_) 257.42 504.33 T
3 10 Q
(bounds) 281.09 504.33 T
1 F
(. This \336eld is itself a structure of type) 314.42 504.33 T
5 F
(Rectangle) 180 491.33 T
1 F
(, whose structure is shown below in Code Display) 232.04 491.33 T
(19-) 462.81 491.33 T
(2.) 477.26 491.33 T
5 F
(CellGetExtent\050\051) 180 478.33 T
1 F
( writes the bounds of the utilized section of the cell \336le in) 261.48 478.33 T
-0.25 (the) 180 465.33 P
3 9 Q
-0.23 (REP_) 197.52 465.33 P
3 10 Q
-0.25 (bounds) 221.2 465.33 P
1 F
-0.25 ( \336eld. The index of the \336rst row which contains a cell will be) 254.52 465.33 P
-0.54 (written in the rectangle\325) 180 452.33 P
-0.54 (s) 289.86 452.33 P
3 F
-0.54 (R_top) 296.73 452.33 P
1 F
-0.54 ( \336eld; the index of the last row will be written) 323.4 452.33 P
(in) 180 439.33 T
3 F
(R_bottom) 192.04 439.33 T
1 F
(; the index of the \336rst column will be written in) 235.94 439.33 T
3 F
(R_left) 457.08 439.33 T
1 F
(; and the) 484.11 439.33 T
-0.3 (index of the last column will be written in) 180 426.33 P
3 F
-0.3 (R_right) 373.27 426.33 P
1 F
-0.3 (. If the cell \336le contains no) 408.45 426.33 P
(cells, all four \336elds will be set to) 180 413.33 T
(.) 342.73 413.33 T
81 380.98 531 393 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 380.98 531 393 R
7 X
0 0 0 1 0 0 0 K
V
76.5 388.23 617.5 391.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 374.31 T
(19-) 147.13 374.31 T
(2 Rectangle) 161.58 374.31 T
6 9 Q
(typedef) 81 359.98 T
(struct {) 125 359.98 T
(sword) 125 348.98 T
(R_left;) 212.5 348.98 T
(/* Index of first column written here. */) 301 348.98 T
(sword) 125 337.98 T
(R_top;) 212.5 337.98 T
(/* Index of first row written here. */) 301 337.98 T
(sword) 125 326.98 T
(R_right;) 212.5 326.98 T
(/* Index of last column written here. */) 301 326.98 T
(sword) 125 315.98 T
(R_bottom;) 212.5 315.98 T
(/* Index of last row written here. */) 301 315.98 T
(} Rectangle;) 81 304.98 T
81 280.95 531 292.98 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 280.95 531 292.98 R
7 X
0 0 0 1 0 0 0 K
V
76.5 288.2 617.5 291.7 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 14 Q
0 X
0 0 0 1 0 0 0 K
(19.4.2.3) 111.4 249.62 T
(Actions on a Range of Cells) 180 249.62 T
6 10 Q
(RangeExists\050\051, RangeInsert\050\051, RangeEnum\050\051, RangeSort\050\051,) 180 227.29 T
(RangeInsertParams) 180 214.29 T
1 F
(The cell library provides a number of routines which act on a range of cells.) 180 194.29 T
(All of these routines take the address of a) 180 181.29 T
5 F
(CellFunctionParameters) 374.84 181.29 T
1 F
-0.14 (structure as an argument. Many of these routines also take the address of a) 180 168.29 P
-0.24 (special parameter structure; for example,) 180 155.29 P
5 F
-0.25 (RangeInsert\050\051) 372.87 155.29 P
1 F
-0.24 ( takes the address) 445.09 155.29 P
0 0 0 1 0 0 0 K
330.96 410.38 342.73 420.46 C
0 0 0 1 0 0 0 K
7 9 Q
0 X
0 0 0 1 0 0 0 K
(1) 336.52 413.33 T
(\320) 331.68 413.33 T
0 0 0 1 0 0 0 K
36 72 576 720 C
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "738" 20
%%Page: "739" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
162 690.34 558 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(The Cell Library) 452.19 692.67 T
162 666.34 558 678.01 R
7 X
V
1 10 Q
0 X
(739) 541.32 671.34 T
324 684 580 684 2 L
7 X
V
3 H
2 Z
0 X
N
504 90 558 125 R
7 X
V
2 60 Q
0 X
(l) 507.27 85 T
0 24 Q
(Concepts book) 327.65 110 T
90 99 270 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
90.67 123.5 270.67 135.67 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
536.84 533.33 557.67 545 R
V
0 8 Q
0 X
(19.4) 542.1 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
1 10 Q
0 X
-0.4 (of a) 180 641.33 P
5 F
-0.41 (RangeInsertParams) 198.65 641.33 P
1 F
-0.4 ( structure. In these cases, the structure should be) 302.73 641.33 P
(in locked or \336xed memory) 180 628.33 T
(. If the routine might allocate or resize cells, the) 297.78 628.33 T
(structure must not be in an ungrouped) 180 615.33 T
1 9 Q
(DB) 362.04 615.33 T
1 10 Q
( item.) 375.54 615.33 T
-0.57 (Y) 180 595.33 P
-0.57 (ou may want to \336nd out if there are any cells in a speci\336ed section of the cell) 185.93 595.33 P
(\336le. T) 180 582.33 T
(o do this, call the routine) 205.57 582.33 T
5 F
(RangeExists\050\051) 323.55 582.33 T
1 F
(. This routine takes \336ve) 395.95 582.33 T
(arguments:) 180 569.33 T
2 F
(u) 180 549.33 T
1 F
(The address of the locked) 198 549.33 T
5 F
(CellFunctionParameters) 318.01 549.33 T
1 F
( structure) 446.53 549.33 T
2 F
(u) 180 530.33 T
1 F
(The index of the \336rst row in the section to be checked) 198 530.33 T
2 F
(u) 180 511.33 T
1 F
(The index of the \336rst column in the section to be checked) 198 511.33 T
2 F
(u) 180 492.33 T
1 F
(The index of the last row in the section to be checked) 198 492.33 T
2 F
(u) 180 473.33 T
1 F
(The index of the last column in the section to be checked) 198 473.33 T
(If any cells exist in that section, the routine returns) 180 454.33 T
3 F
(true) 421.68 454.33 T
1 F
( \050i.e. non-zero\051.) 440.19 454.33 T
(Otherwise, it returns) 180 441.33 T
3 F
(false) 280.56 441.33 T
1 F
(.) 301.84 441.33 T
-0.1 (Y) 180 421.33 P
-0.1 (ou may wish to insert several cells at once. For this reason, the cell library) 185.93 421.33 P
-0.22 (provides the routine) 180 408.33 P
5 F
-0.22 (RangeInsert\050\051) 275.46 408.33 P
1 F
-0.22 (. This routine does not actually allocate) 347.68 408.33 P
(cells; instead, it shifts existing cells to make room for new ones. Y) 180 395.33 T
(ou specify) 481.9 395.33 T
-0.14 (a section of the cell \336le to shift. Any cells in that section will be shifted over;) 180 382.33 P
-0.11 (the caller speci\336es whether they should be shifted horizontally or vertically) 180 369.33 P
-0.11 (.) 525.55 369.33 P
(The routine takes two arguments, namely the address of the) 180 356.33 T
5 F
(CellFunctionParameters) 180 343.33 T
1 F
( and the address of a) 308.52 343.33 T
5 F
(RangeInsertParams) 407.24 343.33 T
1 F
(structure. It does not return anything. The de\336nition of the) 180 330.33 T
5 F
-0.04 (RangeInsertParams) 180 317.33 P
1 F
-0.04 ( structure is shown in Code Display) 284.07 317.33 P
-0.04 (19-) 451.27 317.33 P
-0.04 (3. The calling) 465.72 317.33 P
(geode should allocate it and initialize it before calling) 180 304.33 T
5 F
(RangeInsert\050\051) 429.49 304.33 T
1 F
(.) 501.71 304.33 T
81 271.98 531 284 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 271.98 531 284 R
7 X
0 0 0 1 0 0 0 K
V
76.5 279.23 617.5 282.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
0 10 Q
0 X
0 0 0 1 0 0 0 K
(Code Display) 81 265.31 T
(19-) 147.13 265.31 T
(3 The RangeInsertParams and Point structures) 161.58 265.31 T
6 9 Q
(typedef) 81 250.98 T
(struct {) 125 250.98 T
(/* defined in cell.h */) 212.5 250.98 T
(Rectangle) 125 239.98 T
(RIP_bounds;) 256.5 239.98 T
(/* Range of cells to shift */) 344 239.98 T
(Point) 125 228.98 T
(RIP_delta;) 256.5 228.98 T
(/* Specify which way to shift */) 344 228.98 T
(CellFunctionParameters) 125 217.98 T
(*RIP_cfp;) 256.5 217.98 T
(} RangeInsertParams;) 81 206.98 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "739" 21
%%Page: "740" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
54 690.34 450 702 R
7 X
0 0 0 1 0 0 0 K
V
0 14 Q
0 X
(Database Library) 54 692.67 T
54 666.34 450 678.01 R
7 X
V
1 10 Q
0 X
(740) 54 671.34 T
32 684 288 684 2 L
7 X
V
3 H
2 Z
0 X
N
54 90 108 125 R
7 X
V
2 60 Q
0 X
(l) 57.27 85 T
0 24 Q
(Concepts book) 102 110 T
306 99 486 117 R
7 X
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
305.67 122.67 485.67 134.83 R
V
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
54.33 533.33 75.17 545 R
V
0 8 Q
0 X
(19.4) 54.33 539.67 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 144 531 648 R
7 X
V
6 9 Q
0 X
(typedef) 81 642 T
(struct {) 125 642 T
(/* defined in graphics.h */) 212.5 642 T
(sword) 125 631 T
(P_x;) 212.5 631 T
(/* Distance to shift horizontally */) 256.5 631 T
(sword) 125 620 T
(P_y;) 212.5 620 T
(/* Distance to shift vertically */) 256.5 620 T
(} Point;) 81 609 T
81 584.98 531 597 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 584.98 531 597 R
7 X
0 0 0 1 0 0 0 K
V
76.5 592.23 617.5 595.73 R
4 X
V
0.5 H
0 Z
N
36 72 576 720 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(The) 180 567.31 T
5 F
(RangeInsertParams) 200.56 567.31 T
1 F
( structure has three \336elds. The calling geode) 304.63 567.31 T
(should initialize the \336elds to determine the behavior of) 180 554.31 T
5 F
(RangeInsert\050\051) 436.14 554.31 T
1 F
(:) 508.36 554.31 T
1 9 Q
(RIP) 180 534.31 T
3 F
(_) 196.16 534.31 T
3 10 Q
(bounds) 200.66 534.31 T
1 F
(This \336eld speci\336es which cells should be shifted. The cells) 243 534.31 T
(currently in this range will be shifted across or down,) 243 522.31 T
-0.39 (depending on the value of) 243 510.31 P
3 9 Q
-0.35 (RIP_) 362.52 510.31 P
3 10 Q
-0.39 (delta) 383.35 510.31 P
1 F
-0.39 (; this shifts more cells, and) 406.49 510.31 P
-0.19 (so on, to the edge of the visible portion of the cell \336le. The \336eld) 243 498.31 P
(is a) 243 486.31 T
5 F
(Rectangle) 261.9 486.31 T
1 F
( structure. T) 313.94 486.31 T
(o insert an entire row \050which is) 370.98 486.31 T
(much faster than inserting a partial row\051, set) 243 474.31 T
3 9 Q
(RIP_) 243 462.31 T
3 10 Q
(bounds.R_left) 263.83 462.31 T
(= 0) 329.76 462.31 T
1 F
( and) 344.15 462.31 T
3 F
(RIP_bounds.R_right) 367.12 462.31 T
(=) 464.35 462.31 T
1 9 Q
(LARGEST_COLUMN) 245.78 450.31 T
3 10 Q
(.) 337.12 450.31 T
1 9 Q
(RIP) 180 431.31 T
3 F
(_) 196.16 431.31 T
3 10 Q
(delta) 200.66 431.31 T
1 F
(This \336eld speci\336es how far the cells should be shifted and in) 243 431.31 T
(which direction. The \336eld is a) 243 419.31 T
5 F
(Point) 382.09 419.31 T
1 F
( structure \050see Code) 410.6 419.31 T
-0.09 (Display) 243 407.31 P
-0.09 (19-) 281.16 407.31 P
-0.09 (3\051. If the range of cells is to be shifted horizontally) 295.61 407.31 P
-0.09 (,) 525.52 407.31 P
3 9 Q
-0.57 (RIP_) 243 395.31 P
3 10 Q
-0.64 (delta.P_x) 263.83 395.31 P
1 F
-0.64 ( should specify how far the cells should be shifted) 306.42 395.31 P
-0.66 (to the right, and) 243 383.31 P
3 9 Q
-0.6 (RIP_) 318.52 383.31 P
3 10 Q
-0.66 (delta.P_y) 339.35 383.31 P
1 F
-0.66 ( should be zero. If the cells are to) 381.94 383.31 P
(be shifted vertically) 243 371.31 T
(,) 333.38 371.31 T
3 9 Q
(RIP_) 338.94 371.31 T
3 10 Q
(delta.P_y) 359.77 371.31 T
1 F
( should specify how far the) 402.36 371.31 T
-0.23 (cells should be shifted down, and) 243 359.31 P
3 9 Q
-0.21 (RIP_) 396.61 359.31 P
3 10 Q
-0.23 (delta.P_x) 417.45 359.31 P
1 F
-0.23 ( should be zero.) 460.04 359.31 P
1 9 Q
(RIP) 180 340.31 T
3 F
(_) 196.16 340.31 T
3 10 Q
(cfp) 200.66 340.31 T
1 F
(This is the address of the) 243 340.31 T
5 F
(CellFunctionParameters) 362.09 340.31 T
1 F
(structure. Y) 243 328.31 T
(ou don\325) 297.44 328.31 T
(t have to initialize this; the routine will do) 330.04 328.31 T
(so automatically) 243 316.31 T
(.) 318.02 316.31 T
(Y) 180 297.31 T
(ou may need to perform a certain function on every one of a range of cells.) 185.93 297.31 T
(For this purpose, the cell library provides the routine) 180 284.31 T
5 F
(RangeEnum\050\051) 428.53 284.31 T
1 F
(. This) 500.19 284.31 T
(routine lets you specify a range of cells and a callback routine; the routine) 180 271.31 T
(will be called on each cell in that range.) 180 258.31 T
-0.06 (Y) 180 238.31 P
-0.06 (ou can sort a range of cells, by row or by column, based on any criteria you) 185.93 238.31 P
(choose. Use the routine) 180 225.31 T
5 F
(RangeSort\050\051) 290.56 225.31 T
1 F
(. This routine uses a QuickSort) 353.53 225.31 T
-0.78 (algorithm to sort the cells speci\336ed. Y) 180 212.31 P
-0.78 (ou supply a pointer to a callback routine) 348.31 212.31 P
(which is used to compare cells.) 180 199.31 T
0 0 1 0 1 1 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "740" 22
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 22
%%DocumentFonts: Helvetica-Bold
%%+ NewCenturySchlbk-Roman
%%+ ZapfDingbats
%%+ NewCenturySchlbk-Italic
%%+ Times-Bold
%%+ NewCenturySchlbk-Bold
%%+ Courier
%%+ Times-Roman
%%EOF
