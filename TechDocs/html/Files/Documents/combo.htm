<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Documents</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_20494">
 </A>
Documents

</H1>
<P>
<A NAME="index.htm_IX_Files:document control objects">
 </A>
The GEOS document control objects let the programmer ignore most of the details of opening, closing, and saving files. The programmer just specifies the characteristics the application will expect of its documents. The document control presents all dialog boxes and notices to the user, and it maintains the &quot;Save,&quot; &quot;Save As,&quot; &quot;Open,&quot; &quot;New,&quot; and &quot;Revert&quot; triggers in the File menu.</P>
<P>
There are three parts to the document control: the GenDocumentControl object, which maintains the user interface; the GenDocuments, each of which manages a single document; and the GenDocumentGroup object, which creates and manages GenDocument objects as needed. These classes can all be subclassed to add functionality.</P>
<P>

</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Documents_1.htm">1 Document Control Overview</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_2.htm">1.1 The Document Control Objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_3.htm">1.2 Document Control Interaction</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_4.htm">1.3 Document Control Models</A><BR>
&nbsp;&nbsp;<A HREF="#Documents_5.htm">2 Document Control Data Fields</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_6.htm">2.1 GenDocumentControl Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_7.htm">2.2 GenDocumentGroup Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_8.htm">2.3 GenDocument Attributes</A><BR>
&nbsp;&nbsp;<A HREF="#Documents_9.htm">3 Basic DC Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_a.htm">3.1 Other Document Group Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_b.htm">3.2 From the Doc Control Objects</A><BR>
&nbsp;&nbsp;<A HREF="#Documents_c.htm">4 Advanced DC Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_d.htm">4.1 Document Protocols</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_e.htm">4.2 Multiple Document Model</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_f.htm">4.3 Working with DOS files</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_10.htm">4.4 Special-Purpose Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_11.htm">4.5 Forcing Actions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Documents_12.htm">4.6 Some Other Internal Messages</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Documents_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Documents</A>: 1 
<A NAME="Documents_1.htm_66723">
 </A>
Document Control Overview</H2>
<P>
A program that creates or uses files--in short, almost all applications--has to deal with many tasks. It has to present dialog boxes to the user so he can choose which file to open; it must give alert messages when the user tries to do something dangerous, like quit without saving; and it must notice when GEOS is being shut down and make sure it saves appropriate data.</P>
<P>
The document control objects make these tasks much easier. They take care of some of these tasks by themselves; for example, they maintain the File menu commands and display dialog and alert boxes as needed. The Document Control objects make other application jobs much easier by sending messages at appropriate times. They can also manage several documents at once, making it much easier for applications to manage multiple documents.</P>
<P>
Many different document control sample applications are provided with the SDK. In most cases, you should be able to get your document control by copying over code from the appropriate sample application, then customizing it.</P>
<P CLASS="subsectionLink">
<A HREF="#Documents_2.htm">The Document Control Objects</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_3.htm">Document Control Interaction</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_4.htm">Document Control Models</A></P>
<HR>
<A NAME="Documents_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 1.1 <A HREF="#Documents_1.htm">Document Control Overview</A>: 
The Document Control Objects</H3>
<P>
There are three different classes of objects which together constitute the document control. These are <CODE>
GenDocumentControlClass</CODE>
, <CODE>
GenDocumentGroupClass</CODE>
, and <CODE>
GenDocumentClass</CODE>
. A document will need at least one of each to use the document control technology. The relationship between the objects is diagramed below.
<IMG SRC="Documents_2_objTree.gif">

</P>

<H4 CLASS="HeadingC">
GenDocumentControlClass</H4>
<P>
An application will have one object of class <CODE>
GenDocumentControlClass</CODE>
. This object manages the user interface: It presents some dialog and alert boxes, it manages the File Selector, it creates appropriate entries for the File menu, and it updates the enabled/disabled states of these items (e.g. it disables the <EM>
Save</EM>
 trigger after the file has been saved).</P>
<P>
The GenDocumentControl is generally made a child of the file menu, which is itself a child (or descendant) of the GenPrimary. The GenDocumentControl is on the GenPrimary's active list. It has no children, but it does have an optr to the GenDocumentGroup object. By convention, the GenDocumentControl object is in the same data segment as the GenPrimary object. Certain attributes of the GenDocumentControl object will determine the characteristics of the File Selector and other UI gadgets.</P>
<P>
<CODE>
GenDocumentControlClass</CODE>
 is a subclass of <CODE>
GenControlClass</CODE>
. This means that you can set up toolboxes to perform the &quot;Save,&quot; &quot;Open,&quot; etc., actions. For more details, see <A HREF="../../SysObjects/Controllers/combo.htm">the Controllers chapter</A>.</P>

<H4 CLASS="HeadingC">
GenDocumentGroupClass</H4>
<P>
An application will have one object of class <CODE>
GenDocumentGroupClass</CODE>
. This object creates and manages the document objects. Ordinarily, the document objects belong to <CODE>
GenDocumentClass</CODE>
. However, if the program wishes to alter the behavior of the document object, it can create a subclass of <CODE>
GenDocumentClass</CODE>
. In this case, the GenDocumentGroup object will contain a pointer to the class definition of the document subclass, and will create document objects of this class as needed.</P>
<P>
The GenDocumentGroup object is a child of any object. It does not have any children when it is declared; however, it will dynamically give itself document-object children at run-time. It is in its own data segment. Certain of its attributes determine what the attributes of its document children will be.</P>


<H4 CLASS="HeadingC">
GenDocumentClass</H4>
<P>
Each GenDocument object manages a single open file. It keeps track of the volume, path, and filename for the document, the dirty state of the document, and other document-related information. It opens and closes files and presents file-related dialog boxes (e.g., &quot;Save changes before closing?&quot;). Programs often define a subclass of the <CODE>
GenDocumentClass</CODE>
 which has additional, application-related functionality. In this case, objects of the subclass are used instead of objects of <CODE>
GenDocumentClass</CODE>
.</P>
<P>
<CODE>
GenDocumentClass</CODE>
 is a subclass of <CODE>
GenContentClass</CODE>
. Therefore, document objects can receive the output of GenView objects. GenDocument objects have all the functionality of GenContent objects. GenContent objects are themselves subclassed from <CODE>
GenClass</CODE>
. Very few applications will use the GenContent objects directly; for that reason, they are documented in this chapter.</P>
<P>
Document objects are not declared in the source code; they are created at run-time by the GenDocumentGroup object. The document currently active is called the <EM>
target document</EM>
. </P>

<HR>
<A NAME="Documents_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 1.2 <A HREF="#Documents_1.htm">Document Control Overview</A>: 
Document Control Interaction</H3>
<P>
A simple user operation will usually involve all three types of objects. For example, suppose the user selects the <EM>
Open</EM>
 trigger from the File menu. The following actions will be taken:</P>
<OL>
<LI>
The <EM>
Open</EM>
 trigger sends a <CODE>
MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC</CODE>
 to the GenDocumentControl object. The GenDocumentControl object responds by displaying a file selector.</LI>
<LI FIXME_NumListOther>
When the user selects a file and clicks &quot;OK,&quot; the GenDocumentControl object gets the selected file's path from the file selector object.</LI>
<LI FIXME_NumListOther>
The GenDocumentControl object sends a <CODE>
MSG_GEN_DOCUMENT_GROUP_OPEN_DOC</CODE>
 to the GenDocumentGroup, passing the name and path of the file to open.</LI>
<LI FIXME_NumListOther>
The GenDocumentGroup creates a document object, either of class <CODE>
GenDocumentClass</CODE>
 or of a programmer-specified class. The GenDocumentGroup object sends a <CODE>
MSG_GEN_DOCUMENT_OPEN</CODE>
 to the document object, passing the file and path name to be opened.</LI>
<LI FIXME_NumListOther>
The document object opens the file specified and handles errors appropriately. It then sends messages to the application instructing it to create the UI and initialize the file.</LI>
</OL>
<P>
Most of these steps are transparent to the application programmer. Typically, an application will intercept <CODE>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE</CODE>
; the programmer needs only to write this handler, not all the code needed for the above steps.</P>
<HR>
<A NAME="Documents_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 1.3 <A HREF="#Documents_1.htm">Document Control Overview</A>: 
<A NAME="Documents_4.htm_16929">
 </A>
Document Control Models</H3>
<P>
GEOS allows two distinct models of document control, a <EM>
Procedural</EM>
 model and an <EM>
Object</EM>
 model. While the two models use the same objects, they embody different programming philosophies.</P>
<P>
The <EM>
Procedural</EM>
 model of document control is much like traditional, non-object-oriented programming. Under this model, whenever a situation arises that needs the application's attention, the document control objects will send a message to a single object (generally the Process object). This object handles all of these situations.</P>
<P>
Under the <EM>
Object</EM>
 model of document control, the application defines a subclass of <CODE>
GenDocumentClass</CODE>
. This new document class has methods to handle situations needing the application's attention. This model is based on the philosophy of object-oriented programming; each document object has code to handle situations arising for that document.</P>
<P>
The main difference between the two models is where the messages are sent. Under the Procedural model, messages are sent to the Process object; under the Object model, messages are sent to the appropriate document object. Every message sent in the Procedural model corresponds to a message sent in the Object model.</P>
<P>
The Procedural model is simpler to use; it does not require the application to subclass objects. It is thus well-suited for simple applications which will have only one file open at a time. It may also be an easier model for programmers who are new to object-oriented programming. The Object model, on the other hand, is best suited for applications which will have many documents open at once; the application can let every document object manage a single document without worrying about other open documents.</P>

<H4 CLASS="HeadingC">
The Procedural Model</H4>
<P>
The <EM>
Procedural</EM>
 model of document control is much like traditional, procedure-oriented programming. This model is simpler to implement than the object-model. It is well suited for simple applications which have only one document open at a time.

</P>
<P>
Under the Procedural model of document control, every time a situation arises which requires the application's attention, the document control objects will send an appropriate message to the GenDocumentGroup object's output. These messages are imported from <CODE>
MetaClass</CODE>
, so all objects can handle them. The application will generally use global variables for run-time data storage.</P>
<P>
For example, when a new document needs to be initialized, the<CODE>
 </CODE>
document control sends a <CODE>
MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE</CODE>
 to its output object. The output object takes any appropriate steps (e.g., storing the file handle, setting up the map block, etc.).</P>


<H4 CLASS="HeadingC">
The Object Model</H4>
<P>
The <EM>
Object</EM>
 model of document control is better suited to advanced applications and applications which will have more than one document open at a time. Under this model, the application defines a subclass of <CODE>
GenDocumentClass</CODE>
. This new document class has handlers for situations requiring the application's attention. It also has local variables (i.e., instance data fields) which store any information the application will need about this document. </P>
<P>
Whenever a situation arises that needs the application's attention, the relevant document object will send a message to itself. This document object will then handle the message. For example, an application might define its own document class, <CODE>
MyAppDocumentClass</CODE>
 (a subclass of <CODE>
GenDocumentClass)</CODE>
. Suppose a new document has been created and needs to be initialized. First, the GenDocumentGroup object will create a new document object by instantiating an object of <CODE>
MyAppDocumentClass</CODE>
. Next, the new document object will send itself a <CODE>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE. </CODE>
<CODE>
MyAppDocumentClass</CODE>
 will have a handler for this message; the handler will initialize the file as well as the document object's data structures.</P>


<H4 CLASS="HeadingC">
Messages Under the Two Models</H4>
<P>
The simplest way to show the difference between the two models is to see how a single event is handled. This section examines one specific case, in which a document needs to be initialized; other cases are handled analogously.</P>
<P>
Suppose a situation arises needing the application's attention; for example, a document is created and needs to be initialized. First, the document object will send an appropriate message to itself. In this case, it would send itself the message <CODE>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE</CODE>
. If the application uses a subclass of <CODE>
GenDocumentClass</CODE>
 and this subclass has a handler for <CODE>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE</CODE>
, the messager will call that method; otherwise, the messager will call the handler defined for this message by <CODE>
GenDocumentClass</CODE>
. The handler in <CODE>
GenDocumentClass</CODE>
 will find out the <CODE>
GenDocumentGroup</CODE>
 object's output optr. If this optr is non-null, the handler will send an appropriate message (in this case, <CODE>
MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE</CODE>
) to the output object.</P>
<P>
Note that, under normal circumstances, the application will handle only one of the two messages. For example, if the application writes a handler for <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
, the handler defined by <CODE>
GenDocumentClass</CODE>
 will not be called; as a result, <CODE>
MSG_META_DOC_OUTPUT_PHYSICAL_SAVE</CODE>
 will not be sent to the <CODE>
GenDocumentGroup</CODE>
 object's output. This is not usually a problem, since the application will generally handle one message or the other. If, for some reason, it needs to have both messages sent, the handler for <CODE>
MSG_GEN_DOCUMENT_SAVE</CODE>
 should contain a <CODE>
@callsuper</CODE>
 instruction.

</P>

<HR>
<A NAME="Documents_5.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Documents</A>: 2 
<A NAME="Documents_5.htm_39618">
 </A>
Document Control Data Fields</H2>
<P>
This section describes the attributes of the two document control classes,<EM>
 </EM>
<CODE>
GenDocumentControlClass</CODE>
 and <CODE>
GenDocumentGroupClass</CODE>
, as well as of the <CODE>
GenDocumentClass</CODE>
. Note that GenDocument objects are created at run-time, and their attributes are initialized by the creating GenDocumentGroup object. However, their attributes can be changed with the appropriate messages.</P>
<P>
Many of the messages to the GenDocumentControl have corresponding messages to the GenDocumentGroup. For example, to find out the GenDocumentControl's attributes, one can either send a <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS</CODE>
 to the GenDocumentControl or send a <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS</CODE>
 to the GenDocumentGroup. In either case, the message will return the same result. It is sometimes more convenient to send a message to the GenDocumentGroup object; for example, a document object can do this with <CODE>
@call @genParent::&lt;message&gt;</CODE>
.</P>
<P CLASS="subsectionLink">
<A HREF="#Documents_6.htm">GenDocumentControl Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_7.htm">GenDocumentGroup Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_8.htm">GenDocument Attributes</A></P>
<HR>
<A NAME="Documents_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 2.1 <A HREF="#Documents_5.htm">Document Control Data Fields</A>: 
GenDocumentControl Data</H3>
<P>
<A NAME="Documents_6.htm_IX_GenDocumentControlClass">
 </A>
The GenDocumentControl handles interaction between the document control and the user. It maintains the File menu entries and manages the file selector. Its attributes all relate to these duties. A complete list of the attributes follows in <A HREF="#Documents_6.htm_91137"> GenDocumentControl Instance Data</A>
 along with comments and the default values.</P>
<P>
Some of these data fields can be examined but not set by the application. Data fields for purely internal use (which are neither examined, nor set, by applications) are not listed.</P>
<P CLASS="figTitle">
Code Display 13-1 <A NAME="Documents_6.htm_91137">
 </A>
GenDocumentControl Instance Data</P>
<PRE>/* The GDCI_documentToken field specifies the token characters and token ID of
 * files managed by this document control. All files created by the document
 * control will have these token characters, and the File Selector object will be
 * set to allow only such files to be selected. This attribute is ignored if DOS
 * files are being opened. */
    @instance GeodeToken			GDCI_documentToken = {};</PRE>
<PRE>/* GDCI_selectorType determines which files will be displayed by the File Selector 
 * generated by this object. Only one of the options may be set. By default, only
 * documents are visible. */
    @instance GenFileSelectorType				GDCI_selectorType = GFST_DOCUMENTS;
	/* Types available: 
	 *	GFST_DOCUMENTS, 			GFST_EXECUTABLES, 
	 * 	GFST_NON_GEOS_FILES, 			GFST_ALL_FILES */</PRE>
<PRE>/* GDCI_attrs specifies certain characteristics of the file to be opened. The
 * default setting is shown below. */
    @instance GenDocumentControlAttrs					GDCI_attrs = 
			((GDCM_SHARED_SINGLE &lt;&lt; GDCA_MODE_OFFSET) |
			 GDCA_VM_FILE | 
			 GDCA_SUPPORTS_SAVE_AS_REVERT |
			 (GDCT_NEW &lt;&lt; GDCA_CURRENT_TASK_OFFSET))
	/* Attributes available:
	 * GDCA_MODE: 
	 *	GDCM_VIEWER, 			GDCM_SHARED_SINGLE,
	 *	GDCM_SHARED_MULTIPLE
	 * GDCA_CURRENT_TASK: 
	 * 	GDCT_NONE, 			GDCT_NEW, 
	 * 	GDCT_OPEN, 			GDCT_USE_TEMPLATE, 
	 *	GDCT_SAVE_AS,			GDCT_COPY_TO,
	 *	GDCT_DIALOG,			GDCT_TYPE,
	 *	GDCT_PASSWORD
	 * Other fields: 
	 * 	GDCA_MULTIPLE_OPEN_FILES,				GDCA_DOS_FILE_DENY_WRITE,
	 *	GDCA_VM_FILE, 				GDCA_NATIVE,
	 * 	GDCA_SUPPORTS_SAVE_AS_REVERT,				GDCA_DOCUMENT_EXISTS,
	 *	GDCA_DO_NOT_SAVE_FILES
	 */</PRE>
<PRE>/* GDCI_features specifies certain extra features of the document control. The
 * default setting is shown below. */
    @instance GenDocumentControlFeatures					GDCI_features = 
			(GDCF_READ_ONLY_SUPPORTS_SAVE_AS_REVERT |
			 GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN |
			 GDCF_SUPPORTS_TEMPLATES |
			 GDCF_SUPPORTS_USER_SETTABLE_EMPTY_DOCUMENT |
			 GDCF_SUPPORTS_USER_MAKING_SHARED_DOCUMENTS |
			 GDCF_NAME_ON_PRIMARY);
	/* Flags available: 
	 *	GDCF_READ_ONLY_SUPPORTS_SAVE_AS_REVERT,
	 *	GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN, 
	 * 	GDCF_SUPPORTS_TEMPLATES,
	 *	GDCF_SUPPORTS_USER_SETTABLE_EMPTY_DOCUMENT,
	 *	GDCF_SUPPORTS_USER_SETTABLE_DEFAULT_DOCUMENT,
	 *	GDCF_SUPPORTS_USER_MAKING_SHARED_DOCUMENTS,
	 *	GDCF_NAME_ON_PRIMARY */</PRE>
<PRE>/* GDCI_enableDisableList specifies objects which should be enabled whenever a
 * document is opened and disabled when all documents are closed. The field is the
 * handle of a chunk containing a list of optrs to the objects to be enabled and
 * disabled. The default value is a null handle.*/
    @instance ChunkHandle			 	GDCI_enableDisableList;</PRE>
<PRE>/* The GDCI_openGroup, GDCI_importGroup, GDCI_useTemplateGroup, GDCI_saveAsGroup,
 * GDCI_exportGroup, and GDCI_userLevelGroup attributes hold optrs to groups of UI
 * objects to be added to the &quot;Open,&quot; &quot;Import,&quot; &quot;Use Template,&quot; &quot;Save As,&quot;
 * &quot;Export,&quot; and &quot;User Level&quot;, dialog boxes, respectively. The GDCI_dialogGroup
 * field holds an optr to objects to be added to the opening dialog box. The optr
 * is to the head of a tree of UI objects. The top object in the tree should be
 * set &quot;not usable.&quot; Default values are all null optrs. */
    @instance optr				GDCI_openGroup;
    @instance optr				GDCI_importGroup;
    @instance optr				GDCI_useTemplateGroup;
    @instance optr				GDCI_saveAsGroup;
    @instance optr				GDCI_exportGroup;
    @instance optr				GDCI_dialogGroup;
    @instance optr				GDCI_userLevelGroup;</PRE>
<PRE>/* If the GDCI_features field includes &quot;displayNameOnPrimary&quot; but no document is
 * open, the Primary's moniker is set to the string pointed to by the
 * GDCI_noNameText attribute. The default value is a null chunk handle. */
    @instance ChunkHandle				GDCI_noNameText;</PRE>
<PRE>/* If the GDCA_currentTask section of the GDCI_attrs field is set to
 * GDCT_NONE on startup, then the file specified by GDCI_defaultFile will be
 * opened (and, if necessary, created). The file is specified by a chunk handle of
 * a null-terminated string; this string should specify the file's path relative
 * to the SP_DOCUMENT standard path.The default value is a null chunk handle,
 * indicating that if the startup value of GDCA_currentTask is GDCT_NONE, no
 * documents should be opened. */
    @instance ChunkHandle 				GDCI_defaultFile;</PRE>
<PRE>/* GDCI_templateDir is the chunk handle of a null-terminated text string which
 * specifies a directory to hold template documents. The directory is specified
 * relative to SP_TEMPLATE. If not set by you, this defaults to the SP_TEMPLATE
 * standard path. */
    @instance ChunkHandle				GDCI_templateDir;</PRE>
<PRE>/* GDCI_documentGroup is an optr to the GenDocumentGroup object. You must set
 * this field. */
    @instance optr			GDCI_documentGroup;</PRE>
<PRE>/* GDCI_targetDocName is a character array. It is set to contain the name of
 * the current target file. This field is automatically updated by the document
 * control. */
    @instance FileLongName				GDCI_targetDocName = &quot;&quot;;</PRE>
<PRE>/* The Document Control automatically displays a big dialog box at startup which
 * lets the user choose to create, open, etc. a file. Each option has a button
 * (with a picture) and an explanatory text. You can override the default graphic
 * or text by setting any of the following fields:
 */</PRE>
<PRE>    @instance ChunkHandle				GDCI_dialogNewText;
    @instance ChunkHandle				GDCI_dialogTemplateText;
    @instance ChunkHandle				GDCI_dialogOpenDefaultText
    @instance ChunkHandle				GDCI_dialogImportText;
    @instance ChunkHandle				GDCI_dialogOpenText;
    @instance ChunkHandle				GDCI_dialogUserLevelText;</PRE>
<PRE>    @instance @visMoniker				GDCI_dialogNewMoniker;
    @instance @visMoniker				GDCI_dialogTemplateMoniker;
    @instance @visMoniker				GDCI_dialogOpenDefaultMoniker
    @instance @visMoniker				GDCI_dialogImportMoniker;
    @instance @visMoniker				GDCI_dialogOpenMoniker;
    @instance @visMoniker				GDCI_dialogUserLevelMoniker;</PRE>
<PRE>&nbsp;</PRE>

<H4 CLASS="HeadingC">
The Document Token</H4>
<PRE>GDCI_documentToken, MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN, MSG_GEN_DOCUMENT_GROUP_GET_TOKEN</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_documentToken">
 </A>
The document control's file selector will display only those files whose document token matches the GenDocumentControl object's <CODE>
GDCI_documentToken</CODE>
 attribute. All files created by the application will have the specified document tokens. There are no messages to alter the token attributes at run-time. (If the document control is used to manage DOS files, the file selector will show all non-GEOS files.)</P>
<P>
A token is defined by a<CODE>
 GeodeToken</CODE>
 structure. The format of this structure is shown below. The first field, <CODE>
GT_chars</CODE>
, will vary for each document type. The second, <CODE>
GT_manufID</CODE>
, will be the same for the tokens of all applications and documents created by a given company.</P>
<PRE>typedef struct {
	char 		GT_chars[TOKEN_CHARS_LENGTH]; 
				/* TOKEN_CHARS_LENGTH = 4 */
	ManufacturerID 		GT_manufID;
				/* word-sized integer */
} GeodeToken;</PRE>
<P>
The message <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN</CODE>
 instructs the GenDocumentControl object to write a copy of the document token to a specified address. The message has one argument: the address of a<CODE>
 </CODE>
<CODE>
GeodeToken</CODE>
. <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_TOKEN</CODE>
 functions identically, but it is sent to the GenDocumentGroup object.</P>
<P>
You can also find out the application's token by sending GEN_DOCUMENT_CONTROL_GET_CREATOR or GEN_DOCUMENT_GROUP_GET_CREATOR to the appropriate object. The application's token will be used as the &quot;creator token&quot; for any documents created by the document control.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN">
 </A>
MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN</H6>
<PRE CLASS="syntax">void 	MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN(
        GeodeToken *		token); /* address to copy token to */</PRE>
<P>
This message gets the document token values for all documents created by this document control.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentControl object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
token</EM>
	A pointer to an empty <CODE>
GeodeToken</CODE>
 structure.</P>
<P CLASS="refField">
Return:	The document <CODE>
GeodeToken</CODE>
 is written to the variable whose address is passed.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_TOKEN">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_TOKEN</H6>
<PRE CLASS="syntax">void 	MSG_GEN_DOCUMENT_GROUP_GET_TOKEN(
        GeodeToken *		token); /* address to copy token to */</PRE>
<P>
This is the same as <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN</CODE>
, except that it is sent to the GenDocumentGroup object instead of the GenDocumentControl object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
token</EM>
	A pointer to an empty <CODE>
GeodeToken</CODE>
 structure.</P>
<P CLASS="refField">
Return:	The document <CODE>
GeodeToken</CODE>
 is written to the variable whose address is passed.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_CONTROL_GET_TOKEN">
 </A>
MSG_GEN_DOCUMENT_CONTROL_GET_CREATOR</H6>
<PRE CLASS="syntax">void 	MSG_GEN_DOCUMENT_CONTROL_GET_CREATOR(
        GeodeToken *		token); /* address to copy token to */</PRE>
<P>
This message gets the token for the application; this token is the &quot;creator token&quot; for all files created by the document control.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentControl object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
token</EM>
	A pointer to an empty <CODE>
GeodeToken</CODE>
 structure.</P>
<P CLASS="refField">
Return:	The document <CODE>
GeodeToken</CODE>
 is written to the variable whose address is passed.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_TOKEN">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_CREATOR</H6>
<PRE CLASS="syntax">void 	MSG_GEN_DOCUMENT_GROUP_GET_CREATOR(
        GeodeToken *		token); /* address to copy token to */</PRE>
<P>
This is the same as <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_CREATOR</CODE>
, except that it is sent to the GenDocumentGroup object instead of the GenDocumentControl object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
token</EM>
	A pointer to an empty <CODE>
GeodeToken</CODE>
 structure.</P>
<P CLASS="refField">
Return:	The document <CODE>
GeodeToken</CODE>
 is written to the variable whose address is passed.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
The GDCI_selectorType Field</H4>
<PRE>GDCI_selectorType</PRE>
<P>
<A NAME="Documents_6.htm_IX_GFST_&ldots;">
 </A>
<A NAME="Documents_6.htm_IX_GDCI_selectorType">
 </A>
The<CODE>
 GDCI_selectorType </CODE>
field determines what files will be displayed by and can be opened with the file selector. The options are stored as a byte-sized enumerated type. The options are:</P>
<DL>
<DT>
GFST_DOCUMENTS</DT><DD>
This is the default option. The file selector will display those documents with the appropriate tokens.</DD>
<DT>
GFST_EXECUTABLES</DT><DD>
The file selector will display executable files as well as appropriate document files.</DD>
<DT>
GFST_NON_GEOS_FILES</DT><DD>
The file selector will display all non-GEOS files (and only non-GEOS files). </DD>
<DT>
GFST_ALL_FILES</DT><DD>
 The file selector will display all files.</DD>


</DL>
<H4 CLASS="HeadingC">
The GDCI_attrs Field</H4>
<PRE>GDCI_attrs, MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS, MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCA_&ldots;">
 </A>
<A NAME="Documents_6.htm_IX_GDCI_attrs">
 </A>
The GenDocumentControl<CODE>
 </CODE>
object has eight attribute flags stored in the word-sized bitfield <CODE>
GDCI_attrs</CODE>
. They may be retrieved by sending <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS</CODE>
 to the GenDocumentControl<EM>
 </EM>
object or by sending <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS</CODE>
 to the GenDocumentGroup object. The attributes are set at coding time; there is no way for an application to change the attributes at run-time, although the GenDocumentControl will change some of the attributes to reflect its current state.</P>
<P>
The attributes are</P>
<DL>
<DT CLASS="FIXME_WorListWide">
GDCA_MULTIPLE_OPEN_FILES</DT><DD>
Allow several documents to be open at once. If this attribute is disabled, the &quot;New&quot; and &quot;Open&quot; triggers will be disabled when a document is open (however, see also the description of the flag GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN on <A HREF="#Documents_6.htm_91918"> GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN This feature is ignored if the attribute GDCA_MULTIPLE_OPEN_FILES is on. If GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN is on and GDCA_MULTIPLE_OPEN_FILES is off, the "New" and "Open" triggers are enabled when the doc</A>
). This attribute defaults to off.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_MODE</DT><DD>
This is a two-bit field. GDCA_MODE is a mask of all the bits in this field; the offset of this field is equal to the constant GDCA_MODE_OFFSET. The field has the following possible settings:</DD>
<DT>
GDCM_VIEWER</DT><DD>
<A NAME="Documents_6.htm_IX_GDCM_&ldots;">
 </A>
All documents are opened in read-only mode; the New, Save, Save As, and Revert triggers are permanently disabled. Other applications can open the file for read/write access.</DD>
<DT>
GDCM_SHARED_SINGLE</DT><DD>
Documents are opened for reading and writing. When a document is open, it is marked &quot;deny-write&quot; so other applications can open the file only for read-only access. The user can mark a document as a &quot;public&quot; document, in which case the default is to open a file &quot;read-only.&quot; The default GDCA_MODE setting is GDCM_SHARED_SINGLE.</DD>
<DT>
GDCM_SHARED_MULTIPLE</DT><DD>
This mode is designed for documents that can have multiple writers, such as multi-user databases. Documents are ordinarily opened as in GDCM_SHARED_SINGLE mode above; however, a user can designate a file as a &quot;multi-user&quot; file, which means that it can be opened by several applications at once for read/write access.</DD>
<DT CLASS="FIXME_WorListWide">
</DT><DD>The default setting of the GDCA_MODE flag is GDCM_SHARED_SINGLE. If you want a different value, first clear the two-bit field, then set the new setting, like this:</DD>
<PRE>GDCI_attrs = (@default &amp; ~GDCA_MODE) \
	| (GDCM_VIEWER &lt;&lt; GDCA_MODE_OFFSET);</PRE>
<DT CLASS="FIXME_WorListWide">
</DT><DD>Note that the GDCA_MODE attribute has a slightly different effect if the document control manages DOS files. For details, see GDCA_DOS_FILE_DENY_WRITE below.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_DOS_FILE_DENY_WRITE</DT><DD>
This attribute does not matter for VM files. If a DOS file is opened while the GDCA_DOS_FILE_DENY_WRITE bit is set, no other application will be able to write to that file. This is true even if the DOS file was opened for read-only access; however, if the file is a multi-user document opened in &quot;shared-multiple&quot; mode, other applications will be able to write to it regardless of whether the GDCA_DOS_FILE_DENY_WRITE attribute is set. By default, GDCA_DOS_FILE_DENY_WRITE is off.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_VM_FILE</DT><DD>
This attribute specifies whether the document control objects will open GEOS Virtual Memory files (if GDCA_VM_FILE is on), or DOS files (if GDCA_VM_FILE is off). The default value is on.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_NATIVE</DT><DD>
If this bit is set and GDCA_VM_FILE is not set, documents will be stored in the format native to the file-system.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_SUPPORTS_SAVE_AS_REVERT</DT><DD>
This attribute is ordinarily set only for GEOS files. If the attribute is on, the application will use the backup functionality of VM files to support &quot;Save As&quot; and &quot;Revert&quot; functionality. If the attribute is off, the file will be altered whenever it is updated to disk. The default value is on. DOS files do not normally support &quot;Save As&quot; and &quot;Revert.&quot; Applications can implement &quot;Save As&quot; and &quot;Revert&quot; functionality for DOS files by defining a subclass of <CODE>
GenDocumentClass</CODE>
 with handlers for <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS</CODE>
 and <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_REVERT</CODE>
, but this is not recommended. Ordinarily, this attribute should be off for DOS files.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_DOCUMENT_EXISTS</DT><DD>
This attribute is set and maintained at run-time by the GenDocumentControl code. The attribute is on if at least one document is open.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_CURRENT_TASK</DT><DD>
This three-bit attribute has a dual function: It determines the application's behavior at start-up, and it indicates what task the application is currently performing. The mask GDCA_CURRENT_TASK is a mask of all the bits in this field; the field's offset is equal to the constant GDCA_CURRENT_TASK_OFFSET. The possible settings are as follows:</DD>
<DT>
GDCT_NONE</DT><DD>
<A NAME="Documents_6.htm_IX_GDCT_&ldots;">
 </A>
If a default file has been specified (see <A HREF="#Documents_6.htm_16472"> The GDCI_noNameText Field</A>
), that file will be opened; otherwise, the application will start with no file opened.</DD>
<DT>
GDCT_NEW</DT><DD>
A new document will be created at startup. If the GDCF_DIALOG_BOX_FOR_NEW flag is set, a dialog box will be presented at startup.</DD>
<DT>
GDCT_OPEN</DT><DD>
The &quot;Open File&quot; dialog box will be presented at startup.</DD>
<DT>
GDCT_USE_TEMPLATE</DT><DD>
The &quot;Use Template&quot; dialog box will be presented at startup.</DD>
<DT>
GDCT_SAVE_AS</DT><DD>
This is not a valid initial setting. The GDCA_CURRENT_TASK field has this setting between when a user chooses the &quot;Save As&quot; command and when the document is saved.</DD>
<DT>
GDCT_COPY_TO</DT><DD>
This is not a valid initial setting. The GDCA_CURRENT_TASK field has this setting between when the user chooses the &quot;Copy To&quot; command and when the command has been fully executed.</DD>
<DT>
GDCT_DIALOG </DT>
<DT>
GDCT_TYPE </DT>
<DT>
GDCT_PASSWORD</DT><DD>
None of these are valid initial settings.</DD>
</DL>
<P>
If a document is passed in to be opened at startup (as, for example, when a user launches an application by double-clicking a file created by the application), that file will be opened, and the initial setting of GDCA_CURRENT_TASK will be ignored. The document control automatically maintains this bitfield to correspond to whatever action the document control is currently taking. The application can find out what the document control is doing by reading the attributes and checking this field.</P>
<DL>
<DT CLASS="FIXME_WorListWide">
GDCA_DO_NOT_SAVE_FILES</DT><DD>
If this bit is set, the application will not be able to save files. By setting this bit, you can turn your application into a fully-functioning demo.</DD>
<DT CLASS="FIXME_WorListWide">
GDCA_FORCE_DEMAND_PAGING</DT><DD>
If this bit is set, the document will be paged with demand-paging, even if the system ordinarily forces all documents completely into memory.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS">
 </A>
MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS</H6>
<PRE CLASS="syntax">GenDocumentControlAttrs 	MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS();</PRE>
<P>
Use this message to find out what the GenDocumentControl object's <CODE>
GDCA_attrs</CODE>
 flags are. The attributes cannot be changed by a message; they can only be read.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentControl object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Returns a word-length bitfield containing GDCA<CODE>
_attrs</CODE>
 record.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS</H6>
<PRE CLASS="syntax">GenDocumentControlAttrs 	MSG_GEN_DOCUMENT_GROUP_GET_UI_ATTRS();</PRE>
<P>
This message is the same as the <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_ATTRS</CODE>
 message (see above) except that it is sent to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A word-length record containing the GDCA<CODE>
_attrs</CODE>
 field.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
The GDCI_features Flags</H4>
<PRE>GDCI_features, MSG_GEN_DOCUMENT_CONTROL_GET_FEATURES, MSG_GEN_DOCUMENT_GROUP_GET_UI_FEATURES, MSG_GEN_CONTROL_CONFIGURE_FILE_SELECTOR</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_features">
 </A>
The <CODE>
GDCI_features</CODE>
 attribute specifies whether certain optional functionality of the Document Control technology is enabled. The features are determined at coding time; there is no message to change features at run-time. To retrieve the features, send <CODE>
MSG_GEN_DOCUMENT_CONTROL_GET_FEATURES</CODE>
.</P>
<DL>
<DT CLASS="FIXME_WorListWide">
GDCF_READ_ONLY_SUPPORTS_SAVE_AS_REVERT</DT><DD>
<A NAME="Documents_6.htm_IX_GenDocumentControlFeatures">
 </A>
<A NAME="Documents_6.htm_IX_GDCF_&ldots;  (GenDocumentControlFeatures)">
 </A>
If this feature is on, the &quot;Save As&quot; and &quot;Revert&quot; triggers are enabled when read-only documents are opened. Once the user chooses &quot;Save As,&quot; the new file will no longer be opened as &quot;Read Only&quot;; the &quot;Save&quot; trigger will be enabled. If this feature is off, &quot;Save As&quot; and &quot;Revert&quot; triggers are disabled for read-only files. By default, this feature is on.</DD>
<DT CLASS="FIXME_WorListWide">
GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN</DT><DD>
<A NAME="Documents_6.htm_91918">
 </A>
This feature is ignored if the attribute<CODE>
 </CODE>
GDCA_MULTIPLE_OPEN_FILES<CODE>
 </CODE>
is on. If GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN is on and GDCA_MULTIPLE_OPEN_FILES is off, the &quot;New&quot; and &quot;Open&quot; triggers are enabled when the document is &quot;clean&quot; (i.e., the document has not been marked &quot;dirty&quot; since it was opened/created or saved); that is, &quot;New&quot; and &quot;Open&quot; are enabled whenever &quot;Save&quot; is disabled. If the user chooses &quot;New&quot; or &quot;Open&quot; when the document is &quot;clean,&quot; the target document is closed and the new document is opened or created. If both GDCA_MULTIPLE_OPEN_FILES and GDCF_SINGLE_FILE_CLEAN_CAN_NEW_OPEN are off, the &quot;New&quot; and &quot;Open&quot; triggers are disabled whenever a document is open. By default, this attribute is on.</DD>
<DT CLASS="FIXME_WorListWide">
GDCF_SUPPORTS_TEMPLATES</DT><DD>
If this feature is enabled, the user can save files as templates. If the user chooses the command &quot;Use Template,&quot; a copy of the template is opened as a &quot;new&quot; document, and the template is left unchanged. If this feature is disabled, the application cannot create templates. By default, this feature is on.</DD>
<DT CLASS="FIXME_WorListWide">
GDCF_SUPPORTS_USER_SETTABLE_EMPTY_DOCUMENT</DT><DD>
If this feature is enabled, the user can designate a file to be the model for all new documents. When the user chooses &quot;New,&quot; this &quot;model&quot; document will be copied and the copy will be opened. By default, this feature is on. </DD>
<DT CLASS="FIXME_WorListWide">
 GDCF_SUPPORTS_USER_SETTABLE_DEFAULT_DOCUMENT</DT><DD>
If this attribute is on, the user can choose a default document (one which will automatically be opened when the application is launched). (See <A HREF="#Documents_6.htm_49052"> The GDCI_defaultFile Field</A>
.)</DD>
<DT CLASS="FIXME_WorListWide">
GDCF_SUPPORTS_USER_MAKING_SHARED_DOCUMENTS</DT><DD>
If this attribute is on, the user can save a document as &quot;shared,&quot; allowing several processes to access it at once. By default, the attribute is on.</DD>
<DT CLASS="FIXME_WorListWide">
GDCF_NAME_ON_PRIMARY</DT><DD>
If this attribute is on, the name of the target document is displayed at the top of the Primary window. The GenDocumentControl object does this by changing the moniker of the GenPrimary object to the name of the target document. If there is no open document, the GenPrimary will display the string specified by the attribute <CODE>
GDCI_noNameText</CODE>
. By default, this attribute is on.</DD>
</DL>
<P>
For an added degree of control, you can use <CODE>
MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR</CODE>
 to change the attributes of the document control's file selector.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_CONTROL_GET_FEATURES">
 </A>
MSG_GEN_DOCUMENT_CONTROL_GET_FEATURES</H6>
<PRE CLASS="syntax">GenDocumentControlFeatures 	MSG_GEN_DOCUMENT_CONTROL_GET_FEATURES();</PRE>
<P>
Use this message to retrieve the current <CODE>
GDCI_features</CODE>
 flags. The flags cannot be changed at run-time.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentControl object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The GenDocumentControl's <CODE>
GDCI_features</CODE>
 flags.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_6.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_UI_FEATURES">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_UI_FEATURES</H6>
<PRE CLASS="syntax">GenDocumentControlFeatures 	MSG_GEN_DOCUMENT_GROUP_GET_UI_FEATURES();</PRE>
<P>
Use this message to retrieve the current <CODE>
GDCI_features</CODE>
 flags. The flags cannot be changed at run-time.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The GenDocumentControl's <CODE>
GDCI_features</CODE>
 flags.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR</H6>
<PRE CLASS="syntax">void 	MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR(
        optr 		fileSelector, 
        word 		flags); /* GenDocumentControlAttrs */</PRE>
<P>
Configure file selector. This message can be sub-classed to modify the behavior of the file selectors that the document control uses.</P>



<H4 CLASS="HeadingC">
<A NAME="Documents_6.htm_29317">
 </A>
The GDCI_enableDisableList Field</H4>
<PRE>GDCI_enableDisableList</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_enableDisableList">
 </A>
The GenDocumentControl can be set to enable certain UI objects when documents are open. This is done using the <CODE>
GDCI_enableDisableList</CODE>
 attribute. This attribute is the chunk handle of a list of object-pointers. Each of the referenced objects should start as disabled. Whenever a document is opened, a <CODE>
MSG_GEN_SET_ENABLED</CODE>
 is sent to each object in the list. When the last document is closed, a <CODE>
MSG_GEN_SET_NOT_ENABLED </CODE>
is sent to each object in the list.</P>


<H4 CLASS="HeadingC">
Adding to the Dialog Boxes</H4>
<PRE>GDCI_openGroup, GDCI_importGroup, GDCI_useTemplateGroup, GDCI_saveAsGroup, GDCI_exportGroup, GDCI_dialogGroup, GDCI_userLevelGroup</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_saveAsGroup">
 </A>
<A NAME="Documents_6.htm_IX_GDCI_useTemplateGroup">
 </A>
<A NAME="Documents_6.htm_IX_GDCI_openGroup">
 </A>
The GenDocumentControl object manages the dialog boxes for many different user actions. The programmer can specify a tree of UI objects to be included with each of these dialog boxes. For example, to add a group of objects to the &quot;Use Template&quot; dialog box, the programmer should put them all in a tree (perhaps by making them all children of a<EM>
 </EM>
GenInteraction object) and store an object-pointer to the head of the tree in <A NAME="Documents_6.htm_IX_GDCI_newGroup">
 </A>
the <CODE>
GDCI_useTemplateGroup</CODE>
 attribute. The top object in the tree should be set &quot;not usable.&quot;</P>


<H4 CLASS="HeadingC">
<A NAME="Documents_6.htm_16472">
 </A>
The GDCI_noNameText Field</H4>
<PRE>GDCI_noNameText</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_noNameText">
 </A>
The GenDocumentControl object can be set to display the name of the current target document in the moniker of the <CODE>
GenPrimary</CODE>
 window. If this feature is enabled, and no document is opened, the <CODE>
GenPrimary</CODE>
 will have its moniker change to the string specified by <CODE>
GDCI_noNameText</CODE>
. If the feature<CODE>
 </CODE>
GDCF_DISPLAY_NAME_ON_PRIMARY is disabled, <CODE>
GDCI_noNameText</CODE>
 is ignored.</P>


<H4 CLASS="HeadingC">
<A NAME="Documents_6.htm_49052">
 </A>
The GDCI_defaultFile Field</H4>
<PRE>GDCI_defaultFile</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_defaultFile">
 </A>
If the attribute GDCA_CURRENT_TASK is initially set to GDCT_NONE and a default file is specified, the default file is automatically opened at startup. If GDCA_CURRENT_TASK is not initially set to GDCT_NONE, this attribute is ignored. This field holds the chunk handle of a null-terminated string. The string specifies the file's path relative to the SP_DOCUMENT. If the feature<CODE>
 </CODE>
GDCF_SUPPORTS_USER_SETTABLE_DEFAULT_DOCUMENT is enabled, this attribute can be changed by the user at run-time. If the file specified does not exist, it is created as an empty document; if the document exists but cannot be opened, no file is opened at startup. If the named document exists but is inappropriate (e.g. it was created by another application), no document is opened at startup. </P>


<H4 CLASS="HeadingC">
The GDCI_templateDir Field</H4>
<PRE>GDCI_templateDir</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_templateDir">
 </A>
If templates are supported, this is the default directory for opening and saving them. This string specifies a subdirectory to the standard path SP_TEMPLATE. If not explicitly set in the source code, the template directory will default to SP_TEMPLATE.</P>


<H4 CLASS="HeadingC">
The GDCI_documentGroup Field</H4>
<PRE>GDCI_documentGroup</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_documentGroup">
 </A>
The GenDocumentControl and the GenDocumentGroup communicate with each other via messages. To do this, each needs the optr of the other. GDCI<CODE>
_documentGroup</CODE>
 is the optr of the <CODE>
GenDocumentGroup</CODE>
 object for this application. It is set in the source code and may not be changed at run time.</P>


<H4 CLASS="HeadingC">
The GDCI_targetDocName Field</H4>
<PRE>GDCI_targetDocName</PRE>
<P>
<A NAME="Documents_6.htm_IX_GDCI_targetDocName">
 </A>
This attribute contains the name of the target document. The document control automatically sets and updates this field when necessary.</P>

<HR>
<A NAME="Documents_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 2.2 <A HREF="#Documents_5.htm">Document Control Data Fields</A>: 
GenDocumentGroup Data</H3>
<P>
<A NAME="Documents_7.htm_IX_GenDocumentGroupClass">
 </A>
The GenDocumentGroup object creates and manages the document objects. In the &quot;process&quot; model of document control, it sends messages to the process object (or some other designated object) when the application needs to take some action. (It sends these messages even when the &quot;object&quot; model is being followed; however, the messages are ignored.)</P>
<P>
A list of data fields for the GenDocumentGroup object follows in <A HREF="#Documents_7.htm_92951"> GenDocumentGroupClass instance data</A>
. Some of the data fields can be changed at run-time, and others cannot; a discussion of the data fields follows the listing. If a data field cannot be set or read by the application, it is not discussed.</P>
<P CLASS="figTitle">
Code Display 13-2 <A NAME="Documents_7.htm_92951">
 </A>
GenDocumentGroupClass instance data</P>
<PRE>/* GDGI_attrs is a record that specifies certain basic characteristics of the
 * documents to be managed. The attributes are set in the source code and are not
 * changed at run-time. The default settings are below. */
    @instance GenDocumentGroupAttrs				GDGI_attrs = (GDGA_VM_FILE |
					GDGA_SUPPORTS_AUTO_SAVE |
					GDGA_AUTOMATIC_CHANGE_NOTIFICATION |
					GDGA_AUTOMATIC_DIRTY_NOTIFICATION |
					GDGA_APPLICATION_THREAD |
					GDGA_AUTOMATIC_UNDO_INTERACTION |
					GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN);
	/* The following flags are available: 
	 * 	GDGA_VM_FILE,			
	 *	GDGA_NATIVE,
	 *	GDGA_SUPPORTS_AUTO_SAVE, 
	 *	GDGA_AUTOMATIC_CHANGE_NOTIFICATION,
	 * 	GDGA_AUTOMATIC_DIRTY_NOTIFICATION, 
	 * 	GDGA_APPLICATION_THREAD,
	 *	GDGA_VM_FILE_CONTAINS_OBJECTS,
	 *	GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN,
	 * 	GDGA_LARGE_CONTENT,
	 * 	GDGA_AUTOMATIC_UNDO_INTERACTION */</PRE>
<PRE>/* GDGI_untitledName is the name suggested when a new document is
 * first saved. */
    @instance ChunkHandle			GDGI_untitledName;</PRE>
<PRE>/* The GenDocumentGroup object creates a document object for each document
 * opened. The attribute GDGI_documentClass is a pointer to the class definition
 * which will be used for document objects. By default, it points to the
 * definition of GenDocumentClass, so document objects belong to GenDocumentClass.
 * If you use a subclass of GenDocumentClass, you must change this attribute to
 * point to the new class. */
    @instance ClassStruc *			GDGI_documentClass = 
					(ClassStruc *) &amp;GenDocumentClass;</PRE>
<PRE>/* Ordinarily, the Document Group creates document objects by instantiating an
 * object of the class indicated by GDGI_documentClass. However, it can be
 * instructed instead to duplicate a specific document object for each new
 * document. To arrange this, set the GDGI_genDocument to point to the document
 * object to duplicate. */
    @instance optr 			GDGI_genDocument;</PRE>
<PRE>/* If the Procedural model is used, whenever the application needs to take an
 * action, messages will be sent to the output of the GenDocumentGroup.
 * Ordinarily, the output will be the process object. If the Object model is used,
 * this attribute is generally left as a null pointer. */
    @instance optr			GDGI_output;</PRE>
<PRE>/* The GenDocumentGroup object communicates with the GenDocumentControl
 * object through messages. To do this, each one needs an object-pointer to the
 * other. This is set in the source code. */
    @instance optr			GDGI_documentControl;</PRE>
<PRE>/* The GenDocument (or subclass) objects can behave as Content objects. The
 * document control can automatically connect GenDocument objects to the GenView
 * if told to do so. The GDGI_genView field is an object-pointer to a GenView
 * object. */
    @instance optr			GDGI_genView;</PRE>
<PRE>/* In a multiple-document model, the document control can be set up to work with
 * the display control. When this functionality is enabled, the
 * GenDocumentGroup will automatically duplicate a specified block (generally
 * one containing a GenDisplay object), attach the Display object to the specified
 * GenDisplayGroup object, and set the header for the GenDisplay to the name of
 * the document. When the document is closed, the block is freed. */
    @instance optr			GDGI_genDisplay; 
/* GDGI_genDisplayGroup points to the GenDisplayGroup which manages the 
 * GenDisplays. */
    @instance optr			GDGI_genDisplayGroup;</PRE>
<PRE>/* Each GEOS document has a protocol number, which identifies the version of
 * the application that created it. The GDGI_protocolMajor and
 * GDGI_protocolMinor attributes specify the protocol number to be assigned to
 * all documents created by the document control. */
    @instance word			GDGI_protocolMajor = 1;
    @instance word			GDGI_protocolMinor = 0;</PRE>

<H4 CLASS="HeadingC">
The GDGI_attrs Field</H4>
<PRE>GDGI_attrs, MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_attrs">
 </A>
This attribute specifies certain characteristics of the documents to be opened. These attributes are generally set in the source code and can not be changed at run-time. They are stored in a word-sized bitfield.</P>
<DL>
<DT>
GDGA_VM_FILE</DT><DD>
<A NAME="Documents_7.htm_IX_GDGA_&ldots;">
 </A>
This attribute is on if the documents to be opened are GEOS Virtual Memory files. By default, it is on.</DD>
<DT>
GDGA_NATIVE</DT><DD>
This attribute is on if the documents to be opened are in the file system's native format (i.e. they are not GEOS files). By default, it is off.</DD>
<DT>
GDGA_SUPPORTS_AUTO_SAVE</DT><DD>
If this attribute is on, the documents will be periodically auto-saved. It works only with VM files (unless you subclass GenDocument to handle <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</CODE>
; see <A HREF="#Documents_f.htm_71063"> Working with DOS files</A>
). It works by periodically updating the file to disk. It should probably be turned off if &quot;Save As&quot; and &quot;Revert&quot; are disabled. By default, the attribute is on. The program can temporarily disable auto-save for a document by sending the document object <CODE>
MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE</CODE>
.</DD>
<DT>
GDGA_AUTOMATIC_CHANGE_NOTIFICATION</DT><DD>
If this attribute is on, the GenDocumentGroup<CODE>
 </CODE>
object will periodically check all open documents to see if they have been changed by another process. If a document has changed, the document control will send <CODE>
MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED</CODE>
 to the application. This attribute is useful if the application may be reading multi-user files.</DD>
<DT>
GDGA_AUTOMATIC_DIRTY_NOTIFICATION</DT><DD>
This attribute is relevant only for GEOS files. If the attribute is on, whenever a file is marked &quot;dirty,&quot; the file system will automatically notify the document control. The document control will then take appropriate actions (enable the &quot;Save&quot; trigger, etc.). The document control will also present a &quot;Save changes before closing&quot; dialog box if the document is closed before being saved. If GDGA_AUTOMATIC_DIRTY_NOTIFICATION is off, or if the documents are DOS files, the application will have to notify the document control when the document is dirty. It does this by sending a <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY</CODE>
 to the GenDocumentGroup object (under the procedure model), or by sending a <CODE>
MSG_GEN_DOCUMENT_MARK_DIRTY</CODE>
 to the document object (under the object model). By default, GDGA_AUTOMATIC_DIRTY_NOTIFICATION is on.</DD>
<DT>
GDGA_APPLICATION_THREAD</DT><DD>
If this attribute is on, the GenDocumentGroup object is run by the application thread, as are its (document-object) children. By default, it is on.</DD>
<DT>
GDGA_VM_FILE_CONTAINS_OBJECTS</DT><DD>
If the document control manages Virtual Memory Object files, this attribute should be set to on. By default, this attribute is off.</DD>
<DT>
GDGA_CONTENT_DOES_NOT_MANAGE_CHILDREN</DT><DD>
The application's main VisContent, if any, does not manage its children. By default, this attribute is on.</DD>
<DT>
GDGA_LARGE_CONTENT</DT><DD>
The application's main VisContent uses the large model. By default, this attribute is off.</DD>
<DT>
GDGA_AUTOMATIC_UNDO_INTERACTION</DT><DD>
The application sends out undo set-context messages automatically as necessary.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_ATTRS">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</H6>
<PRE CLASS="syntax">GenDocumentGroupAttrs 	MSG_GEN_DOCUMENT_GROUP_GET_ATTRS();</PRE>
<P>
Use this message to find out the attributes of the GenDocumentGroup object. Note that the attributes cannot be changed at run-time; they can only be examined.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Flags in GDGI<CODE>
_attrs</CODE>
 bitfield.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
The GDGI_untitledName Field</H4>
<PRE><A NAME="Documents_7.htm_IX_GDGI_untitledNameField"> </A>GDGI_untitledName, MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</PRE>
<P>
The first time a new document is saved, the document control presents a &quot;Save As&quot; dialog box. If the <CODE>
GDGI_untitledName</CODE>
 field is set to point to a string, that string will be suggested as the name of the document. If the attribute is not set, no name will be suggested. The current default name can be retrieved by sending <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</CODE>
 to the GenDocumentGroup object.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME</H6>
<PRE CLASS="syntax">GenDocumentGroupAttrs 	MSG_GEN_DOCUMENT_GROUP_GET_DEFAULT_NAME(
        char *buffer); /* Address to write default name */</PRE>
<P>
This message instructs the GenDocumentGroup object to copy the <CODE>
GDGI_untitledName</CODE>
 attribute to the specified address. In addition, the message will return the <CODE>
GDGI_attrs</CODE>
 word of the GenDocumentGroup object. If you just want the attributes, use <CODE>
MSG_GEN_DOCUMENT_GROUP_GET_ATTRS</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
buffer</EM>
	A pointer to a character buffer. This buffer should be of length FILE_LONGNAME_BUFFER_SIZE or greater.</P>
<P CLASS="refField">
Return:	The record of flags stored in <CODE>
GDGI_attrs</CODE>
. </P>
<DL>
<DT>
<EM>
*buffer</EM>
</DT><DD>Null-terminated name string.</DD>
</DL>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>
<P CLASS="refField">
Warnings:	Make sure the buffer is long enough to hold any file name. Otherwise, the method may overwrite data after the buffer. The constant FILE_LONGNAME_BUFFER_SIZE, defined in <STRONG CLASS="fileName">
file.def</STRONG>
, is equal to the maximum file name length, counting the null terminator.</P>



<H4 CLASS="HeadingC">
The GDGI_documentClass Field</H4>
<PRE>GDGI_documentClass</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_documentClass">
 </A>
Each time a document is opened, the GenDocumentGroup creates a document object. Ordinarily, the document object is a member of <CODE>
GenDocumentClass</CODE>
. However, sometimes the programmer will want to add functionality to the document objects, doing so by defining a subclass of <CODE>
GenDocumentClass</CODE>
. (For example, in the object model of document control, the program implements most functionality by defining new methods for the document class.) If this is the case, the programmer will have to make sure the GenDocumentGroup object creates document objects from the new class. One can do this by setting the <CODE>
GDGI_documentClass</CODE>
 field to point to the class structure of the new document object class. By default, this field points to <CODE>
GenDocumentClass</CODE>
.</P>


<H4 CLASS="HeadingC">
The GDGI_genDocument Field</H4>
<PRE>GDGI_genDocument</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_genDocument">
 </A>
Ordinarily, the document group creates new document objects by instantiating objects from the class specified in GDGI<CODE>
_documentClass</CODE>
. However, you can instead provide a document object for the document group to duplicate. To do this, set the GDGI<CODE>
_genDocument</CODE>
 field to the optr of the &quot;template&quot; document object. This object should be marked &quot;not usable.&quot;</P>


<H4 CLASS="HeadingC">
The GDGI_output Field</H4>
<PRE>GDGI_output, MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT, MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_output">
 </A>
Every time something happens which needs to be handled by the application, the document control notifies the application in two ways: The relevant document object sends a message to itself, and the GenDocumentGroup object sends a message to its designated output object. In the Procedural model of document control, the document-object messages are ignored, and the GenDocumentGroup messages are sent to an object (usually the process object) which has handlers for the messages. In the Object model, the <CODE>
GDGI_output</CODE>
 attribute is left as a null pointer, and <CODE>
GenDocumentClass</CODE>
 is subclassed to handle the messages.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT</H6>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_OUTPUT();</PRE>
<P>
Under the Procedural model of document control, the GenDocumentGroup sends messages to a designated output object. To get the optr of that output object, send this message to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Return:	Returns the optr of the document group's output object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT">
 </A>
MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GROUP_SET_OUTPUT(
        optr	output); /* The new recipient of the GenDocumentGroup's
		output messages */</PRE>
<P>
Under the Procedural model of document control, the GenDocumentGroup<CODE>
 </CODE>
object sends messages to a designated output object. Use this message to change the recipient of the output.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Parameters:	<EM>
output</EM>
	The optr of the object which will receive the output.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
The GDGI_documentControl Field</H4>
<PRE>GDGI_documentControl</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_documentControl">
 </A>
The GenDocumentControl and the GenDocumentGroup communicate with each other via messages. To do this, each needs an optr to the other. <CODE>
GDCI_documentControl</CODE>
 is an optr to the GenDocumentGroup object for this application. It is set in the source code and is not changed at run time.</P>


<H4 CLASS="HeadingC">
Dynamically Creating Displays</H4>
<PRE>GDGI_genDisplay, GDGI_genDisplayGroup, MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY, MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP</PRE>
<P>
In a multi-document application, each document will ordinarily have its own GenDisplay object and often many other UI objects as well. The document control can be instructed to dynamically create a number of objects for each new document and destroy these objects when the document is closed. </P>
<P>
<A NAME="Documents_7.htm_IX_GDGI_genDisplayGroup">
 </A>
If an application is going to have the document control create and manage GenDisplay objects, it must declare a GenDisplayGroup object. The GenDisplayGroup should be declared normally; however, it should be given no children. In the source code, the GenDocumentGroup object's <CODE>
GDGI_genDisplayGroup</CODE>
 data field should contain an optr to the GenDisplayGroup object.</P>
<P>
<A NAME="Documents_7.htm_IX_GDGI_genDisplay">
 </A>
The application should also declare a template resource. This resource should contain a single generic tree; the top object in this tree should be a GenDisplay object which is set &quot;not usable.&quot; The GenDocumentGroup object's <CODE>
GDGI_genDisplay</CODE>
 field should contain an optr to that GenDisplay.</P>
<P>
When a new document object is created, the document control will automatically copy the resource containing the GenDisplay referenced by <CODE>
GDGI_genDisplay</CODE>
, make the new GenDisplay a child of the GenDisplayGroup referenced by <CODE>
GDGI_genDisplayGroup</CODE>
, and set the new GenDisplay as &quot;usable.&quot; When the document object is destroyed (because the document is closed), the document control will automatically destroy that document's copy of the resource.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY</H6>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY();</PRE>
<P>
The <CODE>
GDGI_genDisplay</CODE>
 field can be set to point to a GenDisplay object. If <CODE>
GDGI_genDisplay</CODE>
 is not a null optr, then the document control will duplicate the resource containing the referenced GenDisplay whenever a new document object is created. The duplicate GenDisplay is made a child of the GenDisplayGroup object indicated by <CODE>
GDGI_genDisplayGroup</CODE>
. By using this message, you can get an optr to that &quot;template&quot; display object. Any changes made to that object will be copied whenever a new document object is created.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Return:	Returns the optr of the &quot;template&quot; GenDisplay.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP</H6>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_DISPLAY_GROUP();</PRE>
<P>
If a GenDisplayGroup object is used to manage GenDisplay objects, the GenDocumentGroup object will contain an optr to the GenDisplayGroup. By using this message, you can get an optr to the GenDisplayGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Return:	Returns the optr of the GenDisplayGroup object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
Connecting Documents with a GenView</H4>
<PRE>GDGI_genView, MSG_GEN_DOCUMENT_GROUP_GET_VIEW</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_genView">
 </A>
The document control can be instructed to automatically connect the output of a GenView to the document object associated with the view. That way, the document object can handle all the messages relating to the view. This is naturally only done when the application is using the Object model; if it is using the Procedural model, a GenView will most likely send its messages to the Process object.</P>
<P>
There are two ways to enable this functionality. One way is appropriate only to single-document applications; the other is appropriate to multi-document applications.</P>
<P>
A single-document application using the Object model should declare the GenView normally as part of the generic tree. (It might well be placed on the GenDocumentControl object's <CODE>
GDCI_enableDisableList</CODE>
.) The source code should set the <CODE>
GDGI_genView</CODE>
 field to be an optr to the GenView. When a document is opened, the document control will automatically set the GenView object to direct its output to the document object.</P>
<P>
A multi-document application using the Object model should use the document control's ability to create and manage GenDisplay objects. The application will have a resource which is duplicated for each open document. This resource will contain a generic tree, at the head of which is a GenDisplay. To use a GenView, all the application has to do is put a GenView in the tree headed by that GenDisplay, and set <CODE>
GDGI_genView</CODE>
 to point to that GenView. When a document object is created, the document control will automatically have the new GenView (in the duplicate resource) send its output to the new GenDocument.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_VIEW">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_VIEW</H6>
<PRE CLASS="syntax">optr MSG_GEN_DOCUMENT_GROUP_GET_VIEW();</PRE>
<P>
The GenDocumentGroup object can be set to automatically link document objects to <CODE>
GenView</CODE>
 objects. Use this message to find out what the designated <CODE>
GenView</CODE>
 is. If there is no such <CODE>
GenView</CODE>
, this message will return a null optr.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
Any GenDocumentGroup object.</CODE>
</P>
<P CLASS="refField">
Return:	The optr of the <CODE>
GenView</CODE>
 object (specified in GDGI<CODE>
_genView).</CODE>
</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
Document Protocols</H4>
<PRE>GDGI_protocolMajor, GDGI_protocolMinor, MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL</PRE>
<P>
<A NAME="Documents_7.htm_IX_GDGI_protocolMinor">
 </A>
<A NAME="Documents_7.htm_IX_GDGI_protocol">
 </A>
Every GEOS file (and each application that creates such files) has a protocol associated with it. Protocols are used to make sure an application knows if a given document was created by a different version of the application. They are stored in the file's FEA_PROTOCOL extended attributes (see <A HREF="../../Files/FileSys/FileSys_d.htm#47278">the File System chapter</A>). The protocol is of the form &quot;MAJOR.MINOR,&quot; where both &quot;MAJOR&quot; and &quot;MINOR&quot; are 16-bit unsigned integers. The application's protocol is specified by the <CODE>GDGI_protocolMajor</CODE>
 and <CODE>
GDGI_protocolMinor</CODE>
 attributes of the GenDocumentGroup object. </P>
<P>
All documents created by an application will have the application's protocol number. If a document has the same major protocol number as the application but a lower minor protocol number, the document is compatible with the application. If the document has a lower major protocol number, the document is incompatible with the application; it can be opened only if a routine has been defined to upgrade the document. If the document has a higher protocol than the application (i.e. its major protocol number is higher, or it has the same major protocol number and a higher minor protocol number), the document control will not open the file; it will present an error message. By default, the GenDocumentGroup<CODE>
 </CODE>
object has a <CODE>
GDGI_protocolMajor</CODE>
 of one and a <CODE>
GDGI_protocolMinor</CODE>
 of zero.</P>
<P>
When the user opens an earlier but compatible document, the GenDocumentGroup opens the file and attaches it to a document object. Then, the (newly-created) document object sends itself <CODE>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT;</CODE>
 the GenDocumentGroup then sends its output object the message <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT</CODE>
. If neither of these messages is handled, the document will be opened as if it were of the current protocol (since it is compatible). Often an application will not handle these messages.</P>
<P>
If the user tries to open an earlier and incompatible document, the GenDocumentGroup opens the file and attaches it to a document object. Then, the document object sends a <CODE>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</CODE>
 to itself, and the GenDocumentGroup sends a <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</CODE>
 to its output. If neither message is handled, the GenDocumentGroup closes the file unchanged and removes the document object, and the GenDocumentControl presents an error message (since the document is incompatible). If either message is handled, the document will be opened normally after the handler exits.</P>
<P>
Note that the document control will not automatically change the protocol number for a file after it has been updated. If you wish this done, you should have the handler for the message call one of the routines to change the FEA_PROTOCOL extended attribute.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_7.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL</H6>
<PRE CLASS="syntax">dword	MSG_GEN_DOCUMENT_GROUP_GET_PROTOCOL();</PRE>
<P>
Use this message to get the protocol number associated with the GenDocumentGroup. A protocol number is composed of two parts, a major component and a minor component. This message returns a double-word; the high word is the major component, and the low word is the minor component. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenDocumentGroupClass.</P>
<P CLASS="refField">
Return:	Returns a dword-sized value; the high word contains the major protocol number, and the low word contains the minor protocol number.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<HR>
<A NAME="Documents_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 2.3 <A HREF="#Documents_5.htm">Document Control Data Fields</A>: 
GenDocument Attributes</H3>
<P>
<A NAME="Documents_8.htm_IX_GenDocumentClass">
 </A>
There are very few <CODE>
GenDocumentClass</CODE>
 attributes that you will need to be concerned with. The GenDocumentGroup object creates and updates document objects as needed. Ordinarily, the application will not look at the <CODE>
GenDocumentClass </CODE>
instance data. If the program defines a subclass of <CODE>
GenDocumentClass</CODE>
, the subclass's methods should use only the subclass's instance data.</P>
<P>
There is only one attribute which the program should change at run-time, and that is the GDA_PREVENT_AUTO_SAVE bit of the <CODE>
GDI_attrs</CODE>
 field. This bit can be changed with the messages <CODE>
MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE</CODE>
 and <CODE>
MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE</CODE>
.</P>
<P>
<CODE>
GenDocumentClass</CODE>
 is a subclass of <CODE>
GenContentClass</CODE>
 and has all the functionality of that class. Since GenContent objects are rarely used directly, the class does not have its own chapter; instead, it is documented in <A HREF="#Documents_8.htm_25537"> GenContentClass</A>
. The main thing to know about the GenContent is that, like a VisContent, it is displayed in a GenView and can have visible children. It can also have generic children, though it may not have both visible and generic children at the same time.</P>

<H4 CLASS="HeadingC">
The GDI_attrs Field</H4>
<PRE>GDI_attrs, MSG_GEN_DOCUMENT_GET_ATTRS, MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE, MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE, MSG_GEN_DOCUMENT_AUTO_SAVE</PRE>
<P>
<A NAME="Documents_8.htm_IX_GDA_&ldots;">
 </A>
<A NAME="Documents_8.htm_IX_GDI_attrs">
 </A>
The <CODE>
GDI_attrs</CODE>
 word contains flags indicating the status of the document. The application can read or change any of these attributes; however, only the attribute GDA_PREVENT_AUTO_SAVE should actually be changed at run-time.</P>
<DL>
<DT>
GDA_READ_ONLY</DT><DD>
This attribute is set if the document in question is opened for read-only access.</DD>
<DT>
GDA_READ_WRITE</DT><DD>
This attribute is set if the document is opened for read/write access.</DD>
<DT>
GDA_FORCE_DENY_WRITE</DT><DD>
If this attribute is set, while the document is open, no other process will be allowed to open that document for read/write access.</DD>
<DT>
GDA_SHARED_MULTIPLE</DT><DD>
The document is opened in &quot;shared multiple&quot; mode. </DD>
<DT>
GDA_SHARED_SINGLE</DT><DD>
The document is opened in &quot;shared single&quot; mode. </DD>
<DT>
GDA_UNTITLED</DT><DD>
The document is newly-created and has not yet been saved; it is still untitled.</DD>
<DT>
GDA_DIRTY</DT><DD>The document has been marked dirty since the last time it was saved.</DD>
<DT>
GDA_CLOSING</DT><DD>
The document is in the process of being closed.</DD>
<DT>
GDA_ATTACH_TO_DIRTY_FILE</DT><DD>
The document object is being attached to a dirty file (e.g., when restarting GEOS).</DD>
<DT>
GDA_SAVE_FAILED</DT><DD>
The user attempted to save the document, and it could not be saved (e.g., someone else denied write access, or the volume was no longer accessible).</DD>
<DT>
GDA_OPENING</DT><DD>
The document is in the process of being opened.</DD>
<DT>
GDA_AUTO_SAVE_STOPPED</DT><DD>
Auto-save was stopped while in progress.</DD>
<DT>
GDA_PREVENT_AUTO_SAVE</DT><DD>
This bit can be changed by the application at run-time. While the bit is on, auto-save is disabled.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_GET_ATTRS">
 </A>
MSG_GEN_DOCUMENT_GET_ATTRS</H6>
<PRE CLASS="syntax">GenDocumentAttrs 	MSG_GEN_DOCUMENT_GET_ATTRS();</PRE>
<P>
Use this message to get the <CODE>
GDI_attrs</CODE>
 flags for a given document. These attribute flags give information about the document's permissions as well as about any operations currently in progress.</P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Return:	The object's word-sized GDI_attrs field.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE">
 </A>
MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_DISABLE_AUTO_SAVE();</PRE>
<P>
Sometimes an application needs to temporarily disable auto-save for a specific document (for example, if it is in the middle of making elaborate changes to the file). It can do this by sending this message to the document object. The document's GDA_PREVENT_AUTO_SAVE bit will be turned on, and auto-save will be disabled until the document receives a <CODE>
MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE">
 </A>
MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_ENABLE_AUTO_SAVE();</PRE>
<P>
This message turns off a document's GDA_PREVENT_AUTO_SAVE bit. If the bit is already off (i.e., auto-save is enabled), the message has no effect.</P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_AUTO_SAVE">
 </A>
MSG_GEN_DOCUMENT_AUTO_SAVE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_AUTO_SAVE();</PRE>
<P>
This message forces the document object to immediately auto-save its file.</P>
<P CLASS="refField">
Source:	Unrestricted. The document object may send this message to itself.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Interception:	This message is not generally subclassed.</P>



<H4 CLASS="HeadingC">
The GDI_operation Attribute</H4>
<PRE>GDI_operation, MSG_GEN_DOCUMENT_GET_OPERATION</PRE>
<P>
<A NAME="Documents_8.htm_IX_GenDocumentOperation">
 </A>
<A NAME="Documents_8.htm_IX_GDI_operation">
 </A>
A single user action can result in many routines being called and many messages being sent out. To help keep track of what's going on, <CODE>
GenDocumentClass</CODE>
 has a byte-length field, <CODE>
GDI_operation</CODE>
. If the document control is in the midst of handling a user action for a given document, it will set the <CODE>
GDI_operation</CODE>
 byte accordingly. The current operation is a member of the <CODE>
GenDocumentOperation</CODE>
 enumerated type. This type has the following possible values:</P>
<DL>
<DT>
GDO_NORMAL</DT><DD>
<A NAME="Documents_8.htm_IX_GDO_&ldots;">
 </A>
This is the usual setting. If the document is not currently handling a user action, this is the setting.</DD>
<DT>
GDO_SAVE_AS</DT><DD>
When the user chooses &quot;Save As,&quot; the byte is set to this value. It remains at this value until the new document has been opened and saved.</DD>
<DT>
GDO_REVERT </DT><DD>
The setting from the time the user chooses &quot;Revert&quot; until the file has been restored to its last-saved state.</DD>
<DT>
GDO_REVERT_QUICK</DT><DD>
The setting from the time the user chooses &quot;restore from backup&quot; until the file has been restored.</DD>
<DT>
GDO_ATTACH</DT><DD>
The setting while the UI is being created for and attached to a given document. When a file document is created or opened, the <CODE>
GDI_operation</CODE>
 field is set to this after GEOS has opened the file, and it remains at this setting until the application finishes attaching the UI.</DD>
<DT>
GDO_DETACH</DT><DD>
The setting while the UI is being detached from a given document, but before the actual file is closed.</DD>
<DT>
GDO_NEW</DT><DD>The setting while a new file is being created. When the file is created and initialized, the <CODE>
GDI_operation</CODE>
 will change to <CODE>
GDO_ATTACH</CODE>
.</DD>
<DT>
GDO_OPEN</DT><DD>The setting while an existing file is being opened. When the file is created and initialized, the <CODE>
GDI_operation</CODE>
 will change to <CODE>
GDO_ATTACH</CODE>
.</DD>
<DT>
GDO_SAVE</DT><DD>The setting while a document is being saved. </DD>
<DT>
GDO_CLOSE</DT><DD>After the UI has been detached, the <CODE>
GDI_operation</CODE>
 byte is set to this value until the document object is destroyed.</DD>
<DT>
GDO_AUTO_SAVE</DT><DD>
The setting while a file is being updated (i.e. auto-saved) to disk.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_GET_OPERATION">
 </A>
MSG_GEN_DOCUMENT_GET_OPERATION</H6>
<PRE CLASS="syntax">GenDocumentOperation 	MSG_GEN_DOCUMENT_GET_OPERATION();</PRE>
<P>
Use this message to find out what user action a given document object is in the midst of processing. This is useful if you are handling some message and want to find out the context in which that message was sent. Note that although the message returns a word-length value, the <CODE>
GDI_operation</CODE>
 enumerated type is byte-length; it is thus safe to cast the return value to a byte-length variable. </P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Return:	Returns a member of the <CODE>
GenDocumentOperation</CODE>
 enumerated type corresponding to the document object's current operation.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
File Information</H4>
<PRE>GDI_fileHandle, GDI_diskHandle, GDI_volumeName, GDI_fileName, MSG_GEN_DOCUMENT_GET_FILE_NAME, MSG_GEN_DOCUMENT_GET_FILE_HANDLE</PRE>
<P>
<A NAME="Documents_8.htm_IX_GDI_volumeName">
 </A>
<A NAME="Documents_8.htm_IX_GDI_diskHandle">
 </A>
<A NAME="Documents_8.htm_IX_GDI_fileHandle">
 </A>
The document object stores certain data about the file associated with it. In particular, the instance data records the document's path, its full file name, and the handles of the file and the disk volume containing the file. This data can be retrieved by sending messages to the document object.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_GET_FILE_NAME">
 </A>
MSG_GEN_DOCUMENT_GET_FILE_NAME</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GET_FILE_NAME(
        char *buffer); /* Address to write file name to */</PRE>
<P>
This message instructs a GenDocument to write the name of its file (without the path) to the specified address.</P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object</P>
<P CLASS="refField">
Parameters:	<EM>
buffer</EM>
	Buffer of length FILE_LONGNAME_BUFFER_SIZE.</P>
<P CLASS="refField">
Return:	Writes file's virtual name into the passed buffer as a null-terminated string.</P>
<P CLASS="refField">
Warnings:	Make sure the buffer passed is of length FILE_LONGNAME_BUFFER_SIZE; otherwise the method might overwrite other data.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_DOCUMENT_GET_FILE_HANDLE">
 </A>
MSG_GEN_DOCUMENT_GET_FILE_HANDLE</H6>
<PRE CLASS="syntax">FileHandle 	MSG_GEN_DOCUMENT_GET_FILE_HANDLE();</PRE>
<P>
This message returns the handle of the file associated with a given GenDocument object.</P>
<P CLASS="refField">
Source:	Unrestricted--objects subclassed from <CODE>
GenDocumentClass</CODE>
 often send this message to themselves.</P>
<P CLASS="refField">
Destination:	Any GenDocument object.</P>
<P CLASS="refField">
Return:	Returns handle of file associated with that document object.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>



<H4 CLASS="HeadingC">
<A NAME="Documents_8.htm_25537">
 </A>
GenContentClass</H4>
<P>
<A NAME="Documents_8.htm_IX_GenContentClass">
 </A>
The GenContent generic object is similar to the VisContent visible object in that it interacts directly with the GenView. While the VisContent allows an application to display a visible hierarchy of objects within the view, however, the GenContent allows either generic or visible object hierarchies to be displayed. This is the one case where you may ordinarily have visible objects be children of a generic object. Note that you should not have both visible and generic objects as children of the same GenContent; if you do so, results are undefined.</P>
<P>
Any GenView whose content is a GenContent (or subclass) should have its GVA_GENERIC_CONTENTS attribute set.</P>
<P>
<CODE>
GenContentClass</CODE>
<A NAME="Documents_8.htm_IX_GCI_&ldots;  (GenContent Instance)">
 </A>
 is a subclass of <CODE>
GenClass</CODE>
 and therefore inherits all the instance data, messages, and hints of all generic objects. The GenContent also has two other instance data fields, however; these are</P>
<PRE>@instance byte			GCI_attrs = 0;
@instance optr			GCI_genView;</PRE>
<P>
The <CODE>
GCI_attrs</CODE>
 field contains a record of <CODE>
VisContentAttrs</CODE>
 and is used by document objects for visual updates and interaction with the GenView. This record may be retrieved with <CODE>
MSG_GEN_CONTENT_GET_ATTRS</CODE>
 or set with <CODE>
MSG_GEN_CONTENT_SET_ATTRS</CODE>
.</P>
<P>
The <CODE>
GCI_genView</CODE>
 field contains the optr of the GenView object displaying the GenContent. This, too, is used by document objects to manage interaction with the GenView.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_CONTENT_GET_ATTRS">
 </A>
MSG_GEN_CONTENT_GET_ATTRS</H6>
<PRE CLASS="syntax">byte	MSG_GEN_CONTENT_GET_ATTRS();</PRE>
<P>
This message returns the record of <CODE>
VisContentAttrs</CODE>
 set in the GenContent's <CODE>
GCI_attrs</CODE>
 field.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenContent object</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The <CODE>
GCI_attrs</CODE>
 settings.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_8.htm_IX_MSG_GEN_CONTENT_SET_ATTRS">
 </A>
MSG_GEN_CONTENT_SET_ATTRS</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTENT_SET_ATTRS(
        byte	attrsToSet,
        byte	attrsToClear);</PRE>
<P>
This message sets the attributes in the GenContent's <CODE>
GCI_attrs</CODE>
 record.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenContent object.</P>
<P CLASS="refField">
Parameters:	<CODE>
attrsToSet</CODE>
	A record of <CODE>
VisContentAttrs</CODE>
 indicating which flags should be set. Those set in <CODE>
attrsToSet</CODE>
 will be set in <CODE>
GCI_attrs</CODE>
.</P>
<DL>
<DT>
attrsToClear</DT><DD>A record of <CODE>
VisContentAttrs</CODE>
 indicating which flags should be cleared. Those cleared in <CODE>
attrsToClear</CODE>
 will be cleared in <CODE>
GCI_attrs</CODE>
. Note that if a flag is set in both parameters, it will end up cleared.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<HR>
<A NAME="Documents_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Documents</A>: 3 
Basic DC Messages</H2>
<P>
The document control objects use messages for many things. Since well over half a dozen classes of objects (counting file selectors, GenDisplayGroup objects, menu triggers, etc.) and far more actual objects are involved in intricate tasks, many messages are continually sent back and forth. Most of these messages are transparent to the programmer. The programmer need only know about them if the program subclasses a message to add functionality to it; this is an advanced technique which few programs will ever need to use.</P>
<P>
There are two basic types of messages the programmer needs to know about. First, there are messages which are sent to document control objects; these objects may query information, toggle some functionality, or otherwise instruct the DC objects to take some action. Second, there are messages the DC objects send when the programmer's code needs to take some action. Each type of message is treated in a separate section.</P>
<P CLASS="subsectionLink">
<A HREF="#Documents_a.htm">Other Document Group Messages</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_b.htm">From the Doc Control Objects</A></P>
<HR>
<A NAME="Documents_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 3.1 <A HREF="#Documents_9.htm">Basic DC Messages</A>: 
Other Document Group Messages</H3>
<P>
<A NAME="Documents_a.htm_IX_GenDocumentGroupClass">
 </A>
The following are the messages a program might ordinarily send to the GenDocumentGroup object. Many of these messages request information about the GenDocumentControl object or the target document; others request information about the GenDocumentGroup object or instruct it to take actions. Many of the messages require, as an argument, an optr to a document object; however, a null object-pointer can be passed, thus indicating the target document. This is especially useful under single-document models; the application doesn't need to keep track of the document object's optr, since it is always the target document.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_a.htm_IX_MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY">
 </A>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY(
        optr	document); /* document to mark dirty */</PRE>
<P>
This message notifies the GenDocumentGroup object that the specified document has been dirtied. The GenDocumentGroup will enable and disable file menu triggers as appropriate. If the argument is a null pointer, the target document will be marked dirty.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	optr of document to mark dirty. If a null optr is passed, the target document will be dirtied.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>
<P CLASS="refField">
Tips:	If the document is a VM file and the GenDocumentGroup attribute GDGA_AUTOMATIC_DIRTY_NOTIFICATION is set, the VM routines will notify the GenDocumentGroup that the document has been dirtied whenever the <CODE>
VMDirty()</CODE>
 (or <CODE>
DBDirty()</CODE>
, <CODE>
CellDirty()</CODE>
, etc.) routine is called. However, if you change a data cache without changing the actual file, you should send this message (or <CODE>
MSG_GEN_DOCUMENT_GROUP_MA</CODE>
RK_DIRTY_BY_FILE) to insure that the changes to the cache will be saved.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_a.htm_IX_MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY_BY_FILE">
 </A>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY_BY_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY_BY_FILE(
        FileHandle 	file); /* file handle of document to mark dirty */</PRE>
<P>
This message notifies the GenDocumentGroup that the file with the specified handle has been dirtied. The GenDocumentGroup will enable and disable file menu triggers as appropriate. The document is specified by file handle, not document optr.</P>
<P CLASS="refField">
Source:	Unrestricted</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the file to dirty.</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>
<P CLASS="refField">
Tips:	If the document is a VM file and the GenDocumentGroup attribute GDGA_AUTOMATIC_DIRTY_NOTIFICATION is set, the VM routines will notify the GenDocumentGroup that the document has been dirtied whenever the <CODE>
VMDirty()</CODE>
 (or <CODE>
DBDirty()</CODE>
, <CODE>
CellDirty()</CODE>
, etc.) routine is called. However, if you change a data cache without changing the actual file, you should send this message (or <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY</CODE>
) to insure that the changes to the cache will be saved.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_a.htm_IX_MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE">
 </A>
MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE</H6>
<PRE CLASS="syntax">optr	MSG_GEN_DOCUMENT_GROUP_GET_DOC_BY_FILE(
        FileHandle 	file);</PRE>
<P>
Use this message if you know the file handle of a document and you need to get an object-pointer to the document object corresponding to the file. In the inverse situation (you know the object, and need to get the file handle), send <CODE>
MSG_GEN_DOCUMENT_GET_FILE_HANDLE</CODE>
 directly to the document object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of file whose document object is needed.</P>
<P CLASS="refField">
Return:	Returns the optr of document object</P>
<P CLASS="refField">
Interception:	You should not subclass this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_a.htm_IX_MSG_GEN_DOCUMENT_GROUP_SAVE_AS_CANCELED">
 </A>
MSG_GEN_DOCUMENT_GROUP_SAVE_AS_CANCELLED</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GROUP_SAVE_AS_CANCELLED();</PRE>
<P>
If you are in the midst of handling a &quot;Save As&quot; operation, and you need to cancel it, send this message to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	Unrestricted</P>
<P CLASS="refField">
Destination:	Any GenDocumentGroup object.</P>
<P CLASS="refField">
Interception:	This message is not generally subclassed.</P>

<HR>
<A NAME="Documents_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 3.2 <A HREF="#Documents_9.htm">Basic DC Messages</A>: 
From the Doc Control Objects</H3>
<P>
Often the document control will need to notify the application to take an action. For example, when a document is created, the application needs to be told to initialize the document and the user interface. There are two basic models for handling these situations: the &quot;Procedure&quot; model and the &quot;Object&quot; model. (The differences between these models are discussed at more length in the section <A HREF="#Documents_4.htm_16929"> Document Control Models</A>
.) Each model has its own way of messaging.</P>
<P>
Under the Procedure model, every time the application needs to be notified, the document control sends a message to the GenDocumentGroup's output object, which is ordinarily the process object. Under the Object model, the affected document object will send a message to itself; this message has no handler under <CODE>
GenDocumentClass</CODE>
, so the application must use a subclass of <CODE>
GenDocumentClass</CODE>
 with handlers for these messages.</P>
<P>
A single user action can generate several messages. For example, when the user opens a document, four messages are sent: <CODE>
MSG_..._PHYSICAL_OPEN</CODE>
,<CODE>
 MSG_..._READ_CACHED_DATA_FROM_FILE</CODE>
,<CODE>
 MSG_..._CREATE_UI_FOR_DOCUMENT</CODE>
, and <CODE>
MSG_..._ATTACH_UI_TO_DOCUMENT</CODE>
. Furthermore, a given message might be sent as the result of several different user actions; for example, the message MSG_..._CREATE_UI_FOR_DOCUMENT is sent when the user creates a new file or opens an existing one. If a handler needs to know what user action precipitated a given message, it can send a <CODE>
MSG_GEN_DOCUMENT_GET_OPERATION</CODE>
 to the document object.</P>

<H4 CLASS="HeadingC">
Messages Handled under the Procedure Model</H4>
<P>
Whenever the application needs to be notified to take an action, a message will be sent to the GenDocumentGroup's output object. Two arguments accompany such messages: A pointer to the relevant document object and the handle of the file associated with that document. All of these messages are exported from <CODE>
MetaClass</CODE>
, so they can be handled by objects of any class.</P>
<P>
Each of these messages corresponds to a document-model message, all of which are described in <A HREF="#Documents_b.htm_18073"> Messages Handled under the Object Model</A>
. These are just the basic messages; for more advanced functionality, see the message listings in the advanced section.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE">
 </A>
MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_INITIALIZE_FILE(
        optr		document, /* document object to initialize */
        FileHandle		file); /* Handle of file to initialize */</PRE>
<P>
The GenDocumentGroup object sends this message out when a new document has been created and needs to be initialized. Applications which use VM files will allocate the map block and initialize it. If an application maintains data caches for its files, it should initialize the caches at this point.</P>
<P>
Note that the handler for this message should not take any UI-related actions. These should be left to the handlers for <CODE>
MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT</CODE>
 and <CODE>
MSG_META_DOC_OUTPUT_ATTACH_UI_FOR_DOCUMENT</CODE>
.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	The output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the document object which has just been created.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The <CODE>
FileHandle</CODE>
 of the file which has just been created or opened.</DD>
</DL>
<P CLASS="refField">
Interception:	If you are using the Procedure model, you must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT(
        optr		document, /* Pointer to document object */
        FileHandle		file); /* Handle of file associated with 
				 * document object */</PRE>
<P>
The GenDocumentGroup object sends this message after a document has been created or opened. Before this message is sent, the GenDocumentControl object will enable those objects on its <CODE>
GDCI_enableDisableList</CODE>
, and the GenDocumentGroup object will copy the GenDisplay resource for the document (if one is defined).</P>
<P>
Applications that use dynamic UI objects will commonly respond to this message by creating the objects for the newly-opened document. Applications that use static UI objects will commonly respond to this message by enabling the objects.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	The output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	If you are using the Procedure model, you must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT(
        optr		document, /* optr of document object */
        FileHandle 		file); /* handle of file for this document */</PRE>
<P>
The GenDocumentGroup object sends this message when the UI for a newly-opened document has been created. It also sends this message when re-opening a document as part of restoring GEOS from a state file. Applications may respond to this by attaching dynamic UI objects and setting the values of static UI objects.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	The optr of the document object.</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT</H6>
<PRE CLASS="syntax">void 	MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT(
        optr		document, /* pointer to document object */
        FileHandle 		file); /* handle of file for this document */</PRE>
<P>
The GenDocumentGroup sends this message when a document is being closed, whether because a user closes the file or because the application is being closed. It also sends this message when GEOS is in the process of saving itself to a state file prior to shutting down. Applications generally respond to this by detaching dynamic UI objects. Note that the GenDocumentControl object will automatically disable any objects in its <CODE>
GDCI_enableDisableList</CODE>
. </P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	If you are using the Procedure model, you must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT(
        optr	document, /* pointer to document object */
        FileHandle 	file); /* handle of file for this document */</PRE>
<P>
The GenDocumentGroup object sends this message out when a document is being closed, whether because a user closes the file or because the application is being closed. Applications will generally disable static display objects and delete dynamic display objects. Note that the GenDocumentControl object will automatically disable all objects in its <CODE>
GDCI_enableDisableList</CODE>
, and the GenDocumentGroup will delete the display block it created for a document, if any.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	If you are using the Procedure model, you must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_META_DOC_OUTPUT_ATTACH_FAILED">
 </A>
MSG_META_DOC_OUTPUT_ATTACH_FAILED</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_ATTACH_FAILED(
        optr	document, /* pointer to document object */
        FileHandle 	File); /* (former) handle of file for this document */</PRE>
<P>
When GEOS restores itself from state, the document control tries to reattach all documents which were attached when GEOS was shut down. If this is impossible (as for example if a document was deleted after GEOS shut down), the<CODE>
 </CODE>
GenDocumentGroup object will send this message to its output.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	If you are using the Procedure model, you must write a handler for this message in whatever class will be receiving it (usually the process class).</P>



<H4 CLASS="HeadingC">
<A NAME="Documents_b.htm_18073">
 </A>
Messages Handled under the Object Model</H4>
<P>
<A NAME="Documents_b.htm_IX_GenDocumentClass">
 </A>
If an application uses the Object model of document control, it will generally not handle the messages to the GenDocumentGroup's output. Instead, it will define a subclass of <CODE>
GenDocumentClass</CODE>
; this subclass will have methods for those situations which require the application's attention. Note that <CODE>
GenDocumentClass</CODE>
 does not have handlers for any of these messages; if the application does not define a method for a given message, that message will have no effect.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE">
 </A>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE();</PRE>
<P>
When a new document is created, the document object sends this message to itself. VM file based applications will generally respond to this message by allocating and initializing the map block. DOS file based applications will commonly initialize data structures for a default file. If an application maintains data caches for its files, it should initialize the caches at this point.</P>
<P>
The application should not take any UI-related actions; those should be postponed until the messages <CODE>
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT</CODE>
 and <CODE>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</CODE>
 are received.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	Nothing.</P>
<P CLASS="refField">
Return:	If the handler could not initialize the file, it should return <EM>
true</EM>
; the document control will then destroy the new file.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT();</PRE>
<P>
The GenDocument object sends this message to itself after a document has been created or opened. Before this message is sent, the GenDocumentControl object will enable those objects on its <CODE>
GDCI_enableDisableList</CODE>
, and the GenDocumentGroup object will copy the GenDisplay block for the document (if one is defined).</P>
<P>
Applications that use dynamic UI objects will commonly respond to this message by creating the objects for the newly-opened document. Applications that use static UI objects will commonly respond to this message by enabling the objects.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT();</PRE>
<P>
The document object sends this message to itself when the UI for a newly-opened document has been created. It also sends this message when re-opening a document as part of restoring GEOS from a state file. Applications may respond to this by attaching dynamic UI objects and setting the values of static UI objects.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT();</PRE>
<P>
The document object sends this message when a document is being closed, whether because a user closes the file or because the application is being closed. It also sends this message when GEOS is in the process of saving itself to a state file prior to shutting down. Applications generally respond to this by detaching dynamic UI objects. Note that the GenDocumentControl object will automatically disable any objects in its <CODE>
GDCI_enableDisableList</CODE>
.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT();</PRE>
<P>
The GenDocumentGroup object sends this message out when a document is being closed, whether because a user closes the file or because the application is being closed. Applications will generally disable static display objects and delete dynamic display objects. Note that the GenDocumentControl object will automatically disable all objects in its <CODE>
GDCI_enableDisableList</CODE>
, and the GenDocumentGroup will delete the display block it created for a document, if any.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_b.htm_IX_MSG_GEN_DOCUMENT_ATTACH_FAILED">
 </A>
MSG_GEN_DOCUMENT_ATTACH_FAILED</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_ATTACH_FAILED();</PRE>
<P>
When GEOS restores itself from state, the document control tries to reattach all documents which were attached when GEOS was shut down. If this is impossible (as for example if a document was deleted after GEOS shut down), the document object will send this message to itself.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>



<H4 CLASS="HeadingC">
Messages Associated with Common User Actions</H4>
<P>
A single user action can precipitate several application-handled messages. This section lists the messages associated with each of several common user actions. Note that some messages are sent as the result of many user actions. If a handler needs to find out what user action caused a message to be sent, it should send <CODE>
MSG_GEN_DOCUMENT_GET_OPERATION</CODE>
 to the document object.</P>
<P>
If a message is not ordinarily handled, it is enclosed in [brackets] below. These messages are documented in the advanced usage section. Actions taken by the document control objects (other than messages sent) are listed in <EM>
italics</EM>
. The messages listed are sent by the appropriate GenDocument object to itself. If the message is not subclassed by the GenDocument object, it sends a corresponding procedural-model message (of the form <CODE>
MSG_META_DOC_OUTPUT...)</CODE>
 to the GenDocumentGroup object's output. The one exception is MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS; as noted on <A HREF="#Documents_f.htm_35277"> MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE</A>
, this message does not have a corresponding MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS.</P>
<UL>
<LI>
New document is created:<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_CREATE</CODE>
]<BR>
<EM>
new file is created<BR>
VM files: initialize </EM>
VM<EM>
 attributes, token, protocol<BR>
</EM>
<CODE>
MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE<BR>
</CODE>
<EM>
if saveAs/Revert supported, save file so revert will return to this state<BR>
</EM>
[<CODE>
MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
]<BR>
<CODE>
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT<BR>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</CODE>
</LI>
<LI>
Document is opened:<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_OPEN</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE</CODE>
]<BR>
<CODE>
MSG_GEN_DOCUMENT_CREATE_UI_FOR_DOCUMENT<BR>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</CODE>
</LI>
<LI>
Document is saved:<BR>
[<CODE>
MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
]<BR>
VM<EM>
 files: call made to VMSave</EM>
</LI>
<LI>
Document is &quot;Saved As&quot;:<BR>
[<CODE>
MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS</CODE>
]<BR>
[DOS files: <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE</CODE>
]<BR>
VM<EM>
 files: VMSaveAs called<BR>
</EM>
[<CODE>
MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED</CODE>
]</LI>
<LI>
Document is reverted to last-saved version:<BR>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_REVERT</CODE>
]<BR>
VM<EM>
: VMRevert called<BR>
</EM>
[<CODE>
MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE</CODE>
]<BR>
<CODE>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</CODE>
</LI>
<LI>
Document is about to be closed:<BR>
[MSG_GEN_DOCUMENT_PHYSICAL_CHECK_FOR_MODIFICATIONS]</LI>
</UL>
<DL>
<DT>
If document is modified &amp; user wants to save changes:</DT><DD>
[<CODE>
MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
]<BR>
VM<EM>
: VMSave called<BR>
</EM>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT</CODE>
</DD>
<DT>
If document is modified and user does not want to save changes:</DT><DD>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_REVERT</CODE>
]<BR>
VM<EM>
: VMRevert called<BR>
</EM>
<CODE>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_CLOSE</CODE>
]</DD>
<DT>
If document is not modified:</DT><DD>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_CLOSE</CODE>
]</DD>
<DT>
If document is not modified and untitled:</DT><DD>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_CLOSE</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_REVERT</CODE>
]</DD>
<UL>
<LI>
GEOS restoring from state, document being attached:<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_OPEN</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE</CODE>
]<BR>
<CODE>
MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT</CODE>
</LI>
<LI>
GEOS restoring from state, attach failed:<BR>
<CODE>
MSG_GEN_DOCUMENT_ATTACH_FAILED<BR>
MSG_GEN_DOCUMENT_DESTROY_UI_FOR_DOCUMENT</CODE>
</LI>
<LI>
GEOS shutting down, document being detached:<BR>
[<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT</CODE>
]<BR>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</CODE>
]<BR>
VM<EM>
 files: VMUpdate called<BR>
</EM>
<CODE>
MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT<BR>
</CODE>
[<CODE>
MSG_GEN_DOCUMENT_PHYSICAL_CLOSE</CODE>
]</LI>
</UL>

</DL>
<HR>
<A NAME="Documents_c.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Documents</A>: 4 
Advanced DC Usage</H2>
<P>
<A NAME="Documents_c.htm_IX_GenDocumentClass">
 </A>
By now, you should know enough for most uses of the document control. For single-document applications which manage GEOS Virtual Memory files and use a generic interface, the above documentation should be sufficient. However, there are some needs which require more advanced techniques. This section details these techniques.</P>
<P>
This section discusses the use of document protocols to smooth the process of upgrading software. It also discusses using the document control to manage multiple documents simultaneously and to manage DOS files. Finally, it discusses those messages which an application might need to handle but would not ordinarily need to know about.</P>
<P CLASS="subsectionLink">
<A HREF="#Documents_d.htm">Document Protocols</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_e.htm">Multiple Document Model</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_f.htm">Working with DOS files</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_10.htm">Special-Purpose Messages</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_11.htm">Forcing Actions</A></P>
<P CLASS="subsectionLink">
<A HREF="#Documents_12.htm">Some Other Internal Messages</A></P>
<HR>
<A NAME="Documents_d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.1 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
<A NAME="Documents_d.htm_82736">
 </A>
Document Protocols</H3>
<PRE>MSG_META_DOC_OUTPUT_OPEN_EARLIER_COMPATIBLE_DOCUMENT, MSG_META_DOC_OUTPUT_OPEN_EARLIER_INCOMPATIBLE_DOCUMENT, MSG_GEN_DOCUMENT_OPEN_EARLIER_COMPATIBLE_DOCUMENT, MSG_GEN_DOCUMENT_OPEN_EARLIER_INCOMPATIBLE_DOCUMENT</PRE>
<P>
One difficulty in upgrading software is that an obsolete program may have created many documents. If the new version can't read those documents, people who used the old version will be inconvenienced; however, if the new versions always use the same document formats as the old versions, options for improvement will be limited. Above all, if document formats change, the new version should detect this gracefully, without crashing or damaging the old file.</P>
<P>
The header for a GEOS Virtual Memory file contains two words for protocol numbers. The document control objects use the protocol numbers to insure that a document is compatible with the version of the application which is opening it. There are two parts to the protocol number: the <EM>
major</EM>
 protocol number, and the <EM>
minor</EM>
 protocol number. (If a document has a major protocol number of 3 and a minor number of 11, it is referred to has having protocol 3.11.) By convention, versions of an application with entirely compatible document formats will have the same major protocol number; if a new version of an application cannot read older documents without converting them in some way, it will have a higher major protocol number, and the minor number will be reset to zero.</P>
<P>
When the GenDocumentGroup object opens a file, it checks the major and minor protocol numbers. It will then take appropriate action:</P>
<UL>
<LI>
If the document's major and minor protocol numbers match the protocol attributes of the GenDocumentGroup object, the document will be opened normally. </LI>
<LI>
If the document has a higher protocol number than the GenDocumentGroup (i.e. either the document has a higher major protocol number, or the document and the GenDocumentGroup have the same major protocol number and the document has a higher minor protocol number), the document control will display an appropriate alert box, after which it will close the file and delete the document object. (It will do all of this automatically, without any attention from the application.) </LI>
<LI>
If the document has lower major protocol number than the document control, the document control will send <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</CODE>
 (and a corresponding <CODE>
MSG_GEN_DOCUMENT_...</CODE>
). If neither message is handled, or if a handler returns an error, the document control will display an alert box and will close the file and delete the document object. </LI>
<LI>
If the document has the same major but a lower minor protocol number than the GenDocumentGroup, the document control will send <CODE>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT</CODE>
 (and a corresponding <CODE>
MSG_GEN_DOCUMENT_...</CODE>
). After this, it will proceed normally, whether the messages were handled or not (since the document is presumed to be compatible). If a handler returns an error, it will close the file and free the document object.</LI>
</UL>
<P>
Note that the document control will not change the file under any of these circumstances. In particular, if it opens an earlier document, it will not change the document's protocol number. If the application wishes to do this, it should do it explicitly (generally in the handlers for the &quot;<CODE>
UPDATE_..._DOCUMENT</CODE>
&quot; messages). The protocol numbers are among a file's extended attributes. For information about changing extended attributes, see <A HREF="../../Files/FileSys/FileSys_d.htm#49785">the File System chapter</A>.</P>
<H6 CLASS="RefETitle">
<A NAME="Documents_d.htm_IX_MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT(
        word *		error, 			/* Return error code from FileError */
        optr 		document,			/* pointer to document object */
        FileHandle 		file); 			/* handle of file opened */</PRE>
<P>
The GenDocumentGroup object sends this message to its output when the user tries to open a document with the same major protocol number as the document control and a lower minor protocol number. Applications will commonly respond to this message by changing the document's protocol number to bring it up-to-date. If the application can't use the document, it should return <EM>
true</EM>
 and set <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.) With an error, the document control will close the document unchanged. If the application successfully updates the document, it should return zero and set <EM>
*error</EM>
 to zero.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object)</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_d.htm_IX_MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT(
        word *	error); /* Return error code from FileError type */</PRE>
<P>
The document object sends this message when the user tries to open a document with the same major protocol number as the document control and a lower minor protocol number. Applications will commonly respond to this message by changing the document's protocol number to bring it up-to-date. If the application can't use the document, it should return <EM>
true</EM>
 and put an error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.) With an error, the document control will close the document unchanged. If the application successfully updates the document, it should return zero and set <EM>
*error</EM>
 to zero.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_d.htm_IX_MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT">
 </A>
MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT(
        								/* Return true if error */
        word *error, /* Return error code from FileError enum. type */
        optr document, /* pointer to document object */
        FileHandle file); /* handle of file opened */</PRE>
<P>
The GenDocumentGroup object sends this message to its output when the user tries to open a document with a lower major protocol number than the document control. Applications respond to the message by making any changes to the document necessary to make it compatible with the application. The application should also change the document's protocol numbers. If the application can't use the document, it should return <EM>
true</EM>
 and put an error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.) With an error, the document control will close the document unchanged. If the application successfully updates the document, it should return zero and set <EM>
*error</EM>
 to zero.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class)</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_d.htm_IX_MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT">
 </A>
MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT(
        word *	error); /* Return error code from FileError type */</PRE>
<P>
The document object sends this message when the user tries to open a document with a lower major protocol number than the document control. Applications respond to this message by making any changes to the document necessary to make it compatible with the application. The application should also change the document's protocol numbers. If the application can't use the document, it should return <EM>
true</EM>
 and put an error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.) With an error, the document control will close the document unchanged. If the application successfully updates the document, it should return zero and set <EM>
*error</EM>
 to zero.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>

</DL>
<HR>
<A NAME="Documents_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.2 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
Multiple Document Model</H3>
<P>
The Object model of document control makes it easy to manage several documents at once. Effectively, each document object acts as a special-purpose application dedicated to handling one file. The display control lets the user change documents at will. The document control and display control take care of most of the nuts and bolts of file switching, so the application doesn't have to worry about them.</P>

<H4 CLASS="HeadingC">
Subclassing GenDocumentClass</H4>
<P>
Under the object model of document control, a document's functionality is implemented as methods in the document class. Much of the switching between documents is thus transparent to the application. When the target changes, all user actions will result in messages being sent to the new target document; whenever a document gets a message, it knows the message pertains to itself, not some other document (and thus knows that it is the target document).</P>
<P>
In order to implement this functionality, the application must declare a subclass of <CODE>
GenDocumentClass</CODE>
. This subclass will have its own methods for application-handled messages.</P>


<H4 CLASS="HeadingC">
Using the Display Group</H4>
<P>
The simplest way to manage multiple documents is to use the display control. The display control lets the user change documents transparently to the application. In order to do this, the application must define a resource of objects which should be copied each time a document is opened or created. The GenDocumentGroup object's <CODE>
GDGI_genDisplay</CODE>
 attribute should be set to point to a GenDisplay object in that resource; the GenDisplay should be set &quot;not usable&quot; and should be the head of a tree of objects. Also, the application should define an object of <CODE>
GenDisplayGroupClass</CODE>
, and the GenDocumentGroup's <CODE>
GDGI_genDisplayGroup</CODE>
 attribute should be set to point to it. The display control will then automatically switch displays whenever the user chooses an entry from the display control.</P>

<HR>
<A NAME="Documents_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.3 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
<A NAME="Documents_f.htm_71063">
 </A>
Working with DOS files</H3>
<PRE>MSG_META_DOC_OUTPUT_PHYSICAL_SAVE, MSG_GEN_DOCUMENT_PHYSICAL_SAVE, MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE, MSG_GEN_DOCUMENT_PHYSICAL_UPDATE, MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE, MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE, MSG_META_DOC_OUTPUT_PHYSICAL_REVERT, MSG_GEN_DOCUMENT_PHYSICAL_REVERT</PRE>
<P>
The document control can be used to handle DOS files. However, there are special issues to be aware of. When you use GEOS Virtual Memory files, the system takes care of swapping sections of the file in and out of memory as needed. You can use high-level commands to mark parts of the file as dirty, and when you need the document saved, only the dirty sections will be copied to the disk. The details of reading from and writing to the disk are transparent to the application.</P>
<P>
When you use DOS files, on the other hand, you have to take care of all of these details yourself. It is usually impractical to keep all of a document in memory at one time, so you have to have some way of managing the data (perhaps by creating a temporary VM file and copying the DOS file into that).</P>
<P>
For this reason, the document control sends out messages when it does many low-level things (such as save files). If the application needs to take special actions, it can define handlers for these messages. Most of these messages can be ignored if you are working with GEOS files. </P>
<P>
If you want to implement &quot;Save As&quot; and &quot;Revert&quot; for DOS files, you will have to do most of it by hand. If you leave &quot;Save As&quot; and &quot;Revert&quot; enabled, the Document Control will do some of the work for you. For example, when the user chooses &quot;Save As&quot;, the Document Control will first present a File Selector, letting the user choose a file name and location. The Document Control will then create the new file. After this it will send out MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE and MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE, passing the handle of the newly-created file. The application is responsible for writing the current version of the document to the new file, and reverting the original file to its last-saved state. The Document Control will automatically close the original file and update all Document Control instance data as necessary.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_META_DOC_OUTPUT_PHYSICAL_SAVE">
 </A>
MSG_META_DOC_OUTPUT_PHYSICAL_SAVE</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_PHYSICAL_SAVE(
        word *		error, 
        optr 		document,
        FileHandle 		file);</PRE>
<P>
If you need to take special steps to save a file, you should have a handler for either this message or <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
. The handler should write the file completely to the disk. If an error occurs, return <EM>
true</EM>
 and write the error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.)</P>
<P>
If, for example, you copy a DOS file into a temporary VM file while you work on it, you would probably respond to this message by copying the data from the temporary file back to the DOS file.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-based applications must handle either this message or <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</CODE>
. Applications which use GEOS data files will generally not intercept this message.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_GEN_DOCUMENT_PHYSICAL_SAVE">
 </A>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_PHYSICAL_SAVE(
        word *	error); 		/* Error code from FileError type */</PRE>
<P>
This message is sent when the user saves a file. If you need to take special steps to save a file, you should have a handler for either this message or <CODE>
MSG_META_DOC_OUTPUT_PHYSICAL_SAVE</CODE>
. The handler should write the file completely to the disk. If an error occurs, return <EM>
true</EM>
 and write the error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.)</P>
<P>
If, for example, you copy a DOS file into a temporary VM file while you work on it, you would probably respond to this message by copying the data from the temporary file back to the DOS file.</P>
<P CLASS="refField">
Source:	The GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-based applications must handle either this message or <CODE>
MSG_META_DOC_OUTPUT_PHYSICAL_SAVE</CODE>
. Applications which use GEOS data files will generally not intercept this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_META_DOC_OUTPUT_PHYSICAL_AUTO_SAVE">
 </A>
MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE(occurred */
        word *		error, 			/* Error code from FileError type */
        optr 		document,			/* Pointer to document object */
        FileHandle 		file);			/* Handle of DOS file */</PRE>
<P>
This message is sent when the file is auto-saved (if this is enabled), and when the document is detached as part of a GEOS shutdown. If you need to take special steps to save a file, you should have a handler for either this message or <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</CODE>
. The handler should write the file completely to the disk. If an error occurs, return <EM>
true</EM>
 and write the error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.)</P>
<P>
If, for example, you copy a DOS file into a temporary VM file while you work on it, you would probably respond to this message by copying the data from the temporary file back to the DOS file.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-based applications which will have auto-save capability must handle either this message or <CODE>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</CODE>
. Applications which use GEOS data files will generally not intercept this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_GEN_DOCUMENT_PHYSICAL_AUTO_SAVE">
 </A>
MSG_GEN_DOCUMENT_PHYSICAL_UPDATE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_PHYSICAL_UPDATE(
        word *	error); 		/* Error code from FileError type */</PRE>
<P>
This message is sent when the file is auto-saved (if this is enabled), and when the document is detached as part of a GEOS shutdown. If you need to take special steps to save a file, you should have a handler for either this message or <CODE>
MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE</CODE>
. The handler should write the file completely to the disk. If an error occurs, return <EM>
true</EM>
 and write the error code in <EM>
*error</EM>
. (File access error codes are members of the <CODE>
FileError</CODE>
 enumerated type, defined in <STRONG CLASS="fileName">
file.h</STRONG>
.)</P>
<P>
If, for example, you copy a DOS file into a temporary VM file while you work on it, you would probably respond to this message by copying the data from the temporary file back to the DOS file.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-based applications which will have auto-save capability must handle either this message or <CODE>
MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE</CODE>
. Applications which use GEOS data files will generally not intercept this message.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE">
 </A>
<A NAME="Documents_f.htm_35277">
 </A>
MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE(
        word *		error,
        optr		document,
        FileHandle		file);</PRE>
<P>
This message is sent when the Document Control is ready to &quot;save-as&quot; a DOS file. The Document Control will have asked the user what the new file should be, and will have created an appropriate file. The handler for this message must write the current version of the document to the new file, and restore the original file to its last-saved state.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	The output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<CODE>
error</CODE>
	A pointer to a word in which an error code should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<CODE>
file</CODE>
</DT><DD>The handle of the newly-opened file. The current version of the document should be saved to this file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if an error occurred.</P>
<DL>
<DT>
<CODE>
*file</CODE>
</DT><DD>A member of the <CODE>
FileError</CODE>
 enumerated type (if an error occurred).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-file applications must intercept this message (or MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE) if they wish to implement save-as/revert functionality. </P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_35277">
 </A>
<A NAME="Documents_f.htm_IX_MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE">
 </A>
MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE(
        word *		error,
        FileHandle		file);</PRE>
<P>
This message is sent when the Document Control is ready to &quot;save-as&quot; a DOS file. The Document Control will have asked the user what the new file should be, and will have created an appropriate file. The handler for this message must write the current version of the document to the new file, and restore the original file to its last-saved state.</P>
<P CLASS="refField">
Source:	A GenDocument.</P>
<P CLASS="refField">
Destination:	The GenDocument object sends this message to itself.</P>
<P CLASS="refField">
Parameters:	<CODE>
error</CODE>
	A pointer to a word in which an error code should be returned.</P>
<DL>
<DT>
<CODE>
file</CODE>
</DT><DD>The handle of the newly-opened file. The current version of the document should be saved to this file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if an error occurred.</P>
<DL>
<DT>
<CODE>
*error</CODE>
</DT><DD>A member of the <CODE>
FileError</CODE>
 enumerated type (if an error occurred).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-file applications must intercept this message (or MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE) if they wish to implement save-as/revert functionality. </P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_META_DOC_OUTPUT_PHYSICAL_REVERT">
 </A>
MSG_META_DOC_OUTPUT_PHYSICAL_REVERT</H6>
<PRE CLASS="syntax">Boolean	MSG_META_DOC_OUTPUT_PHYSICAL_REVERT(
        word *		error,
        optr		document,
        FileHandle		file);</PRE>
<P>
The Document Control sends this message to revert a DOS file to its last-saved state. The handler must restore the file to its condition as of the last time it was saved.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	The output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
document</EM>
</DT><DD><EM>
The optr of the appropriate document object.</EM>
</DD>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-file applications must intercept this message (or MSG_GEN_DOCUMENT_PHYSICAL_REVERT) if they wish to implement save-as/revert functionality. </P>


<H6 CLASS="RefETitle">
<A NAME="Documents_f.htm_IX_MSG_GEN_DOCUMENT_PHYSICAL_REVERT">
 </A>
MSG_GEN_DOCUMENT_PHYSICAL_REVERT</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_PHYSICAL_REVERT(
        word *		error,
        FileHandle		file);</PRE>
<P>
The Document Control sends this message to revert a DOS file to its last-saved state. The handler must restore the file to its condition as of the last time it was saved.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	The output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
error	</EM>
A pointer to a word in which an error should be returned.</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error occurs.</P>
<DL>
<DT>
<EM>
*error</EM>
</DT><DD><CODE>
FileError</CODE>
 code (or zero if there is no error).</DD>
</DL>
<P CLASS="refField">
Interception:	DOS-file applications must intercept this message (or MSG_META_DOC_OUTPUT_PHYSICAL_REVERT) if they wish to implement save-as/revert functionality. </P>

<HR>
<A NAME="Documents_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.4 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
Special-Purpose Messages</H3>
<P>
In addition to the basic messages discussed above, there are messages the document control sends out which do not ordinarily need to be handled. Some of these messages have been discussed above; most of the rest are described here.</P>

<H4 CLASS="HeadingC">
Caching Data in Memory</H4>
<PRE>MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE, MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE, MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE, MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE</PRE>
<P>
Sometimes an application will want to keep frequently-accessed data in memory. For example, if you are managing Virtual Memory files, you may want to copy the map block to a fixed memory block instead of locking the block every time you need to read or change it. This is known as <EM>
caching</EM>
 data.</P>
<P>
If you cache data, you must make sure that the application's version of the data is consistent with the disk file. The document control helps keep track of this. Whenever the file (or the state) is saved, the document control will first send a message instructing the application to write the cache to the file, then it will save the file. Similarly, when the file is opened or GEOS is restarted from state, the document control will send a message instructing the application to reload the cached data from the file.</P>
<P>
There is one special concern. The user cannot save a file unless it has been marked dirty; also, the document control does not send <CODE>
MSG_..._WRITE_CACHED_DATA_TO_FILE</CODE>
 to documents which are not dirty. Therefore, if you change the data cache without actually altering the file, you should send a <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY</CODE>
 to the GenDocumentGroup.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE">
 </A>
MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE(
        optr 		document,			/* optr of document object */
        FileHandle 		file);			/* FileHandle of associated file */</PRE>
<P>
The GenDocumentGroup sends this message when the document needs to read cached data. In particular, it sends this when a document is opened, when a document is reverted to its last-saved state, and when a document is re-opened as GEOS restores from state. If the application maintains a data cache, it should read the data from the file at this point. If the document does not cache data, it can ignore this message.</P>
<P>
Note that if the document control notices that the file has changed on disk, it will not send this message; it will, however, send a <CODE>
MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED</CODE>
. The handler for that message should reread the cache or call the handler for this message.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE">
 </A>
MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_READ_CACHED_DATA_FROM_FILE();</PRE>
<P>
The document object<CODE>
 </CODE>
sends this message to itself when the document needs to read cached data. In particular, it sends this when a document is opened, when a document is reverted to its last-saved state, and when a document is re-opened as GEOS restores from state. If the application maintains a data cache, it should read the data from the file at this point. If the document does not cache data, it can ignore this message.</P>
<P>
Note that if the document control notices that the file has changed on disk, it will not send this message; it will, however, send a <CODE>
MSG_GEN_DOCUMENT_DOCUMENT_HAS_CHANGED</CODE>
. The handler for that message should reread the cache or call the handler for this message.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE">
 </A>
MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE(
        optr 		document,			/* optr of document object */
        FileHandle 		file);			/* FileHandle of associated file */</PRE>
<P>
The GenDocumentGroup object sends this message when the document needs to write cached data back to the file. In particular, it sends this message just before a document is saved, auto-saved, or &quot;Saved As,&quot; and before the document is closed as GEOS shuts down. The document should write its cached data back to the file. If the document does not cache data, it can ignore this message.</P>
<P CLASS="refField">
Warnings:	This message will not be sent if the document is clean. Therefore, if you change the data cache without changing the file, you should send a <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY_BY_FILE</CODE>
 to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object)</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE">
 </A>
MSG_GEN_DOCUMENT_WRITE_CACHED_DATA_TO_FILE</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE();</PRE>
<P>
The document object sends this message to itself when the document needs to write cached data back to the file. In particular, it sends this message just before a document is saved, auto-saved, or &quot;Saved As,&quot; and before the document is closed as GEOS shuts down. The document should write its cached data back to the file. If the document does not cache data, it can ignore this message.</P>
<P CLASS="refField">
Warnings:	This message will not be sent if the document is clean. Therefore, if you change the data cache without changing the file, you should send a <CODE>
MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY_BY_FILE</CODE>
 to the GenDocumentGroup object.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>



<H4 CLASS="HeadingC">
Other Messages To Know About</H4>
<P>
There are a few other messages which are worth knowing about. These messages alert the application to special situations. Most applications can ignore these messages; however, for a few, these messages should be handled.</P>

<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED">
 </A>
MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED(
        optr 		document,			/* optr of document object */
        FileHandle 		file);			/* FileHandle of associated file */</PRE>
<P>
The GenDocumentGroup object sends this message when a &quot;Save As&quot; operation has been successfully completed.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED">
 </A>
MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED();</PRE>
<P>
The document object sends this message to itself when a &quot;Save As&quot; operation has been successfully completed. </P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_META_DOC_OUTPUT_HAS_CHANGED">
 </A>
<A NAME="Documents_10.htm_59034">
 </A>
MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED</H6>
<PRE CLASS="syntax">void	MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED(
        optr 		document,			/* optr of document object */
        FileHandle 		file);			/* FileHandle of associated file */</PRE>
<P>
If the GDGA_AUTOMATIC_CHANGE_NOTIFICATION attribute of the GenDocumentGroup object is set to on, a timer will periodically check to see if any open documents have been changed by another application. If they have, the GenDocumentGroup object will send this message out. The application should respond by redisplaying the data on the screen and rereading any cached data from the file.</P>
<P CLASS="refField">
Source:	The GenDocumentGroup object.</P>
<P CLASS="refField">
Destination:	Output of GenDocumentGroup (usually the Process object).</P>
<P CLASS="refField">
Parameters:	<EM>
document</EM>
	<EM>
The optr of the appropriate document object.</EM>
</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>The FileHandle of the appropriate file.</DD>
</DL>
<P CLASS="refField">
Interception:	You must write a handler for this message in whatever class will be receiving it (usually the process class).</P>


<H6 CLASS="RefETitle">
<A NAME="Documents_10.htm_IX_MSG_GEN_DOCUMENT_DOCUMENT_HAS_CHANGED">
 </A>
<A NAME="Documents_10.htm_98137">
 </A>
MSG_GEN_DOCUMENT_DOCUMENT_HAS_CHANGED</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_DOCUMENT_HAS_CHANGED();</PRE>
<P>
If the GDGA_AUTOMATIC_CHANGE_NOTIFICATION attribute of the GenDocumentGroup object is set to on, a timer will periodically check to see if any open documents have been changed by another application. If they have, the document object will send this message out. The application should respond by redisplaying the data on the screen and rereading any cached data from the file.</P>
<P CLASS="refField">
Source:	A GenDocument object.</P>
<P CLASS="refField">
Destination:	The document object sends this message to itself.</P>


<HR>
<A NAME="Documents_11.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.5 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
Forcing Actions</H3>
<PRE>MSG_GEN_DOCUMENT_CONTROL_DISPLAY_DIALOG, MSG_GEN_DOCUMENT_CONTROL_INITIATE_NEW_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_USE_TEMPLATE_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_USE_TEMPLATE_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_IMPORT_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_TEMPLATE_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_MOVE_TO_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_COPY_TO_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_EXPORT_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_TYPE_DOC, MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_PASSWORD_DOC</PRE>
<P>
If you wish, you can force the document control to take certain actions as if the user had requested them. You do this by sending the message which would ordinarily trigger such an action. For example, when the user selects the &quot;save&quot; trigger, that trigger sends the message MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_DOC to the Document Control object. If you wish, you can force a save by sending this message manually; the document control will behave as if the user had selected that action.</P>

<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_DISPLAY_DIALOG</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_DISPLAY_DIALOG();</PRE>
<P>
This message forces the document control to display the opening &quot;New/Open&quot; dialog box, as if the user had selected the &quot;New/Open&quot; trigger on the File menu.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_NEW_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_NEW_DOC();</PRE>
<P>
This message forces the document control to create a new file, exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_USE_TEMPLATE_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_USE_TEMPLATE_DOC();</PRE>
<P>
This message forces the document control to create a new file from a template (bringing up an appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC();</PRE>
<P>
This message forces the document control to open a file (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_IMPORT_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_IMPORT_DOC();</PRE>
<P>
This message forces the document control to import a file (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_DOC();</PRE>
<P>
This message forces the document control to save the active file, exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_DOC();</PRE>
<P>
This message forces the document control to save the active file under a new name (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_TEMPLATE_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_SAVE_AS_TEMPLATE_DOC();</PRE>
<P>
This message forces the document control to save the active file as a template (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_MOVE_TO_DOC</H6>
<PRE CLASS="syntax">void MSG_GEN_DOCUMENT_CONTROL_INITIATE_MOVE_TO_DOC();</PRE>
<P>
This message forces the document control to move the active file to a new name and/or location (bringing up the appropriate file selector), exactly as if the user had requested it.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_COPY_TO_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_COPY_TO_DOC();</PRE>
<P>
This message forces the document control to copy the active file to a new name (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_EXPORT_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_EXPORT_DOC();</PRE>
<P>
This message forces the document control to export the active file (bringing up the appropriate file selector), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_TYPE_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_TYPE_DOC();</PRE>
<P>
This message forces the document control to change the type (public, read-only, etc.) of the active file (bringing up the appropriate dialog box), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_PASSWORD_DOC</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CONTROL_INITIATE_SET_PASSWORD_DOC();</PRE>
<P>
This message forces the document control to set the password of the active file (bringing up the appropriate dialog box), exactly as if the user had requested it.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The GenDocumentControl object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted.</P>

<HR>
<A NAME="Documents_12.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Documents</A>: 4.6 <A HREF="#Documents_c.htm">Advanced DC Usage</A>: 
Some Other Internal Messages</H3>
<PRE>DocumentCommonParams, MSG_GEN_DOCUMENT_NEW, MSG_GEN_DOCUMENT_OPEN, MSG_GEN_DOCUMENT_CLOSE, MSG_GEN_DOCUMENT_QUICK_BACKUP, MSG_GEN_DOCUMENT_RECOVER_QUICK_BACKUP, MSG_GEN_DOCUMENT_SAVE, MSG_GEN_DOCUMENT_SAVE_AS, MSG_GEN_DOCUMENT_SAVE_AS_TEMPLATE, MSG_GEN_DOCUMENT_COPY_TO, MSG_GEN_DOCUMENT_REVERT, MSG_GEN_DOCUMENT_EDIT_USER_NOTES, MSG_GEN_DOCUMENT_CHANGE_TYPE, MSG_GEN_DOCUMENT_CHANGE_PASSWORD, MSG_GEN_DOCUMENT_RENAME, MSG_GEN_DOCUMENT_SET_EMPTY, MSG_GEN_DOCUMENT_CLEAR_EMPTY, MSG_GEN_DOCUMENT_SET_DEFAULT, MSG_GEN_DOCUMENT_CLEAR_DEFAULT, MSG_GEN_DOCUMENT_CLOSE_IF_CLEAN_UNNAMED, MSG_GEN_DOCUMENT_SEARCH_FOR_DOC, MSG_GEN_DOCUMENT_TEST_FOR_FILE, MSG_GEN_DOCUMENT_AUTO_SAVE, MSG_GEN_DOCUMENT_UPDATE, MSG_GEN_DOCUMENT_CHECK_FOR_MODIFICATIONS, MSG_GEN_DOCUMENT_CLOSE_FILE, MSG_GEN_DOCUMENT_REOPEN_FILE, MSG_GEN_DOCUMENT_GET_VARIABLE, MSG_GEN_DOCUMENT_REVERT_NO_PROMPT, MSG_GEN_DOCUMENT_FILE_CHANGED_REINITIALIZE_CREATED_UI, MSG_GEN_DOCUMENT_CLOSE_IF_OPEN_FOR_IACP_ONLY, MSG_GEN_DOCUMENT_MOVE_TO</PRE>
<P>
The following messages are for internal use by the Document Control objects only. The GenDocumentControl object sends each of these messages to an appropriate GenDocument object to instruct it to perform a certain action; no intervention by the application is necessary, or appropriate. However, some applications may wish to subclass one or more of these messages, simply to find out when the message is being sent (and thus when a particular action is being performed). Any application which does this must make sure to call the superclass without changing any of the arguments.</P>
<P>
Several of these messages pass, as an argument, a structure of type <CODE>
DocumentCommonParams</CODE>
. This structure contains information about the file associated with the document object. If you intercept any of these messages, you may wish to examine this structure. However, be sure that you do not alter any of its fields. The structure has the following definition:</P>
<PRE><A NAME="Documents_12.htm_16878"> </A>typedef struct {
	FileLongName			DCP_name;</PRE>
<PRE>	DiskHandle			DCP_diskHandle;</PRE>
<PRE>	PathName			DCP_path;</PRE>
<PRE>	GenDocumentAttrs			DCP_docAttrs;</PRE>
<PRE>	DocumentOpenFlags			DCP_flags;</PRE>
<PRE>	IACPConnection			DCP_connection;
} DocumentCommonParams;</PRE>
<DL>
<DT>
DCP<CODE>
_name</CODE>
</DT><DD>The name of the document in question.</DD>
<DT>
DCP<CODE>
_diskHandle</DT><DD>
</CODE>
The dosk handle of the disk (or standard path) containing the document.</DD>
<DT>
DCP<CODE>
_path</CODE>
</DT><DD>The path to the document (relative to the disk handle in DCP<CODE>
_diskHandle</CODE>
).</DD>
<DT>
DCP<CODE>
_docAttrs</DT><DD>
</CODE>
The <CODE>
GenDocumentAttrs</CODE>
 of the document in question.<CODE>
</CODE>
</DD>
<DT>
DCP<CODE>
_flags</CODE>
</DT><DD>The <CODE>
DocumentOpenFlags</CODE>
 of the document in question.<CODE>
</CODE>
</DD>
<DT>
DCP<CODE>
_connection</DT><DD>
</CODE>
If the document is opened for an IACP connection, this field specifies the IACP connection that requestged the document be opened. If the user opened the document directly, this field will be zero. (This field is only set when the structure is passed with MSG_GEN_DOCUMENT_OPEN or MSG_GEN_DOCUMENT_SEARCH_FOR_DOC; otherwise, the field's value is undefined.)</DD>

</DL>
<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_NEW</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_NEW(
        word *			fileOrError,
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_NEW">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to create a new document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
params</CODE>
	A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure. This structure specifies the name and location for the file.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 (i.e., non-zero) if error.</P>
<DL>
<DT>
<CODE>
*fileOrError</CODE>
</DT><DD>If return value is <EM>
false</EM>
, this will be the file handle of the new document. If return value is <EM>
true</EM>
, this will be a member of the <CODE>
FileError</CODE>
 enumerated type.<CODE>
</CODE>
</DD>
</DL>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	The <CODE>
DocumentCommonParams</CODE>
 structure (described on <A HREF="#Documents_12.htm_16878"> typedef struct { FileLongName DCP_name;</A>
).</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_OPEN</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_OPEN(
        word *			fileOrError,
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_OPEN">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to create a new document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
params</CODE>
	A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure. This structure specifies the name and location for the file.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 (i.e., non-zero) if error.</P>
<DL>
<DT>
<CODE>
*fileOrError</CODE>
</DT><DD>If return value is <EM>
false</EM>
, this will be the file handle of the new document. If return value is <EM>
true</EM>
, this will be a member of the <CODE>
FileError</CODE>
 enumerated type.<CODE>
</CODE>
</DD>
</DL>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	The <CODE>
DocumentCommonParams</CODE>
 structure (described on <A HREF="#Documents_12.htm_16878"> typedef struct { FileLongName DCP_name;</A>
).</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLOSE</H6>
<PRE CLASS="syntax">DocQuitStatus 				MSG_GEN_DOCUMENT_CLOSE(
        IACPConnection		connection);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLOSE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to close a document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
IACPConnection </CODE>
	The IACP connection requesting the close (or zero if the close was requested by a user).</P>
<P CLASS="refField">
Return:	A member of the <CODE>
DocQuitStatus</CODE>
 enumerated type (described below).</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	<A NAME="Documents_12.htm_IX_DocQuitStatus">
 </A>
<A NAME="Documents_12.htm_IX_DQS_&ldots;">
 </A>
The return value is a member of the <CODE>
DocQuitStatus</CODE>
 enumerated type. This type has the following members:</P>
<DL>
<DT>
DQS_OK</DT><DD>The documentwas updated and closed successfully.</DD>
<DT>
DQS_CANCEL </DT><DD>The close operation was canceled before it could be completed.</DD>
<DT>
DQS_DELAYED</DT><DD>
The close operation has been delayed.</DD>
<DT>
DQS_SAVE_ERROR</DT><DD>
The handler was unable to update the file to the disk.</DD>


</DL>
<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_QUICK_BACKUP</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_QUICK_BACKUP();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_QUICK_BACKUP">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to make a quick backup of a document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_RECOVER_QUICK_BACKUP</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_RECOVER_QUICK_BACKUP();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_RECOVER_QUICK_BACKUP">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to recover a document from a quick backup.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SAVE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_SAVE();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SAVE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to save a document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	Nothing.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error.<EM>
</EM>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SAVE_AS</H6>
<PRE CLASS="syntax">Boolean MSG_GEN_DOCUMENT_SAVE_AS(
        word *			fileOrError,
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SAVE_AS">
 </A>
The Document Control object sends this message to a Document object to instruct it to &quot;Save As&quot; its document. The <CODE>
DocumentCommonParams</CODE>
 structure specifies the new name and location for the file.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
fileOrError</CODE>
	A pointer to a word-sized variable.</P>
<DL>
<DT>
<CODE>
params</CODE>
</DT><DD>A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure specifying the new name and location for the file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if an error occurred.</P>
<DL>
<DT>
<CODE>
*fileOrError</CODE>
</DT><DD>If the routine returned <EM>
false</EM>
, this contains the file handle of the new file. If it returned <EM>
true</EM>
, this contains a <CODE>
FileError</CODE>
 code.<CODE>
</CODE>
</DD>
</DL>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SAVE_AS_TEMPLATE</H6>
<PRE CLASS="syntax">Boolean MSG_GEN_DOCUMENT_SAVE_AS_TEMPLATE(
        word *			fileOrError,
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SAVE_AS_TEMPLATE">
 </A>
The Document Control object sends this message to a Document object to instruct it to save its document as a template. The <CODE>
DocumentCommonParams</CODE>
 structure specifies the name and location for the template.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
fileOrError</CODE>
	A pointer to a word-sized variable.</P>
<DL>
<DT>
<CODE>
params</CODE>
</DT><DD>A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure specifying the new name and location for the file.</DD>
</DL>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if an error occurred.</P>
<DL>
<DT>
<CODE>
*fileOrError</CODE>
</DT><DD>If the routine returned <EM>
false</EM>
, this contains the file handle of the new file. If it returned <EM>
true</EM>
, this contains a <CODE>
FileError</CODE>
 code.<CODE>
</CODE>
</DD>
</DL>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_COPY_TO</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_COPY_TO(
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_COPY_TO">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to copy the current document to a new location, while keeping the original copy open. The <CODE>
DocumentCommonParams</CODE>
 structure specifies the name and location for the copy.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
params</CODE>
	A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure specifying the new name and location for the file.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if error.<EM>
</EM>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_REVERT()</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_REVERT();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_REVERT">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to &quot;Revert&quot; its document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
true</CODE>
 if error.<CODE>
</CODE>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_EDIT_USER_NOTES</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_EDIT_USER_NOTES();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_EDIT_USER_NOTES">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to perform an &quot;Edit User Notes&quot; operation.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CHANGE_TYPE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CHANGE_TYPE(
        GenDocumentType		type);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CHANGE_TYPE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to change its document's type to the type specified in <CODE>
type</CODE>
.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
type</CODE>
	The new type of the document.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	A member of the <CODE>
GenDocumentType</CODE>
 enumerated type. This type has the following members:</P>
<DL>
<DT>
GDT_NORMAL</DT><DD>
The document is a normal document.</DD>
<DT>
GDT_READ_ONLY</DT><DD>
The document is available for read-only access.</DD>
<DT>
GDT_TEMPLATE</DT><DD>
The document is a template.</DD>
<DT>
GDT_READ_ONLY_TEMPLATE</DT><DD>
The document is a template, and is opened read-only.</DD>
<DT>
GDT_PUBLIC </DT><DD>The document is &quot;public&quot; (and thus is, by default, opened read-only).</DD>
<DT>
GDT_MULTI_USER</DT><DD>
The document can be read by several users at once.</DD>


</DL>
<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CHANGE_PASSWORD</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CHANGE_PASSWORD(
        char *		password);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CHANGE_PASSWORD">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to change the document's password.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
password</CODE>
	A pointer to a null-terminated string containing the document's new password.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_RENAME</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_RENAME();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_RENAME">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to rename its document.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SET_EMPTY</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_SET_EMPTY();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SET_EMPTY">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to make its document the new model for &quot;empty&quot; documents.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLEAR_EMPTY</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CLEAR_EMPTY();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLEAR_EMPTY">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to inform it that there is no longer a file to serve as the model for &quot;empty&quot; documents.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SET_DEFAULT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_SET_DEFAULT();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SET_DEFAULT">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to make its document the default document to open on startup.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLEAR_EMPTY</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CLEAR_EMPTY();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLEAR_EMPTY">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to inform it that there is no longer a default file to open on startup.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLOSE_IF_CLEAN_UNNAMED</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CLOSE_IF_CLEAN_UNNAMED();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLOSE_IF_CLEAN_UNNAMED">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to close its document if the document has not been changed or saved since it was created.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_SEARCH_FOR_DOC</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_SEARCH_FOR_DOC(
        DocumentCommonParams *			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_SEARCH_FOR_DOC">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to check if it has the specified document open, and bring it to the front if that document exists.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
params</CODE>
	A <CODE>
DocumentCommonParams</CODE>
 structure specifying the document sought. The <CODE>
DCP_connection</CODE>
 field specifies the IACP connection looking for that document (or zero if the request came directly from the user).</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if the Document object has that document open.<EM>
</EM>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	The <CODE>
DocumentCommonParams</CODE>
 structure (described on <A HREF="#Documents_12.htm_16878"> typedef struct { FileLongName DCP_name;</A>
).</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_TEST_FOR_FILE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_TEST_FOR_FILE(
        FileHandle		file,
        optr		*docFound);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_TEST_FOR_FILE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to ask if that Document has the file with the specified handle open. If it does, the GenDocument is to write its optr to the passed variable.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
file</CODE>
	The FileHandle of the file being sought.</P>
<DL>
<DT>
<CODE>
docFound</CODE>
</DT><DD>A pointer to an optr-sized variable.</DD>
</DL>
<P CLASS="refField">
Return:	<CODE>
true</CODE>
 if the Document has the specified file open.</P>
<DL>
<DT>
<CODE>
*docFound</CODE>
</DT><DD>The optr of the Document object, <EM>
if</EM>
 the Document has the specified file open; otherwise, this variable is left unchanged.<EM>
</EM>
</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_AUTO_SAVE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_AUTO_SAVE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to </P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_UPDATE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_UPDATE(
        word *		error);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_UPDATE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to write changes in its document to the disk.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
error</CODE>
	A pointer to a word-sized variable.</P>
<P CLASS="refField">
Return:	<CODE>
true </CODE>
if an error occurred.</P>
<DL>
<DT>
<CODE>
*error</CODE>
 </DT><DD>A <CODE>
FileError</CODE>
 code, or zero if no error occurred.<CODE>
</CODE>
</DD>
</DL>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CHECK_FOR_MODIFICATIONS</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CHECK_FOR_MODIFICATIONS();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CHECK_FOR_MODIFICATIONS">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to check if its file has been modified on the disk.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLOSE_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CLOSE_FILE(
        IACPConnection		connection);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLOSE_FILE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to close its file, <EM>
without</EM>
 removing the document object itself. (This is done, e.g., when the Document performs a &quot;Move To&quot;; it must close the file, move it, and reopen it.)</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
connection</CODE>
	The IACP connection requesting that the file be closed, or zero if the request came directly from the user.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_REOPEN_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_REOPEN_FILE();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_REOPEN_FILE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to reopen its file (after having handled a MSG_GEN_DOCUMENT_CLOSE_FILE).</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_GET_VARIABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_GET_VARIABLE(
        VisTextGraphic *		graphic,
        char *		buffer);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_GET_VARIABLE">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to get information about a variable graphic. (This message is used by the text object to implement variable graphics.)</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
graphic</CODE>
	A pointer to a <CODE>
VisTextGraphic</CODE>
 structure.</P>
<DL>
<DT>
<CODE>
char</CODE>
</DT><DD>A pointer to a 100-byte buffer.</DD>
</DL>
<P CLASS="refField">
Return:	Both buffers filled in appropriately.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_REVERT_NO_PROMPT</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_REVERT_NO_PROMPT();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_REVERT_NO_PROMPT">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to &quot;Revert&quot; its document without prompting the user.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
true</CODE>
 if error.<CODE>
</CODE>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_FILE_CHANGED_REINITIALIZE_CREATED_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_FILE_CHANGED_REINITIALIZE_CREATED_UI();</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_FILE_CHANGED_REINITIALIZE_CREATED_UI">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to inform it that its associated file has changed, and it should reinitialize its UI and reload any cached data.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_CLOSE_IF_OPEN_FOR_IACP_ONLY</H6>
<PRE CLASS="syntax">void	MSG_GEN_DOCUMENT_CLOSE_IF_OPEN_FOR_IACP_ONLY()</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_CLOSE_IF_OPEN_FOR_IACP_ONLY">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to close its document if the document is open only for an application-mode IACP connection.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>


<H6 CLASS="RefETitle">
MSG_GEN_DOCUMENT_MOVE_TO</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_DOCUMENT_MOVE_TO(
        DocumentCommonParams			params);</PRE>
<P>
<A NAME="Documents_12.htm_IX_MSG_GEN_DOCUMENT_MOVE_TO">
 </A>
The GenDocumentControl object sends this message to the GenDocument object to instruct it to perform a &quot;Move To&quot; operation. The <CODE>
DocumentCommonParams</CODE>
 structure specifies the new name and location for the file.</P>
<P CLASS="refField">
Source:	The GenDocumentControl object.</P>
<P CLASS="refField">
Destination:	A GenDocument object.</P>
<P CLASS="refField">
Parameters:	<CODE>
params</CODE>
	A pointer to a <CODE>
DocumentCommonParams</CODE>
 structure. This structure specifies the new name and location for the file.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 (i.e. non-zero) if error.<EM>
</EM>
</P>
<P CLASS="refField">
Interception:	This message is not normally intercepted. If you intercept it, be sure to send the message to the superclass with arguments unchanged.</P>
<P CLASS="refField">
Structures:	The <CODE>
DocumentCommonParams</CODE>
 structure (described on <A HREF="#Documents_12.htm_16878"> typedef struct { FileLongName DCP_name;</A>
).</P>

<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
