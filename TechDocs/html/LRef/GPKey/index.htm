<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: index.htm,v 1.4 97/12/15 14:13:56 nfiedler Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE> Parameters File Keywords</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="../../index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<H1 CLASS="chapterTitle">
<A NAME="97933">
 </A>
Parameters File Keywords<A NAME="IX_.gp files:syntax">
 </A>
<DIV>
</DIV>
</H1>
<DIV>
<H1 CLASS="refHeading">
<A NAME="34434">
 </A>
appobj</H1>
<PRE CLASS="syntax"><STRONG>appobj</STRONG>	&lt;<EM>name</EM>&gt;</PRE>
<P>
<A NAME="IX_GenApplication">
 </A>
<A NAME="IX_appobj .gp file keyword">
 </A>
The <CODE>
appobj</CODE>
 field indicates the name of the application object. All geodes with <CODE>
appl</CODE>
 set under <CODE>
type</CODE>
 (see above) must have an <CODE>
appobj</CODE>
 entry. The <CODE>
name</CODE>
 argument should be the name of the object of <CODE>
GenApplicationClass</CODE>
 specified in the application's <STRONG CLASS="fileName">
.goc</STRONG>
 file.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
class</H1>
<PRE CLASS="syntax"><STRONG>class</STRONG>	&lt;<EM>name</EM>&gt;</PRE>
<P>
<A NAME="IX_Process:specifying in .gp file">
 </A>
<A NAME="IX_class .gp file keyword">
 </A>
The <CODE>
class</CODE>
 field specifies the name of the object class to be bound to the geode's process thread. This field has significance only if <STRONG CLASS="fileName">
process</STRONG>
 is specified in the geode's <CODE>
type</CODE>
 field (see below). This should be the same as the <CODE>
ProcessClass</CODE>
 object designated in the <STRONG CLASS="fileName">
.goc</STRONG>
 file (see the Hello World sample for an example of this connection). Note that this class binding will only be for the geode's first (primary) thread.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
driver</H1>
<PRE CLASS="syntax"><STRONG>driver</STRONG>	&lt;<EM>name</EM>&gt; [noload]</PRE>
<P>
<A NAME="IX_driver .gp file keyword">
 </A>
<A NAME="IX_Drivers:type in .gp files">
 </A>
This field specifies another driver that is used by this geode. The <A NAME="IX_noload:flag in parameter files">
 </A>
<CODE>
noload</CODE>
 flag indicates that the used driver does not need to be loaded when the geode is first launched. Most applications and libraries will not use exported routines from drivers, so few geodes will use this field. (Notable exceptions are those geodes that access serial and parallel ports--those geodes will include the serial or parallel driver.)</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
else</H1>
<PRE CLASS="syntax"><STRONG>ifdef</STRONG> <EM>&lt;VARIABLE&gt;</EM>
        <EM>&lt;glue statements&gt;</EM>
<STRONG>else</STRONG>
        <EM>&lt;other glue statements&gt;</EM>
<STRONG>endif</STRONG></PRE>
<P>
<A NAME="IX_else .gp file keyword">
 </A>
The <CODE>
else</CODE>
 statement is part of Glue's conditional linking support. If the variable named in the <CODE>
ifdef</CODE>
 statement is false, then any commands between an <CODE>
else</CODE>
 and an <CODE>
endif</CODE>
 will be used when linking.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
endif</H1>
<PRE CLASS="syntax"><STRONG>ifdef</STRONG> <EM>&lt;VARIABLE&gt;</EM>
        <EM>&lt;glue statements&gt;</EM>
<STRONG>else</STRONG>
        <EM>&lt;other glue statements&gt;</EM>
<STRONG>endif</STRONG></PRE>
<P>
<A NAME="IX_endif .gp file keyword">
 </A>
The <CODE>
endif</CODE>
 statement is part of Glue's conditional linking support. The endif keyword signals the end of the conditional commands which were begun with a previous <CODE>
ifdef</CODE>
 command.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
entry</H1>
<PRE CLASS="syntax"><STRONG>entry</STRONG>	&lt;<EM>name</EM>&gt;</PRE>
<P>
<A NAME="IX_entry .gp file field">
 </A>
<A NAME="IX_Libraries:entry points">
 </A>
This field is used by library geodes. The <CODE>
name</CODE>
 argument is the name of the library routine to be called by the kernel when the library is loaded or unloaded and when a program using the library is loaded or unloaded.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
exempt</H1>
<PRE CLASS="syntax">exempt	&lt;library-name&gt;</PRE>
<P>
<A NAME="IX_exempt .gp file keyword">
 </A>
If you wish to exempt a certain library from Glue's platform checking, call it out with the exempt keyword. Glue will not complain if you then use parts of the library not normally available with platforms named in your <CODE>
platform</CODE>
 statement.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
export</H1>
<PRE CLASS="syntax"><STRONG>export</STRONG>	&lt;<EM>name</EM>&gt; [as &lt;<EM>name2</EM>&gt;]</PRE>
<P>
<A NAME="IX_Classes:exporting">
 </A>
<A NAME="IX_Routines:exporting">
 </A>
<A NAME="IX_export .gp file keyword">
 </A>
This field identifies routines usable by geodes other than the one being compiled; these routines are &quot;exported&quot; for use by other programs. Both forms create entry point symbols for the routines. The first <CODE>
name</CODE>
 argument must be the actual name of the routine. If the second, optional, <CODE>
name2</CODE>
 argument is included, then other programs will call that routine using the second name rather than the original. This allows a routine to have a different global name than that used by its creator geode.</P>
<P>
This field is also used to export classes defined in a <STRONG CLASS="fileName">
.goc</STRONG>
 or <STRONG CLASS="fileName">
.goh</STRONG>
 file. See the Benoit sample application for an example.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
heapspace</H1>
<PRE CLASS="syntax">heapspace <EM>&lt;space&gt;</EM></PRE>
<P>
<A NAME="IX_heapspace .gp file keyword">
 </A>
Specify the memory requirements for the geode--how much space it requires on the heap. This parameter is required for geodes to run efficiently on certain platforms, such as the Casio Z-7000. To find out what number to enter in this field, run your geode on the device in question with Swat attached. Use the &quot;heapspace&quot; Swat command to find out how much memory your geode requires. For more information about the &quot;heapspace&quot; Swat command, see its entry in the Swat commands reference section of the Tools manual.</P>
<P>
The space may be specified in paragraphs, or in k of memory:</P>
<PRE>heapspace 250
heapspace 4k</PRE>
</DIV>
<DIV>
<H1 CLASS="refHeading">
<A NAME="89912">
 </A>
ifdef</H1>
<PRE CLASS="syntax"><STRONG>ifdef</STRONG> <EM>&lt;VARIABLE&gt;</EM>
        <EM>&lt;glue statements&gt;</EM>
<STRONG>endif
</STRONG></PRE>
<PRE CLASS="syntax"><STRONG>ifdef</STRONG> <EM>&lt;VARIABLE&gt;</EM>
        <EM>&lt;glue statements&gt;</EM>
<STRONG>else</STRONG>
        <EM>&lt;other glue statements&gt;</EM>
<STRONG>endif</STRONG></PRE>
<P>
<A NAME="IX_ifdef .gp file keyword">
 </A>
The <CODE>
ifdef</CODE>
 keyword is used to implement conditional linking. If the named <EM>VARIABLE</EM> is defined (via the -D command line argument to Glue--see <A HREF="../../Tools/Tools/TTools_5.htm">the Using Tools chapter</A>
 to find out how), then the commands between the <CODE>
ifdef</CODE>
 and the next <CODE>
else</CODE>
 or <CODE>
endif</CODE>
 command will be used when linking. Otherwise, they will be ignored. If the <EM>VARIABLE</EM> is not defined, then any commands appearing between the optional <CODE>
else</CODE>
 keyword and the <CODE>
endif</CODE>
 keyword will be used.</P>
<P>
It is possible to nest these statements:</P>
<PRE>ifdef FOO
	ifdef BAR
		library foobar
	else
		library fooonly
	endif
else
	ifdef BAR
		library baronly
	else
		library nada</PRE>
<PRE>        endif</PRE>
<PRE>endif</PRE>
</DIV>
<DIV>
<H1 CLASS="refHeading">
incminor</H1>
<PRE CLASS="syntax">incminor [&lt;name&gt;]</PRE>
<P>
<A NAME="IX_incminor .gp file keyword">
 </A>
The <CODE>
incminor</CODE>
 directive is used at the end of a library's <STRONG CLASS="fileName">
.gp</STRONG>
 file before new routines are added (after a release of the library has already been made). After this release, new <CODE>
export</CODE>
 and <CODE>
publish</CODE>
 directives will be put after this incminor directive. The <CODE>
incminor</CODE>
 directive causes two things: First, the geode's minor protocol number gets incremented by one. Second, any geode that uses your library will depend only on the higher minor protocol number if it actually uses one or more of the entry points exported after the <CODE>
incminor</CODE>
 directive.</P>
<P>
Any number of incminor directives may be used in a given <STRONG CLASS="fileName">
.gp</STRONG>
 file. The major and the base minor numbers still come from a <STRONG CLASS="fileName">
.rev</STRONG>
 file, if one exists.</P>
<P>
The <EM>name</EM> argument is optional; it may be used in conjunction with the protominor compiler directive. Glue will know that the structures marked with the protominor label should be associated with the revision represented by the incminor directive.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
library</H1>
<PRE CLASS="syntax"><STRONG>library</STRONG>	&lt;<EM>name</EM>&gt; [noload]</PRE>
<P>
<A NAME="IX_library .gp file keyword">
 </A>
<A NAME="IX_Libraries">
 </A>
This field specifies another library that is used by this geode. The <A NAME="IX_noload:flag in parameter files">
 </A>
<CODE>
noload</CODE>
 flag indicates that the used library does not need to be loaded when the geode is first launched (though symbolic information will be loaded in any case). Note that every geode must have the line</P>
<PRE>library geos</PRE>
<P>
included in the <STRONG CLASS="fileName">
.gp</STRONG>
 file. Most will also have the following line:</P>
<PRE>library ui</PRE>
<P>
Any number of used libraries may be specified.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
load</H1>
<PRE CLASS="syntax"><STRONG>load</STRONG>	&lt;<EM>name</EM>&gt; [&quot;&lt;<EM>class</EM>&gt;&quot;] as [&lt;<EM>name2</EM>&gt;] [&lt;<EM>align</EM>&gt;] [&lt;<EM>combine</EM>&gt;]\
 [&quot;&lt;<EM>class2</EM>&gt;&quot;]</PRE>
<P>
<A NAME="IX_load .gp file keyword">
 </A>
The <CODE>
load</CODE>
 field is used when you want to alter the way a segment is linked for your geode. This is especially useful, for example, when integrating another company's runtime routines into your application or library; their segments may correspond to specifications other than yours.</P>
<P>
Every segment read in has a given name, class, alignment, and combination type. These are described below (the <CODE>
load</CODE>
 parameters appear after):</P>
<DL>
<DT>
<STRONG>
name</STRONG>
</DT><DD>This is the actual name of the segment being loaded in. Segments with the same name are treated as one continuous segment.</DD>
<DT>
<STRONG>
class</STRONG>
</DT><DD>Segments with the same class name are always loaded together into memory regardless of their order in the geode's source code. Class names in the load directive must always be enclosed in quotation marks.</DD>
<DT>
<STRONG>
align</STRONG>
</DT><DD>This specifies the alignment type of the segment--on what type of address the segment can start. Possible alignment settings are byte, word, double word, paragraph, and page.</DD>
<DT>
<STRONG>
combine</STRONG>
</DT><DD>Segments with the same name may appear in different code modules. The <CODE>
combine</CODE>
 parameter specifies how these segments are to be combined when loaded. The combine type may be one of the following (see your assembly reference manual for more information): <A NAME="IX_RESOURCE:load type in .gp file">
 </A>
<A NAME="IX_STACK:load type in .gp file">
 </A>
<A NAME="IX_PUBLIC:load type in .gp file">
 </A>
<A NAME="IX_PRIVATE:load type in .gp file">
 </A>
<A NAME="IX_COMMON:load type in .gp file">
 </A>
COMMON, PRIVATE, PUBLIC, STACK, or RESOURCE.</DD>
</DL>
<P>
The parameters for load are listed below. Only the first is necessary, to inform Glue which segment is to undergo the alterations. For an example of using the load statement, see below.</P>
<DL>
<DT>
<STRONG>
name</STRONG>
</DT><DD>This represents the actual original name of the segment. It is a necessary parameter so Glue knows which segment's linkage is to be altered.</DD>
<DT>
<STRONG>
class</STRONG>
</DT><DD>This is the original class name of the segment. It must be enclosed in quotation marks if given. If you do not need to change the class, this parameter is unnecessary.</DD>
<DT>
<STRONG>
name2</STRONG>
</DT><DD>This is the new name of the segment, if any.</DD>
<DT>
<STRONG>
align</STRONG>
</DT><DD>This specifies the new align type of the segment, if any.</DD>
<DT>
<STRONG>
combine</STRONG>
</DT><DD>This specifies the new combine type of the segment, if any.</DD>
<DT>
<STRONG>
class2</STRONG>
</DT><DD>This specifies a new class name for the segment, if any is required. If you do not need to change the class, this parameter is unnecessary. The new class must be in quotation marks.</DD>
</DL>
<P>
Examples:</P>
<PRE>load _NAME_ &quot;CODE&quot; as CODE word public</PRE>
<PRE>load _NAME_ &quot;CODE&quot; as DATASEG para common &quot;DATA&quot;<A NAME="IX_Parameters files"> </A></PRE>
</DIV>
<DIV>
<H1 CLASS="refHeading">
longname</H1>
<PRE CLASS="syntax"><STRONG>longname</STRONG> <STRONG>&quot;</STRONG>&lt;<EM>string</EM>&gt;<STRONG>&quot;</STRONG></PRE>
<P>
<A NAME="IX_longname .gp file keyword">
 </A>
<A NAME="IX_Files:names:application name">
 </A>
The <CODE>
longname</CODE>
 field designates a 32-character name for the geode. This name will be displayed with the geode's icon by GeoManager; all geodes should be given a long name.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
name</H1>
<PRE CLASS="syntax"><STRONG>name</STRONG>	&lt;<EM>pname</EM>&gt;<STRONG>.</STRONG>&lt;<EM>ext</EM>&gt;</PRE>
<P>
<A NAME="IX_name .gp file keyword">
 </A>
<A NAME="IX_Geodes:name in .gp file">
 </A>
<A NAME="IX_Patients:name">
 </A>
The <CODE>
name</CODE>
 field in the parameters file gives the geode a permanent name which will be used by both the Glue linker and the Swat debugger. Every geode must have a permanent name. Note that the <CODE>
pname</CODE>
 argument must be no more than eight characters, and the <CODE>
ext</CODE>
 argument must be no more than four. Additionally, the <CODE>
ext</CODE>
 argument may not be &quot;appl,&quot; as that is reserved.</P>
<P>
When Glue is linking an error-checking geode, it drops the fourth character of <CODE>
ext</CODE>
 and adds &quot;ec&quot; to the end of <CODE>
pname</CODE>
.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
nosort</H1>
<PRE CLASS="syntax"><CODE>nosort</CODE></PRE>
<P>
<A NAME="IX_nosort .gp file keyword">
 </A>
This keyword should appear before the list of resources. Normally glue will sort the geode's resources to optimize their arrangement. This keyword turns off that sorting. If you will generate .GYM (generic symbol) files for your geode, you should use the nosort option, as it will be important that all versions of your geode order their resources in the same way. If you won't generate .GYM files, you probably don't want to use this option.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
platform</H1>
<PRE CLASS="syntax">platform &lt;<EM>name</EM>&gt;</PRE>
<P>
<A NAME="IX_platform .gp file keyword">
 </A>
The platform directive specifies that the Geode is compatible with the named system. This gives a sign of how backwards-compatible the application is. If multiple platforms are specified, Glue will make sure that the major protocol numbers for each of the libraries it finds within the platforms match. Having done that, it will use the smallest minor protocol number it can find for each library to ensure compatibility across all platforms.</P>
<P>
If a reference is ever made to an entry point in a library that would cause the executable to depend upon a later version of the library than specified in the platform file, glue will complain. For example, if the specified platoform used GrObj version 534.1 and glue found a reference to an entry point that didn't exist until GrObj 534.3 (ie., an entry point exported following 3 'incminor's in grobj.gp), glue will spit out an error message like: </P>
<PRE>error: file &quot;somegeode.gp&quot;, line 59: Usage of NewGrObjRoutine requires grobj minor protocol 3, but platform files only allow minor protocol 1</PRE>
<P>
If the new routine happens to be a &quot;published&quot; routine, glue will copy it into the geode in an effort to avoid the error.</P>
<P>
Common platforms include:</P>
<DL>
<DT>
<STRONG>
zoomer</STRONG>
</DT><DD>Casio Z-7000, Tandy Z-PDA</DD>
<DT>
<STRONG>
bullet</STRONG>
</DT><DD>Sharp PT-9000</DD>
<DT>
<STRONG>
geos20</STRONG>
</DT><DD>GEOS 2.0 Desktop environment</DD>
</DL>
<P>
For a list of all predefined platforms, go to the the Include directory of your SDK installation and list all *.PLT files.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
publish</H1>
<PRE CLASS="syntax">publish &lt;name&gt;</PRE>
<P>
<A NAME="IX_publish .gp file keyword">
 </A>
Normally, if a geode is required to run (via platform specifications) with a version of a library that doesn't contain one of the entry points required by the geode, glue will notify the user of the inconsistency, and the link will fail. However, if that entry point happens to be a published routine, glue will actually copy the routine into the geode and switch the call over to the newly copied routine to remove the dependency on the library routine. Glue does this by copying any routines marked &quot;publish&quot; in a library's .gp file into the .ldf file, then copying them out into whatever other geodes needs when those geodes are linked. Routines are marked &quot;publish&quot; by replacing the word &quot;export&quot; with the word &quot;publish&quot; in the .gp file, like so:</P>
<PRE>publish PublishedRoutine</PRE>
<P>
The published routines appear in .ldf files in individual segments named after the routine (e.g. _PUBLISHED_PublishedRoutine), each containing a routine, also named after the published routine (e.g., _PUBLISHED__PUBLISHED_PublishedRoutine) You'll know one of these routines has been linked into your geode by examining the resource summary output by glue: </P>
<PRE>Resource 					Size # Relocs
-------------------------------------------------
CoreBlock 					0 	0
dgroup 					240 	8
_PUBLISHED_GROBJCALCCORNERS 					53 	1
_PUBLISHED_GROBJBODYPROCESSALLGR 					94 	2
TEST2_E 					478 	27
INTERFACE 					652 	1
CHANGETEXTDIALOG 					232 	1
APPRESOURCE 					416 	1</PRE>
</DIV>
<DIV>
<H1 CLASS="refHeading">
resource</H1>
<PRE CLASS="syntax"><STRONG>resource</STRONG> &lt;<EM>name</EM>&gt; (read-only|preload|discardable|fixed|conforming|shared|\
 code|data|lmem|discard-only|swap-only|ui-object|object|\
 no-swap|no-discard)+</PRE>
<P>
<A NAME="IX_resource .gp file keyword">
 </A>
<A NAME="IX_Resources">
 </A>
The <CODE>
resource</CODE>
<DL>
 field indicates to Glue that the geode uses the named resource. Not all resources used by a geode must be declared here, however. (Resources are described in more detail in <A HREF="../../Programming/GOCLanguage/index.htm">the GEOS Programming chapter</A>.) Resources must be designated with the proper attributes, all of which are listed below:</P><DT>
(none)</DT><DD>If no attribute is specified, the resource named becomes a private data resource for the geode.</DD>
<DT>
<STRONG>
read-only</STRONG>
<A NAME="IX_read-only:resource type in .gp file">
 </A>
</DT><DD>The resource block may not be modified by the program.</DD>
<DT>
<STRONG>
preload</STRONG>
<A NAME="IX_preload:resource type in .gp file">
 </A>
</DT><DD>The resource block should be loaded when the geode is first launched.</DD>
<DT>
<STRONG>
discardable</STRONG>
<A NAME="IX_Discardable memory:geode resources">
 </A>
<A NAME="IX_discardable:resource type in .gp file">
 </A>
</DT><DD>The resource block may be discarded from memory if necessary.</DD>
<DT>
<STRONG>
fixed</STRONG>
<A NAME="IX_Fixed memory:geode resources">
 </A>
<A NAME="IX_fixed:resource type in .gp file">
 </A>
</DT><DD>The resource block should reside in fixed memory.</DD>
<DT>
<STRONG>
conforming</STRONG>
<A NAME="IX_conforming:resource type in .gp file">
 </A>
</DT><DD>The resource block, if containing code, may be called from a lower privilege level. If containing data, it may be accessed from a lower privilege level. (This applies only in protected mode and is not currently implemented.)</DD>
<DT>
<STRONG>
shared</STRONG>
<A NAME="IX_Shared memory:geode resources">
 </A>
<A NAME="IX_shared:resource type in .gp file">
 </A>
</DT><DD>The resource block may be used by other geodes. (Note: It is an error to specify <CODE>
code</CODE>
 and <CODE>
shared</CODE>
 without <CODE>
read-only</CODE>
.)</DD>
<DT>
<STRONG>
code</STRONG>
<A NAME="IX_code:resource type in .gp file">
 </A>
</DT><DD>The resource block contains executable code.</DD>
<DT>
<STRONG>
data</STRONG>
<A NAME="IX_data:resource type in .gp file">
 </A>
</DT><DD>The resource block contains data only. If a data resource is designated <CODE>
read-only</CODE>
 and not fixed, it is assumed to be discardable.</DD>
<DT>
<STRONG>
lmem</STRONG>
<A NAME="IX_Local memory:program resources">
 </A>
<A NAME="IX_lmem:resource type in .gp file">
 </A>
</DT><DD>The resource block consists of a local memory heap. This implies the attribute <CODE>
data</CODE>
 (above), though not the condition pertaining to being discardable.</DD>
<DT>
<STRONG>
discard-only</DT><DD>
</STRONG>
<A NAME="IX_Discardable memory:geode resources">
 </A>
<A NAME="IX_discard-only:resource type in .gp file">
 </A>
The resource block should not be swapped but may be discarded. This is useful for initialization code.</DD>
<DT>
<STRONG>
swap-only</STRONG>
<A NAME="IX_Swapable memory:geode resources">
 </A>
<A NAME="IX_swap-only:resource type in .gp file">
 </A>
</DT><DD>The resource block should not be discarded but may be swapped.</DD>
<DT>
<STRONG>
ui-object</STRONG>
<A NAME="IX_Object blocks:geode resources">
 </A>
<A NAME="IX_ui-object:resource type in .gp file">
 </A>
</DT><DD>The resource block contains objects to be run by the UI. This implies <CODE>
lmem</CODE>
, <CODE>
shared</CODE>
, and <CODE>
no-discard</CODE>
. All blocks for a geode designated <CODE>
ui-object</CODE>
 will be run in a UI thread created specifically for the geode's UI objects.</DD>
<DT>
<STRONG>
object</STRONG>
<A NAME="IX_object:resource type in .gp file">
 </A>
</DT><DD>The resource block contains objects that are to be run by the application's process thread rather than by the UI. This implies <CODE>
lmem</CODE>
 and <CODE>
no-discard</CODE>
.</DD>
<DT>
<STRONG>
no-swap</STRONG>
<A NAME="IX_no-swap:resource type in .gp file">
 </A>
</DT><DD>The resource block will not be swapable.</DD>
<DT>
<STRONG>
no-discard</STRONG>
<A NAME="IX_no-discard:resource type in .gp file">
 </A>
</DT><DD>The resource block will not be discardable.</DD>
</DL>
<P>
Because most resources are code resources, standard code does not have to be declared in the parameters file. Code resources default to <CODE>
code</CODE>
, <CODE>
read-only</CODE>
, and <CODE>
shared</CODE>
. However, if the resource is named in the <STRONG CLASS="fileName">
.gp</STRONG>
 file, the default is overridden in favor of the settings presented. This fact is useful primarily when programming in assembly--in C, code resources are not declared explicitly.</P>
<P>
The Hello World sample application uses only standard code resources (undeclared) and UI resources (designated <CODE>
ui-object</CODE>
). Some other examples are listed below:</P>
<UL>
<LI>
Shared data</LI>
</UL>
<PRE>resource &lt;<EM>name</EM>&gt; data shared</PRE>
<UL>
<LI>
Initialization code</LI>
</UL>
<PRE>resource &lt;<EM>nm</EM>&gt; code shared read-only preload no-swap</PRE>
<UL>
<LI>
Common code used by several geodes (this is the default)</LI>
</UL>
<PRE>resource &lt;<EM>name</EM>&gt; code shared read-only</PRE>
<UL>
<LI>
<A NAME="IX_Self-modifying code">
 </A>
Self-modifying code (strongly discouraged)</LI>
</UL>
<PRE>resource &lt;<EM>name</EM>&gt; code</PRE>
</DIV>
<DIV>
<H1 CLASS="refHeading">
stack</H1>
<PRE CLASS="syntax"><STRONG>stack</STRONG>	&lt;<EM>number</EM>&gt;</PRE>
<P>
<A NAME="IX_Stack:thread stack size">
 </A>
<A NAME="IX_stack .gp file keyword">
 </A>
The <CODE>
stack</CODE>
 field designates the size of the application's stack in bytes. The default stack size is 2000 bytes. This field is not necessary for geodes unless they require a different size stack (the Hello World sample uses a slightly smaller stack size for example only). The <CODE>
stack</CODE>
 field is valid only for geodes with a process aspect.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
tokenchars</H1>
<PRE CLASS="syntax"><STRONG>tokenchars</STRONG> &quot;&lt;<EM>string</EM>&gt;&quot;</PRE>
<P>
<A NAME="IX_Files:token">
 </A>
<A NAME="IX_tokenchars .gp file keyword">
 </A>
<A NAME="IX_Tokens:in Parameter file">
 </A>
This is one of two fields that identifies a unique token in GeoManager's token database file (see <CODE>
tokenid</CODE>
, below). The <CODE>
tokenchars</CODE>
 field must be a string of four characters that identifies the geode's token. Note that these characters also appear in the geode file's extended attributes.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
tokenid</H1>
<PRE CLASS="syntax"><STRONG>tokenid</STRONG>	&lt;<EM>number</EM>&gt;</PRE>
<P>
<A NAME="IX_tokenid .gp file keyword">
 </A>
<A NAME="IX_Manufacturer ID">
 </A>
This is the other of two fields that identifies a unique token in GeoManager's token database file (see <CODE>
tokenchars</CODE>
, above). It must be a number corresponding to the programmer's manufacturer ID number. Note that this number also appears in the geode file's extended attributes.</P>
</DIV>
<DIV>
<H1 CLASS="refHeading">
type</H1>
<PRE CLASS="syntax"><STRONG>type</STRONG>	(process|driver|appl|library)+ [single] [system] [uses-coproc]\
[needs-coproc] [has-gcm] [c-api]</PRE>
<P>
<A NAME="IX_Geodes:type">
 </A>
<A NAME="IX_type .gp file keyword">
 </A>
The <CODE>
type</CODE>
 field in the parameters file designates certain characteristics of the geode being compiled. These attributes correspond to the <CODE>
GeodeAttrs</CODE>
 type and determine how the Glue linker will put the geode together. The attributes are as follows:</P>
<DL>
<DT>
<STRONG>
process</STRONG>
<A NAME="IX_process:as geode type in .gp file">
 </A>
</DT><DD>This attribute indicates the geode has its own thread. Applications should always have process specified in the type field.</DD>
<DT>
<STRONG>
driver</STRONG>
<A NAME="IX_Drivers:geode type">
 </A>
<A NAME="IX_driver:as geode type in .gp file">
 </A>
</DT><DD>This attribute indicates the geode has a driver aspect.</DD>
<DT>
<STRONG>
appl</STRONG>
<A NAME="IX_appl:as geode type in .gp file">
 </A>
</DT><DD><A NAME="IX_Applications:Geode type">
 </A>
This attribute indicates the geode has an application aspect.</DD>
<DT>
<STRONG>
library</STRONG>
<A NAME="IX_library:as geode type in .gp file">
 </A>
</DT><DD><A NAME="IX_Libraries:geode type">
 </A>
This attribute indicates the geode has a library aspect.</DD>
<DT>
<STRONG>
single</STRONG>
<A NAME="IX_single:as geode type in .gp file">
 </A>
</DT><DD><A NAME="IX_Multi-launchability:single .gp file geode type">
 </A>
This geode may only have one copy running at a time. Some applications may allow multiple copies to be running at once; they should not specify single as a type attribute.</DD>
<DT>
<STRONG>
system</STRONG>
<A NAME="IX_system:as geode type in .gp file">
 </A>
</DT><DD>This attribute is set for drivers that must be exited specially and must always be exited. For example, a swap driver has special exit conditions that must always be met and is therefore a system driver.</DD>
<DT>
<STRONG>
uses-coproc</DT><DD>
</STRONG>
<A NAME="IX_uses-coproc:as geode type in .gp file">
 </A>
<A NAME="IX_Math:coprocessors">
 </A>
This attribute is set if the geode will make use of a math coprocessor if one is available. Note that if the geode with this attribute set is a library, all applications that use the library will inherit the property. This attribute is used to indicate that the coprocessor's state must be saved during a context switch.</DD>
<DT>
<STRONG>
needs-coproc</DT><DD>
</STRONG>
<A NAME="IX_needs-coproc:as geode type in .gp file">
 </A>
This attribute indicates that the geode must have a math coprocessor to run. (This implies <CODE>
uses-coproc</CODE>
, above).</DD>
<DT>
<STRONG>
has-gcm</STRONG>
<A NAME="IX_has-gcm:as geode type in .gp file">
 </A>
</DT><DD>This attribute indicates that the application being compiled has a GCM (appliance) version. This information is used by Welcome to locate all GCM applications.</DD>
<DT>
<STRONG>
c-api</STRONG>
<A NAME="IX_c-api:as geode type in .gp file">
 </A>
</DT><DD><A NAME="IX_Libraries:C API libraries">
 </A>
This attribute indicates the library entry points are written in C so the kernel must call them with C calling conventions.</DD>
</DIV>
<DIV>
</DL>
<H1 CLASS="refHeading">
usernotes</H1>
<PRE CLASS="syntax"><STRONG>usernotes</STRONG> &quot;&lt;<CODE>string</CODE>&gt;&quot;</PRE>
<P>
<A NAME="IX_User notes">
 </A>
<A NAME="IX_usernotes .gp file keyword">
 </A>
This field specifies text to be put in the <STRONG CLASS="fileName">
.geo</STRONG>
 file's usernotes field. The text must be within quotation marks and can be up to 100 characters long. It must contain no line breaks. This can be useful for containing copyright notices in the executable files. The user can read the text in the usernotes by using GeoManager's File/Get Info command.</P>
</DIV>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="../../index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> 
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
