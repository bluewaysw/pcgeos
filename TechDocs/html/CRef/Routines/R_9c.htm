<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9c.htm,v 1.2 97/06/25 18:45:46 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: TokenLoadMonikerBuffer() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenDefineToken() ...</A> 
<!-- to next --> | <A HREF="R_9d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TokenLoadTokenChunk() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_TokenLoadMonikerBuffer()">
 </A>
<H1 CLASS="refHeading">
TokenLoadMonikerBuffer()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadMonikerBuffer(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        DisplayType		displayType,					/* type of display for token */
        VisMonikerSearchFlags searchFlags,							/* flags for finding token */
        void		* buffer,					/* pointer to buffer for token */
        word		bufSize,					/* size of passed buffer */
        word		* bytesReturned);						/* number of bytes returned */</PRE>
<P>
This routine loads a specified token's moniker into a provided buffer. The returned Boolean will be <CODE>
true</CODE>
 if the moniker was found, <CODE>
false</CODE>
 otherwise. The size of the returned moniker will be returned in the word pointed to by the <CODE>
bytesReturned</CODE>
 parameter.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
displayType</DT><DD>
</CODE>
A value of <CODE>
DisplayType</CODE>
 indicating the size of the display (used to indicate small-screen devices, primarily).</DD>
<DT>
<CODE>
searchFlags</DT><DD>
</CODE>
A record of <CODE>
VisMonikerSearchFlags</CODE>
 indicating what type of moniker is being requested.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a locked or fixed buffer into which the moniker will be copied.</DD>
<DT>
<CODE>
bufSize</CODE>
</DT><DD>The size of the passed buffer; also the maximum size of the moniker that may be returned.</DD>
<DT>
<CODE>
bytesReturned</DT><DD>
</CODE>
The size of the moniker actually returned in the buffer.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenLoadMonikerChunk()">
 </A>
<H1 CLASS="refHeading">
TokenLoadMonikerChunk()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadMonikerChunk(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        DisplayType		displayType,					/* type of display for token */
        VisMonikerSearchFlags searchFlags,							/* flags for finding token */
        MemHandle		lmemBlock,					/* locked block for new chunk */
        word		* chunkSize,					/* returned new chunk size */
        ChunkHandle		* chunkHandle);					/* returned new chunk handle */</PRE>
<P>
This routine loads a specified token's moniker, allocating a new chunk in a local memory block for the moniker. The returned Boolean will be <CODE>
true</CODE>
 if the moniker was found, <CODE>
false</CODE>
 otherwise.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
displayType</DT><DD>
</CODE>
A value of <CODE>
DisplayType</CODE>
 indicating the size of the display (used to indicate small-screen devices, primarily).</DD>
<DT>
<CODE>
searchFlags</DT><DD>
</CODE>
A record of <CODE>
VisMonikerSearchFlags</CODE>
 indicating what type of moniker is being requested.</DD>
<DT>
<CODE>
lmemBlock</CODE>
</DT><DD>The MemHandle of the local memory block in which the new chunk will be allocated. If the block is locked, you must dereference the global handle after calling this routine.</DD>
<DT>
<CODE>
chunkSize</CODE>
</DT><DD>A pointer to a word in which the size of the allocated chunk will be returned.</DD>
<DT>
<CODE>
chunkhandle</DT><DD>
</CODE>
A pointer to a chunk handle in which the handle of the newly allocated chunk will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine can move chunks in the passed block, thereby invalidating pointers to any chunk in the block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenLoadTokenBlock()">
 </A>
<H1 CLASS="refHeading">
TokenLoadTokenBlock()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadTokenBlock(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        word		* blockSize,					/* returned size of new block */
        MemHandle		* blockHandle);					/* returned handle of block */</PRE>
<P>
This routine loads the specified token's <CODE>
TokenEntry</CODE>
 structure into a newly-allocated global memory block. The returned Boolean will be <CODE>
true</CODE>
if the token was found; otherwise, it will be <CODE>
false</CODE>
.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
blockSize</CODE>
</DT><DD>A pointer to a word in which the size of the newly-allocated block will be returned.</DD>
<DT>
<CODE>
blockHandle</DT><DD>
</CODE>
A pointer to a global handle in which the handle of the newly-allocated block will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenLoadTokenBuffer()">
 </A>
<H1 CLASS="refHeading">
TokenLoadTokenBuffer()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadTokenBuffer(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        TokenEntry		* buffer);					/* buffer for returned token */</PRE>
<P>
This routine loads the specified token's <CODE>
TokenEntry</CODE>
 structure into a passed buffer. The returned Boolean will be <CODE>
true</CODE>
if the token was found; otherwise, it will be <CODE>
false</CODE>. Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
buffer</CODE>
</DT><DD>A pointer to a locked or fixed buffer into which the token entry will be copied.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9b.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenDefineToken() ...</A> 
<!-- to next --> | <A HREF="R_9d.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TokenLoadTokenChunk() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
