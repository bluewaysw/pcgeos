<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9d.htm,v 1.2 97/06/25 18:46:02 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: TokenLoadTokenChunk() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenLoadMonikerBuffer() ...</A> 
<!-- to next --> | <A HREF="R_9e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UserAllocObjBlock ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_TokenLoadTokenChunk()">
 </A>
<H1 CLASS="refHeading">
TokenLoadTokenChunk()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadTokenChunk(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        MemHandle		lmemBlock,					/* handle of block for chunk */
        word		* chunkSize,					/* returned size of new chunk */
        ChunkHandle		* chunkHandle);					/* returned chunk handle */</PRE>
<P>
This routine loads the specified token's <CODE>
TokenEntry</CODE>
 structure into a newly-allocated chunk. The returned Boolean will be <CODE>
true</CODE>
if the token was found; otherwise, it will be <CODE>
false</CODE>
.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
lmemBlock</CODE>
</DT><DD>The MemHandle of the local memory block in which the new chunk will be allocated. If the block is locked, you must manually dereference this handle after the routine call.</DD>
<DT>
<CODE>
chunksize</CODE>
</DT><DD>A pointer to a word in which the size of the newly-allocated chunk will be returned.</DD>
<DT>
<CODE>
chunkHandle</DT><DD>
</CODE>
A pointer to a chunk handle in which the handle of the newly-allocated chunk will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine can move chunks in the passed block, thereby invalidating pointers to any chunk in the block.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenLockTokenMoniker()">
 </A>
<H1 CLASS="refHeading">
TokenLockTokenMoniker()</H1>
<PRE CLASS="syntax">void	* TokenLockTokenMoniker(
        TokenMonikerInfo		tokenMonikerInfo);				/* The DB group and item numbers
        				 * as returned by TokenLookupMoniker() */</PRE>
<P>
This routine locks a token's moniker so it may be drawn; it returns a pointer to the locked chunk containing the moniker information. Pass it the structure returned by <CODE>
<A HREF="../../CRef/Routines/R_9d.htm#IX_TokenLookupMoniker()">TokenLookupMoniker()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Be Sure To:</STRONG>	Unlock the moniker with <CODE>
<A HREF="../../CRef/Routines/R_9d.htm#IX_TokenUnlockTokenMoniker()">TokenUnlockTokenMoniker()</A></CODE>
 after you have finished drawing it.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenLookupMoniker()">
 </A>
<H1 CLASS="refHeading">
TokenLookupMoniker()</H1>
<PRE CLASS="syntax">Boolean	TokenLookupMoniker(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        DisplayType		displayType,					/* display type of token */
        VisMonikerSearchFlags searchFlags,							/* flags for finding token */
        TokenMonikerInfo *		tokenMonikerInfo);					/* DB group and item of token */</PRE>
<P>
This routine finds and retrieves a pointer to the specific moniker for the specified token, given also the token's display type and other attributes. Pass the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify this moniker or moniker list in the token database. Create this dword value from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
displayType</DT><DD>
</CODE>
A value of <CODE>
DisplayType</CODE>
 indicating the size of the display (used to indicate small-screen devices, primarily).</DD>
<DT>
<CODE>
searchFlags</DT><DD>
</CODE>
A record of <CODE>
VisMonikerSearchFlags</CODE>
 indicating what type of moniker is being requested.</DD>
<DT>
<CODE>
tokenDBItem</DT><DD>
</CODE>
A pointer to an empty <CODE>
TokenMonikerInfo</CODE>
 structure, in which the token's group and item numbers will be returned.</DD>
</DL>
<P>
The return value is an error flag: it will be <CODE>
true</CODE>
 if the item could not be found in the token database, <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenOpenLocalTokenDB()">
 </A>
<H1 CLASS="refHeading">
TokenOpenLocalTokenDB()</H1>
<PRE CLASS="syntax">word	TokenOpenLocalTokenDB()</PRE>
<P>
This routine opens the local token database. It returns zero on success, and a <CODE>
VMStatus</CODE>
 error code on failure.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenRemoveToken()">
 </A>
<H1 CLASS="refHeading">
TokenRemoveToken</H1>
<PRE CLASS="syntax">Boolean	TokenRemoveToken(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */</PRE>
<P>
This routine removes the specified token and its moniker list from the token database. It returns an error flag: if the token could not be found, the returned flag is <CODE>
true</CODE>
; otherwise it is <CODE>
false</CODE>
. Pass the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify this moniker or moniker list in the token database. Create this dword value from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenUnlockTokenMoniker()">
 </A>
<H1 CLASS="refHeading">
TokenUnlockTokenMoniker()</H1>
<PRE CLASS="syntax">void	TokenUnlockTokenMoniker(
        void * moniker);</PRE>
<P>
This routine unlocks a moniker that had been locked with <CODE>
<A HREF="../../CRef/Routines/R_9d.htm#IX_TokenLockTokenMoniker()">TokenLockTokenMoniker()</A></CODE>
. Pass a pointer to the locked moniker, as returned by the locking routine.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_ClipboardItemFormatID:TypeFromFormatID() macro">
 </A>
<A NAME="IX_TypeFromFormatID()">
 </A>
<H1 CLASS="refHeading">
TypeFromFormatID()</H1>
<PRE CLASS="syntax">word	TypeFromFormatID(id);
        ClipboardItemFormatID id;</PRE>
<P>
This macro extracts the word-sized format ID (of type <CODE>
ClipboardItemFormat</CODE>
) from a <CODE>
ClipboardFormatID</CODE>
 argument.</P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9c.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TokenLoadMonikerBuffer() ...</A> 
<!-- to next --> | <A HREF="R_9e.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">UserAllocObjBlock ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
