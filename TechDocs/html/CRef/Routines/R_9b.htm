<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: R_9b.htm,v 1.2 97/06/25 18:45:36 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>GEOS C Routines: TokenDefineToken() ...</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">
<DIV>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TocNameArrayFind() ...</A> 
<!-- to next --> | <A HREF="R_9c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TokenLoadMonikerBuffer() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</DIV>
<DIV>
<A NAME="IX_TokenDefineToken()">
 </A>
<H1 CLASS="refHeading">
TokenDefineToken()</H1>
<PRE CLASS="syntax">word	TokenDefineToken(
        dword		tokenChars,					/* four token characters */
        ManufacturerID		manufacturerID,					/* manufacturer ID for token */
        optr		monikerList,					/* optr of moniker list */
        TokenFlags		flags);					/* token flags */</PRE>
<P>
This routine adds a new token and moniker list to the token database. If the token already exists in the token DB, the old will be replaced with the new. This routine must only be called by a thread that can lock the block in which the passed moniker or moniker list resides. This routine must be passed the following parameters:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify this moniker or moniker list in the token database. Create this dword value from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
monikerList</DT><DD>
</CODE>
The optr of the moniker list to be added to the token database.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A record of <CODE>
TokenFlags</CODE>
 indicating the relocation status of the moniker list.</DD>
</DL>
<P CLASS="refField"><STRONG>
Warnings:</STRONG>	This routine may legally move locked LMem blocks (token database items), thereby invalidating all pointers to token database items.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenGetTokenInfo()">
 </A>
<H1 CLASS="refHeading">
TokenGetTokenInfo()</H1>
<PRE CLASS="syntax">Boolean	TokenGetTokenInfo(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        TokenFlags		* flags);					/* returned token flags */</PRE>
<P>
This routine returns information about a specified token. Pass it the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
flags</CODE>
</DT><DD>A pointer to an empty flags record; the flags set (if any) for the specified token (if it exists) will be returned here.</DD>
</DL>
<P>
This routine returns a non-zero value if the token was found in the token database. It returns zero if the token was not found.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenListTokens()">
 </A>
<H1 CLASS="refHeading">
TokenListTokens()</H1>
<PRE CLASS="syntax">dword	TokenListTokens(
        TokenRangeFlags 		tokenRangeFlags,
        word 		headerSize,
        ManufacturerID 		manufacturerID));</PRE>
<P>
This routine lists all the tokens in the token database. It allocates a new block on the global heap and writes in it an array of <CODE>
GeodeToken</CODE>
 structures. This routine returns the actual tokens, not the token groups.</P>
<P>
The returned dword consists of two values: The high word represents the number of tokens in the returned block and may be extracted with the macro <CODE>
<A HREF="../../CRef/Routines/R_9b.htm#IX_TokenListTokensCountFromDWord()">TokenListTokensCountFromDWord()</A></CODE>
. The low word represents the handle of the newly-allocated block and can be extracted with the macro <CODE>
<A HREF="../../CRef/Routines/R_9b.htm#IX_TokenListTokensHandleFromDWord()">TokenListTokensHandleFromDWord()</A></CODE>
.</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<DIV>
<A NAME="IX_TokenListTokensCountFromDWord()">
 </A>
<H1 CLASS="refHeading">
TokenListTokensCountFromDWord()</H1>
<PRE CLASS="syntax">word	TokenListTokensCountFromDWord(<EM>d</EM>);
        dword	<EM>d</EM>;</PRE>
<P>
This macro extracts the number of tokens from the value returned by <CODE>
<A HREF="../../CRef/Routines/R_9b.htm#IX_TokenListTokens()">TokenListTokens()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_TokenListTokensHandleFromDWord()">
 </A>
<H1 CLASS="refHeading">
TokenListTokensHandleFromDWord()</H1>
<PRE CLASS="syntax">word	TokenListTokensHandleFromDWord(<EM>d</EM>);
        dword	<EM>d</EM>;</PRE>
<P>
This routine extracts the MemHandle from the value returned by <CODE>
<A HREF="../../CRef/Routines/R_9b.htm#IX_TokenListTokens()">TokenListTokens()</A></CODE>
.</P>
</DIV>
<DIV>
<A NAME="IX_TokenLoadMonikerBlock()">
 </A>
<H1 CLASS="refHeading">
TokenLoadMonikerBlock()</H1>
<PRE CLASS="syntax">Boolean	TokenLoadMonikerBlock(
        dword		tokenChars,					/* four characters of token */
        ManufacturerID		manufacturerID,					/* manufacturer ID of token */
        DisplayType		displayType,					/* type of display for token */
        VisMonikerSearchFlags searchFlags,							/* flags for finding token */
        word		* blockSize,					/* returned block size */
        MemHandle		* blockHandle);					/* returned block handle */</PRE>
<P>
This routine loads a specified token's moniker, allocating a new global memory block for the moniker. The returned Boolean will be <CODE>
true</CODE>
 if the moniker was found, <CODE>
false</CODE>
 otherwise. Information about the moniker is returned in the values pointed to by <CODE>
blockSize</CODE>
 (the size of the newly allocated block) and <CODE>
blockHandle</CODE>
 (the handle of the new block). If the moniker is not found, both return pointers will be NULL and no block will be allocated.</P>
<P>
Pass this routine the following:</P>
<DL>
<DT>
<CODE>
tokenChars</CODE>
</DT><DD>The four token characters that identify the token database entry. Create this dword from the four characters with the macro TOKEN_CHARS.</DD>
<DT>
<CODE>
manufacturerID</DT><DD>
</CODE>
The manufacturer ID number of the manufacturer responsible for the token database entry.</DD>
<DT>
<CODE>
displayType</DT><DD>
</CODE>
A value of <CODE>
DisplayType</CODE>
 indicating the size of the display (used to indicate small-screen devices, primarily).</DD>
<DT>
<CODE>
searchFlags</DT><DD>
</CODE>
A record of <CODE>
VisMonikerSearchFlags</CODE>
 indicating what type of moniker is being requested.</DD>
<DT>
<CODE>
blockSize</CODE>
</DT><DD>A pointer to a word in which the new block's size will be returned.</DD>
<DT>
<CODE>
blockHandle</DT><DD>
</CODE>
A pointer to a handle in which the new block's handle will be returned.</DD>
</DL>
<P CLASS="refField"><STRONG>
Include:</STRONG>	<STRONG CLASS="fileName">
token.h</STRONG>
 </P>
</DIV>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="R_9a.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">TocNameArrayFind() ...</A> 
<!-- to next --> | <A HREF="R_9c.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">TokenLoadMonikerBuffer() ...</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>
