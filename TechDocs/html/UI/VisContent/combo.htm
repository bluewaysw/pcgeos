<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>VisContent</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
VisContent

</H1>
<P>
<CODE>
VisContentClass</CODE>
 provides objects that can be used to head visible trees and interact with the GenView. The VisContent is a necessary class for any application that plans on displaying visible objects in a view.</P>
<P>
You should be familiar with visible objects, visible object trees, and the GenView class. These topics can be found in <A HREF="../../UI/VisClass/combo.htm">the VisClass chapter</A> and <A HREF="../../UI/GenView">the GenView chapter</A>.</P><P>
Because <CODE>
VisContentClass</CODE>
 is a subclass of <CODE>
VisCompClass</CODE>
, it inherits all the instance data fields and messages of both that class as well as <CODE>
VisClass</CODE>
. You will likely want to read about both of those classes before reading this chapter. You can just read <A HREF="#VisContent_6.htm_20564"> Basic VisContent Usage</A>
 if you need a basic VisContent object--that section describes the most basic ways to use the VisContent without understanding its inner workings.

</P>
<P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#VisContent_1.htm">1 VisContent Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_2.htm">1.1 The VCNI_attrs Field</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_3.htm">1.2 Fields That Affect the View</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_4.htm">1.3 Fields That Affect the Document</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_5.htm">1.4 Fields That Affect Input Events</A><BR>
&nbsp;&nbsp;<A HREF="#VisContent_6.htm">2 Basic VisContent Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_7.htm">2.1 Setting Up Sizing Behavior</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisContent_8.htm">2.2 Messages Received from the View</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="VisContent_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">VisContent</A>: 1 
VisContent Instance Data</H2>
<P>
<A NAME="VisContent_1.htm_IX_VisContentClass">
 </A>
The VisContent has many instance data fields above and beyond those defined in <CODE>
VisClass</CODE>
 and <CODE>
VisCompClass</CODE>
. These new instance fields deal with such topics as content attributes, the way the content interacts with the view, the document described by the content, and how the content handles input.</P>
<P>
All the instance fields defined by <CODE>
VisContentClass</CODE>
 and their definitions are shown in <A HREF="#VisContent_1.htm_94047"> VisContent Instance Data Fields</A>
. Each field is described later in this section.</P>
<P CLASS="figTitle">
Code Display 17-1 <A NAME="VisContent_1.htm_94047">
 </A>
VisContent Instance Data Fields</P>
<PRE>/* All the instance fields defined in VisContentClass are described below. You
 * will likely use very few of them, if any; see the later sections of this
 * chapter for specific information about each field. */</PRE>
<PRE>	/* The following fields deal with the GenView and the view window. */
    @instance optr				<A NAME="VisContent_1.htm_IX_VCNI_view"> </A>VCNI_view = 0;
    @instance WindowHandle				<A NAME="VisContent_1.htm_IX_VCNI_window"> </A>VCNI_window = 0;
    @instance word				<A NAME="VisContent_1.htm_IX_VCNI_viewHeight"> </A>VCNI_viewHeight = 0;
    @instance word				<A NAME="VisContent_1.htm_IX_VCNI_viewWidth"> </A>VCNI_viewWidth = 0;</PRE>
<PRE>	/* VCNI_attrs determines the content's attributes. */
    @instance <A NAME="VisContent_1.htm_IX_VisContent:VisContentAttrs"> </A>VisContentAttrs				<A NAME="IX_VCNI_attrs"> </A>VCNI_attrs = 0;</PRE>
<PRE>	/* The possible flags for VCNI_attrs are
	 *	VCNA_SAME_WIDTH_AS_VIEW						0x80
	 *	VCNA_SAME_HEIGHT_AS_VIEW						0x40
	 *	VCNA_LARGE_DOCUMENT_MODEL						0x20
	 *	VCNA_WINDOW_COORDINATE_MOUSE_EVENTS						0x10
	 *	VCNA_ACTIVE_MOUSE_GRAB_REQUIRES_LARGE_EVENTS						0x08
	 *	VCNA_VIEW_DOC_BOUNDS_SET_MANUALLY						0x04	 */</PRE>
<PRE>	/* The following fields determine features of the content's document. */
    @instance PointDWord				<A NAME="VisContent_1.htm_IX_VCNI_docOrigin"> </A>VCNI_docOrigin = {0, 0};
    @instance PointWWFixed				<A NAME="VisContent_1.htm_IX_VCNI_scaleFactor"> </A>VCNI_scaleFactor = {{0, 1}, {0, 1}};</PRE>
<PRE>	<A NAME="VisContent_1.htm_IX_VisContent:internal instance data"> </A>/* The following fields deal with how the content handles input. */
    @instance ChunkHandle				VCNI_prePassiveMouseGrabList = 0;
    @instance VisMouseGrab				VCNI_impliedMouseGrab =
				    {0, 0, {0, 0}, (VIFGF_MOUSE | VIFGF_PTR), 0};
    @instance VisMouseGrab				VCNI_activeMouseGrab =
				    {0, 0, {0, 0}, 0, 0};
    @instance ChunkHandle				VCNI_postPassiveMouseGrabList = 0;
    @instance KbdGrab				VCNI_kbdGrab = {0, 0};
    @instance FTVMCGrab				VCNI_focusExcl = {0, MAEF_FOCUS};
    @instance FTVMCGrab				VCNI_targetExcl = {0, MAEF_TARGET};
    @instance Handle				VCNI_holdUpInputQueue = 0;
    @instance word				VCNI_holdUpInputCount = 0;
    @instance byte				VCNI_holdUpInputFlags = 0;</PRE>
<PRE>	/* The type flags of the content are special and should not be altered. */
    @default		VI_typeFlags =		VTF_IS_COMPOSITE | VTF_IS_WINDOW |
				VTF_IS_CONTENT | VTF_IS_WIN_GROUP |
				VTF_IS_INPUT_NODE;</PRE>
<P CLASS="subsectionLink">
<A HREF="#VisContent_2.htm">The VCNI_attrs Field</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisContent_3.htm">Fields That Affect the View</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisContent_4.htm">Fields That Affect the Document</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisContent_5.htm">Fields That Affect Input Events</A></P>
<HR>
<A NAME="VisContent_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 1.1 <A HREF="#VisContent_1.htm">VisContent Instance Data</A>: 
The VCNI_attrs Field</H3>
<PRE>VCNI_attrs, MSG_VIS_CONTENT_SET_ATTRS, MSG_VIS_CONTENT_GET_ATTRS</PRE>
<P>
<A NAME="VisContent_2.htm_IX_VisContentAttrs">
 </A>
<A NAME="VisContent_2.htm_IX_VCNI_attrs">
 </A>
The <CODE>
VCNI_attrs</CODE>
 field is a record of <CODE>
VisContentAttrs</CODE>
 that contains several attributes which affect how the content object interacts with the view and with the visible object tree. You can set these attributes with <CODE>
MSG_VIS_CONTENT_SET_ATTRS</CODE>
 dynamically, and you can retrieve them with <CODE>
MSG_VIS_CONTENT_GET_ATTRS</CODE>
.</P>
<P>
<A NAME="VisContent_2.htm_IX_VCNA_&ldots;">
 </A>
The flags in this field are shown below. None of them is set by default.</P>
<DL>
<DT>
VCNA_SAME_WIDTH_AS_VIEW</DT><DD>
<A NAME="VisContent_2.htm_IX_GenViewClass:interaction with content;VisContent:interaction with view">
 </A>
This flag indicates that the content's width should follow the width of the view window, if possible. Most likely, you will want to set this if the view is not horizontally scrollable.</DD>
<DT>
VCNA_SAME_HEIGHT_AS_VIEW</DT><DD>
This flag indicates that the content's height should follow the height of the view window, if possible. Most likely you will want to set this flag if the view is not vertically scrollable.</DD>
<DT>
VCNA_LARGE_DOCUMENT_MODEL</DT><DD>
This flag indicates that the content object manages a large document (32-bit coordinates rather than the standard 16-bit coordinates). For information on how this affects the content and its children, see <A HREF="../../UI/VisClass/VisClass_17.htm#43121">the VisClass chapter</A>.</DT><P CLASS="WorList">
VCNA_WINDOW_COORDINATE_MOUSE_EVENTS<BR>
This flag must be set if VCNA_LARGE_DOCUMENT_MODEL is set. It indicates that the associated GenView will pass input events with window coordinates rather than document coordinates. The default handlers in the content object will then automatically translate the events into document coordinates.</P>
<DT>
VCNA_ACTIVE_MOUSE_GRAB_REQUIRES_LARGE_EVENTS<BR>
This flag indicates that the object that currently has the active mouse grab requires mouse input events to carry large document coordinates rather than the standard document coordinates. This flag is set and reset with the message <CODE>
MSG_VIS_VUP_ALTER_INPUT_FLOW</CODE>
. Large content objects should not set this flag in their Goc declarations.</DD>
<DT>
VCNA_VIEW_DOC_BOUNDS_SET_MANUALLY</DT><DD>
Not often used, this flag indicates that the content should not send its document bounds off to the view during a geometry update. The GenView's document bounds must be set manually, most likely with the GenView message <CODE>
MSG_GEN_VIEW_SET_DOC_BOUNDS</CODE>
.</DD>
<DT>
VCNA_VIEW_DOES_NOT_WIN_SCROLL</DT><DD>
This flag indicates that the view does not scroll but instead sends <CODE>
MSG_META_CONTENT_VIEW_ORIGIN_CHANGED</CODE>
 to the content when the user interacts with the scroller. The UI will use this flag to invalidate the correct region of the content. This should be set when <CODE>
ATTR_GEN_VIEW_DO_NOT_WIN_SCROLL</CODE>
 is set in the GenView. See <A HREF="#UI/GenView/GenView_15.htm">the GenView chapter</A> for full information on view scrolling.</DT>
</DL>
<H6 CLASS="RefETitle">
<A NAME="VisContent_2.htm_IX_MSG_VIS_CONTENT_SET_ATTRS">
 </A>
MSG_VIS_CONTENT_SET_ATTRS</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_SET_ATTRS(
        VisContentAttrs attrsToSet,
        VisContentAttrs attrsToClear);</PRE>
<P>
This message sets the <CODE>
VCNI_attrs</CODE>
 field of the content object according to the passed values.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Parameters:	<CODE>
attrsToSet</CODE>
	This is a record of <CODE>
VisContentAttrs</CODE>
 to set. A flag set in this field will be set in the object's <CODE>
VCNI_attrs</CODE>
 field.</P>
<DL>
<DT>
<CODE>
attrsToClear</CODE>
	This is a record of <CODE>
VisContentAttrs</CODE>
 to clear. A flag set in this field will be cleared in the object's <CODE>
VCNI_attrs</CODE>
 field. This parameter takes precedence over <CODE>
attrsToSet</CODE>
; that is, if a flag is set in both parameters, it will end up cleared.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_2.htm_IX_MSG_VIS_CONTENT_GET_ATTRS">
 </A>
MSG_VIS_CONTENT_GET_ATTRS</H6>
<PRE CLASS="syntax">VisContentAttrs MSG_VIS_CONTENT_GET_ATTRS();</PRE>
<P>
This message returns the current contents of the object's <CODE>
VCNI_attrs</CODE>
 field, a record of <CODE>
VisContentAttrs</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A record of <CODE>
VisContentAttrs</CODE>
 reflecting the flags currently set in the object's <CODE>
VCNI_attrs</CODE>
 field.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>

<HR>
<A NAME="VisContent_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 1.2 <A HREF="#VisContent_1.htm">VisContent Instance Data</A>: 
<A NAME="VisContent_3.htm_83726">
 </A>
Fields That Affect the View</H3>
<PRE>VCNI_view, VCNI_viewHeight, VCNI_viewWidth, VCNI_window, MSG_VIS_CONTENT_GET_WIN_SIZE</PRE>
<P>
<A NAME="VisContent_3.htm_IX_VCNI_view">
 </A>
Because the content must interact directly with the view, it must maintain some information about both the GenView object and its associated window. <CODE>
VisContentClass</CODE>
 defines four fields that deal exclusively with view-related information. Each of these fields is described below.</P>
<DL>
<DT>
<CODE>
VCNI_view</CODE>
</DT><DD>This field contains the optr of the GenView object. The content should not ever actually use this field for the view's optr; if you need to contact the view, you should instead use the messages <CODE>
MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS</CODE>
 and <CODE>
MSG_VIS_VUP_CALL_OBJECT_OF_CLASS</CODE>
. The field will be set automatically by the GenView when the view is opened; the view will send a <CODE>
MSG_META_CONTENT_VIEW_OPENING</CODE>
.</DD>
<DT>
<CODE>
VCNI_viewHeight</DT><DD>
</CODE>
<A NAME="VisContent_3.htm_IX_VCNI_viewHeight">
 </A>
This field contains the height, in document coordinates, of the view window. This will be set by the view object and should not be altered by the application; it can be retrieved with the message <CODE>
MSG_VIS_CONTENT_GET_WIN_SIZE</CODE>
 (below). The view automatically notifies the content each time the window size changes with <CODE>
MSG_META_CONTENT_VIEW_SIZE_CHANGED</CODE>
.</DD>
<DT>
<CODE>
VCNI_viewWidth</DT><DD>
</CODE>
<A NAME="VisContent_3.htm_IX_VCNI_viewWidth">
 </A>
This field contains the width, in document coordinates, of the view window. This will be set by the view object and should not be altered by the application; it can be retrieved with the message <CODE>
MSG_VIS_CONTENT_GET_WIN_SIZE</CODE>
 (below). The view automatically notifies the content on each window resize with <CODE>
MSG_META_CONTENT_VIEW_SIZE_CHANGED</CODE>
.</DD>
<DT>
<CODE>
VCNI_window</DT><DD>
</CODE>
<A NAME="VisContent_3.htm_IX_VCNI_window">
 </A>
This field contains the window handle of the view's window. This field is set by the view object and should not be accessed by the application. If an object under the content needs to get the window handle, it should use <CODE>
MSG_VIS_QUERY_WINDOW</CODE>
. This field will be set automatically by the GenView when the view's window is first opened. The view will send the messages <CODE>
MSG_META_CONTENT_VIEW_WIN_OPENED</CODE>
 and <CODE>
MSG_META_CONTENT_VIEW_OPENING</CODE>
 to set the window handle. When the view window closes, the view will send <CODE>
MSG_META_CONTENT_VIEW_CLOSING</CODE>
 and <CODE>
MSG_META_CONTENT_VIEW_WIN_CLOSED</CODE>
.</DD>
</DL>
<P>
The messages shown above that are sent by the view to the content are detailed in <A HREF="#VisContent_8.htm_94321"> Messages Received from the View</A>
.</P>

<H6 CLASS="RefETitle">
<A NAME="VisContent_3.htm_IX_MSG_VIS_CONTENT_GET_WIN_SIZE">
 </A>
MSG_VIS_CONTENT_GET_WIN_SIZE</H6>
<PRE CLASS="syntax">SizeAsDWord MSG_VIS_CONTENT_GET_WIN_SIZE();</PRE>
<P>
This message returns the size of the content object's associated window in terms of width and height.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A <CODE>
SizeAsDWord</CODE>
 value with the window's width in the high word and the window's height in the low word. Use the DWORD_HEIGHT and DWORD_WIDTH macros to extract the proper values.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>

<HR>
<A NAME="VisContent_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 1.3 <A HREF="#VisContent_1.htm">VisContent Instance Data</A>: 
Fields That Affect the Document</H3>
<PRE>VCNI_docOrigin, VCNI_scaleFactor, MSG_VIS_CONTENT_SET_DOC_BOUNDS, MSG_VIS_CONTENT_RECALC_SIZE_BASED_ON_VIEW</PRE>
<P>
<A NAME="VisContent_4.htm_IX_VisContent:interaction with document">
 </A>
The GenView object maintains quite a bit of information about the document as managed by the content object. The content must also keep information about the document and how the view is displaying it. This information is stored in two fields, <CODE>
VCNI_docOrigin</CODE>
 and <CODE>
VCNI_scaleFactor</CODE>
, both detailed below.</P>
<P>
The document bounds of the content are typically equal to the bounds of the VisContent itself. The content's bounds are stored in the <CODE>
VI_bounds</CODE>
 field inherited from <CODE>
VisClass</CODE>
. When a content is managing layers or large documents, however, its bounds are set to zero. It then manages its document bounds within the layer objects and the GenView. When the document bounds change, a <CODE>
MSG_VIS_CONTENT_SET_DOC_BOUNDS</CODE>
 should be sent to the content to get it to notify all its layer children and the GenView of the new bounds. This message is shown at the end of this section.</P>
<P>
If the content is not a large document and is set up to follow the GenView's geometry (it has either or both of VCNA_SAME_WIDTH_AS_VIEW or VCNA_SAME_HEIGHT_AS_VIEW set), it will be affected by changes in the view's geometry. During geometry updates, the view will send it a <CODE>
MSG_VIS_CONTENT_RECALC_SIZE_BASED_ON_VIEW</CODE>
. This message sets the content's width and/or height and therefore affects its <CODE>
VI_bounds</CODE>
 field. This message is also shown at the end of this section.</P>
<DL>
<DT>
<CODE>
VCNI_docOrigin</DT><DD>
</CODE>
<A NAME="VisContent_4.htm_IX_VCNI_docOrigin">
 </A>
This field contains the current origin of the view window. The origin is the location of the view's upper left corner in the document (where the scrollers are). This field is of type <CODE>
PointDWord</CODE>
, which has the following structure:</DD>
<PRE>typedef struct {
    sdword   PD_x;    /* x coordinate of origin */
    sdword   PD_y;    /* y coordinate of origin */
} PointDWord;</PRE>
<DT>
</DT><DD>Normally, this field is set when the view is first opened or when the view is scrolled, scaled, or otherwise changed in document position. The view will send the message <CODE>
MSG_META_CONTENT_VIEW_ORIGIN_CHANGED</CODE>
 to indicate the origin is different from its current setting.</DD>
<DT>
<CODE>
VCNI_scaleFactor</DT><DD>
</CODE>
<A NAME="VisContent_4.htm_IX_VCNI_scaleFactor">
 </A>
This field contains the current scale factor the view is displaying. Scaling is implemented almost entirely in the GenView object; some content objects, however, will want to react in a special way when the scale factor is changed. The scale factor is stored in a <CODE>
PointWWFixed</CODE>
 structure, as follows:</DD>
<PRE>typedef struct {
    WWFixed    PF_x;   /* horizontal scale factor */
    WWFixed    PF_y;   /* vertical scale factor */
} PointWWFixed;</PRE>
<DT>
</DT><DD>The <CODE>
WWFixed</CODE>
 structures that determine the scale factor in each dimension consist of two elements. This structure is shown below:</DD>
<PRE>typedef struct {
    word    WWF_frac;   /* fractional portion */
    word    WWF_int;    /* integral portion */
} WWFixed;</PRE>
<DT>
</DT><DD>The <CODE>
VCNI_scaleFactor</CODE>
 field in the content is never set directly by the application; instead, it is set with <CODE>
MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED</CODE>
 whenever the view's scale factor changes.</DD>
</DL>
<P>
Messages that set these fields are discussed in <A HREF="#VisContent_8.htm_94321"> Messages Received from the View</A>
.</P>

<H6 CLASS="RefETitle">
<A NAME="VisContent_4.htm_IX_MSG_VIS_CONTENT_SET_DOC_BOUNDS">
 </A>
MSG_VIS_CONTENT_SET_DOC_BOUNDS</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_SET_DOC_BOUNDS(@stack
        sdword	bottom,
        sdword	right,
        sdword	top,
        sdword	left);</PRE>
<P>
This message is used to set the document bounds of a content's large document. The content will send <CODE>
MSG_GEN_VIEW_SET_DOC_BOUNDS</CODE>
 to its view and <CODE>
MSG_VIS_LAYER_SET_DOC_BOUNDS</CODE>
 to each of its children with the new bounds. The recipient content <EM>
must</EM>
 have the flag <CODE>
VCNA_LARGE_DOCUMENT_MODEL</CODE>
 set in <CODE>
VCNI_attrs</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any <EM>
large</EM>
 VisContent object--if the content is not using the large document model, an error will result.</P>
<P CLASS="refField">
Parameters:	<CODE>
bottom, right, top, left<BR>
</CODE>
The new document bounds in 32-bit document coordinates.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>
<P CLASS="refField">
Warnings:	You may only send this message to a content that is using the large document model. All other contents will not handle this message but will result in a fatal error.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_4.htm_IX_MSG_VIS_CONTENT_RECALC_SIZE_BASED_ON_VIEW">
 </A>
MSG_VIS_CONTENT_RECALC_SIZE_BASED_ON_VIEW</H6>
<PRE CLASS="syntax">SizeAsDWord MSG_VIS_CONTENT_RECALC_SIZE_BASED_ON_VIEW();</PRE>
<P>
This message causes the content to recalculate its size based on the view's geometry. It will try to set its width if it has VCNA_SAME_WIDTH_AS_VIEW set, and it will try to set its height if it has VCNA_SAME_HEIGHT_AS_VIEW set.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by the view or by the content to itself during geometry updates.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A <CODE>
SizeAsDWord</CODE>
 value indicating the new size of the content. Use the macros DWORD_HEIGHT and DWORD_WIDTH to extract the appropriate values.</P>
<P CLASS="refField">
Interception:	Unlikely<A NAME="VisContent_4.htm_marker=314574">
 </A>
.</P>

<HR>
<A NAME="VisContent_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 1.4 <A HREF="#VisContent_1.htm">VisContent Instance Data</A>: 
Fields That Affect Input Events</H3>
<P>
<A NAME="VisContent_5.htm_IX_Input:with VisContents">
 </A>
One of the main features of <CODE>
VisContentClass</CODE>
 is its ability to handle, manage, and pass on input events sent through the GenView. The content has a large amount of functionality built into it to provide these features.</P>

<H4 CLASS="HeadingC">
Mouse and Keyboard Grabs</H4>
<PRE>VCNI_prePassiveMouseGrabList, VCNI_impliedMouseGrab, VCNI_activeMouseGrab, VCNI_postPassiveMouseGrabList, VCNI_kbdGrab, MSG_VIS_CONTENT_UNWANTED_MOUSE_EVENT, MSG_VIS_CONTENT_UNWANTED_KBD_EVENT, MSG_VIS_CONTENT_TEST_IF_ACTIVE_OR_IMPLIED_WIN</PRE>
<P>
<CODE>
VisContentClass</CODE>
<A NAME="VisContent_5.htm_IX_Keyboard:grabbing">
 </A>
<A NAME="VisContent_5.htm_IX_Mouse:grabbing">
 </A>
, as the head of the visible tree displayed in the view, keeps track of which object in its tree has each different type of input grab. With this information, the content can simply pass the input event directly to the object that has the grab. It can also easily send the event to both the prepassive and postpassive grab objects, if any.</P>
<P>
<DL>
To do this, it uses five instance fields that applications can not directly access. These fields are altered by the messages that allow an object to gain and release the subject grab. (These messages are all detailed in <A HREF="../../UI/VisClass/VisClass_f.htm#65723">the VisClass chapter</A>.) The instance fields are listed below:</P><DT>
<CODE>
VCNI_prePassiveMouseGrabList</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_prePassiveMouseGrabList">
 </A>
This field is a pointer to a chunkarray containing the list of objects that currently have the prepassive mouse grab.</DD>
<DT>
<CODE>
VCNI_impliedMouseGrab</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_impliedMouseGrab">
 </A>
This field is a <CODE>
VisMouseGrab</CODE>
 (described below) structure that contains details about the object which has the implied mouse grab.</DD>
<DT>
<CODE>
VCNI_activeMouseGrab</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_activeMouseGrab">
 </A>
This field is a <CODE>
VisMouseGrab</CODE>
 (described below) structure that contains details about the object which has the active mouse grab.</DD>
<DT>
<CODE>
VCNI_postPassiveMouseGrabList</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_postPassiveMouseGrabList">
 </A>
This field is a pointer to a chunkarray containing the list of objects that currently have the postpassive mouse grab.</DD>
<DT>
<CODE>
VCNI_kbdGrab</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_kbdGrab">
 </A>
This field is a <CODE>
KbdGrab</CODE>
 structure that contains details about the object which currently has the keyboard grab.</DD>
</DL>
<P>
You will probably not ever have to know the structure of these fields, how to set them, or the information they contain. However the two structures <CODE>
VisMouseGrab</CODE>
 and <CODE>
KbdGrab</CODE>
 are shown in <A HREF="#VisContent_5.htm_35365"> Grab Data Structures</A>
 for your information.</P>
<P CLASS="figTitle">
Code Display 17-2 <A NAME="VisContent_5.htm_35365">
 </A>
Grab Data Structures</P>
<PRE>/* These structures are obscure, and you will likely never have to use them. */</PRE>
<PRE><A NAME="VisContent_5.htm_IX_VMG_&ldots;"> </A><A NAME="IX_VisMouseGrab"> </A>/* The VisMouseGrab structure contains information about the object that
 * currently has the mouse grab. */</PRE>
<PRE>typedef struct {
    optr		VMG_object;		/* The optr of the object that has the grab.
				 * If no object has the grab, this is zero. */
    WindowHandle		VMG_gWin;		/* The window handle of the window with the object
				 * having the grab, if it's different from
				 * the content's window. If it's in the content's
				 * window, this field contains zero.	*/
    PointDWord		VMG_translation;		/* The 32-bit translation applied to mouse events
				 * if the large document model is in use. This is
				 * set with a previous message call. */
    VisInputFlowGrabFlags VMG_flags; /* A record of VisInputFlowGrabFlags,
				   * described below. */
    byte		VMG_unused;		/* Reserved byte. */
} VisMouseGrab;</PRE>
<PRE>/* The VisInputFlowGrabFlags determine the type and context of the grab. These
 * flags are not listed here for simplicity. You do not have to know these flags;
 * they are set with MSG_VIS_VUP_ALTER_INPUT_FLOW. */</PRE>
<PRE><A NAME="VisContent_5.htm_IX_KG_&ldots;"> </A><A NAME="IX_KbdGrab"> </A>/* The KbdGrab structure contains information about the object that currently
 * has the keyboard grab. */</PRE>
<PRE>typedef struct {
    optr		KG_OD;		/* The optr of the object that has the
				 * keyboard grab. */
    word		KG_unused;		/* Reserved word. */
} KbdGrab;</PRE>
<P>
In addition, the VisContent has the following messages that are affected by the input grab fields:</P>
<DL>
<DT>
<CODE>
MSG_VIS_CONTENT_TEST_IF_ACTIVE_OR_IMPLIED_WIN</DT><DD>
</CODE>
This message returns <CODE>
true</CODE>
 if the passed window handle is the same as the active or implied window currently translating mouse events. It returns <CODE>
false</CODE>
 otherwise. This is used by specific UI objects.</DD>
<DT>
<CODE>
MSG_VIS_CONTENT_UNWANTED_MOUSE_EVENT</DT><DD>
</CODE>
This message is sent by the content to itself if a mouse event has arrived and there is no implied or active grab in the content's visible tree. The default reaction is to beep if the event is a button press. It's highly unlikely that you'll send or intercept this message.</DD>
<DT>
<CODE>
MSG_VIS_CONTENT_UNWANTED_KBD_EVENT</DT><DD>
</CODE>
This message is sent by the content to itself if a keyboard event has arrived and there is no keyboard grab set up. It is highly unlikely that you will ever send or intercept this message.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_TEST_IF_ACTIVE_OR_IMPLIED_WIN">
 </A>
MSG_VIS_CONTENT_TEST_IF_ACTIVE_OR_IMPLIED_WIN</H6>
<PRE CLASS="syntax">Boolean	MSG_VIS_CONTENT_TEST_IF_ACTIVE_OR_IMPLIED_WIN(
        WindowHandle window);</PRE>
<P>
This message checks to see if the passed window handle is the same as the window of the object having either the implied or active mouse grab. This is typically used by objects in a Specific UI library to determine if the mouse event was actually within the window or directly on the window's border.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Parameters:	<CODE>
window</CODE>
	The window handle to be checked.</P>
<P CLASS="refField">
Return:	<CODE>
True</CODE>
 if the window handle is the same as either the active or the implied window, <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_UNWANTED_MOUSE_EVENT">
 </A>
MSG_VIS_CONTENT_UNWANTED_MOUSE_EVENT</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_UNWANTED_MOUSE_EVENT(
        VisMouseGrab *mouseGrab,
        word	inputState);</PRE>
<P>
This message is received by the content if a mouse event was received and there was no active or implied grab. This is most frequently encountered when the user presses a mouse button outside a modal dialog box. The default action of this handler is to beep (on presses only, not releases) and get rid of the event as if it had been handled.</P>
<P CLASS="refField">
Source:	Input flow mechanism.</P>
<P CLASS="refField">
Destination:	The affected VisContent object.</P>
<P CLASS="refField">
Parameters:	<CODE>
mouseGrab</CODE>
	A pointer to the appropriate <CODE>
VisMouseGrab</CODE>
 structure.</P>
<DL>
<DT>
<CODE>
inputState</CODE>
</DT><DD>Same as passed with the actual event.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_NOTIFY_ACTIVE_MOUSE_GRAB_WIN_CHANGED">
 </A>
MSG_VIS_CONTENT_NOTIFY_ACTIVE_MOUSE_GRAB_WIN_CHANGED</H6>
<PRE CLASS="syntax">void 	MSG_VIS_CONTENT_NOTIFY_ACTIVE_MOUSE_GRAB_WIN_CHANGED();</PRE>
<P>
A message we send ourselves from within our <CODE>
MSG_VIS_VUP_ALTER_INPUT_FLOW</CODE>
 handler in the case that <CODE>
VCNI_activeMouseGrab</CODE>
.<CODE>
VMG_gWin</CODE>
 changes.  Used by the specific UI's implementation of <CODE>
GenApplicationClass</CODE>
 to keep track of the currently active window within the application.</P>
<P CLASS="refField">
Source:	See above.</P>
<P CLASS="refField">
Destination:	Self.</P>
<P CLASS="refField">
Parameters:	None</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Intercepted by specific UI's implementation of GenApplication for the purpose of finding out a change in the active window within the application has occurred.  It will in turn update the window system so that mouse grabs and pointer image changes work properly.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_UNWANTED_KBD_EVENT">
 </A>
MSG_VIS_CONTENT_UNWANTED_KBD_EVENT</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_UNWANTED_KBD_EVENT(
        word	character,
        word	flags,
        word	state);</PRE>
<P>
This message will be received by the content if a keyboard event was sent and there was no keyboard grab set up. The default action of the content is to beep (on presses only, not releases) and return as if the event had been processed.</P>
<P CLASS="refField">
Source:	Input flow mechanism.</P>
<P CLASS="refField">
Destination:	The affected VisContent object.</P>
<P CLASS="refField">
Parameters:	<CODE>
character</CODE>
	The keyboard character pressed.</P>
<DL>
<DT>
<CODE>
flags</CODE>
</DT><DD>A word of flags: The low byte is a <CODE>
CharFlags</CODE>
 record, and the high byte is a <CODE>
ShiftState</CODE>
 record. Both are the same as passed with the original <CODE>
MSG_META_KBD_CHAR</CODE>
.</DD>
<DT>
<CODE>
state</CODE>
</DT><DD>A word containing two values: The low byte is a record of <CODE>
ToggleState</CODE>
, and the high byte is the scan code. Both are the same as passed with the original <CODE>
MSG_META_KBD_CHAR</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>



<H4 CLASS="HeadingC">
Focus and Target</H4>
<PRE>VCNI_focusExcl, VCNI_targetExcl, MSG_META_CONTENT_APPLY_DEFAULT_FOCUS</PRE>
<P>
<A NAME="VisContent_5.htm_IX_VCNI_targetExcl">
 </A>
<A NAME="VisContent_5.htm_IX_VCNI_focusExcl">
 </A>
In addition to keeping track of which of its children have the mouse and keyboard grabs, the content also keeps track of which objects have the focus and target input exclusives. Both <CODE>
VCNI_focusExcl</CODE>
 and <CODE>
VCNI_targetExcl</CODE>
 contain a structure of type <CODE>
FTVMCGrab</CODE>
 that describes the object that has the subject exclusive. The messages sent by the GenView that set these fields are described in <A HREF="#VisContent_8.htm_94321"> Messages Received from the View</A>
.</P>


<H4 CLASS="HeadingC">
Input Flow Control</H4>
<PRE>VCNI_holdUpInputQueue, VCNI_holdUpInputCount, VCNI_holdUpInputFlags, MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW, MSG_VIS_CONTENT_RESUME_INPUT_FLOW, MSG_VIS_CONTENT_DISABLE_HOLD_UP, MSG_VIS_CONTENT_ENABLE_HOLD_UP</PRE>
<P>
GEOS<A NAME="VisContent_5.htm_IX_Input:holding up">
 </A>
 allows a visible tree to hold up input--that is, input will be stored elsewhere while the visible tree is doing something else. This can be useful if complex tree operations are going on and you don't want input to go to the wrong object.</P>
<P>
<CODE>
VisContentClass</CODE>
 provides three instance fields that define the input holdup mechanism. These three fields are</P>
<DL>
<DT>
<CODE>
VCNI_holdUpInputQueue</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_holdUpInputQueue">
 </A>
This field contains the queue handle of the queue where held-up input will be temporarily stored. Input events will go into this event queue until they are allowed to be handled again; then they will be sent to their proper recipients.</DD>
<DT>
<CODE>
VCNI_holdUpInputCount</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_holdUpInputCount">
 </A>
This field contains a count of the number of objects that have requested that input be held up. If this count is positive, input will be held up and input events will go into the hold-up queue.</DD>
<DT>
<CODE>
VCNI_holdUpInputFlags</DT><DD>
</CODE>
<A NAME="VisContent_5.htm_IX_VCNI_holdUpInputFlags">
 </A>
This field contains a record of flags which determine the state of the hold-up mechanism. The following two flags are allowed:</DD>
<DT>
	HUIF_FLUSHING_QUEUE</DT><DD>
This flag indicates that the hold-up queue is currently being flushed.</DD>
<DT>
	HUIF_HOLD_UP_MODE_DISABLED</DT><DD>
This flag forces input events to flow normally. It is used primarily by GEOS to ensure that the user can interact with a system-modal dialog box.</DD>
</DL>
<P>
<CODE>
VisContentClass</CODE>
 has four messages that it sends to itself to set the state of information hold-up. These messages are detailed below.</P>

<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW">
 </A>
MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW();</PRE>
<P>
This message increments the count in <CODE>
VCNI_holdUpInputCount</CODE>
. If this count is nonzero and HUIF_HOLD_UP_MODE_DISABLED is clear, subsequent input events will be sent into the hold-up queue until either the flag is set or the count once more drops to zero.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>
<P CLASS="refField">
Warnings:	Do not forget to resume input with a later use of the message <CODE>
MSG_VIS_CONTENT_RESUME_INPUT_FLOW</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_RESUME_INPUT_FLOW">
 </A>
MSG_VIS_CONTENT_RESUME_INPUT_FLOW</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_RESUME_INPUT_FLOW();</PRE>
<P>
This message decrements the count in <CODE>
VCNI_holdUpInputCount</CODE>
. If the count becomes zero with this call, the hold-up event queue is flushed and all the events in it are &quot;played back.&quot; If the count goes below zero, GEOS will give an error. Therefore, do not use this message unless it is preceded with a <CODE>
MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>
<P CLASS="refField">
Warnings:	If this message is used without first holding up input with <CODE>
MSG_VIS_CONTENT_HOLD_UP_INPUT_FLOW</CODE>
, an error will be the likely result. The error condition is the <CODE>
VCNI_holdUpInputCount</CODE>
 field going below zero.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_DISABLE_HOLDUP">
 </A>
MSG_VIS_CONTENT_DISABLE_HOLD_UP</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_DISABLE_HOLD_UP();</PRE>
<P>
This message sets the HUIF_HOLD_UP_MODE_DISABLED flag, forcing all input events to flow normally until the flag is cleared. In essence, it turns off the hold-up mechanism.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_5.htm_IX_MSG_VIS_CONTENT_ENABLE_HOLDUP">
 </A>
MSG_VIS_CONTENT_ENABLE_HOLD_UP</H6>
<PRE CLASS="syntax">void	MSG_VIS_CONTENT_ENABLE_HOLD_UP();</PRE>
<P>
This message clears the HUIF_HOLD_UP_MODE_DISABLED flag, allowing input events to be held up in the hold-up event queue.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisContent object.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<HR>
<A NAME="VisContent_6.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">VisContent</A>: 2 
<A NAME="VisContent_6.htm_20564">
 </A>
Basic VisContent Usage</H2>
<P>
You will probably not have to subclass <CODE>
VisContentClass</CODE>
 unless you are using a large document or you want the content to draw something in response to a <CODE>
MSG_VIS_DRAW</CODE>
. In most other cases, you can declare your content object directly on <CODE>
VisContentClass</CODE>
.</P>
<P>
Most VisContent behavior is inherited directly from <CODE>
VisCompClass</CODE>
. Some additional behavior is detailed in the following sections.</P>
<P>
If you are planning on using the document control objects with GenViews, you will not need VisContent objects. The GenDocument resolves at run-time into a subclass of VisContent and therefore replaces the need for an explicitly-defined VisContent object. See <A HREF="../../Files/Documents/combo.htm">the Documents chapter</A> for full information on GenDocuments.</P><P CLASS="subsectionLink">
<A HREF="#VisContent_7.htm">Setting Up Sizing Behavior</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisContent_8.htm">Messages Received from the View</A></P>
<HR>
<A NAME="VisContent_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 2.1 <A HREF="#VisContent_6.htm">Basic VisContent Usage</A>: 
<A NAME="VisContent_7.htm_IX_Geometry:view and content">
 </A>
Setting Up Sizing Behavior</H3>
<P>
Most geometry behavior revolves around whether the GenView is scrollable or not. You can set up several different sizing behaviors depending on the attributes you set in the GenView. Some are listed below with the attributes you should set in both the GenView and the VisContent.</P>
<P>
Typically, setting the view's attributes will involve either setting or not setting the GVDA_SCROLLABLE flag in the appropriate GenView dimension; also, you will want to be aware of the GVDA_NO_LARGER_THAN_CONTENT and GVDA_NO_SMALLER_THAN_CONTENT flags.</P>

<H4 CLASS="HeadingC">
If the Content Is Fixed Size</H4>
<P>
Typically, if the content object is a fixed size, the view will either conform to the content's size or scroll in one or both dimensions. This behavior is determined entirely within the GenView's instance data. Three types of this behavior are shown in <A HREF="#VisContent_7.htm_39153"> Sizing the View with a Fixed Content</A>
.</P>
<P CLASS="figTitle">
Code Display 17-3 <A NAME="VisContent_7.htm_39153">
 </A>
Sizing the View with a Fixed Content</P>
<PRE>/* This code display shows three different types of sizing behavior of the GenView
 * if its VisContent object is of a fixed size. Note that if the content is
 * managing its geometry, its bounds (and therefore the view's) will be determined
 * by the content's children. */</PRE>
<PRE>/* The view window is scrollable in both dimensions. This will result in the view
 * being sizable and scrollable in both dimensions. */</PRE>
<PRE>@object GenViewClass MyView = {
    GVI_content = @MyVisContent;
    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs = @default | GVDA_SCROLLABLE;
};</PRE>
<PRE>/* The view window is scrollable in only the vertical dimension. It follows the
 * width of the VisContent object and therefore does not scroll vertically. The
 * VisContent's VI_bounds field should be set by the content. */</PRE>
<PRE>@object GenViewClass MyView = {
    GVI_content = @MyVisContent;
    GVDI_horizAttrs = @default				| GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT;
    GVDI_vertAttrs = @default				| GVDA_SCROLLABLE;
};</PRE>
<PRE>/* The view window sizes itself exactly to the size of the VisContent's bounds.
 * The VisContent's VI_bounds field should be set appropriately by the content. 
 * Note that this is not a valid combination for VisContents that display large
 * documents or layer objects. */</PRE>
<PRE>@object GenViewClass MyView = {
    GVI_content = @MyVisContent;
    GVDI_horizAttrs = @default				| GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT;
    GVDI_vertAttrs = @default				| GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT;
}</PRE>
<P>
Another type of behavior with fixed-size contents is called &quot;keeping the aspect ratio.&quot; The view and content can work together to allow the user to resize the view while automatically setting the view's scale factor to keep the entire content in the window. This might be used, for example, for a game board; the game could be resized, and the entire game board would stay in the view.</P>
<P>
In this situation, the content calculates its new size based on one of the view's dimensions. For example, when the user resizes the view, the content may keep the width but calculate the height based on the width. The proper scale factor is then set, and the content does not have to do anything special beyond that. To gain this behavior, set up your view and content as shown in <A HREF="#VisContent_7.htm_27948"> Keeping the View Aspect Ratio</A>
.</P>
<P CLASS="figTitle">
Code Display 17-4 <A NAME="VisContent_7.htm_27948">
 </A>
Keeping the View Aspect Ratio</P>
<PRE>/* This example shows a view and its content. The content object is of a fixed
 * size, and the view is resizable. The content/view pair will keep the aspect
 * ratio to automatically figure the view's height based on its width and then
 * scale the image to keep the entire bounds of the content within the view
 * window. */</PRE>
<PRE>@object GenViewClass MyView = {
    GVI_content = @MyVisContent;
    GVDI_horizAttrs = @default				| GVDA_NO_LARGER_THAN_CONTENT
				| GVDA_NO_SMALLER_THAN_CONTENT;
    GVDI_vertAttrs = @default				| GVDA_KEEP_ASPECT_RATIO;
};</PRE>
<PRE>@object VisContentClass MyVisContent = {
    VI_bounds =		{0,	/* left bound */
		 0,	/* top bound */
		 250,	/* right bound */
		 250};	/* bottom bound */
    VCI_comp =			/* put any children here */;
    VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
		/* This is set because typically a content's bounds are determined
		 * by its children. If we want to set our own bounds, we should
		 * custom manage our geometry. This is true of contents used with
		 * the views in the previous example. */
};</PRE>


<H4 CLASS="HeadingC">
If the Content Is Variable Size</H4>
<P>
Many visible trees will have contents that are of variable size. How the content determines its size differs from use to use; some contents will adjust their geometries to those of their view objects, and some will resize themselves based on the geometry of their children.</P>
<P>
Typically, if the content resizes itself based on its children's geometry, the view either will be scrollable or will adjust its size to that of its content.</P>
<P>
If the content rearranges its children to meet the size of the view, the view will not be scrollable and will not adjust its size to the content at all. Instead, the content will have the VCNA_SAME_WIDTH_AS_VIEW and VCNA_SAME_HEIGHT_AS_VIEW flags set in its <CODE>
VCNI_attrs</CODE>
 field<A NAME="VisContent_7.htm_marker=314577">
 </A>
.</P>

<HR>
<A NAME="VisContent_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisContent</A>: 2.2 <A HREF="#VisContent_6.htm">Basic VisContent Usage</A>: 
<A NAME="VisContent_8.htm_94321">
 </A>
Messages Received from the View</H3>
<PRE>MSG_META_CONTENT_SET_VIEW, MSG_META_CONTENT_VIEW_ORIGIN_CHANGED, MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED, MSG_META_CONTENT_VIEW_OPENING, MSG_META_CONTENT_VIEW_WIN_OPENED, MSG_META_CONTENT_VIEW_SIZE_CHANGED, MSG_META_CONTENT_VIEW_CLOSING, MSG_META_CONTENT_VIEW_WIN_CLOSED</PRE>
<P>
A<A NAME="VisContent_8.htm_IX_GenViewClass:interaction with VisContent;VisContent:messages received">
 </A>
s detailed in the discussions on GenView, the view sends a sequence of messages to its content when the view is first opening and when it is closing. These messages set up the content's visible instance data and prime the visible tree to be drawn on the screen. The messages are handled by the default handlers in <CODE>
VisContentClass</CODE>
, and you do not need to add anything to them to make them work.</P>
<P>
The messages sent to the content when the view is first created are</P>
<OL>
<LI>
<CODE>
MSG_META_CONTENT_SET_VIEW<BR>
</CODE>
This message passes the view's optr to the content, setting the <CODE>
VCNI_view</CODE>
 field properly.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_ORIGIN_CHANGED<BR>
</CODE>
This message passes the view's initial origin (which may be set other than the default) to the content.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED<BR>
</CODE>
This message passes the view's initial scale factor (which may be set other than the default) to the content.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_OPENING<BR>
</CODE>
This message is sent to the content when the view receives a <CODE>
MSG_VIS_OPEN</CODE>
. This notifies the content that the view is about to be put on the screen and that it should prepare itself to be drawn.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_WIN_OPENED<BR>
</CODE>
This message passes the window handle of the newly created view window so the content can record it in <CODE>
VCNI_window</CODE>
.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_SIZE_CHANGED<BR>
</CODE>
This message passes the view window's size (height and width) to the content so the content can determine its proper size and geometry.</LI>
<LI>
<CODE>
MSG_META_EXPOSED<BR>
</CODE>
This message is sent when the view's window is finally on the screen. It signifies that the content should draw itself and then send <CODE>
MSG_VIS_DRAW</CODE>
s to all its children.</LI>
</OL>
<P>
The view will also send certain messages to the content when different things happen to change the content's instance data:</P>
<UL>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_SIZE_CHANGED<BR>
</CODE>
This message is passed whenever the view window's size changes for any reason.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED<BR>
</CODE>
This message is passed whenever the view's scale factor is changed, usually due to the user setting it from a menu.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_ORIGIN_CHANGED<BR>
</CODE>
This message is passed whenever the view's origin is changed, usually when the view is scrolled.</LI>
<LI>
<CODE>
MSG_META_EXPOSED<BR>
</CODE>
This message is passed to the content whenever a portion of the view window becomes exposed and must be drawn. The content automatically translates this into a <CODE>
MSG_VIS_DRAW</CODE>
.</LI>
</UL>
<P>
When the view is shutting down, it will send the following three messages to the content to set the proper data:</P>
<OL>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_CLOSING<BR>
</CODE>
This message is sent to the content when the view receives a <CODE>
MSG_VIS_CLOSE</CODE>
. It indicates that the view is being taken off the screen and that all the visible objects in the content's tree should remove themselves from the screen.</LI>
<LI>
<CODE>
MSG_META_CONTENT_VIEW_WIN_CLOSED<BR>
</CODE>
This message is sent when the view's window is finally destroyed. The copy of the window handle in <CODE>
VCNI_window</CODE>
 will be thrown out now so no drawing to the stale window handle will be done.</LI>
<LI>
<CODE>
MSG_META_CONTENT_SET_VIEW<BR>
</CODE>
This message is sent to set the content's <CODE>
VCNI_view </CODE>
field to a null handle. When the view is finally taken off the screen, it no longer should have a content associated with it since it is meaningless to work with a visible tree that is not on the screen. If the view is opened again later, the content will receive another <CODE>
MSG_META_CONTENT_VIEW_OPENING</CODE>
 and will once again be passed the view's optr.</LI>
</OL>

<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_SET_VIEW">
 </A>
MSG_META_CONTENT_SET_VIEW</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_SET_VIEW(
        optr	view);</PRE>
<P>
This message passes the optr of the GenView object that will display this content object. The default handler will set the content's <CODE>
VCNI_view</CODE>
 field to the passed optr. This message is also used when the view has been shut down; the passed optr will be null.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
view</CODE>
	The optr of the GenView using this object as its content.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_ORIGIN_CHANGED">
 </A>
MSG_META_CONTENT_VIEW_ORIGIN_CHANGED</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_ORIGIN_CHANGED(@stack
        WindowHandle	 viewWindow,
        sdword		xOrigin,
        sdword		yOrigin);</PRE>
<P>
This message notifies the content that the view's origin has changed. The content will set its <CODE>
VCNI_docOrigin</CODE>
 field to the passed values.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
viewWindow</CODE>
	The window handle of the GenView's window.</P>
<DL>
<DT>
<CODE>
xOrigin</CODE>
</DT><DD>The new horizontal origin of the view.</DD>
<DT>
<CODE>
yOrigin</CODE>
</DT><DD>The new vertical origin of the view.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Any content that is managing large documents will probably need to subclass this message and apply the proper translations for the 32-bit coordinates.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED">
 </A>
MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED(@stack
        WindowHandle viewWindow,
        WWFixedAsDWord		yScaleFactor,
        WWFixedAsDWord		xScaleFactor);</PRE>
<P>
This message notifies the content that the view window's scale factor has changed. The content will set its <CODE>
VCNI_scaleFactor</CODE>
 field to the passed values.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
viewWindow</CODE>
	The window handle of the GenView's window.</P>
<DL>
<DT>
<CODE>
yScaleFactor</CODE>
</DT><DD>The new vertical scale factor.</DD>
<DT>
<CODE>
xScaleFactor</CODE>
</DT><DD>The new horizontal scale factor.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Any content that is managing large documents will probably need to subclass this message and apply the proper translations for the 32-bit coordinates.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_WIN_OPENED">
 </A>
MSG_META_CONTENT_VIEW_WIN_OPENED</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_WIN_OPENED(
        word		viewWidth,
        word		viewHeight,
        WindowHandle		viewWindow);</PRE>
<P>
This message notifies the content that the view's window has been created and is being put on the screen. This message will be followed by <CODE>
MSG_META_EXPOSED</CODE>
, so the content should not draw anything here.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
viewWidth</CODE>
	The new window's initial width.</P>
<DL>
<DT>
<CODE>
viewHeight</CODE>
</DT><DD>The new window's initial height.</DD>
<DT>
<CODE>
viewWindow</CODE>
</DT><DD>The window handle of the GenView's window.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	A content may wish to subclass this message if it needs to initialize data before the view's window is actually on the screen.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_OPENING">
 </A>
MSG_META_CONTENT_VIEW_OPENING</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_OPENING(
        optr	view);</PRE>
<P>
This message notifies the content that the view window is being put on the screen. Although the window will usually be fully realized by the time the content handles this message, the content should not draw anything in this handler. Because the view and content are often in different threads, a context switch could have occurred and the window might not be fully realized. This message will be followed by a <CODE>
MSG_META_EXPOSED</CODE>
 indicating that the visible tree can be drawn and that the window is fully opened.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
view</CODE>
	The optr of the GenView.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	A content may wish to subclass this message to initialize data before the view window is fully opened.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_SIZE_CHANGED">
 </A>
MSG_META_CONTENT_VIEW_SIZE_CHANGED</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_SIZE_CHANGED(
        word		viewWidth,
        word		viewHeight,
        WindowHandle		viewWindow);</PRE>
<P>
This message is sent to the content whenever the view's size changes for any reason. The passed height and width will be stored in the content's <CODE>
VCNI_viewHeight</CODE>
 and <CODE>
VCNI_viewWidth</CODE>
 fields.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
viewWidth</CODE>
	The new width of the view window.</P>
<DL>
<DT>
<CODE>
viewHeight</CODE>
</DT><DD>The new height of the view window.</DD>
<DT>
<CODE>
viewWindow</CODE>
</DT><DD>The window handle of the GenView's window.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Any content that is managing large documents may need to subclass this message to apply translations for 32-bit coordinates.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_CLOSING">
 </A>
MSG_META_CONTENT_VIEW_CLOSING</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_CLOSING();</PRE>
<P>
This message indicates to the content that the view window is being shut down. The content should remove the visible tree from the screen and should prepare itself for the window to be closed.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Interception:	A content may subclass this message if it wants to do additional things when the view is taken off the screen.</P>


<H6 CLASS="RefETitle">
<A NAME="VisContent_8.htm_IX_MSG_META_CONTENT_VIEW_WIN_CLOSED">
 </A>
MSG_META_CONTENT_VIEW_WIN_CLOSED</H6>
<PRE CLASS="syntax">void	MSG_META_CONTENT_VIEW_WIN_CLOSED(
        WindowHandle viewWindow);</PRE>
<P>
This message indicates that the view's window has been shut down, taken off the screen, and destroyed. The content responds to this message by discarding the window handle stored in its <CODE>
VCNI_window</CODE>
 field. The content should already have removed itself from the screen when it received an earlier <CODE>
MSG_VIS_CLOSE</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted--typically sent by a GenView to its content object.</P>
<P CLASS="refField">
Destination:	Any VisContent or Process object acting as the content of a GenView.</P>
<P CLASS="refField">
Parameters:	<CODE>
viewWindow</CODE>
	The window handle of the GenView's window.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	A content may subclass this message to clean up after the view window is closed (e.g. if the content cached the view's window handle to a global variable, it will need to zero that handle now).<A NAME="VisContent_8.htm_marker=314493">
 </A>
</P>

<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
