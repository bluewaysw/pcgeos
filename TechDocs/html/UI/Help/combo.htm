<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Help Object Library</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
Help Object Library

</H1>
<P>
<A NAME="index.htm_IX_help">
 </A>
On-line help is important for many applications, especially in the world of graphical interfaces and consumer devices. Many users will opt for exploration of an application rather than reading through the manual, and on-line help can assist them.</P>
<P>
The GEOS on-line help system is an information viewing tool to be used by most if not all GEOS applications. It is automated, and adding it to an application is simple. All you need to do is create your help documents with GeoWrite and then add a few help attributes to your application's generic UI objects.</P>
<P>

</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Help_1.htm">1 What Is Help?</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_2.htm">1.1 Normal Help</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_3.htm">1.2 First Aid</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_4.htm">1.3 Simple Help</A><BR>
&nbsp;&nbsp;<A HREF="#Help_5.htm">2 Adding Help to Your Application</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_6.htm">2.1 Help Contexts and Help Triggers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_7.htm">2.2 Adding Default Normal Help</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_8.htm">2.3 Bringing Up Help on the Fly</A><BR>
&nbsp;&nbsp;<A HREF="#Help_9.htm">3 Customizing Help</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_a.htm">3.1 Bringing Up Initial Help</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_b.htm">3.2 Adding the HelpControl</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_c.htm">3.3 Sizing the Help Dialog Box</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_d.htm">3.4 Managing Help Types</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_e.htm">3.5 Managing Help Files</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_f.htm">3.6 Customizing the Pointer Image</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_10.htm">3.7 Changing the Help Features</A><BR>
&nbsp;&nbsp;<A HREF="#Help_11.htm">4 Creating Help Files</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_12.htm">4.1 Enabling the Help Editor</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_13.htm">4.2 Organizing and Writing the Text</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_14.htm">4.3 Defining Files and Contexts</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_15.htm">4.4 Using Hyperlinks</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Help_16.htm">4.5 Generating the Help Files</A><BR>
&nbsp;&nbsp;<A HREF="#Help_17.htm">5 HelpControlClass Reference</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Help_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 1 
What Is Help?</H2>
<P>
GEOS provides four basic flavors of help ranging from simple descriptions to a full-featured information viewer complete with linked text and embedded graphics. GEOS help is both context-sensitive and random-access; a user may get help on the current dialog box, for example, or may invoke your help system's table of contents directly.</P>
<P>
How a user gets help depends on the system in use: A standard desktop PC will allow keyboard access with the F1 key as well as help triggers throughout the application's UI. A small-screen device may hide the help triggers and allow only a special &quot;hard icon,&quot; special pen gesture, or other means of activation to save screen space. (Such decisions are up to the specific UI.)</P>
<P>
Nearly all applications will use &quot;Normal Help,&quot; which provides a full-featured help viewer. The four types available are described below.</P>
<P CLASS="subsectionLink">
<A HREF="#Help_2.htm">Normal Help</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_3.htm">First Aid</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_4.htm">Simple Help</A></P>
<HR>
<A NAME="Help_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 1.1 <A HREF="#Help_1.htm">What Is Help?</A>: 
<A NAME="Help_2.htm_IX_help:Normal Help">
 </A>
Normal Help</H3>
<P>
Most applications will include <EM>
Normal Help</EM>
, which provides a full-featured help viewer complete with embedded graphics and hyperlinked text. Normal help allows you to organize your help data in any manner; it has a single Table of Contents (TOC) page, which the user can access at any point in viewing help. Your TOC page should hyperlink to any other pages associated or appropriate (it depends on the information you're presenting). See the figure below for a sample of Normal Help.</P>
<P>
Normal Help, like the other help types (see below), is also context-sensitive. You must define the contexts, but the help system will bring up the proper help page for the context. If the user clicks the help trigger on the primary window, for example, the TOC page is presented (by default). If the user clicks the trigger in a dialog box, however, the help page for that dialog box is presented.
<IMG SRC="Help_2_normalHelp.gif">

</P>
<HR>
<A NAME="Help_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 1.2 <A HREF="#Help_1.htm">What Is Help?</A>: 
<A NAME="Help_3.htm_IX_help:First Aid">
 </A>
First Aid</H3>
<P>
<EM>
First Aid</EM>
 help, like Normal Help, provides a full-featured help viewer. First Aid files are also organized by context, but the information is presented in a different format. Whereas Normal Help is organized around the structure of the application, First Aid is presented in a book format.</P>
<P>
When a user clicks the First Aid trigger, the help page for the proper context is displayed; this will typically be taken from the current Focus object (as in Standard Help). From there, the user may navigate throughout the help &quot;book&quot; via both hyperlinks in the text and three buttons at the top of the help window: Contents, Chapter, and Article. An illustration of the First Aid help box is shown below.</P>
<P>
To use First Aid, an application needs its own HelpControl object. Simply add one as a child of your GenApplication and set its help type to <CODE>
HT_FIRST_AID</CODE>
. The help controller must also be put on the application's active list.
<IMG SRC="Help_3_firstAidHelp.gif">

</P>
<HR>
<A NAME="Help_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 1.3 <A HREF="#Help_1.htm">What Is Help?</A>: 
<A NAME="Help_4.htm_IX_help:Simple Help">
 </A>
Simple Help</H3>
<P>
<EM>
Simple Help</EM>
 provides a small scrolling dialog box with help text. This is useful for places where very simple help is required, perhaps only a few lines to illustrate a simple operation. Simple Help may be most useful for appliance-type applications; most applications will use Standard Help or First Aid help. A sample screen of Simple help is shown below.</P>
<P>
Simple help, like First Aid, requires that the application have its own HelpControl object and that the help controller be on the active list. Text in simple help does not link, so all help text pertaining to the item must appear on a single page.
<IMG SRC="Help_4_simpleHelp.gif">

</P>
<HR>
<A NAME="Help_5.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 2 
Adding Help to Your Application</H2>
<P>
For most applications, simply creating help files and adding <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
 to certain generic objects will be sufficient. Other applications, though, such as those that use First Aid help, will require the addition of a HelpControl object (Normal help uses a system-provided and UI-run help controller).</P>
<P>
The HelpControl object interacts with the <CODE>
GenClass</CODE>
 and <CODE>
MetaClass</CODE>
 aspects of generic objects to create help triggers, put up help screens, and determine which help file is used and what help context is displayed. For normal help, you don't need a HelpControl object; the system provides one. You do, however, have to know how to declare help contexts and work with help files.</P>
<P CLASS="subsectionLink">
<A HREF="#Help_6.htm">Help Contexts and Help Triggers</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_7.htm">Adding Default Normal Help</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_8.htm">Bringing Up Help on the Fly</A></P>
<HR>
<A NAME="Help_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 2.1 <A HREF="#Help_5.htm">Adding Help to Your Application</A>: 
<A NAME="Help_6.htm_48998">
 </A>
Help Contexts and <A NAME="Help_6.htm_IX_help:help contexts">
 </A>
<A NAME="Help_6.htm_IX_help:help triggers">
 </A>
Help Triggers</H3>
<PRE><A NAME="Help_6.htm_IX_ATTR_GEN_HELP_CONTEXT"> </A>ATTR_GEN_HELP_CONTEXT, <A NAME="IX_HINT_PRIMARY_NO_HELP_BUTTON"> </A>HINT_PRIMARY_NO_HELP_BUTTON</PRE>
<P>
The help controller displays help pages based on an object's context. An object sets its context with <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
, which holds the name of the context. If an object does not have an assigned context, it will query up the tree until one of its ancestors assigns a context. The help control will display the help page with the same name as the assigned context.</P>
<P>
This attribute has some side effects. If placed on a GenPrimary object, it will create the help trigger that appears in the application's title bar (unless other restrictions are applied--see below). If placed on a dialog box GenInteraction, it will create a help trigger in the dialog box (placement of the trigger is subject to the specific UI, but it will normally be on the far right of the reply bar). Both of these triggers invoke help with the context of their objects.
<IMG SRC="Help_6_helpTriggers.gif">

</P>
<P>
Almost always, the GenPrimary's help context should be &quot;TOC&quot; to bring up the TOC help page. This is the default context, so if you don't specify a context for any object, help will always try to bring up the TOC page.</P>
<P>
As stated above, <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
 will by default create help triggers in certain situations. There are two times when creation of these help triggers will be suppressed: First, on small-screen devices or other situations wherein help triggers are not desired. In this situation, the .INI file will have a certain help option turned off. The simplest way to do this is to set</P>
<PRE><A NAME="Help_6.htm_IX_[uiFeatures]"> </A>[uiFeatures]
<A NAME="Help_6.htm_IX_helpOptions"> </A>helpOptions = 1</PRE>
<P>
in the .INI file. This corresponds to the single help option UIHO_HIDE_HELP_BUTTONS and will suppress the help triggers. Both the F1 key (or equivalent) and <CODE>
MSG_META_BRING_UP_HELP</CODE>
 will still invoke help properly.</P>
<P>
Second, you can suppress only the GenPrimary's help trigger by adding <CODE>
HINT_PRIMARY_NO_HELP_BUTTON</CODE>
 to the GenPrimary. Other help triggers will appear as dictated by the other requirements.</P>
<P>
You can create your own help triggers if you like, though there is rarely a need to. Help triggers can be normal GenTrigger objects, with special settings. If the trigger is in a dialog box, it should have <A NAME="Help_6.htm_IX_IC_HELP">
 </A>
IC_HELP as its interaction type (<CODE>
ATTR_GEN_TRIGGER_INTERACTION_COMMAND</CODE>
). Otherwise, it should send <A NAME="Help_6.htm_IX_MSG_META_BRING_UP_HELP">
 </A>
<CODE>
MSG_META_BRING_UP_HELP</CODE>
 to the object that should provide the context for the help. Also, the trigger should have its moniker specified with <CODE>
ATTR_GEN_DEFAULT_MONIKER</CODE>
, with the value GDMT_HELP<A NAME="Help_6.htm_IX_GDMT_HELP">
 </A>
. This will ensure your help trigger looks like other help triggers.</P>
<P>
Help triggers you create, however, will not be suppressed by the system. Thus, if you want your application to be adaptable to small-screen UIs, you should only use system-provided help triggers.</P>
<HR>
<A NAME="Help_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 2.2 <A HREF="#Help_5.htm">Adding Help to Your Application</A>: 
Adding Default Normal Help</H3>
<P>
To add normal help to your application, you only need to add <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
 to the objects that should have help contexts. You can look at the HelpSamp sample application, though that does much more than you need. The code shown in <A HREF="#Help_7.htm_33209"> Objects with Help Contexts</A>
 is taken from HelpSamp and shows a dialog box with a list, in which each entry has its own context.</P>
<P>
You will want to put <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
 on any generic object that could conceivably need help text. Nearly all applications will put help only on GenInteractions and GenPrimaries, but it is available for all generic objects. For example, items in a GenItemGroup may have help contexts (as shown in HelpSamp) so that when the user hits the F1 key, help will be invoked for that particular item. Likewise, menus and menu items may have their own help contexts.</P>
<P>
Nearly all GenPrimary objects should have the context &quot;TOC&quot; set for them.</P>
<P CLASS="figTitle">
Code Display 13-1 <A NAME="Help_7.htm_33209">
 </A>
Objects with Help Contexts</P>
<PRE>/*     The TypeDialog box has its own help context: Help Types. This will cause
 * the UI to put a help trigger in the dialog's reply bar and, when that trigger
 * is clicked, will cause the system's help object to bring up the normal help
 * viewer on the &quot;Help Types&quot; page in the current help file.
 *     Each item in the GenItemGroup has its own help context. The list itself
 * does not have a context because if the user presses the F1 key, the help system
 * will bring up the selected item's help. If it were a list in which there could
 * be zero items selected, then the list might have its own context as well. */</PRE>
<PRE>@object GenInteractionClass TypeDialog = {
    GI_visMoniker = 'T', &quot;Change Help Type&quot;;
    GI_comp = @TypeList;
    GII_visibility = GIV_DIALOG;
    GII_type = GIT_PROPERTIES;
    ATTR_GEN_HELP_CONTEXT = &quot;Help Types&quot;;
}</PRE>
<PRE>@object GenItemGroupClass TypeList = {
    GI_comp = @NormalItem, @FirstAidItem, @SimpleItem;
    GIGI_numSelections = 1;
    GIGI_selection = HT_NORMAL_HELP;
    GIGI_applyMsg = MSG_HELPSAMP_SET_TYPE;
    GIGI_destination = process;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>@object GenItemClass NormalItem = {
    GI_visMoniker = &quot;Normal Help&quot;;
    GII_identifier = HT_NORMAL_HELP;
    ATTR_GEN_HELP_CONTEXT = &quot;Normal Help&quot;;
}</PRE>
<PRE>@object GenItemClass FirstAidItem = {
    GI_visMoniker = &quot;First Aid&quot;;
    GII_identifier = HT_FIRST_AID;
    ATTR_GEN_HELP_CONTEXT = &quot;First Aid&quot;;
}</PRE>
<PRE>@object GenItemClass SimpleItem = {
    GI_visMoniker = &quot;Simple Help&quot;;
    GII_identifier = HT_SIMPLE_HELP;
    ATTR_GEN_HELP_CONTEXT = &quot;Simple Help&quot;;
}</PRE>
<HR>
<A NAME="Help_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 2.3 <A HREF="#Help_5.htm">Adding Help to Your Application</A>: 
Bringing Up Help on the Fly</H3>
<PRE><A NAME="Help_8.htm_IX_HelpSendHelpNotification"> </A>HelpSendHelpNotification()</PRE>
<P>
The Help Controller library provides a routine to bring up a help context, or to switch to a help context, at any time. This routine, <CODE>
HelpSendHelpNotification()</CODE>
, generates the proper notification event using the values you pass, then sends that notification to the help control object you've selected. This routine is detailed in the routines reference manual.</P>
<P>
This routine becomes most useful when, for example, you want help on visible objects in a GenView or in a document. To call up a help viewer with a specific help file and context, you would have the visible object intercept both your special &quot;help key&quot; (e.g. the user clicks the middle mouse button) and <CODE>
MSG_META_BRING_UP_HELP</CODE>
, then call <CODE>
HelpSendHelpNotification()</CODE>
. In the handler for the input event, the object should <EM>
not</EM>
 call the superclass. One example of this could be a special diagram of a floorplan, with each room a visible object; each &quot;room&quot; would bring up a different help context describing the characteristics of the room.</P>
<HR>
<A NAME="Help_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3 
Customizing Help</H2>
<P>
If you want to use one of the other help types, or if you want to use multiple help types in a single application, you must do more than just apply help contexts to objects. You can customize several things about the help system:</P>
<UL>
<LI>
Help Type<BR>
You can set or change the type of help offered by your application. You must have one HelpControl object for each type of help offered. You can set different objects to display or use different help types.</LI>
<LI>
Help File<BR>
Any object can specify the name of the file from which it draws its help. You can set the help file statically, change it dynamically, or have it defined by the GEOS.INI file.</LI>
<LI>
Pointer Image<BR>
The help system lets you define a custom pointer image to be used when the mouse pointer is over a hyperlink. You define the image, and the help controller uses that instead of the standard link pointer.</LI>
<LI>
Help Features<BR>
Because the HelpControl object is a controller, it has a certain feature set that may be turned on and off with <CODE>
ATTR_GEN_CONTROL_REQUIRE_UI</CODE>
 and <CODE>
ATTR_GEN_CONTROL_PROHIBIT_UI</CODE>
. The features include the buttons presented to the user for navigating the help file and for closing the dialog box.</LI>
</UL>
<P>
You can even create special &quot;viewer&quot; applications based on the help object. To make any of the above customizations, however, you must add one or more HelpControl objects to your application.</P>
<P CLASS="subsectionLink">
<A HREF="#Help_a.htm">Bringing Up Initial Help</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_b.htm">Adding the HelpControl</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_c.htm">Sizing the Help Dialog Box</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_d.htm">Managing Help Types</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_e.htm">Managing Help Files</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_f.htm">Customizing the Pointer Image</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_10.htm">Changing the Help Features</A></P>
<HR>
<A NAME="Help_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.1 <A HREF="#Help_9.htm">Customizing Help</A>: 
Bringing Up Initial Help</H3>
<PRE><A NAME="Help_a.htm_IX_ATTR_HELP_INITIAL_HELP_FILE"> </A>ATTR_HELP_INITIAL_HELP_FILE, <A NAME="IX_ATTR_HELP_INITIAL_HELP"> </A>ATTR_HELP_INITIAL_HELP</PRE>
<P>
An object may use <CODE>
ATTR_HELP_INITIAL_HELP_FILE</CODE>
 and <CODE>
ATTR_HELP_INITIAL_HELP</CODE>
 to bring up a help context when the object becomes usable. <CODE>
ATTR_HELP_INITIAL_HELP_FILE</CODE>
 defines the help file from which the help is to be taken; it is only used if <CODE>
ATTR_HELP_INITIAL_HELP</CODE>
 is also present. This one defines the help context to be brought up on startup.</P>
<P>
These attributes are used normally only by help-viewer applications, as it is unlikely help will be required on startup. Normally, help is brought up by the user pressing a help trigger.</P>
<HR>
<A NAME="Help_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.2 <A HREF="#Help_9.htm">Customizing Help</A>: 
Adding the HelpControl</H3>
<P>
To add a help controller to your application, simply declare an instance of <CODE>
HelpControlClass</CODE>
 and add it as a child of your GenApplication, adding it to the active list. The code in <A HREF="#Help_b.htm_39198"> Adding Help Controllers</A>
 is taken from the HelpSamp sample application and illustrates what you have to do to support custom help. The steps are</P>
<UL>
<LI>
Declare the HelpControl<BR>
Declare an object of <CODE>
HelpControlClass</CODE>
. You must set its <CODE>
HCI_helpType</CODE>
 field to the <CODE>
HelpType</CODE>
 value it will manage. Because the standard behavior is to have the help window always appear on top of other dialog boxes, you should set the window priority accordingly (as shown). Also, because most controllers will come up disabled, set the GS_ENABLED flag to have the help buttons enabled when help is first invoked.</LI>
<LI>
Add the HelpControl to the active list<BR>
The HelpControl, as all controllers, must be put on the active list, the MGCNLT_ACTIVE_LIST<A NAME="Help_b.htm_IX_MGCNLT_ACTIVE_LIST">
 </A>
 GCN list. All of your help controllers must be on this list.</LI>
<LI>
Set the help type in the GenApplication<BR>
If you're simply using a different help type, set it in the GenApplication object with <CODE>
ATTR_GEN_HELP_TYPE</CODE>
. The sample code shown does not have this attribute because the application uses multiple types but defaults to Normal Help. The user has the option of changing the help type; when the type is changed, <CODE>
ATTR_GEN_HELP_TYPE</CODE>
 is added to the GenApplication dynamically.</LI>
</UL>
<P>
Other than the above customizations, using another help type is as simple as using Normal Help. Other considerations must be observed when creating the help files, but the code difference is simple.</P>
<P CLASS="figTitle">
Code Display 13-2 <A NAME="Help_b.htm_39198">
 </A>
Adding Help Controllers</P>
<PRE>/*    The GenApplication has two help controllers as its children.
 * FirstAidHelpControl manages First Aid help, and SimpleHelpControl manages
 * Simple Help. In addition, the Normal Help controller--provided by the
 * system--manages Normal Help. Both custom help controllers must be put both on
 * the active list and on the GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE list.
 *    Normally, the GenApplication would have ATTR_GEN_HELP_TYPE declaring the
 * help type used. This application, however, defaults to HT_SYSTEM_HELP and
 * therefore does not need the attribute. */</PRE>
<PRE>@object GenApplicationClass HelpSampApp = {
    GI_visMoniker = list { @HelpSampTextMoniker };
    GI_comp = @HelpSampPrimary, @FirstAidHelpControl, @SimpleHelpControl;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @HelpSampPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE) =                                     @FirstAidHelpControl, @SimpleHelpControl;
    gcnList(MANUFACTURER_ID_GEOWORKS, MGCNLT_ACTIVE_LIST) =
				@FirstAidHelpControl, @SimpleHelpControl;
}</PRE>
<PRE>@visMoniker HelpSampTextMoniker = &quot;C Sample App with Help&quot;;</PRE>
<PRE>/*    The help controllers may manage at most one HelpType each. Thus, you must
 * set the HCI_helpType field so the controller knows what type of help it
 * manages. */</PRE>
<PRE>@object HelpControlClass FirstAidHelpControl = {
    GI_states = @default | GS_ENABLED;
    HCI_helpType = HT_FIRST_AID;
}</PRE>
<PRE>@object HelpControlClass SimpleHelpControl = {
    GI_states = @default | GS_ENABLED;
    HCI_helpType = HT_SIMPLE_HELP;
}</PRE>
<HR>
<A NAME="Help_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.3 <A HREF="#Help_9.htm">Customizing Help</A>: 
Sizing the Help Dialog Box</H3>
<PRE><A NAME="Help_c.htm_IX_HINT_HELP_TEXT_FIXED_SIZE"> </A>HINT_HELP_TEXT_FIXED_SIZE, HINT_HELP_NOT_RESIZABLE</PRE>
<P>
Depending on what you're using help for, you may want to keep the help dialog box a fixed size, or you may wish to make it not resizable. For both cases, you must use a custom help controller object and set one of the following hints on the controller:</P>
<DL>
<DT>
<CODE>
HINT_HELP_TEXT_FIXED_SIZE</DT><DD>
</CODE>
This hint is exactly the same as <CODE>
GenClass</CODE>
' <CODE>
HINT_FIXED_SIZE</CODE>
; it takes a <CODE>
CompSizeHintArgs</CODE>
 structure as its extra data and sets the help controller's dialog box to the fixed size.</DD>
<DT>
<CODE>
HINT_HELP_NOT_RESIZABLE</DT><DD>
</CODE>
<A NAME="Help_c.htm_IX_HINT_HELP_NOT_RESIZABLE">
 </A>
Normally, help controllers set up as GIV_DIALOG are resizable. This hint will counteract that behavior and make the window not resizable.</DD>
</DL>
<HR>
<A NAME="Help_d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.4 <A HREF="#Help_9.htm">Customizing Help</A>: 
Managing Help Types</H3>
<PRE><A NAME="Help_d.htm_IX_HelpType"> </A>HelpType, <A NAME="IX_ATTR_GEN_HELP_TYPE"> </A>ATTR_GEN_HELP_TYPE, <A NAME="IX_MSG_META_GET_HELP_TYPE"> </A>MSG_META_GET_HELP_TYPE</PRE>
<P>
The brand of help your application provides is defined by its <CODE>
HelpType</CODE>
. This value is set in the HelpControl object's <CODE>
HCI_helpType</CODE>
 instance field. For normal help, you don't need to set anything; the type will automatically be HT_SYSTEM_HELP for the system help object (you should not set this type for your own help control objects).</P>
<P>
There are five other help types you can use: HT_NORMAL_HELP, HT_FIRST_AID, HT_STATUS_HELP, HT_SIMPLE_HELP, and HT_SYSTEM_MODAL_HELP. You should only explicitly use HT_NORMAL_HELP if you want the normal help setup with some customizations or you are creating a viewer application. The others you must use explicitly if you want to provide those types of help.</P>
<P>
(Note: HT_SYSTEM_MODAL_HELP is used for providing help within system-modal dialog boxes only. It is rare that an application will ever use system-modal dialog boxes, but if yours does and you need to provide help within it, use this special type. Such dialog boxes should be given the attribute ATTR_GEN_HELP_TYPE with this type to distinguish them from other dialogs.)</P>
<P>
To set an application's help type, you have to first supply a HelpControl object as a child of the GenApplication and set its <CODE>
HCI_helpType</CODE>
 field to the proper help type. You also have to put your HelpControl object on the GenApplication's GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE GCN list. You may have one HelpControl object for each help type supported by your application.</P>
<P>
Examples of how to set up the proper objects are shown above in <A HREF="#Help_b.htm_39198"> Adding Help Controllers</A>
.</P>
<P>
Any object may have any help type associated with it. You could have, for example, one dialog box set to Normal Help and another set for Simple Help. This is unusual, and you will usually want to stick to a single help type within one application. To set an object's help type, use <CODE>
ATTR_GEN_HELP_TYPE</CODE>
. You can retrieve the current help type of an object by sending it <CODE>
MSG_META_GET_HELP_TYPE</CODE>
.</P>
<HR>
<A NAME="Help_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.5 <A HREF="#Help_9.htm">Customizing Help</A>: 
Managing Help Files</H3>
<PRE><A NAME="Help_e.htm_IX_ATTR_GEN_HELP_FILE"> </A>ATTR_GEN_HELP_FILE, <A NAME="IX_ATTR_GEN_HELP_FILE_FROM_INIT_FILE"> </A>ATTR_GEN_HELP_FILE_FROM_INIT_FILE, <A NAME="IX_MSG_META_GET_HELP_FILE"> </A>MSG_META_GET_HELP_FILE, <A NAME="IX_MSG_META_SET_HELP_FILE"> </A>MSG_META_SET_HELP_FILE, <A NAME="IX_ATTR_GEN_CONTROL_DO_NOT_USE_LIBRARY_NAME_FOR_HELP"> </A>ATTR_GEN_CONTROL_DO_NOT_USE_LIBRARY_NAME_FOR_HELP</PRE>
<P>
The help controller gets the text it displays from help files. Help files are generated by the help editor (a modified GeoWrite) from GeoWrite documents and are located in USERDATA\HELP. An application may use a single help file or multiple help files, and hyperlinks may extend across files.</P>
<P>
The help controller figures out the help file to use by looking for <CODE>
ATTR_GEN_HELP_FILE</CODE>
 on the generic object that brings up the help. For example, if the user clicks a help trigger in a dialog box, the help controller first gets the context of the dialog box (contexts are described in <A HREF="#Help_6.htm_48998"> Help Contexts and Help Triggers</A>
) and will then get its help file. If the dialog box has an <CODE>
ATTR_GEN_HELP_FILE</CODE>
 specifying a particular help file, the help controller will try to use that file.</P>
<P>
If the dialog box does not have that attribute, the help controller queries up the generic tree until it either finds an ancestor with the attribute or gets to the GenApplication object. If no help file is specified, the help controller will by default use a file with the same name as the geode's permanent name with the extender characters removed. For example, in the sample application HelpSamp, which has the permanent name <EM>
helpsamp.app</EM>
 (which is defined in the <STRONG CLASS="fileName">
helpsamp.gp</STRONG>
 file), the default file name would be <STRONG CLASS="fileName">
helpsamp</STRONG>
.</P>
<P>
<A NAME="Help_e.htm_IX_help:Sample Application">
 </A>
An object can use <CODE>
ATTR_GEN_HELP_FILE_FROM_INIT_FILE</CODE>
 to specify that its help file should be garnered from the GEOS.INI file. If this attribute is used, the help controller will look in the GEOS.INI file for a category of the same name as the application and a key named &quot;helpfile.&quot; Thus, to set the help file to &quot;My Own Help File&quot; for the HelpSamp application, you could add the following to your GEOS.INI file:</P>
<PRE>[HelpSamp]
helpfile = My Own Help File</PRE>
<P>
If, however, no object has <CODE>
ATTR_GEN_HELP_FILE_FROM_INIT_FILE</CODE>
, this entry will not be noticed by the help controller.</P>
<P>
Controller objects, which typically exist within their own libraries, may use the help files provided by the application that includes them rather than the help file normally used by the library. To have a controller do this, set <CODE>
ATTR_GEN_CONTROL_DO_NOT_USE_LIBRARY_NAME_FOR_HELP</CODE>
 for the controller in your application. This will have the controller continue querying up the generic tree when searching for the proper help file to use.</P>
<P>
The help file used by a given object may also be changed dynamically with <CODE>
MSG_META_SET_HELP_FILE</CODE>
. This message takes a pointer to the new file's name and sets the object's <CODE>
ATTR_GEN_HELP_FILE</CODE>
 attribute to the new file. This message is used by the HelpSamp sample application.</P>
<P>
The help file can be retrieved with <CODE>
MSG_META_GET_HELP_FILE</CODE>
. This message returns the name of the file being used by the recipient generic object.</P>
<HR>
<A NAME="Help_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.6 <A HREF="#Help_9.htm">Customizing Help</A>: 
Customizing the Pointer Image</H3>
<PRE><A NAME="Help_f.htm_IX_ATTR_HELP_CUSTOM_POINTER_IMAGE"> </A>ATTR_HELP_CUSTOM_POINTER_IMAGE, <A NAME="IX_MSG_HELP_CONTROL_GET_POINTER_IMAGE"> </A>MSG_HELP_CONTROL_GET_POINTER_IMAGE</PRE>
<P>
The help controller changes the pointer image when the pointer is over a link in the help text. This is so the user knows where to click and expects a link to be followed. Applications that want custom pointers can set the &quot;link&quot; pointer image with <CODE>
ATTR_HELP_CUSTOM_POINTER_IMAGE</CODE>
. This attribute takes an optr to a custom pointer image definition.</P>
<P>
The pointer image is a <CODE>
PointerDef</CODE>
 structure and must be stored in a chunk in a sharable, non-duplicated data block. Note also that to use a custom pointer image, you must explicitly declare a HelpControl object, even for Normal Help.</P>
<P>
You can retrieve the link pointer image by sending <CODE>
MSG_HELP_CONTROL_GET_POINTER_IMAGE</CODE>
<A NAME="Help_f.htm_IX_MSG_HELP_CONTROL_GET_POINTER_IMAGE">
 </A>
 to the HelpControl object. This will return the current image in use, either a custom image or the default. This message is detailed on <A HREF="#Help_17.htm_27109"> MSG_HELP_CONTROL_GET_POINTER_IMAGE</A>
.</P>
<HR>
<A NAME="Help_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 3.7 <A HREF="#Help_9.htm">Customizing Help</A>: 
Changing the Help Features</H3>
<P>
Because the HelpControl is a subclass of <CODE>
GenControlClass</CODE>
, you can change the features it offers both in your <STRONG CLASS="fileName">
.goc</STRONG>
 file and dynamically. For complete information, see <A HREF="../../SysObjects/Controllers/Controllers_2.htm#78121">the Controllers chapter</A>. The features of the help controller are detailed in <A HREF="#Help_17.htm_24795"> HelpControlClass Reference</A>
.</P>
<HR>
<A NAME="Help_11.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4 
<A NAME="Help_11.htm_IX_help:Help Files">
 </A>
Creating Help Files</H2>
<P>
Perhaps the most involved step of adding help to your application is actually creating the help files. Help files are special, compressed versions of GeoWrite files that reside in the \USERDATA\HELP directory. There are several steps to creating help files:</P>
<OL>
<LI>
Enable the Help Editor<BR>
The Help Editor is simply a special version of GeoWrite.</LI>
<LI FIXME_NumListOther>
Organize and write the text<BR>
Depending on your application, your help text, and how you wish to present it, this can be simple or complex. You must keep several things in mind when organizing your help.</LI>
<LI FIXME_NumListOther>
Define files and contexts<BR>
Each help file must have its contexts named, and each context must be defined. If you are using multiple help files, you must define the help contexts for each file in use, and you must &quot;define&quot; each file being used.</LI>
<LI FIXME_NumListOther>
Set contexts<BR>
Each page of help must have its own context name.</LI>
<LI FIXME_NumListOther>
Set hyperlinks<BR>
After all contexts are named and set, you may set hyperlinks to them.</LI>
<LI FIXME_NumListOther>
Generate the help files<BR>
When the help text is ready, you must generate the help file(s). They will then be available for your application to open and view.</LI>
</OL>
<P CLASS="subsectionLink">
<A HREF="#Help_12.htm">Enabling the Help Editor</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_13.htm">Organizing and Writing the Text</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_14.htm">Defining Files and Contexts</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_15.htm">Using Hyperlinks</A></P>
<P CLASS="subsectionLink">
<A HREF="#Help_16.htm">Generating the Help Files</A></P>
<HR>
<A NAME="Help_12.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4.1 <A HREF="#Help_11.htm">Creating Help Files</A>: 
Enabling the Help Editor</H3>
<P>
The Help Editor is GeoWrite with the Help Editor option turned on. To turn on this option, manually edit your .INI file to add the category and key as follow:</P>
<PRE>[configure]
<A NAME="Help_12.htm_IX_help:helpEditor"> </A>helpEditor = true</PRE>
<P>
Without the above lines, you can't access the Help Editor. After adding them, start up GeoWrite and change the user level. Choose &quot;Customize&quot; and turn on the Help Editor option at the end of the list. When you apply the change, a new &quot;Help Editor&quot; menu should appear towards the right of the menu bar.</P>
<HR>
<A NAME="Help_13.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4.2 <A HREF="#Help_11.htm">Creating Help Files</A>: 
Organizing and Writing the Text</H3>
<P>
If your help text is simple and straightforward, you can probably dive right in and write it. If it is not, though, you should spend some time up front organizing it, naming the contexts and files, and figuring out where hyperlinks will be placed. Defining contexts and links as you're writing can quickly get confusing, even for experienced writers.</P>
<P>
Most help text will be configured for Normal Help. This type of help typically has a table of contents page (TOC) and numerous other contexts, many of which are linked to each other. Normally, a help context (page) will be accessible through two means: First, the user could click a help trigger or hit F1 at the right time to bring up the proper context. In this case, the user can not &quot;go back&quot; to the previous context, although he can get to the TOC page by clicking the Contents button. Second, the user could navigate through the help system via hyperlinks and get to the context.</P>
<P>
Not all contexts may be available through links, however; some may be accessible only through clicking a help trigger or hitting F1. Other contexts may be accessible only via navigation of hyperlinks in the help document. You should plan this out in advance so you can write effective text and set your links properly.</P>

<H4 CLASS="HeadingC">
Organizing the Help</H4>
<P>
Perhaps the most straightforward help organization is a simple listing of topics, each of which is a hyperlink to another help screen. For example, the &quot;Change File&quot; help screen in the HelpSamp sample application's default file gives a brief description of the Change File dialog box and then three subtopics, each of which links to another context in the help file. (This screen is shown below.)</P>
<P>
A First Aid file, however, is designed differently. It has three &quot;levels&quot; of help: Contents, Chapter, and Article. The Contents page is a TOC page, just as in Normal Help. The TOC button allows the user quick access to that level at all times. When the user selects an entry on the TOC page, a Chapter-level context should be brought up. At this point, only the TOC button is enabled, and the Chapter button is enabled and selected.
<IMG SRC="Help_13_sampleContext.gif">

</P>
<P>
The Chapter-level context should similarly list subtopics of interest. When the user selects one of these, an Article-level context will be displayed. At this point, both the Contents button and the Chapter button will be enabled, allowing the user to &quot;back up&quot; to one of those previous levels. Also at this point, the Article button will be enabled and selected. The Article-level context (currently viewed) may contain a list of several questions or subtopics. When the user follows one of these links, the Article button will be enabled but deselected, allowing the user to quickly return to any of the three levels traversed to this point.</P>
<P>
First Aid, like Normal Help, may have contexts linked to any other contexts in the same or other files; they are not restricted to the TOC-Chapter-Article links mentioned above.</P>
<P>
Simple Help normally will not have any links because it offers no way to go back or even to return to a TOC page. If your application offers Simple Help, you should keep it straightforward and not put in any links.</P>


<H4 CLASS="HeadingC">
Using Visual Cues and Graphics</H4>
<P>
Although the help controller will change the pointer image when the pointer is over a hyperlink, you should use graphics or highlighted text whenever possible to call attention to the links. Because the Help Editor is extended GeoWrite, anything you can do to normal GeoWrite text you can put in your help files.</P>
<P>
Long pages of text can be difficult to read unless you put in headers or other highlighting. Some suggested highlighting techniques are to use colored or gradient-filled text, use the boxed or button text styles, or underline the text. Using different sizes and fonts is also effective. Keep in mind, however, that many users will have monochrome, CGA-style screens.</P>
<P>
You can also embed graphics in the text. This does not include using the &quot;graphic layer&quot; of GeoWrite, however--since the Help Editor uses only the text layer, it will not use graphics pasted to the graphic layer. You must paste them directly into the text.</P>
<P>
A useful tip to creating consistent help documents is to pre-define a number of style sheets in GeoWrite and use those styles for all your help. Any time a new style is required, create a new style sheet.</P>

<HR>
<A NAME="Help_14.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4.3 <A HREF="#Help_11.htm">Creating Help Files</A>: 
Defining Files and Contexts</H3>
<P>
If all your help resides within single files and links do not cross files (all links are internal to their own files), then defining contexts is simple. However, if links can cross files, you must do a little more work.</P>
<P>
When you &quot;define a context,&quot; you are notifying the Help Editor that a context with a given name and type exists in the specified file. When all links are internal to a single file, or when you have no links (as with Simple Help), you can simply define contexts for the &quot;same file.&quot; However, if you have links crossing files, you must define both the file and context for each external link (similar in function to an &quot;external&quot; definition in your code).</P>

<H5 CLASS="HeadingD">
To Define a File</H5>
<P>
Open the Define File dialog box via the Help Editor menu. Type the name of the file that will have links into it, and click &quot;Add File.&quot; You can delete or rename previously defined files.
<IMG SRC="Help_14_defineFileDlg.gif">

</P>


<H5 CLASS="HeadingD">
To Define a Context</H5>
<P>
Open the Define Context dialog box via the Help Editor menu. Use the upper-left popup list to select which file the new context will be defined for. Use the upper-right popup list to define the type of the file:</P>
<DL>
<DT>
<STRONG>
Text</STRONG>
</DT><DD>A normal text help page. Use this for all contexts in all help types except First Aid as noted below.
<IMG SRC="Help_14_defineContextDlg.gif">

</DD>
<DT>
TOC</DT><DD>A First Aid TOC page.</DD>
<DT>
<STRONG>
Chapter</STRONG>
</DT><DD>A First Aid Chapter-level page.</DD>
<DT>
<STRONG>
Article</STRONG>
</DT><DD>A First Aid Article-level page.</DD>
</DL>
<P>
Once you've selected the proper type, name the context and click &quot;Add Context.&quot; You can also delete and rename previously-defined contexts.</P>


<H5 CLASS="HeadingD">
To Set a Context</H5>
<P>
Each help page may be recognized as only one context. To set a context</P>
<OL>
<LI>
Open the &quot;Set Context&quot; dialog box via the Help Editor menu. </LI>
<LI FIXME_NumListOther>
Select some text at the beginning of the help page. Be sure that you have the page's first character selected; otherwise the context name may not &quot;take&quot;.</LI>
<LI FIXME_NumListOther>
Select the context name from the dialog box, and click &quot;Apply.&quot; That page will be set to the selected context.</LI>
</OL>
<P>
Pages in the GeoWrite file that do not have help contexts applied will not be generated into the help file. This fact is useful for recording information within the file about the file itself (release dates, draft dates, author name, revision notes, etc.).
<IMG SRC="Help_14_setContextDlg.gif">

</P>

<HR>
<A NAME="Help_15.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4.4 <A HREF="#Help_11.htm">Creating Help Files</A>: 
Using <A NAME="Help_15.htm_IX_help:hyperlinks">
 </A>
Hyperlinks</H3>
<P>
You can set any selected text or graphic to be a hyperlink to another context in any help file. To set a hyperlink, open the &quot;Set Hyperlink&quot; dialog box via the Help Editor menu. Select the text that, when clicked on, should cause the new context page to appear. Then select, in the &quot;Set Hyperlink&quot; dialog, the appropriate file and context names. Click &quot;Apply,&quot; and the selected text and/or graphic will act as a hyperlink to that file and context.</P>
<P>
Once a hyperlink is created, you can follow it in the GeoWrite document by using the &quot;Follow Hyperlink&quot; entry in the Help Editor menu. This option will not be enabled unless the current cursor or selection is a hyperlink.
<IMG SRC="Help_15_setHyperlinkDlg.gif">

</P>
<HR>
<A NAME="Help_16.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 4.5 <A HREF="#Help_11.htm">Creating Help Files</A>: 
Generating the Help Files</H3>
<P>
Once the help file is created, all the contexts are defined and set, and all the hyperlinks (if any) are established, you can generate the help file. When the file is generated, it is automatically placed in USERDATA\HELP, and it will have the same name as the GeoWrite document being edited. Thus, if you are editing a file called &quot;helpsamp,&quot; the help file would be USERDATA\HELP\<STRONG CLASS="fileName">
helpsamp</STRONG>
.</P>
<P>
The help file may be compressed or not. The default is to compress the help data to save disk space. Since help files are read-only, the help controller decompresses the data when loading it, then simply discards it when done. <A NAME="Help_16.htm_IX_help:data compression">
 </A>
The &quot;Compress Data in File&quot; option in the Help Editor menu allows you to specify whether the help file should be compressed or not (just about the only time it should not be compressed is for Status Help).</P>
<P>
To generate the help file, simply select &quot;Generate Help File&quot; in the Help Editor menu. The generation is one-way; you can <EM>
not</EM>
 edit a help file. You should, therefore, keep your original GeoWrite documents containing the help text available in case they require editing or update<A NAME="Help_16.htm_marker=57505">
 </A>
.</P>
<HR>
<A NAME="Help_17.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Help Object Library</A>: 5 
<A NAME="Help_17.htm_24795">
 </A>
<A NAME="Help_17.htm_IX_HelpControlClass">
 </A>
HelpControlClass Reference</H2>
<P>
This section will only be useful if you plan on customizing help for your application. Nearly all of what you need for creating normal help files and adding help to your application is described in the previous sections. The following is detailed reference information for <CODE>
HelpControlClass</CODE>
 (shown in <A HREF="#Help_17.htm_23375"> HelpControlClass</A>
).</P>
<P CLASS="figTitle">
Code Display 13-3 <A NAME="Help_17.htm_23375">
 </A>
HelpControlClass</P>
<PRE>	@instance HelpType			<A NAME="Help_17.htm_IX_HCI_helpType"> </A>HCI_helpType;			/* See HelpType, below */
	@instance MemHandle			HCI_curFile;			/* Internal */
	@instance MemHandle			HCI_historyBuf;			/* Internal */
	@instance word			HCI_nameArrayVM;			/* Internal */
	@instance GeodeHandle			HCI_compressLib;			/* Internal */
	    @default GII_attrs = (@default | GIA_NOT_USER_INITIATABLE);
	    @default GII_visibility = GIV_DIALOG;</PRE>
<PRE>	@vardata void				<A NAME="Help_17.htm_IX_ATTR_HELP_SUPPRESS_INITIATE"> </A>ATTR_HELP_SUPPRESS_INITIATE;
	@vardata char[]				<A NAME="Help_17.htm_IX_ATTR_HELP_INITIAL_HELP"> </A>ATTR_HELP_INITIAL_HELP;
	@vardata optr				<A NAME="Help_17.htm_IX_ATTR_HELP_CUSTOM_POINTER_IMAGE"> </A>ATTR_HELP_CUSTOM_POINTER_IMAGE;
	@vardata CompSizeHintArgs 				<A NAME="Help_17.htm_IX_HINT_HELP_TEXT_FIXED_SIZE"> </A>HINT_HELP_TEXT_FIXED_SIZE;
	@vardata void				<A NAME="Help_17.htm_IX_HINT_HELP_NOT_RESIZABLE"> </A>HINT_HELP_NOT_RESIZABLE;
	@vardata char[]				<A NAME="Help_17.htm_IX_ATTR_HELP_INITIAL_HELP_FILE"> </A>ATTR_HELP_INITIAL_HELP_FILE;</PRE>
<PRE>typedef ByteEnum <A NAME="Help_17.htm_IX_HelpType"> </A>HelpType;
    #define HT_NORMAL_HELP				0
    #define HT_FIRST_AID				1
    #define HT_STATUS_HELP				2
    #define HT_SIMPLE_HELP				3
    #define HT_SYSTEM_HELP				4	/* Reserved for system use */</PRE>
<PRE>/* Internal Vardata fields--do not use these. */
	@vardata char[]			TEMP_HELP_ERROR_FILENAME;
	@vardata char[]			TEMP_HELP_TOC_FILENAME;
	@vardata void			TEMP_HELP_DETACH_RECEIVED;</PRE>
<P>
<CODE>
HelpControlClass</CODE>
 is a subclass of <CODE>
GenControlClass</CODE>
 and, as such, inherits the feature management attributes and messages thereof. For complete information on feature and tool sets, see <A HREF="../../SysObjects/Controllers/Controllers_1.htm#39608">the Controllers chapter</A>. The HelpControl object has features but no tools. The feature set of <CODE>HelpControlClass</CODE>
 is shown in <A HREF="#Help_17.htm_84556"> HelpControl Features</A>
.</P>
<P CLASS="figTitle">
Code Display 13-4 <A NAME="Help_17.htm_84556">
 </A>
HelpControl Features</P>
<PRE>/* These features can be turned on or off with ATTR_GEN_CONTROL_REQUIRE_UI and
 * ATTR_GEN_CONTROL_PROHIBIT_UI. They can be turned on or off dynamically with
 * MSG_GEN_CONTROL_ADD_FEATURE and MSG_GEN_CONTROL_REMOVE_FEATURE. */</PRE>
<PRE>typedef WordFlags <A NAME="Help_17.htm_IX_HPCFeatures"> </A>HPCFeatures;
    #define HPCF_HELP					0x0100	/* has a &quot;help on help&quot; trigger */
    #define HPCF_TEXT					0x0080	/* has text */
    #define HPCF_CONTENTS					0x0040	/* has &quot;Contents&quot; button */
    #define HPCF_HISTORY					0x0020	/* has &quot;History&quot; button */
    #define HPCF_GO_BACK					0x0010	/* has &quot;Go Back&quot; button */
    #define HPCF_CLOSE					0x0008	/* has &quot;Close&quot; button */
    #define HPCF_INSTRUCTIONS					0x0004	/* has &quot;Instructions&quot; button */
    #define HPCF_FIRST_AID_GO_BACK					0x0002	/* has &quot;Go Back&quot; button for
						 * First Aid */
    #define HPCF_FIRST_AID					0x0001	/* has First Aid configuration */</PRE>
<P>
<CODE>
HelpControlClass</CODE>
, as a GenControl subclass, receives notification when the controlled item changes. For example, a change in help context will cause the HelpControl object to display the new context page. The HelpControl object must be put on the <A NAME="Help_17.htm_IX_GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE">
 </A>
GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE notification list. When a context change occurs, the help controller will receive <CODE>
MSG_META_NOTIFY_WITH_DATA_BLOCK</CODE>
, with the notification type GWNT_HELP_CONTEXT_CHANGE<A NAME="Help_17.htm_IX_GWNT_HELP_CONTEXT_CHANGE">
 </A>
. This notification type passes a data block containing a <CODE>
NotifyHelpContextChange</CODE>
 structure, which is shown below.</P>
<P CLASS="figTitle">
Code Display 13-5 Help Notification Structure</P>
<PRE>/* This data structure is passed in MSG_META_NOTIFY_WITH_DATA_BLOCK to the help
 * controller when a change in the help context occurs. This structure can be
 * generated by calling HelpSendHelpNotification(). This structure uses the
 * following constant and type. */</PRE>
<PRE>#define MAX_CONTEXT_NAME_SIZE				22</PRE>
<PRE>typedef char		ContextName[MAX_CONTEXT_NAME_SIZE];</PRE>
<PRE>typedef struct {
    HelpType			NHCC_type;			/* HelpType involved in change */
    ContextName			NHCC_context;			/* New context to link to */
    FileLongName			NHCC_filename;			/* New file name to link to */
    FileLongName			NHCC_filenameTOC;			/* File name to get TOC from */
} <A NAME="Help_17.htm_IX_NotifyHelpContextChange"> </A>NotifyHelpContextChange;</PRE>
<P>
<CODE>
HelpControlClass</CODE>
 has two exported messages that subclasses may intercept. These are not often intercepted by subclasses. Their reference information is presented below.</P>

<H6 CLASS="RefETitle">
<A NAME="Help_17.htm_IX_MSG_HELP_CONTROL_FOLLOW_LINK">
 </A>
MSG_HELP_CONTROL_FOLLOW_LINK</H6>
<P>
Cause the HelpControl object to follow the specified link in the help file.</P>
<P CLASS="refField">
Source:	Unrestricted; typically internal to the controller.</P>
<P CLASS="refField">
Destination:	The HelpControl object to follow the link.</P>
<P CLASS="refField">
Parameters:	<CODE>
link name</CODE>
	16-bit token of the link name.</P>
<DL>
<DT>
<CODE>
link file</CODE>
</DT><DD>16-bit token of the link file.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Not generally intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Help_17.htm_27109">
 </A>
<A NAME="Help_17.htm_MSG_HELP_CONTROL_GET_POINTER_IMAGE">
 </A>
MSG_HELP_CONTROL_GET_POINTER_IMAGE</H6>
<P>
Return the pointer image to be used when the pointer is over a link in the help text. It looks for <CODE>
ATTR_HELP_CUSTOM_POINTER_IMAGE</CODE>
 and returns the pointer stored there; if no custom pointer exists, the default is returned.</P>
<P CLASS="refField">
Source:	Unrestricted; typically internal to the controller.</P>
<P CLASS="refField">
Destination:	The HelpControl object using the custom pointer.</P>
<P CLASS="refField">
Parameters:	<CODE>
not over link</CODE>
	Pass FALSE if the pointer is <EM>
not</EM>
 over a link, TRUE if it is. (Must pass TRUE, not just non-zero).</P>
<P CLASS="refField">
Return:	A word of <CODE>
MouseReturnFlags</CODE>
. If MRF_SET_POINTER_IMAGE is set in this record, the optr of the pointer image will also be returned. Otherwise, the optr will be NullOptr.</P>
<P CLASS="refField">
Interception:	A &quot;viewer&quot; application may subclass this and return its own pointer images if they are dynamic. If static pointer images are used, the application should use <CODE>
ATTR_HELP_CUSTOM_POINTER_IMAGE</CODE>
 instead. There is no need to call the superclass with this message<A NAME="Help_17.htm_marker=57469">
 </A>
.</P>

<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
