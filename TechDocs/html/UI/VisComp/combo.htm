<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>VisComp</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
VisComp

</H1>
<P>
<CODE>
VisCompClass</CODE>
<A NAME="index.htm_IX_VisCompClass">
 </A>
 allows visible objects to have children. VisComp objects are the grouping elements within visible object trees.</P>
<P>
If you need to have a visible object tree with several levels, or if you need to manage the geometry of visible objects, you will want to read this chapter. You should already be familiar with <CODE>
VisClass</CODE>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#VisComp_1.htm">1 VisCompClass Features</A><BR>
&nbsp;&nbsp;<A HREF="#VisComp_2.htm">2 VisCompClass Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_3.htm">2.1 VCI_comp</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_4.htm">2.2 VCI_gadgetExcl</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_5.htm">2.3 VCI_window</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_6.htm">2.4 VCI_geoAttrs</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_7.htm">2.5 VCI_geoDimensionAttrs</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_8.htm">2.6 Managing Instance Data</A><BR>
&nbsp;&nbsp;<A HREF="#VisComp_9.htm">3 Using VisCompClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_a.htm">3.1 Managing Geometry</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#VisComp_b.htm">3.2 Managing Graphic Windows</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="VisComp_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">VisComp</A>: 1 
VisCompClass Features</H2>
<P>
Composite visible objects provide several features and functions that normal visible objects can not. <CODE>
VisCompClass</CODE>
 has several instance data fields above and beyond those found in <CODE>
VisClass</CODE>
 (since <CODE>
VisCompClass</CODE>
 is a subclass of <CODE>
VisClass</CODE>
, it inherits all its instance data and methods). Although it only handles a few messages not defined in <CODE>
VisClass</CODE>
, it provides much more functionality. Some of the main features of composite objects are listed below:</P>
<UL>
<LI>
They can have children.<BR>
Normal visible objects can exist only as leaves of a visible object tree. <CODE>
VisCompClass</CODE>
 can have children, allowing the tree to be built to any number of levels. See <A HREF="../../UI/VisClass/VisClass_10.htm#50052">the VisClass chapter</A>for full information on visible trees.</LI>
<LI>
They can manage their children's geometry.<BR>
A composite's children can be managed arbitrarily by the composite, or the composite can use the geometry manager to automatically position and size its children. Since a composite can have other composites as its children, this sizing can descend recursively throughout the visible tree, making the entire tree's geometry completely self-managed. See <A HREF="#VisComp_a.htm_13351"> Managing Geometry</A>
 for information on geometry management.</LI>
<LI>
They can create and manage their own windows.<BR>
Composite objects can create their own graphics windows. Though this is not typically done (except in Specific UI libraries), it is possible. See <A HREF="#VisComp_b.htm_13783"> Managing Graphic Windows</A>
 for more information on windows.</LI>
<LI>
They support other <CODE>
VisClass</CODE>
 functions.<BR>
<CODE>
VisCompClass</CODE>
 inherits all the instance data fields and messages of <CODE>
VisClass</CODE>
. As such, it can do everything normal <CODE>
VisClass</CODE>
 objects can do. See <A HREF="../../UI/VisClass/combo.htm">the VisClass chapter</A>for full information on <CODE>
VisClass</CODE>
.</LI>
</UL>
<HR>
<A NAME="VisComp_2.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">VisComp</A>: 2 
<A NAME="VisComp_2.htm_55772">
 </A>
VisCompClass Instance Data</H2>
<P>
As stated above, <CODE>
VisCompClass</CODE>
 inherits all the instance data fields from <CODE>
VisClass</CODE>
. All of those fields may be set and reset as they could be for an object of that class. Composite objects also have four other instance fields, shown in <A HREF="#VisComp_2.htm_37927"> VisCompClass Instance Fields</A>
.</P>
<P CLASS="figTitle">
Code Display 16-1 <A NAME="VisComp_2.htm_37927">
 </A>
VisCompClass Instance Fields</P>
<PRE>/* The VisCompClass instance data fields are shown below and are discussed in
 * detail throughout the chapter. */</PRE>
<PRE>	/* VCI_comp
	 * VCI_comp contains the link to the composite object's first child. */</PRE>
<PRE>    @instance @composite				<A NAME="VisComp_2.htm_IX_VCI_comp"> </A>VCI_comp = VI_link;</PRE>
<PRE>	/* VCI_gadgetExcl
	 * VCI_gadgetExcl is an optr to the object that currently has the gadget
	 * exclusive. This field is rarely used directly by applications. */</PRE>
<PRE>    @instance optr				<A NAME="VisComp_2.htm_IX_VCI_gadgetExcl"> </A>VCI_gadgetExcl;</PRE>
<PRE>	/* VCI_window
	 * VCI_window contains the window handle of the graphics window associated
	 * with this object. This field is rarely accessed directly by
	 * applications; it is set by the visual update mechanism. */</PRE>
<PRE>    @instance WindowHandle				<A NAME="VisComp_2.htm_IX_VCI_window"> </A>VCI_window = NullHandle;</PRE>
<PRE>	/* VCI_geoAttrs
	 * VCI_geoAttrs is a record that defines some of the geometry management
	 * information for the composite. None of its values are set by default;
	 * the possible flags in this record are shown after the definition. */</PRE>
<PRE>    @instance VisCompGeoAttrs				<A NAME="VisComp_2.htm_IX_VCI_geoAttrs"> </A>VCI_geoAttrs = 0;
	/* Possible flags:
	 *	VCGA_ORIENT_CHILDREN_VERTICALLY					0x80
	 *	VCGA_INCLUDE_ENDS_IN_CHILD_SPACING					0x40
	 *	VCGA_ALLOW_CHILDREN_TO_WRAP					0x20
	 *	VCGA_ONE_PASS_OPTIMIZATION					0x10
	 *	VCGA_CUSTOM_MANAGE_CHILDREN					0x08
	 *	VCGA_HAS_MINIMUM_SIZE					0x04
	 *	VCGA_WRAP_AFTER_CHILD_COUNT					0x02
	 *	VCGA_ONLY_DRAWS_IN_MARGINS 					0x01
	 */</PRE>
<PRE>	/* VCI_geoDimensionAttrs
	 * VCI_geoDimensionAttrs is a record that contains additional information
	 * about the composite's geometry. This field contains two two-bit fields
	 * among its other flags. The default settings are shown in the definition;
	 * all possible flags and settings are shown following. */</PRE>
<PRE>    @instance <A NAME="VisComp_2.htm_IX_VisCompGeoDimensionAttrs"> </A>VisCompGeoDimensionAttrs					<A NAME="IX_VCI_geoDimensionAttrs"> </A>VCI_geoDimensionAttrs = 0;
	/* Possible flags:
	 <A NAME="VisComp_2.htm_IX_Geometry:object flags;justification flags"> </A>* Width Justification flags (mutually exclusive):
	 * VCGDA_WIDTH_JUSTIFICATION						0xc0
	 *	WJ_LEFT_JUSTIFY_CHILDREN					0x00
	 *	WJ_RIGHT_JUSTIFY_CHILDREN					0x40
	 *	WJ_CENTER_CHILDREN_HORIZONTALLY					0x80
	 *	WJ_FULL_JUSTIFY_CHILDREN_HORIZONTALLY					0xc0
	 *
	 * Height Justification flags (mutually exclusive):
	 * VCGDA_HEIGHT_JUSTIFICATION 						0x0c
	 *	HJ_TOP_JUSTIFY_CHILDREN					0x00
	 *	HJ_BOTTOM_JUSTIFY_CHILDREN,					0x04
	 *	HJ_CENTER_CHILDREN_VERTICALLY					0x08
	 *	HJ_FULL_JUSTIFY_CHILDREN_VERTICALLY					0x0c
	 *
	 * Other flags:
	 *	VCGDA_EXPAND_WIDTH_TO_FIT_PARENT					0x20
	 *	VCGDA_DIVIDE_WIDTH_EQUALLY					0x10
	 *	VCGDA_EXPAND_HEIGHT_TO_FIT_PARENT					0x02
	 *	VCGDA_DIVIDE_HEIGHT_EQUALLY					0x01
	 */</PRE>
<PRE>    @default <A NAME="VisComp_2.htm_IX_VI_typeFlags"> </A>VI_typeFlags = VTF_IS_COMPOSITE;</PRE>
<P CLASS="subsectionLink">
<A HREF="#VisComp_3.htm">VCI_comp</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_4.htm">VCI_gadgetExcl</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_5.htm">VCI_window</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_6.htm">VCI_geoAttrs</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_7.htm">VCI_geoDimensionAttrs</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_8.htm">Managing Instance Data</A></P>
<HR>
<A NAME="VisComp_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.1 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
VCI_comp</H3>
<P>
<A NAME="VisComp_3.htm_IX_VCI_comp">
 </A>
Normal visible objects have just one instance field for tree construction: the <CODE>
VI_link</CODE>
 field that points to the object's next sibling. For an object to have children, it must also have an instance field declared with the keyword <CODE>
@composite</CODE>
; this field, in <CODE>
VisCompClass</CODE>
, is <CODE>
VCI_comp</CODE>
. The composite field contains the optr of the object's first child; the link field contains a pointer to either the object's next sibling or its parent.</P>
<P>
Applications should never access the <CODE>
VI_link</CODE>
 or <CODE>
VCI_comp</CODE>
 fields directly at run-time; instead, these fields can be altered or queried with the following messages (all defined in <CODE>
VisClass</CODE>
):</P>
<DL>
<DT>
<CODE>
MSG_VIS_ADD_CHILD</DT><DD>
</CODE>
This message adds a new child object to the composite.</DD>
<DT>
<CODE>
MSG_VIS_REMOVE_CHILD</DT><DD>
</CODE>
This message removes a child from the composite.</DD>
<DT>
<CODE>
MSG_VIS_MOVE_CHILD</DT><DD>
</CODE>
This message moves a child within the composite's list of children.</DD>
<DT>
<CODE>
MSG_VIS_GET_PARENT</DT><DD>
</CODE>
This message returns a pointer to the object's parent.</DD>
</DL>
<P>
Several other messages may also be used to change or query any visible object's <CODE>
VI_link</CODE>
 and <CODE>
VCI_comp</CODE>
 fields. These are discussed in <A HREF="../../UI/VisClass/VisClass_10.htm#50052">the VisClass chapter</A>.</P><HR>
<A NAME="VisComp_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.2 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
VCI_gadgetExcl</H3>
<P>
Since the composite object must manage several other objects, it must also keep track of certain hierarchies used by the UI; the gadget exclusive is one of these. Within each branch of the visible object tree, only one visible object may have the gadget exclusive at a time. The gadget exclusive is kept track of via a path of pointers from the top of the tree down to the object having the exclusive.</P>
<P>
<A NAME="VisComp_4.htm_IX_VCI_gadgetExcl;Input:gadget exclusive;gadget exclusive">
 </A>
The <CODE>
VCI_gadgetExcl</CODE>
 field determines which child of the composite has the gadget exclusive. The child indicated in this field may or may not actually have the gadget exclusive for the entire visible tree; if the branch does not have the exclusive, neither will the child object. The gadget exclusive is similar to the other hierarchies of the input manager and acts the same way.</P>
<P>
Applications never access the <CODE>
VCI_gadgetExcl</CODE>
 field of a composite directly. Instead, this field may be set with the following three <CODE>
VisClass</CODE>
 messages:</P>
<DL>
<DT>
<CODE>
MSG_VIS_TAKE_GADGET_EXCL</DT><DD>
</CODE>
This message causes a visible object to set itself as having the gadget exclusive. The object's parent composite will set its <CODE>
VCI_gadgetExcl</CODE>
 field appropriately.</DD>
<DT>
<CODE>
MSG_VIS_RELEASE_GADGET_EXCL</DT><DD>
</CODE>
This message causes a visible object to relinquish its hold on the gadget exclusive. The object's parent composite will set its <CODE>
VCI_gadgetExcl</CODE>
 field appropriately.</DD>
<DT>
<CODE>
MSG_VIS_LOST_GADGET_EXCL</DT><DD>
</CODE>
This message is sent to the object having the gadget exclusive for that branch when it has lost the exclusive.</DD>
</DL>
<P>
The above messages are detailed in <A HREF="../../UI/VisClass/VisClass_f.htm#54447">the VisClass chapter</A>.</P><HR>
<A NAME="VisComp_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.3 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
VCI_window</H3>
<P>
Every visible object has a window associated with it in which it will be drawn. Normal <CODE>
VisClass</CODE>
 objects have no control over what window they're associated with; they must be in the same window as their composite parents. Composites may need to appear in different windows from their parents, however.<A NAME="VisComp_5.htm_IX_VCI_window">
 </A>
 Thus, <CODE>
VisCompClass</CODE>
 has the <CODE>
VCI_window</CODE>
 field, which contains the window handle of the window in which the composite's branch will be drawn.</P>
<P>
Applications will not access this field directly. Typically, composites will be drawn in the window associated with their parent composites or contents. Sometimes, however, an application will want a visible branch to appear in a window different from that of the rest of the visible tree. The composite then must use other <CODE>
VisClass</CODE>
 messages for creating and associating a window. This process is discussed in more detail in <A HREF="#VisComp_b.htm_13783"> Managing Graphic Windows</A>
.</P>
<HR>
<A NAME="VisComp_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.4 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
VCI_geoAttrs</H3>
<P>
<A NAME="VisComp_6.htm_IX_Geometry:object flags">
 </A>
The most-used feature of composite objects is their ability to manage the sizing and placement of their children. This is known as managing the composite's geometry.</P>
<P>
<A NAME="VisComp_6.htm_IX_Geometry:VCI_geoAttrs">
 </A>
<A NAME="VisComp_6.htm_IX_VisCompGeoAttrs">
 </A>
<A NAME="VisComp_6.htm_IX_VCI_geoAttrs">
 </A>
The geometry management behavior implemented by a particular composite object is determined by its <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
 fields. Both of these fields may be set and altered by applications as their geometry needs change. The <CODE>
VCI_geoAttrs</CODE>
 field, specifically, determines the type of geometry management employed by the composite.</P>
<P>
The <CODE>
VCI_geoAttrs</CODE>
 field may contain any or all of the following eight flags:</P>
<DL>
<DT>
VCGA_ORIENT_CHILDREN_VERTICALLY</DT><DD>
<A NAME="VisComp_6.htm_IX_VCGA_&ldots;">
 </A>
This flag indicates that the composite's children should be arranged vertically rather than the default (horizontally).</DD>
<DT>
VCGA_INCLUDE_ENDS_IN_CHILD_SPACING</DT><DD>
When the composite is using full justification (see <CODE>
VCI_geoDimensionAttrs</CODE>
), this flag indicates that there should be as much space before the first child and after the last child as there is between the children. If this flag is not set, there will be no space outside the first and last children.</DD>
<DT>
VCGA_ALLOW_CHILDREN_TO_WRAP</DT><DD>
This flag will allow the children to wrap if their combined lengths won't allow them to fit within the composite's bounds. The composite will keep within the bounds of its parent, and its children will wrap as necessary. If this flag is not set, the composite will try to grow to be as large as necessary to fit all children.</DD>
<DT>
VCGA_ONE_PASS_OPTIMIZATION</DT><DD>
This flag makes the geometry manager make only one pass at managing the children. It should only be set if the children can be guaranteed not to wrap or resize.</DD>
<DT>
VCGA_CUSTOM_MANAGE_CHILDREN</DT><DD>
This flag indicates that the composite will manage its children without using the geometry manager. This allows the composite or its children to manually determine their positions and sizes. If this flag is set, the composite will keep its own bounds in its <CODE>
VI_bounds</CODE>
 field, just as other Vis objects. This flag in a composite indicates custom management for the composite's entire branch, not just its children.</DD>
<DT>
VCGA_HAS_MINIMUM_SIZE</DT><DD>
This flag indicates that the composite has a minimum size. The geometry manager will query the composite for this minimum and will ensure the object never gets smaller than that regardless of the size of its children. The minimum size must be returned by a custom <CODE>
MSG_VIS_COMP_GET_MINIMUM_SIZE</CODE>
 handler.</DD>
<DT>
VCGA_WRAP_AFTER_CHILD_COUNT</DT><DD>
Used in conjunction with VCGA_ALLOW_CHILDREN_TO_WRAP, this flag will cause child wrapping after a certain number of children. This can cause wrapping based on the number of children rather than on child size. The geometry manager will query the composite with <CODE>
MSG_VIS_COMP_GET_WRAP_COUNT</CODE>
.</DD>
<DT>
VCGA_ONLY_DRAWS_IN_MARGINS</DT><DD>
This flag is used for optimized visual updates. It causes only the margins of the composite to be drawn when its image is marked invalid; all children of the composite must have their own images marked invalid if they are to be redrawn as well.</DD>
</DL>
<HR>
<A NAME="VisComp_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.5 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
VCI_geoDimensionAttrs</H3>
<P>
<A NAME="VisComp_7.htm_IX_VCI_geoDimensionAttrs">
 </A>
<A NAME="VisComp_7.htm_IX_Geometry:VCI_geoDimensionAttrs">
 </A>
The <CODE>
VCI_geoDimensionAttrs</CODE>
 field determines how the composite manages its children in each dimension. It provides the geometry information not given in <CODE>
VCI_geoAttrs</CODE>
 such as child justification and certain sizing behavior.</P>
<P>
It contains three fields for each dimension (horizontal and vertical): The first field represents the justification of the children in that dimension. This field is two bits and can be one of four different enumerations. The second and third fields are sizing flags. These fields are listed below:</P>
<DL>
<DT>
VCGDA_WIDTH_JUSTIFICATION</DT><DD>
<A NAME="VisComp_7.htm_IX_VisCompGeoDimensionAttrs">
 </A>
This is a two-bit field that can be set to any one of four possible width justifications. If the name of this field is used in place of one of the four values, full justification will be used. The justification can be set as a normal flag. The four different values are</DD>
<DT>
</DT><DD><A NAME="VisComp_7.htm_IX_WidthJustification">
 </A>
<A NAME="VisComp_7.htm_IX_WJ_&ldots;">
 </A>
WJ_LEFT_JUSTIFY_CHILDREN<BR>
Left justify the children.</DD>
<DT>
	WJ_RIGHT_JUSTIFY_CHILDREN</DT><DD>
Right justify the children.</DD>
<DT>
	WJ_CENTER_CHILDREN_HORIZONTALLY</DT><DD>
Center the children horizontally.</DD>
<DT>
	WJ_FULL_JUSTIFY_CHILDREN_HORIZONTALLY</DT><DD>
Full justify the children. Horizontal full justification is only meaningful if the children are oriented horizontally (by clearing VCGA_ORIENT_CHILDREN_VERTICALLY in <CODE>
VCI_geoAttrs</CODE>
).</DD>
<DT>
VCGDA_EXPAND_WIDTH_TO_FIT_PARENT</DT><DD>
If this flag is set, the composite will try to expand to fill the available width of its parent. By default, this flag is not set; the composite will be only as wide as its children require.</DD>
<DT>
VCGDA_DIVIDE_WIDTH_EQUALLY</DT><DD>
If this flag is set, the composite will try to divide space equally between all its manageable, horizontally-oriented children. The composite will only suggest sizes--the children may or may not cooperate.</DD>
<DT>
VCGDA_HEIGHT_JUSTIFICATION</DT><DD>
This is a two-bit field that can be set to any one of four height justifications. If the name of this field is used in place of one of the four values, full justification will be used. The justification can be set as a normal flag. The four different values are</DD>
<DT>
</DT><DD><A NAME="VisComp_7.htm_IX_HeightJustifications">
 </A>
<A NAME="VisComp_7.htm_IX_HJ_&ldots;">
 </A>
HJ_TOP_JUSTIFY_CHILDREN<BR>
Justify the children to the composite's top bound.</DD>
<DT>
	HJ_BOTTOM_JUSTIFY_CHILDREN</DT><DD>
Justify the children to the composite's bottom bound.</DD>
<DT>
	HJ_CENTER_CHILDREN_VERTICALLY</DT><DD>
Center the children vertically.</DD>
<DT>
	HJ_FULL_JUSTIFY_CHILDREN_VERTICALLY</DT><DD>
Full justify the children. Vertical full justification is only meaningful if the children are oriented vertically (by setting VCGA_ORIENT_CHILDREN_VERTICALLY in <CODE>
VCI_geoAttrs</CODE>
).</DD>
<DT>
VCGDA_EXPAND_HEIGHT_TO_FIT_PARENT</DT><DD>
If this flag is set, the composite will try to expand to fill the available height of its parent. By default, this flag is not set; the composite will be only as tall as its children require.</DD>
<DT>
VCGDA_DIVIDE_HEIGHT_EQUALLY</DT><DD>
If this flag is set, the composite will try to divide space equally between all its manageable, vertically-oriented children. The composite will only suggest sizes--the children may or may not cooperate<A NAME="VisComp_7.htm_marker=7671">
 </A>
.</DD>
</DL>
<HR>
<A NAME="VisComp_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 2.6 <A HREF="#VisComp_2.htm">VisCompClass Instance Data</A>: 
Managing Instance Data</H3>
<PRE>MSG_VIS_COMP_GET_GEO_ATTRS, MSG_VIS_COMP_SET_GEO_ATTRS</PRE>
<P>
To retrieve the flags currently set in both <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
, use <CODE>
MSG_VIS_COMP_GET_GEO_ATTRS</CODE>
. To set the attributes in either or both fields, use <CODE>
MSG_VIS_COMP_SET_GEO_ATTRS</CODE>
. both of these messages are detailed below.</P>

<H6 CLASS="RefETitle">
<A NAME="VisComp_8.htm_IX_MSG_VIS_COMP_SET_GEO_ATTRS">
 </A>
MSG_VIS_COMP_SET_GEO_ATTRS</H6>
<PRE CLASS="syntax">void	MSG_VIS_COMP_SET_GEO_ATTRS(
        word	attrsToSet,
        word	attrsToClear);</PRE>
<P>
This message sets the flags in the composite object's <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
 fields. The high byte of each parameter represents the dimension attributes, and the low byte represents the geometry attributes. This message does not invalidate or update the object's geometry.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object.</P>
<P CLASS="refField">
Parameters:	<CODE>
attrsToSet</CODE>
	A word of attributes that should be set for the object. The high byte is a record of <CODE>
VisCompGeoDimensionAttrs</CODE>
, and the low byte is a record of <CODE>
VisCompGeoAttrs</CODE>
. The attributes set in this parameter will be set for the object.</P>
<DL>
<DT>
<CODE>
attrsToClear</CODE>
</DT><DD>A word of attributes to be cleared from the object's instance data. It has the same form as <CODE>
attrsToSet</CODE>
, above. Any attribute set in this parameter will be cleared in the instance fields.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_8.htm_IX_MSG_VIS_COMP_GET_GEO_ATTRS">
 </A>
MSG_VIS_COMP_GET_GEO_ATTRS</H6>
<PRE CLASS="syntax">word	MSG_VIS_COMP_GET_GEO_ATTRS();</PRE>
<P>
This message retrieves the flags set in the object's <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
 fields. The high byte of the return value represents the dimension attributes, and the low byte represents the geometry attributes. This message does not invalidate or update the object's geometry.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A word of flags. The high byte is a record of type <CODE>
VisCompGeoDimensionAttrs</CODE>
; the low byte is a record of type <CODE>
VisCompGeoAttrs</CODE>
. The high byte represents the attributes set in the object's <CODE>
VCI_geoDimensionAttrs</CODE>
 field, and the low byte represents the attributes set in the object's <CODE>
VCI_geoAttrs</CODE>
 field.</P>
<P CLASS="refField">
Interception:	Unlikely.</P>

<HR>
<A NAME="VisComp_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">VisComp</A>: 3 
Using VisCompClass</H2>
<P>
With the exception of the geometry flags mentioned above and the management of children, the use of <CODE>
VisCompClass</CODE>
 is little different from the use of <CODE>
VisClass</CODE>
. In fact, most of the functionality designed for <CODE>
VisCompClass</CODE>
 is built directly into <CODE>
VisClass</CODE>
; for example, nearly all geometry management and object tree management messages are defined in <CODE>
VisClass</CODE>
. Some reminders are listed below, however.</P>
<P>
Not all composite objects will have something to draw. Some composites will be used simply as grouping objects to manage visible children. In these cases, you will not have to subclass <CODE>
VisCompClass</CODE>
 but can instead use the class directly.</P>
<P>
Many composite objects will have something to draw, though. For example, a composite may want to draw a box around its children or wash a different background color behind them. If this is the case, the object must be a subclass of <CODE>
VisCompClass</CODE>
 and must handle <CODE>
MSG_VIS_DRAW</CODE>
.</P>
<P>
One of the primary functions of <CODE>
VisCompClass</CODE>
 is to pass input events and other messages down and up the tree to the proper objects. This is done automatically. You can, however, change this behavior by subclassing <CODE>
VisCompClass</CODE>
 and intercepting the messages in which the object will be interested.</P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_a.htm">Managing Geometry</A></P>
<P CLASS="subsectionLink">
<A HREF="#VisComp_b.htm">Managing Graphic Windows</A></P>
<HR>
<A NAME="VisComp_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 3.1 <A HREF="#VisComp_9.htm">Using VisCompClass</A>: 
<A NAME="VisComp_a.htm_13351">
 </A>
Managing Geometry</H3>
<PRE>MSG_VIS_COMP_GET_CHILD_SPACING, MSG_VIS_COMP_GET_MINIMUM_SIZE, MSG_VIS_COMP_GET_MARGINS, MSG_VIS_COMP_GET_WRAP_COUNT</PRE>
<P>
<A NAME="VisComp_a.htm_IX_Geometry:with visible objects">
 </A>
A special feature of <CODE>
VisCompClass</CODE>
, and one that can be used in many ways, is its ability to automatically manage its children. By setting various flags in the composite's instance fields, you can have it control its children's sizing and position without additional code in your application.</P>
<P>
Most of the flags you can set in <CODE>
VCI_geoAttrs</CODE>
 and <CODE>
VCI_geoDimensionAttrs</CODE>
 are explained fully in <A HREF="#VisComp_2.htm_55772"> VisCompClass Instance Data</A>
. You should especially be aware that if you do not want to use the geometry management capabilities of <CODE>
VisCompClass</CODE>
, you should set VCGA_CUSTOM_MANAGE_CHILDREN in <CODE>
VCI_geoAttrs</CODE>
.</P>
<P>
In addition to the messages provided in <CODE>
VisClass</CODE>
 for geometry management, <CODE>
VisCompClass</CODE>
 has four that return information about its current geometry. These are necessary because composites may be children of other composites, and therefore they may be managed. These messages are detailed below.</P>
<P>
Most of the issues of geometry management are discussed in <A HREF="#UI/VisClass/VisClass_e.htm">the VisClass chapter</A>.</P>
<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_DWORD_CHILD_SPACING macro">
 </A>
DWORD_CHILD_SPACING</H6>
<PRE CLASS="syntax">word	DWORD_CHILD_SPACING(<EM>val</EM>);
        SpacingAsDWord <EM>val</EM>;</PRE>
<P>
This macro extracts the child spacing from the given <CODE>
SpacingAsDWord</CODE>
 value. Use it with <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_DWORD_WRAP_SPACING macro">
 </A>
DWORD_WRAP_SPACING</H6>
<PRE CLASS="syntax">word	DWORD_WRAP_SPACING(<EM>val</EM>);
        SpacingAsDWord <EM>val</EM>;</PRE>
<P>
This macro extracts the wrap spacing from the given <CODE>
SpacingAsDWord</CODE>
 value. Use it with <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_MAKE_SPACING_DWORD macro">
 </A>
MAKE_SPACING_DWORD</H6>
<PRE CLASS="syntax">SpacingAsDWord MAKE_SPACING_DWORD(<EM>child</EM>, <EM>wrap</EM>);
        word	<EM>child</EM>;
        word	<EM>wrap</EM>;</PRE>
<P>
This macro creates a <CODE>
SpacingAsDWord</CODE>
 dword from the two given arguments. The <CODE>
child</CODE>
 argument is the child spacing, and the <CODE>
wrap</CODE>
 argument is the wrap spacing. Use this macro in your handler (if any) for the message <CODE>
MSG_VIS_COMP_GET_CHILD_SPACING</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_MSG_VIS_COMP_GET_CHILD_SPACING">
 </A>
MSG_VIS_COMP_GET_CHILD_SPACING</H6>
<PRE CLASS="syntax">SpacingAsDWord MSG_VIS_COMP_GET_CHILD_SPACING();</PRE>
<P>
This message returns the child spacing used by the composite. The high word of the return value is the spacing between lines of wrapped children; the low word is the horizontal spacing between children.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A dword containing the child spacing used by the composite. The dword contains two values: The child spacing--the amount of spacing placed between the composite's children--can be extracted from the return value with the macro <CODE>
DWORD_CHILD_SPACING</CODE>
. The wrap spacing--the amount of space placed between lines of wrapped children--can be extracted from the return value with the macro <CODE>
DWORD_WRAP_SPACING</CODE>
.</P>
<P CLASS="refField">
Interception:	If a composite wants special child or wrap spacing other than the default, it should subclass this message and return the desired values. There is no need to call the superclass in the method.</P>
<P CLASS="refField">
Tips:	In your handler, you can use the macro <CODE>
MAKE_SPACING_DWORD</CODE>
 to form the return value from the two spacing values.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_MSG_VIS_COMP_GET_MINIMUM_SIZE">
 </A>
MSG_VIS_COMP_GET_MINIMUM_SIZE</H6>
<PRE CLASS="syntax">SizeAsDWord MSG_VIS_COMP_GET_MINIMUM_SIZE();</PRE>
<P>
This message returns the minimum size of the composite. It is used by the geometry manager if the composite has VCGDA_HAS_MINIMUM_SIZE set. This message does not invalidate or update the object's geometry.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A dword containing the minimum size of the composite. The high word is the width, and the low word is the height. Use the macros <CODE>
DWORD_WIDTH</CODE>
 and <CODE>
DWORD_HEIGHT</CODE>
 to extract the individual values from the <CODE>
SizeAsDWord</CODE>
 structure.</P>
<P CLASS="refField">
Interception:	Any composite that wants a minimum size should subclass this message and return its desired size. There is no need to call the superclass in your handler.</P>
<P CLASS="refField">
Tips:	In your handler, use the macro <CODE>
MAKE_SIZE_DWORD</CODE>
 to create the <CODE>
SizeAsDWord</CODE>
 return value from the width and height. This macro has the same format as <CODE>
MAKE_SPACING_DWORD</CODE>
.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_MSG_VIS_COMP_GET_MARGINS">
 </A>
MSG_VIS_COMP_GET_MARGINS</H6>
<PRE CLASS="syntax">void	MSG_VIS_COMP_GET_MARGINS(
        Rectangle *retValue);</PRE>
<P>
This message returns the margins the composite should use when recalculating its child spacing. If you want a special left, top, right, or bottom margin around the composite's children, intercept this message and return the margin(s) in the appropriate field(s) of the <CODE>
Rectangle</CODE>
 structure.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	<CODE>
retValue</CODE>
	A pointer to an empty <CODE>
Rectangle</CODE>
 structure that will be filled with the composite's desired margins.</P>
<P CLASS="refField">
Return:	The pointer to the filled Rectangle structure is preserved. The structure contains the four margins desired by the object outside of its bounds (e.g. if <CODE>
retValue-&gt;R_top</CODE>
 is 100 upon return, the composite is requesting 100 points of extra &quot;margin&quot; spacing below its top bound before its children are placed).</P>
<P CLASS="refField">
Interception:	Any composite that wants extra margin space added to its bounds when geometry is calculated should subclass this message and return its desired margins. There is no need to call the superclass in your handler.</P>


<H6 CLASS="RefETitle">
<A NAME="VisComp_a.htm_IX_MSG_VIS_COMP_GET_WRAP_COUNT">
 </A>
MSG_VIS_COMP_GET_WRAP_COUNT</H6>
<PRE CLASS="syntax">word	MSG_VIS_COMP_GET_WRAP_COUNT();</PRE>
<P>
This message returns the number of children to be counted before wrapping if the composite has VCGA_WRAP_AFTER_CHILD_COUNT set.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any visible composite object--typically sent by a composite to itself during geometry calculations.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The number of children that will be allowed before the composite wraps additional children to a new line.</P>
<P CLASS="refField">
Interception:	Any composite that wants to wrap after a certain number of children should subclass this message and return the proper number of children. There is no need to call the superclass in your handler<A NAME="VisComp_a.htm_marker=7673">
 </A>
.</P>

<HR>
<A NAME="VisComp_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">VisComp</A>: 3.2 <A HREF="#VisComp_9.htm">Using VisCompClass</A>: 
<A NAME="VisComp_b.htm_13783">
 </A>
Managing Graphic Windows</H3>
<P>
It is very rare that a visible object will want to create its own window without using a generic object. This practice is highly discouraged as well because it will almost certainly violate some principles of most specific UI specifications. You can, however, set up a visible object to have its own window with the following steps:</P>
<OL>
<LI>
Set up the VisComp object as a window group.<BR>
Either instantiate a new VisComp object or set it up and load it in, off-screen. Then set the flags VTF_IS_WINDOW and VTF_IS_WIN_GROUP in the composite to make it a window and the top of the visible tree.</LI>
<LI>
Add visible children to the window object.<BR>
Using <CODE>
MSG_VIS_ADD_CHILD</CODE>
, add any visible object children to the window group as you need. If some of the children had possibly been removed from the visible tree earlier, you may have to mark them invalid.</LI>
<LI>
Add your window to the field window.<BR>
Determine the handle of the parent window you need, then set your window group object as a child of the parent.</LI>
<LI>
Set the top object in your window group visible.<BR>
Set VA_VISIBLE using <CODE>
MSG_VIS_SET_ATTR</CODE>
 to mark the window group visible. The window will be opened, and it will receive a <CODE>
MSG_META_EXPOSED</CODE>
 indicating that it and all its children should draw themselves.<A NAME="VisComp_b.htm_marker=7604">
 </A>
</LI>
</OL>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
