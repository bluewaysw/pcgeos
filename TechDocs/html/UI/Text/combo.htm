<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>The Text Objects</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
The Text Objects

</H1>
<P>
Text support is one of the integral and most important pieces of the GEOS system software. Many text formatting, editing, publishing, and advanced features are built into the system; therefore, many applications will never need to deal directly with these issues. The text features of GeoWrite, for example, are almost entirely implemented within the text object library.</P>
<P>
If your geode will display text, receive text input, or provide any type of text formatting features, you should use one of the text objects, either GenText or VisText. (If you only need a single-line non-editable text field, you may be able to use a simple GenGlyph instead.)</P>
<P>
The GenText object is primarily a user interface object, designed to communicate directly with the user and accept keyboard input. The VisText object is a much more versatile (and complex) object designed not only to display text but provide complex formatting and WYSIWYG word processing operations.</P>
<P>
Both objects make use of common functionality defined within the Text Object Library. Therefore, it is important to be familiar with the features and standards of that object library before using either GenText or VisText. Additionally, if you plan on using your text object to perform any complex style sheets, you should be familiar with the chunk array mechanisms, as these are widely employed in complex text objects.</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Text_1.htm">1 The Text Objects</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_2.htm">1.1 Which Object Should I Use?</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_3.htm">1.2 How this Chapter is Organized</A><BR>
&nbsp;&nbsp;<A HREF="#Text_4.htm">2 General Text Features</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_5.htm">2.1 Input Management and Filters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_6.htm">2.2 Text Flow Through Regions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_7.htm">2.3 Style Sheets</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_8.htm">2.4 Undo</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_9.htm">2.5 General Import and Export</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_a.htm">2.6 Geometry Management</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_b.htm">2.7 Embedded Graphics and Characters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_c.htm">2.8 Search and Replace</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_d.htm">2.9 Spell-Checking</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_e.htm">2.10 Printing</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_f.htm">2.11 Text Controller Objects</A><BR>
&nbsp;&nbsp;<A HREF="#Text_10.htm">3 The Text Object Library</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_11.htm">3.1 Character Attribute Definitions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_12.htm">3.2 Paragraph Attribute Definitions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_13.htm">3.3 Storage Flags</A><BR>
&nbsp;&nbsp;<A HREF="#Text_14.htm">4 Text Object Chunks</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_15.htm">4.1 The Text</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_16.htm">4.2 Lines and Fields</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_17.htm">4.3 Character Runs</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_18.htm">4.4 Paragraph Runs</A><BR>
&nbsp;&nbsp;<A HREF="#Text_19.htm">5 Using VisText</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1a.htm">5.1 VisText Features</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1b.htm">5.2 VisText States</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1c.htm">5.3 VisText VM File Storage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1d.htm">5.4 Text Filters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1e.htm">5.5 Key Functions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_1f.htm">5.6 Setting Text Confines</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_20.htm">5.7 Output Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_21.htm">5.8 Getting Geometry Information</A><BR>
&nbsp;&nbsp;<A HREF="#Text_22.htm">6 Using GenText</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_23.htm">6.1 GenText Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_24.htm">6.2 GenText Basics</A><BR>
&nbsp;&nbsp;<A HREF="#Text_25.htm">7 The Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_26.htm">7.1 Character Attribute Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_27.htm">7.2 Paragraph Attribute Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Text_28.htm">7.3 Search and Replace and Spell-Checking</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Text_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 1 
The Text Objects</H2>
<P>
Many applications will require some form of typed input from the user. Some will provide text formatting, word processing, or WYSIWYG desktop publishing features, and nearly all will have some text-based information displayed on the screen. Each of these features can be provided easily with either GenText or VisText objects. To use either of these objects, you should make sure to include the text library in your geode.</P>
<P>
The VisText and GenText classes have many features in common. Under the hood, both the VisText and GenText objects contain similar instance data, and both are capable of handling messages from the text object library. Which object you use depends on what role you need your text object to assume. </P>
<P CLASS="subsectionLink">
<A HREF="#Text_2.htm">Which Object Should I Use?</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_3.htm">How this Chapter is Organized</A></P>
<HR>
<A NAME="Text_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 1.1 <A HREF="#Text_1.htm">The Text Objects</A>: 
Which Object Should I Use?</H3>
<P>
The VisText object is the more complex of the two objects. In general, a VisText object may exhibit any of the many features present within the text object library; the GenText object may only exhibit a subset of this behavior. The GenText object is not a low-level object, however; in most cases, <CODE>
GenTextClass</CODE>
 may use most of the messages provided with <CODE>
VisTextClass</CODE>
. It is only in more complex text operations (such as drawing text to regions or incorporating complex graphics into text) that a GenText object is not as useful.</P>
<P>
Typically, geodes that want full-featured word processing will use a VisText object (typically within a scrollable GenView and a VisContent). Simple text editing and input (within a database field, for example) are normally done with an editable GenText object. For other cases, it is up to you. There are advantages to either approach. GenText is easier to use, but VisText is more versatile. </P>
<P>
Typically, the makeup of your user interface will decide which text object is more appropriate. GenText objects should be attached to the generic tree; VisText objects should instead be attached to the visible tree. Most of the features listed below are described with respect to VisText objects; in most cases, however, they are equally applicable to the GenText.</P>
<P>
The main functional difference between a VisText and a GenText object is the ability of VisText to use what is known as the <CODE>
large</CODE>
 text model. The large model allows a text object to define flow regions, provide for text to be stored within a VM file, and offers several other rather complex features. This behavior is essential for providing complex text formatting features. It is usually not required for most text needs, however.</P>
<P>
The GenText object does not support this text model. In cases where you feel you need to use functionality of the large model, you should use a VisText object within a visible tree. Luckily, most of these capabilities are automatic when using a VisText object. (You will rarely set up a VisText object already using this model, for instance; instead, whenever the VisText is forced to use operations requiring the large model, the application will force it to convert itself.) </P>
<HR>
<A NAME="Text_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 1.2 <A HREF="#Text_1.htm">The Text Objects</A>: 
How this Chapter is Organized</H3>
<P>
This chapter is organized in a special fashion. Not including this section, the contents of this chapter are:</P>
<DL>
<DT>
10.2</DT><DD>A description of some of the more powerful features of the text objects.</DD>
<DT>
10.3</DT><DD>A complete list of the features defined within the text object library, for use with both GenText and VisText.</DD>
<DT>
10.4</DT><DD>An in-depth description of the common ways to change text and attributes within a text object. These are the most commonly used operations for text objects.</DD>
<DT>
10.5</DT><DD>A description in detail of the VisText object. </DD>
<DT>
10.6</DT><DD>A description in detail of the GenText object.</DD>
<DT>
10.7</DT><DD>A description of the controllers specifically tailored for use with the text objects.</DD>
</DL>
<P>
If you are using a simple GenText object for getting and setting text, you will probably only need to read the in-depth description of how to alter text and the GenText section. If you need other functionality, you should probably read this chapter straight through.</P>
<HR>
<A NAME="Text_4.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2 
General Text Features</H2>
<P>
<A NAME="Text_4.htm_IX_VisTextClass">
 </A>
<A NAME="Text_4.htm_IX_GenTextClass">
 </A>
The Text objects provide a powerful tool for complex text formatting. This section describes some of the more powerful features of these text objects.</P>
<P CLASS="subsectionLink">
<A HREF="#Text_5.htm">Input Management and Filters</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_6.htm">Text Flow Through Regions</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_7.htm">Style Sheets</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_8.htm">Undo</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_9.htm">General Import and Export</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_a.htm">Geometry Management</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_b.htm">Embedded Graphics and Characters</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_c.htm">Search and Replace</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_d.htm">Spell-Checking</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_e.htm">Printing</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_f.htm">Text Controller Objects</A></P>
<HR>
<A NAME="Text_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.1 <A HREF="#Text_4.htm">General Text Features</A>: 
Input Management and Filters</H3>
<P>
A large portion of the text library is devoted to input management and interaction with the UI and the user. Almost every input and display function for text is implemented within the text library, relieving your applications from containing often complex code. In almost all cases, you will not need to know how input is transferred to your text objects. </P>
<P>
The text library handles all keyboard and mouse input to text fields, interacting intelligently with the UI to process input events. (This includes pen input supported by the input manager and the pen input mechanisms.) Selection with the mouse and keyboard is handled automatically, as are quick-transfer operations.</P>
<P>
Because the text objects understand the focus and target hierarchies of the UI, they can interact directly with the controller objects. Applications using the text objects don't even have to know when a user has applied a new style, changed the paragraph spacing, or set the text color. The user can select text, call up the Style menu, and apply a new style without using a line of application-specific code. If you wish such behavior to happen automatically, you should mark your text object GA_TARGETABLE in its GI_<CODE>
attrs</CODE>
 instance field.</P>
<P>
GEOS also provides filters to text objects; these filters allow the text object to selectively intercept and process text as it is being added to a text object (usually a GenText), either from direct keyboard typing or from a more complex operation (such as a clipboard paste). Filters allow the text object to accept or reject text on a number of bases (such as character by character). </P>
<HR>
<A NAME="Text_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.2 <A HREF="#Text_4.htm">General Text Features</A>: 
Text Flow Through Regions</H3>
<P>
The text library also allows a continuous stream of text to flow through various connected regions. These regions may be of arbitrary size, shape, and location, and each region occupies one spot in the text object's region list. The text library, once the region list is created, takes care of all text flowing and rippling from one region to the next. GenText objects may not implement regions, though; ideally their geometry should be left up to the specific UI.</P>
<P>
Applications can easily set up regions using the graphics system's path code, then add the regions to the text object's region list. These two simple steps can result in powerful publishing features such as flowing text around graphics and flowing text through arbitrarily-shaped regions. 
<IMG SRC="Text_6_regionFlow.gif">

</P>
<HR>
<A NAME="Text_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.3 <A HREF="#Text_4.htm">General Text Features</A>: 
Style Sheets</H3>
<P>
Many word processors and publishing programs today implement <EM>
styles</EM>
. A style is a set of character and paragraph attributes typically associated with a specific name; the user chooses the attributes for the style and then can apply that style to any selected text by choosing the associated name. A <EM>
style sheet</EM>
 is a set of styles. Styles can be (and normally are) based on other styles.</P>
<P>
Normally, the definition and use of styles is left entirely to the application. In GEOS, however, the text library provides a controller object for styles and style sheets, so if your application will use style sheets, it can do so without needing complex code.</P>
<HR>
<A NAME="Text_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.4 <A HREF="#Text_4.htm">General Text Features</A>: 
Undo</H3>
<P>
For complex text formatting, the ability to &quot;undo&quot; any changes is nearly a necessity. The GEOS text library provides a single-level undo that will work with all text-edit objects. This undo may be implemented by either the user or the application.</P>
<HR>
<A NAME="Text_9.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.5 <A HREF="#Text_4.htm">General Text Features</A>: 
General Import and Export</H3>
<P>
Through the Impex Library, any application using a text object can import from and export to many popular word processor formats. You don't have to go through the work of creating your own format translator for each supported format; any format supported by the Impex Library will automatically be supported by your application. (See <A HREF="../../DataMgmt/ImportExport/combo.htm">the Impex chapter</A>.) In addition, the Impex Library is designed so users can add new translators to the importer/exporter; these translators are then accessible to your application without recompiling or upgrading.</P><HR>
<A NAME="Text_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.6 <A HREF="#Text_4.htm">General Text Features</A>: 
Geometry Management</H3>
<P>
The GenText object automatically will interact with its parent generic object (usually a GenInteraction or GenPrimary) to provide the proper sizing behavior. GenText objects automatically implement their own scrolling when necessary, adding horizontal or vertical scrollers as the need arises. </P>
<P>
VisText, however, does not provide automatic scrolling. The VisText may only exist as a node in a visible object tree under a VisContent; the content (in concert with its parent GenView) will provide whatever scrolling, scaling, and sizing that is required.</P>
<HR>
<A NAME="Text_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.7 <A HREF="#Text_4.htm">General Text Features</A>: 
Embedded Graphics and Characters</H3>
<P>
Every text field with the capability to define regions may contain embedded graphics strings. Each graphic appears as a single character within the text, and graphics may be pasted in by the user. </P>
<P>
It is also possible to flow text around graphics. The large object model provides this feature, but the regular text model does not. Thus, to flow text around graphics requires a VisText object set up for large text.</P>
<HR>
<A NAME="Text_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.8 <A HREF="#Text_4.htm">General Text Features</A>: 
Search and Replace</H3>
<P>
Global search-and-replace functions are included in the text object. GEOS provides a standard search-and-replace dialog box that can be called up by any text object. The search-and-replace mechanism can work with all text objects in the system; if two applications are both using search-and-replace at the same time, only one dialog box will appear on the screen. The search and replace controller understands which application is the current target of the search operations and interacts intelligently with the active applications.</P>
<HR>
<A NAME="Text_d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.9 <A HREF="#Text_4.htm">General Text Features</A>: 
Spell-Checking</H3>
<P>
Like search-and-replace, spell-checking is a function of the text library and is available globally to all applications and libraries that use text objects. GEOS uses a licensed Houghton-Mifflin dictionary and spell-checking engine; this engine as well as the common UI are available to each application and library that uses a text object. The spelling checker, like the search-and-replace mechanism, interacts intelligently with the text object and the UI to ensure that only one spell-check dialog box is on the screen.</P>
<P>
The simplest and most efficient way to include spell-checking in your application is to include an object of <CODE>
SpellControlClass</CODE>
 in your application, linking it to the text object to spell-check. This controller is discussed in <A HREF="#Text_28.htm_85133"> Search and Replace and Spell-Checking</A>
.</P>
<HR>
<A NAME="Text_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.10 <A HREF="#Text_4.htm">General Text Features</A>: 
Printing</H3>
<P>
VisText objects automatically know how to print themselves when sent the proper messages. In nearly all cases where printing text is essential, a VisText will be included in a visual object tree. Then, when printing occurs, the topmost object in the tree (most likely a VisContent) will receive the print message; this message will be passed down the tree until all the visual objects (including any VisTexts) have printed themselves.</P>
<HR>
<A NAME="Text_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 2.11 <A HREF="#Text_4.htm">General Text Features</A>: 
Text Controller Objects</H3>
<P>
As with several other major features of the GEOS user interface, the text library has associated controller classes for many features. Because text formatting has so many options and choices for the user, providing the menus, dialog boxes, and choices can be a lot of work for an application. The text controller objects, however, remove nearly all this work while allowing applications the full support they require.</P>
<P>
Nearly every feature of the text library has one corresponding controller object. In addition, master controllers exist to manage other controller objects. Therefore, if you use a master controller, other controllers that may be added to the text object (by Geoworks) will be automatically included in your geode without changing the source code or recompiling.</P>
<P>
Using controllers and an editable text object, you can actually create a simple but full-featured word processor without writing any code other than UI object definitions. Controllers typically work on both GenText or VisText objects; whichever text object has the target will receive updates from controllers.</P>
<HR>
<A NAME="Text_10.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 3 
The Text Object Library</H2>
<P>
Both Text Objects rely on a single framework; this framework is the Text Object Library. The Text Object Library (<STRONG CLASS="fileName">
tCommon.h</STRONG>
) contains many definitions and structures that text objects will use. Every definition and structure in this section can be used by both VisText and GenText objects.</P>
<P>
<CODE>
VisTextClass</CODE>
 is the class that utilizes most of these features directly. <CODE>
GenTextClass</CODE>
 also utilizes almost every one of these features through <CODE>
VisTextClass</CODE>
. This is because <CODE>
GenTextClass</CODE>
, as a generic object, is manifested through <CODE>
VisClass</CODE>
 by specific UI libraries.</P>
<P>
The text library also has data structures and mechanisms defined to support other features that, due to time constraints, have no strict API definition in the library. To provide these &quot;potential features&quot; in your applications, you can directly access the text data structures and set them appropriately. (For example, automatic paragraph numbering is not directly supported, but the paragraph attributes data structures allow defining characters that get prepended to individual paragraphs.)</P>
<P>
Many of the features are implemented and controlled automatically by GEOS. For common features (character styles and font sizes, for example), controller objects can handle almost everything. For less common features (automatic paragraph numbering, for example), your application will likely have to provide the UI and the control mechanisms necessary. </P>
<P CLASS="subsectionLink">
<A HREF="#Text_11.htm">Character Attribute Definitions</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_12.htm">Paragraph Attribute Definitions</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_13.htm">Storage Flags</A></P>
<HR>
<A NAME="Text_11.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 3.1 <A HREF="#Text_10.htm">The Text Object Library</A>: 
Character Attribute Definitions</H3>
<P>
The text object library provides a multitude of ways to shape the appearance of individual characters. Each character within a text object may even exhibit its own individual attributes, if the object is defined to use multiple character attributes. The definitions within this section show the full range of possibilities for character attributes.</P>

<H4 CLASS="HeadingC">
The VisTextCharAttr Structure</H4>
<P>
<A NAME="Text_11.htm_IX_VisTextCharAttr">
 </A>
The <CODE>
VisTextCharAttr</CODE>
 structure provides a great variety of attributes for characters within text objects. Many of the <CODE>
VisTextCharAttr</CODE>
 fields use graphics structures to tailor the appearance of individual characters within the text object. You may wish to review <A HREF="../../Graphics/Environment/combo.htm">the Graphics Environment chapter</A> to discover the full features of this structure.</P>
<P CLASS="figTitle">
Code Display 10-1 The VisTextCharAttr Structure</P>
<PRE>typedef struct {
    StyleSheetElementHeader				VTCA_meta;
    FontID				VTCA_fontID;
    WBFixed				VTCA_pointSize;
    TextStyle				VTCA_textStyles;
    ColorQuad				VTCA_color;
    sword				VTCA_trackKerning;
    byte				VTCA_fontWeight;
    byte				VTCA_fontWidth;
    VisTextExtendedStyles				VTCA_extendedStyles;
    SystemDrawMask				VTCA_grayScreen;
    GraphicPattern				VTCA_pattern;
    ColorQuad				VTCA_bgColor;
    SystemDrawMask				VTCA_bgGrayScreen;
    GraphicPattern				VTCA_bgPattern;
    byte				VTCA_reserved[7];
} VisTextCharAttr;</PRE>
<P>
VTCA_<A NAME="Text_11.htm_IX_VTCA_&ldots;">
 </A>
<EM>
meta</EM>
 stores a <CODE>
StyleSheetElementHeader</CODE>
. This structure field allows the <CODE>
VisTextCharAttr</CODE>
 structure to act as an element in an element array. For complete information on using character attribute element arrays to implement character style runs, see <A HREF="#Text_17.htm_91955"> Character Runs</A>
.</P>
<P>
VTCA_<EM>
fontID</EM>
 stores the <CODE>
FontID</CODE>
 of the font to be used for this character. Any current font allowed by the system is valid. There may exist up to 65536 fonts of type <CODE>
FontID</CODE>
.</P>
<P>
VTCA_<EM>
pointSize</EM>
 stores the point size of the character. This may be any fixed point value between 4 and 792.</P>
<P>
VTCA_<EM>
textStyles</EM>
 stores the text styles (of type <CODE>
TextStyle</CODE>
) to be applied to this character. For a list of text styles, see <A HREF="../../Graphics/Shapes/Shapes_f.htm">the Drawing Shapes chapter</A>.</P><P>
VTCA_<EM>
color</EM>
 stores the current color (of type <CODE>
ColorQuad</CODE>
) of the foreground text character.</P>
<P>
VTCA_<CODE>
trackKerning</CODE>
 stores the kerning value (either positive or negative) for this character. This value is expressed in points and reflects how much extra space (if positive) or removal of space (if negative) to apply between this character and the next character.</P>
<P>
VTCA_<A NAME="Text_11.htm_IX_FontWeight type">
 </A>
<CODE>
fontWeight</CODE>
 stores the font-weight (thickness) of the character. This value is expressed as a <CODE>
FontWeight</CODE>
 value, a percentage between 75% and 125%.</P>
<P>
VTCA_<A NAME="Text_11.htm_IX_FontWidth type">
 </A>
<A NAME="Text_11.htm_IX_FWI_&ldots;">
 </A>
<CODE>
fontWidth</CODE>
 stores the width of the font, expressed as a <CODE>
FontWidth</CODE>
 value, a percentage between 25% and 200%. Several constants are defined in <STRONG CLASS="fileName">
font.h</STRONG>
 with common font widths, including FWI_CONDENSED and FWI_EXPANDED.</P>
<P>
VTCA_<CODE>
extendedStyles</CODE>
 stores any <CODE>
VisTextExtendedStyles</CODE>
 (separate from the <CODE>
TextStyle</CODE>
 in VTCA_<CODE>
textStyles</CODE>
) in use by this character. These styles are defined in the text object library. See <A HREF="#Text_11.htm_29635"> VisTextExtendedStyles</A>
 for a list of extended styles.</P>
<P>
VTCA_<CODE>
grayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when displaying this text. This mask is applied to the text characters but not to the background. </P>
<P>
VTCA_<CODE>
pattern</CODE>
 stores the <CODE>
GraphicPattern</CODE>
 to use when displaying this text. This pattern is applied to the text characters but not to the background.</P>
<P>
<CODE>
VTCA_bgColor</CODE>
 stores the background color to apply to the character's background (but not to the character itself).</P>
<P>
VTCA_<CODE>
bgGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to apply to the character's background.</P>
<P>
VTCA_<CODE>
bgPattern</CODE>
 stores the <CODE>
GraphicPattern</CODE>
 to apply to the character's background.<A NAME="Text_11.htm_marker=38684">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-2 <A NAME="Text_11.htm_29635">
 </A>
VisTextExtendedStyles</P>
<PRE><A NAME="Text_11.htm_IX_VTES_&ldots;"> </A><A NAME="IX_VisTextExtendedStyles"> </A>/* These flags are stored in the VisTextCharAttr entry VTCA_extendedStyles */
typedef WordFlags VisTextExtendedStyles;
#define VTES_BOXED				0x8000
#define VTES_BUTTON				0x4000
#define VTES_INDEX				0x2000
#define VTES_ALL_CAP				0x1000
#define VTES_SMALL_CAP				0x0800
#define VTES_HIDDEN				0x0400
#define VTES_CHANGE_BAR				0x0200
#define VTES_BACKGROUND_COLOR				0x0100</PRE>
<P>
VTES_BOXED draws the character within a box (a rectangle surrounding the character). If consecutive characters are marked VTES_BOXED they will all be drawn within a single rectangular outline.</P>
<P>
VTES_BUTTON frames the text characters within a drop shadow. Consecutive characters marked VTES_BUTTON will be framed within a single drop-shadow.</P>
<P>
VTES_INDEX marks the character for indexing purposes. This feature is currently not implemented.</P>
<P>
VTES_ALL_CAP indicates that the character should be capitalized in the current point size. </P>
<P>
VTES_SMALL_CAP indicates that the character should be capitalized, but at a smaller point size.</P>
<P>
VTES_HIDDEN indicates that this character acts as hidden text. Hidden text may exhibit special properties (such as being masked out when printing). </P>
<P>
VTES_CHANGE_BAR is currently unimplemented.</P>
<P>
VTES_BACKGROUND_COLOR indicates that this character exhibits a special background color.</P>


<H4 CLASS="HeadingC">
Default Character Attributes</H4>
<P>
You may decide that you do not need your characters to exhibit the many attributes available within the <CODE>
VisTextCharAttr</CODE>
 structure. If your text object is simple, you may want instead to use the default character attributes provided in the text object library. These default attributes supersede the use of the <CODE>
VisTextCharAttr</CODE>
 structure. All of these attributes will fit into a single word record.</P>
<P>
<A NAME="Text_11.htm_IX_VTDCA_&ldots;">
 </A>
<A NAME="Text_11.htm_IX_VisTextDefaultCharAttr">
 </A>
The <CODE>
VisTextDefaultCharAttr</CODE>
 record allows your text object to exhibit three styles (underline, bold, and italic), 16 color indexes of type <CODE>
Color</CODE>
, eight point sizes, and 32 different fonts. </P>
<P CLASS="figTitle">
Code Display 10-3 VisTextDefaultCharAttr</P>
<PRE>typedef WordFlags VisTextDefaultCharAttr;
#define VTDCA_UNDERLINE			0x8000
#define VTDCA_BOLD			0x4000
#define VTDCA_ITALIC			0x2000
#define VTDCA_COLOR			0x0f00	/* Color */
#define VTDCA_SIZE			0x00e0	/* VisTextDefaultSize */
#define VTDCA_FONT			0x001f	/* VisTextDefaultFont */</PRE>
<PRE>#define VTDCA_COLOR_OFFSET				8
#define VTDCA_SIZE_OFFSET				5
#define VTDCA_FONT_OFFSET				0</PRE>
<PRE><A NAME="Text_11.htm_IX_VTDS_&ldots;"> </A><A NAME="IX_VisTextDefaultSize"> </A>typedef ByteEnum VisTextDefaultSize;
    #define		VTDS_8	0		/* Point size of 8 */
    #define		VTDS_9	1		/* Point size of 9 */
    #define		VTDS_10	2		/* Point size of 10 */
    #define		VTDS_12	3		/* Point size of 12 */
    #define		VTDS_14	4		/* Point size of 14 */
    #define		VTDS_18	5		/* Point size of 18 */
    #define		VTDS_24	6		/* Point size of 24 */
    #define		VTDS_36	7		/* Point size of 36 */</PRE>
<PRE><A NAME="Text_11.htm_IX_VisTextDefaultFont"> </A><A NAME="IX_VTDF_&ldots;"> </A>typedef ByteEnum VisTextDefaultFont;
    #define		VTDF_BERKELEY		0		/* Berkeley Font */
    #define		VTDF_CHICAGO		1		/* Chicago Font */
    #define		VTDF_BISON		2		/* Bison Font */
    #define		VTDF_WINDOWS		3		/* Windows Font */
    #define		VTDF_LED		4		/* LED Font */
    #define		VTDF_ROMA		5		/* Roma Font */
    #define		VTDF_UNIVERSITY		6		/* University Font */
    #define		VTDF_URW_ROMAN		7		/* URW Roman Font */
    #define		VTDF_URW_SANS		8		/* URW Sans Font */
    #define		VTDF_URW_MONO		9		/* URW Mono Font */
    #define		VTDF_URW_SYMBOLPS 10				/* URW Symbols Font */
    #define		VTDF_CENTURY_SCHOOLBOOK 11				/* Century Schoolbook Font */</PRE>
<PRE>#define <A NAME="Text_11.htm_IX_VIS_TEXT_INITIAL_CHAR_ATTR"> </A>VIS_TEXT_INITIAL_CHAR_ATTR \
	((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) | VTDF_BERKELEY)<A NAME="Text_11.htm_marker=38791"> </A></PRE>


<H4 CLASS="HeadingC">
Macros for Defining VisTextCharAttr Structures</H4>
<P>
The text object library also provides several macros to make the definition of the <CODE>
VisTextCharAttr</CODE>
 structure simpler. These macros are listed in <A HREF="#Text_11.htm_30322"> VisTextCharAttr Macros</A>
. In many cases, these macros make the definition of character style runs vastly easier.</P>
<P CLASS="figTitle">
Code Display 10-4 <A NAME="Text_11.htm_30322">
 </A>
VisTextCharAttr Macros</P>
<PRE><A NAME="Text_11.htm_IX_CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR() macro"> </A>#define CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(ref, style, font, psize, tstyle, \ color) { \
    {{{ref, 0}}, style}, font, {0, psize}, tstyle, \
	{color, CF_INDEX, 0, 0}, 0, FWI_MEDIUM, FW_NORMAL, 0, SDM_100, {0}, \
	{C_WHITE, CF_INDEX, 0, 0}, SDM_0, {0}, {0, 0, 0, 0, 0, 0, 0}}</PRE>
<PRE><A NAME="Text_11.htm_IX_CHAR_ATTR_FONT_SIZE_STYLE() macro"> </A>#define CHAR_ATTR_FONT_SIZE_STYLE(font, psize, tstyle) \
	CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(2, CA_NULL_ELEMENT, font, \
						psize, tstyle, C_BLACK)</PRE>
<PRE><A NAME="Text_11.htm_IX_CHAR_ATTR_FONT_SIZE() macro"> </A>#define CHAR_ATTR_FONT_SIZE(font, psize) \
	CHAR_ATTR_STYLE_FONT_SIZE_STYLE_COLOR(2, CA_NULL_ELEMENT, font, \
						psize, 0, C_BLACK)</PRE>

<HR>
<A NAME="Text_12.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 3.2 <A HREF="#Text_10.htm">The Text Object Library</A>: 
Paragraph Attribute Definitions</H3>
<P>
The text object library also provides many ways to shape the appearance of individual paragraphs. Each paragraph within a text object may exhibit its own individual attributes if the text object is set to allow multiple paragraph attributes. The definitions within this section show the full range of possibilities for paragraph attributes.</P>

<H4 CLASS="HeadingC">
The VisTextParaAttr Structure</H4>
<P>
<A NAME="Text_12.htm_IX_VisTextParaAttr">
 </A>
The <CODE>
VisTextParaAttr</CODE>
 structure provides the largest set of attributes for use by paragraphs within text objects. Note that although the <CODE>
VisTextParaAttr</CODE>
 structure is of a fixed size, the paragraph attributes consist of this structure and a variable number of tabs; therefore, the paragraph attributes within a &quot;run&quot; may be variably sized. These entries are listed in <A HREF="#Text_12.htm_93327"> VisTextParaAttr</A>
. Comments follow the code display.</P>
<P CLASS="figTitle">
Code Display 10-5 <A NAME="Text_12.htm_93327">
 </A>
VisTextParaAttr</P>
<PRE>typedef struct {
    StyleSheetElementHeader				VTPA_meta;
    VisTextParaBorderFlags				VTPA_borderFlags;
    ColorQuad				VTPA_borderColor;
    VisTextParaAttrAttributes				VTPA_attributes;
    word				VTPA_leftMargin;
    word				VTPA_rightMargin;
    word				VTPA_paraMargin;
    BBFixedAsWord				VTPA_lineSpacing;
    word				VTPA_leading;
    BBFixedAsWord				VTPA_spaceOnTop;
    BBFixedAsWord				VTPA_spaceOnBottom;
    ColorQuad				VTPA_bgColor;
    byte				VTPA_numberOfTabs;
    byte				VTPA_borderWidth;
    byte				VTPA_borderSpacing;
    byte				VTPA_borderShadow;
    SystemDrawMask				VTPA_borderGrayScreen;
    SystemDrawMask				VTPA_bgGrayScreen;
    HatchPattern				VTPA_borderHatch;
    HatchPattern				VTPA_bgHatch;
    word				VTPA_defaultTabs;
    word				VTPA_startingParaNumber;
    char				VTPA_prependChars[4];
    VisTextHyphenationInfo				VTPA_hyphenationInfo;
    VisTextKeepInfo				VTPA_keepInfo;
    VisTextDropCapInfo				VTPA_dropCapInfo;
    word				VTPA_nextStyle;
    StandardLanguage				VTPA_language;
    byte				VTPA_reserved[15];
} VisTextParaAttr;</PRE>
<P>
VTPA_<A NAME="Text_12.htm_IX_VTPA_&ldots;">
 </A>
<EM>
meta</EM>
 stores a <CODE>
StyleSheetElementHeader</CODE>
. This structure field allows the <CODE>
VisTextParaAttr</CODE>
 structure to act as an element in an element array. For complete information on using paragraph attribute element arrays to implement paragraph style runs, see <A HREF="#Text_18.htm_59559"> Paragraph Runs</A>
.</P>
<P>
<CODE>
VTPA_borderFlags</CODE>
 stores the <CODE>
VisTextParaBorderFlags</CODE>
 to use in drawing any borders around the text paragraph.</P>
<P>
VTPA_<CODE>
borderColor</CODE>
 stores the color (of type <CODE>
ColorQuad</CODE>
) of the border. </P>
<P>
VTPA_<CODE>
attributes</CODE>
 stores the <CODE>
VisTextParaAttrAttributes</CODE>
 to use on this paragraph. These attributes specify whether the paragraph uses keep-with, drop caps, automatic hyphenation, or paragraph numbering.</P>
<P>
VTPA_<CODE>
leftMargin</CODE>
 stores the left margin of the paragraph. This margin is the distance (offset in points) from the left edge of the text object.</P>
<P>
VTPA_<CODE>
rightMargin</CODE>
 stores the right margin of the paragraph. This margin is the distance (offset in points) from the right edge of the text object.</P>
<P>
VTPA_<CODE>
paraMargin</CODE>
 stores the paragraph margin. This margin is the additional distance (offset in points from the left margin) to indent the first line of a paragraph.</P>
<P>
VTPA_<CODE>
lineSpacing</CODE>
 stores the distance between lines of the paragraph. Single-spacing (a VTPA_<CODE>
lineSpacing</CODE>
 of 1.0) is the default value. </P>
<P>
VTPA_<CODE>
leading</CODE>
 stores the leading of the paragraph. Leading is the additional space between all lines of a paragraph, independent of line spacing. This value is expressed in points.</P>
<P>
VTPA_<CODE>
spaceOnTop</CODE>
 stores the additional vertical distance (expressed in points) before the first line of the paragraph. VTPA_<CODE>
spaceOnTop</CODE>
 plus VTPA_<CODE>
spaceOnBottom</CODE>
 is the total vertical distance between paragraphs.</P>
<P>
VTPA_<CODE>
spaceOnBottom</CODE>
 stores the additional vertical distance (expressed in points) after the last line of the paragraph. VTPA_<CODE>
spaceOnTop</CODE>
 plus VTPA_<CODE>
spaceOnBottom</CODE>
 is the total vertical distance between paragraphs.</P>
<P>
<CODE>
VTPA_bgColor</CODE>
 stores the background color (of type <CODE>
ColorQuad</CODE>
) of the paragraph. Note this is different from the background color of an individual character (in VTCA_<CODE>
bgColor</CODE>
). The background color of a character, if any, takes precedence over the background color of a paragraph.</P>
<P>
VTPA_<CODE>
numberOfTabs</CODE>
 stores the number of tab stops contained in this paragraph. Tabs are added at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. Therefore, this structure may be of variable size, depending on the number of tabs.</P>
<P>
VTPA_<CODE>
borderWidth</CODE>
 stores the width (in units of eight pixels) of the border, if any, attached to this paragraph.</P>
<P>
VTPA_<CODE>
borderSpacing</CODE>
 stores the spacing (in units of eight pixels) between the paragraph border, if any, and the paragraph itself.</P>
<P>
VTPA_<CODE>
borderShadow</CODE>
 stores the distance (in units of eight pixels) of the border shadow, if any, from the main border. </P>
<P>
VTPA_<CODE>
borderGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when drawing the paragraph border.</P>
<P>
VTPA_<CODE>
bgGrayScreen</CODE>
 stores the <CODE>
SystemDrawMask</CODE>
 to use when drawing the paragraph background.</P>
<P>
VTPA_<CODE>
borderHatch</CODE>
 stores <CODE>
HatchPattern</CODE>
 to use when drawing the border.</P>
<P>
VTPA_<CODE>
bgHatch</CODE>
 stores the <CODE>
HatchPattern</CODE>
 to use when drawing the background.</P>
<P>
VTPA_<CODE>
defaultTabs</CODE>
 stores the spacing for default tabs.</P>
<P>
VTPA_<CODE>
startingParaNumber</CODE>
 stores the sequential number of this paragraph. This value depends on the <CODE>
VisTextNumberType</CODE>
 in VTPA_<CODE>
attributes</CODE>
.</P>
<P>
VTPA_<CODE>
prependChars</CODE>
 stores the characters (up to four) to prepend to the beginning of this paragraph. </P>
<P>
VTPA_<CODE>
hyphenationInfo</CODE>
 stores the <CODE>
VisTextHyphenationInfo</CODE>
 (see below) to use between lines of text within a paragraph.</P>
<P>
VTPA_<CODE>
keepInfo</CODE>
 stores the <CODE>
VisTextKeepInfo</CODE>
 (see below) to use between this and other paragraphs.</P>
<P>
VTPA_<CODE>
dropCapInfo</CODE>
 stores the <CODE>
VisTextDropCapInfo</CODE>
 (see below) to use at the start of this paragraph.</P>
<P>
<CODE>
VTPA_nextStyle</CODE>
 and <CODE>
VTPA_language</CODE>
 represent text attributes that are currently unimplemented but will be added.</P>
<P>
VTPA_<CODE>
reserved</CODE>
 reserves fifteen bytes of data at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. These bytes are used to designate extra tabs.<A NAME="Text_12.htm_marker=38800">
 </A>
<A NAME="Text_12.htm_marker=38802">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-6 VisTextParaBorderFlags</P>
<PRE><A NAME="Text_12.htm_IX_VTBF_&ldots;"> </A><A NAME="IX_VisTextBorderFlags"> </A>typedef WordFlags VisTextParaBorderFlags;
#define VTPBF_LEFT				0x8000
#define VTPBF_TOP				0x4000
#define VTPBF_RIGHT				0x2000
#define VTPBF_BOTTOM				0x1000
#define VTPBF_DOUBLE				0x0800
#define VTPBF_DRAW_INNER_LINES				0x0400
#define VTPBF_SHADOW				0x0200
#define VTPBF_ANCHOR				0x0003 /* ShadowAnchor */</PRE>
<PRE>#define VTPBF_ANCHOR_OFFSET				0</PRE>
<PRE><A NAME="Text_12.htm_IX_SD_&ldots;"> </A><A NAME="IX_ShadowAnchor"> </A>typedef ByteEnum ShadowAnchor;
#define	SA_TOP_LEFT		0
#define	SA_TOP_RIGHT		1
#define	SA_BOTTOM_LEFT		2
#define	SA_BOTTOM_RIGHT		3</PRE>
<P>
The <CODE>
VisTextParaBorderFlags</CODE>
 specify the manner in which a border should be drawn around the paragraph. </P>
<P>
VTPBF_LEFT, VTPBF_TOP, VTPBF_RIGHT, and VTPBF_BOTTOM all specify whether their respective side is drawn with a border. If you wish a border to entirely surround the text object, you should set all of these flags.</P>
<P>
VTPBF_DOUBLE specifies that there should be a two-line border around this paragraph. This flag will double any lines set to be drawn with VTPBF_LEFT, VTPBF_TOP, VTPBF_RIGHT, and VTPBF_BOTTOM.</P>
<P>
VTPBF_DRAW_INNER_LINES draws lines between bordered paragraphs. If two consecutive paragraphs are marked with this flag, a line border will be drawn between them.</P>
<P>
VTPBF_SHADOW specifies that the border should be shadowed. The direction of shadowing is specified in the VTPBF_ANCHOR flag. </P>
<P>
VTPBF_ANCHOR specifies the <CODE>
ShadowAnchor</CODE>
 to use if drawing a border shadow. The <CODE>
ShadowAnchor</CODE>
 specifies the corner of the paragraph to anchor the shadow. The shadowing effect on the paragraph will proceed from this corner towards the opposite corner.<A NAME="Text_12.htm_marker=38807">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-7 VisTextNumberType</P>
<PRE><A NAME="Text_12.htm_IX_VTPNT_&ldots;"> </A><A NAME="IX_VisTextParaNumberType"> </A>typedef ByteEnum VisTextNumberType;
#define	VTNT_NUMBER			0
#define	VTNT_LETTER_UPPER_A			1
#define	VTNT_LETTER_LOWER_A			2
#define	VTNT_ROMAN_NUMERAL_UPPER	3
#define	VTNT_ROMAN_NUMERAL_LOWER	4</PRE>
<P>
The <CODE>
VisTextNumberType</CODE>
 specifies the paragraph numbering scheme for this paragraph. For each paragraph with a numbering type, the object will number that paragraph sequentially based on the last occurrence of a paragraph with the same type. The text object stores this sequential number in the VTPA_<CODE>
startingParaNumber</CODE>
 entry. </P>
<P CLASS="figTitle">
Code Display 10-8 VisTextParaAttrAttributes</P>
<PRE><A NAME="Text_12.htm_IX_VTPAA_&ldots;"> </A><A NAME="IX_VisTextParaAttrAttributes"> </A>typedef WordFlags VisTextParaAttrAttributes;
#define VTPAA_JUSTIFICATION					0xc000
#define VTPAA_KEEP_PARA_WITH_NEXT					0x2000
#define VTPAA_KEEP_PARA_TOGETHER					0x1000
#define VTPAA_ALLOW_AUTO_HYPHENATION					0x0800
#define VTPAA_DISABLE_WORD_WRAP					0x0400
#define VTPAA_COLUMN_BREAK_BEFORE					0x0200
#define VTPAA_PARA_NUMBER_TYPE					0x01c0
#define VTPAA_DROP_CAP					0x0020
#define VTPAA_KEEP_LINES					0x0010</PRE>
<PRE>#define VTPAA_JUSTIFICATION_OFFSET					14
#define VTPAA_PARA_NUMBER_TYPE_OFFSET					5</PRE>
<P>
VTPAA_JUSTIFICATION stores the <CODE>
Justification</CODE>
 to use with this paragraph.</P>
<P>
VTPAA_KEEP_PARA_WITH_NEXT ensures that this paragraph and the next one will not be split along page breaks.</P>
<P>
VTPAA_KEEP_PARA_TOGETHER ensures that the entire paragraph will not be split along page breaks. In most cases, this will cause a paragraph capable of being split to appear at the top of the next page. </P>
<P>
VTPAA_ALLOW_AUTO_HYPHENATION allows the paragraph to automatically hyphenate words that cross line breaks. If this flag is set, the entry VTPA_<CODE>
hyphenationInfo</CODE>
 will store the <CODE>
VisTextHyphenationInfo</CODE>
 to use when hyphenating words.</P>
<P>
VTPAA_DISABLE_WORD_WRAP disables automatic word wrapping. Each line break will immediately wrap to next line without keeping words together. </P>
<P>
VTPAA_PARA_NUMBER_TYPE stores the <CODE>
VisTextParaType</CODE>
 for this paragraph. The actual paragraph number is stored in the VTPA_<CODE>
startingParaNumber</CODE>
 entry. The paragraph number type in tandem with the paragraph number determines what number heading this paragraph will have.</P>
<P>
VTPAA_DROP_CAP signifies that a this paragraph uses Drop Caps. If this flag is set, the <CODE>
VisTextParaAttr</CODE>
 entry VTPA_<CODE>
dropCapInfo</CODE>
 stores the <CODE>
VisTextParaDropCapInfo</CODE>
 (see below).</P>
<P>
VTPAA_KEEP_LINES specifies that this paragraph should make sure that beginning or ending lines of certain lengths should not be allowed to stand alone. If this flag is set, the <CODE>
VisTextParaAttr</CODE>
 entry VTCA_<CODE>
keepInfo</CODE>
 stores the <CODE>
VisTextKeepInfo</CODE>
 (see below).</P>
<P CLASS="figTitle">
Code Display 10-9 VisTextHyphenationInfo</P>
<PRE><A NAME="Text_12.htm_IX_VTHI_"> </A><A NAME="IX_VisTextHyphenationInfo"> </A>typedef WordFlags VisTextHyphenationInfo;
#define VTHI_HYPHEN_MAX_LINES					0xf000
#define VTHI_HYPHEN_SHORTEST_WORD					0x0f00
#define VTHI_HYPHEN_SHORTEST_PREFIX					0x00f0
#define VTHI_HYPHEN_SHORTEST_SUFFIX					0x000f</PRE>
<PRE>#define VTHI_HYPHEN_MAX_LINES_OFFSET						12
#define VTHI_HYPHEN_SHORTEST_WORD_OFFSET						 8
#define VTHI_HYPHEN_SHORTEST_PREFIX_OFFSET						 4
#define VTHI_HYPHEN_SHORTEST_SUFFIX_OFFSET						 0</PRE>
<P>
If the <CODE>
VTPA_attributes</CODE>
 flag VTPAA_ALLOW_AUTO_HYPHENATION is set, <CODE>
VisTextHyphenationInfo</CODE>
 stores the criteria to use when hyphenating words in VTPA_<CODE>
hyphenationInfo</CODE>
. If hyphenation is set, words will be automatically hyphenated using a Houghton-Mifflin engine. </P>
<P>
VTHI_SHORTEST_WORD sets the shortest word-length (in character counts) to hyphenate. Words shorter than this character count will be wrapped to the next line. </P>
<P>
VTHI_SHORTEST_PREFIX and VTHI_SHORTEST_SUFFIX set the shortest prefix and suffix to leave on a line after hyphenation. Prefixes or suffixes shorter than this character count will be tied to the main word and wrapped, if necessary.</P>
<P CLASS="figTitle">
Code Display 10-10 VisTextKeepInfo</P>
<PRE><A NAME="Text_12.htm_IX_VTKI_&ldots;"> </A><A NAME="IX_VisTextKeepInfo"> </A>typedef ByteFlags VisTextKeepInfo;
#define VTKI_TOP_LINES				0xf0
#define VTKI_BOTTOM_LINES				0x0f</PRE>
<PRE>#define VTKI_TOP_LINES_OFFSET				4
#define VTKI_BOTTOM_LINES_OFFSET				0</PRE>
<P>
If the VTPA_<CODE>
attributes</CODE>
 flag VTPAA_KEEP_LINES is set, <CODE>
VisTextKeepInfo</CODE>
 specifies the number of lines at the beginning and end of a paragraph that should not remain across page breaks. This prevents &quot;widows&quot; and &quot;orphans&quot;--single lines either at the end of one page or the beginning of another.</P>
<P>
VTKI_TOP_LINES specifies the minimum number of lines at the beginning of a paragraph to be considered able to stand alone and not kept part of the main paragraph along a page break.</P>
<P>
VTKI_BOTTOM_LINES specifies the minimum number of lines at the end of a paragraph to be considered able to stand alone and not kept part of the main paragraph along a page break.</P>
<P>
For example, if VTKI_BOTTOM_LINES is set to three, then single or double lines will not be able to stand on their own at the top of a page, and either the orphans will be kept with the main paragraph or additional line(s) will be brought over from the preceding page to pad the next page.</P>
<P CLASS="figTitle">
Code Display 10-11 VisTextDropCapInfo</P>
<PRE><A NAME="Text_12.htm_IX_VTDCI_&ldots;"> </A><A NAME="IX_VisTextDropCapInfo"> </A>typedef WordFlags VisTextDropCapInfo;
#define VTDCI_CHAR_COUNT				0xf000
#define VTDCI_LINE_COUNT				0x0f00
#define VTDCI_POSITION				0x00f0</PRE>
<PRE>#define VTDCI_CHAR_COUNT_OFFSET					12
#define VTDCI_LINE_COUNT_OFFSET					8
#define VTDCI_POSITION_OFFSET					4</PRE>
<P>
If the VTPA_<CODE>
attributes</CODE>
 flag VTPAA_DROP_CAP is set, <CODE>
VisTextDropCapInfo</CODE>
 specifies the criteria to use when implementing Drop Caps. Drop Caps are currently not implemented in GEOS though they will be supported for later releases.</P>
<P>
VTDCI_CHAR_COUNT sets the number of characters to capitalize at the start of the paragraph before resuming normal capitalization.</P>
<P>
VTDCI_LINE_COUNT sets the number of lines to capitalize at the start of a paragraph before resuming normal capitalization.</P>
<P CLASS="figTitle">
Code Display 10-12 Tabs</P>
<PRE><A NAME="Text_12.htm_IX_TL_&ldots;"> </A><A NAME="IX_TabLeader"> </A>typedef ByteEnum TabLeader;
#define	TL_NONE 		0
#define	TL_DOT 		1
#define	TL_LINE		2
#define	TL_BULLET		3
#define	TL_GRAY_LINE		4</PRE>
<PRE><A NAME="Text_12.htm_IX_TT_&ldots;"> </A><A NAME="IX_TabType"> </A>typedef ByteEnum TabType;
#define TT_LEFT			0
#define TT_CENTER			1
#define TT_RIGHT			2
#define TT_ANCHORED			3</PRE>
<PRE><A NAME="Text_12.htm_IX_TA_&ldots;"> </A><A NAME="IX_TabAttributes"> </A>typedef ByteFlags TabAttributes;
#define	TA_LEADER		0x1c		/* TabLeader */
#define	TA_TYPE		0x03		/* TabType */</PRE>
<PRE>#define TA_LEADER_OFFSET			2
#define TA_TYPE_OFFSET			0</PRE>
<PRE><A NAME="Text_12.htm_IX_T_&ldots;"> </A><A NAME="IX_TAB"> </A>typedef struct {
    word			T_position;
    TabAttributes			T_attr;		/* TabAttributes */
    SystemDrawMask			T_grayScreen;
    byte			T_lineWidth;
    byte			T_lineSpacing;
    word			T_anchor;
} Tab;</PRE>
<PRE><A NAME="Text_12.htm_IX_MTMPA_&ldots;"> </A><A NAME="IX_VisTextMaxParaAttr"> </A>typedef struct {
    VisTextParaAttr			VTMPA_paraAttr;
    Tab			VTMPA_tabs[VIS_TEXT_MAX_TABS];
} VisTextMaxParaAttr;</PRE>
<P>
The <CODE>
Tab</CODE>
 structure allows your paragraph to add custom tab stops to a paragraph. These tabs are in addition to any default tab stops that are defined in VTPA_<CODE>
defaultTabs</CODE>
. You may add up to 25 custom tabs to each paragraph. These tabs are added at the end of the <CODE>
VisTextParaAttr</CODE>
 structure. Therefore, different paragraphs may have paragraph attributes of different lengths depending on the number of custom tabs in use by that paragraph.</P>


<H4 CLASS="HeadingC">
Default Paragraph Attributes</H4>
<P>
You may decide that you do not need many of the features within the <CODE>
VisTextParaAttr</CODE>
 structure in your paragraphs. If your text object is simple, you may want to use a set of default paragraph attributes provided in the text object library. These default attributes supersede the use of the <CODE>
VisTextParaAttr</CODE>
 structure. All of these attributes will fit into a single word record of type <CODE>
VisTextDefaultParaAttr</CODE>
.</P>
<P>
<A NAME="Text_12.htm_IX_VTDPA_&ldots;">
 </A>
<A NAME="Text_12.htm_IX_VisTextDefaultParaAttr">
 </A>
The <CODE>
VisTextDefaultParaAttr</CODE>
 structure allows your text object to exhibit a <CODE>
Justification</CODE>
, a subset of default tabs, and left, right, and paragraph margins.</P>
<P CLASS="figTitle">
Code Display 10-13 <A NAME="Text_12.htm_67353">
 </A>
VisTextDefaultParaAttr</P>
<PRE>typedef WordFlags VisTextDefaultParaAttr;
#define VTDPA_JUSTIFICATION				0xc000 /* Justification */
#define VTDPA_DEFAULT_TABS				0x3000 /* VisTextDefaultTab */
#define VTDPA_LEFT_MARGIN				0x0f00 /* In units of half-inches */
#define VTDPA_PARA_MARGIN				0x00f0 /* In units of half-inches */
#define VTDPA_RIGHT_MARGIN				0x000f /* In units of half-inches */</PRE>
<PRE>#define VTDPA_JUSTIFICATION_OFFSET					14
#define VTDPA_DEFAULT_TABS_OFFSET					12
#define VTDPA_LEFT_MARGIN_OFFSET					8
#define VTDPA_PARA_MARGIN_OFFSET					4
#define VTDPA_RIGHT_MARGIN_OFFSET					0</PRE>
<PRE>#define VIS_TEXT_INITIAL_PARA_ATTR ( (0*2) &lt;&lt; VTDPA_LEFT_MARGIN_OFFSET) | \
				( (0*2) &lt;&lt; VTDPA_PARA_MARGIN_OFFSET) | \
				( (0*2) &lt;&lt; VTDPA_RIGHT_MARGIN_OFFSET) | \
				(VTDDT_INCH &lt;&lt; VTDPA_DEFAULT_TABS_OFFSET) | \
				(J_LEFT &lt;&lt; VTDPA_JUSTIFICATION_OFFSET)</PRE>
<PRE><A NAME="Text_12.htm_IX_VTDDT_&ldots;"> </A><A NAME="IX_VisTextDefaultDefaultTab"> </A>typedef ByteEnum VisTextDefaultDefaultTab;
#define VTDDT_NONE				0
#define VTDDT_HALF_INCH				1
#define VTDDT_INCH				2
#define VTDDT_CENTIMETER				3</PRE>
<P>
The <CODE>
VisTextDefaultDefaultTab</CODE>
 type is solely for use within a <CODE>
VisTextDefaultParaAttr</CODE>
 record. The default tab stops provide either no tab stops (VTDDT_NONE) or tab stops every half-inch, centimeter, or inch. Note that no other application-defined tabs are allowed when using the default paragraph attributes.</P>


<H4 CLASS="HeadingC">
Macros for Defining VisTextParaAttr Structures</H4>
<P>
The text object library also provides a macro to make the definition of the <CODE>
VisTextParaAttr</CODE>
 structure simpler; there are also a few macros to aid in setting up justification and tab structures. These macros are listed in <A HREF="#Text_12.htm_39349"> VisTextParaAttr Macros</A>
. In many cases, these macros make the definition of paragraph style runs vastly easier.</P>
<P CLASS="figTitle">
Code Display 10-14 <A NAME="Text_12.htm_39349">
 </A>
VisTextParaAttr Macros</P>
<PRE><A NAME="Text_12.htm_IX_PARA_ATTR_STYLE_JUST_LEFT_RIGHT_PARA() macro"> </A>#define PARA_ATTR_STYLE_JUST_LEFT_RIGHT_PARA(ref, style, just, left, right, para)\
{ \
	{{{ref, 0}}, style}, 0, {C_BLACK, CF_INDEX, 0, 0}, \
	just &lt;&lt; VTPAA_JUSTIFICATION_OFFSET, (left)*PIXELS_PER_INCH, \
	(right)*PIXELS_PER_INCH, (para)*PIXELS_PER_INCH, \
	1&lt;&lt;8, 0, 0, 0, {C_WHITE, CF_INDEX, 0, 0}, \
	0, 1*8, 2*8, 1*8, SDM_100, SDM_0, {0}, {0}, \
	PIXELS_PER_INCH/2*8, VIS_TEXT_DEFAULT_STARTING_NUMBER, &quot;&quot;, 0, 0, 0,
	CA_NULL_ELEMENT, SL_ENGLISH, {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}</PRE>
<PRE>#define DEF_PARA_ATTR_JUST_TABS(just, tabs) \
	(( (0*2) &lt;&lt; VTDPA_LEFT_MARGIN_OFFSET ) | \
	 ( (0*2) &lt;&lt; VTDPA_PARA_MARGIN_OFFSET ) | \
	 ( (0*2) &lt;&lt; VTDPA_RIGHT_MARGIN_OFFSET ) | \
	 ( (tabs) &lt;&lt; VTDPA_DEFAULT_TABS_OFFSET ) | \
	 ( (just) &lt;&lt; VTDPA_JUSTIFICATION_OFFSET ))</PRE>
<PRE>#define DEF_PARA_ATTR_CENTER DEF_PARA_ATTR_JUST_TABS(J_CENTER, VTDDT_INCH)</PRE>
<PRE>#define DEF_PARA_ATTR_RIGHT DEF_PARA_ATTR_JUST_TABS(J_RIGHT, VTDDT_INCH)</PRE>

<HR>
<A NAME="Text_13.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 3.3 <A HREF="#Text_10.htm">The Text Object Library</A>: 
Storage Flags</H3>
<P>
As you have seen, the Text Object Library provides a multitude of character and paragraph attributes to use in the display of text. The library also provides a number of different subsets of attributes and ways to store these attributes.</P>
<P>
<A NAME="Text_13.htm_IX_VisTextStorageFlags">
 </A>
A simple text object may only need a 16-bit record (such as <CODE>
VisTextDefaultCharAttr</CODE>
 or <CODE>
VisTextDefaultParaAttr</CODE>
) to store its text attributes; a highly complex text object may need a chunk array of several 30+ byte elements. The manner in which these attributes are stored is specified in the <CODE>
VisTextStorageFlags</CODE>
 of the text object.</P>
<P CLASS="figTitle">
Code Display 10-15 VisTextStorageFlags</P>
<PRE>typedef ByteFlags VisTextStorageFlags;
#define VTSF_LARGE				0x80
#define VTSF_MULTIPLE_CHAR_ATTRS				0x40
#define VTSF_MULTIPLE_PARA_ATTRS				0x20
#define VTSF_TYPES				0x10
#define VTSF_GRAPHICS				0x08
#define VTSF_DEFAULT_CHAR_ATTR				0x04
#define VTSF_DEFAULT_PARA_ATTR				0x02
#define VTSF_STYLES				0x01</PRE>
<DL>
<DT>
VTSF_LARGE</DT><DD>
<A NAME="Text_13.htm_IX_VTSF_&ldots;">
 </A>
This flag states that this text object is using the large model for its data. In this case, the rest of the settings in <CODE>
VisTextStorageFlags</CODE>
 are ignored. The large model is a highly complex text formatting tool; you should avoid it entirely until you are familiar with other aspects of the text object.</DD>
<DT>
VTSF_MULTIPLE_CHAR_ATTRS</DT><DD>
This flag specifies that the text may display multiple character attributes. Each character may then display its own character attributes independent of other characters. If this flag is set, VTSF_DEFAULT_CHAR_ATTRS must be not set.</DD>
<DT>
VTSF_MULTIPLE_PARA_ATTRS</DT><DD>
This flag specifies that the text may display multiple paragraph attributes. Each paragraph may then display its own attributes independent of other paragraphs. If this flag is set, VTSF_DEFAULT_PARA_ATTRS must not be set.</DD>
<DT>
VTSF_TYPES</DT><DD>
This flag specifies that this text object contains a types run.</DD>
<DT>
VTSF_GRAPHICS</DT><DD>
This flag specifies that this text object contains a graphics run.</DD>
<DT>
VTSF_DEFAULT_CHAR_ATTRS</DT><DD>
This flag specifies that this text object only uses a set of provided default character attributes. These default attributes are represented by a record of type <CODE>
VisTextDefaultCharAttrs</CODE>
. If this flag is not set, the text object will use the larger <CODE>
VisTextCharAttr</CODE>
 structure to store its character attributes instead.</DD>
<DT>
VTSF_DEFAULT_PARA_ATTRS</DT><DD>
This flag specifies that this text object only uses a set of provided default paragraph attributes. These default attributes are represented by a record of type <CODE>
VisTextDefaultParaAttrs</CODE>
. If this flag is not set, the text object will use the larger <CODE>
VisTextParaAttr</CODE>
 structure to store its paragraph attribute.</DD>
<DT>
VTSF_STYLES</DT><DD>
This flag specifies that this text object contains a styles run.<A NAME="Text_13.htm_marker=38833">
 </A>
</DD>
</DL>
<HR>
<A NAME="Text_14.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 4 
Text Object Chunks</H2>
<P>
Each text object contains several instance fields that may reference outside chunks. Most non-large text objects will reference the following chunks:</P>
<UL>
<LI>
A text chunk containing the string of text for that object.</LI>
<LI>
A lines/fields chunk containing internal information about the length and position of lines and tab fields.</LI>
<LI>
A character attributes chunk, containing either a single <CODE>
VisTextCharAttr</CODE>
 structure or (for multiple character attributes) a list of <CODE>
VisTextCharAttr</CODE>
 structures.</LI>
<LI>
A paragraph attributes chunk, containing either a single <CODE>
VisTextParaAttr</CODE>
 structure or (for multiple paragraph attributes) a list of <CODE>
VisTextParaAttr</CODE>
 structures.</LI>
<LI>
For multiple character attributes, a chunk of character attribute runs, referencing the list of <CODE>
VisTextCharAttr</CODE>
 structures above.</LI>
<LI>
For multiple paragraph attributes, a chunk of paragraph attribute runs, referencing the list of <CODE>
VisTextParaAttr</CODE>
 structures above.</LI>
</UL>
<P>
The Text Object Library provides many other features, but these are the most often-used and difficult to master. You should have a complete grasp of these mechanisms before using either VisText or GenText. To make their use easier, both objects use these features in essentially the same manner.</P>
<P CLASS="subsectionLink">
<A HREF="#Text_15.htm">The Text</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_16.htm">Lines and Fields</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_17.htm">Character Runs</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_18.htm">Paragraph Runs</A></P>
<HR>
<A NAME="Text_15.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 4.1 <A HREF="#Text_14.htm">Text Object Chunks</A>: 
<A NAME="Text_15.htm_60374">
 </A>
The Text</H3>
<P>
The most important data associated with a text object is the text itself. The text of all non-large Text Objects is stored within a single chunk; this chunk is located in the same resource as the object itself. Text objects contain an instance field with a ChunkHandle to this text chunk. (In GenText objects, this is the instance field GTXI_<CODE>
text</CODE>
; in VisText objects, this is VTI_<CODE>
text</CODE>
.)</P>
<P>
Unless your text object uses the complex large model, it stores all of its text within this chunk. You may set initial text for your text object to appear within its instance data. The text object library automatically handles keyboard input from the user and translates that into characters displayed within the text object, altering the contents of the text chunk at the same time. </P>
<P>
The text within the chunk is represented by a null-terminated character string. Each character of the text occupies a zero-based position within the text field. (The first character in the text field is at position zero.) These character positions are useful for setting character and paragraph attributes, marking the current selection, and marking the insertion point for new text.</P>
<P>
The text object library provides a number of operations that you can perform to alter the display of text. These messages may take text from a variety of sources and include it within your text object; alternatively, you may retrieve text from your object and send it to other objects or processes.</P>
<P>
Though the text within a non-large text object will always reside in a chunk (and may therefore be referenced with an optr) text may come from (and go to) several different sources. If you intend to retrieve text from or send text to a text object, you must know what type of source (or destination) you are dealing with.</P>
<P>
Typically, text outside of a text object will reside in one of the following six forms. The first two cases are the most common. </P>
<UL>
<LI>
A pointer to null terminated text string.</LI>
<LI>
An optr to a chunk. (This is the same format the text object itself stores its text.)</LI>
<LI>
A handle of a global memory block.</LI>
<LI>
A handle of a VM block.</LI>
<LI>
A database item.</LI>
<LI>
A huge array.</LI>
</UL>
<P>
For each operation on a text object, the text object library provides specific messages tailored to the format you are retrieving text from or transferring text to.</P>

<H4 CLASS="HeadingC">
Text Ranges</H4>
<PRE>VisTextRange, MSG_VIS_TEXT_GET_RANGE, VisTextRangeContext, MSG_VIS_TEXT_GET_TEXT_SIZE</PRE>
<P>
<A NAME="Text_15.htm_IX_VTR_&ldots;">
 </A>
<A NAME="Text_15.htm_IX_VisTextRange">
 </A>
Frequently, your application may wish to specify a range of text to act on. This range specifies the starting and ending points within the text for the relevant operation. Each of these starting and ending points is a zero-based character position. </P>
<PRE>typedef struct {
    dword		VTR_start;
			/* starting character position */
    dword		VTR_end;
			/* ending character position */
} VisTextRange;</PRE>
<P>
To select a starting point at the first character, set VTR_<CODE>
start</CODE>
 to zero. To select an ending point at the last character, set <CODE>
VTR_end</CODE>
 to the special constant TEXT_ADDRESS_PAST_END.</P>
<P>
If you want to pass the current selection as a range in any message that demands a <CODE>
VisTextRange</CODE>
, pass VIS_TEXT_RANGE_SELECTION to indicate that the currently selected area should be used to specify the range. Note that for some operations (such as paragraph attribute changes) the affected area may be larger than the text selection. Pass VIS_TEXT_RANGE_PARAGRAPH_SELECTION if you want the currently selected area to be used after it has been adjusted to reflect its paragraph boundaries.</P>
<P>
You can use MSG_VIS_TEXT_GET_RANGE to return an actual <CODE>
VisTextRange</CODE>
 of the selection (or paragraph selection). Pass this message a <CODE>
VisTextRangeContext</CODE>
, which specifies whether the range will include just the selection or kick out the range to its paragraph boundaries.The <CODE>
VisTextRange</CODE>
 buffer that you also pass must be initially filled in (with VTR_<CODE>
start</CODE>
 as 0 and VTR_<CODE>
end</CODE>
 as TEXT_ADDRESS_PAST_END). </P>
<PRE>typedef WordFlags VisTextRangeContext;
#define VTRC_PARAGRAPH_CHANGE							0x8000
#define VTRC_CHAR_ATTR_CHANGE							0x4000
#define VTRC_PARA_ATTR_BORDER_CHANGE							0x2000</PRE>
<P>
MSG_VIS_TEXT_GET_TEXT_SIZE returns the total size of the text within the text object.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_RANGE">
 </A>
MSG_VIS_TEXT_GET_RANGE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_GET_RANGE(
        VisTextRange		*range,
        word		context);</PRE>
<P>
This message fills in a <CODE>
VisTextRange</CODE>
 buffer based on the selection criteria passed in the <EM>
context</EM>
 argument. The context information specifies whether the range will be used for a character attribute change (in which case the normal selection positions will be used) or whether the range will be used for a paragraph attribute change (in which case the boundaries of the selection will be kicked out to paragraph boundaries).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
range</EM>
	<CODE>
VisTextRange</CODE>
 buffer to hold the range text positions returned from the message handler. This buffer must be initially filled inwith VTR_<CODE>
start</CODE>
 as 0 and VTR_<CODE>
end</CODE>
 as TEXT_ADDRESS_PAST_END. </P>
<DL>
<DT>
<EM>
context</EM>
</DT><DD><CODE>
VisTextRangeContext</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	The <CODE>
VisTextRange</CODE>
 buffer filled in.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_TEXT_SIZE">
 </A>
MSG_VIS_TEXT_GET_TEXT_SIZE</H6>
<PRE CLASS="syntax">dword	MSG_VIS_TEXT_GET_TEXT_SIZE();</PRE>
<P>
This message returns the current size of text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	The size of the text within the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Replacing Text</H4>
<PRE>MSG_VIS_TEXT_REPLACE_TEXT</PRE>
<P>
There are many messages provided in <CODE>
VisTextClass</CODE>
 to replace text within your Text Object. The most generic (and therefore versatile) of these messages is MSG_VIS_TEXT_REPLACE_TEXT. Simpler messages that you can use in special cases are documented in the following section (e.g. if you need to replace all of the text--or all of the text within a selection).</P>
<P>
You may replace any range of text displayed within a Text Object by sending MSG_VIS_TEXT_REPLACE_TEXT, passing a pointer to a <CODE>
VisTextReplaceParameters</CODE>
 structure. This structure must contain a range of text to replace and a <CODE>
TextReference</CODE>
 that defines how the replacement text is referenced and stored. The structure is shown below.</P>
<PRE>typedef struct {
    VisTextRange         VTRP_range;
    dword                VTRP_insCount;
    TextReference        VTRP_textReference;
    VisTextReplaceFlags  VTRP_flags;
} VisTextReplaceParameters;</PRE>
<P>
VTRP_<CODE>
range </CODE>
defines the range of text being replaced.</P>
<P>
VTRP_<CODE>
insCount</CODE>
 contains the number of characters in the replacement string buffer that is passed in VTRP_<CODE>
textReference</CODE>
. If you wish to have the Text object calculate this value itself dynamically, you may pass INSERT_COMPUTE_TEXT_LENGTH in the high word of this field (and zero in the low word).</P>
<P>
VTRP_<CODE>
textReference</CODE>
 contains a <CODE>
TextReference</CODE>
 structure. This structure is explained in more detail below.</P>
<P>
VTRP_<CODE>
flags</CODE>
 contains a bitfield of <CODE>
VisTextReplaceFlags</CODE>
. Valid flags are:</P>
<DL>
<DT>
VTRF_FILTER</DT><DD>
This flag indicates that the passed replacement string should be passed through the Text object's VTI_<CODE>
filters</CODE>
, if any, before it is inserted into the Text object.</DD>
<DT>
VTRF_KEYBOARD_INPUT</DT><DD>
This flag indicates that the text being inserted is coming from the keyboard rather than from some other source. </DD>
<DT>
VTRF_USER_MODIFICATION</DT><DD>
This flag indicates that the text being inserted is due to a user modification. (User modifications will mark the Text object dirty; text inserted due to an application-initiated action may not mark the Text object dirty.)</DD>
<DT>
VTRF_UNDO</DT><DD>
This flag indicates that the text being inserted is due to an UNDO operation.</DD>
<DT>
VTRF_DO_NOT_SEND_CONTEXT_UPDATE</DT><DD>
This flag is internally set. It speeds up context notifications during global replaces, ensuring that the context is only updated after the entire operation has finished. Do not set this flag yourself.</DD>
</DL>
<P>
<A NAME="Text_15.htm_IX_TR_&ldots;  (TextReference structure)">
 </A>
<A NAME="Text_15.htm_IX_TextReference">
 </A>
The <CODE>
TextReference</CODE>
 structure is shown below:</P>
<PRE>typedef struct {
    TextReferenceType     TR_type;
    TextReferenceUnion    TR_ref;
} TextReference</PRE>
<P>
<A NAME="Text_15.htm_IX_TRT_&ldots;  (TextReferenceType type)">
 </A>
<A NAME="Text_15.htm_IX_TextReferenceType">
 </A>
The <CODE>
TextReferenceType</CODE>
 indicates what structure is referenced within the <CODE>
TextReferenceUnion</CODE>
. For each case, the reference is a structure of different arguments and size. These types are listed below, and correspond to teh indicated matching structure:</P>
<DL>
<DT CLASS="FIXME_WorListWide">
	TRT_POINTER	/* TextReferencePointer */</DT><DD>
TRT_SEGMENT_CHUNK		/* TextReferenceSegmentChunk */<BR>
TRT_OPTR		/* TextReferenceBlockChunk */<BR>
TRT_BLOCK		/* TextReferenceBlock */<BR>
TRT_VM_BLOCK		/* TextReferenceVMBlock */<BR>
TRT_DB_ITEM		/* TextReferenceDBItem */<BR>
TRT_HUGE_ARRAY		/* TextReferenceHugeArray */</DD>
</DL>
<P>
<A NAME="Text_15.htm_IX_TRU_&ldots;  (TextReferenceUnion)">
 </A>
<A NAME="Text_15.htm_IX_TextReferenceUnion">
 </A>
The <CODE>
TextReferenceUnion</CODE>
 may be any of the following:</P>
<PRE>typedef union {
    TextReferencePointer       TRU_pointer;
    TextReferenceSegmentChunk  TRU_segChunk;
    TextReferenceBlockChunk    TRU_blockChunk;
    TextReferenceBlock         TRU_block;
    TextReferenceVMBlock       TRU_vmBlock;
    TextReferenceDBItem        TRU_dbItem;
    TextReferenceHugeArray     TRU_hugeArray;
} TextReferenceUnion;</PRE>
<P>
The formats of these individual reference structures are contained within the Structures Reference book.</P>

<H6 CLASS="RefETitle">
MSG_VIS_TEXT_REPLACE_TEXT</H6>
<PRE CLASS="syntax">Boolean	MSG_VIS_TEXT_REPLACE_TEXT(
        VisTextReplaceParameters				*params);</PRE>
<P>
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_TEXT">
 </A>
This message replaces the text string within a text object (either a VisText or a GenText object) with the text referenced within the passed structure. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
*params</EM>
	A pointer to a <CODE>
VisTextReplaceParameters</CODE>
 structure.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if an error occurred; <EM>
false</EM>
 if the Text object's text is replaced. </P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Replacing Text All At Once</H4>
<PRE>MSG_VIS_TEXT_REPLACE_ALL_PTR, MSG_VIS_TEXT_REPLACE_ALL_OPTR, MSG_VIS_TEXT_REPLACE_ALL_BLOCK, MSG_VIS_TEXT_REPLACE_ALL_VM_BLOCK, MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM, MSG_VIS_TEXT_REPLACE_ALL_HUGE_ARRAY</PRE>
<P>
You may replace the text displayed within a Text Object all at once with the following messages. Any previous text within the text object will be replaced with new text. The new text may come from any of the formats previously described. The format of this source determines which message you should use to replace the text.</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_PTR</CODE>
 replaces the text with text referenced by a simple pointer to a text string.</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_OPTR</CODE>
 replaces the text with text referenced by an optr. (This is the format that non-large text objects store their text.)</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_BLOCK</CODE>
 replaces the text with text residing in a global memory block.</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_VM_BLOCK</CODE>
 replaces the text with text residing in a VM block. Text objects that use the large model usually store their text within a VM block, so this message is useful for transferring text from one VisText object to another, for example.</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM</CODE>
 replaces the text with text from a database item.</P>
<P>
<CODE>
MSG_VIS_TEXT_REPLACE_ALL_HUGE_ARRAY</CODE>
 replaces the text with text from a huge array.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_PTR">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_PTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_PTR(
        const char 		*text, 
        word 		textLen);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText object) with the text referenced by the passed pointer. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	A pointer to a text string.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The text length (in characters) or zero if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The Text object's text is replaced. </P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_OPTR">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_OPTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_OPTR(
        optr o,
        word textLen);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText) with the text referenced by the passed optr. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
o</EM>
	The optr of the chunk containing the text.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>Length of the text string or zero if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The text object's text is replaced.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_BLOCK">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_BLOCK(
        word block,
        word textLen);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText) with the text within the passed data block. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
block</EM>
	The handle of the data block containing the text to use in the replacement operation.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text or zero if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The text object's text is replaced.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_VM_BLOCK">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_VM_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_VM_BLOCK(
        VMFileHandle		file,
        VMBlockHandle		block,
        word 		textLen);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText) with the text within the passed data block. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the VM file containing the text.</P>
<DL>
<DT>
<EM>
block</EM>
</DT><DD>The VM block handle of the block within the VM file.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text or zero if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The text object's text is replaced.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_DB_ITEM(
        VMFileHandle 		file,
        DBGroup 		group,
        DBItem		item);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText) with the text within the passed database item. The text is assumed to be null-terminated.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the database item's associated VM file.</P>
<DL>
<DT>
<EM>
group</EM>
</DT><DD>The database group containing the text.</DD>
<DT>
<EM>
item</EM>
</DT><DD>The DB item containing the text.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The text object's text is replaced.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_ALL_HUGE_ARRAY">
 </A>
MSG_VIS_TEXT_REPLACE_ALL_HUGE_ARRAY</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_ALL_HUGE_ARRAY(
        VMFileHandle		file,
        VMBlockHandle		hugeArrayBlock,
        word		textLen);</PRE>
<P>
This message replaces the text string within a text object (either a VisText or a GenText) with the text within the passed HugeArray.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the huge array's associated VM file.</P>
<DL>
<DT>
<EM>
hugeArrayBlock</EM>
</DT><DD>The VM block handle of the huge array directory block.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text or zero if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing. The text object's text is replaced.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Replacing the Text Within a Selection</H4>
<PRE>MSG_VIS_TEXT_REPLACE_SELECTION_PTR, MSG_VIS_TEXT_REPLACE_SELECTION_OPTR, MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK, MSG_VIS_TEXT_REPLACE_SELECTION_VM_BLOCK, MSG_VIS_TEXT_REPLACE_SELECTION_DB_ITEM, MSG_VIS_TEXT_REPLACE_SELECTION_HUGE_ARRAY</PRE>
<P>
The text object library automatically allows text selection. By using the mouse (or other device, depending on the specific UI), a user may select any section of text and perform operations on this selected text. The following messages replace any selected text with text from one of the described sources. What message you use depends on what type of source your text comes from.</P>
<P>
Note that if no text is selected, these messages will enter text at the current cursor position. This allows these messages either to replace selected text or to &quot;insert&quot; text if none is selected. You may override this insertion behavior by setting paragraph attributes. In those cases, text entered at the current position will overstrike current text.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_PTR">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_PTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_PTR(
        const char		*text,
        word		textLen);</PRE>
<P>
This message replaces the current selection within a text object with the text contained in the passed string pointer. If no text is currently selected, the text will be inserted at the current cursor position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to the character string.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_OPTR">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_OPTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_OPTR(
        optr	o,
        word	textLen);</PRE>
<P>
This message replaces the current selection within a text object with the text in the chunk specified by <CODE>
o</CODE>
. If no text is currently selected, the text will be inserted at the current cursor position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
o</EM>
	The optr of the text chunk.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_BLOCK(
        word	block,
        word	textLen);</PRE>
<P>
This message replaces the current selection within a text object with the text contained in the passed block. If no text is currently selected, the text will be inserted at the current cursor position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
block</EM>
	Handle of the text block.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_VM_BLOCK">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_VM_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_VM_BLOCK(
        VMFileHandle		file,
        VMBlockHandle		block,
        word		textLen);</PRE>
<P>
This message replaces the current selection within a text object by the text contained in the passed VM block. If no text is currently selected, the text will be inserted at the current cursor position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	Handle of the VM file containing the text.</P>
<DL>
<DT>
<EM>
block</EM>
</DT><DD>Handle of the block within the VM file.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_DB_ITEM">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_DB_ITEM</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_DB_ITEM(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This message replaces the current selection within a text object with the text contained in the passed database item. If no text is currently selected, the text will be inserted at the current cursor position. The text is assumed to be null-terminated.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the VM file containing the text.</P>
<DL>
<DT>
<EM>
group</EM>
</DT><DD>The database group containing the text.</DD>
<DT>
<EM>
item</EM>
</DT><DD>The database item.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_REPLACE_SELECTION_HUGE_ARRAY">
 </A>
MSG_VIS_TEXT_REPLACE_SELECTION_HUGE_ARRAY</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_REPLACE_SELECTION_HUGE_ARRAY(
        VMFileHandle		file,
        VMBlockHandle		hugeArrayBlock,
        word		textLen);</PRE>
<P>
This message replaces the current selection within a text object with the text contained in the passed huge array. If no text is currently selected, the text will be inserted at the current cursor position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText or VisText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file containing the huge array.</P>
<DL>
<DT>
<EM>
hugeArrayBlock</EM>
</DT><DD>The VM block handle of the huge array directory block.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Appending the Text</H4>
<PRE>MSG_VIS_TEXT_APPEND_PTR, MSG_VIS_TEXT_APPEND_OPTR, MSG_VIS_TEXT_APPEND_BLOCK, MSG_VIS_TEXT_APPEND_VM_BLOCK, MSG_VIS_TEXT_APPEND_DB_ITEM, MSG_VIS_TEXT_APPEND_HUGE_ARRAY</PRE>
<P>
In many cases, you may not want to replace text but instead add it to the end of the current text. You may use any of the following messages to append text to your text object. Again, the new text may come from any of the formats previously described. The format of this source determines which message you should use to add the text.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_PTR">
 </A>
MSG_VIS_TEXT_APPEND_PTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_PTR(
        const char		*text,
        word		textLen);</PRE>
<P>
This message appends text to a text object; the text is added at the end of the current text. None of the previous text is changed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to the character string.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_OPTR">
 </A>
MSG_VIS_TEXT_APPEND_OPTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_OPTR(
        optr	o,
        word	textLen);</PRE>
<P>
This message adds text to a text object; the text is added at the end of the current text. None of the previous text is changed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
o</EM>
	The optr of the text chunk.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_BLOCK">
 </A>
MSG_VIS_TEXT_APPEND_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_BLOCK(
        word	block,
        word	textLen);</PRE>
<P>
This message appends text to a text object; the text is added at the end of the current text. None of the previous text is changed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
block</EM>
	Handle of the text block.</P>
<DL>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_VM_BLOCK">
 </A>
MSG_VIS_TEXT_APPEND_VM_BLOCK</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_VM_BLOCK(
        VMFileHandle		file,
        VMBlockHandle		block,
        word		textLen);</PRE>
<P>
This message appends text to a text object; the text is added at the end of the current text. None of the previous text is changed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	Handle of the VM file containing the text.</P>
<DL>
<DT>
<EM>
block</EM>
</DT><DD>Handle of the block within the VM file.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_DB_ITEM">
 </A>
MSG_VIS_TEXT_APPEND_DB_ITEM</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_DB_ITEM(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This message appends text to a text object; the text is added at the end of the current text. None of the previous text is changed. The text is assumed to be null-terminated.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The handle of the VM file containing the text.</P>
<DL>
<DT>
<EM>
group</EM>
</DT><DD>The database group containing the text.</DD>
<DT>
<EM>
item</EM>
</DT><DD>The database item.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_APPEND_HUGE_ARRAY">
 </A>
MSG_VIS_TEXT_APPEND_HUGE_ARRAY</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_APPEND_HUGE_ARRAY(
        VMFileHandle		file,
        VMBlockHandle		hugeArrayBlock,
        word		textLen);</PRE>
<P>
This message appends text to a text object; the text is added at the end of the current text. None of the previous text is changed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file containing the huge array.</P>
<DL>
<DT>
<EM>
hugeArrayBlock</EM>
</DT><DD>The block handle of the huge array.</DD>
<DT>
<EM>
textLen</EM>
</DT><DD>The length of the text in characters or zero, if null-terminated.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Retrieving the Text</H4>
<PRE>MSG_VIS_TEXT_GET_ALL_PTR, MSG_VIS_TEXT_GET_ALL_OPTR, MSG_VIS_TEXT_GET_ALL_BLOCK, MSG_VIS_TEXT_GET_ALL_VM_BLOCK, MSG_VIS_TEXT_GET_ALL_DB_ITEM, MSG_VIS_TEXT_GET_ALL_HUGE_ARRAY</PRE>
<P>
You may also retrieve the text from your text object and place its text into any of the previously mentioned formats. The format of your destination determines which message you should use.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_PTR">
 </A>
MSG_VIS_TEXT_GET_ALL_PTR</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ALL_PTR(
        const char		*text);</PRE>
<P>
This message retrieves the entire text of a text object and copies it to the buffer passed. The text within the text object is unchanged.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to a locked or fixed buffer. The buffer must be large enough to accommodate all the text.</P>
<P CLASS="refField">
Return:	The length of the null-terminated string not counting the null character.</P>
<DL>
<DT>
<CODE>
text</CODE>
</DT><DD>The buffer pointed to by <CODE>
text</CODE>
 will contain the null-terminated text of the text object.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_OPTR">
 </A>
MSG_VIS_TEXT_GET_ALL_OPTR</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ALL_OPTR(
        optr	o);</PRE>
<P>
This message retrieves the entire text of a text object and copies it into the chunk specified by <CODE>
o</CODE>
. The text within the text object is unchanged. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
o</EM>
	The optr of the chunk into which the text will be copied. Pass a valid memory handle with a null chunk handle to have the message allocate a new chunk.</P>
<P CLASS="refField">
Return:	The chunk handle of the resized (or new) chunk. The chunk will always exist upon return and will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_BLOCK">
 </A>
MSG_VIS_TEXT_GET_ALL_BLOCK</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ALL_BLOCK(
        word	block);</PRE>
<P>
This message retrieves the entire text of a text object and copies it into the passed data block.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
block</EM>
	Handle of the memory block into which the text will be copied. Pass a null handle to have the message allocate a new block.</P>
<P CLASS="refField">
Return:	The handle of the resized (or new) block. The block will always exist upon return and will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_VM_BLOCK">
 </A>
MSG_VIS_TEXT_GET_ALL_VM_BLOCK</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ALL_VM_BLOCK(
        VMFileHandle		file,
        VMBlockHandle		block);</PRE>
<P>
This message retrieves the entire text of a text object and copies it into the passed VM block.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file.</P>
<DL>
<DT>
<EM>
block</EM>
</DT><DD>The VM block handle of the VM block into which the text will be copied. Pass a null handle to have the message allocate a new VM block in the file.</DD>
</DL>
<P CLASS="refField">
Return:	The VM block handle of the resized (or new) VM block. The VM block will always exist (assuming a valid VM file was passed), and it will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_DB_ITEM">
 </A>
MSG_VIS_TEXT_GET_ALL_DB_ITEM</H6>
<PRE CLASS="syntax">DBGroupAndItem MSG_VIS_TEXT_GET_ALL_DB_ITEM(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This message retrieves the entire text of a text object and copies it into the passed database item. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file.</P>
<DL>
<DT>
<EM>
group</EM>
</DT><DD>The database group number (may be DB_UNGROUPED--if so, a new group will be returned as part of the return value).</DD>
<DT>
<EM>
item</EM>
</DT><DD>The item number of the database item into which the text will be copied. Pass zero to allocate a new database item in the specified <CODE>
group</CODE>
.</DD>
</DL>
<P CLASS="refField">
Return:	The <CODE>
DBGroupAndItem</CODE>
 representing the resized (or new) DB item into which the text was copied. The item will always exist (assuming a valid VM file was specified) upon return, and it will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_ALL_HUGE_ARRAY">
 </A>
MSG_VIS_TEXT_GET_ALL_HUGE_ARRAY</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ALL_HUGE_ARRAY(
        VMFileHandle		file,
        VMBlockHandle		hugeArrayBlock);</PRE>
<P>
This message retrieves the entire text of a text object and copies it into the passed huge array block.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file containing the huge array.</P>
<DL>
<DT>
<EM>
hugeArrayBlock</EM>
</DT><DD>The VM block handle of the huge array. Pass a null handle to have the message allocate a new huge array.</DD>
</DL>
<P CLASS="refField">
Return:	The VM block handle of the first block of the resized (or new) huge array. The huge array will always exist upon return (assuming a valid VM file was specified), and it will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Retrieving the Text Within a Selection</H4>
<PRE>MSG_VIS_TEXT_GET_SELECTION_PTR, MSG_VIS_TEXT_GET_SELECTION_OPTR, MSG_VIS_TEXT_GET_SELECTION_BLOCK, MSG_VIS_TEXT_GET_SELECTION_VM_BLOCK, MSG_VIS_TEXT_GET_SELECTION_DB_ITEM, MSG_VIS_TEXT_GET_SELECTION_HUGE_ARRAY</PRE>
<P>
To retrieve the text within the current selection, you may send any of the following messages to your text object. If no text is currently selected no text will be retrieved.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_PTR">
 </A>
MSG_VIS_TEXT_GET_SELECTION_PTR</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SELECTION_PTR(
        const char		*text);</PRE>
<P>
This message retrieves the currently selected text and stores it in the character string referenced by the passed pointer. The text remains selected and intact in the original text object. The passed buffer must be large enough to accommodate the text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
text</EM>
	The pointer to the character string.</P>
<P CLASS="refField">
Return:	The length of the string not including the terminating null character.</P>
<DL>
<DT>
<CODE>
text</CODE>
</DT><DD>The buffer pointed to by <CODE>
text</CODE>
 will contain the null-terminated character string.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_OPTR">
 </A>
MSG_VIS_TEXT_GET_SELECTION_OPTR</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SELECTION_OPTR(
        optr	o);</PRE>
<P>
This message retrieves the currently selected text and copies it into the passed chunk. The text remains selected and intact in the original text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
o</EM>
	The optr of the text chunk into which the text will be copied. Pass a valid memory handle and a null chunk handle to have the message allocate a new chunk in the give block.</P>
<P CLASS="refField">
Return:	The chunk handle of the resized (or new) chunk containing the text. The chunk will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_BLOCK">
 </A>
MSG_VIS_TEXT_GET_SELECTION_BLOCK</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SELECTION_BLOCK(
        word	block);</PRE>
<P>
This message retrieves the currently selected text and copies it into the passed data block. The text remains selected and intact in the original text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
block</EM>
	Handle of the text block to place the text into. Pass a null handle to have the message allocate a new memory block.</P>
<P CLASS="refField">
Return:	The memory handle of the resized (or new) block containing the selected text. The block will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_VM_BLOCK">
 </A>
MSG_VIS_TEXT_GET_SELECTION_VM_BLOCK</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SELECTION_VM_BLOCK(
        VMFileHandle		file,
        VMBlockHandle		block);</PRE>
<P>
This message retrieves the currently selected text and copies it into the passed VM block. The text remains selected and intact in the original text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file.</P>
<DL>
<DT>
<EM>
block</EM>
</DT><DD>The VM block handle of the VM block into which the text will be copied. Pass a null block handle to have the message allocate a new VM block in the file.</DD>
</DL>
<P CLASS="refField">
Return:	The VM block handle of the resized (or new) VM block. The VM block will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_DB_ITEM">
 </A>
MSG_VIS_TEXT_GET_SELECTION_DB_ITEM</H6>
<PRE CLASS="syntax">DBGroupAndItem MSG_VIS_TEXT_GET_SELECTION_DB_ITEM(
        VMFileHandle		file,
        DBGroup		group,
        DBItem		item);</PRE>
<P>
This message retrieves the currently selected text and copies it into the given database item. The text remains selected and intact in the original text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file.</P>
<DL>
<DT>
<EM>
group</EM>
</DT><DD>The group number of the passed item (if DB_UNGROUPED, a group will be determined).</DD>
<DT>
<EM>
item</EM>
</DT><DD>The item number of the database item into which the text will be copied. Pass zero to have the message allocate a new database item in the specified group and file.</DD>
</DL>
<P CLASS="refField">
Return:	The <CODE>
DBGroupAndItem</CODE>
 representing the resized (or new) database item. The item will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_HUGE_ARRAY">
 </A>
MSG_VIS_TEXT_GET_SELECTION_HUGE_ARRAY</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SELECTION_HUGE_ARRAY(
        VMFileHandle		file,
        VMBlockHandle		hugeArrayBlock);</PRE>
<P>
This message retrieves the currently selected text and copies it into the passed huge array. The text remains selected and intact in the original text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	The VM file handle of the VM file.</P>
<DL>
<DT>
<EM>
hugeArrayBlock</EM>
</DT><DD>The VM block handle of the huge array into which the text will be copied. Pass a null handle to have the message allocate a new huge array in the passed VM file.</DD>
</DL>
<P CLASS="refField">
Return:	The VM block handle of the resized (or new) huge array block. The huge array will contain at least the terminating null character.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Other Operations on the Text</H4>
<PRE>MSG_VIS_TEXT_DELETE_ALL, MSG_VIS_TEXT_DELETE_SELECTION</PRE>
<P>
To delete the entire contents of a text object, send it <CODE>
MSG_VIS_TEXT_DELETE_ALL</CODE>
. This message will also resize the text's chunk to its minimum size. To delete only the current selection, send the text object <CODE>
MSG_VIS_TEXT_DELETE_SELECTION</CODE>
. No text will be selected after this message is sent. </P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_DELETE_ALL">
 </A>
MSG_VIS_TEXT_DELETE_ALL</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_DELETE_ALL();</PRE>
<P>
This message deletes the entire contents of a text object's text chunk. The chunk will be resized to zero.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_DELETE_SELECTION">
 </A>
MSG_VIS_TEXT_DELETE_SELECTION</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_DELETE_SELECTION();</PRE>
<P>
This message deletes the currently selected text. The text after the deletion will be automatically repositioned, and the text chunk will be resized.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Marking the Text Selection</H4>
<PRE>MSG_VIS_TEXT_GET_SELECTION_RANGE, MAG_VIS_TEXT_SELECT_RANGE, MSG_VIS_TEXT_SELECT_RANGE_SMALL, MSG_VIS_TEXT_SELECT_ALL, MSG_VIS_TEXT_SELECT_START, MSG_VIS_TEXT_SELECT_END, MSG_VIS_TEXT_SELECT_RELATIVE</PRE>
<P>
<CODE>
MSG_VIS_TEXT_GET_SELECTION_RANGE</CODE>
 returns the <CODE>
VisTextRange</CODE>
 of the current selection. </P>
<P>
MSG_VIS_TEXT_SELECT_RANGE selects the selected area of text to the passed range. This message can be used with both large and small model text objects.</P>
<P>
<CODE>
MSG_VIS_TEXT_SELECT_RANGE_SMALL</CODE>
 selects a range of text. The message must pass the <CODE>
VisTextRange</CODE>
 to &quot;select.&quot; This message only works with non-large text objects. Any previous selection will be deselected.</P>
<P>
<CODE>
MSG_VIS_TEXT_SELECT_ALL</CODE>
 selects the recipient's entire text.</P>
<P>
<CODE>
MSG_VIS_TEXT_SELECT_START</CODE>
 selects the start of the text with a <CODE>
VisTextRange</CODE>
 of zero length. This places the cursor at the beginning of the text object and deselects any previous selection.</P>
<P>
<CODE>
MSG_VIS_TEXT_SELECT_END</CODE>
 selects the end of the text with a <CODE>
VisTextRange</CODE>
 of zero length. This places the cursor at the end of the text object and deselects any previous selection.</P>
<P>
<CODE>
MSG_VIS_TEXT_SELECT_RELATIVE</CODE>
 moves the cursor from its current position to a new location relative to the old position. You may pass this message a relative selection range to move the cursor and select text at the new position.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_GET_SELECTION_RANGE">
 </A>
MSG_VIS_TEXT_GET_SELECTION_RANGE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_GET_SELECTION_RANGE(
        VisTextRange		*vtr);</PRE>
<P>
This message returns the range of the text object's current selection. You must pass this message a <CODE>
VisTextRange</CODE>
 buffer for the message to fill in with the selection range.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
vtr</EM>
	A pointer to a <CODE>
VisTextRange</CODE>
 structure to fill in with the selection range.</P>
<P CLASS="refField">
Return:	The <CODE>
VisTextRange</CODE>
 buffer will be filled in.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_RANGE">
 </A>
MSG_VIS_TEXT_SELECT_RANGE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_RANGE(@stack
        dword	end
        dword	start);</PRE>
<P>
This message creates a selection for a text object. The message must pass the starting and ending character positions to mark as the text object's selection. Any previous selection will be deselected. Note that this message uses dword offsets into the text, and can therefore be used with LARGE model text objects.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
start</EM>
	The zero-based character position of the start of the selection.</P>
<DL>
<DT>
<EM>
end</EM>
</DT><DD>The zero-based character position of the end of the selection. This must be equal to or larger than the start position.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_RANGE_SMALL">
 </A>
MSG_VIS_TEXT_SELECT_RANGE_SMALL</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_RANGE_SMALL(
        word	start,
        word	end);</PRE>
<P>
This message creates a selection for a text object. The message must pass the starting and ending character positions to mark as the text object's selection. Any previous selection will be deselected.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
start</EM>
	The zero-based character position of the start of the selection.</P>
<DL>
<DT>
<EM>
end</EM>
</DT><DD>The zero-based character position of the end of the selection. This must be equal to or larger than the start position.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_ALL">
 </A>
MSG_VIS_TEXT_SELECT_ALL</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_ALL();</PRE>
<P>
This message selects the entire text of a text object as its selection. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_START">
 </A>
MSG_VIS_TEXT_SELECT_START</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_START();</PRE>
<P>
This message places the cursor at the start of the text. Any current selection will be deselected.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_END">
 </A>
MSG_VIS_TEXT_SELECT_END</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_END();</PRE>
<P>
This message places the cursor at the end of the text. Any current selection will be deselected.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_15.htm_IX_MSG_VIS_TEXT_SELECT_RELATIVE">
 </A>
MSG_VIS_TEXT_SELECT_RELATIVE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SELECT_RELATIVE(
        word	newStart,
        word	newEnd);</PRE>
<P>
This message moves a selection from the current cursor position to a position relative to that position.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any VisText or GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
newStart</EM>
	The number of character positions from the current cursor position to start the new selection.</P>
<DL>
<DT>
<EM>
newEnd</EM>
</DT><DD>number of character positions from the current cursor position to end the new selection. This value must be equal to or greater than <EM>
newStart</EM>
.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<HR>
<A NAME="Text_16.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 4.2 <A HREF="#Text_14.htm">Text Object Chunks</A>: 
Lines and Fields</H3>
<P>
Each text object contains a chunk storing its line and field information. The line and field information is internal; you should not alter it. </P>
<HR>
<A NAME="Text_17.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 4.3 <A HREF="#Text_14.htm">Text Object Chunks</A>: 
<A NAME="Text_17.htm_91955">
 </A>
Character Runs</H3>
<P>
<A NAME="Text_17.htm_IX_Character runs">
 </A>
The character attributes of your text object may be singular or multiple. Singular character attributes have one common set of character attributes for use by all characters within a text object. Multiple character attributes store their characteristics in &quot;runs&quot; which allow separate characters in the same object to show different character attributes.</P>

<H4 CLASS="HeadingC">
Singular Character Attributes</H4>
<P>
In many cases, your text object will need only one set of attributes for all characters. In those cases, the text object's character attributes instance field (VTI_<CODE>
charAttrRuns</CODE>
 for VisText, <CODE>
ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR</CODE>
 or <CODE>
ATTR_GEN_TEXT_CHAR_ATTR</CODE>
 for GenText) will store a single set of attributes. This word of data will contain either a 16-bit record or a ChunkHandle to a <CODE>
VisTextCharAttr</CODE>
 structure. Those attributes will be exhibited by all characters in that text object.</P>
<P>
Unless your <CODE>
VisTextStorageFlags</CODE>
 specify VTSF_MULTIPLE_CHAR_ATTRS, your character attributes will be singular. (For GenText, this field is set automatically if using the singular attributes shown above.) All text within the text object will exhibit the same characteristics; also, any changes to the character attributes will affect every character in the entire text. If you need your text object to allow different characters to show different attributes (such as in a word processor), see <A HREF="#Text_17.htm_97656"> Multiple Character Attributes</A>
.</P>
<P>
If your character attributes are singular, you have two choices: use a default set of characteristics or use a more complex (and complete) set of characteristics. For most simple generic text objects, the default set offers enough variety to accomplish most goals. If you need other character styles not offered in the default set, you will have to use the complete set of character attributes.</P>
<P>
To use the default character attributes with a VisText, specify VTSF_DEFAULT_CHAR_ATTRS in your <CODE>
VisTextStorageFlags</CODE>
. The default set uses the <CODE>
VisTextDefaultCharAttr</CODE>
 record to store the character's attributes. This record offers a simple collection of character fonts, point sizes, and other attributes (see below). If you need other character styles not found in this record, you should not set VTSF_DEFAULT_CHAR_ATTRS. The text object will automatically use the <CODE>
VisTextCharAttr</CODE>
 structure.</P>
<P>
By default, text objects using the default character attributes will be set to a font of VTDF_BERKELEY, a point size of VTDS_12, and a text color of C_BLACK.</P>
<P>
If you do not use the default character attributes record, you must use the <CODE>
VisTextCharAttr</CODE>
 structure to store your text object's character attributes. (In this case, do not set the VTSF_DEFAULT_CHAR_ATTRS flag in <CODE>
VisTextStorageFlags</CODE>
.) The text object's character attributes instance field will contain a ChunkHandle to this structure instead of the <CODE>
VisTextDefaultCharAttr</CODE>
 record (see <A HREF="#Text_17.htm_95235"> Setting Character Attributes</A>
).</P>
<P CLASS="figTitle">
Code Display 10-16 <A NAME="Text_17.htm_95235">
 </A>
Setting Character Attributes</P>
<PRE>/* This example shows how to set the default character attributes. */</PRE>
<PRE>@object GenTextClass MyTextObject = {
    GTXI_text = &quot;&quot;;
    ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR = (VTDCA_UNDERLINE |
				(VTDS_18 &lt;&lt; VTDCA_SIZE_OFFSET) | VTDF_BERKELEY);
		/* This sets the default character attributes record (of type
		 * VisTextDefaultCharAttr) to use underlined Berkeley font in
		 * point size 18. */
}</PRE>
<PRE>/* This example shows how to use non-default singular character attributes. */</PRE>
<PRE>@object GenTextClass MyTextObject = {
    GTXI_text = &quot;&quot;;
    ATTR_GEN_TEXT_CHAR_ATTR = (ChunkHandle) @MyTextCharAttrs;
		/* This is a chunk handle to the chunk holding the text
		 * attributes (of type VisTextCharAttr). */
}</PRE>
<PRE>@chunk VisTextCharAttr MyCharAttrs = 
    CHAR_ATTR_FONT_SIZE_STYLE(FID_DTC_URW_ROMAN, 32, TS_UNDERLINE);
		/* This chunk holds the record that will determine the character
		 * attributes of all the GenText's text. The text will be
		 * 32-point Roman, underlined. */</PRE>


<H4 CLASS="HeadingC">
<A NAME="Text_17.htm_97656">
 </A>
Multiple Character Attributes</H4>
<P>
To allow a VisText object to exhibit multiple character attributes, you should set VTSF_MULTIPLE_CHAR_ATTRS and clear VTSF_DEFAULT_CHAR_ATTR flag in the object's <CODE>
VisTextStorageFlags</CODE>
 (stored in <CODE>
VTI_storageFlags</CODE>
). For GenText, you should set <CODE>
ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS</CODE>
. Any multiple character attribute object will not be able to use any of the default character attributes of type <CODE>
VisTextDefaultCharAttr</CODE>
.</P>
<P>
Multiple character attributes allow your object's individual characters to exhibit different attributes. One character may be bold and italic; another may be underlined and in a different font. Any character may exhibit any of the attributes allowed within the <CODE>
VisTextCharAttr</CODE>
 structure.</P>
<P>
Multiple attributes are stored as lists of <CODE>
VisTextCharAttr</CODE>
<IMG SRC="Text_17_charRunExample.gif">

</P>
<P>
Character attributes are specified by &quot;runs.&quot; Each character run is used until another run is encountered, at which point the new character attributes are used. Runs are defined by a character position within a chunk array and an associated token element. At the character position, the token corresponds to a <CODE>
VisTextCharAttr</CODE>
 element. The character attributes specified in this <CODE>
VisTextCharAttr</CODE>
 structure are used until the character position of the next <CODE>
VisTextCharAttr</CODE>
 token.</P>
<P>
If, for example, a GenText object contains the text &quot;Initial Text Here&quot; with the word &quot;Text&quot; underlined, the chunk array of elements would look as shown in the figure above.
<IMG SRC="Text_17_styleRunStructure.gif">

</P>
<P CLASS="figTitle">
Code Display 10-17 Setting Multiple Character Attribute Runs</P>
<PRE>@object GenTextClass MultipleCharAttrsObject = {
    ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS = (ChunkHandle) @MyMultCharAttrs;
    GTXI_text = &quot;Initial Text Here&quot;;
}
#define MCA_PLAIN			0
#define MCA_UNDERLINE			1</PRE>
<PRE>@CHAR_ATTR_ELEMENT_ARRAY_HEADER CharAttrElements = {
    CHAR_ATTR_FONT_SIZE_STYLE(FID_DTC_URW_ROMAN, 12, 0),								 /* Element 0 */
    CHAR_ATTR_FONT_SIZE_STYLE(FID_DTC_URW_ROMAN, 12, TS_UNDERLINE)	/* Element 1 */
};</PRE>
<PRE>@RUN_ARRAY_HEADER(CharAttrElements) MyMultCharAttrs = {
    TRAE_ABS(0, MCA_PLAIN),					/* Element 0 */
    TRAE_ABS(8, MCA_UNDERLINE),					/* Element 1 */
    TRAE_END
};</PRE>


<H4 CLASS="HeadingC">
Changing Character Attributes</H4>
<PRE>MSG_VIS_TEXT_GET_CHAR_ATTR,VisTextCharAttrFlags, VisTextCharAttrDiffs, VisTextGetAttrFlags, MSG_VIS_TEXT_SET_CHAR_ATTR_BY_DEFAULT, MSG_VIS_TEXT_SET_CHAR_ATTR, MSG_VIS_TEXT_SET_FONT_ID, MSG_VIS_TEXT_SET_POINT_SIZE, MSG_VIS_TEXT_SET_TEXT_STYLE</PRE>
<P>
There may be cases in which you would like to change the attributes exhibited by certain characters in your Text object. In most cases, you can do this most easily by including one of the controllers mentioned at the end of this chapter. The controllers leave any underlying work up to the specific controller implementation.</P>
<P>
If you wish to manually change these character attributes, however, there are several messages to retrieve and set character attributes.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_GET_CHAR_ATTR">
 </A>
MSG_VIS_TEXT_GET_CHAR_ATTR</H6>
<PRE CLASS="syntax">word 	MSG_VIS_TEXT_GET_CHAR_ATTR(@stack
        VisTextGetAttrFlags 			flags,
        VisTextCharAttrDiffs 			*diffs,
        VisTextCharAttr 			*attrs,
        dword 			rangeEnd,
        dword 			rangeStart);</PRE>
<P>
This message returns a buffer filled in with the <CODE>
VisTextCharAttr</CODE>
 attributes of the given range of text. If VTGAF_MERGE_WITH_PASSED is passed in the <CODE>
VisTextGetAttrFlags</CODE>
, then the passed <CODE>
VisTextCharAttr</CODE>
 structure will be compared with the range of text that this message is sent to (and any differences will be pointed out in the passed <EM>
diffs</EM>
 buffer.(If this flag is not passed, any information initially in that buffer will be ignored.)</P>
<P>
Over the passed range, different characters may exhibit different attributes; a pointer to a <CODE>
VisTextCharAttrDiffs</CODE>
 structure is also passed to store information about attributes that are different across the range of text.</P>
<P>
<CODE>
VisTextCharAttrDiffs</CODE>
 contains a list of <CODE>
VisTextCharAttrFlags</CODE>
 specifying what attributes are multiply present. The structure also contains the bitfields of the <CODE>
TextStyle</CODE>
 and <CODE>
VisTextExtendedStyles</CODE>
 present over the range of text. Any attribute differences will produce a mention in one of these records; you can think of this process as XORing the attribute bitfields together.</P>
<DL>
<DT>
Possible <CODE>
VisTextCharAttrFlags</CODE>
:</DT><DD>
VTCAF_MULTIPLE_FONT_IDS<BR>
VTCAF_MULTIPLE_POINT_SIZES<BR>
VTCAF_MULTIPLE_COLORS<BR>
VTCAF_MULTIPLE_GRAY_SCREENS<BR>
VTCAF_MULTIPLE_PATTERNS<BR>
VTCAF_MULTIPLE_TRACK_KERNINGS<BR>
VTCAF_MULTIPLE_FONT_WEIGHTS<BR>
VTCAF_MULTIPLE_FONT_WIDTHS<BR>
VTCAF_MULTIPLE_BG_COLORS<BR>
VTCAF_MULTIPLE_BG_GRAY_SCREENS<BR>
VTCAF_MULTIPLE_BG_PATTERNS<BR>
VTCAF_MULTIPLE_STYLES</DD>
</DL>
<P CLASS="refField">
Structures:	</P>
<PRE>typedef struct {
	VisTextCharAttrFlags 				VTCAD_diffs;
	VisTextExtendedStyles 				VTCAD_extendedStyles;
	TextStyle 				VTCAD_textStyles;
	byte 				VTCAD_unused;
} VisTextCharAttrDiffs;</PRE>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
flags</EM>
	VTGAF_MERGE_WITH_PASSED to merge the retrieved text attributes with the text in the passed range.</P>
<DL>
<DT>
<EM>
diffs</EM>
</DT><DD>Pointer to a <CODE>
VisTextCharAttrDiffs</CODE>
 structure to store attribute differences.</DD>
<DT>
<EM>
attrs</EM>
</DT><DD>Pointer to a <CODE>
VisTextCharAttr</CODE>
 buffer to store the retrieved character attributes. If VTGAF_MERGE_WITH_PASSED is passed in flags, this buffer initially contains attributes to match against the retrieved attributes.</DD>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Beginning of the range (character position).</DD>
</DL>
<P CLASS="refField">
Return:	The token of the specific character attribute run (word value) if the text object is storing runs of <CODE>
VisTextCharAttr</CODE>
 structures. The <EM>
attrs</EM>
 and <EM>
diffs</EM>
 buffers are also filled with their relevant information.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_SET_CHAR_ATTR_BY_DEFAULT">
 </A>
MSG_VIS_TEXT_SET_CHAR_ATTR_BY_DEFAULT</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_CHAR_ATTR_BY_DEFAULT(@stack
        VisTextDefaultCharAttr 				defCharAttrs,
        dword 				rangeEnd,
        dword 				rangeStart);</PRE>
<P>
This message sets the character attributes passed in <CODE>
VisTextDefaultCharAttr</CODE>
 over the specified range of the text object. If the text object is not in &quot;default&quot; character attribute mode (i.e. it is storing runs of <CODE>
VisTextCharAttr</CODE>
 structures) it will translate the default attributes into their matching <CODE>
VisTextCharAttr</CODE>
 attributes.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Parameters:	<EM>
defCharAttrs</EM>
	<CODE>
VisTextDefaultCharAttr</CODE>
 record to set over the passed range of text.</P>
<DL>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (Character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Start of the range (Character position).</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_SET_CHAR_ATTR">
 </A>
MSG_VIS_TEXT_SET_CHAR_ATTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_CHAR_ATTR(@stack
        VisTextCharAttr 		*attrs,
        dword 		rangeEnd,
        dword 		rangeStart);</PRE>
<P>
This message sets the character attributes passed in the <CODE>
VisTextCharAttr</CODE>
 buffer over the specified range of the text object. If the text object is in &quot;default&quot; character attribute mode, it will force the text object to begin storing runs of <CODE>
VisTextCharAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Parameters:	<EM>
attrs</EM>
	Pointer to a <CODE>
VisTextCharAttr</CODE>
 buffer.</P>
<DL>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (Character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Start of the range (Character position).</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_SET_FONT_ID">
 </A>
MSG_VIS_TEXT_SET_FONT_ID</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_VIS_TEXT_SET_FONT_ID(@stack
        FontID 		fid,
        dword 		rangeEnd,
        dword 		rangeStart);</PRE>
<P>
This message sets the passed <CODE>
FontID</CODE>
 over the specified range of the text object. If the text object currently displays its values in &quot;default&quot; character attributes, it will force the text object to use character attribute runs to store its <CODE>
VisTextCharAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_SET_POINT_SIZE">
 </A>
MSG_VIS_TEXT_SET_POINT_SIZE</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_VIS_TEXT_SET_POINT_SIZE(@stack
        WWFixed 		pointSize,
        dword 		rangeEnd,
        dword 		rangeStart);</PRE>
<P>
This message sets the passed point size over the specified range of the text object. If the text object currently displays its values in &quot;default&quot; character attributes, it will force the text object to use character attribute runs to store its <CODE>
VisTextCharAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_17.htm_IX_MSG_VIS_TEXT_SET_TEXT_STYLE">
 </A>
MSG_VIS_TEXT_SET_TEXT_STYLE</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_VIS_TEXT_SET_TEXT_STYLE(@stack
        word 		extBitsToClear, 
        word 		extBitsToSet,
        word 		styleBitsToClear, 
        word 		styleBitsToSet,
        dword 		rangeEnd,
        dword 		rangeStart);</PRE>
<P>
This message sets the passed text styles over the specified range of the text object. You must specify the specific style bits to set and clear, both for the VTCA_<CODE>
styles</CODE>
 and the VTCA_<CODE>
extendedStyles</CODE>
 entries.</P>
<P>
If the text object currently displays its values in &quot;default&quot; character attributes, it will force the text object to use character attribute runs to store its <CODE>
VisTextCharAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<HR>
<A NAME="Text_18.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 4.4 <A HREF="#Text_14.htm">Text Object Chunks</A>: 
<A NAME="Text_18.htm_59559">
 </A>
Paragraph Runs</H3>
<P>
<A NAME="Text_18.htm_IX_Paragraph runs">
 </A>
The paragraph attributes of your text object may also be singular or multiple. Singular paragraph attributes use one common set of characteristics for all the text in the text object. Multiple paragraph attributes store their characteristics in &quot;runs&quot; which allow separate paragraphs in the same object to use different attributes.</P>

<H4 CLASS="HeadingC">
Singular Paragraph Attributes</H4>
<P>
You may only need your text object to exhibit a singular set of paragraph attributes. In this case, the text object's paragraph attributes instance field (VTI_<CODE>
paraAttrRuns</CODE>
 for VisText, <CODE>
GEN_TEXT_DEFAULT_PARA_ATTR</CODE>
 or <CODE>
GEN_TEXT_PARA_ATTR</CODE>
 for GenText) will store a single set of attributes. This word of data will contain either a 16-bit record or a ChunkHandle to a chunk of more complex attributes.</P>
<P>
Unless your <CODE>
VisTextStorageFlags</CODE>
 (in <CODE>
VTI_storageFlags</CODE>
) specify VTSF_MULTIPLE_PARA_ATTRS, your paragraph attributes will be singular. (This flag will be set automatically for GenTexts using the above attributes.) Initially, all text within the text object will exhibit these same characteristics; also, any changes to the text object's paragraph attributes will affect the entire text. If your text object should allow different paragraphs to exhibit different attributes, see <A HREF="#Text_18.htm_31863"> Multiple Paragraph Attributes</A>
.</P>
<P>
If your paragraph attributes are singular, you have two choices: use a default set of characteristics or use a more complex (and complete) set of characteristics. What you use depends on the variety of choices you wish your application to have over the display of its text. For most simple generic text objects, the default set offers enough variety to accomplish most goals.</P>
<P>
To use the default paragraph attributes, specify VTSF_DEFAULT_PARA_ATTRS in the text object's <CODE>
VTI_storageFlags</CODE>
 field (for VisText) or set <CODE>
ATTR_GEN_TEXT_DEFAULT_PARA_ATTR</CODE>
 (for GenText). The default set uses the <CODE>
VisTextDefaultParaAttr</CODE>
 record to store the paragraph's attributes. This record offers a simple collection of paragraph justifications, tab stops and margins, and its definition is given in <A HREF="#Text_12.htm_67353"> VisTextDefaultParaAttr</A>
. If you need other paragraph styles not found in this record, you should not set VTSF_DEFAULT_PARA_ATTRS.</P>
<P>
By default, text objects using the default paragraph attributes will be left-justified, have default tab stops at one inch intervals, and have zero right, left, and paragraph margins.</P>
<P>
If you do not use the default paragraph attributes record, you must use the <CODE>
VisTextParaAttr</CODE>
 structure to store your text object's paragraph attributes. (In this case, do not set VTSF_DEFAULT_PARA_ATTRS in <CODE>
VTI_storageFlags</CODE>
.) The text object's paragraph attributes instance field will contain a ChunkHandle to this structure instead of the <CODE>
VisTextDefaultParaAttr</CODE>
 record.</P>
<P CLASS="figTitle">
Code Display 10-18 Setting VisTextParaAttr Attributes</P>
<PRE>/* This example shows setting the initial default paragraph attributes. */
@object GenTextClass MyTextObject = {
    GTXI_text = &quot;&quot;;
    ATTR_GEN_TEXT_DEFAULT_PARA_ATTR = ((J_CENTER &lt;&lt; VTDPA_JUSTIFICATION_OFFSET) | 
			( (2*2) &lt;&lt; VTDPA_LEFT_MARGIN_OFFSET) |
			( (1*2) &lt;&lt; VTDPA_PARA_MARGIN_OFFSET) |
			( VTDDT_HALF_INCH &lt;&lt; VTDPA_DEFAULT_TABS_OFFSET));
}</PRE>
<PRE>/* This example shows setting non-default singular paragraph attributes. */
@object GenTextClass MyTextObject = {
    GTXI_text = &quot;&quot;;
    ATTR_GEN_TEXT_PARA_ATTR = (ChunkHandle) @MyParaAttrs;
}</PRE>
<PRE>@chunk VisTextParaAttr MyParaAttrs = 
    PARA_ATTR_STYLE_JUST_LEFT_RIGHT_PARA(0, 0, J_CENTER, 0, 2, 1);</PRE>


<H4 CLASS="HeadingC">
<A NAME="Text_18.htm_31863">
 </A>
Multiple Paragraph Attributes</H4>
<P>
To allow your VisText object to exhibit individual paragraph attributes, you should set VTSF_MULTIPLE_PARA_ATTRS and clear the VTSF_DEFAULT_PARA_ATTR flag in the object's <CODE>
VTI_storageFlags</CODE>
 record. For GenText, set the attribute <CODE>
ATTR_GEN_TEXT_MULTIPLE_PARA_ATTR_RUNS</CODE>
. Any multiple paragraph attribute object will not be able to use any of the default paragraph attributes of type <CODE>
VisTextDefaultParaAttr</CODE>
. </P>
<P>
Multiple paragraph attributes allow your object's individual paragraphs to exhibit different attributes. One paragraph may be left justified; another may be centered with different margins. Any paragraph may exhibit any of the attributes allowed within the <CODE>
VisTextParaAttr</CODE>
 structure separately.</P>
<P>
Multiple paragraph attributes are stored in the same manner as multiple character attributes. See <A HREF="#Text_17.htm_91955"> Character Runs</A>
 for a full description of how runs are stored.</P>
<P>
Paragraph attributes are specified by runs. Each paragraph run is used until another run is encountered, at which point the new paragraph attributes are applied and used. Runs are defined by the <EM>
character</EM>
 position within a chunk array and an associated token element; therefore, you must take care when defining a paragraph run so that it coincides with the first character of a new paragraph. At the character position, the token corresponds to a <CODE>
VisTextParaAttr</CODE>
 element. The paragraph attributes specified in this <CODE>
VisTextParaAttr</CODE>
 structure are used until the next <CODE>
VisTextParaAttr</CODE>
 element.</P>


<H4 CLASS="HeadingC">
Changing Paragraph Attributes</H4>
<PRE>MSG_VIS_TEXT_GET_PARA_ATTR,VisTextParaAttrFlags, VisTextParaAttrBorderFlags, VisTextParaAttrDiffs, MSG_VIS_TEXT_SET_PARA_ATTR_BY_DEFAULT, MSG_VIS_TEXT_SET_PARA_ATTR, MSG_VIS_TEXT_SET_PARA_ATTRIBUTES, MSG_VIS_TEXT_ADD_PARA_ATTR</PRE>
<P>
There may be cases in which you would like to change the attributes exhibited by certain paragraphs in your Text object. As with character attributes, you can do this most easily by including one of the controllers mentioned at the end of this chapter.</P>
<P>
If you wish to manually change these character attributes, however, there are several messages to retrieve and set character attributes.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_18.htm_IX_MSG_VIS_TEXT_GET_PARA_ATTR">
 </A>
MSG_VIS_TEXT_GET_PARA_ATTR</H6>
<PRE CLASS="syntax">word 	MSG_VIS_TEXT_GET_PARA_ATTR(@stack
        VisTextGetAttrFlags 			flags,
        VisTextParaAttrDiffs 			*diffs,
        VisTextParaAttr 			*attrs,
        dword 			rangeEnd,
        dword 			rangeStart);</PRE>
<P>
This message returns a buffer filled in with the <CODE>
VisTextParaAttr</CODE>
 attributes of the given range of text. If VTGAF_MERGE_WITH_PASSED is passed in the <CODE>
VisTextGetAttrFlags</CODE>
, then a passed <CODE>
VisTextParaAttr</CODE>
 structure will be merged with the range of text that this message is sent to. (If this flag is not passed, any information initially in that buffer will be ignored.)</P>
<P>
Over the passed range, different paragraphs may exhibit different attributes; a pointer to a <CODE>
VisTextParaAttrDiffs</CODE>
 structure is also passed to store information about attributes that are different across the range of text. This structure contains lists of <CODE>
VisTextParaAttrFlags</CODE>
 and <CODE>
VisTextParaAttrBorderFlags</CODE>
 specifying what paragraph and paragraph border attributes are multiply present. The structure also contains the bitfields of the <CODE>
VisTextParaAttrAttributes</CODE>
, <CODE>
VisTextHyphenationInfo, VisTextKeepInfo</CODE>
, and <CODE>
VisTextDropCapInfo </CODE>
present over the range of text.</P>
<DL>
<DT>
Possible <CODE>
VisTextParaAttrFlags</CODE>
. If any of these are set, the selection exhibits the indicated multiple property over the range of text:</DT><DD>
VTPAF_MULTIPLE_LEFT_MARGINS<BR>
VTPAF_MULTIPLE_RIGHT_MARGINS<BR>
VTPAF_MULTIPLE_PARA_MARGINS<BR>
	VTPAF_MULTIPLE_LINE_SPACINGS<BR>
VTPAF_MULTIPLE_DEFAULT_TABS<BR>
VTPAF_MULTIPLE_TOP_SPACING<BR>
VTPAF_MULTIPLE_BOTTOM_SPACING<BR>
VTPAF_MULTIPLE_LEADINGS<BR>
VTPAF_MULTIPLE_BG_COLORS<BR>
VTPAF_MULTIPLE_BG_GRAY_SCREENS<BR>
VTPAF_MULTIPLE_BG_PATTERNS<BR>
VTPAF_MULTIPLE_TAB_LISTS<BR>
VTPAF_MULTIPLE_STYLES<BR>
VTPAF_MULTIPLE_PREPEND_CHARS<BR>
VTPAF_MULTIPLE_PARA_NUMBERS</DD>
<DT>
Possible <CODE>
VisTextParaAttrBorderFlags</CODE>
:</DT><DD>
VTPABF_MULTIPLE_BORDER_LEFT<BR>
VTPABF_MULTIPLE_BORDER_TOP<BR>
VTPABF_MULTIPLE_BORDER_RIGHT<BR>
VTPABF_MULTIPLE_BORDER_BOTTOM<BR>
VTPABF_MULTIPLE_BORDER_DOUBLES<BR>
VTPABF_MULTIPLE_BORDER_DRAW_INNERS<BR>
VTPABF_MULTIPLE_BORDER_ANCHORS<BR>
VTPABF_MULTIPLE_BORDER_WIDTHS<BR>
VTPABF_MULTIPLE_BORDER_SPACINGS VTPABF_MULTIPLE_BORDER_SHADOWS VTPABF_MULTIPLE_BORDER_COLORS VTPABF_MULTIPLE_BORDER_GRAY_SCREENS VTPABF_MULTIPLE_BORDER_PATTERNS </DD>
</DL>
<P CLASS="refField">
Structures:	</P>
<PRE>typedef struct {
	VisTextParaAttrFlags 					VTPAD_diffs;
	VisTextParaAttrBorderFlags					VTPAD_borderDiffs;
	VisTextParaAttrAttributes					VTPAD_attributes;
	VisTextHyphenationInfo					VTPAD_hyphenationInfo;
	VisTextKeepInfo					VTPAD_keepInfo;
	VisTextDropCapInfo					VTPAD_dropCapInfo;
} VisTextParaAttrDiffs;</PRE>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
flags</EM>
	VTGAF_MERGE_WITH_PASSED to merge the retrieved text attributes with the text in the passed range.</P>
<DL>
<DT>
<EM>
diffs</EM>
</DT><DD>Pointer to a <CODE>
VisTextParaAttrDiffs</CODE>
 structure to store attribute differences.</DD>
<DT>
<EM>
attrs</EM>
</DT><DD>Pointer to a <CODE>
VisTextParaAttr</CODE>
 buffer to store the retrieved paragraph attributes. If VTGAF_MERGE_WITH_PASSED is passed in flags, this buffer initially contains attributes to match against the retrieved attributes.</DD>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Beginning of the range (character position).</DD>
</DL>
<P CLASS="refField">
Return:	The token of the specific paragraph attribute run (word value) if the text object is storing runs of <CODE>
VisTextParaAttr</CODE>
 structures. The <EM>
attrs</EM>
 and <EM>
diffs</EM>
 buffers are also filled with their relevant information.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_18.htm_IX_MSG_VIS_TEXT_SET_PARA_ATTR_BY_DEFAULT">
 </A>
MSG_VIS_TEXT_SET_PARA_ATTR_BY_DEFAULT</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_PARA_ATTR_BY_DEFAULT(@stack
        VisTextDefaultParaAttr 				defParaAttrs,
        dword 				rangeEnd,
        dword 				rangeStart);</PRE>
<P>
This message sets the paragraph attributes passed in <CODE>
VisTextDefaultParaAttr</CODE>
 over the specified range of the text object. If the text object is not in &quot;default&quot; paragraph attribute mode (i.e. it is storing runs of <CODE>
VisTextParaAttr</CODE>
 structures) it will translate the default attributes into their matching <CODE>
VisTextParaAttr</CODE>
 attributes.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Parameters:	<EM>
defParaAttrs</EM>
	<CODE>
VisTextDefaultParaAttr</CODE>
 record to set over the passed range of text.</P>
<DL>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (Character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Start of the range (Character position).</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_18.htm_IX_MSG_VIS_TEXT_SET_PARA_ATTR">
 </A>
MSG_VIS_TEXT_SET_PARA_ATTR</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_PARA_ATTR(@stack
        VisTextParaAttr 		*newParaAttrs,
        dword 		rangeEnd,
        dword 		rangeStart);</PRE>
<P>
This message sets the paragraph attributes passed in the <CODE>
VisTextParaAttr</CODE>
 buffer over the specified range of the text object. If the text object is in &quot;default&quot; paragraph attribute mode, it will force the text object to begin storing runs of <CODE>
VisTextParaAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object.</P>
<P CLASS="refField">
Parameters:	<EM>
newParaAttrs</EM>
	Pointer to a <CODE>
VisTextParaAttr</CODE>
 buffer.</P>
<DL>
<DT>
<EM>
rangeEnd</EM>
</DT><DD>End of the range (Character position).</DD>
<DT>
<EM>
rangeStart</EM>
</DT><DD>Start of the range (Character position).</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_18.htm_IX_MSG_VIS_TEXT_ADD_PARA_ATTR">
 </A>
MSG_VIS_TEXT_ADD_PARA_ATTR</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_ADD_PARA_ATTR(
        VisTextMaxParaAttr 		*paraAttr);</PRE>
<P>
This message adds a given set of paragraph attributes passed in the <CODE>
VisTextParaAttr</CODE>
 buffer to the paragraph &quot;run&quot; for that text object. The text object must not be in &quot;default&quot; paragraph attribute mode; it must already be storing runs of <CODE>
VisTextParaAttr</CODE>
 structures.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any Text object that is storing runs of <CODE>
VisTextParaAttr</CODE>
 structures.</P>
<P CLASS="refField">
Parameters:	<EM>
paraAttr	P</EM>
ointer to a <CODE>
VisTextParaAttr</CODE>
 buffer.</P>
<P CLASS="refField">
Return:	Token of the paragraph run entry (word-value).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<HR>
<A NAME="Text_19.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5 
<A NAME="Text_19.htm_27116">
 </A>
Using VisText</H2>
<P>
This section describes how to use a VisText object. At the time of documentation printing, <CODE>
VisTextClass</CODE>
 is undergoing improvement and will therefore be covered fully in future documentation releases. This section currently gives much useful information about the class, however.</P>
<P>
<A HREF="#Text_19.htm_88328"> VisText Instance Fields</A>
 shows all the instance data fields of <CODE>
VisTextClass</CODE>
. Following the display are descriptions of the individual fields.</P>
<P CLASS="figTitle">
Code Display 10-19 <A NAME="Text_19.htm_88328">
 </A>
VisText Instance Fields</P>
<PRE><A NAME="Text_19.htm_IX_VTI_&ldots;  (VisText Instance)"> </A>/* These are all the instance data fields of the VisText. Many of them are used
 * internally by the class and should not be used by applications. Because they
 * are documented as internal, Geoworks reserves the right to change their meaning
 * or use at any time. Those that are internal are clearly noted as such. */</PRE>
<PRE>@instance ChunkHandle				VTI_text;
@instance word				VTI_charAttrRuns = VIS_TEXT_INITIAL_CHAR_ATTR;
@instance word				VTI_paraAttrRuns = VIS_TEXT_INITIAL_PARA_ATTR;
@instance VMFileHandle				VTI_vmFile = NullHandle;
@instance word				VTI_lines = 0;				/* INTERNAL */
@instance VisTextStorageFlags				VTI_storageFlags = (VTSF_DEFAULT_CHAR_ATTR |
						 VTSF_DEFAULT_PARA_ATTR);
@instance VisTextFeatures				VTI_features = 0;
@instance VisTextStates				VTI_state = 0;
@instance VisTextIntFlags				VTI_intFlags = 0;				/* INTERNAL */
@instance VisTextIntSelFlags				VTI_intSelFlags = 0;				/* INTERNAL */
@instance GSRefCountAndFlags				VTI_gsRefCount = 0;				/* INTERNAL */
@instance GStateHandle				VTI_gstate = NullHandle;				/* INTERNAL */
@instance word				VTI_gstateRegion = -1;				/* INTERNAL */
@instance dword				VTI_selectStart = 0;
@instance dword				VTI_selectEnd = 0;
@instance PointDWord				VTI_startEventPos = {0,0};				/* INTERNAL */
@instance dword				VTI_selectMinStart = 0;				/* INTERNAL */
@instance dword				VTI_selectMinEnd =0;				/* INTERNAL */
@instance dword				VTI_lastOffset = 0;				/* INTERNAL */
@instance word				VTI_goalPosition = 0;				/* INTERNAL */
@instance Point				VTI_cursorPos = {0,0};				/* INTERNAL */
@instance word				VTI_cursorRegion = 0;				/* INTERNAL */
@instance word				VTI_leftOffset = 0;				/* INTERNAL */
@instance byte				VTI_lrMargin = 0;
@instance byte				VTI_tbMargin = 0;
@instance ColorQuad				VTI_washColor = {
					C_WHITE,
					CF_INDEX,
					0, 0 }
@instance word				VTI_maxLength = 10000;
@instance VisTextFilters				VTI_filters = 0;
@instance optr				VTI_output;
@instance WBFixed				VTI_height = {0,0};				/* INTERNAL */
@instance word				VTI_lastWidth = -1;				/* INTERNAL */
@instance TimerHandle				VTI_timerHandle = NullHandle;				/* INTERNAL */
@instance word				VTI_timerID = 0;				/* INTERNAL */</PRE>
<P>
VTI_<CODE>
text</CODE>
 stores the ChunkHandle of the object's text chunk. This chunk will be stored within a chunk in the same resource as the text object. See <A HREF="#Text_15.htm_60374"> The Text</A>
 for a full discussion of how to manipulate and alter text.</P>
<P>
VTI_<CODE>
storageFlags</CODE>
 contains flags related to how a VisText object stores its paragraph and character attributes. The composition of these flags affects the function of VTI_<CODE>
charAttrRuns</CODE>
 and VTI_<CODE>
paraAttrRuns</CODE>
.</P>
<P>
VTI_<CODE>
charAttrRuns</CODE>
 stores the character attributes for the text object. Depending on VTI_<CODE>
storageFlags</CODE>
, this instance field may contain a 16-bit record, a ChunkHandle to a <CODE>
VisTextCharAttr</CODE>
 structure, or a ChunkHandle to a chunk array of character style runs.</P>
<P>
VTI_<CODE>
paraAttrRuns</CODE>
 stores the paragraph attributes for the text object. Depending on GTI_<CODE>
storageFlags</CODE>
, this instance field may contain a 16-bit record, a ChunkHandle to a <CODE>
VisTextParaAttr</CODE>
 structure, or a ChunkHandle to a chunk array of paragraph style runs.</P>
<P>
VTI_<CODE>
features</CODE>
 stores a <CODE>
VisTextFeatures</CODE>
 record to display text within this text object. These features allow such utilities as word wrapping, hyphenation, smart quotes, etc. </P>
<P>
VTI_<CODE>
state</CODE>
 stores different states of type <CODE>
VisTextStates</CODE>
 that the text object can operate under, such as editable, selectable, targetable, etc.</P>
<P>
VTI_<CODE>
vmFile</CODE>
 stores the handle for a text object's associated VM file; this VM file will store the text if the text object incorporates the large model. This instance field is only used for text objects using the large model.</P>
<P>
VTI_<CODE>
selectStart</CODE>
 stores the character position of the selection's start. VTI_<CODE>
selectEnd</CODE>
 stores the character position of the selection's end. If both the selection start and selection end coincide, there is no selected text.</P>
<P>
<CODE>
VTI_lrMargin</CODE>
 stores the left and right margins of the paragraph in points. VTI_<CODE>
tbMargin</CODE>
 stores the top and bottom margins of the paragraph in points.</P>
<P>
VTI_<CODE>
washColor</CODE>
 stores the background color (of type <CODE>
ColorQuad</CODE>
) of the text object.</P>
<P>
VTI_<CODE>
maxLength</CODE>
 stores the maximum number of characters allowed in this text object (for non-large objects).</P>
<P>
VTI_<CODE>
filters</CODE>
 stores the <CODE>
VisTextFilters</CODE>
 in use by this text object. Filters allow your text object to accept or reject certain sets of characters. </P>
<P>
VTI_<CODE>
output</CODE>
 stores the destination for actions taken by this text object. <A NAME="Text_19.htm_marker=38878">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-20 VisText Variable Data</P>
<PRE>@vardata word		ATTR_VIS_TEXT_TYPE_RUNS;
@vardata word		ATTR_VIS_TEXT_GRAPHICS_RUNS;
@vardata word		ATTR_VIS_TEXT_REGION_ARRAY;
@vardata word		ATTR_VIS_TEXT_STYLE_ARRAY;
@vardata word		ATTR_VIS_TEXT_NAME_ARRAY;</PRE>
<PRE>@vardata word		ATTR_VIS_TEXT_SELECTED_TAB;
@vardata void		ATTR_VIS_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL;
@vardata VisTextExtendedFilterType ATTR_VIS_TEXT_EXTENDED_FILTER;</PRE>
<PRE>typedef struct {
    word			VTSD_count;
    VisTextRange			VTSD_recalcRange;
    VisTextRange			VTSD_selectRange;
    dword			VTSD_showSelectionPos;
    WordFlags			VTSD_notifications;
    byte			VTSD_needsRecalc;
} VisTextSuspendData;</PRE>
<PRE>@vardata VisTextSuspendData ATTR_VIS_TEXT_SUSPEND_DATA;</PRE>
<PRE>@vardata void		ATTR_VIS_TEXT_NOTIFY_CONTENT;
@vardata void		ATTR_VIS_TEXT_DO_NOT_NOTIFY_CONTENT;
@vardata void		ATTR_VIS_TEXT_SEND_CONTEXT_NOTIFICATIONS_EVEN_IF_NOT_FOCUSED;</PRE>
<PRE>typedef struct {
    wchar		VTCFD_startOfRange;
    wchar		VTCFD_endOfRange;
} VisTextCustomFilterData;</PRE>
<PRE>@vardata ChunkHandle ATTR_VIS_TEXT_CUSTOM_FILTER;</PRE>
<PRE>@vardata word		ATTR_VIS_TEXT_CHAR_ATTR_INSERTION_TOKEN;
@vardata word		ATTR_VIS_TEXT_TYPE_INSERTION_TOKEN;</PRE>
<PRE>@vardata void		ATTR_VIS_TEXT_UPDATE_VIA_PROCESS;
@vardata void		ATTR_VIS_TEXT_DOES_NOT_ACCEPT_INK;
@vardata WBFixed		ATTR_VIS_TEXT_MINIMUM_SINGLE_LINE_HEIGHT;</PRE>
<PRE>@vardata word		ATTR_VIS_TEXT_ADD_SPACE_TO_ALL_LINES;</PRE>
<PRE>@vardata void		ATTR_VIS_TEXT_DONT_SHOW_POSITION_ON_GAINED_TARGET_EXCL;
@vardata void		ATTR_VIS_TEXT_SHOW_POSITION_ON_GAINED_TARGET_EXCL;</PRE>
<PRE>@vardata void		ATTR_VIS_TEXT_DONT_BEEP_ON_INSERTION_ERROR;</PRE>
<P>
ATTR_VIS_TEXT_TYPE_RUNS<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_TYPE_RUNS">
 </A>
 specifies the Type runs for this text object. You should not need type runs unless you need hyperlink capabilities. ATTR_VIS_TEXT_GRAPHIC_RUNS<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_GRAPHIC_RUNS">
 </A>
 specifies a graphics run to use within the text object.</P>
<P>
ATTR_VIS_TEXT_REGION_ARRAY<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_REGION_ARRAY">
 </A>
 specifies the array of regions defined for this text object. Text within the VisText will flow from each of the defined regions to the next region.<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_STYLE_ARRAY">
 </A>
 ATTR_VIS_TEXT_STYLE_ARRAY specifies the name array of styles used in the VisText's style sheets.</P>
<P>
 <CODE>
ATTR_VIS_TEXT_SELECTED_TAB</CODE>
<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_SELECTED_TAB">
 </A>
 specifies the position of the currently-selected tab, if any.</P>
<P>
<CODE>
ATTR_VIS_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL</CODE>
<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL">
 </A>
 instructs the text object not to send the search-control notification.</P>
<P>
ATTR_VIS_TEXT_EXTENDED_FILTERS<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_EXTENDED_FILTERS">
 </A>
 stores the <CODE>
VisTextExtendedFilterType</CODE>
 to use instead of the <CODE>
VisTextFilters</CODE>
 stored within VTI_<CODE>
filters</CODE>
. Extended filters offer more powerful (and complex) filtering mechanisms for accepting and rejecting text. Including this attribute will affect the performance of your text object, however.<A NAME="Text_19.htm_marker=38606">
 </A>
</P>
<P>
ATTR_VIS_TEXT_SUSPEND_DATA<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_SUSPEND_DATA">
 </A>
 stores data to be used by the text object during a SUSPEND/UNSUSPEND operation (<CODE>
VisTextSuspendData</CODE>
).</P>
<P>
ATTR_VIS_TEXT_SEND_CONTEXT_NOTIFICATIONS_EVEN_IF_NOT_FOCUSED<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_SEND_CONTEXT_NOTIFICATIONS_EVEN_IF_NOT_FOCUSED">
 </A>
 sends out context notification even if the object is not focused. Applications must make sure that objects with this attribute do not get modified while another text object has the focus.</P>
<P>
ATTR_VIS_TEXT_UPDATE_VIA_PROCESS<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_UPDATE_VIA_PROCESS">
 </A>
 indicates that status updates must be sent via the process object (usually because there are targetable text objects in multiple threads).</P>
<P>
ATTR_VIS_TEXT_DOES_NOT_ACCEPT_INK<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_DOES_NOT_ACCEPT_INK">
 </A>
 indicates that the VisText object will not accept ink.</P>
<P>
ATTR_VIS_TEXT_MINIMUM_SINGLE_LINE_HEIGHT<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_MINIMUM_SINGLE_LINE_HEIGHT">
 </A>
 defines the height of one-line text objects so that custom graphics, etc. can be placed inside the text object.</P>
<P>
ATTR_VIS_TEXT_ADD_SPACE_TO_ALL_LINES<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_ADD_SPACE_TO_ALL_LINES">
 </A>
 adds additional spacing above all lines in a text object, and it takes a word argument. This optional attribute is intended to be added to objects that use accent characters that may draw above the top of the text's &quot;font box.&quot; This spacing value differs depending on the system that text is implemented on; only use this attribute if redraws are not drawing your text characters properly. This attribute will also affect any text lines that contain borders, adding additional space between the text and the border.</P>
<P>
<CODE>
ATTR_VIS_TEXT_DONT_SHOW_POSITION_ON_GAINED_TARGET_EXCL</CODE>
<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_DONT_SHOW_POSITION_ON_GAINED_TARGET_EXCL">
 </A>
 and <CODE>
ATTR_VIS_TEXT_SHOW_POSITION_ON_GAINED_TARGET_EXCL</CODE>
<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_SHOW_POSITION_ON_GAINED_TARGET_EXCL">
 </A>
 affect the display of the cursor within a text object upon gaining the target exclusive. By default, a VisText object will display the cursor upon gaining the target; a VisLargeText object, on the other hand, will not display this position. You may use either of these hints to override this default behavior.</P>
<P>
<CODE>
ATTR_VIS_TEXT_DONT_BEEP_ON_INSERTION_ERROR</CODE>
<A NAME="Text_19.htm_IX_ATTR_VIS_TEXT_DONT_BEEP_ON_INSERTION_ERROR">
 </A>
 indicates that the VisText object should not call the default error sound routine in cases where an insertion error occurs.</P>
<P CLASS="subsectionLink">
<A HREF="#Text_1a.htm">VisText Features</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_1b.htm">VisText States</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_1c.htm">VisText VM File Storage</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_1d.htm">Text Filters</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_1e.htm">Key Functions</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_1f.htm">Setting Text Confines</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_20.htm">Output Messages</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_21.htm">Getting Geometry Information</A></P>
<HR>
<A NAME="Text_1a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.1 <A HREF="#Text_19.htm">Using VisText</A>: 
VisText Features</H3>
<PRE>VTI_features, VisTextFeatures, MSG_VIS_TEXT_SET_FEATURES, MSG_VIS_TEXT_GET_FEATURES</PRE>
<P>
VTI_<A NAME="Text_1a.htm_IX_VisTextFeatures">
 </A>
<CODE>
features</CODE>
 stores a bitfield of <CODE>
VisTextFeatures</CODE>
 specifying whether a particular feature is enabled in the Text object. These flags are listed below.</P>
<DL>
<DT>
VTF_NO_WORD_WRAPPING</DT><DD>
If set, no word-wrapping is allowed. Characters added after the end of the line will start at the next line. </DD>
<DT>
VTF_AUTO_HYPHENATE</DT><DD>
If set, the text object will auto-hyphenate words that span a line break.</DD>
<DT>
VTF_ALLOW_SMART_QUOTES</DT><DD>
If set, smart quotes will be allowed if they are enabled.</DD>
<DT>
VTF_ALLOW_UNDO</DT><DD>
If set, undo operations will be allowed on the text object. (The text object will handle MSG_META_UNDO.)</DD>
<DT>
VTF_SHOW_HIDDEN_TEXT</DT><DD>
If set, hidden text will be displayed. This feature is currently not implemented.</DD>
<DT>
VTF_OUTLINE_MODE</DT><DD>
If set, text will be shown in outline mode. This feature is currently not implemented.</DD>
<DT>
VTF_DONT_SHOW_SOFT_PAGE_BREAKS</DT><DD>
If set, any soft page breaks (i.e. any page breaks that are not C_PAGE_BREAK) will be ignored.</DD>
<DT>
VTF_DONT_SHOW_GRAPHICS</DT><DD>
If set, any graphics in the text object will not be displayed.</DD>
<DT>
VTF_TRANSPARENT</DT><DD>
If set, the text object will not do a background wash behind the text after it draws.</DD>
<DT>
VTF_USE_50_PCT_TEXT_MASK</DT><DD>
If set, the text object will use a 50% draw mask when drawing, regardless of other character attribute runs. This is used by the GenText object to show a disabled state.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Text_1a.htm_IX_MSG_VIS_TEXT_SET_FEATURES">
 </A>
MSG_VIS_TEXT_SET_FEATURES</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_FEATURES(
        VisTextFeatures		bitsToSet,
        VisTextFeatures		bitsToClear);</PRE>
<P>
This message sets a text object's <CODE>
VisTextFeatures </CODE>
(VTI_<CODE>
features</CODE>
). </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
bitsToSet</EM>
	<CODE>
VisTextFeatures</CODE>
 to add.</P>
<DL>
<DT>
<EM>
bitsToClear</EM>
</DT><DD><CODE>
VisTextFeatures</CODE>
 to remove.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1a.htm_IX_MSG_VIS_TEXT_GET_FEATURES">
 </A>
MSG_VIS_TEXT_GET_FEATURES</H6>
<PRE CLASS="syntax">VisTextFeatures MSG_VIS_TEXT_GET_FEATURES();</PRE>
<P>
This message retrieves the text object's <CODE>
VisTextFeatures</CODE>
 (VTI_<CODE>
features</CODE>
).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
VisTextFeatures</CODE>
 in use by the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_1b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.2 <A HREF="#Text_19.htm">Using VisText</A>: 
VisText States</H3>
<PRE>VTI_state, VisTextStates, MSG_VIS_TEXT_GET_STATE, MSG_VIS_TEXT_GET_USER_MODIFIED_STATE, MSG_VIS_TEXT_SET_NOT_USER_MODIFIED, MSG_VIS_TEXT_SET_USER_MODIFIED, MSG_VIS_TEXT_ENTER_OVERSTRIKE_MODE, MSG_VIS_TEXT_ENTER_INSERT_MODE</PRE>
<P>
VTI_state stores a bitfield of<A NAME="Text_1b.htm_IX_VisTextStates">
 </A>
 <CODE>
VisTextStates</CODE>
 that determine the ability of the user to interact with the text object. These flags are listed below.</P>
<DL>
<DT>
VTS_EDITABLE</DT><DD>
If set, the text object is editable. You must set this flag to allow the user to write text into a text object. </DD>
<DT>
VTS_SELECTABLE</DT><DD>
If set, text within the text object may be selected. Text may be selectable without it being editable; it can be copied but not cut in that case.</DD>
<DT>
VTS_TARGETABLE</DT><DD>
If set, the text object is capable of acting in the target hierarchy. This flag must be set for text objects that interact with controllers.</DD>
<DT>
VTS_ONE_LINE</DT><DD>
If set, this object is a simple one-line text object. The text will not scroll vertically, though it may scroll horizontally.</DD>
<DT>
VTS_SUBCLASS_VIRT_PHYS_TRANSLATION</DT><DD>
If set, the mapping of virtual attributes to physical attributes will be effected by sending a message (which can be subclassed) rather than through a routine. Normally, this mapping is done through the faster direct routine call, but this flag allows application-specific operations.</DD>
<DT>
VTS_OVERSTRIKE_MODE</DT><DD>
If set, the text object is in overstrike mode, not its default insertion mode. Text entered at the cursor will overwrite following text; it will not insert that text at the cursor position.</DD>
<DT>
VTS_USER_MODIFIED</DT><DD>
If set, the text inside the object has been changed since the last time the text object sent out its apply message in GTXI_<CODE>
applyMsg</CODE>
. You can send the text object MSG_VIS_TEXT_SET_NOT_USER_MODIFIED or MSG_VIS_TEXT_SET_USER_MODIFIED to clear or set this flag.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_GET_STATE">
 </A>
MSG_VIS_TEXT_GET_STATE</H6>
<PRE CLASS="syntax">VisTextStates MSG_VIS_TEXT_GET_STATE();</PRE>
<P>
This message retrieves the text object's <CODE>
VisTextStates </CODE>
(VTI_state).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
VisTextStates </CODE>
in use by the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_GET_USER_MODIFIED_STATE">
 </A>
MSG_VIS_TEXT_GET_USER_MODIFIED_STATE</H6>
<PRE CLASS="syntax">Boolean	MSG_VIS_TEXT_GET_USER_MODIFIED_STATE();</PRE>
<P>
This message returns the state of the text object's VTS_MODIFIED flag in its VTI_state entry.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
<CODE>
 </CODE>
if object has been modified<CODE>
.</CODE>
</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_SET_NOT_USER_MODIFIED">
 </A>
MSG_VIS_TEXT_SET_NOT_USER_MODIFIED</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();</PRE>
<P>
This message clears the text object's VTS_USER_MODIFIED flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_SET_USER_MODIFIED">
 </A>
MSG_VIS_TEXT_SET_USER_MODIFIED</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_USER_MODIFIED();</PRE>
<P>
This message sets the text object's VTS_USER_MODIFIED flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_MODIFY_EDITABLE_SELECTABLE">
 </A>
MSG_VIS_TEXT_MODIFY_EDITABLE_SELECTABLE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_MODIFY_EDITABLE_SELECTABLE(
        VisTextStates		setBits,
        VisTextStates		clearBits);</PRE>
<P>
This message modifies the text object's VTS_EDITABLE and VTS_SELECTABLE states. These are the only VisTextStates you should modify with this message.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
setBits</EM>
	The VTS_EDITABLE and/or VTS_SELECTABLE states to set.</P>
<DL>
<DT>
<EM>
clearBits</EM>
</DT><DD>The VTS_EDITABLE and/or VTS_SELECTABLE states to clear.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_ENTER_OVERSTRIKE_MODE">
 </A>
MSG_VIS_TEXT_ENTER_OVERSTRIKE_MODE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_ENTER_OVERSTRIKE_MODE(
        Boolean		calledFromTextObject);</PRE>
<P>
This message enters the text object into overstrike mode (setting the VTS_OVERSTRIKE_MODE flag).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
calledFromTextObject<BR>
true</EM>
 if this message was called internally by the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1b.htm_IX_MSG_VIS_TEXT_ENTER_INSERT_MODE">
 </A>
MSG_VIS_TEXT_ENTER_INSERT_MODE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_ENTER_INSERT_MODE(
        Boolean		calledFromTextObject);</PRE>
<P>
This message enters the text object into insert mode (clearing the VTS_OVERSTRIKE_MODE flag).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
calledFromTextObject<BR>
true</EM>
 if this message was called internally by the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_1c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.3 <A HREF="#Text_19.htm">Using VisText</A>: 
VisText VM File Storage</H3>
<PRE>VTI_vmFile, MSG_VIS_TEXT_SET_VM_FILE, MSG_VIS_TEXT_SAVE_TO_DB_ITEM, MSG_VIS_TEXT_SAVE_TO_DB_ITEM_WITH_STYLES, MSG_VIS_TEXT_LOAD_FROM_DB_ITEM, MSG_VIS_TEXT_LOAD_FROM_DB_ITEM_WITH_STYLES</PRE>
<P>
VTI_<CODE>
vmFile</CODE>
 stores the VM file handle that is associated with this text object. This file is the default VM file that will be used for operations that require a storage area. You can set this file handle with MSG_VIS_TEXT_SET_VM_FILE.</P>
<P>
To save a text object's current text (including attributes) you can send the text object MSG_VIS_TEXT_SAVE_TO_DB_ITEM. This message takes several <CODE>
VisTextSaveDBFlags</CODE>
 which specify what aspects of the text to save to the DB item. These flags are listed below:</P>
<DL>
<DT>
	VTSDBF_TEXT</DT><DD>
VTSDBF_CHAR_ATTR<BR>
VTSDBF_PARA_ATTR<BR>
VTSDBF_TYPE<BR>
VTSDBF_GRAPHIC<BR>
VTSDBF_STYLE<BR>
VTSDBF_REGION<BR>
VTSDBF_NAME</DD>
</DL>
<P>
To retrieve text saved to a DB item in such a manner, use MSG_VIS_TEXT_LOAD_FROM_DB_ITEM. The text object is able to figure out what features of the text were saved and bring it up with any attributes that were saved previously.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_1c.htm_IX_MSG_VIS_TEXT_SET_VM_FILE">
 </A>
MSG_VIS_TEXT_SET_VM_FILE</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_VM_FILE(
        VMFileHandle		file);</PRE>
<P>
This message sets the text object's VTI_<CODE>
vmFile</CODE>
 instance field to the passed VM file handle. This file handle will be used as the default for operations that require a VM file.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	VM file handle.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1c.htm_IX_MSG_VIS_TEXT_SAVE_TO_DB_ITEM">
 </A>
MSG_VIS_TEXT_SAVE_TO_DB_ITEM</H6>
<PRE CLASS="syntax">DBGroupAndItem MSG_VIS_TEXT_SAVE_TO_DB_ITEM(
        DBGroupAndItem		item,
        VisTextSaveDBFlags		flags);</PRE>
<P>
This message saves information about the current state of the text object. Data saved with this message can be retrieved with MSG_VIS_TEXT_LOAD_FROM_DB_ITEM.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
item</EM>
	DB group and item to store the text information. If this is left zero, the info will be saved to the VM file specified in VTI_<CODE>
vmFile</CODE>
.</P>
<DL>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>
VisTextSaveDBFlags</CODE>
 specifying what aspect of the text's info to save.</DD>
</DL>
<P CLASS="refField">
Return:	<CODE>
DBItem</CODE>
 of saved text info.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1c.htm_IX_MSG_VIS_TEXT_SAVE_TO_DB_ITEM_WITH_STYLES">
 </A>
MSG_VIS_TEXT_SAVE_TO_DB_ITEM_WITH_STYLES</H6>
<PRE CLASS="syntax">DBGroupAndItem MSG_VIS_TEXT_SAVE_TO_DB_ITEM_WITH_STYLES(
        FileHandle		xferFile,
        VisTextSaveDBFlags		flags,
        DBGroupAndItem		item,
        StyleSheetParams		*params);</PRE>
<P>
This message saves information about the current state of the text object, passing a <CODE>
StyleSheetParams</CODE>
 structure.</P>
<P>
VTST_RUNS_ONLY should be passed in the <CODE>
VisTextSaveDBFlags</CODE>
 entries VTSDBF_CHAR_ATTR and VTSDBF_PARA_ATTR. Do not set VTSDBF_STYLE.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
xferFile</EM>
	If non-zero, the <CODE>
StyleSheetParams</CODE>
 structure is not initialized and this is the file to put the style sheet arrays into.</P>
<DL>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>
VisTextSaveDBFlags</CODE>
 specifying what aspect of the text's info to save.</DD>
<DT>
<EM>
item</EM>
</DT><DD>DB group and item to store the text information. If this is left zero, the info will be saved to the VM file specified in VTI_<CODE>
vmFile</CODE>
.</DD>
<DT>
*<EM>
params</EM>
</DT><DD>Pointer to a <CODE>
StyleSheetParams</CODE>
 structure.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1c.htm_IX_MSG_VIS_TEXT_LOAD_FROM_DB_ITEM">
 </A>
MSG_VIS_TEXT_LOAD_FROM_DB_ITEM</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_LOAD_FROM_DB_ITEM(
        DBGroupAndItem		item,
        VMFileHandle		file);</PRE>
<P>
This message loads text saved with MSG_VIS_TEXT_SAVE_TO_DB_ITEM.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
item</EM>
	<CODE>
DBItem</CODE>
 to load.</P>
<DL>
<DT>
<EM>
file</EM>
</DT><DD>Handle of the VM file to use. If zero, the VM file in VTI_<CODE>
vmFile</CODE>
 will be used.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1c.htm_IX_MSG_VIS_TEXT_LOAD_FROM_DB_ITEM_WITH_STYLES">
 </A>
MSG_VIS_TEXT_LOAD_FROM_DB_ITEM_WITH_STYLES</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_LOAD_FROM_DB_ITEM_WITH_STYLES(
        FileHandle		file,
        DBGroupAndItem		item,
        StyleSheetParams		*params);</PRE>
<P>
This message loads text and style sheets saved with MSG_VIS_TEXT_SAVE_TO_DB_ITEM_WITH_STYLES.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
file</EM>
	Handle of the VM file to use. If zero, the VM file in VTI_<CODE>
vmFile</CODE>
 will be used.</P>
<DL>
<DT>
<EM>
item</EM>
</DT><DD><CODE>
DBItem</CODE>
 to load.</DD>
<DT>
*<EM>
params</EM>
</DT><DD>Pointer to a <CODE>
StyleSheetParams</CODE>
 structure.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_1d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.4 <A HREF="#Text_19.htm">Using VisText</A>: 
Text Filters</H3>
<PRE>VTI_filters, VisTextFilters, VisTextFilterClass, ATTR_VIS_TEXT_EXTENDED_FILTER, MSG_VIS_TEXT_SET_FILTER, MSG_VIS_TEXT_GET_FILTER</PRE>
<P>
When the user enters text into the text object, the text object is able to filter out characters that it does not wish to be displayed. This behavior is produced through use of <CODE>
VisTextFilters</CODE>
.</P>
<P>
VTI_<CODE>
filters</CODE>
 stores a <CODE>
VisTextFilters</CODE>
 record. This record has several entries:</P>
<DL>
<DT>
VTF_NO_SPACES filters out any space characters.</DT>
<DT>
VTF_NO_TABS filters out any tab characters.</DT>
</DL>
<P>
VTF_UPCASE_CHARS ensures that any alphabetic characters are made uppercase. Other characters are unaffected.</P>
<P>
VTF_FILTER_CLASS stores a <CODE>
VisTextFilterClass</CODE>
. This value can be any one of the following:</P>
<DL>
<DT>
	VTFC_NO_FILTER</DT><DD>
VTFC_ALPHA<BR>
VTFC_NUMERIC<BR>
VTFC_SIGNED_NUMERIC<BR>
VTFC_SIGNED_DECIMAL<BR>
VTFC_FLOAT_DECIMAL<BR>
VTFC_ALPHA_NUMERIC<BR>
VTFC_FILENAMES<BR>
VTFC_DOS_FILENAMES<BR>
VTFC_DOS_PATH<BR>
VTFC_DATE<BR>
VTFC_TIME<BR>
VTFC_DASHED_ALPHA_NUMERIC<BR>
VTFC_NORMAL_ASCII<BR>
VTFC_DOS_VOLUME_NAMES<BR>
VTFC_DOS_CHARACTER_SET<BR>
VTFC_ALLOW_COLUMN_BREAKS</DD>
</DL>
<P>
For more complex filtering, you can include ATTR_VIS_TEXT_EXTENDED_FILTER in your text object. Each value corresponds to a different message which you can intercept to provide custom filtering. These values are:</P>
<DL>
<DT>
VTEFT_REPLACE_PARAMS</DT><DD>
This filter generates MSG_VIS_TEXT_FILTER_VIA_REPLACE_PARAMS. This message passes a <CODE>
VisTextReplaceParameters</CODE>
 structure that you can either accept or reject as a whole. This will be supported in an upcoming release.</DD>
<DT>
VTEFT_CHARACTER_LEVELER_LEVEL</DT><DD>
This filter generates MSG_VIS_TEXT_FILTER_VIA_CHARACTER. This message passes a single character that you can either accept or reject. </DD>
<DT>
VTEFT_BEFORE_AFTER</DT><DD>
This filter generates MSG_VIS_TEXT_FILTER_VIA_BEFORE_AFTER. This message passes two buffers containing the current text and the proposed new text. This will be supported in an upcoming release.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Text_1d.htm_IX_MSG_VIS_TEXT_GET_FILTER">
 </A>
MSG_VIS_TEXT_GET_FILTER</H6>
<PRE CLASS="syntax">byte	MSG_VIS_TEXT_GET_FILTER();</PRE>
<P>
This message retrieves the current <CODE>
VisTextFilters</CODE>
 in use by the text object (stored in VTI_<CODE>
filters</CODE>
).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	<CODE>
VisTextFilters</CODE>
 in use by the text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1d.htm_IX_MSG_VIS_TEXT_SET_FILTER">
 </A>
MSG_VIS_TEXT_SET_FILTER</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_FILTER(
        byte		filter);</PRE>
<P>
This message sets the text object's <CODE>
VisTextFilters</CODE>
 (stored in VTI_<CODE>
filters</CODE>
) to the passed value. Resetting this filter does not affect any text that already exists in the text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
filter</EM>
	<CODE>
VisTextFilters</CODE>
 to set.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1d.htm_IX_MSG_VIS_TEXT_FILTER_VIA_CHARACTER">
 </A>
MSG_VIS_TEXT_FILTER_VIA_CHARACTER</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_FILTER_VIA_CHARACTER(
        word		charToFilter);</PRE>
<P>
This message allows the text object to filter text on a character by character basis. This message is called for each character that is entered into the text object.</P>
<P>
This message will be generated if the text object includes ATTR_VIS_TEXT_EXTENDED_FILTER in its instance data, with its value set to the <CODE>
VisTextExtendedFilterType</CODE>
 VTEFT_CHARACTER_LEVELER_LEVEL.</P>
<P CLASS="refField">
Source:	Sent by the system if text object contains ATTR_VIS_TEXT_EXTENDED_FILTER set to VTEFT_CHARACTER_LEVELER_LEVEL.</P>
<P CLASS="refField">
Destination:	Any text object </P>
<P CLASS="refField">
Parameters:	<EM>
charToFilter</EM>
	Character value that is being filtered. You can pass this value on to the superclass or filter it out.</P>
<P CLASS="refField">
Interception:	Must intercept to provide character by character filtering.</P>

<HR>
<A NAME="Text_1e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.5 <A HREF="#Text_19.htm">Using VisText</A>: 
Key Functions</H3>
<PRE>VisTextKeyFunction, MSG_VIS_TEXT_DO_KEY_FUNCTION</PRE>
<P>
The VisText object is able to recognize certain generic functions that operate on text. Most of these functions are initiated through a key sequence entered by the user, but you can mimic such a key sequence by sending the text object MSG_VIS_TEXT_DO_KEY_FUNCTION, passing it a <CODE>
VisTextKeyFunction</CODE>
.</P>
<P>
The following <CODE>
VisTextKeyFunction</CODE>
 values are recognized by the text object:</P>
<DL>
<DT>
	VTKF_FORWARD_LINE</DT><DD>
VTKF_BACKWARD_LINE<BR>
VTKF_SELECT_ADJUST_FORWARD_LINE<BR>
VTKF_SELECT_ADJUST_BACKWARD_LINE<BR>
VTKF_FORWARD_CHAR<BR>
VTKF_BACKWARD_CHAR<BR>
VTKF_FORWARD_WORD<BR>
VTKF_BACKWARD_WORD<BR>
VTKF_FORWARD_PARAGRAPH<BR>
VTKF_BACKWARD_PARAGRAPH<BR>
VTKF_START_OF_LINE<BR>
VTKF_END_OF_LINE<BR>
VTKF_START_OF_TEXT<BR>
VTKF_END_OF_TEXT<BR>
VTKF_SELECT_WORD<BR>
VTKF_SELECT_LINE<BR>
VTKF_SELECT_PARAGRAPH<BR>
VTKF_SELECT_OBJECT<BR>
VTKF_SELECT_ADJUST_FORWARD_CHAR<BR>
VTKF_SELECT_ADJUST_BACKWARD_CHAR<BR>
VTKF_SELECT_ADJUST_FORWARD_WORD<BR>
VTKF_SELECT_ADJUST_BACKWARD_WORD<BR>
VTKF_SELECT_ADJUST_FORWARD_PARAGRAPH<BR>
VTKF_SELECT_ADJUST_BACKWARD_PARAGRAPH<BR>
VTKF_SELECT_ADJUST_TO_START<BR>
VTKF_SELECT_ADJUST_TO_END<BR>
VTKF_SELECT_ADJUST_START_OF_LINE<BR>
VTKF_SELECT_ADJUST_END_OF_LINE<BR>
VTKF_DELETE_BACKWARD_CHAR<BR>
VTKF_DELETE_BACKWARD_WORD<BR>
VTKF_DELETE_BACKWARD_LINE<BR>
VTKF_DELETE_BACKWARD_PARAGRAPH<BR>
VTKF_DELETE_TO_START<BR>
VTKF_DELETE_CHAR<BR>
VTKF_DELETE_WORD<BR>
VTKF_DELETE_LINE<BR>
VTKF_DELETE_PARAGRAPH<BR>
VTKF_DELETE_TO_END<BR>
VTKF_DELETE_EVERYTHING<BR>
VTKF_DESELECT<BR>
VTKF_TOGGLE_OVERSTRIKE_MODE<BR>
VTKF_TOGGLE_SMART_QUOTES</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Text_1e.htm_IX_MSG_VIS_TEXT_DO_KEY_FUNCTION">
 </A>
MSG_VIS_TEXT_DO_KEY_FUNCTION</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_DO_KEY_FUNCTION
        VisTextKeyFunction			func,
        word			data);</PRE>
<P>
This message allows the text object to mimic certain text operations that normally are the result of user keystrokes.</P>
<P>
Note: the <CODE>
VisTextKeyFunction</CODE>
 types VTKF_SELECT_LINE, VTKF_SELECT_PARAGRAPH, and VTKF_SELECT_OBJECT will be supported in an upcoming release.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object </P>
<P CLASS="refField">
Parameters:	<EM>
func	</EM>
<CODE>
VisTextKeyFunction</CODE>
 to perform.</P>
<DL>
<DT>
<EM>
data</EM>
</DT><DD>Data for that key function (if needed).</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_1f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.6 <A HREF="#Text_19.htm">Using VisText</A>: 
Setting Text Confines</H3>
<PRE>MSG_VIS_TEXT_GET_MAX_LENGTH, MSG_VIS_TEXT_SET_MAX_LENGTH, MSG_VIS_TEXT_GET_LR_MARGIN, MSG_VIS_TEXT_SET_LR_MARGIN, MSG_VIS_TEXT_GET_TB_MARGIN, MSG_VIS_TEXT_SET_TB_MARGIN</PRE>

<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_GET_MAX_LENGTH">
 </A>
MSG_VIS_TEXT_GET_MAX_LENGTH</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_MAX_LENGTH();</PRE>
<P>
This message returns the maximum length of text in the text object (stored in VTI_<CODE>
maxLength</CODE>
).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	Maximum length of the text, in characters.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_SET_MAX_LENGTH">
 </A>
MSG_VIS_TEXT_SET_MAX_LENGTH</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_MAX_LENGTH(
        word		newMaxLength);</PRE>
<P>
This message sets the maximum length of text within a text object (stored in VTI_<CODE>
maxLength</CODE>
). If the current text is too long, any excess text is removed. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object (except <CODE>
VisLargeTextClass</CODE>
).</P>
<P CLASS="refField">
Parameters:	<EM>
newMaxLength</EM>
	Maximum length of the text object (in characters).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_GET_LR_MARGIN">
 </A>
MSG_VIS_TEXT_GET_LR_MARGIN</H6>
<PRE CLASS="syntax">byte	MSG_VIS_TEXT_GET_LR_MARGIN();</PRE>
<P>
This message returns the current left/right margins. Both margins are the same and are thus represented by the same returned value.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
VisTextClass</CODE>
 objects (not GenText objects).</P>
<P CLASS="refField">
Return:	The current left/right margin.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_SET_LR_MARGIN">
 </A>
MSG_VIS_TEXT_SET_LR_MARGIN</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_LR_MARGIN(
        byte		lrMargin);</PRE>
<P>
This message sets the left/right margins of the text object. Both margins will be set to the same value. Do not use this message on GenText objects, as the specific UI is responsible for this behavior.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
VisTextClass</CODE>
 objects (not GenText objects).</P>
<P CLASS="refField">
Parameters:	<EM>
lrMargin</EM>
	New left/right margins.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_GET_LR_MARGIN">
 </A>
MSG_VIS_TEXT_GET_TB_MARGIN</H6>
<PRE CLASS="syntax">byte	MSG_VIS_TEXT_GET_TB_MARGIN();</PRE>
<P>
This message returns the current top/bottom margins. Both margins are the same and are thus represented by the same returned value.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
VisTextClass</CODE>
 objects (not GenText objects).</P>
<P CLASS="refField">
Return:	The current top/bottom margin.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_1f.htm_IX_MSG_VIS_TEXT_SET_TB_MARGIN">
 </A>
MSG_VIS_TEXT_SET_TB_MARGIN</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_TB_MARGIN(
        byte		tbMargin);</PRE>
<P>
This message sets the top/bottom margins of the text object. Both margins will be set to the same value. Do not use this message on GenText objects, as the specific UI is responsible for this behavior.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	<CODE>
VisTextClass</CODE>
 objects (not GenText objects).</P>
<P CLASS="refField">
Parameters:	<EM>
tbMargin</EM>
	New top/bottom margins.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_20.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.7 <A HREF="#Text_19.htm">Using VisText</A>: 
Output Messages</H3>
<PRE>VTI_output, MSG_VIS_TEXT_GET_OUTPUT, MSG_VIS_TEXT_SET_OUTPUT, MSG_META_TEXT_USER_MODIFIED, MSG_META_TEXT_NOT_USER_MODIFIED,MSG_META_TEXT_CR_FILTERED,MSG_META_TEXT_TAB_FILTERED, MSG_META_TEXT_LOST_FOCUS, MSG_META_TEXT_GAINED_FOCUS, MSG_META_TEXT_LOST_TARGET, MSG_META_TEXT_GAINED_TARGET, MSG_META_TEXT_EMPTY_STATUS_CHANGED</PRE>
<P>
VTI_<CODE>
output</CODE>
 stores the object to receive messages sent out by the text object. A range of messages imported from <CODE>
MetaClass</CODE>
 (<CODE>
MetaTextMessages</CODE>
) are sent to this destination optr. These messages are listed below:</P>
<P>
MSG_META_TEXT_USER_MODIFIED is sent to VTI_<CODE>
output</CODE>
 when the user first modifies text within the object. This message is also sent to the text object itself to set its VTS_MODIFIED state (after it is sent to VTI_<CODE>
output</CODE>
). If the text object's VTS_MODIFIED bit is later cleared, it is sent MSG_META_TEXT_NOT_USER_MODIFIED (and may receive MSG_META_TEXT_USER_MODIFIED again). </P>
<P>
MSG_META_TEXT_CR_FILTERED is sent when a Carriage Return is filtered out of the text input by the text object's filtering mechanism. This message is first sent to the text object itself.</P>
<P>
MSG_META_TEXT_TAB_FILTERED is sent when a Tab is filtered out of the text input by the text object's filtering mechanism. This message is first sent to the text object itself.</P>
<P>
MSG_META_TEXT_LOST_FOCUS is sent when the text object loses the focus. MSG_META_TEXT_GAINED_FOCUS is sent when the text object gains the focus.</P>
<P>
MSG_META_TEXT_LOST_TARGET is sent when the text object loses the target. MSG_META_TEXT_GAINED_TARGET is sent when the text object gains the target.</P>
<P>
MSG_META_TEXT_EMPTY_STATUS_CHANGED is sent when the text object either changes from being empty to being non-empty or vice-versa.</P>
<P>
To retrieve the current output of the text object, send it MSG_VIS_TEXT_GET_OUTPUT. To change the current output, send it MSG_VIS_TEXT_SET_OUTPUT.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_USER_MODIFIED">
 </A>
MSG_META_TEXT_USER_MODIFIED</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_USER_MODIFIED(
        optr		obj);</PRE>
<P>
MSG_META_TEXT_USER_MODIFIED is sent to VTI_<CODE>
output</CODE>
 when the user modifies text within the object. The message is also sent to the text object itself (to mark itself modified) after it is sent to the destination, so the state of the text's VTS_MODIFIED bit may not accurately reflect the state of the text object. If you need to intercept this message and also need to perform an operation using the text object's modified state.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. The message is also sent to the text object itself.</P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object modified.</P>
<P CLASS="refField">
Interception:	May intercept to receive notification of user modification of text. Because modification of the text object's VTS_MODIFIED bit may be asynchronous, you should send any operations that depend on this information (such as clearing the VTS_MODIFIED bit) to the text object using MF_FORCE_QUEUE </P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_NOT_USER_MODIFIED">
 </A>
MSG_META_TEXT_NOT_USER_MODIFIED</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_NOT_USER_MODIFIED(
        optr		obj);</PRE>
<P>
This message is sent to VTI_<CODE>
output</CODE>
 when the VTS_MODIFIED state of the text object is cleared, either by the system, or by an application inspired action.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. The message is also sent to the text object itself first.</P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object marked not modified.</P>
<P CLASS="refField">
Interception:	Intercept to receive notification of when a text object is marked not modified.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_CR_FILTERED">
 </A>
MSG_META_TEXT_CR_FILTERED</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_CR_FILTERED(
        word		character,
        word		flags,
        word		state);</PRE>
<P>
This message is sent to VTI_<CODE>
output</CODE>
 when a Carriage Return is filtered out in the text input stream.</P>
<P CLASS="refField">
Source:	Sent by the system when a CR is filtered out of the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. The message is also sent to the text object itself.</P>
<P CLASS="refField">
Parameters:	<EM>
character</EM>
	The character value (CR).</P>
<DL>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>
ShiftState</CODE>
 and <CODE>
CharFlags</CODE>
.</DD>
<DT>
<EM>
state</EM>
</DT><DD>The state of the text object (VTI_<CODE>
state</CODE>
) at the time of the filtering action.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to receive notification that a Carriage Return has been filtered out of the text object.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_TAB_FILTERED">
 </A>
MSG_META_TEXT_TAB_FILTERED</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_TAB_FILTERED(
        word		character,
        word		flags,
        word		state);</PRE>
<P>
This message is sent to VTI_<CODE>
output</CODE>
 when a Tab is filtered out in the text input stream.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. The message is also sent to the text object itself.</P>
<P CLASS="refField">
Parameters:	<EM>
character</EM>
	The character value (Tab).</P>
<DL>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>
ShiftState</CODE>
 and <CODE>
CharFlags</CODE>
.</DD>
<DT>
<EM>
state</EM>
</DT><DD>The state of the text object (VTI_<CODE>
state</CODE>
) at the time of the filtering action.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to receive notification that a Tab has been filtered out of the text object.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_LOST_FOCUS">
 </A>
MSG_META_TEXT_LOST_FOCUS</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_LOST_FOCUS(
        optr		obj);</PRE>
<P>
This message is sent when the text object loses the focus of the application. </P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. </P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object.</P>
<P CLASS="refField">
Interception:	Intercept to receive notification of when the text object loses the focus. </P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_GAINED_FOCUS">
 </A>
MSG_META_TEXT_GAINED_FOCUS</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_GAINED_FOCUS(
        optr		obj);</PRE>
<P>
This message is sent when the text object gains the focus of the application.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. </P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object.</P>
<P CLASS="refField">
Interception:	Intercept to receive notification of when the text object gains the focus.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_LOST_TARGET">
 </A>
MSG_META_TEXT_LOST_TARGET</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_LOST_TARGET(
        optr		obj);</PRE>
<P>
This message is sent when the text object loses the target of an application.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. </P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object.</P>
<P CLASS="refField">
Interception:	Intercept to receive notification of when the text object loses the target.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_GAINED_TARGET">
 </A>
MSG_META_TEXT_GAINED_TARGET</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_GAINED_TARGET(
        optr		obj);</PRE>
<P>
This message is sent when the text object gains the target of an application.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. </P>
<P CLASS="refField">
Parameters:	<EM>
obj</EM>
	Optr of the text object.</P>
<P CLASS="refField">
Interception:	Intercept to receive notification of when the text object gains the target.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_META_TEXT_EMPTY_STATUS_CHANGED">
 </A>
MSG_META_TEXT_EMPTY_STATUS_CHANGED</H6>
<PRE CLASS="syntax">@importMessage MetaTextMessages, void MSG_META_TEXT_EMPTY_STATUS_CHANGED(
        optr		object,
        Boolean		hasTextFlag);</PRE>
<P>
This message is sent out when the text object is either becoming empty or not empty.</P>
<P CLASS="refField">
Source:	Sent by the system when the user modifies the text object.</P>
<P CLASS="refField">
Destination:	VTI_<CODE>
output</CODE>
 of the text object's instance data. The message is also sent to the text object itself first.</P>
<P CLASS="refField">
Parameters:	<EM>
object</EM>
	Optr of the text object whose empty status is changing.</P>
<DL>
<DT>
<EM>
hasTextFlag</EM>
</DT><DD>Non-zero if the text object is becoming non-empty.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to receive notification when the empty status of the text object is changing.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_VIS_TEXT_GET_OUTPUT">
 </A>
MSG_VIS_TEXT_GET_OUTPUT</H6>
<PRE CLASS="syntax">optr	MSG_VIS_TEXT_GET_OUTPUT();</PRE>
<P>
This message returns the current destination (output) for actions taken by the text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	Optr of the object's destination (in the VTI_<CODE>
output</CODE>
 field).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_20.htm_IX_MSG_VIS_TEXT_SET_OUTPUT">
 </A>
MSG_VIS_TEXT_SET_OUTPUT</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_SET_OUTPUT(
        optr		newOutput);</PRE>
<P>
This message sets the destination object for actions taken by this text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Parameters:	<EM>
newOutput</EM>
	New destination object (placed in object's VTI_<CODE>
output</CODE>
 field).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>

<HR>
<A NAME="Text_21.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 5.8 <A HREF="#Text_19.htm">Using VisText</A>: 
Getting Geometry Information</H3>
<PRE>MSG_VIS_TEXT_GET_MIN_WIDTH, MSG_VIS_TEXT_GET_AVERAGE_CHAR_WIDTH, MSG_VIS_TEXT_GET_LINE_HEIGHT, MSG_VIS_TEXT_RECALC_AND_DRAW, MSG_VIS_TEXT_GET_ONE_LINE_WIDTH, MSG_VIS_TEXT_GET_SIMPLE_MIN_WIDTH</PRE>

<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_GET_MIN_WIDTH">
 </A>
MSG_VIS_TEXT_GET_MIN_WIDTH</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_MIN_WIDTH();</PRE>
<P>
This message returns the minimum width that can be supported for attributes of the text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	Minimum width (in points) that can be supported.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_GET_AVERAGE_CHAR_WIDTH">
 </A>
MSG_VIS_TEXT_GET_AVERAGE_CHAR_WIDTH</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_AVERAGE_CHAR_WIDTH();</PRE>
<P>
This message returns the average character width for the first font/character attribute run.</P>
<P CLASS="refField">
Source:	Unrestricted.,</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	Average character width (in points).</P>


<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_GET_LINE_HEIGHT">
 </A>
MSG_VIS_TEXT_GET_LINE_HEIGHT</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_LINE_HEIGHT();</PRE>
<P>
This message returns the height of a line (in points) for a single-line text object <EM>
only</EM>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Single-line text objects that are not within document objects.</P>
<P CLASS="refField">
Return:	Height of line (in points).</P>


<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_RECALC_AND_DRAW">
 </A>
MSG_VIS_TEXT_RECALC_AND_DRAW</H6>
<PRE CLASS="syntax">void	MSG_VIS_TEXT_RECALC_AND_DRAW();</PRE>
<P>
This message recalculates and redraws a text object, usually after constraints on either its width or its height is made without its knowledge.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_GET_ONE_LINE_WIDTH">
 </A>
MSG_VIS_TEXT_GET_ONE_LINE_WIDTH</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_ONE_LINE_WIDTH(
        word		charsToCalc);</PRE>
<P>
This message calculates the width of a single-line text object. This width is calculated using the first encountered character attributes.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any single-line text object.</P>
<P CLASS="refField">
Parameters:	<EM>
charsToCalc</EM>
	Number of characters (from start of text) to use in the calculation.</P>
<P CLASS="refField">
Return:	Width of the text.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_21.htm_IX_MSG_VIS_TEXT_GET_SIMPLE_MIN_WIDTH">
 </A>
MSG_VIS_TEXT_GET_SIMPLE_MIN_WIDTH</H6>
<PRE CLASS="syntax">word	MSG_VIS_TEXT_GET_SIMPLE_MIN_WIDTH();</PRE>
<P>
This message returns the minimum width that can be supported for the text object's current text, font and character attributes. This message assumes that the caller is not worried about keeping a width for the largest border possible.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any text object.</P>
<P CLASS="refField">
Return:	Minimum width which can be supported.</P>

<HR>
<A NAME="Text_22.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 6 
Using GenText</H2>
<P>
<CODE>
GenTextClass</CODE>
 provides your application with a generic UI object to both display and edit text. The GenText object is a highly functional object, capable of displaying text to the user under a variety of constraints. The object's role is primarily to display text pertaining to user interface operations. The object also provides a wide array of text processing features, however, to display the text in different formats. For more powerful and diverse text formatting (such as word-processing), you should probably use a VisText object instead.</P>
<P>
The GenText has many advanced features of the Text Object Library built in. Most of these features may not be useful for cases where you will most likely use a GenText object; GenText is designed for simpler text edit capabilities than incorporating graphics into text, for example. Still, the GenText object provides a great deal of default behavior and, with a little work, a highly powerful and specifically tailored text object.</P>
<P>
The GenText object may not only show text to the user but may also allow the user to supply or edit the displayed text. For example, a file copy operation may request the new name to write the file to; a GenText object would allow the user to enter this file name within its text field.</P>
<P>
The text object library offers the following key features:</P>
<UL>
<LI>
Display-only and editable text fields.</LI>
<LI>
Automatic keyboard support, allowing the user to immediately begin entering text into the GenText's text field.</LI>
<LI>
Automatic word wrapping from one line to the next (or the capability to disable this option).</LI>
<LI>
Vertical scrolling of text (providing scrollbars either initially or when needed).</LI>
<LI>
Selection of text, usually represented by highlighting.</LI>
<LI>
The specification of actions to perform when the user completes text edits.</LI>
<LI>
Text character styles to display the text. Sample character styles are bold, underline, strike-through, etc.</LI>
<LI>
Paragraph styles (rulers) to display the text. Sample paragraph styles are right-justified, paragraph spacing, hidden text, etc.</LI>
<LI>
Fonts to display the text.</LI>
<LI>
Ability to store the text in a variety of data structures.</LI>
<LI>
Interaction with the text controllers.</LI>
</UL>
<P>
GenText inherits most of its capabilities from <CODE>
VisTextClass</CODE>
 which in turn uses the text object library. You may wish to peruse the structure of this library if you want to know more details of how the GenText performs its default behavior.</P>
<P>
GenText is used primarily in three situations: First, when you need to display text (such as in a &quot;help&quot; window), the GenText object can act as a non-editable text field with its own scrolling and geometry management. Second, when you need to get textual input not related to word processing or text editing (such as a file name), the GenText can act as an editable field of one or more lines. Third, when simple word processing or text editing in the generic tree is required (as in the NotePad application), the GenText can provide a scrollable, sizable text-edit field. If you want, the editable GenText can even support advanced paragraph and text formatting.</P>
<P>
VisText is used in most situations where complex or advanced formatting or publishing features are desired. Typically, a GenView and a VisContent will be used to provide the root of the visible tree and its interaction with the UI. The VisText is much more flexible than the GenText and allows complex publishing and page layout features that would be difficult with GenText. VisText also allows you to have the same interface no matter what specific UI is in use since it is a visible object and not subject to the constraints of the specific UI.</P>
<P CLASS="subsectionLink">
<A HREF="#Text_23.htm">GenText Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_24.htm">GenText Basics</A></P>
<HR>
<A NAME="Text_23.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 6.1 <A HREF="#Text_22.htm">Using GenText</A>: 
GenText Instance Data</H3>
<P>
The GenText object has several instance fields which affect the visual presentation of text. These are listed in <A HREF="#Text_23.htm_81584"> GenText Instance Data</A>
.</P>
<P CLASS="figTitle">
Code Display 10-21 <A NAME="Text_23.htm_81584">
 </A>
GenText Instance Data</P>
<PRE><A NAME="Text_23.htm_IX_GTXI_&ldots;"> </A>@instance ChunkHandle				GTXI_text;
@instance word				GTXI_maxLength = 32767;
@instance GenTextAttrs				GTXI_attrs = GTA_USE_TAB_FOR_NAVIGATION;
@instance GenTextStateFlags				GTXI_stateFlags = 0;
@instance optr				GTXI_destination;
@instance word				GTXI_applyMsg = 0;</PRE>
<PRE>/* GenTextAttrs */</PRE>
<PRE>typedef ByteFlags GenTextAttrs;
#define GTA_SINGLE_LINE_TEXT					0x80
#define GTA_USE_TAB_FOR_NAVIGATION					0x40
#define GTA_INIT_SCROLLING					0x20
#define GTA_NO_WORD_WRAPPING					0x10
#define GTA_ALLOW_TEXT_OFF_END					0x08
#define GTA_TAIL_ORIENTED					0x04
#define GTA_DONT_SCROLL_TO_CHANGES					0X02</PRE>
<PRE>/* GenTextStateFlags */</PRE>
<PRE>typedef ByteFlags GenTextStateFlags
#define GTSF_INDETERMINATE					0x80
#define GTSF_MODIFIED					0x40</PRE>
<P>
GTXI_<CODE>
text</CODE>
 stores the ChunkHandle of the chunk containing the GenText's text. This chunk will be stored in the same resource as the text object. You may alter the text within this chunk with any of the previously mentioned <CODE>
VisTextClass</CODE>
 messages. See <A HREF="#Text_15.htm_60374"> The Text</A>
 for a full discussion of how to manipulate and alter text.</P>
<P>
GTXI_<CODE>
maxLength</CODE>
 specifies the maximum number of character positions allowed within the GenText. By default, up to 32767 characters may appear within a GenText. If you set GTXI_<CODE>
maxLength</CODE>
 to a lower number, any characters beyond the maximum length will be ignored.</P>
<P>
GTXI_<CODE>
attrs</CODE>
 specifies the <CODE>
GenTextAttrs</CODE>
 to set for the GenText object. These attributes affect the presentation of the text.</P>
<P>
<CODE>
GTXI_stateFlags</CODE>
 specifies the <CODE>
GenTextStateFlags</CODE>
 to use with this text object. These state flags affect the modified and indeterminate states of the object.</P>
<P>
GTXI_<CODE>
applyMsg</CODE>
 sets the message for this object to send out whenever activated. In most cases, your handler for this message may then retrieve the text and perform whatever required operations on that text.</P>
<P>
GTXI_<CODE>
destination</CODE>
 sets the object or process to handle apply messages sent out by this object. <A NAME="Text_23.htm_marker=38887">
 </A>
</P>
<P CLASS="figTitle">
Code Display 10-22 GenText VarData Instance Fields</P>
<PRE>@vardata Message			ATTR_GEN_TEXT_STATUS_MSG;
@vardata void			ATTR_GEN_TEXT_SET_MODIFIED_ON_REDUNDANT_SELECTION;
@vardata void			ATTR_GEN_TEXT_SELECTABLE;
@vardata VisTextDefaultCharAttr ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR;
@vardata VisTextDefaultParaAttr ATTR_GEN_TEXT_DEFAULT_PARA_ATTR;
@vardata ChunkHandle			ATTR_GEN_TEXT_CHAR_ATTR;
@vardata ChunkHandle			ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS;
@vardata ChunkHandle			ATTR_GEN_TEXT_PARA_ATTR;
@vardata ChunkHandle			ATTR_GEN_TEXT_MULTIPLE_PARA_ATTR_RUNS;</PRE>
<PRE>@vardata word			ATTR_GEN_TEXT_EXTENDED_FILTER;</PRE>
<PRE>@vardata word			ATTR_GEN_TEXT_TYPE_RUNS;
@vardata word			ATTR_GEN_TEXT_GRAPHIC_RUNS;
@vardata word			ATTR_GEN_TEXT_REGION_ARRAY;
@vardata word			ATTR_GEN_TEXT_STYLE_ARRAY;
@vardata word			ATTR_GEN_TEXT_NAME_ARRAY;</PRE>
<PRE>@vardata optr			ATTR_GEN_TEXT_RUNS_ITEM_GROUP;
    @reloc		ATTR_GEN_TEXT_RUNS_ITEM_GROUP;</PRE>
<PRE>@vardata void			ATTR_GEN_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL;
@vardata optr			ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS;
@vardata void			ATTR_GEN_TEXT_LEGAL_DOS_PATH;
@vardata void			ATTR_GEN_TEXT_DATE;
@vardata void			ATTR_GEN_TEXT_TIME;
@vardata void			ATTR_GEN_TEXT_MAKE_UPPERCASE;
@vardata void			ATTR_GEN_TEXT_ALLOW_COLUMN_BREAKS;
@vardata void			ATTR_GEN_TEXT_UPPERCASE_ALPHA;
@vardata void			ATTR_GEN_TEXT_UPPERCASE_ALPHA_NUMERIC;
@vardata void			ATTR_GEN_TEXT_DASHED_ALPHA_NUMERIC;
@vardata void			ATTR_GEN_TEXT_NORMAL_ASCII;
@vardata void			ATTR_GEN_TEXT_LEGAL_DOS_VOLUME_NAMES;
@vardata void			ATTR_GEN_TEXT_DOS_CHARACTER_SET;
@vardata void			ATTR_GEN_TEXT_NO_SPACES;
@vardata void			ATTR_GEN_TEXT_ALLOW_SPACES;
@vardata void			ATTR_GEN_TEXT_ALPHA;
@vardata void			ATTR_GEN_TEXT_NUMERIC;
@vardata void			ATTR_GEN_TEXT_SIGNED_NUMERIC;
@vardata void			ATTR_GEN_TEXT_SIGNED_DECIMAL;
@vardata void			ATTR_GEN_TEXT_FLOAT_DECIMAL;
@vardata void			ATTR_GEN_TEXT_ALPHA_NUMERIC;
@vardata void			ATTR_GEN_TEXT_LEGAL_FILENAMES;
@vardata void			ATTR_GEN_TEXT_LEGAL_DOS_FILENAMES;
@vardata void			ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
@vardata void			ATTR_GEN_TEXT_DOES_NOT_ACCEPT_INK;
@vardata void			ATTR_GEN_TEXT_CURSOR_NO_FOCUS;
@vardata ChunkHandle			ATTR_GEN_TEXT_CUSTOM_FILTER;</PRE>
<P>
ATTR_GEN_TEXT_STATUS_MSG sets a status message for this GenText. A status message allows the GenText to send notification other than its apply message.<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_STATUS_MSG">
 </A>
</P>
<P>
<CODE>
ATTR_GEN_TEXT_SET_MODIFIED_ON_REDUNDANT_SELECTION</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_SET_MODIFIED_ON_REDUNDANT_SELECTION">
 </A>
 sets the text dirty (modified) on any modification, even if it does not change the text or the text's attributes.</P>
<P>
ATTR_GEN_TEXT_SELECTABLE<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_SELECTABLE">
 </A>
 should be set if text should be selectable whether or not the text is editable. By default non-editable text is not selectable. Editable text is always selectable.</P>
<P>
ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR">
 </A>
 stores singular default character attributes of type <CODE>
VisTextDefaultCharAttr</CODE>
 in a word-length record. ATTR_GEN_TEXT_DEFAULT_PARA_ATTR<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DEFAULT_PARA_ATTR">
 </A>
 stores singular default paragraph attributes of type <CODE>
VisTextDefaultParaAttr</CODE>
 in a word-length record.</P>
<P>
ATTR_GEN_TEXT_CHAR_ATTR<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_CHAR_ATTR">
 </A>
 stores the singular character attributes for the text object. This vardata field stores the ChunkHandle to a single <CODE>
VisTextCharAttr</CODE>
 structure.</P>
<P>
ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS">
 </A>
 stores the multiple character attributes for the text object. This vardata field will store the ChunkHandle to a chunk array of character style runs (each of type <CODE>
VisTextCharAttr</CODE>
). See <A HREF="#Text_17.htm_91955"> Character Runs</A>
.</P>
<P>
ATTR_GEN_TEXT_PARA_ATTR<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_PARA_ATTR">
 </A>
 stores the singular paragraph attributes for the text object. This vardata field stores the ChunkHandle to a single <CODE>
VisTextParaAttr</CODE>
 structure.</P>
<P>
ATTR_GEN_TEXT_MULTIPLE_PARA_ATTR_RUNS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_MULTIPLE_PARA_ATTR_RUNS">
 </A>
 stores the multiple paragraph attributes for the text object. This vardata field will store the ChunkHandle to a chunk array of paragraph style runs (each of type <CODE>
VisTextParaAttr</CODE>
). See <A HREF="#Text_18.htm_59559"> Paragraph Runs</A>
.</P>
<P>
ATTR_GEN_TEXT_EXTENDED_FILTER<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_EXTENDED_FILTER">
 </A>
 stores the <CODE>
VisTextExtendedFilterTypes</CODE>
 to use instead of the default <CODE>
VisTextFilters</CODE>
. Extended filters offer more powerful (and complex) filtering mechanisms for accepting and rejecting text into the GenText.</P>
<P>
ATTR_GEN_TEXT_TYPE_RUNS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_TYPE_RUNS">
 </A>
 specifies the type runs for this text object. You should not need type runs unless you need hyperlink capabilities. ATTR_GEN_TEXT_GRAPHIC_RUNS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_GRAPHIC_RUNS">
 </A>
 specifies a graphics run to use within the text object.</P>
<P>
ATTR_GEN_TEXT_REGION_ARRAY<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_REGION_ARRAY">
 </A>
 specifies the array of regions defined for this text object. Text within the GenText will flow from each of the defined regions to the next region.<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_STYLE_ARRAY">
 </A>
 ATTR_GEN_TEXT_STYLE_ARRAY specifies the name array of styles used in the GenText's style sheets.</P>
<P>
<CODE>
ATTR_GEN_TEXT_RUNS_ITEM_GROUP</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_RUNS_ITEM_GROUP">
 </A>
 indicates that this text object is linked to an item group (list). When the user hits Return (or the equivalent), the text object sends a message to the item group; similarly, the item group will attempt to update the text object on changes.</P>
<P>
<CODE>
ATTR_GEN_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DO_NOT_INTERACT_WITH_SEARCH_CONTROL">
 </A>
 indicates that the text object should not send notification to the search control object.</P>
<P>
<CODE>
ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_SET_OBJECT_ENABLED_WHEN_TEXT_EXISTS">
 </A>
 makes the specified object enabled any time the GenText object has text in it.</P>
<P>
<CODE>
ATTR_GEN_TEXT_LEGAL_DOS_PATH</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_LEGAL_DOS_PATH">
 </A>
 makes sure that only legal DOS paths are used.</P>
<P>
<CODE>
ATTR_GEN_TEXT_DATE</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DATE">
 </A>
 and <A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_TIME">
 </A>
<CODE>
ATTR_GEN_TEXT_TIME</CODE>
 allows short date and time characters and spaces; the text object will be affected by the localization driver.</P>
<P>
ATTR_GEN_TEXT_MAKE_UPPERCASE<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_MAKE_UPPERCASE">
 </A>
 indicates that in addition to any other filters, any alphabetic characters are forced into uppercase.</P>
<P>
ATTR_GEN_TEXT_ALLOW_COLUMN_BREAKS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_ALLOW_COLUMN_BREAKS">
 </A>
 allows all characters including column breaks. Column breaks are normally filtered out in a GenText object. The column breaks usually will appear as new lines (like carriage returns) in the text object.</P>
<P>
<CODE>
ATTR_GEN_TEXT_UPPERCASE_ALPHA</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_UPPERCASE_ALPHA">
 </A>
 allows alphabetic characters and spaces. <A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_UPPERCASE_ALPHA_NUMERIC">
 </A>
<CODE>
ATTR_GEN_TEXT_UPPERCASE_ALPHA_NUMERIC</CODE>
, an allows only uppercase alphabetic characters and spaces. <CODE>
ATTR_GEN_TEXT_DASHED_ALPHA_NUMERIC</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DASHED_ALPHA_NUMERIC">
 </A>
 allows only uppercase alphabetic characters and spaces but also allows dashes.</P>
<P>
<CODE>
ATTR_GEN_TEXT_NORMAL_ASCII</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_NORMAL_ASCII">
 </A>
 allows only normal ASCII characters (no extended ASCII characters).</P>
<P>
<CODE>
ATTR_GEN_TEXT_LEGAL_DOS_VOLUME_NAMES</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_LEGAL_DOS_VOLUME_NAMES">
 </A>
 allows only characters that may appear in a legal DOS volume name.</P>
<P>
<CODE>
ATTR_GEN_TEXT_DOS_CHARACTER_SET</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DOS_CHARACTER_SET">
 </A>
 allows only characters in the legal DOS character set.</P>
<P>
<CODE>
ATTR_GEN_TEXT_NO_SPACES</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_NO_SPACES">
 </A>
 and <A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_ALLOW_SPACES">
 </A>
<CODE>
ATTR_GEN_TEXT_ALLOW_SPACES</CODE>
 govern whether spaces are allowed in the text object.</P>
<P>
<CODE>
ATTR_GEN_TEXT_ALPHA</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_ALPHA">
 </A>
, <A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_NUMERIC">
 </A>
<CODE>
ATTR_GEN_TEXT_NUMERIC</CODE>
, <CODE>
ATTR_GEN_TEXT_SIGNED_NUMERIC</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_SIGNED_NUMERIC">
 </A>
, <A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_SIGNED_DECIMAL">
 </A>
<CODE>
ATTR_GEN_TEXT_SIGNED_DECIMAL</CODE>
, <CODE>
ATTR_GEN_TEXT_FLOAT_DECIMAL</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_FLOAT_DECIMAL">
 </A>
, and <CODE>
ATTR_GEN_TEXT_ALPHA_NUMERIC</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_ALPHA_NUMERIC">
 </A>
 govern the character types allowed.</P>
<P>
<CODE>
ATTR_GEN_TEXT_LEGAL_FILENAMES</CODE>
<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_LEGAL_FILENAMES">
 </A>
 allows any characters legal to file names.</P>
<P>
ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE">
 </A>
 forces the text object to expand larger as the text grows without forcing it into scrollable text.</P>
<P>
ATTR_GEN_TEXT_DOES_NOT_ACCEPT_INK<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_DOES_NOT_ACCEPT_INK">
 </A>
 indicates that this text object will not accept ink under any circumstances.</P>
<P>
ATTR_GEN_TEXT_CURSOR_NO_FOCUS<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_CURSOR_NO_FOCUS">
 </A>
 causes the text object to have a cursor whether it has the focus or not.</P>
<P>
ATTR_GEN_TEXT_CUSTOM_FILTER<A NAME="Text_23.htm_IX_ATTR_GEN_TEXT_CUSTOM_FILTER">
 </A>
 contains the ChunkHandle of an array of <CODE>
VisTextCustomFilterData</CODE>
 structures. Each of these structures contains a range of character <EM>
values</EM>
 to filter out. These values are determined from the <CODE>
Chars</CODE>
 enumerated type. The text object figures out the number of filters in place by getting the size of the chunk.</P>
<P CLASS="figTitle">
Code Display 10-23 GenText Hints</P>
<PRE>@vardata ColorQuad			<A NAME="Text_23.htm_IX_HINT_TEXT_&ldots;"> </A>HINT_TEXT_WASH_COLOR
@vardata void			HINT_TEXT_WHITE_WASH_COLOR;
@vardata void			HINT_TEXT_AUTO_HYPHENATE;
@vardata void			HINT_TEXT_SELECT_TEXT;
@vardata void			HINT_TEXT_CURSOR_AT_START;
@vardata void			HINT_TEXT_CURSOR_AT_END;
@vardata void			HINT_TEXT_FRAME;
@vardata void			HINT_TEXT_NO_FRAME;
@vardata void			HINT_TEXT_ALLOW_UNDO;
@vardata void			HINT_TEXT_ALLOW_SMART_QUOTES;
@vardata void			HINT_TEXT_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;</PRE>
<P>
HINT_TEXT_WASH_COLOR indicates the background color for the GenText to exhibit. This hint takes a <CODE>
ColorQuad</CODE>
 argument.</P>
<P>
HINT_TEXT_WHITE_WASH_COLOR indicates the background color of the GenText should be white.</P>
<HR>
<A NAME="Text_24.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 6.2 <A HREF="#Text_22.htm">Using GenText</A>: 
GenText Basics</H3>
<P>
The GenText instance fields can be set to specific values in your Goc files. They may also be modified by your application at run-time. These instance fields may be modified by both <CODE>
GenTextClass</CODE>
 messages or <CODE>
VisTextClass</CODE>
 messages.</P>
<P>
<CODE>
GenTextClass</CODE>
 always builds out into a completely functioning subclass of <CODE>
VisTextClass</CODE>
. With the exception of geometry management behavior, you can assume that they will behave the same. You may send any <CODE>
VisTextClass</CODE>
 message to a GenText object. Messages are only provided in <CODE>
GenTextClass</CODE>
 to manipulate and alter behavior solely of <CODE>
GenTextClass</CODE>
 origins.</P>

<H4 CLASS="HeadingC">
VisText Instance Fields</H4>
<P>
The chunk handle stored in GTXI_<CODE>
text</CODE>
 is copied to the VisText instance field VTI_<CODE>
text</CODE>
 at run-time. To perform operations on this text, you may use any of the <CODE>
VisTextClass</CODE>
 messages in <A HREF="#Text_15.htm_60374"> The Text</A>
. Similarly, the text object maximum length stored in GTXI_<CODE>
maxLength</CODE>
 is copied to VTI_<CODE>
maxLength</CODE>
 at run-time. To perform operations on this data, use an appropriate message under <A HREF="#Text_19.htm_27116"> Using VisText</A>
.</P>


<H4 CLASS="HeadingC">
GenText Attributes</H4>
<PRE>GTXI_attrs, MSG_GEN_TEXT_SET_ATTRS, MSG_GEN_TEXT_GET_ATTRS</PRE>
<P>
GTXI_<A NAME="Text_24.htm_IX_GTA_&ldots;">
 </A>
<A NAME="Text_24.htm_IX_GenTextAttrs">
 </A>
<A NAME="Text_24.htm_IX_GTXI_attrs">
 </A>
<CODE>
attrs</CODE>
 stores the <CODE>
GenTextAttrs</CODE>
 of the GenText object. These attribute flags are listed below.</P>
<DL>
<DT>
GTA_SINGLE_LINE_TEXT</DT><DD>
This flag indicates that this text object is only one line high. Vertical scrolling is disabled. Scrolling may be implemented horizontally if this is set.</DD>
<DT>
GTA_USE_TAB_FOR_NAVIGATION</DT><DD>
This flag indicates that the <CODE>
Tab</CODE>
 key is used for navigation purposes in your application and should be interpreted to move to the next field rather than inserted into the text object. </DD>
<DT>
GTA_INIT_SCROLLING</DT><DD>
This flag indicates that the text object should appear with initial scrollbars. </DD>
<DT>
GTA_NO_WORD_WRAPPING</DT><DD>
This flag disables word wrapping.</DD>
<DT>
GTA_ALLOW_TEXT_OFF_END</DT><DD>
This flag is set if text may be allowed to overflow past the end of the text box. The text will still be stored in the object's text chunk, but it will not force horizontal (or vertical) scrolling to show the text on-screen.</DD>
<DT>
GTA_TAIL_ORIENTED</DT><DD>
This flag is set if you prefer to display the tail end of text rather than the top end. In a scrolling text box, this ensures that the text being added at the end is always displayed.</DD>
<DT>
GTA_DONT_SCROLL_TO_CHANGES</DT><DD>
This flag disables the default behavior of scrolling to any changes being made within the text object. Normally, insertion or deletion of text will force a scrolling GenText to scroll to the point of action; this flag will turn this behavior off. </DD>
</DL>
<P>
You may alter the contents of a GenText's GTXI_<CODE>
attrs</CODE>
 instance field at run-time by sending the object a <CODE>
MSG_GEN_TEXT_SET_ATTRS</CODE>
. You may only send this message to a non-usable (~GS_USABLE) text object. To retrieve the current <CODE>
GenTextAttrs</CODE>
 in use, send the text object <CODE>
MSG_GEN_TEXT_GET_ATTRS</CODE>
.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SET_ATTRS">
 </A>
MSG_GEN_TEXT_SET_ATTRS</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_ATTRS(
        byte	attrsToSet,
        byte	attrsToClear);</PRE>
<P>
This message sets a GenText object's <CODE>
GenTextAttrs</CODE>
 (GTXI_<CODE>
attrs</CODE>
). The GenText object must not be GS_USABLE when sent this message. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any non-usable GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
attrsToSet</EM>
	<CODE>
GenTextAttrs</CODE>
 to add.</P>
<DL>
<DT>
<EM>
attrsToClear</EM>
</DT><DD><CODE>
GenTextAttrs</CODE>
 to remove. An attribute set in both parameters will be cleared.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_GET_ATTRS">
 </A>
MSG_GEN_TEXT_GET_ATTRS</H6>
<PRE CLASS="syntax">byte	MSG_GEN_TEXT_GET_ATTRS();</PRE>
<P>
This message retrieves the GenText object's <CODE>
GenTextAttrs</CODE>
 (GTXI_<CODE>
attrs</CODE>
).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	<CODE>
GenTextAttrs</CODE>
 in use by the GenText object(<CODE>
GTXI_attrs</CODE>
).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
GenTextStates</H4>
<PRE>GTXI_stateFlags, MSG_GEN_TEXT_SET_INDETERMINATE_STATE, MSG_GEN_TEXT_SET_MODIFIED_STATE, MSG_GEN_TEXT_IS_INDETERMINATE, MSG_GEN_TEXT_IS_MODIFIED</PRE>
<P>
GTXI_<A NAME="Text_24.htm_IX_GTXI_stateFlags">
 </A>
<CODE>
stateFlags</CODE>
 stores the current state of the GenText object. There are two <CODE>
GenTextStateFlags</CODE>
<A NAME="Text_24.htm_IX_GTSF_&ldots;">
 </A>
<A NAME="Text_24.htm_IX_GenTextStateFlags">
 </A>
:</P>
<DL>
<DT>
GTSF_INDETERMINATE</DT><DD>
This flag specifies that the text within the GenText is indeterminate (may or may not reflect the current state). In most cases, you will not need to set this flag.</DD>
<DT>
GTSF_MODIFIED</DT><DD>
This flag specifies that the text within the GenText has changed since it last received a <CODE>
MSG_GEN_APPLY</CODE>
. The handler for <CODE>
MSG_GEN_APPLY</CODE>
 checks whether this flag is set before sending out the GenText's GTXI_<CODE>
applyMsg</CODE>
.</DD>
</DL>
<P>
GenText objects should normally be marked by the application as not modified anytime their state is set with an external message. They will automatically be marked modified whenever the user interacts with them and marked not modified after receiving <CODE>
MSG_GEN_APPLY</CODE>
.</P>
<P>
You may set a GenText's indeterminate or modified state with <CODE>
MSG_GEN_TEXT_SET_INDETERMINATE_STATE</CODE>
 or <CODE>
MSG_GEN_TEXT_SET_MODIFIED_STATE</CODE>
, respectively. To check whether a GenText is indeterminate or modified, use <CODE>
MSG_GEN_TEXT_IS_INDETERMINATE</CODE>
 or <CODE>
MSG_GEN_TEXT_IS_MODIFIED</CODE>
.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SET_INDETERMINATE_STATE">
 </A>
MSG_GEN_TEXT_SET_INDETERMINATE_STATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_INDETERMINATE_STATE(
        Boolean indeterminateState);</PRE>
<P>
This message sets the GenText object's indeterminate state (the GTSF_INDETERMINATE flag in GTXI_<CODE>
stateFlags</CODE>
). This message does not affect the stored text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
indeterminateState</EM>
	<BR>
<CODE>
True</CODE>
 to set the text object indeterminate (GTSF_INDETERMINATE); <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SET_MODIFIED_STATE">
 </A>
MSG_GEN_TEXT_SET_MODIFIED_STATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_MODIFIED_STATE(
        Boolean modifiedState);</PRE>
<P>
This message allows you to set the modified state of a GenText object (the GTSF_MODIFIED flag in GTXI_<CODE>
stateFlags</CODE>
). This message does not affect the stored text.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
	<CODE>
True</CODE>
 to set the text object modified (GTSF_MODIFIED); <CODE>
false</CODE>
 otherwise.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_IS_INDETERMINATE">
 </A>
MSG_GEN_TEXT_IS_INDETERMINATE</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_TEXT_IS_INDETERMINATE();</PRE>
<P>
This message checks whether a GenText object is indeterminate in state.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The indeterminate state of the GenText object (<CODE>
true</CODE>
 if the object is indeterminate, <CODE>
false</CODE>
 otherwise).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_IS_MODIFIED">
 </A>
MSG_GEN_TEXT_IS_MODIFIED</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_TEXT_IS_MODIFIED();</PRE>
<P>
This message checks whether a GenText object has been modified.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The modified state of the GenText object (<CODE>
true</CODE>
 if the object has been modified, <CODE>
false</CODE>
 otherwise).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>



<H4 CLASS="HeadingC">
Sending an Action</H4>
<PRE>GTXI_applyMsg, GTXI_destination, MSG_GEN_TEXT_GET_DESTINATION, MSG_GEN_TEXT_SET_DESTINATION, MSG_GEN_TEXT_GET_APPLY_MSG, MSG_GEN_TEXT_SET_APPLY_MSG</PRE>
<P>
GTXI_<A NAME="Text_24.htm_IX_GTXI_applyMsg">
 </A>
<CODE>
applyMsg</CODE>
 holds the message for the GenText to send out whenever it has been modified and needs to apply its changes. Whenever a GenText receives <CODE>
MSG_GEN_APPLY</CODE>
, it checks whether its GTSF_MODIFIED flag has been set; if it has, it will send out its apply message. If a GenText is operating in immediate mode, these actions will happen immediately, resulting in an immediate action.</P>
<P>
Use the prototype GEN_TEXT_APPLY_MSG to define your apply message. This ensures that the apply message passes the correct parameters (the current <CODE>
GenTextStateFlags</CODE>
). GTXI_<CODE>
destination</CODE>
 specifies the destination object (or process) to send the GTXI_<CODE>
applyMsg</CODE>
 to. (This may also be a <CODE>
TravelOption</CODE>
 such as TO_APP_FOCUS.) Use of these two fields is shown in <A HREF="#Text_24.htm_71733"> Sending an Apply Message</A>
.</P>
<P CLASS="figTitle">
Code Display 10-24 <A NAME="Text_24.htm_71733">
 </A>
Sending an Apply Message</P>
<PRE>	/* Define the apply message using the provided prototype. */
@message (GEN_TEXT_APPLY_MSG) MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER;</PRE>
<PRE>	/* In the object declaration, set the destination and the apply message. */
@object GenTextClass MyText = {
    GI_visMoniker = &quot;My Text Object&quot;;
    GTXI_text = &quot;Initial Text Here&quot;;
    GTXI_maxLength = 99;
    GTXI_applyMsg = MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER;
    GTXI_destination = process;
}</PRE>
<PRE>/* Retrieve the current text and place it in the indicated buffer. */</PRE>
<PRE>@method MyTextProcessClass, MSG_MY_TEXT_STUFF_TEXT_IN_BUFFER {
    char tempBuffer[100];</PRE>
<PRE>/* The GET_ALL_PTR retrieves the current text and stuffs at the location it in the
 * passed pointer. Pass a text length of zero for null-terminated text strings. */
    @call MyText::MSG_VIS_TEXT_GET_ALL_PTR(tempBuffer);
}</PRE>
<P>
To change a GenText's apply message or destination, send it <CODE>
MSG_GEN_TEXT_SET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_TEXT_SET_DESTINATION</CODE>
, respectively. Use <CODE>
MSG_GEN_TEXT_GET_APPLY_MSG</CODE>
 or <CODE>
MSG_GEN_TEXT_GET_DESTINATION</CODE>
 to return the current apply message or destination.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SET_APPLY_MSG">
 </A>
MSG_GEN_TEXT_SET_APPLY_MSG</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_APPLY_MSG(
        Message		message);</PRE>
<P>
This message sets a new apply message (GTXI_<CODE>
applyMsg</CODE>
) for the text object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
message</EM>
	The new apply message.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_GET_APPLY_MSG">
 </A>
MSG_GEN_TEXT_GET_APPLY_MSG</H6>
<PRE CLASS="syntax">Message	MSG_GEN_TEXT_GET_APPLY_MSG();</PRE>
<P>
This message retrieves the current apply message (GTXI_<CODE>
applyMsg</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The apply message of the GenText object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SET_DESTINATION">
 </A>
MSG_GEN_TEXT_SET_DESTINATION</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SET_DESTINATION(
        optr	dest);</PRE>
<P>
This message sets the destination object or process (GTXI_<CODE>
destination</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
dest</EM>
	The optr of the new destination object or process. </P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_GET_DESTINATION">
 </A>
MSG_GEN_TEXT_GET_DESTINATION</H6>
<PRE CLASS="syntax">optr	MSG_GEN_TEXT_GET_DESTINATION();</PRE>
<P>
This message returns the current destination object (GTXI_<CODE>
destination</CODE>
) of a GenText object.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The optr of the GenText's destination object (GTXI_<CODE>
destination</CODE>
).</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_GEN_TEXT_APPLY_MSG">
 </A>
GEN_TEXT_APPLY_MSG</H6>
<PRE CLASS="syntax">void	GEN_TEXT_APPLY_MSG(
        word	stateFlags);</PRE>
<P>
This prototype should be used to define your GenText's apply message (with GTXI_<CODE>
applyMsg</CODE>
).</P>
<P CLASS="refField">
Parameters:	<EM>
stateFlags</EM>
	The text object's GTXI_<CODE>
stateFlags</CODE>
 status.</P>



<H4 CLASS="HeadingC">
Status Messages</H4>
<PRE>ATTR_GEN_TEXT_STATUS_MSG, MSG_GEN_TEXT_SEND_STATUS_MSG</PRE>
<P>
If your GenText is operating in delayed mode, there usually occur times when its current state may not reflect the most recent changes. In most cases, this is fine, but in some cases you may wish to notify other UI objects of a change in your GenText's state without sending out an apply message. This can be done with a <EM>
status message</EM>
.</P>
<P>
A status message allows your GenText object to send out a message whenever the user interacts with the text object, regardless of whether that change will be immediately applied. This is most useful for cases in which two UI objects depend on each other. The status message allows one UI object to inform its counterpart that its state has changed, and that the counterpart should change its state to reflect the new information.</P>
<P>
To give a GenText object a status message, include ATTR_GEN_TEXT_STATUS_MSG in the object's declaration. Use the prototype GEN_TEXT_STATUS_MSG to define your status message. This prototype ensures that the status message passes the correct parameters (the current <CODE>
GenTextStateFlags</CODE>
).</P>
<P>
Any user changes that do not result in the sending of the object's apply message will result in the sending of the object's status message. For an object in immediate mode, this attribute will have no effect. You may also manually send an object's status message by sending the GenText object <CODE>
MSG_GEN_TEXT_SEND_STATUS_MSG</CODE>
.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_MSG_GEN_TEXT_SEND_STATUS_MSG">
 </A>
MSG_GEN_TEXT_SEND_STATUS_MSG</H6>
<PRE CLASS="syntax">void	MSG_GEN_TEXT_SEND_STATUS_MSG(
        Boolean		modifiedState);</PRE>
<P>
This message causes a GenText object to send out its status message, stored in the text object's ATTR_GEN_TEXT_STATUS_MSG vardata field. This message will still function even if the text object is not enabled (or usable).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenText object.</P>
<P CLASS="refField">
Parameters:	<EM>
modifiedState</EM>
	Non-zero if GVSF_MODIFIED bit should be passed with the status message.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.<A NAME="Text_24.htm_marker=38607">
 </A>
</P>


<H6 CLASS="RefETitle">
<A NAME="Text_24.htm_IX_GEN_TEXT_STATUS_MSG">
 </A>
GEN_TEXT_STATUS_MSG</H6>
<PRE CLASS="syntax">void	GEN_TEXT_STATUS_MSG(
        word	stateFlags);</PRE>
<P>
This prototype should be used to define your GenText's status message (with ATTR_GEN_TEXT_STATUS_MSG).</P>
<P CLASS="refField">
Parameters:	<EM>
stateFlags</EM>
	The text object's GTXI_<CODE>
stateFlags</CODE>
 status.</P>


<HR>
<A NAME="Text_25.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 7 
<A NAME="Text_25.htm_69047">
 </A>
The Controllers</H2>
<P>
This section describes the various text controller classes and how best to use them. Controllers create their UI gadgetry wherever in the generic tree they are placed; this section will give some pointers to designing the text controller UI. For full information on <CODE>
GenControlClass</CODE>
 and how controllers work, see <A HREF="../../SysObjects/Controllers/combo.htm">the Controllers chapter</A>.</P><P CLASS="subsectionLink">
<A HREF="#Text_26.htm">Character Attribute Controllers</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_27.htm">Paragraph Attribute Controllers</A></P>
<P CLASS="subsectionLink">
<A HREF="#Text_28.htm">Search and Replace and Spell-Checking</A></P>
<HR>
<A NAME="Text_26.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 7.1 <A HREF="#Text_25.htm">The Controllers</A>: 
Character Attribute Controllers</H3>
<P>
The following controllers affect character attributes within a text object. As such, they each affect the contents of a text object's character attributes instance field (usually the <CODE>
VisTextCharAttr</CODE>
 structure). </P>

<H5 CLASS="HeadingD">
TextStyleControlClass</H5>
<P>
<A NAME="Text_26.htm_IX_TextStyleControlClass">
 </A>
This controller works with the style character attributes of the current text selection. The features and tools of this controller are shown in <A HREF="#Text_26.htm_51458"> TextStyleControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-25 <A NAME="Text_26.htm_51458">
 </A>
TextStyleControlClass Features</P>
<PRE><A NAME="Text_26.htm_IX_TSCF_&ldots;"> </A><A NAME="IX_TSCFeatures"> </A>typedef WordFlags TSCFeatures;
#define TSCF_PLAIN					0x0800
#define TSCF_BOLD					0x0400
#define TSCF_ITALIC					0x0200
#define TSCF_UNDERLINE					0x0100
#define TSCF_STRIKE_THRU					0x0080
#define TSCF_SUBSCRIPT					0x0040
#define TSCF_SUPERSCRIPT					0x0020
#define TSCF_BOXED					0x0010
#define TSCF_BUTTON					0x0008
#define TSCF_INDEX					0x0004
#define TSCF_ALL_CAP					0x0002
#define TSCF_SMALL_CAP					0x0001</PRE>
<PRE><A NAME="Text_26.htm_IX_TSCTF_&ldots;"> </A><A NAME="IX_TSCToolboxFeatures"> </A>typedef WordFlags TSCToolboxFeatures;
#define TSCTF_PLAIN					0x0800
#define TSCTF_BOLD					0x0400
#define TSCTF_ITALIC					0x0200
#define TSCTF_UNDERLINE					0x0100
#define TSCTF_STRIKE_THRU					0x0080
#define TSCTF_SUBSCRIPT					0x0040
#define TSCTF_SUPERSCRIPT					0x0020
#define TSCTF_BOXED					0x0010
#define TSCTF_BUTTON					0x0008
#define TSCTF_INDEX					0x0004
#define TSCTF_ALL_CAP					0x0002
#define TSCTF_SMALL_CAP					0x0001</PRE>
<PRE>#define <A NAME="Text_26.htm_IX_TSC_DEFAULT_FEATURES"> </A>TSC_DEFAULT_FEATURES				(TSCF_PLAIN | TSCF_BOLD | TSCF_ITALIC |
				 TSCF_UNDERLINE | TSCF_SUBSCRIPT |
				 TSCF_SUPERSCRIPT | TSCF_STRIKE_THRU |
				 TSCF_BOXED | TSCF_BUTTON | TSCF_INDEX |
				 TSCF_ALL_CAP | TSCF_SMALL_CAP)
#define <A NAME="Text_26.htm_IX_TSC_DEFAULT_TOOLBOX_FEATURES"> </A>TSC_DEFAULT_TOOLBOX_FEATURES (TSCTF_PLAIN | TSCTF_BOLD | TSCTF_ITALIC |
				TSCTF_UNDERLINE)</PRE>


<H5 CLASS="HeadingD">
FontControlClass</H5>
<P>
<A NAME="Text_26.htm_IX_FontControlClass">
 </A>
This controller allows the user to change font types of the current text selection. Its features and tools are shown in <A HREF="#Text_26.htm_20980"> FontControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-26 <A NAME="Text_26.htm_20980">
 </A>
FontControlClass Features</P>
<PRE><A NAME="Text_26.htm_IX_FCF_&ldots;"> </A><A NAME="IX_FCFeatures"> </A>typedef WordFlags FCFeatures;
#define FCF_SHORT_LIST				0x0002
#define FCF_LONG_LIST				0x0001</PRE>
<PRE><A NAME="Text_26.htm_IX_FCTF_&ldots;"> </A><A NAME="IX_FCToolboxFeatures"> </A>typedef WordFlags FCToolboxFeatures;
#define FCTF_ROMAN				0x0004
#define FCTF_SANS				0x0002
#define FCTF_MONO				0x0001</PRE>
<PRE>#define <A NAME="Text_26.htm_IX_FC_DEFAULT_FEATURES"> </A>FC_DEFAULT_FEATURES				(FCF_SHORT_LIST | FCF_LONG_LIST)
#define <A NAME="Text_26.htm_IX_FC_DEFAULT_TOOLBOX_FEATURES"> </A>FC_DEFAULT_TOOLBOX_FEATURES (FCTF_ROMAN | FCTF_SANS | FCTF_MONO)</PRE>


<H5 CLASS="HeadingD">
PointSizeControlClass</H5>
<P>
<A NAME="Text_26.htm_IX_PointSizeControlClass">
 </A>
This controller controls the point size of the current text selection. Its features and tools are shown in <A HREF="#Text_26.htm_37249"> PointSizeControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-27 <A NAME="Text_26.htm_37249">
 </A>
PointSizeControlClass Features</P>
<PRE><A NAME="Text_26.htm_IX_PSCF_&ldots;"> </A><A NAME="IX_PSCFeatures"> </A>typedef WordFlags PSCFeatures;
#define PSCF_9					0x0800
#define PSCF_10					0x0400
#define PSCF_12					0x0200
#define PSCF_14					0x0100
#define PSCF_18					0x0080
#define PSCF_24					0x0040
#define PSCF_36					0x0020
#define PSCF_54					0x0010
#define PSCF_72					0x0008
#define PSCF_SMALLER					0x0004
#define PSCF_LARGER					0x0002
#define PSCF_CUSTOM_SIZE					0x0001</PRE>
<PRE><A NAME="Text_26.htm_IX_PSCTF_&ldots;"> </A><A NAME="IX_PSCToolboxFeatures"> </A>typedef WordFlags PSCToolboxFeatures;
#define PSCTF_9					0x0400
#define PSCTF_10					0x0200
#define PSCTF_12					0x0100
#define PSCTF_14					0x0080
#define PSCTF_18					0x0040
#define PSCTF_24					0x0020
#define PSCTF_36					0x0010
#define PSCTF_54					0x0008
#define PSCTF_72					0x0004
#define PSCTF_SMALLER					0x0002
#define PSCTF_LARGER					0x0001
#define <A NAME="Text_26.htm_IX_PSC_DEFAULT_FEATURES"> </A>PSC_DEFAULT_FEATURES 					(PSCF_9 | PSCF_10 | PSCF_12 | PSCF_14 |
					 PSCF_18 | PSCF_24 | PSCF_36 | PSCF_72 |
					 PSCF_CUSTOM_SIZE | PSCF_SMALLER |
					 PSCF_LARGER)
#define <A NAME="Text_26.htm_IX_PSC_DEFAULT_TOOLBOX_FEATURES"> </A>PSC_DEFAULT_TOOLBOX_FEATURES					(PSCTF_9 | PSCTF_10 | PSCTF_12 |
					 PSCTF_14 | PSCTF_18 | PSCTF_24 |
					 PSCTF_36 | PSCTF_72 | PSCTF_SMALLER |
					 PSCTF_LARGER)</PRE>


<H5 CLASS="HeadingD">
CharFGColorControlClass and CharBGColorControlClass</H5>
<P>
<A NAME="Text_26.htm_IX_CharBGColorControlClass">
 </A>
<A NAME="Text_26.htm_IX_CharFGColorControlClass">
 </A>
These controllers handle changes to the foreground (text) and background colors of the current text selection. They are both subclassed from <CODE>
ColorSelectorClass</CODE>
 and therefore inherit the feature set of that class. The additional definitions for these classes are given in <A HREF="#Text_26.htm_22810"> Character Color Controller Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-28 <A NAME="Text_26.htm_22810">
 </A>
Character Color Controller Features</P>
<PRE>/* Both CharFGColorControlClass and CharBGColorControlClass are subclasses of
 * ColorSelectorClass. For full details, see that class. */</PRE>
<PRE>@class CharFGColorControlClass, ColorSelectorClass;
#define <A NAME="Text_26.htm_IX_CFGCC_DEFAULT_FEATURES"> </A>CFGCC_DEFAULT_FEATURES				(CSF_INDEX | CSF_RGB | CSF_DRAW_MASK |
				 CSF_PATTERN)
    @default GI_states = @default &amp; ~GS_ENABLED;
    @default GCI_output = (TO_APP_TARGET);
@endc</PRE>
<PRE>@class CharBGColorControlClass, ColorSelectorClass;
#define <A NAME="Text_26.htm_IX_CBGCC_DEFAULT_FEATURES"> </A>CBGCC_DEFAULT_FEATURES				(CSF_INDEX | CSF_RGB | CSF_DRAW_MASK |
				 CSF_PATTERN)
    @default GI_states = @default &amp; ~GS_ENABLED;
    @default GCI_output = (TO_APP_TARGET);
@endc</PRE>


<H5 CLASS="HeadingD">
FontAttrControlClass</H5>
<P>
<A NAME="Text_26.htm_IX_FontAttrControlClass">
 </A>
This controller controls the font weight, font width, and track kerning of characters of the current text selection. Its features are shown in <A HREF="#Text_26.htm_29364"> FontAttrControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-29 <A NAME="Text_26.htm_29364">
 </A>
FontAttrControlClass Features</P>
<PRE><A NAME="Text_26.htm_IX_FACF_&ldots;"> </A><A NAME="IX_FACFeatures"> </A>typedef WordFlags FACFeatures;
#define FACF_FONT_WEIGHT				0x0004
#define FACF_FONT_WIDTH				0x0002
#define FACF_TRACK_KERNING				0x0001</PRE>
<PRE><A NAME="Text_26.htm_IX_FACTF_&ldots;"> </A><A NAME="IX_FACToolboxFeatures"> </A>typedef WordFlags FACToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_26.htm_IX_FAC_DEFAULT_FEATURES"> </A>FAC_DEFAULT_FEATURES				(FACF_FONT_WEIGHT | FACF_FONT_WIDTH |
				 FACF_TRACK_KERNING)
#define <A NAME="Text_26.htm_IX_FAC_DEFAULT_TOOLBOX_FEATURES"> </A>FAC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>

<HR>
<A NAME="Text_27.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 7.2 <A HREF="#Text_25.htm">The Controllers</A>: 
Paragraph Attribute Controllers</H3>
<P>
The following controllers affect paragraph attributes within a text object. As such, they each affect the contents of a text object's paragraph attributes instance field (usually the <CODE>
VisTextParaAttr</CODE>
 structure). </P>

<H5 CLASS="HeadingD">
JustificationControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_JustificationControlClass">
 </A>
This controller allows the user to specify paragraph justification of the current text selection (left, right, center, or full). Its features and tools are shown in <A HREF="#Text_27.htm_47255"> JustificationControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-30 <A NAME="Text_27.htm_47255">
 </A>
JustificationControlClass Features</P>
<PRE><A NAME="Text_27.htm_IX_JCF_&ldots;"> </A><A NAME="IX_JCFeatures"> </A>typedef WordFlags JCFeatures;
#define JCF_LEFT				0x0008
#define JCF_RIGHT				0x0004
#define JCF_CENTER				0x0002
#define JCF_FULL				0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_JCTF_&ldots;"> </A><A NAME="IX_JCToolboxFeatures"> </A>typedef WordFlags JCToolboxFeatures;
#define JCTF_LEFT				0x0008
#define JCTF_RIGHT				0x0004
#define JCTF_CENTER				0x0002
#define JCTF_FULL				0x0001
#define <A NAME="Text_27.htm_IX_JC_DEFAULT_FEATURES"> </A>JC_DEFAULT_FEATURES				(JCF_LEFT | JCF_RIGHT | JCF_CENTER | JCF_FULL)</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_JC_DEFAULT_TOOLBOX_FEATURES"> </A>JC_DEFAULT_TOOLBOX_FEATURES (JCTF_LEFT | JCTF_RIGHT | JCTF_CENTER |
				  JCTF_FULL)
    @default GCI_output = (TO_APP_TARGET);
    @default GI_attrs = (@default | GA_KBD_SEARCH_PATH);</PRE>


<H5 CLASS="HeadingD">
ParaSpacingControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_ParaSpacingControlClass">
 </A>
This controller controls several paragraph spacing characteristics of the current text selection (such as paragraph spacing on top, spacing on bottom, leading, and line spacing). Its features and tools are shown in <A HREF="#Text_27.htm_41513"> ParaSpacingControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-31 <A NAME="Text_27.htm_41513">
 </A>
ParaSpacingControlClass Features</P>
<PRE><A NAME="Text_27.htm_IX_PASCF_&ldots;"> </A><A NAME="IX_PASCFeatures"> </A>typedef WordFlags PASCFeatures;
#define PASCF_SPACE_ON_TOP_BOTTOM					0x0002
#define PASCF_LEADING					0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_PASCTF_&ldots;"> </A><A NAME="IX_PASCToolboxFeatures"> </A>typedef WordFlags PASCToolboxFeatures;
#define PASCTF_SINGLE					0x8000
#define PASCTF_ONE_AND_A_HALF					0x4000
#define PASCTF_DOUBLE					0x2000
#define PASCTF_TRIPLE					0x1000</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_PASC_DEFAULT_FEATURES"> </A>PASC_DEFAULT_FEATURES				(PASCF_SPACE_ON_TOP_BOTTOM | PASCF_LEADING)
#define <A NAME="Text_27.htm_IX_PASC_DEFAULT_TOOLBOX_FEATURES"> </A>PASC_DEFAULT_TOOLBOX_FEATURES (PASCTF_SINGLE | PASCTF_ONE_AND_A_HALF |
				PASCTF_DOUBLE | PASCTF_TRIPLE)
@default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
DefaultTabsControlClass and TabControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_DefaultTabControlClass">
 </A>
These controllers set the placement and features of both default and user-defined tabs in the current text selection. The features and tools of both controllers are shown in <A HREF="#Text_27.htm_88709"> Tab Controllers</A>
.</P>
<P CLASS="figTitle">
Code Display 10-32 <A NAME="Text_27.htm_88709">
 </A>
Tab Controllers</P>
<PRE>	/* DefaultTabsControlClass */</PRE>
<PRE><A NAME="Text_27.htm_IX_DTC_&ldots;"> </A><A NAME="IX_DTCFeatures"> </A>typedef WordFlags DTCFeatures;
#define DTCF_LIST				0x0002
#define DTCF_CUSTOM				0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_DTCTF_&ldots;"> </A><A NAME="IX_DTCToolboxFeatures"> </A>typedef WordFlags DTCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_DTC_DEFAULT_FEATURES"> </A>DTC_DEFAULT_FEATURES				(DTCF_LIST | DTCF_CUSTOM)
#define <A NAME="Text_27.htm_IX_DTC_DEFAULT_TOOLBOX_FEATURES"> </A>DTC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>
<PRE><A NAME="Text_27.htm_IX_TabControlClass"> </A>	/* TabControlClass */</PRE>
<PRE><A NAME="Text_27.htm_IX_TCF_&ldots;"> </A><A NAME="IX_TCFeatures"> </A>typedef WordFlags TCFeatures;
#define TCF_LIST					0x0080
#define TCF_POSITION					0x0040
#define TCF_GRAY_SCREEN					0x0020
#define TCF_TYPE					0x0010
#define TCF_LEADER					0x0008
#define TCF_LINE					0x0004
#define TCF_CLEAR					0x0002
#define TCF_CLEAR_ALL					0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_TCToolboxFeatures"> </A>typedef WordFlags TCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_TC_DEFAULT_FEATURES"> </A>TC_DEFAULT_FEATURES				(TCF_LIST | TCF_POSITION | TCF_GRAY_SCREEN |
				 TCF_TYPE | TCF_LEADER | TCF_LINE | TCF_CLEAR |
				 TCF_CLEAR_ALL)
#define <A NAME="Text_27.htm_IX_TC_DEFAULT_TOOLBOX_FEATURES"> </A>TC_DEFAULT_TOOLBOX_FEATURES 0
<A NAME="Text_27.htm_IX_TCI_&ldots;"> </A>    @instance word TCI_numberOfTabs;
    @instance Tab TCI_tabList[VIS_TEXT_MAX_TABS];
    @instance word TCI_selectedTab;
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
ParaBGColorControlClass</H5>
<P>
This controller controls the background color, draw mask, and pattern of the background color of the current paragraph selections. Since <CODE>
ParaBGColorControlClass</CODE>
<A NAME="Text_27.htm_IX_ParaBGColorControlClass">
 </A>
 is a subclass of <CODE>
ColorSelectorClass</CODE>
, it inherits the functions of that class. Its features and tools are shown in <A HREF="#Text_27.htm_26847"> ParaBGColorControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-33 <A NAME="Text_27.htm_26847">
 </A>
ParaBGColorControlClass Features</P>
<PRE>#define <A NAME="Text_27.htm_IX_PBGCC_DEFAULT_FEATURES"> </A>PBGCC_DEFAULT_FEATURES				(CSF_INDEX | CSF_RGB | CSF_DRAW_MASK |
				 CSF_PATTERN)
    @default GI_states = @default &amp; ~GS_ENABLED;
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
ParaAttrControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_ParaAttrControlClass">
 </A>
This controller the user to set the &quot;keep with,&quot; hidden, word wrapping, an widow and orphan attributes of the current paragraph selection. Its features and tools are shown in <A HREF="#Text_27.htm_74110"> ParaAttrControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-34 <A NAME="Text_27.htm_74110">
 </A>
ParaAttrControlClass Features</P>
<PRE><A NAME="Text_27.htm_IX_PACF_&ldots;"> </A><A NAME="IX_PACFeatures"> </A>typedef WordFlags PACFeatures;
#define PACF_WORD_WRAP					0x0010
#define PACF_HIDDEN_TEXT					0x0008
#define PACF_KEEP_PARA_WITH_NEXT					0x0004
#define PACF_KEEP_PARA_TOGETHER					0x0002
#define PACF_KEEP_LINES					0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_PACToolboxFeatures"> </A>typedef WordFlags PACToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_PAC_DEFAULT_FEATURES"> </A>PAC_DEFAULT_FEATURES				(PACF_WORD_WRAP | PACF_HIDDEN_TEXT |
				 PACF_KEEP_PARA_WITH_NEXT |
				 PACF_KEEP_PARA_TOGETHER | PACF_KEEP_LINES
#define <A NAME="Text_27.htm_IX_PAC_DEFAULT_TOOLBOX_FEATURES"> </A>PAC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
BorderControlClass and BorderColorControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_BorderColorControlClass">
 </A>
<A NAME="Text_27.htm_IX_BorderControlClass">
 </A>
This controllers set border color and placement. <CODE>
BorderColorControlClass</CODE>
 is a subclass of <CODE>
ColorSelectorClass</CODE>
 and therefore inherits the features and tools of that class. The tools and features of both controllers are shown in <A HREF="#Text_27.htm_80819"> Border Controller Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-35 <A NAME="Text_27.htm_80819">
 </A>
Border Controller Features</P>
<PRE>	/* BorderControlClass */</PRE>
<PRE><A NAME="Text_27.htm_IX_BCF_&ldots;"> </A><A NAME="IX_BCFeatures"> </A>typedef WordFlags BCFeatures;
#define BCF_LIST				0x0002
#define BCF_CUSTOM				0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_BCToolboxFeatures"> </A>typedef WordFlags BCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_BC_DEFAULT_FEATURES"> </A>BC_DEFAULT_FEATURES				(BCF_LIST | BCF_CUSTOM)
#define <A NAME="Text_27.htm_IX_BC_DEFAULT_TOOLBOX_FEATURES"> </A>BC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>
<PRE>	/* BorderColorControlClass */</PRE>
<PRE><A NAME="Text_27.htm_IX_BCCToolboxFeatures"> </A>typedef WordFlags BCCToolboxFeatures;
#define <A NAME="Text_27.htm_IX_BCC_DEFAULT_FEATURES"> </A>BCC_DEFAULT_FEATURES				(CSF_INDEX | CSF_RGB | CSF_DRAW_MASK |
				 CSF_PATTERN)
#define <A NAME="Text_27.htm_IX_BCC_DEFAULT_TOOLBOX_FEATURES"> </A>BCC_DEFAULT_TOOLBOX_FEATURES 0
    @default GI_states = @default &amp; ~GS_ENABLED;
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
DropCapControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_DropCapControlClass">
 </A>
This controller allows the user to set &quot;drop cap&quot; features of the current paragraph selection. Its features and tools are shown in <A HREF="#Text_27.htm_24776"> DropCapControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-36 <A NAME="Text_27.htm_24776">
 </A>
DropCapControlClass Features</P>
<PRE><A NAME="Text_27.htm_IX_DCCFeatures"> </A>typedef WordFlags DCCFeatures;
#define <A NAME="Text_27.htm_IX_DCCF_DROP_CAP"> </A>DCCF_DROP_CAP				0x0001</PRE>
<PRE><A NAME="Text_27.htm_IX_DCCToolboxFeatures"> </A>typedef WordFlags DCCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_DCC_DEFAULT_FEATURES"> </A>DCC_DEFAULT_FEATURES				(DCCF_DROP_CAP)
#define <A NAME="Text_27.htm_IX_DCC_DEFAULT_TOOLBOX_FEATURES"> </A>DCC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
HyphenationControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_HyphenationControlClass">
 </A>
This controller sets the implementation of automatic word hyphenation of the current paragraph selection. Its features and tools are shown in <A HREF="#Text_27.htm_54151"> HyphenationControlClass</A>
.</P>
<P CLASS="figTitle">
Code Display 10-37 <A NAME="Text_27.htm_54151">
 </A>
HyphenationControlClass</P>
<PRE><A NAME="Text_27.htm_IX_HCFeatures"> </A>typedef WordFlags HCFeatures;
#define <A NAME="Text_27.htm_IX_HCF_LIST"> </A>HCF_LIST				0x0001</PRE>
<PRE>typedef WordFlags <A NAME="Text_27.htm_IX_HCToolboxFeatures"> </A>HCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_HC_DEFAULT_FEATURES"> </A>HC_DEFAULT_FEATURES				(HCF_LIST)
#define <A NAME="Text_27.htm_IX_HC_DEFAULT_TOOLBOX_FEATURES"> </A>HC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
MarginControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_MarginControlClass">
 </A>
This controller sets the left, paragraph, and right margins of the current paragraph selection. Its tools and features are shown in <A HREF="#Text_27.htm_75005"> MarginControlClass</A>
.</P>
<P CLASS="figTitle">
Code Display 10-38 <A NAME="Text_27.htm_75005">
 </A>
MarginControlClass</P>
<PRE><A NAME="Text_27.htm_IX_MCF_&ldots;"> </A><A NAME="IX_MCFeatures"> </A>typedef WordFlags MCFeatures;
#define MCF_LEFT_MARGIN				0x0004
#define MCF_PARA_MARGIN				0x0002
#define MCF_RIGHT_MARGIN				0x0001</PRE>
<PRE>typedef WordFlags <A NAME="Text_27.htm_IX_MCToolboxFeatures"> </A>MCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_MC_DEFAULT_FEATURES"> </A>MC_DEFAULT_FEATURES				(MCF_LEFT_MARGIN | MCF_PARA_MARGIN |
				 MCF_RIGHT_MARGIN)
#define <A NAME="Text_27.htm_IX_MC_DEFAULT_TOOLBOX_FEATURES"> </A>MC_DEFAULT_TOOLBOX_FEATURES 0
    @default GCI_output = (TO_APP_TARGET);</PRE>


<H5 CLASS="HeadingD">
TextRulerControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_TextRulerControlClass">
 </A>
This controller manages how the <CODE>
TextRulerClass</CODE>
 ruler operates, if any text ruler is used. The TextRuler provides a complete ruler for the text object. The features and tools of the TextRulerControl are shown in <A HREF="#Text_27.htm_71381"> TextRulerControlClass</A>
.</P>
<P CLASS="figTitle">
Code Display 10-39 <A NAME="Text_27.htm_71381">
 </A>
TextRulerControlClass</P>
<PRE><A NAME="Text_27.htm_IX_TRCCF_&ldots;"> </A><A NAME="IX_TRCCFeatures"> </A>typedef WordFlags TRCCFeatures;
#define TRCCF_ROUND					0x0002
#define TRCCF_IGNORE_ORIGIN					0x0001</PRE>
<PRE>typedef WordFlags <A NAME="Text_27.htm_IX_TRCCToolboxFeatures"> </A>TRCCToolboxFeatures;</PRE>
<PRE>#define <A NAME="Text_27.htm_IX_TRCC_DEFAULT_FEATURES"> </A>TRCC_DEFAULT_FEATURES				(TRCCF_ROUND | TRCCF_IGNORE_ORIGIN)
#define <A NAME="Text_27.htm_IX_TRCC_DEFAULT_TOOLBOX_FEATURES"> </A>TRCC_DEFAULT_TOOLBOX_FEATURES 0</PRE>
<PRE><A NAME="Text_27.htm_IX_TRCI_attrs"> </A><A NAME="IX_TRCA_&ldots;"> </A><A NAME="IX_TextRulerControlAttributes"> </A>typedef WordFlags TextRulerControlAttributes;
#define TRCA_ROUND					0x8000
#define TRCA_IGNORE_ORIGIN					0x4000
    @instance TextRulerControlAttributes TRCI_attrs = TRCA_ROUND;</PRE>


<H5 CLASS="HeadingD">
TextStyleSheetControlClass</H5>
<P>
<A NAME="Text_27.htm_IX_TextStyleSheetControlClass">
 </A>
This controller allows the user to set up and use style sheets with the target text object. It is subclassed off <CODE>
StyleSheetControlClass</CODE>
 and inherits all the features and tools of that class. It has no additional tools or features of its own.</P>

<HR>
<A NAME="Text_28.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Text Objects</A>: 7.3 <A HREF="#Text_25.htm">The Controllers</A>: 
<A NAME="Text_28.htm_85133">
 </A>
Search and Replace and Spell-Checking</H3>
<PRE>TextSearchInString(), TextSearchInHugeArray(), SearchOptions, WildCard</PRE>
<P>
Text searches are not specifically part of <CODE>
VisTextClass</CODE>
, but are commonly used on text objects, and they are discussed here for that reason.</P>
<P>
<CODE>
TextSearchInString()</CODE>
<A NAME="Text_28.htm_IX_TextSearchInString()">
 </A>
 searches in a single text chunk for a passed text string. If a match is found, a pointer to that match (and the length of the match) are returned in buffers. <A NAME="Text_28.htm_IX_TextSearchInHugeArray()">
 </A>
<CODE>
TextSearchInHugeArray()</CODE>
 performs the same searching operations, but can return the segment and offset of a found match within a huge array.</P>
<P>
<A NAME="Text_28.htm_IX_SearchOptions">
 </A>
The following <CODE>
SearchOptions</CODE>
 may affect the search procedure:</P>
<DL>
<DT>
SO_NO_WILDCARDS</DT><DD>
If set, the search mechanism ignores any passed <CODE>
WildCard</CODE>
 values and treats them as the control character values (CTRL_P, CTRL_Q and CTRL_R) which they overlap.</DD>
<DT>
SO_IGNORE_SOFT_HYPHENS</DT><DD>
If set, soft hyphens in the &quot;searched-in&quot; text are treated as if they do not exist, therefore allowing the text &quot;hyphenation&quot; to match &quot;hyphen-ation&quot; in the destination text. If the match string contains soft hyphens, do not set this flag as strings will never match.</DD>
<DT>
SO_BACKWARD_SEARCH</DT><DD>
If set, the search will propagate backwards.</DD>
<DT>
SO_IGNORE_CASE</DT><DD>
If set, case will be ignored in the search criteria.</DD>
<DT>
SO_PARTIAL_WORD</DT><DD>
If set, partial words will be matched.</DD>
<DT>
SO_PRESERVE_CASE_OF_DOCUMENT_STRING</DT><DD>
If set, the case of the match string will be altered to preserve the case of the before </DD>
</DL>
<P>
<A NAME="Text_28.htm_IX_WildCard">
 </A>
<A NAME="Text_28.htm_IX_WC_&ldots;">
 </A>
Both routines may take wild cards (type <CODE>
WildCard</CODE>
) in the place of any character. These wildcards tell the search mechanism to accept any character in the allotted space. Passing WC_MATCH_MULTIPLE_CHAR instructs the search mechanism to accept any number of random characters in that place in the search string. The values of <CODE>
WildCard</CODE>
 are:</P>
<DL>
<DT>
	WC_MATCH_SINGLE_CHAR</DT><DD>
WC_MATCH_MULTIPLE_CHAR<BR>
WC_MATCH_WHITESPACE_CHAR</DD>
</DL>
<P>
You can set higher-level features of your text objects with the <CODE>
SearchReplaceControlClass</CODE>
 and <CODE>
SpellControlClass</CODE>
 controllers. These controllers allow spell-checking and search and replace. These two controllers are designed to interact with each other and use common messages.</P>

<H5 CLASS="HeadingD">
SearchReplaceControlClass</H5>
<P>
<A NAME="Text_28.htm_IX_SearchReplaceControlClass">
 </A>
This controller allows the use of the text object's built-in search and replace features. The controller must be placed on the GAGCNLT_SELF_LOAD_OPTIONS Application GCN list. This controller sends out the following messages to its GCI_<CODE>
output</CODE>
, which may be intercepted to provide custom behavior:</P>
<DL>
<DT>
	MSG_SEARCH</DT><DD>
MSG_REPLACE_CURRENT<BR>
MSG_REPLACE_ALL_OCCURENCES<BR>
MSG_REPLACE_ALL_OCCURENCES_IN_SELECTION<BR>
MSG_META_GET_OBJECT_FOR_SEARCH_SPELL<BR>
MSG_META_DISPLAY_OBJECT_FOR_SEARCH_SPELL</DD>
</DL>
<P>
Because many of these messages are shared by the SpellControlClass, they are described in <A HREF="#Text_28.htm_91425"> Shared Functionality</A>
.</P>
<P>
The Search &amp; Replace messages make use of a <CODE>
SearchReplaceStruct</CODE>
. This structure is followed by text string(s) that represent the strings to search (and replace if that is the case). These strings may contain <CODE>
WildCard</CODE>
 values (unless SO_NO_WILDCARDS is set in <EM>
params</EM>
).The <CODE>
SearchReplaceStruct</CODE>
 is shown below:</P>
<PRE>typedef struct {
	word		searchSize;
	word		replaceSize;
	byte		params;
	optr		replyObject;
	Message		replyMsg;
} SearchReplaceStruct;</PRE>
<P>
<EM>
searchSize</EM>
 stores the number of characters in the search string, including the null terminator.</P>
<P>
<EM>
replaceSize</EM>
 stores the number of characters in the replace string (if present), including the null terminator.</P>
<P>
<EM>
params</EM>
 stores the <CODE>
SearchOptions</CODE>
 in use for this operation.</P>
<P>
<EM>
replyObject</EM>
 stores the optr of the object to send the <EM>
replyMsg</EM>
 to if the string is not found.</P>
<P>
<EM>
replyMsg</EM>
 stores the message sent to the <EM>
replyObject</EM>
 above.</P>
<P>
The block containing this <CODE>
SearchReplaceStruct</CODE>
 will contain either one null-terminated string (if the operation is just a simple search operation) or a null-terminated search string followed by a null-terminated replace string (if the operation is a search &amp; replace).</P>

<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_SEARCH">
 </A>
MSG_SEARCH</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_SEARCH(
        MemHandle		searchInfo);</PRE>
<P>
This message is sent by the SearchReplace controller when an object is starting a search operation. You may intercept this message to find out the nature and specifics of the search.</P>
<P CLASS="refField">
Source:	Search controller.</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the search controller (usually a text object).</P>
<P CLASS="refField">
Parameters:	<EM>
searchInfo</EM>
	Handle of block containing the <CODE>
SearchReplaceStruct</CODE>
. The search string immediately follows this structure in the passed block. This block should be freed by the message handler.</P>
<P CLASS="refField">
Interception:	Intercept to find out the nature of the search and replace operation.</P>
<P>
The features and tools of this controller are shown in <A HREF="#Text_28.htm_81800"> SearchReplaceControlClass Features</A>
.</P>
<P CLASS="figTitle">
Code Display 10-40 <A NAME="Text_28.htm_81800">
 </A>
SearchReplaceControlClass Features</P>
<PRE><A NAME="Text_28.htm_IX_SRCF_&ldots;"> </A><A NAME="IX_SRCFeatures"> </A>typedef WordFlags SRCFeatures;
#define SRCF_CLOSE					0x200
#define SRCF_FIND_NEXT					0x100
#define SRCF_FIND_PREV					0x80
#define SRCF_REPLACE_CURRENT					0x40
#define SRCF_REPLACE_ALL_IN_SELECTION					0x20
#define SRCF_REPLACE_ALL					0x10
#define SRCF_PARTIAL_WORDS					0x08
#define SRCF_IGNORE_CASE					0x04
#define SRCF_WILDCARDS					0x02
#define SRCF_SPECIAL_CHARS					0x01</PRE>
<PRE><A NAME="Text_28.htm_IX_SRCTF_SEARCH_REPLACE"> </A><A NAME="IX_SRCToolboxFeatures"> </A>typedef WordFlags SRCToolboxFeatures;
#define SRCTF_SEARCH_REPLACE					0x01</PRE>
<PRE>#define <A NAME="Text_28.htm_IX_SRC_DEFAULT_FEATURES"> </A>SRC_DEFAULT_FEATURES				(SRCF_FIND_NEXT | SRCF_FIND_PREV |
				 SRCF_REPLACE_CURRENT | SRCF_REPLACE_ALL |
				 SRCF_PARTIAL_WORDS | SRCF_IGNORE_CASE |
				 SRCF_WILDCARDS | SRCF_SPECIAL_CHARS | 
				 SRCF_REPLACE_ALL_IN_SELECTION | SRCF_CLOSE)
#define <A NAME="Text_28.htm_IX_SRC_DEFAULT_TOOLBOX_FEATURES"> </A>SRC_DEFAULT_TOOLBOX_FEATURES (SRCTF_SEARCH_REPLACE)</PRE>



<H5 CLASS="HeadingD">
SpellControlClass</H5>
<P>
<A NAME="Text_28.htm_IX_SpellControlClass">
 </A>
This controller allows you to include the advanced spelling-checker features of the text object. The controller must be placed on the GAGCNLT_SELF_LOAD_OPTIONS Application GCN list. The <CODE>
SpellControlClass</CODE>
 controller defaults to a state of not enabled; it should be set GS_ENABLED before use. </P>
<P>
If the controller will affect a text object within a document object, the SpellControl should be added to the GenDocumentControlClass object's GDCI_<CODE>
enableDisableList</CODE>
. This will ensure that the spell controller is automatically enabled when text appears within the document.</P>
<P>
This controller sends out the following messages, which may be intercepted to provide custom behavior:</P>
<DL>
<DT>
	MSG_SPELL_CHECK</DT><DD>
MSG_REPLACE_CURRENT<BR>
MSG_REPLACE_ALL_OCCURENCES<BR>
MSG_META_GET_CONTEXT<BR>
MSG_META_CONTEXT<BR>
MSG_META_GET_OBJECT_FOR_SEARCH_SPELL<BR>
MSG_META_DISPLAY_OBJECT_FOR_SEARCH_SPELL</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_SPELL_CHECK">
 </A>
MSG_SPELL_CHECK</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_SPELL_CHECK(@stack
        optr		replyObj,
        dword		numCharsToCheck,
        SpellCheckOptions		options,
        MemHandle		ICbuff);</PRE>
<P>
This message is sent by the Spell controller to continue spell checking from the current position in the document.</P>
<P CLASS="refField">
Source:	Spell controller.</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the spell controller.</P>
<P CLASS="refField">
Parameters:	<EM>
replyObj</EM>
	Object to send MSG_SPELL_CHECK_COMPLETED.</P>
<DL>
<DT>
<EM>
numCharsToCheck</DT><DD>
</EM>
Number of characters to check (if <EM>
options</EM>
 has SCO_CHECK_NUM_CHARS set).</DD>
<DT>
<EM>
options</EM>
</DT><DD><CODE>
SpellCheckOptions</CODE>
 in use for this operation.</DD>
<DT>
<CODE>
IC</CODE>
<EM>
buff</EM>
</DT><DD>Handle of buffer to pass spell check library.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to find out the nature of the spell checking operation.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_META_GET_CONTEXT">
 </A>
MSG_META_GET_CONTEXT</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_META_GET_CONTEXT(@stack
        dword		position,
        ContextLocation		location,
        word		numCharsToGet,
        optr		replyObj);</PRE>
<P>
This message is sent by the Spell controller to find out the current context of the text object. Other objects may also send this message to the text object. The text object will return MSG_META_CONTEXT to the requestor.</P>
<P CLASS="refField">
Source:	The Spell controller. (Other objects may want to send this to retrieve the text context displayed in the spell box.)</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the Spell controller (usually a text object).</P>
<P CLASS="refField">
Parameters:	<EM>
position</EM>
	Position of the context. The context returned depends on this value and the <CODE>
ContextLocation</CODE>
 passed in <EM>
location</EM>
.</P>
<DL>
<DT>
<EM>
location</EM>
</DT><DD><CODE>
ContextLocation</CODE>
. This may be one of the following values:</DD>
<DT>
	CL_STARTING_AT_POSITION</DT><DD>
CL_ENDING_AT_POSITION<BR>
CL_CENTERED_AROUND_POSITION<BR>
CL_CENTERED_AROUND_SELECTION<BR>
CL_CENTERED_AROUND_SELECTION_START<BR>
CL_SELECTED_WORD</DD>
<DT>
<EM>
numCharsToGet</EM>
</DT><DD>Maximum number of characters to return.</DD>
<DT>
<EM>
replyObj</EM>
</DT><DD>Optr of the object to reply to via MSG_META_CONTEXT.</DD>
</DL>
<P CLASS="refField">
Interception:	You may intercept to alter the nature of the context request.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_META_CONTEXT">
 </A>
MSG_META_CONTEXT</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_META_CONTEXT(
        MemHandle		data);</PRE>
<P>
This message returns the current context to the SpellControl object.</P>
<P CLASS="refField">
Source:	A text object receiving MSG_META_GET_CONTEXT.</P>
<P CLASS="refField">
Destination:	The object that sent the request.</P>
<P CLASS="refField">
Parameters:	<EM>
data</EM>
	<CODE>
ContextData</CODE>
 structure storing information on the context, and the null-terminated context string.</P>
<P CLASS="refField">
Structures:	</P>
<PRE>typedef struct {
	optr			CD_object;
	dword			CD_numChars;
	dword			CD_startPos;
	VisTextRange			CD_selection;
} ContextData;</PRE>
<P>
CD_<CODE>
object</CODE>
 stores the optr of the object that the context is coming from.</P>
<P>
CD_<CODE>
numChars</CODE>
 stores the number of characters in the text object.</P>
<P>
CD_<CODE>
range</CODE>
 stores the range of characters that this context represents within the text object.</P>
<P>
CD_<CODE>
selection</CODE>
 stores the range of characters that represent the current text selection.</P>
<P>
The null-terminated context data follows this structure.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>
<P>
Its feature and tool definitions are shown in <A HREF="#Text_28.htm_32174"> SpellControlClass</A>
. </P>
<P CLASS="figTitle">
Code Display 10-41 <A NAME="Text_28.htm_32174">
 </A>
SpellControlClass</P>
<PRE><A NAME="Text_28.htm_IX_SF_SPELL (SpellFeatures)"> </A><A NAME="IX_SpellFeatures"> </A>typedef WordFlags SpellFeatures;
#define SF_CLOSE				0x2000
#define SF_CONTEXT				0x1000
#define SF_SIMPLE_MODAL_BOX				0x0800
#define SF_SUGGESTIONS				0x0400
#define SF_CHECK_ALL				0x0200
#define SF_CHECK_TO_END				0x0100
#define SF_CHECK_SELECTION				0x0080
#define SF_SKIP				0x0040
#define SF_SKIP_ALL				0x0020
#define SF_REPLACE_CURRENT				0x0010
#define SF_REPLACE_ALL				0x0008
#define SF_ADD_TO_USER_DICTIONARY				0x0004
#define SF_EDIT_USER_DICTIONARY				0x0002
#define SF_STATUS				0x0001</PRE>
<PRE><A NAME="Text_28.htm_IX_STF_SPELL"> </A><A NAME="IX_SpellToolboxFeatures"> </A>typedef WordFlags SpellToolboxFeatures;
#define STF_SPELL				0x01</PRE>
<PRE>#define <A NAME="Text_28.htm_IX_SC_DEFAULT_FEATURES"> </A>SC_DEFAULT_FEATURES					(SF_STATUS | SF_EDIT_USER_DICTIONARY | 
		SF_ADD_TO_USER_DICTIONARY | SF_REPLACE_ALL | SF_REPLACE_CURRENT |
		SF_SKIP_ALL | SF_SKIP | SF_CHECK_SELECTION | SF_CHECK_TO_END |
		SF_SUGGESTIONS | SF_CLOSE | SF_CONTEXT)
#define <A NAME="Text_28.htm_IX_SC_DEFAULT_TOOLBOX_FEATURES"> </A>SC_DEFAULT_TOOLBOX_FEATURES					STF_SPELL</PRE>



<H5 CLASS="HeadingD">
<A NAME="Text_28.htm_91425">
 </A>
Shared Functionality</H5>
<P>
The SearchReplace and Spell controllers share a common range of messages (<CODE>
MetaSearchSpellMessages</CODE>
) imported from <CODE>
MetaClass</CODE>
. (The messages MSG_SEARCH and MSG_SPELL_CHECK are specific to their respective controllers and were described earlier.) These messages common to both controllers are listed and described here.</P>

<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_REPLACE_CURRENT">
 </A>
MSG_REPLACE_CURRENT</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_REPLACE_CURRENT(
        MemHandle		replaceInfo);</PRE>
<P>
This message is sent by the SearchReplace controller when an object is starting a search operation that should replace the found match with the passed replacement string. This message involves a single replacement operation. To perform a replace-all operation, use MSG_REPLACE_ALL_OCCURENCES.</P>
<P CLASS="refField">
Source:	Search controller.</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the search controller (usually a text object).</P>
<P CLASS="refField">
Parameters:	<EM>
replaceInfo</EM>
	Handle of block containing the <CODE>
SearchReplaceStruct</CODE>
. The null-terminated search string immediately follows this structure. The null-terminated replace string follows that string. This block should be freed by the message handler.</P>
<P CLASS="refField">
Interception:	Intercept to find out the nature of the replacement operation.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_REPLACE_ALL_OCCURRENCES">
 </A>
MSG_REPLACE_ALL_OCCURRENCES</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_REPLACE_ALL_OCCURRENCES(
        MemHandle		replaceInfo,
        Boolean		replaceFromBeginning);</PRE>
<P>
This message is sent by the SearchReplace controller when an object is starting a search operation that should replace all found matches (in the search string) with the passed replacement string. </P>
<P CLASS="refField">
Source:	Search controller.</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the search controller (usually a text object).</P>
<P CLASS="refField">
Parameters:	<EM>
replaceInfo</EM>
	Handle of block containing the <CODE>
SearchReplaceStruct</CODE>
. The null-terminated search string immediately follows this structure. The null-terminated replace string follows that string. This block should be freed by the message handler.</P>
<DL>
<DT>
<EM>
replaceFromBeginning</DT><DD>
</EM>
Non-zero if the replace-all operation should proceed from the beginning of the document; normally, the replace-all operation begins after the current position.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to find out the nature of the replacement operation.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_REPLACE_ALL_OCCURRENCES_IN_SELECTION">
 </A>
MSG_REPLACE_ALL_OCCURRENCES_IN_SELECTION</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_REPLACE_ALL_OCCURRENCES_IN_SELECTION(
        MemHandle		replaceInfo,
        Boolean		replaceFromBeginning);</PRE>
<P>
This message is sent by the SearchReplace controller when an object is starting a search operation that should replace all found matches within a selection (in the search string) with the passed replacement string. </P>
<P CLASS="refField">
Source:	Search controller.</P>
<P CLASS="refField">
Destination:	GCI_<CODE>
output</CODE>
 of the search controller (usually a text object).</P>
<P CLASS="refField">
Parameters:	<EM>
replaceInfo</EM>
	Handle of block containing the <CODE>
SearchReplaceStruct</CODE>
. The null-terminated search string immediately follows this structure. The null-terminated replace string follows that string. This block should be freed by the message handler.</P>
<DL>
<DT>
<EM>
replaceFromBeginning</DT><DD>
</EM>
Non-zero if the replace-all operation should proceed from the beginning of the selection; normally, the replace-all operation begins after the current position.</DD>
</DL>
<P CLASS="refField">
Interception:	Intercept to find out the nature of the replacement operation.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_META_GET_OBJECT_FOR_SEARCH_SPELL">
 </A>
MSG_META_GET_OBJECT_FOR_SEARCH_SPELL</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_META_GET_OBJECT_FOR_SEARCH_SPELL(
        GetSearchSpellObjectOption					option,
        optr					curObject);</PRE>
<P>
This message is sent by a text object to itself when a search reaches the end of the current object and needs to determine where to continue the search. </P>
<P CLASS="refField">
Source:	Any text object.</P>
<P CLASS="refField">
Destination:	The text object sends this to itself.</P>
<P CLASS="refField">
Parameters:	<EM>
option</EM>
	<CODE>
GetSearchSpellObjectOption</CODE>
 specifying the next object to continue the search at. This value may be GSSOT_FIRST_OBJECT, GSSOT_LAST_OBJECT, GSSOT_NEXT_OBJECT, or GSSOT_PREV_OBJECT.</P>
<DL>
<DT>
<EM>
curObject</EM>
</DT><DD>Optr of the object that is currently being searched through. If you intercept this message, you can use this information to set the <EM>
option</EM>
 above.</DD>
</DL>
<P CLASS="refField">
Interception:	May intercept if you want to direct where a search or spell check operation should continue to.</P>


<H6 CLASS="RefETitle">
<A NAME="Text_28.htm_IX_MSG_META_DISPLAY_OBJECT_FOR_SEARCH_SPELL">
 </A>
MSG_META_DISPLAY_OBJECT_FOR_SEARCH_SPELL</H6>
<PRE CLASS="syntax">@importMessage MetaSearchSpellMessages, void MSG_META_DISPLAY_OBJECT_FOR_SEARCH_SPELL();</PRE>
<P>
This message is sent by the text object to itself when a matching word (or misspelled word if the controller is a Spell controller) has been found and should be displayed.</P>
<P CLASS="refField">
Source:	The text object.</P>
<P CLASS="refField">
Destination:	The text object sends this to itself.</P>
<P CLASS="refField">
Interception:	You may intercept this message at the text object to receive notification of a match.</P>


<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
