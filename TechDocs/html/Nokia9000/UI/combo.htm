<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Communicator UI</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_71646">
 </A>
	Communicator UI

</H1>
<P>
The Nokia 9000i contains has a very specific look and feel which is created through the use of a specific user interface developed for the device. The specific UI contains not only visual representations for GEOS objects, but also additional objects that are particularly tailored for the Nokia 9000i device.</P>
<P>
Most of these objects have been grouped into the &quot;Foam&quot; library. This library is a special collection of classes, objects and routines specifically applicable to the Nokia 9000i device. Because of its multi-faceted nature, the Foam library is not a coherent library so much as a &quot;toolbox&quot; of useful widgets.</P>
<P>
We will not attempt to cover every piece of the Foam library within this chapter. Instead, we provide a brief overview of the foam UI classes, then delve into the objects which are particularly useful for creating your application.</P>
<P>
These objects are:</P>
<UL>
<LI>
FoamSubApplicationClass</LI>
<LI>
ComplexMonikerClass</LI>
<LI>
FlashingNoteClass</LI>
<LI>
RepeatingGenGlyphClass</LI>
<LI>
Special Foam dialog box routines</LI>
<LI>
Special routines for presenting lists</LI>
</UL>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#foam_ui_classes.htm">0 Foam UI Classes Overview </A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_1.htm">1 FoamSubApplicationClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_2.htm">1.1 FoamSubApplicationClass Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_3.htm">1.2 Using a FoamSubApplication Object</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_4.htm">2 ComplexMonikerClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_5.htm">2.1 ComplexMoniker Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_6.htm">2.2 ComplexMoniker Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_trigger.htm">2.3 ComplexMoniker Triggers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_7.htm">2.4 ComplexMoniker Messages</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_8.htm">3 Convenient Dialog Routines</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_9.htm">4 FlashingNoteClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_a.htm">4.1 FlashingNote Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_b.htm">4.2 Setting Up the Template</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_c.htm">4.3 Initiating and Destroying the Flashing Note</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_d.htm">5 FoamProgressDialog</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_e.htm">5.1 FoamProgressDialog Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_f.htm">5.2 Setting Up the Template</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#9000UI_10.htm">5.3 Using a FoamProgressDialog</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_11.htm">6 Routines for Lists</A><BR>
&nbsp;&nbsp;<A HREF="#9000UI_zoom.htm">7 Zoom Levels UI</A><BR>
&nbsp;&nbsp;<A HREF="#filter.htm">8 FilterList, FilterText</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#filter_usage.htm">8.1 FilterList and FilterText Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#filter_list_data.htm">8.2 FilterList Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#filter_list_msg.htm">8.3 FilterList Messages</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#filter_text_data.htm">8.4 FilterText Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#filter_text_msg.htm">8.5 FilterText Messages</A><BR>


</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="foam_ui_classes.htm"></A>

<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 0 
<A NAME="foam_ui_classes.htm_29193">
 </A>
Foam UI Classes Overview </H2>

<P>



The foam library includes many new UI classes. This page lists these classes, briefly describes each class' utility, and displays an annotated snapshot of each UI class. 
<UL>
<LI> <A HREF = "#IX_FFileSelectorClass:overview"> FFileSelectorClass </A>
<LI> <A HREF = "#IX_ExtendedFileSelectorClass:overview"> ExtendedFileSelectorClass</A>
<LI> <A HREF = "#IX_ComplexMonikerClass:overview"> ComplexMonikerClass</A>
<LI> <A HREF = "#IX_TwoLevelTriggerClass:overview"> TwoLevelTriggerClass</A>
<LI> <A HREF = "#IX_FoamSubApplicationClass:overview"> FoamSubApplicationClass</A>
<LI> <A HREF = "#IX_GreyFrameClass:overview"> GreyFrameClass </A>
<LI> <A HREF = "#IX_ListWithUserDefinedClass:overview"> ListWithUserDefinedClass </A>
<LI> <A HREF = "#IX_RepeatingGenGlyphClass:overview"> RepeatingGenGlyphClass</A>
<LI> Dialogs
<UL>
<LI> <A HREF = "#IX_FlashingNoteClass:overview"> FlashingNoteClass</A>
<LI> <A HREF = "#IX_SelfDestroyingDialogClass:overview"> SelfDestroyingDialogClass</A>
<LI> <A HREF = "#IX_FoamProgressDialogClass:overview"> FoamProgressDialogClass</A>
</UL>
<LI> Indicators
<UL>
	<LI><A HREF = "#IX_GreyGenInteractionClass:overview"> GreyGenInteractionClass </A>
	<LI><A HREF = "#IX_IndicatorClass:overview"> IndicatorClass </A>
<LI><A HREF = "#IX_IconIndicatorClass:overview"> IconIndicatorClass </A>
<LI><A HREF = "#IX_LevelIndicatorClass:overview"> LevelIndicatorClass </A>
<LI><A HREF = "#IX_IndicatorInteractionClass:overview"> IndicatorInteractionClass </A>
</UL>
<LI> Filter List
<UL>
<LI> <A HREF = "#IX_FilterListClass:overview"> FilterListClass </A>
<LI> <A HREF = "#IX_FilterTextClass:overview"> FilterTextClass </A>
</UL>
<LI> Underlined Text
<UL>
<LI> <A HREF = "#IX_UnderlinedGenTextClass:overview"> UnderlinedGenTextClass </A>
<LI> <A HREF = "#IX_UnderlinedVisTextClass:overview"> UnderlinedVisTextClass </A>
</UL>
<LI>Text Style Controllers
<UL>
<LI> <A HREF = "#IX_FoamTextStyleControlClass:overview"> FoamTextStyleControlClass</A>
	<LI> <A HREF = "#IX_FoamFontControlClass:overview"> FoamFontControlClass </A>
<LI> <A HREF = "#IX_FoamPointSizeControlClass:overview"> FoamPointSizeControlClass</A>
	<LI> <A HREF = "#IX_FoamJustificationControlClass:overview"> FoamJustificationControlClass </A>
</UL>
</UL>



<DIV>
<A NAME="foam_ui_classes.htm_IX_FFileSelectorClass:overview">
 </A>
<H2 CLASS="refHeading">
FFileSelectorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>GenFileSelectorClass</CODE></P>
<P>
Use a <CODE>FFileSelectorClass</CODE> when you do not need a controller and the associated <CODE><A HREF = "9000UI_4.htm">ComplexMoniker</A></CODE> UI to select a file but only want to display a list of files (if you do want a full controller with complete UI, use <CODE>FileOpenControlClass</CODE>). <CODE>FFileSelectorClass</CODE> objects allow you to get and set the directory path using the <CODE>FDocumentDir</CODE> enum values for the directories which are specific to the Nokia 9000i Communicator. 
<P>
<CENTER>
<IMG SRC = "filesel.gif" WIDTH = 642 HEIGHT = 202><BR>
<EM>An example of a <CODE>FFileSelectorClass</CODE> file selector.</EM>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FileOpenControlClass</CODE>, <CODE>FFileSelectorClass</CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_ExtendedFileSelectorClass:overview">
 </A>
<H2 CLASS="refHeading">
ExtendedFileSelectorClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>GenFileSelectorClass</CODE>, but is a variant class.</P> 
<P>
This class is not available on build 4.8.8 or earlier versions of 
the Communicator.
<P>
The <CODE>ExtendedFileSelectorClass</CODE> expands the functionality of any subclass of <CODE><A HREF = "../../Files/GenFileSelector/combo.htm">GenFileSelectorClass</A></CODE>, usually <CODE>FFileSelectorClass</CODE>. It allows multiple files to be selected, optionally provides the user with a search box that narrows the list of files to match the text typed in the search box, and can find files in any directory or subdirectory, not just the directories represented by the enumerated type <CODE>FDocumentDir</CODE>. 
<P>
<CENTER>
<IMG SRC = "efilesel.gif" WIDTH = 642 HEIGHT = 485>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> ExtendedFileSelectorClass, FFileSelectorClass.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_ComplexMonikerClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_4.htm">ComplexMonikerClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../SysObjects/Gen/combo.htm">GenClass</A></CODE>, but is a variant class.</P> 
<P>

The <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> allows developers to create a moniker that contains both text and a bitmap icon. Since the text and icon are referred to generically, it is easy to localize the moniker. A complex moniker is a variant class - its parent class is dynamically created at runtime - so it can assume a variety of forms. The superclass of a <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> object may be any child of <CODE>GenClass</CODE>. This allows complex monikers to be:
<UL>
<LI>Triggers
<LI>Dialog boxs
<LI>Lists (items, grouped items, boolean items, contacts, or a dynamic list)
</UL>

While each of the above items behaves quite differently, they all share the <CODE><A HREF= "9000UI_4.htm">ComplexMonikerClass</A></CODE> behavior of displaying a text and icon moniker.
<P>
<CENTER>
<IMG SRC = "cmplxmon.gif" WIDTH = 642 HEIGHT = 289>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A>,</CODE>
<CODE><A HREF = "../../UI/Triggers/combo.htm">GenTriggerClass</A>, </CODE>
<CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_11.htm">GenBooleanGroupClass</A>, </CODE>
<CODE><A HREF = "../../UI/Lists/Lists_d.htm">GenDynamicListClass</A>, </CODE> or
<CODE><A HREF = "../../Nokia9000/ContactDB/ContactDB_1.htm">ContactListClass</A></CODE>.
</P>
</DIV>





<DIV>
<A NAME="foam_ui_classes.htm_IX_TwoLevelTriggerClass:overview">
 </A>
<H2 CLASS="refHeading">
TwoLevelTriggerClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A></CODE></P> 
<P>
Applications that require more than four triggers may establish two panes of triggers. The user can toggle between these two panes using two <CODE>TwoLevelTriggerClass</CODE> trigger objects which usually have the monikers &quot;More&quot; or &quot;Back&quot;. They are typically put in the fouth slot (slot 3). Since the &quot;More&quot; and &quot;Back&quot; triggers take up two slots, an application which uses two panes of triggers may define up to six of its own triggers.
<P>
<CENTER>
<IMG SRC = "twolvltrgr.gif" WIDTH = 642 HEIGHT = 514>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>TwoLevelTriggerClass</CODE>, <CODE><A HREF = "9000UI_4.htm">ComplexMonikerClass</A></CODE>, <CODE><A HREF = "../../Nokia9000/GrabBag/index.htm#ui">Nokia 9000i Communicator Topics: UI Conventions</A></CODE>
</P>
</DIV>








<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamSubApplicationClass:overview">
 </A> 
<H2 CLASS="refHeading">
<A HREF = "9000UI_1.htm">FoamSubApplicationClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../SysObjects/GenApp/combo.htm">GenApplicationClass</A></CODE></P> 
<P>
Since the Nokia 9000i Communicator does not have a file manager per se, applications added to the device must be launched through a currently existing application. The <CODE>FoamSubApplicationClass</CODE> specifies in which pre-existing application an add-on application should reside.  
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_1.htm">FoamSubApplicationClass</A></CODE>, <CODE><A HREF = "../../SysObjects/GenApp/combo.htm">GenApplicationClass</A></CODE>.
</P>
</DIV>

<P>

<DIV>
<A NAME="foam_ui_classes.htm_IX_GreyFrameClass:overview">
 </A>
<H2 CLASS="refHeading">
GreyFrameClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE></P> 
<P>
Draws a gray beveled box around its children.  It can be used with the
<A HREF = "9000UI_4.htm">ComplexMoniker</A> variant class to add a moniker label (see <CODE>FilterListClass</CODE>example).
<P>
<CENTER>
<IMG SRC = "greyframe.gif" WIDTH = 642 HEIGHT = 252>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>GreyFrameClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>





<DIV>
<A NAME="foam_ui_classes.htm_IX_ListWithUserDefinedClass:overview">
 </A>
<H2 CLASS="refHeading">
ListWithUserDefinedClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE></P> 
<P>

<CODE><A HREF = "../../UI/Lists/Lists_7.htm#IX_GenItemClass">GenItemClass</A></CODE> and <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE> work together to display a list of static monikers that the user may choose from.  <CODE>ListWithUserDefinedClass</CODE>
expands this to allow the user to navigate to an object and input information.
The additional item may be a <CODE>UnderlinedTextWithListClass</CODE>,
<CODE>TextWithListClass</CODE>, or <CODE>GenValueWithListClass</CODE>.


<P>
<CENTER>
<IMG SRC = "listwithuser.gif" WIDTH = 642 HEIGHT = 264>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>ListWithUserDefinedClass</CODE>, <CODE><A HREF = "../../UI/Lists/Lists_5.htm">GenItemGroupClass</A></CODE>.
</P>
</DIV>







<DIV>
<A NAME="foam_ui_classes.htm_IX_RepeatingGenGlyphClass:overview">
 </A>
<H2 CLASS="refHeading">
RepeatingGenGlyphClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE></P> 
<P>
<CODE>RepeatingGenGlyphClass</CODE> is used to create animations. It works be replacing the visMoniker of <CODE><A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE> with the application-defined sequence of bitmapped icons, which it then cycles through. One common use of <CODE>RepeatingGenGlyphClass</CODE> is in dialog boxes which are opened with <CODE>PutUpDialogViaUIThread()</CODE>. This is done so that the animation is processed by another thread and thus doesn't burden the application. 
<P>
<CENTER>
<IMG SRC = "rptgenglyph.gif" WIDTH = 642 HEIGHT = 485>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>RepeatingGenGlyphClass</CODE>, <CODE><A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></CODE>.
</P>
</DIV>




<HR>
<H2><EM>Dialogs</EM></H2>


<DIV>
<A NAME="foam_ui_classes.htm_IX_FlashingNoteClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_9.htm">FlashingNoteClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE></P> 
<P>
The <CODE>FlashingNoteClass</CODE> is used to flash a note on the screen for a set length of time. The application specifies the minimum and maximum time the note will remain on the screen. If the user presses a key after the note has been on screen for the minimum duration, the note dialog box is dismissed. This dialog runs on its own thread and takes the responsibility for dismissing and destroying itself.  
<P>
<CENTER>
<IMG SRC = "flashing.gif" WIDTH = 642 HEIGHT = 202>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF= "9000UI_9.htm">FlashingNoteClass</A></CODE>, <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_SelfDestroyingDialogClass:overview">
 </A>
<H2 CLASS="refHeading">
SelfDestroyingDialogClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE></P> 
<P>
The <CODE>SelfDestroyingDialogClass</CODE> is used to put up a dialog box that self-destructs upon dismissal.
<P>
<CENTER>
<IMG SRC = "selfdestroy.gif" WIDTH = 642 HEIGHT = 202>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>SelfDestroyingDialogClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>




<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamProgressDialogClass:overview">
 </A>
<H2 CLASS="refHeading">
<A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
When an application starts a process that may take a while, it is good practice to put up a <CODE>FoamProgressDialogClass</CODE> dialog which notifies the user that the application is working and which indicates the status of the process. This dialog is put up on its own thread. The process is indicated by an animation of gears grinding away and by the status text which the application may append. If the user chooses the provided &quot;Cancel&quot; trigger a message is sent which indicates that the process should be terminated.
<P>
<CENTER>
<IMG SRC = "progdlg.gif" WIDTH = 642 HEIGHT = 300>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE><A HREF = "9000UI_d.htm">FoamProgressDialogClass</A></CODE>, <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE>.
</P>
</DIV>





<HR>
<H2><EM>Indicator Classes</EM></H2>

The indicator classes exist in the foam library to facilitate drawing the status indicator at the left of the Nokia 9000i Communicator screen. As such, they are usually not as useful as Gen classes. Below is a brief listing of these classes followed by a screen shot of several UI objects which instantiate these classes. 

<DIV>
<A NAME="foam_ui_classes.htm_IX_GreyGenInteractionClass:overview">
 </A> 
<H2 CLASS="refHeading">
GreyGenInteractionClass </H2>
<P>
This class creates a primary window with a gray background. It is an inappropriate base for most applications because it only draws properly when placed against the left edge of the screen and it puts a gray background behind the trigger menu,   thus making them look different from all other Communicator applications.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_IndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
IndicatorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE> <A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A></CODE> </P> 
<P>
An <CODE>IndicatorClass</CODE> object is a GenGlyph that draws an etched border around itself. 
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IndicatorClass</CODE>, <CODE> <A HREF = "../../UI/GenGlyph/index.htm#IX_GenGlyphClass">GenGlyphClass</A> </CODE>.
</P>
</DIV>



<DIV>
<A NAME="foam_ui_classes.htm_IX_IconIndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
IconIndicatorClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
This class is a GenGlyph that can draw one or two icons within etched borders from a
list of bitmaps.  The displayed icons can be changed dynamically.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IconIndicatorClass</CODE>, <CODE>IndicatorClass</CODE>.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_LevelIndicatorClass:overview">
 </A> 
<H2 CLASS="refHeading">
LevelIndicatorClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
The <CODE>LevelIndicatorClass</CODE> draws a bitmap followed by a sequence of bitmaps. This is used for displaying a level indicator such as the battery charge. The number of levels or the bitmap label can be changed dynamically.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>LevelIndicatorClass</CODE>, <CODE>IndicatorClass</CODE>.
</P>
</DIV>


<DIV>
<A NAME="foam_ui_classes.htm_IX_IndicatorInteractionClass:overview">
 </A> 
<H2 CLASS="refHeading">
IndicatorInteractionClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>IndicatorClass</CODE></P> 
<P>
This makes a GenInteraction with an etched border.
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>IndicatorInteractionClass</CODE>, <CODE><A HREF = "../../UI/GenInteraction/combo.htm">GenInteractionClass</A></CODE>.
</P>
</DIV>

<CENTER>
<IMG SRC = "indicator.gif" WIDTH = 642 HEIGHT = 287>
</CENTER>

<P>
<HR>
<H2><EM>Filter Lists</EM></H2>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FilterListClass:overview">
 </A>
<H2 CLASS="refHeading">
FilterListClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Lists/index.htm#IX_GenDynamicListClass">GenDynamicListClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FilterTextClass:overview">
 </A>
<H2 CLASS="refHeading">
FilterTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE>TextWithListClass</CODE>, which in turn inherits <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>.</P>
<P>
<CODE>FilterListClass</CODE> and <CODE>FilterTextClass</CODE> objects work together to provide the appropriate UI for interactive searches.

<P>
<CENTER>
<IMG SRC = "filterlist.gif" WIDTH = 642 HEIGHT = 247>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FilterListClass</CODE>, <CODE>FilterTextClass</CODE>, <CODE>TextWithListClass</CODE>, <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>.
</P>
</DIV>





<P>
<HR>
<H2><EM>Underlined Text</EM></H2>

<DIV>
<A NAME="foam_ui_classes.htm_IX_UnderlinedGenTextClass:overview">
 </A>
<H2 CLASS="refHeading">
UnderlinedGenTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_UnderlinedVisTextClass:overview">
 </A>
<H2 CLASS="refHeading">
UnderlinedVisTextClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/Text/Text_19.htm">VisTextClass</A></CODE></P>
<P>

<CODE> UnderlinedGenTextClass</CODE> and <CODE>UnderlinedVisTextClass</CODE> objects behave like the associated <A HREF = "../../UI/Text/Text_1.htm">TextClass</A> objects except that the text area has a dotted underline. These classes are used extensively for text-entry fields  on the Nokia 9000i Communicator.

<P>
<CENTER>
<IMG SRC = "underlined.gif" WIDTH = 642 HEIGHT = 238>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>UnderlinedGenTextClass</CODE>, <CODE>UnderlinedVisTextClass</CODE>, <CODE><A HREF = "../../UI/Text/Text_22.htm">GenTextClass</A></CODE>, <CODE><A HREF = "../../UI/Text/Text_19.htm">VisTextClass</A></CODE>.
</P>
</DIV>




<P>
<HR>
<H2><EM>Text Style Controllers</EM></H2>



<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamTextStyleControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamTextStyleControlClass</H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamFontControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamFontControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
 <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamPointSizeControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamPointSizeControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
  <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P> 
<P>
See below for description.
</DIV>

<DIV>
<A NAME="foam_ui_classes.htm_IX_FoamJustificationControlClass:overview">
 </A>
<H2 CLASS="refHeading">
FoamJustificationControlClass </H2>
<P CLASS="refField"><STRONG>Inherits:</STRONG>
 <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE></P>
<P>

The controllers <CODE>FoamTextStyleControlClass</CODE>, <CODE>FoamFontControlClass</CODE>, <CODE>FoamPointSizeControlClass</CODE>, and/or
<CODE>FoamJustificationControlClass</CODE> attach to a text object and allow the user to change the displayed text styles. These controllers are functionally equivalent to the standard
text object controllers (<CODE><A HREF = "../../UI/Text/Text_26.htm#IX_TextStyleControlClass ">TextStyleControl</A></CODE>, <CODE><A HREF = "../../UI/Text/Text_26.htm#IX_FontControlClass">FontControl</A></CODE>, etc.), but they have UI and features customized for the Nokia 9000i Communicator.

<P>
<CENTER>
<IMG SRC = "foamfont.gif" WIDTH = 642 HEIGHT = 270>
</CENTER>
</P>
<P CLASS="refField"><STRONG>
Include:</STRONG>        <STRONG CLASS="fileName">
foam.goh</STRONG>
 </P>
<P CLASS="refField"><STRONG>Reference:</STRONG> <CODE>FoamTextStyleControlClass</CODE>, <CODE>FoamFontControlClass</CODE>, <CODE>FoamPointSizeControlClass</CODE>, <CODE>FoamJustificationControlClass</CODE>, <CODE><A HREF = "../../UI/UIOverview/UIOverview_4.htm#IX_GenControlClass:overview">GenControlClass</A></CODE>.
</P>
</DIV>




</P>



<HR>
<A NAME="9000UI_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1 
<A NAME="9000UI_1.htm_29193">
 </A>
FoamSubApplicationClass </H2>
<P>
Applications may be written to be incorporated into the 
Nokia 9000i Communicator as part of a special release. 
The Nokia 9000i Communicator does not have a file manager, 
per se, to enable launching these applications. The applications 
must be launched through a currently existing application. <CODE>
FoamSubApplicationClass</CODE>
 allows you to indicate under which pre-existing application the new application should reside.</P>
<P>
&quot;Add-on&quot; applications for the Nokia 9000i Communicator device, whether included on the device as part of a value-added release, or developed as an aftermarket product, will fall into one of three categories:</P>
<UL>
<LI>
Service applications that communicate to the outside world. </LI>
<LI>
System applications that perform a system function. (PC connectivity tools fall under this category, for example.)</LI>
<LI>
&quot;Extra&quot; applications that don't fall into either of the two prior cases.</LI>
</UL>
<P>
For each of these cases, there is an application already on the device that launches the sub-application. Service applications are launched using the SVCAPPS launcher; system applications use the SYSAPPS launcher; extra applications use the EXTRAPPS launcher.</P>
<P>
Add-on applications are declared using the FoamSubApplication object, and an instance data field is set within the object indicating the &quot;main&quot; application it should be tied with.</P>
<P>
Because a sub-application is not a separate application, special care needs to be taken when the sub-application is closed. This is discussed in <A HREF="#9000UI_3.htm_29522"> Using a FoamSubApplication Object</A>
.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_2.htm">FoamSubApplicationClass Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_3.htm">Using a FoamSubApplication Object</A></P>
<HR>
<A NAME="9000UI_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1.1 <A HREF="#9000UI_1.htm">FoamSubApplicationClass</A>: 
<A NAME="9000UI_2.htm_74484">
 </A>
FoamSubApplicationClass Instance Data</H3>
<P>
There is only one instance data field in a <CODE>
FoamSubApplicationClass</CODE>
 object. This field is noted below.</P>
<P CLASS="figTitle">
Code Display 2-1 FoamSubApplicationClass Instance Data</P>
<PRE>@instance FApplication 	FSAI_launcherApp;</PRE>
<P>
FSAI<CODE>
_launcherApp</CODE>
 stores an <CODE>
FApplication</CODE>
 type referring to the application it should reside under.</P>
<P>
For FoamSubApplication objects, the following <CODE>
FApplication</CODE>
 values are the only values that are relevant:</P>
<DL>
<DT>
	FA_SERVICES_APP</DT><DD>
FA_SYSTEM_APP<BR>
FA_EXTRAS_APP</DD>
</DL>
<HR>
<A NAME="9000UI_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 1.2 <A HREF="#9000UI_1.htm">FoamSubApplicationClass</A>: 
<A NAME="9000UI_3.htm_29522">
 </A>
Using a FoamSubApplication Object</H3>
<PRE>MSG_FSA_RETURN_TO_LAUNCHER</PRE>
<P>
FoamSubApplication objects do not close like other applications. Because of this, they need to provide their own special &quot;Close&quot; trigger. However, FoamSubApplication objects should not simply &quot;close&quot; when the user presses this trigger. Instead, they should send <EM>
MSG_FSA_RETURN_TO_LAUNCHER</EM>
 to this FoamSubApplication object.</P>
<P>
This message changes the <CODE>
[hardIconBar]</CODE>
 entry of the .INI file for the sub-application to be the launcher application (stored in FSAI_<CODE>
launcherApp</CODE>
). This allows the sub-application to seemingly close without closing the parent application. It is the responsibility of the application to provide a &quot;Close&quot; trigger that sends this message to the <CODE>
FoamSubApplicationClass</CODE>
 object.</P>
<P>
The &quot;Close&quot; trigger is declared as a <CODE>
ComplexMonikerClass</CODE>
 object of type CMT_CLOSE. The ComplexMoniker is discussed more fully in <A HREF="#9000UI_4.htm_93889"> ComplexMonikerClass</A>
.</P>
<P CLASS="figTitle">
Code Display 2-2 Using the FoamSubApplicationClass Object</P>
<PRE>/*
 * Declare the FoamSubApplication object as you would a normal GenApplication 
 * object. This sub-app will be launched from the Extras application.
 */</PRE>
<PRE>@start   AppResource</PRE>
<PRE>@object FoamSubApplicationClass MyApp = {
    GI_comp = @MyPrimary;
    FSAI_launcherApp = FA_EXTRAS_APP;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = @MyPrimary;
    GI_visMoniker = list { @MyTextMoniker };
}</PRE>
<PRE>@visMoniker MyTextMoniker = &quot;Nokia UI\rSample App&quot;;</PRE>
<PRE>@end     AppResource;</PRE>
<PRE>/*
 * Somewhere in your sub-app, create a CMT_CLOSE trigger.
 */</PRE>
<PRE>@object ComplexMonikerClass CloseTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLOSE;</PRE>
<PRE>    GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;
    GTI_destination = @TemplateApp;</PRE>
<PRE>    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;</PRE>
<PRE>    /* 
     * Close Command triggers should always be in the fourth position (3 because 
     * HINT_SEEK_SLOT refers to zero-based slot positions).
     */
    HINT_SEEK_SLOT = 3;</PRE>
<PRE>}</PRE>
<HR>
<A NAME="9000UI_4.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2 
<A NAME="9000UI_4.htm_93889">
 </A>
ComplexMonikerClass </H2>
<P>
<CODE>
ComplexMonikerClass</CODE>
 is a versatile class that provides powerful behavior with little overhead. A complex moniker serves two purposes. First, it allows a developer to easily create a moniker containing both graphics and text. Second, it allows both text and graphics to be easily localized by referring to both items &quot;generically.&quot; </P>
<P>
A complex moniker may take a variety of forms. <CODE>
ComplexMonikerClass</CODE>
 is what's known in GEOS as a &quot;variant&quot; class, which means that the object's parent class is dynamically assigned when the object is visually built. </P>
<P>
A complex moniker may contain both a text string and a bitmap. The text string may be either a single line or two lines (separated by a `\r' character in the text buffer). If the text is two lines, it will be right-justified; this allows text strings in the command bar to align properly.

</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_5.htm">ComplexMoniker Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_6.htm">ComplexMoniker Usage</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_trigger.htm">ComplexMoniker Triggers</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_7.htm">ComplexMoniker Messages</A></P>
<HR>
<A NAME="9000UI_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.1 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_5.htm_40001">
 </A>
ComplexMoniker Instance Data</H3>
<P>
<CODE>
ComplexMonikerClass</CODE>
 contains the following instance data:</P>
<P CLASS="figTitle">
Code Display 2-3 ComplexMonikerClass Instance Data</P>
<PRE>ComplexMoniker			ClassName</PRE>
<PRE>@instance TextStyle			CMI_textStyle = (TS_BOLD);</PRE>
<PRE>@instance word 			CMI_topText;</PRE>
<PRE>@instance word 			CMI_iconBitmap;</PRE>
<PRE>@instance byte 			CMI_fontSize;</PRE>

<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_29473">
 </A>
The ComplexMoniker Keyword</H4>
<P>
Because <CODE>
ComplexMonikerClass</CODE>
 is a variant class, it needs to have its superclass assigned when it is built. The <EM>
ComplexMoniker</EM>
 keyword represents the parent class of the complex moniker. By setting this keyword to a class name the parent class is changed from the default superclass <CODE>GenClass</CODE> to the specified class. Any child of <CODE>GenClass</CODE> may be a complex moniker superclass. The following are commonly used superclasses:
</P>
<DL>
<DD><CODE>
GenTriggerClass<BR>
GenInteractionClass<BR>
GenItemGroupClass<BR>
GenItemClass<BR>
GenBooleanGroupClass<BR>
GenDynamicListClass<BR>
ContactListClass</CODE>
</DD>
</DL>
<P>
Each of these classes will behave quite differently, but all will exhibit the same characteristics in displaying their text and icon monikers that are gained through using <CODE>
ComplexMonikerClass.</CODE>
 Note that using a ComplexMoniker object will cause the specific UI to ignore any moniker stored in the GI_<CODE>
visMoniker</CODE>
 instance data field in the above classes.</P>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_47578">
 </A>
The ComplexMoniker Text</H4>
<P>
CMI<CODE>
_topText</CODE>
 stores the &quot;text&quot; to display. This may be either a Chunkhandle to a text string, or a <CODE>
ComplexMonikerText</CODE>
 identifier. If the value is a <CODE>
ComplexMonikerText</CODE>
 identifier, the specific UI will determine what exact text is displayed.</P>
<P>
As noted, the text may contain two lines. The top text is limited to COMPLEX_MONIKER_MAX_TOP_TEXT_LENGTH while the bottom is limited to COMPLEX_MONIKER_MAX_BOTTOM_TEXT_LENGTH.</P>
<P>
Below is a complete list of types; in most cases the (English) text on the Nokia 9000i device is similar, if not identical, to the text alluded to by the identifier's name. Those cases where the actual text is noticeably different are noted. Using such an identifier is beneficial for localization purposes.</P>
<DL>
<DT>
CMT_NULL</DT><DD>Never set a moniker to this value. It exists purely as a placeholder.</DD>
<DT>
Basic strings:</DT>
<DT>
	CMT_OK</DT><DD>
CMT_CLOSE<BR>
CMT_CANCEL<BR>
CMT_YES<BR>
CMT_NO</DD>
<DT>
Command strings:</DT>
<DT>
	CMT_CLEAR</DT><DD>
CMT_CLEAR_ALL<BR>
CMT_CHANGE<BR>
CMT_RENAME	<BR>
CMT_COPY<BR>
CMT_SETTINGS<BR>
CMT_OPEN<BR>
CMT_CREATE_NEW		&quot;New&quot;<BR>
CMT_DELETE<BR>
CMT_ROTATE<BR>
CMT_SELECT<BR>
CMT_START<BR>
CMT_GO<BR>
CMT_INSTALL<BR>
CMT_DEINSTALL		&quot;Remove&quot;<BR>
CMT_NEXT<BR>
CMT_PREVIOUS<BR>
CMT_USER_DEFINED		&quot;User defined:&quot;<BR>
CMT_ZOOM<BR>
CMT_ZOOM_IN<BR>
CMT_ZOOM_OUT<BR>
CMT_VIEWING_TOOLS<BR>
CMT_OPTIONS</DD>
<DT>
Communication strings:</DT>
<DT>
	CMT_PHONE	&quot;On&quot;</DT><DD>
CMT_CALL<BR>
CMT_CALL_LOWERCASE		&quot;Call&quot;<BR>
CMT_SEND<BR>
CMT_SEND_OPTIONS<BR>
CMT_CONNECT<BR>
CMT_CALLS<BR>
CMT_FAXES<BR>
CMT_DATA_CALLS<BR>
CMT_MESSAGES<BR>
CMT_RECENT_CALLS<BR>
CMT_RECENT_FAXES		&quot;Recent numbers&quot;<BR>
CMT_RECENT_MESSAGES		&quot;Recent numbers&quot;<BR>
CMT_RECEIVED_CALLS<BR>
CMT_RECEIVED_FAXES		&quot;Received fax numbers&quot;<BR>
CMT_RECEIVED_MESSAGES		&quot;Received message numbers&quot;<BR>
CMT_MISSED_CALLS<BR>
CMT_LAST_DIALED_CALLS		&quot;Dialed calls&quot;<BR>
CMT_TO_COLON		&quot;To:&quot;<BR>
CMT_FROM_COLON		&quot;From:&quot;<BR>
CMT_TEXT_SEND		&quot;Send text&quot;<BR>
CMT_TEXT_CAPTURE		&quot;Capture text&quot;<BR>
CMT_CAPTURE<BR>
CMT_STOP_CAPTURE<BR>
CMT_FORWARD_FAX		&quot;Forward&quot;<BR>
CMT_SELECT_RECEIVER		&quot;Recipient&quot;<BR>
CMT_HANGUP<BR>
CMT_FORWARD<BR>
CMT_REPLY</DD>
<DT>
Miscellaneous commands:</DT>
<DT>
	CMT_CLEAR_LIST</DT><DD>
CMT_NO_CONTACT_INFORMATION		&quot;No log information&quot;<BR>
CMT_CONTACT_CARD<BR>
CMT_NONE<BR>
CMT_CLEAR_ALL_COMMAND<BR>
CMT_ACCEPT<BR>
CMT_RESET<BR>
CMT_STOP<BR>
CMT_ACTIVATE<BR>
CMT_DISABLE<BR>
CMT_HELP<BR>
CMT_BACK<BR>
CMT_SPECIAL_KEYS_COMMAND		&quot;Keys&quot;<BR>
CMT_SPECIAL_KEYS<BR>
CMT_TEXT<BR>
CMT_TEXTS<BR>
CMT_ZOOM_PLUS		&quot;Zoom in&quot;<BR>
CMT_ZOOM_MINUS		&quot;Zoom out&quot;<BR>
CMT_INSERT<BR>
CMT_OFF<BR>
CMT_ON<BR>
CMT_MENU          /* Not available on build 4.8.8 or earlier versions of the Communicator */<BR>
CMT_SEARCH      /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P CLASS="figTitle">
Code Display 2-4 Setting a Complex Moniker's Text</P>
<PRE>/* 
 * The text in a complex moniker is stored within the CMI_topText instance field. 
 * This text may either be referenced by a ChunkHandle ...
 */</PRE>
<PRE>@object ComplexMonikerClass MyMoniker = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = @MyText;
}</PRE>
<PRE>/* Use the TCHAR type to ensure the text is DBCS-compliant. */</PRE>
<PRE>@chunk TCHAR MyText[] = &quot;Sample Text&quot;;</PRE>
<PRE>/* 
 * ... or CMI_topText can store a ComplexMonikerText type which indicates the text 
 * generically. 
 */</PRE>
<PRE>@object ComplexMonikerClass MyClearTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLEAR;
}</PRE>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_88722">
 </A>
The ComplexMoniker Icon Bitmap</H4>
<P>
CMI_<CODE>
iconBitmap</CODE>
 stores the bitmap to display within this moniker. This may either be a ChunkHandle to a Bitmap structure or a member of the <CODE>
ComplexMonikerBitmap</CODE>
 types. These types are enumerated below:</P>
<DL>
<DT>
	CMB_LEFT_FINGER</DT><DD>
CMB_RIGHT_FINGER<BR>
CMB_CONTACT_CARD<BR>
CMB_CONTACT_LIST<BR>
CMB_SPEED_DIAL<BR>
CMB_SETTINGS_TITLE_ICON<BR>
CMB_SERVICES_VIEW<BR>
CMB_SERVICES_DEFINE<BR>
CMB_QUESTION_ICON<BR>
CMB_OPEN_FOLDER<BR>
CMB_DRAWER<BR>
CMB_RENAME_COPY<BR>
CMB_FOLDER<BR>
CMB_SECURITY_SUCCESS<BR>
CMB_SECURITY_ERROR<BR>
CMB_PC_ICON<BR>
CMB_INPUT_TITLE_ICON<BR>
CMB_WARNING_TITLE_ICON<BR>
CMB_SEARCH   /* Not available on build 4.8.8 or earlier versions of the Communicator */ <BR>
CMB_SMS_CARD_ICON   /* Not available on build 4.8.8 or earlier versions of the Communicator */</DD>
</DL>
<P>
Again, using a generic identifier eases localization.</P>
<P>
You can create your own bitmaps by using the GEOS Icon Editor. To do so, perform the following steps:</P>
<UL>
<LI>
Start GEOS (C:\PCGEOS\GEOS2XNC\LOADER.EXE</LI>
<LI>
Launch the Icon Editor application.</LI>
<LI>
Select either the 5th format (32x20 monochrome) or the 1st format (48x30 color). The first is used to create a monochrome bitmap; the second is used to create a 4-bit grayscale bitmap.</LI>
<LI>
Edit the bitmap as desired. </LI>
<LI>
The Nokia 9000i Communicator is a grayscale device. It is capable of handling 4-bit grayscale bitmaps (<CODE>
BMFormat</CODE>
 of BMF_4BIT). You may also create simple monochrome bitmaps (<CODE>
BMFormat</CODE>
 of BMF_MONO).</LI>
<LI>
The GEOS Icon Editor only creates color bitmaps. The following colors in the Icon Editor will be mapped to the matching grey-scale shades on the device to create a grayscale bitmap:<TABLE BORDER="1">
<TR>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Icon Editor Color</P>
</TH>
<TH ROWSPAN="1" COLSPAN="1">
<P>
Nokia 9000i</P>
</TH>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
WHITE</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
BLACK</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT_VIOLET</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
LIGHT GRAY</P>
</TD>
</TR>
<TR>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK_GREEN</P>
</TD>
<TD ROWSPAN="1" COLSPAN="1">
<P>
DARK GRAY</P>
</TD>
</TR>
</TABLE>

(For more information about mapping colors to Nokia 9000i Communicator grays, refer to the <A HREF = "../../Nokia9000/GrabBag/index.htm#grayscale">N9000i Topics Sheet</A>.)
</LI>
<LI>
Write the file out as <CODE>
filename</CODE>
.goh using the following options:<BR>
		Current Format<BR>
		Vismoniker source code<BR>
		Compacted<BR>
		Write mask (default)</LI>
<LI>
Edit the first line of the <EM>
filename</EM>
.goh file and replace this line:</LI>
</UL>
<PRE>@visMoniker Moniker ={</PRE>
<UL>
<LI>
with:</LI>
</UL>
<PRE>@chunk byte <CODE>YourIconName</CODE>[] = {</PRE>
<UL>
<LI>
Delete the following lines from the beginning of the file:</LI>
</UL>
<PRE>size = &lt;...&gt;;
style = &lt;...&gt;;
color = &lt;...&gt;;
aspectRatio = &lt;...&gt;;
cachedSize = &lt;...,...&gt;;
gstring { GSFillBitmapAtCP(&lt;...&gt;),</PRE>
<UL>
<LI>
Delete the following lines from the end of the file:</LI>
</UL>
<PRE>GSEndString()
}</PRE>
<UL>
<LI>
Finally, add a semi-colon to the end of the file.</LI>
</UL>
<P>
Your resulting bitmap, ready for inclusion in your app, should look like this:</P>
<PRE>@chunk byte MyIconName[] = {
    Bitmap (32,20,BMC_PACKBITS,
            (BMT_MASK|BMF_4BIT)),
    0xfd, 0xff, 0x03, 0xbf, ...
};</PRE>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_69782">
 </A>
Text Styles</H4>
<P>
CMI_<CODE>
textStyle</CODE>
 stores a GEOS <CODE>
TextStyle</CODE>
, defined in <STRONG CLASS="fileName">
graphics.h</STRONG>
. By default, text is shown as TS_BOLD. The full list of styles appears below:</P>
<DL>
<DT>
	TS_BOLD		(default)</DT><DD>
TS_OUTLINE<BR>
TS_ITALIC<BR>
TS_SUPERSCRIPT<BR>
TS_SUBSCRIPT<BR>
TS_STRIKE_THRU<BR>
TS_UNDERLINE</DD>


</DL>
<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_56754">
 </A>
Font Sizes</H4>
<P>
CMI<CODE>
_fontSize</CODE>
 stores a font size (in points). There are four pre-established font sizes that you should choose from:</P>
<PRE>#define FOAM_LARGE_FONT_SIZE					20
#define FOAM_NORMAL_FONT_SIZE					18
#define FOAM_LIGHT_FONT_SIZE					17
#define FOAM_SMALL_FONT_SIZE					16</PRE>
<P>
The large font size is best reserved for commands and title bar monikers. In most other cases, use the normal font size.</P>
<P>
The default font can be obtained by those routines or objects that demand a font name by using the <CODE>
VisTextDefaultFont</CODE>
 value VTDF_RESPONDER. </P>


<H4 CLASS="HeadingC">
<A NAME="9000UI_5.htm_95924">
 </A>
ComplexMoniker Vardata</H4>
<P>
There are several vardata attributes that you may attach to the Complex Moniker. These are noted below:</P>
<P CLASS="figTitle">
Code Display 2-5 ComplexMoniker Vardata</P>
<PRE>@vardata		void	ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;</PRE>
<PRE>@vardata		void	HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
@vardata		void	HINT_COMPELX_MONIKER_DONT_DRAW_SEPARATOR;</PRE>
<P>
ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT will position the icon bitmap (if any) to the left of the text.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DRAW_SEPARATOR</CODE>
 draws a single-line separator below the complex moniker.</P>
<P>
<CODE>
HINT_COMPLEX_MONIKER_DONT_DRAW_SEPARATOR</CODE>
 prevents the drawing of a single-line separator below the complex moniker.</P>

<HR>
<A NAME="9000UI_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.2 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_6.htm_55377">
 </A>
ComplexMoniker Usage</H3>
<PRE>MSG_COMPLEX_MONIKER_GET_MONIKER, MSG_COMPLEX_MONIKER_REPLACE_MONIKER</PRE>
<P>
ComplexMonikers are used for constructing lists, dialog boxes, and command triggers. Below are examples of a dialog box and a dynamic list. The <A HREF = "9000UI_trigger.htm">next section</A> will discuss command triggers. If you are not creating a command trigger, set CMI<CODE>_fontSize</CODE>
to something other than FOAM_LARGE_FONT_SIZE.
 
<P CLASS="figTitle">
Code Display 2-6 Complex Moniker Example (GenInteraction)</P>
<PRE>@object ComplexMonikerClass AboutBox = {</PRE>
<PRE>/* This object will behave as a GenInteration (grouping) object */
    ComplexMoniker = GenInteractionClass;
    CMI_topText = @AboutBoxTitle;
    CMI_iconBitmap = @AboutIcon;
    GI_comp = @AboutText;</PRE>
<PRE>/* Geometry Hints */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_DRAW_SHADOW;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;</PRE>
<PRE>/* ComplexMoniker Hints */</PRE>
<PRE>    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;</PRE>
<PRE>}</PRE>
<PRE>@chunk TCHAR AboutBoxTitle[] = &quot;CmplxMon Sample Application&quot;;</PRE>
<P CLASS="figTitle">
Code Display 2-7 ComplexMoniker Example (GenDynamicList)</P>
<PRE>&nbsp;</PRE>
<PRE>@object ComplexMonikerClass CMTextsList = {
    ComplexMoniker = GenDynamicListClass;
    CMI_topText = @CMTextsListTitle;
    CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
    CMI_iconBitmap = CMB_OPEN_FOLDER;
    GIGI_destination = process;
    GIGI_applyMsg = MSG_CMPLXMON_PROCESS_SHOW_CURRENT_CMTEXT;
    GDLI_queryMsg = MSG_CMPLXMON_PROCESS_GET_CMTEXT;</PRE>
<PRE>/* GDLI_numItems will be set at app-launch time. */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_DRAW_SHADOW;
    HINT_PLACE_MONIKER_ABOVE;
    HINT_PLACE_MONIKER_TO_LEFT;
    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    HINT_MINIMIZE_CHILD_SPACING;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_ITEM_GROUP_SCROLLABLE;
    ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;
    ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED;
    ATTR_GEN_ITEM_GROUP_STATUS_MSG =
	MSG_CMPLXMON_PROCESS_SHOW_CURRENT_CMTEXT;
    }
}</PRE>

<HR>
<A NAME="9000UI_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 2.4 <A HREF="#9000UI_4.htm">ComplexMonikerClass</A>: 
<A NAME="9000UI_7.htm_74855">
 </A>
ComplexMoniker Messages</H3>
<PRE>MSG_COMPLEX_MONIKER_GET_MONIKER, MSG_COMPLEX_MONIKER_REPLACE_MONIKER</PRE>
<P>
To retrieve a complex moniker, send the ComplexMoniker <CODE>
MSG_COMPLEX_MONIKER_GET_MONIKER</CODE>
. This message takes a single argument, a pointer to a structure of type <CODE>
GetComplexMoniker</CODE>
. The structure will be filled in with the relevant information by the message.</P>
<PRE>typedef struct {
    TextStyle				GCM_textStyle;
    byte				GCM_fontSize;
    ComplexMonikerText			GCM_topText;
    ComplexMonikerBitmap		GCM_iconBitmap;
} GetComplexMoniker;</PRE>
<P>
Send <CODE>MSG_COMPLEX_MONIKER_REPLACE_MONIKER</CODE>
to replace a complex moniker with a new moniker.</P>
<P>
This message takes two arguments: a
<CODE>ReplaceComplexMoniker</CODE> structure and a <CODE>
ReplaceComplexMonikerChunkHandles</CODE> structure.</P>
<P>
The <CODE>
ReplaceComplexMoniker</CODE>
 structure should hold the parameters for the new moniker.</P>
<PRE>typedef struct {
    TextStyle				RCM_textStyleSet;
    TextStyle				RCM_textStyleClear;
    word				RCM_fontSize;
    dword				RCM_topTextSource;
    dword				RCM_iconBitmapSource;
    ComplexMonikerSourceType		RCM_topTextSourceType;
    ComplexMonikerSourceType		RCM_iconBitmapSourceType;
    word				RCM_iconBitmapSize;
    RCMOverwrite			RCM_overwrite;
} ReplaceComplexMoniker;</PRE>
<P>
<CODE>RCM_textStyleSet</CODE> stores a <CODE>TextStyle</CODE> record of
styles that should be set (masked) on top of any currently existing
styles.</P>
<P>
<CODE>RCM_textStyleClear</CODE> stores a <CODE>TextStyle</CODE> record of
styles that should be cleared if they are set among the currently existing
styles. Note: Currently these bits are inverted rather than cleared.</P>
<P>
<CODE>RCM_fontSize</CODE> stores the new font size. Pass 0 to indicate no
change.</P>
<P>
<CODE>RCM_topTextSource</CODE> stores a dword value containing, or pointing
to, the source for the new text. The type of value stored here is indicated
in <CODE>RCM_topTextSourceType</CODE>.</P>
<P>
<CODE>RCM_iconBitmapSource</CODE> stores a dword value containing, or
pointing to, the source for the new bitmap. The type of value stored here
is indicated in <CODE>RCM_iconBitmapSourceType.</CODE>
</P>
<P>
<CODE>RCM_topTextSourceType</CODE> stores the type of text reference
contained in <CODE>RCM_topTextSource</CODE>.</P>
<P>
<CODE>RCM_iconBitmapSourceType</CODE> stores the type of bitmap reference
contained in <CODE>RCM_iconBitmapSource</CODE>.</P>
<P>
<CODE>RCM_iconBitmapSize</CODE> stores the size of the icon bitmap, in
bytes.</P>
<P>
<CODE>RCM_overwrite</CODE> indicates whether the existing complex moniker
chunks should be overwritten. Pass TRUE if you wish this occur.</P>
<P>
<CODE>
MSG_COMPLEX_MONIKER_REPLACE_MONIKER</CODE> also passes a
<CODE>ReplaceComplexMonikerChunkHandles</CODE> structure. This structure
is used to place returned chunk handles of the text and bitmap.</P>
<PRE>typedef struct {
    ChunkHandle			RCMCH_topText;
    word			RCMCH_unusedCX;
    ChunkHandle			RCMCH_iconBitmap;
    word			RCMCH_unusedBP;
} ReplaceComplexMonikerChunkHandles;</PRE>
<P>
<CODE>RCMCH_topText</CODE> contains the ChunkHandle of the text portion of
the new complex moniker.</P>
<P>
<CODE>RCMCH_iconBitmap</CODE> contains the ChunkHandle of the bitmap
(graphics) portion of the new complex moniker.</P>
<HR>
<A NAME="9000UI_8.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 3 
<A NAME="9000UI_8.htm_91280">
 </A>
Convenient Dialog Routines</H2>
<P>
The Foam library provides a number of routines useful for displaying simple dialog boxes to the user. Each of these displays a dialog box. The dialog box will have one or more buttons. Most of the functions have a return value; the function's return value will be an <CODE>
InteractionCommand</CODE>
 value corresponding to which button the user pressed to dismiss the dialog. The <CODE>
FoamDisplay...NoBlock()</CODE>
 routines don't have an explicit return value; they send a message if the user presses the OK button.</P>
<P>
The following routines are available:</P>
<DL>
<DT>
<CODE>
FoamDisplayWarning()</CODE>
, <CODE>
FoamDisplayWarningNoBlock() </DT><DD>
</CODE>
These routines present a dialog box notifying the user about an action. The user may dismiss the dialog, but may not cancel the action. The function takes one argument, the optr of a string buffer to display. This function has no return value.</DD>
<DT>
<CODE>
FoamDisplayError()</CODE>
, <CODE>
FoamDisplayErrorNoBlock()</DT><DD>
</CODE>
These routines present a dialog box notifying the user that an error has occurred. The user may dismiss the dialog via the OK button. The function takes one argument: the optr of the string buffer containing the text to display. The function has no return value.</DD>
<DT>
<CODE>
FoamDisplayOkCancelWarning()</DT><DD>
</CODE>
This function presents the user with a warning in an OK/Cancel dialog. The function takes one argument: the optr of the string buffer to display. This function returns an <CODE>
InteractionCommand</CODE>
 value; if the user presses the OK button, the function returns IC_APPLY.</DD>
<DT>
<CODE>
FoamDisplayQuestion()</DT><DD>
</CODE>
This routine presents a Yes/No dialog. It takes one argument, the optr of the text buffer containing the string to display. If the user presses the Yes button, the function will return IC_YES.</DD>
<DT>
<CODE>
FoamDisplayNote()</CODE>
, <CODE>
FoamDisplayNoteNoBlock()</DT><DD>
</CODE>
These functions display an OK dialog box displaying a text message to the user. The function takes one argument, the optr to a string buffer with the text to display.</DD>
<DT>
<CODE>
FoamDisplayDeleteWarning()</DT><DD>
</CODE>
This routine presents an OK/Cancel dialog box asking for a file deletion confirmation. This function takes three arguments: a pointer to a string buffer containing the file name, and optrs to two string chunks: one to display before the file name, and one to display after. If the function returns IC_YES, the user has confirmed that the file should be deleted.</DD>
<DT>
<CODE>
FoamDisplayDeleteWarningNoBlock()</DT><DD>
</CODE>
This routine presents an OK/Cancel dialog box asking for a file deletion confirmation. This function takes three arguments: the optr of the text string asking the user for confirmation, the message to send if the Delete button is pressed, and the object to send that message to. This function has no explicit return value. If the user Cancels the dialog, it won't send any message.</DD>
</DL>
<P>
For dialog box types not provided by these functions, you will have to set up your UI, using GenInteraction objects in the usual way--or you may use the <CODE>
FlashingNoteClass</CODE>
 or <CODE>
FoamProcessDialogClass</CODE>
, described later in this chapter.</P>
<HR>
<A NAME="9000UI_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4 
<A NAME="9000UI_9.htm_42272">
 </A>
FlashingNoteClass</H2>
<P>
Sometimes, you may want to send a notification to a user without requiring the user to respond. Ideally, you would like a dialog box to appear on screen for a few seconds, and then go away, or automatically disappear once any key is pressed. You can get this behavior with a <CODE>
FlashingNoteClass</CODE>
 object.

</P>
<P>
You can provide the following parameters to a Flashing Note object:</P>
<UL>
<LI>
A minimum duration to stay on-screen. After the minimum duration, the dialog can be dismissed by pressing any key.</LI>
<LI>
A maximum duration to stay on-screen. (The dialog will dismiss itself if this time is reached.)</LI>
</UL>
<P>
A Flashing Note should be placed as the root of an unattached tree within its own UI block (resource). In this manner, it will act as a template. To initiate the flashing note, call the routine <CODE>
PutUpDialogViaUIThread(), </CODE>
passing the optr of the dialog box template. This routine will copy the template resource, attach it to the application tree, and manage its thread of execution. The dialog will be run within the specific UI thread to avoid blocking the application thread.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_a.htm">FlashingNote Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_b.htm">Setting Up the Template</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_c.htm">Initiating and Destroying the Flashing Note</A></P>
<HR>
<A NAME="9000UI_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.1 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_a.htm_49772">
 </A>
FlashingNote Instance Data</H3>
<P>
<CODE>
FlashingNoteClass</CODE>
 only contains one piece of instance data, but it also changes the defaults for its superclass, <CODE>
GenInteractionClass</CODE>
.</P>
<P CLASS="figTitle">
Code Display 2-9 FlashingNoteClass Instance Data</P>
<PRE>#define FLASHING_NOTE_DEFAULT_DURATION						(3*60) /* 3 seconds */
#define FLASHING_NOTE_DEFAULT_MINIMUM_DURATION						(1*60) /* 1 second */</PRE>
<PRE>@instance 	word		FNI_duration;</PRE>
<PRE>@default GII_attrs =				GIA_NOT_USER_INITIATABLE | GIA_SYS_MODAL);
@default GII_visibility =				GIV_DIALOG;
@default GII_type = 				GIT_MULTIPLE_RESPONSE;
@default FNI_duration = 				FLASHING_NOTE_DEFAULT_DURATION;</PRE>
<PRE>@vardata word		HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS;
@vardata word		ATTR_FLASHING_NOTE_MINIMUM_DURATION;</PRE>
<P>
FNI<CODE>
_duration</CODE>
 stores the maximum duration (in ticks -- 1/60ths of a second) for the dialog to remain on-screen. Do not set this to zero; doing so will make the dialog box &quot;permanent&quot; and incapable of dismissal.</P>
<HR>
<A NAME="9000UI_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.2 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_b.htm_96600">
 </A>
Setting Up the Template</H3>
<P>
Usually, a <CODE>
FlashingNoteClass</CODE>
 object (and its children) should be contained within their own resource. The resource should remain unattached to the application tree. The routine <CODE>
PutUpDialogViaUIThread()</CODE>
 will take care of copying and attaching the group of objects.</P>
<P>
To set up your template, perform the following steps:</P>
<UL>
<LI>
Declare the template's resource and make it <CODE>
notDetachable</CODE>
.</LI>
<LI>
Define the root object as a <CODE>
FlashingNoteClass</CODE>
 object. </LI>
<LI>
Set the root object not usable (~GS_USABLE).</LI>
<LI>
Set the FNI_<CODE>
duration </CODE>
instance field to the number of ticks (1/60ths of a second) you wish to have the dialog box on-screen. By default, this is 180 ticks (3 seconds).</LI>
<LI>
If you want a minimum time for the dialog box to remain on-screen, add <CODE>
ATTR_FLASHING_NOTE_MINIMUM_DURATION</CODE>
 and set it to the number of ticks (1/60ths of a second) to remain on-screen. By default, this is 60 ticks (one second).</LI>
<LI>
Add <CODE>
HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS</CODE>
 if you don't want to manually destroy it.</LI>
<LI>
Add the hints <CODE>
HINT_WINDOW_NOT_TITLE_BAR</CODE>
 and <CODE>
HINT_DRAW_IN_BOX</CODE>
.</LI>
</UL>
<P CLASS="figTitle">
Code Display 2-10 FlashingNote Template</P>
<PRE>@start FlashingNoteTemplateResource, notDetachable;</PRE>
<PRE>@object FlashingNoteClass FlashingNoteTemplate = {
    GI_states = @default &amp; ~GS_USABLE;
    GI_comp = @DialogBoxTemplate;
    FNI_duration = 600;						/* 10 seconds */</PRE>
<PRE>    HINT_DRAW_IN_BOX;
    HINT_FLASHING_NOTE_DESTROY_SELF_AFTER_DISMISS;
    HINT_WINDOW_NO_TITLE_BAR;
    ATTR_FLASHING_NOTE_MINIMUM_DURATION = 300;						/* 5 seconds */
}</PRE>
<PRE>/* 
 * We want a separator, so we will create a sub-group interaction as a complex
 * moniker.
 */</PRE>
<PRE>@chunk TCHAR DialogTemplateText[] = &quot;Flashing Note&quot;;</PRE>
<PRE>@object ComplexMonikerClass DialogBoxTemplate = {
    ComplexMoniker = GenInteractionClass;
    CMI_topText = @DialogTemplateText;
    CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
    GI_comp = @DialogText;</PRE>
<PRE>    HINT_PLACE_MONIKER_ABOVE;
    HINT_COMPLEX_MONIKER_DRAW_SEPARATOR;
    HINT_FIXED_SIZE = { SST_PIXELS | FOAM_DEFAULT_BUBBLE_WIDTH, 0 };
}</PRE>
<PRE>@chunk TCHAR DialogTextText[] = &quot;This particular flashing note will stay up a 
				minimum \r
				of 5 seconds, and will dismiss itself if you 
				press any key after that.\r\r\
				It will dismiss itself automatically after 10 
				seconds.\r&quot;;</PRE>
<PRE>@object GenTextClass DialogText = {
    GTXI_text = @DialogTextText;
    GI_attrs = @default | GA_READ_ONLY;
}</PRE>
<PRE>@end FlashingNoteTemplateResource;</PRE>
<HR>
<A NAME="9000UI_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 4.3 <A HREF="#9000UI_9.htm">FlashingNoteClass</A>: 
<A NAME="9000UI_c.htm_80498">
 </A>
Initiating and Destroying the Flashing Note</H3>
<P>
Initiating the flashing note is simple. Simply call <CODE>
PutUpDialogViaUIThread()</CODE>
, passing the optr of the root Flashing Note object. </P>
<P>
If that object contains <CODE>
HINT_FLASHING_NOTE_DESTROY_AFTER_DISMISS</CODE>
, the dialog will be automatically detached and destroyed after it disappears from view (though the template block will remain untouched, of course).</P>
<HR>
<A NAME="9000UI_d.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5 
<A NAME="9000UI_d.htm_64511">
 </A>
FoamProgressDialog</H2>
<P>
When performing a time-consuming task, it is wise to prevent user frustration and use a <CODE>FoamProcessDialogClass</CODE> which informs the user of the task's progress and offers much-appreciated feedback.</P>
<P>
The FoamProgress dialog provides the following functionality:</P>
<UL>
<LI>
A default animation of gears in motion, informing the user that an action is taking place.</LI>
<LI>
A &quot;status indicator&quot; consisting of a series of five dots. These five dots get displayed as the task gets closer to completion. Next to this status indicator, you may include status text, if desired.</LI>
<LI>
Text which describes the task.</LI>
<LI>
A default Cancel trigger.</LI>


</UL>
<P>
As with a Flashing Note, a FoamProgress dialog should be placed as the root of an unattached tree within its own UI block (resource). To initiate the Foam Progress dialog, call the routine <CODE>
PutUpDialogViaUIThread(), </CODE>
passing the optr of the dialog box template. This routine will copy the template resource, attach it to the application tree, and manage its thread of execution. The dialog will be run within the specific UI thread, avoiding blocking the application thread. </P>
<P>
The dialog can be taken down with <CODE>
TakeDownDialogViaUIThread()</CODE>
 or by placing <CODE>
HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS</CODE>
 on the object.</P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_e.htm">FoamProgressDialog Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_f.htm">Setting Up the Template</A></P>
<P CLASS="subsectionLink">
<A HREF="#9000UI_10.htm">Using a FoamProgressDialog</A></P>
<HR>
<A NAME="9000UI_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.1 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_e.htm_35339">
 </A>
FoamProgressDialog Instance Data</H3>
<P>
<CODE>
FoamProgressDialogClass</CODE>
 contains several pieces of instance data, and also alters the defaults of its superclasses, <CODE>
GenControlClass</CODE>
 and <CODE>
GenInteractionClass</CODE>
.</P>
<P CLASS="figTitle">
Code Display 2-11 FoamProgressDialogClass Instance Data</P>
<PRE>@instance		ChunkHandle		FPDI_descriptionText			= NullChunk;
@instance		ChunkHandle		FPDI_statusText			= NullChunk;
@instance		optr		FPDI_cancelDestination			= NullOptr;
@instance		word		FPDI_cancelActionMsg			= 0;</PRE>
<PRE>@vardata void		HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS;
@vardata void		ATTR_FOAM_PROGRESS_DIALOG_DONT_DISMISS_ON_CANCEL;</PRE>
<PRE>@default		GII_visibility		= GIV_POPUP;
@default		GII_type		= GIT_MULTIPLE_RESPONSE;
@default		GII_attrs		= (GIA_NOT_USER_INITIATABLE | GIA_MODAL);
@default		GI_attrs		= GA_SIGNAL_INTERACTION_COMPLETE;
@default		GI_states		= (@default | GS_ENABLED);</PRE>
<PRE>&nbsp;</PRE>
<DL>
<DT>
FPDI<CODE>
_descriptionText</CODE>
 contains text to display to the user, informing them of the task being performed.</DT>
<DT>
FPDI_<CODE>
statusText</CODE>
 contains text to display next to the status indicator.</DT>
<DT>
FPDI<CODE>
_cancelDestination</CODE>
 contains the object that should receive notification (via FPDI<CODE>
_cancelActionMsg</CODE>
) if the action is cancelled by the user. The object must be capable of handling cancellation in a clean manner.</DT>
<DT>
FPDI_<CODE>
cancelActionMsg</CODE>
 stores the message to send if the user cancels the operation. This message will be sent to the FPDI_<CODE>
cancelDestination</CODE>
, where it should be handled appropriately.</DT>
<DT>
<CODE>
HINT_FOAM_PROGRESS_DIALOG_DESTROY_SELF_AFTER_DISMISS</CODE>
 indicates that the resource block containing this dialog should be destroyed after the dialog is dismissed. This hint indirectly  calls <CODE>
UserDestroyDialog();</CODE>
 do not use this hint if you will use <CODE>
TakeDownDialogViaUIThread()</CODE>
 instead.</DT>
<DT>
<CODE>
ATTR_FOAM_PROGRESS_DIALOG_DONT_DISMISS_ON_CANCEL</CODE>
 indicates that the dialog will not be dismissed if the user presses &quot;Cancel.&quot; The application is responsible for handling this situation, and eventually dismissing the dialog.</DT>
</DL>
<HR>
<A NAME="9000UI_f.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.2 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_f.htm_36633">
 </A>
Setting Up the Template</H3>
<P>
A <CODE>
FoamProgressDialogClass</CODE>
 object (and its children) should be contained within its own resource. The resource should remain unattached to the application tree. The routine <CODE>
PutUpDialogViaUIThread()</CODE>
 will take care of copying and attaching the group of objects.</P>
<P>
To set up your template, perform the following steps:</P>
<UL>
<LI>
Declare the template's resource and make it <CODE>
notDetachable</CODE>
.</LI>
<LI>
Define the root object as a <CODE>
FoamProgressDialogClass</CODE>
 object. </LI>
<LI>
Set the root object not usable (~GS_USABLE).</LI>
<LI>
Set the object GIA_SYS_MODAL (and make sure to turn off its default GIA_MODAL flag).</LI>
<LI>
Set the FPDI_<CODE>
descriptionText</CODE>
 instance field with text describing the action.</LI>
<LI>
Set FPDI_<CODE>
statusText</CODE>
 with text to reside along the status indicator.</LI>
<LI>
Set HINT_DRAW_IN_BOX.</LI>
</UL>
<P CLASS="figTitle">
Code Display 2-12 FoamProgressDialog Template</P>
<PRE>@start FoamProgressDialogTemplate, notDetachable;</PRE>
<PRE>@chunk TCHAR DescriptionText[] = &quot;While, we're waiting a series of dots will appear below.&quot;</PRE>
<PRE>@chunk TCHAR StatusText[] = &quot;Here are the dots: &quot;;</PRE>
<PRE>@object FoamProgressDialogClass ProgressSample = {
    FPDI_descriptionText = @DescriptionText;
    FPDI_statusText = @StatusText;
    GII_attrs = (@default | GIA_SYS_MODAL) &amp; ~GIA_MODAL;
    GI_states = (@default) &amp; ~GS_USABLE;
    HINT_DRAW_IN_BOX;
}</PRE>
<PRE>@end FoamProgressDialogTemplate;</PRE>
<HR>
<A NAME="9000UI_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 5.3 <A HREF="#9000UI_d.htm">FoamProgressDialog</A>: 
<A NAME="9000UI_10.htm_10384">
 </A>
Using a FoamProgressDialog</H3>
<P>
MSG_FOAM_PROGRESS_DIALOG_APPEND_STATUS_TEXT</P>
<P CLASS="figTitle">
Code Display 2-13 Using a FoamProgressDialog</P>
<PRE>&nbsp;</PRE>
<PRE>static ShowProgressDialog ()
{
    optr			progressDialog;
    word			i;
    SemaphoreError			semResult;
    TCHAR			statusAppendStr[] = &quot; . &quot;;</PRE>
<PRE>    progressDialog = PutUpDialogViaUIThread(@FoamProgressDialogTemplate);</PRE>
<PRE>    for ( i=0; i&lt;5; i++) {
	semResult = ThreadPTimedSem(cancelSemaphore, 0);</PRE>
<PRE>	if (semResult == SE_TIMEOUT) {
	    @send ProgressDialog::MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED();
	break;
	}</PRE>
<PRE>	else (
	    ThreadVSem(cancelSempahore);
	    TimerSkeep(30);
	    @call progressDialog::MSG_FOAM_PROGRESS_DIALOG_APPEND_STATUS_TEXT(
				statusAAppendStr);
	}
    }</PRE>
<PRE>    TimerSleep(30);
    TakeDownDialogViaUIThread(progressDialog);</PRE>
<PRE>}</PRE>
<PRE>/* Handler for MSG_MY_PROGRESS_DIALOG_CANCEL_TRIGGERED */</PRE>
<PRE>@method MyProgressDialogClass, MSG_MY_PROGRESS_DIALOG_CANCEL_TRIGGERED
{
    SemaphoreError			semResult;</PRE>
<PRE>    semResult = ThreadPSem(cancelSemaphore);</PRE>
<PRE>    EC_ERROR_IF(
	(semResult == SE_TIMEOUT), CANNOT_GRAB_SEMAPHORE_CANCELPROGDIALOG);
}</PRE>
<PRE>/* Handler for MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED */</PRE>
<PRE>@method MyProgressDialogClass, MSG_MY_PROGRESS_DIALOG_CANCEL_RECEIVED
{
    ThreadVSem(cancelSemaphore);
}</PRE>
<HR>
<A NAME="9000UI_11.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 6 
<A NAME="9000UI_11.htm_53383">
 </A>
Routines for Lists</H2>
<P>
There are two routines useful for presenting the user with a list that is alphabetically sorted and/or presents has multi-column items.</P>
<P>
The <CODE>
FoamGetLexicalOrder()</CODE>
 routine is used for alphabetically ordering strings. It takes a char value and returns a byte-size number. This number represents that character's position in a sorted multi-language &quot;alphabet&quot;. If you are presenting the user with a sorted list of strings, this is the routine to use to sort the list.</P>
<P>
The <CODE>
CreateVisMonikerLine()</CODE>
 routine puts together a multi-column visual moniker. It puts the moniker together from an array of strings and/or bitmaps you supply. It returns the optr of the new moniker. It takes the following arguments:</P>
<UL>
<LI>
a font point size: All text will use this point size.</LI>
<LI>
a font: All text will use this font.</LI>
<LI>
the number of columns</LI>
<LI>
an array of <CODE>
VisMonikerColumn</CODE>
 structures: This data contains the data which will be combined into the multi-column moniker.</LI>
</UL>
<P>
The <CODE>
VisMonikerColumn</CODE>
 structure is defined:</P>
<PRE>typedef struct {
	byte            VMC_width; /* 0 for bitmaps */
	const void *    VMC_ptr; 
	Justification   VMC_just; 
	TextStyle       VMC_style; 
	ColumnBorder    VMC_border; 
} VisMonikerColumn;</PRE>
<P>
For each field, pass a <CODE>
VMC_width</CODE>
 to specify the number of pixels to allow to draw the text, or 0 to signal that this column is a bitmap. <CODE>
VMC_ptr</CODE>
 should point to a string buffer if the column contains text; it should point to a simple bitmap if the column contains a bitmap.</P>
<P>
When you are done using the multi-column moniker, it is up to you to free its memory. Get the memory block handle from the optr and pass that handle to <CODE>
MemFree()</CODE>
.</P>
<HR>
<A NAME="9000UI_zoom.htm"></A>
<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 7
Zoom Level</H2>




<P>
Versions 4.8.8 or later of the 9000i Communicator allow the user to press an off-screen &quot;Zoom&quot; button to toggle between three text size settings -- &quot;Zoom&quot; levels -- and adjust the text size for more comfortable reading. 
<P>

<CENTER>
<TABLE BORDER = 3 WIDTH = 645>
<TR><TD>
<IMG SRC = "../../Nokia9000/GrabBag/zoom_1.gif" WIDTH = 640 Height = 202>
<BR>
<EM>Normal zoom level.</EM>
<P>
<IMG SRC = "../../Nokia9000/GrabBag/zoom_2.gif" WIDTH = 640 Height = 203>
<BR>
<EM>Medium zoom.</EM>
<P>
<P>
<IMG SRC = "../../Nokia9000/GrabBag/zoom_3.gif" WIDTH = 640 Height = 201>
<BR>
<EM>High zoom.</EM>
<P>
</TD></TR>
</TABLE>
</CENTER>

<P>
Note that only some parts of the UI are enlarged as the user chooses a higher zoom level. This is done because it would be impossible to increase the size of some UI components, i.e. larger triggers would not fit into four slots. You should determine how you want your UI components to zoom, then specify the maximum zoom level (size) allowed for each UI component with the hint <CODE>HINT_MAXIMUM_ZOOM_LEVEL</CODE> = ... The three zoom levels are of the enumerated type <CODE>ZoomLevel</CODE>, which is defined as
<PRE>
typedef ByteEnum ZoomLevel;	
#define ZL_ZOOM_1	0
#define ZL_ZOOM_2	1
#define ZL_ZOOM_3	2
</PRE>
<P>
<CODE>HINT_MAXIMUM_ZOOM_LEVEL = ZL_ZOOM_1;</CODE>, the default setting, means that a UI component cannot be zoomed larger than the normal size -- that is, it cannot be zoomed at all. <CODE>HINT_MAXIMUM_ZOOM_LEVEL = ZL_ZOOM_3;</CODE> implies that a UI component can be zoomed at the normal, medium, or maximum zoom levels. 
<P>
The higher the zoom level, the larger the font size, and the fewer the number of characters that will fit into a fixed pixel length field. Thus, if you use a <CODE>CreateVisMoniker...()</CODE> routine, you will need to know how to size the VisMoniker so that it holds the same number of characters at any zoom level. To do this, first check the <A HREF = "../../Nokia9000/Versions/Update_1.htm">version number</A> and make sure that it is software version 4.8.8 or later. If it is, then determine the new size of your font as follows:

<P CLASS="figTitle">
Code Display 2-14 Determining the Point Size of a Zoomed Font</P>
<PRE>
        /* Assume we have a word originalPointSize that is the original point size
           of the font. */

        /* The point size of the font, taking zoom level into consideration. */
        word zoomedSize;

        /* How 'zoomed in' we are. */
        ZoomLevel zoomLevel;

        zoomLevel  = FoamZoomGetLevel();
        zoomedSize = FoamConvertToZoomedSize( zoomLevel, originalPointSize );

        /* Now create the VisMoniker using zoomedSize as the font size. */
</PRE>

<P>
Ctrl-F1 is mapped to the &quot;Zoom&quot; button on the emulator. 

<P>
<HR>
<A NAME="filter.htm"></A>
<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.
FilterList, FilterText</H2>

<P>
<CODE>FilterListClass</CODE> and <CODE>FilterTextClass</CODE> objects provide the UI for interactive
searches on lists of objects. When the user types a string into a <CODE>FilterTextClass</CODE> object, the 
<CODE>FilterTextClass</CODE> object calls a method that uses this text to
create a filter for the <CODE>FilterListClass</CODE> object. This filter controls which monikers the FilterList 
displays, and in what order.</P>

<P>For example, the <EM>Composer</EM> application has a 
<CODE>FilterListClass</CODE> object that displays a long list of songs, and a
<CODE>FilterTextClass</CODE> "Search" field. When the user types a string in the "Search" field,
the FilterList displays only items that start with that string.</P>

<P> 
<CENTER>
<IMG SRC="composer.gif" WIDTH = 646 HEIGHT = 271 ALT = "Composer Application FilterList, FilterTest.">
</CENTER>
</P>



<P>A filter is an array of unique <CODE>word</CODE>s (16-bit numbers) that controls which <EM>application
item identifiers</EM> (the input to <CODE>GDLI_queryMsg</CODE>) are used at a given position
on the displayed list (<EM>physical item identifiers</EM>). Filters let you map the internal list of monikers to
any list configuration you want, including a list with multiple entries of the same moniker, an empty list, or a 
list in a new order.</P>

<P>For example, suppose we have a list of six colors (red, yellow, blue, green, gray, and orange) and a search
box that narrows down the list of displayed colors. When the search field is empty, there is no filter and the list
is displayed normally.</P>

<P>
<CENTER>
<IMG SRC="filter1.gif" WIDTH = 646 HEIGHT = 227 ALT = "FilterList, FilterText Example: No Filter.">
</CENTER>
</P>

<P>When we type 'g' into the search field, we only want to display colors that start with 'g'; <B>g</B>reen and
<B>g</B>ray. Since 'green' and 'gray' are the 3rd and 4th items (counting from zero) of the unfiltered list and we want to
display them in the 0th and 1st entries of the filter list, we create the following filter, a word array with
two entries:
</P>

<B>Filter for FilterText 'g':</B>
<TABLE BORDER=0>
<TR>
<TD BGCOLOR = "silver"><B>Entry #</B></TD>
<TD BGCOLOR = "silver"><B>Value</B></TD>
</TR>
<TR>
<TD BGCOLOR = "tan">0</TD>
<TD BGCOLOR = "gold">3</TD>
</TR>
<TR>
<TD BGCOLOR = "tan">1</TD>
<TD BGCOLOR = "gold">4</TD>
</TR>
</TABLE>

<P>This filter is then passed to the filter list.</P>

<P>
<CENTER>
<IMG SRC="filter2.gif" WIDTH = 646 HEIGHT = 227 ALT = "FilterList, FilterText Example: Filter for 'g'.">
</CENTER>
</P>

<P>Here is a diagram of how filters map the application item identifier to the physical item identifier in the
previous examples:</P>

<P>
<CENTER>
<IMG SRC="filter_diagram.gif" WIDTH = 789 HEIGHT = 435 ALT = "FilterList, FilterText: Filter Diagram.">
</CENTER>
</P>

<P>If the search text filters out all items in the list then the moniker 
<CODE>FLI_noMatchMoniker</CODE>, which is optionally specified by the <CODE>FilterListClass</CODE> object,
is shown.
</P>

<P>
<CENTER>
<IMG SRC="filter3.gif" WIDTH = 646 HEIGHT = 227 ALT = "FilterList, FilterText Example: No match for 'mauve'.">
</CENTER>
</P>


<P CLASS="subsectionLink">
<A HREF="#filter_usage.htm">FilterList and FilterText Usage</A></P>
<P CLASS="subsectionLink">
<A HREF="#filter_list_data.htm">FilterList Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#filter_list_msg.htm">FilterList Messages</A></P>
<P CLASS="subsectionLink">
<A HREF="#filter_text_data.htm">FilterText Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#filter_text_msg.htm">FilterText Messages</A></P>

<HR>
<A NAME="filter_usage.htm"></A>
<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.1 <A HREF="#filter.htm">FilterList and FilterText</A>:
FilterList, FilterText Usage</H3>

<P>
 The following example shows:</P>

<UL>
<LI>A <CODE>FilterListClass</CODE> object.</LI>
<LI>A <CODE>FilterTextClass</CODE> object.</LI>
<LI>A query message handler that determines the moniker for a given application item.</LI>
<LI>A filter message handler that uses the text of the <CODE>FilterTextClass</CODE> to create a 
filter for the <CODE>FilterListClass</CODE>.</LI>
</UL>

<P>Create a <CODE>FilterListClass</CODE> object as you would create a 
<A HREF="../../UI/Lists/Lists_d.htm"><CODE>GenDynamicList</CODE></A>. 
Fill in the necessary <A HREF="../../UI/Lists/Lists_5.htm">GenItemGroup</A> and 
<A HREF="../../UI/Lists/Lists_d.htm">GenDynamicClass</A> data and specify a
query message handler 
<A HREF="../../UI/Lists/Lists_e.htm#IX_GDLI_queryMsg"><CODE>GDLI_queryMsg</CODE></A> that will get the moniker corresponding to an application item 
identifier (a word). You can also specify the monikers to show when the list is
empty either because it has no items (<CODE><A HREF="#filter_list_data.htm">FLI_noItemsMoniker</A></CODE>) or because it filters out all items 
(<CODE><A HREF="#filter_list_data.htm">FLI_noMatchMoniker</A></CODE>).</P>

<P CLASS="figTitle">
Code Display: Creating a FilterList object</P>

<PRE>
/* In the definition of your destination object's class, define a message based
 * on the prototype GEN_DYNAMIC_LIST_QUERY. This prototype passes two arguments:
 * list (the optr of the list sending info) and item (the application item 
 * identifier). */

    @message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_QUERY_COLOR_MONIKER;


/* Set up the selections, just as you would in a normal GenItemGroup. */

typedef enum {
    MC_RED = 0, MC_YELLOW, MC_BLUE, MC_GREEN, MC_GRAY, MC_ORANGE
} MyColors;
#define NUM_COLORS MC_ORANGE+1


/* In the object declaration, include normal instance data for a GenItemGroup and
 * GenDynamicList, making sure to also fill in GDLI_numItems and GDLI_queryMsg with
 * the proper information. The list will retrieve and display monikers automatically 
 * through the query message as they are needed, just like a GenDynamicList.
 * The visMoniker FLI_noItemsMoniker is displayed if GDLI_numItems is zero.  
 * FLI_noMatchMoniker is displayed when GDLI_numItems is not zero
 * but the filter eliminates all items from the list.  */

@visMoniker ListTestNoItems = "&lt; No Colors &gt;";
@visMoniker ListTestNoMatch = "&lt; No Matching Colors &gt;";
@object FilterListClass ListTestFilterList = {
    GIGI_destination = process;
    GIGI_selection = MC_BLUE;
    GIGI_applyMsg = MSG_NOTIFY_COLOR_CHANGE;
    GIGI_numSelections = 1;
    GDLI_numItems = NUM_COLORS;
    GDLI_queryMsg = MSG_QUERY_COLOR_MONIKER;
    GIGI_behaviorType = GIGBT_NON_EXCLUSIVE;

    FLI_noItemsMoniker = @ListTestNoItems;
    FLI_noMatchMoniker = @ListTestNoMatch;

    HINT_ITEM_GROUP_SCROLLABLE;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_ITEM_GROUP_SHOW_SELECTION_EVEN_WHEN_NOT_FOCUS;
}
</PRE>


<P>Create a <CODE>FilterTextClass</CODE> object, a text field that behaves like 
<CODE>TextWithListClass</CODE> (its parent class) except that when the user types in 
the text field, this object sends out a filter
message <CODE><A HREF="#filter_text_data.htm">FTI_filterMsg</A></CODE> after an adjustable timout period 
<CODE><A HREF="#filter_text_data.htm">FTI_filterTimeout</A></CODE>.
It is common practice to put <CODE>FilterListClass</CODE> objects in a gray box with 
a "Search" moniker and search icon.</P>


<P CLASS="figTitle">
Code Display: Creating a FilterText object</P>

<PRE>
/* Make a gray complex moniker box with the text "Search" and a search icon that holds
 * the FilterTextClass object. */

@object ComplexMonikerClass ListTestSearchBarGroup = {
	ComplexMoniker = GrayFrameClass;
	CMI_iconBitmap = CMB_SEARCH;
	CMI_topText = CMT_SEARCH;
	CMI_textStyle = @default & ~TS_BOLD;
	CMI_fontSize = FOAM_NORMAL_FONT_SIZE;
	GI_comp = @ListTestSearchBarTextEdit;

	HINT_CENTER_CHILDREN_VERTICALLY;
	HINT_CENTER_MONIKER;
	ATTR_COMPLEX_MONIKER_PLACE_BITMAP_AT_LEFT;
	HINT_PLACE_MONIKER_TO_RIGHT;
	HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}


/* In the FilterText object declaration, be sure to set TWLC_listObj to the 
 * FilterList object, set FTI_filterMsg to the filter message, and
 * give a timeout FTI_filterTimeout between when the user enters text
 * and the filter message is send. */

@object FilterTextClass ListTestSearchBarTextEdit = {
	GTXI_maxLength = 30;
	GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
	GTXI_destination = process;
	TWLC_listObj = @ListTestFilterList;
	FTI_filterMsg = MSG_LTSBG_SEARCH_COLORS; 
	FTI_filterTimeout = 0;                   /* Use a small timeout because
                                                  * the search is so fast. */
	
	HINT_DEFAULT_FOCUS;
	HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}
</PRE>



<P>Create a query message handler for the filter list. This handler is passed the application item 
identifier (position) of the item to supply a moniker for. 
Write it as you would write a query message handler for a GenDynamicList, but substitute for the 
following functions:</P>

<UL>
<LI><CODE><A HREF = "filter_list_msg.htm#IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER">MSG_FILTER_LIST_REPLACE_ITEM_MONIKER</A></CODE> 
instead of 
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER">MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER</A></CODE>

<LI><CODE><A HREF = "filter_list_msg.htm#IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR">MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR</A></CODE> 
instead of 
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR">MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR</A></CODE>

<LI><CODE><A HREF = "filter_list_msg.htm#IX_MSG_FILTER_LIST_REPLACE_ITEM_TEXT">MSG_FILTER_LIST_REPLACE_ITEM_TEXT</A></CODE> 
instead of 
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT">MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT</A></CODE>
</UL>

<P>
For more information on the query handler message, refer to <A HREF="../../UI/Lists/Lists_f.htm">DynamicList Basics</A>.</P>

<P CLASS="figTitle">
Code Display: Creating a FilterList query message handler</P>

<PRE>
/* Create the list of data in the form of text strings. */

@start ItemText, data;

@chunk char *listMonikers[NUM_COLORS] = {
    "red", "yellow", "blue", "green", "gray", "orange"
};

@end ItemText


/* Create the query message handler. Each time the FilterList needs to display
 * an item, it will call this querying message with the application item 
 * identifier of the item it needs to display. 
 * DEFINITION: void MSG_QUERY_COLOR_MONIKER(optr list, word item) */

@method ListTestProcessClass, MSG_QUERY_COLOR_MONIKER {  
     char ** listMonikersDeref;

     MemLock(HandleOf(@listMonikers));
     listMonikersDeref= LMemDeref(@listMonikers);
     @call ListTestFilterList::MSG_FILTER_LIST_REPLACE_ITEM_TEXT(item, listMonikersDeref[item]);
     MemUnlock(HandleOf(@listMonikers));
}
</PRE>


<P>The filter message takes no arguments and returns nothing. It is called when the user types something into
the <CODE>FilterTextClass</CODE> object. A standard filter message retrieves the filter text (for example, with
<A HREF="../../UI/Text/Text_15.htm#IX_MSG_VIS_TEXT_GET_ALL_PTR"><CODE>MSG_VIS_TEXT_GET_ALL_PTR</CODE></A>), 
performs some search, and then sends 
<A HREF="#filter_list_msg.htm_IX_MSG_FILTER_LIST_INITIALIZE"><CODE>MSG_FILTER_LIST_INITIALIZE</CODE></A>
to the FilterList, passing the number of items in the filtered list (a word) and a filter (an array of unique
words).</P>

<P CLASS="figTitle">
Code Display: Creating a FilterText filter message handler</P>

<PRE>
    #include &lt;Ansi/string.h&gt;    /* To use strcmp() in MSG_LTSBG_SEARCH_COLORS.
                                 * To access the ANSI library, be sure to include 
                                 * the line "library ansic" in the .gp file.  */


/* Define a message that has no parameters and returns nothing. It will
 * be sent by the FilterText object to search the FilterList. */

    @message void MSG_LTSBG_SEARCH_COLORS();


/* Create the filter message handler. MSG_LTSBG_SEARCH_COLORS
 * filters out all color monikers from the list that do not
 * start with the text of text of ListTestSearchBarTextEdit.
 * DEFINITION: void MSG_LTSBG_SEARCH_COLORS(void) */

@method ListTestProcessClass, MSG_LTSBG_SEARCH_COLORS
{	
	word filter[NUM_COLORS];      /* The filter is a word array */
	word filterListSize = 0;      /* Number of items in filtered list */
	char searchBuffer[30];        /* Stores ListTestSearchBarTextEdit text */
	word searchBufferLength;      /* Size of ListTestSearchBarTextEdit text */
	char ** listMonikersDeref;    /* Stores array of color monikers */
	word item = 0;                /* Counter for loop through list items */

        /* Put text of ListTestSearchBarTextEdit into searchBuffer */ 
	@call ListTestSearchBarTextEdit::MSG_VIS_TEXT_GET_ALL_PTR(searchBuffer);

	searchBufferLength = strlen(searchBuffer);

	/* If the search text is empty, then pass a NULL filter to the filter list */
	if(searchBufferLength == 0) {
		@call ListTestFilterList::MSG_FILTER_LIST_INITIALIZE(NUM_COLORS, NULL);
		return;
	} 

	MemLock(HandleOf(@listMonikers));
	listMonikersDeref = LMemDeref(@listMonikers);	

        /* Loop to check whether the filter should include each list item */
	for (item = 0; item < NUM_COLORS; item++)  {
		if (strncmp(searchBuffer, listMonikersDeref[item], searchBufferLength) == 0) {
				filter[filterListSize] = item;	
				filterListSize++;	
		} 
	} 
	MemUnlock(HandleOf(@listMonikers));

      @call ListTestFilterList::MSG_FILTER_LIST_INITIALIZE(filterListSize, filter);
}
</PRE>

<P>Although filter lists and filter texts are usually used to search on a list and narrow the results, 
you can use them for many other
tasks, such as re-ordering the display of a list or displaying an item multiple times in a list. </P>

<P>You can store more information in a filter than just an application item identifier.
If you want the query to highlight the part of a moniker that matches the search text, you 
could store the item number in the lower byte of the word and the position of the match in the upper byte. 
If you use unused bits to encode extra information about the item, this information is significant to the
list because the entire word is part of the item ID.  When the application wants to pass an item ID to the 
list, for example with 
<CODE><A HREF="#filter_list_msg.htm_IX_MSG_FILTER_LIST_SET_SINGLE_SELECTION">MSG_FILTER_LIST_SET_SINGLE_SELECTION</A></CODE>, it must pass the entire word including whatever
extra information you encoded into the identifier.
</P>

<P>Note that a FilterList does not require a corresponding FilterText. 
An application could generate a filter rather than waiting to be prompted by a FilterText object. But in most 
situations you will use a FilterList object together with a FilterText object.</P>

<HR>
<A NAME="filter_text_data.htm"></A>
<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.4 <A HREF="#filter.htm">FilterList, FilterText</A>:
FilterText Instance Data</H3>

<P CLASS="figTitle">
Code Display: FilterTextClass Instance Data</P>

<PRE>
@default GTXI_attrs = (@default | GTA_SINGLE_LINE_TEXT);
<A NAME="filter_text_data.htm_IX_FTI_&ldots;"></A>
@instance word FTI_filterTimeout = 30;
@instance Message FTI_filterMsg;
</PRE>

<P>
<CODE>FilterTextClass</CODE> inheirits from <CODE>TextWithListClass</CODE>. When the user modifies the text in the
text box, the user-defined message <EM>FTI_filterMsg</EM> is sent to the FilterTextClass's <EM>GIGI_destination</EM>. This message takes
no arguments and returns nothing. This message's handler should use the text in the FilterText object to filter 
a FilterList object.  </P>

<P>The user can specify a timeout delay <EM>FTI_filterTimeout</EM> (in ticks) between the time the text is modified and
the time the message is sent. If your filter message will take a long time to process, then give a longer
timeout to avoid long, pausing searches before the user is done typing in the full filter text.
On the other hand, if your filter message is very fast then give a small timeout to make the UI very responsive.
The default delay is half a second (30 ticks).
</P>


<HR>
<A NAME="filter_text_msg.htm"></A>
<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.5 <A HREF="#filter.htm">FilterList, FilterText</A>:
FilterText Messages</H3>

<P>
<CODE>FilterTextClass</CODE> behaves like its parent class <CODE>TextWithListClass</CODE>, but 
sends out the message <EM>FTI_filterMsg</EM> to filter a FilterList whenever text is entered into it.
</P>


<!--******************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_text_msg.htm_IX_MSG_FILTER_TEXT_SEND_FILTER_MSG">
 </A>
MSG_FILTER_TEXT_SEND_FILTER_MSG</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_TEXT_SEND_FILTER_MSG(void);</PRE>
<P>
This message causes the filter timeout to be reset and the <EM>FTI_filterMsg</EM> message to be sent.  
It is sent internally by the FilterText's timeout or by the application to cause an immediate filter.
</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterTextClass</CODE> object.</P>
<P CLASS="refField">
Parameters: None.</P>
<P CLASS="refField">
Return: Nothing.</P>


<!--******************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_text_msg.htm_IX_MSG_FILTER_TEXT_RESET">
 </A>
MSG_FILTER_TEXT_RESET</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_TEXT_RESET(void);</PRE>
<P>
Clears the text currently in the FilterText box and immediately sends out
<EM>FTI_filterMsg</EM>, causing the destination to clear the search.
This is the equivalent of sending <CODE>MSG_VIS_TEXT_DELETE_ALL</CODE> followed by 
<CODE>MSG_FILTER_TEXT_SEND_FILTER_MSG</CODE>.</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterTextClass</CODE> object.</P>
<P CLASS="refField">
Parameters: None.</P>
<P CLASS="refField">
Return: Nothing.</P>


<!--******************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_text_msg.htm_IX_MSG_FILTER_TEXT_RESET_TEXT_IF_NOT_FOCUSED">
 </A>
MSG_FILTER_TEXT_RESET_TEXT_IF_NOT_FOCUSED</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_TEXT_RESET_TEXT_IF_NOT_FOCUSED(void);</PRE>
<P>
This message erases the text in the FilterText box if the focus is lost.
</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterTextClass</CODE> object.</P>
<P CLASS="refField">
Parameters: None.</P>
<P CLASS="refField">
Return: Nothing.</P>


<HR>
<A NAME="filter_list_data.htm"></A>
<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.2 <A HREF="#filter.htm">FilterList, FilterText</A>:
FilterList Instance Data</H3>

<P>
A FilterList could have an empty list for two reasons: the unfiltered list might be empty, 
or the filter might not match any list items.
   <CODE>FilterListClass</CODE> instance data specifies the monikers to show
when the list object is empty for either of these conditions. These monikers are optional. If they are not 
specified then the list will display nothing under the respective conditions.</P>

<P CLASS="figTitle">
Code Display: FilterListClass Instance Data</P>
<PRE>
<A NAME="filter_list_data.htm_IX_FLI_&ldots;"></A>
@instance @visMoniker FLI_noItemsMoniker;
@instance @visMoniker FLI_noMatchMoniker;
</PRE>


<DL>
<DT><CODE>FLI_noItemsMoniker</CODE> is the moniker to display when the list is empty and
there is no filter.</DT>

<DT><CODE>FLI_noMatchMoniker</CODE> is the moniker to display when the list is empty and
there is a filter.
</DL>


<HR>
<A NAME="filter_list_msg.htm"></A>
<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Communicator UI</A>: 8.3 <A HREF="#filter.htm">FilterList, FilterText</A>:
FilterList Messages</H3>

<P>A <CODE>FilterListClass</CODE> object behaves like a 
<A HREF="../../UI/Lists/Lists_d.htm"><CODE>GenDynamicList</CODE></A> (its parent class)
except that the application can supply a filter (a word array) that the <CODE>FilterListClass</CODE> object 
uses to map physical item identifiers to application item identifiers. 
</P>

<H4>Changing the Filter:</H4>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_INITIALIZE">
 </A>
MSG_FILTER_LIST_INITIALIZE</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_INITIALIZE(
        word numItems,
        word *filter );</PRE>
<P>
<P>Use the message <CODE>MSG_FILTER_LIST_INITIALIZE</CODE> whenever you change the 
filter or the number of items in a FilterList. This message 
corresponds to the <CODE>GenDynamicListClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_10.htm#IX_MSG_GEN_DYNAMIC_LIST_INITIALIZE">
MSG_GEN_DYNAMIC_LIST_INITIALIZE</A></CODE>, but should be used instead of 
<CODE>MSG_GEN_DYNAMIC_LIST_INITIALIZE</CODE>. This message notifies the dynamic list to display 
a new list of items. If the list is already usable, it invalidates and deselects all the current
items and re-requests all the monikers.  The list will not scroll back to the top explicitly -- to do
so, send a <CODE>MSG_FILTER_LIST_MAKE_ITEM_VISIBLE</CODE> message to get to the top of the list.
</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any FilterList object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
numItems </EM>
</DT>
	<DD>The new number of displayed items.</DD>
<DT>
<EM>
filter </EM>
</DT>
	<DD>The new list filter. <EM>filter</EM> is an array of application item identifiers
to display in the list. If <EM>filter</EM> is NULL, then physical IDs and application IDs
are the same, and no mapping between them takes place.
If the <EM>filter</EM> is not null and <EM>numItems</EM> is 0, then there are no matching
items, and <CODE>FLI_noMatchMoniker</CODE> will be displayed.
</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>


  <H4>Other Messages:</H4>
<P>
<CODE>FilterListClass</CODE> defines several messages to deal with application item identifiers that
are analogous to several <A HREF="../../UI/Lists/Lists_5.htm"><CODE>GenItemGroupClass</CODE></A> and 
<A HREF="../../UI/Lists/Lists_d.htm"><CODE>GenDynamicListClass</CODE></A> messages:
<UL>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_SET_SINGLE_SELECTION">MSG_FILTER_LIST_SET_SINGLE_SELECTION</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_SET_MULTIPLE_SELECTIONS">MSG_FILTER_LIST_SET_MULTIPLE_SELECTIONS</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_GET_SELECTION">MSG_FILTER_LIST_GET_SELECTION</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_GET_MULTIPLE_SELECTIONS">MSG_FILTER_LIST_GET_MULTIPLE_SELECTIONS</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_GET_ITEM_OPTR">MSG_FILTER_LIST_GET_ITEM_OPTR</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_SET_ITEM_STATE">MSG_FILTER_LIST_SET_ITEM_STATE</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_IS_ITEM_SELECTED">MSG_FILTER_LIST_IS_ITEM_SELECTED</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_MAKE_ITEM_VISIBLE">MSG_FILTER_LIST_MAKE_ITEM_VISIBLE</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER">MSG_FILTER_LIST_REPLACE_ITEM_MONIKER</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR">MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_REPLACE_ITEM_TEXT">MSG_FILTER_LIST_REPLACE_ITEM_TEXT</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_GET_FOCUS_ITEM">MSG_FILTER_LIST_GET_FOCUS_ITEM</A></CODE>
	<LI><CODE><A HREF="#IX_MSG_FILTER_LIST_SET_FOCUS_ITEM">MSG_FILTER_LIST_SET_FOCUS_ITEM</A></CODE>
</UL>
<P>The application must use the <CODE>FilterListClass</CODE>
version of the message instead of the <CODE>GenItemGroupClass</CODE> or
<CODE>GenDynamicListClass</CODE> messages to query and set item states.  The
semantics and parameters of each message are the same as the
GenItemGroup/GenDynamicList counterpart, except where noted.
</P>

<P>In method descriptions the word &quot;identifier&quot; is taken to mean application item
identifier.
</P>



<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_SET_SINGLE_SELECTION">
 </A>
MSG_FILTER_LIST_SET_SINGLE_SELECTION</H6>
<PRE CLASS="syntax">void    MSG_FILTER_LIST_SET_SINGLE_SELECTION(
        word identifier,
        Boolean indeterminate );</PRE>

<P CLASS="refField">
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION">
MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION</A></CODE>. This method sets exactly one
selection for a list. 

<P CLASS="refField">
Parameters:     
<DL>
<DT><EM>identifier</EM></DT>
<DD>The identifier of the item to select.</P></DD>
<DT><EM>indeterminate</EM></DT>
<DD>Pass TRUE if the group should be marked indeterminate.</P></DD>
</DT>
</DL>

<P CLASS="refField">
Return:     Nothing.
</P>

<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_SET_MULTIPLE_SELECTIONS">
 </A>
MSG_FILTER_LIST_SET_MULTIPLE_SELECTIONS</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_SET_MULTIPLE_SELECTIONS(
        word *selectionList,
        word numSelections );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_SET_MULTIPLE_SELECTIONS">
MSG_GEN_ITEM_GROUP_SET_MULTIPLE_SELECTIONS</A></CODE>.
This message sets multiple selections for a list. The caller must pass a pointer to a list of identifiers
that should be selected, along with the number of selections to set.
.</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
selectionList </EM>
</DT>
	<DD>A pointer to the buffer containing a list of item identifiers.</DD>
<DT>
<EM>
numSelections </EM>
</DT>
	<DD>The number of selections in the passed list.</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_GET_SELECTION">
 </A>
MSG_FILTER_LIST_GET_SELECTION</H6>
<PRE CLASS="syntax"> word   MSG_FILTER_LIST_GET_SELECTION(void);</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_GET_SELECTION">
MSG_GEN_ITEM_GROUP_GET_SELECTION</A></CODE>. This message returns the current selection identifier 
for the list object,  or the first selection in the item group if there are 
multiple selections in a non-exclusive or extended-selection-exclusive item group.

</P>

<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters: None.</P>
<P CLASS="refField">
Return: The current selection stored in the <CODE>FilterListClass</CODE>'s <CODE>GIGI_selection</CODE>
instance field (or <CODE>GIGS_NONE</CODE> if there are no selections).</P>

<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_GET_MULTIPLE_SELECTIONS">
 </A>
MSG_FILTER_LIST_GET_MULTIPLE_SELECTIONS</H6>
<PRE CLASS="syntax"> word   MSG_FILTER_LIST_GET_MULTIPLE_SELECTIONS(
       word *selectionList,
       word maxSelections );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS">
MSG_GEN_ITEM_GROUP_GET_MULTIPLE_SELECTIONS</A></CODE>.
This message returns the current list of selections for non-exclusive and extended-selection 
lists. The caller must allocate a buffer for the entries and pass the size of that buffer. If 
there is insufficient space in the passed buffer, no entries will be filled in. You should 
call <CODE><A HREF="#MSG_FILTER_LIST_GET_NUM_SELECTIONS">MSG_FILTER_LIST_GET_NUM_SELECTIONS</A></CODE> beforehand in order to allocate the correct maximum 
size for the buffer. 

</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:     Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
selectionList </EM>
</DT>
	<DD>Buffer to hold the selections.</DD>
<DT>
<EM>
maxSelections </EM>
</DT>
	<DD>Maximum number of selections to place in the buffer.</DD>
</DL>
<P CLASS="refField">
Return: Number of selections. <EM>selectionList</EM> is filled in with the identifiers of the
selections (the list will not be null-terminated).</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_GET_ITEM_OPTR">
 </A>
MSG_FILTER_LIST_GET_ITEM_OPTR</H6>
<PRE CLASS="syntax"> optr   MSG_FILTER_LIST_GET_ITEM_OPTR(
        word identifier );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_9.htm#IX_MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR">
MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR</A></CODE>. This message returns the optr of a GenItem within a 
FilterList.</P> 

<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
identifier </EM>
</DT>
	<DD>The identifier of the item to search for.</DD>
</DL>
<P CLASS="refField">
Return: The optr of the GenItem with the requested identifier (or a null optr if none is found).</P>





<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_SET_ITEM_STATE">
 </A>
MSG_FILTER_LIST_SET_ITEM_STATE</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_SET_ITEM_STATE(
        word identifier,
        Boolean state );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_9.htm#IX_MSG_FILTER_LIST_SET_ITEM_STATE">
MSG_GEN_ITEM_GROUP_SET_ITEM_STATE</A></CODE>. This message sets the state (selected 
or unselected) of a particular GenItem within a FilterList.</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
identifier </EM>
</DT>
	<DD>The identifier of the item to change state.</DD>
<DT>
<EM>
state </EM>
</DT>
	<DD>TRUE to mark item selected, FALSE to mark item unselected.</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_IS_ITEM_SELECTED">
 </A>
MSG_FILTER_LIST_IS_ITEM_SELECTED</H6>
<PRE CLASS="syntax"> Boolean   MSG_FILTER_LIST_IS_ITEM_SELECTED(
        word identifier );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_9.htm#IX_MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED">
MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED</A></CODE>. 
This message checks whether an item within a FilterList is selected, even if that item is not usable, not
enabled, or not within the FilterList. The message returns TRUE if the item is selected, FALSE if it is not
selected. 
</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
identifier </EM>
</DT>
	<DD>The identifier of the item being queried.</DD>
</DL>
<P CLASS="refField">
Return: TRUE (non-zero) if the item <EM>identifier</EM> is selected.</P>





<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_MAKE_ITEM_VISIBLE">
 </A>
MSG_FILTER_LIST_MAKE_ITEM_VISIBLE</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_MAKE_ITEM_VISIBLE(
        word identifier );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> method
<CODE><A HREF="../../UI/Lists/Lists_a.htm#IX_MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE">
MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE</A></CODE>.
This message ensures that an item within a scrolling FilterList is visible, by scrolling the 
list if necessary.
</P>
<P CLASS="refField">
Source: Unrestricted.</P>
<P CLASS="refField">
Destination:    Any <CODE>FilterListClass</CODE> object.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
identifier </EM>
</DT>
	<DD> The identifier of the item to be made visible.</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER">
 </A>
MSG_FILTER_LIST_REPLACE_ITEM_MONIKER</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_REPLACE_ITEM_MONIKER(
        word item, 
        ReplaceItemMonikerFlags flags, 
        word height, 
        word width, 
        word length,
        VisMonikerDataType dataType,
        VisMonikerSourceType sourceType,
        dword source );</PRE>
<P>
Corresponds to the <CODE>GenDynamicListClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER">
MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER</A></CODE>. This message sends a moniker to use for a 
particular list item.
</P>
<P CLASS="refField">
Source: The object handling a FilterList's query message..</P>
<P CLASS="refField">
Destination:    The FilterList specified in the query message.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
item</EM>
</DT><DD>The position of the item needing a moniker.</DD>
<DT>
<EM>
flags</EM>
</DT><DD><CODE>RIMF_NOT_ENABLED</CODE> if the item's moniker should be shown disabled.</DD>
<DT>
<EM>
height</EM>
</DT><DD>If the item is a GString, the height in points.</DD>
<DT>
<EM>
width</EM>
</DT><DD>If the item is a GString, the width in points.</DD>
<DT>
<EM>
length</EM>
</DT><DD>Size of moniker data, in bytes. This value is ignored for <CODE>VMST_OPTR</CODE>. 
If the dataType is <CODE>VMDT_TEXT</CODE> and length is zero, the text moniker is assumed 
to be null-terminated. If the dataType is <CODE>VMDT_GSTRING</CODE> and the length is zero, the 
GString is assumed to end with a <CODE>GR_END_GSTRING</CODE> element.</DD>
<DT>
<EM>
dataType</EM>
</DT><DD>The <CODE>
VisMonikerDataType</CODE>
 of the actual moniker.</DD>
<DT>
<EM>
sourceType</EM>
</DT><DD>The type of pointer referencing the moniker.</DD>
<DT>
<EM>
source</EM>
</DT><DD>A pointer to the moniker data.</DD>
</DL>

<P CLASS="refField">
Return: Nothing.</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR">
 </A>
MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_REPLACE_ITEM_MONIKER_OPTR(
        word item,
        optr moniker );</PRE>
<P>
Corresponds to the <CODE>GenDynamicListClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR">
MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER_OPTR</A></CODE>. This message is a simplified version of 
<CODE>MSG_FILTER_LIST_REPLACE_ITEM_MONIKER</CODE>. The moniker must
be of type VisMoniker and referenced by an optr.

</P>
<P CLASS="refField">
Source: The object handling a dynamic list's query message.</P>
<P CLASS="refField">
Destination:    The FilterList object specified by the query message.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
item </EM>
</DT>
	<DD>The position of the item to display.</DD>
<DT>
<EM>
optr </EM>
</DT>
	<DD>The optr of the VisMoniker to use.</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>

<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_REPLACE_ITEM_TEXT">
 </A>
MSG_FILTER_LIST_REPLACE_ITEM_TEXT</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_REPLACE_ITEM_TEXT(
        word item,
        char *text );</PRE>
<P>
Corresponds to the <CODE>GenDynamicListClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_f.htm#IX_MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT">
MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT</A></CODE>. This message is a simplified 
version of <CODE>MSG_FILTER_LIST_REPLACE_ITEM_MONIKER</CODE>.

</P>
<P CLASS="refField">
Source:  The object handling a dynamic list's query message.</P>
<P CLASS="refField">
Destination:    The FilterList object specified by the query message.</P>
<P CLASS="refField">
Parameters:
<DL>
<DT>
<EM>
item </EM>
</DT>
	<DD>Identifier of item to replace.</DD>
<DT>
<EM>
text </EM>
</DT>
	<DD>Far pointer to a null-terminated text string.</DD>
</DL>
<P CLASS="refField">
Return: Nothing.</P>

<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_GET_FOCUS_ITEM">
 </A>
MSG_FILTER_LIST_GET_FOCUS_ITEM</H6>
<PRE CLASS="syntax"> word   MSG_FILTER_LIST_GET_FOCUS_ITEM(void);</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_GET_FOCUS_ITEM">
MSG_GEN_ITEM_GROUP_GET_FOCUS_ITEM</A></CODE>. This message gets the focus item of a FilterList. 

</P>
<P CLASS="refField">
Source: Anywhere.</P>
<P CLASS="refField">
Destination:    Any FilterList.</P>
<P CLASS="refField">
Parameters: None.

<P CLASS="refField">
Return: The identifier of the item which currently has the focus, or <CODE>GIGS_NONE</CODE> if none.</P>


<!--****************************************** -->
<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_SET_FOCUS_ITEM">
 </A>
MSG_FILTER_LIST_SET_FOCUS_ITEM</H6>
<PRE CLASS="syntax"> void   MSG_FILTER_LIST_SET_FOCUS_ITEM(
        word identifier );</PRE>
<P>
Corresponds to the <CODE>GenItemGroupClass</CODE> message
<CODE><A HREF="../../UI/Lists/Lists_8.htm#IX_MSG_GEN_ITEM_GROUP_SET_FOCUS_ITEM">
MSG_GEN_ITEM_GROUP_SET_FOCUS_ITEM</A></CODE>. This message scrolls the FilterList
list so that the specified item will be the visible focus. 

</P>
<P CLASS="refField">
Source: Anywhere.</P>
<P CLASS="refField">
Destination:    Any FilterList.</P>
<P CLASS="refField">
Parameters: 
<DL>
<DT><EM>identifier</EM></DT>
<DD>The ID of the item which will be the focus of the item group.
</DD>
</DL>

<P CLASS="refField">
Return: Nothing.</P>


<!--****************************************** -->

<H6 CLASS="RefETitle">
<A NAME="filter_list_msg.htm_IX_MSG_FILTER_LIST_MAP_PHYSICAL_TO_APP">
 </A>
MSG_FILTER_LIST_MAP_PHYSICAL_TO_APP</H6>
<PRE CLASS="syntax">word    MSG_FILTER_LIST_MAP_PHYSICAL_TO_APP(
        word    id);</PRE>
<P>
Use <CODE>MSG_FILTER_LIST_MAP_PHYSICAL_TO_APP</CODE> to get the application ID that corresponds to a
physical item location <EM>id</EM> on a FilterList from the filter.</P>

<P CLASS="refField">
Source:    While this message can be called at any time, it is normally not necessary because the other FilterList 
methods automatically handle this mapping task.</P>

<P CLASS="refField">
Parameters:</P>

<DL>
<DT><EM>
id</EM>
</DT>
<DD>The physical identifier of a list item.</DD>
</DL>

<P CLASS="refField">
Return:   Returns the application item ID that corresponds to the physical item ID, or GIGS_NONE if the 
current filter doesn't contain the specified item.</P>





<HR>

This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
