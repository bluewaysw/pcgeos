<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Modem Connections</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>

<H1 CLASS="chapterTitle">

Modem Connections

</H1>
<P>
This chapter discusses how to set up your Nokia 9000i Communicator to emulate a Hayes-compatible modem to establish a direct serial connection.</P>
<P>
On the Nokia 9000i Communicator, you connect through a &quot;virtual&quot; serial port and use a stream to read and write data to this port just as you would with an actual serial port. (For more information on streams, see <A HREF="../../Communication/Stream/combo.htm">the Streams chapter</A> of the Concepts Book.) The modem driver handles data notifications from the port.</P>
<P>
The ModemC Library provides an interface to the modem driver while the VirtualSerial Library provides a stream interface to the &quot;virtual&quot; serial port. In addition, the <CODE>
modem.goc</CODE>
 module provides a set of basic routines for establishing a modem
 connection. You can drop this module into any application that uses a
 modem.  
</P>

<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Modem_1.htm">1 Introduction</A><BR>
&nbsp;&nbsp;<A HREF="#Modem_2.htm">2 Connecting</A><BR>
&nbsp;&nbsp;<A HREF="#Modem_3.htm">3 Sending Data</A><BR>
&nbsp;&nbsp;<A HREF="#Modem_4.htm">4 Receiving Data</A><BR>
&nbsp;&nbsp;<A HREF="#Modem_5.htm">5 Disconnecting</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Modem_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Modem Connections</A>: 1 
<A NAME="Modem_1.htm_76129">
 </A>
Introduction</H2>
<P>
Sending and receiving data over a serial line is similar to sending and receiving data through a socket connection. You configure your hardware, make the connection, open streams for sending and receiving data, and close the connection (<EM>
i.e.</EM>
, hang up).</P>
<P>
This chapter uses the MTalk sample application to illustrate how to
	set up and use a modem connection. MTalk establishes a simple &quot;talk&quot; exchange between two devices over a modem connection. It provides user interface for taking text input (which it sends to the other end of the connection) and for displaying data received from the other end of the connection.</P>
<P>
(Note:  Both <CODE>mtalk.goc</CODE>, the sample application discussed in
 this chapter, and  <CODE>modem.goc</CODE>, the module that provides its basic modem
 connectivity, live in \APPL\SDK_9000\MTALK\.)

</P>
<HR>
<A NAME="Modem_2.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Modem Connections</A>: 2 
<A NAME="Modem_2.htm_87779">
 </A>
Connecting</H2>
<P>
To establish a connection, MTalk does the following:</P>
<UL>
<LI>
allocates a buffer to be used (later) for holding received data</LI>
<LI>
prompts the user for the phone number to dial</LI>
<LI>
calls <CODE>
ModemConnect()</CODE>
 (defined in modem.goc) to make the connection</LI>
</UL>
<P CLASS="figTitle">
Code Display 9-1 Making A Serial Line Connection</P>
<PRE>    /*
     * phoneNum - Phone number to dial.
     * retVal - Return value of ModemConnect().
     */
    char        phoneNum[MAX_PHONE_NUM_LENGTH + 1];
    Boolean     retVal;</PRE>
<PRE>    /*
     * Allocate a global memory block to be used as a buffer to hold received data.
     * A local buffer variable in the read function would use up
     * precious stack space, and a global buffer variable
     * would increase the size of the application's fixed data segment,
     * which degrades overall memory manager performance.
     *
     * Allocating it to be DISCARDABLE has further advantages.
     * Because we don't care what happens to the contents after they
     * have been processed, we'll allow the memory manager to throw
     * the block out if it decides it needs the heap space. This
     * means a little extra work for us whenever we want to use the
     * block, since we have to check for this condition, and
     * reallocate if necessary.
     */</PRE>
<PRE>    recvBuffer = MemAlloc( INPUT_BUFFER_SIZE, HF_DISCARDABLE, 0 );</PRE>
<PRE>    /*
     * If the buffer was not successfully allocated, memory must be getting low
     * so shut down.
     */
    if ( recvBuffer == NullHandle )
    {
	@send application::MSG_META_QUIT();
	return;
    }</PRE>
<PRE>    /*
     * Get the phone number to dial.
     */
    @call MTalkPhoneNumberText::MSG_VIS_TEXT_GET_ALL_PTR( phoneNum );</PRE>
<PRE>    /*
     * Create the modem connection and register the object and messages
     * it will receive when data is received or when the call has ended.
     * Note: in this example, oself refers to the process object.
     * Remember that ModemConnect() returns FALSE if it successfully makes
     * the connection.
     */
    retVal = ModemConnect( phoneNum,
			 oself,
			 MSG_MTALK_PROCESS_READ_DATA,
			 MSG_MTALK_PROCESS_CALL_ENDED );</PRE>
<PRE>    /*
     * If the connection failed, free the buffer and return. (Note: after freeing
     * any allocated memory, it is good practice to re-set handles and pointers to
     * Null so that you can test for a Null value later.)
     */
    if ( retVal )
    {
	MemFree( recvBuffer );
	recvBuffer = NullHandle;
	return;
    }</PRE>
<P>
<CODE>
ModemConnect()</CODE>
 takes care of the &quot;housekeeping&quot; details involved in making a connection. Specifically, this routine takes care of the following:</P>
<UL>
<LI>
checks to make sure the phone is available for use</LI>
<LI>
opens and configures the port (on the Nokia 9000i Communicator, the &quot;virtual&quot; serial port is COM1)</LI>
<LI>
initializes the modem</LI>
<LI>
sets up to receive notification when data arrives on the serial port or when the call ends</LI>
<LI>
dials the phone number</LI>
</UL>
<P>
<CODE>
ModemConnect()</CODE>
 takes four parameters:</P>
<DL>
<DT>
<EM>phoneNumber</DT><DD>
</EM>Char pointer to the phone number to dial.</DD>
<DT>
<EM>dataReceiver</DT><DD>
</EM>Optr to the object that will receive data or call end notification.</DD>
<DT>
<EM>dataReceiptMessage</DT><DD>
</EM>Message sent when data arrives on the port.</DD>
<DT>
<EM>endCallMessage</DT><DD>
</EM>Message sent when the call has ended.</DD>
</DL>
<P>
<CODE>
ModemConnect()</CODE>
 returns FALSE if the attempt to connect is successful. If the attempt is unsuccessful, it displays a dialog box notifying the user of the error. Possible error messages include:</P>
<DL>
<DT>
&quot;Connectivity Problem: </DT><DD>
Data calls cannot be made while another call is active.&quot;</DD>
<DT>
&quot;Connectivity Problem: Line is busy. Try again later.&quot;</DT>
<DT>
&quot;Connectivity Problem: </DT><DD>
No answer. Check the phone number and try again later.&quot;</DD>
<DT>
&quot;Connectivity Problem: General Error.&quot;</DT>
<DT>
&quot;Connectivity Problem: Error initializing modem.&quot;</DT>
</DL>
<HR>
<A NAME="Modem_3.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Modem Connections</A>: 3 
<A NAME="Modem_3.htm_14750">
 </A>
Sending Data</H2>
<P>
To send data, MTalk does the following:</P>
<UL>
<LI>
retrieves the text the user has typed in and puts it into a memory block</LI>
<LI>
locks the block down (to get a pointer to the text)</LI>
<LI>
gets the size of the text</LI>
<LI>
calls <CODE>
ModemSend()</CODE>
 (defined in modem.goc) to send the data</LI>
<LI>
unlocks the memory block</LI>
</UL>
<P CLASS="figTitle">
Code Display 9-2 Sending Data Over A Serial Connection</P>
<PRE>    /*
     * textBlock - Handle of block containing text to send.
     * textPtr - Pointer to text to send.
     * textSize - Size of text to send.
     */
    MemHandle		textBlock;
    char *		textPtr;
    int		textSize;</PRE>
<PRE>    /*
     * Get text that user has typed and put it into a newly created memory block.
     * Lock the block down on the heap and obtain a pointer to it.
     */
    textBlock = @call MTalkSendText::MSG_VIS_TEXT_GET_ALL_BLOCK( NullHandle );
    textPtr = MemLock( textBlock );</PRE>
<PRE>    /*
     * Get the size of the text then send it.
     */
    textSize = LocalStringSize( textPtr );
    if ( ModemSend( textSize, (byte*)textPtr ) != STREAM_NO_ERROR )
    {
	/* handle the error */
    }</PRE>
<PRE>    /*
     * Once the text has been sent, free its block.
     */
    MemFree( textBlock );</PRE>
<P>
<CODE>
ModemSend()</CODE>
 calls the VirtualSerial Library routine, <CODE>
VirtualSerialWrite()</CODE>
, to send the passed data. <CODE>
VirtualSerialWrite()</CODE>
 writes the passed data to stream and, if necessary, blocks until enough space in the stream becomes available. (If you don't want to block, pass STREAM_NO_BLOCK in <CODE>
VirtualSerialWrite()</CODE>
.)</P>
<P>
<CODE>
ModemSend()</CODE>
 takes two arguments:</P>
<DL>
<DT>
<EM>dataLength</DT><DD>
</EM>Length of the string (not counting the Null character).</DD>
<DT>
<EM>data</DT><DD>
</EM>Pointer to the data to be sent.</DD>
</DL>
<P>
<CODE>
ModemSend()</CODE>
 returns a <CODE>
StreamError</CODE>
 value:</P>
<DL>
<DT>
STREAM_NO_ERROR</DT><DD>
if it successfully sends the data. </DD>
<DT>
STREAM_CLOSED</DT><DD>
if the stream is not open.</DD>
<DT>
STREAM_SHORT_READ_WRITE</DT><DD>
if the required amount of space was not available and STREAM_NO_BLOCK was specified.</DD>
</DL>
<HR>
<A NAME="Modem_4.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Modem Connections</A>: 4 
<A NAME="Modem_4.htm_29679">
 </A>
Receiving Data</H2>
<P>
When the modem driver receives notification that data has arrived on the port, it sends a pre-registered message to a specified object. (You specify both the object and the message when you call <CODE>
ModemConnect()</CODE>
.) </P>
<P>
In the MTalk example, the driver sends MSG_MTALK_PROCESS_READ_DATA to the process object when data has arrived on the port. The handler for this message is shown in <A HREF="#Modem_4.htm_24855"> Receiving Data Over A Serial Connection</A>
.</P>
<P>
To receive data, MTalk does the following:</P>
<UL>
<LI>
checks to make sure the connection is still open</LI>
<LI>
locks the input buffer down (to get a pointer to the text)</LI>
<LI>
calls <CODE>
ModemReceive()</CODE>
 (defined in modem.goc) to read incoming data</LI>
<LI>
displays read data</LI>
<LI>
unlocks the block</LI>
</UL>
<P CLASS="figTitle">
Code Display 9-3 <A NAME="Modem_4.htm_24855">
 </A>
Receiving Data Over A Serial Connection</P>
<PRE>@method MTalkProcessClass, MSG_MTALK_PROCESS_READ_DATA
{
	/*
	 * recvDataSize - Amout of data actually read in.
	 * recvDataPtr - Pointer to data to read in.
	 * retVal - Return value of ModemReceive().
	 */
    word		revDataSize;
    char *		recvDataPtr;
    StreamError		retVal;</PRE>
<PRE>	/*
	 * Check to see if connection is still open. Because of message queueing
	 * delays, we may have received this data notification after the connection
	 * has been closed.
	 *
	 * ConnectionOpen - global flag that keeps track of whether
	 * the connection is open or closed.
	 */
    if ( ConnectionOpen == FALSE )
    {
	return;
    }</PRE>
<PRE>	/*
	 * Lock the input buffer down on the heap, and obtain a pointer to it.
	 * (Note: This buffer is a memory block that was allocated in the
	 * &quot;Connecting&quot; example.)
	 */
    recvDataPtr = MemLock( recvBuffer );</PRE>
<PRE>	/*
	 * A NULL pointer means that the memory manager has gone ahead
	 * and discarded the buffer block since the last time it was
	 * unlocked.  So we need to reallocate it here.  Note that the
	 * MemHandle is still in use; it just isn't bound to any block of memory.
	 */
    if ( recvDataPtr == NULL )
    {
	    /*
	     * Reallocate the block, locking it immediately,
	     * so it doesn't get discarded again. If the block cannot
	     * be re-allocated, memory must be low so close the connection.
	     */
	if (( MemReAlloc( recvBuffer, RECV_BUFFER_SIZE, HAF_LOCK ) == NullHandle)
	{
		@send self::MSG_MTALK_PROCESS_CLOSE();
		return;
	}</PRE>
<PRE>	    /*
	     * After re-allocating the locked block, dereference its handle
	     * to obtain a pointer to it.
	     */
	recvDataPtr = MemDeref( recvBuffer );
    }</PRE>
<PRE>	/*
	 * Read available data up to the size of our buffer then display it.
	 */
	if ( ModemReceive( RECV_BUFFER_SIZE, (byte*)recvDataPtr, &amp;recvDataSize )
							== STREAM_NO_ERROR )
	{
	    @call MTalkOutText::MSG_VIS_TEXT_APPEND_PTR( recvDataPtr, 
						     recvDataSize );
	}</PRE>
<PRE>	/*
	 * If the read data filled the entire buffer, there's a good
	 * chance more data is available so send the message through the
	 * process object's queue again.  (We do not want to keep reading
	 * in a loop in case the other side dumped a very large stream
	 * of data; this would keep the process object from handling
	 * other messages in its queue.)
	 */</PRE>
<PRE>    if ( RECV_BUFFER_SIZE == recvDataSize ) {
	@send ,forceQueue self::MSG_MTALK_PROCESS_READ_DATA();
    }</PRE>
<PRE>	/*
	 * Once all the data has been read, unlock the buffer block.
	 */
    MemUnlock( recvBuffer );</PRE>
<PRE>} /* end of MSG_MTALK_PROCESS_READ_DATA */</PRE>
<P>
Like <CODE>
ModemSend()</CODE>
, <CODE>
ModemReceive()</CODE>
 calls a VirtualSerial routine, <CODE>
VirtualSerialRead()</CODE>
, to read incoming data. Because no blocking is specified, <CODE>
VirtualSerialRead()</CODE>
 reads only data that is currently available in the stream. (If you want the routine to block until there is enough data in the stream to fill the entire buffer, pass STREAM_BLOCK in <CODE>
VirtualSerialRead()</CODE>
.)</P>
<P>
<CODE>
ModemReceive()</CODE>
 takes three arguments:</P>
<DL>
<DT>
<EM>recvBufLength</DT><DD>
</EM>Size of allocated buffer (in bytes).</DD>
<DT>
<EM>recvBuf</DT><DD>
</EM>Byte pointer to the buffer.</DD>
<DT>
<EM>bytesReceived</DT><DD>
</EM>Word pointer. <CODE>
ModemReceive()</CODE>
 writes the number of bytes actually read in to this parameter.</DD>
</DL>
<P>
<CODE>
ModemReceive()</CODE>
 returns a <CODE>
StreamError</CODE>
 value:</P>
<DL>
<DT>
STREAM_NO_ERROR</DT><DD>
if it successfully reads the data. </DD>
<DT>
STREAM_CLOSED</DT><DD>
if the stream is not open.</DD>
<DT>
STREAM_SHORT_READ_WRITE</DT><DD>
if the required amount of data was not available and STREAM_NO_BLOCK was specified.</DD>
</DL>
<HR>
<A NAME="Modem_5.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Modem Connections</A>: 5 
<A NAME="Modem_5.htm_89498">
 </A>
Disconnecting</H2>
<P>
When a call has ended, the modem driver sends a pre-registered message to a specified object. (You specify both the message and the receiving object in <CODE>
ModemConnect()</CODE>
.)</P>
<P>
In the MTalk example, the modem driver sends MSG_MTALK_PROCESS_CALL_ENDED to the process object when the call has ended for any reason. This message checks if the connection is still open and if it is, calls yet another message, MSG_MTALK_PROCESS_CLOSE, to close it. The handler for MSG_MTALK_PROCESS_CLOSE is shown in <A HREF="#Modem_5.htm_96554"> Ending A Serial Line Connection</A>
.</P>
<P CLASS="figTitle">
Code Display 9-4 <A NAME="Modem_5.htm_96554">
 </A>
Ending A Serial Line Connection</P>
<PRE>@method MTalkProcessClass, MSG_MTALK_PROCESS_CLOSE
{
	/* close the connection */
    ModemDisconnect();</PRE>
<PRE>	/*
	 * Free the buffer and re-set the (global) &quot;connection&quot; flag
	 * to indicate the connection is closed.
	 */
    MemFree( recvBuffer );
    recvBuffer = NullHandle;
    ConnectionOpen = FALSE;</PRE>
<PRE>} /* end of MSG_MTALK_PROCESS_CLOSE */</PRE>
<P>
<CODE>
ModemDisconnect()</CODE>
, defined in modem.goc, takes care of the following:</P>
<UL>
<LI>
hangs up the phone</LI>
<LI>
closes the &quot;virtual&quot; serial port</LI>
</UL>
<P>
<CODE>
ModemDisconnect()</CODE>
 takes no parameters and returns void.</P>
<P>
&nbsp;</P>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
