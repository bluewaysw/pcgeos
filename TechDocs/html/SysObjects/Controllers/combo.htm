<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Generic UI Controllers</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
Generic UI Controllers

</H1>
<P>
<A NAME="index.htm_IX_GenControlClass">
 </A>
Many applications will create their menus and dialog boxes from scratch, using various GenInteraction and GenTrigger objects. Several system components, however, use a standard base format across all applications. For these components, GEOS provides a number of controller objects.</P>
<P>
A controller object is one that provides UI gadgetry to control a certain set of features. For example, the GenViewControl object provides all the UI--including menus, dialogs, and tool bars, if appropriate--to alter a GenView's scaling and other features. Many libraries such as the text library provide controller objects that make the use of the library almost trivial.</P>
<P>
To make inclusion of these controllers even easier, the UI offers a GenToolControl; this object provides all the functionality and UI gadgetry to allow the user to configure his own toolbars and menus from the tools provided by a controller.</P>
<P>
Finally, developers writing libraries or suites of applications may wish to create their own controller classes. This is neither difficult nor complex, though it will be done primarily by programmers writing libraries for use by many applications.</P>
<P>
This chapter describes what controllers are and how they work. It also discusses which controllers are available in the system, as well as the GenToolControl object and how it's used. Finally, it details how to create your own controller classes. In order to fully understand this chapter, you should be familiar first with the generic UI, menus and dialog boxes, and the General Change Notification mechanism.

</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Controllers_1.htm">1 Controller Features and Functions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_2.htm">1.1 Controller Features</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_3.htm">1.2 How Controllers Work</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_4.htm">1.3 Using Controllers</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_5.htm">2 Standard Controllers</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_6.htm">3 Using Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_7.htm">3.1 Using a Basic GenControl Object</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_8.htm">3.2 Using Tools</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_9.htm">4 Creating Your Own Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_a.htm">4.1 GenControlClass Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_b.htm">4.2 Subclassing GenControlClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_c.htm">4.3 Advanced GenControlClass Usage</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_d.htm">5 GenToolControlClass</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_e.htm">6 GenToolGroupClass</A><BR>
&nbsp;&nbsp;<A HREF="#Controllers_f.htm">7 Other Controllers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_10.htm">7.1 ColorSelectorClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_11.htm">7.2 GenPageControlClass</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Controllers_12.htm">7.3 The Float Format Controller</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Controllers_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 1 
<A NAME="Controllers_1.htm_39608">
 </A>
Controller Features and Functions</H2>
<P>
Controller objects let you include a library's features in your applications with limited work. The controller provides the basic UI gadgetry and feature management functions so you don't have to.</P>
<P>
Every library has a set of features that will be used by all or most of the library's users. For example, applications which use the text objects (GenText and VisText) are likely to allow the user to alter justification, font, and text style. Rather than forcing every application to create its own menus and dialogs and lists for managing these features, the text library exports a number of controllers that can be included in the application's UI; these controllers provide and manage the menu items and lists for the user. They also interact directly with the text objects to change the attributes affected.</P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_2.htm">Controller Features</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_3.htm">How Controllers Work</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_4.htm">Using Controllers</A></P>
<HR>
<A NAME="Controllers_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 1.1 <A HREF="#Controllers_1.htm">Controller Features and Functions</A>: 
<A NAME="Controllers_2.htm_78121">
 </A>
Controller Features</H3>
<P>
Controller objects provide the following features and benefits to application and library programmers:</P>
<UL>
<LI>
Ease of use<BR>
Controllers are intended to be &quot;plug-and-play&quot; objects. Programmers simply include the controller to get all the appropriate UI gadgetry.</LI>
<LI>
Consistency of appearance<BR>
All applications that use a particular controller will appear consistent to the user. The controller knows the appropriate structure of its menus and dialogs, and all such controllers will appear the same to the user, increasing the application's ease of use.</LI>
<LI>
Automatic tool management<BR>
By using controllers along with a GenToolControl object, an application can allow the user to configure his own tool set. Controllers can have their UI placed along a display's edge, in the normal menus, or in a floating tool box; the GenToolControl allows users to decide where the tools will appear without affecting the application at all.</LI>
<LI>
Extendability of features<BR>
Any application that uses a controller can automatically include future features of a library. For example, if the GenView object were upgraded in the future to allow new features, the GenViewControl object would likely also be updated. Any application including the GenViewControl would automatically get the new UI and features without recompilation. Applications that do not use controllers will not automatically gain the benefits of upgraded libraries.</LI>
</UL>
<P>
The GenControl is most useful for simple controllers. It is based on core UI objects (GenTrigger, GenInteraction, etc.) and is subclassed from <CODE>
GenInteractionClass</CODE>
. Applications that will have extremely complex controller-type functions may want to write their controllers from scratch--this is discussed in <A HREF="#Controllers_9.htm_72863"> Creating Your Own Controllers</A>
.</P>
<HR>
<A NAME="Controllers_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 1.2 <A HREF="#Controllers_1.htm">Controller Features and Functions</A>: 
How Controllers Work</H3>
<P>
When you use a controller object, you are really using three different types of objects: The controller itself, the UI gadgetry it creates and manages, and the controlled object (sometimes called a &quot;data item&quot;) it acts on. For the most part, you will not have to understand these relationships unless you are creating your own controllers with <CODE>
GenControlClass</CODE>
.</P>
<P>
<A NAME="Controllers_3.htm_IX_PSCText Sample Application">
 </A>
To explain how a controller works with both of these other objects, this section uses a simple application that uses a single controller. The controller used is a PointSizeControl object, exported by the text library and used with the GenText and VisText objects; in this example, it interacts with two GenText objects. The entire source code of the application's <STRONG CLASS="fileName">
psctext.goc</STRONG>
 file is given in <A HREF="#Controllers_4.htm_70215"> A Sample Controller Application (psctext.goc)</A>
. This code display does not show the <STRONG CLASS="fileName">
psctext.gp</STRONG>
 file because it is similar to Hello World's parameters file.
<IMG SRC="Controllers_3_objTree.gif">

</P>
<P>
A screen dump of the application is shown below and the entire object tree declared in the application is shown above. The controller object (PSCTSizeControl) declares and sets up the entire menu structure of the Sizes menu, so the menu items do not need to be declared in the application's <STRONG CLASS="fileName">
.goc</STRONG>
 file.
<IMG SRC="Controllers_3_dump.gif">

</P>
<P>
The interaction between the controller, the text objects, and the controller's UI objects is simple. When the controller is first loaded in from the application's Interface resource block, it also loads in the associated UI gadgetry for the Sizes menu. The menu items are added as children of the controller without the programmer having to do anything extra.</P>
<P>
The data item objects (in this example the GenText objects), when loaded or created, create and set up special General Change Notification (GCN) lists. In the PSCText sample application, the text library sets up a GCN list for the notification type GAGCNLT_APP_TARGET_NOTIFY_CHAR_ATTR_CHANGE. When changes to the text object occur, the text object will send a message to this GCN list.</P>
<P>
The controller object knows inherently which GCN lists it should be added to. When it is loaded, it adds itself to these lists. In the sample application, the PSCTSizeControl object will add itself automatically to the GCN list for GAGCNLT_APP_TARGET_NOTIFY_CHAR_ATTR_CHANGE.</P>
<P>
The interactions between the three components are summarized in the figure below. The application programmer needs to know very little about the interactions of these components; in fact, unless you are creating your own controller objects, you can get away with knowing only a very few things. Building your own controller is detailed in <A HREF="#Controllers_9.htm_72863"> Creating Your Own Controllers</A>
, and the basics of controller use, along with the source code for <STRONG CLASS="fileName">
psctext.goc</STRONG>
, are shown in <A HREF="#Controllers_4.htm_71374"> Using Controllers</A>
.
<IMG SRC="Controllers_3_interactions.gif">

</P>
<HR>
<A NAME="Controllers_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 1.3 <A HREF="#Controllers_1.htm">Controller Features and Functions</A>: 
<A NAME="Controllers_4.htm_71374">
 </A>
Using Controllers</H3>
<P>
As stated above, for an application to use a controller (or several controllers), the application programmer needs to know very little about the controller itself. <A HREF="#Controllers_4.htm_70215"> A Sample Controller Application (psctext.goc)</A>
 shows the <EM>
entire</EM>
 code for the PSCText sample application; note that the programmer has to add no code (just object declarations) to create two editable text objects which can have selectable and settable point sizes.</P>
<P>
The application programmer must do two essential things to use a controller object: First, you must include and set up the controller properly. In the example application, the PSCTSizeControl object is a menu; it could easily have been set up as GIV_DIALOG (typically, though, this particular controller is implemented as a menu). Because <CODE>
GenControlClass</CODE>
 is a subclass of <CODE>
GenInteractionClass</CODE>
, you can set up the controller exactly like any other GenInteraction.</P>
<P>
Second, you must set up your data objects to interact with the controller. The data objects should be written for this automatically; for example, the GenText objects automatically send the proper notification to the GCN mechanism to ensure that all appropriate controllers are notified of all changes. Note, however, that the GenText objects have to be set targetable before the controller can operate on them. Some data objects will be set up to work with their controllers automatically; others may need to have certain attributes set. The GenText objects, for example, are not by default targetable; the controller, however, sends its messages to the application's target object. If the GenTexts are not targetable, they will never gain the application's target and therefore will never react to the controller's requests.</P>
<P>
To use a particular controller, you should learn about how that controller's data object needs to be set up. To help you with this, <A HREF="#Controllers_5.htm_53611"> Standard Controllers</A>
 lists the various controllers included in the system and where they are documented.</P>
<P CLASS="figTitle">
Code Display 12-1 <A NAME="Controllers_4.htm_70215">
 </A>
A S<A NAME="Controllers_4.htm_IX_PSCText Sample Application">
 </A>
ample Controller Application (psctext.goc)</P>
<PRE>@include &lt;stdapp.goh&gt;
@include &lt;ui.goh&gt;
@include &lt;Objects/Text/tCtrlC.goh&gt;</PRE>
<PRE>/* The PSCText application's process class runs the application's primary
 * thread. For a description of GenProcessClass, see Hello World. */</PRE>
<PRE>@class PSCTextProcessClass, GenProcessClass;
@endc
@classdecl PSCTextProcessClass;</PRE>
<PRE>@start AppResource;
    /* The PSCTextApp object defines the application object for the
     * application. For full information, see Hello World.
     * The controller is also placed on the application's self-load-options
     * GCN list to ensure that it loads its options properly when returning
     * from saved state. This is shown below in the second of the two
     * GCN list declarations. */
@object GenApplicationClass PSCTextApp = {
    GI_visMoniker = &quot;Point Size Control Sample Application&quot;;
    GI_comp = @PSCTPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @2PSCTPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) = @PSCTSizeControl;
}</PRE>
<PRE>@end AppResource</PRE>
<PRE>@start Interface;</PRE>
<PRE>/* The PSCTPrimary object serves as the primary window of this sample application.
 * Its children are the Point Size Control object and the two GenText objects. */
@object GenPrimaryClass PSCTPrimary = {
    GI_comp = @PSCTSizeControl, @PSCTopTextObj, @PSCBotTextObj;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/* The PSCTSizeControl object is the controller that provides all the point size
 * functionality. It will automatically create a menu called &quot;Sizes&quot; (due to the
 * GI_visMoniker) and all the entries of that menu.
 * This controller will work on whichever of the two GenText objects
 * (PSCGTopTextObj and PSCBotTextObj) is set the target; the controller's UI
 * objects (the Sizes menu) send their messages directly to the target via the
 * TravelOption TO_TARGET. If a point size is selected as the user's first action,
 * it will work on PSCTopTextObj because that is set up as the default target. */
@object PointSizeControlClass PSCTSizeControl = {
    GI_visMoniker = 'z', &quot;Sizes&quot;;					/* Give the controller a name */
    GII_visibility = GIV_POPUP;					/* Make the controller a menu */
}</PRE>
<PRE>/* These two GenText objects are simple; they use only the defaults plus the
 * items shown here. Both must be set targetable (GA_TARGETABLE) to be included
 * in the target hierarchy; this is necessary when using controllers because of
 * the note in the above comment. The PSCTopTextObj is made the default focus
 * (to get keyboard input) and the default target (for controller operation). */
@object GenTextClass PSCTopTextObj = {
    GI_attrs = @default | GA_TARGETABLE;
	/* Initially, this text object uses the VisTextDefaultSize VTDS_12
	 * (12 pts) and the VisTextDefaultFont VTDF_URW_ROMAN. You can use
	 * the PointSizeControl object to change this point size. */
    ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR =					((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) |
					 VTDF_URW_ROMAN);
	/* Set the font mapping to none to turn off the defaults. */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
}</PRE>
<PRE>@object GenTextClass PSCBotTextObj = {
    GI_attrs = @default | GA_TARGETABLE;
    ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR =					((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) |
					 VTDF_URW_ROMAN);
}
@end Interface<A NAME="Controllers_4.htm_marker=1157"> </A></PRE>
<HR>
<A NAME="Controllers_5.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 2 
<A NAME="Controllers_5.htm_53611">
 </A>
Standard Controllers</H2>
<P>
This section lists the various controller classes exported by system objects and libraries. Many are part of the GEOS UI; others are part of particular libraries. Some are system-wide (such as the ColorSelectorClass); others are object-specific (such as the InkControllerClass).</P>
<P>
All of these controllers are set up to work with <CODE>
GenToolControlClass</CODE>
 and <CODE>
GenToolGroupClass</CODE>
. When a GenToolControl object is also included in an application, users may set up menus and floating toolboxes however they like with the various tools from the controller's lists. For more information on the GenToolControl and how it is used, see <A HREF="#Controllers_8.htm_21343"> Using Tools</A>
 and <A HREF="#Controllers_d.htm_14796"> GenToolControlClass</A>
.</P>
<UL>
<LI>
<CODE>
GenToolControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenToolControlClass">
 </A>
This controller class provides the UI for the user to select where other controller tools appear. Controller tools must be specified by the individual controller classes; <CODE>
GenToolControlClass</CODE>
 simply manages them according to the user's specifications. Individual tools may be placed in a floating tool box, in an application's tool bar, alongside the active display, alongside the primary display, or other places. <CODE>
GenToolControlClass</CODE>
 is described in full in <A HREF="#Controllers_6.htm_23103"> Using Controllers</A>
.</LI>
<LI>
<CODE>
GenEditControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenEditControlClass">
 </A>
This controller class provides the Edit menu with the Undo, Cut, Copy, Paste, Select All, and Delete triggers. This controller will cooperate fully with most system objects such as the text, graphic object, spreadsheet, and Ink objects. The GenEditControl sends out <CODE>
MSG_META_CUT</CODE>
, <CODE>
MSG_META_COPY</CODE>
, etc., to these objects. <CODE>
GenEditControlClass</CODE>
 is described in <A HREF="../../SysObjects/Clipboard/combo.htm">the Clipboard chapter</A>.</LI><LI>
<CODE>
GenViewControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenViewControlClass">
 </A>
This controller class provides a View menu with the functions for changing a GenView's scale, paging, scrolling, aspect ratio, and other features. It is described in full in <A HREF="../../UI/GenView/combo.htm">the GenView chapter</A>.</LI><LI>
<CODE>
GenDisplayControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenDisplayControlClass">
 </A>
This controller class provides the UI for a multiple display interface. It works with the GenDisplayGroup and GenDisplay objects and is described in full in <A HREF="../../SysObjects/GenDisp/combo.htm">the GenDisplay chapter</A>.</LI><LI>
<CODE>
GenDocumentControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenDocumentControlClass">
 </A>
This controller class provides all the functions of the File menu including New, Open, Use Template, Close, Save, Save As, and Revert. It also interacts with the GenDocument and GenDocumentGroup objects to manage how the user interacts with documents in general. <CODE>
GenDocumentControlClass</CODE>
 is described in full in <A HREF="../../Files/Documents/combo.htm">the Documents chapter</A>.</LI><LI>
<CODE>
GenPageControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_GenPageControlClass">
 </A>
This controller class provides the UI for a user to go to a previous, next or specified page. It is described in full in <A HREF="#Controllers_11.htm_84135"> GenPageControlClass</A>
.</LI>
<LI>
<CODE>
PrintControlClass</CODE>
<A NAME="Controllers_5.htm_IX_PrintControlClass">
 </A>
, <A NAME="Controllers_5.htm_IX_PageSizeControlClass">
 </A>
<CODE>
PageSizeControlClass<BR>
</CODE>
Both of these controller classes are exported by the spool object library. Both are described in full in <A HREF="../../Communication/Printing/combo.htm">the Printing chapter</A>.</LI><LI>
<CODE>
ImportControlClass</CODE>
<A NAME="Controllers_5.htm_IX_ImportControlClass">
 </A>
, <A NAME="Controllers_5.htm_IX_ExportControlClass">
 </A>
<CODE>
ExportControlClass<BR>
</CODE>
These controller classes provide the UI and functions necessary for the user to select files for importing and exporting. They are exported by the Impex library are described in full in <A HREF="../../DataMgmt/ImportExport/combo.htm">the Impex chapter</A>.</LI><LI>
<CODE>
InkControlClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_InkControlClass">
 </A>
This controller class provides the tool interface for working with Ink-related tools. It is exported by the pen library and is described in full in <A HREF="../../UI/Pen/combo.htm">the Pen Object library chapter</A>.</LI><LI>
<CODE>
ColorSelectorClass<BR>
</CODE>
<A NAME="Controllers_5.htm_IX_ColorSelectorClass">
 </A>
This controller class provides the UI for a user to set a color using either the palette index or a set of RGB values, to set a draw mask, and to set an area fill pattern. <CODE>
ColorSelectorClass</CODE>
 is described in <A HREF="#Controllers_10.htm_35959"> ColorSelectorClass</A>
.</LI>
<LI>
<CODE>
StyleSheetControlClass<BR>
</CODE>
This controller class provides the UI and functions necessary for a user to define and change an application-specific style type and apply style changes. It works primarily with the Text library and graphic object library.</LI>
<LI>
<CODE>
FloatFormatClass<BR>
</CODE>
This controller class provides the UI and functions to allow the user to format numerical values into text (for example scientific notation, dates and times, etc.) This controller is described in <A HREF="#Controllers_12.htm_10072"> The Float Format Controller</A>
.</LI>
<LI>
Various Text Controller Classes<BR>
The text library exports a number of controllers that are specific to text operations. These classes are described in <A HREF="../../UI/Text/combo.htm">the Text Object chapter</A>.</LI><LI>
Various Ruler Controller Classes<BR>
The ruler library exports a number of controllers that manage the user's interactions and control over the ruler objects. These controller classes include <CODE>
RulerTypeControlClass</CODE>
, <CODE>
GuideCreateControlClass</CODE>
, and <CODE>
RulerGridControlClass</CODE>
. They are described in full in <A HREF="../../Libraries/Ruler/combo.htm">the Ruler chapter</A>.</LI></UL>
<HR>
<A NAME="Controllers_6.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 3 
<A NAME="Controllers_6.htm_23103">
 </A>
Using Controllers</H2>
<P>
There are essentially two ways to use controller objects: The first, and the simplest, is to simply include an object of an existing controller class and the data object for which it's designed (e.g. using a PointSizeControl object with a GenText object). The second, and quite more complex, is to create either your own data objects or your own controllers.</P>
<P>
This section describes the basic components of a controller object on the most general level--how to include a pre-existing controller along with its data object. For full information on how the <CODE>
GenControlClass</CODE>
 works and how a data object interacts with it, see <A HREF="#Controllers_9.htm_72863"> Creating Your Own Controllers</A>
. This section focuses on how you can use a controller object; nearly all of this will be academic if you use a GenToolControl object in your application.</P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_7.htm">Using a Basic GenControl Object</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_8.htm">Using Tools</A></P>
<HR>
<A NAME="Controllers_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 3.1 <A HREF="#Controllers_6.htm">Using Controllers</A>: 
Using a Basic GenControl Object</H3>
<P>
To use a typical controller, you have to set up its instance data appropriately and set up the generic tree properly. This section describes the basics of <CODE>
GenControlClass</CODE>
 instance data; for full information on <CODE>
GenControlClass</CODE>
, see <A HREF="#Controllers_9.htm_72863"> Creating Your Own Controllers</A>
.</P>
<P>
Every controller has a default set of features and a default set of tools. When you use a controller in your application, you can use the default configuration, the configuration appropriate to the application's user level, or a specific configuration. Most applications will want to use the second option; the controller queries the GenApplication object for its <CODE>
GAI_appFeatures</CODE>
 record and determines from that which of its features and tools should be active.</P>
<P>
Controllers can be manifested in any way the specific UI determines appropriate; three main ways, however, are menus or submenus, floating tool boxes (dialogs), and groupings along a tool bar in a window. These three modes correspond to the three manifestations of a typical GenInteraction object: GIV_POPUP (menus), GIV_DIALOG (dialogs and tool boxes), and GIV_SUB_GROUP (groupings of other generic objects). If you use a GenToolControl, you can let the user decide how the controller is displayed; otherwise, you will have to set it manually (as in the samples previously).</P>
<P>
Every controller also has two sets of UI objects: The first set represents the UI objects used for menu entries (when the controller is in GIV_POPUP mode). The second set represents the tools that appear in a tool box (GIV_DIALOG mode) or tool bar (GIV_SUB_GROUP mode). Tools are almost always functionally redundant to the &quot;menu&quot; feature set. Because the tool and the menu UI resources contain different objects, the UI objects can exist in any combination of interactable states--for example, a particular feature could be in the menu only, in the tool box only, in both, or in neither. The feature can not, however, be in both a tool bar and a tool box at the same time because the set of tools can be grouped in only one location.</P>

<H4 CLASS="HeadingC">
<A NAME="Controllers_7.htm_82039">
 </A>
Using Normal Features</H4>
<PRE>ATTR_GEN_CONTROL_REQUIRE_UI, ATTR_GEN_CONTROL_PROHIBIT_UI</PRE>
<P>
<CODE>
GenControlClass</CODE>
 has no controller features of its own; instead, each controller class must define the features it supports in both the menu implementation and the tool implementation. Any controller object is free to determine which of the features it will support and which it will not.</P>
<P>
<A NAME="Controllers_7.htm_IX_ATTR_GEN_CONTROL_REQUIRE_UI">
 </A>
To set individual features on or off for a controller object in your application, use the vardata fields <CODE>
ATTR_GEN_CONTROL_REQUIRE_UI</CODE>
 and <CODE>
ATTR_GEN_CONTROL_PROHIBIT_UI</CODE>
<A NAME="Controllers_7.htm_IX_ATTR_GEN_CONTROL_PROHIBIT_UI">
 </A>
; these specify which features will be on and which will be off. For listings of a controller class' features, you must see the description of the individual class.</P>
<P>
The example in <A HREF="#Controllers_7.htm_85619"> Declaring a Controller's Features</A>
 extends the example from earlier in the chapter to turn on only the 10-, 12-, and 24-point as well as the &quot;Larger&quot; and &quot;Smaller&quot; features. It turns off all other features.</P>
<P CLASS="figTitle">
Code Display 12-2 <A NAME="Controllers_7.htm_85619">
 </A>
Declaring a Controller's Features</P>
<PRE>/* This example is based on that of <A HREF="#Controllers_4.htm_70215"> A Sample Controller Application (psctext.goc)</A>. It shows what
 * would change in order to turn on only the 10-, 12-, and 24-point as well as the
 * &quot;Larger&quot; and &quot;Smaller&quot; features. Note that only the Controller object must
 * be altered. */</PRE>
<PRE>@object PointSizeControlClass PSCTSizeControl = {
    GI_visMoniker = 'z', &quot;Sizes&quot;;					/* Give the controller a name */
    GII_visibility = GIV_POPUP;					/* Make the controller a menu */
	/* The following attribute defines which of the controller's
	 * features are to be supported. These menu items will appear
	 * in the controller's Size menu. */
    ATTR_GEN_CONTROL_REQUIRE_UI = (PSCF_10 | PSCF_12 | PSCF_24 |
				PSCF_SMALLER | PSCF_LARGER);
	/* The following attribute defines which of the controller's
	 * features will not be supported. These menu items will not
	 * appear in the controller's Size menu. */
    ATTR_GEN_CONTROL_PROHIBIT_UI = (PSCF_14 | PSCF_18 | PSCF_36 | PSCF_54 |
				 PSCF_72 | PSCF_CUSTOM_SIZE);
}</PRE>


<H4 CLASS="HeadingC">
<A NAME="Controllers_7.htm_28396">
 </A>
Adding Application-Specific UI Gadgetry</H4>
<PRE>ATTR_GEN_CONTROL_APP_UI, ATTR_GEN_CONTROL_APP_TOOLBOX_UI</PRE>
<P>
Occasionally, an application will want to add its own UI gadgetry to a controller. This is not the same as changing the controller's functionality--to do that, you would need to subclass the controller class. Rather, this entails simply specifying a group of generic UI objects (e.g. a GenInteraction and some GenTriggers) that will be included with the controller's UI objects.</P>
<P>
<A NAME="Controllers_7.htm_IX_ATTR_GEN_CONTROL_APP_UI">
 </A>
The <CODE>
GenControlClass</CODE>
 vardata attribute <CODE>
ATTR_GEN_CONTROL_APP_UI</CODE>
 allows you to specify a generic tree that will be added as a child of the controller. The top node of this tree must be an object that can be a child of a GenInteraction object--typically, it will be a GenInteraction, a GenTrigger, or a GenValue.</P>
<P>
For example, if you wanted the sample application to have two extra triggers added to the Size menu, you would use <CODE>
ATTR_GEN_CONTROL_APP_UI</CODE>
 as shown in <A HREF="#Controllers_7.htm_17356"> Adding UI to a Controller</A>
. This example adds two triggers that turn the bottom GenText object on and off. (Of course, you would not likely put such functionality in the Size menu; this is given for illustration.)</P>
<P>
This attribute has no effect on the tools managed by the controller, only on its features. To add application-specific tools to a controller, you must use <CODE>
ATTR_GEN_CONTROL_APP_TOOLBOX_UI</CODE>
<A NAME="Controllers_7.htm_IX_ATTR_GEN_CONTROL_APP_TOOLBOX_UI">
 </A>
.</P>
<P CLASS="figTitle">
Code Display 12-3 <A NAME="Controllers_7.htm_17356">
 </A>
Adding UI to a Controller</P>
<PRE>/* This display shows the modified PointSizeControl object and the additional
 * UI gadgetry required to add two triggers to it. Although the triggers are
 * shown here in the same resource block as the controller, they do not have to
 * be. They do, however, have to be run by the same thread as the controller. */</PRE>
<PRE>@object PointSizeControlClass PSCTSizeControl = {
    GI_visMoniker = 'z', &quot;Sizes&quot;;					/* Give the controller a name */
    GII_visibility = GIV_POPUP;					/* Make the controller a menu */
	/* The following attribute specifies the top object of a generic
	 * tree to be included with the controller's UI. This attribute does
	 * not affect the toolbar implementation of the controller. */
    ATTR_GEN_CONTROL_APP_UI = (@PSCTSpecialTrigs);						/* must be an optr */
}</PRE>
<PRE>/* This GenInteraction and its children (the two GenTriggers) will be included in
 * the controller's default representation (typically a menu). The GenInteraction
 * will appear as a submenu in OSF/Motif. All of the objects must be set not
 * usable (~GS_USABLE); they will be made usable by the controller when it becomes
 * usable. */</PRE>
<PRE>@object GenInteractionClass PSCTSpecialTrigs = {
    GI_comp = @PSCTEnableTrig, @PSCTDisableTrig;
    GI_states = @default &amp; ~GS_USABLE;
    GII_visibility = GIV_POPUP;					/* Appear as a submenu-type item */
}</PRE>
<PRE>/* The triggers set the bottom GenText object usable or not usable. The instance
 * data of the triggers is unimportant for this example, but it is shown here
 * to complete the example. */</PRE>
<PRE>@object GenTriggerClass PSCTEnableTrig = {
    GI_visMoniker = &quot;Use Two Text Fields&quot;;
    GI_states = @default &amp; ~GS_USABLE;
    GTI_actionMsg = MSG_GEN_SET_USABLE;
    GTI_destination = PSCBotTextObj;
    ATTR_GEN_TRIGGER_ACTION_DATA = (VUM_NOW);
}</PRE>
<PRE>@object GenTriggerClass PSCTDisableTrig = {
    GI_visMoniker = &quot;Use One Text Field&quot;;
    GI_states = @default &amp; ~GS_USABLE;
    GTI_actionMsg = MSG_GEN_SET_NOT_USABLE;
    GTI_destination = PSCBotTextObj;
    ATTR_GEN_TRIGGER_ACTION_DATA = (VUM_NOW);
}</PRE>

<HR>
<A NAME="Controllers_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 3.2 <A HREF="#Controllers_6.htm">Using Controllers</A>: 
<A NAME="Controllers_8.htm_21343">
 </A>
Using Tools</H3>
<PRE>HINT_GEN_CONTROL_TOOLBOX_ONLY, ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI, ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI, ATTR_GEN_CONTROL_APP_TOOLBOX_UI</PRE>
<P>
A<A NAME="Controllers_8.htm_IX_tools">
 </A>
s stated earlier, any GenControl object can be manifested either as menus and menu items or as a set of tools. In fact, the controller can potentially have both its menu and its tools usable at once. Creating and using a toolbox or tool bar is a bit more complex than simply including the controller, however.</P>
<P>
You can add the use of tool bars and tool boxes to your application in two ways: First, you can simply add a GenToolControl object and associated GenToolGroups and let them do all the work for you. Second, you can interact directly with the controller object(s) to put up, take down, and otherwise manage the tools. In nearly all cases, the first is preferable.</P>
<P>
This section focuses on the use of a GenToolControl and GenToolGroup objects to manage and place your tools and toolboxes. If you want to manage tools without using a GenToolControl, you will have to know more about <CODE>
GenControlClass</CODE>
; see <A HREF="#Controllers_9.htm_72863"> Creating Your Own Controllers</A>
 for complete details.</P>

<H4 CLASS="HeadingC">
Components of Tool Management</H4>
<P>
Tools are most often represented by specific buttons or popup lists presented in various toolbars for easy use. They are functionally redundant to the menu features represented by the normal features of the controller, but the tools and menus can both be visible and usable at the same time.</P>
<P>
To provide and manage tools, you need to understand the following components:</P>
<UL>
<LI>
Controller<BR>
The controller is the same GenControl subclass object discussed and shown in the previous sections. You can set minimum and maximum tool sets just like setting minimum and maximum feature set.</LI>
<LI>
Tool Group<BR>
Each controller object should have exactly one corresponding GenToolGroup object. The GenToolGroup manages the controller's tools and is, in turn, managed by the GenToolControl object (below).</LI>
<LI>
Tool Controller<BR>
You should have exactly one GenToolControl object; this object is a controller that allows the user to turn on and off individual tools and entire tool sets. It also controls placement of each tool group--which tool bar the tool group appears in.</LI>
<LI>
Tool Bars and Tool Boxes<BR>
You can have any number of tool bars and floating tool boxes. A tool bar or tool box is simply a GenInteraction set up properly and accessible by the user. Examples of tool bars are given in the next sections.</LI>
<LI>
Data Tables<BR>
Because the GenToolControl needs to describe both the tool bars and the tool groups to the user, you must set up special data chunks containing tables of names for each tool bar and tool group you use.</LI>
</UL>


<H4 CLASS="HeadingC">
Using a Basic Tool Box</H4>
<P>
<A NAME="Controllers_8.htm_IX_tool boxes">
 </A>
The most basic tool configuration includes a floating tool box in which the controllers' tools appear. To use a tool box, you only need to define a toolbox GenInteraction, add a GenToolControl object, and put them both in a menu. Typically, this will be an &quot;Options&quot; menu.
<IMG SRC="Controllers_8_floatingBox.gif">

</P>
<P>
<A HREF="#Controllers_8.htm_53499"> Providing a Basic Tool Box</A>
 shows the configuration required for providing a basic tool box as well as the controller's default menu. (You could prohibit the appearance of the menu by setting <CODE>
ATTR_GEN_CONTROL_TOOLBOX_ONLY</CODE>
 in the controller's instance data.) This example provides all the tools by setting the application's UI level in the GenApplication object. All the tools will then appear in the toolbox and its associated popups as shown in the figure above.</P>

<H5 CLASS="HeadingD">
Setting Up the Tool Box</H5>
<P>
The tool box must be a GenInteraction object; for a floating tool box (as opposed to a tool bar), set it to be a dialog box (GIV_DIALOG). It should also have a moniker and <CODE>
HINT_TOOLBOX</CODE>
. The tool box must also be given a name. This name is used by the GenToolControl to identify the tool box. The name is set in a separate chunk and is a simple character string.</P>
<P>
At startup, the GenToolGroup for the point size controller is set as a child of the floating tool box. The GenToolControl will move the GenToolGroup to other toolbars if possible; the tools must be set somewhere at startup, though, and the tool box is the logical starting point.</P>


<H5 CLASS="HeadingD">
Setting Up the Tool Controller</H5>
<P>
<A NAME="Controllers_8.htm_IX_GenToolControlClass:usage">
 </A>
The GenToolControl object will be of <CODE>
GenToolControlClass</CODE>
, as shown. It must at least have the <CODE>
GTCI_toolboxList</CODE>
 field set to the chunk handle of a table of tool locations. In this example, the only location available to tools is in the floating tool box; other locations may be specified as detailed in <A HREF="#Controllers_8.htm_18765"> Tool Placement</A>
 below.</P>
<P>
<A NAME="Controllers_8.htm_IX_TI_&ldots;  (ToolboxInfo)">
 </A>
<A NAME="Controllers_8.htm_IX_ToolboxInfo">
 </A>
The table must appear in its own chunk in the same resource block as the GenToolControl object. It is an array of <CODE>
ToolboxInfo</CODE>
 structures, each of which contains two optrs. The first is the optr of a tool location (typically a GenInteraction that may contain tools), and the second is the optr of the associated name. The structure of <CODE>
ToolboxInfo</CODE>
 is shown below:</P>
<PRE>typedef struct {
	optr	TI_object;		/* A GenInteraction that
				 * can contain tools */
	optr	TI_name;		/* The name chunk of the
				 * TI_object object */
} ToolboxInfo;</PRE>
<P>
The table is defined as shown in <A HREF="#Controllers_8.htm_53499"> Providing a Basic Tool Box</A>
. If you had other controllers to be managed by the tool control, you would add other entries separated by commas.</P>
<P>
The GenToolControl also has a tool group list indicating the name of each GenToolGroup. It is set up in a similar form to the tool box table.</P>
<P CLASS="figTitle">
Code Display 12-4 <A NAME="Controllers_8.htm_53499">
 </A>
Providing a Basic Tool Box</P>
<PRE>/* This code display shows the entire psctext.goc file, with changes noted. All
 * unchanged code has had its comments stripped. For descriptions, see earlier
 * displays in this chapter. */</PRE>
<PRE>@include &lt;stdapp.goh&gt;
@include &lt;ui.goh&gt;
@include &lt;Objects/Text/tCtrlC.goh&gt;</PRE>
<PRE>@class	PSCTextProcessClass, GenProcessClass;
@endc</PRE>
<PRE>@classdecl PSCTextProcessClass, neverSaved;</PRE>
<PRE>@start	AppResource;
@object GenApplicationClass PSCTextApp = {
    GI_visMoniker = &quot;Point Size Control Sample Application&quot;;
    GI_comp = @PSCTPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = @PSCTPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS) =
					 @PSCTSizeControl, @PSCTToolControl;
}</PRE>
<PRE>@end	AppResource</PRE>
<PRE>@start	Interface;</PRE>
<PRE>/*	GenPrimary Object
 * Typically, an Options menu will be set up as a child of the Primary and
 * the tool box and tool control will be children of that menu. */</PRE>
<PRE>@object GenPrimaryClass PSCTPrimary = {
    GI_comp =		@PSCTSizeControl, @PSCTopTextObj, @PSCBotTextObj, @PSCTOptionsMenu;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}</PRE>
<PRE>/*	Options Menu
 * This menu is the parent for both the Tool Box and the tool controller. */
@object GenInteractionClass PSCTOptMenu = {
    GI_comp = @PSCTToolBox, @PSCTToolControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_OPTIONS_MENU);
}</PRE>
<PRE>/*	Tool Box Location Table
 * The Tool Box Location Table is used by the GenToolControl object
 * to associate tool locations with their names. The table is an array
 * of ToolboxInfo structures. Multiple entries would be separated with
 * commas. */</PRE>
<PRE>@chunk ToolboxInfo PSCTToolboxList[] = {
    {@PSCTToolBox, @PSCTToolBoxName}					/* The single tool location is the
					 * floating tool box PSCTToolBox. */
};</PRE>
<PRE>/*	Tool Group Information Table
 * The Tool Group Information Table is used by the GenToolControl to associate
 * tool groups with their names. The table is an array of ToolGroupInfo structures.
 * Multiple entries would be separated with commas. */</PRE>
<PRE>@chunk ToolGroupInfo PSCTToolGroupTable[] = {
    {@PSCTPointSizeToolGroup}
};</PRE>
<PRE>/*	Floating Tool Box
 * The Tool Box object is a GenInteraction dialog box. All toolboxes must
 * have HINT_TOOLBOX and may have any additional geometry hints you
 * deem necessary. Because every controller's GenToolGroup object must
 * be a child of some tool bar, the PSCTPointSizeToolGroup is set at
 * startup as a child of this floating toolbox. */</PRE>
<PRE>@object GenInteractionClass PSCTToolBox = {
    GI_visMoniker = `T', &quot;Tools&quot;;
    GI_comp = @PSCTPointSizeToolGroup;
    GII_visibility = GIV_DIALOG;
    HINT_TOOLBOX;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>/* The Tool Box Name must be specified for the tool control object. It
 * must be a character string, and there must be one for each entry in
 * the Tool Location table. */
@chunk char PSCTToolBoxName[] = &quot;Floating Tool Box&quot;;</PRE>
<PRE>/*	GenToolControl Object
 * The Tool Control object must have just the GTCI_toolboxList and
 * GTCI_toolGroupList fields set; these contain lists of tool bars and
 * tool groups along with their names. */</PRE>
<PRE>@object GenToolControlClass PSCTToolControl = {
    GTCI_toolboxList = @PSCTToolboxList;
    GTCI_toolGroupList = @PSCTToolGroupTable;
    HINT_SAME_CATEGORY_AS_PARENT;
}</PRE>
<PRE>/*	PointSizeControl			*/</PRE>
<PRE>@object PointSizeControlClass PSCTSizeControl = {
    GI_visMoniker = `z', &quot;Sizes&quot;;
    GII_visibility = GIV_POPUP;
}</PRE>
<PRE>/*	GenToolGroup Object
 * Each controller object has exactly one GenToolGroup object for managing
 * its tools and for management by the GenToolControl. The Tool Group has
 * a single instance field specifying the controller for which it works. */</PRE>
<PRE>@object GenToolGroupClass PSCTPointSizeToolGroup = {
    GTGI_controller = @PSCTSizeControl;
}</PRE>
<PRE>/*	GenText Objects			*/</PRE>
<PRE>@object GenTextClass PSCTopTextObj = {
    GI_attrs = @default | GA_TARGETABLE;
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
    ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR = ((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) |
					VTDF_URW_ROMAN);
}</PRE>
<PRE>@object GenTextClass PSCBotTextObj = {
 GI_attrs = @default | GA_TARGETABLE;
 ATTR_GEN_TEXT_DEFAULT_CHAR_ATTR =
 ((VTDS_12 &lt;&lt; VTDCA_SIZE_OFFSET) | VTDF_URW_ROMAN);
}
@end Interface</PRE>



<H4 CLASS="HeadingC">
<A NAME="Controllers_8.htm_18765">
 </A>
Tool Placement</H4>
<P>
Tools are movable; this means that controller tools can appear in any GenInteraction you may specify in the Tool Location Table. For example, you may want the user to be able to specify where she or he wants the tools to appear: in the floating tool box, at the top of the primary window, at the left of the display, or between the text objects. To support these locations for the tools, all you need to do is set up empty GenInteraction objects in the appropriate locations and add entries to the Tool Location Table.
<IMG SRC="Controllers_8_multToolbars.gif">

</P>
<P>
The setup described above requires quite a few GenInteraction objects to be added to the application's generic tree. A line drawing of the geometry with all the empty GenInteractions is given in the figure above and the new generic tree of the application is shown in the figure below. The code representing this configuration is shown in <A HREF="#Controllers_8.htm_33371"> Movable Tools</A>
--pay particular attention to the Tool Location Table and to the fact that each GenInteraction must have the hint <CODE>
HINT_TOOLBOX</CODE>
 set in order to receive the tools.
<IMG SRC="Controllers_8_toolbarObjTree.gif">

</P>
<P CLASS="figTitle">
Code Display 12-5 <A NAME="Controllers_8.htm_33371">
 </A>
Movable Tools</P>
<PRE>/* This code display builds on <A HREF="#Controllers_8.htm_53499"> Providing a Basic Tool Box</A> to show how tools
 * may be moved around your application's window by the user. Although this is
 * not difficult to do from scratch, it is quite involved; if you want this
 * functionality, it is best to include a GenToolControl object.
 * This code display only shows those objects that are additional to or altered
 * from the previous display. */</PRE>
<PRE>/*	GenPrimary Object
 * Two GenInteractions are made children of the Primary for geometry purposes.
 * The first, LeftToolBar, is actually a tool bar; the second,
 * TextAndToolInteraction, is a grouper interaction for geometry purposes. */</PRE>
<PRE>@object GenPrimaryClass PSCTPrimary = {
    GI_comp = @LeftToolBar, @PSCTSizeControl, @PSCTOptMenu,
					@TextAndToolInteraction;
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS) =
					@PSCTSizeControl, @PSCTToolControl;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}</PRE>
<PRE>/*	Tool Location Table
 * The Tool Location Table is updated with the new tool box information. Each of
 * the new tool boxes is given a name, and each must appear in this table. 
 * Note that the ToolGroup Information Table does not change. */</PRE>
<PRE>@chunk ToolboxInfo PSCTToolboxList[] = {
	{@PSCTToolBox, @PSCTToolBoxName},
	{@LeftToolBar, @LeftToolBarName},
	{@TopToolBar, @TopToolBarName},
	{@MiddleToolBar, @MiddleToolBarName}
};</PRE>
<PRE>/*	TextAndToolInteraction Interaction
 * This GenInteraction is used solely as a place holder grouping object to allow
 * the LeftToolBar object to extend the full height of the Primary window. */
@object GenInteractionClass TextAndToolInteraction = {
    GI_comp = @TopToolBar, @PSCTopTextObj, @MiddleToolBar, @PSCBotTextObj;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}</PRE>
<PRE>/*	New Tool Box Interactions
 * These GenInteraction objects are all tool boxes that appear in the Tool Location
 * Table. None actually has tools in it on startup; the tool controller allows the
 * user to place the tools of each active controller in any of these tool boxes. */</PRE>
<PRE>@object GenInteractionClass LeftToolBar = {
    HINT_TOOLBOX;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}
@chunk char LeftToolBarName[] = &quot;Left of Text&quot;;</PRE>
<PRE>@object GenInteractionClass TopToolBar = {
    HINT_TOOLBOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_ALLOW_CHILDREN_TO_WRAP;
}
@chunk char TopToolBarName[] = &quot;Above Text&quot;;</PRE>
<PRE>@object GenInteractionClass MiddleToolBar = {
    HINT_TOOLBOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_ALLOW_CHILDREN_TO_WRAP;
}
@chunk char MiddleToolBarName[] = &quot;In Between Text&quot;;</PRE>


<H4 CLASS="HeadingC">
Adding Application-Specific UI to the Tool Box</H4>
<PRE>ATTR_GEN_CONTROL_APP_TOOLBOX_UI</PRE>
<P>
Occasionally an application may want to add some additional UI gadgetry to <A NAME="Controllers_8.htm_IX_ATTR_GEN_CONTROL_APP_TOOLBOX_UI">
 </A>
a set of controller tools. <CODE>
ATTR_GEN_CONTROL_APP_TOOLBOX_UI</CODE>
 is analogous to <CODE>
ATTR_GEN_CONTROL_APP_UI</CODE>
, described in <A HREF="#Controllers_7.htm_28396"> Adding Application-Specific UI Gadgetry</A>
. This attribute specifies a generic object tree that can be attached to the controller's tools as if it were part of the controller normally. For an example of <CODE>
ATTR_GEN_CONTROL_APP_UI</CODE>
's use, see<A NAME="Controllers_8.htm_marker=1172">
 </A>
 <A HREF="#Controllers_7.htm_28396"> Adding Application-Specific UI Gadgetry</A>
<A NAME="Controllers_8.htm_marker=1170">
 </A>
.</P>

<HR>
<A NAME="Controllers_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 4 
<A NAME="Controllers_9.htm_72863">
 </A>
Creating Your Own Controllers</H2>
<P>
<A NAME="Controllers_9.htm_IX_controllers:custom controllers">
 </A>
To create your own controller classes, you will have to subclass <CODE>
GenControlClass</CODE>
 and handle certain messages and data structures. Most applications, however, will find that the controller classes provided with GEOS are adequate for their needs. Some library programmers may want to create their own controller classes.</P>
<P>
<CODE>
GenControlClass</CODE>
 is a subclass of <CODE>
GenInteractionClass</CODE>
. All instance data, hints, and messages appropriate for a GenInteraction are also appropriate for a GenControl object.</P>
<P>
Typically, when you create your own controller, you will create a library in which the controller will reside. The controller may be in a library with a particular data object (e.g. <CODE>
PointSizeControlClass</CODE>
 is part of the text library), or it may be in a library all by itself. For this discussion, the controller is considered to be part of a larger library.</P>
<P>
The files of this library are</P>
<DL>
<DT>
<STRONG CLASS="fileName">
psCtrl.gp</STRONG>
</DT><DD>The global parameters file for the controller's library. Only those portions of this file that pertain to the controller are discussed in this section.</DD>
<DT>
<STRONG CLASS="fileName">
psCtrl.goh</STRONG>
</DT><DD>The header file containing the class definition of the controller class. This is separated from the class' code so the user of the controller can include the <STRONG CLASS="fileName">
.goh</STRONG>
 file and thereby the controller.</DD>
<DT>
<STRONG CLASS="fileName">
psCtrl.goc</STRONG>
</DT><DD>The code and resource file of the controller class. This file contains the UI objects and the methods of the controller.</DD>
</DL>
<P>
All of these files are detailed throughout the following subsections. Each code display explains in which of these files it belongs.</P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_a.htm">GenControlClass Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_b.htm">Subclassing GenControlClass</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_c.htm">Advanced GenControlClass Usage</A></P>
<HR>
<A NAME="Controllers_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 4.1 <A HREF="#Controllers_9.htm">Creating Your Own Controllers</A>: 
GenControlClass Instance Data</H3>
<P>
<CODE>
GenControlClass</CODE>
<A NAME="Controllers_a.htm_IX_GCI_&ldots;  (GenControl Instance)">
 </A>
 has several instance data fields that determine the controller's features and supported tool set. These instance fields, along with the messages defined for the class, are shown in <A HREF="#Controllers_a.htm_53656"> GenControlClass Instance Data</A>
.</P>
<P CLASS="figTitle">
Code Display 12-6 <A NAME="Controllers_a.htm_53656">
 </A>
GenControlClass Instance Data</P>
<PRE>/* GenControlClass has one static instance data field and several dynamic (vardata)
 * fields. These are shown below. */</PRE>
<PRE>	/* The GCI_output field contains the optr of the object to which
	 * the controller is currently sending its &quot;apply&quot; messages. This
	 * field is typically set to a GenTravelOption (such as TO_APP_TARGET)
	 * or a TravelOption (such as TO_OBJ_BLOCK_OUTPUT). */
    @instance		optr	<A NAME="Controllers_a.htm_IX_GCI_output"> </A>GCI_output;</PRE>
<PRE>	/* Controller class objects are set disabled by default. When the
	 * controller is initialized, it will set itself enabled. */
	@default		GI_states = (@default &amp; ~GS_ENABLED);</PRE>
<PRE>/* the following attributes and hints determine the controller's
 * feature set. All of these hints and attributes are described in
 * <A HREF="#Controllers_6.htm_23103"> Using Controllers</A>. */
    @vardata void			<A NAME="Controllers_a.htm_IX_HINT_GEN_CONTROL_TOOLBOX_ONLY"> </A>HINT_GEN_CONTROL_TOOLBOX_ONLY;
    @vardata WordFlags			<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_REQUIRE_UI"> </A>ATTR_GEN_CONTROL_REQUIRE_UI;
    @vardata WordFlags			<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_PROHIBIT_UI"> </A>ATTR_GEN_CONTROL_PROHIBIT_UI;
    @vardata WordFlags			<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI"> </A>ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI;
    @vardata WordFlags			<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI"> </A>ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI;</PRE>
<PRE>/* The following two attributes control additional UI gadgetry added to a
 * controller object. */
    @vardata optr			<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_APP_UI"> </A>ATTR_GEN_CONTROL_APP_UI;
	@reloc	ATTR_GEN_CONTROL_APP_UI, 0, optr;
    @vardata optr			ATTR_GEN_CONTROL_APP_TOOLBOX_UI;
	@reloc	<A NAME="Controllers_a.htm_IX_ATTR_GEN_CONTROL_APP_TOOLBOX_UI"> </A>ATTR_GEN_CONTROL_APP_TOOLBOX_UI, 0, optr;</PRE>
<PRE><A NAME="Controllers_a.htm_IX_HINT_GEN_CONTROL_USER_UI"> </A>/* The following two hints allow an application to specify the initial
 * state of a controller including its placement, features, and
 * additional UI objects. */
    @vardata GenControlUserData <A NAME="Controllers_a.htm_IX_HINT_GEN_CONTROL_MODIFY_INITIAL_UI"> </A>HINT_GEN_CONTROL_MODIFY_INITIAL_UI;
    @vardata GenControlUserData <A NAME="Controllers_a.htm_IX_HINT_GEN_CONTROL_USER_MODIFIED_UI"> </A>HINT_GEN_CONTROL_USER_MODIFIED_UI;</PRE>
<PRE><A NAME="Controllers_a.htm_IX_TEMP_GEN_CONTROL_INSTANCE"> </A>/* The following temporary data field is used to determine the tool settings
 * for a controller's set of tools. */
    @vardata TempGenControlInstance <A NAME="Controllers_a.htm_IX_TEMP_GEN_CONTROL_INSTANCE"> </A>TEMP_GEN_CONTROL_INSTANCE;</PRE>
<P>
In general, a controller class will not have to worry about the instance data fields in <A HREF="#Controllers_a.htm_53656"> GenControlClass Instance Data</A>
. Instead, it will handle a particular message, set up some UI resources, and rely on the functionality built into <CODE>
GenControlClass</CODE>
.</P>
<HR>
<A NAME="Controllers_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 4.2 <A HREF="#Controllers_9.htm">Creating Your Own Controllers</A>: 
Subclassing GenControlClass</H3>
<P>
When creating your own controller, you must subclass <CODE>
GenControlClass</CODE>
. You must also follow the steps outlined below (each is described in more detail throughout this section):</P>
<OL>
<LI>
Define the features and tool records<BR>
You must define records and flags for the entire feature set and tool set of the controller. Each bit in one of these records corresponds to a single feature or tool of the controller; by turning these bits on and off, the controller manages which features and tools are available to the user. See <A HREF="#Controllers_b.htm_71634"> Defining a Controller's Feature and Tool Sets</A>
.</LI>
<LI FIXME_NumListOther>
Define the default UI configuration<BR>
Define a resource block containing the objects that will be the controller's default UI representation (typically a menu structure). See <A HREF="#Controllers_b.htm_15150"> Defining the Default UI and Tool Configurations</A>
.</LI>
<LI FIXME_NumListOther>
Define the tool configuration<BR>
Define a resource block containing generic UI objects that will make up the controller's tool set. See <A HREF="#Controllers_b.htm_15150"> Defining the Default UI and Tool Configurations</A>
.</LI>
<LI FIXME_NumListOther>
Handle <CODE>
MSG_GEN_CONTROL_GET_INFO<BR>
</CODE>
Every controller <EM>
must</EM>
 handle this message and return critical information about the controller, its features, and its tools. This is the most involved step of creating a controller. See <A HREF="#Controllers_b.htm_66462"> Mandatory Message Handling</A>
.</LI>
<LI FIXME_NumListOther>
Intercept appropriate <CODE>
GenControlClass</CODE>
 messages<BR>
Different controller classes will intercept different <CODE>
GenControlClass</CODE>
 messages depending on how much additional functionality they require. Most controllers will intercept <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
.</LI>
<LI FIXME_NumListOther>
Define and handle controller-specific messages<BR>
Some controllers will set up their features and tools so that the messages they generate require some translation. For example, if a controller has one feature that sets a value based on all the other values, that feature may send a &quot;set&quot; message to the controller, which will determine the appropriate value to set. The controller will then pass the result on to the output object.</LI>
</OL>

<H4 CLASS="HeadingC">
<A NAME="Controllers_b.htm_71634">
 </A>
Defining a Controller's Feature and Tool Sets</H4>
<P>
E<A NAME="Controllers_b.htm_IX_controllers:feature and tool sets">
 </A>
very controller must have a definition of all its features and tools. This definition typically resides in the controller class header file (in this case, <STRONG CLASS="fileName">
psCtrl.goh</STRONG>
). Applications that use the controller must be able to turn on and off individual tools and features. These definitions take the form of records in which each bit represents a particular feature or tool. No controller may have more than sixteen features or tools; the controller has just one word representing which features and tools are &quot;on.&quot;</P>
<P>
To define the feature set of your controller class, define a record type of type <CODE>
WordFlags</CODE>
 and one flag for each feature. The record type you define may be named anything; typically, however, its name will consist of the acronym of the controller class with the suffix &quot;Features.&quot; For example, the features type and flags of <CODE>
PointSizeControlClass</CODE>
 are shown below:</P>
<PRE><A NAME="Controllers_b.htm_IX_controllers:feature record"> </A>typedef WordFlags PSCFeatures;
#define PSCF_10				0x0400
#define PSCF_12				0x0200
#define PSCF_14				0x0100
#define PSCF_18				0x0080
#define PSCF_24				0x0040
#define PSCF_36				0x0020
#define PSCF_54				0x0010
#define PSCF_72				0x0008
#define PSCF_SMALLER				0x0004
#define PSCF_LARGER				0x0002
#define PSCF_CUSTOM_SIZE 0x0001</PRE>
<P>
Each of the flags represents one feature of the controller. For example, the PSCF_10 flag represents the &quot;10 Point&quot; trigger in the Sizes menu, and the PSCF_SMALLER flag represents the &quot;Smaller&quot; trigger. When a flag is set, the feature it represents is turned on; when clear, its feature is off.</P>
<P>
Each controller class must create a similar record type and flags for its tool set. Because the tools are independent of the default features, two different sets of flags must be defined. An example (the <CODE>
PSCToolboxFeatures</CODE>
 record of <CODE>
PointSizeControlClass</CODE>
) follows.</P>
<PRE><A NAME="Controllers_b.htm_IX_controllers:tool feature record"> </A>typedef WordFlags PSCToolboxFeatures;</PRE>
<PRE>#define PSCTF_9				0x0400
#define PSCTF_10				0x0200
#define PSCTF_12				0x0100
#define PSCTF_14				0x0080
#define PSCTF_18				0x0040
#define PSCTF_24				0x0020
#define PSCTF_36				0x0010
#define PSCTF_54				0x0008
#define PSCTF_72				0x0004
#define PSCTF_SMALLER				0x0002
#define PSCTF_LARGER				0x0001</PRE>
<P>
After you have defined your controller class' feature and tool sets, you should define the controller's default feature and tool sets. The definitions for <CODE>
PointSizeControlClass</CODE>
 are shown below:</P>
<PRE>#define PSC_DEFAULT_FEATURES					(PSCF_9 | PSCF_10 |
		PSCF_12 | PSCF_14 | PSCF_18 | PSCF_24 |
		PSCF_36 | PSCF_72 | PSCF_CUSTOM_SIZE |
		PSCF_SMALLER | PSCF_LARGER)</PRE>
<PRE>#define PSC_DEFAULT_TOOLBOX_FEATURES (PSCTF_9 |
		PSCTF_10 | PSCTF_12 | PSCTF_14 |
		PSCTF_18 | PSCTF_24 | PSCTF_36 |
		PSCTF_72 | PSCTF_SMALLER | PSCTF_LARGER)</PRE>
<P>
These values and flags will be used in your handler for the controller message <CODE>
MSG_GEN_CONTROL_GET_INFO</CODE>
.</P>


<H4 CLASS="HeadingC">
<A NAME="Controllers_b.htm_15150">
 </A>
Defining the Default UI and Tool Configurations</H4>
<P>
<A NAME="Controllers_b.htm_IX_controllers:resource blocks">
 </A>
After you have determined which features and tools your controller class will support, you must create the UI objects that correspond to them. To do this, declare two separate resource segments--one to contain the feature objects and the other to contain the tool objects. Then declare a third that contains just chunks with text strings in it.</P>
<P>
Both resources should be defined <CODE>
notDetachable</CODE>
, meaning that the feature and tool objects will not be saved to a state file. In the global parameters file for your controller, each resource must be declared with the <CODE>
ui-object</CODE>
, <CODE>
read-only</CODE>
, and <CODE>
shared</CODE>
 flags as below:</P>
<PRE>resource SIZECTRLUI ui-object read-only shared
resource SIZECTRLTOOLUI ui-object read-only shared
resource CONTROLSTRINGS lmem read-only shared</PRE>
<P>
The UI resources typically contain list objects and their corresponding items. As an alternative, they can contain triggers and dialogs. These objects are declared as a standard object resource with generic objects, as shown in <A HREF="#Controllers_b.htm_43813"> Controller UI Resources</A>
. All these objects must be set not usable (~GS_USABLE).</P>
<P CLASS="figTitle">
Code Display 12-7 <A NAME="Controllers_b.htm_43813">
 </A>
Controller UI Resources</P>
<PRE>/* This display contains only code that appears in the psCtrl.goc file. The first
 * elements of the file are other included files, followed by a class declaration
 * statement. The two UI resources are shown after that, simplified somewhat;
 * Only redundant objects are left out of the display. */</PRE>
<PRE>/* Include the controller class definition and declare the class structure. */
@include &lt;psCtrl.goh&gt;
@classdecl PointSizeControlClass;</PRE>
<PRE>@start	SizeCtrlUI, notDetachable;</PRE>
<PRE>/* Define the features UI resource. This resource can contain any objects that may
 * typically appear in a menu (e.g. GenInteractions, GenTriggers, and list
 * objects). This example shows a single list object and a few of its entries. */</PRE>
<PRE>@object GenItemGroupClass SizesList = {
    GI_states = @default &amp; ~GS_USABLE;					/* Set the list not usable */
	/* The children of the list are defined below. Each entry in the
	 * list will appear as a single menu item. */
    GI_comp =		@Size10Entry, @Size12Entry, @Size14Entry, @Size18Entry,
		@Size24Entry, @Size36Entry, @Size54Entry, @Size72Entry;
	/* The &quot;apply&quot; message will be sent to the destination specified
	 * in the GIGI_destination field. */
    GIGI_applyMsg = MSG_PSC_SET_POINT_SIZE_FROM_LIST;
	/* The destination is defined as the TravelOption TO_OBJ_BLOCK_OUTPUT.
	 * This will send the apply message to the controller's output object. */
    GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
}</PRE>
<PRE>/* An example of a GenItem for the above list. all the other children are similar
 * with different monikers and identifiers. The identifiers in this case are
 * equivalent to the point size setting for the feature. */
@object GenItemClass Size10Entry = {
    GI_visMoniker = `1', &quot;1. 10 point&quot;;
    GII_identifier = 10;
}</PRE>
<PRE>/* A GenTrigger. Shown below is the &quot;Smaller&quot; menu entry of the Point Size
 * controller. Another trigger (&quot;Larger&quot;) and a GenInteraction (the &quot;Custom
 * Size&quot; entry) are also declared. These objects do not have to be declared
 * as children of any object; they will automatically, like the list above,
 * be designated as children of the controller when it is initialized.
 * Note that all of these objects must also be set not usable. */
@object GenTriggerClass SmallerTrigger = {
    GI_states = @default &amp; ~GS_USABLE;
    GI_visMoniker = `S', &quot;Smaller&quot;;
    GI_kbdAccelerator = control `9';
    GTI_actionMsg = MSG_PSC_SMALLER_POINT_SIZE;
    GTI_destination = (TO_OBJ_BLOCK_OUTPUT);
}</PRE>
<PRE>@end	SizeCtrlUI</PRE>
<PRE>/* Define the Tools UI resource. This follows exactly the same rules as the
 * Features UI resource above, but it represents the UI gadgetry that will appear
 * in the controller's tool boxes rather than its default menus. */</PRE>
<PRE>@start	SizeCtrlToolUI, notDetachable;</PRE>
<PRE>@object GenItemGroupClass SizesToolList = {
    /* Same as SizesList above, but with the following hints applied: */
    HINT_ITEM_GROUP_MINIMIZE_SIZE;
    HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION;
}</PRE>
<PRE>/* The list entry items have the exact configuration as above but different
 * names that reflect their tool usage.
 * The only objects allowed as tools for the Point Size controller are the
 * point size list entries, the larger trigger, and the smaller trigger. The
 * &quot;Custom Size&quot; entry is not allowed in the tool box as a matter of style. */</PRE>
<PRE>@object GenTriggerClass SmallerToolTrigger = {
    GI_states = @default &amp; ~GS_USABLE;
    GI_visMoniker = &quot;S&quot;;
	/* The moniker of a tool is typically a graphic. The moniker
	 * specified here is text for simplicity. */
    GTI_actionMsg = MSG_PSC_SMALLER_POINT_SIZE;
    GTI_destination = TO_OBJ_BLOCK_OUTPUT;
}</PRE>
<PRE>@end	SizeCtrlToolUI</PRE>
<PRE>@start	ControlStrings;</PRE>
<PRE>/* In addition to the above two resources, you must also create a third that
 * contains name strings for the various tools and features. These name strings
 * will be used by the GenToolControl to identify the feature type in its
 * dialog box. */
@chunk char		PSCName[] = &quot;Point Size&quot;;
@chunk char		Size10Name[] = &quot;10 Point&quot;;
@chunk char		Size12Name[] = &quot;12 Point&quot;;
    /* The rest of the point sizes are similar */
@chunk char		SmallerName[] = &quot;Smaller Point Size&quot;;
@chunk char		LargerName[] = &quot;Larger Point Size&quot;;
@chunk char		CustomSizeName[] = &quot;Custom Point Size&quot;;</PRE>
<PRE>@end	ControlStrings</PRE>


<H4 CLASS="HeadingC">
<A NAME="Controllers_b.htm_66462">
 </A>
Mandatory Message Handling</H4>
<PRE><A NAME="Controllers_b.htm_IX_MSG_GEN_CONTROL_GET_INFO"> </A>MSG_GEN_CONTROL_GET_INFO, GenControlBuildInfo</PRE>
<P>
<A NAME="Controllers_b.htm_IX_controllers:message handling">
 </A>
Every controller must handle <CODE>
MSG_GEN_CONTROL_GET_INFO</CODE>
. This message is sent to the controller in several circumstances, and it must return critical information about the controller's state and configuration.<A NAME="Controllers_b.htm_IX_GenControlBuildInfo">
 </A>
 It takes a pointer to an empty <CODE>
GenControlBuildInfo</CODE>
 structure and must fill in all the structure's fields before returning. This structure is shown in <A HREF="#Controllers_b.htm_94389"> MSG_GEN_CONTROL_GET_INFO Handler</A>
 with a description of each of its fields following.</P>
<P CLASS="figTitle">
Code Display 12-8 The GenControlBuildInfo Structure</P>
<PRE><A NAME="Controllers_b.htm_IX_GCBI_&ldots;"> </A>/* This structure must be filled and returned by the controller class. It details
 * general information as well as specific information about the controller, the
 * controller's features, and the controller's tools. */</PRE>
<PRE>typedef struct {
    GenControlBuildFlags				GCBI_flags;
    const char				*GCBI_initFileKey;
    const GCNListType				*GCBI_gcnList;
    word				GCBI_gcnCount;
    const NotificationType				*GCBI_notificationList;
    word				GCBI_notificationCount;
    optr				GCBI_controllerName;</PRE>
<PRE>    MemHandle				GCBI_dupBlock;
    const GenControlChildInfo				*GCBI_childList;
    word				GCBI_childCount;
    const GenControlFeaturesInfo				*GCBI_featuresList;
    word				GCBI_featuresCount;
    WordFlags				GCBI_features;</PRE>
<PRE>    MemHandle				GCBI_toolBlock;
    const GenControlChildInfo				*GCBI_toolList;
    word				GCBI_toolCount;
    const GenControlFeaturesInfo				*GCBI_toolFeaturesList;
    word				GCBI_toolFeaturesCount;
    WordFlags				GCBI_toolFeatures;</PRE>
<PRE>    char				*GCBI_helpContext;
    byte				GCBI_reserved[8];
} GenControlBuildInfo;</PRE>
<P>
The following fields define general information about the controller.</P>
<DL>
<DT>
<CODE>
GCBI_flags</CODE>
</DT><DD>A record of <CODE>
GenControlBuildFlags</CODE>
. These flags affect several UI-related and object storage related functions, and they are detailed on <A HREF="#Controllers_b.htm_37978"> GenControlBuildFlags</A>
.</DD>
<DT>
<CODE>
GCBI_initFileKey</DT><DD>
</CODE>
A pointer to a text string indicating the controller's key in the GEOS.INI file. Controller options will be saved under this key.</DD>
<DT>
<CODE>
GCBI_gcnList</DT><DD>
</CODE>
A pointer to a list of GCN list types. Objects of this controller class will be added to these GCN lists and will receive notification from them. GCN lists are detailed in <A HREF="../../Kernel/GCN/combo.htm">the GCN chapter</A>.</DT><P CLASS="WorList">
<CODE>
GCBI_gcnCount<BR>
</CODE>
The length of the list pointed to by <CODE>
GCBI_gcnList</CODE>
 above. This length should be the number of lists specified.</P>
<DT>
<CODE>
GCBI_notificationList<BR>
</CODE>
A pointer to a list of notification types supported by the controller.</DD>
<DT>
<CODE>
GCBI_notificationCount</DT><DD>
</CODE>
The size of the list pointed to by <CODE>
GCBI_notificationList</CODE>
 above.</DD>
<DT>
<CODE>
GCBI_controllerName</DT><DD>
</CODE>
The optr of a chunk containing the text string that serves as the controller's name. This name string is displayed by the GenToolControl in its dialog box to identify the controller.</DD>
</DL>
<P>
The following fields define information about the controller's features. These fields will be filled dependent on the features set in the object's instance data and the UI level of the controller.</P>
<DL>
<DT>
<CODE>
GCBI_dupBlock</DT><DD>
</CODE>
The handle of the resource block containing the controller's feature generic objects. In the example, this would contain the handle of the <CODE>
SizeCtrlUI</CODE>
 resource.</DD>
<DT>
<CODE>
GCBI_childList</DT><DD>
</CODE>
A pointer to a list of <CODE>
GenControlChildInfo</CODE>
 structures; each of these structures details which features are set and which should always be set for each of the controller's children. This structure is shown below:</DD>
<PRE>	typedef struct {
	    ChunkHandle			GCCI_object;
	    WordFlags			GCCI_featureMask;
	    GenControlChildFlags GCCI_flags;
	} <A NAME="Controllers_b.htm_IX_GenControlChildInfo"> </A>GenControlChildInfo;</PRE>
<DT>
</DT><DD>Each structure contains the chunk handle of the given child in t he resource block, a feature mask indicating which features are possibly supported by the child, and a record indicating whether the child is a feature or not and whether the child is always added to the controller's UI. More specific information is shown on <A HREF="#Controllers_b.htm_91928"> GenControlChildInfo</A>
.</DD>
<DT>
<CODE>
GCBI_childCount</DT><DD>
</CODE>
The number of children specified in <CODE>
GCBI_childList</CODE>
 above.</DD>
<DT>
<CODE>
GCBI_featuresList</DT><DD>
</CODE>
A pointer to a list of <CODE>
GenControlFeaturesInfo</CODE>
 structures, one for each child. These structures define the following:</DD>
<PRE>	typedef struct {
	    ChunkHandle			GCFI_object;
	    optr			GCFI_name;
	    GenControlFeatureFlags GCFI_flags;
	} <A NAME="Controllers_b.htm_IX_GenControlFeaturesInfo"> </A>GenControlFeaturesInfo;</PRE>
<DT>
</DT><DD>The three fields are the chunk handle of the child; the optr of the child's name string, as defined in the name string resource; and a record of <CODE>
GenControlFeatureFlags</CODE>
. This structure and its fields are described more fully on <A HREF="#Controllers_b.htm_84223"> GenControlFeaturesInfo</A>
.</DD>
<DT>
<CODE>
GCBI_featuresCount</DT><DD>
</CODE>
The number of <CODE>
GenControlFeaturesInfo</CODE>
 structures listed in <CODE>
GCBI_featuresList</CODE>
 above.</DD>
<DT>
<CODE>
GCBI_features</DT><DD>
</CODE>
A features mask describing the features supported by the current UI level as specified in the GenApplication's <CODE>
GAI_appFeatures</CODE>
 field.</DD>
</DL>
<P>
The following fields describe information about the controller's tools and their configuration.</P>
<DL>
<DT>
<CODE>
GCBI_toolBlock</DT><DD>
</CODE>
The handle of the resource block containing the controller's tool generic objects. In the example, this would contain the handle of the <CODE>
SizeCtrlToolUI</CODE>
 resource.</DD>
<DT>
<CODE>
GCBI_toolList</DT><DD>
</CODE>
A pointer to a list of <CODE>
GenControlChildInfo</CODE>
 structures; each of these structures details which tools are set and which should always be set for each of the controller's children. This structure is shown below:</DD>
<PRE>	typedef struct {
	    ChunkHandle			GCCI_object;
	    WordFlags			GCCI_featureMask;
	    GenControlChildFlags GCCI_flags;
	} <A NAME="Controllers_b.htm_IX_GenControlChildInfo"> </A>GenControlChildInfo;</PRE>
<DT>
</DT><DD>Each structure contains the chunk handle of the given child in t he resource block, a feature mask indicating which tools are possibly supported by the child, and a record indicating whether the child is a tool or not (e.g. a list) and whether the child is always added to the controller's tool box UI. More specific information is shown on <A HREF="#Controllers_b.htm_91928"> GenControlChildInfo</A>
.</DD>
<DT>
<CODE>
GCBI_toolCount</DT><DD>
</CODE>
The number of children specified in <CODE>
GCBI_toolList</CODE>
 above.</DD>
<DT>
<CODE>
GCBI_toolFeaturesList</DT><DD>
</CODE>
A pointer to a list of <CODE>
GenControlFeaturesInfo</CODE>
 structures, one for each child. These structures define the following:</DD>
<PRE>	typedef struct {
	    ChunkHandle			GCFI_object;
	    optr			GCFI_name;
	    byte			GCFI_flags;
				/* GenControlFeatureFlags */
	} <A NAME="Controllers_b.htm_IX_GenControlFeaturesInfo"> </A>GenControlFeaturesInfo;</PRE>
<DT>
</DT><DD>The three fields are the chunk handle of the child; the optr of the child's name string, as defined in the name string resource; and a record of <CODE>
GenControlFeatureFlags</CODE>
. This structure and its fields are described more fully on <A HREF="#Controllers_b.htm_84223"> GenControlFeaturesInfo</A>
.</DD>
<DT>
<CODE>
GCBI_toolFeaturesCount</DT><DD>
</CODE>
The number of <CODE>
GenControlFeaturesInfo</CODE>
 structures in the list pointed to by <CODE>
GCBI_toolFeaturesList</CODE>
 above.</DD>
<DT>
<CODE>
GCBI_toolFeatures</DT><DD>
</CODE>
A tools mask describing the tools supported for the UI level specified in the GenApplication's <CODE>
GAI_appFeatures</CODE>
 field.</DD>
</DL>
<P>
The following field is used by controllers that offer their own help files and help text.</P>
<DL>
<DT>
<CODE>
GCBI_helpContext</DT><DD>
</CODE>
A pointer to a character string giving the name of the controller's help context. If this is a non-null pointer, then the controller will automatically add <CODE>
ATTR_GEN_HELP_CONTEXT</CODE>
 to itself with the specified string.</DD>
</DL>
<P>
The structure also has eight bytes that are reserved for the use of GenControlClass, in the <CODE>
GCBI_reserved</CODE>
 field.</P>

<H5 CLASS="HeadingD">
<A NAME="Controllers_b.htm_37978">
 </A>
GenControlBuildFlags</H5>
<P>
<A NAME="Controllers_b.htm_IX_GCBF_&ldots;">
 </A>
<A NAME="Controllers_b.htm_IX_GenControlBuildFlags">
 </A>
This flags record defines several UI-related things about the controller object. <A NAME="Controllers_b.htm_IX_GenControlBuildFlags">
 </A>
Set them appropriate to your controller. The flags are</P>
<DL>
<DT>
GCBF_SUSPEND_ON_APPLY</DT><DD>
Causes <CODE>
MSG_META_SUSPEND</CODE>
 to be sent on feature activation and <CODE>
MSG_META_UNSUSPEND</CODE>
 afterward. This is often set by controllers.</DD>
<DT>
GCBF_USE_GEN_DESTROY</DT><DD>
Ensures that unused objects can not be freed with <CODE>
LMemFree()</CODE>
. Not often set by controllers.</DD>
<DT>
GCBF_SPECIFIC_UI</DT><DD>
Indicates that the controller may be implemented in the specific UI and therefore some special action must be taken. Very rarely set by controllers.</DD>
<DT>
GCBF_CUSTOM_ENABLE_DISABLE</DT><DD>
Indicates that the controller uses a custom enable/disable mechanism rather than responding to GCN notifications.</DD>
<DT>
GCBF_ALWAYS_UPDATE</DT><DD>
Indicates that the controller should always undergo visual updates even if it appears unnecessary. Not often set by controllers.</DD>
<DT>
GCBF_EXPAND_TOOL_WIDTH_TO_FIT_PARENT</DT><DD>
Indicates that the tool width should be expanded to take full advantage of all the space available in the parent composite.</DD>
<DT>
GCBF_ALWAYS_INTERACTABLE</DT><DD>
Indicates that the controller should always be on its appropriate GCN lists, even if no part of it is visible. This flag requires GCBF_IS_ON_ACTIVE_LIST.</DD>
<DT>
GCBF_ALWAYS_ON_GCN_LIST</DT><DD>
Indicates that the controller should constantly be on the GCN lists rather than periodically adding and removing itself as is done in some optimization code. Not often set by controllers. This flag requires GCBF_IS_ON_ACTIVE_LIST.</DD>
<DT>
GCBF_MANUALLY_REMOVE_FROM_ACTIVE_LIST</DT><DD>
Indicates that the controller should not remove itself from the active list in its default detach handler.</DD>
<DT>
GCBF_IS_ON_ACTIVE_LIST</DT><DD>
<A NAME="Controllers_b.htm_IX_Active list:GenControlBuildFlags relating to">
 </A>
Indicates that the controller is on the active list in its <STRONG CLASS="fileName">
.goh</STRONG>
 file definition.</DD>
<DT>
GCBF_IS_ON_START_LOAD_OPTIONS_LIST</DT><DD>
Indicates this controller must be on the startup load options list.</DD>
<DT>
GCBF_NOT_REQUIRED_TO_BE_ON_SELF_LOAD_OPTIONS_LIST</DT><DD>
Indicates this controller is not required to be on any options-load list.</DD>


</DL>
<H5 CLASS="HeadingD">
<A NAME="Controllers_b.htm_91928">
 </A>
GenControlChildInfo</H5>
<P>
<A NAME="Controllers_b.htm_IX_GCCI_&ldots;">
 </A>
<A NAME="Controllers_b.htm_IX_GenControlChildInfo">
 </A>
The <CODE>
GenControlChildInfo</CODE>
 structure defines the features or tools appropriate to each object in a controller's UI resources. It has the following structure, and its fields are described below:</P>
<PRE>typedef struct {
	ChunkHandle				GCCI_object;
	WordFlags				GCCI_featureMask;
	GenControlChildFlags				GCCI_flags;
} <A NAME="Controllers_b.htm_IX_GenControlChildInfo"> </A>GenControlChildInfo;</PRE>
<DL>
<DT>
<CODE>
GCCI_object</CODE>
</DT><DD>The chunk handle of the object in the appropriate resource.</DD>
<DT>
<CODE>
GCCI_featureMask</DT><DD>
</CODE>
The feature mask representing the feature set represented by the object.</DD>
<DT>
<CODE>
GCCI_flags</CODE>
</DT><DD>A record of <CODE>
GenControlChildFlags</CODE>
, the flags of which are described below.</DD>
</DL>
<P>
<A NAME="Controllers_b.htm_IX_GCCF_&ldots;  (GenControlChildFlags)">
 </A>
The <A NAME="Controllers_b.htm_IX_GenControlChildFlags">
 </A>
<CODE>
GenControlChildFlags</CODE>
 flags are</P>
<DL>
<DT>
GCCF_NOTIFY_WHEN_ADDING</DT><DD>
This flag indicates that the child will be notified before the feature is added and set usable with <CODE>
MSG_GEN_CONTROL_NOTIFY_ADDING_FEATURE</CODE>
.</DD>
<DT>
GCCF_ALWAYS_ADD</DT><DD>
This flag indicates that the child object should always be added to the controller's UI, even if it is not specified.</DD>
<DT>
GCCF_IS_DIRECTLY_A_FEATURE</DT><DD>
This flag indicates that the child is a feature in itself and thus on the feature list. This is typically set for most objects. (It is not set, for example, for list objects, whose children are the actual features.)</DD>


</DL>
<H5 CLASS="HeadingD">
<A NAME="Controllers_b.htm_84223">
 </A>
GenControlFeaturesInfo</H5>
<P>
<A NAME="Controllers_b.htm_IX_GCFI_&ldots;">
 </A>
<A NAME="Controllers_b.htm_IX_GenControlFeaturesInfo">
 </A>
The <CODE>
GenControlFeaturesInfo</CODE>
 structure describes each UI feature's name and certain flags. The structure is defined below, and its fields are described following:</P>
<PRE>typedef struct {
	ChunkHandle				GCFI_object;
	optr				GCFI_name;
	GenControlFeatureFlags				GCFI_flags;
} <A NAME="Controllers_b.htm_IX_GenControlFeaturesInfo"> </A>GenControlFeaturesInfo;</PRE>
<DL>
<DT>
<CODE>
GCFI_object</CODE>
</DT><DD>The chunk handle of the child in the appropriate resource block.</DD>
<DT>
<CODE>
GCFI_name</CODE>
</DT><DD>The optr of the chunk containing the object's name. This name is used by the GenToolControl to represent the particular feature or tool in its dialog box.</DD>
<DT>
<CODE>
GCFI_flags</CODE>
</DT><DD>A record of <CODE>
GenControlFeatureFlags</CODE>
, reserved.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Controllers_b.htm_IX_MSG_GEN_CONTROL_GET_INFO">
 </A>
MSG_GEN_CONTROL_GET_INFO</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_GET_INFO(
        GenControlBuildInfo *info);</PRE>
<P>
This message must be handled by all controllers. It takes an empty <CODE>
GenControlBuildInfo</CODE>
 structure and fills it; this message is called in several circumstances by different objects and controller methods.</P>
<P CLASS="refField">
Source:	Unrestricted--typically generated in <CODE>
GenControlClass</CODE>
 methods.</P>
<P CLASS="refField">
Destination:	Any controller object.</P>
<P CLASS="refField">
Parameters:	<CODE>
info</CODE>
	A pointer to an empty <CODE>
GenControlBuildInfo</CODE>
 structure.</P>
<P CLASS="refField">
Return:	The <CODE>
GenControlBuildInfo</CODE>
 structure filled with the appropriate controller information.</P>
<P CLASS="refField">
Interception:	Every controller class <EM>
must</EM>
 intercept this message. There is no need to call the superclass anywhere in the handler.</P>
<P CLASS="figTitle">
Code Display 12-9 <A NAME="Controllers_b.htm_94389">
 </A>
MSG_GEN_CONTROL_GET_INFO Handler</P>
<PRE>/* This method is a sample of how to handle MSG_GEN_CONTROL_GET_INFO. It is
 * specific to UICTextStyleControlClass. To handle this message, it is easiest to
 * set up a number of static local variables with the base information and set
 * the structure to these variables. */</PRE>
<PRE>/* Handler for MSG_GEN_CONTROL_GET_INFO
 * void (GenControlBuildInfo *info);					*/</PRE>
<PRE>@method UICTextStyleControlClass, MSG_GEN_CONTROL_GET_INFO {</PRE>
<PRE>	/* General information constants */</PRE>
<PRE> static const char TSC_IniFileKey[] = &quot;textStyleControl&quot;;</PRE>
<PRE> static const GCNListType TSC_gcnList[] = {
 	{MANUFACTURER_ID_GEOWORKS, GAGCNLT_APP_TARGET_NOTIFY_TEXT_CHAR_ATTR_CHANGE}
 }; </PRE>
<PRE> static const NotificationType TSC_notifyTypeList[] = {
 	{MANUFACTURER_ID_GEOWORKS, GWNT_TEXT_CHAR_ATTR_CHANGE}
 };</PRE>
<PRE>	/* Features information constants */</PRE>
<PRE>    static const <A NAME="Controllers_b.htm_IX_GenControlChildInfo:example"> </A>GenControlChildInfo TSC_childList[] = {
	{@PlainTextList, TSCF_PLAIN, GCCF_IS_DIRECTLY_A_FEATURE},
	{@TextStyleList, TSCF_BOLD|TSCF_ITALIC|TSCF_UNDERLINE|TSCF_STRIKE_THRU| 
	 TSCF_SUBSCRIPT|TSCF_SUPERSCRIPT, 0}</PRE>
<PRE>    };</PRE>
<PRE>	/* The order of this list is actually backwards from the
	 * record it reflects. */
    static const <A NAME="Controllers_b.htm_IX_GenControlFeaturesInfo:example"> </A>GenControlFeaturesInfo TSC_featuresList[] = {
	 {@SuperscriptEntry, @SuperscriptName, 0},
 	{@SubscriptEntry, @SubscriptName, 0},
 	{@StrikeThruEntry, @StrikeThruName, 0},
 	{@UnderlineEntry, @UnderlineName, 0},
 	{@ItalicEntry, @ItalicName, 0},
 	{@BoldEntry, @BoldName, 0},
 	{@PlainTextList, @PlainTextName, 0}
    };</PRE>
<PRE>	/* Tools information constants */</PRE>
<PRE>    static const GenControlChildInfo TSC_toolList[] = {
 	{@PlainTextToolList, TSCTF_PLAIN, GCCF_IS_DIRECTLY_A_FEATURE},
 	{@TextStyleToolList, TSCTF_BOLD|TSCTF_ITALIC|TSCTF_UNDERLINE|
	 TSCTF_STRIKE_THRU|TSCTF_SUBSCRIPT|TSCTF_SUPERSCRIPT, 0} };
    };</PRE>
<PRE>    static const GenControlFeaturesInfo TSC_toolFeaturesList[] = {
 	{@SuperscriptToolEntry, @SuperscriptName, 0},
 	{@SubscriptToolEntry, @SubscriptName, 0},
 	{@StrikeThruToolEntry, @StrikeThruName, 0},
 	{@UnderlineToolEntry, @UnderlineName, 0},
 	{@ItalicToolEntry, @ItalicName, 0},
 	{@BoldToolEntry, @BoldName, 0},
 	{@PlainTextToolList, @PlainTextName, 0}
    };</PRE>
<PRE>	/* Our constant for the GenControlBuildInfo structure.
	 * Fields with a marker to the left of their names are
	 * filled in dynamically by the handler following the
	 * constant definition. */
    static const <A NAME="Controllers_b.htm_IX_GenControlBuildInfo:example"> </A>GenControlBuildInfo TSC_dupInfo = {
	GCBF_SUSPEND_ON_APPLY, 					/* GCBI_flags */
 	TSC_IniFileKey, 					/* GCBI_initFileKey */
 	TSC_gcnList, 					/* GCBI_gcnList */
 	ARRAY_LEN(TSC_gcnList,GCNListType), 					/* GCBI_gcnCount */
 	TSC_notifyTypeList, 					/* GCBI_notificationList */
 	ARRAY_LEN(TSC_notifyTypeList, NotificationType), 
						/* GCBI_notificationCount */
 	@TSCName, 					/* GCBI_controllerName */ 

 	/* ## */ NullHandle, 					/* GCBI_dupBlock */
 	TSC_childList, 					/* GCBI_childList */
 	ARRAY_LEN(TSC_childList, GenControlChildInfo),
 						/* GCBI_childCount */
 	TSC_featuresList, 					/* GCBI_featuresList */
 	ARRAY_LEN(TSC_featuresList, GenControlFeaturesInfo),
 						/* GCBI_featuresCount */
 	TSC_DEFAULT_FEATURES, 					/* GCBI_features */
 	/* ## */ NullHandle, 					/* GCBI_toolBlock */
 	TSC_toolList, 					/* GCBI_toolList */
 	ARRAY_LEN(TSC_toolList, GenControlChildInfo),
 						/* GCBI_toolCount */
 	TSC_toolFeaturesList, 					/* GCBI_toolFeaturesList */
 	ARRAY_LEN(TSC_toolFeaturesList, GenControlFeaturesInfo),
 						/* GCBI_toolFeaturesCount */
 	TSC_DEFAULT_TOOLBOX_FEATURES 					/* GCBI_toolFeatures */
    };</PRE>
<PRE>	/* Here is the code that fills in the above missing fields and
	 * returns the proper structure. */</PRE>
<PRE>    /* Copy the structure containing most of the correct information. */
    memcpy(info, MemLockFixedOrMovable(&amp;TSC_dupInfo), sizeof(GenControlBuildInfo));
    MemUnlockFixedOrMovable(&amp;TSC_dupInfo);</PRE>
<PRE>    /* Fill the remaining fields in manually. */
    info-&gt;GCBI_dupBlock = HandleOf(@PlainTextList);
    info-&gt;GCBI_toolBlock = HandleOf(@PlainTextToolList); 
}<A NAME="Controllers_b.htm_marker=1174"> </A></PRE>



<HR>
<A NAME="Controllers_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 4.3 <A HREF="#Controllers_9.htm">Creating Your Own Controllers</A>: 
Advanced GenControlClass Usage</H3>
<P>
Everything you need to create a basic custom controller class is detailed in the previous sections. <CODE>
GenControlClass</CODE>
, however, has a number of messages and structures that will be used by some subclasses, though this will be relatively rare. This section details these messages and structures.</P>

<H4 CLASS="HeadingC">
Adding and Removing UI Gadgetry</H4>
<PRE>MSG_GEN_CONTROL_GENERATE_UI, MSG_GEN_CONTROL_DESTROY_UI, MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI, MSG_GEN_CONTROL_DESTROY_TOOLBOX_UI, MSG_GEN_CONTROL_UPDATE_UI, MSG_GEN_CONTROL_ENABLE_DISABLE, MSG_GEN_CONTROL_ADD_APP_UI, MSG_GEN_CONTROL_ADD_APP_TOOLBOX_UI, MSG_GEN_CONTROL_REBUILD_NORMAL_UI, MSG_GEN_CONTROL_REBUILD_TOOLBOX_UI</PRE>
<P>
<CODE>
GenControlClass</CODE>
<A NAME="Controllers_c.htm_IX_controllers:additional UI gadgetry">
 </A>
 has several messages that add, remove, and manipulate the controller UI gadgetry. Keep in mind also that, as a subclass of <CODE>
GenInteractionClass</CODE>
 and thereby of <CODE>
GenClass</CODE>
, the GenControl also can use any of the generic UI messages for object tree manipulation. These messages are detailed in the following list.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_GENERATE_UI">
 </A>
MSG_GEN_CONTROL_GENERATE_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_GENERATE_UI();</PRE>
<P>
This message generates the UI gadgetry for the controller.</P>
<P CLASS="refField">
Source:	Unrestricted--sent by self as part of specific UI build.</P>
<P CLASS="refField">
Destination:	Any GenControl object</P>
<P CLASS="refField">
Interception:	If subclassed to add functionality, the subclass must call the superclass at the beginning of the handler.</P>
<P CLASS="refField">
Warnings:	If you intercept this message, you should also intercept <CODE>
MSG_GEN_CONTROL_DESTROY_UI</CODE>
, below.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_DESTROY_UI">
 </A>
MSG_GEN_CONTROL_DESTROY_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_DESTROY_UI();</PRE>
<P>
This message destroys the UI gadgetry for the controller.</P>
<P CLASS="refField">
Source:	Unrestricted--sent by self when being taken off the screen.</P>
<P CLASS="refField">
Destination:	Any GenControl object</P>
<P CLASS="refField">
Interception:	Any subclass that intercepts <CODE>
MSG_GEN_CONTROL_GENERATE_UI</CODE>
 must intercept this. The subclass must call the superclass at the end of the handler.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI">
 </A>
MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI(
        optr	parent);</PRE>
<P>
This message generates the UI gadgetry for the controller's tool box.</P>
<P CLASS="refField">
Source:	Sent by tool box object via the active list as part of its specific UI build mechanism.</P>
<P CLASS="refField">
Destination:	The GenControl object that owns the tool box.</P>
<P CLASS="refField">
Parameters:	<CODE>
parent</CODE>
	The optr of GenInteraction that will be the parent of the controller's tools.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	A subclass may intercept this to add UI gadgetry to the toolbox when the toolbox is built. The subclass must call the superclass at the beginning of the handler.</P>
<P CLASS="refField">
Warnings:	Any controller that subclasses this message must also subclass <CODE>
MSG_GEN_CONTROL_DESTROY_TOOLBOX_UI</CODE>
 as well.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_DESTROY_TOOLBOX_UI">
 </A>
MSG_GEN_CONTROL_DESTROY_TOOLBOX_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_DESTROY_TOOLBOX_UI();</PRE>
<P>
This message destroys all toolbox UI associated with the controller.</P>
<P CLASS="refField">
Source:	Sent by the tool box being destroyed as part of its specific UI destruction mechanism.</P>
<P CLASS="refField">
Destination:	The GenControl object that owns the tool box.</P>
<P CLASS="refField">
Interception:	Any controller class that subclasses the message <CODE>
MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI</CODE>
 must also subclass this message. The subclass must call its superclass at the end of its handler.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_UPDATE_UI">
 </A>
MSG_GEN_CONTROL_UPDATE_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_UPDATE_UI(@stack
        MemHandle		toolBlock,
        MemHandle		childBlock,
        WordFlags		toolboxFeatures,
        WordFlags		features,
        MemHandle		data,
        word		changeID,
        ManufacturerID		manufID);</PRE>
<P>
This message updates all <CODE>
UI</CODE>
 components for the recipient controller.</P>
<P CLASS="refField">
Source:	Sent by <CODE>
GenControlClass</CODE>
 in its default handler for MSG_META_NOTIFY_WITH_DATA_BLOCK.</P>
<P CLASS="refField">
Destination:	The GenControl object being updated.</P>
<P CLASS="refField">
Parameters:	<CODE>
toolBlock</CODE>
	Handle of the object resource block containing the controller's tool UI gadgetry.</P>
<DL>
<DT>
<CODE>
childBlock</CODE>
</DT><DD>Handle of the object resource block containing the controller's default UI gadgetry. This may be taken from the <CODE>
TEMP_GEN_CONTROL_INSTANCE</CODE>
 vardata field.</DD>
<DT>
<CODE>
toolboxFeatures</CODE>
</DT><DD>A record of flags indicating which tools are currently on for the controller. This may be taken from the <CODE>
TEMP_GEN_CONTROL_INSTANCE</CODE>
 vardata field. If the toolbox UI is not interactible, then this field will be zero.</DD>
<DT>
<CODE>
features</CODE>
</DT><DD>A record of flags indicating which features are currently on for the controller. This may be taken from the <CODE>
TEMP_GEN_CONTROL_INSTANCE</CODE>
 vardata field. If the UI is not interactible, then this field will be zero.</DD>
<DT>
<CODE>
data</CODE>
</DT><DD>The data block handle passed with the notification message.</DD>
<DT>
<CODE>
changeID</CODE>
</DT><DD>The type of update to undergo, as passed with the notification message.</DD>
<DT>
<CODE>
manufID</CODE>
</DT><DD>The manufacturer ID of the notification type passed with the notification message.</DD>
</DL>
<P CLASS="refField">
Interception:	Controllers should intercept this message in order to properly update their UI gadgetry. There is no default handler for this message.</P>
<P CLASS="refField">
Structures:	The <CODE>
TEMP_GEN_CONTROL_INSTANCE</CODE>
 vardata field is of type <CODE>
TempGenControlInstance</CODE>
, which has the following structure:</P>
<PRE><A NAME="Controllers_c.htm_IX_TGCI_&ldots;"> </A><A NAME="IX_TempGenControlInstance"> </A>typedef struct {
	GenControlInteractableFlags
				TGCI_interactableFlags;
	MemHandle			TGCI_childBlock;
	MemHandle			TGCI_toolBlock;
	optr			TGCI_toolParent;
	WordFlags			TGCI_features;
	WordFlags			TGCI_toolboxFeatures;
	GCNListType			TGCI_activeNotificationList;
	GenControlInteractableFlags TGCI_upToDate;
} TempGenControlInstance;</PRE>
<DL>
<DT>
<CODE>
TGCI_interactableFlags</DT><DD>
</CODE>
This record describes which, if any, of a controller's UI parts is interactable (visible and usable). Its flags are listed below.</DD>
<DT>
<CODE>
TGCI_childBlock</DT><DD>
</CODE>
The handle of the resource block containing the controller's default UI objects.</DD>
<DT>
<CODE>
TGCI_toolBlock</DT><DD>
</CODE>
The handle of the resource block containing the tool objects.</DD>
<DT>
<CODE>
TGCI_toolParent</DT><DD>
</CODE>
The optr of the object passed with <CODE>
MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI</CODE>
, if any (tools will be added to this object).</DD>
<DT>
<CODE>
TGCI_features</DT><DD>
</CODE>
A record of flags indicating which controller features are currently active.</DD>
<DT>
<CODE>
TGCI_toolboxFeatures</DT><DD>
</CODE>
A record of flags indicating which controller tools are currently active.</DD>
<DT>
<CODE>
TGCI_activeNotificationList</DT><DD>
</CODE>
The notification type currently active.</DD>
<DT>
<CODE>
TGCI_upToDate</DT><DD>
</CODE>
The status of <CODE>
GenControlInteractableFlags</CODE>
 at the time of the last notification; that is, which portions of the controller's UI were up to date. This is used by the specific UI for drawing optimizations.</DD>
</DL>
<P>
The flags for the <CODE>
GenControlInteractableFlags</CODE>
 record are listed below:</P>
<DL>
<DT>
GCIF_CONTROLLER</DT><DD>
This flag indicates the controller object is interactable.</DD>
<DT>
GCIF_TOOLBOX_UI</DT><DD>
This flag indicates that some or all of the controller's tool gadgetry is interactable.</DD>
<DT>
GCIF_NORMAL_UI</DT><DD>
This flag indicates that some or all of the controller's normal feature gadgetry is interactable.</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ENABLE_DISABLE">
 </A>
MSG_GEN_CONTROL_ENABLE_DISABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ENABLE_DISABLE(
        Message		msg;
        VisUpdateMode		updateMode);</PRE>
<P>
This message enables or disables the controller object as well as its default and tool box UI gadgetry.</P>
<P CLASS="refField">
Source:	Sent by <CODE>
GenControlClass</CODE>
 to the controller object when it receives <CODE>
MSG_META_NOTIFY_WITH_DATA_BLOCK</CODE>
.</P>
<P CLASS="refField">
Destination:	Sent by controller to itself.</P>
<P CLASS="refField">
Parameters:	<CODE>
msg</CODE>
	Either <CODE>
MSG_GEN_SET_ENABLED</CODE>
 or <CODE>
MSG_GEN_SET_NOT_ENABLED</CODE>
 as appropriate.</P>
<DL>
<DT>
<CODE>
updateMode</CODE>
</DT><DD>A <CODE>
VisUpdateMode</CODE>
 indicating when the visual update should occur.</DD>
</DL>
<P CLASS="refField">
Interception:	Unlikely--typically should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ADD_APP_UI">
 </A>
MSG_GEN_CONTROL_ADD_APP_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ADD_APP_UI(
        optr	appUI);</PRE>
<P>
This message adds the passed UI object to the controller's generic tree as if it had been originally defined in the default child block. By default, the new object is added as the last child of the controller.</P>
<P CLASS="refField">
Source:	Unrestricted--generated as part of the default functionality of <CODE>
MSG_GEN_CONTROL_GENERATE_UI</CODE>
 if the controller has <CODE>
ATTR_GEN_CONTROL_APP_UI</CODE>
 set.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
appUI</CODE>
	The optr of the object to be added.</P>
<P CLASS="refField">
Interception:	Should be intercepted by controllers that wish to add the new object somewhere other than as the last child.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ADD_APP_TOOLBOX_UI">
 </A>
MSG_GEN_CONTROL_ADD_APP_TOOLBOX_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ADD_APP_TOOLBOX_UI(
        optr	appUI);</PRE>
<P>
This message adds the passed UI object to the controller's tool UI gadgetry as if it had been defined as a tool in the tool resource block. By default, the new object is added as the last child of the controller.</P>
<P CLASS="refField">
Source:	Unrestricted--generated as part of the default functionality of <CODE>
MSG_GEN_CONTROL_GENERATE_TOOLBOX_UI</CODE>
 if the controller has <CODE>
ATTR_GEN_CONTROL_APP_TOOLBOX_UI</CODE>
 set.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
appUI</CODE>
	The optr of the object to be added.</P>
<P CLASS="refField">
Interception:	Should be intercepted by controllers that wish to add the new object somewhere other than as the last child.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_REBUILD_NORMAL_UI">
 </A>
MSG_GEN_CONTROL_REBUILD_NORMAL_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_REBUILD_NORMAL_UI();</PRE>
<P>
This message forces the normal UI of the controller to be rebuilt; each component will be visually destroyed and rebuilt.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_REBUILD_TOOLBOX_UI">
 </A>
MSG_GEN_CONTROL_REBUILD_TOOLBOX_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_REBUILD_TOOLBOX_UI();</PRE>
<P>
This message forces the toolbox UI of the controller to be rebuilt; each component will be visually destroyed and rebuilt.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>



<H4 CLASS="HeadingC">
Adding and Removing Features and Tools</H4>
<PRE>MSG_GEN_CONTROL_SCAN_FEATURE_HINTS, MSG_GEN_CONTROL_ADD_FEATURE, MSG_GEN_CONTROL_REMOVE_FEATURE, MSG_GEN_CONTROL_ADD_TOOLBOX_FEATURE, MSG_GEN_CONTROL_REMOVE_TOOLBOX_FEATURE, MSG_GEN_CONTROL_GET_NORMAL_FEATURES, MSG_GEN_CONTROL_GET_TOOLBOX_FEATURES</PRE>
<P>
<A NAME="Controllers_c.htm_IX_controllers:adding and removing tools">
 </A>
Besides being able to set and clear features of a given controller, both the controller class and outside agents can dynamically alter the features of a given controller object. <CODE>
GenControlClass</CODE>
 has several messages that you can use for this purpose; these messages are detailed below.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_SCAN_FEATURE_HINTS">
 </A>
MSG_GEN_CONTROL_SCAN_FEATURE_HINTS</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_SCAN_FEATURE_HINTS(
        GenControlUIType		type,
        GenControlScanInfo		*info);</PRE>
<P>
This message scans the feature hints set for the controller object to set the required and prohibited features.</P>
<P CLASS="refField">
Source:	Unrestricted--Sent by <CODE>
GenControlClass</CODE>
 to itself in numerous circumstances.</P>
<P CLASS="refField">
Destination:	The GenControl object to be scanned.</P>
<P CLASS="refField">
Parameters:	<CODE>
type</CODE>
	An indicator whether the normal or tool box UI hints are to be scanned. This should be GCUIT_NORMAL for the normal hints, GCUIT_TOOLBOX for the tool box hints.</P>
<DL>
<DT>
<CODE>
info</CODE>
</DT><DD>A pointer to an empty <CODE>
GenControlScanInfo</CODE>
 structure to be filled in by the handler. This structure is shown below.</DD>
</DL>
<P CLASS="refField">
Return:	No value is returned directly.</P>
<DL>
<DT>
<CODE>
info</CODE>
</DT><DD>The pointer to the <CODE>
GenControlScanInfo</CODE>
 structure filled in by the method.</DD>
</DL>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>
<P CLASS="refField">
Structures:	<A NAME="Controllers_c.htm_IX_GenControlScanInfo">
 </A>
<A NAME="Controllers_c.htm_IX_GCSI_&ldots;">
 </A>
The <CODE>
GenControlScanInfo</CODE>
 structure has the following fields:</P>
<PRE>typedef struct {
	WordFlags		GCSI_userAdded;
	WordFlags		GCSI_userRemoved;
	WordFlags		GCSI_appRequired;
	WordFlags		GCSI_appProhibited;
} GenControlScanInfo;</PRE>
<DL>
<DT>
<CODE>
GCSI_userAdded</DT><DD>
</CODE>
A record of features added by the user through the use of the GenToolControl object. This record also reflects the use of <CODE>
MSG_GEN_CONTROL_ADD_FEATURE</CODE>
.</DD>
<DT>
<CODE>
GCSI_userRemoved</DT><DD>
</CODE>
A record of features removed by the user through the use of the GenToolControl object.</DD>
<DT>
<CODE>
GCSI_appRequired</DT><DD>
</CODE>
A record of features required; this is set for the controller with <CODE>
ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI</CODE>
 or <CODE>
ATTR_GEN_CONTROL_REQUIRE_UI</CODE>
.</DD>
<DT>
<CODE>
GCSI_appProhibited</DT><DD>
</CODE>
A record of features prohibited; this is set for the controller with <CODE>
ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI</CODE>
 or <CODE>
ATTR_GEN_CONTROL_PROHIBIT_UI</CODE>
.</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ADD_FEATURE">
 </A>
MSG_GEN_CONTROL_ADD_FEATURE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ADD_FEATURE(
        WordFlags featureToAdd);</PRE>
<P>
This message adds a feature to those currently supported by the controller. This is used for the default settings only, not for tool box UI. The controller is destroyed and then rebuilt with the new feature, causing it to be marked for saving to the state file in the new configuration.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
featureToAdd</CODE>
	A feature record with the flag of the feature to be added set.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_REMOVE_FEATURE">
 </A>
MSG_GEN_CONTROL_REMOVE_FEATURE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_REMOVE_FEATURE
        WordFlags featureToRemove);</PRE>
<P>
This message removes a feature from those currently supported by the controller. It does not affect the active tools. The controller will be marked for saving to the state file in the new configuration; it is destroyed and rebuilt with feature removed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
featureToRemove</CODE>
	A feature record with the flag of the feature to be removed set.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ADD_TOOLBOX_FEATURE">
 </A>
MSG_GEN_CONTROL_ADD_TOOLBOX_FEATURE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ADD_TOOLBOX_FEATURE(
        WordFlags featureToAdd);</PRE>
<P>
This message adds a tool to those currently supported by the controller. This is used for the tool box settings only, not for the default UI features. The controller is destroyed and then rebuilt with the new tool, causing it to be marked for saving to the state file in the new configuration.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
featureToAdd</CODE>
	A feature record with the flag of the to be added set.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_REMOVE_TOOLBOX_FEATURE">
 </A>
MSG_GEN_CONTROL_REMOVE_TOOLBOX_FEATURE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_REMOVE_TOOLBOX_FEATURE(
        WordFlags featureToRemove);</PRE>
<P>
This message removes a tool from those currently supported by the controller. It does not affect the default active feature list. The controller will be marked for saving to the state file in the new configuration; it is destroyed and rebuilt with the tool removed.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
featureToRemove</CODE>
	A feature record with the flag of the tool to be removed set.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_GET_NORMAL_FEATURES">
 </A>
MSG_GEN_CONTROL_GET_NORMAL_FEATURES</H6>
<PRE CLASS="syntax">void MSG_GEN_CONTROL_GET_NORMAL_FEATURES(
        GenControlGetFeaturesReturn *return);</PRE>
<P>
This message returns a structure indicating which of the default features of the controller are currently active, which are required, and which are prohibited.</P>
<P CLASS="refField">
Source:	Unrestricted--typically GenToolControl.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
return</CODE>
	A pointer to an empty structure to be returned.</P>
<P CLASS="refField">
Return:	The <CODE>
return</CODE>
 parameter, upon return, points to a filled <CODE>
GenControlGetFeaturesReturn</CODE>
 structure.</P>
<P CLASS="refField">
Structures:	<A NAME="Controllers_c.htm_IX_GCSR_&ldots;">
 </A>
<A NAME="Controllers_c.htm_IX_GenControlGetFeaturesReturn">
 </A>
The <CODE>
GenControlGetFeaturesReturn</CODE>
 structure is shown below:</P>
<PRE>typedef struct {
	WordFlags		GCSR_features;
	WordFlags		GCSR_required;
	WordFlags		GCSR_prohibited;
	WordFlags		GCSR_supported;
} GenControlGetFeaturesReturn;</PRE>
<DL>
<DT>
<CODE>
GCSR_features</DT><DD>
</CODE>
A record of flags indicating which features are currently active.</DD>
<DT>
<CODE>
GCSR_required</DT><DD>
</CODE>
A record of flags indicating which features, at the least, are required for the controller.</DD>
<DT>
<CODE>
GCSR_prohibited</DT><DD>
</CODE>
A record of flags indicating which features are prohibited to the controller.</DD>
<DT>
<CODE>
GCSR_supported</DT><DD>
</CODE>
A record of flags indicating the full range of supported features.</DD>


</DL>
<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_GET_TOOLBOX_FEATURES">
 </A>
MSG_GEN_CONTROL_GET_TOOLBOX_FEATURES</H6>
<PRE CLASS="syntax">void MSG_GEN_CONTROL_GET_TOOLBOX_FEATURES(
        GenControlGetFeaturesReturn *return);</PRE>
<P>
This message returns a structure indicating which of the controller's tools are currently active, which are required, and which are prohibited.</P>
<P CLASS="refField">
Source:	Unrestricted--typically GenToolControl.</P>
<P CLASS="refField">
Destination:	Any GenControl object.</P>
<P CLASS="refField">
Parameters:	<CODE>
return</CODE>
	A pointer to an empty structure to be returned.</P>
<P CLASS="refField">
Return:	The <CODE>
return</CODE>
 parameter, upon return, points to a filled <CODE>
GenControlGetFeaturesReturn</CODE>
 structure.</P>
<P CLASS="refField">
Structures:	The <CODE>
GenControlGetFeaturesReturn</CODE>
 structure is shown in <CODE>
MSG_GEN_CONTROL_GET_NORMAL_FEATURES</CODE>
, above.</P>



<H4 CLASS="HeadingC">
Working with GCN Lists</H4>
<PRE>MSG_GEN_CONTROL_ADD_TO_GCN_LISTS, MSG_GEN_CONTROL_REMOVE_FROM_GCN_LISTS</PRE>
<P>
<A NAME="Controllers_c.htm_IX_controllers:with GCN lists">
 </A>
Because <CODE>
GenControlClass</CODE>
 uses GCN lists, it has two messages that add itself to and remove itself from the lists. You can intercept or send these if you need to; applications generally will not, however. These two messages are detailed below.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_ADD_TO_GCN_LISTS">
 </A>
MSG_GEN_CONTROL_ADD_TO_GCN_LISTS</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_ADD_TO_GCN_LISTS();</PRE>
<P>
This message adds the controller object to the GCN lists specified by its return value of <CODE>
MSG_GEN_CONTROL_GET_INFO</CODE>
. It will force a status update to ensure that the controller updates itself.</P>
<P CLASS="refField">
Source:	Generated internally on startup and at other times.</P>
<P CLASS="refField">
Destination:	Sent to self.</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Subclasses should use this only to see when the controller is being added to its lists; it should call the superclass to do the actual addition.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_REMOVE_FROM_GCN_LISTS">
 </A>
MSG_GEN_CONTROL_REMOVE_FROM_GCN_LISTS</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_REMOVE_FROM_GCN_LISTS();</PRE>
<P>
This message removes the controller from all its GCN lists.</P>
<P CLASS="refField">
Source:	Generated internally on shutdown and at other times.</P>
<P CLASS="refField">
Destination:	Sent to self.</P>
<P CLASS="refField">
Interception:	Generally not intercepted. Subclasses should use this only to see when the controller is being removed from its lists; it should call the superclass to do the actual removal.</P>



<H4 CLASS="HeadingC">
Working with Controller Visibility</H4>
<PRE>MSG_GEN_CONTROL_NOTIFY_INTERACTABLE, MSG_GEN_CONTROL_NOTIFY_NOT_INTERACTABLE, MSG_GEN_CONTROL_UNBUILD_NORMAL_UI_IF_POSSIBLE</PRE>
<P>
<A NAME="Controllers_c.htm_IX_controllers:interactability">
 </A>
Because controllers are generic objects which may or may not be interactable, <CODE>
GenControlClass</CODE>
 has two messages to handle the interactable state. It has an additional message to close the normal UI tools, if possible. These three messages are detailed below.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_NOTIFY_INTERACTABLE">
 </A>
MSG_GEN_CONTROL_NOTIFY_INTERACTABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_NOTIFY_INTERACTABLE(
        GenControlInteractableFlags flags);</PRE>
<P>
This message instructs the controller to take any actions necessary before being put on the screen and made interactable. It causes the controller to add itself to its GCN lists (if it wasn't already) and take any final steps to get ready to go on the screen.</P>
<P CLASS="refField">
Source:	Generated Internally--do not generate externally.</P>
<P CLASS="refField">
Destination:	Sent to self.</P>
<P CLASS="refField">
Parameters:	<CODE>
flags</CODE>
	A single record of flags indicating which portions of the controller will be made interactable.</P>
<P CLASS="refField">
Interception:	May be intercepted to circumvent default behavior.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_NOTIFY_NOT_INTERACTABLE">
 </A>
MSG_GEN_CONTROL_NOTIFY_NOT_INTERACTABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_NOTIFY_NOT_INTERACTABLE(
        GenControlInteractableFlags flags);</PRE>
<P>
This message indicates that the UI has determined that the controller can no longer be seen or interacted with by the user. The default behavior of the controller is to remove itself from its GCN lists for optimization.</P>
<P CLASS="refField">
Source:	Generated Internally--do not generate externally.</P>
<P CLASS="refField">
Destination:	Sent to self.</P>
<P CLASS="refField">
Parameters:	<CODE>
flags</CODE>
	A single record of flags indicating which portions of the controller are no longer interactable.</P>
<P CLASS="refField">
Interception:	May be intercepted to circumvent default behavior.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_c.htm_IX_MSG_GEN_CONTROL_UNBUILD_NORMAL_UI_IF_POSSIBLE">
 </A>
MSG_GEN_CONTROL_UNBUILD_NORMAL_UI_IF_POSSIBLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_CONTROL_UNBUILD_NORMAL_UI_IF_POSSIBLE();</PRE>
<P>
This internal message requests that the normal default controller UI gadgetry be removed and destroyed if they are not in use. This is an optimization intended to save swap space and perhaps memory space; it causes the objects to be loaded back in again when needed, however. Thus, the optimization is only suited to machines with limited swap space (it originated due to these conditions on palmtop machines).</P>
<P CLASS="refField">
Source:	Generated internally. Do not generate externally.</P>
<P CLASS="refField">
Destination:	Sent to self.</P>
<P CLASS="refField">
Interception:	May be intercepted to avoid the optimization. May also need to be intercepted if a subclass creates its own UI gadgetry by intercepting <CODE>
MSG_GEN_CONTROL_GENERATE_UI</CODE>
<A NAME="Controllers_c.htm_marker=1107">
 </A>
.</P>


<HR>
<A NAME="Controllers_d.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 5 
<A NAME="Controllers_d.htm_14796">
 </A>
GenToolControlClass</H2>
<P>
<CODE>
GenToolControlClass</CODE>
<A NAME="Controllers_d.htm_IX_GenToolControlClass">
 </A>
 is a subclass of <CODE>
GenControlClass</CODE>
; the tool control allows the user to manipulate and manage all the other controllers in an application and save the configuration he or she sets up.</P>
<P>
Previous sections of this chapter explain how to include a GenToolControl object in your application; this section details the specific structures, messages, and internals of <CODE>
GenToolControlClass</CODE>
. Most application programmers will never need to know this information, though some library programmers will want to read the next section.

</P>
<P>
<CODE>
GenToolControlClass</CODE>
 has two instance fields beyond those inherited from <CODE>
GenControlClass</CODE>
. One field is the chunk handle of the Tool Location Table, and the other is the chunk handle of the Tool Group List, both defined below:</P>
<PRE>@instance ChunkHandle				<A NAME="Controllers_d.htm_IX_GTCI_toolboxList"> </A>GTCI_toolboxList;
@instance ChunkHandle				<A NAME="Controllers_d.htm_IX_GTCI_toolGroupList"> </A>GTCI_toolGroupList;
    @default GI_states = @default | GS_ENABLED;</PRE>
<P>
The Tool Location Table must be set up for any application that uses a GenToolControl. The structure of this table is given in <A HREF="#Controllers_8.htm_21343"> Using Tools</A>
. The total number of allowable entries in the Tool Location Table is MAX_NUM_TOOLBOXES, which is 25. Because the GenToolControl uses one of these entries, you can have at most 24 other locations for a controller's tools to appear.</P>
<P>
The Tool Group List is a list of all the GenToolGroup objects associated with controllers in the application. Each controller may have exactly one GenToolGroup object for managing its tools, and all the ToolGroups must appear in this list if the GenToolControl is to manage them. The Tool Group List is described in <A HREF="#Controllers_8.htm_21343"> Using Tools</A>
.</P>
<P>
<CODE>
GenToolControlClass</CODE>
 also uses a vardata field to store temporary information about a particular controller; the tool control uses this information when presenting the user with options of where the controller's features may be placed. This vardata field is shown below (both the definition of the field and the structure it uses):</P>
<PRE>@vardata TempGenToolControlInstance
			<A NAME="Controllers_d.htm_IX_TEMP_GEN_TOOL_CONTROL_INSTANCE"> </A>TEMP_GEN_TOOL_CONTROL_INSTANCE;</PRE>
<PRE><A NAME="Controllers_d.htm_IX_TGTCI_&ldots;"> </A><A NAME="IX_TempGenToolControlInstance"> </A>typedef struct {
    optr		TGTCI_curController;
    word		TGTCI_features;
    word		TGTCI_required;
    word		TGTCI_allowed;
} <A NAME="Controllers_d.htm_IX_TempGenToolControlInstance"> </A>TempGenToolControlInstance;</PRE>
<P>
The individual fields of the temporary structure are described below.</P>
<DL>
<DT>
<CODE>
TGTCI_curController</DT><DD>
</CODE>
The optr of the current controller whose tool options are being presented to the user. The GenToolControl allows the user to select and edit the features and location of this controller. If the user selects a new controller for editing, this field will be changed to the new controller's optr.</DD>
<DT>
<CODE>
TGTCI_features</DT><DD>
</CODE>
The mask of the currently active features of the controller.</DD>
<DT>
<CODE>
TGTCI_required</DT><DD>
</CODE>
The mask of the features which the controller object has defined as required--these must always be active and can not be &quot;hidden&quot; by the user. This mask is set by the controller with <CODE>
ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI</CODE>
.</DD>
<DT>
<CODE>
TGTCI_allowed</DT><DD>
</CODE>
The mask of features that are allowed by both the controller and the application. Features set in this mask but not in <CODE>
TGTCI_features</CODE>
 will be implemented but will be &quot;hidden&quot; from the user. Features not in either list will not be implemented by the controller for the application.</DD>
</DL>
<P>
The GenToolControl uses a number of internal messages that should not be intercepted. You can, however, use the data structures of <CODE>
GenToolControlClass</CODE>
 in a subclass and add functionality to the tool controller.<A NAME="Controllers_d.htm_marker=1074">
 </A>
</P>
<HR>
<A NAME="Controllers_e.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 6 
GenToolGroupClass</H2>
<P>
<A NAME="Controllers_e.htm_IX_GenToolGroupClass">
 </A>
The GenToolGroup object is used to group tools for an individual controller. It is highly unlikely you will ever need to subclass or interact directly with <CODE>
GenToolGroupClass</CODE>
, though you will often use GenToolControl objects.</P>
<P>
<CODE>
GenToolGroupClass</CODE>
 is subclassed from <CODE>
GenInteractionClass</CODE>
 because its primary functions are grouping and geometry management. Each GenControl object in your application should have exactly one GenToolGroup associated with it, and all the GenToolGroups should appear in the Tool Group List of the GenToolControl.</P>
<P>
<CODE>
GenToolGroupClass</CODE>
 has one instance data field in addition to those inherited from <CODE>
GenInteractionClass</CODE>
:</P>
<PRE>@instance optr			<A NAME="Controllers_e.htm_IX_GTGI_controller"> </A>GTGI_controller;
    @default GI_states = (@default &amp; ~GS_ENABLED);</PRE>
<P>
This field contains the optr of the GenControl object whose tools are managed by this GenToolGroup. This field is nearly always set in your <STRONG CLASS="fileName">
.goc</STRONG>
 file.</P>
<P>
The GenToolGroup also has a temporary vardata field that indicates the color in which the tool group should be highlighted; this allows the user to better see which set of tools is being &quot;discussed&quot; (e.g. which set is currently being manipulated by the GenToolControl).</P>
<PRE>@vardata Color <A NAME="Controllers_e.htm_IX_TEMP_TOOL_GROUP_HIGHLIGHT"> </A>TEMP_TOOL_GROUP_HIGHLIGHT;</PRE>
<P>
To set the highlight type, <CODE>
GenToolGroupClass</CODE>
 has a single message. <CODE>
MSG_GEN_TOOL_GROUP_SET_HIGHLIGHT</CODE>
 sets the color of the group's highlight; if the group should not be highlighted, the color should be set to -1.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_e.htm_IX_MSG_GEN_TOOL_GROUP_SET_HIGHLIGHT">
 </A>
MSG_GEN_TOOL_GROUP_SET_HIGHLIGHT</H6>
<PRE CLASS="syntax">void	MSG_GEN_TOOL_GROUP_SET_HIGHLIGHT(
        ToolGroupHighlightType			hlType);</PRE>
<P>
<A NAME="Controllers_e.htm_IX_Color:highlight color of tool group">
 </A>
This message sets the highlight color of the tool group. This is used almost exclusively by the GenToolControl.</P>
<P CLASS="refField">
Source:	GenToolControl object; can also be sent by others.</P>
<P CLASS="refField">
Destination:	The GenToolGroup whose highlight color is to be set.</P>
<P CLASS="refField">
Parameters:	<CODE>
hlType</CODE>
	The new highlight type to be used by the tool group. The values are TGHT_INACTIVE_HIGHLIGHT, TGHT_ACTIVE_HIGHLIGHT, and TGHT_NO_HIGHLIGHT.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.<A NAME="Controllers_e.htm_marker=1077">
 </A>
</P>

<HR>
<A NAME="Controllers_f.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 7 
Other Controllers</H2>
<P>
Most system objects provide their own controllers; those controllers are documented along with the objects they control. Some controllers, however, may be used by more than one system object; these are documented here. The three classes below are <CODE>
ColorSelectorClass</CODE>
, <CODE>
GenPageControlClass</CODE>
, and <CODE>
StyleSheetControlClass</CODE>
.</P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_10.htm">ColorSelectorClass</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_11.htm">GenPageControlClass</A></P>
<P CLASS="subsectionLink">
<A HREF="#Controllers_12.htm">The Float Format Controller</A></P>
<HR>
<A NAME="Controllers_10.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 7.1 <A HREF="#Controllers_f.htm">Other Controllers</A>: 
<A NAME="Controllers_10.htm_35959">
 </A>
ColorSelectorClass</H3>
<P>
<A NAME="Controllers_10.htm_IX_ColorSelectorClass">
 </A>
The ColorSelector controller provides all the UI necessary to allow the user to select a color, a draw mask, and a draw pattern. The color may be selected either as an index or an RGB value. The ColorSelector must be put on the GenApplication's GAGCNLT_SELF_LOAD_OPTIONS GCN list.</P>
<P>
The ColorSelector has the following features:</P>
<PRE><A NAME="Controllers_10.htm_IX_CSF_&ldots;"> </A><A NAME="IX_CSFeatures"> </A>typedef WordFlags CSFeatures;
#define CSF_FILLED_LIST				0x10
#define CSF_INDEX				0x08
#define CSF_RGB				0x04
#define CSF_DRAW_MASK				0x02
#define CSF_PATTERN				0x01</PRE>
<PRE>#define CS_DEFAULT_FEATURES					(CSF_FILLED_LIST |
		CSF_INDEX | CSF_RGB | CSF_DRAW_MASK |
		CSF_PATTERN)</PRE>
<P>
<A NAME="Controllers_10.htm_IX_CSI_&ldots;">
 </A>
In addition, the ColorSelector has several instance fields, all shown below:</P>
<PRE><A NAME="Controllers_10.htm_IX_color selector:instance data"> </A>@instance ColorQuad				CSI_color = {0, 0, 0, 0};
		/* currently selected color */
@instance byte				CSI_colorIndeterminate;
		/* true if color is indeterminate */
@instance SystemDrawMask CSI_drawMask = SDM_0;
		/* draw mask in use by the color */
@instance byte				CSI_drawMaskIndeterminate;
		/* true if mask is indeterminate */
@instance GraphicPattern CSI_pattern = {0, 0};
		/* pattern in use by the color */
@instance byte				CSI_patternIndeterminate;
		/* true if pattern indeterminate */</PRE>
<PRE>@instance ColorModifiedStates CSI_states = 0;
		/* indicates which aspects have changed:
		 * CMS_COLOR_CHANGED
		 * CMS_DRAW_MASK_CHANGED
		 * CMS_PATTERN_CHANGED */
@instance ColorToolboxPreferences CSI_toolboxPrefs
						= CTP_IS_POPUP;
		/* preferences for color selector:
		 * CTP_INDEX_ORIENTATION
		 * CTP_DRAW_MASK_ORIENTATION
		 * CTP_PATTERN_ORIENTATION
		 * CTP_IS_POPUP */</PRE>
<PRE>@vardata optr ATTR_COLOR_SELECTOR_DISABLE_OBJECT;
		/* when color selector is disabled, the
		 * object named will also be disabled */</PRE>

<H4 CLASS="HeadingC">
Messages Sent Out by the ColorSelector</H4>
<PRE>MSG_META_COLORED_OBJECT_SET_COLOR, MSG_META_COLORED_OBJECT_SET_DRAW_MASK, MSG_META_COLORED_OBJECT_SET_PATTERN</PRE>
<P>
<A NAME="Controllers_10.htm_IX_color selector:messages">
 </A>
The ColorSelector sends out three messages to its data objects. These messages each serve to set a particular attribute of the object it currently controls (the target object). The target object must be able to handle these messages if it is to use the ColorSelector.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_META_COLORED_OBJECT_SET_COLOR">
 </A>
MSG_META_COLORED_OBJECT_SET_COLOR</H6>
<PRE CLASS="syntax">void	MSG_META_COLORED_OBJECT_SET_COLOR(
        ColorQuad color);</PRE>
<P>
This message notifies the controlled object that it should set its color to the passed value.</P>
<P CLASS="refField">
Source:	ColorSelector object.</P>
<P CLASS="refField">
Destination:	The current Target object.</P>
<P CLASS="refField">
Parameters:	<CODE>
color</CODE>
	The <CODE>
ColorQuad</CODE>
 structure describing the color to be set.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Must be intercepted by the controlled object if it is to work with the ColorSelector controller.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_META_COLORED_OBJECT_SET_DRAW_MASK">
 </A>
MSG_META_COLORED_OBJECT_SET_DRAW_MASK</H6>
<PRE CLASS="syntax">void	MSG_META_COLORED_OBJECT_SET_DRAW_MASK(
        SystemDrawMask mask);</PRE>
<P>
This message notifies the controlled object that it should set its draw mask to the passed value.</P>
<P CLASS="refField">
Source:	ColorSelector object.</P>
<P CLASS="refField">
Destination:	The current Target object.</P>
<P CLASS="refField">
Parameters:	<CODE>
mask</CODE>
	The <CODE>
SystemDrawMask</CODE>
 to be set as the object's draw mask.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Must be intercepted by the controlled object if it is to work with the ColorSelector controller.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_META_COLORED_OBJECT_SET_PATTERN">
 </A>
MSG_META_COLORED_OBJECT_SET_PATTERN</H6>
<PRE CLASS="syntax">void	MSG_META_COLORED_OBJECT_SET_PATTERN(
        GraphicPattern pattern);</PRE>
<P>
This message notifies the controlled object that it should sets its draw pattern to that passed.</P>
<P CLASS="refField">
Source:	ColorSelector object.</P>
<P CLASS="refField">
Destination:	The current Target object.</P>
<P CLASS="refField">
Parameters:	<CODE>
pattern</CODE>
	The <CODE>
GraphicPattern</CODE>
 to be set as the object's draw pattern.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Must be intercepted by the controlled object if it is to work with the ColorSelector controller.</P>



<H4 CLASS="HeadingC">
Messages Handled by ColorSelectorClass</H4>
<PRE>MSG_COLOR_SELECTOR_GET_COLOR, MSG_COLOR_SELECTOR_SET_COLOR, MSG_COLOR_SELECTOR_GET_DRAW_MASK, MSG_COLOR_SELECTOR_SET_DRAW_MASK, MSG_COLOR_SELECTOR_GET_PATTERN, MSG_COLOR_SELECTOR_SET_PATTERN</PRE>
<P>
The ColorSelector handles a number of messages including the normal <CODE>
GenControlClass</CODE>
 messages it inherits. These messages allow the setting or retrieval of the instance data of the controller.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_GET_COLOR">
 </A>
MSG_COLOR_SELECTOR_GET_COLOR</H6>
<PRE CLASS="syntax">void	MSG_COLOR_SELECTOR_GET_COLOR(
        ColorQuad		*retVal);</PRE>
<P>
This message retrieves the controller's <CODE>
CSI_color</CODE>
 field.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	<CODE>
retVal</CODE>
	A pointer to an empty ColorQuad structure.</P>
<P CLASS="refField">
Return:	The <CODE>
ColorQuad</CODE>
 structure pointed to by <CODE>
retVal</CODE>
 will be the color set in <CODE>
CSI_color</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_SET_COLOR">
 </A>
MSG_COLOR_SELECTOR_SET_COLOR</H6>
<PRE CLASS="syntax">void	MSG_COLOR_SELECTOR_SET_COLOR(
        ColorQuad color);</PRE>
<P>
This message sets the color in <CODE>
CSI_color</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	<CODE>
color</CODE>
	The <CODE>
ColorQuad</CODE>
 structure representing the new color for the <CODE>
CSI_color</CODE>
 field.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_GET_DRAW_MASK">
 </A>
MSG_COLOR_SELECTOR_GET_DRAW_MASK</H6>
<PRE CLASS="syntax">SystemDrawMask MSG_COLOR_SELECTOR_GET_DRAW_MASK();</PRE>
<P>
This message retrieves the draw mask set in <CODE>
CSI_drawMask</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The <CODE>
SystemDrawMask</CODE>
 set in <CODE>
CSI_drawMask</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_SET_DRAW_MASK">
 </A>
MSG_COLOR_SELECTOR_SET_DRAW_MASK</H6>
<PRE CLASS="syntax">void	MSG_COLOR_SELECTOR_SET_DRAW_MASK(
        SystemDrawMask mask);</PRE>
<P>
This message sets the draw mask stored in <CODE>
CSI_drawMask</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	<CODE>
mask</CODE>
	The new <CODE>
SystemDrawMask</CODE>
 to be set into <CODE>
CSI_drawMask</CODE>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_GET_PATTERN">
 </A>
MSG_COLOR_SELECTOR_GET_PATTERN</H6>
<PRE CLASS="syntax">GraphicPattern MSG_COLOR_SELECTOR_GET_PATTERN();</PRE>
<P>
This message returns the pattern set in <CODE>
CSI_pattern</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The GraphicPattern currently set in <CODE>
CSI_pattern</CODE>
.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_10.htm_IX_MSG_COLOR_SELECTOR_SET_PATTERN">
 </A>
MSG_COLOR_SELECTOR_SET_PATTERN</H6>
<PRE CLASS="syntax">void	MSG_COLOR_SELECTOR_SET_PATTERN(
        GraphicPattern pattern);</PRE>
<P>
This message sets the drawing pattern stored in <CODE>
CSI_pattern</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	<CODE>
pattern</CODE>
	The <CODE>
GraphicPattern</CODE>
 value to be set.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.<A NAME="Controllers_10.htm_marker=1089">
 </A>
</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_UPDATE_COLOR</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Update the current color in the toolbox and normal UI. This message is normally sent from within a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Source:	Unrestricted--sent in a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A ColorQuad structure and an indeterminate flag.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_APPLY_COLOR</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Makes the color selector send <CODE>
MSG_META_COLORED_OBJECT_SET_COLOR</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A Color enumeration value.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_UPDATE_FILLED_STATUS</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Makes the color selector update the draw mask and associated UI.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
SystemDrawMask</CODE>
, an indeterminate flag, and a tools update flag.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_GET_FILLED_MONIKER</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Returns the VisMoniker that should be used to represent the &quot;do draw&quot; item in the color selector.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The optr of the VisMoniker chunk or NullOptr to use the default.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_GET_UNFILLED_MONIKER</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Returns the VisMoniker that should be used to represent the &quot;don't draw&quot; item in the color selector.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The optr of the VisMoniker chunk or NullOptr to use the default.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_UPDATE_DRAW_MASK</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Update the current draw mask in the toolbox and the UI. This is often sent from within a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Source:	Unrestricted--sent in a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
SystemDrawMask</CODE>
 value and an indeterminate flag.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_APPLY_DRAW_MASK</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Generates <CODE>
MSG_META_COLORED_OBJECT_SET_DRAW_MASK</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
SystemDrawMask</CODE>
 value.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_UPDATE_PATTERN</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Update the current pattern in the toolbox and the UI. This is often sent from within a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Source:	Unrestricted--sent in a <CODE>
MSG_GEN_CONTROL_UPDATE_UI</CODE>
 handler.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
GraphicPattern</CODE>
 value and an indeterminate flag.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_COLOR_SELECTOR_APPLY_PATTERN</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Generates <CODE>
MSG_META_COLORED_OBJECT_SET_PATTERN</CODE>
.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
GraphicPattern</CODE>
 value.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_FILLED_STATUS</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Tells the controller to disable itself and set the mask to zero or to re-enable itself and set the mask to 100, based on the passed flag.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	A <CODE>
SysDrawMask</CODE>
 value.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_CF_INDEX</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sent by the color list to set a color via an index.</P>
<P CLASS="refField">
Source:	The color list.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	See <STRONG CLASS="fileName">
colorC.goh</STRONG>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_CF_RGB_RED</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sent by the color list to set a color's red value.</P>
<P CLASS="refField">
Source:	The color list.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	see <STRONG CLASS="fileName">
colorC.goh</STRONG>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_CF_RGB_GREEN</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sent by the color list to set a color's green value.</P>
<P CLASS="refField">
Source:	The color list.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	see <STRONG CLASS="fileName">
colorC.goh</STRONG>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_CF_RGB_BLUE</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sent by the color list to set a color's blue value.</P>
<P CLASS="refField">
Source:	The color list.</P>
<P CLASS="refField">
Destination:	Any ColorSelector object.</P>
<P CLASS="refField">
Parameters:	see <STRONG CLASS="fileName">
colorC.goh</STRONG>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_DRAW_MASK</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sets the draw mask for the color selector.</P>


<H6 CLASS="RefETitle">
MSG_CS_SET_PATTERN</H6>
<PRE CLASS="syntax">See colorC.goh</PRE>
<P>
Sets the pattern for the color selector<A NAME="Controllers_10.htm_marker=1215">
 </A>
.</P>


<HR>
<A NAME="Controllers_11.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 7.2 <A HREF="#Controllers_f.htm">Other Controllers</A>: 
<A NAME="Controllers_11.htm_84135">
 </A>
GenPageControlClass</H3>
<P>
<CODE>
GenPageControlClass</CODE>
<A NAME="Controllers_11.htm_IX_GenPageControlClass">
 </A>
 provides a controller object that allows the user to go to any page in a page range. This controller provides UI gadgetry for going to a specified page, going to the next page, or going to the previous page.</P>
<P>
The GenPageControl must be put on the GAGCNLT_SELF_LOAD_OPTIONS GCN list in the GenApplication object. It responds to the notification type MANUFACTURER_ID_GEOWORKS.GWNT_PAGE_STATE_CHANGE (sent with a <CODE>
NotifyPageStateChange</CODE>
 structure) and sends out three messages exported from <CODE>
MetaClass</CODE>
.</P>
<P>
GenPageControlClass<A NAME="Controllers_11.htm_IX_page controller:features and tools">
 </A>
 is subclassed from GenControlClass and has the features and tools shown below. It has none of its own instance data fields.</P>
<PRE><A NAME="Controllers_11.htm_IX_GPCF_&ldots;"> </A><A NAME="IX_GPCFeatures"> </A>typedef WordFlags GPCFeatures;
#define GPCF_GOTO_PAGE					0x0004
#define GPCF_NEXT_PAGE					0x0002
#define GPCF_PREVIOUS_PAGE					0x0001</PRE>
<PRE><A NAME="Controllers_11.htm_IX_GPCTF_&ldots;"> </A><A NAME="IX_GPCToolboxFeatures"> </A>typedef WordFlags GPCToolboxFeatures;
#define GPCTF_PREVIOUS_PAGE					0x0004
#define GPCTF_GOTO_PAGE					0x0002
#define GPCTF_NEXT_PAGE					0x0001</PRE>
<PRE>#define <A NAME="Controllers_11.htm_IX_GPC_DEFAULT_FEATURES"> </A>GPC_DEFAULT_FEATURES (GPCF_GOTO_PAGE |
		GPCF_NEXT_PAGE | GPCF_PREVIOUS_PAGE)</PRE>
<PRE>#define <A NAME="Controllers_11.htm_IX_GPC_DEFAULT_TOOLBOX_FEATURES"> </A>GPC_DEFAULT_TOOLBOX_FEATURES
		(GPCTF_GOTO_PAGE | GPCTF_NEXT_PAGE |
		 GPCTF_PREVIOUS_PAGE)</PRE>
<PRE>@default GCI_output = (TO_APP_TARGET);</PRE>
<P>
The messages this controller sends out must be handled by any object controlled by it.</P>

<H6 CLASS="RefETitle">
<A NAME="Controllers_11.htm_IX_MSG_META_PAGED_OBJECT_GOTO_PAGE">
 </A>
M<A NAME="Controllers_11.htm_IX_page controller:messages">
 </A>
SG_META_PAGED_OBJECT_GOTO_PAGE</H6>
<PRE CLASS="syntax">void	MSG_META_PAGED_OBJECT_GOTO_PAGE(
        word	page);</PRE>
<P>
This message causes the paged object to go to the specified page.</P>
<P CLASS="refField">
Source:	The GenPageControl object.</P>
<P CLASS="refField">
Destination:	The target paged object.</P>
<P CLASS="refField">
Parameters:	<CODE>
page</CODE>
	The page number to which the recipient should go.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	This message must be intercepted for the paged object to interact properly with the GenPageControl object.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_11.htm_IX_MSG_META_PAGED_OBJECT_NEXT_PAGE">
 </A>
MSG_META_PAGED_OBJECT_NEXT_PAGE</H6>
<PRE CLASS="syntax">void	MSG_META_PAGED_OBJECT_NEXT_PAGE();</PRE>
<P>
This message indicates that the recipient should go to the next page.</P>
<P CLASS="refField">
Source:	The GenPageControl object.</P>
<P CLASS="refField">
Destination:	The target paged object.</P>
<P CLASS="refField">
Interception:	This message must be intercepted for the paged object to interact properly with the GenPageControl object.</P>


<H6 CLASS="RefETitle">
<A NAME="Controllers_11.htm_IX_MSG_META_PAGED_OBJECT_PREVIOUS_PAGE">
 </A>
MSG_META_PAGED_OBJECT_PREVIOUS_PAGE</H6>
<PRE CLASS="syntax">void	MSG_META_PAGED_OBJECT_PREVIOUS_PAGE();</PRE>
<P>
This message indicates that the recipient should go to the previous page.</P>
<P CLASS="refField">
Source:	The GenPageControl object.</P>
<P CLASS="refField">
Destination:	The target paged object.</P>
<P CLASS="refField">
Interception:	This message must be intercepted for the paged object to interact properly with the GenPageControl object.</P>


<H6 CLASS="RefETitle">
MSG_PC_GOTO_PAGE</H6>
<PRE CLASS="syntax">see gPageCC.goh</PRE>
<P>
Causes the page control object to go to the specified page.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The page control object.</P>
<P CLASS="refField">
Parameters:	The page to go to.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
MSG_PC_NEXT_PAGE</H6>
<PRE CLASS="syntax">void	MSG_PC_NEXT_PAGE();</PRE>
<P>
Causes the page controller to go to the next page.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The page control object.</P>
<P CLASS="refField">
Interception:	Should not be intercepted.</P>


<H6 CLASS="RefETitle">
MSG_PC_PREVIOUS_PAGE</H6>
<PRE CLASS="syntax">void	MSG_PC_PREVIOUS_PAGE();</PRE>
<P>
Causes the page controller to go to the previous page.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	The page control object.</P>
<P CLASS="refField">
Interception:	Should not be intercepted<A NAME="Controllers_11.htm_marker=1218">
 </A>
.</P>

<HR>
<A NAME="Controllers_12.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">Generic UI Controllers</A>: 7.3 <A HREF="#Controllers_f.htm">Other Controllers</A>: 
<A NAME="Controllers_12.htm_10072">
 </A>
The Float Format Controller</H3>
<P>
Including the Float Format controller in your application allows the user to format FP numbers into any of the system-defined formats. The controller also allows the user to define his or her own formats. </P>
<P>
The following messages, routines and data structures all manage arrays of system-defined and user-defined formats. If you include a Float Format controller, you will need to intercept these messages and call many of these routines.</P>

<H4 CLASS="HeadingC">
Retrieving Parameters of the Current Entry</H4>
<PRE><A NAME="Controllers_12.htm_IX_FloatFormatGetFormatParamsWithListEntry()"> </A>FloatFormatGetFormatParamsWithListEntry(), <A NAME="IX_FloatFormatGetFormatParamsWithToken()"> </A>FloatFormatGetFormatParamsWithToken(), <A NAME="IX_FloatFormatGetFormatTokenWithName()"> </A>FloatFormatGetFormatTokenWithName()</PRE>
<P>
The Float Format controller routines use a <A NAME="Controllers_12.htm_IX_FormatInfoStruc">
 </A>
<CODE>
FormatInfoStruc</CODE>
 structure to hold information about a particular format. This structure is convenient to pass around to other float format routines. The Float Format controller contains one instance field, <CODE>
formatInfoStrucHan</CODE>
, that stores the handle to the current <CODE>
FormatInfoStruc</CODE>
, if one is being used by the controller.</P>
<P CLASS="figTitle">
Code Display 12-10 FormatInfoStruc</P>
<PRE>typedef struct {</PRE>
<PRE>	/*
	 * FIS_signature is used internally for error-checking.
	 */
	word		FIS_signature;</PRE>
<PRE>	/*
	 * These two entries store the user defined format array for the 
	 * controller to work on. This array is created by FloatFormatInit().
	 */
	FileHandle		FIS_userDefFmtArrayFileHan;
	VMBlockHandle 		FIS_userDefFmtArrayBlkHan;</PRE>
<PRE>	/*
	 * These two entries store the object block and format list chunk that the 
	 * controller resides in.
	 */
	word		FIS_childBlk;
	word		FIS_chooseFmtListChunk;</PRE>
<PRE>	/*
	 * FIS_features stores the features list of the controller.
	 */
	word		FIS_features;</PRE>
<PRE>	/*
	 * FIS_editFlag is -1 if we are editing a current user-defined entry and 0 
	 * if we are creating a new user-defined entry.
	 */
	byte		FIS_editFlag;</PRE>
<PRE>	/* FIS_curSelection stores the current selection in the format list. */
	word		FIS_curSelection;</PRE>
<PRE>	/* FIS_curToken stores the token of the selected item in the list. */
	word		FIS_curToken;</PRE>
<PRE>	/* FIS_curParams stores the FormatParams of the selected item. */
	FormatParams		FIS_curParams;
} FormatInfoStruc;</PRE>
<P>
<CODE>
FloatFormatGetFormatParamsWithListEntry()</CODE>
 fills in a <CODE>
FormatInfoStruc</CODE>
 corresponding to the passed list entry position in the Float Format controller's dynamic list. The routine must be passed a <CODE>
FormatInfoStruc</CODE>
 with the entry position in FIS_<CODE>
curSelection</CODE>
 already filled in. You must also have the FIS_<CODE>
userDefFmtArrayFileHan</CODE>
 and FIS_<CODE>
userDefFmtArrayBlkHan</CODE>
 filled in properly before calling this routine.</P>
<P>
This routine is called whenever the user clicks on a new item, or whenever the dynamic list needs to retrieve new monikers for the list. You will also probably need to use this routine in your application code when intercepting many of the Float Format controller messages.</P>
<P>
<CODE>
FloatFormatGetFormatParamsWithToken()</CODE>
 fills in the <CODE>
FormatParams</CODE>
 of a particular format entry when passed a format's token. The routine must be passed the <CODE>
FormatInfoStruc</CODE>
 with FIS_<CODE>
curToken</CODE>
 already filled in. You must also have the FIS_<CODE>
userDefFmtArrayFileHan</CODE>
 and FIS_<CODE>
userDefFmtArrayBlkHan</CODE>
 filled in properly before calling this routine.</P>
<P>
<CODE>
FloatFormatGetFormatTokenWithName()</CODE>
 returns the format token of a particular format when passed its name (in a <CODE>
FormatInfoStruc</CODE>
).</P>


<H4 CLASS="HeadingC">
Initializing the UI</H4>
<PRE><A NAME="Controllers_12.htm_IX_MSG_FLOAT_CTRL_UPDATE_UI"> </A>MSG_FLOAT_CTRL_UPDATE_UI, <A NAME="IX_MSG_FLOAT_CTRL_REQUEST_MONIKER"> </A>MSG_FLOAT_CTRL_REQUEST_MONIKER, <A NAME="IX_FloatFormatInit()"> </A>FloatFormatInit(), <A NAME="IX_FloatFormatInitFormatList()"> </A>FloatFormatInitFormatList()</PRE>
<P>
<CODE>
FloatFormatInit()</CODE>
 initializes a format array to serve as the storage space for user-defined formats. It must be passed the VM file handle to create the array within. </P>
<P>
MSG_FLOAT_CTRL_UPDATE_UI is sent to the Float Format controller whenever the controller needs to perform a visual update. Your Float Format controller should intercept this message and call <CODE>
FloatFormatInitFormatList()</CODE>
.</P>
<P>
<CODE>
FloatFormatInitFormatList()</CODE>
 initializes the Float Format dynamic list whenever the list needs to display a new moniker. It extracts the moniker text of the selected format from the <CODE>
FormatInfoStruc </CODE>
structure. Make sure that this structure has the proper VM file and block handles filled in prior to calling this routine.</P>
<P>
MSG_FLOAT_CTRL_REQUEST_MONIKER is sent to the Float Format controller whenever it needs to display the text within the controller's dynamic list. To extract the current format's moniker, intercept this message and call <CODE>
FloatFormatGetFormatParamsWithListEntry()</CODE>
. You can then pass the format's textual name (from FIS_<CODE>
curParams</CODE>
.FP_<CODE>
formatName</CODE>
) to MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT.</P>


<H4 CLASS="HeadingC">
Setting Up Selected Formats</H4>
<PRE><A NAME="Controllers_12.htm_IX_MSG_FLOAT_CTRL_FORMAT_SELECTED"> </A>MSG_FLOAT_CTRL_FORMAT_SELECTED, <A NAME="IX_FloatFormatProcessFormatSelected()"> </A>FloatFormatProcessFormatSelected()</PRE>
<P>
MSG_FLOAT_CTRL_FORMAT_SELECTED is sent to the Float Format controller whenever the user makes a new selection. This message allows your application to set up a new <CODE>
FormatInfoStruc</CODE>
 based on the new selection. Your handler for this message needs to call <CODE>
FloatFormatProcessFormatSelected()</CODE>
.</P>


<H4 CLASS="HeadingC">
User Defined Format Creation</H4>
<PRE><A NAME="Controllers_12.htm_IX_MSG_FLOAT_CTRL_USER_DEF_INVOKE"> </A>MSG_FLOAT_CTRL_USER_DEF_INVOKE, <A NAME="IX_FloatFormatInvokeUserDefDB()"> </A>FloatFormatInvokeUserDefDB(), <A NAME="IX_MSG_FLOAT_CTRL_USER_DEF_OK"> </A>MSG_FLOAT_CTRL_USER_DEF_OK, <A NAME="IX_FloatFormatUserDefOK()"> </A>FloatFormatUserDefOK()</PRE>
<P>
MSG_FLOAT_CTRL_USER_DEF_INVOKE is sent to the Float Format controller whenever the user has defined a new format and wishes to add it to the controller's dynamic list. Your handler for this message should call <CODE>
FloatFormatInvokeUserDefDB()</CODE>
 in turn. If the user attempts to create a new format when MAX_FORMATS already exist, the routine will invoke an error box.</P>
<P>
MSG_FLOAT_CTRL_USER_DEF_OK is sent to the Float Format controller to check whether the user-defined format is legal or previously duplicated. Your handler for this message should call <CODE>
FloatFormatUserDefOK()</CODE>
 to perform this check and apply the user-defined format to the list of format entries if it is successful.</P>


<H4 CLASS="HeadingC">
Deleting Formats</H4>
<PRE><A NAME="Controllers_12.htm_IX_MSG_FLOAT_CTRL_FORMAT_DELETE"> </A>MSG_FLOAT_CTRL_FORMAT_DELETE, <A NAME="IX_FloatFormatDelete()"> </A>FloatFormatDelete()</PRE>
<P>
MSG_FLOAT_CTRL_FORMAT_DELETE is sent to the Float Format controller when the user attempts to delete a user-defined entry. Your handler for this message needs to call <CODE>
FloatFormatDelete()</CODE>
.</P>


<H4 CLASS="HeadingC">
Applying Formats</H4>
<PRE><A NAME="Controllers_12.htm_IX_MSG_FLOAT_CTRL_FORMAT_APPLY"> </A>MSG_FLOAT_CTRL_FORMAT_APPLY</PRE>
<P>
MSG_FLOAT_CTRL_FORMAT_APPLY is sent to the FloatFormat controller when the user attempts to apply a format selected in the controller to the appropriate text selection. Your handler will need to extract information from the <CODE>
FormatInfoStruc</CODE>
 and call the appropriate text formatting routine (e.g. <CODE>
FloatFloatToAsciI()</CODE>
).</P>

<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
