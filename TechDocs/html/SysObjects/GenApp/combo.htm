<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>The Application Object</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>



<H1 CLASS="chapterTitle">

<A NAME="index.htm_97933">
 </A>
The Application Object

</H1>
<P>
<A NAME="index.htm_IX_GenApplicationClass">
 </A>
The GenApplication object is used as the top object in every application geode. It acts as the head of the generic object tree, and it provides all the functionality necessary for launching and shutting down the application. It is a subclass of <CODE>
GenClass </CODE>
and therefore inherits all the instance data and messages of that class.</P>
<P>
<CODE>
GenApplicationClass</CODE>
 has no inherent visual representation. Instead, the main windows of an application are created and managed by one or more GenPrimary objects, which should be placed both as children of the Application object and on the application's GAGCNLT_WINDOWS notification list (if it should appear when the application starts up).</P>
<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#Application_1.htm">1 GenApplication Basics</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_2.htm">1.1 Instance Data</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_3.htm">1.2 Application GCN Lists</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_4.htm">1.3 Application Instance Reference</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_5.htm">1.4 Attach and Launch Flags</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_6.htm">1.5 ApplicationStates</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_7.htm">1.6 Application Features and Levels</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_8.htm">1.7 IACP</A><BR>
&nbsp;&nbsp;<A HREF="#Application_9.htm">2 Advanced GenApplication Usage</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_a.htm">2.1 An Application's Life Cycle</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_b.htm">2.2 Application Busy States</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_c.htm">2.3 The GenApplication's Moniker</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_d.htm">2.4 Measurement Type</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#Application_e.htm">2.5 Interaction with the UI</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="Application_1.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1 
GenApplication Basics</H2>
<P>
The top-level generic object of your application must be a GenApplication object. You should place this application object within its own resource; this ensures that your application will take up little memory when minimized. Your application tree should branch from this single node. <A HREF="#Application_1.htm_37639"> HelloApp from Hello World</A>
 shows a section of Hello World to illustrate the typical use of a <CODE>
GenApplicationClass</CODE>
 object.</P>
<P CLASS="figTitle">
Code Display 3-1 <A NAME="Application_1.htm_37639">
 </A>
HelloApp from Hello World</P>
<PRE>/*			Application Object
 * The hello.gp file contains an &quot;appobj&quot; statement which indicates that this
 * &quot;HelloApp&quot; object is the top-level UI object. Note that the name of the
 * resource you place the application object in may be whatever you choose;
 * it does not have to be AppResource. */</PRE>
<PRE>@start AppResource;				/* Begin definition of objects in AppResource. */</PRE>
<PRE>@object GenApplicationClass HelloApp = {
    GI_comp = @HelloPrimary;
			/* The GI_comp attribute lists the generic children
			 * of the object. The HelloApp object has just one
			 * child, the primary window of the application. */</PRE>
<PRE>    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = HelloPrimary; 
			/* The window's application GCN list determines which
			 * windowable children should be launched on
			 * startup. The primary window in most cases should be
			 * launched on startup.*/
}</PRE>
<PRE>@end AppResource				/* End definition of objects in AppResource. */</PRE>
<P>
Typically, you will not subclass <CODE>
GenApplicationClass</CODE>
. You may occasionally send messages to it, but otherwise it exists primarily to interact with the User Interface.</P>
<P>
Note that the Application object you set up in your<STRONG CLASS="fileName">
 .goc</STRONG>
 file must be reflected in the Geode Parameters file (the <STRONG CLASS="fileName">
.gp</STRONG>
 file). The name of the Application object should appear in the <CODE>
appobj</CODE>
 field of the <STRONG CLASS="fileName">
.gp</STRONG>
 file.</P>
<P CLASS="subsectionLink">
<A HREF="#Application_2.htm">Instance Data</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_3.htm">Application GCN Lists</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_4.htm">Application Instance Reference</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_5.htm">Attach and Launch Flags</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_6.htm">ApplicationStates</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_7.htm">Application Features and Levels</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_8.htm">IACP</A></P>
<HR>
<A NAME="Application_2.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.1 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
Instance Data</H3>
<P>
<CODE>
GenApplicationClass</CODE>
 provides several instance data fields, most of which you will not use. All the instance fields of GenApplication are listed in <A HREF="#Application_2.htm_75875"> GenApplication Instance Fields</A>
 for reference, however.</P>
<P CLASS="figTitle">
Code Display 3-2 <A NAME="Application_2.htm_75875">
 </A>
GenApplication Instance Fields</P>
<PRE>/* These fields will not be used directly. They can be accessed dynamically,
 * however, with the various messages that set and retrieve the instance data. */</PRE>
<PRE>@instance AppInstanceReference				GAI_appRef = {&quot;&quot;,&quot;&quot;,NullHandle,{0}};
@instance word				GAI_appMode = 0;
@instance AppLaunchFlags				GAI_launchFlags = 0;
@instance byte				GAI_optFlags = 0;
@instance word				GAI_appFeatures = 0;
@instance Handle				GAI_specificUI = 0;
@instance ApplicationStates				GAI_states = AS_FOCUSABLE | AS_MODELABLE;
@instance AppAttachFlags				GAI_attachFlags = 0;
@instance UIInterfaceLevel				GAI_appLevel = UIIL_ADVANCED;
@instance ChunkHandle				GAI_iacpConnects = 0;</PRE>
<PRE>/* ApplicationStates */</PRE>
<PRE>typedef WordFlags ApplicationStates;
#define AS_HAS_FULL_SCREEN_EXCL					0x2000
#define AS_SINGLE_INSTANCE					0x1000
#define AS_QUIT_DETACHING					0x0800
#define AS_AVOID_TRANSPARENT_DETACH					0x0400
#define AS_TRANSPARENT_DETACHING					0x0200
#define AS_REAL_DETACHING					0x0100
#define AS_QUITTING					0x0080
#define AS_DETACHING					0x0040
#define AS_FOCUSABLE					0x0020
#define AS_MODELABLE					0x0010
#define AS_NOT_USER_INTERACTABLE					0x0008
#define AS_RECEIVED_APP_OBJECT_DETACH					0x0004
#define AS_ATTACHED_TO_STATE_FILE					0x0002
#define AS_ATTACHING					0x0001</PRE>
<PRE>/* Optimization Flags */</PRE>
<PRE>typedef ByteFlags AppOptFlags;
#define AOF_MULTIPLE_INIT_FILE_CATEGORIES	0x80</PRE>
<PRE>/* GenApplicationClass also modifies two GenClass instance fields. */</PRE>
<PRE>@default GI_states = @default &amp; ~GS_USABLE;
@default GI_attrs = @default | GA_TARGETABLE;</PRE>
<P>
GAI_<CODE>
appRef</CODE>
 is internal. It stores information needed to reload this application. If the application is detached, this instance field contains information necessary to reload this application to its state at detachment.</P>
<P>
GAI_<CODE>
appMode</CODE>
 stores the message that should be sent to the application's Process object to bring the application back from a saved state. This is initially null and is set by the <CODE>
GenProcessClass</CODE>
 object as soon as it is determined.</P>
<P>
GAI_<CODE>
launchFlags</CODE>
 stores the <CODE>
AppLaunchFlags</CODE>
 that govern how the application should be run. These flags are used internally and are set when the application is first launched.</P>
<P>
GAI_<CODE>
optFlags</CODE>
 stores miscellaneous optimization flags. </P>
<P>
<CODE>
GAI_appFeatures</CODE>
 stores a word representing the application's features as determined by the user's level of expertise. This field is used primarily by hints in GenControl objects and is rarely used directly otherwise.</P>
<P>
GAI_<CODE>
specificUI</CODE>
 stores the handle of the specific UI under which this application is running. This is determined and set by the system when the application is launched.</P>
<P>
GAI_<CODE>
states</CODE>
 stores the <CODE>
ApplicationStates</CODE>
 of the GenApplication. See <A HREF="#Application_6.htm_69688"> ApplicationStates</A>
 for full information on application states.</P>
<P>
GAI_<CODE>
attachFlags</CODE>
 stores the <CODE>
AppAttachFlags</CODE>
 relating to restoring the application from a state file when attached. </P>
<P>
GAI_<CODE>
appLevel</CODE>
 stores an application's user interface level. This level controls the degree of complexity allowed in the application.</P>
<P>
GAI_<CODE>
iacpConnects</CODE>
 stores the chunk handle to an array of active IACP connections.</P>
<P CLASS="figTitle">
Code Display 3-3 GenApplication Vardata Fields</P>
<PRE>@vardata void HINT_APP_IS_ENTERTAINING;
@vardata void HINT_APP_IS_EDUCATIONAL;
@vardata void HINT_APP_IS_PRODUCTIVITY_ORIENTED;</PRE>
<PRE>@vardata void HINT_APPLICATION_NO_INBOX_QUERY_WHEN_FOREGROUND_APP;</PRE>
<PRE>@vardata void HINT_APPLICATION_QUIT_ON_IACP_ALLOW_FILE_ACCESS;</PRE>
<PRE>@vardata optr ATTR_GEN_APPLICATION_PRINT_CONTROL;
	@reloc ATTR_GEN_APPLICATION_PRINT_CONTROL, 0, optr;
@vardata optr ATTR_GEN_APPLICATION_KBD_OBJ;
@vardata optr ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER;
	@reloc ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER, 0, optr;</PRE>
<PRE>@vardata GeodeToken ATTR_GEN_APPLICATION_ADDITIONAL_TOKENS;</PRE>
<PRE>/* GenApplication adds a TravelOption to communicate with the Print Control. */</PRE>
<PRE>typedef enum {
    TO_PRINT_CONTROL=_FIRST_GenApplicationClass
} GenApplicationTravelOption;</PRE>
<P>
GenApplication also provides several hints that indicate the type of application. HINT_APP_IS_ENTERTAINING, HINT_APP_IS_EDUCATIONAL and HINT_APP_IS_PRODUCTIVITY_ORIENTED are provided for this purpose. </P>
<P>
<CODE>
HINT_APPLICATION_NO_INBOX_QUERY_WHEN_FOREGROUND_APP</CODE>
 is only applicable for devices that contain a system inbox for the receipt of messages. If this is the case and the application is set up to receive these messages, this hint indicates that the system should deliver the message to the application without prompting the user. (By default, the system initiates a dialog box asking the user whether to accept any newly received messages.)</P>
<P>
<CODE>
HINT_APPLICATION_QUIT_ON_IACP_ALLOW_FILE_ACCESS</CODE>
 indicates that the application should quit (send itself a <CODE>
MSG_META_QUIT</CODE>
) if it receives a <CODE>
MSG_META_IACP_CLOSE_FILE</CODE>
. This message indicates that a client application is requesting access to a file that the current application is accessing.</P>
<P>
ATTR_GEN_APPLICATION_PRINT_CONTROL stores the optr of the object to act as the destination for any messages sent to the <CODE>
GenApplicationTravelOption</CODE>
 TO_PRINT_CONTROL. Specifically, this attribute is designed to allow remote printing capabilities.</P>
<P>
ATTR_GEN_APPLICATION_KBD_OBJ stores the optr of the object to act as the application's floating keyboard. This object must be a subclass of <CODE>
GenInteractionClass</CODE>
 and must be in the generic tree below the application object. MSG_GEN_APPLICATION_DISPLAY_FLOATING_KEYBOARD will display this keyboard.</P>
<P>
ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER contains the optr of the Save Options trigger within the options menu. If you have a custom Save Options trigger, you should add the optr of this object in this field.</P>
<P>
ATTR_GEN_APPLICATION_ADDITIONAL_TOKENS </P>
<HR>
<A NAME="Application_3.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.2 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
Application GCN Lists</H3>
<P>
The GCN mechanism is fully discussed in <A HREF="../../Kernel/GCN/combo.htm">the General Change Mechanism chapter</A>. </P><P>
Your application may use application GCN lists to notify objects of certain events. For example, it is essential that any windowed objects that you wish to appear upon startup (including your GenPrimary) are added to the GAGCNLT_WINDOWS GCN list. </P>
<P>
<A NAME="Application_3.htm_IX_GAGCNLT_&ldots;">
 </A>
GenApplication uses its own GCN list types. The four most often used, and the four you will likely use in most of your applications, are listed below. The others can be found in the file <STRONG CLASS="fileName">
geoworks.def</STRONG>
 and following this short list. Note that all of these GCN list types correspond to the manufacturer ID MANUFACTURER_ID_GEOWORKS.</P>
<UL>
<LI>
MGCNLT_ACTIVE_LIST<BR>
<A NAME="Application_3.htm_IX_MGCNLT_ACTIVE_LIST">
 </A>
<A NAME="Application_3.htm_IX_Active list">
 </A>
This GCN list keeps a record of all objects that need to be built upon application startup. Objects on this list will receive several system attach and detach messages. Several types of GenControl objects need to be on this list to function properly. In that case, these controllers must also appear on either the GAGCNLT_SELF_LOAD_OPTIONS or GAGCNLT_STARTUP_LOAD_OPTIONS lists as well. Objects that do not need to receive attach notification (but do need to receive detach notification) may be added dynamically to this list.</LI>
<LI>
GAGCNLT_WINDOWS<BR>
<A NAME="Application_3.htm_IX_Windows:notification list">
 </A>
This GCN list keeps a record of windowed objects. All windowed objects that should be visible on startup must be added to this list. Any time a windowed object is visually initialized, it will be added to this list. It will not be removed until the object is visually closed. This is used to save window state across shutdown.</LI>
<LI>
GAGCNLT_SELF_LOAD_OPTIONS<BR>
<A NAME="Application_3.htm_IX_Initialization file:notification lists">
 </A>
This GCN list contains a record of all objects that save options upon receiving <CODE>
MSG_META_SAVE_OPTIONS</CODE>
. These objects will self-load their options; objects on this list will not receive <CODE>
MSG_META_LOAD_OPTIONS</CODE>
 automatically. If they need to do so, they should be added to the <CODE>
GAGCNLT_STARTUP_LOAD_OPTIONS</CODE>
 list instead. Objects on this list will be sent <CODE>
MSG_META_SAVE_OPTIONS</CODE>
 when the GenApplication receives <CODE>
MSG_META_SAVE_OPTIONS</CODE>
.</LI>
<LI>
GAGCNLT_STARTUP_LOAD_OPTIONS<BR>
This GCN list contains a record of all objects that should both load their options upon startup and save their options upon receiving <CODE>
MSG_META_SAVE_OPTIONS</CODE>
. Objects on this list will receive <CODE>
MSG_META_LOAD_OPTIONS</CODE>
 when they are first loaded.</LI>
</UL>
<P CLASS="figTitle">
Code Display 3-4 Sample GenApplication with Controllers</P>
<PRE>/* This application includes six controllers. One, the TabControl, must receive 
 * MSG_META_ATTACH to work properly and is placed on the GCN active list. Another
 * controller, the GenViewController, must receive MSG_META_LOAD_OPTIONS at
 * startup and is therefore placed on the STARTUP_LOAD_OPTIONS list. All other
 * controllers are placed on the SELF_LOAD_OPTIONS list. Note that controllers
 * placed on the active list still need to be placed on one options list. */</PRE>
<PRE>@object GenApplicationClass MyApplication = {
    GI_comp = @MyPrimary;
	/* Windows GCN list. */
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = @MyPrimary;
	/* Active GCN list. All objects that should receive
	 * MSG_META_ATTACH should be on this list. These controllers
	 * should also be added to the appropriate LOAD_OPTIONS list. */
    gcnList(MANUFACTURER_ID_GEOWORKS, MGCNLT_ACTIVE_LIST) = @MyTabControl,
			@MyToolControl;
	/* Startup Load Options GCN list. This list must include
	 * all objects that should receive MSG_META_LOAD_OPTIONS
	 * at attach time. */
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_STARTUP_LOAD_OPTIONS) =
			@MyGenViewControl;
	/* Self Load Options GCN list. All objects that save
	 * options and are not on the Startup Load Options list
	 * should appear here. */
    gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS) = @MyTabControl,
			@MyToolControl, @MyEditControl, @MyCharControl, 
			@MyParaControl;
}</PRE>
<P>
The other GenApplication-defined GCN lists are listed below with comments about their functions. Other GCN list types are also declared by other classes (e.g. <CODE>
MetaClass</CODE>
).</P>
<DL>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_GEN_CONTROL_NOTIFY_STATUS_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_GenToolControlClass: notification list">
 </A>
Keeps the GenToolControl up-to-date on the status of all the GenControl objects. The data block passed with this list is of type <CODE>
NotifyGenControlStatusChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SELECT_STATE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Target selections: notification list">
 </A>
Notifies objects of changes in the selection state. The data block passed with this list is of type <CODE>
NotifySelectStateChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_EDIT_CONTROL_NOTIFY_UNDO_STATE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Undo: notification list">
 </A>
Notifies objects of changes in the state of the undo item. The data block passed with this list is of type <CODE>
NotifyUndoStateChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_CHAR_ATTR_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Text: notification lists">
 </A>
Notifies objects of changes in the text character attributes.The data block passed with this list is of type <CODE>
VisTextNotifyCharAttrChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_PARA_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the text paragraph attributes. The data block passed with this list is of type <CODE>
VisTextNotifyParaAttrChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_TYPE_CHANGE</DT><DD>
Notifies objects of changes in the text type change.The data block passed with this list is of type <CODE>
VisTextNotifyTypeChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_SELECTION_CHANGE</DT><DD>
Notifies objects of changes in the text selection. The data block passed with this list is of type <CODE>
VisTextNotifySelectionChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_COUNT_CHANGE</DT><DD>
Notifies objects of changes in the text count. The data block passed with this list is of type <CODE>
VisTextNotifyCountChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_STYLE_TEXT_CHANGE</DT><DD>
Notifies objects of possible changes in the style. The data block passed with this list is of type <CODE>
NotifyStyleChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_STYLE_SHEET_TEXT_CHANGE</DT><DD>
Notifies objects of possible changes in the style sheet.The data block passed with this list is of type <CODE>
NotifyStyleSheetChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_STYLE_CHANGE</DT><DD>
Notifies objects of changes in the current text style. The data block passed with this list is of type <CODE>
NotifyTextStyleChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FONT_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Text Attributes: notification lists">
 </A>
Notifies objects of changes in the font. The data block passed with this list is of type <CODE>
NotifyFontChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_POINT_SIZE_CHANGE</DT><DD>
Notifies objects of changes in text point size. The data block passed with this list is of type <CODE>
NotifyPointSizeChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FONT_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the font attributes. The data block passed with this list is of type <CODE>
NotifyFontAttrChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_JUSTIFICATION_CHANGE</DT><DD>
Notifies objects of changes in the paragraph justification. The data block passed with this list is of type <CODE>
NotifyJustificationChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_FG_COLOR_CHANGE</DT><DD>
Notifies objects of changes in the text foreground (character) color. The data block passed with this list is of type <CODE>
NotifyColorChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_BG_COLOR_CHANGE</DT><DD>
Notifies objects of changes in the text background color. The data block passed with this list is of type <CODE>
NotifyColorChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_PARA_COLOR_CHANGE</DT><DD>
Notifies objects of changes in the text paragraph color.The data block passed with this list is of type <CODE>
NotifyColorChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_BORDER_COLOR_CHANGE</DT><DD>
Notifies objects of changes in text border color. The data block passed with this list is of type <CODE>
NotifyColorChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SEARCH_SPELL_CHANGE</DT><DD>
Notifies objects of changes in the search/spell objects.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SEARCH_REPLACE_CHANGE</DT><DD>
Notifies objects of changes in the search-and-replace mechanism.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_CHART_TYPE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Charts: notification lists">
 </A>
Notifies objects of changes in chart type.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_CHART_GROUP_FLAGS</DT><DD>
Notifies objects of changes in chart group flags.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_CHART_AXIS_ATTRIBUTES</DT><DD>
Notifies objects of changes in chart axis attributes.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_CHART_MARKER_SHAPE</DT><DD>
Notifies objects of changes in the chart marker shape.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_GROBJ_CURRENT_TOOL_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_GrObjs: notification lists">
 </A>
Notifies objects of changes in the selected GrObj tool.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_GROBJ_BODY_SELECTION_STATE_CHANGE</DT><DD>
Notifies objects of changes in the GrObj body selection state.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_GROBJ_AREA_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the GrObj area attributes.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_GROBJ_LINE_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the GrObj line attributes.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_GROBJ_TEXT_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the GrObj text attributes.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_STYLE_GROBJ_CHANGE</DT><DD>
Notifies objects of changes in style changes relating to the GrObj.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_STYLE_SHEET_GROBJ_CHANGE</DT><DD>
Notifies objects of changes in the style sheet.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_RULER_TYPE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Rulers: notification lists">
 </A>
Notifies objects of changes in ruler type.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_RULER_GRID_CHANGE</DT><DD>
Notifies objects of changes in the ruler grid.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_TEXT_RULER_OBJECTS</DT><DD>
<A NAME="Application_3.htm_IX_Text rulers: notification list">
 </A>
Notifies objects of changes in the active ruler.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_BITMAP_CURRENT_TOOL_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Bitmaps: notification lists">
 </A>
Notifies objects of changes in the selected bitmap tool.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_BITMAP_CURRENT_FORMAT_CHANGE</DT><DD>
Notifies objects of changes in the current bitmap format.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_PROPERTIES_STATUS_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Flatfile: notification lists">
 </A>
Notifies objects of changes in the flatfile database properties status.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_LIST_CHANGE</DT><DD>
Notifies objects of changes in the flatfile field list.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_RCP_STATUS_CHANGE</DT><DD>
Notifies objects of changes in flatfile status.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_FLAT_FILE_FIELD_APPEARANCE_CHANGE</DT><DD>
Notifies objects that a field within the flat file has changed its appearance.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_NOTIFY_DOC_SIZE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Spool Library: notification lists">
 </A>
Notifies objects of changes in document size. The data block passed with this list is of type <CODE>
NotifyPageSetupChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_NOTIFY_PAPER_SIZE_CHANGE</DT><DD>
Notifies objects of changes in chosen paper size. The data block passed with this list is of type <CODE>
NotifyPageSetupChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_VIEW_STATE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_GenViewControlClass: notification lists">
 </A>
Notifies objects of changes in of view state. The data block passed with this list is of type <CODE>
NotifyViewStateChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_CONTROLLED_GEN_VIEW_OBJECTS</DT><DD>
A list of GenView objects controlled by the GenViewControl. (These GenViews will have ATTR_GEN_VIEW_INTERACT_WITH_CONTROLLER set in their instance data.)</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_INK_STATE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Ink: notification lists">
 </A>
Notifies objects of changes in Ink state.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_CONTROLLED_INK_OBJECTS</DT><DD>
A list of Ink objects controlled by the InkControl.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_PAGE_STATE_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_GenDisplayControlClass: notification lists">
 </A>
Notifies objects of changes in page state. The data block passed with this list is of type <CODE>
NotifyPageStateChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_DOCUMENT_CHANGE</DT><DD>
Notifies objects of changes in a document. The data block passed with this list is of type <CODE>
NotifyPageStateChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_DISPLAY_CHANGE</DT><DD>
Notifies objects of changes in a display. The data block passed with this list is of type <CODE>
NotifyDisplayChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_DISPLAY_LIST_CHANGE</DT><DD>
Notifies objects of changes in the display list. The data block passed with this list is of type <CODE>
NotifyColorChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPLINE_MARKER_SHAPE</DT><DD>
<A NAME="Application_3.htm_IX_Splines: notification lists">
 </A>
Notifies objects of changes in a spline marker shape.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPLINE_POINT</DT><DD>
Notifies objects of changes in spline points.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPLINE_POLYLINE</DT><DD>
Notifies objects of changes in spline polylines.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPLINE_SMOOTHNESS</DT><DD>
Notifies objects of changes in spline smoothness.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPLINE_OPEN_CLOSE_CHANGE</DT><DD>
Notifies objects of changes in a spline's open/close state.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_ACTIVE_CELL_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Spreadsheets: notification lists">
 </A>
Notifies objects of changes in the spreadsheet's active cell range. The data block passed with this list is of type <CODE>
NotifySSheetActiveCellChanged</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_EDIT_BAR_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's edit bar. The data block passed with this list is of type <CODE>
NotifySSheetEditBarChanged</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_SELECTION_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's selection. The data block passed with this list is of type <CODE>
NotifySSheetSelectionChanged</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_CELL_WIDTH_HEIGHT_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's cell width or height. The data block passed with this list is of type <CODE>
NotifySSheetCellWidthHeightChang</CODE>
e.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_DOC_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's document attributes. The data block passed with this list is of type <CODE>
NotifySSheetDocAttrChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_CELL_ATTR_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's cell attributes. The data block passed with this list is of type <CODE>
NotifySSheetCellAttrChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_CELL_NOTES_CHANGE</DT><DD>
Notifies objects of changes in the notes of a cell within a spreadsheet.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_SPREADSHEET_DATA_RANGE_CHANGE</DT><DD>
Notifies objects of changes in the spreadsheet's data range selection. The data block passed with this list is of type <CODE>
NotifySSheetDataRangeChange</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_TEXT_NAME_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Text Names: notification list">
 </A>
Notifies objects of changes in a text object's names run. The data block passed with this list is of type <CODE>
VisTextNotifyNameChange.</CODE>
</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_FLOAT_FORMAT_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Floating-Point Formats: notification list">
 </A>
Notifies objects of changes in a particular float format within the float format controller.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_DISPLAY_OBJECTS_WITH_RULERS</DT><DD>
<A NAME="Application_3.htm_IX_Rulers: notification lists">
 </A>
A list of GenDisplay objects that have rulers.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_APP_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_ImpexMapControl: notification lists">
 </A>
Notifies objects of changes in an application.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_LIBRARY_CHANGE</DT><DD>
Notifies objects of changes in a library.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_APP_TARGET_NOTIFY_CARD_BACK_CHANGE</DT><DD>
<A NAME="Application_3.htm_IX_Card Library: notification list">
 </A>
Notifies objects that a card back has changed.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_NOTIFY_FOCUS_TEXT_OBJECT</DT><DD>
Notifies objects that a an editable text object has a gained the focus. This list is used by the floating keyboard to determine when it should be enabled or not.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_NOTIFY_TEXT_CONTEXT</DT><DD>
Notifies objects that a the selection or data in a focused text object has changed, if that text object has text contexts turned on. This list is used by hand-writing recognition.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_NOTIFY_HELP_CONTEXT_CHANGE</DT><DD>
Notifies objects that a help context has changed.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_FLOAT_FORMAT_INIT</DT><DD>
Notifies the float controller that it should re-initialize itself. This normally sent to the controller when the target document has changed.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_ALWAYS_INTERACTABLE_WINDOWS</DT><DD>
This list stores windows that should always remain interactable, even if modal windows are on-screen. Objects on this list will get messages even if GenInteractions invoked by <CODE>
UserDoDialog()</CODE>
 are on-screen. These objects also receive MSG_META_CHECK_IF_INTERACTABLE_OBJECT to allow them to specify objects under them (such as objects in the child blocks) that should also receive messages.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_USER_DO_DIALOGS</DT><DD>
This list stores all dialog boxes initiated via <CODE>
UserDoDialog()</CODE>
.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_MODAL_WIN_CHANGE</DT><DD>
Notifies objects that modal window changes have occurred within the application.</DD>
<DT CLASS="FIXME_WorListWide">
GACGNLT_APP_TARGET_NOTIFY_SPREADSHEET_NAME_CHANGE</DT><DD>
Notifies objects that a spreadsheet's name has changed.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_CONTROLLERS_WITHIN_USER_DO_DIALOGS</DT><DD>
This list stores objects (usually controllers) that will appear within the context of <CODE>
UserDoDialog()</CODE>
 but will not be within the same block as the dialog box. Objects on this list will receive MSG_META_CHECK_IF_INTERACTABLE_OBJECT.</DD>
<DT CLASS="FIXME_WorListWide">
GAGCNLT_FOCUS_WINDOW_KBD_STATUS</DT><DD>
Notifies floating keyboards when windows gain the focus on pen systems.</DD>
</DL>
<HR>
<A NAME="Application_4.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.3 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
Application Instance Reference</H3>
<PRE>GAI_appRef, GAI_appMode, GAI_optFlags, MSG_GEN_APPLICATION_SET_APP_MODE_MESSAGE, MSG_GEN_APPLICATION_GET_APP_MODE_MESSAGE, MSG_GEN_APPLICATION_SET_APP_INSTANCE_REFERENCE, MSG_GEN_APPLICATION_GET_APP_INSTANCE_REFERENCE, MSG_GEN_APPLICATION_SEND_APP_INSTANCE_REFERENCE_TO_FIELD</PRE>
<P>
GAI_<A NAME="Application_4.htm_IX_GAI_appRef">
 </A>
<CODE>
appRef</CODE>
 stores information (within an <CODE>
AppInstanceReference</CODE>
 structure) that allows a GenApplication object to be reloaded from its former state. This structure contains a path name, long file name, and disk handle of a state file as well as an additional byte of disk data. The system automatically manages this state file and this instance field.</P>
<P>
GAI_<A NAME="Application_4.htm_IX_GAI_appMode">
 </A>
<CODE>
appMode</CODE>
 stores the application message that should be sent to the process to bring this application back from a saved state. This is initially null (unless previously saved to a state file); it is set by <CODE>
GenProcessClass</CODE>
 when a mode is determined at <CODE>
MSG_META_ATTACH</CODE>
 time. You should not alter this instance field.</P>
<P>
GAI_<A NAME="Application_4.htm_IX_AOF_MULTIPLE_INIT_FILE_CATEGORIES">
 </A>
<A NAME="Application_4.htm_IX_GAI_optFlags">
 </A>
<CODE>
optFlags</CODE>
 stores miscellaneous optimization flags. The only flag at this time--AOF_MULTIPLE_INIT_FILE_CATEGORIES--indicates that within this application there may be several different init file categories (marked with ATTR_GEN_INIT_FILE_CATEGORY). This allows MSG_META_GET_INI_CATEGORY to perform a full upward recursive search to find the appropriate init file category; by default, if an init file category is not found on an object, only the GenApplication object is queried.</P>

<H6 CLASS="RefETitle">
<A NAME="Application_4.htm_IX_MSG_GEN_APPLICATION_SET_APP_MODE_MESSAGE">
 </A>
MSG_GEN_APPLICATION_SET_APP_MODE_MESSAGE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_APP_MODE_MESSAGE(
        Message modeMessage);</PRE>
<P>
This message stores a message into the GenApplication's <CODE>
GAI_appMode</CODE>
 field. Generally, this message indicates the current mode of the application. Should the application be shut down and restored, this message will be sent to the Process object to restore the state to the same mode.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<EM>
modeMessage</EM>
	The message number to be stored in <CODE>
GAI_appMode</CODE>
.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_4.htm_IX_MSG_GEN_APPLICATION_GET_APP_MODE_MESSAGE">
 </A>
MSG_GEN_APPLICATION_GET_APP_MODE_MESSAGE</H6>
<PRE CLASS="syntax">Message	MSG_GEN_APPLICATION_GET_APP_MODE_MESSAGE();</PRE>
<P>
This message returns the message number stored in the GenApplication's <CODE>
GAI_appMode</CODE>
 field.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The message number stored in <CODE>
GAI_appMode</CODE>
.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_4.htm_IX_MSG_GEN_APPLICATION_SET_APP_INSTANCE_REFERENCE">
 </A>
MSG_GEN_APPLICATION_SET_APP_INSTANCE_REFERENCE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_APP_INSTANCE_REFERENCE(
        Handle	appInstance);</PRE>
<P>
This message sets the <CODE>
GAI_appRef</CODE>
 field to the passed structure.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<CODE>
appInstance</CODE>
	The handle of the reference data block.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_4.htm_IX_MSG_GEN_APPLICATION_GET_APP_INSTANCE_REFERENCE">
 </A>
MSG_GEN_APPLICATION_GET_APP_INSTANCE_REFERENCE</H6>
<PRE CLASS="syntax">Handle	MSG_GEN_APPLICATION_GET_APP_INSTANCE_REFERENCE();</PRE>
<P>
This message retrieves the values in <CODE>
GAI_appRef</CODE>
.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The handle of the reference stored in <CODE>
GAI_appRef</CODE>
.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_4.htm_IX_MSG_GEN_APPLICATION_SEND_APP_INSTANCE_REFERENCE_TO_FIELD">
 </A>
MSG_GEN_APPLICATION_SEND_APP_INSTANCE_REFERENCE_TO_FIELD</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SEND_APP_INSTANCE_REFERENCE_TO_FIELD();</PRE>
<P>
This message causes the GenApplication to send the contents of its <CODE>
GAI_appRef</CODE>
 field off to its parent GenField object.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_5.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.4 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
Attach and Launch Flags</H3>
<PRE>GAI_launchFlags, GAI_attachFlags, MSG_GEN_APPLICATION_GET_LAUNCH_FLAGS, MSG_GEN_APPLICATION_GET_ATTACH_FLAGS</PRE>
<P>
GAI_<A NAME="Application_5.htm_IX_GAI_launchFlags">
 </A>
<CODE>
launchFlags</CODE>
 stores flags that are passed when the application is first launched. These flags are never set within your object declaration but may be passed with other messages. </P>
<DL>
<DT>
ALF_SEND_LAUNCH_REQUEST_TO_UI_TO_HANDLE</DT><DD>
<A NAME="Application_5.htm_IX_ALF_&ldots;">
 </A>
If this bit is set, the application will not immediately be launched but will instead wait for the UI to launch it. This flag should not be set by the application itself; it is only used by <CODE>
UserLoadApplication()</CODE>
.</DD>
<DT>
ALF_OPEN_IN_BACK</DT><DD>
If this bit is set, the application will be opened behind other applications, in an inactive state. This flag is only used with <CODE>
MSG_GEN_PROCESS_OPEN_APPLICATION</CODE>
.</DD>
<DT>
ALF_DESK_ACCESSORY</DT><DD>
If this bit is set, the application will be treated as a &quot;desk accessory,&quot; in a layer above normal applications.</DD>
<DT>
ALF_DO_NOT_OPEN_ON_TOP</DT><DD>
If this bit is set, the application will be prevented from both gaining the focus and opening on top of other applications.</DD>
<DT>
ALF_OVERRIDE_MULTIPLE_INSTANCE</DT><DD>
If this bit is set, and UILM_MULTIPLE_INSTANCES is also set as the application's <CODE>
UILaunchModel</CODE>
, the application will not query the user if he or she attempts to initiate multiple instances of the same application; the application will be multiply launched without first checking whether the already running application should be used instead.</DD>
<DT>
ALF_OPEN_FOR_IACP_ONLY</DT><DD>
If this bit is set, the application will be opened only to facilitate a connection with <CODE>
IACPConnect()</CODE>
; the application should close once that task is completed. If the application should remain open after such an IACP connection, this bit should be cleared. This behavior is used only for MSG_GEN_PROCESS_OPEN_APPLICATION connections. The application cannot be opened in engine mode.</DD>
</DL>
<P>
GAI_<A NAME="Application_5.htm_IX_AAF_&ldots;">
 </A>
<A NAME="Application_5.htm_IX_GAI_attachFlags">
 </A>
<CODE>
attachFlags</CODE>
 stores flags related to an application attaching from a state file. These flags are never set within your object declaration but may be passed with other messages.</P>
<DL>
<DT>
AAF_RESTORING_FROM_STATE</DT><DD>
If this bit is set, the application was launched via <CODE>
MSG_GEN_PROCESS_RESTORE_FROM_STATE</CODE>
. AAF_STATE_FILE_PASSED will also be set. </DD>
<DT>
AAF_STATE_FILE_PASSED</DT><DD>
If this bit is set, the application is being restored from a state file.</DD>
<DT>
AAF_DATA_FILE_PASSED</DT><DD>
If this bit is set, a data file containing much of the instance data of the application (of type <CODE>
AppLaunchBlock</CODE>
) is being passed to the launching message. This is internal and should not be used.</DD>
<DT>
AAF_RESTORING_FROM_QUIT</DT><DD>
If this bit is set, the application was in the process of quitting, reached engine mode, and is now being started up into application mode again before completely exiting. If set, then AAF_RESTORING_FROM_STATE will also be set. This bit ensures that certain clean-up operations that are done before an application is quit are un-done, and that the application returns to its former state.</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Application_5.htm_IX_MSG_GEN_APPLICATION_GET_LAUNCH_FLAGS">
 </A>
MSG_GEN_APPLICATION_GET_LAUNCH_FLAGS</H6>
<PRE CLASS="syntax">AppLaunchFlags MSG_GEN_APPLICATION_GET_LAUNCH_FLAGS();</PRE>
<P>
This message retrieves the contents of the GenApplication's <CODE>
GAI_launchFlags</CODE>
 field.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The <CODE>
AppLaunchFlags</CODE>
 record stored in <CODE>
GAI_launchFlags</CODE>
.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_5.htm_IX_MSG_GEN_APPLICATION_GET_ATTACH_FLAGS">
 </A>
MSG_GEN_APPLICATION_GET_ATTACH_FLAGS</H6>
<PRE CLASS="syntax">AppAttachFlags MSG_GEN_APPLICATION_GET_ATTACH_FLAGS();</PRE>
<P>
This message retrieves the contents of the GenApplication's <CODE>
GAI_attachFlags</CODE>
 field.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The <CODE>
AppAttachFlags</CODE>
 stored in <CODE>
GAI_attachFlags</CODE>
.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_6.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.5 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
<A NAME="Application_6.htm_69688">
 </A>
ApplicationStates</H3>
<PRE>GAI_states, MSG_GEN_APPLICATION_GET_STATE, MSG_GEN_APPLICATION_SET_STATE, MSG_GEN_APPLICATION_SET_NOT_USER_INTERACTABLE, MSG_GEN_APPLICATION_SET_USER_INTERACTABLE, MSG_GEN_APPLICATION_SET_NOT_QUITTING, MSG_GEN_APPLICATION_SET_ATTACHED_TO_STATE_FILE, MSG_GEN_APPLICATION_SET_NOT_ATTACHED_TO_STATE_FILE</PRE>
<P>
GAI_<A NAME="Application_6.htm_IX_ApplicationStates">
 </A>
<A NAME="Application_6.htm_IX_GAI_states">
 </A>
<CODE>
states</CODE>
 stores the <CODE>
ApplicationStates</CODE>
 of the application. By default, a GenApplication is both AS_FOCUSABLE and AS_MODELABLE, therefore enabling those hierarchies for this application. Only under extremely rare conditions will you alter this behavior. The flags of <CODE>
ApplicationStates</CODE>
 are listed below:</P>
<DL>
<DT>
AS_HAS_FULL_SCREEN_EXCL</DT><DD>
This bit is set if the application is currently the top screen object at its level. This bit may only be set if the application is between receiving a <A NAME="Application_6.htm_IX_AS_&ldots;">
 </A>
<CODE>
MSG_META_GAINED_FULL_SCREEN_EXCL</CODE>
 and a <CODE>
MSG_META_LOST_FULL_SCREEN_EXCL</CODE>
.</DD>
<DT>
AS_SINGLE_INSTANCE</DT><DD>
This bit is set if the application is not capable of being launched multiple times. You should not need to set this.</DD>
<DT>
AS_QUIT_DETACHING</DT><DD>
If this bit is set, the detach sequence has been initiated as the result of a QUIT. This bit will only be set if AS_QUITTING is also set; the bit is set in the UI thread at the same time MSG_META_DETACH is sent to the process. Therefore, this bit represents an intermediate step between AS_QUITTING and AS_DETACHING.</DD>
<DT>
AS_AVOID_TRANSPARENT_DETACH</DT><DD>
This bit is set if the application should not be transparently detached. If the application is running within UILM_TRANSPARENT mode, then the application will not detach when another application is launched.</DD>
<DT>
AS_TRANSPARENT_DETACHING</DT><DD>
This bit is set if the application is being transparently detached. An application can be transparently detached if another application is started in this application's field and that field is marked UILM_TRANSPARENT.</DD>
<DT>
AS_REAL_DETACHING</DT><DD>
This bit is set if MSG_GEN_PROCESS_REAL_DETACH has been sent to the process, signalling the irreversible demise of the application. This bit is only set if the UI has finished detaching and the GS_USABLE bit on the application has been cleared.</DD>
<DT>
AS_QUITTING</DT><DD>
The application is currently quitting.</DD>
<DT>
AS_DETACHING</DT><DD>
The application object has received <CODE>
MSG_META_DETACH</CODE>
 and is detaching.</DD>
<DT>
AS_FOCUSABLE</DT><DD>
<A NAME="Application_6.htm_IX_Focus:AS_FOCUSABLE">
 </A>
The application may receive the focus exclusive from its field parent. When launched, if this flag is set, the application automatically grabs the focus. This flag is set by default. </DD>
<DT>
AS_MODELABLE</DT><DD>
<A NAME="Application_6.htm_IX_Model:AS_MODELABLE">
 </A>
The application may receive the model exclusive from its field parent. When launched, if this flag is set, the application will automatically grab the model exclusive. This flag is set by default.</DD>
<DT>
AS_NOT_USER_INTERACTABLE</DT><DD>
The application should not be interactable with the user. This prevents the user from navigating to non-visible applications or otherwise selecting the application.</DD>
<DT>
AS_RECEIVED_APP_OBJECT_DETACH</DT><DD>
The application has received a detach message.</DD>
<DT>
AS_ATTACHED_TO_STATE_FILE</DT><DD>
The application is currently attached to a state file.</DD>
<DT>
AS_ATTACHING</DT><DD>
The application is currently attaching (processing <CODE>
MSG_META_ATTACH</CODE>
).</DD>

</DL>
<H6 CLASS="RefETitle">
<A NAME="Application_6.htm_IX_MSG_GEN_APPLICATION_GET_STATE">
 </A>
MSG_GEN_APPLICATION_GET_STATE</H6>
<PRE CLASS="syntax">ApplicationStates MSG_GEN_APPLICATION_GET_STATE();</PRE>
<P>
This message retrieves the current application state, stored in <CODE>
GAI_states</CODE>
.</P>
<P CLASS="refField">
Source:	Rarely used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The <CODE>
ApplicationStates</CODE>
 record stored in <CODE>
GAI_states</CODE>
.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_SET_STATE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_STATE(
        ApplicationStates			set,
        ApplicationStates			clear);</PRE>
<P>
This message alters a GenApplication's GAI_<CODE>
states</CODE>
 flags. This message should only be used to set flags that aren't set internally by the UI. Flags that can be altered are the AS_FOCUSABLE, AS_MODELABLE, AS_NOT_USER_INTERACTABLE and AS_AVOID_TRANSPARENT_DETACH state bits.</P>
<P>
This message does not reject attempts to set internal bits; therefore, be careful in using this message and only use it to set the external bits mentioned above.</P>
<P CLASS="refField">
Source:	Unrestricted. This message is also used internally.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<EM>
set</EM>
	<CODE>
ApplicationStates</CODE>
 to set.</P>
<DL>
<DT>
<EM>
clear</EM>
</DT><DD><CODE>
ApplicationStates</CODE>
 to clear.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Warnings:	Do not attempt to set any internal <CODE>
ApplicationStates</CODE>
 bits with this message.</P>
<P CLASS="refField">
Interception:	May intercept, but must pass to superclass at some point.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_SET_NOT_QUITTING</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_NOT_QUITTING();</PRE>
<P>
This message clears the AS_QUITTING bit in the application's GAI_<CODE>
states</CODE>
 bitfield.</P>
<P CLASS="refField">
Source:	Sent by the UI or the kernel.</P>
<P CLASS="refField">
Destination:	A GenApplication object.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_6.htm_IX_MSG_GEN_APPLICATION_SET_NOT_USER_INTERACTABLE">
 </A>
MSG_GEN_APPLICATION_SET_NOT_USER_INTERACTABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_NOT_USER_INTERACTABLE();</PRE>
<P>
This message sets the AS_NOT_USER_INTERACTABLE flag in the application's <CODE>
GAI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to be made not interactable.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_6.htm_IX_MSG_GEN_APPLICATION_SET_USER_INTERACTABLE">
 </A>
MSG_GEN_APPLICATION_SET_USER_INTERACTABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_USER_INTERACTABLE();</PRE>
<P>
This message clears the AS_NOT_USER_INTERACTABLE flag in the application's <CODE>
GAI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to be made interactable.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_6.htm_IX_MSG_GEN_APPLICATION_SET_ATTACHED_TO_STATE_FILE">
 </A>
MSG_GEN_APPLICATION_SET_ATTACHED_TO_STATE_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_ATTACHED_TO_STATE_FILE();</PRE>
<P>
This message sets the AS_ATTACHED_TO_STATE_FILE in the GenApplication's <CODE>
GAI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Sent by the UI or the kernel.</P>
<P CLASS="refField">
Destination:	The GenApplication object that has been attached to a state file.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_6.htm_IX_MSG_GEN_APPLICATION_SET_NOT_ATTACHED_TO_STATE_FILE">
 </A>
MSG_GEN_APPLICATION_SET_NOT_ATTACHED_TO_STATE_FILE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_NOT_ATTACHED_TO_STATE_FILE();</PRE>
<P>
This message clears the AS_ATTACHED_TO_STATE_FILE in the GenApplication's <CODE>
GAI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Sent by the UI or the kernel.</P>
<P CLASS="refField">
Destination:	The GenApplication object that has been detached to a state file.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_7.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.6 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
Application Features and Levels</H3>
<PRE>GAI_appFeatures, GAI_appLevel, MSG_GEN_APPLICATION_GET_APP_FEATURES, MSG_GEN_APPLICATION_SET_APP_FEATURES, MSG_GEN_APPLICATION_SET_APP_LEVEL, MSG_GEN_APPLICATION_UPDATE_APP_FEATURES, MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE, GenAppUsabilityTupleFlags, GenAppUsabilityTuple, GenAppUsabilityCommands</PRE>
<P>
A GenApplication may store a word of features (<CODE>
GAI_appFeatures</CODE>
); these features correspond to groups of UI objects. Depending on a certain feature being set or not set, certain groups of UI objects may or may not appear, allowing you to customize your application for different users or criteria. It is up to your application to define both the features and the objects that these features correspond to.</P>
<P>
 GAI_<CODE>
appFeatures</CODE>
 is a word-length bitfield. Each bit corresponds to a certain group of features which you define. You may thus have up to 16 different feature groups for any application. (Note that each feature group may include several UI objects.) In general, you group these features together so that they correspond to a specific <CODE>
UIInterfaceLevel</CODE>
. If the application appears at a different User Interface level, the makeup of the UI will be different.</P>
<P>
An application's user interface level is stored in the GenApplication's GAI_<CODE>
appLevel</CODE>
 instance data entry. Each <CODE>
UIInterfaceLevel</CODE>
 corresponds to a certain group of features. Changing the UI level changes the group of features that may be displayed.</P>
<P>
The features represented in the bitfield may be represented in hints added to GenControl objects. Most often, the controllers and the application will adjust their menus, tools, and other UI gadgetry to conform to the features specified in this record. </P>
<P CLASS="figTitle">
Code Display 3-5 Setting Up Features</P>
<PRE>/* Features are stored in a word-length bitfield. */</PRE>
<PRE>typedef WordFlags MyFeatures;</PRE>
<PRE>@define MF_EDIT_FEATURES				(0x8000)
@define MF_PASTE_FEATURES				(0x4000)
@define MF_FORMAT_FEATURES				(0x2000)</PRE>
<PRE>/* We might want to group certain features together based on the level of 
 * expertise of the user. In this example, if the user level is &quot;intermediate&quot; 
 * (which we will define later), we allow features for editing and pasting to the 
 * UI. If the user level is &quot;advanced&quot; we allow the intermediate features and also 
 * allow formatting features. */</PRE>
<PRE>@define INTRODUCTORY_FEATURES				(0)</PRE>
<PRE>@define INTERMEDIATE_FEATURES				(@MF_EDIT_FEATURES | @MF_PASTE_FEATURES)</PRE>
<PRE>@define ADVANCED_FEATURES				(@INTERMEDIATE_FEATURES | @MF_FORMAT_FEATURES)</PRE>
<P>
MSG_GEN_APPLICATION_GET_APP_FEATURES returns the current application features and <CODE>
UIInterfaceLevel</CODE>
 in use by an application. </P>
<P>
You may set the application's GAI_<CODE>
appFeatures</CODE>
 by sending it MSG_GEN_APPLICATION_SET_APP_FEATURES. You may also change the application's user level by sending it MSG_GEN_APPLICATION_SET_APP_LEVEL. Each of these messages in turn generates a MSG_GEN_APPLICATION_UPDATE_APP_FEATURES. </P>
<P>
This message is meant to be sub-classed so that you can alter the behavior for different features. In most cases, however, you will simply handle this message, fill in relevant parameters, and send the GenApplication MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE--the message which performs the actual work done in changing the UI. This message expects a number of arguments. </P>
<P>
The most important argument is the table of <CODE>
GenAppUsabilityTuple</CODE>
 entries that correspond to each feature. These entries define what sort of UI change is required, and what object is required to change.You must set up this table beforehand.</P>
<P>
The types of usability commands available (in the bit positions set aside with GAUTF_COMMAND in the tuple's <CODE>
GenAppUsabilityTupleFlags</CODE>
) are:</P>
<UL>
<LI>
GAUC_USABILITY<BR>
If set, the object should be made GS_USABLE if the feature is on. This is the default behavior.</LI>
<LI>
GAUC_RECALC_CONTROLLER<BR>
If set, the controller needs to have its features recalculated. The particular feature bits are stored with the controller itself; the application knows nothing more about the controller's features other than that they need to be changed.</LI>
<LI>
GAUC_REPARENT<BR>
If set, the object needs to be relocated to another part of the UI, underneath a different parent. This parent is passed in the <EM>
reparentObject</EM>
 entry for MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE. Only one object may be re-parented for each application.</LI>
<LI>
GAUC_POPUP<BR>
If set, the object should be made a popup menu. Note that this allows a sub-group to become a menu without having to use GAUC_REPARENT.</LI>
<LI>
GAUC_TOOLBAR<BR>
If set, the object is a GenBoolean that corresponds to a toolbar state. Turning the feature on or off forces the GenBoolean to send an apply in addition to other behavior.</LI>
<LI>
GAUC_RESTART<BR>
If set, the object needs to be &quot;kick started&quot; by first setting it GS_NOT_USABLE and then GS_USABLE.</LI>
</UL>
<P>
Because each feature may have multiple objects affected, the <CODE>
GenAppUsabilityTupleFlags</CODE>
 entry GAUTF_END_OF_LIST indicates that there are no more commands for that feature. The flag GAUTF_OFF_IF_BIT_IS_ON indicates that a given command should be reversed for the object. (I.e. if the feature is on, the object should be removed, not added.)</P>
<P CLASS="figTitle">
Code Display 3-6 Setting Up the GenAppUsabilityTuple Tables</P>
<PRE>/* Each GenAppUsabilityTuple will refer to a specific set of features. */</PRE>
<PRE>/* 
 * Since GUAC_USABILITY is the default setting (and is zero) setting any other 
 * flags either supersedes or complements this behavior. In this case, setting the 
 * EditToolEntry as a GUAC_TOOLBAR command supersedes the GUAC_USABILITY command. 
 * Setting the GUATF_END_OF_LIST flag for the EditTrigger does not alter the 
 * GUAC_USABILITY command, which is still implicit.
 */</PRE>
<PRE>static const GenAppUsabilityTuple editFeaturesList [] =
{
	{GUAC_TOOLBAR,			@EditToolEntry 		},
	{GUATF_END_OF_LIST			@EditTrigger		}
};</PRE>
<PRE>static const GenAppUsabilityTuple pasteFeaturesList [] =
{
	{GUAC_END_OF_LIST,			@PasteTrigger		}
};</PRE>
<PRE>static const GenAppUsabilityTuple formatFeaturesList [] =
{
	{
	GAUTF_END_OF_LIST | GUAC_RECALC_CONTROLLER,
	@FeatureController
	}
};</PRE>
<PRE>/* After each feature's GenAppUsabilityTuple is set up, you should set up a table 
 * of these structures to pass to relevant messages. */</PRE>
<PRE>static const GenAppUsabilityTuple * const usabilityTable [] =
{
	editFeaturesList,
	pasteFeaturesList,
	formatFeaturesList
};</PRE>
<PRE>/* 
 * Within your code, decide where you wish to set the application features 
 * (usually within some sort of User level dialog box that passes a selection of 
 * feature bits) and send either MSG_GEN_APPLICATION_SET_APP_FEATURES or
 * MSG_GEN_APPLICATION_SET_APP_LEVEL with the proper feature bits set.
 */</PRE>
<PRE>@method MyLevelApplicationClass, MSG_MY_APPLICATION_SET_USER_LEVEL
{
   @call oself::MSG_GEN_APPLICATION_SET_APP_FEATURES(selection);
}</PRE>
<PRE>/* 
 * Then intercept MSG_GEN_APPLICATION_UPDATE_APP_FEATURES and set up the correct 
 * parameters for MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE. 
 */</PRE>
<PRE>@method MyLevelApplicationClass, MSG_GEN_APPLICATION_UPDATE_APP_FEATURES
{
    @call oself::MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE(
	NullOptr,
	@ObjectToReparent,			/* if any */
	levelTable,			/* if any */
	sizeof(usabilityTable) / sizeof(usabilityTable [0]),
	usabilityTable,
	appOpeningFlag,
	oldLevel,
	level,
	featuresChanged,
	featuresOn);
}</PRE>

<H6 CLASS="RefETitle">
<A NAME="Application_7.htm_IX_MSG_GEN_APPLICATION_GET_APP_FEATURES">
 </A>
MSG_GEN_APPLICATION_GET_APP_FEATURES</H6>
<PRE CLASS="syntax">dword	MSG_GEN_APPLICATION_GET_APP_FEATURES();</PRE>
<P>
This message retrieves the set of features set for the application.</P>
<P CLASS="refField">
Source:	Unrestricted--typically a GenControl object finding out the application's UI level.</P>
<P CLASS="refField">
Destination:	The GenApplication running the controller.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A dword containing the word of features stored in <CODE>
GAI_appFeatures</CODE>
 and the <CODE>
UIInterfaceLevel</CODE>
 for the application. The features are stored in the high word; the interface level is stored in the low word.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_7.htm_IX_MSG_GEN_APPLICATION_SET_APP_FEATURES">
 </A>
MSG_GEN_APPLICATION_SET_APP_FEATURES</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_APP_FEATURES(
        word	features);</PRE>
<P>
This message sets a new set of features into the GenApplication's <CODE>
GAI_appFeatures</CODE>
 record. This message in turn generates a MSG_GEN_APPLICATION_UPDATE_APP_FEATURES for your application object to intercept. (The message handler for that message must in turn send MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE to activate the UI changes specified in the features list.)</P>
<P CLASS="refField">
Source:	Unrestricted--typically a system function.</P>
<P CLASS="refField">
Destination:	The GenApplication having its features set.</P>
<P CLASS="refField">
Parameters:	<CODE>
features</CODE>
	The new word-sized record of application features to set.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Generally not intercepted.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_UPDATE_APP_FEATURES</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_UPDATE_APP_FEATURES(@stack
        optr		unReparentObject,
        optr		reparentObject,
        GenAppUsabilityTuple		*levelTable,
        word		tableLength,
        void		*table,
        word		appOpeningFlag,
        UIInterfaceLevel		oldLevel,
        UIInterfaceLevel		level,
        word		featuresChanged,
        word		featuresOn);</PRE>
<P>
This message is sent by the application to itself when it is told to change either its features or its <CODE>
UIInterfacelevel</CODE>
. This message is passed a number of parameters, most of which should simply be passed to MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE. If you have reparent objects (or un-reparent objects), you must set them up here.</P>
<P CLASS="refField">
Source:	Sent by an application object to itself in response to a MSG_GEN_APPLICATION_SET_APP_FEATURES or MSG_GEN_APPLICATION_SET_APP_LEVEL.</P>
<P CLASS="refField">
Destination:	The GenApplication object.</P>
<P CLASS="refField">
Parameters:	<EM>
unReparentObject</EM>
	The optr of the object to be unreparented. If a null optr is passed, the object will by default be moved up and added as the next sibling of its current parent.</P>
<DL>
<DT>
<EM>
reparentObject</EM>
</DT><DD>The optr of the object to be reparented to another UI location. You must supply this object if you have a <CODE>
GenAppUsabilityTuple</CODE>
 entry that contains a GAUC_REPARENT entry.</DD>
<DT>
<EM>
levelTable</EM>
</DT><DD>This table contains the GenAppUsabilityTuples corresponding to objects that contain their <EM>
own</EM>
 features and that must be notified when the user level changes. This is so that those objects can generate their own feature updates. Typically, controllers are included among these objects.</DD>
<DT>
<EM>
tableLength</EM>
</DT><DD>The number of table entries in <EM>
table</EM>
.</DD>
<DT>
<EM>
table</EM>
</DT><DD>Table of <CODE>
GenAppUsabilityTuple</CODE>
 entries that must be updated when the user level changes. This table is usually set up as global data and maps each user level feature to a <CODE>
GenAppUsabilityTuple</CODE>
.</DD>
<DT>
<EM>
appOpeningFlag</EM>
</DT><DD>Set if the application is starting.</DD>
<DT>
<EM>
oldLevel</EM>
</DT><DD>The previous <CODE>
UIInterfaceLevel</CODE>
.</DD>
<DT>
<EM>
level</EM>
</DT><DD>The new <CODE>
UIInterfaceLevel</CODE>
.</DD>
<DT>
<EM>
featuresChanged</EM>
</DT><DD>The set of features changed (deleted).</DD>
<DT>
<EM>
featuresOn</EM>
</DT><DD>The set of features to set on.</DD>
</DL>
<P CLASS="refField">
Interception:	To set an application's features, you must intercept this message and send MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE; there is no default message handler. This message is provided as a convenient point to intercept and change features before executing the changes.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_UPDATE_FEATURES_VIA_TABLE(
        optr		unReparentObject,
        optr		reparentObject,
        GenAppUsabilityTuple		*levelTable,
        word		tableLength,
        void		*table,
        word		appOpeningFlag,
        UIInterfaceLevel		oldLevel,
        UIInterfaceLevel		level,
        word		featuresChanged,
        word		featuresOn);</PRE>
<P>
This message is called to update the application's features to reflect a new set of features to </P>
<P CLASS="refField">
Source:	Typically, your message handler for MSG_GEN_APPLICATION_UPDATE_APP_FEATURES.</P>
<P CLASS="refField">
Destination:	The GenApplication object.</P>
<P CLASS="refField">
Parameters:	<EM>
unReparentObject</EM>
	The optr of the object to be unreparented. If a null optr is passed, the object will by default be moved up and added as the next sibling of its current parent.</P>
<DL>
<DT>
<EM>
reparentObject</EM>
</DT><DD>The optr of the object to be reparented to another UI location. You must supply this object if you have a <CODE>
GenAppUsabilityTuple</CODE>
 entry that contains a GAUC_REPARENT entry.</DD>
<DT>
<EM>
levelTable</EM>
</DT><DD>This table contains the GenAppUsabilityTuples corresponding to objects that contain their <EM>
own</EM>
 features and that must be notified when the user level changes. This is so that those objects can generate their own feature updates. Typically, controllers are included among these objects.</DD>
<DT>
<EM>
tableLength</EM>
</DT><DD>The number of table entries in <EM>
table</EM>
.</DD>
<DT>
<EM>
table</EM>
</DT><DD>Table of <CODE>
GenAppUsabilityTuple</CODE>
 entries that must be updated when the user level changes. This table is usually set up as global data and maps each user level feature to a <CODE>
GenAppUsabilityTuple</CODE>
.</DD>
<DT>
<EM>
appOpeningFlag</EM>
</DT><DD>Set if the application is starting.</DD>
<DT>
<EM>
oldLevel</EM>
</DT><DD>The previous <CODE>
UIInterfaceLevel</CODE>
.</DD>
<DT>
<EM>
level</EM>
</DT><DD>The new <CODE>
UIInterfaceLevel</CODE>
.</DD>
<DT>
<EM>
featuresChanged</EM>
</DT><DD>The set of features changed (deleted).</DD>
<DT>
<EM>
featuresOn</EM>
</DT><DD>The set of features to set on.</DD>
</DL>
<P CLASS="refField">
Interception:	Generally not intercepted. Intercept MSG_GEN_APPLICATION_UPDATE_APP_FEATURES instead.</P>

<HR>
<A NAME="Application_8.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 1.7 <A HREF="#Application_1.htm">GenApplication Basics</A>: 
IACP</H3>
<PRE>GAI_iacpConnects, MSG_GEN_APPLICATION_IACP_REGISTER, MSG_GEN_APPLICATION_IACP_UNREGISTER, MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_CONNECTIONS, MSG_GEN_APPLICATION_IACP_
GET_NUMBER_OF_APP_MODE_CONNECTIONS, MSG_GEN_APPLICATION_IACP_SHUTDOWN_ALL_CONNECTIONS, MSG_GEN_APPLICATION_IACP_COMPLETE_CONNECTIONS, MSG_GEN_APPLICATION_APP_MODE_COMPLETE</PRE>
<P>
IACP (the GEOS <EM>
I</EM>
nter <EM>
A</EM>
pplication <EM>
C</EM>
ommunication <EM>
P</EM>
rotocol) allows applications to communicate with each other. IACP is flexible enough to let applications know whether another application is open, closed, or in the process of attaching or detaching. IACP allows applications to convey information to one another, and could be used to support updating data (e.g. documents) across applications. The IACP mechanism is discussed more fully in <A HREF="../../Kernel/Geodes/combo.htm">the Applications and Geodes chapter</A>. The information included below only discusses <CODE>GenApplicationClass</CODE>
 support of IACP mechanisms.</P>
<P>
GAI_<CODE>
iacpConnects</CODE>
 stores the chunk handle to an array of active IACP connections. This chunk stores the IACP connection value referring to the remote application and the type of IACP connection (i.e. a connection that is enabled during a MSG_GEN_PROCESS_OPEN_APPLICATION, for example). These values are manipulated internally and there is no need to access them. You will instead use a variety of messages provided with <CODE>
GenApplicationClass</CODE>
 to register and unregister for application notification.</P>
<P>
<A NAME="Application_8.htm_IX_GenApplicationClass">
 </A>
A good deal of support has been added to <CODE>
GenApplicationClass</CODE>
 to support IACP. The main things you need to know about this support are:</P>
<UL>
<LI>
A GenApplication object will refuse to quit so long as there are IACP connections open to it. It can, however, be forcibly detached, as happens when the system shuts down. In such a case, it will call <CODE>
IACPShutdownAll()</CODE>
 to shut down all remaining connections either to or from it.</LI>
<LI>
When it receives <CODE>
MSG_META_IACP_LOST_CONNECTION</CODE>
 sent to it as a server, it will eventually call <CODE>
IACPShutdown()</CODE>
 for the connection when it is certain no more messages relating to the connection are in any relevant queue. It will forward this message to all GenDocument objects below any GenDocumentGroup object in the application, so they can close themselves if the lost connection was the last reference to them.</LI>
<LI>
It will automatically register itself as a server for the application's token, either when it receives MSG_META_APP_STARTUP if the <CODE>
AppLaunchBlock</CODE>
 indicates it's running in engine mode, or when it receives MSG_META_ATTACH and has attached all the various pieces of UI. It will unregister itself as a server when it loses its last IACP connection and is no longer functioning in application mode (either because the user quit the application long since, or because it was never functioning in application mode).</LI>
<LI>
It registers and unregisters itself by sending <CODE>
MSG_GEN_APPLICATION_IACP_REGISTER</CODE>
 and <CODE>
MSG_GEN_APPLICATION_IACP_UNREGISTER</CODE>
 to itself, allowing an application to subclass these messages and register with other lists as appropriate.</LI>
<LI>
To determine whether it has any IACP connections remaining, it invokes <CODE>
MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_CONNECTIONS</CODE>
 on itself. Should an application register the GenApplication or any other object as a server for another list, it can determine how many connections remain from that list and augment the number returned by the default handler in <CODE>
GenApplicationClass</CODE>
. If this returns non-zero, GenApplication will not shut down the application voluntarily.</LI>
<LI>
After unregistering, it will force-queue a message to itself that will check the number of connections again. If the number has become non-zero between the unregister and the check, it re-registers and does not shut down. If the number remains zero, however, the application will exit.</LI>
<LI>
When forcibly detached, it will send <CODE>
MSG_GEN_APPLICATION_IACP_SHUTDOWN_ALL_CONNECTIONS</CODE>
 to itself. The default handler will call<CODE>
 IACPShutdownAll()</CODE>
, passing its own optr. A subclass can use this to perform a similar operation for any other server objects the application might have.</LI>
</UL>

<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_REGISTER</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_IACP_REGISTER();</PRE>
<P>
This message is sent by a GenApplication object to itself when it registers for IACP. It is not a message meant to be sent externally to an application to register it for IACP. Instead, you can subclass this message and register the object with other lists.</P>
<P CLASS="refField">
Source:	Sent by the GenApplication object to itself.</P>
<P CLASS="refField">
Destination:	The GenApplication object to register with IACP.</P>
<P CLASS="refField">
Interception:	May be intercepted if there are other lists with which you want to register the application, or other server objects. You must make sure to call the superclass, however.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_UNREGISTER</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_IACP_UNREGISTER();</PRE>
<P>
This message is sent by a GenApplication object to itself when it unregisters for IACP. It is not a message meant to be sent externally to an application to unregister it for IACP. Instead, you can subclass this message and unregister the object with other lists.</P>
<P CLASS="refField">
Source:	Sent by the GenApplication object to itself.</P>
<P CLASS="refField">
Destination:	The GenApplication object to unregister with IACP.</P>
<P CLASS="refField">
Interception:	May be intercepted if there are other lists with which you need to unregister the application, or other server objects. You must make sure to call the superclass, however.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_CONNECTIONS</H6>
<PRE CLASS="syntax">word	MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_CONNECTIONS();</PRE>
<P>
This message returns the number of active engine or app-mode IACP connections for a given application. This message is used to check whether an application open only for IACP purposes may be closed.</P>
<P CLASS="refField">
Source:	Called by GenProcessClass when the UI has finished processing MSG_META_QUIT for the application; this determines if the application should exit at this point or if there are client applications that need the application to stay open.</P>
<P CLASS="refField">
Destination:	GenApplication object of the application.</P>
<P CLASS="refField">
Return:	Number of open connections. If non-zero, application will remain open.</P>
<P CLASS="refField">
Interception:	Only intercept if you have other server objects beside your GenApplication object. If intercepting, call the superclass first and then add the number of connections to the other objects onto the result returned by <CODE>
GenApplicationClass</CODE>
.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_APP_MODE_CONNECTIONS</H6>
<PRE CLASS="syntax">word	MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_APP_MODE_CONNECTIONS();</PRE>
<P>
This message retrieves the number of connections which require that the application be open in app-mode (as opposed to engine mode). This message is used to check whether an application can be closed down into engine mode even if some IACP connections are still open.</P>
<P CLASS="refField">
Source:	This message is called by the <CODE>
GenProcessClass</CODE>
 when the UI has finished processing MSG_META_QUIT to determine if the application should really close down to engine mode.</P>
<P CLASS="refField">
Destination:	GenApplication object of application.</P>
<P CLASS="refField">
Return:	Number of open app-mode connections. </P>
<P CLASS="refField">
Interception:	Only intercept if you have other server objects besides your GenApplication object. You should call the superclass first and then add the number of connections to other objects onto the result returned by <CODE>
GenApplicationClass</CODE>
.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_SHUTDOWN_ALL_CONNECTIONS</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_IACP_SHUTDOWN_ALL_CONNECTIONS();</PRE>
<P>
This message shuts down all IACP connections for a given application, either on the server or the client side of the connection.</P>
<P CLASS="refField">
Source:	Sent by the GenApplication object to itself.</P>
<P CLASS="refField">
Destination:	GenApplication object of the application.</P>
<P CLASS="refField">
Interception:	May be intercepted to allow connections to other server objects to be shut down. You must call the superclass at some point to ensure that application connections are shut down as well.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_APP_MODE_COMPLETE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_APP_MODE_COMPLETE();</PRE>
<P>
This message is sent to the application when its life as a user-interactable app is complete. The default behavior is to continue shutting down the process if there are no IACP connections active.</P>
<P CLASS="refField">
Source:	Sent by the GenProcess object after it receives a MSG_META_ACK from detaching the application.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted; If you have other server connections which you want taken into account before shutting the application completely down, you should intercept MSG_GEN_APPLICATION_IACP_GET_NUMBER_OF_CONNECTIONS instead.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_IACP_COMPLETE_CONNECTIONS</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_IACP_COMPLETE_CONNECTIONS();</PRE>
<P>
This message completes all pending IACP connections, accepting any queued messages that have been waiting to be handled. If you subclass it, be sure to call the superclass at some point.</P>
<P CLASS="refField">
Source:	Sent by the GenApplication object to itself in its default MSG_GEN_APPLICATION_OPEN_COMPLETE method, as we assume that the object should be able to handle IACP messages at this latter stage of opening the IACP mechanism.</P>
<P CLASS="refField">
Destination:	GenApplication object of the application.</P>
<P CLASS="refField">
Interception:	May be intercepted if there are other lists besides those connected to the application's token, if those other connections might be pending. If intercepting, you must call the superclass eventually.</P>

<HR>
<A NAME="Application_9.htm"></A>


<H2 CLASS="sectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2 
Advanced GenApplication Usage</H2>
<P>
Typically, you will merely set up a GenApplication object in your <STRONG CLASS="fileName">
.goc</STRONG>
 file and then leave it alone. You may occasionally send it messages to invoke functions or to query the application. These messages are infrequently used, however, and you will likely not have need for them.</P>
<P CLASS="subsectionLink">
<A HREF="#Application_a.htm">An Application's Life Cycle</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_b.htm">Application Busy States</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_c.htm">The GenApplication's Moniker</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_d.htm">Measurement Type</A></P>
<P CLASS="subsectionLink">
<A HREF="#Application_e.htm">Interaction with the UI</A></P>
<HR>
<A NAME="Application_a.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2.1 <A HREF="#Application_9.htm">Advanced GenApplication Usage</A>: 
An Application's Life Cycle</H3>
<P>
For information on how an application is launched and closed, see <A HREF="../../Kernel/Geodes/combo.htm">the Applications and Geodes chapter</A>.</P><HR>
<A NAME="Application_b.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2.2 <A HREF="#Application_9.htm">Advanced GenApplication Usage</A>: 
Application Busy States</H3>
<PRE>MSG_GEN_APPLICATION_MARK_BUSY, MSG_GEN_APPLICATION_MARK_NOT_BUSY, MSG_GEN_APPLICATION_HOLD_UP_INPUT, MSG_GEN_APPLICATION_RESUME_INPUT, MSG_GEN_APPLICATION_IGNORE_INPUT, MSG_GEN_APPLICATION_ACCEPT_INPUT, MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY, MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY</PRE>
<P>
<A NAME="Application_b.htm_IX_Busy state">
 </A>
An application's busy state is reflected by its mouse pointer. An application may have several busy states, set appropriately for the action going on at the time. The messages below can set the application's busy state. You will not usually send any of these messages to your GenApplication object. Instead, you will usually set appropriate GI_<CODE>
attrs</CODE>
 to automatically send out these messages during times when the application will be busy.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_MARK_BUSY</CODE>
 marks the application busy (usually by changing the cursor to an appropriate shape determined by the specific UI) until the current operation in the application thread completes. This message is sent by UI gadgets that have GA_INITIATES_BUSY_STATE set in their <CODE>
GI_attrs</CODE>
 fields. It may also be called by any other object that wants to mark the application busy. When an application is busy, the user may continue to interact with it.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_MARK_NOT_BUSY</CODE>
 removes the busy state marker. This message is automatically sent to the application object when the operation that initiated the busy state completes.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_HOLD_UP_INPUT</CODE>
<A NAME="Application_b.htm_IX_Input:holding up">
 </A>
 instructs the User Interface to place all input events into a special &quot;hold-up&quot; queue until the input is resumed. This message also marks the application busy. Applications marked GA_INITIATES_INPUT_HOLD_UP will receive this message whenever they initiate an operation.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_RESUME_INPUT</CODE>
 removes the input hold-up state, allowing normal input flow. This message flushes the &quot;hold-up&quot; event queue into the application's input queue, ensuring that all events during the &quot;hold up&quot; operation are handled before any new events.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_IGNORE_INPUT</CODE>
<A NAME="Application_b.htm_IX_Input:ignoring">
 </A>
 instructs the GenApplication object to ignore all input events it receives. This may be accompanied with an audible warning (beep). Applications marked GA_INITIATES_INPUT_IGNORE will receive this message whenever they initiate an operation.</P>
<P>
<CODE>
MSG_GEN_APPLICATION_ACCEPT_INPUT</CODE>
 removes the input ignore state and directs the GenApplication object to again receive input events and handle them.</P>
<P>
All of these messages are cumulative. The application will keep track of how many times each of these messages is sent. For example, each <CODE>
MSG_GEN_APPLICATION_MARK_NOT_BUSY</CODE>
 message will remove a <CODE>
MSG_GEN_APPLICATION_MARK_BUSY</CODE>
. When the count reaches zero, the busy state is removed.</P>

<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_MARK_BUSY">
 </A>
MSG_GEN_APPLICATION_MARK_BUSY</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_MARK_BUSY();</PRE>
<P>
This message marks the application busy and changes the cursor image.</P>
<P CLASS="refField">
Source:	Sent automatically by objects with GA_INITIATES_BUSY_STATE set.</P>
<P CLASS="refField">
Destination:	The GenApplication object running the sender.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_MARK_NOT_BUSY">
 </A>
MSG_GEN_APPLICATION_MARK_NOT_BUSY</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_MARK_NOT_BUSY();</PRE>
<P>
This message marks the application not busy, removing the effect of a previous <CODE>
MSG_GEN_APPLICATION_MARK_BUSY</CODE>
.</P>
<P CLASS="refField">
Source:	Sent automatically by objects with GA_INITIATES_BUSY_STATE set.</P>
<P CLASS="refField">
Destination:	The GenApplication object running the sender.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_HOLD_UP_INPUT">
 </A>
MSG_GEN_APPLICATION_HOLD_UP_INPUT</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_HOLD_UP_INPUT();</PRE>
<P>
This message causes the GenApplication to mark itself busy and redirect input events to a special &quot;hold-up&quot; queue. When the application is ready to resume normal activity, it first handles the messages in the hold-up queue before handling new input messages.</P>
<P CLASS="refField">
Source:	Used infrequently.</P>
<P CLASS="refField">
Destination:	The GenApplication object to be held up.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_RESUME_INPUT">
 </A>
MSG_GEN_APPLICATION_RESUME_INPUT</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_RESUME_INPUT();</PRE>
<P>
This message causes a GenApplication to resume normal input handling after it has been held up with <CODE>
MSG_GEN_APPLICATION_HOLD_UP_INPUT</CODE>
.</P>
<P CLASS="refField">
Source:	Used infrequently.</P>
<P CLASS="refField">
Destination:	The GenApplication object running the sender.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_IGNORE_INPUT">
 </A>
MSG_GEN_APPLICATION_IGNORE_INPUT</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_IGNORE_INPUT();</PRE>
<P>
This message causes the GenApplication to consume all input events it receives rather than handle them. This message may be used during debugging as a <EM>
last</EM>
 resort to help find synchronization problems.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication object to consume input events.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_ACCEPT_INPUT">
 </A>
MSG_GEN_APPLICATION_ACCEPT_INPUT</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_ACCEPT_INPUT();</PRE>
<P>
This message undoes a previous <CODE>
MSG_GEN_APPLICATION_IGNORE_INPUT</CODE>
, allowing the GenApplication to once again handle input events normally.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication object to resume input handling.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY">
 </A>
MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY();</PRE>
<P>
This message is rarely used and forces a busy state over the application regardless of other states. It should be used only when a time-intensive task is going on in the UI and the program can not handle input during that time.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication object to be marked completely busy.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_b.htm_IX_MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY">
 </A>
MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY();</PRE>
<P>
This message undoes <CODE>
MSG_GEN_APPLICATION_MARK_COMPLETELY_BUSY</CODE>
, allowing the application to once again handle user input.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication object to be marked not busy.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_c.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2.3 <A HREF="#Application_9.htm">Advanced GenApplication Usage</A>: 
The GenApplication's Moniker</H3>
<PRE>MSG_GEN_APPLICATION_FIND_MONIKER, MSG_GEN_APPLICATION_SET_TASK_ENTRY_MONIKER</PRE>
<P>
<A NAME="Application_c.htm_IX_Monikers:application moniker">
 </A>
Every GenApplication object should be given a moniker; this moniker is displayed by the UI in its task list. (In OSF/Motif, the task list is manifested as the floating &quot;Express&quot; menu.) While you will set the moniker just like for any generic object, the GenApplication has two messages that can be used to get or set the moniker used in the task list.</P>

<H6 CLASS="RefETitle">
<A NAME="Application_c.htm_IX_MSG_GEN_APPLICATION_FIND_MONIKER">
 </A>
MSG_GEN_APPLICATION_FIND_MONIKER</H6>
<PRE CLASS="syntax">optr	MSG_GEN_APPLICATION_FIND_MONIKER(
        MemHandle		destBlock,
        word		searchFlags,
        DisplayType		displayType);</PRE>
<P>
This message finds the specified moniker in the GenApplication's <CODE>
VisMonikerList</CODE>
 and optionally copies it into a specified destination block.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to get the moniker from.</P>
<P CLASS="refField">
Parameters:	<CODE>
destBlock</CODE>
	The handle of the destination block into which the chunk will be copied. For this to work, you must pass VMSF_COPY_CHUNK in <CODE>
searchFlags</CODE>
.</P>
<DL>
<DT>
<CODE>
searchFlags</CODE>
</DT><DD>A record of <CODE>
VisMonikerSearchFlags</CODE>
 indicating what type of moniker to find in the moniker list and what to do with it when it is found.</DD>
<DT>
<CODE>
displayType</CODE>
</DT><DD>The display type of the moniker to search for.</DD>
</DL>
<P CLASS="refField">
Return:	The optr of the GenApplication's <CODE>
VisMonikerList</CODE>
 chunk.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_c.htm_IX_MSG_GEN_APPLICATION_SET_TASK_ENTRY_MONIKER">
 </A>
MSG_GEN_APPLICATION_SET_TASK_ENTRY_MONIKER</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_TASK_ENTRY_MONIKER(
        optr	entryMoniker);</PRE>
<P>
This message changes the moniker which is used in the GenField's task list. The task list menu will be updated if currently visible.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to have its moniker changed.</P>
<P CLASS="refField">
Parameters:	<CODE>
entryMoniker</CODE>
	The optr of the chunk containing the moniker that will be set into the task list.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_d.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2.4 <A HREF="#Application_9.htm">Advanced GenApplication Usage</A>: 
Measurement Type</H3>
<PRE>MSG_GEN_APPLICATION_SET_MEASUREMENT_TYPE, MSG_GEN_APPLICATION_GET_MEASUREMENT_TYPE, GET_APP_MEASUREMENT_TYPE</PRE>
<P>
<A NAME="Application_d.htm_IX_Measurement type">
 </A>
<A NAME="Application_d.htm_IX_Localization:measurement type">
 </A>
Each application has a &quot;measurement type&quot; associated with it. The measurement type indicates whether measurements should default to metric or standard US measurements.</P>

<H6 CLASS="RefETitle">
<A NAME="Application_d.htm_IX_MSG_GEN_APPLICATION_SET_MEASUREMENT_TYPE">
 </A>
MSG_GEN_APPLICATION_SET_MEASUREMENT_TYPE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_SET_MEASUREMENT_TYPE(
        byte	measurementType);</PRE>
<P>
This message sets the measurement type used by the application.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to have the new measurement type.</P>
<P CLASS="refField">
Parameters:	<CODE>
measurementType<BR>
</CODE>
A value of <CODE>
AppMeasurementType</CODE>
 to set for the application. Can be AMT_US, AMT_METRIC, or AMT_DEFAULT.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_d.htm_IX_MSG_GEN_APPLICATION_GET_MEASUREMENT_TYPE">
 </A>
MSG_GEN_APPLICATION_GET_MEASUREMENT_TYPE</H6>
<PRE CLASS="syntax">word	MSG_GEN_APPLICATION_GET_MEASUREMENT_TYPE();</PRE>
<P>
This message gets the measurement currently used by the application.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication whose measurement is to be retrieved.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	A word value, the low byte of which represents the application's measurement type. Use the macro GET_MEASUREMENT_TYPE to extract the measurement type from the return value.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>

<HR>
<A NAME="Application_e.htm"></A>


<H3 CLASS="subsectionTitle">
<A HREF="#index.htm">The Application Object</A>: 2.5 <A HREF="#Application_9.htm">Advanced GenApplication Usage</A>: 
Interaction with the UI</H3>
<P>
<A NAME="Application_e.htm_IX_Display scheme:accessing">
 </A>
The GenApplication is an application's main point of contact with the UI. As such, it has several messages that are sent by the UI or by other objects to initiate certain UI-related functions. These messages will rarely, if ever, be used by application programmers, but they are documented here in case you find them useful.</P>

<H4 CLASS="HeadingC">
Attaching and Detaching</H4>
<PRE>MSG_GEN_APPLICATION_INITIATE_UI_QUIT, MSG_GEN_APPLICATION_INSTALL_TOKEN, MSG_GEN_APPLICATION_DETACH_PENDING, MSG_GEN_APPLICATION_OPEN_COMPLETE, MSG_GEN_APPLICATION_QUIT_AFTER_UI</PRE>

<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_INITIATE_UI_QUIT">
 </A>
MSG_GEN_APPLICATION_INITIATE_UI_QUIT</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_INITIATE_UI_QUIT();</PRE>
<P>
This message causes the GenApplication to begin quitting. The application will automatically go through the entire quit sequence.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication of the application to be shut down.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_INSTALL_TOKEN">
 </A>
MSG_GEN_APPLICATION_INSTALL_TOKEN</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_INSTALL_TOKEN();</PRE>
<P>
This message instructs the GenApplication object to set its token into the token database file.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to have its token installed.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_DETACH_PENDING">
 </A>
MSG_GEN_APPLICATION_DETACH_PENDING</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_DETACH_PENDING();</PRE>
<P>
This message is sent to the specific UI library through the GenApplication to notify it that the application is about to be shut down. It is used to abort any application-modal dialog boxes so the application's Process object will be able to detach.</P>
<P CLASS="refField">
Source:	The GenApplication object before it detaches.</P>
<P CLASS="refField">
Destination:	The GenApplication of the application about to be detached.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_OPEN_COMPLETE">
 </A>
MSG_GEN_APPLICATION_OPEN_COMPLETE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_OPEN_COMPLETE();</PRE>
<P>
This message is sent by the GenApplication object to itself when it has finished opening (after it has set itself usable). It is sent via the queue and indicates that the application's UI is fully usable.</P>
<P CLASS="refField">
Source:	A GenApplication after it has set itself GS_USABLE.</P>
<P CLASS="refField">
Destination:	Sent to itself.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_QUIT_AFTER_UI</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_QUIT_AFTER_UI();</PRE>
<P>
This message is called from the MSG_META_QUIT handler in GenProcessClass, after the UI has finished its MSG_GEN_APPLICATION_INITIATE_UI_QUIT sequence. This message is the application's last chance to abort a quit before the DETACH sequence begins. The default behavior is to abort the QUIT if the application is still open for the user (i.e. not ALF_OPEN_FOR_IACP_CONNECTION_ONLY) or if an IACP connection remains that requires the application to remain open.</P>
<P CLASS="refField">
Source:	<CODE>
GenProcessClass</CODE>
.</P>
<P CLASS="refField">
Destination:	GenApplication object of the application.</P>
<P CLASS="refField">
Interception:	May be intercepted and not sent to the superclass to abort the QUIT. </P>



<H4 CLASS="HeadingC">
Queries of the UI</H4>
<PRE>MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME, MSG_GEN_APPLICATION_QUERY_UI, MSG_GEN_APPLICATION_NOTIFY_MODAL_WIN_CHANGE, MSG_GEN_APPLICATION_INK_QUERY_REPLY, MSG_GEN_APPLICATION_GET_GCN_LIST_OF_LISTS, MSG_GEN_APPLICATION_TEST_WIN_INTERACTABILITY, MSG_GEN_APPLICATION_VISIBILITY_NOTIFICATION, MSG_GEN_APPLICATION_GET_MODAL_WIN, MSG_GEN_APPLICATION_CHECK_IF_ALWAYS_INTERACTABLE_OBJECT</PRE>

<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME">
 </A>
MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME(
        DisplayScheme * displayScheme);</PRE>
<P>
This message gets the current display scheme used by the application.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	Any GenApplication.</P>
<P CLASS="refField">
Parameters:	<CODE>
displayScheme</CODE>
	<A NAME="Application_e.htm_IX_font:application display scheme">
 </A>
<A NAME="Application_e.htm_IX_Color:display scheme of specific ui">
 </A>
A pointer to a structure of type <CODE>
DisplayScheme</CODE>
. This structure will be filled by the method and contains information about the color scheme, display type, font ID, and point size used by the application.</P>
<P CLASS="refField">
Return:	The <CODE>
DisplayScheme</CODE>
 structure pointed to by <CODE>
displayScheme</CODE>
 will be filled upon return.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_QUERY_UI">
 </A>
MSG_GEN_APPLICATION_QUERY_UI</H6>
<PRE CLASS="syntax">Handle	MSG_GEN_APPLICATION_QUERY_UI();</PRE>
<P>
This message is used to determine which UI should be used at a given point in the generic tree for a certain type of object.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The handle of the specific UI library geode.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_NOTIFY_MODAL_WIN_CHANGE">
 </A>
MSG_GEN_APPLICATION_NOTIFY_MODAL_WIN_CHANGE</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_NOTIFY_MODAL_WIN_CHANGE();</PRE>
<P>
This message is called on a GenApplication object by the UI whenever the application should check to see if there is a change in modal status. The behavior is to look for the top system-modal window owned by the application and then the top application-modal window within the application's layer.</P>
<P>
This message sets the AS_ATTACHED_TO_STATE_FILE in the GenApplication's <CODE>
GAI_states</CODE>
 field.</P>
<P CLASS="refField">
Source:	Sent by the UI.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_INK_QUERY_REPLY">
 </A>
MSG_GEN_APPLICATION_INK_QUERY_REPLY</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_INK_QUERY_REPLY(
        InkReturnValue		inkReturnValue,
        word		inkGstate);</PRE>
<P>
<A NAME="Application_e.htm_IX_Ink:MSG_GEN_APPLICATION_INK_QUERY_REPLY">
 </A>
This message is sent to an Application object in reply to a <CODE>
MSG_META_QUERY_IF_PRESS_IS_INK</CODE>
. It indicates whether the object that was queried can or can not handle Ink presses. The GenApplication object responds by sending a message to the UI.</P>
<P CLASS="refField">
Source:	Sent by an object in response to <CODE>
MSG_META_QUERY_IF_PRESS_IS_INK</CODE>
.</P>
<P CLASS="refField">
Destination:	The GenApplication object associated with the sender.</P>
<P CLASS="refField">
Parameters:	<CODE>
inkReturnValue</CODE>
	A value indicating whether the object queried can handle Ink input or not. Will be one of IRV_NO_INK, IRV_INK_WITH_STANDARD_OVERRIDE, IRV_DESIRES_INK, or IRV_WAIT.</P>
<DL>
<DT>
<CODE>
inkGstate</CODE>
</DT><DD>The GState, if any, to be used when drawing Ink.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_GET_GCN_LIST_OF_LISTS">
 </A>
MSG_GEN_APPLICATION_GET_GCN_LIST_OF_LISTS</H6>
<PRE CLASS="syntax">ChunkHandle MSG_GEN_APPLICATION_GET_GCN_LIST_OF_LISTS();</PRE>
<P>
<A NAME="Application_e.htm_IX_General change notification:accessing list of lists">
 </A>
This message retrieves the GenApplication's GCN list of lists chunk handle. This chunk handle may then be used with a number of kernel routines for GCN list management or to perform operations on individual GCN lists.</P>
<P CLASS="refField">
Source:	Any object in the GenApplication's thread.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	None.</P>
<P CLASS="refField">
Return:	The chunk handle of the GCN list of lists chunk; a null chunk handle will be returned if the chunk does not exist.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_TEST_WIN_INTERACTABILITY">
 </A>
MSG_GEN_APPLICATION_TEST_WIN_INTERACTABILITY</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_APPLICATION_TEST_WIN_INTERACTABILITY(
        optr	inputOD,
        Handle	window);</PRE>
<P>
This message tests whether the passed window object is interactable.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<CODE>
inputOD</CODE>
	The optr of the windowed object to be tested.</P>
<DL>
<DT>
<CODE>
window</CODE>
</DT><DD>The window handle of the window to be tested.</DD>
</DL>
<P CLASS="refField">
Return:	The return value will be <CODE>
false</CODE>
 if there are no modal windows in the system or if the window object passed is the topmost active modal window. The return value will be <CODE>
true</CODE>
 if an active modal window exists and is not the passed window object (in this case, if the passed object has any window grabs, it should release them). <CODE>
True</CODE>
 is also returned if there is no modal window but the GenApplication is ignoring input.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_VISIBILITY_NOTIFICATION">
 </A>
MSG_GEN_APPLICATION_VISIBILITY_NOTIFICATION</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_VISIBILITY_NOTIFICATION(
        optr		obj,
        Boolean 		opening);</PRE>
<P>
Notifies the GenApplication object that it has become visible or not visible.</P>
<P CLASS="refField">
Source:	The specific UI.</P>
<P CLASS="refField">
Destination:	The GenApplication that has become visible or not visible.</P>
<P CLASS="refField">
Parameters:	<CODE>
obj</CODE>
	The optr of the object sending the notification message.</P>
<DL>
<DT>
<CODE>
opening</CODE>
</DT><DD>A Boolean indicating the state of the object: <CODE>
true</CODE>
 if open, <CODE>
false</CODE>
 if closed.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_GET_MODAL_WIN</H6>
<PRE CLASS="syntax">optr	MSG_GEN_APPLICATION_GET_MODAL_WIN();</PRE>
<P>
This message returns the current top modal window for the application, if any is present.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>
<P CLASS="refField">
Return:	optr of top modal windowed object.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_CHECK_IF_ALWAYS_INTERACTABLE_OBJECT</H6>
<PRE CLASS="syntax">Boolean	MSG_GEN_APPLICATION_CHECK_IF_ALWAYS_INTERACTABLE_OBJECT(
        optr		objToCheck);</PRE>
<P>
This message checks if the passed object should always remain interactable. </P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>
<P CLASS="refField">
Parameters:	<EM>
objToCheck</EM>
	optr of object to check the interactable state.</P>
<P CLASS="refField">
Return:	<EM>
true</EM>
 if the object is always interactable, <EM>
false</EM>
 if not.</P>



<H4 CLASS="HeadingC">
Alterations of Functionality</H4>
<PRE>MSG_GEN_APPLICATION_BRING_WINDOW_TO_TOP, MSG_GEN_APPLICATION_LOWER_WINDOW_TO_BOTTOM, MSG_GEN_APPLICATION_BUILD_STANDARD_DIALOG, MSG_GEN_APPLICATION_DO_STANDARD_DIALOG, MSG_GEN_APPLICATION_TOGGLE_CURSOR, MSG_GEN_APPLICATION_BRING_UP_HELP, MSG_GEN_APPLICATION_TOGGLE_CURRENT_MENU_BAR, MSG_GEN_APPLICATION_TOGGLE_FLOATING_KEYBOARD, MSG_GEN_APPLICATION_TOGGLE_EXPRESS_MENU</PRE>

<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_BRING_WINDOW_TO_TOP">
 </A>
MSG_GEN_APPLICATION_BRING_WINDOW_TO_TOP</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_BRING_WINDOW_TO_TOP(
        optr	window);</PRE>
<P>
This message brings the passed window to the front of the screen.</P>
<P CLASS="refField">
Source:	Unrestricted</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<CODE>
window</CODE>
	The optr of the window object to be brought to the front of the screen.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_LOWER_WINDOW_TO_BOTTOM">
 </A>
MSG_GEN_APPLICATION_LOWER_WINDOW_TO_BOTTOM</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_LOWER_WINDOW_TO_BOTTOM(
        optr	window);</PRE>
<P>
This message sends the specified window to the back of the screen, behind other window objects.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	Any GenApplication object.</P>
<P CLASS="refField">
Parameters:	<CODE>
window</CODE>
	The optr of the window object to be sent to the back of the screen.</P>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_BUILD_STANDARD_DIALOG">
 </A>
MSG_GEN_APPLICATION_BUILD_STANDARD_DIALOG</H6>
<PRE CLASS="syntax">optr	MSG_GEN_APPLICATION_BUILD_STANDARD_DIALOG(
        char	* customTriggers,
        char	* arg2,
        char	* arg1,
        char	* string,
        CustomDialogBoxFlags dialogFlags);</PRE>
<P>
This message builds a standard dialog box for the application.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to use the dialog box.</P>
<P CLASS="refField">
Parameters:	<CODE>
customTriggers</CODE>
	A pointer to a table of custom GenTrigger information. Each trigger given in the table will appear in the dialog box in the order declared. The table is made up of structures of type <CODE>
StandardDialogResponseTriggerTable</CODE>
.</P>
<DL>
<DT>
<CODE>
arg</CODE>
1</DT><DD>A pointer to a character string to be displayed in the dialog box.</DD>
<DT>
<CODE>
arg</CODE>
2</DT><DD>A pointer to a second string to be displayed in the dialog box.</DD>
<DT>
<CODE>
string</CODE>
</DT><DD>A pointer to a custom character string to be displayed in the dialog box.</DD>
<DT>
<CODE>
dialogFlags</CODE>
</DT><DD>A record of <CODE>
CustomDialogBoxFlags</CODE>
 indicating what type of dialog box is to be created.</DD>
</DL>
<P CLASS="refField">
Return:	The optr of the dialog box object.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_DO_STANDARD_DIALOG">
 </A>
MSG_GEN_APPLICATION_DO_STANDARD_DIALOG</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_DO_STANDARD_DIALOG(@stack
        word	dialogMethod,
        optr	dialogOD,
        char	*helpContext,
        char	* customTriggers,
        char	* arg2,
        char	* arg1,
        char	* string,
        CustomDialogBoxFlags dialogFlags);</PRE>
<P>
This message executes a standard dialog box and returns immediately. When the dialog box is shut down, the message passed in the <CODE>
dialogMethod</CODE>
 parameter is sent to the object specified in <CODE>
dialogOD</CODE>
. Only one dialog box at a time may be displayed with this message.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication to use the created dialog box.</P>
<P CLASS="refField">
Parameters:	<CODE>
dialogMethod</CODE>
	The message to be sent out when the user is finished with the dialog. This message should be defined based on the prototype <CODE>
GEN_APP_DO_STANDARD_DIALOG_MSG</CODE>
.</P>
<DL>
<DT>
<CODE>
dialogOD</CODE>
</DT><DD>The recipient of the message specified in <CODE>
dialogMethod</CODE>
 above.</DD>
<DT>
<EM>
helpContext</EM>
</DT><DD>The help context for this dialog box.</DD>
<DT>
<CODE>
customTriggers</CODE>
</DT><DD>A pointer to a table of custom GenTrigger information. Each trigger given in the table will appear in the dialog box in the order declared. The table is made up of structures of type <CODE>
StandardDialogResponseTriggerTable</CODE>
.</DD>
<DT>
<CODE>
arg2</CODE>
</DT><DD>A pointer to a second string to be displayed in the dialog box.</DD>
<DT>
<CODE>
arg1</CODE>
</DT><DD>A pointer to a character string to be displayed in the dialog box.</DD>
<DT>
<CODE>
string</CODE>
</DT><DD>A pointer to a custom character string to be displayed in the dialog box.</DD>
<DT>
<CODE>
dialogFlags</CODE>
</DT><DD>A record of <CODE>
CustomDialogBoxFlags</CODE>
 indicating what type of dialog box is to be created.</DD>
</DL>
<P CLASS="refField">
Return:	Nothing.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
<A NAME="Application_e.htm_IX_MSG_GEN_APPLICATION_TOGGLE_CURSOR">
 </A>
MSG_GEN_APPLICATION_TOGGLE_CURSOR</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_TOGGLE_CURSOR();</PRE>
<P>
This message toggles the cursor for a text object.</P>
<P CLASS="refField">
Source:	Infrequently used.</P>
<P CLASS="refField">
Destination:	The GenApplication of the text object.</P>
<P CLASS="refField">
Interception:	Do not intercept.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_BRING_UP_HELP</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_BRING_UP_HELP();</PRE>
<P>
This message brings up help for an application. Normally, this is accomplished by sending a message to the focus object telling it to bring up a help window with the focus' help context.</P>
<P CLASS="refField">
Source:	Unrestricted, though generally from an application Help icon or &lt;F1&gt;.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>
<P CLASS="refField">
Interception:	Generally not intercepted, though it may be useful if for some reason you do not wish to bring up help (such as it doesn't exist for this application).</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_TOGGLE_CURRENT_MENU_BAR</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_TOGGLE_CURRENT_MENU_BAR();</PRE>
<P>
This message toggles the GIV_POPOUT state of the current GenPrimary's menu bar. This message only takes effect if the menu bar is toggleable (i.e. if UIWO_POPOUT_MENU_BAR is set).</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_TOGGLE_FLOATING_KEYBOARD</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_TOGGLE_FLOATING_KEYBOARD();</PRE>
<P>
This message toggles the state of the floating keyboard within the current application. Applications may subclass this to bring up their own PenInputControl (or equivalent) object. Otherwise the application object will create its own.</P>
<P CLASS="refField">
Source:	Unrestricted, though generally only supported on pen-based systems. </P>
<P CLASS="refField">
Destination:	GenApplication object.</P>
<P CLASS="refField">
Interception:	May be intercepted if the application has its own PenInputControl object.</P>


<H6 CLASS="RefETitle">
MSG_GEN_APPLICATION_TOGGLE_EXPRESS_MENU</H6>
<PRE CLASS="syntax">void	MSG_GEN_APPLICATION_TOGGLE_EXPRESS_MENU();</PRE>
<P>
This message toggles (opens or closes) the parent field's express menu.</P>
<P CLASS="refField">
Source:	Unrestricted.</P>
<P CLASS="refField">
Destination:	GenApplication object.</P>


<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
