<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>
<!-- This page was automatically generated from a bunch of smaller pages. -->
<META NAME="copyright" CONTENT="Copyright GEOWORKS">
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">
<TITLE>Tutorial</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffdf">
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
<A NAME="index.htm"></A>

<H1 CLASS="chapterTitle">
Tutorial
</H1>

<A NAME="index.htm_IX_Tutorial"> </A>
<P>
This chapter shows how you might get started 
writing a simple GEOS program, and it explains several fundamental GEOS 
programming concepts as it goes along. Although this tutorial explicitly refers
to the Nokia 9000 SDK version 1.1, it is also applies to the Nokia 9000i SDK version 2.0. 
</P>

<P CLASS="sectionlinks">
<STRONG>
&nbsp;&nbsp;<A HREF="#startgeos.htm">Getting Started with GEOS Programming</A><BR>
&nbsp;&nbsp;<A HREF="#tutorial.htm">Tutorial</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<EM><A HREF="#tutorial_source.htm">Tutorial Source Code</A></EM><BR>
&nbsp;&nbsp;<A HREF="#addcode_swat.htm">Adding Code and Debugging with Swat</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<EM><A HREF="#addcode_source.htm">Tutorial Source Code With Changes</A></EM><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="startgeos.htm"></A>



<H1 CLASS="chapterTitle">
Getting Started with GEOS Programming
</H1>
<P>
Before jumping into writing your own application, it might be useful to
compile and run an existing sample application. This chapter will take you through the generic steps of checking out a source file, compiling it, then running the compiled application on the emulator with the Swat debugger attached. 
The next two chapters explore GEOS development in greater detail by stepping through every step in creating the application &quot;Tutorial&quot;. We recommend that you step through this chapter to acquaint yourself with the generic process of compiling an application, then carefully follow the tutorial to get a flavor for GOC, Swat debugging, and Geode Parameter files.</P>
<P>
Typically, your development sequence will follow these steps:</P>
<OL>
<LI>
Check out a file by copying it to your Working Branch. This is your private development area. By doing your work here, the Branch files remain untouched (see <A HREF = "../../Intro/InstallSDK/NT-Tools_f.htm#76945">&quot;Developing In Your Working Branch&quot;</A> for more information);</LI>
<LI>
Create a Makefile using the <CODE>
mkmf</CODE>
 utility;</LI>
<LI>
Compile your application using the <CODE>
pmake</CODE>
 utility;</LI>
<LI>
Run the application on the error-checking version of the target emulator; </LI>
<LI>
Debug your application using the Swat debugger; and</LI>
<LI>
Edit your source code and go back to Step 3.</LI>
</OL>
<P>
The next section follows this sequence using the Dialogs sample application, though of course the same steps apply for any sample application. (Refer to the release notes in the README.TXT file or the <A HREF = "../../Intro/Tutorial/startgeos.htm">Troubleshooting</A> guide in the <A HREF = "../../Intro/InstallSDK/combo.htm">&quot;Installing the SDK&quot; chapter</A> if you encounter problems.)</P>
<P>
In the directory paths below, prepend your correct drive letter or path to PCGEOS and replace &quot;workingdir&quot; as appropriate. Also note that if you are using the Nokia 9000i SDK version 2.0, the directory labled here as <CODE>N9000v11</CODE> will be <CODE>N9000v20</CODE> in your development branch.</P>
<OL>
<LI>
Install the SDK by following the instructions in the <A HREF = "../../Intro/InstallSDK/combo.htm">&quot;Installing the SDK&quot;</A> chapter;</LI>
<LI>
Start a command window.</LI>
<LI>
Go to the \APPL\ subdirectory of your Working Directory:</LI>
<PRE>CD PCGEOS\workingdir\APPL</PRE>
<LI>
Create and go to the subdirectory \SDK_9000\DIALOGS\:</LI>
<PRE>MD SDK_9000\DIALOGS
CD SDK_9000\DIALOGS</PRE>
<LI>
Copy the file <STRONG CLASS="fileName">
DIALOGS.GOC</STRONG>
 from the N9000v11 Branch to this directory:</LI>
<PRE>COPY \PCGEOS\N9000V11\APPL\SDK_9000\DIALOGS\DIALOGS.GOC</PRE>
<LI>
Type <CODE>
mkmf</CODE>
 to create the makefile.</LI>
<LI>
Type <CODE>
pmake</CODE>
 to compile and link the executable. This will create an error-checking version called <STRONG CLASS="fileName">
DIALOGSEC.GEO</STRONG>
.</LI>
<LI>
Launch a wait-for-swat EC demo. You can do this from the GEOS SDK program menu if the shortcuts were installed; otherwise, CD to \PCGEOS\workingdir\TARGET\N9000.EC, then type <CODE>
start ss</CODE>
.</LI>
<LI>
Launch Swat. You can also do this from the GEOS SDK program menu; otherwise, type<CODE>
 start pcgeos\bin\swat</CODE>
. (The full path is only necessary if there is also a Swat stub in your current directory, which you <EM>
do not </EM>
want to run.)</LI>
<UL>
<LI>
If Swat pauses with a top-level prompt (=&gt;), type <CODE>
c</CODE>
 to continue. </LI>
<LI>
If Swat cannot file a symbol file, press <CODE>
Ctrl-W</CODE>
 to clear the &quot;Where is it&quot; default; then type <CODE>
i</CODE>
 (lower-case) to ignore that file.</LI>
<LI>
If Swat is searching a very long time for a particular symbol file (Looking for &quot;such-and-such&quot;...), you can abort the search by typing <CODE>
Ctrl-C</CODE>
, then using the <CODE>
Ctrl-W</CODE>
, <CODE>
i</CODE>
 sequence described above to ignore the file. </LI>
</UL>
<LI>
When the emulator has finished loading (usually after &quot;serial&quot; exits), press <CODE>
Ctrl-C</CODE>
 in the Swat window to bring command control back to Swat.</LI>
<LI>
Copy your geode (your compiled executable) to the target emulator by typing<CODE>
 send dialogs</CODE>
.</LI>
<LI>
Type <CODE>
c</CODE>
 to continue Swat.</LI>
<LI>
Click inside the emulator window to regain focus in that window. Press <CODE>
Ctrl-F12</CODE>
 to launch the Extras folder.</LI>
<LI>
Use the arrow keys to highlight the EC Dialogs application. Press <CODE>
F1</CODE>
 to launch it. (The keys F1 - F4 correspond to the menu list on the right of the emulator window.)</LI>
<LI>Play with the application.</LI>
<LI>
Select the Swat window, press <CODE>
Ctrl-C</CODE> to bring command control back to Swat, then type <CODE>
quit</CODE>
 to exit the emulator.</LI>
</OL>
<P>
In this section, you learned how to check out a source code file by copying it from the Branch directory to your Working Directory, and then compile and run it on the emulator. Notice that it was not necessary to copy all the files from the \DIALOGS\ subdirectory in the N9000v11 Branch. When compiling and linking, the tools are smart enough to look for files in your Working Directory first and then look for whatever other files it needs in the Branch directory. This allows you to copy only the file or files you need to work on; shared files can remain in the Branch directory. </P>
<P>
Now that you've gone through the basic steps of compiling and running a GEOS application, you can go on to <A HREF="#tutorial.htm">the next chapter</A> to create your own application from scratch.</P>

<HR>
<A NAME="tutorial.htm"></A>

<H1 CLASS="chapterTitle">

<A NAME="tutorial.htm_97933"></A>
Tutorial

</H1>


<P>
In this tutorial, you will create a simple GEOS application that draws text and demonstrates the basic components of a GEOS application. You'll learn how to compile and link the application and explore its source code using the Swat debugger.</P>
<P CLASS="sectionLinks">
<STRONG CLASS="sectionLinks">
&nbsp;&nbsp;<A HREF="#1">1 Creating &quot;Tutorial&quot;</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#2">1.1 Setting Up Your Working Directory</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#3">1.2 Compiling Your Source Code</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#4">1.3 Starting the Emulator and Swat</A><BR>
&nbsp;&nbsp;<A HREF="#5">2 Learning GOC</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#6">2.1 TUTORIAL.GP: Geode Parameters File</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#7">2.2 TUTORIAL.GOC: Source Code</A><BR>
&nbsp;&nbsp;<A HREF="#8">3 Exploring With Swat</A><BR>
&nbsp;&nbsp;<A HREF="#tutorial_source.htm">4 Source Code</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="tutorial.htm_1"></A>


<H3 CLASS="sectionTitle">
1: Creating &quot;Tutorial&quot;</H3>
<P>
The application that you'll be working on throughout this tutorial is called, appropriately enough, &quot;Tutorial.&quot; In this section you'll create two files: <STRONG CLASS="fileName">
<A HREF="#tutorial_source.htm_gp">TUTORIAL.GP</A></STRONG>
 and <STRONG CLASS="fileName">
<A HREF="#tutorial_source.htm_goc">TUTORIAL.GOC</A></STRONG>. The .GP (or &quot;geode parameters&quot;) file tells the linker how the application is organized; the .GOC file contains the actual source code. All GEOS applications require these two files.</P>


<A NAME="tutorial.htm_2"></A>
<H5 CLASS="subsectionTitle">
1.1: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Setting Up Your Working Directory</H5>
<P>
<A NAME="tutorial.htm_IX_Working Directory:in Tutorial example"> </A>
The first step in creating your application is to set up your Working Directory where you will do all your private development. Because your application is called &quot;Tutorial,&quot; you need to create a <STRONG CLASS="fileName">\TUTORIAL\</STRONG>
 subdirectory in your Working Directory to hold the source files (see <A HREF = "../../Intro/InstallSDK/NT-Tools_f.htm#76945">&quot;Developing In Your Working Branch&quot;</A> for more information).</P>
<OL>
<LI>
Create the <STRONG CLASS="fileName">
\TUTORIAL\</STRONG>
 subdirectory under <STRONG CLASS="fileName">
\APPL\</STRONG>
 in your Working Directory; for example: 
<STRONG CLASS="fileName">C:\PCGEOS\<EM>workingdir</EM>\APPL\TUTORIAL\</STRONG> where &quot;workingdir&quot; refers to your personal working directory (usually the same as your login name).</LI>

<LI>
Type in the contents of 
<A HREF="#tutorial_source.htm_gp">TUTORIAL.GP</A>
and <A HREF="#tutorial_source.htm_goc">TUTORIAL.GOC</A>. Put these files into the <STRONG CLASS="fileName">...\TUTORIAL\</STRONG> directory you just created.
Typing source code by hand is often a good way to learn the feel for a language's grammar. If you don't want to type the source code by hand, follow the above links and copy the text into the files <STRONG CLASS = "filename">TUTORIAL.GOC</STRONG> and <STRONG CLASS = "filename">TUTORIAL.GP</STRONG>, as indicated.
</OL>


<A NAME="tutorial.htm_3"></A>
<H5 CLASS="subsectionTitle">
1.2: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Compiling Your Source Code</H5>

<A NAME="tutorial.htm_IX_Compiling:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Working Directory:in Tutorial example"> </A>
<P>
Now that you've created some source code, it's time to compile your application. First, you will need to create a Makefile and then run the &quot;make&quot; or compilation utility.</P>
<OL>
<LI>
Start up a command window and make sure you are in your Working Directory for this application; <EM>
i.e.</EM>, 
<STRONG CLASS="fileName">C:\PCGEOS\<EM>workingdir</EM>\APPL\TUTORIAL\</STRONG>.</LI>
<LI>
<A NAME="tutorial.htm_IX_Makefiles:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_mkmf:in Tutorial example">
 </A>
Type<STRONG>
 mkmf </STRONG>
at the prompt; this utility creates a &quot;makefile&quot; which tells the pmake utility the steps with which to construct the application. It also creates a dependencies file, which tells pmake which files need to be remade whenever a source file has been modified.</LI>

<A NAME="tutorial.htm_IX_pmake:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Making:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Make:in Tutorial example"> </A>
<LI>
Type <STRONG>
pmake </STRONG>
to invoke the preprocessor, compiler, and linker to create the GEOS executable. </LI>
</OL>
<P>
When you have completed these steps, your directory should contain some new files, including <STRONG CLASS="fileName">
TUTORIALEC.GEO</STRONG> and your newly created GEOS executable or &quot;geode.&quot; The &quot;EC&quot; in the name indicates that you've compiled the error-checking version of your application. The GEOS SDK tools have been set up with some optional compilation features to allow for error-checking code which is useful during development.</P>

<A NAME="tutorial.htm_4"></A>


<H5 CLASS="subsectionTitle">
1.3: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Starting the Emulator and Swat</H5>

<A NAME="tutorial.htm_IX_Swat:launching"> </A>
<A NAME="tutorial.htm_IX_Swat:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Debugging:in Tutorial example"> </A>
<P>
Once you've successfully compiled your code, it's time to start up the GEOS emulator and attach Swat, the debugger. </P>
<OL>
<LI>
From the GEOS SDK program group, start the error-checking version of the emulator with Swat-wait.</LI>
<LI>
From the GEOS SDK program group, launch Swat (or type &quot;swat&quot; from a command prompt). The following should appear in the Swat window:</LI>
<PRE>Swat version 2.1 (Feb 14 1997 19:05:55).
Using the N9000V11 version of GEOS.
SDK version: ntsdk30
Looking for &quot;loader&quot;...c:/pcgeos/N9000V11/Installed/Loader/Text/loaderec.sym
Sourcing swat.tcl...done
GEOS Attached
Stopped in LoadGeos, address 0a06h:0007h
LoadGeos:            CLD                        ;DF=0
(loader:0) 1 =&gt; </PRE>
<P>
At this point, Swat is telling you that it has successfully established communications with the target emulator, has started the process of loading the GEOS kernel, and is now waiting for you to type in a command. Type <CODE>
c</CODE>
 and press the &lt;Enter&gt; key to continue loading the GEOS emulator. The following will appear:</P>
<PRE CLASS="SwatDisplay">Swat version 2.1 (Feb 14 1997 19:05:55).
pcgeosGEOS Attached
Stopped in LoadGeos, address 0a06h:0007h
LoadGeos:            CLD                        ;DF=0
(loader:0) 1 =&gt; save screen1.txt
Saving to c:/pcgeos/nfiedler/screen1.txt: 1000 lines
(loader:0) 2 =&gt; c
Looking for &quot;geos    Eker&quot;...c:/pcgeos/N9000V11/Installed/Library/Kernel/N9000DE
MO/geosec.sym
Looking for &quot;os2     Eifs&quot;...c:/pcgeos/N9000V11/Installed/Driver/IFS/DOS/OS2/os2
ec.sym
Looking for &quot;netware Eifs&quot;...c:/pcgeos/N9000V11/Installed/Driver/IFS/DOS/NetWare
/netwareec.sym
netware exited.
Looking for &quot;respondrElib&quot;...c:/pcgeos/N9000V11/Installed/Library/Respondr/N9000
DEMO/respondrec.sym
Looking for &quot;rspwr   Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Power/Rspwr/N90
00DEMO/rspwrec.sym
Thread 1 created for patient geos
Thread 2 created for patient geos
Looking for &quot;vidmem  Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Video/Dumb/VidM
em/vidmemec.sym
Looking for &quot;swap    Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Swap/swapec.sy
m
Looking for &quot;disk    Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Swap/Disk/diske
c.sym
Looking for &quot;xms     Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Swap/XMS/xmsec.
sym
Looking for &quot;gdi     Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/GDI/GenPC/WIN3
2/gdiec.sym
Looking for &quot;gdiKbd  Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Keyboard/GDI/gd
iKbdec.sym
Looking for &quot;nimbus  Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Font/Nimbus/nim
busec.sym
Looking for &quot;stream  Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Stream/streamec
.sym
Looking for &quot;sound   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Sound/N9000/so
undec.sym
Looking for &quot;standarddrvr&quot;...c:/pcgeos/N9000V11/Installed/Driver/Sound/Standard/
N9000DEMO/standard.sym
Looking for &quot;ui      Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/User/N9000/uie
c.sym
Thread 0 created for patient ui
Looking for &quot;styles  Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Styles/N9000/s
tylesec.sym
Looking for &quot;color   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Color/N9000/co
lorec.sym
Looking for &quot;ruler   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Ruler/N9000/ru
lerec.sym
Looking for &quot;text    Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Text/N9000/tex
tec.sym
Looking for &quot;rtcm    Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/RTCM/rtcmec.sy
m
Looking for &quot;ansic   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/AnsiC/ansicec.
sym
Looking for &quot;vp      Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/OEM/vp_st
b/vpec.sym
Looking for &quot;foam    Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/Foam/foam
ec.sym
Looking for &quot;foamdb  Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/DB/foamdb
ec.sym
Looking for &quot;contdb  Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/Contdb/co
ntdbec.sym
WARNING(foamdb::FoamDBVisibleRecordEnumWithRange): DB_ENUM_START_ELEMENT_TOO_LAR
GE
Looking for &quot;securitylib &quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/Security/
security.sym
Looking for &quot;rudy    Espu&quot;...c:/pcgeos/N9000V11/Installed/Library/SpecUI/Rudy/ru
dyec.sym
Looking for &quot;simp4bitEdrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Video/Dumb/Simp
4Bit/WIN32/simp4bitec.sym
WARNING(rudy::OLAppEnsureIndicatorCorrect): RUDY_INDICATOR_NOT_FOUND_IS_GEOS_BOO
TING_OR_SHUTTING_DOWN
Looking for &quot;spool   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Spool/N9000/sp
oolec.sym
Thread 0 created for patient spool
Looking for &quot;mailbox Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Mailbox/N9000/
mailboxec.sym
Thread 0 created for patient mailbox
Looking for &quot;nonts   Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Task/NonTS/nont
sec.sym
Looking for &quot;contlog Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/ContLog/c
ontlogec.sym
Looking for &quot;indicatoEapp&quot;...c:/pcgeos/N9000V11/Installed/Appl/FApps/OEM/indicat
o/indicate.sym
Thread 0 created for patient indicato
Looking for &quot;faxfile Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Fax/File/N9000
/faxfileec.sym
Looking for &quot;viewer  Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/Viewer/vi
ewerec.sym
Looking for &quot;clrfax  Egeo&quot;...c:/pcgeos/N9000V11/Installed/Appl/FApps/ClrFax/clrf
axec.sym
Thread 0 created for patient clrfax
Looking for &quot;math    Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Math/mathec.sy
m
Looking for &quot;ssset   Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/OEM/ssset
/sssetec.sym
Looking for &quot;scm     Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/OEM/scm/s
cmec.sym
Thread 0 created for patient scm
Looking for &quot;compose Elib&quot;...c:/pcgeos/N9000V11/Installed/Library/Foam/OEM/compo
se/composee.sym
Looking for &quot;borlandcElib&quot;...c:/pcgeos/N9000V11/Installed/Library/Math/Compiler/
BorlandC/borlandcec.sym
Looking for &quot;phone   Eapp&quot;...c:/pcgeos/N9000V11/Installed/Appl/FApps/OEM/phone/p
honeec.sym
Thread 0 created for patient phone
Thread 1 created for patient indicato
Thread 1 of indicato exited 0
viewer exited.
faxfile exited.
clrfax exited.
Thread 0 of clrfax exited 0
Looking for &quot;serial  Edrv&quot;...c:/pcgeos/N9000V11/Installed/Driver/Stream/Serial/s
erialec.sym
serial exited.
GEOS Halted
Stopped in DOSIdleHook, address 2796h:1136h
DOSIdleHook+17:      MOV     AX, 5760 (1680h)
(geos:0) 3 =&gt; </PRE>
<P>
Each line that begins &quot;Looking for...&quot; indicates that the system is loading a geode (a GEOS executable) and that Swat is looking for its symbol information. Swat also tells you whenever it creates (or exits) a thread for any geode.</P>

<A NAME="tutorial.htm_IX_Ctrl-c:in Swat[;C]"> </A>
<A NAME="tutorial.htm_IX_send Swat command:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_run Swat command:in Tutorial example"> </A>
<P>
Now that the emulator is running with Swat attached, you need to send your source code to the emulator to run it.</P>
<LI>
Type <CODE>
Ctrl-C</CODE>
 in the Swat window. At this point, the Swat prompt should appear.</LI>
<LI>
Type <CODE>
send tutorial</CODE>
 to copy the application to the emulator.</LI>
<LI>
Type <CODE>
run tutorial</CODE>
 to run the application.</LI>
<LI>
Type <CODE>
c</CODE>
 to allow execution to continue on the emulator.</LI>
</OL>
<P>
After you've followed these steps, your emulator should look like 
the screen pictured below.<BR>
<P>
<CENTER>
<TABLE WIDTH = 647 BORDER = 2>
<TR><TD>
<IMG SRC="tuto1.gif" HEIGHT = 202 WIDTH = 643><BR>
<STRONG>Figure 1:</STRONG>
<EM>The &quot;Tutorial&quot; application screen.</EM>
<P>
This is how your application will look after you type in the first pieces of code. Notice that it consists only of a blank viewing window and a &quotClose&quot button; later you will add code that displays text in this window.
</TD>
</TR>
</TABLE>
</CENTER>

<P>
As you can see, your application consists of an empty window. In the <A HREF= "addcode_swat.htm">next chapter</A>, you will add procedural code that draws a text string in this window.</P>
<HR>
<A NAME="tutorial.htm_5"></A>


<H3 CLASS="sectionTitle">
2: Learning GOC</H3>
<P>
By typing in the contents of the source files (both the .GOC and .GP files), you've probably become a little familiar with GOC syntax. GOC is a proprietary superset of standard ANSI C. It supports C routines and functionality and adds its own set of keywords and special syntax. This section will cover basic GOC syntax, including the usage and meaning of various GOC keywords, by giving a line-by-line explanation of the code you entered.</P>


<A NAME="tutorial.htm_6"></A>
<H5 CLASS="subsectionTitle">
2.1: <A HREF="#5">Learning GOC</A>: 
TUTORIAL.GP: Geode Parameters File</H5>
<A NAME="tutorial.htm_IX_Geode parameters files:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Glue parameters files:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_.gp files:in Tutorial example[;gp files:in Tutorial example]"> </A>
<P>
The .GP file tells the Glue linker about an application's general organization. (You can get complete information about all of the possible fields in a .GP file by reading <A HREF="../../LRef/GPKey/index.htm">the GP File Keywords reference</A>.) 
Let's take a look at the code in <STRONG CLASS="fileName">
<A HREF="#tutorial_source.htm_gp">TUTORIAL.GP</A></STRONG>
 to find out what each line means.
<PRE>name tutorial.app</PRE>
<P>
<A NAME="tutorial.htm_IX_name .gp file keyword:in Tutorial example">
 </A>
The <CODE>
name</CODE>
 field specifies the &quot;patient&quot; name by which Swat will identify the application. Swat thinks of each geode as a patient, so you'll see phrases in Swat like &quot;patient died&quot;.
<PRE>longname &quot;Tutorial Sample Application&quot;</PRE>
<A NAME="tutorial.htm_IX_longname .gp file keyword:in Tutorial example"> </A>
<P>
The <CODE>
longname</CODE>
 field is the name the system displays for this application. For example, if you press <CODE>
Ctrl-F12 </CODE>
on the emulator (to list the applications in the &quot;Extras&quot; folder), you will see the <CODE>
longname</CODE>
 for this application displayed. GEOS supports names up to 32 characters in length.
<PRE>tokenchars &quot;TUTO&quot;
tokenid 8</PRE>
<P>
<A NAME="tutorial.htm_IX_tokenchars .gp file keyword:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_tokenid .gp file keyword:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_GeodeToken:in Tutorial example"> </A>
Each application has its own unique identifier to the system. This identifier is a special GEOS data type called a <CODE>
GeodeToken</CODE>. A <CODE>
GeodeToken </CODE>
is a data structure comprised of two fields:
<DL>
<DT>
<CODE>
tokenchars</CODE></DT><DD>
A string of four characters (normally taken from the name of the application); and</DD>
<DT>
<CODE>
tokenid
</CODE></DT><DD>
The Manufacturer ID for your company; this value is unique to your company and ensures that your applications' <CODE>
GeodeTokens</CODE>
 do not conflict with those of other manufacturers. All sample applications, including this tutorial application, use a <EM>
tokenid</EM>
 of 8; for your &quot;real&quot; applications, you should use your company's assigned Manufacturer ID. (Send email to 
<A HREF="#mailto:orders@geoworks.com">orders@geoworks.com</A>
 to receive a Manufacturer ID.)</DD>
</DL>
<A NAME="tutorial.htm_IX_type .gp file keyword:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_single:as geode type in .gp file"> </A>
<A NAME="tutorial.htm_IX_appl:as geode type in .gp file"> </A>
<A NAME="tutorial.htm_IX_process:as geode type in .gp file"> </A>
<PRE>type appl, process, single</PRE>
<P>
The <CODE>type</CODE>
 line tells Glue whether your geode is an application, a driver or a library. <STRONG CLASS="fileName">
Tutorial</STRONG>, like most GEOS applications, uses the following keywords:
<UL>
<LI>
<CODE>
appl</CODE>
 which tells Glue that this geode is an application;</LI>
<LI>
<CODE>
process</CODE>
 which specifies that the geode should be run in its own thread;</LI>
<LI>
<CODE>
single</CODE>
 which specifies that only one copy of the program may run at a time.</LI>
</UL>
<P>
<A NAME="tutorial.htm_IX_Process:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_Threads:in Tutorial example">
 </A>
Because GEOS is a multi-tasking or multi-threaded operating system, it allows more than one thread of execution to run at a time. This enables programs to run in the background. By specifying that your application has a process, you are requesting that it have its own thread of execution. If you were writing a library, you probably wouldn't want to give it a process, figuring that other geodes would be executing the library's code.
<PRE>class TutorialProcessClass</PRE>
<P>
<A NAME="tutorial.htm_IX_class .gp file keyword:in Tutorial example">
 </A>
The <CODE>
class</CODE>
 line specifies which class will run the process thread. In this case, the <CODE>
TutorialProcessClass</CODE>
 will be in charge of the process thread. (You will declare <CODE>
TutorialProcessClass</CODE>
 in the <STRONG CLASS="fileName">
<A HREF="#tutorial_source.htm_goc">TUTORIAL.GOC</A></STRONG>
 file.)</P>
<PRE>appobj TutorialApp</PRE>
<P>
<A NAME="tutorial.htm_IX_appobj .gp file keyword">
 </A>
The <CODE>
appobj</CODE>
 line specifies the &quot;application object&quot; for this application. The application object is the interface between your geode and the rest of the system. (You will declare this object in your source file as well.)</P>
<A NAME="tutorial.htm_IX_platform .gp file keyword:in Tutorial example"> </A>
<PRE>platform n9000v20</PRE>
<P>
Glue will use the <CODE>
platform</CODE>
 line to make sure that your application doesn't rely on any geodes that aren't present on the GEOS device.</P>
<A NAME="tutorial.htm_IX_heapspace .gp file keyword"></A>
<PRE>heapspace 3K</PRE>
<P>
The <CODE>
heapspace</CODE>
 line specifies the maximum amount of memory the application requires on the global memory heap. Note that the value 3K is a wild guess. Once your application is closer to completion, you can use Swat's <CODE>
heapspace</CODE>
 command to find out how much heap space the application really needs.</P>
<A NAME="tutorial.htm_IX_library .gp file keyword:in Tutorial example"> </A>
<PRE>library geos
library ui</PRE>
<P>
The <CODE>
library</CODE>
 lines tell Glue which libraries to load for your application. All GEOS libraries are dynamically linked and loaded. </P>

<A NAME="tutorial.htm_IX_resource .gp file keyword:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_ui-object:resource type in .gp file"> </A>
<A NAME="tutorial.htm_IX_UI Thread:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Threads:in Tutorial example"> </A>
<PRE>resource APPRESOURCE ui-object
resource INTERFACE ui-object</PRE>
<P>
The <CODE>
resource</CODE>
 lines specify the blocks of memory that your application uses for objects. Breaking up an application into resources allows it to run more efficiently because the system will only load those resources it needs.</P>
<P>
The <CODE>ui-object</CODE>
keyword signals that the UI thread should run the specified resource. Specifying a UI thread ensures that your application will <EM>
have</EM>
 a UI thread and thus be dual-threaded: the process will run in one thread and UI objects will run in the UI thread. If you don't want the application to have two threads, use the keyword <CODE>
object</CODE>
 instead of <CODE>
ui-object</CODE>
.</P>
<A NAME="tutorial.htm_7"></A>


<H5 CLASS="subsectionTitle">
2.2: <A HREF="#5">Learning GOC</A>: 
<A NAME="tutorial.htm_IX_Deadlock avoidance">
 </A>
TUTORIAL.GOC: Source Code</H5>
<P>
Now let's take a look at the source code in <STRONG CLASS="fileName">
<A HREF = "tutorial_source.htm#goc">TUTORIAL.GOC</A></STRONG>
. (For more information about GOC syntax, see <A HREF="../../Programming/GOCLanguage/combo.htm">the GEOS Programming chapter</A>.)</P>
<A NAME="tutorial.htm_IX_@include:in Tutorial example[;include]"> </A>
<PRE>@include &lt;stdapp.goh&gt;
@include &lt;foam.goh&gt;</PRE>
<P>
The first lines of code contain the <CODE>
@include</CODE>
 directive. Note the '@' symbol. This symbol is used to denote GOC keywords and distinguish them from regular C syntax. <CODE>
@include</CODE>
 behaves the same way as <CODE>
#include</CODE>, except that the inclusion will take place when the GOC preprocessor is processing the source code. Generally, you <CODE>
@include</CODE> .GOH files and <CODE>
#include</CODE>
 regular .H files.</P>
<A NAME="tutorial.htm_IX_@class:in Tutorial example[;class]"> </A>
<A NAME="tutorial.htm_IX_@endc:in Tutorial example[;endc]"> </A>
<A NAME="tutorial.htm_IX_Classes:defining in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GenProcessClass:subclassing in Tutorial example"> </A>
<PRE>@class TutorialProcessClass, GenProcessClass;
@endc;</PRE>
<P>
The <CODE>
@class</CODE>
 and <CODE>
@endc</CODE>
 keywords mark the beginning and end of a new class definition. Here, you're defining <CODE>
TutorialProcessClass</CODE>
 as a subclass of <CODE>
GenProcessClass</CODE>
, which means that<CODE>
 TutorialProcessClass</CODE>
 will inherit all the behavior of its parent, <CODE>
GenProcessClass</CODE>
.</P>
<A NAME="tutorial.htm_IX_@classdecl:in Tutorial example[;classdecl]"> </A>
<A NAME="tutorial.htm_IX_Classes:declaring in Tutorial example"> </A>
<PRE>@classdecl TutorialProcessClass, neverSaved;</PRE>
<P>
Once you define the class, you need to declare it so that the system will know how to build objects of that class. To declare the class, you use the <CODE>
@classdecl</CODE>
 keyword and because this is the process object, (a special object with no instance data), you also use the <CODE>
neverSaved</CODE>
 flag. This flag tells the system that no instance data need be saved when the system shuts down.</P>
<PRE><A NAME="tutorial.htm_IX_Resources:@start"> </A>@start AppResource; </PRE>
<P>
The <CODE>
@start</CODE>
 keyword defines a resource or block of memory. In this case, you're defining the APPRESOURCE resource. In the <STRONG CLASS="fileName">
.</STRONG>
GP file, you may recall that this resource holds objects, and that those objects will be run by the UI thread.</P>
<A NAME="tutorial.htm_IX_Application object:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_FoamSubApplicationClass:in Tutorial example"> </A>

<PRE>@object FoamSubApplicationClass TutorialApp = {</PRE>
<P>
<A NAME="tutorial.htm_IX_Objects:@object">
 </A>
<A NAME="tutorial.htm_IX_GenApplicationClass:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_@object:in Tutorial example[;object]">
 </A>
The first object to be declared in the APPRESOURCE resource is the application object, <CODE>
TutorialApp</CODE>
. In the .GP file, you specified <CODE>
TutorialApp</CODE>
 as the application object in the <CODE>
appobj</CODE>
 line. The application object is responsible for receiving and handling all sorts of system messages and notifications. This is a nontrivial task so the object will be of a class specifically set up to handle this task: <CODE>
FoamSubApplicationClass</CODE>
. (Note, on GEOS systems other than the Nokia 9000i Communicator, you would use a <CODE>
GenApplicationClass</CODE>; <CODE>
FoamSubApplicationClass</CODE>
 is a specialized subclass of <CODE>
GenApplicationClass</CODE>.)</P>
<P>
Because the application object provides important information to the system, it needs to live in its own resource; that way, the system can query the application object by loading only that resource which contains it.</P>
<P>
The next set of fields contains the application object's instance data. Instance data are characteristics of an object, as defined by the object's class. (This should make more sense as you read on.)</P>
<PRE>	 GI_visMoniker = list{ @TutorialTextMoniker };</PRE>
<P>
<A NAME="tutorial.htm_IX_Monikers:simple moniker list in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GI_visMoniker:simple moniker list in Tutorial example">
 </A>
The <CODE>GI_visMoniker</CODE>
 field specifies the object's label or name that appears to the user (not to be confused with <CODE>
TutorialApp</CODE>, the name of the object). 
The &quot;visMoniker&quot; part of the field name is short for &quot;visual moniker.&quot; In GEOS parlance, a &quot;visual moniker&quot; is a text string or graphic used to identify an object to the user. This field is commonly set to a &quot;list&quot; of monikers; the system uses the moniker list to determine which text or graphic to display for your application. </P>
<A NAME="tutorial.htm_IX_GI_comp:in Tutorial example"> </A>
<PRE><A NAME="tutorial.htm_IX_Instance data:Naming conventions"> </A>	 GI_comp = @TutorialPrimary;</PRE>
<P>
The <CODE>
GI_comp</CODE>
 field specifies the children of a generic UI object. In this case, the only child of the <CODE>
TutorialApp</CODE>
 object is the <CODE>
TutorialPrimary</CODE>
 object (which you declare later). (For a detailed description of how objects keep track of their children, see <A HREF="../../Programming/GOCLanguage/GOCLanguage_13">the GEOS Programming chapter</A>.)</P>
<P>
Notice that both instance data field names begin with &quot;GI_.&quot; The &quot;GI_&quot; stands for &quot;Gen Instance.&quot; Because <CODE>
GenApplicationClass</CODE>
 is a subclass of <CODE>
GenClass</CODE>
, it inherits the <CODE>
GI_visMoniker</CODE>
 field from its parent. By Geoworks' naming conventions, instance data field names begin with the initials of their associated class followed by an &quot;I&quot; for &quot;instance.&quot; Thus, any <CODE>
GenApplicationClass</CODE>
 instance field names would begin &quot;GAI_.&quot;</P>
<P>
<A NAME="tutorial.htm_IX_optr:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_object pointer:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_Objects:optr">
 </A>
You may be wondering about the syntax for <CODE>@TutorialPrimary</CODE>.
<CODE>@TutorialPrimary</CODE>
 is actually a reference to the <CODE>
TutorialPrimary</CODE>
 object. Object references have their own GEOS-specified type called an <CODE>
optr</CODE>.</P>

<A NAME="tutorial.htm_IX_gcnList() keyword:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GCN list:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GAGCNLT_WINDOWS:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_General change notification:in Tutorial example"> </A>
<PRE>	gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =@TutorialPrimary; 
}</PRE>
<P>
This line puts the <CODE>
TutorialPrimary</CODE>
 object,which is the primary window of your application, on a General Change Notification (GCN) list so that it will receive notification when a system-level change has occurred. (For more information about GCN lists, see the gcnList entry in <A HREF="../../Programming/GOCLanguage/combo.htm">the GEOS Programming chapter</A>.)</P>
<P>
This completes the declaration of the <CODE>
TutorialApp</CODE>
 object.</P>
<PRE>@visMoniker TutorialTextMoniker = &quot;My Tutorial&quot;;</PRE>
<P>
<A NAME="tutorial.htm_IX_@visMoniker:in Tutorial example[;visMoniker]">
 </A>
This line contains the string to which the <CODE>
TutorialApp</CODE>
's <CODE>
GI_visMoniker</CODE>
 field refers. The <CODE>
@visMoniker</CODE>
 keyword stores the string in a GEOS data structure set up strictly for monikers.</P>
<PRE>@localize &quot;Program Title&quot;;</PRE>
<P>
<A NAME="tutorial.htm_IX_Localization:giving hints to translators">
 </A>
<A NAME="tutorial.htm_IX_Localization:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_@localize:in Tutorial example[;localize]">
 </A>
This <CODE>
@localize </CODE>
statement doesn't actually affect the program; it simply acts as a hint for someone translating the program to a foreign language. The ResEdit program displays the information in <CODE>
@localize</CODE>
 statements when it prompts the translator to translate a moniker or string chunk. In this case, for example, when ResEdit prompts the translator to translate the string, &quot;My Tutorial,&quot; it will display the string &quot;Program Title&quot; to assist with the translation.</P>
<A NAME="tutorial.htm_IX_Resources:@end Goc keyword"> </A>
<A NAME="tutorial.htm_IX_@end:in Tutorial example"> </A>
<PRE>@end AppResource</PRE>
<P>
This line signals the end of the APPRESOURCE declaration.</P>
<PRE>@start Interface; </PRE>
<P>
Here begins the next resource definition. This resource is called INTERFACE and will hold the basic UI gadgetry for your application. </P>
<PRE>@object GenPrimaryClass TutorialPrimary = { </PRE>
<P>
<A NAME="tutorial.htm_IX_GenPrimaryClass:in Tutorial example">
 </A>
The first object to be declared in this resource is <CODE>
TutorialPrimary</CODE>
, your application's primary window and an object of <CODE>
GenPrimaryClass</CODE>
. </P>
<PRE>	GI_comp = @TutorialView, @TutorialCloseTrigger;
}</PRE>
<P>
The first instance data field is <CODE>
GI_comp</CODE>
, which specifies the children of <CODE>
TutorialPrimary</CODE>
.</P>
<PRE>@object GenViewClass TutorialView = {</PRE>
<P>
<A NAME="tutorial.htm_IX_GenViewClass:in Tutorial example">
 </A>
The next object is a <CODE>
GenViewClass</CODE>
 object called <CODE>
TutorialView</CODE>
; this object provides space on the screen for objects to draw themselves. </P>
<A NAME="tutorial.htm_IX_@default:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GVI_vertAttrs:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GVI_horizAttrs:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GVI_content:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GVDA_NO_LARGER_THAN_CONTENT:in Tutorial example"> </A>

<PRE>    GVI_horizAttrs = @default |
        GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default |
        GVDA_NO_LARGER_THAN_CONTENT;
    GVI_content = process;
}</PRE>
<P>
The <CODE>
GVI_content</CODE>
 field specifies the top-level object which will appear in the view's drawing space. The <CODE>
GVI_horizAttrs</CODE>
 and <CODE>
GVI_vertAttrs</CODE>
 fields specify how the view should size itself in relation to the <CODE>
content</CODE>
 object's size. Setting the flag <CODE>GVDA_NO_LARGER_THAN_CONTENT</CODE> ensures that the view will be the same size as its content object.</P>
<P>
Notice that the <CODE>
GVI_...Attrs</CODE>
 fields also use the <CODE>
@default</CODE>
 keyword. <CODE>
@default </CODE>
tells the system to expand to the default values for this field (as defined by <CODE>
GenViewClass</CODE>
); additional flags are ORed in with the single pipe (&quot;|&quot;).</P>

<A NAME="tutorial.htm_IX_GenTriggerClass:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Button:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Close button:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_Menu bar:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_GTI_actionMsg:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_destination:in Tutorial example"> </A>

<PRE>@object GenTriggerClass TutorialCloseTrigger = {
    GI_visMoniker = &quot;Close&quot;;</PRE>
<P>
The last object declared in the INTERFACE resource is <CODE>
TutorialCloseTrigger</CODE>, an object of <CODE>
GenTriggerClass</CODE>. <CODE>
TutorialCloseTrigger</CODE>
 provides the &quot;Close&quot; button for your application.</P>
<PRE>    GTI_destination = @TutorialApp;
    GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;</PRE>
<P>
The <CODE>GTI_destination</CODE>
 and <CODE>GTI_actionMsg</CODE>
 fields are GenTrigger instance data fields. <CODE>GTI_actionMsg</CODE>
 specifies the message that gets sent when the user presses the &quot;Close&quot; button; <CODE>GTI_destination</CODE>
 specifies the object who will handle the message. (We will discuss messages in more detail in the next chapter; suffice it to say that a message is a signal which may be handled by a set of procedural code defined for a class.)</P>
<A NAME="tutorial.htm_IX_Hints:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_HINT_SEEK_MENU_BAR:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_HINT_SEEK_REPLY_BAR:in Tutorial example"> </A>
<A NAME="tutorial.htm_IX_HINT_SEEK_SLOT:in Tutorial example"> </A>

<PRE>    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 3;
}</PRE>
<P>
These hints ensure that the button is placed on the right side of the screen so that it aligns with the buttons on the Nokia 9000i Communicator.</P>

<PRE>@end Interface;</PRE>
<P>
This line signals the end of the INTERFACE resource definition.</P>
<HR>
<A NAME="tutorial.htm_8"></A>


<H3 CLASS="sectionTitle">
3: Exploring With Swat</H3>
<P>
Now that you've successfully compiled your application, you can use Swat to &quot;debug&quot; it. In the Swat window, press <CODE>
Ctrl-C</CODE>
 to halt the emulator and gain control back in the Swat window. Something similar to the following should appear in your Swat window:</P>
<PRE CLASS="SwatDisplay">GEOS Halted
Stopped in DOSIdleHook, address 277eh:1136h
DosIdleHook+17		MOVE	AX, 5760 (1680h)
(geos:0) 5 =&gt;</PRE>
<P>
&quot;GEOS Halted&quot; indicates that Swat has frozen the emulator. The next two lines of Swat output indicate the address of the current internal routine that is executing. If Swat stopped in a public routine, the address would have been given in relation to the routine name and would have been more readable.</P>
<A NAME="tutorial.htm_IX_Threads:switching in Tutorial example"> </A>
<P>
The last line indicates the thread that was executing (on the emulator) when you hit <CODE>
Ctrl-C</CODE>
. In this example, the zeroth thread associated with the GEOS geode (the kernel) was executing. To examine the thread associated with your application, type &quot;tutorial.&quot; (Recall that this is the value you set in the <CODE>
name</CODE>
 field of your <STRONG CLASS="fileName">
TUTORIAL.GP</STRONG>
 file [without the suffix].) This tells Swat which thread to switch to.</P>
<PRE CLASS="SwatDisplay">(geos:0) 5 =&gt; <STRONG>tutorial
</STRONG>[tutorial:0] 6 =&gt; </PRE>
<P>
The prompt indicates that you are now in the process thread of the <CODE>
tutorial </CODE>
geode. If you were in the UI thread, your prompt would read &quot;[tutorial:1].&quot; To change threads within a geode, simply type<A NAME="tutorial.htm_IX_\:0 Swat command:in Tutorial example">
 </A>
 <CODE>
:0</CODE>
 or<A NAME="tutorial.htm_IX_\:1 Swat command:in Tutorial example">
 </A>
 <CODE>
:1</CODE>
. </P>
<P>
<A NAME="tutorial.htm_IX_where Swat command:in Tutorial example">
 </A>
Now try the <CODE>
where</CODE>
 command to find out what this thread was doing when you stopped the system.</P>
<PRE CLASS="SwatDisplay">[tutorial:0] 6 =&gt; <STRONG>where
</STRONG>* 1: near BlockOnLongQueue(), 153dh:c22ah
2:  far QueueGetMessage(), 153dh:133ch
------------------------------------------------------------------------------
The event queue for &quot;tutorial:0&quot; is empty
==============================================================================
[tutorial:0] 7 =&gt;</PRE>
<P>
These lines tells you that the tutorial thread is idling; it's waiting for a message or something to happen. </P>
<P>
<A NAME="tutorial.htm_IX_gentree Swat command:in Tutorial example"> </A>
Next, use the <CODE>
gentree</CODE>
 command to examine your application's generic UI object tree. </P>
<PRE>[tutorial:0] 7 =&gt; <STRONG>gentree *TutorialPrimary</STRONG>
*TutorialPrimary::GenPrimary (@1, ^l5230h:001eh) &quot;My Tutorial&quot;
    *TutorialView::GenViewClass (@2, ^l5230h:0020h)
	^143b0h:002ah(GenValueClass) (@3, ^15230h:002ah)
    *TutorialCloseTrigger(GenTriggerClass) (@4, ^15230h:0024h) &quot;Close&quot;</PRE>
<PRE>[tutorial:0] 8=&gt;</PRE>
<P>
<A NAME="tutorial.htm_IX_@ Swat address shortcut:in Tutorial example">
 </A>
The <CODE>
gentree</CODE>
 command prints out a list of all the objects in the tree, along with their class, object references, and monikers. For an example, let's look at the information for the <CODE>
TutorialView</CODE>
 object:</P>
<UL>
<LI>
<STRONG>
GenViewClass</STRONG>
 is its class;</LI>
<LI>
<STRONG>
@2</STRONG>
 is a shortcut for its object reference; and</LI>
<LI>
<STRONG>
^l5230h:0020h</STRONG>
 is its object reference.</LI>
</UL>
<A NAME="tutorial.htm_IX_pobject Swat command:in Tutorial example"> </A>
<P>
You can refer to an object by a shortcut that Swat provides, namely, the &quot;@number.&quot; To look at an object's instance data, use the Swat command <CODE>
pobj</CODE>
 followed by the &quot;@number&quot; designation for the particular object. Try the <CODE>
pobj</CODE>
 command with the <CODE>
TutorialView</CODE>
 object.</P>
<PRE>[tutorial:0] 8 =&gt; <STRONG>pobj @2
</STRONG>*TutorialView{GenViewClass} (@5, ^l5230h:0020h)
master part: Gen_offset(131) -- ui::GenViewInstance
@6: {ui::GenViewInstance (^h21040:502)+131} = {
    GenInstance GenView_metaInstance = {
        MetaBase Gen_metaInstance = {
            ClassStruct _far *MB_class = 3916h:1816h (rudy::CommonUIClassStructu
res::OLPaneClass)
        }
         LinkPart GI_link = {
            void _optr LP_next = *TutorialCloseTrigger{GenTriggerClass} (@7, ^l5
230h:0024h)
        }
        CompPart GI_comp = {
            void _optr CP_firstChild = ^l5230h:002ah{GenValueClass} (@8, ^l5230h :002ah)
        }
        void _lptr GI_visMoniker = null
        KeyboardShortcut GI_kbdAccelerator = {
            KS_PHYSICAL = 0h
            KS_ALT = 0h
            KS_CTRL = 0h
            KS_SHIFT = 0h
            KS_CHAR_SET = 0h
            KS_CHAR = C_NULL
        }
        GenAttrs GI_attrs = {GA_TARGETABLE}
        GenStates GI_states = {GS_USABLE, GS_ENABLED}
    }
    PointDWFixed GVI_origin = {
        DWFixed PDF_x = {0.000000}
        DWFixed PDF_y = {0.000000}
    }
    RectDWord GVI_docBounds = {
        long RD_left = 0
        long RD_top = 0
        long RD_right = 0
        long RD_bottom = 0
    }
    PointDWord GVI_increment = {
        long PD_x = +20
        long PD_y = +15
    }
    PointWWFixed GVI_scaleFactor = {
        WWFixed PF_x = {1.000000}
        WWFixed PF_y = {1.000000}
    }
    ColorQuad GVI_color = {
        byte CQ_redOrIndex = fh
        ColorFlag CQ_info = CF_INDEX
        byte CQ_green = 0h
        byte CQ_blue = 0h
    }
    GenViewAttrs GVI_attrs = {GVA_NO_WIN_FRAME, GVA_FOCUSABLE}
    GenViewDimensionAttrs GVI_horizAttrs = {GVDA_DONT_DISPLAY_SCROLLBAR, GVDA_NO_LARGER_THAN_CONTENT}
    GenViewDimensionAttrs GVI_vertAttrs = {GVDA_NO_LARGER_THAN_CONTENT}
    GenViewInkType GVI_inkType = GVIT_PRESSES_ARE_NOT_INK
    void _optr GVI_content = tuto1:0{TutorialProcessClass}(0000h) (@9, ^l56c0h:0
000h)
    void _optr GVI_horizLink = null
    void _optr GVI_vertLink = null
}
Variable Data:
         *** No Variable Data ***
[tutorial:0] 9 =&gt;</PRE>
<P>
We certainly got a lot of data from that command! </P>
<PRE>*TutorialView{GenViewClass} (@5, ^l5230h:0020h)</PRE>
<P>
The first line gives the object's class, shortcut and pointer information, similar to the output from <CODE>gentree</CODE>. 
The rest of the output consists of the object's instance data. For example:</P>
<PRE>GenViewDimensionAttrs GVI_horizAttrs = { GVDA_DONT_DISPLAY_SCROLLBAR,
GVDA_NO_LARGER_THAN_CONTENT}</PRE>
<P>
These lines show which flags (of type <CODE>GenViewDimensionAttrs</CODE>) 
are set for the object's <CODE>
GVI_horizAttrs</CODE>
 instance data field. Notice that Swat displays both the flag set in your source code, <CODE>GVDA_NO_LARGER_THAN_CONTENT</CODE>, as well as the default flag set by the system, <CODE>GVDA_DONT_DISPLAY_SCROLLBAR</CODE>. </P>
<P>
You may recognize some of the instance data fields from your source code. Other fields you may not recognize because you didn't specify values for these fields, allowing the system to use default values instead.</P>
<P>
With <CODE>
pobj</CODE>
, you took advantage of another Swat feature: command completion. 
There is no &quot;<CODE>pobj</CODE>&quot; 
Swat command; the command's name is really 
&quot;<CODE>pobject</CODE>.&quot; Because 
&quot;<CODE>pobject</CODE>&quot; was the only 
Swat command that begins with p-o-b-j, Swat realized what you meant when you used 
&quot;<CODE>pobj</CODE>.&quot;</P>
<P>
<A NAME="tutorial.htm_IX_VI_bounds:Viewing with vistree in Swat">
 </A>
<A NAME="tutorial.htm_IX_classes Swat command:in Tutorial example">
 </A>
<A NAME="tutorial.htm_IX_Classes:debugging in Tutorial example">
 </A>
Next let's try a series of exploratory Swat commands:</P>
<PRE>[tutorial:0] 9 =&gt; <STRONG>classes</STRONG>
TutorialProcessClass (@10, 42b8h:0040h), off ui::UserClassStructures::GenProcessClass
[tutorial:0] 10 =&gt;</PRE>
<P>
<A NAME="tutorial.htm_IX_cup Swat command:in Tutorial example">
 </A>
The <CODE>
classes</CODE>
 command lists all classes created by the application. To view the class hierarchy for a particular class, use the <CODE>
cup</CODE>
 (&quot;class up&quot;) command.</P>
<PRE>[tutorial:0] 10 =&gt; <STRONG>cup @10</STRONG>
dgroup::TutorialProcessClass (@11, 42b8h:0040h)
ui::UserClassStructures::GenProcessClass (@12, 30c4h:11e6h)
geos::kcode::ProcessClass (@13, 153dh:a9d5h)
geos::kcode::MetaClass (@14, 153dh:a8edh)
[tutorial:0] 11 =&gt;</PRE>
<P>
As shown above, you can use the shortcut reference (the &quot;@number&quot;) with the <CODE>
cup</CODE>
 command or you can use the class name or reference address, <EM>
e.g.</EM>, <CODE>
cup TutorialProcessClass</CODE>
 or <CODE>
cup 42b8h:0040h</CODE>.</P>
<P>
Some other Swat commands you might want to try out:</P>
<DL>
<DT>
<STRONG>
help</STRONG>
</DT><DD>The <CODE>
help</CODE>
 command provides documentation on Swat commands. Try <CODE>
help stop</CODE>
.</DD>
<DT>
<STRONG>
apropos</STRONG>
</DT><DD>The <CODE>
apropos </CODE>
command allows you to search the Swat documentation by keyword. Try <CODE>
apropos instance</CODE>
.</DD>
<DT>
<STRONG>
heapspace</STRONG>
<A NAME="tutorial.htm_IX_heapspace Swat command:in Tutorial example">
 </A>
</DT><DD>The <CODE>
heapspace</CODE>
 command tells you the amount of memory your application requires; you may recall that this value goes in your <STRONG CLASS="fileName">
.</STRONG>
GP file on the <CODE>
heapspace</CODE>
 line. Because this value should reflect a worse-case scenario, it's important to run this command several times towards the end of development so that the figure is accurate.</DD>
<DT>
<STRONG>
handles tutorial</STRONG></DT><DD>
<A NAME="tutorial.htm_IX_handles Swat command:in Tutorial example"> </A>
The <CODE>
handles</CODE>
 command scans the entire memory heap and returns information about all handles used by the application.</DD>
</DL>
<P>
In <A HREF="#addcode_swat.htm">the next chapter</A>, you'll begin by editing the source code, so prepare to switch over to your editor window.</P>
<HR>


<A NAME="tutorial_source.htm"></A>


<H2 CLASS="sectionTitle">
<A NAME="tutorial_source.htm_84644">
 </A>
Tutorial Source Code</H2>
<P>Here is the source code for the application discussed in this chapter. The 
source code is in two files:</P>
<UL>
<LI><A HREF="#gp">TUTORIAL.GP, the Glue Parameters file</A>
<LI><A HREF="#goc">TUTORIAL.GOC, the Goc code</A>
</UL>
<A NAME="tutorial_source.htm_gp"> </A>
<H3>TUTORIAL.GP</H3>
<A NAME="tutorial_source.htm_IX_name .gp file keyword:in Tutorial example"></A>
<PRE># Permanent name: This is required by Glue to set the permanent name
# and extension of the geode. The permanent name of a library is what
# goes in the imported library table of a client geode (along with the
# protocol number). It is also what Swat uses to name the patient.
#
name     tutorial.app</PRE>
<A NAME="tutorial_source.htm_IX_longname .gp file keyword:in Tutorial example"></A>
<PRE># Long filename: this name can displayed by the system. &quot;EC &quot; is
# prepended to this when the error-checking version is linked by Glue.
#
longname &quot;Tutorial Sample Application&quot;</PRE>
<A NAME="tutorial_source.htm_IX_token .gp file keyword:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_tokenchars .gp file keyword:in Tutorial example"></A>
<PRE># Token: The four-letter name is used by the system to locate the
# icon for this application in the token database. The tokenid
# number corresponds to the manufacturer ID of the program's author
# for uniqueness of the token. Since this is a sample application, we
# use the manufacturer ID for the SDK, which is 8.
#
tokenchars &quot;TUTO&quot;
tokenid    8</PRE>
<A NAME="tutorial_source.htm_IX_type .gp file keyword:in Tutorial example"></A>
<PRE># Specify geode type: This geode is an application, and will have
# its own process (thread).
#
type   appl, process, single</PRE>
<A NAME="tutorial_source.htm_IX_class .gp file keyword:in Tutorial example"></A>
<PRE># Specify class name for application thread. Messages sent to the
# application thread (a.k.a. &quot;process&quot; when specified as the output
# of a UI object) will be handled by this process class.
#
class  TutorialProcessClass</PRE>
<A NAME="tutorial_source.htm_IX_appobj .gp file keyword:in Tutorial example"></A>
<PRE># Specify application object. This is the object that serves as
# the top-level UI object in the application.
#
appobj TutorialApp</PRE>
<A NAME="tutorial_source.htm_IX_platform .gp file keyword:in Tutorial example"></A>
<PRE># Specify for which platform this application will be compiled.
# Glue uses this to make sure that the libraries we are using
# (listed below) are available for this platform.
# In this case, the specified platform is the Nokia 9000i Communicator
#
platform n9000v20</PRE>
<A NAME="tutorial_source.htm_IX_heapspace .gp file keyword:in Tutorial example"></A>
<PRE># Heapspace: This is roughly the non-discardable memory usage
# (in paragraphs (16 bytes/paragraph)) of the application and any
# transient libraries that it depends on, plus an additional
# amount for thread activity. To find the heapspace for an
# application, use the Swat &quot;heapspace&quot; command.
#
heapspace 3K</PRE>
<A NAME="tutorial_source.htm_IX_library .gp file keyword:in Tutorial example"></A>
<PRE># Libraries: list which libraries are used by the application.
# The foam library is for the Nokia 9000i Communicator only.
#
library geos
library ui
library foam</PRE>
<A NAME="tutorial_source.htm_IX_resource .gp file keyword:in Tutorial example"></A>
<PRE># Resources: list all resource blocks which are used by the
# application whose allocation flags can't be inferred by Glue.
# Usually this is needed only for object blocks, fixed code
# resources, or data resources that are read-only. Standard
# discardable code resources do not need to be mentioned.
#
resource APPRESOURCE ui-object
resource INTERFACE   ui-object</PRE>

<A NAME="tutorial_source.htm_goc"> </A>
<H3>TUTORIAL.GOC</H3>
<PRE>/********************************************************************
 *		Include Files
 *******************************************************************/
<A NAME="tutorial_source.htm_IX_@include:in Tutorial example[;include:in Tutorial example]"></A>
@include &lt;stdapp.goh&gt;
@include &lt;foam.goh&gt;</PRE>
<PRE>/********************************************************************
 *		Class Definitions
 *******************************************************************/
	/*
	 * Here we define &quot;TutorialProcessClass&quot; as a subclass of the
	 * system provided &quot;GenProcessClass&quot;. As this application is
	 * launched, an instance of this class will be created, and
	 * will handle all application-related events (messages). The
	 * application thread will be responsible for running this
	 * object, meaning that whenever this object handles a message,
	 * we will be executing in the application thread.
	 *
	 * You will find no object in this file declared to be of this
	 * class. Instead, it is specified as the class for the
	 * application thread in &quot;tutorial.gp&quot;.
	 */
<A NAME="tutorial_source.htm_IX_@class:in Tutorial example[;class:in Tutorial example]"></A>
<A NAME="tutorial_source.htm_IX_GenProcessClass:subclassing in Tutorial example"></A>
@class TutorialProcessClass, GenProcessClass;</PRE>
<PRE>	/*
	 * Define messages for this class here. Most commonly, UI
	 * objects will send these messages to the application thread
	 * when they've been activated by the user.
	 */
<A NAME="tutorial_source.htm_IX_@endc:in Tutorial example[;endc:in Tutorial example]"></A>
@endc; /* end of class definition */</PRE>
<PRE>/********************************************************************
 *		Class Declarations
 *******************************************************************/
	/*
	 * Each object class requires a &quot;class record&quot; be stored in
	 * fixed memory for it. The class record is used by the GEOS
	 * message system for the delivery of messages sent to an
	 * object of the class. The class record needs to be defined
	 * in the file where the objects of that class are defined.
	 * The @classdecl GOC directive tells GOC to create the class
	 * record here.
	 *
	 * The neverSaved flag is necessary because ProcessClass
	 * objects are hybrid objects. It tells the system that no
	 * object of this class will ever be loaded from or stored to
	 * a state file.
	 */
<A NAME="tutorial_source.htm_IX_@classdecl:in Tutorial example[;classdecl:in Tutorial example]"></A>
@classdecl TutorialProcessClass, neverSaved;</PRE>
<PRE>/********************************************************************
 *		UI Object Resources
 *******************************************************************/</PRE>
<PRE>/********************************************************************
 *		AppResource Resource
 *******************************************************************/
<A NAME="tutorial_source.htm_IX_@start:in Tutorial example[;start:in Tutorial example]"></A>
@start AppResource;</PRE>
<PRE>/*
	*    Application Object
	*
	* The very top-level generic object of an application MUST be
	* a GenApplication object. The tutorial.gp file contains the &quot;appobj&quot;
	* statement which indicates that this &quot;TutorialApp&quot; object is in
	* fact the top-level UI object.
	*
	* This object should be in its own resource, as it is all that
	* need be in memory when the application is iconified. As such,
	* its resource should be as small as possible.
	*
	* FoamSubApplicationClass is for the Nokia 9000i Communicator
	* only. It adds special behavior for that platform.
	*/
<A NAME="tutorial_source.htm_IX_@object:in Tutorial example[;object:in Tutorial example]"></A>
<A NAME="tutorial_source.htm_IX_FoamSubApplicationClass:in Tutorial example"></A>
@object FoamSubApplicationClass TutorialApp = {
<A NAME="tutorial_source.htm_IX_GI_visMoniker:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_Monikers:in Tutorial example"></A>
		/*
		 * While the application object isn't shown on the screen,
		 * it has a list of VisMonikers for three purposes:
		 *   1) The GenPrimary (see below) inherits the moniker
		 *      when it comes up on screen.
		 *   2) When GeoManager needs to display an icon for the
		 *      application, and there's none for it in the Token
		 *      Database, it launches the app and sends a message
		 *      to the application object to install its list of
		 *      monikers in the token database under the
		 *      application's token.
		 *   3) When the GenPrimary is minimized, it uses the most
		 *      appropriate graphical moniker from this list for the
		 *      application's icon. If there's an abbreviated-text
		 *      moniker in the list, that's used as the icon title.
		 *      Else any regular-text moniker is used.
		 */
	GI_visMoniker = list { @TutorialTextMoniker };</PRE>
<A NAME="tutorial_source.htm_IX_GI_comp:in Tutorial example"></A>
<PRE>		/*
		 * The GenApplication object has at least one child:
		 * the main application window.
		 */
	GI_comp = @TutorialPrimary;</PRE>
<A NAME="tutorial_source.htm_IX_gcnList() keyword:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_GAGCNLT_WINDOWS:in Tutorial example"></A>
<PRE>		/*
		 * The main window should appear on-screen when the application
		 * is launched, so place it on the GAGCNLT_WINDOWS GCN list.
		 * This causes the application object to bring it on-screen at
		 * the appropriate time.
		 */
	gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TutorialPrimary;
}</PRE>
<A NAME="tutorial_source.htm_IX_@visMoniker:in Tutorial example[;visMoniker:in Tutorial]"></A>
<A NAME="tutorial_source.htm_IX_@localize:in Tutorial example[;localize:in Tutorial example]"></A>
<PRE>@visMoniker TutorialTextMoniker = &quot;My Tutorial&quot;;
@localize &quot;Program Title&quot;;</PRE>
<A NAME="tutorial_source.htm_IX_@end:in Tutorial example[;end:in Tutorial example]"></A>
<PRE>@end AppResource;</PRE>
<PRE>/********************************************************************
 *		Interface Resource
 * This resource is for miscellaneous UI objects.
 *******************************************************************/
@start Interface;</PRE>
<PRE>	/*
	 *    Primary window
	 *
	 * Every application has at least one GenPrimary object.
	 * This object serves as the main window of the application.
	 * Inside this window, various UI components, such as menus
	 * or lists, can be placed.
	 */
<A NAME="tutorial_source.htm_IX_GenPrimaryClass:in Tutorial example"></A>
@object GenPrimaryClass TutorialPrimary  = {
		/*
		 * This window has two children:
		 * the GenView object and the Close button (see below).
		 */
	GI_comp = @TutorialView, @TutorialCloseTrigger;
}</PRE>
<A NAME="tutorial_source.htm_IX_GenViewClass:in Tutorial example"></A>
<PRE>	/*
	 *    GenView object
	 *
	 * This GenView object creates a window where the application can
	 * display portions of the document as necessary. As we want this
	 * window to be scrollable, the specific UI will create scroll
	 * bars with which the user can interact. Whenever a portion of
	 * the window needs to be redrawn, the GenView object will
	 * invalidate a portion of the window, causing a MSG_META_EXPOSED
	 * to be sent to the application. The application will draw the
	 * document into the window as requested. The window keeps track
	 * of a mask, which is used to clip the application's drawing
	 * operations, so that only the invalid portion of the window is
	 * drawn to.
	 */
@object GenViewClass TutorialView = {
<A NAME="tutorial_source.htm_IX_GVI_horizAttrs:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_GVI_vertAttrs:in Tutorial example"></A>
		/*
		 * Make sure the view never gets larger
		 * than the thing being displayed within it.
		 */
	GVI_horizAttrs = @default | GVDA_NO_LARGER_THAN_CONTENT;
	GVI_vertAttrs = @default | GVDA_NO_LARGER_THAN_CONTENT;

<A NAME="tutorial_source.htm_IX_GVI_content:in Tutorial example"></A>
		/*
		 * When the contents of this view (i.e. the document) must be
		 * updated, the UI should send a MSG_META_EXPOSED to the
		 * TutorialProcessClass object.
		 */
	GVI_content = process;
};</PRE>
<A NAME="tutorial_source.htm_IX_GenTriggerClass:in Tutorial example"></A>
<PRE>	/*
	 *    Close trigger
	 *
	 * On certain systems we should provide a way to exit the
	 * application. On the Nokia 9000i Communicator we have a
	 * close trigger like this one.
	 */
@object GenTriggerClass TutorialCloseTrigger = {
	GI_visMoniker = &quot;Close&quot;;

<A NAME="tutorial_source.htm_IX_GTI_destination:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_GTI_actionMsg:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_MSG_FSA_RETURN_TO_LAUNCHER:in Tutorial example"></A>
		/*
		 * The next two instance fields are part of the
		 * GenTriggerClass. They specify the recipient object
		 * and the message that will be sent to that object
		 * when this trigger is activated.
		 */
	GTI_destination = @TutorialApp;
	GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;

<A NAME="tutorial_source.htm_IX_HINT_SEEK_MENU_BAR:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_HINT_SEEK_REPLY_BAR:in Tutorial example"></A>
<A NAME="tutorial_source.htm_IX_HINT_SEEK_SLOT:in Tutorial example"></A>
		/*
		 * The specific UI uses this combination of hints
		 * to place this trigger on the right side of the
		 * Nokia 9000i Communicator's screen.
		 */
	HINT_SEEK_MENU_BAR;
	HINT_SEEK_REPLY_BAR;
	HINT_SEEK_SLOT = 3;
}</PRE>
<PRE>@end Interface;</PRE>

<HR>
<A NAME="addcode_swat.htm"></A>

<A NAME="addcode_swat.htm_BM97933"></A>
<H1 CLASS="chapterTitle"> Adding Code and Debugging with Swat</H1>
<A NAME="addcode_source.htm"></A>


<H2 CLASS="sectionTitle">
<A NAME="addcode_source.htm_13885">
 </A>
Tutorial Source Code With Changes</H2>
<P>Here is the source code for the application discussed in this chapter.
Pieces of the code which have been added or changed from 
that in the previous chapter are called out in <B>bold</B>.</P>
<UL>
<LI><A HREF="#gp">TUTORIAL.GP</A>
<LI><A HREF="#goc">TUTORIAL.GOC</A>
</UL>

<A NAME="addcode_source.htm_gp"> </A>
<H3>TUTORIAL.GP</H3>
<PRE># Permanent name: This is required by Glue to set the permanent name
# and extension of the geode. The permanent name of a library is what
# goes in the imported library table of a client geode (along with the
# protocol number). It is also what Swat uses to name the patient.
#
name     tutorial.app</PRE>
<PRE># Long filename: this name can displayed by the system. &quot;EC &quot; is
# prepended to this when the error-checking version is linked by Glue.
#
longname &quot;Tutorial Sample Application&quot;</PRE>
<PRE># Token: The four-letter name is used by the system to locate the
# icon for this application in the token database. The tokenid
# number corresponds to the manufacturer ID of the program's author
# for uniqueness of the token. Since this is a sample application, we
# use the manufacturer ID for the SDK, which is 8.
#
tokenchars &quot;TUTO&quot;
tokenid    8</PRE>
<PRE># Specify geode type: This geode is an application, and will have
# its own process (thread).
#
type   appl, process, single</PRE>
<PRE># Specify class name for application thread. Messages sent to the
# application thread (a.k.a. &quot;process&quot; when specified as the output
# of a UI object) will be handled by this process class.
#
class  TutorialProcessClass</PRE>
<PRE># Specify application object. This is the object that serves as
# the top-level UI object in the application.
#
appobj TutorialApp</PRE>
<PRE># Specify for which platform this application will be compiled.
# Glue uses this to make sure that the libraries we are using
# (listed below) are available for this platform.
# In this case, the specified platform is the Nokia 9000i Communicator
#
platform n9000v20</PRE>
<PRE># Heapspace: This is roughly the non-discardable memory usage
# (in paragraphs (16 bytes/paragraph)) of the application and any
# transient libraries that it depends on, plus an additional
# amount for thread activity. To find the heapspace for an
# application, use the Swat &quot;heapspace&quot; command.
#
heapspace 3K</PRE>
<PRE># Libraries: list which libraries are used by the application.
# The foam library is for the Nokia 9000i Communicator only.
#
library geos
library ui
library foam</PRE>
<PRE># Resources: list all resource blocks which are used by the
# application whose allocation flags can't be inferred by Glue.
# Usually this is needed only for object blocks, fixed code
# resources, or data resources that are read-only. Standard
# discardable code resources do not need to be mentioned.
#
resource APPRESOURCE ui-object
resource INTERFACE   ui-object</PRE>
<A NAME="addcode_source.htm_IX_export .gp file keyword:in Tutorial example"></A>
<PRE><B>#
# Any classes that we define in our application must be exported
# here for glue to process them.
#
export TutorialViewClass</B></PRE>

<A NAME="addcode_source.htm_goc"> </A>
<H3>TUTORIAL.GOC</H3>
<PRE>/********************************************************************
 *		Include Files
 *******************************************************************/
    @include &lt;stdapp.goh&gt;
    @include &lt;foam.goh&gt;</PRE>
<A NAME="addcode_source.htm_IX_Constants:in Tutorial example"></A>
<PRE><B>/********************************************************************
 *		Constants
 *******************************************************************/
      /*
       * These constants are used in the TutorialDraw function.
       */
    #define TEXT_POINT_SIZE  48.0 /* point size */
    #define TEXT_ROTATION   -15   /* angle of rotation (degrees) */
    #define TEXT_X_POSITION  30   /* x position, in document coords */
    #define TEXT_Y_POSITION   0   /* y position, in document coords */</B></PRE>
<PRE>/********************************************************************
 *		Class Definitions
 *******************************************************************/
      /*
       * Here we define &quot;TutorialProcessClass&quot; as a subclass of the
       * system provided &quot;GenProcessClass&quot;. As this application is
       * launched, an instance of this class will be created, and
       * will handle all application-related events (messages). The
       * application thread will be responsible for running this
       * object, meaning that whenever this object handles a message,
       * we will be executing in the application thread.
       *
       * You will find no object in this file declared to be of this
       * class. Instead, it is specified as the class for the
       * application thread in &quot;tutorial.gp&quot;.
       */
    @class TutorialProcessClass, GenProcessClass;
      /*
       * Define messages for this class here. Most commonly, UI
       * objects will send these messages to the application thread
       * when they've been activated by the user.
       */
    @endc; /* end of class definition */

<B>      /*
       * We subclass GenViewClass here because we need to
       * intercept a message for our GenView object.
       */
    @class TutorialViewClass, GenViewClass;
    @endc; /* end of class definition */</B></PRE>
<PRE>/********************************************************************
 *		Class Declarations
 *******************************************************************/
      /*
       * Each object class requires a &quot;class record&quot; be stored in
       * fixed memory for it. The class record is used by the GEOS
       * message system for the delivery of messages sent to an
       * object of the class. The class record needs to be defined
       * in the file where the objects of that class are defined.
       * The @classdecl GOC directive tells GOC to create the class
       * record here.
       *
       * The neverSaved flag is necessary because ProcessClass
       * objects are hybrid objects. It tells the system that no
       * object of this class will ever be loaded from or stored to
       * a state file.
       */
    @classdecl TutorialProcessClass, neverSaved;
<B>    @classdecl TutorialViewClass;</B></PRE>
<PRE>/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

  /*
   *    Application Object
   *
   * The very top-level generic object of an application MUST be
   * a GenApplication object. The tutorial.gp file contains the &quot;appobj&quot;
   * statement which indicates that this &quot;TutorialApp&quot; object is in
   * fact the top-level UI object.
   *
   * This object should be in its own resource, as it is all that
   * need be in memory when the application is iconified. As such,
   * its resource should be as small as possible.
   *
   * FoamSubApplicationClass is for the Nokia 9000i Communicator
   * only. It adds special behavior for that platform.
   */
@object FoamSubApplicationClass TutorialApp = {
      /*
       * While the application object isn't shown on the screen,
       * it has a list of VisMonikers for three purposes:
       *   1) The GenPrimary (see below) inherits the moniker
       *      when it comes up on screen.
       *   2) When GeoManager needs to display an icon for the
       *      application, and there's none for it in the Token
       *      Database, it launches the app and sends a message
       *      to the application object to install its list of
       *      monikers in the token database under the
       *      application's token.
       *   3) When the GenPrimary is minimized, it uses the most
       *      appropriate graphical moniker from this list for the
       *      application's icon. If there's an abbreviated-text
       *      moniker in the list, that's used as the icon title.
       *      Else any regular-text moniker is used.
       */
    GI_visMoniker = list { @TutorialTextMoniker };

      /*
       * The GenApplication object has at least one child:
       * the main application window.
       */
    GI_comp = @TutorialPrimary;

      /*
       * The main window should appear on-screen when the application
       * is launched, so place it on the GAGCNLT_WINDOWS GCN list.
       * This causes the application object to bring it on-screen at
       * the appropriate time.
       */
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TutorialPrimary;
}

@visMoniker TutorialTextMoniker = &quot;C Tutorial&quot;;
@localize &quot;Program Title&quot;;

@end AppResource;</PRE>
<PRE>/********************************************************************
 *		Interface Resource
 * This resource is for miscellaneous UI objects.
 *******************************************************************/
@start Interface;

  /*
   *    Primary window
   *
   * Every application has at least one GenPrimary object.
   * This object serves as the main window of the application.
   * Inside this window, various UI components, such as menus
   * or lists, can be placed.
   */
@object GenPrimaryClass TutorialPrimary  = {
		/*
		 * This window has two children:
		 * the GenView object and the Close button (see below).
		 */
	GI_comp = @TutorialView, @TutorialCloseTrigger;
}

  /*
   *    GenView object
   *
   * This GenView object creates a window where the application can
   * display portions of the document as necessary. As we want this
   * window to be scrollable, the specific UI will create scroll
   * bars with which the user can interact. Whenever a portion of
   * the window needs to be redrawn, the GenView object will
   * invalidate a portion of the window, causing a MSG_META_EXPOSED
   * to be sent to the application. The application will draw the
   * document into the window as requested. The window keeps track
   * of a mask, which is used to clip the application's drawing
   * operations, so that only the invalid portion of the window is
   * drawn to.
   */
@object TutorialViewClass TutorialView = {
      /*
       * Make view scrollable in X and Y and ensure that it never
       * gets larger than the thing being displayed within it.
       */
<B>    GVI_horizAttrs = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;</B>

      /*
       * When the contents of this view (i.e. the document) must be
       * updated, the UI should send a MSG_META_EXPOSED to the
       * TutorialProcessClass object.
       */
    GVI_content = process;

<B>      /*
       * Specify the dimensions of the document being displayed
       * within the view.
       */
<A NAME="addcode_source.htm_IX_GIV_docBounds:in Tutorial example"></A>
    GVI_docBounds = {
        0,
        0,
        1000,
        1000
    };</B>
}</PRE>
<PRE>	/*
	 *    Close trigger
	 *
	 * On certain systems we should provide a way to exit the
	 * application. On the Nokia 9000i Communicator we have a
	 * close trigger like this one.
	 */
@object GenTriggerClass TutorialCloseTrigger = {
	GI_visMoniker = &quot;Close&quot;;

		/*
		 * The next two instance fields are part of the
		 * GenTriggerClass. They specify the recipient object
		 * and the message that will be sent to that object
		 * when this trigger is activated.
		 */
	GTI_destination = @TutorialApp;
	GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;

		/*
		 * The specific UI uses this combination of hints
		 * to place this trigger on the right side of the
		 * Nokia 9000i Communicator's screen.
		 */
	HINT_SEEK_MENU_BAR;
	HINT_SEEK_REPLY_BAR;
	HINT_SEEK_SLOT = 3;
}</PRE>
<PRE>@end Interface;</PRE>

<B>
<PRE>/********************************************************************
 *		Function Definitions
 *******************************************************************/

/********************************************************************
 *              TutorialDraw
 ********************************************************************
 * SYNOPSIS:	 Redraws the entire document, given a graphics state
 *		 through which to draw.
 * CALLED BY:	 (INTERNAL) TutorialProcess::MSG_META_EXPOSED
 * RETURNS:      void
 * SIDE EFFECTS: Various aspects of the gstate are altered.
 * STRATEGY:     First set the font used by this gstate. Then
 *               set the text color. Using the constant angle lets
 *               rotate the gstate. To finish up, draw the text
 *               text to the gstate.
 *******************************************************************/
void
<A NAME="addcode_source.htm_IX_GStateHandle:in Tutorial example"></A>
<A NAME="addcode_source.htm_IX_GStates:in Tutorial example"></A>
TutorialDraw( GStateHandle gstate )
  /*
   * gstate - GState to draw to.
   */
{

<A NAME="addcode_source.htm_IX_GrSetFont():in Tutorial example"></A>
<A NAME="addcode_source.htm_IX_Fonts:in Tutorial example"></A>
<A NAME="addcode_source.htm_IX_MakeWWFixed() macro:in Tutorial example"></A>
      /*
       * First change some of the default GState values,
       * such as font and point size.
       */
    GrSetFont( gstate, FID_DTC_URW_SANS, MakeWWFixed( TEXT_POINT_SIZE ) );

<A NAME="addcode_source.htm_IX_GrApplyRotation():in Tutorial example"></A>
      /*
       * Apply a rotation to the transformation matrix,
       * so the text will be drawn at an angle.
       */
    GrApplyRotation( gstate, MakeWWFixed( TEXT_ROTATION ) );

<A NAME="addcode_source.htm_IX_GrDrawText():in Tutorial example"></A>
      /*
       * Draw some text onto the document.
       */
    GrDrawText( gstate, TEXT_X_POSITION, TEXT_Y_POSITION,
                &quot;The quick brown fox jumps over the lazy dog.&quot;,
                0 );
} /* TutorialDraw */</PRE>
<PRE>/********************************************************************
 *		Code for TutorialProcessClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_EXPOSED
 ********************************************************************
 * SYNOPSIS:	 Redraw the recently-exposed portion of the View.
 *               See the Objects Reference book for more information
 *               on this message and its parameters.
 * PARAMETERS:	 WindowHandle win
 * RETURNS:      void
 * SIDE EFFECTS: The invalid region of the window is cleared out.
 * STRATEGY:	 This message is sent by the windowing system when a
 *	    	 portion of the GenView has become invalid, either
 *	    	 because a window that was obscuring it has been moved,
 *	    	 or because someone called GrInvalRect. We redraw the
 *               entire document, after telling the graphics system
 *               we're drawing to the invalid portion of the window.
 *
 *******************************************************************/
<A NAME="addcode_source.htm_IX_@method:in Tutorial example[;method:in Tutorial example]"></A>
<A NAME="addcode_source.htm_IX_MSG_META_EXPOSED:in Tutorial example"></A>
@method TutorialProcessClass, MSG_META_EXPOSED
{
      /*
       * gstate - This is a handle to the graphics state
       *          that we'll use to draw to the view.
       */
    GStateHandle gstate;

<A NAME="addcode_source.htm_IX_GrCreateState():in Tutorial example"></A>
      /*
       * Get a default graphics state that we can use while drawing.
       */
    gstate = GrCreateState( win );

<A NAME="addcode_source.htm_IX_GrBeginUpdate():in Tutorial example"></A>
      /*
       * Start a window update. This tells the windowing system
       * that we are in the process of drawing to the invalid portion
       * of this window. GrBeginUpdate/GrEndUpdate are necessary only
       * when handling MSG_META_EXPOSED. For drawing at other times,
       * all you need do is create a graphics state and draw through it.
       */
    GrBeginUpdate( gstate );

      /*
       * Draw the pattern into the window (pass the GState). Breaking
       * the exposure and general drawing into two routines allows the
       * display to be updated by other routines without having to
       * invalidate the window.
       */
    TutorialDraw( gstate );

<A NAME="addcode_source.htm_IX_GrEndUpdate():in Tutorial example"></A>
<A NAME="addcode_source.htm_IX_GrDestroyState():in Tutorial example"></A>
      /*
       * Now indicate that we are done drawing to the invalid area
       * and free the gstate.
       */
    GrEndUpdate( gstate );
    GrDestroyState( gstate );
} /* MSG_META_EXPOSED */

/* This is here to work around a bug in the Borland C 5.0 compiler. */
@method TutorialProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{

    return( @callsuper() );
}</PRE>
<PRE>/********************************************************************
 *		Code for TutorialViewClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_KBD_CHAR
 ********************************************************************
 * SYNOPSIS:     We intercept this message to add the scrolling
 *               behavior to the GenView. Normally this would work
 *               in GEOS but the Nokia 9000i Communicator has the
 *               scrolling disabled in GenViewClass.
 * PARAMETERS:   word character
 *               word flags
 *               word state
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     We first check the parameters to see if this
 *               keypress is one we are interested in. It has to be
 *               a &quot;control&quot; key, and must not be a key release
 *               (i.e. the user released the key after holding it).
 *               If both of these conditions are true we can then
 *               use a switch statement to see which key is being
 *               pressed and send the appropriate message to the
 *               GenView object.
 *******************************************************************/
<A NAME="addcode_source.htm_IX_MSG_META_KBD_CHAR:in Tutorial example"></A>
<A NAME="addcode_source.htm_IX_GenViewClass:subclassed in Tutorial example"></A>
@method TutorialViewClass, MSG_META_KBD_CHAR
{
      /*
       * theChar - A copy of the character with only the
       *           low byte. The high byte of character
       *           has some extra flags we don't need here.
       */
    byte        theChar;

      /*
       * Arrow keys and scroll buttons are control characters.
       * We handle first press and repeat presses of those keys.
       */
    if ( ( ( character &gt;&gt; 8 ) == CS_CONTROL ) &amp;&amp;
         ( flags &amp; ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) ) ) {
        theChar = character &amp; 0xFF;

        switch ( theChar ) {

        case VC_PREVIOUS:
              /* This handles the Page Up key. */
            @send self::MSG_GEN_VIEW_SCROLL_PAGE_UP();
            break;

        case VC_UP:
              /* This handles the up arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_UP();
            break;

        case VC_NEXT:
              /* This handles the down arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_PAGE_DOWN();
            break;

        case VC_DOWN:
              /* This handles the up arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_DOWN();
            break;

        case VC_RIGHT:
              /* This handles the right arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_RIGHT();
            break;

        case VC_LEFT:
              /* This handles the left arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_LEFT();
            break;

        default:
<A NAME="addcode_source.htm_IX_@callsuper:in Tutorial example"></A>
              /*
               * Pass on other control chars to default handler.
               */
            @callsuper();
        } /* switch */
    } else {
          /*
           * Pass on all other chars to default handler.
           */
        @callsuper();
    }
} /* MSG_META_KBD_CHAR */</PRE>
</B>
<HR>
This document is a single-page version of a <A HREF="index.htm">a multi-page document</A>, suitable for easy printing.
</BODY>
</HTML>
