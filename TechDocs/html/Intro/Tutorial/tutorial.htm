<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: tutorial.htm,v 1.7 97/12/09 15:16:23 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Tutorial Part 2: A New Application</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">

<H1 CLASS="chapterTitle">

<A NAME="97933"></A>
Tutorial Part 2: A New Application

</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child -->| <A HREF="tutorial_source.htm"><IMG SRC="../../docImages/down.gif" ALT="Up" BORDER="0"></A>
<!-- to previous --> | <A HREF="startgeos.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Tutorial Part 1: Compiling</A>
<!-- to next --> | <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">Tutorial Part 3: Adding Procedural Code</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->


<P>
In this tutorial, you will create a simple GEOS application that draws text and demonstrates the basic components of a GEOS application. You'll learn how to compile and link the application and explore its source code using the Swat debugger.</P>
<P CLASS="sectionLinks">
<STRONG CLASS="sectionLinks">
&nbsp;&nbsp;<A HREF="#1">1 Creating &quot;Tutorial&quot;</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#2">1.1 Setting Up Your Working Directory</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#3">1.2 Compiling Your Source Code</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#4">1.3 Starting the Emulator and Swat</A><BR>
&nbsp;&nbsp;<A HREF="#5">2 Learning GOC</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#6">2.1 TUTORIAL.GP: Geode Parameters File</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#7">2.2 TUTORIAL.GOC: Source Code</A><BR>
&nbsp;&nbsp;<A HREF="#8">3 Exploring With Swat</A><BR>
&nbsp;&nbsp;<A HREF="tutorial_source.htm">4 Source Code</A><BR>
</STRONG>
</P> <!-- end of sectionlinks blob -->

<HR>
<A NAME="1"></A>


<H2 CLASS="sectionTitle">
1: Creating &quot;Tutorial&quot;</H2>
<P>
The application that you'll be working on throughout this tutorial is called, appropriately enough, &quot;Tutorial.&quot; In this section you'll create two files: <STRONG CLASS="fileName">
<A HREF="tutorial_source.htm#gp">TUTORIAL.GP</A></STRONG>
 and <STRONG CLASS="fileName">
<A HREF="tutorial_source.htm#goc">TUTORIAL.GOC</A></STRONG>. The .GP (or &quot;geode parameters&quot;) file tells the linker how the application is organized; the .GOC file contains the actual source code. All GEOS applications require these two files.</P>


<A NAME="2"></A>
<H3 CLASS="subsectionTitle">
1.1: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Setting Up Your Working Directory</H3>
<P>
<A NAME="IX_Working Directory:in Tutorial example"> </A>
The first step in creating your application is to set up your Working Directory where you will do all your private development. Because your application is called &quot;Tutorial,&quot; you need to create a <STRONG CLASS="fileName">\TUTORIAL\</STRONG>
 subdirectory in your Working Directory to hold the source files (see <A HREF = "../../Intro/InstallSDK/NT-Tools_f.htm#76945">&quot;Developing In Your Working Branch&quot;</A> for more information).</P>
<OL>
<LI>
Create the <STRONG CLASS="fileName">
\TUTORIAL\</STRONG>
 subdirectory under <STRONG CLASS="fileName">
\APPL\</STRONG>
 in your Working Directory; for example: 
<STRONG CLASS="fileName">C:\PCGEOS\<EM>workingdir</EM>\APPL\TUTORIAL\</STRONG> where &quot;workingdir&quot; refers to your personal working directory (usually the same as your login name).</LI>

<LI>
Type in the contents of 
<A HREF="tutorial_source.htm#gp">TUTORIAL.GP</A>
and <A HREF="tutorial_source.htm#goc">TUTORIAL.GOC</A>. Put these files into the <STRONG CLASS="fileName">...\TUTORIAL\</STRONG> directory you just created.
Typing source code by hand is often a good way to learn the feel for a language's grammar. If you don't want to type the source code by hand, follow the above links and copy the text into the files <STRONG CLASS = "filename">TUTORIAL.GOC</STRONG> and <STRONG CLASS = "filename">TUTORIAL.GP</STRONG>, as indicated.
</OL>


<A NAME="3"></A>
<H3 CLASS="subsectionTitle">
1.2: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Compiling Your Source Code</H3>

<A NAME="IX_Compiling:in Tutorial example"> </A>
<A NAME="IX_Working Directory:in Tutorial example"> </A>
<P>
Now that you've created some source code, it's time to compile your application. First, you will need to create a Makefile and then run the &quot;make&quot; or compilation utility.</P>
<OL>
<LI>
Start up a command window and make sure you are in your Working Directory for this application; <EM>
i.e.</EM>, 
<STRONG CLASS="fileName">C:\PCGEOS\<EM>workingdir</EM>\APPL\TUTORIAL\</STRONG>.</LI>
<LI>
<A NAME="IX_Makefiles:in Tutorial example"> </A>
<A NAME="IX_mkmf:in Tutorial example">
 </A>
Type<STRONG>
 mkmf </STRONG>
at the prompt; this utility creates a &quot;makefile&quot; which tells the pmake utility the steps with which to construct the application. It also creates a dependencies file, which tells pmake which files need to be remade whenever a source file has been modified.</LI>

<A NAME="IX_pmake:in Tutorial example"> </A>
<A NAME="IX_Making:in Tutorial example"> </A>
<A NAME="IX_Make:in Tutorial example"> </A>
<LI>
Type <STRONG>
pmake </STRONG>
to invoke the preprocessor, compiler, and linker to create the GEOS executable. </LI>
</OL>
<P>
When you have completed these steps, your directory should contain some new files, including <STRONG CLASS="fileName">
TUTORIALEC.GEO</STRONG> and your newly created GEOS executable or &quot;geode.&quot; The &quot;EC&quot; in the name indicates that you've compiled the error-checking version of your application. The GEOS SDK tools have been set up with some optional compilation features to allow for error-checking code which is useful during development.</P>

<A NAME="4"></A>


<H3 CLASS="subsectionTitle">
1.3: <A HREF="#1">Creating &quot;Tutorial&quot;</A>: 
Starting the Emulator and Swat</H3>

<A NAME="IX_Swat:launching"> </A>
<A NAME="IX_Swat:in Tutorial example"> </A>
<A NAME="IX_Debugging:in Tutorial example"> </A>
<P>
Once you've successfully compiled your code, it's time to start up the GEOS emulator and attach Swat, the debugger. </P>
<OL>
<LI>
From the GEOS SDK program group, start the error-checking version of the emulator with Swat-wait.</LI>
<LI>
From the GEOS SDK program group, launch Swat (or type &quot;swat&quot; from a command prompt). The following should appear in the Swat window:</LI>
<PRE CLASS="SwatDisplay">Swat version 2.1 (May 28 1997 11:43:32).
Using the N9000v20 version of GEOS.
SDK version: ntsdk30
Looking for "loader"...c:/pcgeos/N9000v20/Installed/Loader/Text/loaderec.sym
Sourcing swat.tcl...Warning: Couldn't find the init file: c:\pcgeos\.swat
done
GEOS Attached
Stopped in LoadGeos, address 0a50h:0007h
LoadGeos:            CLD                        ;DF=0
 
(loader:0) 1 =&gt; </PRE>
<P>
At this point, Swat is telling you that it has successfully established communications with the target emulator, has started the process of loading the GEOS kernel, and is now waiting for you to type in a command. Type 
<CODE>c</CODE>
 and press the &lt;Enter&gt; key to continue loading the GEOS emulator. The following will appear:</P>
<PRE CLASS="SwatDisplay">(loader:0) 2 =&gt; <STRONG>c</STRONG>
Looking for "geos    Eker"...c:/pcgeos/N9000v20/Installed/Library/Kernel/N9000DE
MO_WIN32/geosec.sym
Looking for "os2     Eifs"...c:/pcgeos/N9000v20/Installed/Driver/IFS/DOS/OS2/N90
00/os2ec.sym
WARNING(os2::OS2Init): NOT_MONITORING_JFT
Looking for "netware Eifs"...c:/pcgeos/N9000v20/Installed/Driver/IFS/DOS/NetWare
/netwareec.sym
Looking for "respondrElib"...c:/pcgeos/N9000v20/Installed/Library/Respondr/N9000
DEMO/respondrec.sym
Looking for "rspwr   Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Power/Rspwr/N90
00DEMO/rspwrec.sym
Thread 1 created for patient geos
Thread 2 created for patient geos
Looking for "vidmem  Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Video/Dumb/VidM
em/vidmemec.sym
Looking for "swap    Elib"...c:/pcgeos/N9000v20/Installed/Library/Swap/swapec.sy
m
Looking for "disk    Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Swap/Disk/diske
c.sym
Looking for "xms     Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Swap/XMS/xmsec.
sym
Looking for "gdi     Elib"...c:/pcgeos/N9000v20/Installed/Library/GDI/GenPC/N900
0DEMO_WIN32/gdiec.sym
Looking for "gdiKbd  Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Keyboard/GDI/gd
iKbdec.sym
Looking for "nimbus  Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Font/Nimbus/nim
busec.sym
Looking for "stream  Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Stream/streamec
.sym
Looking for "sound   Elib"...c:/pcgeos/N9000v20/Installed/Library/Sound/N9000/so
undec.sym
Looking for "standarddrvr"...c:/pcgeos/N9000v20/Installed/Driver/Sound/Standard/
N9000DEMO/standard.sym
Looking for "ui      Elib"...c:/pcgeos/N9000v20/Installed/Library/User/N9000/uie
c.sym
Thread 0 created for patient ui
Looking for "styles  Elib"...c:/pcgeos/N9000v20/Installed/Library/Styles/N9000/s
tylesec.sym
Looking for "color   Elib"...c:/pcgeos/N9000v20/Installed/Library/Color/N9000/co
lorec.sym
Looking for "ruler   Elib"...c:/pcgeos/N9000v20/Installed/Library/Ruler/N9000/ru
lerec.sym
Looking for "text    Elib"...c:/pcgeos/N9000v20/Installed/Library/Text/N9000/tex
tec.sym
Looking for "rtcm    Elib"...c:/pcgeos/N9000v20/Installed/Library/RTCM/rtcmec.sy
m
Looking for "ansic   Elib"...c:/pcgeos/N9000v20/Installed/Library/AnsiC/ansicec.
sym
Looking for "vp      Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/OEM/vp_st
b/vpec.sym
Looking for "foam    Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/Foam/foam
ec.sym
Looking for "foamdb  Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/DB/foamdb
ec.sym
Looking for "contdb  Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/Contdb/co
ntdbec.sym
Looking for "securitylib "...c:/pcgeos/N9000v20/Installed/Library/Foam/Security/
security.sym
Looking for "rudy    Espu"...c:/pcgeos/N9000v20/Installed/Library/SpecUI/Rudy/ru
dyec.sym
Looking for "simp4bitEdrv"...c:/pcgeos/N9000v20/Installed/Driver/Video/Dumb/Simp
4Bit/WIN32/simp4bitec.sym
WARNING(rudy::OLAppEnsureIndicatorCorrect): RUDY_INDICATOR_NOT_FOUND_IS_GEOS_BOO
TING_OR_SHUTTING_DOWN
Looking for "spool   Elib"...c:/pcgeos/N9000v20/Installed/Library/Spool/N9000/sp
oolec.sym
Thread 0 created for patient spool
Looking for "mailbox Elib"...c:/pcgeos/N9000v20/Installed/Library/Mailbox/N9000/
mailboxec.sym
Thread 0 created for patient mailbox
Looking for "nonts   Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Task/NonTS/nont
sec.sym
Looking for "contlog Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/ContLog/c
ontlogec.sym
Looking for "indicatoEapp"...c:/pcgeos/N9000v20/Installed/Appl/FApps/OEM/indicat
o/indicate.sym
Thread 0 created for patient indicato
Looking for "faxfile Elib"...c:/pcgeos/N9000v20/Installed/Library/Fax/File/N9000
/faxfileec.sym
Looking for "viewer  Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/Viewer/vi
ewerec.sym
Looking for "clrfax  Egeo"...(cached)...c:/pcgeos/N9000v20/Installed/Appl/FApps/
ClrFax/clrfaxec.sym
Thread 0 created for patient clrfax
Looking for "math    Elib"...c:/pcgeos/N9000v20/Installed/Library/Math/mathec.sy
m
Looking for "ssset   Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/OEM/ssset
/sssetec.sym
Looking for "scm     Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/OEM/scm/s
cmec.sym
Thread 0 created for patient scm
Looking for "ota     Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/OEM/ota/o
taec.sym
Looking for "compose Elib"...c:/pcgeos/N9000v20/Installed/Library/Foam/OEM/compo
se/composee.sym
Looking for "accpnt  Elib"...c:/pcgeos/N9000v20/Installed/Library/AccPnt/N9000/a
ccpntec.sym
Looking for "borlandcElib"...c:/pcgeos/N9000v20/Installed/Library/Math/Compiler/
BorlandC/borlandcec.sym
Looking for "phone   Eapp"...c:/pcgeos/N9000v20/Installed/Appl/FApps/OEM/phone/p
honeec.sym
Thread 0 created for patient phone
Thread 1 created for patient indicato
viewer exited.
faxfile exited.
clrfax exited.
Thread 0 of clrfax exited 0
Thread 1 of indicato exited 0
Looking for "serial  Edrv"...c:/pcgeos/N9000v20/Installed/Driver/Stream/Serial/s
erialec.sym
serial exited.</PRE>
<P>
Each line that begins &quot;Looking for...&quot; indicates that the system is loading a geode (a GEOS executable) and that Swat is looking for its symbol information. Swat also tells you whenever it creates (or exits) a thread for any geode.</P>

<A NAME="IX_Ctrl-c:in Swat[;C]"> </A>
<A NAME="IX_send Swat command:in Tutorial example"> </A>
<A NAME="IX_run Swat command:in Tutorial example"> </A>
<P>
Now that the emulator is running with Swat attached, you need to send your source code to the emulator to run it.</P>
<LI>
Type <CODE>
Ctrl-C</CODE>
 in the Swat window. At this point, the Swat prompt should appear:</LI>
<PRE CLASS="SwatDisplay">GEOS Halted
Stopped in TimerInterrupt, address 15a1h:c618h
TimerInterrupt+274:  STI
(geos:0) 2 =&gt; </PRE>
<LI>
Type <CODE>send tutorial</CODE>
to copy the application to the emulator:</LI>
<PRE CLASS="SwatDisplay">(geos:0) 2 =&gt; <STRONG>send tutorial</STRONG>
Looking for EC version of tutorial...
(cached)...Sending file c:\pcgeos\janice\Appl\tutorial\TUTORIALEC.GEO to WORLD
\EXTRAPPS\TUTORIALEC.GEO
Bytes transfered: 1788/1788 (100%)
Send complete.
(geos:0) 3 =&gt; </PRE>

<LI>
Type <CODE>run tutorial</CODE>
to run the application:</LI>
<PRE CLASS="SwatDisplay">(geos:0) 3 =&gt; <STRONG>run tutorial</STRONG>
Looking for application...
Allocating AppLaunchBlock
Force-queueing MSG_USER_LAUNCH_APPLICATION
Waiting for message...
Loading EXTRAPPS\TUTORIAL.GEO...
Looking for "tutorialEapp"...c:/pcgeos/janice/Appl/Tutorial/tutorialec.SYM
Thread 0 created for patient tutorial
Spawning tutorial...
(tutorial:0) 4 =&gt; </PRE>
<LI>
Type <CODE>
c</CODE>
 to allow execution to continue on the emulator.</LI>
</OL>
<P>
After you've followed these steps, your emulator should look like 
the screen pictured below.<BR>
<P>
<CENTER>
<TABLE WIDTH = 647 BORDER = 2>
<TR><TD>
<IMG SRC="tuto1.gif" HEIGHT = 202 WIDTH = 643><BR>
<STRONG>Figure 1:</STRONG>
<EM>The &quot;Tutorial&quot; application screen.</EM>
<P>
This is how your application will look after you type in the first pieces of code. Notice that it consists only of a blank viewing window and a &quotClose&quot button; later you will add code that displays text in this window.
</TD>
</TR>
</TABLE>
</CENTER>

<P>
As you can see, your application consists of an empty window. In the <A HREF= "addcode_swat.htm">next chapter</A>, you will add procedural code that draws a text string in this window.</P>
<HR>
<A NAME="5"></A>


<H2 CLASS="sectionTitle">
2: Learning GOC</H2>
<P>
By typing in the contents of the source files (both the .GOC and .GP files), you've probably become a little familiar with GOC syntax. GOC is a proprietary superset of standard ANSI C. It supports C routines and functionality and adds its own set of keywords and special syntax. This section will cover basic GOC syntax, including the usage and meaning of various GOC keywords, by giving a line-by-line explanation of the code you entered.</P>


<A NAME="6"></A>
<H3 CLASS="subsectionTitle">
2.1: <A HREF="#5">Learning GOC</A>: 
TUTORIAL.GP: Geode Parameters File</H3>
<A NAME="IX_Geode parameters files:in Tutorial example"> </A>
<A NAME="IX_Glue parameters files:in Tutorial example"> </A>
<A NAME="IX_.gp files:in Tutorial example[;gp files:in Tutorial example]"> </A>
<P>
The .GP file tells the Glue linker about an application's general organization. (You can get complete information about all of the possible fields in a .GP file by reading <A HREF="../../LRef/GPKey/index.htm">the GP File Keywords reference</A>.) 
Let's take a look at the code in <STRONG CLASS="fileName">
<A HREF="tutorial_source.htm#gp">TUTORIAL.GP</A></STRONG>
 to find out what each line means.
<PRE>name tutorial.app</PRE>
<P>
<A NAME="IX_name .gp file keyword:in Tutorial example">
 </A>
The <CODE>
name</CODE>
 field specifies the &quot;patient&quot; name by which Swat will identify the application. Swat thinks of each geode as a patient, so you'll see phrases in Swat like &quot;patient died&quot;.
<PRE>longname &quot;Tutorial Sample Application&quot;</PRE>
<A NAME="IX_longname .gp file keyword:in Tutorial example"> </A>
<P>
The <CODE>
longname</CODE>
 field is the name the system displays for this application. For example, if you press <CODE>
Ctrl-F12 </CODE>
on the emulator (to list the applications in the &quot;Extras&quot; folder), you will see the <CODE>
longname</CODE>
 for this application displayed. GEOS supports names up to 32 characters in length.
<PRE>tokenchars &quot;TUTO&quot;
tokenid 8</PRE>
<P>
<A NAME="IX_tokenchars .gp file keyword:in Tutorial example">
 </A>
<A NAME="IX_tokenid .gp file keyword:in Tutorial example">
 </A>
<A NAME="IX_GeodeToken:in Tutorial example"> </A>
Each application has its own unique identifier to the system. This identifier is a special GEOS data type called a <CODE>
GeodeToken</CODE>. A <CODE>
GeodeToken </CODE>
is a data structure comprised of two fields:
<DL>
<DT>
<CODE>
tokenchars</CODE></DT><DD>
A string of four characters (normally taken from the name of the application); and</DD>
<DT>
<CODE>
tokenid
</CODE></DT><DD>
The Manufacturer ID for your company; this value is unique to your company and ensures that your applications' <CODE>
GeodeTokens</CODE>
 do not conflict with those of other manufacturers. All sample applications, including this tutorial application, use a <EM>
tokenid</EM>
 of 8; for your &quot;real&quot; applications, you should use your company's assigned Manufacturer ID. (Send email to 
<A HREF="mailto:orders@geoworks.com">orders@geoworks.com</A>
 to receive a Manufacturer ID.)</DD>
</DL>
<A NAME="IX_type .gp file keyword:in Tutorial example"> </A>
<A NAME="IX_single:as geode type in .gp file"> </A>
<A NAME="IX_appl:as geode type in .gp file"> </A>
<A NAME="IX_process:as geode type in .gp file"> </A>
<PRE>type appl, process, single</PRE>
<P>
The <CODE>type</CODE>
 line tells Glue whether your geode is an application, a driver or a library. <STRONG CLASS="fileName">
Tutorial</STRONG>, like most GEOS applications, uses the following keywords:
<UL>
<LI>
<CODE>
appl</CODE>
 which tells Glue that this geode is an application;</LI>
<LI>
<CODE>
process</CODE>
 which specifies that the geode should be run in its own thread;</LI>
<LI>
<CODE>
single</CODE>
 which specifies that only one copy of the program may run at a time.</LI>
</UL>
<P>
<A NAME="IX_Process:in Tutorial example">
 </A>
<A NAME="IX_Threads:in Tutorial example">
 </A>
Because GEOS is a multi-tasking or multi-threaded operating system, it allows more than one thread of execution to run at a time. This enables programs to run in the background. By specifying that your application has a process, you are requesting that it have its own thread of execution. If you were writing a library, you probably wouldn't want to give it a process, figuring that other geodes would be executing the library's code.
<PRE>class TutorialProcessClass</PRE>
<P>
<A NAME="IX_class .gp file keyword:in Tutorial example">
 </A>
The <CODE>
class</CODE>
 line specifies which class will run the process thread. In this case, the <CODE>
TutorialProcessClass</CODE>
 will be in charge of the process thread. (You will declare <CODE>
TutorialProcessClass</CODE>
 in the <STRONG CLASS="fileName">
<A HREF="tutorial_source.htm#goc">TUTORIAL.GOC</A></STRONG>
 file.)</P>
<PRE>appobj TutorialApp</PRE>
<P>
<A NAME="IX_appobj .gp file keyword">
 </A>
The <CODE>
appobj</CODE>
 line specifies the &quot;application object&quot; for this application. The application object is the interface between your geode and the rest of the system. (You will declare this object in your source file as well.)</P>
<A NAME="IX_platform .gp file keyword:in Tutorial example"> </A>
<PRE>platform n9000v20</PRE>
<P>
Glue will use the <CODE>
platform</CODE>
 line to make sure that your application doesn't rely on any geodes that aren't present on the GEOS device.</P>
<A NAME="IX_heapspace .gp file keyword"></A>
<PRE>heapspace 3K</PRE>
<P>
The <CODE>
heapspace</CODE>
 line specifies the maximum amount of memory the application requires on the global memory heap. Note that the value 3K is a wild guess. Once your application is closer to completion, you can use Swat's <CODE>
heapspace</CODE>
 command to find out how much heap space the application really needs.</P>
<A NAME="IX_library .gp file keyword:in Tutorial example"> </A>
<PRE>library geos
library ui</PRE>
<P>
The <CODE>
library</CODE>
 lines tell Glue which libraries to load for your application. All GEOS libraries are dynamically linked and loaded. </P>

<A NAME="IX_resource .gp file keyword:in Tutorial example"> </A>
<A NAME="IX_ui-object:resource type in .gp file"> </A>
<A NAME="IX_UI Thread:in Tutorial example"> </A>
<A NAME="IX_Threads:in Tutorial example"> </A>
<PRE>resource APPRESOURCE ui-object
resource INTERFACE ui-object</PRE>
<P>
The <CODE>
resource</CODE>
 lines specify the blocks of memory that your application uses for objects. Breaking up an application into resources allows it to run more efficiently because the system will only load those resources it needs.</P>
<P>
The <CODE>ui-object</CODE>
keyword signals that the UI thread should run the specified resource. Specifying a UI thread ensures that your application will <EM>
have</EM>
 a UI thread and thus be dual-threaded: the process will run in one thread and UI objects will run in the UI thread. If you don't want the application to have two threads, use the keyword <CODE>
object</CODE>
 instead of <CODE>
ui-object</CODE>
.</P>
<A NAME="7"></A>


<H3 CLASS="subsectionTitle">
2.2: <A HREF="#5">Learning GOC</A>: 
<A NAME="IX_Deadlock avoidance">
 </A>
TUTORIAL.GOC: Source Code</H3>
<P>
Now let's take a look at the source code in <STRONG CLASS="fileName">
<A HREF = "tutorial_source.htm#goc">TUTORIAL.GOC</A></STRONG>
. (For more information about GOC syntax, see <A HREF="../../Programming/GOCLanguage/index.htm">the GEOS Programming chapter</A>.)</P>
<A NAME="IX_@include:in Tutorial example[;include]"> </A>
<PRE>@include &lt;stdapp.goh&gt;
@include &lt;foam.goh&gt;</PRE>
<P>
The first lines of code contain the <CODE>
@include</CODE>
 directive. Note the '@' symbol. This symbol is used to denote GOC keywords and distinguish them from regular C syntax. <CODE>
@include</CODE>
 behaves the same way as <CODE>
#include</CODE>, except that the inclusion will take place when the GOC preprocessor is processing the source code. Generally, you <CODE>
@include</CODE> .GOH files and <CODE>
#include</CODE>
 regular .H files.</P>
<A NAME="IX_@class:in Tutorial example[;class]"> </A>
<A NAME="IX_@endc:in Tutorial example[;endc]"> </A>
<A NAME="IX_Classes:defining in Tutorial example"> </A>
<A NAME="IX_GenProcessClass:subclassing in Tutorial example"> </A>
<PRE>@class TutorialProcessClass, GenProcessClass;
@endc;</PRE>
<P>
The <CODE>
@class</CODE>
 and <CODE>
@endc</CODE>
 keywords mark the beginning and end of a new class definition. Here, you're defining <CODE>
TutorialProcessClass</CODE>
 as a subclass of <CODE>
GenProcessClass</CODE>
, which means that<CODE>
 TutorialProcessClass</CODE>
 will inherit all the behavior of its parent, <CODE>
GenProcessClass</CODE>
.</P>
<A NAME="IX_@classdecl:in Tutorial example[;classdecl]"> </A>
<A NAME="IX_Classes:declaring in Tutorial example"> </A>
<PRE>@classdecl TutorialProcessClass, neverSaved;</PRE>
<P>
Once you define the class, you need to declare it so that the system will know how to build objects of that class. To declare the class, you use the <CODE>
@classdecl</CODE>
 keyword and because this is the process object, (a special object with no instance data), you also use the <CODE>
neverSaved</CODE>
 flag. This flag tells the system that no instance data need be saved when the system shuts down.</P>
<PRE><A NAME="IX_Resources:@start"> </A>@start AppResource; </PRE>
<P>
The <CODE>
@start</CODE>
 keyword defines a resource or block of memory. In this case, you're defining the APPRESOURCE resource. In the <STRONG CLASS="fileName">
.</STRONG>
GP file, you may recall that this resource holds objects, and that those objects will be run by the UI thread.</P>
<A NAME="IX_Application object:in Tutorial example"> </A>
<A NAME="IX_FoamSubApplicationClass:in Tutorial example"> </A>

<PRE>@object FoamSubApplicationClass TutorialApp = {</PRE>
<P>
<A NAME="IX_Objects:@object">
 </A>
<A NAME="IX_GenApplicationClass:in Tutorial example">
 </A>
<A NAME="IX_@object:in Tutorial example[;object]">
 </A>
The first object to be declared in the APPRESOURCE resource is the application object, <CODE>
TutorialApp</CODE>
. In the .GP file, you specified <CODE>
TutorialApp</CODE>
 as the application object in the <CODE>
appobj</CODE>
 line. The application object is responsible for receiving and handling all sorts of system messages and notifications. This is a nontrivial task so the object will be of a class specifically set up to handle this task: <CODE>
FoamSubApplicationClass</CODE>
. (Note, on GEOS systems other than the Nokia 9000i Communicator, you would use a <CODE>
GenApplicationClass</CODE>; <CODE>
FoamSubApplicationClass</CODE>
 is a specialized subclass of <CODE>
GenApplicationClass</CODE>.)</P>
<P>
Because the application object provides important information to the system, it needs to live in its own resource; that way, the system can query the application object by loading only that resource which contains it.</P>
<P>
The next set of fields contains the application object's instance data. Instance data are characteristics of an object, as defined by the object's class. (This should make more sense as you read on.)</P>
<PRE>	 GI_visMoniker = list{ @TutorialTextMoniker };</PRE>
<P>
<A NAME="IX_Monikers:simple moniker list in Tutorial example"> </A>
<A NAME="IX_GI_visMoniker:simple moniker list in Tutorial example">
 </A>
The <CODE>GI_visMoniker</CODE>
 field specifies the object's label or name that appears to the user (not to be confused with <CODE>
TutorialApp</CODE>, the name of the object). 
The &quot;visMoniker&quot; part of the field name is short for &quot;visual moniker.&quot; In GEOS parlance, a &quot;visual moniker&quot; is a text string or graphic used to identify an object to the user. This field is commonly set to a &quot;list&quot; of monikers; the system uses the moniker list to determine which text or graphic to display for your application. </P>
<A NAME="IX_GI_comp:in Tutorial example"> </A>
<PRE><A NAME="IX_Instance data:Naming conventions"> </A>	 GI_comp = @TutorialPrimary;</PRE>
<P>
The <CODE>
GI_comp</CODE>
 field specifies the children of a generic UI object. In this case, the only child of the <CODE>
TutorialApp</CODE>
 object is the <CODE>
TutorialPrimary</CODE>
 object (which you declare later). (For a detailed description of how objects keep track of their children, see <A HREF="../../Programming/GOCLanguage/GOCLanguage_13">the GEOS Programming chapter</A>.)</P>
<P>
Notice that both instance data field names begin with &quot;GI_.&quot; The &quot;GI_&quot; stands for &quot;Gen Instance.&quot; Because <CODE>
GenApplicationClass</CODE>
 is a subclass of <CODE>
GenClass</CODE>
, it inherits the <CODE>
GI_visMoniker</CODE>
 field from its parent. By Geoworks' naming conventions, instance data field names begin with the initials of their associated class followed by an &quot;I&quot; for &quot;instance.&quot; Thus, any <CODE>
GenApplicationClass</CODE>
 instance field names would begin &quot;GAI_.&quot;</P>
<P>
<A NAME="IX_optr:in Tutorial example">
 </A>
<A NAME="IX_object pointer:in Tutorial example">
 </A>
<A NAME="IX_Objects:optr">
 </A>
You may be wondering about the syntax for <CODE>@TutorialPrimary</CODE>.
<CODE>@TutorialPrimary</CODE>
 is actually a reference to the <CODE>
TutorialPrimary</CODE>
 object. Object references have their own GEOS-specified type called an <CODE>
optr</CODE>.</P>

<A NAME="IX_gcnList() keyword:in Tutorial example"> </A>
<A NAME="IX_GCN list:in Tutorial example"> </A>
<A NAME="IX_GAGCNLT_WINDOWS:in Tutorial example"> </A>
<A NAME="IX_General change notification:in Tutorial example"> </A>
<PRE>	gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =@TutorialPrimary; 
}</PRE>
<P>
This line puts the <CODE>
TutorialPrimary</CODE>
 object,which is the primary window of your application, on a General Change Notification (GCN) list so that it will receive notification when a system-level change has occurred. (For more information about GCN lists, see the gcnList entry in <A HREF="../../Programming/GOCLanguage/index.htm">the GEOS Programming chapter</A>.)</P>
<P>
This completes the declaration of the <CODE>
TutorialApp</CODE>
 object.</P>
<PRE>@visMoniker TutorialTextMoniker = &quot;My Tutorial&quot;;</PRE>
<P>
<A NAME="IX_@visMoniker:in Tutorial example[;visMoniker]">
 </A>
This line contains the string to which the <CODE>
TutorialApp</CODE>
's <CODE>
GI_visMoniker</CODE>
 field refers. The <CODE>
@visMoniker</CODE>
 keyword stores the string in a GEOS data structure set up strictly for monikers.</P>
<PRE>@localize &quot;Program Title&quot;;</PRE>
<P>
<A NAME="IX_Localization:giving hints to translators">
 </A>
<A NAME="IX_Localization:in Tutorial example"> </A>
<A NAME="IX_@localize:in Tutorial example[;localize]">
 </A>
This <CODE>
@localize </CODE>
statement doesn't actually affect the program; it simply acts as a hint for someone translating the program to a foreign language. The ResEdit program displays the information in <CODE>
@localize</CODE>
 statements when it prompts the translator to translate a moniker or string chunk. In this case, for example, when ResEdit prompts the translator to translate the string, &quot;My Tutorial,&quot; it will display the string &quot;Program Title&quot; to assist with the translation.</P>
<A NAME="IX_Resources:@end Goc keyword"> </A>
<A NAME="IX_@end:in Tutorial example"> </A>
<PRE>@end AppResource</PRE>
<P>
This line signals the end of the APPRESOURCE declaration.</P>
<PRE>@start Interface; </PRE>
<P>
Here begins the next resource definition. This resource is called INTERFACE and will hold the basic UI gadgetry for your application. </P>
<PRE>@object GenPrimaryClass TutorialPrimary = { </PRE>
<P>
<A NAME="IX_GenPrimaryClass:in Tutorial example">
 </A>
The first object to be declared in this resource is <CODE>
TutorialPrimary</CODE>
, your application's primary window and an object of <CODE>
GenPrimaryClass</CODE>
. </P>
<PRE>	GI_comp = @TutorialView, @TutorialCloseTrigger;
}</PRE>
<P>
The first instance data field is <CODE>
GI_comp</CODE>
, which specifies the children of <CODE>
TutorialPrimary</CODE>
.</P>
<PRE>@object GenViewClass TutorialView = {</PRE>
<P>
<A NAME="IX_GenViewClass:in Tutorial example">
 </A>
The next object is a <CODE>
GenViewClass</CODE>
 object called <CODE>
TutorialView</CODE>
; this object provides space on the screen for objects to draw themselves. </P>
<A NAME="IX_@default:in Tutorial example"> </A>
<A NAME="IX_GVI_vertAttrs:in Tutorial example"> </A>
<A NAME="IX_GVI_horizAttrs:in Tutorial example"> </A>
<A NAME="IX_GVI_content:in Tutorial example"> </A>
<A NAME="IX_GVDA_NO_LARGER_THAN_CONTENT:in Tutorial example"> </A>

<PRE>    GVI_horizAttrs = @default |
        GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default |
        GVDA_NO_LARGER_THAN_CONTENT;
    GVI_content = process;
}</PRE>
<P>
The <CODE>
GVI_content</CODE>
 field specifies the top-level object which will appear in the view's drawing space. The <CODE>
GVI_horizAttrs</CODE>
 and <CODE>
GVI_vertAttrs</CODE>
 fields specify how the view should size itself in relation to the <CODE>
content</CODE>
 object's size. Setting the flag <CODE>GVDA_NO_LARGER_THAN_CONTENT</CODE> ensures that the view will be the same size as its content object.</P>
<P>
Notice that the <CODE>
GVI_...Attrs</CODE>
 fields also use the <CODE>
@default</CODE>
 keyword. <CODE>
@default </CODE>
tells the system to expand to the default values for this field (as defined by <CODE>
GenViewClass</CODE>
); additional flags are ORed in with the single pipe (&quot;|&quot;).</P>

<A NAME="IX_ComplexMonikerClass:in Tutorial example"></A>
<A NAME="IX_ComplexMoniker:in Tutorial example"></A>
<A NAME="IX_multiple inheritance:in Tutorial example"></A>
<A NAME="IX_CMI_topText:in Tutorial example"></A>
<A NAME="IX_CMT_CLOSE:in Tutorial example"></A>
<A NAME="IX_GenTriggerClass:in Tutorial example"> </A>
<A NAME="IX_Button:in Tutorial example"> </A>
<A NAME="IX_Close button:in Tutorial example"> </A>
<A NAME="IX_GTI_actionMsg:in Tutorial example"> </A>
<A NAME="IX_destination:in Tutorial example"> </A>

<PRE>@object ComplexMonikerClass TutorialCloseTrigger = {
    ComplexMoniker = GenTriggerClass;
    CMI_topText = CMT_CLOSE;</PRE>
<P>
The last object declared in the INTERFACE resource is 
<CODE>TutorialCloseTrigger</CODE>, an object of 
<CODE>ComplexMonikerClass</CODE>. 
<CODE>TutorialCloseTrigger</CODE>
provides the &quot;Close&quot; button for your application.</P>

<P>The <CODE>ComplexMoniker</CODE> instance data field allows 
a sort of "multiple inheritance" in GEOS.  
<CODE>ComplexMonikerClass</CODE> defines behavior useful for 
many Communicator UI object types.  <CODE>GenTriggerClass</CODE>
defines behavior useful for buttons.  GEOS multiple inheritance 
is complicated (you can learn more about it in the 
<A HREF="../../Programming/GOCLanguage/GOCLanguage_d.htm">Goc syntax 
chapter</A>); fortunately, it's easy to use it to set 
up this button--we just set the <CODE>ComplexMoniker</CODE> field 
as shown.  The <CODE>CMI_topText</CODE> field supplies the text 
by which the button will identify itself to the user: "Close".

<PRE>    GTI_destination = @TutorialApp;
    GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;</PRE>
<P>
The <CODE>GTI_destination</CODE>
 and <CODE>GTI_actionMsg</CODE>
 fields are GenTrigger instance data fields. <CODE>GTI_actionMsg</CODE>
 specifies the message that gets sent when the user presses the &quot;Close&quot; button; <CODE>GTI_destination</CODE>
 specifies the object who will handle the message. (We will discuss messages in more detail in the next chapter; suffice it to say that a message is a signal which may be handled by a set of procedural code defined for a class.)</P>
<A NAME="IX_Hints:in Tutorial example"> </A>
<A NAME="IX_HINT_SEEK_MENU_BAR:in Tutorial example"> </A>
<A NAME="IX_HINT_SEEK_REPLY_BAR:in Tutorial example"> </A>
<A NAME="IX_HINT_SEEK_SLOT:in Tutorial example"> </A>

<PRE>    HINT_SEEK_MENU_BAR;
    HINT_SEEK_REPLY_BAR;
    HINT_SEEK_SLOT = 3;
}</PRE>
<P>
These hints ensure that the button is placed on the right side of the screen so that it aligns with the buttons on the Nokia 9000i Communicator.</P>

<PRE>@end Interface;</PRE>
<P>
This line signals the end of the INTERFACE resource definition.</P>
<HR>
<A NAME="8"></A>


<H2 CLASS="sectionTitle">
3: Exploring With Swat</H2>
<P>
Now that you've successfully compiled your application, you can use Swat to &quot;debug&quot; it. In the Swat window, press <CODE>
Ctrl-C</CODE>
 to halt the emulator and gain control back in the Swat window. Something similar to the following should appear in your Swat window:</P>
<PRE CLASS="SwatDisplay">GEOS Halted
Stopped in DOSIdleHook, address 277eh:1136h
DosIdleHook+17		MOVE	AX, 5760 (1680h)
(geos:0) 5 =&gt;</PRE>
<P>
&quot;GEOS Halted&quot; indicates that Swat has frozen the emulator. The next two lines of Swat output indicate the address of the current internal routine that is executing. If Swat stopped in a public routine, the address would have been given in relation to the routine name and would have been more readable.</P>
<A NAME="IX_Threads:switching in Tutorial example"> </A>
<P>
The last line indicates the thread that was executing (on the emulator) when you hit <CODE>
Ctrl-C</CODE>
. In this example, the zeroth thread associated with the GEOS geode (the kernel) was executing. To examine the thread associated with your application, type &quot;tutorial.&quot; (Recall that this is the value you set in the <CODE>
name</CODE>
 field of your <STRONG CLASS="fileName">
TUTORIAL.GP</STRONG>
 file [without the suffix].) This tells Swat which thread to switch to.</P>
<PRE CLASS="SwatDisplay">(geos:0) 5 =&gt; <STRONG>tutorial
</STRONG>[tutorial:0] 6 =&gt; </PRE>
<P>
The prompt indicates that you are now in the process thread of the <CODE>
tutorial </CODE>
geode. If you were in the UI thread, your prompt would read &quot;[tutorial:1].&quot; To change threads within a geode, simply type<A NAME="IX_\:0 Swat command:in Tutorial example">
 </A>
 <CODE>
:0</CODE>
 or<A NAME="IX_\:1 Swat command:in Tutorial example">
 </A>
 <CODE>
:1</CODE>
. </P>
<P>
<A NAME="IX_where Swat command:in Tutorial example">
 </A>
Now try the <CODE>
where</CODE>
 command to find out what this thread was doing when you stopped the system.</P>
<PRE CLASS="SwatDisplay">[tutorial:0] 6 =&gt; <STRONG>where
</STRONG>* 1: near BlockOnLongQueue(), 153dh:c22ah
2:  far QueueGetMessage(), 153dh:133ch
------------------------------------------------------------------------------
The event queue for &quot;tutorial:0&quot; is empty
==============================================================================
[tutorial:0] 7 =&gt;</PRE>
<P>
These lines tells you that the tutorial thread is idling; it's waiting for a message or something to happen. </P>
<P>
<A NAME="IX_gentree Swat command:in Tutorial example"> </A>
Next, use the <CODE>
gentree</CODE>
 command to examine your application's generic UI object tree. </P>
<PRE CLASS="SwatDisplay">[tutorial:0] 7 =&gt; <STRONG>gentree *TutorialPrimary</STRONG>
*TutorialPrimary::GenPrimary (@1, ^l5230h:001eh) &quot;My Tutorial&quot;
    *TutorialView::GenViewClass (@2, ^l5230h:0020h)
	^143b0h:002ah(GenValueClass) (@3, ^15230h:002ah)
    *TutorialCloseTrigger(CM/GenTriggerClass) (@4, ^15230h:0024h) &quot;Close&quot;</PRE>
<PRE CLASS="SwatDisplay">[tutorial:0] 8=&gt;</PRE>
<P>
<A NAME="IX_@ Swat address shortcut:in Tutorial example">
 </A>
The <CODE>
gentree</CODE>
 command prints out a list of all the objects in the tree, along with their class, object references, and monikers. For an example, let's look at the information for the <CODE>
TutorialView</CODE>
 object:</P>
<UL>
<LI>
<STRONG>
GenViewClass</STRONG>
 is its class;</LI>
<LI>
<STRONG>
@2</STRONG>
 is a shortcut for its object reference; and</LI>
<LI>
<STRONG>
^l5230h:0020h</STRONG>
 is its object reference.</LI>
</UL>
<A NAME="IX_pobject Swat command:in Tutorial example"> </A>
<P>
You can refer to an object by a shortcut that Swat provides, namely, the &quot;@number.&quot; To look at an object's instance data, use the Swat command <CODE>
pobj</CODE>
 followed by the &quot;@number&quot; designation for the particular object. Try the <CODE>
pobj</CODE>
 command with the <CODE>
TutorialView</CODE>
 object.</P>
<PRE CLASS="SwatDisplay">[tutorial:0] 8 =&gt; <STRONG>pobj @2</STRONG>
*TutorialView{TutorialViewClass} (@5, ^l53e0h:0020h)
master part: Gen_offset(131) -- TutorialViewInstance
@6: {TutorialViewInstance (^h21472:426)+131} = {
    MetaBase Gen = {
        ClassStruct _far *MB_class = 3a57h:183ah (rudy::CommonUIClassStructures:
:OLPaneClass)
    }
    LinkPart GI_link = {
        dword LP_next = 53e0h:0022h
    }
    CompPart GI_comp = {
        dword CP_firstChild = 53e0h:0028h
    }
    word GI_visMoniker = 0h
    word GI_kbdAccelerator = 0h
    byte GI_attrs = 2h
    byte GI_states = c0h
    PointDWFixed GVI_origin = {
        DWFixed PDF_x = {0.000000}
        DWFixed PDF_y = {0.000000}
    }
    RectDWord GVI_docBounds = {
        long RD_left = 0
        long RD_top = 0
        long RD_right = +1000
        long RD_bottom = +1000
    }
    PointDWord GVI_increment = {
        long PD_x = +20
        long PD_y = +15
    }
    PointWWFixed GVI_scaleFactor = {
        WWFixed PF_x = {1.000000}
        WWFixed PF_y = {1.000000}
    }
    ColorQuad GVI_color = {
        CQ_redOrIndex = fh, CQ_info = 0h, CQ_green = 0h, CQ_blue = 0h
    }
    word GVI_attrs = 810h
    byte GVI_horizAttrs = 98h
    byte GVI_vertAttrs = 88h
    byte GVI_inkType = 0h
    dword GVI_content = 4e60h:0000h
    dword GVI_horizLink = 0000h:0000h
    dword GVI_vertLink = 0000h:0000h
}
Variable Data:
         *** No Variable Data ***
[tutorial:0] 9 =&gt;</PRE>
<P>
We certainly got a lot of data from that command! </P>
<PRE>*TutorialView{TutorialViewClass} (@5, ^l5230h:0020h)</PRE>
<P>
The first line gives the object's class, shortcut and pointer information, similar to the output from <CODE>gentree</CODE>. 
The rest of the output consists of the object's instance data. For example:</P>
<PRE>GenViewDimensionAttrs GVI_horizAttrs = 810h</PRE>
<P>
This line show which flags (of type <CODE>GenViewDimensionAttrs</CODE>) 
are set for the object's <CODE>GVI_horizAttrs</CODE>
instance data field. </P>
<P>
You may recognize some of the instance data fields from your source code. Other fields you may not recognize because you didn't specify values for these fields, allowing the system to use default values instead.</P>
<P>
With <CODE>pobj</CODE>, you took advantage of another Swat 
feature: command completion. 
There is no &quot;<CODE>pobj</CODE>&quot; 
Swat command; the command's name is really 
&quot;<CODE>pobject</CODE>.&quot; Because 
&quot;<CODE>pobject</CODE>&quot; was the only 
Swat command that begins with p-o-b-j, Swat realized what you meant when you used 
&quot;<CODE>pobj</CODE>.&quot;</P>
<P>
<A NAME="IX_VI_bounds:Viewing with vistree in Swat">
 </A>
<A NAME="IX_classes Swat command:in Tutorial example">
 </A>
<A NAME="IX_Classes:debugging in Tutorial example">
 </A>
Next let's try another exploratory Swat command:</P>
<PRE CLASS="SwatDisplay">[tutorial:0] 9 =&gt; <STRONG>classes</STRONG>
TutorialProcessClass (@10, 42b8h:0040h), off ui::UserClassStructures::GenProcessClass
[tutorial:0] 10 =&gt;</PRE>
<P>
<A NAME="IX_cup Swat command:in Tutorial example">
 </A>
The <CODE>
classes</CODE>
 command lists all classes created by the application. To view the class hierarchy for a particular class, use the <CODE>
cup</CODE>
 (&quot;class up&quot;) command.</P>
<PRE CLASS="SwatDisplay">[tutorial:0] 10 =&gt; <STRONG>cup @10</STRONG>
dgroup::TutorialProcessClass (@11, 42b8h:0040h)
ui::UserClassStructures::GenProcessClass (@12, 30c4h:11e6h)
geos::kcode::ProcessClass (@13, 153dh:a9d5h)
geos::kcode::MetaClass (@14, 153dh:a8edh)
[tutorial:0] 11 =&gt;</PRE>
<P>
As shown above, you can use the shortcut reference (the &quot;@number&quot;) with the <CODE>
cup</CODE>
 command or you can use the class name or reference address, <EM>
e.g.</EM>, <CODE>
cup TutorialProcessClass</CODE>
 or <CODE>
cup 42b8h:0040h</CODE>.</P>
<P>
Some other Swat commands you might want to try out:</P>
<DL>
<DT>
<STRONG>
help</STRONG>
</DT><DD>The <CODE>
help</CODE>
 command provides documentation on Swat commands. Try <CODE>
help stop</CODE>
.</DD>
<DT>
<STRONG>
apropos</STRONG>
</DT><DD>The <CODE>
apropos </CODE>
command allows you to search the Swat documentation by keyword. Try <CODE>
apropos instance</CODE>
.</DD>
<DT>
<STRONG>
heapspace</STRONG>
<A NAME="IX_heapspace Swat command:in Tutorial example">
 </A>
</DT><DD>The <CODE>
heapspace</CODE>
 command tells you the amount of memory your application requires; you may recall that this value goes in your <STRONG CLASS="fileName">
.</STRONG>
GP file on the <CODE>
heapspace</CODE>
 line. Because this value should reflect a worse-case scenario, it's important to run this command several times towards the end of development so that the figure is accurate.</DD>
<DT>
<STRONG>
handles tutorial</STRONG></DT><DD>
<A NAME="IX_handles Swat command:in Tutorial example"> </A>
The <CODE>
handles</CODE>
 command scans the entire memory heap and returns information about all handles used by the application.</DD>
</DL>
<P>
In <A HREF="addcode_swat.htm">the next chapter</A>, you'll begin by editing the source code, so prepare to switch over to your editor window.</P>
<HR>

<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="index.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child -->| <A HREF="tutorial_source.htm"><IMG SRC="../../docImages/down.gif" ALT="Up" BORDER="0"></A>
<!-- to previous --> | <A HREF="startgeos.htm"><IMG SRC="../../docImages/prev.gif" BORDER="0" ALT="Prev: ">Tutorial Part 1: Compiling</A>
<!-- to next --> | <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/next.gif" BORDER="0" ALT="Next: ">Tutorial Part 3: Adding Procedural Code</A> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->

</BODY>
</HTML>







