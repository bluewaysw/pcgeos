<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD>

<!-- $Id: addcode_source.htm,v 1.6 97/12/08 16:53:24 lawrence Exp $ -->
<META NAME="copyright" CONTENT="Copyright 1997 GEOWORKS">
<!-- <META NAME="description" CONTENT=""> -->
<!-- <META NAME="keywords" CONTENT=""> -->
<LINK REL="STYLESHEET" HREF="../../docHelpers/style.css">
<LINK REV="MADE" HREF="mailto:doc-feedback@geoworks.com">

<TITLE>Tutorial Part 3 Source Code</TITLE></HEAD>
<BODY BGCOLOR="#ffffff">


<H1 CLASS="sectionTitle">
<A NAME="13885">
 </A>
Tutorial Part 3 Source Code</H1>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/prevUp.gif" ALT="Next" BORDER="0">Tutorial Part 3: Adding Procedural Code</A>
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
<P>Here is the source code for the application discussed in this chapter.
Pieces of the code which have been added or changed from 
that in the previous chapter are called out in <B>bold</B>.</P>
<UL>
<LI><A HREF="#gp">TUTORIAL.GP</A>
<LI><A HREF="#goc">TUTORIAL.GOC</A>
</UL>

<A NAME="gp"> </A>
<H2>TUTORIAL.GP</H2>
<PRE># Permanent name: This is required by Glue to set the permanent name
# and extension of the geode. The permanent name of a library is what
# goes in the imported library table of a client geode (along with the
# protocol number). It is also what Swat uses to name the patient.
#
name     tutorial.app</PRE>
<PRE># Long filename: this name can displayed by the system. &quot;EC &quot; is
# prepended to this when the error-checking version is linked by Glue.
#
longname &quot;Tutorial Sample Application&quot;</PRE>
<PRE># Token: The four-letter name is used by the system to locate the
# icon for this application in the token database. The tokenid
# number corresponds to the manufacturer ID of the program's author
# for uniqueness of the token. Since this is a sample application, we
# use the manufacturer ID for the SDK, which is 8.
#
tokenchars &quot;TUTO&quot;
tokenid    8</PRE>
<PRE># Specify geode type: This geode is an application, and will have
# its own process (thread).
#
type   appl, process, single</PRE>
<PRE># Specify class name for application thread. Messages sent to the
# application thread (a.k.a. &quot;process&quot; when specified as the output
# of a UI object) will be handled by this process class.
#
class  TutorialProcessClass</PRE>
<PRE># Specify application object. This is the object that serves as
# the top-level UI object in the application.
#
appobj TutorialApp</PRE>
<PRE># Specify for which platform this application will be compiled.
# Glue uses this to make sure that the libraries we are using
# (listed below) are available for this platform.
# In this case, the specified platform is the Nokia 9000i Communicator
#
platform n9000v20</PRE>
<PRE># Heapspace: This is roughly the non-discardable memory usage
# (in paragraphs (16 bytes/paragraph)) of the application and any
# transient libraries that it depends on, plus an additional
# amount for thread activity. To find the heapspace for an
# application, use the Swat &quot;heapspace&quot; command.
#
heapspace 3K</PRE>
<PRE># Libraries: list which libraries are used by the application.
# The foam library is for the Nokia 9000i Communicator only.
#
library geos
library ui
library foam</PRE>
<PRE># Resources: list all resource blocks which are used by the
# application whose allocation flags can't be inferred by Glue.
# Usually this is needed only for object blocks, fixed code
# resources, or data resources that are read-only. Standard
# discardable code resources do not need to be mentioned.
#
resource APPRESOURCE ui-object
resource INTERFACE   ui-object</PRE>
<A NAME="IX_export .gp file keyword:in Tutorial example"></A>
<PRE><B>#
# Any classes that we define in our application must be exported
# here for glue to process them.
#
export TutorialViewClass</B></PRE>

<A NAME="goc"> </A>
<H2>TUTORIAL.GOC</H2>
<PRE>/********************************************************************
 *		Include Files
 *******************************************************************/
    @include &lt;stdapp.goh&gt;
    @include &lt;foam.goh&gt;</PRE>
<A NAME="IX_Constants:in Tutorial example"></A>
<PRE><B>/********************************************************************
 *		Constants
 *******************************************************************/
      /*
       * These constants are used in the TutorialDraw function.
       */
    #define TEXT_POINT_SIZE  48.0 /* point size */
    #define TEXT_ROTATION   -15   /* angle of rotation (degrees) */
    #define TEXT_X_POSITION  30   /* x position, in document coords */
    #define TEXT_Y_POSITION   0   /* y position, in document coords */</B></PRE>
<PRE>/********************************************************************
 *		Class Definitions
 *******************************************************************/
      /*
       * Here we define &quot;TutorialProcessClass&quot; as a subclass of the
       * system provided &quot;GenProcessClass&quot;. As this application is
       * launched, an instance of this class will be created, and
       * will handle all application-related events (messages). The
       * application thread will be responsible for running this
       * object, meaning that whenever this object handles a message,
       * we will be executing in the application thread.
       *
       * You will find no object in this file declared to be of this
       * class. Instead, it is specified as the class for the
       * application thread in &quot;tutorial.gp&quot;.
       */
    @class TutorialProcessClass, GenProcessClass;
      /*
       * Define messages for this class here. Most commonly, UI
       * objects will send these messages to the application thread
       * when they've been activated by the user.
       */
    @endc; /* end of class definition */

<B>      /*
       * We subclass GenViewClass here because we need to
       * intercept a message for our GenView object.
       */
    @class TutorialViewClass, GenViewClass;
    @endc; /* end of class definition */</B></PRE>
<PRE>/********************************************************************
 *		Class Declarations
 *******************************************************************/
      /*
       * Each object class requires a &quot;class record&quot; be stored in
       * fixed memory for it. The class record is used by the GEOS
       * message system for the delivery of messages sent to an
       * object of the class. The class record needs to be defined
       * in the file where the objects of that class are defined.
       * The @classdecl GOC directive tells GOC to create the class
       * record here.
       *
       * The neverSaved flag is necessary because ProcessClass
       * objects are hybrid objects. It tells the system that no
       * object of this class will ever be loaded from or stored to
       * a state file.
       */
    @classdecl TutorialProcessClass, neverSaved;
<B>    @classdecl TutorialViewClass;</B></PRE>
<PRE>/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

  /*
   *    Application Object
   *
   * The very top-level generic object of an application MUST be
   * a GenApplication object. The tutorial.gp file contains the &quot;appobj&quot;
   * statement which indicates that this &quot;TutorialApp&quot; object is in
   * fact the top-level UI object.
   *
   * This object should be in its own resource, as it is all that
   * need be in memory when the application is iconified. As such,
   * its resource should be as small as possible.
   *
   * FoamSubApplicationClass is for the Nokia 9000i Communicator
   * only. It adds special behavior for that platform.
   */
@object FoamSubApplicationClass TutorialApp = {
      /*
       * While the application object isn't shown on the screen,
       * it has a list of VisMonikers for three purposes:
       *   1) The GenPrimary (see below) inherits the moniker
       *      when it comes up on screen.
       *   2) When GeoManager needs to display an icon for the
       *      application, and there's none for it in the Token
       *      Database, it launches the app and sends a message
       *      to the application object to install its list of
       *      monikers in the token database under the
       *      application's token.
       *   3) When the GenPrimary is minimized, it uses the most
       *      appropriate graphical moniker from this list for the
       *      application's icon. If there's an abbreviated-text
       *      moniker in the list, that's used as the icon title.
       *      Else any regular-text moniker is used.
       */
    GI_visMoniker = list { @TutorialTextMoniker };

      /*
       * The GenApplication object has at least one child:
       * the main application window.
       */
    GI_comp = @TutorialPrimary;

      /*
       * The main window should appear on-screen when the application
       * is launched, so place it on the GAGCNLT_WINDOWS GCN list.
       * This causes the application object to bring it on-screen at
       * the appropriate time.
       */
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TutorialPrimary;
}

@visMoniker TutorialTextMoniker = &quot;C Tutorial&quot;;
@localize &quot;Program Title&quot;;

@end AppResource;</PRE>
<PRE>/********************************************************************
 *		Interface Resource
 * This resource is for miscellaneous UI objects.
 *******************************************************************/
@start Interface;

  /*
   *    Primary window
   *
   * Every application has at least one GenPrimary object.
   * This object serves as the main window of the application.
   * Inside this window, various UI components, such as menus
   * or lists, can be placed.
   */
@object GenPrimaryClass TutorialPrimary  = {
		/*
		 * This window has two children:
		 * the GenView object and the Close button (see below).
		 */
	GI_comp = @TutorialView, @TutorialCloseTrigger;
}

  /*
   *    GenView object
   *
   * This GenView object creates a window where the application can
   * display portions of the document as necessary. As we want this
   * window to be scrollable, the specific UI will create scroll
   * bars with which the user can interact. Whenever a portion of
   * the window needs to be redrawn, the GenView object will
   * invalidate a portion of the window, causing a MSG_META_EXPOSED
   * to be sent to the application. The application will draw the
   * document into the window as requested. The window keeps track
   * of a mask, which is used to clip the application's drawing
   * operations, so that only the invalid portion of the window is
   * drawn to.
   */
@object TutorialViewClass TutorialView = {
      /*
       * Make view scrollable in X and Y and ensure that it never
       * gets larger than the thing being displayed within it.
       */
<B>    GVI_horizAttrs = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;</B>

      /*
       * When the contents of this view (i.e. the document) must be
       * updated, the UI should send a MSG_META_EXPOSED to the
       * TutorialProcessClass object.
       */
    GVI_content = process;

<B>      /*
       * Specify the dimensions of the document being displayed
       * within the view.
       */
<A NAME="IX_GIV_docBounds:in Tutorial example"></A>
    GVI_docBounds = {
        0,
        0,
        1000,
        1000
    };</B>
}</PRE>
<PRE>	/*
	 *    Close trigger
	 *
	 * On certain systems we should provide a way to exit the
	 * application. On the Nokia 9000i Communicator we have a
	 * close trigger like this one.
	 */
@object ComplexMonikerClass TutorialCloseTrigger = {
	ComplexMoniker = GenTriggerClass;
	CMI_topText = CMT_CLOSE;

		/*
		 * The next two instance fields are part of the
		 * GenTriggerClass. They specify the recipient object
		 * and the message that will be sent to that object
		 * when this trigger is activated.
		 */
	GTI_destination = @TutorialApp;
	GTI_actionMsg = MSG_FSA_RETURN_TO_LAUNCHER;

		/*
		 * The specific UI uses this combination of hints
		 * to place this trigger on the right side of the
		 * Nokia 9000i Communicator's screen.
		 */
	HINT_SEEK_MENU_BAR;
	HINT_SEEK_REPLY_BAR;
	HINT_SEEK_SLOT = 3;
}</PRE>
<PRE>@end Interface;</PRE>

<B>
<PRE>/********************************************************************
 *		Function Definitions
 *******************************************************************/

/********************************************************************
 *              TutorialDraw
 ********************************************************************
 * SYNOPSIS:	 Redraws the entire document, given a graphics state
 *		 through which to draw.
 * CALLED BY:	 (INTERNAL) TutorialProcess::MSG_META_EXPOSED
 * RETURNS:      void
 * SIDE EFFECTS: Various aspects of the gstate are altered.
 * STRATEGY:     First set the font used by this gstate. Then
 *               set the text color. Using the constant angle lets
 *               rotate the gstate. To finish up, draw the text
 *               text to the gstate.
 *******************************************************************/
void
<A NAME="IX_GStateHandle:in Tutorial example"></A>
<A NAME="IX_GStates:in Tutorial example"></A>
TutorialDraw( GStateHandle gstate )
  /*
   * gstate - GState to draw to.
   */
{

<A NAME="IX_GrSetFont():in Tutorial example"></A>
<A NAME="IX_Fonts:in Tutorial example"></A>
<A NAME="IX_MakeWWFixed() macro:in Tutorial example"></A>
      /*
       * First change some of the default GState values,
       * such as font and point size.
       */
    GrSetFont( gstate, FID_DTC_URW_SANS, MakeWWFixed( TEXT_POINT_SIZE ) );

<A NAME="IX_GrApplyRotation():in Tutorial example"></A>
      /*
       * Apply a rotation to the transformation matrix,
       * so the text will be drawn at an angle.
       */
    GrApplyRotation( gstate, MakeWWFixed( TEXT_ROTATION ) );

<A NAME="IX_GrDrawText():in Tutorial example"></A>
      /*
       * Draw some text onto the document.
       */
    GrDrawText( gstate, TEXT_X_POSITION, TEXT_Y_POSITION,
                &quot;The quick brown fox jumps over the lazy dog.&quot;,
                0 );
} /* TutorialDraw */</PRE>
<PRE>/********************************************************************
 *		Code for TutorialProcessClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_EXPOSED
 ********************************************************************
 * SYNOPSIS:	 Redraw the recently-exposed portion of the View.
 *               See the Objects Reference book for more information
 *               on this message and its parameters.
 * PARAMETERS:	 WindowHandle win
 * RETURNS:      void
 * SIDE EFFECTS: The invalid region of the window is cleared out.
 * STRATEGY:	 This message is sent by the windowing system when a
 *	    	 portion of the GenView has become invalid, either
 *	    	 because a window that was obscuring it has been moved,
 *	    	 or because someone called GrInvalRect. We redraw the
 *               entire document, after telling the graphics system
 *               we're drawing to the invalid portion of the window.
 *
 *******************************************************************/
<A NAME="IX_@method:in Tutorial example[;method:in Tutorial example]"></A>
<A NAME="IX_MSG_META_EXPOSED:in Tutorial example"></A>
@method TutorialProcessClass, MSG_META_EXPOSED
{
      /*
       * gstate - This is a handle to the graphics state
       *          that we'll use to draw to the view.
       */
    GStateHandle gstate;

<A NAME="IX_GrCreateState():in Tutorial example"></A>
      /*
       * Get a default graphics state that we can use while drawing.
       */
    gstate = GrCreateState( win );

<A NAME="IX_GrBeginUpdate():in Tutorial example"></A>
      /*
       * Start a window update. This tells the windowing system
       * that we are in the process of drawing to the invalid portion
       * of this window. GrBeginUpdate/GrEndUpdate are necessary only
       * when handling MSG_META_EXPOSED. For drawing at other times,
       * all you need do is create a graphics state and draw through it.
       */
    GrBeginUpdate( gstate );

      /*
       * Draw the pattern into the window (pass the GState). Breaking
       * the exposure and general drawing into two routines allows the
       * display to be updated by other routines without having to
       * invalidate the window.
       */
    TutorialDraw( gstate );

<A NAME="IX_GrEndUpdate():in Tutorial example"></A>
<A NAME="IX_GrDestroyState():in Tutorial example"></A>
      /*
       * Now indicate that we are done drawing to the invalid area
       * and free the gstate.
       */
    GrEndUpdate( gstate );
    GrDestroyState( gstate );
} /* MSG_META_EXPOSED */

/* This is here to work around a bug in the Borland C 5.0 compiler. */
@method TutorialProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{

    return( @callsuper() );
}</PRE>
<PRE>/********************************************************************
 *		Code for TutorialViewClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_KBD_CHAR
 ********************************************************************
 * SYNOPSIS:     We intercept this message to add the scrolling
 *               behavior to the GenView. Normally this would work
 *               in GEOS but the Nokia 9000i Communicator has the
 *               scrolling disabled in GenViewClass.
 * PARAMETERS:   word character
 *               word flags
 *               word state
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     We first check the parameters to see if this
 *               keypress is one we are interested in. It has to be
 *               a &quot;control&quot; key, and must not be a key release
 *               (i.e. the user released the key after holding it).
 *               If both of these conditions are true we can then
 *               use a switch statement to see which key is being
 *               pressed and send the appropriate message to the
 *               GenView object.
 *******************************************************************/
<A NAME="IX_MSG_META_KBD_CHAR:in Tutorial example"></A>
<A NAME="IX_GenViewClass:subclassed in Tutorial example"></A>
@method TutorialViewClass, MSG_META_KBD_CHAR
{
      /*
       * theChar - A copy of the character with only the
       *           low byte. The high byte of character
       *           has some extra flags we don't need here.
       */
    byte        theChar;

      /*
       * Arrow keys and scroll buttons are control characters.
       * We handle first press and repeat presses of those keys.
       */
    if ( ( ( character &gt;&gt; 8 ) == CS_CONTROL ) &amp;&amp;
         ( flags &amp; ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) ) ) {
        theChar = character &amp; 0xFF;

        switch ( theChar ) {

        case VC_PREVIOUS:
              /* This handles the Page Up key. */
            @send self::MSG_GEN_VIEW_SCROLL_PAGE_UP();
            break;

        case VC_UP:
              /* This handles the up arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_UP();
            break;

        case VC_NEXT:
              /* This handles the down arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_PAGE_DOWN();
            break;

        case VC_DOWN:
              /* This handles the up arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_DOWN();
            break;

        case VC_RIGHT:
              /* This handles the right arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_RIGHT();
            break;

        case VC_LEFT:
              /* This handles the left arrow key. */
            @send self::MSG_GEN_VIEW_SCROLL_LEFT();
            break;

        default:
<A NAME="IX_@callsuper:in Tutorial example"></A>
              /*
               * Pass on other control chars to default handler.
               */
            @callsuper();
        } /* switch */
    } else {
          /*
           * Pass on all other chars to default handler.
           */
        @callsuper();
    }
} /* MSG_META_KBD_CHAR */</PRE>
</B>
<HR>
<!-- This blob is a bunch of standard links: up, back, index, etc. -->
<!-- up to top -->|&nbsp;<A HREF="../../index.htm"><IMG SRC="../../docImages/upTop.gif" ALT="Up: " BORDER="0">GEOS SDK TechDocs</A>
<!-- up to parent -->| <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/up.gif" ALT="Up" BORDER="0"></A>
<!-- down to first child --> 
<!-- to previous --> | <A HREF="addcode_swat.htm"><IMG SRC="../../docImages/prevUp.gif" ALT="Next:" BORDER="0">Tutorial Part 3: Adding Procedural Code</A>
<!-- to next --> 
<HR>
<!-- That blob was a bunch of standard links: up, back, index, etc. -->
</BODY>
</HTML>


