/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1990 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  Preferences -- UI description
 * FILE:	  prefmgr.ui
 *
 * AUTHOR:  	  Cheng-Yew Tan: Nov 15, 1990
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	11/15/90  cheng	    Initial version
 *
 * DESCRIPTION:
 *	This is the UI description file for Preferences
 *
 *
 *	$Id: prefmgr.ui,v 1.9 98/05/15 17:49:00 gene Exp $
 *
 ***********************************************************************/

/*---------------------------------------------------------------------------
	CONSTANTS DEFINITIONS
---------------------------------------------------------------------------*/

#define _NIKE 0
#define _NIKE_EUROPE 0

#include "generic.uih"
#include "spool.uih"
#include "config.uih"
#include "spell.uih"

#ifdef PREFMGR
#ifdef GPC_VERSION
/* GPC versions */
/* #include "mkrGPCPrefMgr.ui"
   #include "mkrGPCPrefMgrT.ui" */
#include "mkrGPC.ui"
#include "mkrGPCTiny.ui"
#include "mkrPrefPnt.ui"
#include "mkrPrefTxt.ui"
#else
#include "mkrPrefMgr.ui"
#include "mkrPrefMgrTiny.ui"
#endif
#else
#include "mkrMyOpt.ui"
#endif


#ifndef USEROPT
#include "mkrModem.ui"
#ifndef GPC_VERSION
#include "mkrPrinter.ui"
#include "mkrText.ui"
#endif
#endif

#ifdef	MULTIPLE_PRINTER_DRIVER_TYPES
#define	_MULTIPLE_PRINTER_DRIVER_TYPES -1
#else
#define	_MULTIPLE_PRINTER_DRIVER_TYPES 0
#endif

class PrefTitledTrigger = GenTrigger {
	default genAttributes = default +initiatesBusyState;
}

class PrefNotifyDialog = PrefDialog {
	openHandler = fptrComp : 0;
	closeHandler = fptrComp : 0;
}

class	PrefMgrApplication = GenApplication {
	static wordComp : 0;
}

#ifdef GPC_ONLY
class	PrefMgrGenPrimary = GenPrimary {
}
#endif

#ifdef GPC_VERSION
class   PrefDebugGenInteraction = GenInteraction {
}
class   PrinterGenDynamicList = GenDynamicList {
}
#endif

class PrefSerialDialog = PrefInteraction {
}

/******************************************************************************

	MainUI

******************************************************************************/

start	AppResource;

/*
 *	Application object
 */

PrefMgrApp = PrefMgrApplication {

#ifdef MYOPT
	appFeatures = "mask PMF_HARDWARE or mask PMF_SYSTEM or mask PMF_USER";
#else
#ifdef HARDOPT
	appFeatures = "mask PMF_HARDWARE";
#else
#ifdef SYSOPT
	appFeatures = "mask PMF_SYSTEM or mask PMF_USER";
#else
#ifdef	USEROPT
	appFeatures = "mask PMF_USER";
#else
	appFeatures = "PrefMgrFeatures";
#endif
#endif
#endif
#endif
	appOptFlags = default +multipleInitFileCategories;
	children = PrefMgrPrimary,
			PrefMgrOtherDialogs;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = PrefMgrPrimary;

#ifndef USEROPT
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
		PrinterTest;			/* The PrintControl */
#endif

#ifdef PREFMGR
	moniker = list {
#ifdef GPC_VERSION
		PrefMgrTextMoniker,
		GPCMoniker,
		GPCTinyMoniker,
#else
		PrefMgrTextMoniker,
		PrefMgrLCMoniker,
		PrefMgrLMMoniker,
		PrefMgrSCMoniker,
		PrefMgrSMMoniker,
		PrefMgrTinyTCMoniker,
		PrefMgrTinyTMMoniker
#endif
	}
#else
	moniker = list {
		PrefMgrTextMoniker,
		MyOptLCMoniker,
		MyOptLMMoniker,
		MyOptSCMoniker,
		MyOptSMMoniker,
		MyOptSCGAMoniker,
		MyOptTMMoniker,
		MyOptTCGAMoniker
	}
#endif


	hints = {
		INIT_FILE_KEY(features),
#ifdef MYOPT
		ATTR_GEN_HELP_FILE {
			char "optsmy  ",0
		}
#else
#ifdef SYSOPT
		ATTR_GEN_HELP_FILE {
			char "optssys ",0
		}
#else
#ifdef HARDOPT
		ATTR_GEN_HELP_FILE {
			char "optshard",0
		}
#else
#ifdef USEROPT
		ATTR_GEN_HELP_FILE {
			char "optsuser",0
		}
#else
#ifdef GPC_VERSION
		ATTR_GEN_HELP_FILE {
			char "prefmgr",0
		}
#endif
#endif
#endif
#endif
#endif
	}
}

/* Dialogs that don't need to go anywhere in particular, but need to
be part of the generic tree */

PrefMgrOtherDialogs = GenInteraction {
#ifndef USEROPT
	children = SerialPortDialog,
			TextDialog,
			ModemDialog
			, PrinterDialog
			;
#endif
}


#ifdef MYOPT
	visMoniker PrefMgrTextMoniker = "My Options";
#else
#ifdef HARDOPT
	visMoniker PrefMgrTextMoniker = "Hardware Options";
#else
#ifdef SYSOPT
	visMoniker PrefMgrTextMoniker = "System Options";
#else
#ifdef	USEROPT
	visMoniker PrefMgrTextMoniker = "User Options";
#else
#ifdef GPC_ONLY
	visMoniker PrefMgrTextMoniker = "Preferences";
	visMoniker PrefMgrText2Moniker = "Preferences: Enhanced Mode";
#else
	visMoniker PrefMgrTextMoniker = "Preferences";
#endif
#endif
#endif
#endif
#endif

end AppResource;

start	MainUI;

/*
 *	PrefMgrPrimary
 */
#ifdef GPC_ONLY
PrefMgrPrimary = PrefMgrGenPrimary {
#else
PrefMgrPrimary = GenPrimary {
#endif
#ifdef MYOPT
	moniker = "My Options";
#else
#ifdef HARDOPT
	moniker = "Hardware Options";
	
#else
#ifdef SYSOPT
	moniker = "System Options";
#else
#ifdef	USEROPT
	moniker = "User Options";
#endif
#endif
#endif
#endif
	children =
#ifdef GPC_ONLY
	        DebugModeDB,
#endif
		PrefMgrScrollingView;
	hints = {
		ATTR_GEN_WINDOW_KBD_OVERRIDE {
			word	KO_NO_KEYBOARD
		},
		HINT_SIZE_WINDOW_AS_DESIRED,
/* New attrs for GPC that seem useful to everyone */
		HINT_PRIMARY_NO_FILE_MENU,
		ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE,
		HINT_DISPLAY_NOT_RESIZABLE,
		HINT_CENTER_WINDOW,
/* End of new attrs */
		HINT_CENTER_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_HELP_CONTEXT {
			char "TOC",0
		}
	}
}

PrefMgrScrollingView = GenView {
	output = PrefMgrContent;
	viewAttributes = default +genericContents,
				 +sameColorAsParentWin;
	vertAttributes = scrollable, sizeAMultipleOfIncrement;
	horizAttributes = sizeAMultipleOfIncrement;
	horizIncrement = 92;
	vertIncrement = 62;

	hints = {
		HINT_INITIAL_SIZE {
			SpecWidth <SST_PIXELS, 92*4>
			SpecHeight <SST_PIXELS, 62*4>
		}
	}
}

PrefMgrContent = GenContent {
	children = PrefMgrDialogGroup;
	contentAttrs = sameWidthAsSubview;
#if 0
	hints = {
		HINT_CONTENT_KEEP_FOCUS_VISIBLE
	}
#endif
}

PrefMgrDialogGroup = GenInteraction ignoreDirty {
	type = organizational;

#ifdef PREFMGR
	children = 
		ModemTrigger,
		PrinterTrigger,
		TextTrigger;
#endif

#ifdef MYOPT
	children = 
		ModemTrigger,
		PrinterTrigger,
		TextTrigger;
#endif

#ifdef SYSOPT
	children = 
		TextTrigger;
#endif

#ifdef HARDOPT
	children = 
		ModemTrigger,
		PrinterTrigger;
#endif

	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_ALLOW_CHILDREN_TO_WRAP,
		HINT_WRAP_AFTER_CHILD_COUNT {
			word	4
		}
	}
}

#ifndef USEROPT

visMoniker PrinterTextMoniker = "Printer";

PrinterTrigger = PrefTitledTrigger ignoreDirty {
	action = MSG_GEN_INTERACTION_INITIATE, PrinterDialog;
	moniker = list {
		PrinterTextMoniker,
#ifdef GPC_VERSION
		PrefPntMoniker
#else
		PrinterHCMoniker,
		PrinterLCMoniker,
		PrinterLMMoniker,
		PrinterLCGAMoniker
#endif
	}
}

visMoniker ModemTextMoniker = "Modem";

ModemTrigger = PrefTitledTrigger ignoreDirty {
	action = MSG_GEN_INTERACTION_INITIATE, ModemDialog;
	moniker = list {
		ModemTextMoniker,
		ModemHCMoniker,
		ModemLCMoniker,
		ModemLMMoniker,
		ModemLCGAMoniker
	}
}


visMoniker TextTextMoniker = "Text";

TextTrigger = PrefTitledTrigger ignoreDirty {
	action = MSG_GEN_INTERACTION_INITIATE, TextDialog;
	moniker = list {
		TextTextMoniker,
#ifdef GPC_VERSION
		PrefTxtMoniker
#else
		TextHCMoniker,
		TextLCMoniker,
		TextLMMoniker,
		TextLCGAMoniker
#endif
	}
}

#endif

end	MainUI;


/******************************************************************************

	PrinterUI

******************************************************************************/

#ifndef USEROPT

/* Include the GlobalPC logo for the printer test sheet */

#ifdef GPC_ONLY
start	GPCLogoResource, data;
#include "mkrGPCLogo.ui"
end	GPCLogoResource;
#endif

start	PrinterUI, notDetachable;

PrinterDialog = PrefNotifyDialog {
	moniker = "Printer";
	prefInteractionAttrs = default +loadOptionsOnInitiate;
	type = command;

	children = PrinterTitleGroup, 
		PrinterSubgroup, 
#ifndef GPC_VERSION
		PrinterInstall, 
		PrinterEdit, 
		PrinterDefault,
		PrinterDelete, 
		PrinterTest, 
#else
	        PrinterDefaultText,
#endif
		PrinterClose,
		VerifyStatusBox,
		PrinterInstallEditDialog;

	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
#ifdef GPC_VERSION
		HINT_NO_TALLER_THAN_CHILDREN_REQUIRE,
#endif
		ATTR_GEN_HELP_CONTEXT {
			char "dbPrinter",0
		} 
	}
	openHandler = VisOpenPrinter;
}


/*
 *	PrinterGroup
 */

PrinterTitleGroup = GenInteraction {
	children = PrinterTitle, PrinterHelp;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#ifdef DO_PIZZA
		, HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}

PrinterTitle = TitledGlyph {
	moniker = list {
		PrinterTextMoniker,
#ifdef GPC_VERSION
		PrefPntMoniker
#else
		PrinterHCMoniker,
		PrinterLCMoniker,
		PrinterLMMoniker,
		PrinterLCGAMoniker
#endif
	}
}

PrinterHelp = GenText {
	genAttributes = readOnly;
	text = "Use these options to install, configure, and test your printer (or printers).";
	hints = {
		  HINT_FIXED_SIZE {
#ifdef DO_PIZZA
			SpecWidth <SST_PIXELS, 450>
#else
			SpecWidth <SST_PIXELS, 350>
#endif
			SpecHeight <>
		  }
	}

}

PrinterSubgroup = GenInteraction {
	children =
		PrinterSubSubgroup,
#ifdef GPC_VERSION
	        PrintSubLevelGroup;
#else
		PrinterSizeSummons;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

#ifdef GPC_VERSION
PrintSubLevelGroup = GenInteraction {
    children = PrinterSizeSummons, PrinterDefault;
    hints = {
	HINT_ORIENT_CHILDREN_HORIZONTALLY
    }
}
#endif
#ifdef GPC_ONLY
DebugModeDB = PrefDebugGenInteraction {
    moniker = "Enhanced Mode";
    attributes = default +notUserInitiatable;
    visibility = dialog;
    children = DebugModeText, NoDebugModeText, SwitchDebug, SwitchNoDebug, NoSwitch,
	       DebugActivatedDB;
    hints = {
	HINT_NO_TALLER_THAN_CHILDREN_REQUIRE
    }
}
NoDebugModeText = GenText {
    genAttributes = default +readOnly;
    genStates = default -usable;
    text = "\\\"Enhanced Mode\\\" allows you full access to the directories of your computer as well as several other features that may be useful for trouble-shooting.\\\r\\\rTo switch to Enhanced Mode, your computer will shut down and start up again.  Any unsaved changes you have in open documents will be lost; please be sure to save any changes first.\\\r\\\rDo you want to switch to Enhanced Mode now?";
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
	    SpecHeight <>
	},
	ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE
    }
}
DebugModeText = GenText {
    genAttributes = default +readOnly;
    genStates = default -usable;
    text = "Your computer is currently running in Enhanced Mode.  To switch to Standard Mode, your computer will shut down and start up again.  Any unsaved changes you have in open documents will be lost; please be sure to save any changes first.\\\r\\\rDo you want to switch to Standard Mode now?";
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
	    SpecHeight <>
	},
	ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE
    }
}
SwitchDebug = GenTrigger {
    moniker = 'S', "Switch";
    genStates = default -usable;
    action = MSG_PDGI_SET_DEBUG_MODE, DebugModeDB;
    hints = {
	HINT_SEEK_REPLY_BAR
    }
}
SwitchNoDebug = GenTrigger {
    moniker = 'S', "Switch";
    genStates = default -usable;
    action = MSG_PDGI_SET_NO_DEBUG_MODE, DebugModeDB;
    hints = {
	HINT_SEEK_REPLY_BAR
    }
}
NoSwitch = GenTrigger {
    moniker = 'D', "Don't Switch";
    hints = {
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    InteractionCommand IC_DISMISS
	},
	HINT_SEEK_REPLY_BAR
    }
}
DebugActivatedDB = GenInteraction {
    attributes = default +notUserInitiatable;
    visibility = dialog;
    type = notification;
    children = DebugModeActivatedText, ShutdownTrigger;
}
DebugModeActivatedText = GenText 
{
    genAttributes = default +readOnly;
    text = "You are now switching to Enhanced Mode.  Your computer will shut down and start up again.  To switch back later, open Preferences, and then press the E key on your keyboard while holding down the Ctrl button.";
    hints = {
	HINT_FIXED_SIZE {
	    SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
	    SpecHeight <>
	},
	ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE
    }
}
ShutdownTrigger = GenTrigger {
    moniker = 'O', "Ok";
    action = MSG_PDGI_SYS_SHUTDOWN, DebugModeDB;
    hints = {
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
	    InteractionCommand IC_OK
	},
	HINT_SEEK_REPLY_BAR
    }
}
#endif

PrinterSubSubgroup = GenInteraction {
	children =
		PrinterInstalledList,
#ifdef GPC_VERSION
	        PrinterRightHandGroup;
	hints = {
   	HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	    HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
#else
		PrinterDefaultText;
#endif
}

#ifdef GPC_VERSION
PrinterRightHandGroup = GenInteraction {
    moniker = "";  /* Make an empty line for spacing reason */
    children = PrinterInstall, PrinterEdit, PrinterDelete, PrinterTest;
	 hints = {
	 HINT_PLACE_MONIKER_ABOVE
    }
}
#endif

#ifdef GPC_VERSION
PrinterInstalledList = PrinterGenDynamicList {
#else
PrinterInstalledList = GenDynamicList {
#endif
	moniker = "Printers Installed:";
	queryMsg = MSG_PRINTER_REQUEST_MONIKER;
	destination = process;
	hints = {
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_FIXED_SIZE {
#ifdef DO_PIZZA
			SpecWidth <SST_AVG_CHAR_WIDTHS, 67>
#else
 #ifdef GPC_VERSION
			SpecWidth <SST_AVG_CHAR_WIDTHS, 40>
 #else
			SpecWidth <SST_AVG_CHAR_WIDTHS, 55>
 #endif
#endif
#ifdef GPC_VERSION
			SpecHeight <SST_LINES_OF_TEXT, 6>
			word	6
#else
			SpecHeight <SST_LINES_OF_TEXT, 3>
			word	3
#endif
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG { 
			word MSG_PRINTER_SELECTED
		}
	}
}

PrinterDefaultText = GenText {
	genAttributes = readOnly;
	moniker = "Default Printer";
	textDisplayAttributes = default
		+singleLineText;
	genStates = default -usable;
	hints = {
#ifdef GPC_VERSION
	        HINT_DRAW_IN_BOX,
		ATTR_GEN_TEXT_DEFAULT_PARA_ATTR {
		    word DEF_PARA_ATTR_CENTER
		},
#else
		HINT_PLACE_MONIKER_ABOVE,
#endif
		HINT_FIXED_SIZE {
#ifdef GPC_VERSION
			SpecWidth <SST_AVG_CHAR_WIDTHS, 45>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, 60>
#endif
			SpecHeight <>
		}
	}
}

PrinterInstall = GenTrigger {
	moniker = 'N', "New";
	action = MSG_PRINTER_ATTEMPT_INSTALL, process;
	hints = {
#ifndef GPC_VERSION
		HINT_SEEK_REPLY_BAR,
#else
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER,
#endif
	  	HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

PrinterEdit = GenTrigger {
#ifdef GPC_VERSION
	moniker = 'M', "Modify";
#else
	moniker = 'E', "Edit";
#endif
	action = MSG_PRINTER_ATTEMPT_EDIT, process;
	genStates = default -enabled;
	hints = {
#ifndef GPC_VERSION
		HINT_SEEK_REPLY_BAR,
#else
		HINT_CENTER_MONIKER,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}


#ifdef GPC_VERSION
chunk   HelpOnHelp = "The selected printer is already the default.";
#endif

PrinterDefault = GenTrigger {
#ifdef GPC_VERSION
	moniker = 'S', "Set as Default Printer";
#else
	moniker = 'M', "Make Default";
#endif
	action = MSG_PRINTER_MAKE_DEFAULT, process;
	genStates = default -enabled, -usable;
#ifndef GPC_VERSION
	hints = {
		HINT_SEEK_REPLY_BAR
	}
#endif
}

PrinterDelete = GenTrigger {
#ifdef GPC_ONLY
	moniker = "Delete";
#else
	moniker = 'l', "Delete";
#endif
	action = MSG_PRINTER_DELETE, process;
	genStates = default -enabled;
	hints = {
#ifndef GPC_VERSION
		HINT_SEEK_REPLY_BAR
#else
		HINT_CENTER_MONIKER,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}

PrinterClose = GenTrigger {
#ifdef GPC_ONLY
	moniker = 'D', "Done";
#else
	moniker = 'C', "Close";
#endif
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			InteractionCommand IC_DISMISS
		},
		HINT_SEEK_REPLY_BAR
	}
}

PrinterTest = PrintControl vardataReloc {
	printAttributes =
		graphicsOutput,
		textOutput,
		defaultQuality medium;
	fromPage = 1;
	toPage = 1;
	firstPage = 1;
	lastPage = 1;
	printOutput = process;
	docNameOutput = process;
	genStates = default -enabled;
	hints = {
		ATTR_GEN_CONTROL_APP_UI { UN_OPTR PrinterTestTrigger},
#ifndef GPC_VERSION
		HINT_SEEK_REPLY_BAR,
#else
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#endif
		ATTR_GEN_CONTROL_PROHIBIT_UI {
		word (mask PRINTCF_PRINT_TRIGGER or mask PRINTCF_FAX_TRIGGER)
		},
		ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI {
		word (mask PRINTCTF_PRINT_TRIGGER or mask PRINTCTF_FAX_TRIGGER)
		}
	}
}

PrinterTestTrigger = GenTrigger {
	moniker = 'T', "Test";
	action = MSG_PRINTER_INITIATE_TEST, process;
	genStates = default -usable;
	genAttributes = default +initiatesBusyState;
	hints = {
#ifndef GPC_VERSION
		HINT_SEEK_REPLY_BAR
#else
		HINT_CENTER_MONIKER,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}

VerifyStatusBox = GenInteraction {
	attributes = default +modal, +notUserInitiatable;
	children = VerifyStatusGlyph;
	type = organizational;
	visibility = dialog;
}

VerifyStatusGlyph = GenGlyph {
	moniker = "Verifying Port Selection";
}

/****************************************
 * Printer Edit/Install Dialog Box
 ****************************************/

visMoniker PrinterNewMoniker	= "New Printer";
visMoniker PrinterEditMoniker	= "Edit Printer";

PrinterInstallEditDialog = PrefInteraction {
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	type = properties;
	children =
#if	_MULTIPLE_PRINTER_DRIVER_TYPES

#ifdef GPC_ONLY
#else
		PrinterTypeList,
#endif
#endif
		PrinterInstallComp1,
		PrinterInstallComp2,
		PrinterInstallEditApply;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_INTERACTION_SINGLE_USAGE,
#ifndef GPC_VERSION
		HINT_INTERACTION_COMPLEX_PROPERTIES,
#endif
		ATTR_GEN_HELP_CONTEXT {
			char "dbPrtrEdit",0
		} 
	}
}

PrinterInstallEditApply = GenTrigger {
	/* moniker set by specific UI */
	action = MSG_PRINTER_INSTALL_EDIT_APPLY, process;
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

#if	_MULTIPLE_PRINTER_DRIVER_TYPES
PrinterTypeList = PrefItemGroup {
	numSelections  = 1;
	selection = PDT_PRINTER;
	moniker = "Type of Device";
	children =
		PrinterTypePrinter,
		PrinterTypePlotter,
		PrinterTypeFax,
		PrinterTypeCamera,
		PrinterTypeOther;

	destination = process;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_PRINTER_CHANGE_DRIVER_TYPE
		},
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_NOT_PROPERTY
	}
}

PrinterTypePrinter = GenItem {
	moniker = "Printer";
	identifier = PDT_PRINTER;
}

PrinterTypePlotter = GenItem {
	moniker = "Plotter";
	identifier = PDT_PLOTTER;
}

PrinterTypeFax = GenItem {
	moniker = "Fax";
	identifier = PDT_FACSIMILE;
}

PrinterTypeCamera = GenItem {
	moniker = "Camera";
	identifier = PDT_CAMERA;
}

PrinterTypeOther = GenItem {
	moniker = "Other";
	identifier = PDT_OTHER;
}
#endif

PrinterInstallComp1 = PrefInteraction {
	children =
		PrinterList,
	        PrinterPortList;

	hints = {HINT_ORIENT_CHILDREN_HORIZONTALLY}
}

PrinterInstallComp2 = PrefInteraction {
	children =
		PrinterNameText,
	        PrinterOptionsGroup;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

PrinterOptionsGroup = PrefInteraction {
#if DO_PIZZA
	children =
		SerialPortOptions;
#else
	children =
		SerialPortOptions,
		PrinterConnectedItemGroup;
#endif
#ifdef GPC_VERSION
	genStates = default -usable;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

#if DO_PIZZA
#else
PrinterConnectedItemGroup = PrefItemGroup {
	moniker = "Connected:";
	children = PrinterConnectedAlways, PrinterConnectedSometimes;
	selection = "FALSE";
	numSelections = 1;
	hints = {
		INIT_FILE_KEY(intermittent),
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN
	}
}

PrinterConnectedAlways = GenItem {
	moniker = 'A', "Always";
	identifier = "FALSE";
}

PrinterConnectedSometimes = GenItem {
	moniker = 'S', "Sometimes";
	identifier = "TRUE";
}
#endif

PrinterList = PrefTocList {
	tocFlags = default +extendedDeviceDrivers;
	tokenChars = "'PRDR'";
	moniker = "Printer:";
	destination = process;
	hints = {
		ATTR_GEN_PATH_DATA {
			GenFilePath <SP_PRINTER_DRIVERS, 0>
		},
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DEFAULT_FOCUS, 
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_PRINTER_DEVICE_SELECTED
		},
		INIT_FILE_KEY(device),
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 45>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		},
		ATTR_PREF_ITEM_GROUP_ENABLE { 
			PrefEnableData <0,
				PrinterInstallEditApply,
				mask PEF_DISABLE_IF_NONE >
		}
	}
}

PrinterPortList = PrefItemGroup {
	prefAttrs = default -saveIfUsable;
	initFileFlags = default +useItemStrings;
	moniker = "Port:";
	children = Lpt1Item,
		Lpt2Item,
		Lpt3Item,
		Com1Item,
		Com2Item,
		Com3Item,
		Com4Item,
		FileItem,
		UnknownItem;
#ifdef GPC_ONLY
	genStates = default -usable;
#endif
	destination = process;
	selection = "offset lpt1Info";
	numSelections = 1;
	hints = {
		INIT_FILE_KEY(port),
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_PRINTER_PORT_SELECTED
		},
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_FIXED_SIZE {
			SpecWidth  <SST_AVG_CHAR_WIDTHS, 20>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		},
		/* If nothing else is selected, then select "unknown"
		   one */
		ATTR_PREF_ITEM_GROUP_OVERRIDE {
			word offset nothingInfo
		}
	}
}
/**************************************************************************
 *	The identifiers in this list are offsets into a list of
PrefPrinterPortInfo structures in Preferences/Common/prefVariable.def
 **************************************************************************/ 

Lpt1Item = PrefPortItem {
	moniker = "LPT1 (parallel)";
	identifier = "offset lpt1Info";
	initFileString = "LPT1";
	type = PPIT_PARALLEL;
	portMask = "mask PDM_LPT1";
}

Lpt2Item = PrefPortItem {
	moniker = "LPT2 (parallel)";
	identifier = "offset lpt2Info";
	initFileString = "LPT2";
	type = PPIT_PARALLEL;
	portMask = "mask PDM_LPT2";
}

Lpt3Item = PrefPortItem {
	moniker = "LPT3 (parallel)";
	identifier = "offset lpt3Info";
	initFileString = "LPT3";
	type = PPIT_PARALLEL;
	portMask = "mask PDM_LPT3";
}

Com1Item = PrefPortItem {
	moniker = "COM1 (serial)";
	identifier = "offset com1Info";
	initFileString = "COM1";
	type = PPIT_SERIAL;
	portMask = "mask SDM_COM1";
}

Com2Item = PrefPortItem {
	moniker = "COM2 (serial)";
	identifier = "offset com2Info";
	initFileString = "COM2";
	type = PPIT_SERIAL;
	portMask = "mask SDM_COM2";
}

Com3Item = PrefPortItem {
	moniker = "COM3 (serial)";
	identifier = "offset com3Info";
	initFileString = "COM3";
	type = PPIT_SERIAL;
	portMask = "mask SDM_COM3";

}

Com4Item = PrefPortItem {
	moniker = "COM4 (serial)";
	identifier = "offset com4Info";
	initFileString = "COM4";
	type = PPIT_SERIAL;
	portMask = "mask SDM_COM4";
}

FileItem = PrefStringItem {
	moniker = "To File";
	identifier = "offset fileInfo";
	initFileString = "FILE";
}

UnknownItem = PrefStringItem {
	moniker = "Unknown";
	identifier = "offset nothingInfo";
	initFileString = "UNKNOWN";
}

PrinterNameText = GenText {
	moniker = "Printer Name:";
	text = " No printer drivers found ";
	textDisplayAttributes = 
		singleLineText,
		noWordWrapping,
		allowTextOffEnd,
		useTabForNavigation;
	maxLength = "MAX_INITFILE_CATEGORY_LENGTH-1";
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

SerialPortOptions = GenTrigger {
	moniker = "Serial Port Options";
	action = MSG_GEN_INTERACTION_INITIATE, SerialPortDialog;
	genStates = default -enabled;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

/****************************************
 * Default document & paper sizes
 ****************************************/

PrinterSizeSummons = PrefInteraction {
#ifdef GPC_VERSION
	moniker = "Set Default Page Size";
#else
	moniker = "Default Sizes";
#endif
	children =
		PSPageSizeControl,
		PSApply;
	type = properties;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char "dbDefSizes",0
		}
	}
}

PSApply = GenTrigger {
	/* moniker set by specific UI */
	action = MSG_PRINTER_SET_DEFAULT_SIZE, process;
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

PSPageSizeControl = PageSizeControl {
	moniker = "Default Page Size";
	pageSizeAttrs = "mask PZCA_ACT_LIKE_GADGET or \
			 mask PZCA_INITIALIZE";
	type = organizational;
	visibility = subGroup;
	hints = {
		HINT_DRAW_IN_BOX,
		ATTR_GEN_CONTROL_REQUIRE_UI {
			word	mask PSIZECF_MARGINS
		},
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	mask PSIZECF_PAGE_TYPE
		}
	}
}

end	PrinterUI;

start	Strings, data;

chunk	PrinterNameExistsErrorString = "The printer name \\\"\\\1\\\" already exists. Please provide a different name for this printer, and check to see if the printer is already installed.";

chunk	PrinterNameTooLongErrorString = "The printer name \\\"\\\1\\\" is too long. Please provide a different name for this printer.";

chunk	PrinterNotSelectedErrorString = "No printer was selected, so no change has been made.";

end	Strings;


/******************************************************************************
	ModemUI
******************************************************************************/

start	ModemUI, notDetachable;

ModemDialog = PrefNotifyDialog {
	moniker = "Modem";
	prefInteractionAttrs = default +loadOptionsOnInitiate;
	type = properties;

	children = ModemTitleGroup, ModemSubgroup,
			ModemOK;
	/* Cancel and Reset buttons are added automatically */

	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "My Modem",0
		},
		ATTR_GEN_HELP_CONTEXT {
			char "dbModem",0
		} 
	
	}

	openHandler = VisOpenModem;
}

ModemOK = GenTrigger {
	action = MSG_MODEM_APPLY, process;
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}


ModemTitleGroup = GenInteraction {
	children = ModemTitle, ModemHelp;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
#ifdef DO_PIZZA
		, HINT_EXPAND_WIDTH_TO_FIT_PARENT
#endif
	}
}

ModemTitle = TitledGlyph {
	moniker = list {
		ModemTextMoniker,
		ModemHCMoniker,
		ModemLCMoniker,
		ModemLMMoniker,
		ModemLCGAMoniker
	}
}

ModemHelp = GenText {
	genAttributes = readOnly;
	text = "Use these options to install and configure your modem.";
	hints = {
		  HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, 350>
			SpecHeight <SST_LINES_OF_TEXT, 4>
		  },
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

ModemSubgroup = PrefInteraction {
	children = ModemNameText, 
		ModemPortGroup, 
		ModemListOptions,
		ModemPortOptionGroup
#ifndef GPC_ONLY
	        , ModemInitString
#endif
	        ;
}
ModemPortGroup = PrefItemGroup {
	initFileFlags = default +useItemStrings;
	moniker = 'P',"Serial Port:";
	children = ModemPortNone, 
			ModemPort1, 
			ModemPort2, 
			ModemPort3, 
			ModemPort4;
	destination = process;
	numSelections = 1;
	selection = -1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_MODEM_PORT_SELECTED
		},
		/* Disable the dial type list and the port options if
		"none" selected */

		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData < -1,
					ModemDialTypeList,
					mask PEF_DISABLE_IF_SELECTED>
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData	<-1,
					 ModemPortOptions,
					mask PEF_DISABLE_IF_SELECTED>
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData	<-1,
					 ModemFaxList,
					mask PEF_DISABLE_IF_SELECTED>
		},
#ifndef GPC_ONLY
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData	<-1,
					 ModemInitString,
					mask PEF_DISABLE_IF_SELECTED>
		},
#endif
		ATTR_GEN_INIT_FILE_KEY {
			char "port",0
		}
	}
}

ModemPortNone = PrefStringItem {
	moniker = 'N', "None";
	identifier = -1;
}

ModemPort1 = PrefPortItem {
	moniker = '1', "COM 1";
	identifier = SERIAL_COM1;
	initFileString = "COM1";
	portMask = "mask SDM_COM1";
	type = PPIT_SERIAL;
}

ModemPort2 = PrefPortItem {
	moniker = '2', "COM 2";
	identifier = SERIAL_COM2;
	initFileString = "COM2";
	portMask = "mask SDM_COM2";
	type = PPIT_SERIAL;
}

ModemPort3 = PrefPortItem {
	moniker = '3', "COM 3";
	identifier = SERIAL_COM3;
	initFileString = "COM3";
	portMask = "mask SDM_COM3";
	type = PPIT_SERIAL;
}

ModemPort4 = PrefPortItem {
	moniker = '4', "COM 4";
	identifier = SERIAL_COM4;
	initFileString = "COM4";
	portMask = "mask SDM_COM4";
	type = PPIT_SERIAL;
}

ModemListOptions = PrefInteraction {
	children = ModemDialTypeList,
		   ModemFaxList;
	hints = { 
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}



ModemDialTypeList = PrefItemGroup {
	numSelections  = 1;
	selection = MDT_TONE;
	moniker = 'D',"Dial Type:";
	children = ModemDialTone, ModemDialPulse;
	destination = process;
	hints = { 
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char "toneDial",0
		}
	}
}

ModemDialTone = GenItem {
	moniker = "Tone";
	identifier = MDT_TONE;
}

ModemDialPulse = GenItem {
	moniker = "Pulse";
	identifier = MDT_PULSE;
}

ModemFaxList = PrefItemGroup {
	numSelections = 1;
	selection = FALSE;
	moniker = 'F', "Can Fax:";
	children = ModemFaxYes, ModemFaxNo;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char	"fax", 0
		}
	}
}

ModemFaxYes = GenItem {
	moniker = "Yes";
	identifier = TRUE;
}

ModemFaxNo = GenItem {
	moniker = "No";
	identifier = FALSE;
}

ModemNameText = GenText {
	moniker = "Modem Name:";
	text = "My Modem";
	textDisplayAttributes = singleLineText, noWordWrapping, \
		allowTextOffEnd, useTabForNavigation;
	maxLength = "FILE_LONGNAME_LENGTH";
	genStates = default -usable;
	hints = {ATTR_GEN_TEXT_ALPHA_NUMERIC}
}

ModemPortOptionGroup = GenInteraction {
        children =
	    ModemPortOptions;
	hints = {
	    HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	    HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

ModemPortOptions = GenTrigger {
	moniker = 'S',"Speed and Format Options";
	action = MSG_GEN_INTERACTION_INITIATE, SerialPortDialog;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

#ifndef GPC_ONLY

ModemInitString = PrefText {
        moniker = "Init String:";
	textDisplayAttributes = default +singleLineText;
	hints = {
	    ATTR_GEN_TEXT_MAKE_UPPERCASE,
	    ATTR_GEN_INIT_FILE_CATEGORY {
		char	"services", 0
	    },
	    ATTR_GEN_INIT_FILE_KEY {
		char	"modemInit", 0
	    }
	}
}

#endif

end	ModemUI;

/**************************************************************************
 	TextUI -- Not saved to state, because why should it be?  Also,
we don't want it to be on-screen when returning from state, as it will
crash. 
 **************************************************************************/ 

start TextUI, notDetachable;

TextDialog = PrefNotifyDialog {
	moniker = "Text";
	prefInteractionAttrs = default +loadOptionsOnInitiate;
	type = properties;
	children = TextTitleGroup, TextSubgroup,
			TextOK, 
#ifndef GPC_ONLY
	    TextReset, 
#endif
	    TextCancel;

	openHandler = VisOpenText;
	closeHandler = TextCloseEditBox;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
		ATTR_GEN_INIT_FILE_CATEGORY {
			char "text",0
		},
		ATTR_GEN_HELP_CONTEXT {
			char "dbText",0
		} 
	}
}

TextTitleGroup = GenInteraction {
	children = TextTitle, TextHelp;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
	}
}

TextTitle = TitledGlyph {
	moniker = list {
		TextTextMoniker,
#ifdef GPC_VERSION
		PrefTxtMoniker
#else
		TextHCMoniker,
		TextLCMoniker,
		TextLMMoniker,
		TextLCGAMoniker
#endif
	}
}

TextHelp = GenText {
	genAttributes = readOnly;
	text = "Change these options to configure the system-wide text functions like Spell Checking.";
	hints = {
		  HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, 200>
			SpecHeight <>
		  },
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

TextSubgroup = PrefInteraction {
#if DO_PIZZA
	children = TextSpellGroup;
#else
	children = TextGeneralOptions, 
			TextSpellGroup;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}
#if ! DO_PIZZA
TextGeneralOptions = PrefInteraction {
	children = TextSmartQuotesOption;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}
TextSmartQuotesOption = PrefItemGroup {
	moniker = "Smart Quotes:";
	selection = FALSE;
	numSelections = 1;
	children = TextSmartQuotesEnable, TextSmartQuotesDisable;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char "smartQuotes",0
		}
	}
}

TextSmartQuotesEnable = GenItem {
	moniker = "On";
	identifier = TRUE;
}

TextSmartQuotesDisable = GenItem {
	moniker = "Off";
	identifier = FALSE;
}
#endif
TextSpellGroup = PrefInteraction {
	moniker = "Spell Checker Options";
#ifdef GPC_ONLY
	children = TextCurrentDictionary, TextSpellTriggers;
#else
	children = TextSpellOptions, TextCurrentDictionary, TextSpellTriggers;
#endif
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_DRAW_IN_BOX
	}
}
TextCurrentDictionary = GenText {
	genAttributes = readOnly;
	moniker = "Current Dictionary:";
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 32>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
}

TextSpellTriggers = GenInteraction {
#ifdef GPC_ONLY
	children = ChooseDictionarySummonsTrigger,
	    EditUserDictionarySummonsTrigger, 
	    ChooseDictionarySummons, 
	    EditUserDictionarySummons;
#else
	children = EditUserDictionarySummonsTrigger,
	    ChooseDictionarySummonsTrigger,
	    EditUserDictionarySummons,
	    ChooseDictionarySummons;
#endif 
	hints = {
#ifndef GPC_ONLY
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
#else
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
#endif
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING
	}
}

ChooseDictionarySummonsTrigger = GenTrigger {
#ifdef GPC_VERSION
	moniker = 'M', "Choose Main Dictionary";
#else
	moniker = 'C', "Choose New Main Dictionary";
#endif
	action = MSG_GEN_INTERACTION_INITIATE, ChooseDictionarySummons;
	hints = {
#ifdef GPC_ONLY
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

EditUserDictionarySummonsTrigger = GenTrigger {
	moniker = 'E', "Edit User Dictionary";
	action = MSG_GEN_INTERACTION_INITIATE, EditUserDictionarySummons;
	hints = {
#ifdef GPC_ONLY
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER,
#endif
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

ChooseDictionarySummons = PrefNotifyDialog {
#ifdef GPC_VERSION
#ifndef GPC_ONLY
	moniker = 'M', "Choose Main Dictionary";
#endif
#else
	moniker = 'C', "Choose New Main Dictionary";
#endif
	children = ChooseDictionaryList, 
	    ChooseDictionaryDescription,
	    SelectDictionaryTrigger,
	    CancelDictionaryTrigger;
	type = properties;
	visibility = dialog;
	attributes = default +notUserInitiatable;
   hints = {
		HINT_INTERACTION_SINGLE_USAGE,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
#ifdef GPC_ONLY
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
#endif
		ATTR_GEN_HELP_CONTEXT {
			char "dbChooseDict",0
		}
	}

	openHandler = VisOpenChooseDictionary;
}

CancelDictionaryTrigger = GenTrigger {
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_DISMISS
		}
	}

}

SelectDictionaryTrigger = GenTrigger {
	moniker = 'U', "Use This Dictionary";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_APPLY
		}
	}

}

ChooseDictionaryList = GenDynamicList {
	moniker = "Select new dictionary:";
	hints = {
		HINT_PLACE_MONIKER_ABOVE,
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth	<SST_AVG_CHAR_WIDTHS, 43>
			SpecHeight	<SST_LINES_OF_TEXT, 7>
			word	7
		},
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_TEXT_UPDATE_DICTIONARY_DESCRIPTION
		}
	}
	queryMsg = MSG_TEXT_GET_DICTIONARY_LIST_MONIKER;
	applyMsg = MSG_TEXT_SET_DICTIONARY;
	destination = process;
}
ChooseDictionaryDescription = GenText {
	genAttributes = readOnly;
	hints = {
		  HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 52>
			SpecHeight <SST_LINES_OF_TEXT, 3>
		  },
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT
		}
}

EditUserDictionarySummons = EditUserDictionaryControl {
	/* Necessary because GenControl is disabled by default */
	genStates = default +enabled;
	attributes = default +notUserInitiatable;
	moniker = 'E', "Edit User Dictionary";
#ifdef GPC_ONLY
	hints = {
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}

#endif
}

TextSpellOptions = PrefInteraction {
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_LEFT_JUSTIFY_MONIKERS
	}
	children = TextSpellAutoSuggestOption,
			TextSpellAutoCheckSelectionsOption,
			TextSpellResetSkippedWordsOption;
}

TextSpellResetSkippedWordsOption = PrefItemGroup {
	moniker = "Reset Skipped Words List when Spell Check Complete:";
	children = TextSpellResetSkippedWordsEnable,
			TextSpellResetSkippedWordsDisable;
	selection = FALSE;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char "resetSkippedWordsWhenBoxCloses",0
		}
	}
}
TextSpellResetSkippedWordsEnable = GenItem {
	moniker = "Yes";
	identifier = TRUE;
}
TextSpellResetSkippedWordsDisable = GenItem {
	moniker = "No";
	identifier = FALSE;
}

TextSpellAutoSuggestOption = PrefItemGroup {
	moniker = "Automatically Suggest Spellings:";
	children = TextSpellAutoSuggestEnable,
			TextSpellAutoSuggestDisable;
	selection = FALSE;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char "autoSuggest",0
		}
	}
}
TextSpellAutoSuggestEnable = GenItem {
	moniker = "Yes";
	identifier = TRUE;
}
TextSpellAutoSuggestDisable = GenItem {
	moniker = "No";
	identifier = FALSE;
}

TextSpellAutoCheckSelectionsOption = PrefItemGroup {
	moniker = "Automatically Start Checking Selected Text:";
	children = TextSpellAutoCheckSelectionsEnable,
			TextSpellAutoCheckSelectionsDisable;
	selection = FALSE;
	numSelections = 1;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_ITEM_GROUP_INIT_FILE_BOOLEAN,
		ATTR_GEN_INIT_FILE_KEY {
			char "autoCheckSelections",0
		}
	}
}
TextSpellAutoCheckSelectionsEnable = GenItem {
	moniker = "Yes";
	identifier = TRUE;
}
TextSpellAutoCheckSelectionsDisable = GenItem {
	moniker = "No";
	identifier = FALSE;
}

TextOK = GenTrigger {
#ifdef GPC_ONLY
        moniker = 'C', "Change";
#endif
	action = MSG_TEXT_APPLY, process;
	/* no signalInteractionComplete, done manually */
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word IC_APPLY
		},
		HINT_SEEK_REPLY_BAR
	}
}
#ifndef GPC_ONLY
TextReset = GenTrigger {
	action = MSG_TEXT_RESET, process;
	/* no signalInteractionComplete */
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word IC_RESET
		},
		HINT_SEEK_REPLY_BAR
	}
}
#endif
TextCancel = GenTrigger {
#ifdef GPC_ONLY
        moniker = 'D', "Don't Change";
#endif
	/* moniker set by specific UI */
	action = MSG_TEXT_RESET, process;
	genAttributes = signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

end TextUI;





/******************************************************************************

	SerialUI -- this isn't a "module", but is used as a sub-dialog
of the Printer and Modem dialogs.  Before initiating this dialog, the
caller must send the text to the "ComPortText" object, and then send
it a status message (this will set the category of the dialog), before
initiating the dialog.

******************************************************************************/

start	SerialUI, notDetachable;

SerialPortDialog = PrefSerialDialog {

	moniker = "Serial Port Options";

	type = properties;
	visibility = dialog;
	attributes = default +modal, +notUserInitiatable;
	prefInteractionAttrs = default +loadOptionsOnInitiate,
				+saveOptionsOnApply;

	children = 
			ComPortText, 
			ComPortOptions,
			HardwareHandshakeGroup;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		HINT_INTERACTION_RELATED_PROPERTIES,
		ATTR_GEN_HELP_CONTEXT {
			char "dbSerial",0
		} 
	}

}


/*
 *	ComPortText
 */

ComPortText = GenText {
	genAttributes = readOnly;
	moniker = "Port Options For:";
}

/*
 *	ComPortOptions
 */

ComPortOptions = PrefInteraction {
	children = 
			BaudRateGroup,
			ParityList,
			WordLengthList, 
			StopBitsList, 
			HandshakeList;
	hints = {HINT_CENTER_CHILDREN_ON_MONIKERS}
}


/*
 *	BaudRateList
 */

BaudRateGroup = PrefInteraction {
	moniker = 'B', "Baud Rate:";
	children =
		BaudRateList;
}

BaudRateList = PrefItemGroup {
	initFileFlags = default +useItemMonikers;
	numSelections  = 1;
	selection = SB_300;
	children =
		Baud300Entry,
		Baud1200Entry,
		Baud2400Entry,
		Baud4800Entry,
		Baud9600Entry,
		Baud14400Entry,
		Baud19200Entry,
		Baud38400Entry,
		Baud57600Entry,
		Baud115200Entry
		;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"baudRate",0
		},
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}

}


Baud300Entry = GenItem {
	moniker = "300";

	identifier = SB_300;
}

Baud1200Entry = GenItem {
	moniker = "1200";
	identifier = SB_1200;
}

Baud2400Entry = GenItem {
	moniker = "2400";
	identifier = SB_2400;
}


Baud4800Entry = GenItem {
	moniker = "4800";
	identifier = SB_4800;
}

Baud9600Entry = GenItem {
	moniker = "9600";
	identifier = SB_9600;
}

Baud14400Entry = GenItem {
	moniker = "14400";
	identifier = SB_14400;
}

Baud19200Entry = GenItem {
	moniker = "19200";
	identifier = SB_19200;
}

Baud38400Entry = GenItem {
	moniker = "38400";
	identifier = SB_38400;
}

Baud57600Entry = GenItem {
	moniker = "57600";
	identifier = SB_57600;
}

Baud115200Entry = GenItem {
	moniker = "115200";
	identifier = SB_115200;
}


/*
 *	ParityList
 */

ParityList = PrefItemGroup {
	initFileFlags = default +useItemStrings;
	numSelections  = 1;
	moniker = 'y',"Parity:";
	children = 	ParityEvenEntry, 
			ParityOddEntry, 
			ParitySpaceEntry, 
			ParityMarkEntry, 
			ParityNoneEntry;
	selection = "SP_NONE shl offset SF_PARITY";
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"parity",0
		}
	}
}

ParityEvenEntry = PrefStringItem {
	moniker = "Even";
	identifier = "SP_EVEN shl offset SF_PARITY";
	initFileString = "even";
}

ParityOddEntry = PrefStringItem {
	moniker = "Odd";
	identifier = "SP_ODD shl offset SF_PARITY";
	initFileString = "odd";
}

ParitySpaceEntry = PrefStringItem {
	moniker = "Space";
	identifier = "SP_SPACE shl offset SF_PARITY";
	initFileString = "space";
}

ParityMarkEntry = PrefStringItem {
	moniker = "Mark";
	identifier = "SP_MARK shl offset SF_PARITY";
	initFileString = "mark";
}

ParityNoneEntry = PrefStringItem {
	moniker = "None";
	identifier = "SP_NONE shl offset SF_PARITY";
	initFileString = "none";
}

/*
 *	WordLengthList
 */

WordLengthList = PrefItemGroup {
	moniker = 'W',"Word Length:";
	initFileFlags = default +useItemMonikers
#if DO_DBCS
		, +numericMonikers
#endif
		;
	numSelections  = 1;
	children = WordLen5Entry, 
			WordLen6Entry, 
			WordLen7Entry, 
			WordLen8Entry;
	selection = "SL_8BITS";
	destination = process;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_SERIAL_SET_WORD_LENGTH
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <SL_5BITS,
					StopBits1_5Entry>
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <SL_5BITS,
					StopBits2Entry,
					mask PEF_DISABLE_IF_SELECTED>
		},
		ATTR_GEN_INIT_FILE_KEY {
			char	"wordLength",0
		}

	}
}

WordLen5Entry = GenItem {
	moniker = "5";
identifier = "SL_5BITS";
}

WordLen6Entry = GenItem {
	moniker = "6";
	identifier = "SL_6BITS";
}

WordLen7Entry = GenItem {
	moniker = "7";
	identifier = "SL_7BITS";
}

WordLen8Entry = GenItem {
	moniker = "8";
	identifier = "SL_8BITS";
}

/*
 *	StopBitsList
 */

StopBitsList = PrefItemGroup {
	initFileFlags = default +useItemMonikers;
	numSelections  = 1;
	moniker = 'i',"Stop Bits:";
	children = StopBits1Entry, StopBits1_5Entry, StopBits2Entry;
	selection = 0;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"stopBits",0
		}
	}

}

StopBits1Entry = GenItem {
	moniker = "1";
	identifier = SB_1;
}

StopBits1_5Entry = GenItem {
	moniker = "1.5";
	genStates = default -enabled;
	identifier = SB_1_5;
}

StopBits2Entry = GenItem {
	moniker = "2";
	identifier = SB_2;
}

/*
 *	HandshakeList
 */

HandshakeList = PrefItemGroup {
	initFileFlags = default +useItemStrings;
	moniker = 'H',"Handshake:";
	children = HandshakeNoneEntry,
		HandshakeHardwareEntry, 
		HandshakeSoftwareEntry; 
	hints = {
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word MSG_SERIAL_SET_HANDSHAKE_MODE
		},
		ATTR_PREF_ITEM_GROUP_OVERRIDE {
			word 0
		},
		ATTR_GEN_INIT_FILE_KEY {
			char	"handshake",0
		},
		ATTR_PREF_ITEM_GROUP_ENABLE {
			PrefEnableData <mask SFC_HARDWARE,
					HardwareHandshakeGroup>
		}
	}
	destination = process;
	selection = 0;
	numSelections = 1;
	behaviorType = nonExclusive;	
}

HandshakeHardwareEntry = PrefStringItem {
	moniker = 'H',"Hardware";
	identifier = "mask SFC_HARDWARE";
	initFileString = "hardware";
}

HandshakeSoftwareEntry = PrefStringItem {
	moniker = 'f', "Software (XON/XOFF)";
	identifier = "mask SFC_SOFTWARE";
	initFileString = "software";
}

HandshakeNoneEntry = PrefStringItem {
	moniker = 'N',"None";
	identifier = 0;
	initFileString = "none";
}

/*
 *	HardwareHandshakeGroup
 */

HardwareHandshakeGroup = PrefInteraction {
	genStates = default -enabled;
	children = HardwareHandshakeTitle, StopRemoteList, StopLocalList;
	hints = {HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_ON_MONIKERS,
		HINT_DO_NOT_USE_MONIKER}
}

HardwareHandshakeTitle = GenText {
	genAttributes = readOnly;
	text = "Hardware Handshaking Options:";
}

StopRemoteList = PrefItemGroup {
	initFileFlags = default +useItemStrings;
	behaviorType = nonExclusive;
	moniker = 'm',"Stop Remote:";
	children = DTREntry, RTSEntry;
	destination = process;
	selection = "mask SMC_RTS";
	numSelections = 1;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_SERIAL_SET_STOP_REMOTE
		},
		ATTR_GEN_INIT_FILE_KEY {
			char	"stopRemote",0
		}
	}
}

DTREntry = PrefStringItem {
	moniker = 'T', "DTR";
	identifier = "mask SMC_DTR";
	initFileString = "dtr";
}

RTSEntry = PrefStringItem {
	moniker = 'S',"RTS";
	identifier = "mask SMC_RTS";
	initFileString = "rts";
}

StopLocalList = PrefItemGroup {
	initFileFlags = default +useItemStrings;
	behaviorType = nonExclusive;
	moniker = 'L',"Stop Local:";
	children = CTSEntry, DCDEntry, DSREntry;
	numSelections = 1;
	selection = "mask SMS_CTS";
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"stopLocal",0
		}
	}
}

CTSEntry = PrefStringItem {
	moniker = 'C', "CTS";
	identifier = "mask SMS_CTS";
	initFileString = "cts";
}

DCDEntry = PrefStringItem {
	moniker = 'D', "DCD";
	identifier = "mask SMS_DCD";
	initFileString = "dcd";
}

DSREntry = PrefStringItem {
	moniker = 'R',"DSR";
	identifier = "mask SMS_DSR";
	initFileString = "dsr";
}

end	SerialUI;



start	Strings, data;

chunk VerifyErrorString = "An error was encountered while checking the printer or port.  Do you wish to install this combination anyway?";

chunk VerifyInstallBadString = "You may need to clear an error on this printer before you can print on it.";

#ifdef GPC_ONLY
chunk DebugCategory = "fileManager";
chunk DebugKey = "debug";
chunk DebugNoDriveLink = "noDriveLink";
chunk DebugNoDriveLinkSafe = "savedNoDriveLink";

chunk VersionNumberString = "GlobalPC System Information\\\r\\\rSoftware Version: \\\1\\\rSerial Number: \\\2";
#endif
end	Strings;

start PrefMgrStrings, data;

chunk parameterChangeConfirmation = data {
SBCS <        byte    'The system software will shut down and restart to change the ', 01h, '. Do you wish to proceed?', 0>
DBCS <        wchar    'The system software will shut down and restart to change the ', 01h, '. Do you wish to proceed?', 0>
}


chunk dictionaryChangeString = {spell check language}

/*-----------------------------------------------------------------------------

        PORT STRINGS

-----------------------------------------------------------------------------*/

chunk lpt1String = "LPT1";
chunk lpt2String = "LPT2";
chunk lpt3String = "LPT3";
chunk com1String = "COM1";
chunk com2String = "COM2";
chunk com3String = "COM3";
chunk com4String = "COM4";
chunk fileString = " to File";
chunk nothingString = "Unknown";


/*-----------------------------------------------------------------------------
				

        PRINTER STRINGS

-----------------------------------------------------------------------------*/

chunk testPrinterString1         = "System";
chunk testPrinterString2         = "printer test for";

chunk noPrinterNameString = " No printer drivers found ";

chunk spoolBusyString = "The printer is busy.\\\r\\\rError Code: PR-04";

#ifndef GPC_VERSION
chunk printerOnString = " on ";
#endif

chunk printDocNameString = "Test Page";



/*-----------------------------------------------------------------------------

        TEXT STRINGS

-----------------------------------------------------------------------------*/

chunk DefaultDictionaryName = {American English}

end PrefMgrStrings;

#endif
