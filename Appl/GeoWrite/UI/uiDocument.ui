/*
 * Project:	GeoWrite
 * File:	UI/uiDocument.ui
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	Tony Requist	    Initial version
 *	12/2023	  RainerB   Renamed from Writer to GeoWrite
 *
 *	This file contains the user interface description for the document
 * control.
 *
 *	$Id: uiDocument.ui,v 1.3 98/02/17 03:43:47 gene Exp $
 *
 */


/* ----------------------------------------------------------------------------
	UI Document Control
-----------------------------------------------------------------------------*/
start FileMenuUI;

#if _SUPER_IMPEX
WriteDocumentControl = WriteDocumentCtrl vardataReloc  {
#else
WriteDocumentControl = GenDocumentControl {
#endif
	/*
	 * Document file's token
	 */
#ifdef VS150
	documentTokenChars = "'W', 'P', 'd', 'C'";
#else

	documentTokenChars = "'W', 'D', 'A', 'T'";
#endif

	documentTokenID = "MANUFACTURER_ID_GEOWORKS";
	/*
	 * Template directory
	 */
#if DO_DBCS
	templateDir = "GeoWrite";
#else
	templateDir = "GeoWrite Templates";
#endif
	/*
	 * Special attributes: allow multiple open files, don't display
	 * name on primary (this will be handled via the display control)
	 */
	dcAttributes = default +multipleOpenFiles;
	features = default -displayNameOnPrimary;
	/*
	 * Text to display in the header area of the primary when no
	 * document is open.
	 */
	noNameText = "No Document";
	/*
	 * Pointer to the GenDocumentGroup
	 */
	appDC = WriteDocumentGroup;
	/*
	 * List of objects to enable/disable based on whether or not a
	 * document exists
	 */
	enableDisableList = WriteEnableList;
	/*
	 * Set user level dialog
	 */
/* no user level in New/Open dialog for GPC, we still need it for user level
   from options menu, though */
/* #if _NDO2000   jfh */
	userLevelDialog = SetUserLevelDialog;
/* #endif   jfh */
	/*
	 * Import and export UI
	 */
/* #if _NDO2000 || !_SUPER_IMPEX  jfh */
	importGroup = WriteImportControl;
	exportGroup = WriteExportControl;
/* #endif  jfh */
	/*
	 * Special strings
	 */
#ifdef GPC_ONLY
	dialogImportText = "/BImport:/B\\\rImport text from another word processor"
			   " to create a new document.";
	dialogUserLevelText = "/BChange Program Level:/B\\\rChange how simple or"
			      " complex you would like GeoWrite to be.";
#else
	dialogImportText = "Import:\\\rImport text from another word processor"
			   " to create a new document.";
	dialogUserLevelText = "Change Program Level:\\\rChange how simple or"
			      " complex you would like GeoWrite to be.";
#endif

#if _SUPER_IMPEX
	saveAsGroup = WriteFileTypeInteraction;
#endif
	hints = {
	    HINT_GEN_CONTROL_SCALABLE_UI_DATA { GenControlScalableUIEntry <
		 GCSUIC_SET_NORMAL_FEATURES_IF_APP_LEVEL,
		 UIIL_INTRODUCTORY,
		 GDC_SUGGESTED_INTRODUCTORY_FEATURES or mask GDCF_SAVE_AS>,
		<GCSUIC_SET_NORMAL_FEATURES_IF_APP_LEVEL,
		 UIIL_BEGINNING,
		 GDC_SUGGESTED_BEGINNING_FEATURES or mask GDCF_SAVE_AS>,
		<GCSUIC_SET_NORMAL_FEATURES_IF_APP_LEVEL,
		 UIIL_INTERMEDIATE,
		 GDC_SUGGESTED_INTERMEDIATE_FEATURES or mask GDCF_SAVE_AS>,
		<GCSUIC_SET_NORMAL_FEATURES_IF_APP_LEVEL,
		 UIIL_ADVANCED,
		 GDC_SUGGESTED_ADVANCED_FEATURES or mask GDCF_SAVE_AS>}
	}
} /* end of WriteDocumentControl */

chunk WriteEnableList = data {
#if LIMITED_FAX_SUPPORT
	UN_OPTR WriteFaxPrintControl
#endif
	UN_OPTR WritePrintControl
	UN_OPTR WritePageSizeControl
	UN_OPTR WritePageSetupDialog
	UN_OPTR LayoutMenu
	UN_OPTR WriteSearchReplaceControl
	UN_OPTR WriteSpellControl
	UN_OPTR ViewTypeSubGroup
}

#ifdef BATCH_RTF
WriteImportControl = SuperImpexImportControl vardataReloc {
#else
WriteImportControl = ImportControl vardataReloc {
#endif
	moniker = "Import Document";
/* #ifdef GPC_ONLY  jfh */
	attributes = default +notUserInitiatable;
/* #endif  jfh */
	importDataClasses = text;
	importDestination = WriteDocumentControl;
	importMessage = MSG_GEN_DOCUMENT_CONTROL_OPEN_IMPORT_SELECTED;
	hints = {
		ATTR_IMPORT_CONTROL_CANCEL_DESTINATION {
			UN_OPTR WriteDocumentControl
		},
		ATTR_IMPORT_CONTROL_CANCEL_MESSAGE {
			word MSG_GEN_DOCUMENT_CONTROL_IMPORT_CANCELLED
		},
#if _SUPER_IMPEX
#ifdef GPC_ONLY
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			UN_HPTR	FileMenuUI
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			byte	LAYER_PRIO_ON_BOTTOM
		}
#endif
#endif
	}
}

#ifdef BATCH_RTF
WriteExportControl = SuperImpexExportControl {
#else
WriteExportControl = ExportControl {
#endif
	moniker = "Export Document";
/*#ifdef GPC_ONLY jfh */
	attributes = default +notUserInitiatable;
/*#endif jfh */
	exportDataClasses = text;
	exportDestination = "TO_APP_MODEL";
	exportMessage = MSG_GEN_DOCUMENT_EXPORT;
#if _SUPER_IMPEX
#ifdef GPC_ONLY
	hints = {
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			UN_HPTR	FileMenuUI
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			byte	LAYER_PRIO_ON_BOTTOM
		}
	}
#endif
#endif
}

end FileMenuUI;

/* ----------------------------------------------------------------------------
	 Document Group
-----------------------------------------------------------------------------*/

/*
 * The GenDocumentGroup should be put in a resource of its own run by
 * the application thread.
 */

start AppDCUI;

WriteDocumentGroup = GenDocumentGroup {
	/*
	 * Name for untitled documents
	 */
#ifdef DO_DBCS
	defaultName = "GeoWrite Unt.";
#else
	defaultName = "GeoWrite Untitled";
#endif
	/*
	 * Document protocol
	 */
	protocolMajor = "DOCUMENT_PROTOCOL_MAJOR";
	protocolMinor = "DOCUMENT_PROTOCOL_MINOR";
	/*
	 * Document object to duplicate
	 */
	genDocument = WriteDocumentTemplate;
	/*
	 * Pointer to the GenDocumentControl
	 */
	uiDC = WriteDocumentControl;
	/*
	 * GenDisplay to automatically duplicate, GenDisplayGroup to attach
	 * duplicated displays to and GenView to attach documents to
	 */
	genDisplayGroup = WriteDisplayGroup;
	genDisplay = MainDisplay;
	genView = MainView;
	/*
	 * Mark that the file contains objects
	 */
	attributes = default +vmFileContainsObjects, +largeContent;
}

WriteHead = WriteGrObjHead {
	currentTool = "EditTextGuardianClass";
}

end AppDCUI;

/*-----------------------------------------------------------------------------
	Block to duplicate when showing the "Save As" dialog.
-----------------------------------------------------------------------------*/

#if _SUPER_IMPEX
start WriteDCExtraSaveAsUI;

WriteFileTypeInteraction = GenInteraction {
	moniker = "File Type:";
	genStates = default - usable;
	type = organizational;
	children = WriteFileTypeSelector;
}

WriteFileTypeSelector = GenItemGroup {
	children = 
		WriteItem,
		RtfItem,
		TxtItem;
	selection = WDFT_WRITE;
	numSelections = 1;
	destination = WriteDocumentControl;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_WRITE_DC_FILE_TYPE_CHANGED
		}
	}
}

WriteItem = GenItem {
/*#if _NDO2000  jfh */
	moniker = "GeoWrite Document";
/* #else   jfh
	moniker = "GlobalPC Writer Document";   */
/* #endif  jfh */
	identifier = WDFT_WRITE;
}

RtfItem = GenItem {
	moniker = "Rich Text Format (.RTF)";
	identifier = WDFT_RTF;
}

TxtItem = GenItem {
	moniker = "Plain Text Only (.TXT)";
	identifier = WDFT_TEXT;
}

end WriteDCExtraSaveAsUI;
#endif


/* ----------------------------------------------------------------------------
	 Block to duplicate when creating a document
-----------------------------------------------------------------------------*/

start DocumentTempUI;

chunk OpenMasterPageArray = data {
	ChunkArrayHeader <0, size OpenMasterPage, 0, size ChunkArrayHeader>
}

WriteDocumentTemplate = WriteDocument {
}

/*
 * The WriteColumnContentTemplate is duplicated as part of creating a
 * new document and is the content for the ruler that runs horizontally
 * across the top of the document.
 */

MainHorizontalContent = RulerContent {
	left = 0;
	top = 0;
	right = 8192;
	bottom = "TEXT_RULER_HEIGHT";
	attr = default -managed;
	optFlags = default -geometryInvalid, -updatePath;
	visCompGeoAttrs = default +customManageChildren;
	contentAttrs = sameHeightAsSubview, largeDocumentModel,
		      windowCoordinateMouseEvents;
}

/*
 * The WriteRowContentTemplate is duplicated as part of creating a
 * new document and is the content for the ruler that runs vertically
 * down the left side of the document.
 */

MainVerticalContent = RulerContent {
	left = 0;
	top = 0;
	right = "VIS_RULER_HEIGHT";
	bottom = 8192;
	attr = default -managed;
	optFlags = default -geometryInvalid, -updatePath;
	visCompGeoAttrs = default +customManageChildren;
	contentAttrs = sameWidthAsSubview, largeDocumentModel,
		       windowCoordinateMouseEvents;
}

end DocumentTempUI;

/* ----------------------------------------------------------------------------
	 Block to duplicate when creating a master page
-----------------------------------------------------------------------------*/

start MasterPageContentUI;

MasterPageContent = WriteMasterPageContent {
	left = 0;
	top = 0;
	right = "VIS_RULER_HEIGHT";
	bottom = 8192;
	attr = default -managed;
	visCompGeoAttrs = default +customManageChildren;
	optFlags = default -geometryInvalid, -updatePath;
	contentAttrs = sameWidthAsSubview, largeDocumentModel,
		       windowCoordinateMouseEvents;
}

MPHorizontalContent = RulerContent {
	left = 0;
	top = 0;
	right = 8192;
	bottom = "TEXT_RULER_HEIGHT";
	attr = default -managed;
	visCompGeoAttrs = default +customManageChildren;
	optFlags = default -geometryInvalid, -updatePath;
	contentAttrs = sameHeightAsSubview, largeDocumentModel,
		      windowCoordinateMouseEvents;
}

MPVerticalContent = RulerContent {
	left = 0;
	top = 0;
	right = "VIS_RULER_HEIGHT";
	bottom = 8192;
	attr = default -managed;
	visCompGeoAttrs = default +customManageChildren;
	optFlags = default -geometryInvalid, -updatePath;
	contentAttrs = largeDocumentModel, windowCoordinateMouseEvents;
}

end MasterPageContentUI;
