@include "PicAlbum.goh"
#include <Ansi/stdio.h>
@include <htmldrv.h>
#include <Library.h>
#include <resource.h>
#include <geode.h>
#include <awatcher.h>
#include <extgraph.h>
#include <Ansi/string.h>

extern VMFileHandle G_tempVMFile;

@classdecl PAThumbnailListClass;


@method PAThumbnailListClass, MSG_VIS_RECALC_SIZE {

	word itemsPerLine, lines;
	word thumbHeight;

	if(width == 0x8000) {

		width = 200;
	}

//	if(height == 0x8000) {
//
//		height = 1000;
//	}

	itemsPerLine = @call oself::MSG_PATL_CALC_ITEMS_PER_LINE(width);
	thumbHeight = (pself->PATLI_thumbHeight +
					2 * pself->PATLI_thumbVertBorder + 2);
	if(pself->PATLI_attrs & PATLA_SHOW_DESC_TEXT) {

		GStateHandle gstate;

		gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();

		thumbHeight += @call oself::MSG_SPEC_CONVERT_SIZE(
										 SST_LINES_OF_TEXT|1, gstate) + pself->PATLI_textHeight;
		GrDestroyState(gstate);
	}

	lines = (pself->PATLI_itemCount + (itemsPerLine - 1)) / itemsPerLine;

	height =
		(lines * (thumbHeight + pself->PATLI_vertSpace)) - pself->PATLI_vertSpace;
	height += pself->PATLI_vertBorder * 2;

	return MAKE_SIZE_DWORD(width, height);
}

@method PAThumbnailListClass, MSG_VIS_DRAW {

	word loopCount;
	word textHeight = 0;

	GrSaveState(gstate);
	GrSetLineColor(gstate, CF_INDEX, PA_THUMBNAIL_FRAME_COLOR, 0, 0);

	if(pself->PATLI_attrs & PATLA_SHOW_DESC_TEXT) {

		GStateHandle gstate;

		gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();

		textHeight += @call oself::MSG_SPEC_CONVERT_SIZE(
										 SST_LINES_OF_TEXT|1, gstate) + pself->PATLI_textHeight;
		GrDestroyState(gstate);
	}

	loopCount = 0;
	while(loopCount < pself->PATLI_itemCount) {

		@call oself::MSG_PATL_DRAW_ITEM(gstate, loopCount, textHeight);

		loopCount++;
	}

	GrRestoreState(gstate);
}

@method PATLDrawItem, PAThumbnailListClass, MSG_PATL_DRAW_ITEM {

	Rectangle rect;
	word cachePos;

	if(item < pself->PATLI_itemCount) {

		@call oself::MSG_PATL_GET_ITEM_AREA(item, &rect);

		if(@call oself::MSG_PATL_IS_ITEM_SELECTED(item)) {

			GrSetAreaColor(gstate, CF_INDEX, PA_THUMBNAIL_SELECTED_COLOR, 0, 0);

		} else {

			GrSetAreaColor(gstate, CF_INDEX, PA_THUMBNAIL_UNSELECT_COLOR, 0, 0);
		}

		GrFillRoundRect(gstate,
			rect.R_left, rect.R_top,
			rect.R_right - 1, rect.R_bottom - 1,
			pself->PATLI_cornerIndent);
		GrDrawRoundRect(gstate,
			rect.R_left, rect.R_top,
			rect.R_right - 1, rect.R_bottom - 1,
			pself->PATLI_cornerIndent);

		if(pself->PATLI_importHandle && (pself->PATLI_progressItem == item)) {

			word inset;
			word coloff;

			inset = 6;
			coloff = pself->PATLI_progressStep;
			while(inset < 20) {

				GrSetLineColor(gstate, CF_INDEX, coloff, 0, 0);
				GrDrawRect(gstate,
					rect.R_left + inset, rect.R_top + inset,
					rect.R_right - 1 - inset, rect.R_bottom - 1 - inset);

				inset += 2;
				coloff++;
				if(coloff == 16) {

					coloff = 0;
				}
			}
			GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);

		} else {

			PAAlbumIndexEntry *buffer;
			Bitmap *bmpPtr;

			buffer = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
			PAAlbumGetItem(&pself->PATLI_indexData, item, buffer);

			if(buffer->PAAIE_flags & PAAEF_THUMBNAIL_EXISTS) {

				if(pself->PATLI_indexData.PAAD_attrs.PAAA_flags & PAAF_STORE_NOTES) {

					bmpPtr = buffer->PAAIE_thumbnail;

				} else {

					bmpPtr = buffer->PAAIE_notes;
				}

				GrDrawBitmap(gstate,
					(rect.R_left + rect.R_right) / 2 - bmpPtr->B_width / 2,
					(rect.R_top + rect.R_bottom) / 2 - bmpPtr->B_height / 2, bmpPtr, 0);
			}
			if(buffer->PAAIE_flags & PAAEF_ERROR) {

				GrSetLineColor(gstate, CF_INDEX, C_RED, 0, 0);
				GrDrawLine(gstate,
					rect.R_left + 3, rect.R_top + 3,
					rect.R_right - 1 - 3, rect.R_bottom - 1 - 3);
				GrDrawLine(gstate,
					rect.R_right - 1 - 3, rect.R_top + 3,
					rect.R_left + 3, rect.R_bottom - 1 - 3);
				GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
			}

			MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);
		}

		if(pself->PATLI_attrs & PATLA_SHOW_DESC_TEXT) {

			TCHAR buf[5 + 1];

			rect.R_top =  rect.R_bottom + pself->PATLI_textHeight;
			rect.R_bottom += textHeight;

			sprintf(buf, "%u", item + 1);
			@call oself::MSG_PATL_DRAW_DESC_TEXT(gstate, item, &rect, buf);
		}
	}
}

@method PAThumbnailListClass, MSG_PATL_REDRAW_ITEM {

	word textHeight = 0;
	GStateHandle gstate;

	gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();

	if(pself->PATLI_attrs & PATLA_SHOW_DESC_TEXT) {


		textHeight = @call oself::MSG_SPEC_CONVERT_SIZE(
										 SST_LINES_OF_TEXT|1, gstate) + pself->PATLI_textHeight;
	}

	@call oself::MSG_PATL_DRAW_ITEM(gstate, item, textHeight);

	GrDestroyState(gstate);
}

@method PAThumbnailListClass, MSG_PATL_GET_OFFSET {

	word itemCount;
	word width;
	word thumbWidth;

	width = DWORD_WIDTH(@call oself::MSG_VIS_GET_SIZE()) + pself->PATLI_horizSpace;
	width -= 2 * pself->PATLI_horizBorder;
	thumbWidth = (pself->PATLI_thumbWidth +
					2 * pself->PATLI_thumbHorizBorder + 2);
	itemCount = @call oself::MSG_PATL_GET_ITEMS_PER_LINE();

	return (width -
		(itemCount * (thumbWidth + pself->PATLI_horizSpace))) / 2;
}

@method PAThumbnailListClass, MSG_PATL_GET_ITEMS_PER_LINE {

	word width;

	width = DWORD_WIDTH(@call oself::MSG_VIS_GET_SIZE());

	return @call oself::MSG_PATL_CALC_ITEMS_PER_LINE(width);
}

@method PAThumbnailListClass, MSG_PATL_CALC_ITEMS_PER_LINE {

	word thumbWidth;

	width -= (pself->PATLI_horizBorder * 2);
	thumbWidth = (pself->PATLI_thumbWidth +
					2 * pself->PATLI_thumbHorizBorder + 2);

	if((width % (thumbWidth + pself->PATLI_horizSpace)) >= thumbWidth) {

		width = (width / (thumbWidth + pself->PATLI_horizSpace)) + 1;

	} else {

		width /= thumbWidth + pself->PATLI_horizSpace;
	}

	return width;
}

@method PAThumbnailListClass, MSG_PATL_GET_ITEM_AREA {

	word offset;
	word itemsPerLine;
	word line;
	word thumbWidth, thumbHeight;
	word textHeight;

	thumbWidth = (pself->PATLI_thumbWidth +
					2 * pself->PATLI_thumbHorizBorder + 2);
	thumbHeight = (pself->PATLI_thumbHeight +
					2 * pself->PATLI_thumbVertBorder + 2);
	textHeight = 0;
	if(pself->PATLI_attrs & PATLA_SHOW_DESC_TEXT) {

		GStateHandle gstate;

		gstate = @call oself::MSG_VIS_VUP_CREATE_GSTATE();

		textHeight = @call oself::MSG_SPEC_CONVERT_SIZE(
										 SST_LINES_OF_TEXT|1, gstate) + pself->PATLI_textHeight;
		GrDestroyState(gstate);
	}
	offset = @call oself::MSG_PATL_GET_OFFSET();
	itemsPerLine = @call oself::MSG_PATL_GET_ITEMS_PER_LINE();
	line = item / itemsPerLine;

	rect->R_left = offset + pself->PATLI_horizBorder + (thumbWidth + pself->PATLI_horizSpace) * (item % itemsPerLine);
	rect->R_right = rect->R_left + thumbWidth;
	rect->R_top = (thumbHeight + textHeight + pself->PATLI_vertSpace) * line + pself->PATLI_vertBorder;
	rect->R_bottom = rect->R_top + thumbHeight;
}

@method PAThumbnailListClass, MSG_PATL_GET_ITEM_DATA_AREA {
}

@method PAThumbnailListClass, MSG_PATL_IS_ITEM_SELECTED {

	byte *p_selList = LMemDeref(ConstructOptr(HandleOf(oself), pself->PATLI_selectionList));

	return p_selList[item / 8] & (1 << (item & 7));
}

@method PAThumbnailListClass, MSG_PATL_DRAW_DESC_TEXT {

	word textWidth = GrTextWidth(gstate, text, 0);
	word fieldWidth = rect->R_right - rect->R_left;

	GrDrawText(gstate, rect->R_left + fieldWidth / 2 - textWidth / 2, rect->R_top, text, 0);
}

@method dummy, PAThumbnailListClass, MSG_PATL_IMPORT_THUMBNAIL {

	GeodeLoadError gle;
	word *cachePtr;
	FileLongName *listPtr, fname;
	PAAlbumIndexEntry *indexItem;

	if(importSession != pself->PATLI_currentSession) {

		return;
	}

	if(pself->PATLI_cachePos >= pself->PATLI_itemCount) {

		return;
	}

	cachePtr = LMemDerefHandles(HandleOf(oself), pself->PATLI_cacheList);
	item = cachePtr[pself->PATLI_cachePos];

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);

	PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);

	if(indexItem->PAAIE_flags & (PAAEF_THUMBNAIL_EXISTS | PAAEF_ERROR)) {

		/* try next thumbnail */
		pself->PATLI_cachePos++;

		if(pself->PATLI_open) {

			@send ,forceQueue+ oself::MSG_PATL_IMPORT_THUMBNAIL(0, importSession);

		} else {

			if(pself->PATLI_importGeode) {

				GeodeFreeLibrary(pself->PATLI_importGeode);
				pself->PATLI_importGeode = 0;
			}
		}
		MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);
		return;
	}
	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

	/* load the ImpGraph library if not already loaded */
	FilePushDir();
	FileSetStandardPath(SP_IMPORT_EXPORT_DRIVERS);

	if(!pself->PATLI_importGeode) {
#if ERROR_CHECK
		pself->PATLI_importGeode = GeodeUseLibrary("EC Breadbox Graphics Imp Library", MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR, &gle);
#else
		pself->PATLI_importGeode = GeodeUseLibrary("Breadbox Graphics Imp Library", MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR, &gle);
#endif
	}
	FilePopDir();

	if(pself->PATLI_importGeode) {


		/* start the import here */
		PAAlbumIndexEntry *indexItem;

		indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
		PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);
		strcpy(fname, indexItem->PAAIE_fileName);
		MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

		pself->PATLI_importHandle = PAImportStart(
			pself->PATLI_indexData.PAAD_disk,
			pself->PATLI_indexData.PAAD_path,
			fname,
			G_tempVMFile,
			pself->PATLI_importGeode,
			oself,
			MSG_PATL_IMPORT_STATUS);
		pself->PATLI_importSession = pself->PATLI_currentSession;

		if(pself->PATLI_importHandle) {

			/* start time for visual progress */
			pself->PATLI_progressTimer =
				TimerStart(
					TIMER_EVENT_CONTINUAL,
					oself,
					0,
					MSG_PATL_PROGRESS_STEP,
					15,
					&pself->PATLI_progressTimerId);

			pself->PATLI_progressStep = 0;
			pself->PATLI_progressItem = item;

		} else {

			GeodeFreeLibrary(pself->PATLI_importGeode);
			pself->PATLI_importGeode = 0;
		}
	}
}

@method PATLImportStatus, PAThumbnailListClass, MSG_PATL_IMPORT_STATUS {

	if(finished && (!vmb || !success)) {

		PAAlbumIndexEntry *buffer;

		buffer = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
		PAAlbumGetItem(&pself->PATLI_indexData, pself->PATLI_cachePos, buffer);
		buffer->PAAIE_flags |= PAAEF_ERROR;
		PAAlbumSetItem(&pself->PATLI_indexData, pself->PATLI_cachePos, buffer);
		MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

		/* if open try next */
		pself->PATLI_cachePos++;

	} else {

		/* generate and set thumbnail */
		if(finished && vmb) {

			if(success && vmb) {

				if(pself->PATLI_currentSession == pself->PATLI_importSession) {

					@call oself::MSG_PATL_CREATE_THUMBNAIL_FROM_BITMAP(pself->PATLI_cachePos, vmb);

					/* if open try next */
					pself->PATLI_cachePos++;
				}
			}

			if(vmb) {

				VMFreeVMChain(G_tempVMFile, VMCHAIN_MAKE_FROM_VM_BLOCK(vmb));
			}
		}
	}

//	if(finished) {

		if(pself->PATLI_importHandle) {

			PAImportDestroy(pself->PATLI_importHandle);
			pself->PATLI_importHandle = 0;
		}

		if(pself->PATLI_progressTimer) {

			TimerStop(pself->PATLI_progressTimer, pself->PATLI_progressTimerId);

			pself->PATLI_progressTimer = 0;
			pself->PATLI_progressTimerId = 0;

			@call oself::MSG_PATL_REDRAW_ITEM(pself->PATLI_progressItem);
		}
//	}

	if(pself->PATLI_open && finished) {

		@send ,forceQueue+ oself::MSG_PATL_IMPORT_THUMBNAIL(pself->PATLI_cachePos, pself->PATLI_importSession);

	} else {

		if(pself->PATLI_importGeode) {

			GeodeFreeLibrary(pself->PATLI_importGeode);
			pself->PATLI_importGeode = 0;
		}
	}
}

@method dummy2, PAThumbnailListClass, MSG_PATL_INIT {

	ChunkHandle chunk;
	MemHandle mh;

	mh = HandleOf(oself);

	/* destroy old data first */

	pself->PATLI_numSelections = 0;
	pself->PATLI_itemCount = itemCount;
	pself->PATLI_cachePos = 0;
	pself->PATLI_currentSession++;

	/* create selection buffer */

	/* if caching import */
	if(pself->PATLI_attrs & PATLA_TEMP_CACHE) {

		word loopCount;
		word *cachePtr;
		FileLongName tempName = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

		/* create caching list */
		chunk = LMemAlloc(mh, sizeof(word) * itemCount);
		pself = ObjDerefVis(oself);

		loopCount = 0;
		cachePtr = LMemDeref(ConstructOptr(mh, chunk));
		while(loopCount < itemCount) {

			cachePtr[loopCount] = loopCount;

			loopCount++;
		}
		pself->PATLI_cacheList = chunk;
		pself->PATLI_cachePos = 0;
	}

	/* create caching list */
	chunk = LMemAlloc(mh, (itemCount + 7) / 8);
	pself = ObjDerefVis(oself);
	memset(LMemDeref(ConstructOptr(mh, chunk)), 0, (itemCount + 7) / 8);
	pself->PATLI_selectionList = chunk;

	@send oself::MSG_VIS_MARK_INVALID(
		VOF_GEOMETRY_INVALID | /*VOF_WINDOW_INVALID |*/ VOF_IMAGE_INVALID,
		VUM_NOW);

	if(pself->PATLI_open && pself->PATLI_itemCount) {

		@send ,forceQueue+ oself::MSG_PATL_IMPORT_THUMBNAIL(0, pself->PATLI_currentSession);
	}
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PATL_INIT_FILE_LIST for PAThumbnailListClass
 *            (DiskHandle disk, TCHAR *path, Boolean notes)
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
@method PAThumbnailListClass, MSG_PATL_INIT_FILE_LIST
{
 PAAlbumAttrs albAttrs;


	@call oself::MSG_PATL_EXIT();

	albAttrs.PAAA_width = (byte) pself->PATLI_thumbWidth;
	albAttrs.PAAA_height = (byte) pself->PATLI_thumbHeight;
	albAttrs.PAAA_flags = (notes ? PAAF_STORE_NOTES : 0);

	PAAlbumOpen(&pself->PATLI_indexData, disk, path, &albAttrs);
	@send oself::MSG_PATL_INIT(PAAlbumGetItemCount(&pself->PATLI_indexData));

}

@method PAThumbnailListClass, MSG_PATL_INIT_CAMERA {

}


@method dummy3, PAThumbnailListClass, MSG_PATL_CREATE_THUMBNAIL_FROM_BITMAP {

	WWFixedAsDWord sx, sy;
	word width, height;
	word size_x, size_y;
	GStateHandle gstate;
	BMType type;
	VMFileHandle vmf = G_tempVMFile;
	SizeAsDWord size;
	VMBlockHandle smallBitmap;
	MemHandle mh;
	word avgBitmapSize;

	if(block) {

		size = BmpGetBitmapSize(vmf, block, 0);
		width = DWORD_WIDTH(size);
		height = DWORD_HEIGHT(size);
		type = BmpGetBitmapType(vmf, block, 0) & 7;

		/* calc the scaling */
		sx = GrSDivWWFixed(MakeWWFixed(pself->PATLI_thumbWidth), MakeWWFixed(width));
		sy = GrSDivWWFixed(MakeWWFixed(pself->PATLI_thumbHeight), MakeWWFixed(height));
		if(sx > sy) {

			sx = sy;
		}
		size_x = IntegerOf(GrMulWWFixed(MakeWWFixed(width), sx));
		size_y = IntegerOf(GrMulWWFixed(MakeWWFixed(height), sx));

		if(type == BMF_24BIT) {

			type = BMF_8BIT;
		}

		/* if calculation gives 0 */
		if(!size_x) {

			size_x++;
		}
		if(!size_y) {

			size_y++;
		}

		/* create a right sized huge bitmap */
		smallBitmap = GrCreateBitmap(type, size_x, size_y, vmf, 0, &gstate);

		GrApplyScale(gstate, sx, sx);
		GrDrawHugeBitmap(gstate, 0, 0, vmf, block);
		GrDestroyBitmap(gstate, BMD_LEAVE_DATA);

		avgBitmapSize = sizeof(Bitmap) + pself->PATLI_thumbWidth * pself->PATLI_thumbHeight;

		/* append binary data to cache file */
		mh = MemAlloc(avgBitmapSize, HF_SWAPABLE, HAF_ZERO_INIT|HAF_LOCK);
		if(mh) {

			word loopCount;
			byte *elemPtr;
			word elemSize;
			byte *outPtr;
			Bitmap *hdrPtr;

			outPtr = MemDeref(mh);
			hdrPtr = outPtr;
			outPtr += sizeof(Bitmap);

			loopCount = 0;
			while(loopCount < size_y) {

				HugeArrayLock(vmf, smallBitmap, loopCount, &elemPtr, &elemSize);
				memcpy(outPtr, elemPtr, elemSize);
				outPtr += elemSize;

				HugeArrayUnlock(elemPtr);

				loopCount++;
			}

			hdrPtr->B_width = size_x;
			hdrPtr->B_height = size_y;
			hdrPtr->B_compact = 0;
			hdrPtr->B_type = type;

			{

				PAAlbumIndexEntry *buffer;
				Bitmap *bmpPtr;

				buffer = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);

				if(pself->PATLI_indexData.PAAD_attrs.PAAA_flags & PAAF_STORE_NOTES) {

					bmpPtr = buffer->PAAIE_thumbnail;

				} else {

					bmpPtr = buffer->PAAIE_notes;
				}

				PAAlbumGetItem(&pself->PATLI_indexData, pself->PATLI_cachePos, buffer);
				memcpy(bmpPtr, MemDeref(mh), avgBitmapSize);
				buffer->PAAIE_flags |= PAAEF_THUMBNAIL_EXISTS;
				buffer->PAAIE_flags |= PAAEF_SIZE_KNOWN;
				buffer->PAAIE_imageSize = size;
				PAAlbumSetItem(&pself->PATLI_indexData, pself->PATLI_cachePos, buffer);
				MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

			}

			MemFree(mh);
		}

		VMFreeVMChain(
				G_tempVMFile,
				VMCHAIN_MAKE_FROM_VM_BLOCK(smallBitmap));

		/* update the item */
		@call oself::MSG_PATL_REDRAW_ITEM(item);
	}
}

@method PAThumbnailListClass, MSG_PATL_FIND_CACHE_THUMBNAIL {

	word *cachePtr;
	word loopCount;

	cachePtr = LMemDerefHandles(HandleOf(oself), pself->PATLI_cacheList);
	loopCount = 0;
	while(loopCount < pself->PATLI_cachePos) {

		if(cachePtr[loopCount] == item) {

			(*cachePos) = cachePtr[loopCount];
			return TRUE;
		}

		loopCount++;
	}

	return FALSE;
}

@method PAThumbnailListClass, MSG_META_START_SELECT {

	word loopCount;
	Rectangle rect;

	loopCount = 0;
	while(loopCount < pself->PATLI_itemCount) {

		@call oself::MSG_PATL_GET_ITEM_AREA(loopCount, &rect);

		if(	((xPosition >= rect.R_left) && (xPosition < rect.R_right)) &&
			((yPosition >= rect.R_top) && (yPosition < rect.R_bottom))	) {

			if(!(inputState & BI_DOUBLE_PRESS)) {

				/* if not multiselect, unselect all first,
				   unless adjusting */
				if (!pself->PATLI_multiSelect &&
				    !(inputState & (UIFA_ADJUST<<8))) {
				    @call oself::MSG_PATL_UNSELECT_ALL();
				}
				@call oself::MSG_PATL_SWITCH_ITEM_SELECTION(loopCount);
			}

			if(pself->PATLI_destination && pself->PATLI_selectionMsg) {

				Boolean selected;

				selected = @call oself::MSG_PATL_IS_ITEM_SELECTED(loopCount);

				@send pself->PATLI_destination::{PATL_SELECTION_MSG}(pself->PATLI_selectionMsg)(loopCount,
								selected,
								pself->PATLI_numSelections,
								inputState & BI_DOUBLE_PRESS);
			}
			break;
		}

		loopCount++;
	}

	if(loopCount == pself->PATLI_itemCount) {

		@call oself::MSG_PATL_UNSELECT_ALL();

		@send pself->PATLI_destination::{PATL_SELECTION_MSG}(pself->PATLI_selectionMsg)(0xFFFF,
						FALSE,
						pself->PATLI_numSelections,
						inputState & BI_DOUBLE_PRESS);
	}

    retVal->flags = MRF_PROCESSED;
    retVal->ptrImage = NullOptr;
}

@method PATLImport, PAThumbnailListClass, MSG_PATL_IMPORT {

	GeodeLoadError gle;
	FileLongName *listPtr, fname;
	VMBlockHandle vmb;

	/* load the ImpGraph library if not already loaded */
	FilePushDir();
	FileSetStandardPath(SP_IMPORT_EXPORT_DRIVERS);

	if(!pself->PATLI_importGeode) {
#if ERROR_CHECK
		pself->PATLI_importGeode = GeodeUseLibrary("EC Breadbox Graphics Imp Library", MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR, &gle);
#else
		pself->PATLI_importGeode = GeodeUseLibrary("Breadbox Graphics Imp Library", MIME_DRV_PROTOMAJOR, MIME_DRV_PROTOMINOR, &gle);
#endif
	}
	FilePopDir();

	if(pself->PATLI_importGeode) {

		entry_MimeDrvGraphic *entry;

		/* create importing thread */
		entry = ProcGetLibraryEntry(pself->PATLI_importGeode, MIME_ENTRY_GRAPHIC_EX);


		if(entry) {

			ImageAdditionalData iad;
			dword usedMem;
			MimeStatus mimeStatus = {0};
			dword availMem;
			AllocWatcherHandle allocWatcher;

			{

				PAAlbumIndexEntry *indexItem;

				indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
				PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);
				strcpy(fname, indexItem->PAAIE_fileName);
				MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

				FilePushDir();
				FileSetCurrentPath(pself->PATLI_indexData.PAAD_disk, pself->PATLI_indexData.PAAD_path);

			}

			availMem = 0x8000000 ;  /* 4 megs unless told otherwise */
			allocWatcher = AllocWatcherCreate(availMem) ;
			vmb = ((pcfm_MimeDrvGraphicEx*) ProcCallFixedOrMovable_pascal)(

				"",		//char *mimeType, \
				fname,		//char *file, \
				vmf,				//VMFileHandle vmf, \
				&iad,				//ImageAdditionalData *iad, \
				MIME_RES_UNKNOWN,	//MimeRes resolution, \
				allocWatcher,		//AllocWatcherHandle watcher, \
				&usedMem,			//dword *usedMem, \
				&mimeStatus,		//MimeStatus *mimeStatus, \
				0,					//_ImportProgressParams_
				MIME_GREX_NO_ANIMATIONS|MIME_GREX_NO_SCANLINE_COMPRESS,
				entry
			);
			FilePopDir();
			AllocWatcherDestroy(allocWatcher);

			if(vmb) {

				if(iad.IAD_type == IAD_TYPE_ANIMATION) {

					VMBlockHandle firstFrame;
					MemHandle mem;
					AnimationHeader *p_header ;
					VMChain *p_chain;
					VMBlockHandle newBlock;

					EC(animationDummy());

					p_header = VMLock(vmf, vmb, &mem) ;
					p_chain = (VMChain*)(((byte *)p_header) + p_header->AH_tree.VMCT_offset) ;
					firstFrame = VMCHAIN_GET_VM_BLOCK(*(p_chain++));
					VMUnlock(mem);

					newBlock = VMCHAIN_GET_VM_BLOCK(VMCopyVMChain(vmf, VMCHAIN_MAKE_FROM_VM_BLOCK(firstFrame), vmf));

					if(vmb) {

						VMFreeVMChain(
								vmf,
								VMCHAIN_MAKE_FROM_VM_BLOCK(vmb));
					}

					vmb = newBlock;

				} else if(iad.IAD_type != IAD_TYPE_BITMAP) {

					/* if wrong format */
					VMFreeVMChain(
							vmf,
							VMCHAIN_MAKE_FROM_VM_BLOCK(vmb));
					vmb = 0;
				}
			}

		}

		/* free library if we're not actively importing thumbs */
		if (!pself->PATLI_importHandle) {
			GeodeFreeLibrary(pself->PATLI_importGeode);
			pself->PATLI_importGeode = 0;
		}
	}

	return vmb;
}

@method PATLImportCurrentSelection, PAThumbnailListClass, MSG_PATL_IMPORT_CURRENT_SELECTION {

	word selection;

	selection = @call oself::MSG_PATL_GET_CURRENT_SELECTION();

	if(selection != 0xFFFF) {

		return @call oself::MSG_PATL_IMPORT(vmf, selection);
	}

	return 0;
}

@method PAThumbnailListClass, MSG_VIS_OPEN {

	@callsuper();

	pself->PATLI_open = TRUE;

	@send ,forceQueue+ oself::MSG_PATL_IMPORT_THUMBNAIL(0, pself->PATLI_currentSession);
}

@method PAThumbnailListClass, MSG_VIS_CLOSE {

	pself->PATLI_open = FALSE;

	if(pself->PATLI_importHandle) {

		if(PAImportStop(pself->PATLI_importHandle)) {

			@call oself::MSG_PATL_IMPORT_STATUS(0, FALSE, FALSE);
		}
	}

	@callsuper();
}

@method PATLGetNumSelections, PAThumbnailListClass, MSG_PATL_GET_NUM_SELECTIONS {

	return pself->PATLI_numSelections;
}

@method PAThumbnailListClass, MSG_PATL_GET_NUM_ITEMS {

	return pself->PATLI_itemCount;
}

@method PAThumbnailListClass, MSG_PATL_GET_CURRENT_SELECTION {

	word loopCount;

	loopCount = 0;
	while(loopCount < pself->PATLI_itemCount) {

		if(@call oself::MSG_PATL_IS_ITEM_SELECTED(loopCount))  {

			break;
		}

		loopCount++;
	}

	if(loopCount == pself->PATLI_itemCount) {

		loopCount = 0xFFFF;
	}

	return loopCount;
}

@method PAThumbnailListClass, MSG_PATL_SET_ITEM_SELECTION {

	byte *p_selList = LMemDeref(ConstructOptr(HandleOf(oself), pself->PATLI_selectionList));

	if(p_selList[item / 8] & (1 << (item & 7))) {

		if(!selected) {

			pself->PATLI_numSelections--;
			p_selList[item / 8] &= ~(1 << (item & 7));

			if(update) {

				@call oself::MSG_PATL_REDRAW_ITEM(item);
			}
		}

	} else {

		if(selected) {

			pself->PATLI_numSelections++;
			p_selList[item / 8] |= (1 << (item & 7));

			if(update) {

				@call oself::MSG_PATL_REDRAW_ITEM(item);
			}
		}
	}

}

@method PAThumbnailListClass, MSG_PATL_SWITCH_ITEM_SELECTION {

	byte *p_selList = LMemDeref(ConstructOptr(HandleOf(oself), pself->PATLI_selectionList));

	if(p_selList[item / 8] & (1 << (item & 7))) {

		pself->PATLI_numSelections--;
		p_selList[item / 8] &= ~(1 << (item & 7));

	} else {

		pself->PATLI_numSelections++;
		p_selList[item / 8] |= (1 << (item & 7));
	}

	@call oself::MSG_PATL_REDRAW_ITEM(item);
}

@method PAThumbnailListClass, MSG_PATL_UNSELECT_ALL {

	word loopCount;

	loopCount = 0;
	while(loopCount < pself->PATLI_itemCount) {

		@call oself::MSG_PATL_SET_ITEM_SELECTION(loopCount, FALSE, TRUE);

		loopCount++;
	}
}

word PACopyFileFlexible(DiskHandle srcDisk, TCHAR *srcPath, TCHAR *destName, Boolean fuzzy)
{
	TCHAR fname2[40];
	word err = 0;
	word tryCount = 1;

	strcpy(fname2, destName);

	do {

		FileLongName getname;

		/* check if fname exists */
		err = FileGetPathExtAttributes(
			fname2,
			FEA_NAME,
			&getname,
			sizeof(getname));

		if(err == ERROR_FILE_NOT_FOUND) {

			err = FileCopy(srcPath, fname2, srcDisk, 0);
			break;

		} else {

			if(fuzzy) {

				if(err == 0) {

					/* try a win95 name */
					sprintf(fname2, "(%u)%s", tryCount, destName);
				}

//				err = FileCopy(srcPath, fname2, disk, 0);

@if 0
				if(err == ERROR_INVALID_LONGNAME) {

					word loopCount = 0;
					TCHAR tempBuf[6];
					word figLen;

					/* try dos name */
					sprintf(tempBuf, "%u", tryCount);
					figLen = strlen(tempBuf);

					fname2[0] = 0;
					while(fname[loopCount]) {

						if(fname[loopCount] == '.') {


						} else {

							if(loopCount < 8 - figLen) {

								fname2[loopCount] = fname[loopCount];
								fname2[loopCount + 1] = 0;
							}
						}
					}
					loopCount++;
				}
@endif
				/* just check this name */
				err = ERROR_FILE_NOT_FOUND;
				tryCount++;

			} else {

				err = ERROR_FILE_EXISTS;
				break;
			}
		}

	} while(err);

	return err;
}

@method PATLCopyImage, PAThumbnailListClass, MSG_PATL_COPY_IMAGE {

	FileLongName fname, *listPtr;
	TCHAR srcPath[64 + 2];
	word err = 0;
	DiskHandle disk;

	{

		PAAlbumIndexEntry *indexItem;

		indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
		PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);
		strcpy(fname, indexItem->PAAIE_fileName);
		MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

		strcpy(srcPath, pself->PATLI_indexData.PAAD_path);
		disk = 	pself->PATLI_indexData.PAAD_disk;

	}

	if(strcmp(srcPath, "\\\\")) {

		strcat(srcPath, "\\");
		strcat(srcPath, fname);

	} else {

		strcpy(srcPath, fname);
	}

	err = PACopyFileFlexible(disk, srcPath, fname, fuzzy);
}

@method PATLGetItemNotes, PAThumbnailListClass, MSG_PATL_GET_ITEM_NOTES {

	PAAlbumIndexEntry *indexItem;

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
	PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);
	strcpy(buffer, indexItem->PAAIE_notes);
	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);
}

@method PATLGetItemFileName, PAThumbnailListClass, MSG_PATL_GET_ITEM_FILENAME {

	PAAlbumIndexEntry *indexItem;

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
	PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);
	strcpy(buffer, indexItem->PAAIE_fileName);
	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);
}

@method PATLGetCurrentItemNotes, PAThumbnailListClass, MSG_PATL_GET_CURRENT_ITEM_NOTES {

	word currentItem = 0xFFFF;

	currentItem = @call oself::MSG_PATL_GET_CURRENT_SELECTION();

	@call oself::MSG_PATL_GET_ITEM_NOTES(currentItem, buffer);

	return currentItem;
}

@method PATLGetCurrentItemFilename, PAThumbnailListClass, MSG_PATL_GET_CURRENT_ITEM_FILENAME {

	word currentItem = 0xFFFF;

	currentItem = @call oself::MSG_PATL_GET_CURRENT_SELECTION();

	@call oself::MSG_PATL_GET_ITEM_FILENAME(currentItem, buffer);

	return currentItem;
}

@method PATLGetCurrentItemSizeString, PAThumbnailListClass, MSG_PATL_GET_CURRENT_ITEM_SIZE_STRING {

	word currentItem = 0xFFFF;
	SizeAsDWord size;

	PAAlbumIndexEntry *indexItem;

	currentItem = @call oself::MSG_PATL_GET_CURRENT_SELECTION();

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
	PAAlbumGetItem(&pself->PATLI_indexData, currentItem, indexItem);
	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

	@call oself::MSG_PATL_GET_ITEM_SIZE(currentItem, &size);

	if(indexItem->PAAIE_flags & PAAEF_SIZE_KNOWN) {

		sprintf(buffer, "%u pixels wide x %u pixels tall", DWORD_WIDTH(size), DWORD_HEIGHT(size));

	} else {

		strcpy(buffer, "unknown yet");
	}

	return currentItem;
}

@method PATLSetCurrentItemNotes, PAThumbnailListClass, MSG_PATL_SET_CURRENT_ITEM_NOTES {

	PAAlbumIndexEntry *indexItem;

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);
	strcpy(indexItem->PAAIE_notes, buffer);
	PAAlbumSetItem(&pself->PATLI_indexData, item, indexItem);
	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);
}

@method PAThumbnailListClass, MSG_PATL_GET_ITEM_SIZE {

	PAAlbumIndexEntry *indexItem;

	indexItem = MemLock(pself->PATLI_indexData.PAAD_bufferBlock);

	PAAlbumGetItem(&pself->PATLI_indexData, item, indexItem);

	(*size) = indexItem->PAAIE_imageSize;

	MemUnlock(pself->PATLI_indexData.PAAD_bufferBlock);

	return TRUE;
}

@method PAThumbnailListClass, MSG_PATL_SWAP_ITEMS {

	Boolean retValue = FALSE;

	retValue = PAAlbumSwapItem(&pself->PATLI_indexData, item1, item2);

	@call oself::MSG_PATL_SET_ITEM_SELECTION(item1, FALSE, update);
	@call oself::MSG_PATL_SET_ITEM_SELECTION(item2, TRUE, update);

	if(update) {

		@call oself::MSG_PATL_REDRAW_ITEM(item1);
		@call oself::MSG_PATL_REDRAW_ITEM(item2);
	}

	return retValue;
}

@method PAThumbnailListClass, MSG_PATL_DELETE_CURRENT_ITEM {

	word currentItem = 0xFFFF;
	Boolean retValue = FALSE;

	currentItem = @call oself::MSG_PATL_GET_CURRENT_SELECTION();

	if(currentItem != 0xFFFF) {

		retValue = PAAlbumDeleteItem(&pself->PATLI_indexData, currentItem);

		if(!retValue) {

			@call oself::MSG_PATL_INIT(pself->PATLI_itemCount - 1);

			/* resize selection list */
			/*XXX*/
		}

	} else {

		retValue = TRUE;
	}

	return retValue;
}

@method PAThumbnailListClass, MSG_PATL_DELETE_SELECTED_ITEMS {


	Boolean retValue = FALSE;

	word loopCount;

	loopCount = pself->PATLI_itemCount;
	while(loopCount) {

		loopCount--;

		if(@call oself::MSG_PATL_IS_ITEM_SELECTED(loopCount)) {

			retValue |= PAAlbumDeleteItem(&pself->PATLI_indexData, loopCount);
		}
	}

	@call oself::MSG_PATL_INIT(PAAlbumGetItemCount(&pself->PATLI_indexData));

	return retValue;
}

@method PATLExit, PAThumbnailListClass, MSG_PATL_EXIT {

	if(pself->PATLI_importHandle) {

		if(PAImportDestroy(pself->PATLI_importHandle)) {

			pself->PATLI_importHandle = 0;
			@call oself::MSG_PATL_IMPORT_STATUS(0, FALSE, FALSE);
		}
		pself->PATLI_importHandle = 0;
	}

	if(pself->PATLI_importGeode) {

		GeodeFreeLibrary(pself->PATLI_importGeode);
		pself->PATLI_importGeode = 0;
	}

	pself->PATLI_numSelections = 0;
	pself->PATLI_itemCount = 0;

	if(pself->PATLI_cacheList) {

		LMemFreeHandles(HandleOf(oself), pself->PATLI_cacheList);
		pself->PATLI_cacheList = 0;
	}

	pself = ObjDerefVis(oself);

	if(pself->PATLI_selectionList) {

		LMemFreeHandles(HandleOf(oself), pself->PATLI_selectionList);
		pself->PATLI_selectionList = 0;
	}

	PAAlbumClose(&pself->PATLI_indexData);

	@send oself::MSG_VIS_MARK_INVALID(
		VOF_GEOMETRY_INVALID | /*VOF_WINDOW_INVALID |*/ VOF_IMAGE_INVALID,
		VUM_NOW);
}

@method PATLProgressStep, PAThumbnailListClass,  MSG_PATL_PROGRESS_STEP {

	if(pself->PATLI_importHandle) {

		/* draw current element */
		@call oself::MSG_PATL_REDRAW_ITEM(pself->PATLI_progressItem);

		pself->PATLI_progressStep++;
		if(pself->PATLI_progressStep == 16) {

			pself->PATLI_progressStep = 0;
		}
	}
}

@method PATLGetFilePath, PAThumbnailListClass, MSG_PATL_GET_FILE_PATH {

	strcpy(pathBuf, pself->PATLI_indexData.PAAD_path);

	return pself->PATLI_indexData.PAAD_disk;
}
