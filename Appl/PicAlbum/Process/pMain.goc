/**************************************************************************
 *
 * PROJECT:	Picture Album
 * FILE:		pmain.goc
 * AUTHOR:	John F. Howard    10/03
 *
 * DESCRIPTION:
 *		This is based on the PicAlbum code first written by Falk for the GPC
 *
 *
 *
 *************************************************************************/

@include "PicAlbum.goh"
@include <Objects/gViewCC.goh>
#include <extgraph.h>
#include <Ansi/string.h>
#include <library.h>
#include <Ansi/stdio.h>

@classdecl PAProcessClass, neverSaved;
@classdecl PASlideShowDialogClass;

@extern object PAAlbumScreen;
@extern object PAAlbumMenuBar;
@extern object PAViewScreen;
@extern object PAViewMenuBar;
@extern object PAViewView;

@extern object PAAlbumViewContent;
@extern object PAGetPicturesViewContent;

@extern object PAAlbumList;
@extern object PACreateNewAlbumDialog;
@extern object PACreateNewAlbumText;
@extern object PARenameAlbumDialog;
@extern object PARenameAlbumText;
@extern object PAAlbumViewTrigger;
@extern object PAAlbumNotesTrigger;
@extern object PAAlbumViewFullSizeTrigger;
@extern object PAAlbumEditGetPicsTrigger;
@extern object PAAlbumGetPicturesTrigger;
@extern object PAAlbumEditAddNotesTrigger;
@extern object PAAlbumEditCopyTrigger;
@extern object PAAlbumEditDeleteTrigger;
@extern object PAAlbumDeleteTrigger;
@extern object PAAlbumNaviButtonGroup;
@extern object PAAlbumEditMovePictureGroup;
@extern object PAAlbumEditMoveFrontTrigger;
@extern object PAAlbumEditMoveBackTrigger;
@extern object PAAlbumNaviForwardTrigger;
@extern object PAAlbumEditMoveEndTrigger;
@extern object PAAlbumEditMoveForwardTrigger;
@extern object PAAlbumNaviBackwardTrigger;
@extern object PAGetPicturesDialog;
@extern object PAGetPicturesFromGroup;
@extern object PAAddNotesNotes;
@extern object PAAddNotesDialog;

@extern object PrintWidthValue;
@extern object PrintHeightValue;
@extern object PrintSizeAspectRatio;
@extern object PASlideShowDialog;

@extern object PAAddNotesSize;
@extern object PAAddNotesFilename;

@extern object PACopyPicturesWhichView;

@extern object PACopyPicturesToAlbumButton;
@extern object PACopyPicturesToDocButton;
@extern object PACopyPicturesDialog;

@extern object PAViewPrintControl;

@extern object PAAlbumPictureList;

@extern object PAPrimary;
@extern object PACopyPicturesDestPath;
@extern object PACopyPicturesToPathPopup;
@extern object PACopyPicturesToDrivePopup;
@extern object PAViewCopyPicTrigger;
@extern object PAGetPicturesFileSel;
@extern object PAGetPicturesPathPopup;
@extern object PAGetPicturesDrivePopup;

@extern object PACopyProgressDialog;

Boolean G_albumInit = FALSE;
Boolean G_thumbnailInit = FALSE;

word G_usedXOffset = 0;
word G_usedYOffset = 0;


Boolean G_bitmapChanged = FALSE;
VMBlockHandle G_bitmapHandle = 0;
word G_viewWidth = 0;
word G_viewHeight = 0;
WWFixedAsDWord G_xScale = MakeWWFixed(1);
WWFixedAsDWord G_yScale = MakeWWFixed(1);
word G_xOffset = 0;
word G_yOffset = 0;
FileLongName G_pictureName = "";
PathName G_picturePath = "";
DiskHandle G_pictureDisk = 0;

MemHandle G_albumList = 0;
word G_albumCount = 0;
FileLongName G_albumName = "";

Boolean G_viewScreenReturnToThumbnail = FALSE;

word G_addNotesItem = 0xFFFF;
VMFileHandle G_tempVMFile = 0;

optr G_copyPicsList = 0;

extern VMBlockHandle G_slideImage;

extern optr G_printValueChanged = NullOptr;


@extern method PAStartSlideShow, PAProcessClass, MSG_PA_START_SLIDE_SHOW;
@extern method PANextSlide, PAProcessClass, MSG_PA_NEXT_SLIDE;
@extern method PANextSlideTrigger, PAProcessClass, MSG_PA_NEXT_SLIDE_TRIGGER;
@extern method PAPrevSlide, PAProcessClass, MSG_PA_PREV_SLIDE;
@extern method PAImportNext, PAProcessClass, MSG_PA_IMPORT_NEXT;
@extern method PAStartSelect, PAProcessClass, MSG_META_START_SELECT;
@extern method PASlideVisibilityNotification, PAProcessClass, MSG_PA_SLIDE_VISIBILITY_NOTIFICATION;
@extern method PAProcessClass, MSG_PA_SLIDE_SHOW_AUTO_STATUS;
@extern method PAProcessClass, MSG_PA_SLIDE_SHOW_MANUAL_STATUS;

/* Process/pBmpOp.goc */
@extern method PAProcessClass, MSG_PA_FLIP_LEFT_RIGHT;
@extern method PAProcessClass, MSG_PA_ROTATE_90_COUNTERCLOCKWISE;
@extern method PAProcessClass, MSG_PA_ROTATE_180;
@extern method PAProcessClass, MSG_PA_ROTATE_90_CLOCKWISE;
@extern method PAProcessClass, MSG_PA_FLIP_TOP_BOTTOM;

/* Process/pPrint.goc */
@extern method PAProcessClass, MSG_PA_INITIATE_PRINT;
@extern method PAProcessClass, MSG_PA_PRINT_SIZE_WIDTH_STATUS;
@extern method PAProcessClass, MSG_PA_PRINT_SIZE_HEIGHT_STATUS;
@extern method PAProcessClass, MSG_PA_PRINT_SIZE_ASPECT_STATUS;
@extern method PAProcessClass, MSG_PRINT_START_PRINTING;
@extern method PAProcessClass, MSG_PRINT_GET_DOC_NAME;



@start TechnicalStrings2, data;

@chunk TCHAR PAPicturesFolderName = "PA Index";
@chunk TCHAR PAAlbumsFolderName = "PA Albums";
@chunk TCHAR PACantCreateAlbumError = "An error occured while creating the new album.";
@chunk TCHAR PACantRenameAlbumError = "An error occured while renaming the album.";
@chunk TCHAR PAAlbumExistsError = "An album using this name already exists.";
@chunk TCHAR PACantDeleteAlbumError = "An error occured while deleting the photo album.";
@chunk TCHAR PADeleteAlbumAffirmation = "Are you sure that you want to delete this pictures album, including all the pictures within it?";
@chunk TCHAR PADeletePictureAffirmation = "Deleting this picture from the album will also remove it from your computer unless you have stored a backup copy outside of the album. Do you want to delete this picture?";
@chunk TCHAR PADeleteMultiplePictureAffirmation = "Deleting these pictures from the album will also remove them from your computer unless you have stored a backup copy outside of the album. Do you want to delete these pictures?";
@chunk TCHAR PADeletePictureError = "An error occured while deleting the picture.";

@visMoniker PADeleteAlbumApplyTriggerMoniker = "Delete";
@visMoniker PADeleteAlbumCancelTriggerMoniker = "Cancel";
@visMoniker PADeletePictureCancelTriggerMoniker = "Don't Delete";

@end TechnicalStrings2;

/***********************************************************************
 *
 * MESSAGE:	MSG_PROCESS_CREATE_UI_THREAD for PAProcessClass
 *
 *
 * DESCRIPTION:	Intercept to give us more stack
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PROCESS_CREATE_UI_THREAD
{
	stackSize = 3000;
	return @callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_OPEN_APPLICATION for PAProcessClass
 *
 *
 * DESCRIPTION:	 do some opening stuff
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {

	@send application::MSG_GEN_APPLICATION_INSTALL_TOKEN();

	@call PASlideShowDialog::MSG_META_ADD_VAR_DATA(
						  ATTR_GEN_VISIBILITY_DESTINATION, sizeof(oself), &oself);

	FilePushDir();
	FileSetStandardPath(SP_PRIVATE_DATA);
	MemLock(HandleOf(@PAPicturesFolderName));
	FileCreateDir(LMemDeref(@PAPicturesFolderName));
	FileCreateDir(LMemDeref(@PAAlbumsFolderName));
	MemUnlock(HandleOf(@PAPicturesFolderName));
	G_tempVMFile = VMOpen("Photo Album Temporary",
									VMAF_FORCE_READ_WRITE | VMAF_FORCE_DENY_WRITE,
									VMO_CREATE_TRUNCATE, 0);
	FilePopDir();

	@callsuper();

	@send process::MSG_PA_INIT_ALBUM_SCREEN();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_CLOSE_APPLICATION for PAProcessClass
 *
 *
 * DESCRIPTION:	 do some closing stuff
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {

	@callsuper();

	@call PAAlbumViewContent::MSG_PATL_EXIT();
	@call PAGetPicturesViewContent::MSG_PATL_EXIT();

	if(G_bitmapHandle) {
		VMFreeVMChain(G_tempVMFile, VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));
		}

	if(G_tempVMFile) {
		VMClose(G_tempVMFile, FALSE);
		G_tempVMFile = 0;
		G_bitmapHandle = 0;

		FilePushDir();
		FileSetStandardPath(SP_PRIVATE_DATA);
		FileDelete("Photo Album Temporary");
		FilePopDir();
		}

	if(G_albumList) {
		MemFree(G_albumList);
		G_albumList = 0;
		}

	 return 0;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_INIT_ALBUM_SCREEN for PAProcessClass
 *
 *
 * DESCRIPTION:	brings up the albums screen
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_INIT_ALBUM_SCREEN {


	@call PAPrimary::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Photo Album", VUM_NOW);

	@send PAViewScreen::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send PAViewMenuBar::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send PAAlbumMenuBar::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@call PAAlbumScreen::MSG_GEN_SET_USABLE(VUM_NOW);

	/* initialize the album list if not already done */
	if(!G_albumInit) {
		@call application::MSG_GEN_APPLICATION_MARK_BUSY();
		@send oself::MSG_PA_INIT_ALBUM_LIST();
		*G_albumName = 0;  /* clear album name since we closed index */
		@send oself::MSG_PA_INIT_CURRENT_ALBUM();
		@send oself::MSG_PA_ADJUST_BUTTONS();
		G_albumInit = TRUE;
		@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		}
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_INIT_ALBUM_SCREEN for PAProcessClass
 *
 *
 * DESCRIPTION:	brings up the slide view screen
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_INIT_VIEW_SCREEN {


	@send PAAlbumScreen::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@send PAAlbumMenuBar::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	@send PAViewMenuBar::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@call PAViewScreen::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	if(G_pictureName[0]) {
		TCHAR buf[64];

		sprintf(buf, "Photo Album - %s", G_pictureName);
		@call PAPrimary::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buf, VUM_NOW);
		}

	if(G_bitmapHandle)
		@call PAViewCopyPicTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	else
		@call PAViewCopyPicTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}


/***********************************************************************
 *
 * ROUTINE:	SetPathForDocuments(optr fsel, optr popup)
 *
 * CALLED BY:	MSG_PA_COPY_TO_DOCUMENT, MSG_PA_GET_PICTURES_FROM_DOCUMENT
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void SetPathForDocuments(optr fsel, optr popup)
{
 WindowHandle win;


	win = @call fsel::MSG_VIS_QUERY_WINDOW();

	/* fsel list window is child of dialog containing fsel */
	if (win) WinGetInfo(win, WIT_LAST_CHILD_WIN, &win);
	@call process::MSG_PA_SUSPEND_WINDOW(win);

	/* nothing to do if not usable */
	if (!(@call fsel::MSG_GEN_GET_USABLE())) fsel = 0;
	if (!(@call popup::MSG_GEN_GET_USABLE())) popup = 0;

	/* rescan only once for all changes */
	@call fsel::MSG_GEN_FILE_SELECTOR_SUSPEND();
	@call popup::MSG_GEN_FILE_SELECTOR_SUSPEND();

	/* set DOCUMENT as requested */
	@call fsel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);
	@call popup::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

	@call fsel::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call popup::MSG_GEN_SET_ENABLED(VUM_NOW);
	@call fsel::MSG_GEN_FILE_SELECTOR_END_SUSPEND();
	@call popup::MSG_PA_PATH_POPUP_NO_UPDATE();
	@call popup::MSG_GEN_FILE_SELECTOR_END_SUSPEND();
	@call popup::MSG_PA_PATH_POPUP_UPDATE();

	@send, forceQueue process::MSG_PA_UNSUSPEND_WINDOW(win);

}


@method PAProcessClass, MSG_PA_VIEW_PICTURE_FROM_ALBUM {

	@call application::MSG_GEN_APPLICATION_MARK_BUSY();
	@call PAAlbumViewContent::MSG_PATL_GET_CURRENT_ITEM_FILENAME(G_pictureName);
	G_pictureDisk = @call PAAlbumViewContent::MSG_PATL_GET_FILE_PATH(G_picturePath);
	G_bitmapHandle = @call PAAlbumViewContent::MSG_PATL_IMPORT_CURRENT_SELECTION(G_tempVMFile);
	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	G_bitmapChanged = FALSE;

	G_viewScreenReturnToThumbnail = FALSE;
	@call oself::MSG_PA_CALC_AND_SET_VIEW();
	@call oself::MSG_PA_INIT_VIEW_SCREEN();
}

@method PAProcessClass, MSG_META_EXPOSED {

	if(G_slideImage) {

		GStateHandle gstate;

		gstate = GrCreateState(win);
		GrBeginUpdate(gstate);
		GrDrawHugeBitmap(gstate, 0, 0, G_tempVMFile, G_slideImage);
		GrEndUpdate(gstate);
		GrDestroyState(gstate);

	} else {

		if(G_bitmapHandle) {

			GStateHandle gstate;

			gstate = GrCreateState(win);
			GrBeginUpdate(gstate);
			G_usedXOffset = G_xOffset;
			G_usedYOffset = G_yOffset;
			GrDrawHugeBitmap(gstate, G_xOffset, G_yOffset, G_tempVMFile, G_bitmapHandle);
			GrEndUpdate(gstate);
			GrDestroyState(gstate);
		}
	}
}

@method PAProcessClass, MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED {

	G_xScale = xScaleFactor;
	G_yScale = yScaleFactor;

	@call oself::MSG_PA_CALC_AND_SET_VIEW();
}

@method PAProcessClass, MSG_META_CONTENT_VIEW_SIZE_CHANGED {

	G_viewWidth = viewWidth;
	G_viewHeight = viewHeight;

	@call oself::MSG_PA_CALC_AND_SET_VIEW();
}

@method PACalcAndSetView, PAProcessClass, MSG_PA_CALC_AND_SET_VIEW {

	SizeAsDWord imageSize;
	word size_x, size_y;
	word viewWidth, viewHeight;
	RectDWord rect;

	if(G_bitmapHandle) {

		@call PAViewView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect);

		/* get image size */
		imageSize = BmpGetBitmapSize(G_tempVMFile, G_bitmapHandle, 0);

		/* apply scale factor */
		size_x = DWORD_WIDTH(imageSize);
		size_y = DWORD_HEIGHT(imageSize);
		viewWidth = rect.RD_right - rect.RD_left;
		viewHeight = rect.RD_bottom - rect.RD_top;

		/* calc offset to center */
		G_xOffset = 0;
		G_yOffset = 0;
		if(size_x < viewWidth) {

			G_xOffset = (viewWidth - size_x) / 2;
		}
		if(size_y < viewHeight) {

			G_yOffset = (viewHeight - size_y) / 2;
		}

		/* set new doc bounds */
		@send PAViewView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
							DWORD_HEIGHT(imageSize)/* + G_yOffset*/, DWORD_WIDTH(imageSize)/* + G_xOffset*/,
							0, 0);
		@send PAViewView::MSG_GEN_VIEW_SET_ORIGIN(0, 0);

		/* store current settings */
		if((G_usedXOffset != G_xOffset) || (G_usedYOffset != G_yOffset)) {

			@send PAViewView::MSG_GEN_VIEW_REDRAW_CONTENT();
		}
	}
}


@method PAProcessClass, MSG_PA_VIEW_BACK {

#if 0  /* no save support */
	if(G_bitmapChanged) {

		if(UserStandardDialog(0, 0, 0, 0, "You have made changes to this picture. Do you wish to save these changes before closing?",
			(GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET) | (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
			) == IC_YES) {

			/* save the changed bitmap here */
		}
	}
#endif

	@call oself::MSG_PA_INIT_ALBUM_SCREEN();

	if(G_bitmapHandle) {

		VMFreeVMChain(G_tempVMFile, VMCHAIN_MAKE_FROM_VM_BLOCK(G_bitmapHandle));
		G_bitmapHandle = 0;
	}
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_READ_ALBUM_LIST for PAProcessClass
 *          (TCHAR *currentName, word *currentIndex, word *retItems)
 *
 * DESCRIPTION:	Gets the album folder names and dumps them into a
 *						mem block returning the handle to the caller
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_READ_ALBUM_LIST
{
 FileEnumParams	params;
 MemHandle			listMem = 0;
 word					itemsRead, itemsLeft;


	/* fill in our enum params */
	params.FEP_searchFlags = FESF_DIRS;
	params.FEP_returnAttrs = (FileExtAttrDesc *) FESRT_NAME;
	params.FEP_returnSize = FILE_LONGNAME_BUFFER_SIZE;
	params.FEP_matchAttrs = 0;
	params.FEP_bufSize = FE_BUFSIZE_UNLIMITED;
	params.FEP_skipCount = 0;
	params.FEP_callback = (void *) 0;
	params.FEP_callbackAttrs = 0;
	params.FEP_cbData1 = (dword) 0;
	params.FEP_cbData2 = (dword) 0;
	params.FEP_headerSize = 0;

	FilePushDir();
	MemLock(HandleOf(@PAAlbumsFolderName));
	if(FileSetCurrentPath(SP_PRIVATE_DATA, LMemDeref(@PAAlbumsFolderName))) {
		/* get the list of album file names in the folder */
		itemsRead = FileEnum(&params, &listMem, &itemsLeft);
		if(itemsRead || listMem) {
			if(!itemsRead) {
				MemFree(listMem);
				listMem = 0;
				}
			}
		}
	MemUnlock(HandleOf(@PAAlbumsFolderName));
	FilePopDir();

	/* sort album list */
	if(listMem) {
		FileLongName	*p_name;
		word				loopCount = 0;

		p_name = MemLock(listMem);
		while(loopCount < itemsRead) {
			word loopCount2 = 0;

			while(loopCount2 < itemsRead) {
				if(LocalCmpStringsNoSpaceCase(p_name[loopCount],
														p_name[loopCount2], 0) < 0) {
					FileLongName tempName;

					strcpy(tempName, p_name[loopCount]);
					strcpy(p_name[loopCount], p_name[loopCount2]);
					strcpy(p_name[loopCount2], tempName);
					}
				loopCount2++;
				}
			loopCount++;
			}
		MemUnlock(listMem);
		}

	if(currentIndex) {
		FileLongName *p_name;
		word loopCount = 0;

		(*currentIndex) = 0xFFFF;
		if(listMem && currentName && (*currentName)) {
			p_name = MemLock(listMem);

			while(loopCount < itemsRead) {
				if(strcmp(p_name[loopCount], currentName) == 0) {
					(*currentIndex) = loopCount;
					break;
					}
				loopCount++;
				}
			MemUnlock(listMem);
			}
		}

	if(retItems)
		(*retItems) = itemsRead;

	return listMem;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_INIT_ALBUM_LIST for PAProcessClass
 *
 *
 * DESCRIPTION:	Initializes the album lists in the album view and the
 *                Copy pix dialog box
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_INIT_ALBUM_LIST
{
 word		albumIndex;


	G_albumList = @call oself::MSG_PA_READ_ALBUM_LIST(G_albumName, &albumIndex,
																	  &G_albumCount);

	if(albumIndex == 0xFFFF)  albumIndex = 0;
	if(!G_albumCount)  albumIndex = 0xFFFF;

	@call PAAlbumList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
	@call PACopyPicturesWhichView::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
	@call PAAlbumList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(albumIndex, FALSE);
	@send oself::MSG_PA_ADJUST_BUTTONS();
}


/***********************************************************************
 *
 * MESSAGE:	MSG_PA_INIT_CURRENT_ALBUM for PAProcessClass
 *
 *
 * DESCRIPTION:	Initializes the selected album
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_INIT_CURRENT_ALBUM
{
 TCHAR	pathName[FILE_LONGNAME_BUFFER_SIZE * 2];


	if(G_albumList && G_albumCount) {
		FileLongName *p_name, selName;
		word currentItem;

		@call application::MSG_GEN_APPLICATION_MARK_BUSY();
		currentItem = @call PAAlbumList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		if(currentItem != 0xFFFF) {
			p_name = MemLock(G_albumList);
			strcpy(selName, p_name[currentItem]);
			MemUnlock(G_albumList);
			}
		else {
			strcpy(selName, "");
			}

		if(!(*G_albumName) || (strcmp(selName, G_albumName) != 0)) {
			MemLock(HandleOf(@PAAlbumsFolderName));
			strcpy(pathName, LMemDeref(@PAAlbumsFolderName));
			MemUnlock(HandleOf(@PAAlbumsFolderName));
			strcat(pathName, "\\");
			strcat(pathName, selName);
			strcpy(G_albumName, selName);
			@call PAAlbumViewContent::MSG_PATL_INIT_FILE_LIST(SP_PRIVATE_DATA,
			                             pathName, TRUE);
			}
		@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		}
	else {
		@send PAAlbumViewContent::MSG_PATL_INIT(0);
		}

}

@method PAQueryAlbumList, PAProcessClass, MSG_PA_QUERY_ALBUM_LIST {

	optr viewChild, childObj;
	word loopCount;
	word itemCount;

	if(G_albumList && (item < G_albumCount)) {

		FileLongName *p_name;

		p_name = MemLock(G_albumList);
		@call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(item, p_name[item]);
		MemUnlock(G_albumList);
	}

    /* adjust doc bounds */
    viewChild = @call list::MSG_SPEC_GET_SPECIFIC_VIS_OBJECT(0) ;

    if(viewChild) {

        RectDWord bounds ;
        word maxWidth = 0 ;
        optr contentObj ;

        contentObj = @call viewChild::MSG_GEN_VIEW_GET_CONTENT() ;

        if(contentObj) {

            loopCount = 0 ;
            itemCount = @call list::MSG_GEN_COUNT_CHILDREN() ;
            while(loopCount < itemCount) {

                optr childObj = @call list::MSG_GEN_FIND_CHILD_AT_POSITION(loopCount) ;

                if(childObj) {

                    dword size ;

                    size = @call childObj::MSG_VIS_GET_SIZE() ;

                    if(DWORD_WIDTH(size) > maxWidth) {

                        maxWidth = DWORD_WIDTH(size) ;
                    }
                }

                loopCount++ ;
            }

            @call viewChild::MSG_GEN_VIEW_GET_DOC_BOUNDS(&bounds) ;

            @call viewChild::MSG_GEN_VIEW_SET_DOC_BOUNDS(
                                bounds.RD_bottom,
                                bounds.RD_left + maxWidth,
                                bounds.RD_top,
                                bounds.RD_left) ;
        }
    }
}

@method PAProcessClass, MSG_PA_APPLY_ALBUM_LIST {

	@send oself::MSG_PA_INIT_CURRENT_ALBUM();
	@send oself::MSG_PA_ADJUST_BUTTONS();
}

@method PACreateAlbum, PAProcessClass, MSG_PA_CREATE_ALBUM {

	Boolean retry = FALSE;

	@call PACreateNewAlbumText::MSG_VIS_TEXT_DELETE_ALL();

	do {

		retry = FALSE;

		if(UserDoDialog(@PACreateNewAlbumDialog) == IC_APPLY) {

			FileLongName name;

			@call PACreateNewAlbumText::MSG_VIS_TEXT_GET_ALL_PTR(name);

			FilePushDir();
			MemLock(HandleOf(@PAAlbumsFolderName));
			if(FileSetCurrentPath(SP_PRIVATE_DATA, LMemDeref(@PAAlbumsFolderName))) {

				word err;

				err = FileCreateDir(name);

				if(err == ERROR_FILE_EXISTS) {

					UserStandardDialogOptr(0, 0, 0, 0, @PAAlbumExistsError,
							(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));

					retry = TRUE;

				} else if(!err) {

					word albumIndex;

					strcpy(G_albumName, name);

					G_albumList = @call oself::MSG_PA_READ_ALBUM_LIST(G_albumName, &albumIndex, &G_albumCount);

					if(albumIndex == 0xFFFF) {

						albumIndex = 0;
					}

					@call PAAlbumList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
					@call PACopyPicturesWhichView::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
					@call PAAlbumList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(albumIndex, FALSE);
					strcpy(G_albumName, "");
					@call oself::MSG_PA_INIT_CURRENT_ALBUM();
					/* successfully created, update triggers */
					@call oself::MSG_PA_ADJUST_BUTTONS();
				} else {

					UserStandardDialogOptr(0, 0, 0, 0, @PACantCreateAlbumError,
							(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
				}

			}
			MemUnlock(HandleOf(@PAAlbumsFolderName));
			FilePopDir();
		}

	} while(retry);
}

/*
 * deletes the current album of the application
 */
@method PADeleteAlbum, PAProcessClass, MSG_PA_DELETE_ALBUM {

	FileLongName pathName;
	word itemIndex;

	if(strlen(G_albumName)) {

		StandardDialog2ResponseTriggerTable customTriggers = {
									2,
									{@PADeleteAlbumApplyTriggerMoniker, IC_APPLY},
									{@PADeleteAlbumCancelTriggerMoniker, IC_DISMISS}
		};

		itemIndex = @call PAAlbumList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

		if(UserStandardDialogOptr(0, &customTriggers, 0, 0, @PADeleteAlbumAffirmation,
							(GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET)) == IC_APPLY) {

			MemLock(HandleOf(@PAAlbumsFolderName));
			strcpy(pathName, LMemDeref(@PAAlbumsFolderName));
			MemUnlock(HandleOf(@PAAlbumsFolderName));

			FilePushDir();
			if(FileSetCurrentPath(SP_PRIVATE_DATA, pathName)) {

			        /* close index, so we can delete */
			        @call PAAlbumViewContent::MSG_PATL_EXIT();

				if(PADeleteTree(G_albumName)) {

					UserStandardDialogOptr(0, 0, 0, 0, @PACantDeleteAlbumError,
							(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));

				}
				/* fall through to re-initialize since we
				   called PATL_EXIT */

				@send oself::MSG_PA_INIT_ALBUM_LIST();

				if(itemIndex >= G_albumCount) {

				    itemIndex = G_albumCount - 1;
				}

				@call PAAlbumList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(itemIndex, FALSE);
				@send oself::MSG_PA_INIT_CURRENT_ALBUM();
				@send oself::MSG_PA_ADJUST_BUTTONS();
			}
		}
	}
}

@method PARenameAlbum, PAProcessClass, MSG_PA_RENAME_ALBUM {

    Boolean retry = FALSE;
    FileLongName oldName, newName;
    word err;
    word albumIndex;

    if (*G_albumName) {
	strcpy(oldName, G_albumName);
	/* start with empty (or current one?) */
	@call PARenameAlbumText::MSG_VIS_TEXT_DELETE_ALL();
	do {
	    retry = FALSE;
	    if(UserDoDialog(@PARenameAlbumDialog) == IC_APPLY) {
		@call PARenameAlbumText::MSG_VIS_TEXT_GET_ALL_PTR(newName);
		if (*newName) {
		    FilePushDir();
		    MemLock(HandleOf(@PAAlbumsFolderName));
		    if(FileSetCurrentPath(SP_PRIVATE_DATA, LMemDeref(@PAAlbumsFolderName))) {
			err = FileRename(oldName, newName);
			if(err == ERROR_FILE_EXISTS) {
			    UserStandardDialogOptr(0, 0, 0, 0, @PAAlbumExistsError,
						   (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
						   (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			    retry = TRUE;
			} else if(!err) {
			    /* close index, so we can rename */
			    @call PAAlbumViewContent::MSG_PATL_EXIT();
			    /* ignore error here if there is one, we'll just be
			       forced to rebuild a new entry for the renamed folder */
			    (void)PAAlbumRename(oldName, newName);
			    /* update to select renamed album */
			    strcpy(G_albumName, newName);
				 G_albumList = @call oself::MSG_PA_READ_ALBUM_LIST(G_albumName, &albumIndex, &G_albumCount);
			    if(albumIndex == 0xFFFF) {
				albumIndex = 0;
			    }
			    @call PAAlbumList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
			    @call PACopyPicturesWhichView::MSG_GEN_DYNAMIC_LIST_INITIALIZE(G_albumCount);
			    @call PAAlbumList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(albumIndex, FALSE);
			    strcpy(G_albumName, "");
			    @call oself::MSG_PA_INIT_CURRENT_ALBUM();
			    /* successfully renamed, update triggers */
			    @call oself::MSG_PA_ADJUST_BUTTONS();
			} else {
			    UserStandardDialogOptr(0, 0, 0, 0, @PACantRenameAlbumError,
						   (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
						   (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			}
		    }
		    MemUnlock(HandleOf(@PAAlbumsFolderName));
		    FilePopDir();
		}
	    }
	} while(retry);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_ADJUST_BUTTONS for PAProcessClass
 *
 *
 * DESCRIPTION:	sets the various triggers based onhow many thumbnails
 *                are showing and selected
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_ADJUST_BUTTONS
{
 word		numSel, numItems, curSel;


	numSel = @call PAAlbumViewContent::MSG_PATL_GET_NUM_SELECTIONS();
	if(numSel != 1) {
		@call PAAlbumViewTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumNotesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumViewFullSizeTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditAddNotesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	else {
		@call PAAlbumViewTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumNotesTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumViewFullSizeTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditAddNotesTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

	if(numSel) {
		@call PAAlbumEditCopyTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	else {
		@call PAAlbumEditCopyTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

	if(G_albumList && G_albumCount) {
		@call PAAlbumEditGetPicsTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumGetPicturesTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	else {
		@call PAAlbumEditGetPicsTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumGetPicturesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

	numItems = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();
	if((numItems > 1) && (numSel == 1))  {
		@call PAAlbumNaviButtonGroup::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditMovePictureGroup::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		curSel = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION();
		if(curSel) {
			@call PAAlbumEditMoveFrontTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumEditMoveBackTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumNaviForwardTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			}
		else {
			@call PAAlbumEditMoveFrontTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumEditMoveBackTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumNaviForwardTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			}

		if((curSel + 1) < numItems) {
			@call PAAlbumEditMoveEndTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumEditMoveForwardTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumNaviBackwardTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			}
		else {
			@call PAAlbumEditMoveEndTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumEditMoveForwardTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			@call PAAlbumNaviBackwardTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
			}
		}
	else {
		@call PAAlbumNaviButtonGroup::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@call PAAlbumEditMovePictureGroup::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_ALBUM_ITEM_SELECTION for PAProcessClass
 *          (PATL_SELECTION_MSG)
 *          (word item, Boolean newState, word selCount, Boolean doublePress)
 *
 * DESCRIPTION:	called on user selection of a photo in the Album
 *                view
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_ALBUM_ITEM_SELECTION {


	if(!doublePress)
		@call oself::MSG_PA_ADJUST_BUTTONS();
	else {
		/* don't view if nothing selected */
		if (@call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION() != 0xFFFF) {
			@send oself::MSG_PA_VIEW_PICTURE_FROM_ALBUM(0);
			}
		}

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_OPEN_GET_PICTURES for PAProcessClass
 *
 *
 * DESCRIPTION:	Open the get pix dbox
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_OPEN_GET_PICTURES {


	/* let's open in Document */
	@call PAGetPicturesFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);
	@call PAGetPicturesFileSel::MSG_GEN_SET_ENABLED(VUM_NOW);

	@send PAGetPicturesViewContent::MSG_PATL_UNSELECT_ALL();
	@send PAGetPicturesDialog::MSG_GEN_INTERACTION_INITIATE();
	@send PAGetPicturesDialog::MSG_GEN_MAKE_NOT_APPLYABLE();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_GET_PICTURES_FROM_DOCUMENT for PAProcessClass
 *
 *
 *
 * DESCRIPTION:	the user clicked the Document button in our file sel
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_GET_PICTURES_FROM_DOCUMENT {


	SetPathForDocuments(@PAGetPicturesFileSel, @PAGetPicturesPathPopup);
	@call PAGetPicturesDialog::MSG_GEN_MAKE_APPLYABLE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_GET_PICTURES_FROM_CAMERA for PAProcessClass
 *
 *
 * DESCRIPTION:	the user clicked the Camera button in our file sel
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_GET_PICTURES_FROM_CAMERA {

	@call application::MSG_GEN_APPLICATION_MARK_BUSY();
	@call PAGetPicturesFileSel::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	/* download files */
	if(PACameraRetrieve()) {

		/* error downloading the images */

		}
	else {
		/* init the file list */
		@call PAGetPicturesViewContent::MSG_PATL_INIT_FILE_LIST(
									SP_PRIVATE_DATA, "PA Camera Temporary", FALSE);
		}

	@send PAGetPicturesDialog::MSG_GEN_MAKE_NOT_APPLYABLE();
	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_GET_PICTURES_PATH_CHANGED for PAProcessClass
 *           (GEN_FILE_SELECTOR_NOTIFICATION_MSG)
 *				word	entryNum,
 *				GenFileSelectorEntryFlags	entryFlags
 *
 * DESCRIPTION:	- the Get Pictures file sel notification msg
 *                - Tell the path & drive popups what our file selector
 *                is doing as the user makes selections
 *                - Update the thumbnails of the avail pix
 ***********************************************************************/
@method PAProcessClass, MSG_PA_GET_PICTURES_PATH_CHANGED {
 PathName	pathBuf;
 dword		diskAndFlags;
 DiskHandle disk;


	diskAndFlags = @call PAGetPicturesFileSel::
						MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(&pathBuf);
	@call PAGetPicturesPathPopup::MSG_PA_PATH_POPUP_SET_PATH(
				&pathBuf, GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(diskAndFlags));
	@call PAGetPicturesDrivePopup::MSG_PA_DRIVE_POPUP_SET_DRIVE(
				&pathBuf, GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(diskAndFlags));

	/* Update the thumbnails of the avail pix */
	@call application::MSG_GEN_APPLICATION_MARK_BUSY();
	disk = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(diskAndFlags);
	@call PAGetPicturesViewContent::MSG_PATL_INIT_FILE_LIST(disk, pathBuf, FALSE);
	@send PAGetPicturesFileSel::MSG_GEN_MAKE_NOT_APPLYABLE();
	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_GET_PICTURES_SELECTION_CHANGED for PAProcessClass
 *				(PATL_SELECTION_MSG)
 *            (word item, Boolean newState,
 *					word selCount, Boolean doublePress)
 *
 * DESCRIPTION:	called on user selection of a photo in the Get Photos
 *                dialog box
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_GET_PICTURES_SELECTION_CHANGED {

	if(selCount)
		@send PAGetPicturesDialog::MSG_GEN_MAKE_APPLYABLE();
	else
		@send PAGetPicturesDialog::MSG_GEN_MAKE_NOT_APPLYABLE();

}

@method PAGetPicturesApply, PAProcessClass, MSG_PA_GET_PICTURES_APPLY {

	word loopCount;
	word itemCount;

	itemCount = @call PAGetPicturesViewContent::MSG_PATL_GET_NUM_ITEMS();
	loopCount = 0;
	while(loopCount < itemCount) {

		if(@call PAGetPicturesViewContent::MSG_PATL_IS_ITEM_SELECTED(loopCount)) {

			/* copy the file to the new album in fuzzy mode */
			FilePushDir();
			if(FileSetCurrentPath(SP_PRIVATE_DATA, "PA Albums")) {

				if(FileSetCurrentPath(0, G_albumName)) {

					@call PAGetPicturesViewContent::MSG_PATL_COPY_IMAGE(loopCount, TRUE);
				}
			}
			FilePopDir();
		}

		loopCount++;
	}

	strcpy(G_albumName, "");
	@call oself::MSG_PA_INIT_CURRENT_ALBUM();
}

@method PAAddNotes, PAProcessClass, MSG_PA_ADD_NOTES {

	TCHAR buffer[PA_PICTURES_NOTES_TEXT_LEN + 1];
	FileLongName fileName;

	@call PAAlbumViewContent::MSG_PATL_GET_CURRENT_ITEM_FILENAME(fileName);
	@call PAAddNotesFilename::MSG_VIS_TEXT_REPLACE_ALL_PTR(fileName, 0);

	@call PAAlbumViewContent::MSG_PATL_GET_CURRENT_ITEM_SIZE_STRING(buffer);
	@call PAAddNotesSize::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0);

	G_addNotesItem = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_ITEM_NOTES(buffer);
	@call PAAddNotesNotes::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0);

	@send PAAddNotesDialog::MSG_GEN_INTERACTION_INITIATE();
}

@method PAAddNotesApply, PAProcessClass, MSG_PA_ADD_NOTES_APPLY {

	TCHAR buffer[PA_PICTURES_NOTES_TEXT_LEN + 1];

	@call PAAddNotesNotes::MSG_VIS_TEXT_GET_ALL_PTR(buffer);
	@send PAAddNotesDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	@call PAAlbumViewContent::MSG_PATL_SET_CURRENT_ITEM_NOTES(buffer, G_addNotesItem);
}

@method PAShuffleLeft, PAProcessClass, MSG_PA_SHUFFLE_LEFT {

	word currentSelection;

	currentSelection = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION();

	@call PAAlbumViewContent::MSG_PATL_SWAP_ITEMS(currentSelection, currentSelection - 1, TRUE);
	@call oself::MSG_PA_ADJUST_BUTTONS();
}

@method PAShuffleRight, PAProcessClass, MSG_PA_SHUFFLE_RIGHT {

	word currentSelection;

	currentSelection = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION();

	@call PAAlbumViewContent::MSG_PATL_SWAP_ITEMS(currentSelection, currentSelection + 1, TRUE);
	@call oself::MSG_PA_ADJUST_BUTTONS();
}

@method PAMoveToFront, PAProcessClass, MSG_PA_MOVE_TO_FRONT {

	word currentSelection;

	@call application::MSG_GEN_APPLICATION_MARK_BUSY();
	@call application::MSG_GEN_APPLICATION_IGNORE_INPUT();

	currentSelection = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION();

	@call PAAlbumPictureList::MSG_GEN_VIEW_SUSPEND_UPDATE();
	do {

		@call PAAlbumViewContent::MSG_PATL_SWAP_ITEMS(currentSelection, currentSelection - 1, FALSE);
//		@call PAAlbumViewContent::MSG_PATL_REDRAW_ITEM(currentSelection);

		currentSelection--;

	} while(currentSelection);
	@call PAAlbumPictureList::MSG_GEN_VIEW_UNSUSPEND_UPDATE();
	@send PAAlbumViewContent::MSG_VIS_MARK_INVALID(
		VOF_GEOMETRY_INVALID | /*VOF_WINDOW_INVALID |*/ VOF_IMAGE_INVALID,
		VUM_NOW);

	@call oself::MSG_PA_ADJUST_BUTTONS();

	@call application::MSG_GEN_APPLICATION_ACCEPT_INPUT();
	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}

@method PAMoveToEnd, PAProcessClass, MSG_PA_MOVE_TO_END {

	word currentSelection;
	word itemCount;

	@call application::MSG_GEN_APPLICATION_MARK_BUSY();
	@call application::MSG_GEN_APPLICATION_IGNORE_INPUT();

	currentSelection = @call PAAlbumViewContent::MSG_PATL_GET_CURRENT_SELECTION();
	itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

	@call PAAlbumPictureList::MSG_GEN_VIEW_SUSPEND_UPDATE();
	do {

		@call PAAlbumViewContent::MSG_PATL_SWAP_ITEMS(currentSelection, currentSelection + 1, FALSE);
//		@call PAAlbumViewContent::MSG_PATL_REDRAW_ITEM(currentSelection);

		currentSelection++;

	} while((currentSelection  + 1) < itemCount);
	@call PAAlbumPictureList::MSG_GEN_VIEW_UNSUSPEND_UPDATE();
	@send PAAlbumViewContent::MSG_VIS_MARK_INVALID(
		VOF_GEOMETRY_INVALID | /*VOF_WINDOW_INVALID |*/ VOF_IMAGE_INVALID,
		VUM_NOW);

	@call oself::MSG_PA_ADJUST_BUTTONS();

	@call application::MSG_GEN_APPLICATION_ACCEPT_INPUT();
	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
}

@method PADeletePicture, PAProcessClass, MSG_PA_DELETE_PICTURE {

	StandardDialog2ResponseTriggerTable customTriggers = {
								2,
								{@PADeleteAlbumApplyTriggerMoniker, IC_APPLY},
								{@PADeletePictureCancelTriggerMoniker, IC_DISMISS}
	};

	if(@call PAAlbumViewContent::MSG_PATL_GET_NUM_SELECTIONS() > 1) {

		if(UserStandardDialogOptr(0, &customTriggers, 0, 0, @PADeleteMultiplePictureAffirmation,
							(GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET)) == IC_APPLY) {

			if(@call PAAlbumViewContent::MSG_PATL_DELETE_SELECTED_ITEMS()) {

				UserStandardDialogOptr(0, 0, 0, 0, @PADeletePictureError,
						(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
						(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			}
		}

	} else {

		if(UserStandardDialogOptr(0, &customTriggers, 0, 0, @PADeletePictureAffirmation,
							(GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) |
							(CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET)) == IC_APPLY) {

			if(@call PAAlbumViewContent::MSG_PATL_DELETE_CURRENT_ITEM()) {

				UserStandardDialogOptr(0, 0, 0, 0, @PADeletePictureError,
						(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
						(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			}
		}
	}

	@call oself::MSG_PA_ADJUST_BUTTONS();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_PICS_FROM_ALBUM for PAProcessClass
 *
 *
 * DESCRIPTION:	sent by the copy trigger in the album view - may
 *                have multiple pix selected
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_PICS_FROM_ALBUM {


	G_copyPicsList = @PAAlbumViewContent;
	@call oself::MSG_PA_OPEN_COPY_PICS();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_PICS_FROM_VIEW for PAProcessClass
 *
 *
 * DESCRIPTION:	sent by the trigger in the single pic view mode
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_PICS_FROM_VIEW {


	G_copyPicsList = 0;
	@call oself::MSG_PA_OPEN_COPY_PICS();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_OPEN_COPY_PICS for PAProcessClass
 *
 *
 * DESCRIPTION:	Open the copy pix dbox - called by one of the two above
 *                methods
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_OPEN_COPY_PICS {


	if(!G_albumInit) {
		@call application::MSG_GEN_APPLICATION_MARK_BUSY();
		@send oself::MSG_PA_INIT_ALBUM_LIST();
		@send oself::MSG_PA_INIT_CURRENT_ALBUM();
		@send oself::MSG_PA_ADJUST_BUTTONS();
		G_albumInit = TRUE;
		@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		}

	@call PACopyPicturesDialog::MSG_GEN_MAKE_APPLYABLE();

	/* enable the album button if there are any albums */
	if(@call PACopyPicturesWhichView::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS())
		@call PACopyPicturesToAlbumButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	else
		@call PACopyPicturesToAlbumButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);


	/* open before setting document, so FileSelector will obey path
		change */
	@send PACopyPicturesDialog::MSG_GEN_INTERACTION_INITIATE();
	@send oself::MSG_PA_COPY_TO_DOCUMENT();

}


/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_TO_DOCUMENT for PAProcessClass
 *
 *
 * DESCRIPTION:	user selected Documents from the file sel
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_TO_DOCUMENT {


	@call PACopyPicturesWhichView::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@call PACopyPicturesDestPath::MSG_GEN_SET_USABLE(VUM_NOW);
	SetPathForDocuments(@PACopyPicturesDestPath, @PACopyPicturesToPathPopup);
	@call PACopyPicturesDialog::MSG_GEN_MAKE_APPLYABLE();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_TO_ALBUM for PAProcessClass
 *
 *
 * DESCRIPTION:	user selected the album list from the file sel
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_TO_ALBUM {

	@call PACopyPicturesDestPath::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	@call PACopyPicturesWhichView::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

	if(@call PACopyPicturesWhichView::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS())
		@call PACopyPicturesDialog::MSG_GEN_MAKE_APPLYABLE();
	else
		@call PACopyPicturesDialog::MSG_GEN_MAKE_NOT_APPLYABLE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_PICTURES_DEST_PATH for PAProcessClass
 *           (GEN_FILE_SELECTOR_NOTIFICATION_MSG)
 *				word	entryNum,
 *				GenFileSelectorEntryFlags	entryFlags
 *
 * DESCRIPTION:	Tell the path & drive popups what our file selector
 *                is doing as the user makes selections
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_PICTURES_DEST_PATH
{
 PathName	pathBuf;
 dword		diskAndFlags;


	diskAndFlags = @call PACopyPicturesDestPath::
						MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(&pathBuf);
	@call PACopyPicturesToPathPopup::MSG_PA_PATH_POPUP_SET_PATH(
				&pathBuf, GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(diskAndFlags));
	@call PACopyPicturesToDrivePopup::MSG_PA_DRIVE_POPUP_SET_DRIVE(
				&pathBuf, GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(diskAndFlags));

}

/***********************************************************************
 *
 * MESSAGE:	MSG_PA_COPY_PICTURES_APPLY for PAProcessClass
 *
 *
 * DESCRIPTION:	do the copy
 *
 *
 ***********************************************************************/
@method PAProcessClass, MSG_PA_COPY_PICTURES_APPLY {
 word				sel, loopCount, itemCount;
 FileLongName	selName;
 PathName		pathBuf;
 DiskHandle		diskHan;
 FileLongName *p_name;


	@call application::MSG_GEN_APPLICATION_MARK_BUSY();

	@call PACopyProgressDialog::MSG_GEN_INTERACTION_INITIATE();

	/* get the destination's path and disk handle */
	FilePushDir();
	if (@call PACopyPicturesDestPath::MSG_GEN_GET_USABLE()) {
		/* from the file sel */
		@call PACopyPicturesDestPath::MSG_GEN_PATH_GET(pathBuf, sizeof(pathBuf));
		diskHan = @call PACopyPicturesDestPath::MSG_GEN_PATH_GET_DISK_HANDLE();
		FileSetCurrentPath(diskHan, pathBuf);
		}
	else {
		/* which album */
		sel = @call PACopyPicturesWhichView::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		if(G_albumList && (sel < G_albumCount)) {
			p_name = MemLock(G_albumList);
			strcpy(selName, p_name[sel]);
			MemUnlock(G_albumList);
			if(FileSetCurrentPath(SP_PRIVATE_DATA, "PA Albums"))
				FileSetCurrentPath(0, selName);
			}
		}

	if(G_copyPicsList)
		itemCount = @call G_copyPicsList::MSG_PATL_GET_NUM_ITEMS();
	else itemCount = 1;

	loopCount = 0;
	while(loopCount < itemCount) {
		if((!G_copyPicsList) || @call G_copyPicsList::MSG_PATL_IS_ITEM_SELECTED(loopCount)) {
			if(G_copyPicsList) {
				@call G_copyPicsList::MSG_PATL_COPY_IMAGE(loopCount, TRUE);
				}
			else {
				word err2;
				PathName srcPath;

				strcpy(srcPath, G_picturePath);
				if(strcmp(srcPath, "\\\\")) {
					strcat(srcPath, "\\");
					strcat(srcPath, G_pictureName);
					}
				else {
					strcpy(srcPath, G_pictureName);
					}

				/* copy the current image */
				err2 = PACopyFileFlexible(G_pictureDisk, srcPath, G_pictureName, TRUE);

				}  /* end of !G_copyPicsList else  */
			}
		loopCount++;
		}  /* end of copy while */
	FilePopDir();

	strcpy(G_albumName, "");
	@call oself::MSG_PA_INIT_CURRENT_ALBUM();
	if(G_copyPicsList) {
		@call G_copyPicsList::MSG_PATL_UNSELECT_ALL();
	}

	@call PACopyProgressDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

}

@method PAProcessClass, MSG_PA_SUSPEND_WINDOW
{
    if (win)
	WinSuspendUpdate(win);
}

@method PAProcessClass, MSG_PA_UNSUSPEND_WINDOW
{
    if (win)
	WinUnSuspendUpdate(win);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for PASlideShowDialogClass
 *
 *
 * DESCRIPTION:	Intercepts right & left arrow in slide show
 *
 *
 ***********************************************************************/
@method PASlideShowDialogClass, MSG_META_KBD_CHAR {


	if(((character & 0xff) == VC_RIGHT) && (flags & CF_FIRST_PRESS))
		@send process::MSG_PA_PREV_SLIDE(0);

	else if(((character & 0xff) == VC_LEFT) && (flags & CF_FIRST_PRESS))
		@send process::MSG_PA_NEXT_SLIDE();

	else @callsuper();

}


