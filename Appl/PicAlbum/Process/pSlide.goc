@include "PicAlbum.goh"
#include <extgraph.h>
#include <Ansi/string.h>

@extern object PASlideShowManualItemGroup;
@extern object PASlideShowAutoItemGroup;
@extern object PASlideShowAutoTextGroup;
@extern object PASlideShowTimeEntry;
@extern object PASlideShowDialog;
@extern object PASlideShowViewText;
@extern object PASlideShowView;
@extern object PASlideShowOptionsBottomGroup;
@extern object PASlideShowViewContainer;
@extern object PAAlbumViewContent;

word G_slideCurrent = 0;
VMBlockHandle G_slideImage = 0;
VMBlockHandle G_nextSlideImage = 0;
FileLongName G_nextSlideName = "";
Boolean G_slideShowOn = FALSE;

TimerHandle G_slideTimer = 0;
word G_slideTimerId = 0;
Boolean G_slideImporting = FALSE;

extern FileLongName G_albumName;
extern VMFileHandle G_tempVMFile;

@start TechnicalStrings, data;

@chunk TCHAR PAEndOfSlideShow = "Slide show finished.";
@chunk TCHAR PANoPicturesInAlbum = "There are no pictures in the current picture album.";
@chunk TCHAR PAErrorPictureImport = "There was an error import this picture";

@end TechnicalStrings;

@extern method PAStartSlideShow, PAProcessClass, MSG_PA_START_SLIDE_SHOW {

	ColorQuad colorQuad = {C_WHITE, CF_INDEX, 0, 0};
	word itemCount;
	TCHAR buffer[70];

	itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

	if(itemCount) {

		G_slideImage = 0;
		G_slideCurrent = 0;

		@call PAAlbumViewContent::MSG_PATL_GET_ITEM_FILENAME(G_slideCurrent, G_nextSlideName);

		/* set title */
		strcpy(buffer, "Slide Show - ");
		strcat(buffer, G_albumName);
		@call PASlideShowDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);

		/* show/hide texts */
		@send PASlideShowDialog::MSG_GEN_INTERACTION_INITIATE();

		@call PASlideShowViewText::MSG_VIS_TEXT_SET_COLOR(colorQuad, -1, 0);
		@call PASlideShowViewText::MSG_VIS_TEXT_SET_PARA_ATTRIBUTES(
							VTPAA_JUSTIFICATION,
							J_CENTER << VTPAA_JUSTIFICATION_OFFSET,
							-1, 0);

		@call application::MSG_GEN_APPLICATION_MARK_BUSY();

		/* preimport first pictures */
		G_nextSlideImage = @call PAAlbumViewContent::MSG_PATL_IMPORT(G_tempVMFile, G_slideCurrent);
		@call PAAlbumViewContent::MSG_PATL_GET_ITEM_FILENAME(G_slideCurrent, G_nextSlideName);
		G_slideImporting = FALSE;

		if(G_nextSlideImage) {

			G_slideShowOn = TRUE;
			@send oself::MSG_PA_NEXT_SLIDE();

		} else {

			UserStandardDialogOptr(0, 0, 0, 0, @PAErrorPictureImport,
					(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
					(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
			@call PASlideShowDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		}

		@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

	} else {

		UserStandardDialogOptr(0, 0, 0, 0, @PANoPicturesInAlbum,
				(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
				(CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET));
	}
}

@extern method PANextSlide, PAProcessClass, MSG_PA_NEXT_SLIDE {

	TCHAR buffer[PA_PICTURES_NOTES_TEXT_LEN + 1];
	SizeAsDWord size, viewSize;
	word itemCount;

	if(G_slideImporting) {

		@send ,forceQueue+ oself::MSG_PA_NEXT_SLIDE();
		return;
	}

	if(G_slideTimer) {

		TimerStop(G_slideTimer, G_slideTimerId);
		G_slideTimer = 0;
	}

	itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

	if(!G_nextSlideImage || !G_slideShowOn) {

		if(G_slideShowOn) {

			UserStandardDialogOptr(0, 0, 0, 0, @PAEndOfSlideShow,
					(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
					(CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET));

			G_slideShowOn = FALSE;
			@call PASlideShowDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

			if(G_slideImage) {

				VMFreeVMChain(G_tempVMFile,
						VMCHAIN_MAKE_FROM_VM_BLOCK(G_slideImage));
				G_slideImage = 0;
			}
		}

	} else {

		if(G_slideImage) {

			VMFreeVMChain(G_tempVMFile,
					VMCHAIN_MAKE_FROM_VM_BLOCK(G_slideImage));
		}
		G_slideImage = G_nextSlideImage;
		G_nextSlideImage = 0;

		/* set title */
		strcpy(buffer, G_albumName);
		strcat(buffer, " - ");
		strcat(buffer, G_nextSlideName);
		@call PASlideShowDialog::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);

		/* set text */
		@call PAAlbumViewContent::MSG_PATL_GET_ITEM_NOTES(G_slideCurrent, buffer);
		@call PASlideShowViewText::MSG_VIS_TEXT_REPLACE_ALL_PTR(buffer, 0);

		if(@call PASlideShowOptionsBottomGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(2) && strlen(buffer)) {

			@call PASlideShowViewText::MSG_GEN_SET_USABLE(VUM_NOW);

		} else {

			@call PASlideShowViewText::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		}

		/* show/set image */
		size = BmpGetBitmapSize(G_tempVMFile, G_slideImage, 0);
		viewSize = @call PASlideShowViewContainer::MSG_VIS_GET_SIZE();
		@call PASlideShowView::MSG_GEN_VIEW_SUSPEND_UPDATE();
		if(((((dword)DWORD_WIDTH(size)) * 100) / DWORD_HEIGHT(size)) > ((((dword)DWORD_WIDTH(viewSize)) * 100) / DWORD_HEIGHT(viewSize))) {

			@call PASlideShowView::MSG_META_ADD_VAR_DATA(ATTR_GEN_VIEW_SCALE_TO_FIT_BASED_ON_X, 0, NULL);

		} else {

			@call PASlideShowView::MSG_META_DELETE_VAR_DATA(ATTR_GEN_VIEW_SCALE_TO_FIT_BASED_ON_X);
		}
		@call PASlideShowView::MSG_GEN_VIEW_SET_DOC_BOUNDS(0, 0, 0, 0);
		@call PASlideShowView::MSG_GEN_VIEW_SET_DOC_BOUNDS(DWORD_HEIGHT(size), DWORD_WIDTH(size), 0, 0);
		@call PASlideShowView::MSG_GEN_VIEW_REDRAW_CONTENT();
		@call PASlideShowView::MSG_GEN_VIEW_UNSUSPEND_UPDATE();

		G_slideCurrent++;

		if(G_slideCurrent == itemCount) {

			if(@call PASlideShowOptionsBottomGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1)) {

				G_slideCurrent = 0;
			}
		}

		G_slideImporting = TRUE;
		@send ,forceQueue+ oself::MSG_PA_IMPORT_NEXT();

		/* if auto init timer for next */
		if(@call PASlideShowAutoItemGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION() == 1) {

			word delay = IntegerOf(@call PASlideShowTimeEntry::MSG_GEN_VALUE_GET_VALUE());

			G_slideTimer = TimerStart(TIMER_EVENT_ONE_SHOT, oself, delay * 60, MSG_PA_NEXT_SLIDE, 0, &G_slideTimerId);
		}
	}
}

@extern method PAImportNext, PAProcessClass, MSG_PA_IMPORT_NEXT {

	word itemCount;

	@call application::MSG_GEN_APPLICATION_MARK_BUSY();

	itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

	if(G_slideCurrent < itemCount) {

		@call PAAlbumViewContent::MSG_PATL_GET_ITEM_FILENAME(G_slideCurrent, G_nextSlideName);
		G_nextSlideImage = @call PAAlbumViewContent::MSG_PATL_IMPORT(G_tempVMFile, G_slideCurrent);
	}

	@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
	G_slideImporting = FALSE;
}

@extern method PAStartSelect, PAProcessClass, MSG_META_START_SELECT {

	word itemCount;

	if(G_slideShowOn) {

//		if(@call PASlideShowManualItemGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION() == 1) {

			itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

			if(G_nextSlideImage || (G_slideCurrent == itemCount)) {

				@send oself::MSG_PA_NEXT_SLIDE();
			}
//		}
	}

    retVal->flags = MRF_PROCESSED;
    retVal->ptrImage = NullOptr;
}

@extern method PASlideVisibilityNotification, PAProcessClass, MSG_PA_SLIDE_VISIBILITY_NOTIFICATION {

	if((obj == @PASlideShowDialog) && (!opening)) {

		/* stop timer */
		if(G_slideTimer) {

			TimerStop(G_slideTimer, G_slideTimerId);
			G_slideTimer = 0;
		}

		/* stop slide show */
		G_slideShowOn = FALSE;

		/* clean up */
		if(G_slideImage) {

			VMFreeVMChain(G_tempVMFile,
					VMCHAIN_MAKE_FROM_VM_BLOCK(G_slideImage));
			G_slideImage = 0;
		}
		if(G_nextSlideImage) {

			VMFreeVMChain(G_tempVMFile,
					VMCHAIN_MAKE_FROM_VM_BLOCK(G_nextSlideImage));
			G_nextSlideImage = 0;
		}
	}
}

@extern method PAProcessClass, MSG_PA_SLIDE_SHOW_AUTO_STATUS
{
    if (selection == 1) {
	@call PASlideShowManualItemGroup::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(0);
	@call PASlideShowAutoTextGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    } else {
	/* reselect ourselves */
	@send,forceQueue,insertAtFront PASlideShowAutoItemGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(1, 0);
    }
}

@extern method PAProcessClass, MSG_PA_SLIDE_SHOW_MANUAL_STATUS
{
    if (selection == 1) {
	@call PASlideShowAutoItemGroup::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(0);
	@call PASlideShowAutoTextGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    } else {
	/* reselect ourselves */
	@send,forceQueue,insertAtFront PASlideShowManualItemGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(1, 0);
    }
}

@extern method PAPrevSlide, PAProcessClass, MSG_PA_PREV_SLIDE
{
	word itemCount;

	if(G_slideImporting) {

		@send ,forceQueue+ oself::MSG_PA_PREV_SLIDE(0);
		return;
	}

	itemCount = @call PAAlbumViewContent::MSG_PATL_GET_NUM_ITEMS();

	if(G_slideShowOn && (itemCount >= 2)) {

		if((G_slideCurrent != 1) || @call PASlideShowOptionsBottomGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1)) {

			if(G_slideTimer) {

				TimerStop(G_slideTimer, G_slideTimerId);
				G_slideTimer = 0;
			}


			if(!G_slideCurrent) {

				G_slideCurrent = itemCount;

			} else if(G_slideCurrent == 1) {

				G_slideCurrent = itemCount + 1;
			}
			G_slideCurrent -= 2;

			if(G_slideImage) {

				VMFreeVMChain(G_tempVMFile,
						VMCHAIN_MAKE_FROM_VM_BLOCK(G_slideImage));
			}
			G_slideImage = 0;

			if(G_nextSlideImage) {

				VMFreeVMChain(G_tempVMFile,
						VMCHAIN_MAKE_FROM_VM_BLOCK(G_nextSlideImage));
			}
			G_nextSlideImage = 0;

			@call application::MSG_GEN_APPLICATION_MARK_BUSY();

			/* preimport first pictures */
			G_nextSlideImage = @call PAAlbumViewContent::MSG_PATL_IMPORT(G_tempVMFile, G_slideCurrent);
			@call PAAlbumViewContent::MSG_PATL_GET_ITEM_FILENAME(G_slideCurrent, G_nextSlideName);

			if(G_nextSlideImage) {

				@send oself::MSG_PA_NEXT_SLIDE();

			} else {

				UserStandardDialogOptr(0, 0, 0, 0, @PAErrorPictureImport,
						(GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) |
						(CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET));
				@call PASlideShowDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
				G_slideShowOn = FALSE;
			}

			@call application::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
		}
	}
}

@extern method PANextSlideTrigger, PAProcessClass, MSG_PA_NEXT_SLIDE_TRIGGER
{
	@send oself::MSG_PA_NEXT_SLIDE();
}
