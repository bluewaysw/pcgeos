/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari Builder
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include "safari2.goh"
@include "global.goh"
@include <wav.goh>
@include <token.h>

@classdecl	SafariProcessClass, neverSaved ;
@classdecl      SafariAppClass;
@classdecl      SafBackgroundClass;

#ifdef __BORLANDC__
#pragma codeseg UtilCode
#endif
#ifdef __WATCOMC__
#pragma code_seg("UtilCode")
#endif


/***********************************************************************
 *		MSG_VIS_DRAW
 ***********************************************************************
 * SYNOPSIS:	    draw a wacky background for the primary
 * PASS:            gstate - handle of GState
 *                  drawFlags - DrawFlags
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	9/29/99		Initial Revision
 *
 ***********************************************************************/

optr backgrounds[] = {
    NULL,
    @Back7Moniker,
    @Back5Moniker,
    @Back8Moniker,
    @Back3Moniker,
    @Back4Moniker,
    @Back6Moniker,
    @Back9Moniker,
    @Back1Moniker,
    NULL,
    NULL
};

Color backColors[] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    C_LIGHT_GRAY,
    C_LIGHT_BLUE
};

sword
AlignToBG(sword value, sword left)
{
    return((((value - left) / BACKGROUND_WIDTH) * BACKGROUND_WIDTH) + left);
}

@method SafBackgroundClass, MSG_VIS_DRAW
{
    Rectangle bounds;
    sword x, y;
    Bitmap *bitmap;
    sword borderSize;
    optr bmap;
    word index;
    word left, top;

    index = pself->SBI_backIndex;

    @call oself::MSG_VIS_GET_BOUNDS(&bounds);
    GrSaveState(gstate);
    GrSetClipRect(gstate, PCT_INTERSECTION, bounds.R_left, bounds.R_top, bounds.R_right, bounds.R_bottom);

    bmap = backgrounds[index];

    if (!bmap) {
	GrSetAreaColor(gstate, CF_INDEX, backColors[index], 0, 0);
	GrFillRect(gstate, bounds.R_left, bounds.R_top, bounds.R_right, bounds.R_bottom);
    } else {
	MemLock(OptrToHandle(bmap));
	bitmap = LMemDeref(bmap);

	/*
	 * draw along the left and right edges
	 */
	borderSize = ((bounds.R_right - bounds.R_left + 1) - SAFARI_GAME_CARD_WIDTH) / 2;
	for (y = bounds.R_top; y < bounds.R_bottom; y += BACKGROUND_HEIGHT) {
	    for (x = bounds.R_left; x < bounds.R_left + borderSize; x += BACKGROUND_WIDTH) {
		GrDrawBitmap(gstate, x, y, bitmap, NULL);
	    }
	    left = AlignToBG(bounds.R_right - borderSize, bounds.R_left);
	    for (x = left; x < bounds.R_right; x += BACKGROUND_WIDTH) {
		GrDrawBitmap(gstate, x, y, bitmap, NULL);
	    }
	}
	/*
	 * draw along the bottom edge
	 */
	borderSize = ((bounds.R_bottom - bounds.R_top + 1) - SAFARI_GAME_CARD_HEIGHT);
	for (x = bounds.R_left; x < bounds.R_right; x += BACKGROUND_WIDTH) {
	    top = AlignToBG(bounds.R_bottom - borderSize, bounds.R_top);
	    for (y = top; y < bounds.R_bottom; y += BACKGROUND_HEIGHT) {
		GrDrawBitmap(gstate, x, y, bitmap, NULL);
	    }
	}
	MemUnlock(OptrToHandle(bmap));
    }

    GrRestoreState(gstate);

    @callsuper();
}


/***********************************************************************
 *		MSG_SAF_BACKGROUND_SET_BACKGROUND
 ***********************************************************************
 * SYNOPSIS:	    set a wacky background for the primary
 * PASS:            selection - index of background
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	9/29/99		Initial Revision
 *
 ***********************************************************************/

@method SafBackgroundClass, MSG_SAF_BACKGROUND_SET_BACKGROUND
{
    if (selection >= sizeof(backgrounds)/sizeof(dword)) {
	selection = 0;
    }
    pself->SBI_background = selection;
    @call oself::MSG_SAF_BACKGROUND_RANDOM_BACKGROUND();
    @call oself::MSG_VIS_REDRAW_ENTIRE_OBJECT();
}

@method SafBackgroundClass, MSG_SAF_BACKGROUND_RANDOM_BACKGROUND
{
    word rnd;

    if (pself->SBI_background == 0) {
	rnd = GameRandom(sizeof(backgrounds)/sizeof(dword) - 1) + 1;
	if (rnd != pself->SBI_backIndex) {
	    pself->SBI_backIndex = rnd;
	    @call oself::MSG_VIS_REDRAW_ENTIRE_OBJECT();
	}
    } else {
	pself->SBI_backIndex = pself->SBI_background;
    }
}


/***********************************************************************
 *		MSG_SAF_BACKGROUND_QUERY_MONIKER
 ***********************************************************************
 * SYNOPSIS:	    draw a wacky background for the dynamic list
 * PASS:            list - optr of list
 *                  item - item #
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	9/29/99		Initial Revision
 *
 ***********************************************************************/

@method SafBackgroundClass, MSG_SAF_BACKGROUND_QUERY_MONIKER
{
    GStateHandle gs;
    ChunkHandle gschunk;
    Bitmap *bitmap;
    optr bmap;

    gs = GrCreateGString(OptrToHandle(list), GST_CHUNK, &gschunk);
    GrSetClipRect(gs, PCT_INTERSECTION, 0, 0, BACKGROUND_WIDTH, BACKGROUND_HEIGHT/2);
    bmap = backgrounds[item];
    if (!bmap) {
	if (item == 0) {
	    GrSetFont(gs, FID_UNIVERSITY, 9*65536);
	    MemLock(OptrToHandle(@randomStr));
	    GrDrawText(gs, 3, (BACKGROUND_HEIGHT/2)/2-10, LMemDeref(@randomStr), 0);
	    MemUnlock(OptrToHandle(@randomStr));
	} else {
	    GrSetAreaColor(gs, CF_INDEX, backColors[item], 0, 0);
	    GrFillRect(gs, 0, 0, BACKGROUND_WIDTH-1, BACKGROUND_HEIGHT/2-1);
	}
    } else {
	MemLock(OptrToHandle(bmap));
	bitmap = LMemDeref(bmap);
	GrDrawBitmap(gs, 0, 0, bitmap, NULL);
	MemUnlock(OptrToHandle(bmap));
    }
    GrEndGString(gs);

    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
	item,              /* Item number -- Folder number */
	0,                 /* Item not disabled */
	BACKGROUND_HEIGHT/2,                /* height, 0 = auto detect */
	BACKGROUND_WIDTH,                /* width, 0 = auto detect */
	0,                 /* size, 0 = auto detect */
	VMDT_GSTRING,
	VMST_OPTR,
	ConstructOptr(OptrToHandle(list), gschunk)
	);

    GrDestroyGString(gs, 0, GSKT_KILL_DATA);
}


/***********************************************************************
 *		MSG_GEN_PROCESS_CLOSE_APPLICATION
 ***********************************************************************
 * SYNOPSIS:	    close the application
 * PASS:            
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/9/99		Initial Revision
 *
 ***********************************************************************/
@method SafariProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
    /*
     * close the game file
     */
    @call TheGameCard::MSG_SAF_GAME_CARD_CLOSE_FILE();
    /*
     * turn off all the indicators
     */
    @call LeftIndicatorGroup::MSG_INDICATOR_GROUP_SET_ALL(0);
    @call Player1Indicator::MSG_INDICATOR_SET_STATE(0);
    @call Player2Indicator::MSG_INDICATOR_SET_STATE(0);
    /*
     * turn off the timer
     */
    @call CountdownTimer::MSG_GAME_TIMER_STOP();
    /*
     * call the superclass to do the work
     */
    return @callsuper();
}



/***********************************************************************
 *		MSG_GEN_PROCESS_INSTALL_TOKEN
 ***********************************************************************
 *
 * SYNOPSIS:  install a document token
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	  Date		Description
 *	----	  ----		-----------
 *	gene      10/11/99   	Initial Revision
 *
 ***********************************************************************/
@method SafariProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN
{
    dword tChars;
    TokenFlags tFlags;

    @callsuper();
	 tChars = TOKEN_CHARS('G','E',(dword)'D', (dword) 'O');
	 if (!TokenGetTokenInfo(tChars, 16431, &tFlags)) {
	TokenDefineToken(tChars, 16431, @GEDocIconMonikerList, 0);
    }
}


/***********************************************************************
 *		MSG_PROCESS_CREATE_UI_THREAD
 ***********************************************************************
 *
 * SYNOPSIS:  Increase the size of the ui thread stack.
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	  Date		Description
 *	----	  ----		-----------
 *	gene      4/6/99   	Initial Revision
 *
 ***********************************************************************/
@method SafariProcessClass, MSG_PROCESS_CREATE_UI_THREAD
{
    stackSize = 4048;
    return @callsuper();
}


/***********************************************************************
 *		MSG_SAF_PROCESS_PLAY_SOUND
 ***********************************************************************
 *
 * SYNOPSIS:      Play a sound
 * PARAMETERS:	  stdPath - StandardPath
 *                path - pathname relative to stdPath
 *                filename - name of WAV file
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	  Date		Description
 *	----	  ----		-----------
 *	gene      4/6/99   	Initial Revision
 *
 ***********************************************************************/
@method SafariProcessClass, MSG_SAF_PROCESS_PLAY_SOUND
{
    WavPlayFile(stdPath, path, filename);
}


/***********************************************************************
 *		MSG_META_ATTACH_OBJECT
 ***********************************************************************
 *
 * SYNOPSIS:    open the application
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	  Date		Description
 *	----	  ----		-----------
 *	gene      4/18/99   	Initial Revision
 *
 ***********************************************************************/

optr winObjs[] = {
    @SafariPrimary,
    @StatusDB,
	 /*@AboutNDDialog*/0,
    @ChooseDB,
    @OpenDB,
    @OptionsDB,
    @CreditDialog
};

void
ChangeWinPriorities(void)
{
    word i;
    WinPriority *wp;

    for (i = 0; i < sizeof(winObjs)/sizeof(optr); i++) {
	ObjLockObjBlock(OptrToHandle(winObjs[i]));
	wp = ObjVarAddData(winObjs[i], ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY, sizeof(WinPriority));
	*wp = WIN_PRIO_ON_TOP;
	MemUnlock(OptrToHandle(winObjs[i]));
    }
}

static const char safCat[] = "safari";

@method SafariAppClass, MSG_META_ATTACH_OBJECT
{
    GenReturnParams params;
    Rectangle bounds;
    SoundStatus s;
    WWFixed ptsize;
    SpecWinSizePair swsp;
    word height, eSize;
    MemHandle mh;
    TCHAR *str;
    Boolean autoHide = FALSE;
    WinPriority *wp;

    ObjLockObjBlock(OptrToHandle(@SafariPrimary));
    /*
     * see if there is a startDir
     */
    if (!InitFileReadStringBlock(safCat, "startDir", &mh, IFRF_READ_ALL, &eSize)) {
	ObjVarDeleteData(@OpenSelector, ATTR_GEN_PATH_DATA);
	MemReAlloc(mh, eSize+sizeof(TCHAR), HAF_STANDARD);
	str = MemLock(mh);
	strcat(str, "\\.");
	@call OpenSelector::MSG_GEN_FILE_SELECTOR_SET_FULL_SELECTION_PATH(str, 0);
	MemFree(mh);
    }
    /*
	  * see what the screen is like and change our hints accordingly
				jh don't bother with this 

     */
/*    if (@call oself::MSG_GEN_GUP_QUERY(&params, GUQT_SCREEN)) {
	WinGetWinScreenBounds(params.GRP_bp, &bounds);
	height = bounds.R_bottom - bounds.R_top + 1;
	/*if (height > 480) {
	    /*
	     * for a bigger screen, don't restrict things so much
	     */
	/*    ObjVarDeleteData(@SafariPrimary, HINT_WINDOW_NO_TITLE_BAR);
	    ObjVarDeleteData(@SafariPrimary, ATTR_GEN_DISPLAY_NOT_MINIMIZABLE);
	    ObjVarDeleteData(@SafariPrimary, HINT_PRIMARY_NO_EXPRESS_MENU);
	    ObjVarDeleteData(@SafariPrimary, HINT_DISPLAY_MAXIMIZED_ON_STARTUP);
	    ptsize.WWF_int = 12;
	    ptsize.WWF_frac = 0;
	    @call QuestionText::MSG_VIS_TEXT_SET_POINT_SIZE(ptsize, TEXT_ADDRESS_PAST_END, 0);
	} else {
	    /*
	     * see if there is an autohide taskbar or not
	     */
/*	    InitFileReadBoolean("motifOptions", "taskBarAutoHide", &autoHide);
	    if (!autoHide) {
		ChangeWinPriorities();
	    }
	    if (height <= 440) {
		/*
		 * for a smaller screen, we need to adjust things a bit...
		 */
/*		if (!autoHide) {
		    wp = ObjVarAddData(@TextGroup, ATTR_GEN_WINDOW_CUSTOM_WINDOW_PRIORITY, sizeof(WinPriority));
		    *wp = WIN_PRIO_ON_TOP-1;
		}
		swsp.SWSP_x = 38;
		swsp.SWSP_y = SWSS_RATIO|PCT_100;
		@call TextGroup::MSG_GEN_INTERACTION_SET_VISIBILITY(GIV_DIALOG);
		@call TextGroup::MSG_META_ADD_VAR_DATA(HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT, sizeof(SpecWinSizePair), &swsp);
		@call TextGroup::MSG_GEN_ADD_GEOMETRY_HINT(HINT_WINDOW_NO_TITLE_BAR,
							   0, VUM_NOW);
		ptsize.WWF_int = 18;
		@call Player1Score::MSG_VIS_TEXT_SET_POINT_SIZE(ptsize, TEXT_ADDRESS_PAST_END, 0);
		@call Player2Score::MSG_VIS_TEXT_SET_POINT_SIZE(ptsize, TEXT_ADDRESS_PAST_END, 0);
	//	@call QuitButton::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	//	@call QuizButton::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
		@call TextGroup::MSG_META_GRAB_FOCUS_EXCL();
		@send, forceQueue TextGroup::MSG_GEN_INTERACTION_INITIATE();
	/*	if (!(@call TheGameCard::MSG_SAF_GAME_CARD_GET_QUIZ())) {
		    @send, forceQueue ChooseDB::MSG_GEN_INTERACTION_INITIATE();
		} */
/*	    }
	}
    } */
    MemUnlock(OptrToHandle(@SafariPrimary));

    /*
     * set the GeoSafari button to 256 color if appropriate
     */
/*    if (GetDisplayType() > DC_COLOR_4) {
	@call NDButton::MSG_SAFARI_GLYPH_SET_OFF_BITMAP(@SafLogo256Moniker);
	@call CreditSaf::MSG_SAFARI_GLYPH_SET_OFF_BITMAP(@SafLogo256Moniker);
    }
*/
    @callsuper();

    /*
     * play a sound. we check the .INI setting ourselves because
     * the SoundList hasn't loaded its settings yet.
     */
    InitFileReadInteger(safCat, "sound", &s);
    if (s & SS_SAMPLED) {
	@send, forceQueue process::MSG_SAF_PROCESS_PLAY_SOUND(SP_USER_DATA, "SOUNDS", "GS_WELC.WAV");
    }

    /*
     * update the player UI
     */
    @call NumPlayers::MSG_GEN_ITEM_GROUP_SEND_STATUS_MSG(0);

    /*
     * deal with the background shme. We need to do a load options
     * manually because it is dynamic list.
     */
    @call BackgroundList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(sizeof(backgrounds)/sizeof(optr));
    @call BackgroundList::MSG_META_LOAD_OPTIONS();
    /*
     * Deal with the selection type. The list does its thing with the .INI
     * file OK, but we need it to tell the game card, too
     */
    @call ShowList::MSG_META_LOAD_OPTIONS();
    @call ShowList::MSG_GEN_APPLY();
}



/***********************************************************************
 *		MSG_META_QUIT
 ***********************************************************************
 *
 * SYNOPSIS:    quit the application
 * PARAMETERS:	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	  Date		Description
 *	----	  ----		-----------
 *	gene      4/20/99   	Initial Revision
 *
 ***********************************************************************/
@method SafariAppClass, MSG_META_QUIT
{
    /*
     * save any options
     */
    @call oself::MSG_META_SAVE_OPTIONS();
    @call BackgroundList::MSG_META_SAVE_OPTIONS();

    @callsuper();
}



/**************************************************************
*          
* FUNCTION:        MSG_META_IACP_NEW_CONNECTION
* PASS:            appLaunchBlock - handle of AppLaunchBlock
*                  justLaunched - TRUE if just launched
*                  connection - IACPConnection that is now open
* RETURN:          none
* DESCRIPTION:     Handle opening a document
*
* REVISION HISTORY:
*         Name      Date        Description
*         ----      ----        -----------
*         gene      4/21/99     Initial Revision

***************************************************************/

@method SafariAppClass, MSG_META_IACP_NEW_CONNECTION
{
    AppLaunchBlock *alb;

    /*
     * see if there is a document
     */
    alb = MemLock(appLaunchBlock);
    if (alb->ALB_dataFile[0]) {
	/*
	 * open the quiz
	 */
	@call TheGameCard::MSG_SAF_GAME_CARD_SET_QUIZ(alb->ALB_path,
						      alb->ALB_diskHandle,
						      alb->ALB_dataFile);
    } else {
	/*
	 * initialize the indicators to flashing
	 */
	@call LeftIndicatorGroup::MSG_INDICATOR_GROUP_INIT_FLASHING();
	@call Player1Indicator::MSG_INDICATOR_SET_STATE(IS_ON);
	@call Player2Indicator::MSG_INDICATOR_SET_STATE(IS_ON);
	@send, forceQueue LeftFeedback::MSG_SAFARI_FEEDBACK_START(255, 0, 255);
	@send, forceQueue RightFeedback::MSG_SAFARI_FEEDBACK_START(255, 0, 255);
    }

    @call oself::MSG_GEN_BRING_TO_TOP();
    MemUnlock(appLaunchBlock);

    @callsuper();
}



/**************************************************************
*          
* FUNCTION:        MSG_SAF_APP_SET_NUM_PLAYERS
* PASS:            selection - selection #
*                  numSelections - # of selections
*                  stateFlags - GenItemGroupStateFlags
* RETURN:          none
* DESCRIPTION:     Handle opening a document
*
* REVISION HISTORY:
*         Name      Date        Description
*         ----      ----        -----------
*         gene      4/27/99     Initial Revision

***************************************************************/

void
SetPlayerUI(Boolean twoPlayer, optr plyr1Mkr, optr plyr2Mkr, optr plyr1Text, optr plyr2Text)
{
    if (twoPlayer) {
	@call Player2Name::MSG_GEN_SET_ENABLED(VUM_DLYD);
    } else {
	@call Player2Name::MSG_GEN_SET_NOT_ENABLED(VUM_DLYD);
    }
    @call Player1Name::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(plyr1Mkr, VUM_DLYD);
    @call Player2Name::MSG_GEN_REPLACE_VIS_MONIKER_OPTR(plyr2Mkr, VUM_DLYD);
    @call Player1Name::MSG_VIS_TEXT_REPLACE_ALL_OPTR(plyr1Text, 0);
    @call Player2Name::MSG_VIS_TEXT_REPLACE_ALL_OPTR(plyr2Text, 0);
}

@method SafariAppClass, MSG_SAF_APP_SET_NUM_PLAYERS
{
    switch (selection) {
    case 1:
	SetPlayerUI(FALSE,
		    @Player1Mkr, @Player2Mkr,
		    @Player1Text, @Player2Text);
	break;
    case 2:
	SetPlayerUI(TRUE,
		    @Player1Mkr, @Player2Mkr,
		    @Player1Text, @Player2Text);
	break;
    case 3:
	SetPlayerUI(TRUE,
		    @Team1Mkr, @Team2Mkr,
		    @Team1Text, @Team2Text);
	break;
    }
}



/***********************************************************************
 *		MSG_SAF_APP_QUIT_QUIZ_OR_APP
 ***********************************************************************
 * SYNOPSIS:	    quit the quiz or the application
 * PASS:            
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	4/30/99		Initial Revision
 *
 ***********************************************************************/
static const StandardDialog3ResponseTriggerTable quizAppTrigs = {
    3,
    {@quizMoniker, IC_YES}, \
    {@appMoniker, IC_NO},
    {@cancelMoniker, IC_DISMISS} \
};

@method SafariAppClass, MSG_SAF_APP_QUIT_QUIZ_OR_APP
{
    word retVal;

    @call CountdownTimer::MSG_GAME_TIMER_PAUSE();
    (void *) MemLock(OptrToHandle(@quitQuizAppStr));
    retVal = UserStandardDialog(
	(char *) NULL,
	/* custom for GIT_MULTIPLE_RESPONSE */
	&quizAppTrigs,
	/* 1 string argument */
	(char *) NULL,
	(char *) NULL,
	/* dialog string */
	LMemDeref (@quitQuizAppStr),
	/* dialog type */
	(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
	/* interaction type */
	(GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET)
	);
    MemUnlock(OptrToHandle(@quizMoniker));
    switch (retVal) {
    case IC_YES:
	@call OpenDB::MSG_GEN_INTERACTION_INITIATE();
	break;
    case IC_NO:
	@send oself::MSG_META_QUIT();
	break;
    }
}


/***********************************************************************
 *		MSG_SAF_APP_RESTART_QUIZ
 ***********************************************************************
 * SYNOPSIS:	    restart the quiz after changing the number of players
 * PASS:            none
 * RETURN:          none
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	gene	10/10/99	Initial Revision
 *
 ***********************************************************************/
@method SafariAppClass, MSG_SAF_APP_RESTART_QUIZ
{
    @call TheGameCard::MSG_SAF_GAME_CARD_RESTART_QUIZ();
}
