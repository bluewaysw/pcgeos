/**************************************************************************
	Tools: Error- und MessageBoxen
		GOH-Datei: Header
		Die MSGBOX.INC-Datei enth„lt die Routinen
 **************************************************************************/
#ifndef _MSG_BOX_GOH
#define _MSG_BOX_GOH

/* ############## Vordefinierte Aufruf-Macros ################# */

/* ErrorBoxen:			ErrorMsgBox();	ErrorMsgNumberBox();
		"OK"-Trigger
		return: IC_OK
/* WarningBoxen 		WarningMsgBox(); WarningMsgNumberBox();
		"JA" und "Nein"-Trigger
		return:	IC_YES | IC_NO
/* InfoBoxen    		InfoMsgBox(); InfoMsgNumberBox();
		"OK"-Trigger
		return: IC_OK
/* QuestionBoxen		QuestionMsgBox(); QuestionMsgNumberBox();
		"JA" und "Nein"-Trigger
		return:	IC_YES | IC_NO
		*/

#define	ErrorMsgBox(info,param1, param2)	BoxMessageBox(info,param1,\
					param2,CDT_ERROR,GIT_NOTIFICATION)
#define	ErrorMsgNumberBox(info,param1, number)	BoxMessageNumberBox(info,param1,\
					number,CDT_ERROR,GIT_NOTIFICATION)

#define	WarningMsgBox(info,param1, param2)	BoxMessageBox(info,param1,\
					param2,CDT_WARNING,GIT_AFFIRMATION)
#define	WarningMsgNumberBox(info,param1, number)	BoxMessageNumberBox(info,param1,\
					number,CDT_WARNING,GIT_AFFIRMATION)

#define	InfoMsgBox(info,param1, param2)	BoxMessageBox(info,param1,\
					param2,CDT_NOTIFICATION,GIT_NOTIFICATION)
#define	InfoMsgNumberBox(info,param1, number)	BoxMessageNumberBox(info,param1,\
					number,CDT_NOTIFICATION,GIT_NOTIFICATION)

#define	QuestionMsgBox(info,param1, param2)	BoxMessageBox(info,param1,\
					param2,CDT_QUESTION,GIT_AFFIRMATION)
#define	QuestionMsgNumberBox(info,param1, number)	BoxMessageNumberBox(info,param1,\
					number,CDT_QUESTION,GIT_AFFIRMATION)


/* ########## Universalroutinen ############### */


extern word BoxMessageBox(optr info, char *param1, char *param2, word dtyp, word ityp);
	/* Ruft UserStandardDialog()
		info, param1 und param2 sind die Anzeigetexte
		dtyp ist der Dialogboxtyp z.B. CDT_ERROR (bestimmt Icon)
		ityp ist der Intractiontyp z.B. GIT_NOTIFICATION (bestimmt Trigger)
		*/

extern word BoxMessageNumberBox(optr info, char *param, int nr, word dtyp, word ityp);
	/* wie  BoxMessageBox(), nur wird als zweiter Parameter eine
		Zahl (integer) angezeigt */

@if 0
word BoxMessageBox(optr info, char *param1, char *param2, word dtyp, word ityp)	{
char *p;
word ret;
	MemLock(OptrToHandle(info));		/* Resource pinnen */
	p = LMemDeref(info);			/* Zeiger besorgen */
	ret = UserStandardDialog(0,0,param2,param1,p,
		( (dtyp << CDBF_DIALOG_TYPE_OFFSET) |
		  (ityp << CDBF_INTERACTION_TYPE_OFFSET)));
	MemUnlock(OptrToHandle(info));		/* Resource freigen */
	return ret;
	}

word BoxMessageNumberBox(optr info, char *param, int nr, word dtyp, word ityp)	{
char *p;
word ret;
char zahl[20];
	sprintf(zahl,"%d",nr);
	MemLock(OptrToHandle(info));		/* Resource pinnen */
	p = LMemDeref(info);			/* Zeiger besorgen */
	ret = UserStandardDialog(0,0,zahl,param,p,
		( (dtyp << CDBF_DIALOG_TYPE_OFFSET) |
		  (ityp << CDBF_INTERACTION_TYPE_OFFSET)));
	MemUnlock(OptrToHandle(info));		/* Resource freigen */
	return ret;
	}
@endif


#endif

