/*
 *
 * Project:	PC GEOS
 * Module:	FileMgrs
 * File:	cuiMain.ui
 *
 * Author:	Brian Chin
 *
 *	This file contains the user Interface description for the
 * desktop.
 *
 *	$Id: cuiMain.ui,v 1.12 98/08/20 05:39:34 joon Exp $
 *
 */

#include "generic.uih"
#include "product.uih"
#include "shell.uih"


/*
 * some random stuff
 */

/*
 * when changing these, check for associated constants in desktopConstant.def
 */
/* UI_CLOSE_IN_OVERLAP must be 1 for LRU stuff */
#define UI_CLOSE_IN_OVERLAP 1


#ifdef NEWDESK
#define _NEWDESK -1
#else
#define _NEWDESK 0
#endif

#ifdef NEWDESKBA
#define _NEWDESKBA -1
#else
#define _NEWDESKBA 0
#endif

#ifdef GEOLAUNCHER
#define _FCAB -1
#else
#define _FCAB 0
#endif

#ifdef GMGR
#define _GMGR -1
#else
#define _GMGR 0
#endif

#ifdef HMGR
#define _HMGR -1
#else
#define _HMGR 0
#endif

#ifdef ZMGR
#define _ZMGR -1
#else
#define _ZMGR 0
#endif

#ifdef BMGR
#define _BMGR -1
#else
#define _BMGR 0
#endif

#ifdef PMGR
#define _PMGR -1
#else
#define _PMGR 0
#endif

#define	_NIKE 0

#if _GMGR
#if !_FCAB
#define _GMGRONLY -1
#else
#define _GMGRONLY 0
#endif
#endif

#if _NEWDESK
#if !NEWDESKBA
#define _NEWDESKONLY -1
#else
#define _NEWDESKONLY 0
#endif
#endif

#ifdef FORCE_DELETE
#define _FORCE_DELETE -1
#else
#define _FORCE_DELETE 0
#endif

#define DESK_SINGLE_LINE_DISPLAY_ATTRIBUTES \
		dontScrollToChanges
#define DESK_SINGLE_LINE_EDIT_ATTRIBUTES \
		singleLineText, noWordWrapping, \
		allowTextOffEnd, useTabForNavigation

#if _GMGR && !_ZMGR
#define _DOS_LAUNCHERS -1
#else
#define _DOS_LAUNCHERS 0
#endif


#if _GMGRONLY || _NEWDESK
#define INSTALLABLE_TOOLS -1
#else
#define INSTALLABLE_TOOLS 0
#endif

#if _ZMGR
#define SEPARATE_NAMES_AND_DETAILS 1
#else
#define SEPARATE_NAMES_AND_DETAILS 0
#endif

/* OK, the situation here is that PMGR (PalmConnect) is		*/
/* basically a desktop version of ZManager, so we want		*/
/* everything to be ZMGR except the art.  Zoomer has the _GMGR	*/
/* and _ZMGR flags set, and PalmConnect has _GMGR, _ZMGR and	*/
/* _PMGR, so what we are doing in nasty conditional fashion is	*/
/* saying: If Zoomer all by itself use the Zoomer miniature	*/
/* art, but if we are not Zoomer (!_ZMGR) or are Zoomer with	*/
/* the _PMGR flag set, use the Desktop art.			*/
/*	dlitwin 9/3/93						*/

#if _ZMGR && !_PMGR
#define _TINY -1
#else
#define _TINY 0
#endif

#if _BMGR
#define _PCMCIA_FORMAT -1
#else
#define _PCMCIA_FORMAT 0
#endif

#if _ZMGR || _BMGR
#define _PEN_BASED -1
#else
#ifdef LEFTCLICKDRAGDROP
#define _PEN_BASED -1
#else
#define _PEN_BASED 0
#endif
#endif

#if _ZMGR
#define _WINDOW_MENU 0
#else
#define _WINDOW_MENU -1
#endif

#if _GMGR || _BMGR
#define _CONNECT_TO_REMOTE -1
#else
#define _CONNECT_TO_REMOTE 0
#endif /* _GMGR */

	/* _CONNECT_MENU and _CONNECT_ICON are dependent on	*/
	/* _CONNECT_TO_REMOTE being true, so set them to zero	*/
	/* otherwise.						*/
#if _CONNECT_TO_REMOTE
#if _GMGR || _BMGR
#define	_CONNECT_ICON	-1
#else
#define	_CONNECT_ICON	0
#endif
#if _ZMGR
#define	_CONNECT_MENU	-1
#else
#define	_CONNECT_MENU	0
#endif
#else
#define	_CONNECT_MENU	0
#define	_CONNECT_ICON	0
#endif


#if _HMGR
#define _PREFERENCES_LAUNCH -1
#else
#define _PREFERENCES_LAUNCH 0
#endif

#if (_ZMGR && !_PMGR) || _HMGR
#define _KEEP_MAXIMIZED	0
#else
#define _KEEP_MAXIMIZED	-1
#endif

#if !_ZMGR
#define _TREE_MENU	-1
#else
#define _TREE_MENU 	0
#endif

#define _APP_MONIKER -1

#define _DOS_ICONS -1

#define _WRITABLE_TOKEN_DATABASE -1




#ifdef DO_PIZZA
#define _KEEP_MAXIMIZED 0
#define _CONNECT_TO_REMOTE 0
#endif

#if _NEWDESK
#ifdef GPC_ONLY
#define _DOS_LONG_NAME_SUPPORT -1
#else
#define _DOS_LONG_NAME_SUPPORT 0
#endif
#else
#define _DOS_LONG_NAME_SUPPORT 0
#endif


#define _ICON_AREA	-1

/*
 * Set the defaults for a few capabilities that
 * may not have override settings in product.h:
 */
#ifndef _PRINT_CAPABILITY
#define _PRINT_CAPABILITY	1
#endif

#ifndef _FAX_CAPABILITY
#define _FAX_CAPABILITY	0
#endif

/*
 * GPC settings (see notes in cdesktopGeode.def)
 */
#ifdef GPC

#define GPC_NAMES_AND_DETAILS_TITLES 1
#define GPC_NO_NAMES_AND_DETAILS_ATTRS 1
#define GPC_FULL_WASTEBASKET 1
#define GPC_WASTEBASKET_EMPTY 1
#define GPC_NO_PRINT 1

#else

#define GPC_NAMES_AND_DETAILS_TITLES 1
#define GPC_NO_NAMES_AND_DETAILS_ATTRS 0
#define GPC_FULL_WASTEBASKET 0
#define GPC_WASTEBASKET_EMPTY 0
#define GPC_NO_PRINT 0
#endif

#ifdef GPC
#define NO_NETWORK 1
#else
 #if _ZMGR
 #define NO_NETWORK 1
 #else
 #define NO_NETWORK 0
 #endif
#endif

/*-----------------------------------------------------------------------------
	Special classes
-----------------------------------------------------------------------------*/

class DeskApplication = GenApplication {
}

class	DesktopView = GenView {
	backGrColor = byteComp : C_WHITE;
}

#if _KEEP_MAXIMIZED
class MaximizedPrimary = GenPrimary {
}
#endif

#if _GMGR

class DeskDisplayControl = GenDisplayControl {
}

class DeskDisplayGroup = GenDisplayGroup {
}

class DeskDisplay = GenDisplay {
#if UI_CLOSE_IN_OVERLAP
	openState = wordComp : 0;
#endif		/* if UI_CLOSE_IN_OVERLAP */
	usage = wordComp : 0;
}

#endif		/* _GMGR */


#if _FCAB	/* TitledGenTrigger class for FileCabinet */
class TitledGenTrigger = GenTrigger {
	title = nptrComp : null;
	pictureNumber = byteComp : 0;
}
#endif		/* if _FCAB */

#if _GMGR

#if _GMGRONLY
class DeskTool = GenGlyph {
#endif		/* if _GMGRONLY */
#if _FCAB		/* TitledGenTrigger class for FileCabinet */
class DeskTool = TitledGenTrigger {
#endif		/* if _FCAB */
	flags = byteComp : 0;
	toolType = byteComp : 0;
}

#endif		/* if _GMGR */

#if _GMGR || _NEWDESK
#if _GMGRONLY || _NEWDESK
class DirTool = GenTrigger {
#endif		/* if _GMGRONLY */
#if _FCAB	/* TitledGenTrigger class for FileCabinet */
class DirTool = TitledGenTrigger {
#endif		/* if _FCAB */
	flags = byteComp : 0;
	toolType = byteComp : 0;
	diskHandle = wordComp : 0;
}

#endif		/* if _GMGR || _NEWDESK */

class DriveTool = GenTrigger {
	flags = byteComp : 0;
	driveType = byteComp : 0;
	driveNumber = byteComp : 0;
	disk = wordComp : 0;
}


class DriveLetter = GenItem {
}

class DriveList = GenItemGroup {
}

class FileOpFileList = GenText {
	default genAttributes = readOnly;
	static hptrComp : null;		/* buffer */
	static wordComp : 0;		/* count */
	static wordComp : 0;		/* current */
}

class PathnameStorage = GenText {
	default genAttributes = readOnly;
}

class CancelTrigger = GenTrigger {
}

class FileOperationBox = GenInteraction {
	static hptrComp : null;		/* disk handle */
	default type = command;
	default visibility = dialog;
	default attributes = default +modal;
}

class FileOpAppActiveBox = FileOperationBox {
}

class ToolArea = GenInteraction {
	driveButtonLocation = byteComp : 0;
}

#if !_FCAB
class WFileSelector = GenFileSelector {
	filterData = wordComp : 0;
}
#endif		/* if !_FCAB */

#if INSTALLABLE_TOOLS
class ToolManager = GenInteraction {
    tools = nptrComp : null;
#if _NEWDESK
    selectState = wordComp : 1;		/* always selected in NEWDESK */
#else
    selectState = wordComp : 0;
#endif		/* if _NEWDESK */
}
#endif		/* if INSTALLABLE_TOOLS */

#if _PEN_BASED
class NoQTText = PathnameStorage {
}
#endif

/*-----------------------------------------------------------------------------
	Application classes
-----------------------------------------------------------------------------*/

class ShellObject = meta {
	shellObjectAttrs = bitFieldComp byte {
		movable,
		copyable,
		deletable,
		receivesTransfers,
		allowsTransfers,
		forceDelete
	} : movable, copyable, deletable, receivesTransfers;
}

class DeskVis = ShellObject {
	gState = hptrComp : null;	/* graphics state for this object */
	window = hptrComp : null;	/* window for this object */
}

class Tree = meta {
					/* list of subviews */
	subviews = wordComp : "VIEW_MAX_SUBVIEWS dup (?)";
					/* list of associated gstates */
	gStates = wordComp : "VIEW_MAX_SUBVIEWS dup (?)";
	drive = wordComp : 0;		/* drive number */
	diskInfo = byteComp : "size DiskInfoStruct dup (?)";	/* disk info */
	disk = wordComp : 0;
	treeBuffer = hptrComp : null;	/* buffer containing directory tree */
	treeBufferSize = wordComp : 0;	/* size of tree buffer */
	treeBufferNext = wordComp : 0;	/* past last entry in treeBuffer */
	diskBuffer = hptrComp : null;	/* buffer for disk reads */
	selectedFolder = wordComp : 0;	/* currently selected folder */
	displayMode = wordComp : 0;	/* tree display mode */
}

class Folder = DeskVis {
	displayTypes = byteComp : 0;	/* file types to display */
	displayAttrs = byteComp : 0;	/* file attributes to display */
	displaySort = byteComp : 0;	/* sort field of display */
	displayMode = byteComp : 0;	/* display modes */
	diskInfo = byteComp : "size DiskInfoStruct dup (?)";	/* disk info */
	buffer = hptrComp : null;	/* buffer containing files */
	bufferSize = wordComp : 0;	/* size of buffer */
	fileCount = wordComp : 0;	/* number of files in this folder */
	displayList = wordComp : 0;	/* linked-list of displayed files */
	selectList = wordComp : 0;	/* linked-list of selected files */
	windowBlock = hptrComp : null;	/* folder window's obj block handle */
	displayType = byteComp : 0;	/* DisplayType for this folder */
	folderState = wordComp : 0;	/* state of folder window */
	static typeComp "Point" : "<>"; /* FOI_winBounds */
	static typeComp "Point" : "<>";	/* FOI_docBounds */
	static typeComp "Point" : "<>";	/* anchor point (Point) */
	static wordComp : 0;		/* FOI_anchorIcon - extended select */
	static wordComp : 0;		/* file with selection cursor */
	static wordComp : 0;		/* object in Folder Window clickd on */
	positionFlags = byteComp : 0;   /* flags for icon positioning */
	static byteComp : 0;		/* suspend count */
	static wordComp : 0;		/* FOI_chunkHandle */
	remoteFlag = wordComp : -1;	/* FOI_remoteFlag */
	actualDisk = wordComp : 0;	/* FOI_actualDisk */
	invalidate = wordComp : -1;	/* FOI_invalidate */
}

#if _NEWDESK
#include "CUI/cuiNewDesk.uih"
#endif /* NEWDESK */


/*-----------------------------------------------------------------------------
	UI components start here
-----------------------------------------------------------------------------*/

start GenAppInterface;

/* NewDesk BA has a different GenApplication object (subclassed off of
DeskApplication) */

#if _NEWDESKBA
#include "uiBAApplication.ui"
#endif		/* if _NEWDESKBA */


#if !_NEWDESKBA
#if _GMGR
Desktop = DeskApplication vardataReloc {
#else
Desktop = DeskApplication {
#endif

	moniker = list {
		DeskMoniker
#if _APP_MONIKER
#if !_FCAB
#if _TINY
		, FileMgrYMMoniker
#else
		, FileMgrLCMoniker,
		FileMgrLMMoniker,
		FileMgrSCMoniker,
		FileMgrSMMoniker,
		FileMgrYCMoniker,
		FileMgrYMMoniker,
		FileMgrSCGAMoniker,
		FileMgrTinyTCMoniker,
		FileMgrTinyTMMoniker,
		FileMgrTinyTCGAMoniker
#endif
#endif		/* if !_FCAB */
#if _FCAB
		FileCabinetSCMoniker,
		FileCabinetSMMoniker,
		FileCabinetSCGAMoniker
#endif		/* if _FCAB */
#endif		/* _APP_MONIKER */
	}

	children =

#if !_WINDOW_MENU
/* If there's no window menu, then the display control is a child of
the app object 	*/
		DisplayControl,
#endif

#if _GMGR
		FileSystemDisplay;
#endif		/* if _GMGR */

#if _NEWDESK
		DeskDialogBoxes,
		GlobalMenu,		/* Menus won't work properly if they */
		NDDesktopMenu,		/* are children of unbuilt dialogs.  */
		NDNoPopUpMenuItems;
#endif		/* if _NEWDESK */

#if _GMGR
	appFeatures = "DEFAULT_DESKTOP_FEATURES";
	windows_list = FileSystemDisplay;
	active_list = DisplayControl;
	self_load_options_list = DisplayControl;
#endif		/* _GMGR */
#if !_ZMGR
#if _GMGRONLY

#if _WINDOW_MENU
	startup_load_options_list = OptionsMenu;
#else
/* If there's no window menu, then there's only one folder on-screen,
so its settings will always match those in the display menu, so it's
OK to save and load these settings */
	startup_load_options_list =
				 OptionsMenu,
				DisplayMenu;
#endif


#endif		/* if _GMGRONLY */
#endif

#if _NEWDESK
	startup_load_options_list = OptionsMenu;
#endif
	hints = {
#if !_ZMGR
#if _GMGRONLY /* Don't put on NewDesk or it causes a crash */
		ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER {
			UN_OPTR OptionsSaveOptions
		},
#endif
#endif
		ATTR_GEN_INIT_FILE_CATEGORY {char "fileManager", 0},
		ATTR_GEN_INIT_FILE_KEY {char "features",0}
	}
}

#endif		/* !_NEWDESKBA */
end GenAppInterface;


start PrimaryInterface;

#if _GMGR

#if _KEEP_MAXIMIZED
FileSystemDisplay = MaximizedPrimary {
#else
FileSystemDisplay = GenPrimary {
#endif
	children =
		/* main menu items */
			FileMenu,
#if _ZMGR
			ViewMenu,
			UtilMenu,
#endif

#if _CONNECT_MENU
			ConnectMenu,
#endif


#if !_ZMGR
#if _GMGRONLY
			DisplayMenu,	/* view */
			OptionsMenu,

			DiskMenu,
#if _TREE_MENU
			TreeMenu,
#endif /* if _TREE_MENU */

			ToolMenu,

#if _WINDOW_MENU
			DeskWindowMenu,
#endif
#endif
#endif
			FileSystemDisplayGroup,
#if _ICON_AREA
			IconArea,
#endif
			DeskDialogBoxes;	/* dialog boxes */
	genStates = default +usable;
	hints = {
		HINT_PRIMARY_FULL_SCREEN,
		ATTR_GEN_HELP_CONTEXT { char "TOC",0 }
	}
}

FileSystemDisplayGroup = DeskDisplayGroup {
	/* none active */
	hints = {
		HINT_DEFAULT_TARGET,
		HINT_DEFAULT_FOCUS,
		HINT_INITIAL_SIZE {
		    SpecWidth  <SST_PCT_OF_FIELD_WIDTH, PCT_75>
		    SpecHeight <SST_PCT_OF_FIELD_HEIGHT, PCT_50>
		}
	}
}

#if _WINDOW_MENU
DeskWindowMenu = GenInteraction {
	visibility = popup;
	children  = CloseTargetButton, CloseAllDirsButton, DisplayControl;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_WINDOW_MENU
		}
	}
}
CloseTargetButton = GenTrigger {
	CLOSE_TRIGGER_VALUES
	action = MSG_WINDOWS_CLOSE_TARGET, process;
	genAttributes = default +initiatesBusyState;
}
CloseAllDirsButton = GenTrigger {
	moniker = 'A', "Close All";
	action = MSG_WINDOWS_CLOSE_ALL, process;
	genAttributes = default +initiatesBusyState;
}
#endif		/* if _WINDOW_MENU	*/

DisplayControl = DeskDisplayControl {
	/* the state of maximizedDisplayNamesOnPrimary is set dynamically */
	/*dcAttributes = default -maximizedDisplayNamesOnPrimary;*/

#if !_WINDOW_MENU
	/* Turn off all features of the display control, so things
	like keyboard shortcuts don't function */
	hints = {
		ATTR_GEN_CONTROL_PROHIBIT_UI	{
			word mask GDCF_OVERLAPPING_MAXIMIZED or \
				mask GDCF_TILE or \
				mask GDCF_DISPLAY_LIST
		}
	}
#endif

}
#endif		/* if _GMGR */

/* Add a level of indirection, so that if one of these dialogs is
brought up, they don't all get loaded! */

DeskDialogBoxes = GenInteraction {
	type = organizational;
	visibility = dialog;
	attributes = default +notUserInitiatable;
	children = DeskDialogSubGroup1,
#if _NEWDESKBA
			NewDeskBASubgroup,
#endif
#if _NEWDESK
			NewDeskSubgroup,
#endif
			DeskDialogSubGroup4;
}

DeskDialogSubGroup1 = GenInteraction {
	children =
			ChangeAttrBox,
			ChangeIconBox,
			DiskRenameBox,
			DiskCopyBox,
			ActiveCopyBox,
#if _GMGR	/* --------------------------------------------------------- */

#if !_ZMGR	/* ZManager has floating drives button in icon area */
			FloatingDrivesDialog,
#endif

#if _DOS_LAUNCHERS
			GetCreateLauncherFileBox,
			GetEditLauncherFileBox,
			EditLauncherBox,
			EditLauncherOptionsBox,
#endif

#if _CONNECT_TO_REMOTE
			FileLinkingStatusDialog,
#endif

#endif		/* --------------------------------------------------------- */

			CopyStatusBox;

}


#if _NEWDESKBA

NewDeskBASubgroup = GenInteraction {
	children = 	ProgramLoggingDialog,
			TeacherCreateClassDialog,
			TeacherModifyClassDialog,
			AddStudentDialog,
			AddStudentProgressBox,
			AddCoursewareDialog,
			AddSpecialUtilitiesDialog,
			AddOfficeAppDialog,
			AddFromFileDialog,
			AssistantPrimary;
}

#endif

#if _NEWDESK

NewDeskSubgroup = GenInteraction {
	children = 	NDPrinterOptionsDialog;
}

#endif


DeskDialogSubGroup4 = GenInteraction {
	children = 	RenameBox, CreateDirBox,
			MoveBox, CopyBox, DuplicateBox,
#ifdef CREATE_LINKS
			CreateLinkBox,
#endif
			RecoverBox, RecoverSrcBox,
			GetInfoBox,
			DiskFormatBox,
#if _GMGRONLY && !_ZMGR
			ConfirmExitGeoManager,
#endif
			DosParameterBox,
			ActiveFormatBox,
			ActiveFileOpBox,
			MoveCopyProgressBox,
			DeleteProgressBox,
			FormatVolumeBox, FormatStatusBox, FormatDoneBox;
}


#if _GMGRONLY
FloatingDrivesDialog = ToolArea {
#if (_ZMGR && !_PMGR)
	/* since ZManager has button in icon area, we need moniker */
	moniker = "Drives";
#endif
	/* children added later */
	type = organizational;
#if !_PMGR	/* in PManager, this is in the icon area, not a dialog */
	visibility = dialog;
	attributes = default +notUserInitiatable;
#endif
	hints = {
#if !_ZMGR
	/* since ZManager has button in icon area, we can't size it */
		HINT_INITIAL_SIZE {
			SpecWidth<SST_PCT_OF_FIELD_WIDTH, PCT_50>,
			SpecHeight<0, 0>
		},
#endif
		HINT_INTERACTION_MAKE_RESIZABLE,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_RIGHT_JUSTIFY_CHILDREN,
		HINT_ALLOW_CHILDREN_TO_WRAP,
		HINT_TOOLBOX
	}
}

#endif		/* if _GMGRONLY */

end	PrimaryInterface;



/**************************************************************************
 *	"Default" dummy object for handling ShellObject messages
 **************************************************************************/

start	DummyResource;

DefaultDummy = ShellObject {
}

end	DummyResource;

/**************************************************************************/



#if _CONNECT_TO_REMOTE
#include "cuiRFSD.ui"
#endif


#if	_ZMGR
#include "cuiZoomer.ui"
#else


/*-----------------------------------------------------------------------------
	FileMenu MENU
-----------------------------------------------------------------------------*/
start	PrimaryInterface;

/*	GeoManager version of FileMenu		*/

#if !_FCAB	/* horizontal tool bar for FileCabinet */
FileMenu = GenInteraction {
	children =	FileMenuFileOperationsGroup
			,FileMenuFolderOperationsGroup
#if !_FORCE_DELETE
			,FileMenuWastebasketGroup
#endif
#if _PRINT_CAPABILITY
			,FileMenuPrintGroup
#endif
			;

	visibility = popup;
#if _NEWDESK
	genStates = default -usable;
#endif		/* if _NEWDESK */

	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_FILE_MENU
		}
	}
}
#endif		/* if !_FCAB */


/*	FileCabinet version of FileMenu		*/

#if _FCAB
FileMenu = GenInteraction {
	/* no moniker for tool bar in FileCabinet */
	children =	FileMenuOpen,
			FileMenuGetInfo,
			FileMenuMove,
			FileMenuCopy,
			FileMenuDuplicate,
/* note: DiskFormatButton for FCAB and non-FCAB are distinct
   objects */
			FileMenuRename,
			DiskFormatButton,
			FileExit;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}
#endif		/* if _FCAB */

end	PrimaryInterface;



start	Interface;

#if !_FCAB	/* no sub-menu for FileCabinet */
/*	FileOperationsGroup	*/
FileMenuFileOperationsGroup = GenInteraction {
	children =	FileMenuOpen,
			FileMenuMove,

			FileMenuCopy,
			FileMenuDuplicate,
#ifdef CREATE_LINKS
			FileMenuCreateLink,
#endif
			FileMenuRename,
			FileMenuDelete,
			FileMenuGetInfo
			;
}
FileMenuOpen = GenTrigger {
	moniker = 'O', "Open";
	action = MSG_OPEN_SELECT_LIST, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuMove = GenTrigger {
	moniker = 'M', "Move";
	action = MSG_FM_START_MOVE, process;
	genStates = default -enabled;
	kbdAccelerator = specificUI F7;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

FileMenuCopy = GenTrigger {
	moniker = 'C', "Copy";
	action = MSG_FM_START_COPY, process;
	genStates = default -enabled;
	kbdAccelerator = specificUI F8;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}


FileMenuDuplicate = GenTrigger {
	moniker = 't', "Duplicate";
	action = MSG_FM_START_DUPLICATE, process;
	kbdAccelerator = specificUI F9;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
#ifdef CREATE_LINKS
FileMenuCreateLink = GenTrigger {
	moniker = 'L', "Create Link";
	action = MSG_FM_START_CREATE_LINK, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
#endif		/* ifdef CREATE_LINKS */

FileMenuRename = GenTrigger {
	moniker = 'R', "Rename";
	kbdAccelerator = specificUI F2;
	action = MSG_FM_START_RENAME, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
FileMenuDelete = GenTrigger {
	moniker = 'D', "Delete";
	kbdAccelerator = specificUI shift DELETE;
	action = MSG_FM_START_DELETE, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}

FileMenuGetInfo = GenTrigger {
	moniker = 'I', "Get Info";
	kbdAccelerator = ctrl 'G';
	action = MSG_FM_GET_INFO, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

/*	Folder Operations Group	*/
FileMenuFolderOperationsGroup = GenInteraction {
	children =	FileMenuCreateFolder,
			FileMenuSelectAll
			, FileMenuDeselectAll
			;
}
FileMenuCreateFolder = GenTrigger {
	moniker = 'F', "Create Folder";
	action = MSG_FM_START_CREATE_DIR, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	kbdAccelerator = specificUI INSERT;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
FileMenuSelectAll = GenTrigger {
	moniker = 'S', "Select All";
	action = MSG_SELECT_ALL, process;
	genAttributes = default +initiatesBusyState;
}

FileMenuDeselectAll = GenTrigger {
	moniker = 'l', "Deselect All";
	action = MSG_DESELECT_ALL, process;
	genAttributes = default +initiatesBusyState;
}

#if !_FORCE_DELETE
/*	WastebasketGroup	*/
FileMenuWastebasketGroup = GenInteraction {
	moniker = 'W', "Wastebasket";
	visibility = popup;
	children =	FileMenuThrowAway,
			FileMenuRecover,
			FileEmptyWastebasket;
}
FileMenuThrowAway = GenTrigger {
	kbdAccelerator = specificUI DELETE;
	moniker = 'T', "Throw Away";
	action = MSG_FM_START_THROW_AWAY, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuRecover = GenTrigger {
	moniker = 'v', "Recover";
	action = MSG_FM_START_RECOVER, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}
FileEmptyWastebasket = GenTrigger {
	moniker = 'W', "Empty Wastebasket";
	action = MSG_EMPTY_WASTEBASKET, process;
}
#endif /* !_FORCE_DELETE */

/*	Print Group	*/
#if _PRINT_CAPABILITY
FileMenuPrintGroup = GenInteraction {
	children =   FileMenuPrint
#if _FAX_CAPABILITY
	, FileMenuFax
#endif
	;
}
#endif

#if _PRINT_CAPABILITY
FileMenuPrint = GenTrigger {
	moniker = 'P', "Print";
	kbdAccelerator = ctrl 'P';
	action = MSG_FM_START_PRINT, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputIgnore;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			byte PDT_PRINTER
		}
	}
}
#endif

#if _FAX_CAPABILITY
FileMenuFax = GenTrigger {
	moniker = 'F', "Fax";
	action = MSG_FM_START_PRINT, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputIgnore;
	hints = {
		ATTR_GEN_TRIGGER_ACTION_DATA {
			byte PDT_FACSIMILE
		}
	}
}
#endif	/* _FAX_CAPABILITY */

#endif		/* if !_FCAB */


#if _FCAB
FileMenuOpen = TitledGenTrigger {
	title = "Open";
	pictureNumber = PN_OPEN;
	action = MSG_OPEN_SELECT_LIST, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuGetInfo = TitledGenTrigger {
	title = "Get Info";
	pictureNumber = PN_GET_INFO;
	action = MSG_FM_GET_INFO, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuCreateFolder = TitledGenTrigger {
	title = "Create Folder";
	pictureNumber = PN_CREATE_DIR;
	action = MSG_FM_START_CREATE_DIR, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuMove = TitledGenTrigger {
	title = "Move";
	pictureNumber = PN_MOVE;
	action = MSG_FM_START_MOVE, process;
	genStates = default -enabled;
	/*genAttributes = default +initiatesInputHoldUp;*/
}
FileMenuCopy = TitledGenTrigger {
	title = "Copy";
	pictureNumber = PN_COPY;
	action = MSG_FM_START_COPY, process;
	genStates = default -enabled;
}
FileMenuDuplicate = TitledGenTrigger {
	title = "Duplicate";
	pictureNumber = PN_DUPLICATE;
	action = MSG_FM_START_DUPLICATE, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileMenuRename = TitledGenTrigger {
	title = "Rename";
	pictureNumber = PN_RENAME;
	action = MSG_FM_START_RENAME, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
}
FileExit = TitledGenTrigger {
	title = "To DOS";
	pictureNumber = PN_TO_DOS;
	action = MSG_EXIT_TO_DOS, process;
}
/* note: DiskFormatButton for FCAB and non-FCAB are distinct
   objects */
DiskFormatButton = TitledGenTrigger {
	title = "Format";
	pictureNumber = PN_FORMAT;
	action = MSG_GEN_INTERACTION_INITIATE, DiskFormatBox;
}
#endif		/* if _FCAB */

end	Interface;


#if _GMGRONLY

/*-----------------------------------------------------------------------------
	DisplayMenu MENU
-----------------------------------------------------------------------------*/

start	PrimaryInterface;

DisplayMenu = GenInteraction {
	children = DisplayViewModesSub,
			DisplaySortBy
			, DisplayOptions
			;

	visibility = popup;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_VIEW_MENU
		}
	}
}

end	PrimaryInterface;


start	Interface;

DisplayViewModesSub = GenInteraction {
	children = DisplayViewModes;
	genStates = default -enabled;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}
DisplayViewModes = GenItemGroup ignoreDirty {
	numSelections  = 1;
	selection = "mask FIDM_LICON";
	children =
			DisplayNamesOnly,
			DisplayFullFileDetails,
			DisplayLargeIcons;
	applyMsg = MSG_SET_VIEW_MODE;
	destination = process;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "viewMode", 0}
	}
}

DisplayNamesOnly = GenItem ignoreDirty {
	moniker = 'N', "Names Only";
	identifier = "mask FIDM_SHORT";
}

DisplayFullFileDetails = GenItem ignoreDirty {
	moniker = 'D', "Names and Details";
	identifier = "mask FIDM_FULL";
}
DisplayLargeIcons = GenItem ignoreDirty {
	moniker = 'I', "Icons";
	identifier = "mask FIDM_LICON";
}
DisplaySortBy = GenInteraction {
	moniker = 'S', "Sort By";
	children = DisplaySortByList;
	genStates = default -enabled;
	visibility = popup;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}
DisplaySortByList = GenItemGroup ignoreDirty {
	numSelections  = 1;
	selection = "mask FIDS_NAME";
	children = 	DisplaySortByName,
			DisplaySortByExt,
			DisplaySortByDate,
			DisplaySortByCreation,
			DisplaySortBySize
			, DisplaySortByDOS
			;

	applyMsg = MSG_SET_SORT_MODE;
	destination = process;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "sortMode", 0}
	}
}
DisplaySortByName = GenItem ignoreDirty {
	moniker = 'N', "Name";
	identifier = "mask FIDS_NAME";
}

DisplaySortByExt = GenItem ignoreDirty {
	moniker = 'D', "DOS Extension";
	identifier = "mask FIDS_EXT";
}

DisplaySortByDate = GenItem ignoreDirty {
	moniker = 'M', "Modification Date and Time";
	identifier = "mask FIDS_DATE";
}
DisplaySortByCreation = GenItem ignoreDirty {
	moniker = 'C', "Creation Date and Time";
	identifier = "mask FIDS_CREATION";
}
DisplaySortBySize = GenItem ignoreDirty {
	moniker = 'S', "Size";
	identifier = "mask FIDS_SIZE";
}

DisplaySortByDOS = GenItem ignoreDirty {
	moniker = 'O', "DOS Order";
	identifier = "mask FIDS_DOS";
}

DisplayOptions = GenInteraction {
	children = DisplayOptionsList;
	genStates = default -enabled;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}
DisplayOptionsList = GenBooleanGroup ignoreDirty {
	selectedBooleans = "DEFAULT_DISPLAY_ATTRS";
	children = DisplayOptionsHidden,
			DisplayOptionsCompressButton;
	applyMsg = MSG_SET_VIEW_OPTIONS;
	destination = process;
	genStates = default -enabled;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "displayOptions", 0}
	}
}

DisplayOptionsHidden = GenBoolean ignoreDirty {
	moniker = 'H', "Show Hidden Files";
	identifier = "mask FIDA_HIDDEN";
}
DisplayOptionsCompressButton = GenBoolean ignoreDirty {
	moniker = 'C', "Compress Display";
	identifier = "mask FIDA_COMPRESSED";
}

end	Interface;

#endif		/* if _GMGRONLY */



/*-----------------------------------------------------------------------------
	OptionsMenu MENU
-----------------------------------------------------------------------------*/

#if !_FCAB		/* no Options menu */

start	PrimaryInterface;

#if _GMGRONLY
OptionsMenu = GenInteraction {
	children =	OptionsWarningsGroup,
			OptionsList,
			OptionsDrivesGroup,
			OptionsSaveOptions;
	visibility =	popup;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_OPTIONS_MENU
		},
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}
#endif		/* if _GMGRONLY */

#if _NEWDESK
OptionsMenu = GenInteraction {
	moniker =	'p', "Options";
	children =	FileOptionsDelete,
			OptionsList,
			OptionsSaveOptions,
			OptionsResetOptions,
			OptionsCancelOptions;
	visibility =	dialog;
	type =		properties;
	attributes = modal;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_OPTIONS_MENU
		},
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
		HINT_INTERACTION_COMPLEX_PROPERTIES,
		HINT_INTERACTION_REQUIRES_VALIDATION,
		ATTR_GEN_HELP_CONTEXT { char "dOptions",0 }
	}
}
#endif		/* if _NEWDESK */

end	PrimaryInterface;

start	Interface;

#if _NEWDESK
FileOptionsDelete = GenInteraction {
	moniker = 'D', "Delete/Throw Away Warnings";
	children = FileDeleteOptionsGroup;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

FileDeleteOptionsGroup = GenItemGroup {
	selection = "OCDL_FULL";
	numSelections = 1;
	children = FileDeleteOptionsNone, FileDeleteOptionsSingle,
				FileDeleteOptionsFull;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "warnings", 0}
	}
}

FileDeleteOptionsNone = GenItem {
	moniker = 'N', "None";
	identifier = "OCDL_NONE";
}
FileDeleteOptionsSingle = GenItem {
	moniker = 'S', "Single";
	identifier = "OCDL_SINGLE";
}

FileDeleteOptionsFull = GenItem {
	moniker = 'F', "Full";
	identifier = "OCDL_FULL";
}
#endif		/* if _NEWDESK */


OptionsList = GenBooleanGroup {
#if _GMGRONLY
	children =
#if !_FORCE_DELETE
	 		FileOptionsWBNeverSaves, /* really the opposite,  */
						/* this indicates "Hold in  */
						/* WB" for GeoManager, sigh */
#endif
			MinimizeOnRunButton,
#if _WINDOW_MENU
			TileVertically,
#endif
			PromptOnReturn,
			ShowDiskCopyOptions,
			ConfirmExitingGeoManager;
	selectedBooleans = "mask OMI_ASK_BEFORE_RETURNING or	\
				mask OMI_CONFIRM_EXIT_GMGR or	\
				mask OMI_WB_NEVER_SAVES"; /* really opposite */
#endif		/* if _GMGRONLY */
#if _NEWDESKONLY
	children =
#if !_FORCE_DELETE
			FileOptionsEmptyWB, FileOptionsWBNeverSaves,
#endif
			FileOptionsReadOnly, FileOptionsReplace,
			FileOptionsExecutable;
	selectedBooleans = "mask OMI_CONFIRM_EMPTY_WB or \
				mask OMI_CONFIRM_READ_ONLY or \
				mask OMI_CONFIRM_REPLACE or \
				mask OMI_CONFIRM_EXECUTABLE or \
				mask OMI_ASK_BEFORE_RETURNING";
#endif		/* if _NEWDESKONLY */
#if _NEWDESKBA
	children =
#if !_FORCE_DELETE
			FileOptionsEmptyWB, FileOptionsWBNeverSaves,
#endif
			FileOptionsReadOnly, FileOptionsReplace,
			FileOptionsExecutable, ShowUSERDATAOption;
	selectedBooleans = "mask OMI_CONFIRM_EMPTY_WB or \
				mask OMI_CONFIRM_READ_ONLY or \
				mask OMI_CONFIRM_REPLACE or \
				mask OMI_ASK_BEFORE_RETURNING";
#endif		/* if _NEWDESKBA */
#if _GMGR
	applyMsg = MSG_APP_OPTIONS_CHANGED;
	destination = Desktop;
#endif
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_KEY {char "options", 0}
	}
}

#if _GMGRONLY
OptionsWarningsGroup = GenInteraction {
	children = 	OptionsDeleteWarningsGroup,
			OptionsWarnings;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

OptionsDeleteWarningsGroup = GenInteraction {
	moniker = 'D', "Warnings on Delete/Throw Away";
	visibility = popup;
	children =	OptionsDeleteWarnings;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

OptionsDeleteWarnings = GenBooleanGroup {
	children =	FileOptionsSingleWarningOnDelete,
			FileOptionsMultipleWarningsOnDelete,
			FileOptionsReadOnly,
			FileOptionsExecutable;
	selectedBooleans = "mask OMI_MULTIPLE_WARNINGS or \
				mask OMI_CONFIRM_READ_ONLY";
	applyMsg = MSG_APP_OPTIONS_CHANGED;
	destination = Desktop;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_KEY {char "deleteOptions", 0}
	}
}

OptionsWarnings = GenBooleanGroup {
	children =	FileOptionsReplace
#if !_FORCE_DELETE
			,FileOptionsEmptyWB
#endif
			;
	selectedBooleans = "mask OMI_CONFIRM_EMPTY_WB or \
				mask OMI_CONFIRM_REPLACE";
	applyMsg = MSG_APP_OPTIONS_CHANGED;
	destination = Desktop;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_KEY {char "warningOptions", 0}
	}
}
#endif /* _GMGRONLY */

#if !_FORCE_DELETE
FileOptionsEmptyWB = GenBoolean {
#if _GMGR
	moniker = 'E', "Warn on Emptying Wastebasket";
#endif
#if _NEWDESK
	moniker = 'C', "Confirm Empty Wastebasket";
#endif
	identifier = "mask OMI_CONFIRM_EMPTY_WB";
}
#endif

/*  For GeoManager, this flag has been negated, so it is (despite its */
/* title) equivalent to WBAlwaysSaves.  Nasty, but the way it is... */
#if !_FORCE_DELETE
FileOptionsWBNeverSaves = GenBoolean {
#if _GMGR
	moniker = 'W', "Hold Items in Wastebasket";
#endif
#if _NEWDESK
	moniker = 'W', "Wastebasket Never Saves";
#endif
	identifier = "mask OMI_WB_NEVER_SAVES";
}
#endif

FileOptionsReadOnly = GenBoolean {
#if _GMGR
	moniker = 'R', "Read-Only Files";
#endif
#if _NEWDESK
	moniker = 'O', "Confirm Read-Only Delete";
#endif
	identifier = "mask OMI_CONFIRM_READ_ONLY";
}
FileOptionsReplace = GenBoolean {
#if _GMGR
	moniker = 'O', "Warn on Overwrite";
#endif
#if _NEWDESK
	moniker = 'R', "Confirm Replace";
#endif
	identifier = "mask OMI_CONFIRM_REPLACE";
}
FileOptionsExecutable = GenBoolean {
#if _GMGR
	moniker = 'N', "Geos Executable Files";
#endif
#if _NEWDESK
	moniker = 'E', "Confirm Geos Executable Delete";
#endif
#if _NEWDESKBA
	genStates = default -usable;
#endif		/* if _NEWDESKBA */
	identifier = "mask OMI_CONFIRM_EXECUTABLE";
}
#if _NEWDESKBA
ShowUSERDATAOption = GenBoolean {
	moniker = 'U', "Show USERDATA Folder in Home Folder";
	identifier = "mask OMI_SHOW_USERDATA";
}
#endif		/* if _NEWDESKBA */

#if _GMGR

#if _WINDOW_MENU
TileVertically = GenBoolean {
	moniker = 'T', "Tile Vertically";
	identifier = "mask OMI_TILE_VERTICALLY";
}
#endif

MinimizeOnRunButton = GenBoolean {
	moniker = 'M', "Minimize GeoManager on Run";
	identifier = "mask OMI_MINIMIZE_ON_RUN";
}
PromptOnReturn = GenBoolean {
	moniker = 'A', "Ask Before Returning to Geos";
	identifier = "mask OMI_ASK_BEFORE_RETURNING";
}
ShowDiskCopyOptions = GenBoolean {
	moniker = 'S', "Show Advanced Disk Options";
	identifier = "mask OMI_SHOW_ADV_DISK_OPTIONS";
}
ConfirmExitingGeoManager = GenBoolean {
	moniker = 'C', "Confirm When Exiting GeoManager";
	identifier = "mask OMI_CONFIRM_EXIT_GMGR";
}

FileOptionsSingleWarningOnDelete = GenBoolean {
	moniker = 'S', "Single Warning";
	identifier = "mask OMI_SINGLE_WARNING";
}
FileOptionsMultipleWarningsOnDelete = GenBoolean {
	moniker = 'W', "Warning for Each Item";
	identifier = "mask OMI_MULTIPLE_WARNINGS";
}

OptionsDrivesGroup = GenInteraction {
	moniker = 'L', "Drive Locations";
	visibility = popup;
	children = OptionsDrivesList;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}
OptionsDrivesList = GenItemGroup {
	selection = "DRIVES_SHOWING";
	numSelections = 1;
	children =	OptionsDrivesListToolArea,
			OptionsDrivesListFloating,
			OptionsDrivesListHidden;
	applyMsg = MSG_SET_DRIVES_LOCATION;
	destination = process;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "startupDrivesLocation", 0}
	}
}

OptionsDrivesListToolArea = GenItem {
	moniker = 'T', "In Tool Area";
	identifier = "DRIVES_SHOWING";
}
OptionsDrivesListFloating = GenItem {
	moniker = 'F', "Floating";
	identifier = "DRIVES_FLOATING";
}

OptionsDrivesListHidden = GenItem {
	moniker = 'H', "Hidden";
	identifier = "DRIVES_HIDDEN";
}
#endif		/* if _GMGR */

OptionsSaveOptions = GenTrigger {
	moniker = 'v', "Save Options";
	action = MSG_META_SAVE_OPTIONS, Desktop;
	genAttributes = default +signalInteractionComplete;
#if _NEWDESK
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_DEFAULT_FOCUS,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word IC_APPLY
		}
	}
#endif		/* #if _NEWDESK */
}

#if _NEWDESK
OptionsResetOptions = GenTrigger {
	action = MSG_DESKTOP_CANCEL_OPTIONS, process;
	/*action = MSG_DESKTOP_RESET_OPTIONS, process;*/
	/* Reset sets to the defaults, whereas Cancel sets to the previous
	   values. The latter is what would be expected, so just send cancel
	   but don't close the window.    -edigeron */
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_RESET
		},
		HINT_SEEK_REPLY_BAR
	}
}

OptionsCancelOptions = GenTrigger {
	action = MSG_DESKTOP_CANCEL_OPTIONS, process;
	genAttributes = default +signalInteractionComplete;
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_DISMISS
		},
		HINT_SEEK_REPLY_BAR
	}
}
#endif

end	Interface;

#endif		/* if !_FCAB */



/*-----------------------------------------------------------------------------
	DiskMenu MENU
-----------------------------------------------------------------------------*/

#if !_FCAB		/* no Disk menu */

start	PrimaryInterface;

DiskMenu = GenInteraction ignoreDirty {
	moniker = 'D', "Disk";
/* note: DiskFormatButton for FCAB and non-FCAB are distinct objects */
	children = DiskCopyButton, DiskFormatButton,
			DiskRenameButton,
			RefreshAllButton
			,OpenDrivesSubMenu

#if _CONNECT_TO_REMOTE && !_CONNECT_MENU
			, DiskMenuFileLinking
#endif
			;

#if _NEWDESK
	genStates = default -usable;
#endif		/* if _NEWDESK */
	visibility = popup;
}

end	PrimaryInterface;


start	Interface;

DiskCopyButton = GenTrigger {
	moniker = 'C', "Copy Disk";
	action = MSG_META_START_DISK_COPY_BOX, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

/* note: DiskFormatButton for FCAB and non-FCAB are distinct objects */
DiskFormatButton = GenTrigger {
	moniker = 'F', "Format Disk";
	action = MSG_META_START_DISK_FORMAT_BOX, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

DiskRenameButton = GenTrigger {
	moniker = 'R', "Rename Disk";
	action = MSG_META_START_DISK_RENAME_BOX, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

RefreshAllButton = GenTrigger {
	moniker = 's', "Rescan Drives";
	kbdAccelerator = specificUI F5;
	action = MSG_WINDOWS_REFRESH_ALL, process;
	genAttributes = default +initiatesBusyState;
}

OpenDrivesSubMenu = GenInteraction {
	moniker = 'D', "Open Drive";
	children = OpenDrives;
	visibility = popup;
}
OpenDrives = GenInteraction ignoreDirty {
	/* children set runtime */
}
end	Interface;

#endif			/* if !_FCAB */


/*-----------------------------------------------------------------------------
	ToolMenu MENU
-----------------------------------------------------------------------------*/
#if _GMGRONLY
start	PrimaryInterface;

ToolMenu = GenInteraction {
	moniker = 'U', "Utilities";
	visibility = popup;
#if INSTALLABLE_TOOLS
	children =	LauncherGroup,
			ToolGoToBackup,
			ToolGroup;
#else
	children =	LauncherGroup,
			ToolGoToBackup;
#endif		/* if INSTALLABLE_TOOLS */
}

end	PrimaryInterface;
#endif		/* if _GMGRONLY */

start	ToolUI;
#if _GMGRONLY
LauncherGroup = GenInteraction {
	children =	CreateLauncherTrigger,
			EditLauncherTrigger;
}

ToolGoToBackup = GenTrigger {
	moniker = 'B', "Go to Backup";
	action = MSG_QUICK_BACKUP, process;
	genAttributes = default +initiatesInputHoldUp;
}
#endif		/* if GMGRONLY */

#if INSTALLABLE_TOOLS
ToolGroup = ToolManager ignoreDirty {
	tools = ignoreDirty data {
		ChunkArrayHeader <0,size ToolLibrary, 0, size ChunkArrayHeader>
	}
}
#endif		/* if INSTALLABLE_TOOLS */
end	ToolUI;

/*-----------------------------------------------------------------------------
	TreeMenu MENU
-----------------------------------------------------------------------------*/
#if _GMGRONLY
#if _TREE_MENU
start	PrimaryInterface;
TreeMenu = GenInteraction {
	moniker = 'T', "Tree";
	visibility = popup;
	children =	ShowTree,
			TreeMenuDrives,
			TreeOperationsSubMenu;
}
end	PrimaryInterface;
#endif		/* if _TREE_MENU */


#if _TREE_MENU
start	ToolUI;
ShowTree = GenTrigger {
	moniker = 'S', "Show Tree Window";
	action = MSG_QUICK_TREE, process;
	genAttributes = default +initiatesBusyState;
}

TreeMenuDrives = GenInteraction {
	moniker = 'D', "Tree Drive";
	children = TreeMenuDriveList;
	visibility = popup;
}
TreeMenuDriveList = DriveList ignoreDirty {
	applyMsg = MSG_NEW_TREE_DRIVE;
	destination = process;
	genAttributes = default +initiatesBusyState;
	hints = {
		ATTR_GEN_SEND_APPLY_MSG_ON_APPLY_EVEN_IF_NOT_MODIFIED,
		ATTR_GEN_ITEM_GROUP_SET_MODIFIED_ON_REDUNDANT_SELECTION
	}
}

TreeOperationsSubMenu = GenInteraction {
	children = TreeMenuExpandAll, TreeMenuExpandOneLevel,
			TreeMenuExpandBranch, TreeMenuCollapseBranch;
}
TreeMenuExpandAll = GenTrigger {
	moniker = 'A', "Expand All";
	/*kbdAccelerator = control '*';*/
	action = MSG_EXPAND_ALL, TreeObject;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
}
TreeMenuExpandOneLevel = GenTrigger {
	moniker = 'x', "Expand One Level";
	/*kbdAccelerator = '+';*/
	action = MSG_EXPAND_ONE_LEVEL, TreeObject;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
}
TreeMenuExpandBranch = GenTrigger {
	moniker = 'B', "Expand Branch";
	/*kbdAccelerator = '*';*/
	action = MSG_EXPAND_BRANCH, TreeObject;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
}
TreeMenuCollapseBranch = GenTrigger {
	moniker = 'C', "Collapse Branch";
	/*kbdAccelerator = '-';*/
	action = MSG_COLLAPSE_BRANCH, TreeObject;
	genStates = default -enabled;
	genAttributes = default +initiatesBusyState;
}

end ToolUI;
#endif		/* if _TREE_MENU */

#endif		/* if _GMGRONLY */
#endif		/* if !_ZMGR */

/*-----------------------------------------------------------------------------
	fixed instances of user-defined classes
-----------------------------------------------------------------------------*/

#if _GMGR
start DesktopUI;

#if _GMGRONLY	/* no Tree Window for FileCabinet */
#if !_ZMGR	/* no Tree Window for Zoomer */
#if _TREE_MENU	/* no Tree Window for NIKE */
TreeObject = Tree {
	displayMode = "DEFAULT_TREE_DISPLAY_MODE";
}
#endif
#endif		/* if _GMGRONLY */
#endif		/* if _TREE_MENU */

end DesktopUI;
#endif	; if _GMGR

/*
 * UI description of Icon Area
 */

#if _ICON_AREA

#if _PREFERENCES_LAUNCH
#include	"CArt/cmkrPrefMgrButton.ui"
#endif

#if _GMGR
#include	"cuiIconArea.ui"
#endif		/ * if _GMGR */


#if _FCAB
#include	"CArt/cbmOpenFile.ui"
#include	"CArt/cbmGetInfo.ui"
#include	"CArt/cbmMoveFile.ui"
#include	"CArt/cbmCopyFile.ui"
#include	"CArt/cbmDupFile.ui"
#include	"CArt/cbmRenameFile.ui"
#include	"CArt/cbmFormat.ui"
#include	"CArt/cbmCloseDir.ui"
#include	"CArt/cbmOpenDir.ui"
#include	"CArt/cbmCreateDir.ui"
#include	"CArt/cbmExit.ui"
#include	"CArt/cbmHelp.ui"
#include	"CArt/cbmDocDirButton.ui"
#include	"CArt/cbmMessyWasteCan.ui"	/* use special bitmaps for FC */
#endif		/* if _FCAB */

#if _TINY
#include	"CZArt/cbmFiveInchDisk.ui"
#include	"CZArt/cbmThreeInchDisk.ui"
#else
#include	"CArt/cbmFiveInchDisk.ui"
#include	"CArt/cbmThreeInchDisk.ui"
#endif

#if _GMGRONLY
#if _TINY

#include	"CZArt/cmkrMessyWasteCan.ui"

#include	"CZArt/cbmHardDisk.ui"
#include	"CZArt/cbmRamDisk.ui"
#include	"CZArt/cbmCDRom.ui"
#include	"CZArt/cbmNetDisk.ui"

#include	"CZArt/cmkrDocDirButton.ui"
#include	"CZArt/cmkrWorldDirButton.ui"

#else

#include	"CArt/cmkrMessyWasteCan.ui"
#include	"CArt/cbmHardDisk.ui"	/* only floppies for FileCabinet */
#include	"CArt/cbmRamDisk.ui"
#include	"CArt/cbmCDRom.ui"
#include	"CArt/cbmNetDisk.ui"
#include	"CArt/mkrRemove.ui"
#include	"CArt/mkrZipDisk.ui"

#include	"CArt/cmkrDocDirButton.ui"
#include	"CArt/cmkrWorldDirButton.ui"	/* no World button for FC */

#endif		/* _TINY	*/
#endif		/* if _GMGRONLY */

#if _WINDOW_MENU
#if !_NEWDESK		/* NewDesk has multiple windows, but no menu */
#if _TINY

#include	"CZArt/cmkrMonoFolder.ui"
#include	"CZArt/cmkrMultiFolder.ui"

#else

#include	"CArt/cmkrMonoFolder.ui"
#include	"CArt/cmkrMultiFolder.ui"

#endif	/* _TINY */
#endif 	/* if !_NEWDESK */
#endif	/* _WINDOW_MENU */


#if !_NEWDESK		/* NewDesk doesn't get PCMCIA (just because :) */
#if _TINY
#include	"CZArt/cbmPCMCIA.ui"
#include	"CZArt/mkrZoomerDrives.ui"
#else
#include	"CArt/cbmPCMCIA.ui"
/* this file located in CommonGM/CArt, not CommonDesktop/CArt	*/
#endif		/* if _TINY */
#endif		/* if !_NEWDESK */

#if _CONNECT_TO_REMOTE && !_CONNECT_ICON
#include	"CZArt/mkrConnectNotifyButton.ui"
#endif

#endif 		/* ICON_AREA	*/

/*
 * UI description for Tree Window
 */

#if _GMGRONLY	/* no Tree stuff for FileCabinet */
#if !_ZMGR	/* no Tree stuff for Zoomer */
#if _TREE_MENU	/* no Tree stuff for NIKE */
#include	"cuiTree.ui"
#endif		/* if _TREE_MENU */
#endif		/* if !_ZMGR */
#endif		/* if _GMGRONLY */


/*
 * UI description of Disk Copy and Disk Format dialog boxes
 */
#include	"cuiDisk.ui"

/*
 * UI description of Display Options box
 */
/*#include	"cuiDispOption.ui"*/

/*
 * UI description of Fle Opeation dialog boxes
 */
#include	"cuiFileOper.ui"

/*
 * template blocks duplicated for Folder Windows
 */
#if _GMGR
#include	"cuiFolderTemplate.ui"
#endif		/* if _GMGR */

/*
 * miscellaneous pieces of UI stuff
 */
#include	"cuiMisc.ui"

/*
 * UI description of "get info" box
 */
#include	"cuiGetInfo.ui"

/*
 * monikers for desktop use
 */
#include	"cuiMonikers.ui"


/*
 * strings, for localization ease
 */
#include	"cuiStrings.ui"


#if _DOS_LAUNCHERS
#include	"cuiLauncher.ui"
#endif

#if _NEWDESK
#include	"cuiNDGlobalMenu.ui"

#include	"cuiNDFolderTemplate.ui"
#include	"cuiNDDesktopFolderTemplate.ui"
#include	"cuiNDPrinter.ui"
#include	"cuiNDWastebasketTemplate.ui"
#include	"cuiNDDriveTemplate.ui"
#include	"cuiNDNonOpenableTemplate.ui"

#if _NEWDESKBA
#include "uiBAAssistant.ui"
#include "uiBAFolders.ui"
#endif		/* NEWDESKBA */

#endif		/* if _NEWDESK */
