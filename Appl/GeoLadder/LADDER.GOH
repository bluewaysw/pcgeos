/*
 ***************************************************************************
 * Copyright (c) 2010-2011 by YoYu-Productions
 *
 * PROJECT:     GeoLadder
 * MODULE:      GOC definition file
 * FILE:        LADDER.GOH
 *
 * AUTHOR:      Andreas Bollhalder
 ***************************************************************************
 */


/*
 ***************************************************************************
 *                  INCLUDE FILES
 ***************************************************************************
 */

@include <stdapp.goh>


/*
 ***************************************************************************
 *                  DEFINITIONS
 ***************************************************************************
 */

// Language compile options
// I8N_DE (german) or I8N_EN (english)
@define I8N_EN                 // The language to compile

#define L_FALSE             0  // False value used for functions
#define L_TRUE              1  // True value used for functions

// Application
#define APP_NAME            "GeoLadder"  // Application name

// Application input states
#define APP_I_NONE          0  // Application input state none
#define APP_I_MENU          1  // Application input state menu
#define APP_I_HELP          2  // Application input state instruction
#define APP_I_PLAY          3  // Application input state play
#define APP_I_EXEC          4  // Application input state exec
#define APP_I_WAIT          5  // Application input state wait
#define APP_I_LAST          6  // Application input state end
#define APP_I_OVER          7  // Application input state over
#define APP_I_HIGH          8  // Application input state high score
#define APP_I_EXIT          9  // Application input state exit

// INI file entries
#define INI_CATEGORY        APP_NAME  // Category in the GEOS.INI
#define INI_KEY_STATE       "state"   // Key to save the state of difficulty and sound
#define INI_KEY_LAST        "last"    // Key to save the last score

// Font
#define FNT_TYPE            FID_BISON  // The font used
#define FNT_SIZE            MakeWWFixed(12.0)  // The font size used

#define FNT_WIDTH           8  // Width of a character in pixels
#define FNT_HEIGHT         16  // Height of a character in pixels

// Screen
#define SCN_COLS           79  // Number of screen columns
#define SCN_ROWS           24  // Number of screen rows

// Switch
#define TRI_S_NONE          0  // Tri state none
#define TRI_S_ON            1  // Tri state on
#define TRI_S_OFF           2  // Tri state off

// Delay
#define DLY_T_STIM        600  // Delay ticks stimulus start
#define DLY_T_READY        75  // Delay ticks for the get ready message
#define DLY_T_HOOKA        15  // Delay ticks for the Hooka message
#define DLY_T_DIES         10  // Delay ticks for the Lad dies
#define DLY_T_EXIT         75  // Delay ticks for the exit message
#define DLY_T_LOAD        105  // Delay ticks for the level load message
#define DLY_T_SAVE         75  // Delay ticks for the high score save message

// Stimuli
#define STMS                4  // Number of stimuli

// Compliment
#define CMPS                7  // Number of compliments

// Rank
#define RNK_NAME_LEN       20  // Length of rank name

@ifdef I8N_DE
#define RNK_NO_NAME         "Kein Name"
@endif
@ifdef I8N_EN
#define RNK_NO_NAME         "No name"
@endif

#define RNKS                5  // Number of ranks
#define RNKS_P_TOP          SP_USER_DATA  // Top path of rank file
#define RNKS_P_SUB          "Game"        // Sub path of rank file
#define RNKS_F_NAME         "GeoLadder Scores"  // Name of rank file
#define RNKS_V_ID      0xAB88  // ID of the VM block with the ranks

// Play sound states
#define PLY_SND_OFF         0  // Play sound state off
#define PLY_SND_ON          1  // Play sound state on
#define PLY_SND_NA          2  // Play sound state not available

// Game difficulties
#define PLY_DIFF_MIN        1  // Game difficulty minimum
#define PLY_DIFF_MAX        5  // Game difficulty maximum

// Point
#define PNT_GOLD           30  // Points for earning gold statue
#define PNT_TIME            1  // Points for remaining bonus time
#define PNT_DER             2  // Points for jumping over Der
#define PNT_LAD           100  // Points needed for new Lad

// Text string bit masks
#define TSC_M            0xF0  // Command
#define TSL_M            0x0F  // Length
#define TSO_M            0x08  // Orientation
#define TSP_M_HI         0x07  // Position high bits
#define TSP_M_LO         0xFF  // Position low bits

// Text string drawing types
#define TSD_T_TEXT       0xA0  // Draw text
#define TSD_T_CHAR       0xB0  // Draw character

// Text string position types
#define TSP_T_MOVE       0xD0  // Move cursor in current orientation
#define TSP_T_SET        0xE0  // Set cursor orientation and position

// Level
#define LVLS                7  // Number of levels in game

#define LVL_COLS     SCN_COLS  // Number of level columns
#define LVL_ROWS           20  // Number of level rows
#define LVL_M_SIZE   LVL_COLS * LVL_ROWS  // Memory size of level

// Level string bit masks
#define LSC_M            0xF0  // Command
#define LSL_M            0x0F  // Length
#define LSO_M            0x08  // Orientation
#define LSP_M_HI         0x07  // Position high bits
#define LSP_M_LO         0xFF  // Position low bits

// Level string drawing types
#define LSD_T_BASE       0x00  // Draw base floor
#define LSD_T_BASE2      0x10  // Draw disapearing base floor
#define LSD_T_LADDER     0x20  // Draw ladder
#define LSD_T_WALL       0x30  // Draw wall
#define LSD_T_EXIT       0x40  // Draw exit
#define LSD_T_EMIT       0x50  // Draw Der emitter
#define LSD_T_RECV       0x60  // Draw Der receiver
#define LSD_T_GOLD       0x70  // Draw gold statue
#define LSD_T_BALL       0x80  // Draw rubber ball
#define LSD_T_TRAP       0x90  // Draw fire trap
#define LSD_T_TEXT       0xA0  // Draw text
#define LSD_T_CHAR       0xB0  // Draw character

// Level string orientation types
#define LSO_T_H          0x00  // Orientation horizontal
#define LSO_T_V          0x08  // Orientation vertical

// Level string position types
#define LSP_T_MOVE       0xD0  // Move cursor in current orientation
#define LSP_T_SET        0xE0  // Set cursor orientation and position

// Level string position type combined with drawing a single character
#define LSP_T_SET_AND_DRAW  0xF0  // Set cursor orientation and position and draw character

// Level characters
#define LSD_C_BASE        '='  // Level character fixed floor
#define LSD_C_BASE2       '-'  // Level character disappearing floor
#define LSD_C_LADDER      'H'  // Level character ladder
#define LSD_C_WALL        '|'  // Level character wall
#define LSD_C_EXIT        '$'  // Level character exit (treasure, end of level)
#define LSD_C_EMIT        'V'  // Level character Der emitter
#define LSD_C_RECV        '*'  // Level character Der eater
#define LSD_C_GOLD        '&'  // Level character gold statue
#define LSD_C_BALL        '.'  // Level character rubber ball
#define LSD_C_TRAP        '^'  // Level character trap
#define LSD_C_SPACE       ' '  // Level character space

// Emitter
#define EMTS_MAX            3  // Maximum number of Emitters

// Actor
#define ACTS_MAX    (DERS_MAX + 2) * 2  // Maximum number of changes to draws (Ders, Lad and level elements)
#define ACTS_M_SIZE  ACTS_MAX * sizeof(Actor)  // Memory size of actors

// Der
#define DER_C             'o'  // Der character
#define DERS_MAX            8  // Maximum number of Ders

// Der states
#define DER_S_ARMED         3  // Der state arm to leave an emitter
#define DER_S_READY         2  // Der state ready to leave an emitter
#define DER_S_LEAVE         1  // Der state leave an emitter
#define DER_S_MOVE          0  // Der state move
#define DER_S_RECYCLE      -1  // Der state recycle

// Lad
#define LAD_D_LIVES         5  // Lad default lives

// Lad characters
#define LAD_C_START       'P'  // Lad character not moving
#define LAD_C_STAY        'g'  // Lad character not moving
#define LAD_C_RIGHT       'p'  // Lad character moving right
#define LAD_C_LEFT        'q'  // Lad character moving left
#define LAD_C_FALL        'b'  // Lad character falling down

// Position
#define POS_NONE       0xFFFF  // Position out of screen

// Direction
#define DIR_NONE            0      // Direction none
#define DIR_N       -LVL_COLS      // Direction north (up)
#define DIR_NE      -LVL_COLS + 1  // Direction north east (up right)
#define DIR_E               1      // Direction east (right)
#define DIR_SE       LVL_COLS + 1  // Direction south east (down right)
#define DIR_S        LVL_COLS      // Direction south (down)
#define DIR_SW       LVL_COLS - 1  // Direction south west (down left)
#define DIR_W              -1      // Direction west (left)
#define DIR_NW      -LVL_COLS - 1  // Direction north west (up left)


/*
 ***************************************************************************
 *                  TYPE DEFINITIONS
 ***************************************************************************
 */

typedef struct                 // Game data
{
  word diff;                   //   2B+0 - Difficulty
  word sound;                  //   2B+0 - Sound state
  word lads;                   //   2B+0 - Remaining lads
  word round;                  //   2B+0 - Round
  word level;                  //   2B+0 - Level
  word score;                  //   2B+0 - Score
  word time;                   //   2B+0 - Remaining bonus time
  word ticks;                  //   2B+0 - Executed ticks
  word delay;                  //   2B+0 - Ticks per frame
} Game;                        //  18B+0 = 18 Bytes used

typedef struct                 // Emitter data
{
  word num;                    //   2B+0 - Number of Emitters
  word pos[EMTS_MAX];          //   6B+0 - Positions of Emitters
} Emitter;                     //   8B+0 = 8 Bytes used

typedef struct                 // Level data
{
  ChunkHandle name;            //   2B+0 - Name
  word time;                   //   2B+0 - Bonus time
  word spos;                   //   2B+0 - Lad start position
  Emitter emts;                //   8B+0 - Number of emitters
  word ders;                   //   2B+0 - Number of Ders
  ChunkHandle data;            //   2B+0 - Level data
} Level;                       //  18B+0 = 18 Bytes used

typedef struct                 // Rank entry
{
  word score;                  //   2B+0 - Score
  char name[RNK_NAME_LEN];     //  20B+0 - Name
} RankEntry;                   //  22B+0 = 22 Bytes used

typedef struct                 // Ranks file
{
  word id;                     //   2B+0 - Identification
  RankEntry ranks[RNKS];       // 110B+0 - Ranks
} RankFile;                    // 112B+0 = 112 Bytes used

typedef struct                 // Der data
{
  word cpos;                   //   2B+0 - Current position
  word lpos;                   //   2B+0 - Last position
  sbyte dir;                   //   1B+0 - Current direction
  sbyte state;                 //   1B+0 - State, < -1: Undefined, -1: Recycle, 0: Move, 1: Leave, 2: Ready, 3: Armed, > 3: Wait to leave
} Der;                         //   6B+0 = 6 Bytes used

typedef struct                 // Lad data
{
  word cpos;                   //   2B+0 - Current position
  word lpos;                   //   2B+0 - Last position
  sbyte cdir;                  //   1B+0 - Current direction
  sbyte ndir;                  //   1B+0 - Next direction from user input
  byte cjump;                  //   1B+0 - Jump value
  byte njump;                  //   1B+0 - Start a new jump
  char face;                   //   1B+1 - Current character (face)
  word die;                    //   2B+0 - Die counter
} Lad;                         //  11B+1 = 12 Bytes used

typedef struct                 // Actor data
{
  word pos;                    //   2B+0 - Coordinate
  char face;                   //   1B+1 - Character (face)
} Actor;                       //   3B+1 = 4 Bytes used

typedef struct                 // Global structure
{
  byte appState;               //   1B+1 - Current application state
  byte triState;               //   1B+1 - Tri state
  TimerHandle timerHandle;     //   2B+0 - Timer handle
  word timerId;                //   2B+0 - Timer id
  MemHandle noiseHandle;       //   2B+0 - Noise memory handle
  char *levelPtr;              //   4B+0 - Pointer to the level buffer
  Game game;                   //  18B+0 - Game data
  Level level;                 //  20B+0 - Level data
  Der ders[DERS_MAX];          //  48B+0 - Der data
  Lad lad;                     //  12B+0 - Lad data
} Globals;                     // 114B+2 = 116 Bytes used


/*
 ***************************************************************************
 *                  DEFINITION of LadderProcessClass
 ***************************************************************************
 */

@class LadderProcessClass, GenProcessClass;
  @prototype void MSG_LAD_PROTO();
  @message (MSG_LAD_PROTO) MSG_LAD_MENU;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_SOUND;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_DIFF;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_EXIT;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_STIM;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_STIM_END;
  @message (MSG_LAD_PROTO) MSG_LAD_HELP;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_LOAD_INFO;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_LOAD_DATA;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_INIT;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_READY;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_START;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_EXEC;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_WAIT;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_FAIL;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_DIES;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_CLEAR;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_HOOKA;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_NEXT;
  @message (MSG_LAD_PROTO) MSG_LAD_GAME_QUIT;
  @message (MSG_LAD_PROTO) MSG_LAD_LAST;
  @message (MSG_LAD_PROTO) MSG_LAD_OVER;
  @message (MSG_LAD_PROTO) MSG_LAD_HIGH;
  @message (MSG_LAD_PROTO) MSG_LAD_HIGH_SAVE;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderApplicationClass
 ***************************************************************************
 */

@class LadderApplicationClass, GenApplicationClass;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderScreenClass
 ***************************************************************************
 */

@class LadderScreenClass, VisContentClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @default VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
  @instance optr LSI_screen = NullOptr;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderTextClass
 ***************************************************************************
 */

@class LadderTextClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance optr LTI_text = NullOptr;
  @prototype void MSG_TXT_PROTO(optr text);
  @message (MSG_TXT_PROTO) MSG_TXT_SET_TEXT;
  @message (MSG_TXT_PROTO) MSG_TXT_UPDATE_TEXT;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderValueClass
 ***************************************************************************
 */

@class LadderValueClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LVI_value = 0;
  @prototype void MSG_VAL_PROTO(word value);
  @message (MSG_VAL_PROTO) MSG_VAL_SET_VALUE;
  @message (MSG_VAL_PROTO) MSG_VAL_UPDATE_VALUE;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderRankClass
 ***************************************************************************
 */

@class LadderRankClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance RankFile LRI_file = 0;
  @message word MSG_RNK_IS_NEW_RANK(word score);
  @message void MSG_RNK_LOAD();
  @message void MSG_RNK_SAVE_RANK(word score, void *name);
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderLevelClass
 ***************************************************************************
 */

@class LadderLevelClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance optr LLI_buffer = NullOptr;
  @prototype void MSG_LVL_PROTO(optr level);
  @message (MSG_LVL_PROTO) MSG_LVL_LOAD_LEVEL;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderActorsClass
 ***************************************************************************
 */

@class LadderActorsClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LAI_count = 0;
  @instance Actor LAI_actors[ACTS_MAX] = {
    { POS_NONE, C_SPACE }
  };
  @message void MSG_ACT_DRAW();
  @message void MSG_ACT_ADD(word lpos, char lface, word cpos, char cface);
  @message void MSG_ACT_RESET();
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderInputClass
 ***************************************************************************
 */

@class LadderInputClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance char LII_text[RNK_NAME_LEN] = "";
  @instance word LII_pos = 0;
  @message void MSG_INP_ADD_CHAR(char character);
  @message void MSG_INP_DEL_CHAR();
  @message void MSG_INP_GET_INPUT(void *buffer);
  @message void MSG_INP_RESET();
@endc


/* End of LADDER.GOH */
