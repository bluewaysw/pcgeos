/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		GeoFile/Main
FILE:		mModes.goc

AUTHOR:		John D. Mitchell

METHODS:

Name				Description
----				-----------
MSG_GF_SET_UI			Set GeoFile's variable UI parts based upon
				the current application mode, layout mode,
				user interface level and database.
MSG_GF_SET_MODE_MENUS		Set GeoFile's variable UI parts in response
				to the user's decision to change modes.

FUNCTIONS:

Scope	Name			Description
-----	----			-----------
Int	GFSetControllersForDesignMode
				Initiate/Dismiss the appropriate
				controllers for use in Design Mode.
Int	GFSetControllersForDataEntryMode
				Initiate/Dismiss the appropriate
				controllers for use in Data Entry Mode.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.11.23	Initial version.
	RainerB	23.10.21	Removed const keyword from  GFUIChangeTableEntry declaration
				to make -zc flag working

DESCRIPTION:
	This file contains the main mode switching and the core
	functionality of the user level changing for GeoFile.

	$Id: mModes.goc,v 1.1 97/04/04 15:54:06 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Include Files
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <stdapp.goh>			/* GEOS Standard Application.	*/

#include <Ansi/stdlib.h>		/* Standard C.	*/

@include <Objects/FlatFile/ffDbase.goh>	/* GEOS Libraries.	*/
@include <Objects/FlatFile/ffDbaseC.goh>
@include <Objects/FlatFile/ffileC.goh>
@include <Objects/FlatFile/ffRecC.goh>

@define	__GF_MAIN_MODES_GOC		/* Identify this file.	*/
@include <geofile.goh>			/* GeoFile Application.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Internal Type Definitons
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * Valid user interface levels.
 *
 * Don't futz with these values!  They correspond to the following ormula:
 * definedLevel = 0x01 << UIInterfaceLevel;  You have been warned!
 */
typedef	ByteFlags GFUILevels;
#define	GFUIL_NO_LEVELS		(0)
#define	GFUIL_INTRODUCTORY	(0x01)
#define	GFUIL_BEGINNING		(0x02)
#define	GFUIL_INTERMEDIATE	(0x04)
#define	GFUIL_ADVANCED		(0x08)
#define	GFUIL_GURU		(0x10)
#define	GFUIL_ALL_LEVELS	(GFUIL_INTRODUCTORY	| \
				 GFUIL_BEGINNING	| \
				 GFUIL_INTERMEDIATE	| \
				 GFUIL_ADVANCED		| \
				 GFUIL_GURU)
/*
 * Valid database modess.
 *
 * These values assume that MT_CURRENT == 0.
 */
typedef	ByteFlags GFUIModes;
#define	GFUIM_NO_MODES		(MT_CURRENT)
#define	GFUIM_CURRENT		(GFUIM_NO_MODES)
#define	GFUIM_DATA_ENTRY	(MT_DATA_ENTRY)
#define	GFUIM_DESIGN		(MT_DESIGN)
#define	GFUIM_ALL_MODES		(GFUIM_DATA_ENTRY	| \
				 GFUIM_DESIGN)
/*
 * Valid layout types.
 */
typedef	ByteFlags GFUILayoutTypes;
#define	GFUILT_NO_LAYOUTS	(LT_NO_LAYOUT_TYPE)
#define	GFUILT_SINGLE_RECORD	(LT_SINGLE_RECORD)
#define	GFUILT_MULTI_RECORD	(LT_MULTI_RECORD)
#define	GFUILT_REPORT		(LT_REPORT)
#define	GFUILT_ALL_LAYOUTS	(GFUILT_SINGLE_RECORD	| \
				 GFUILT_MULTI_RECORD	| \
				 GFUILT_REPORT)

/*
 * The GFUIChangeTableEntrys are for mapping each object that is affected
 * by changes to the application's mode and/or user interface
 * features/levels.
 *
 * See the header for MSG_GF_SET_UI for more information.
 */
typedef	struct
{
	optr			object;		/* Object to manage.	*/
	GeoFileLevelsFeatures	features;	/* Valid UI features.	*/
	GFUILevels		levels;		/*   "  UI levels.	*/
	GFUIModes		modes;		/*   "  app. modes.	*/
	GFUILayoutTypes		layouts;	/*   "  layout types.	*/
} GFUIChangeTableEntry;


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Internal Function Prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal GFSetControllersForDesignMode (void);
static void _pascal GFSetControllersForDataEntryMode (optr databaseObject);


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Global Static Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifdef __HIGHC__
_pragma_const_in_code;
#define vfar
#endif

#ifdef __BORLANDC__
#pragma option -zEMMODES_TEXT -zFCODE
#define vfar _far
#endif
#ifdef __WATCOM__
#define vfar _far
#endif

/*
 * uiTable is used to map each of the UI objects that are affected by
 * changes to the current application mode, layout mode, the user interface
 * level, current document, etc.
 *
 * See the header for MSG_GF_SET_UI for more information.
 *
 * Note that the table is listed in alphabetical order for ease of
 * maintenance (i.e., keep it that way! :-)
 * The only entries that are not in alphabetical order are the toolbar
 * entries. This is because the toolbar controllers won't be built
 * if the controller isn't usable. So the corresponding menu items
 * have to be set usable first (therefore they must appear earlier in
 * the table).
 *
 * Note that entries marked with "XXX" means that the entry is definitely
 * tentative (as opposed to the normal totally bewildered state :-).
 */
static GFUIChangeTableEntry vfar GFUIChangeTable [] =
{
	{
	@ChooseLayoutBoxTrigger,
	@GFLF_NO_FEATURES,
	GFUIL_ALL_LEVELS,
	GFUIM_DESIGN | GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@CreateNewFieldUIController,
	@GFLF_NO_FEATURES,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_SINGLE_RECORD
	},
	{
	@CreateNewLayoutTrigger,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@DataMenu,
	@GFLF_NO_FEATURES,
	GFUIL_ALL_LEVELS,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@DeleteLayoutTrigger,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@DeleteMarkedTrigger,
	@GFLF_MARK_FEATURES,
	GFUIL_BEGINNING | GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@DesignOptionsList,
	@GFLF_MULTI_RECORD_LAYOUT,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN | GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@EditRecordGroup,
	@GFLF_NO_FEATURES,
	GFUIL_BEGINNING | GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@FieldNavigationOrderTrigger,
	@GFLF_FIELD_TAB_ORDER,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@FieldPropUIController,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@GFInstructionControl,
	@GFLF_ADVANCED_GRAPHICS,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@GraphicsMenu,
	@GFLF_GRAPHICS_LAYER,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@InsertPageNumberTrigger,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_MULTI_RECORD
	},
	{
	@MarkMenu,
	@GFLF_MARK_FEATURES,
	GFUIL_BEGINNING | GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@MMFormulaTrigger,
	@GFLF_ADVANCED_MARK,
	GFUIL_BEGINNING | GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@ModeList,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_ALL_MODES,
	GFUILT_NO_LAYOUTS
	},
	{
	@GFPageSizeControl,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@PropertiesMenu,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
        {
	@GFGrObjTools,
	@GFLF_GRAPHICS_LAYER,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
        {
	@GFGraphicOptionsMenu,
	@GFLF_ADVANCED_GRAPHICS,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
        {
	@GFTextAttributesControl,
	@GFLF_ADVANCED_GRAPHICS,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
        {
	@GFAttributesMenu,
	@GFLF_ADVANCED_GRAPHICS,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
        {
	@GFParagraphSubmenu,
	@GFLF_ADVANCED_GRAPHICS,
	GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@RecordNavigationOrderTrigger,
	@GFLF_RECORD_ORDER,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@RenameLayoutTrigger,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@SortDialogTrigger,
	@GFLF_ADVANCED_SORT,
	GFUIL_BEGINNING | GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DATA_ENTRY,
	GFUILT_NO_LAYOUTS
	},
	{
	@TreasureChest,
	@GFLF_FIELD_ORGANIZER,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_SINGLE_RECORD
	},
	{
	@GFLeftSideToolbar,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	},
	{
	@GFToolbar,
	@GFLF_DESIGN_MODE,
	GFUIL_INTERMEDIATE | GFUIL_ADVANCED | GFUIL_GURU,
	GFUIM_DESIGN,
	GFUILT_NO_LAYOUTS
	}
};

#ifdef __BORLANDC__
#pragma option -zE* -zF*
#endif

#ifdef __HIGHC__
_pragma_end_const_in_code;
#endif


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Message Handlers
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SET_UI
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Set the application's UI according to the current user
		level features, application mode, document, etc.

PASS: 		ModeType	*appMode	= Current application mode.
						  MT_CURRENT will cause the
						  routine to query for the
						  current application mode.
						  The current Mode (it may
						  have changed) is stored
						  here in this routine.
		optr		modeGroup	= Mode list object to set
						  based on given mode.
						  NULL means don't do
						  anything to it.
		optr		layoutGroup	= Layout list object to set
						  based on given layout type.
						  NULL means don't do
						  anything to it.
		LayoutType	*layoutType	= Current layout mode type.
						  LT_NO_LAYOUT_TYPE will
						  cause the routine to
						  query for the value.
						  The current layout type (it
						  may have changed) is stored
						  here in this routine.
		GeoFileLevelsFeatures	userFeatures
						= User Interface features
						  to base UI settings on.
						  Zero causes the function
						  to query for the value.
		UIInterfaceLevel	userLevel
						= User Interface level to
						  base UI settings on.
						  Zero causes the function
						  to query for the value.
RETURN:		Void.

SIDE EFFECTS:
	Requires:	uiTable appropriately initialized.

	Asserts:	GeoFile's UI is set in a manner consistent with the
			given arguments and the table entries.

CHECKS:
	Validates appMode.
	Checks for various pernicious cases of nonsensical/conflicting UI
	change data table entry fields.


PSEUDO CODE/STRATEGY:
	Mark the application busy and hold up input.
	If the UI features are not given then
		Query the database for the current UI features.
	If the UI Level is not given then
		Query the database for the current UI level.
	If the UI Level is Introductory then
		Set the application mode to Data Entry mode.
	Otherwise, if application mode is *not* given then
		Query the database for the current mode.
	If the application mode list argument exists then
		Force the mode list to the current application mode.
	If the layout mode type is *not* given then
		Query the database for the current layout mode type.
	For all entries in the application's UI change data table
		Check the table entry against the current application:
			Data-Entry/Design Mode, UI Interface Level, and
			UI Features to determine if the object from the
			table should be set USABLE or NOT_USABLE.
		If the layout field is non-zero and the current application
		mode is Design then
			Check the current application layout mode against
			the table value to determine whether or not the
			object from the table should be ENABLED or not.
		(See below for more information.)
	Set up the various controllers based on the current application
	mode.
	Resume input and show that application as being interactible.

KNOWN DEFECTS/CAVEATS/IDEAS:
	The table entries are utilized thusly:
		The 'features' field specifies which features (if any) that
		the given object is tied to (use GFLF_NO_FEATURES to
		specify that the object is *not* tied to any user interface
		level feature). I.e., if the feature is on then the object
		is made usable otherwise it's disabled.

		The 'levels' field specifies which user interface level(s)
		where the given object will be activated (absence obviously
		specifying non-usability). Note that the levels are
		independent in that an object could be only made usable at,
		say, Beginner and Guru levels but on none of the others.

		The 'modes' field specifies the application mode(s) in
		which the given object is to be activated.

		The 'layouts' field specifies (iff non-zero) the layout
		types in which the given object should be enabled/disabled
		*when in Design mode*. If the field is zero then nothing is
		changed.

	So, the major items are nuked or not depending on user level,
	current document, user invoked mode change to provide a large
	difference in the action/look-n-feel/etc. of the application while
	the various objects associated with the different layout types are
	merely grayed out or not to highlight the fact that there are only
	some relatively minor differences between Design mode layout types.

	Note that the objects specified in the above UI changes table
	('uiTable') are restricted in their user level behavior in that
	they can only be set usable/not-usable and/or enabled/not-enabled
	as opposed to the various things that can be done in the user
	interface levels tables but since those tables can't be extended to
	contain more data fields...  Anyways, keep that in mind along with
	the fact that things like controllers that need to be updated
	(GAUC_RECALC and it's ilk) based on the current level should be
	appropriately placed in the UI levels tables for that functionality
	(they may still need to be in the uiTable however).  Hope that's
	not too confusing. :-)

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	JDM	92.11.20	Initial version.
	JDM	92.12.18	Introductory & Data Entry mode forcing.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SET_UI
{
    optr	appObject;
    optr	databaseObject;
    optr	tableObject;
    word	wLcv;
    AppFeaturesInfo featuresInfo;
    GFUIChangeTableEntry	*uiTable;

    /* Get ahold of the current application and database objects.	*/
    appObject = GeodeGetAppObject (0);
    databaseObject = GetTargetDatabaseObject ();

    /* Let the user know that we're working...	*/
    @call appObject::MSG_GEN_APPLICATION_HOLD_UP_INPUT ();
    @call appObject::MSG_GEN_APPLICATION_MARK_BUSY ();

    /*
     * Get the current features and UI level.
     * Set them if not passed in.
     */
    featuresInfo = @call appObject::MSG_GEN_APPLICATION_GET_APP_FEATURES ();
    if (!userLevel)
	userLevel = GET_UI_INTERFACE_LEVEL(featuresInfo);
    if (!userFeatures)
	userFeatures = GET_APP_FEATURES(featuresInfo);

    /* Validate the application mode.	*/
#if ERROR_CHECK
    if ((GFUIM_CURRENT > *appMode) || (*appMode > GFUIM_DATA_ENTRY))
	EC_ERROR (MODES_INVALID_APP_MODE_ARGUMENT);
#endif	/* ERROR_CHECK	*/

    /* Going into Introductory/Beginning level?	*/
    if ((UIIL_INTRODUCTORY == userLevel) || (UIIL_BEGINNING == userLevel))
	{
	/* Yep.  Force the mode to Data Entry as that's all folks.	*/
	*appMode = GFUIM_DATA_ENTRY;
	}
    /* Is there an application mode specified?	*/
    else if (GFUIM_CURRENT == *appMode)
	{
	/* Nope.  Figure out the current mode.	*/
	*appMode = @call databaseObject::MSG_FFD_GET_CURRENT_MODE ();

	/*
	 * If the application is just coming up there's not yet a current
	 * mode so we'll have to fake it.
	 * Default to Design mode at all levels but Introductory and Beginning.
	 */
	if (!(*appMode))
	    {
	    if (((UIIL_INTRODUCTORY != userLevel) &&
		(UIIL_BEGINNING != userLevel)) &&
		(@GFLF_DESIGN_MODE & userFeatures))
		{
		*appMode = GFUIM_DESIGN;
		}
	    else
		{
		*appMode = GFUIM_DATA_ENTRY;
		}
	    }
	}
#if ERROR_CHECK
	/* Make sure that the application mode is valid.	*/
	if ((GFUIM_DESIGN != *appMode) && (GFUIM_DATA_ENTRY != *appMode))
	    EC_ERROR (MODES_INVALID_APP_MODE_VALUE);
#endif	/* ERROR_CHECK	*/

    /* Is there an application mode list object to set?	*/
    if (modeGroup)
	{
	/* Yep, so set the modeGroup to the given state.	*/
	@call modeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
			(*appMode, FALSE);
	}

    /* Layout mode type already specified?	*/
    if (GFUILT_NO_LAYOUTS == *layoutType)
	{
	/* Nope, get the current layout type from the database.	*/
	*layoutType = @call databaseObject::MSG_FFD_GET_LAYOUT_TYPE
			(0, TRUE);
	/*
	 * If the application is just coming up there's not yet a current
	 * layout mode type so we'll have to fake it.
	 * Default to single record mode.
	 */
	if (!(*layoutType))
	    {
	    *layoutType = GFUILT_SINGLE_RECORD;
	    }
	}

    /* Going into less than Advanced level?	*/
    if ((UIIL_INTRODUCTORY == userLevel) || (UIIL_BEGINNING == userLevel)
		|| (UIIL_INTERMEDIATE == userLevel))
	{
	/* Yep.  Force the mode to Single Record as that's all folks.*/
	*layoutType = GFUILT_SINGLE_RECORD;
	}

    /* Is there an layout object to set?	*/
    if (layoutGroup)
	{
	/* Yep, so set the layout type to the given state.	*/
	@call layoutGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION
			(*layoutType, FALSE);
	}

#if ERROR_CHECK
	/* Make sure that the layout type is valid.	*/
	if ((GFUILT_SINGLE_RECORD != *layoutType) &&
	    (GFUILT_MULTI_RECORD != *layoutType))
	    EC_ERROR (MODES_INVALID_LAYOUT_MODE_TYPE_VALUE);
#endif	/* ERROR_CHECK	*/

    /* Lock down the block containing the UI change table.	*/
    uiTable = MemLockFixedOrMovable (GFUIChangeTable);

    /* For all elements in the UI change data table...	*/
    for (wLcv = 0;
	 wLcv < (sizeof (GFUIChangeTable) / sizeof (GFUIChangeTable [0]));
	 wLcv++)
	{
#if ERROR_CHECK
	/* Make sure that the object isn't null.	*/
	if (NULL == uiTable [wLcv].object)
	    EC_ERROR (MODES_NULL_OBJECT_IN_UI_CHANGES_TABLE_GET_A_CLUE);
#endif	/* ERROR_CHECK	*/

	/* Get ahold of the current instance of the tabled object.	*/
	tableObject = GeodeGetOptrNS (uiTable [wLcv].object);

#if ERROR_CHECK
	/*
	 * Check for bizarre combinations of flags.
	 *
	 * Can't have an object that is in valid in Data Entry mode but not
	 * in Design mode that also specifies the layout modes types.
	 */
	if ((uiTable [wLcv].layouts) &&
	    ((GFUIM_DATA_ENTRY & uiTable [wLcv].modes) &&
	     (! (GFUIM_DESIGN & uiTable [wLcv].modes))))
	    EC_ERROR (MODES_INVALID_TABLE_ENTRY_LAYOUT_N_DATA_ENTRY);

	/* Must specify the valid user interface levels!	*/
	if (! uiTable [wLcv].levels)
	    EC_ERROR (MODES_INVALID_TABLE_ENTRY_NULL_LEVELS_ENTRY);

	/* Must specify the valid application modes!	*/
	if (! uiTable [wLcv].modes)
	    EC_ERROR (MODES_INVALID_TABLE_ENTRY_NULL_MODES_ENTRY);

	/*
	 * If the object is valid at in all layout types then you should
	 * just enable the object to begin with and set the 'layouts' field
	 * in the table entry to GFUILT_NO_LAYOUTS.
	 */
	if (GFUILT_ALL_LAYOUTS ==
	    (GFUILT_ALL_LAYOUTS & uiTable [wLcv].layouts))
	    EC_ERROR (MODES_SILLY_TABLE_ENTRY_ALL_LAYOUTS_SHOULD_BE_NONE);
#endif	/* ERROR_CHECK	*/

	/*
	 * Check for each of the necessary criteria.
	 * The way this works is that each criteria must be met or the
	 * object will be deactivated.  Meeting all of the criteria
	 * suffices to activate the object.
	 *
	 * Does this object correspond to no specific feature or is
	 * it contained in the current feature set?
	 * And does this object belong at this level?
	 * And does this object belong in this mode?
	 */
	if (((! uiTable [wLcv].features) ||
	     (uiTable [wLcv].features & userFeatures)) &&
	    (uiTable [wLcv].levels & (0x01 << userLevel)) &&
	    (uiTable [wLcv].modes & *appMode))
	    {
	    /* Yep.  Any layout type stuff to check?	*/
	    if (uiTable [wLcv].layouts)
		{
		/*
		 * Yep, so check for enabling of the object otherwise
		 * disable it. Note the check for not being in Design mode
		 * to make sure that the item is properly enabled.
		 */
		if ((uiTable [wLcv].layouts & *layoutType) ||
		    (*appMode & GFUIM_DATA_ENTRY))
		    {
		    @call tableObject::MSG_GEN_SET_ENABLED
					(VUM_DELAYED_VIA_APP_QUEUE);
		    }
		else
		    {
		    @call tableObject::MSG_GEN_SET_NOT_ENABLED
					(VUM_DELAYED_VIA_APP_QUEUE);
		    }
		}

	    /* Activate the object.	*/
	    @call tableObject::MSG_GEN_SET_USABLE
				(VUM_DELAYED_VIA_APP_QUEUE);
	    }
	else
	    {
	    /* Nope.  Deactivate the object.	*/
	    @call tableObject::MSG_GEN_SET_NOT_USABLE
				(VUM_DELAYED_VIA_APP_QUEUE);
	    }
	}	/* End of for all elements in 'uiTable'.	*/

    /* Done using the UI change data table.	*/
    MemUnlockFixedOrMovable (GFUIChangeTable);

    /* Initiate/Dismiss the main controllers based on the current mode.	*/
    if (GFUIM_DESIGN & *appMode)
	{
	GFSetControllersForDesignMode ();
	}
    else	/* Data Entry Mode.	*/
	{
	GFSetControllersForDataEntryMode (databaseObject);
	}

    /* Finis.	*/
    @call appObject::MSG_GEN_APPLICATION_MARK_NOT_BUSY ();
    @call appObject::MSG_GEN_APPLICATION_RESUME_INPUT ();
}	/* End of MSG_GF_SET_UI.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		MSG_GF_SET_MODE_MENUS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

DESCRIPTION:	Handle the user initiated switching between the Data Entry
		and Design modes (or vice versa).

PASS: 		word	selection	= MT_DATA_ENTRY or MT_DESIGN
		word	numSelections	= ??? (1).
		word	stateFlags	= ???.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	???

	Asserts:	???

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Get the current mode list selection.
	If Design mode then
		Commit the current data entry record if any.
		Instruct the database to enter design mode.
	Otherwise,
		Instruct the database to enter data entry mode.
	Set the user interface to a state consistent with the selected
	mode.

KNOWN DEFECTS/CAVEATS/IDEAS:	???

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jeremy	5/12/92		Initial version
	anna	6/19/92		Added code to hold up input when switching
				modes.
	JDM	92.11.24	Modified for MSG_GF_SET_UI.
	anna	12/10/92	Added an ObjMarkDirty so the change is saved

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@extern method GeoFileProcessClass, MSG_GF_SET_MODE_MENUS
{
    optr	currentDatabase;
    optr	appObject;
    ModeType	curMode;
    LayoutType	curLayoutType;

    /* Get ahold of the current database and application object.	*/
    currentDatabase = GetTargetDatabaseObject();
    appObject = GeodeGetAppObject (0);

    /* Give the user some visual feedback.	*/
    @call appObject::MSG_GEN_APPLICATION_MARK_BUSY ();
    @call appObject::MSG_GEN_APPLICATION_HOLD_UP_INPUT ();

    /* What mode are we switching *into*?	*/
    switch (selection)
	{
	case MT_DESIGN:
	    /* Commit the current record (if necessary).	*/
	    if (@call currentDatabase::MSG_FFD_RECORD_CONTROL
				(FFRCR_COMMIT_CURRENT_RECORD, 0))
		{
		/* Set the app mode contained in the database.	*/
	        @call currentDatabase::MSG_FFD_SET_CURRENT_MODE_TO_DESIGN();
		}
	    else {
		/* the record is incorrect! do nothing */
    		@call appObject::MSG_GEN_APPLICATION_MARK_NOT_BUSY ();
    		@call appObject::MSG_GEN_APPLICATION_RESUME_INPUT ();
		/* reset the mode group */
	 	@call GeodeGetOptrNS(@ModeList)::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
						MT_DATA_ENTRY, FALSE);
		return;
	    }
	    break;

        case MT_DATA_ENTRY:
	    /* Set the app mode contained in the database.	*/
	    @call currentDatabase::MSG_FFD_SET_CURRENT_MODE_TO_DATA_ENTRY();

    	    /* Set the visMoniker for the Record Control Panel.	*/
    	    @call self::MSG_GF_SET_RECORD_CONTROL_PANEL_VIS_MONIKER
			(NullOptr);
	    break;
	}

    /*
     * Set the application's UI to the appropriate state.
     *
     * Note the NullOptr passed as the mode list group object.  This is
     * done since we know that the mode list is already set with the
     * correct state since that's what invoked this routine!
     */
    curMode = selection;
    curLayoutType = LT_NO_LAYOUT_TYPE;
    @call process::MSG_GF_SET_UI (&curMode, NullOptr, NullOptr,
				  &curLayoutType, 0, 0);

    /*
     * Recover page size settings, if going into design mode
     */
    if (selection == MT_DESIGN) {
	GFResetPrintControllerSizes(currentDatabase);
    }

    /*
     * Mark the database dirty so that this change is saved if we quit
     * the file
     */
    ObjLockObjBlock(HandleOf(currentDatabase));
    ObjMarkDirty(currentDatabase);
    MemUnlock(HandleOf(currentDatabase));

    /* Finis.	*/
    @call appObject::MSG_GEN_APPLICATION_MARK_NOT_BUSY ();
    @call appObject::MSG_GEN_APPLICATION_RESUME_INPUT ();
}	/* End of MSG_GF_SET_MODE_MENUS.	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Exported Functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GFSetControllersForDesignMode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the Field Organizer and the Record Control Panel
		appropriately for GeoFile's Design mode.

CALLED BY:	External.

PASS:		Void.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Deactivate the Record Control Panel.
	Activate the Field Organizer.

KNOWN DEFECTS/CAVEATS/IDEAS:
	What could be simpler?

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jeremy	5/19/92	    	Initial version.
	JDM	92.07.23	Modified for Record Control Panel.
	JDM	92.11.24	Modified for MSG_GF_SET_UI.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal GFSetControllersForDesignMode (void)
{
    /* Get rid of the Record Control Panel.	*/
    @call GeodeGetOptrNS (@RCPController)::MSG_GEN_GUP_INTERACTION_COMMAND
		(IC_DISMISS);

    /* Activate the Treasure Chest.	*/
    @call GeodeGetOptrNS (@TreasureChest)::MSG_GEN_INTERACTION_INITIATE ();

}	/* End of GFSetControllersForDesignMode().	*/


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GFSetControllersForDataEntryMode
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

SYNOPSIS:	Set the Field Organizer and the Record Control Panel
		appropriately for GeoFile's Data Entry mode.

CALLED BY:	External.

PASS:		optr	databaseObject		= Current database object.

RETURN:		Void.

SIDE EFFECTS:
	Requires:	????

	Asserts:	????

CHECKS:			None.

PSEUDO CODE/STRATEGY:
	Deactivate the Field Organizer.
	if there are any records in the database then
		Instruct the datbase to update the screen to match the
		current record's data.
	Otherwise,
		Instruct the database to begin editing a 'new'/empty
		record.
	Activate the Record Control Panel.

KNOWN DEFECTS/CAVEATS/IDEAS:	????

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	jeremy	5/19/92	    	Initial version.
	anna	6/11/92		Close up Treasure Chest and Field Properties
				boxes.
	JDM	92.07.23	Modified for Record Control Panel.
	JDM	92.11.24	Modified for MSG_GF_SET_UI.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

static void _pascal GFSetControllersForDataEntryMode (optr databaseObject)
{
    /* Deactivate the Treasure Chest.	*/
    @call GeodeGetOptrNS (@TreasureChest)::
		MSG_GEN_GUP_INTERACTION_COMMAND (IC_DISMISS);

    /* Any records in the database?	*/
    if (@call databaseObject::MSG_FFD_GET_NUM_RECORDS())
	{
	/* Yep.  Display the current record.	*/
	@send databaseObject::MSG_FFD_RECORD_CONTROL (FFRCR_REFRESH, 0);
	}
    else
	{
	/* Nope.  Start off with a 'new'/empty record.	*/
	@send databaseObject::MSG_FFD_RECORD_CONTROL
			(FFRCR_CREATE_NEW_RECORD, 0);
	}

    /* Activate the Record Control Panel.	*/
    @call GeodeGetOptrNS(@RCPController)::
	MSG_GEN_INTERACTION_INITIATE_NO_DISTURB();
}
