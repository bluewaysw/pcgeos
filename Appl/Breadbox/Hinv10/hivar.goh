/***********************************************************************
 *
 *
 * PROJECT:	Breadbox Home Inventory
 * FILE:	hivar.goh
 * AUTHOR:	John F. Howard,   8/95
 *
 * DESCRIPTION:
 *	This file has the global variables
 *      and structures for the Home Inventory application.
 *
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <gstring.h>
#include <Ansi/string.h>
#include <print.h>      /* These two for printing  */
@include <spool.goh>
#include <initfile.h>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
@class	HInvProcessClass, GenProcessClass ;

/* Messages for creating new DB pieces & rooms */
@message (GEN_TRIGGER_ACTION) MSG_NEW_ROOM;
@message (GEN_TRIGGER_ACTION) MSG_NEW_PIECE;
@message void MSG_EDIT_ROOM_NAME();

/* Message to modify DB piece data */
@message (GEN_TRIGGER_ACTION) MSG_SET_PIECE_DATA;

/* Messages for important household info */
@message (GEN_TRIGGER_ACTION) MSG_ENTER_INFO_DATA;
@message void MSG_SHOW_HOUSE_INFO();

/* Messages for data display */
@message void MSG_SHOW_DATA(int whichDisp);
@message void MSG_SHOW_IMPINFO();

@message void MSG_SHOW_PIECE_NOTES_DB();

@message (GEN_TRIGGER_ACTION) MSG_PICK_ROOM;
@message (GEN_TRIGGER_ACTION) MSG_PICK_PIECE;

/* Messages for deleting DB pieces & rooms */
@message (GEN_TRIGGER_ACTION) MSG_DELETE_ROOM;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_PIECE;

/* Messages for setting the monikers in the lists */
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ROOM_LIST_MONIKER_QUERY;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_PIECE_LIST_MONIKER_QUERY;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_ROOM_PICKLIST_MONIKER_QUERY;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_PIECE_PICKLIST_MONIKER_QUERY;

/* Messages for handling selections in the lists */
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ROOM_LIST_APPLY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_PIECE_LIST_APPLY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_ROOM_PICKLIST_APPLY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_PIECE_PICKLIST_APPLY;

/* Messages for handling pick list triggers */
@message (GEN_TRIGGER_ACTION) MSG_USE_PICKED_ROOM;
@message (GEN_TRIGGER_ACTION) MSG_USE_PICKED_PIECE;

/* LES:  Add a message for handling a request to see the house info. */
@message (GEN_TRIGGER_ACTION) MSG_HOUSE_DISPLAY ;

/* and a message to see the data display */
/*@message (GEN_TRIGGER_ACTION) MSG_DATA_DISPLAY ;*/
@message void MSG_DATA_DISPLAY(int whichDisp);

/* and a message to see the imp info display */
@message (GEN_TRIGGER_ACTION) MSG_IMPINFO_DISPLAY ;

/* important info section messages */
@message void MSG_OPEN_DUMMY_DB();
/* Professionals section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_PRO_DB;
@message void MSG_PRO_DB_DISPLAY(int whichPro);
@message (GEN_TRIGGER_ACTION) MSG_ENTER_PRO_DATA;
@message void MSG_SHOW_PRO_INFO(int whichPro);
/* Credit Card section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_CC_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_CC_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_CC_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_CC;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_CC_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_CC;
/* Banking section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_BA_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_BA_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_BA_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_BA;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_BA_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_BA;
/* Real Estate section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_RE_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_RE_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_RE_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_RE;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_RE_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_RE;
/* Insurance section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_INS_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_INS_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_INS_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_INS;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_INS_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_INS;
/* Investments section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_INV_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_INV_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_INV_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_INV;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_INV_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_INV;
/* Family section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_FAM_DB;
@message (GEN_DYNAMIC_LIST_QUERY_MSG) MSG_FAM_LIST_MONIKER_QUERY;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_FAM_LIST_APPLY;
@message (GEN_TRIGGER_ACTION) MSG_NEW_FAM;
@message (GEN_TRIGGER_ACTION) MSG_EDIT_FAM_NAME;
@message (GEN_TRIGGER_ACTION) MSG_DELETE_FAM;
/* Safe/box section */
@message (GEN_TRIGGER_ACTION) MSG_OPEN_OTH_DB;
@message (GEN_TRIGGER_ACTION) MSG_SDB_DB_DISPLAY;
@message (GEN_TRIGGER_ACTION) MSG_POB_DB_DISPLAY;
@message (GEN_TRIGGER_ACTION) MSG_SAFE_DB_DISPLAY;
@message (GEN_TRIGGER_ACTION) MSG_ENTER_SDB_DATA;
@message (GEN_TRIGGER_ACTION) MSG_ENTER_POB_DATA;
@message (GEN_TRIGGER_ACTION) MSG_ENTER_SAFE_DATA;
@message void MSG_SHOW_SDB_INFO();
@message void MSG_SHOW_POB_INFO();
@message void MSG_SHOW_SAFE_INFO();
@endc

/* need this class for printing */
@class PrintGenTextClass, GenTextClass;
@endc
/* need this class for printing */
@class IPrintGenTextClass, GenTextClass;
@endc

/* Prototypes */
void getMonText(int number, int copy);


/*
 ***************************************************************************
 *		Global variables and definitions
 ***************************************************************************
 */

#define MAX_NAME_LEN   19
#define ATTY 0
#define CPA 1
#define FINPLN 2
#define STKBRK 3
#define SHOW_ON_STARTUP   1

extern FileHandle  hmInvFile;  /* handle to the hminv file that's open. */

extern word  currentRoom;      /* the currently selected room */

extern word  currentPiece;     /* the currently selected piece */

extern word  currentCCard;     /* the currently selected credit card */

extern word  currentBAcct;     /* the currently selected bank acct */

extern word  currentREst;     /* the currently selected real estate */

extern word  currentIns;     /* the currently selected policy */

extern word  currentInv;     /* the currently selected investment */

extern word  currentFam;     /* the currently selected fam member */

extern word  numPages;		/* the number of printed pages in the inv display */

extern char *roomString;    /* declared here so it can move between objects */

extern char *pieceString;  /* declared here so it can move between objects */

extern char  lineBuffer[80];
/*
 ***************************************************************************
 *		Structure Definitions
 ***************************************************************************
 */

/* This is the structure of the DB mapblock  */
typedef struct {

    word	MS_numRooms;     /* the number of rooms */

} DBMapStruct;


/*
 * RoomStruct
 *
 * These structures contain pertinent information about a DB Group,
 * and are stored in an array in the DB Map item.
 */

typedef struct {

    DBGroup     RS_group;               /* DB Group ID for this room */
    DBItem      RS_head;                /* First item in the group */
    word        RS_size;                /* Number of items in this group */
    char        RS_name[MAX_NAME_LEN];  /* Name of this room */

} RoomStruct;

/*
 * PieceStruct
 *
 * These structures are stored in individual DB items.  They form a
 * linked list; the "next pointer" is, in this case, a DBItem in the
 * same group.
 *
 */

typedef struct {

    DBItem      PS_next;                /* Next item in this DB group */
    char        PS_name[MAX_NAME_LEN];  /* Name of this piece */
    char        PS_descrip[61];            /* Description text */
    char	PS_price[11];           /* Purchase price */
    char	PS_date[15];		/* acquisition date */
    char	PS_loc[20];			/* where purchased */
    char	PS_wrnty[61];			/* warranty info */

} PieceStruct;


/* This is the structure holding the household information...
 * and the init #'s for imp info since it is the VMMapBlock */
typedef struct {

    char	HS_strAddress[51];
    char	HS_cityStZip[51];
    char	HS_insComp[21];
    char	HS_insPolicy[31];
    char	HS_insAgent[41];
    char	HS_insAgentNum[26];
    char	HS_insClaimNum[26];
    word	HS_numCCards;    /* the number of credit cards */
    word	HS_numBAccts;    /* the number of bank accounts */
    word        HS_numREst;      /* the number of real estate properties */
    word        HS_numIns;      /* the number of insurance entries */
    word        HS_numInv;      /* the number of investment entries */
    word        HS_numFam;      /* the number of fam members */


} HouseStruct;

/* These are the structures holding the Professionals information
 */
typedef struct {

    char	ProS_name[41];
    char	ProS_firm[41];
    char	ProS_addr[51];
    char	ProS_city[51];
    char	ProS_phone[26];

} ProStruct;

/* These are the structures holding the credit card information
 */
typedef struct {

    char	CCS_name[31];
    char	CCS_acct[31];
    char	CCS_limit[16];
    char	CCS_bphon[26];
    char	CCS_lphon[26];

} CCardStruct;

/* These are the structures holding the bank accounts information
 */
typedef struct {

    char	BAS_bank[31];
    char	BAS_type[21];
    char	BAS_num[21];
    char	BAS_rate[11];
    char	BAS_amount[16];

} BAcctStruct;

/* These are the structures holding the real estate information
 */
typedef struct {

    char	RES_loc[31];
    char	RES_desc[41];
    char	RES_mtge[21];
    char	RES_appr[16];
    char	RES_basis[16];
    char	RES_assmt[16];
    char	RES_tax[16];

} REstStruct;

/* These are the structures holding the insurance information
 */
typedef struct {

    char	IS_type[21];
    char	IS_comp[31];
    char	IS_pol[21];
    char	IS_cov[21];
    char	IS_term[11];
    char	IS_prem[16];
    char	IS_agent[31];
    char	IS_phone[26];
    char	IS_notes[51];

} InsStruct;

/* These are the structures holding the investment information
 */
typedef struct {

    char	InvS_type[21];
    char	InvS_name[31];
    char	InvS_units[11];
    char	InvS_price[16];
    char	InvS_date[21];
    char	InvS_from[31];
    char	InvS_div[16];
    char	InvS_doc[31];
    char	InvS_notes[51];

} InvStruct;

/* These are the structures holding the family information
 */
typedef struct {

    char	FS_name[51];
    char	FS_SSAN[16];
    char	FS_driv[21];
    char	FS_dexp[21];
    char	FS_DOB[21];
    char	FS_hosp[21];
    char	FS_doc[31];
    char	FS_city[31];
    char	FS_loc[31];
    char	FS_will[31];
    char	FS_exec[41];

} FamStruct;

/* This is the structure holding the safe/box information
 */
typedef struct {

    char	SB_SDBnum[11];
    char	SB_SDBloc[31];
    char	SB_SDBrent[16];
    char	SB_SDBdue[21];
    char	SB_POBnum[11];
    char	SB_POBloc[31];
    char	SB_POBrent[16];
    char	SB_POBdue[21];
    char	SB_safeloc[31];
    char	SB_safecombo[21];

} SafBoxStruct;

