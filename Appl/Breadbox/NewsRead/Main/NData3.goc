@include <stdapp.goh>

#include <Ansi/string.h>
#include <Ansi/stdlib.h>

/* Compile options */
@include "options.goh"

@include "newsdata.goh"
@include "Localize/strings.goh"
#include "news.h"
#include "bucketha.h"
@include "utils.goh"
@include "errors.goh"


#ifdef DEBUG
void ECValidateGroupIndex(word groupIndex) ;
void ECValidateUnsubGroupIndex(word groupIndex) ;
void ECValidateGroupPtr(NewsgroupEntry *p_group) ;
void ECValidateThreadIndex(word threadIndex) ;
void ECValidateThreadPtr(ThreadEntry *p_thread) ;
void ECValidateArticleIndex(word articleIndex) ;
void ECValidateArticlePtr(ArticleEntry *p_article) ;
#else
#define ECValidateGroupIndex(index)
#define ECValidateUnsubGroupIndex(index)
#define ECValidateGroupPtr(p_group)
#define ECValidateThreadIndex(index)
#define ECValidateThreadPtr(p_thread)
#define ECValidateArticleIndex(index)
#define ECValidateArticlePtr(p_article)
#endif

extern MemHandle G_mapBlockMem ;
extern word G_lockMapBlockCount ;

extern NewsgroupEntry *G_group ;

#define INDEX_BAD   0xFFFFFFFF

/*-------------------------------------------------------------------------
 | Internal types:
 *-----------------------------------------------------------------------*/
#define MAX_REFERENCES_PER_LIST    8
typedef struct {
    byte MRL_numRef ;
    word  MRL_offsets[MAX_REFERENCES_PER_LIST] ;
    dword MRL_hash[MAX_REFERENCES_PER_LIST] ;
} T_msgRefList ;

/*-------------------------------------------------------------------------
 | Prototypes:
 *-----------------------------------------------------------------------*/
void ICreateDatabase(void) ;
dword ICreateHashForMsgID(byte *p_msgId) ;
void ICreateRefList(char *p_refLine, T_msgRefList *p_refList) ;
word IFindThreadWithReference(char *p_refLine, T_msgRefList *refList) ;
word IFindArticleWithReference(char *p_refLine, T_msgRefList *refList) ;
Boolean ICompareRefs(char *p_refLine, T_msgRefList *refList) ;
void IAppendText(optr text, BucketHugeArrayHandle linesArray,
            dword start, dword end) ;
void IAppendTextWithPrefix(optr text, char *p_prefix) ;
dword IArticleIDToIndex(NewsUniqueID articleID) ;
void IInsertHashEntry(ArticleEntry *p_article) ;
dword IFindArticleWithHash(
				char *p_string, 
				NewsUniqueID articleID,
				dword hashValue) ;
dword IFindFirstArticleWithHash(dword hashValue) ;
word IFindArticleInThread(NewsUniqueID articleID) ;
void ISelectThreadWithID(NewsUniqueID threadID) ;


/*-------------------------------------------------------------------------
 | Routine:  NewsDataStoreArticle
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This one is one of the most complex commands in the database.  This
 |    command finds where an article fits in the currently selected
 |    database group.
 |    NOTE:  When completed, the currently selected thread of where this
 |    article was placed is active.
 |
 | Inputs:
 |    ArticleEntry *p_article     -- Article to store
 |
 | Outputs:
 |    FALSE if article could not be stored due to storage limitations
 |    TRUE if article was stored
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
Boolean NewsDataStoreArticle(ArticleEntry *p_article)
{
    char *p_refLine ;
    char *p_msgId ;
    T_msgRefList refList ;
    word articleIndex ;
    word threadIndex ;
    ArticleReferenceEntry ref ;

	/* Ensure that we have room for the new article. */
	if (NewsDataGroupCountArticles() >= MAX_ARTICLES_PER_GROUP)
		return FALSE;

    /* First, we need to update the article's own hash value */
    p_msgId = NewsDataLockArticleMessageID(p_article) ;
    p_article->AE_hashValue = ICreateHashForMsgID((byte *)p_msgId) ;
    if (p_msgId)
        NewsDataUnlockHeaderLine(p_msgId) ;

    /* Ok, now we need the references line */
    p_refLine = NewsDataLockArticleHeaderLine(p_article, "References: ") ;
    ICreateRefList(p_refLine, &refList) ;

    /* Ok, we have all of our references */
    articleIndex = NEWS_DATA_ARTICLE_NONE;
	if (refList.MRL_numRef > 0)
	    articleIndex = IFindThreadWithReference(p_refLine, &refList) ;
    if (p_refLine)
        NewsDataUnlockHeaderLine(p_refLine) ;

    /* Either the article is found or not */
    if (articleIndex == NEWS_DATA_ARTICLE_NONE)  {
        /* Not found */
        /* Will need a new thread for its own article */
        NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
        threadIndex = NewsDataGroupCreateThread() ;
        NewsDataGroupSelectThread(threadIndex) ;
        articleIndex = 0 ;
    } else {
#if 0	// This is kinda silly.  Why insert a new message in the middle of 
	// an existing thread and force the user to go searching for it?
	// This would really only make sense if the article view showed
	// a true thread tree; but it doesn't. -dhunter 2/12/2000
        
	/* Insert AFTER that index */
        articleIndex++ ;
#endif
	/* Append to the thread */
	articleIndex = NewsDataThreadCountArticles();
    }

    /* Assign the thread to the article for backwards reference */
    p_article->AE_threadID = G_thread->TE_threadID ;

    /* Assign a new article ID and add to the list */
    p_article->AE_articleID =
        ref.AR_articleID =
            G_group->NE_nextArticleID++ ;
    if(!(p_article->AE_flags & AEF_READ))
    {
        G_group->NE_unread ++;
        if(G_thread)
        {
            G_thread->TE_unread ++;
            BucketHugeArrayDirty(G_thread) ;
        }
    }

    BucketHugeArrayDirty(G_group) ;
    BucketHugeArrayAppend(
        G_databaseVMFH,
        G_group->NE_articleArray,
        1,
        p_article) ;

    /* Now we have a thread and an article index to append the new */
    /* article after */
    BucketHugeArrayInsert(
        G_databaseVMFH,
        G_thread->TE_articleArray,
        1,
        articleIndex,
        &ref) ;

    /* But, before we are done, we need to add the article's hash value */
    /* to the complete hash lookup table (for fast threading) */
    IInsertHashEntry(p_article) ;

    /* Ok, now the current thread is this thread and the current newsgroup */
    /* is this newsgroup. */
	return TRUE;
}

/*-------------------------------------------------------------------------
 | Routine:  ICreateHashForMsgID                           * INTERNAL *
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Creates a searching hash from a string of type "< ... >" into a
 |    32 bit hashing value.  It may not be too unique, but it should
 |    be non-often.
 |
 | Inputs:
 |    byte *p_msgId               -- String to convert
 |
 | Outputs:
 |    dword                       -- New hashing value
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
dword ICreateHashForMsgID(byte *p_msgId)
{
    dword hash = 0 ;
    dword hash2 ;
    word count ;

    /* Got to have a pointer */
    if (p_msgId)  {
        /* Find < character */
        while ((*p_msgId) && (*p_msgId != '<'))
            p_msgId++ ;

        if (*p_msgId)  {
            hash2 = 0 ;
            count = 0 ;
            while ((*p_msgId) && (*p_msgId != '>'))  {
                hash2 <<= 8 ;
                hash2 += *p_msgId ;
                count++ ;
                if (count==4)  {
                    hash <<= 1 ;
                    hash ^= hash2 ;
                    hash2 = 0 ;
                    count = 0 ;
                }
                p_msgId++ ;
            }
            hash += hash2 ;
        }
    }

    return hash ;
}

/*-------------------------------------------------------------------------
 | Routine:  ICreateRefList
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Converts a string with a bunch of references into a list of hash
 |    values for faster comparison.
 |
 | Inputs:
 |    char *p_refLine             -- Line of text to create info
 |    T_msgRefList *p_refList     -- Structure to build up.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
void ICreateRefList(char *p_refLine, T_msgRefList *p_refList)
{
    word ref = 0 ;
    word i = 0 ;

    if (p_refLine)  {
        for (; ref<MAX_REFERENCES_PER_LIST; ref++)  {
            /* Find the first < */
            while (p_refLine[i])  {
                if (p_refLine[i] == '<')
                    break ;
                i++ ;
            }

            /* Stop if no more references */
            if (!p_refLine[i])
                break ;

            /* Mark the beginning of this reference at the < */
            /* and get the appropriate hash value */
            p_refList->MRL_offsets[ref] = i ;
            p_refList->MRL_hash[ref] = ICreateHashForMsgID((byte *)(p_refLine+i)) ;

            /* Skip to the starting < */
            i++ ;
        }
    }

    /* How many did we get? */
    p_refList->MRL_numRef = ref ;
}

/*-------------------------------------------------------------------------
 | Routine:  IFindThreadWithReference
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Search through all the threads of the current newsgroup and find
 |    a thread with a message that has the same reference as in the
 |    passed reference data.
 |
 | Inputs:
 |    char *p_refLine             -- Line of text to create info
 |    T_msgRefList *p_refList     -- Structure to build up.
 |
 | Outputs:
 |    word                        -- Index of currently selected thread
 |                                   of article in reference, or
 |                                   NEWS_DATA_ARTICLE_NONE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  2/12/2000 Reimplementation, cleaned up
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
word IFindThreadWithReference(char *p_refLine, T_msgRefList *refList)
{
    word foundArticle ;
    byte i = refList->MRL_numRef ;
//  word article ;
	word threadIndex ;

    foundArticle = NEWS_DATA_ARTICLE_NONE ;

    /* Start with the newest reference and work backwards until a match 
       is made */
    while (i-- > 0 && foundArticle == NEWS_DATA_ARTICLE_NONE)
    {
        foundArticle = IFindArticleWithHash(
            p_refLine+refList->MRL_offsets[i], 0,
            refList->MRL_hash[i]);
    }

	/* If the hash method fails, we must match up reference lines. */
    /* Go backwards through the threads.  I believe that commonly threads */
    /* are in order */
	if (foundArticle == NEWS_DATA_ARTICLE_NONE)
	{
		threadIndex = NewsDataGroupCountThreads() ;
		while (threadIndex > 0 && foundArticle == NEWS_DATA_ARTICLE_NONE)
		{
			NewsDataGroupSelectThread(-- threadIndex) ;
			foundArticle = IFindArticleWithReference(p_refLine, refList) ;
		}
	}

    return foundArticle ;
}

/*-------------------------------------------------------------------------
 | Routine:  IFindArticleWithReference
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Search through all the articles in the current thread and find
 |    an article with the same refernce information as in the list.
 |
 | Inputs:
 |    char *p_refLine             -- Line of text to create info
 |    T_msgRefList *p_refList     -- Structure to build up.
 |
 | Outputs:
 |    dword                        -- Index of currently selected thread
 |                                   of article in reference, or
 |                                   NEWS_DATA_ARTICLE_NONE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
word IFindArticleWithReference(char *p_refLine, T_msgRefList *refList)
{
    word foundArticle = NEWS_DATA_ARTICLE_NONE ;
    word artIndex ;

    artIndex = NewsDataThreadCountArticles() ;
    while (artIndex > 0)  {
        artIndex-- ;

        NewsDataThreadSelectArticle(artIndex) ;

        /* Compare the refs in the article with the one's we've */
        /* summarized. */
        if (ICompareRefs(p_refLine, refList) == TRUE)  {
            foundArticle = artIndex ;
            break ;
        }
    }

    /* Release the article */
    NewsDataThreadSelectArticle(NEWS_DATA_ARTICLE_NONE) ;

    return foundArticle ;
}

/*-------------------------------------------------------------------------
 | Routine:  ICompareRefs
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Compare the ref info with the currently selected article.
 |
 | Inputs:
 |    char *p_refLine             -- Line of text with full references
 |    T_msgRefList *p_refList     -- reference hash values (faster)
 |
 | Outputs:
 |    Boolean                     -- TRUE if any match.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    DEH  02/21/00  Adapted to modified IFindThreadWithReference
 |    LES  11/06/98  Created
 |
 *-----------------------------------------------------------------------*/
Boolean ICompareRefs(char *p_refLine, T_msgRefList *refList)
{
    word i ;
    char *p_line = NULL ;
    char *p_pos ;
    char *p_pos2;
    Boolean foundMatch = FALSE ;

    for (i=0; (i<refList->MRL_numRef); i++)  {

#if 0 /* Don't check hash values anymore, that method failed earlier. */
        /* Check the hash values first.  They must match or a value of */
        /* zero in the article hash value */
        if ((G_article->AE_hashValue == 0) ||
            (refList->MRL_hash[i] == G_article->AE_hashValue))  {
            /* We have a match by hash.  Let's look closer */
#endif
            if (!p_line)  {
                p_line = NewsDataLockArticleHeaderLine(
                             G_article,
                             "Message-ID: ") ;
                /* If no message-id, no matches ever */
                if (!p_line)
                    break ;
            }

            /* Do an exact comparison */
            if (p_line)  {
                /* Find the message's first < */
                p_pos = p_line ;
                while ((*p_pos) && (*p_pos != '<'))
                    p_pos++ ;

                /* Don't go if we don't have a '<' */
                if (*p_pos)  {
                    p_pos2 = p_refLine + refList->MRL_offsets[i] ;

                    /* Compare until last '>' */
                    while ((*p_pos) && (*p_pos != '>'))  {
                        if (*p_pos != *p_pos2)
                            break ;
                        p_pos++ ;
                        p_pos2++ ;
                    }

                    /* If we found the end, we must have a match */
                    if (*p_pos == '>')  {
                        foundMatch = TRUE ;
                        break ;
                    }
                }
            }
#if 0
        }
#endif
    }

    if (p_line)
        NewsDataUnlockHeaderLine(p_line) ;

    return foundMatch ;
}

/*-------------------------------------------------------------------------
 | Routine:  IArticleIDToIndex
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Search the array of articles for an entry that has the same unique
 |    article ID.
 |
 | Inputs:
 |    NewsUniqueID                -- ID to find
 |
 | Outputs:
 |    dword                       -- index to ID
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |
 *-----------------------------------------------------------------------*/
dword IArticleIDToIndex(NewsUniqueID articleID)
{
    dword foundIndex = INDEX_BAD ;
    dword start, end, middle, count ;
    word size ;
    ArticleEntry *p_pos ;
    NewsUniqueID compare ;

    /* Do a binary search. */
    start = 0 ;
    count = end = BucketHugeArrayGetCount(
              G_databaseVMFH,
              G_group->NE_articleArray) ;
    while (end > start)  {
        middle = (start+end)>>1 ;

        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_articleArray,
            middle,
            (void**)&p_pos,
            &size) ;
        compare = p_pos->AE_articleID ;
        BucketHugeArrayUnlock(p_pos) ;

        /* Compare the entry */
        if (articleID >= compare)  {
            if (articleID == compare)  {
                /* Exact match.  Quit here */
                foundIndex = middle ;
                break ;
            }

            /* After the middle position */
            start = middle+1 ;
        } else {
            /* Before the middle position */
            end = middle ;
        }
    }

    /* Check the last special case */
    if ((end > start) && (end < count))  {
        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_articleArray,
            end,
            (void**)&p_pos,
            &size) ;
        if (p_pos->AE_articleID == articleID)
            foundIndex = end ;
        BucketHugeArrayUnlock(p_pos) ;
    }

    return foundIndex ;
}

/*-------------------------------------------------------------------------
 | Routine:  IInsertHashEntry
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Search the array of article hash values for a sort position and add
 |    the article ID and hash value.
 |
 | Inputs:
 |    ArticleEntry *p_article     -- Article containing hash and id.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |
 *-----------------------------------------------------------------------*/
void IInsertHashEntry(ArticleEntry *p_article)
{
    ArticleHashEntry hashEntry ;
    dword start, end, middle ;
    word size ;
    ArticleHashEntry *p_pos ;
    dword compare ;

    /* Setup the structure */
    hashEntry.AHE_hashValue = p_article->AE_hashValue ;
    hashEntry.AHE_articleID = p_article->AE_articleID ;

    /* Do a binary search for the existing hash placement. */
    start = 0 ;
    end = BucketHugeArrayGetCount(
              G_databaseVMFH,
              G_group->NE_articleHashArray) ;
    while (end > start)  {
        middle = (start+end)>>1 ;

        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_articleHashArray,
            middle,
            (void*)&p_pos,
            &size) ;
        compare = p_pos->AHE_hashValue ;
        BucketHugeArrayUnlock(p_pos) ;

        /* Compare the entry */
        if (p_article->AE_hashValue >= compare)  {
            /* After the middle position */
            start = middle+1 ;
        } else {
            /* Before the middle position */
            end = middle ;
        }
    }

    /* Now insert before the end position */
    BucketHugeArrayInsert(
        G_databaseVMFH,
        G_group->NE_articleHashArray,
        1,
        end,
        &hashEntry) ;
}

/*-------------------------------------------------------------------------
 | Routine:  IFindArticleWithHash
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Given a hash value and reference string, find an article, select
 |    its thread, and return the index to the article in the thread.
 |
 | Inputs:
 |    char *p_string              -- Exact reference string
 |										if this is 0
 |										then look for articleID
 |										don't select the thread and
 |										return the index into the hash
 |	  NewsUniqueID				  -- articleID
 |    dword hashValue             -- Hash value of reference string
 |
 | Outputs:
 |    word                        -- Index within currend thread,
 |                                   or NEWS_DATA_ARTICLE_NONE
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |	  FR   27/01/99  Updated to return index into hash array
 |
 *-----------------------------------------------------------------------*/
dword IFindArticleWithHash(
				char *p_string, 
				NewsUniqueID articleID,
				dword hashValue)
{
    word foundArticle = NEWS_DATA_ARTICLE_NONE ;
    dword count ;
    dword index ;
    ArticleHashEntry *p_hash ;
    word ignoredSize ;
    ArticleEntry *p_article ;
    dword articleLookupIndex ;
    char *p_line ;
    char *p_pos ;
    char *p_pos2 ;
    Boolean foundMatch = FALSE ;

    index = IFindFirstArticleWithHash(hashValue) ;
    if (index != INDEX_BAD)  {
        count = BucketHugeArrayGetCount(
                    G_databaseVMFH,
                    G_group->NE_articleHashArray) ;
        while ((index < count) && (!foundMatch))  {
            BucketHugeArrayLock(
                         G_databaseVMFH,
                         G_group->NE_articleHashArray,
                         index,
                         (void**)&p_hash,
                         &ignoredSize) ;
            if (p_hash->AHE_hashValue != hashValue)  {
                /* Nope, past the hash values */
                BucketHugeArrayUnlock(p_hash) ;
                break ;
            } else {
				
				if(!p_string) {

					if(articleID == p_hash->AHE_articleID)
						foundMatch = TRUE ;

				} else {

					/* Hash values are same.  Compare strings */
					articleLookupIndex = IArticleIDToIndex(p_hash->AHE_articleID) ;
					BucketHugeArrayLock(
						G_databaseVMFH,
						G_group->NE_articleArray,
						articleLookupIndex,
						(void**)&p_article,
						&ignoredSize) ;
					p_line = NewsDataLockArticleHeaderLine(
								 p_article,
								 "Message-ID: ") ;
					if (p_line)  {
						/* Find the message's first < */
						p_pos = p_line ;
						while ((*p_pos) && (*p_pos != '<'))
							p_pos++ ;

						/* Don't go if we don't have a '<' */
						if (*p_pos)  {
							p_pos2 = p_string ;

							/* Compare until last '>' */
							while ((*p_pos) && (*p_pos != '>'))  {
								if (*p_pos != *p_pos2)
									break ;
								p_pos++ ;
								p_pos2++ ;
							}

							/* If we found the end, we must have a match */
							if (*p_pos == '>')  {
								foundMatch = TRUE ;
							}
						}

						NewsDataUnlockHeaderLine(p_line) ;
					}

					if (foundMatch)  {
						/* Ok, at this point, we have definitely found the */
						/* article */
						/* Select the thread that goes with this article */
						ISelectThreadWithID(p_article->AE_threadID) ;

						/* Now we need to know what article in the thread */
						foundArticle = IFindArticleInThread(
										   p_hash->AHE_articleID) ;
					}
		
					BucketHugeArrayUnlock(p_article) ;
				}
            }

            BucketHugeArrayUnlock(p_hash) ;

            index++ ;
        }
    }

	if(!p_string) {

		if(foundMatch)
			return(index  - 1) ;
		
		return(0xFFFFFFFF) ;
	}

	return foundArticle ;
}

/*-------------------------------------------------------------------------
 | Routine:  ISelectThreadWithID
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Find a thread based on its ID instead of its index and select it.
 |    If none is found, select nothing.
 |
 | Inputs:
 |    NewsUniqueID threadID
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |
 *-----------------------------------------------------------------------*/
void ISelectThreadWithID(NewsUniqueID threadID)
{
    dword foundIndex = INDEX_BAD ;
    dword start, end, middle, count ;
    word size ;
    ThreadEntry *p_pos ;
    NewsUniqueID compare ;

    /* Do a binary search. */
    start = 0 ;
    count = end = BucketHugeArrayGetCount(
              G_databaseVMFH,
              G_group->NE_threadArray) ;
    while (end > start)  {
        middle = (start+end)>>1 ;

        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_threadArray,
            middle,
            (void**)&p_pos,
            &size) ;
        compare = p_pos->TE_threadID ;
        BucketHugeArrayUnlock(p_pos) ;

        /* Compare the entry */
        if (threadID >= compare)  {
            if (threadID == compare)  {
                /* Exact match.  Quit here */
                foundIndex = middle ;
                break ;
            }

            /* After the middle position */
            start = middle+1 ;
        } else {
            /* Before the middle position */
            end = middle ;
        }
    }

    /* Check the last special case */
    if ((end > start) && (end < count))  {
        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_threadArray,
            end,
            (void**)&p_pos,
            &size) ;
        if (p_pos->TE_threadID == threadID)
            foundIndex = end ;
        BucketHugeArrayUnlock(p_pos) ;
    }

    /* Select that item (if found) */
    if (foundIndex != INDEX_BAD)  {
        NewsDataGroupSelectThread((word)foundIndex) ;
    } else {
        NewsDataGroupSelectThread(NEWS_DATA_THREAD_NONE) ;
    }
}

/*-------------------------------------------------------------------------
 | Routine:  IFindArticleInThread
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Find a matching article id in the list of articles under a thread.
 |
 | Inputs:
 |    NewsUniqueID articleID      -- Unique ID for article
 |
 | Outputs:
 |    word                        -- Index to article
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |
 *-----------------------------------------------------------------------*/
word IFindArticleInThread(NewsUniqueID articleID)
{
    word count ;
    ArticleReferenceEntry *p_ref ;
    word foundEntry = NEWS_DATA_ARTICLE_NONE ;
    word ignoredSize ;

    count = NewsDataThreadCountArticles() ;
    while (count)  {
        count-- ;

        BucketHugeArrayLock(
            G_databaseVMFH,
            G_thread->TE_articleArray,
            count,
            (void**)&p_ref,
            &ignoredSize) ;
        if (p_ref->AR_articleID == articleID)  {
            BucketHugeArrayUnlock(p_ref) ;
            foundEntry = count ;
            break ;
        }
        BucketHugeArrayUnlock(p_ref) ;
    }

    return foundEntry ;
}

/*-------------------------------------------------------------------------
 | Routine:  IFindFirstArticleWithHash
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Find the first hash value (because there might be several with the
 |    same hash) in the hash list for the given value.
 |
 | Inputs:
 |    dword hashValue             -- Hash value of article to find
 |
 | Outputs:
 |    dword                       -- First article, or INDEX_BAD if hash
 |                                   not found.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  11/13/98  Created
 |
 *-----------------------------------------------------------------------*/
dword IFindFirstArticleWithHash(dword hashValue)
{
    dword start, end, middle ;
    word size ;
    ArticleHashEntry *p_pos ;
    dword compare ;
    dword foundArticle = INDEX_BAD ;

    /* Do a binary search for the existing hash placement. */
    start = 0 ;
    end = BucketHugeArrayGetCount(
              G_databaseVMFH,
              G_group->NE_articleHashArray) ;
    while (end > start)  {
        middle = (start+end)>>1 ;

        /* Get the id of the entry */
        BucketHugeArrayLock(
            G_databaseVMFH,
            G_group->NE_articleHashArray,
            middle,
            (void**)&p_pos,
            &size) ;
        compare = p_pos->AHE_hashValue ;
        BucketHugeArrayUnlock(p_pos) ;

        /* Compare the entry */
        if (hashValue >= compare)  {
            /* After the middle position */
            start = middle+1 ;
            if (hashValue == compare)  {
                foundArticle = middle ;
                break ;
            }
        } else {
            /* Before the middle position */
            end = middle ;
        }
    }

    if (foundArticle != INDEX_BAD)  {
        /* Try walking backwards through the list to find the first */
        while (foundArticle > 0)  {
            BucketHugeArrayLock(
                G_databaseVMFH,
                G_group->NE_articleHashArray,
                foundArticle-1,
                (void**)&p_pos,
                &size) ;
            compare = p_pos->AHE_hashValue ;
            BucketHugeArrayUnlock(p_pos) ;

            /* If different hash value, stop */
            if (compare != hashValue)
                break ;

            foundArticle-- ;
            break ;
        }
    }

    return foundArticle ;
}
