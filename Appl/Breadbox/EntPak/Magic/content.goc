//
//  Projekt:	MagicBoard
//
//  Datei:      vis/content.goc
//
//  Autor:      Jirka Kunze
//


@include "magic.goh"
@include "externs.goh"

@classdecl	MagicContentClass;

const word playSoundBuf[] = {     /* from concen match made sound */
	SSE_CHANGE,             0, IP_TINKLE_BELL, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSE_GENERAL,            GE_SET_TEMPO, 16,
	SSE_VOICE_ON,           0, LOW_A, DYNAMIC_MF,
	SSDTT_TICKS,            SIXTEENTH,
	SSE_VOICE_OFF,          0,
	SSE_VOICE_ON,           0, MIDDLE_A, DYNAMIC_MF,
	SSDTT_TICKS,            SIXTEENTH,
	SSE_VOICE_OFF,          0,
	SSE_VOICE_ON,           0, HIGH_A, DYNAMIC_MF,
	SSDTT_TICKS,            SIXTEENTH,
	SSE_VOICE_OFF,          0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word winSoundBuf[] = {     /* from blackjack win sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_C, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_E, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            15,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            8,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            25,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word loseSoundBuf[] = {     /* from blackjack lose sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_F, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D_b, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

//
//  Methoden f�r MagicContentClass
//

/*-------------------------------------------------------------------------*/
void MagicInitSound(void)
{

	 SoundAllocMusic(playSoundBuf, 1, &playSound);
	 SoundAllocMusic(winSoundBuf, 1, &winSound);
	 SoundAllocMusic(loseSoundBuf, 1, &loseSound);
}
/*-------------------------------------------------------------------------*/
void MagicPlaySound(MemHandle soundHandle)
{
 word 		tempo = 8;


	 if (g_sound == SOUND_SYSTEM)
		 /* this routine abides by syst sound setting */
		 UserStandardSound(SST_CUSTOM_SOUND, soundHandle, 1);
	 else if (g_sound == SOUND_OFF)  return;
	 else {
		 if (soundHandle == playSound) tempo = 16;
		 /* this routine doesn't check syst sound setting -
		  * but we need to supply the tempo */
		 SoundPlayMusic(soundHandle, SP_GAME, tempo, EOSF_UNLOCK);
		 }
}
/*-------------------------------------------------------------------------*/

//
//  void MSG_VIS_DRAW(DrawFlags drawFlags, GStateHandle gstate)
//
@method MagicContentClass, MSG_VIS_DRAW
{
    @callsuper();
    @send @visChildren::MSG_VIS_DRAW(drawFlags, gstate); 
}

//
//  void MSG_MAGICCONTENT_SET_BOARD()
//
@method MagicContentClass, MSG_MAGICCONTENT_SET_BOARD
{
    optr            piece;
    MemHandle       magicBlock;
    word            colum, line, board;

    // vernichte alle Childrens
    @send @visChildren::MSG_VIS_DESTROY(VUM_NOW);

    // Handle aus sich selbst erzeugen
    magicBlock = OptrToHandle(oself);

    // erfrage Boardgr��e und setze dementsprechende Content und View Gr��e
    board = @call MagicOptionsMenuBoardList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    @call self::MSG_VIS_SET_SIZE(10+(board*MBP_WIDTH_SPACE), 10+(board*MBP_HEIGHT_SPACE));
    @call MagicView::MSG_GEN_VIEW_SET_DOC_BOUNDS(10+(board*MBP_WIDTH_SPACE), 10+(board*MBP_HEIGHT_SPACE),0 ,0);

    // erzeuge colum * line Piece-Objecte
    for(colum = 0; colum < board; colum++)
    {
	   for(line = 0; line < board; line++)
        {
            // Zeiger auf neuen Piece erzeugen
            piece = ConstructOptr(magicBlock,
                    ObjInstantiate(OptrToHandle(oself), &MagicPieceClass));


            // f�ge Children hinzu
            @call self::MSG_VIS_ADD_CHILD(piece, CCO_LAST);

            // setze Gr��e und Position des Children
            @call piece::MSG_VIS_SET_POSITION(5 +(colum*MBP_WIDTH_SPACE), 5 +(line*MBP_HEIGHT_SPACE));
            @call piece::MSG_VIS_SET_SIZE(MBP_WIDTH, MBP_HEIGHT);
            @call piece::MSG_MAGICPIECE_SET_POSITION(colum, line);
        }
    }

    // mische Board neu
    @call self::MSG_MAGICCONTENT_MIX_BOARD();
}

//
//  void MSG_MAGICCONTENT_MIX_BOARD()
//
@method MagicContentClass, MSG_MAGICCONTENT_MIX_BOARD
{
    word            board,level, colum, line, i;
	char            buffer[25];
    double			rand;
    WindowHandle    win;
    GStateHandle    gstate;

    win = @call MagicView::MSG_GEN_VIEW_GET_WINDOW();
    gstate = GrCreateState(win);

    // stope Timer
    TimerStop(pself->MCI_timerH, pself->MCI_timerID);
    pself->MCI_timerH = NullHandle;

    // erfrage Boardgr��e und Level
    board = @call MagicOptionsMenuBoardList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    level = @call MagicOptionsMenuLevelList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	 /* set the level display */
	 MemLock(OptrToHandle(@LevelStr));
	 switch (level) {
		 case LF_4:
			 sprintf(buffer, LMemDeref(@LevelStr), LMemDeref(@BeginStr));
			 break;
		 case LF_3:
			 sprintf(buffer, LMemDeref(@LevelStr), LMemDeref(@InterStr));
			 break;
		 case LF_2:
			 sprintf(buffer, LMemDeref(@LevelStr), LMemDeref(@AdvStr));
			 break;
		 case LF_1:
			 sprintf(buffer, LMemDeref(@LevelStr), LMemDeref(@ExpertStr));
			 break;
		 }
	 MemUnlock(OptrToHandle(@LevelStr));
	 @send MagicLevelText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);

	 // setze alle Childrens zur�ck
    @send @visChildren::MSG_MAGICPIECE_CLEAR();

    // setze Score und Attemp Counter zur�ck, zeichne Statuszeile neu
    pself->MCI_score = (board + level) * 15;
    pself->MCI_attempt = 0;
	 sprintf(buffer, "%d", pself->MCI_score);
	 @send MagicScoreText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);
	 sprintf(buffer, "%d", pself->MCI_attempt);
    @send MagicAttemptText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);

    for(i = 0; i < level + board; i++)
    {

		  // erzeuge zwei Zufallszahlen
        rand = board;
        FloatIEEE64ToGeos80(&rand);
        FloatRandomN();
        FloatGeos80ToIEEE64(&rand);
        colum = (word) rand;

        rand = board;
        FloatIEEE64ToGeos80(&rand);
        FloatRandomN();
        FloatGeos80ToIEEE64(&rand);
        line = (word) rand;

        // f�hre Computerzug mit den erzeugten Zufallszahlen aus
        @send @visChildren::MSG_MAGICPIECE_COMPUTER_SET(colum, line);
    }

    // Magiccontent neu zeichnen
    @call self::MSG_VIS_DRAW(0, gstate);
    GrDestroyState(gstate);

}

//
//  void MSG_MAGICCONTENT_USER_ACTION()
//
@method MagicContentClass, MSG_MAGICCONTENT_USER_ACTION
{
    WindowHandle    win;
    GStateHandle    gstate;
    Boolean         gameEnd = TRUE;
    char            buffer[20];
    word            level;

    win = @call MagicView::MSG_GEN_VIEW_GET_WINDOW();
    gstate = GrCreateState(win);

    // erfrage Boardgr��e
    level = @call MagicOptionsMenuLevelList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    level = level * 5;

    // teste ob Spiel gel�st
    @send @visChildren::MSG_MAGICPIECE_TEST(&gameEnd);
    if(!(gameEnd))
    {
		  MagicPlaySound(playSound);

        // f�hre Spielerzug aus und zeichne Board neu
        @send @visChildren::MSG_MAGICPIECE_USER_SET(colum, line);
        @call self::MSG_VIS_DRAW(0, gstate); 

        // falls notwendig starte Timer
        if(!(pself->MCI_timerH))
            pself->MCI_timerH = TimerStart(TIMER_EVENT_CONTINUAL,
                                oself, 600 - level, MSG_MAGICCONTENT_TIME_OVER, 600 - level, &pself->MCI_timerID);

        // berechne Score und Attempt Counter neu
        pself->MCI_attempt++;
		  sprintf(buffer, "%d", pself->MCI_attempt);
		  @send MagicAttemptText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);
        pself->MCI_score = pself->MCI_score - 5;

        // wenn Punkte = 0 ist das Spiel zu Ende
        if(pself->MCI_score <= 0)
        {
            // stope Timer
            TimerStop(pself->MCI_timerH, pself->MCI_timerID);
            pself->MCI_timerH = NullHandle;

				MagicPlaySound(loseSound);

				// berechne Score neu
            pself->MCI_score = 0;
				sprintf(buffer, "%d", pself->MCI_score);
				@send MagicScoreText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);
            @call MagicGameEndDialog::MSG_GEN_INTERACTION_INITIATE();
		  } else {

            //  Score Counter neu anzeigen
				sprintf(buffer, "%d", pself->MCI_score);
				@send MagicScoreText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);

            // teste ob Spiel gel�st
            gameEnd = TRUE;
            @send @visChildren::MSG_MAGICPIECE_TEST(&gameEnd);
            if(gameEnd)
            {
                // stope Timer
                TimerStop(pself->MCI_timerH, pself->MCI_timerID);
                pself->MCI_timerH = NullHandle;

					 MagicPlaySound(winSound);
					 // gebe Dialogbox aus
				 //	 @call MagicNameQuestionDialog::MSG_GEN_INTERACTION_INITIATE();
			 //		 @send self::MSG_MAGICCONTENT_CHECK_HIGH_SCORES();
					 @send HighScoreControl::MSG_HIGH_SCORE_ADD_SCORE(
												  (dword) pself->MCI_score, 0);

            }
        }
	 }
    GrDestroyState(gstate);
}

//
//  void MSG_MAGICCONTENT_TIME_OVER()
//
@method MagicContentClass, MSG_MAGICCONTENT_TIME_OVER
{
    char    buffer[20];

    // setze Punktez�hler herunter
    pself->MCI_score = pself->MCI_score - 10;

    // wenn Punkte = 0 ist das Spiel zu Ende
    if(pself->MCI_score <= 0)
    {

        // stope Timer
        TimerStop(pself->MCI_timerH, pself->MCI_timerID);
        pself->MCI_timerH = NullHandle;

		  MagicPlaySound(loseSound);

		  //  Score Counter neu anzeigen
        pself->MCI_score = 0;
		  sprintf(buffer, "%d", pself->MCI_score);
		  @send MagicScoreText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);
        @call MagicGameEndDialog::MSG_GEN_INTERACTION_INITIATE();
    }

    // Score Counter neu anzeigen
	 sprintf(buffer, "%d", pself->MCI_score);
	 @send MagicScoreText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW);
}

//
//  void MSG_MAGICCONTENT_RESTORE_TIMER()
//
@method MagicContentClass, MSG_MAGICCONTENT_RESTORE_TIMER
{
    word    level;

    level = @call MagicOptionsMenuLevelList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    level = level * 5;

    // restouriere Timer
    if(pself->MCI_timerH != NullHandle)
    {
        pself->MCI_timerH = TimerStart(TIMER_EVENT_CONTINUAL,   oself, 
               600 - level, MSG_MAGICCONTENT_TIME_OVER, 600 - level, &pself->MCI_timerID);
    }
}

//
//  void MSG_MAGICCONTENT_STOP_TIMER()
//
@method MagicContentClass, MSG_MAGICCONTENT_STOP_TIMER
{
    if(pself->MCI_timerH != NullHandle)
    {
	TimerStop(pself->MCI_timerH, pself->MCI_timerID);
    	pself->MCI_timerH = NullHandle;
    }
}


