/***************************************************************************
 *                                                                         *
 *  Secret Code v1.0                                                       *
 *                                                                         *
 ***************************************************************************/


/***************************************************************************
 *		Include files
 ***************************************************************************/

@include <stdapp.goh>
@include <Objects/gViewCC.goh>
#include <gstring.h>
@include <spool.goh>
@include <Objects/clipbrd.goh>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include "pics.goh"
@include "appicons.goh"
@include "winlose.goh"
#include <initfile.h>
@include <game.goh>
#include <sound.h>

byte TrySelection(word posx, word posy, word posx2, word posy2) ;
Boolean CheckSelection(word posx, word posy, word posx2, word posy2) ;
void RemoveSelectAndChoices(void) ;
Boolean CheckNotAbleToMove(void) ;
void FigurePoints(void) ;

#define INITIAL_SIZE 10

#define SECRET_CODE_SIZE_SMALL 0
#define SECRET_CODE_SIZE_MEDIUM 1
#define SECRET_CODE_SIZE_LARGE 2

#define SHOW_ON_STARTUP   1

word size_table[3][2] = {
    {8,4},
    {11,5},
    {16,6}
} ;

byte secret_code_field[168] ;
byte play_line            = 0 ;
word select_x             = 0xFF ;
word select_y             = 0xFF ;
byte game_mode            = 0 ;
word size                 = INITIAL_SIZE ;
byte size_x               = 4 ;
byte time_sec             = 0 ;
byte time_min             = 0 ;
byte time_hour            = 0 ;
word timer_id ;
word timer_handle ;
byte selection_size       = 100 ;
word player_score         = 100 ;
Boolean timer_going       = FALSE ;

char secret_code_state_file[25] = "Secret Code State" ;

char secret_code_path[20] = "Game" ;
char secret_code_relativePath[] = "." ;
word secret_code_drive = SP_USER_DATA ;

optr ColorPictures[] = {
    @HolePicture,
    @BlackPicture,
    @WhitePicture,
    @BluePicture,
    @RedPicture,
    @YellowPicture,
    @GreenPicture
} ;


#define SQUARE_SIZE           17

#define quick_secret_code(posx, posy)  ((posx)+((posy)*8))

#define DOC_WIDTH             10*SQUARE_SIZE
#define DOC_HEIGHT            INITIAL_SIZE*SQUARE_SIZE

#define SOUND_ON 1
#define SOUND_OFF 2
#define SOUND_SYSTEM 3

const word shapeSoundBuf[] = {     /* from solitaire flip card sound */
	ChangeEnvelope(0, IP_SHAKUHACHI, IT_STANDARD_TABLE),
 	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	VoiceOn(0, HIGH_B, DYNAMIC_F),
	DeltaTick(3),
	VoiceOff(0),
	General(GE_END_OF_SONG)};

const word badGuessSoundBuf[] = {     /* from hearts wrong play sound */
	SSE_CHANGE,             0, IP_CELLO, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_G, DYNAMIC_MF,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word winSoundBuf[] = {     /* from blackjack win sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_C, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_E, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            15,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            8,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            25,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word loseSoundBuf[] = {     /* from blackjack lose sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_F, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D_b, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

MemHandle	shapeSound, badGuessSound, winSound, loseSound;
word	g_sound;


/***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************/

    /*---------------------------------------------------------------------*/
    @class SecretCodeProcessClass, GenProcessClass ;
        @message void MSG_VIEW_INVALIDATE() ;
        @message void MSG_VIEW_SECRET_CODE_NEW() ;
        @message void MSG_SECRET_CODE_COMPLETED() ;
        @message void MSG_SECRET_CODE_COMPLETED2() ;
        @message void MSG_SECRET_CODE_REDRAW_SQUARE(sword pos_x, sword pos_y) ;
        @message void MSG_SECRET_CODE_UPDATE_SCORE() ;
		  @message void MSG_SECRET_CODE_DID_NOT_WIN() ;
        @message void MSG_SECRET_CODE_DID_NOT_WIN2() ;
        @message void MSG_SECRET_CODE_GUESS() ;
        @message void MSG_SECRET_CODE_VIEW_BALLS() ;
        @message void MSG_SECRET_CODE_VIEW_SHAPES() ;
		  @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SECRET_CODE_SIZE_CHANGED;
		  @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_SECRET_CODE_SOUND_CHANGED;
	 @endc

    @classdecl SecretCodeProcessClass, neverSaved ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class SecretCodeTimerClass, GenGlyphClass ;
        @message void MSG_SECRET_CODE_CHANGE_TIME() ;
        @message void MSG_SECRET_CODE_RESET_TIMER() ;
        @message void MSG_SECRET_CODE_TIMER_CHANGE() ;
    @endc

    @classdecl SecretCodeTimerClass;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class SecretCodeViewClass, GenViewClass ;
    @endc

    @classdecl SecretCodeViewClass;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class SecretCodeContentClass, VisContentClass ;
    @endc

    @classdecl SecretCodeContentClass ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class SecretCodeAppClass, GenApplicationClass ;
    @endc

    @classdecl SecretCodeAppClass ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class SecretCodePauseInterClass, GenInteractionClass ;
    @endc

    @classdecl SecretCodePauseInterClass ;
    /*---------------------------------------------------------------------*/

/***************************************************************************
 *		UI Objects
 ***************************************************************************/


@start	AppResource ;
    /*---------------------------------------------------------------------*/
    @object SecretCodeAppClass SecretCodeApp = {
        GI_visMoniker = list { @SecretCodeTextMoniker,
                               @Moniker0,
                               @Moniker1,
                               @Moniker4}
        GI_comp       = @SecretCodePrimary;
        gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS)
                      = @SecretCodePrimary;
		  gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST)
							 = @HighScoreControl; 
    }
    /*---------------------------------------------------------------------*/
    @visMoniker SecretCodeTextMoniker =
        "Secret Code" ;
    /*---------------------------------------------------------------------*/
@end	AppResource



/*=========================================================================*/



@start	Interface ;		/* this resource is for misc UI objects */
    /*---------------------------------------------------------------------*/
    @object GenPrimaryClass SecretCodePrimary  = {
		  GI_comp             = @SecretCodeViewGroup,
										@SecretCodeGameMenu,
										@SecretCodeEditMenu,
										@SecretCodeOptionsMenu,
										@SecretCodeDialogs,
										@QTipsDialogBox;
	/*ATTR_GEN_HELP_CONTEXT = "TOC";*/
	HINT_PRIMARY_NO_HELP_BUTTON;
        HINT_SIZE_WINDOW_AS_DESIRED ;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_CENTER_WINDOW;
		  HINT_PRIMARY_NO_FILE_MENU ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeViewGroup = {
		  GI_comp = @SecretCodeViewTopGroup,
						@SecretCodePlayingField ;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_NO_WIDER_THAN_CHILDREN_REQUIRE;
		  HINT_NO_TALLER_THAN_CHILDREN_REQUIRE;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeViewTopGroup = {
		  GI_comp = @SecretCodeTopLeft,
				  //		@SecretCodeSpacer,
						@SecretCodeTopRight;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_CENTER_CHILDREN_VERTICALLY ;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
	 }
	 /*---------------------------------------------------------------------*/
 /*	 @object GenInteractionClass SecretCodeSpacer = {
		  HINT_MINIMUM_SIZE = { SST_PIXELS | 40, 0, 0 } ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeTopLeft = {
		  GI_comp = @SecretCodeQuickNew,
						@SecretCodeTimerGroup ;
	  //	  HINT_CENTER_CHILDREN_HORIZONTALLY ;
	  //	  HINT_CENTER_CHILDREN_VERTICALLY ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass SecretCodeQuickNew = {
		  GI_visMoniker   = 'N', "New" ;
		  GTI_destination = process ;
		  GTI_actionMsg   = MSG_VIEW_SECRET_CODE_NEW ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass SecretCodeGuessTrigger = {
		  GI_visMoniker = 'G', "Guess!" ;
		  GTI_destination = process ;
		  GTI_actionMsg   = MSG_SECRET_CODE_GUESS ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeTopRight = {
		  GI_comp = @SecretCodeGuessTrigger,
						@SecretCodeScoreGroup ;
            HINT_RIGHT_JUSTIFY_CHILDREN;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeTimerGroup = {
		  GI_comp = @SecretCodeTimerTitle,
						@SecretCodeTimer;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
	 }
	 /*---------------------------------------------------------------------*/
	 @object SecretCodeTimerClass SecretCodeTimerTitle = {
		  GI_visMoniker    = "Time: " ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object SecretCodeTimerClass SecretCodeTimer = {
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeScoreGroup = {
		  GI_comp = @SecretCodeScoreTitle,
						@SecretCodeScore;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenGlyphClass SecretCodeScoreTitle = {
		  GI_visMoniker    = "Score: " ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenGlyphClass SecretCodeScore = {
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodePlayingField = {
        GI_comp = @SecretCodeView, @SecretCodeLostFocusGlyph ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
	  //   HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
     //   HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
		  HINT_MINIMUM_SIZE = { SST_PIXELS | (8*SQUARE_SIZE),
										SST_PIXELS | (6*SQUARE_SIZE),
										0 } ;
		  HINT_DEFAULT_FOCUS ;
        HINT_DEFAULT_TARGET ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SecretCodeLostFocusGlyph = {
        GI_comp = @SecretCodeLostFocusGroup ;
        GI_states = @default & (~GS_USABLE) ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object SecretCodePauseInterClass SecretCodeLostFocusGroup = {
        GI_comp = @SecretCodeLostFocusGlyph1,
                  @SecretCodeLostFocusGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass SecretCodeLostFocusGlyph1 = {
        GI_visMoniker = "Game" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass SecretCodeLostFocusGlyph2 = {
        GI_visMoniker = "Paused" ;
    }
    /*---------------------------------------------------------------------*/
    @object SecretCodeViewClass SecretCodeView = {
        GVI_attrs      = @default |
                         GVA_CONTROLLED |
								 GVA_SAME_COLOR_AS_PARENT_WIN /*|
								 GVA_NO_WIN_FRAME*/;
        GVI_horizAttrs   = @default |
					  GVDA_NO_SMALLER_THAN_CONTENT |
					  GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_vertAttrs    = @default |
					  GVDA_NO_SMALLER_THAN_CONTENT |
                           GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_content      = @SecretCodeContent;
        GVI_docBounds    = {0, 0, DOC_WIDTH, DOC_HEIGHT};
        HINT_DEFAULT_TARGET;
        HINT_DEFAULT_FOCUS;
	 }
	 /*---------------------------------------------------------------------*/
	 @object SecretCodeContentClass SecretCodeContent = {
		  VCNI_view         = SecretCodeView ;
		  VCNI_attrs        = @default |
									 VCNA_LARGE_DOCUMENT_MODEL |
									 VCNA_ACTIVE_MOUSE_GRAB_REQUIRES_LARGE_EVENTS ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeGameMenu = {
		  GI_comp = @SecretCodeNewOption,
						@SCodeQTipsTrigger,
						@HighScoreControl;
		  GI_visMoniker = 'G', "Game" ;
        GII_visibility = GIV_POPUP ;
        ATTR_GEN_INTERACTION_GROUP_TYPE
                       = (GIGT_FILE_MENU) ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass SecretCodeNewOption = {
		  GI_visMoniker   = 'N', "New Game" ;
		  GTI_destination = process ;
		  GTI_actionMsg   = MSG_VIEW_SECRET_CODE_NEW ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass SCodeQTipsTrigger = {
		  GI_visMoniker   = 'Q', "Quick Tips" ;
		  GTI_destination = @QTipsDialogBox ;
		  GTI_actionMsg   = MSG_GEN_INTERACTION_INITIATE ;
		  HINT_TRIGGER_BRINGS_UP_WINDOW;
    }
	 /*---------------------------------------------------------------------*/
	 @object HighScoreClass HighScoreControl = {
		  HSI_fileName = "SCode High Scores";
		  HSI_creator = {"SCod", 16431};
		  HSI_highScoreTitle = "Secret Code High Scores";
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeEditMenu = {
		  GI_comp = @SecretCodeCopyToClipboard ;
		  GII_visibility = GIV_POPUP ;
		  ATTR_GEN_INTERACTION_GROUP_TYPE
							  = (GIGT_EDIT_MENU) ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass SecretCodeCopyToClipboard = {
		  GI_visMoniker   = 'C', "Copy Game" ;
		  GTI_destination = process ;
		  GTI_actionMsg   = MSG_META_CLIPBOARD_COPY ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeOptionsMenu = {
		  GI_comp = @SecretCodeSoundOpt, @SecretCodeSizeOption;
		  GII_visibility = GIV_POPUP ;
		  ATTR_GEN_INTERACTION_GROUP_TYPE
							  = (GIGT_OPTIONS_MENU) ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeSoundOpt = {
		  GI_visMoniker = 'S', "Sound" ;
		  GI_comp = @SoundGroup;
		  GII_visibility = GIV_POPUP;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenItemGroupClass SoundGroup = {
		  GI_comp          = @SoundOn,
									@SoundOff,
									@SystemPref ;
		  GIGI_selection   = SOUND_SYSTEM ;
        GIGI_destination = process ;
		  GIGI_applyMsg = MSG_SECRET_CODE_SOUND_CHANGED ;
    }
    /*---------------------------------------------------------------------*/
	 @object GenItemClass SoundOn = {
		  GI_visMoniker = 'S', "Sound On" ;
		  GII_identifier = SOUND_ON ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenItemClass SoundOff = {
		  GI_visMoniker = 'O', "Sound Off" ;
		  GII_identifier = SOUND_OFF ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenItemClass SystemPref = {
		  GI_visMoniker = 'P', "Use System Preference" ;
		  GII_identifier = SOUND_SYSTEM ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass SecretCodeDialogs = {
		  GI_comp = @SecretCodeCompletedBox,
						@SecretCodeWrongCompletionBox;
		  GII_type = GIT_ORGANIZATIONAL ;
		  GII_visibility = GIV_DIALOG ;
		  GII_attrs = @default | GIA_NOT_USER_INITIATABLE ;
	 }
	 /*---------------------------------------------------------------------*/
	 @chunk char SecretCodeNewGameMsg[] = "Changing this option will end the current game and begin a new one.  Are you sure you want to do this?" ;
	 /*---------------------------------------------------------------------*/
@end Interface

@start InterfaceOptions ;
	 /*---------------------------------------------------------------------*/
    @object GenInteractionClass SecretCodeSizeOption = {
		  GI_visMoniker   = 'L', "Level" ;
        GII_visibility  = GIV_POPUP ;
        GI_comp         = @SecretCodeSizeGroup ;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemGroupClass SecretCodeSizeGroup = {
        GI_comp          = @SecretCodeSizeSmall, @SecretCodeSizeMedium, @SecretCodeSizeLarge ;
        GIGI_selection   = SECRET_CODE_SIZE_SMALL ;
        GIGI_destination = process ;
        GIGI_applyMsg = MSG_SECRET_CODE_SIZE_CHANGED;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SecretCodeSizeSmall = {
		  GI_visMoniker = '1', "1. Beginner" ;
        GII_identifier = SECRET_CODE_SIZE_SMALL;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SecretCodeSizeMedium = {
		  GI_visMoniker = '2', "2. Intermediate" ;
        GII_identifier = SECRET_CODE_SIZE_MEDIUM;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass SecretCodeSizeLarge = {
        GI_visMoniker = '3', "3. Advanced" ;
        GII_identifier = SECRET_CODE_SIZE_LARGE;
    }
    /*---------------------------------------------------------------------*/
@end InterfaceOptions


@start InterfaceLose ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass LoserGlyph = {
        GI_comp = @LoserLoseGlyph,
                  @LoserGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass LoserLoseGlyph = {
        GI_visMoniker = list { @LoseMoniker } ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass LoserGlyph2 = {
        GI_visMoniker = "Sorry, try again" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SecretCodeWrongCompletionBox = {
        GI_visMoniker   = "Oooops!" ;
        GII_visibility  = GIV_DIALOG ;
        GII_type        = GIT_NOTIFICATION ;
        GII_attrs       = @default                         |
                          GIA_INITIATED_VIA_USER_DO_DIALOG |
                          GIA_MODAL                        |
                          GIA_NOT_USER_INITIATABLE         ;
        GI_comp         = @LoserGlyph ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
@end InterfaceLose




@start InterfaceWin ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass WinnerGlyph = {
        GI_comp = @WinnerGlyph1,
                  @WinnerWinGlyph,
                  @WinnerGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerGlyph1 = {
        GI_visMoniker = "CONGRATULATIONS!" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerWinGlyph = {
        GI_visMoniker = list { @WinMoniker } ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerGlyph2 = {
        GI_visMoniker = "You win!" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass SecretCodeCompletedBox = {
        GI_visMoniker   = "We have a winner!" ;
        GII_visibility  = GIV_DIALOG ;
        GII_type        = GIT_NOTIFICATION ;
        GII_attrs       = @default                         |
                          GIA_INITIATED_VIA_USER_DO_DIALOG |
                          GIA_MODAL                        |
                          GIA_NOT_USER_INITIATABLE         ;
        GI_comp         = @WinnerGlyph ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
@end InterfaceWin


@start QTipsResource;
@include "Art/qTip1.goh"
@include "Art/qTip2.goh"
@include "Art/qTip3.goh"

	 @object GenInteractionClass QTipsDialogBox = {
		  GI_visMoniker = "Secret Code Quick Tips";
		  GI_comp = @GoalText,
						@QuickTipsGroup,
						@ShowOnStartupGroup,
						@OKTipsButton;
		  GII_visibility = GIV_DIALOG ;
		  GII_attrs = @default | GIA_MODAL | GIA_NOT_USER_INITIATABLE;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  /*ATTR_GEN_HELP_CONTEXT = "TOC";*/
	 }


	 @object GenTextClass GoalText = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "The goal of the game is to guess the pattern of shapes that the computer has chosen as the Secret Code.  The computer's Secret Code is hidden under the top row of questions marks."; /* You must try to guess the code before you reach the top of the game field.";*/
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
	 }

	 @object GenBooleanGroupClass ShowOnStartupGroup = {
		  GI_comp = @ShowOnStartupBoolean;
	 }

	 @object GenBooleanClass ShowOnStartupBoolean = {
		  GI_visMoniker = 'S', "Show this Dialog box when Secret Code starts";
		  GBI_identifier = SHOW_ON_STARTUP;
	 }

	 @object GenTriggerClass OKTipsButton = {
		  GI_visMoniker   = 'O', "OK";
        GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
		  HINT_SEEK_REPLY_BAR;
		  HINT_DEFAULT_DEFAULT_ACTION;
	 }


	 @object GenInteractionClass QuickTipsGroup = {
		  GI_comp = @QTip1,
						@QTip2,
						@QTip3;
	 }

	 @object GenInteractionClass QTip1 = {
		  GI_comp = @QTip1GlyphHolder, @QTip1Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }

	 @object GenInteractionClass QTip1GlyphHolder = {
		  GI_comp = @QTip1Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 120, 0,0};
        /* ^^^ is based on the width of the widest icon */
	 }

	 @object GenGlyphClass QTip1Glyph = {
		  GI_visMoniker = list { @QTip1Moniker };
	 }

	 @object GenTextClass QTip1Text = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "Starting at the bottom row click each spot to select a shape.  To change the shape, click the same spot again."; /* There are 6 shapes to choose from, they are (in order) the; square, circle, diamond, triangle, hourglass and star."; */
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 325, 0, 0};
	 }

	 @object GenInteractionClass QTip2 = {
		  GI_comp = @QTip2GlyphHolder, @QTip2Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }

	 @object GenInteractionClass QTip2GlyphHolder = {
		  GI_comp = @QTip2Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 120, 0,0};
	 }

	 @object GenGlyphClass QTip2Glyph = {
		  GI_visMoniker = list { @QTip2Moniker };
	 }

	 @object GenTextClass QTip2Text = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "When you have selected your row of shapes click the Guess! Button.  The computer will then give you hints based on your guess.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 325, 0, 0};
	 }

	 @object GenInteractionClass QTip3 = {
		  GI_comp = @QTip3GlyphHolder, @QTip3Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }

	 @object GenInteractionClass QTip3GlyphHolder = {
		  GI_comp = @QTip3Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 120, 0,0};
	 }

	 @object GenGlyphClass QTip3Glyph = {
		  GI_visMoniker = list { @QTip3Moniker };
	 }

	 @object GenTextClass QTip3Text = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "The computer will give you 2 hints, the number of shapes you have in the correct spot and the number of correct shapes for each guess. Use these hints to change the pattern in the next row.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 325, 0, 0};
	 }

@end QTipsResource

@start StringsResource, data;

	 @chunk char HintHintsStr[] = "Hints" ;
	 @chunk char HintCorrectStr[] = "Total Correct" ;
	 @chunk char HintShapeStr[] = "Shapes" ;
	 @chunk char HintSpotStr[] = "Positions" ;

@end StringsResource;


/*=========================================================================*/

word MyRandom(void) ;
word MyRandom()
{
    static word rand1 = 0xf32d ;
    static word rand2 = 0x0103 ;
    static word rand3 = 0x4326 ;
    static word rand4 = 0x4878 ;
    TimerDateAndTime dateAndTime ;
    word old ;

    TimerGetDateAndTime(&dateAndTime) ;
    old = rand1 ;
    rand1 = rand2 ;
    rand2 = rand3 ;
    rand3 = rand4 ;
/*
    rand4 += dateAndTime.TDAT_minutes + dateAndTime.TDAT_minutes +
             dateAndTime.TDAT_hours + dateAndTime.TDAT_day ;
*/
    rand4 ^= old^rand1^rand2^rand3 ;
    rand3 += rand1+rand2+rand4 ;
    rand4 += TimerGetCount() ;
    return old ;
}


/* size_x and size_y must be odd values */

void SecretCodeMake(byte* secret_code_field, word size)
{
    word pos = 168 ;

    @send SecretCodeApp::MSG_GEN_APPLICATION_MARK_BUSY() ;

    while (pos)
        secret_code_field[--pos] = 0 ;

    for (pos=0; pos<size_x; pos++)
        secret_code_field[pos] = 1+((MyRandom()%60)/10) ;

    play_line = size-1 ;

    @send SecretCodeApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}
/*-------------------------------------------------------------------------*/
void SecretCodeDraw(GStateHandle gstate,
              RectDWord *rect)
{
    word start_x, start_y, end_x, end_y ;
    word x, y ;
    word pos ;
    word x_at, y_at ;
	 byte value, dot ;
	 word j, width ;
	 Bitmap *ptr ;
	 char		buffer[2];


	 start_x = ((word)(rect->RD_left)) / SQUARE_SIZE ;
    start_y = ((word)(rect->RD_top)) / SQUARE_SIZE ;
    end_x = (((word)(rect->RD_right)) / SQUARE_SIZE) ;
    end_y = (((word)(rect->RD_bottom)) / SQUARE_SIZE) ;

    if (start_x != 0)
       start_x-- ;
    if (start_y != 0)
       start_y-- ;
    end_x++ ;
    end_y++ ;
    if (end_x >= size_x+2)
       end_x = size_x+1 ;
    if (end_y >= size)
       end_y = size-1 ;

/* all these jfh comments moved the play field down one (NOW 2) row and extended
 * it to the right 8 (NOW 14) columns so that the hint titles would have some place
 * to go */
/* jfh	 y_at = 1+SQUARE_SIZE * start_y ;  */
	 y_at = 1+SQUARE_SIZE * (start_y+2) ;
	 MemLock(OptrToHandle(@UnknownShapePicture)) ;
/* jfh 	 for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {     */
	 for (y=start_y+2; y<=end_y+2; y++, y_at += SQUARE_SIZE)  {
		  x_at = 1+SQUARE_SIZE * start_x ;
/* jfh		  pos = quick_secret_code(start_x, y) ;    */
		  pos = quick_secret_code(start_x, y-2) ;
		  for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            value = secret_code_field[pos] ;
            if (x < size_x)  {
/* jfh					 if ((play_line != 0) && (y==0))      */
					 if ((play_line != 0) && (y==2))
						  ptr = (Bitmap *)LMemDeref(@UnknownShapePicture) ;
					 else
						  ptr = (Bitmap*)LMemDeref(ColorPictures[value]) ;
					 GrDrawBitmap(gstate,
                                x_at,
                                y_at,
                                ptr,
                                NULL) ;
            } else {
/* jfh					 if (y > play_line)  {  /* show the spots/shapes tally*/
					 if (y-2 > play_line)  {  /* show the spots/shapes tally*/
						  dot = 0;
						  for (j=0; j<size_x; j++)  {
								if (j < value) dot++;  /* count it */
								if (j == size_x-1) {   /* show the count */
									sprintf(buffer, "%d", dot);
									width = GrTextWidth(gstate, buffer, 1);
									if (x == size_x+1) /* correct shapes */
										GrDrawText(gstate,
										  (size_x*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
										  y_at, buffer, 0);
									else  /* correct positions */
										GrDrawText(gstate,
										  ((size_x+7)*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
										  y_at, buffer, 0);
								}
						  }
					 }
				}
        }
    }
	 MemUnlock(OptrToHandle(@UnknownShapePicture)) ;

	 GrSetLineColor(gstate, CF_INDEX, C_DARK_GRAY, 0, 0) ;
/* jfh	 if (play_line != 0)
		  GrDrawRect(gstate,
						 0,
						 SQUARE_SIZE*play_line,
						 SQUARE_SIZE*size_x,
						 SQUARE_SIZE*play_line+SQUARE_SIZE-1) ;  */
	 if (play_line != 0)
		  GrDrawRect(gstate,
						 0,
						 SQUARE_SIZE*(play_line+2),
						 SQUARE_SIZE*size_x,
						 SQUARE_SIZE*(play_line+2)+SQUARE_SIZE-1) ;
/* jfh	 GrDrawVLine(gstate, SQUARE_SIZE*(size_x+1), 0, size*SQUARE_SIZE) ;  */
	 GrDrawVLine(gstate, SQUARE_SIZE*(size_x+7), SQUARE_SIZE, (size+2)*SQUARE_SIZE) ;
/* jfh 	 GrDrawHLine(gstate, 0, SQUARE_SIZE, size*SQUARE_SIZE) ; */
	 GrDrawHLine(gstate, 0, SQUARE_SIZE*3, (size_x+14)*SQUARE_SIZE) ;

	 /* and draw the hints text - centered in their places */
	 MemLock(OptrToHandle(@HintHintsStr)) ;
	 width = GrTextWidth(gstate, LMemDeref(@HintHintsStr),
								strlen(LMemDeref(@HintHintsStr)));
	 GrDrawText(gstate, (size_x*SQUARE_SIZE + (14*SQUARE_SIZE - width)/2),
													 0, LMemDeref(@HintHintsStr), 0);
	 width = GrTextWidth(gstate, LMemDeref(@HintCorrectStr),
								strlen(LMemDeref(@HintCorrectStr)));
	 GrDrawText(gstate, (size_x*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
													 SQUARE_SIZE, LMemDeref(@HintCorrectStr), 0);
	 width = GrTextWidth(gstate, LMemDeref(@HintShapeStr),
								strlen(LMemDeref(@HintShapeStr)));
	 GrDrawText(gstate, (size_x*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
												SQUARE_SIZE*2, LMemDeref(@HintShapeStr), 0);
	 width = GrTextWidth(gstate, LMemDeref(@HintCorrectStr),
								strlen(LMemDeref(@HintCorrectStr)));
	 GrDrawText(gstate, ((size_x+7)*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
													 SQUARE_SIZE, LMemDeref(@HintCorrectStr), 0);
	 width = GrTextWidth(gstate, LMemDeref(@HintSpotStr),
								strlen(LMemDeref(@HintSpotStr)));
	 GrDrawText(gstate, ((size_x+7)*SQUARE_SIZE + (7*SQUARE_SIZE - width)/2),
												SQUARE_SIZE*2, LMemDeref(@HintSpotStr), 0);
	 MemUnlock(OptrToHandle(@HintHintsStr)) ;


}
/*-------------------------------------------------------------------------*/
void SecretCodePlaySound(MemHandle soundHandle)
{
 word 		tempo = 8;


	 if (g_sound == SOUND_SYSTEM)
		 /* this routine abides by syst sound setting */
		 UserStandardSound(SST_CUSTOM_SOUND, soundHandle, 1);
	 else if (g_sound == SOUND_OFF)  return;
	 else {
		 /* this routine doesn't check syst sound setting -
		  * but we need to supply the tempo */
		 SoundPlayMusic(soundHandle, SP_GAME, tempo, EOSF_UNLOCK);
		 }
}

/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
	 FileHandle fhandle ;
	 Boolean		initError, tips;


    @call SecretCodeApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

	 SoundAllocMusic(shapeSoundBuf, 1, &shapeSound);
	 SoundAllocMusic(badGuessSoundBuf, 1, &badGuessSound);
	 SoundAllocMusic(winSoundBuf, 1, &winSound);
	 SoundAllocMusic(loseSoundBuf, 1, &loseSound);

	 FilePushDir() ;
    FileSetCurrentPath(secret_code_drive, secret_code_relativePath) ;
    FileCreateDir(secret_code_path) ;
    FileSetCurrentPath(secret_code_drive, secret_code_path) ;

    fhandle = FileOpen(secret_code_state_file, FILE_ACCESS_R|FILE_DENY_W) ;

    if (fhandle!=NullHandle)  {
        /* Make sure file at beginning */
        FilePos(fhandle, 0, FILE_POS_START) ;
        FileRead(fhandle, &size, sizeof(word), FALSE) ;
        FileRead(fhandle, secret_code_field, sizeof(byte)*21*8, FALSE) ;
        FileRead(fhandle, &game_mode, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_sec, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_min, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_hour, sizeof(byte), FALSE) ;
        FileRead(fhandle, &play_line, sizeof(byte), FALSE) ;
        FileRead(fhandle, &player_score, sizeof(word), FALSE) ;
		  FileRead(fhandle, &size_x, sizeof(byte), FALSE) ;
        FileRead(fhandle, &selection_size, sizeof(byte), FALSE) ;
		  FileClose(fhandle, FALSE) ;
/* jfh		  @call SecretCodeView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
									 (size*SQUARE_SIZE),
									 ((size_x+2)*SQUARE_SIZE),
									 0,
						0) ;   */
		  @call SecretCodeView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
									 ((size+2)*SQUARE_SIZE),
									 ((size_x+14)*SQUARE_SIZE),
									 0,
						0) ;
		@send SecretCodeContent::MSG_VIS_MARK_INVALID(VOF_GEOMETRY_INVALID, VUM_NOW);

		  @call SecretCodeSizeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection_size, FALSE) ;
    } else  {
	   @call process::MSG_SECRET_CODE_SIZE_CHANGED(SECRET_CODE_SIZE_SMALL,
                           1, 0) ;
	 }
    FilePopDir() ;

    @callsuper() ;

	   @send process::MSG_VIEW_SECRET_CODE_NEW() ;

	 /* check for quick tips */
	 initError = InitFileReadBoolean("SCode", "showTips", &tips);
	 if (initError) tips = TRUE;
	 if (tips) {
		 @send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 TRUE);
		 @send QTipsDialogBox::MSG_GEN_INTERACTION_INITIATE();
		 }
	 else
		 @send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 FALSE);
	 /* check for sound */
	 initError = InitFileReadInteger("SCode", "sound", &g_sound);
	 if (initError) g_sound = SOUND_SYSTEM;
	 @call SoundGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(g_sound, FALSE) ;


}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
	 FileHandle fhandle ;
    Boolean		tips;

    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    timer_going = FALSE ;

	 SoundStopMusic(shapeSound);
	 SoundFreeMusic(shapeSound);
	 SoundStopMusic(badGuessSound);
	 SoundFreeMusic(badGuessSound);
	 SoundStopMusic(winSound);
	 SoundFreeMusic(winSound);
	 SoundStopMusic(loseSound);
	 SoundFreeMusic(loseSound);

	 FilePushDir() ;
    FileSetCurrentPath(secret_code_drive, secret_code_relativePath) ;
    FileCreateDir(secret_code_path) ;
    FileSetCurrentPath(secret_code_drive, secret_code_path) ;
    FileDelete(secret_code_state_file) ;
    fhandle = FileCreate(secret_code_state_file,
              FILE_CREATE_TRUNCATE |
              FILE_ACCESS_RW |
              FILE_DENY_NONE,
              FILE_ATTR_NORMAL) ;

    if (fhandle!=NullHandle)  {
        /* Make sure file at beginning */
        FilePos(fhandle, 0, FILE_POS_START) ;
        FileWrite(fhandle, &size, sizeof(word), FALSE) ;
        FileWrite(fhandle, secret_code_field, sizeof(byte)*21*8, FALSE) ;
        FileWrite(fhandle, &game_mode, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_sec, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_min, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_hour, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &play_line, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &player_score, sizeof(word), FALSE) ;
		  FileWrite(fhandle, &size_x, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &selection_size, sizeof(byte), FALSE) ;
		  FileClose(fhandle, FALSE) ;
    }
    FilePopDir() ;

	 /* set the quick tips if not default */
	 tips = @call ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(
																	 SHOW_ON_STARTUP);
	 InitFileWriteBoolean("SCode", "showTips", tips);
	 InitFileWriteInteger("SCode", "sound", g_sound);

	 return (@callsuper()) ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_SOUND_CHANGED
{
	 g_sound = selection ;
}

/*-------------------------------------------------------------------------*/
@method SecretCodeContentClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    RectDWord    rect ;

    @call SecretCodeView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect) ;
    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    SecretCodeDraw(gstate,&rect);

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_VIEW_INVALIDATE
{
    WindowHandle win ;
    GStateHandle gstate ;

    win = @call SecretCodeView::MSG_GEN_VIEW_GET_WINDOW() ;
    gstate = GrCreateState(win) ;
    GrInvalRect(gstate, 0, 0, 2000,2000) ;
    GrDestroyState(gstate) ;
    @call SecretCodeContent::MSG_VIS_INVALIDATE();
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_VIEW_SECRET_CODE_NEW
{
    SecretCodeMake(secret_code_field, size) ;
    @call process::MSG_VIEW_INVALIDATE() ;
    @call SecretCodeView::MSG_GEN_UPDATE_VISUAL(VUM_NOW) ;
    game_mode = 0 ;
    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    @call SecretCodeTimer::MSG_SECRET_CODE_RESET_TIMER() ;
    player_score = (word)0x7FFF ;
    @call process::MSG_SECRET_CODE_UPDATE_SCORE() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_SIZE_CHANGED
{
    word answer = IC_YES ;

    if (selection!=selection_size) {
        if (game_mode == 1)  {
            answer = UserStandardDialogOptr(
                NullOptr,
                NullOptr,
                NullOptr,
                NullOptr,
		        @SecretCodeNewGameMsg,
		        (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
		        (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));
        }

        if (answer == IC_YES)  {
            selection_size = selection ;
            size = size_table[selection][0] ;
            size_x = size_table[selection][1] ;

            @send process::MSG_VIEW_SECRET_CODE_NEW() ;
/* jfh				@send SecretCodeView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
										  (size*SQUARE_SIZE),
										  ((size_x+2)*SQUARE_SIZE),
										  0,
										  0) ;  */
				@send SecretCodeView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
										  ((size + 2)*SQUARE_SIZE),
										  ((size_x+14)*SQUARE_SIZE),
										  0,
										  0) ;
				@send SecretCodeContent::MSG_VIS_MARK_INVALID(VOF_GEOMETRY_INVALID, VUM_NOW);
            /* force the GenInter to redraw */
				@send SecretCodeViewGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
				@send SecretCodeViewGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
		  } else {
            @call SecretCodeSizeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection_size, FALSE) ;
        }
    }
}
/*-------------------------------------------------------------------------*/
@method SecretCodeContentClass, MSG_META_START_SELECT,
                                MSG_META_START_MOVE_COPY
{
    word pos ;
    byte value ;

    if (game_mode < 2)  {
        if (game_mode == 0)  {
            @call SecretCodeTimer::MSG_SECRET_CODE_RESET_TIMER() ;
            timer_handle = TimerStart(TIMER_EVENT_CONTINUAL,
                                  @SecretCodeTimer,
                                  80,
                                  MSG_SECRET_CODE_TIMER_CHANGE,
                                  60,
                                  &timer_id) ;
            timer_going = TRUE ;
            game_mode = 1 ;
        }
        xPosition /= SQUARE_SIZE ;
/* jfh		  yPosition /= SQUARE_SIZE ;   */
		  yPosition = yPosition/SQUARE_SIZE - 2;

        if (yPosition == play_line)  {
            pos = quick_secret_code(xPosition, yPosition) ;
            value = secret_code_field[pos]-1 ;
            if (inputState&BI_B0_DOWN)
                value++ ;
            else if (inputState&BI_B2_DOWN)  {
                value-- ;
                if (value == (byte)0xFF)
                    value = 5 ;
            }
				SecretCodePlaySound(shapeSound);
				secret_code_field[pos] = 1+(value % 6) ;
            @call process::MSG_SECRET_CODE_REDRAW_SQUARE(xPosition, yPosition) ;
        }
    }
    retVal->flags = MRF_PROCESSED ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_META_CLIPBOARD_COPY
{
    ClipboardItemHeader *headerMem ;
    MemHandle           headerMemHandle ;
    VMFileHandle        transferVMFile ;
    VMBlockHandle       dataVMBlock ;
    VMBlockHandle       headerVMBlock ;
    GStateHandle        gstate;
    RectDWord           rect = {0,0,2000,2000} ;

    @send SecretCodeApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
    transferVMFile = ClipboardGetClipboardFile() ;

    gstate = GrCreateGString(transferVMFile, GST_VMEM, &dataVMBlock);
    SecretCodeDraw(gstate,&rect);
    GrEndGString(gstate);

    headerVMBlock = VMAlloc(transferVMFile, sizeof(ClipboardItemHeader), 1111) ;
    headerMem = (ClipboardItemHeader *)VMLock(
                 transferVMFile, headerVMBlock, &headerMemHandle) ;
    headerMem->CIH_owner = ConstructOptr(GeodeGetProcessHandle(), 0) ;
    headerMem->CIH_flags = 0 ;
    headerMem->CIH_name[0] = 'S' ;
    headerMem->CIH_name[1] = 'C' ;
    headerMem->CIH_name[2] = 'o' ;
    headerMem->CIH_name[3] = 'd' ;
    headerMem->CIH_name[4] = 'e' ;
    headerMem->CIH_name[5] = '\0' ;
    headerMem->CIH_formatCount = 1;
    headerMem->CIH_sourceID = 0 ;
    headerMem->CIH_formats[0].CIFI_format =
        FormatIDFromManufacturerAndType(
             MANUFACTURER_ID_GEOWORKS,
             CIF_GRAPHICS_STRING) ;
    headerMem->CIH_formats[0].CIFI_vmChain =
        (VMChain)(((dword)(dataVMBlock))<<16L) ;
    headerMem->CIH_formats[0].CIFI_extra1 = 0 ;
    headerMem->CIH_formats[0].CIFI_extra2 = 0 ;
    VMUnlock(headerMemHandle) ;
    ClipboardRegisterItem(BlockIDFromFileAndBlock(transferVMFile,
        headerVMBlock),
        0) ;
    @send SecretCodeApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_COMPLETED
{
    word id ;

    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    game_mode = 2 ;
    TimerStart(
        TIMER_EVENT_ONE_SHOT,
        oself,
        5,
        MSG_SECRET_CODE_COMPLETED2,
        0,
        &id) ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_COMPLETED2
{
	 SecretCodePlaySound(winSound);
	 UserDoDialog(@SecretCodeCompletedBox) ;
	 @send HighScoreControl::MSG_HIGH_SCORE_ADD_SCORE(
												  (dword) player_score, 0);
}
/*-------------------------------------------------------------------------*/
@method SecretCodeTimerClass, MSG_SECRET_CODE_CHANGE_TIME
{
	 char new_time[10] ;

	 new_time[0] = '0'+time_hour/10;
	 new_time[1] = '0'+time_hour%10;
	 new_time[2] = ':';

	 new_time[3] = '0'+time_min/10;
	 new_time[4] = '0'+time_min%10;
	 new_time[5] = ':';

	 new_time[6] = '0'+time_sec/10;
	 new_time[7] = '0'+time_sec%10;
	 new_time[8] = 0;

	 @call SecretCodeTimer::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(new_time, VUM_NOW) ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeTimerClass, MSG_SECRET_CODE_TIMER_CHANGE
{
    time_sec++ ;
    if (time_sec==60)  {
        time_sec = 0 ;
        time_min++ ;
        if (time_min==60)  {
            time_min = 0 ;
            time_hour++ ;
            if (time_hour == 100)  {
                time_hour = 0 ;
            }
        }
    }
    @send SecretCodeTimer::MSG_SECRET_CODE_CHANGE_TIME() ;
    @send process::MSG_SECRET_CODE_UPDATE_SCORE() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeTimerClass, MSG_SECRET_CODE_RESET_TIMER
{
    time_sec = time_min = time_hour = 0 ;
    @send SecretCodeTimer::MSG_SECRET_CODE_CHANGE_TIME() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_REDRAW_SQUARE
{
    WindowHandle win ;
    GStateHandle gstate ;
    RectDWord    rect = {0,0,2000,2000} ;

    rect.RD_left = SQUARE_SIZE*pos_x ;
/* jfh    rect.RD_top = SQUARE_SIZE*pos_y ;  */
	 rect.RD_top = SQUARE_SIZE*(pos_y +2);
    rect.RD_right = SQUARE_SIZE*(pos_x+1) ;
/* jfh 	 rect.RD_bottom = SQUARE_SIZE*(pos_y+1) ;  */
	 rect.RD_bottom = SQUARE_SIZE*(pos_y+3) ;

    win = @call SecretCodeView::MSG_GEN_VIEW_GET_WINDOW() ;
    gstate = GrCreateState(win) ;

	 GrInvalRectDWord(gstate, &rect) ;

	 GrDestroyState(gstate) ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_UPDATE_SCORE
{
    char buffer[30] ;
    sword score_time ;

    score_time = ((sword)time_hour)*1800 + ((sword)time_min)*30 + (((sword)time_sec/2)) ;
    score_time = 100 - score_time ;
    if (score_time > 0)  {
        if (score_time < player_score)  {
				player_score = score_time ;
				sprintf(buffer, "%d", player_score);
            @call SecretCodeScore::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;
        }
    }
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_DID_NOT_WIN
{
    word id ;

    if (timer_going)  {
        TimerStop(timer_handle, timer_id) ;
        timer_going = FALSE ;
    }
    TimerStart(
        TIMER_EVENT_ONE_SHOT,
        oself,
        5,
        MSG_SECRET_CODE_DID_NOT_WIN2,
        0,
        &id) ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_DID_NOT_WIN2
{
	 SecretCodePlaySound(loseSound);

	 if (UserDoDialog(@SecretCodeWrongCompletionBox)==IC_OK)  {
		  game_mode = 2 ;
	 }
}
/*-------------------------------------------------------------------------*/
void FigurePoints()
{
    word pos_pos ;
    byte *pos ;
    word count_close=0, count_exact=0 ;
    word i,j ;
    byte guess[8] ;

    pos_pos = quick_secret_code(0, play_line) ;
    pos = secret_code_field+pos_pos ;

    for (i=0; i<size_x; i++)
		  if (pos[i]==(guess[i]=secret_code_field[i]))  {
            guess[i] = (byte)0xFF ;
            count_exact++ ;
        }

    for (i=0; i<size_x; i++)  {
        if (secret_code_field[i] != pos[i])  {
            for (j=0; j<size_x; j++)
                if (i!=j)
                    if (pos[i]==guess[j])  {
                        count_close++ ;
                        guess[j] = (byte)0xFF ;
                        break ;
                    }
        }
    }

    pos[size_x] = count_exact ;
 //   pos[size_x+1] = count_close ;  jfh
    pos[size_x+1] = count_close + count_exact;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeProcessClass, MSG_SECRET_CODE_GUESS
{
    sword i ;
    byte *pos ;

    pos = secret_code_field+(8*play_line) ;

    if (game_mode<2)  {
        if (play_line > 0)  {
            FigurePoints() ;
            if (pos[size_x] == size_x)  {
                play_line = 0 ;
					 @send oself::MSG_SECRET_CODE_COMPLETED() ;
            } else {
                play_line-- ;
                if (play_line != 0)  {
                    for (i=size_x-1; i>=0; i--)
                        pos[i-8] = pos[i] ;
		          SecretCodePlaySound(badGuessSound);

					 } else {
                    @send oself::MSG_SECRET_CODE_DID_NOT_WIN() ;
                }
            }
				@send oself::MSG_VIEW_INVALIDATE() ;
        }
    }
}
/*-------------------------------------------------------------------------*/
@method SecretCodePauseInterClass, MSG_VIS_DRAW
{
    Rectangle rect;

    @call oself::MSG_VIS_GET_BOUNDS(&rect) ;
    GrSaveState(gstate) ;
    GrSetLineWidth(gstate, MakeWWFixed(1.0)) ;
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0) ;
    GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrDrawRect(gstate,
        rect.R_left-1,
        rect.R_top-1,
        rect.R_right+2,
        rect.R_bottom+2) ;
    GrFillRect(gstate,
        rect.R_left-2,
        rect.R_top-2,
        rect.R_right+1,
        rect.R_bottom+1) ;
    GrDrawRect(gstate,
        rect.R_left-2,
        rect.R_top-2,
        rect.R_right+1,
        rect.R_bottom+1) ;
    GrRestoreState(gstate) ;

    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeAppClass, MSG_META_LOST_TARGET_EXCL
{
    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    timer_going = FALSE ;
    if (game_mode == 1)  {
        @call SecretCodeView::MSG_GEN_SET_NOT_USABLE(VUM_NOW) ;
        @call SecretCodeLostFocusGlyph::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    }
    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method SecretCodeAppClass, MSG_META_GAINED_TARGET_EXCL
{
    if (game_mode==1)  {
        if (timer_going == FALSE)  {
            timer_handle = TimerStart(TIMER_EVENT_CONTINUAL,
                                  @SecretCodeTimer,
                                  120,
                                  MSG_SECRET_CODE_TIMER_CHANGE,
                                  60,
                                  &timer_id) ;
            timer_going = TRUE ;
        }
    }
    @call SecretCodeLostFocusGlyph::MSG_GEN_SET_NOT_USABLE(VUM_NOW) ;
    @call SecretCodeView::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    @callsuper() ;
}

