/***************************************************************************
 *                                                                         *
 *  HiHo                                                                   *
 *                                                                         *
 ***************************************************************************/


/***************************************************************************
 *		Include files
 ***************************************************************************/

@include <stdapp.goh>
@include <Objects/gViewCC.goh>
#include <gstring.h>
@include <spool.goh>
@include <Objects/clipbrd.goh>
#include <initfile.h>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
@include <game.goh>
@include "icons.goh"
@include "winlose.goh"
#include <sound.h>

byte TrySelection(word posx, word posy, word posx2, word posy2) ;
Boolean CheckSelection(word posx, word posy, word posx2, word posy2) ;
void RemoveSelectAndChoices(void) ;
Boolean CheckNotAbleToMove(void) ;

#define HIHO_SIZE_SMALL  0
#define HIHO_SIZE_MEDIUM 1
#define HIHO_SIZE_LARGE  2

//#define INITIAL_SIZE 19
#define INITIAL_SIZE 7

#define SHOW_ON_STARTUP   1

char size_table[5][2] = {
   {2,5},
   {4,9},
   {6,13}
} ;

byte hiho_field[441] ;
byte selection_size       = 0 ;
word select_x             = 0xFF ;
word select_y             = 0xFF ;
word third                = 2 ;
word two_thirds           = 5 ;
byte game_mode            = 0 ;
word size                 = INITIAL_SIZE ;
byte time_sec             = 0 ;
byte time_min             = 0 ;
byte time_hour            = 0 ;
word timer_id ;
word timer_handle ;
word num_pegs             = 0 ;
word total_pegs           = 0 ;
word player_score         = 1 ;
Boolean timer_going       = FALSE ;
char hiho_state_file[20] = "Marble State" ;

char hiho_path[20] = "Game" ;
char hiho_relativePath[] = "." ;
word hiho_drive = SP_PUBLIC_DATA ;


#define SQUARE_SIZE           15

#define HIHO_PEG_SPOT_BIT  0x80
#define HIHO_PEG_THERE_BIT   0x40
#define HIHO_PEG_INVERT_BIT   0x20
#define HIHO_PEG_SELECT_BIT   0x10

#define quick_hiho(posx, posy)  ((posx)+((posy)*(size)))

#define DOC_WIDTH             INITIAL_SIZE*SQUARE_SIZE
#define DOC_HEIGHT            DOC_WIDTH

#define SOUND_ON 1
#define SOUND_OFF 2
#define SOUND_SYSTEM 3

const word jumpSoundBuf[] = {     /* from solitaire bad drop sound */
	SSE_CHANGE,             0, IP_ORCHESTRA_HIT, IT_STANDARD_TABLE,
	SSE_CHANGE,             1, IP_ORCHESTRA_HIT, IT_STANDARD_TABLE,
	SSE_CHANGE,             2, IP_ORCHESTRA_HIT, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSE_VOICE_ON,           0, MIDDLE_F_SH, DYNAMIC_MF,
	SSE_VOICE_ON,           1, MIDDLE_A_SH, DYNAMIC_MF,
	SSE_VOICE_ON,           2, HIGH_C, DYNAMIC_MF,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSE_VOICE_OFF,          1,
	SSE_VOICE_OFF,          2,
	SSE_GENERAL,            GE_END_OF_SONG};

const word noMoveSoundBuf[] = {     /* from hearts wrong play sound */
	SSE_CHANGE,             0, IP_CELLO, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_G, DYNAMIC_MF,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word winSoundBuf[] = {     /* from blackjack win sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_C, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_E, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            15,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, MIDDLE_G, DYNAMIC_F,
	SSDTT_TICKS,            8,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, HIGH_C, DYNAMIC_F,
	SSDTT_TICKS,            25,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

const word loseSoundBuf[] = {     /* from blackjack lose sound */
	SSE_CHANGE,             0, IP_ACOUSTIC_GRAND_PIANO, IT_STANDARD_TABLE,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_F, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_E, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D_b, DYNAMIC_F,
	SSDTT_TICKS,            7,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           0, LOW_D, DYNAMIC_F,
	SSDTT_TICKS,            20,
	SSE_VOICE_OFF,          0,
	SSDTT_TICKS,            0,
	SSE_GENERAL,            GE_END_OF_SONG};

MemHandle	jumpSound, noMoveSound, winSound, loseSound;
word	g_sound;

@start GraphicsResource, data;
@include "Art/cHole.goh"
@include "Art/cMarble.goh"
@include "Art/hole.goh"
@include "Art/marble.goh"
@end GraphicsResource;

/***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************/

    /*---------------------------------------------------------------------*/
    @class HiHoProcessClass, GenProcessClass ;
        @message void MSG_VIEW_INVALIDATE() ;
        @message void MSG_VIEW_HIHO_NEW() ;
        @message void MSG_HIHO_COMPLETED() ;
        @message void MSG_HIHO_COMPLETED2() ;
        @message void MSG_HIHO_REDRAW_SQUARE(sword pos_x, sword pos_y) ;
        @message void MSG_HIHO_UPDATE_SCORE() ;
		  @message void MSG_HIHO_DID_NOT_WIN() ;
        @message void MSG_HIHO_DID_NOT_WIN2() ;
        @message void MSG_HIHO_ROTATE_LEFT() ;
        @message void MSG_HIHO_ROTATE_RIGHT() ;
        @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_HIHO_SIZE_CHANGED;
		  @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_HIHO_SOUND_CHANGED;
	 @endc

    @classdecl HiHoProcessClass, neverSaved ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class HiHoTimerClass, GenGlyphClass ;
        @message void MSG_HIHO_CHANGE_TIME() ;
        @message void MSG_HIHO_RESET_TIMER() ;
        @message void MSG_HIHO_TIMER_CHANGE() ;
    @endc

    @classdecl HiHoTimerClass;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class HiHoViewClass, GenViewClass ;
    @endc

    @classdecl HiHoViewClass;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class HiHoContentClass, VisContentClass ;
    @endc

    @classdecl HiHoContentClass ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class HiHoAppClass, GenApplicationClass ;
    @endc

    @classdecl HiHoAppClass ;
    /*---------------------------------------------------------------------*/

	 /*---------------------------------------------------------------------*/
    @class HiHoPauseInterClass, GenInteractionClass ;
    @endc

    @classdecl HiHoPauseInterClass ;
    /*---------------------------------------------------------------------*/



/***************************************************************************
 *		UI Objects
 ***************************************************************************/



/*=========================================================================*/



@start	AppResource ;
    /*---------------------------------------------------------------------*/
    @object HiHoAppClass HiHoApp = {
        GI_visMoniker = list { @HiHoTextMoniker,
                               @Moniker0,
                               @Moniker1,
                               @Moniker4 }
	   GI_comp       = @HiHoPrimary;
        gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS)
                      = @HiHoPrimary;
		gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST)
						 = @HighScoreControl;
	 }
	 /*---------------------------------------------------------------------*/
    @visMoniker HiHoTextMoniker =
        "Marble Solitaire" ;
    /*---------------------------------------------------------------------*/
@end	AppResource



/*=========================================================================*/



@start	Interface		/* this resource is for misc UI objects */ ; ;
/*@include "Art/marble.goh"
@include "Art/hole.goh"
@include "Art/cHole.goh"
@include "Art/cMarble.goh" */


	 /*---------------------------------------------------------------------*/
    @object GenPrimaryClass HiHoPrimary  = {
        GI_comp             = @HiHoViewGroup1,
										@HiHoGameMenu,
										@HiHoEditMenu,
										@HiHoOptionsMenu,
										@QTipsDialogBox,
										@HiHoDialogs ;
	/*ATTR_GEN_HELP_CONTEXT = "TOC";*/
	HINT_PRIMARY_NO_HELP_BUTTON;
		  HINT_SIZE_WINDOW_AS_DESIRED ;
        HINT_CENTER_WINDOW;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_CENTER_CHILDREN_VERTICALLY ;
		  HINT_PRIMARY_NO_FILE_MENU ;
    }
	 /*---------------------------------------------------------------------*/
    @object GenInteractionClass HiHoViewGroup1 = {
		  GI_comp = @HiHoViewGroupTop, @HiHoViewPlayField ;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_CENTER_CHILDREN_VERTICALLY ;
	 }
    /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoViewGroupTop = {
		  GI_comp = @HiHoViewGroupTopLeft,
						@HiHoViewGroupTopRight ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_CENTER_CHILDREN_VERTICALLY ;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
        HINT_INCLUDE_ENDS_IN_CHILD_SPACING;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoViewGroupTopLeft = {
		  GI_comp = @HiHoQuickNew ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenTriggerClass HiHoQuickNew = {
		  GI_visMoniker   = 'N', "New" ;
		  GTI_destination = process ;
		  GTI_actionMsg   = MSG_VIEW_HIHO_NEW ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoViewGroupTopRight = {
		  GI_comp = @HiHoTimerGroup,
						@HiHoScoreGroup ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoTimerGroup = {
		  GI_comp = @HiHoTimerTitle,
						@HiHoTimer ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenGlyphClass HiHoTimerTitle = {
		  GI_visMoniker    = "Time: " ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object HiHoTimerClass HiHoTimer = {
 //		  GI_visMoniker    = "00:00:00" ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoScoreGroup = {
		  GI_comp = @HiHoScoreTitle,
						@HiHoScore ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY ;
		  HINT_EXPAND_WIDTH_TO_FIT_PARENT;
		  HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenGlyphClass HiHoScoreTitle = {
		  GI_visMoniker    = "Score: " ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenGlyphClass HiHoScore = {
		  GI_visMoniker    = "0" ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoViewPlayField = {
		  GI_comp = @HiHoViewHolder ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
		  HINT_DEFAULT_TARGET;
		  HINT_DEFAULT_FOCUS;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoViewHolder = {
		  GI_comp = @HiHoView, @HiHoLostFocusGlyph;
        HINT_CENTER_CHILDREN_VERTICALLY ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
		  HINT_DEFAULT_TARGET;
        HINT_DEFAULT_FOCUS;
		  HINT_MINIMUM_SIZE = { SST_PIXELS | 19 * SQUARE_SIZE + 40,
										SST_PIXELS | 19 * SQUARE_SIZE + 40,
										0 } ;
	 }
	 /*---------------------------------------------------------------------*/
    @object HiHoViewClass HiHoView = {
        GVI_attrs      = @default |
                         GVA_CONTROLLED |
								 GVA_SAME_COLOR_AS_PARENT_WIN /*|
								 GVA_NO_WIN_FRAME*/;
        GVI_horizAttrs   = @default |
				    //   GVDA_SCROLLABLE |
					  GVDA_NO_SMALLER_THAN_CONTENT |
					  GVDA_NO_LARGER_THAN_CONTENT ;
        GVI_vertAttrs    = @default |
				    //   GVDA_SCROLLABLE |
					  GVDA_NO_SMALLER_THAN_CONTENT |
					  GVDA_NO_LARGER_THAN_CONTENT ;
	   GVI_content      = @HiHoContent;
		  GVI_docBounds    = {0, 0, DOC_WIDTH, DOC_HEIGHT};
        HINT_DEFAULT_TARGET;
		  HINT_DEFAULT_FOCUS;
  //		  HINT_DRAW_IN_BOX;
	 }
	 /*---------------------------------------------------------------------*/
    @object GenInteractionClass HiHoLostFocusGlyph = {
        GI_comp = @HiHoLostFocusGroup ;
	   GI_states = @default & (~GS_USABLE) ;
	   HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
        HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object HiHoPauseInterClass HiHoLostFocusGroup = {
        GI_comp = @HiHoLostFocusGlyph1,
                  @HiHoLostFocusGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass HiHoLostFocusGlyph1 = {
        GI_visMoniker = "Game" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass HiHoLostFocusGlyph2 = {
        GI_visMoniker = "Paused" ;
    }
	 /*---------------------------------------------------------------------*/
	 @object HiHoContentClass HiHoContent = {
        VCNI_view         = HiHoView ;
        VCNI_attrs        = @default |
									 VCNA_SAME_WIDTH_AS_VIEW |
                            VCNA_SAME_HEIGHT_AS_VIEW |
                            VCNA_LARGE_DOCUMENT_MODEL |
                            VCNA_ACTIVE_MOUSE_GRAB_REQUIRES_LARGE_EVENTS ;
    }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoGameMenu = {
		GI_comp = @HiHoNewOption,
						@HiHoQTipsTrigger,
						@HighScoreControl;
		  GI_visMoniker = 'G', "Game" ;
        GII_visibility = GIV_POPUP ;
        ATTR_GEN_INTERACTION_GROUP_TYPE
                       = (GIGT_FILE_MENU) ;
    }
    /*---------------------------------------------------------------------*/
	 @object GenTriggerClass HiHoQTipsTrigger = {
		  GI_visMoniker   = 'Q', "Quick Tips" ;
		  GTI_destination = @QTipsDialogBox ;
		  GTI_actionMsg   = MSG_GEN_INTERACTION_INITIATE ;
		  HINT_TRIGGER_BRINGS_UP_WINDOW;
    }
	 /*---------------------------------------------------------------------*/
	 @object HighScoreClass HighScoreControl = {
		  HSI_fileName = "Marble High Scores";
		  HSI_creator = {"HiHo", 16431};
		  HSI_highScoreTitle = "Marble Solitaire High Scores";
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoEditMenu = {
		  GI_comp = @HiHoCopyToClipboard ;
		  GII_visibility = GIV_POPUP ;
		  ATTR_GEN_INTERACTION_GROUP_TYPE
							  = (GIGT_EDIT_MENU) ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoOptionsMenu = {
		  GI_comp = @HiHoSoundOpt,
		            @HiHoSizeOption,
						@HiHoRotateMenu;
		  GII_visibility = GIV_POPUP ;
		  ATTR_GEN_INTERACTION_GROUP_TYPE
							  = (GIGT_OPTIONS_MENU) ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoSoundOpt = {
		  GI_visMoniker = 'S', "Sound" ;
		  GI_comp = @SoundGroup;
		  GII_visibility = GIV_POPUP;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenItemGroupClass SoundGroup = {
		  GI_comp          = @SoundOn,
									@SoundOff,
									@SystemPref ;
		  GIGI_selection   = SOUND_SYSTEM ;
        GIGI_destination = process ;
		  GIGI_applyMsg = MSG_HIHO_SOUND_CHANGED ;
    }
    /*---------------------------------------------------------------------*/
	 @object GenItemClass SoundOn = {
		  GI_visMoniker = 'S', "Sound On" ;
		  GII_identifier = SOUND_ON ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenItemClass SoundOff = {
		  GI_visMoniker = 'O', "Sound Off" ;
		  GII_identifier = SOUND_OFF ;
	 }
	 /*---------------------------------------------------------------------*/
	 @object GenItemClass SystemPref = {
		  GI_visMoniker = 'P', "Use System Preference" ;
		  GII_identifier = SOUND_SYSTEM ;
	 }

	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoDialogs = {
		  GI_comp = @HiHoCompletedBox,
						@HiHoWrongCompletionBox;
		  GII_type = GIT_ORGANIZATIONAL ;
		  GII_visibility = GIV_DIALOG ;
		  GII_attrs = @default | GIA_NOT_USER_INITIATABLE ;
	 }
	 /*---------------------------------------------------------------------*/
    @chunk char HiHoNewGameMsg[] = "Changing this option will end the current game and begin a new one.  Are you sure you want to do this?" ;
    /*---------------------------------------------------------------------*/
    @chunk char HiHoClearHighScoreMsg[] = "Are you sure you want to clear all high scores?" ;
    /*---------------------------------------------------------------------*/
@end Interface


@start InterfaceDialog1 ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass WinnerGlyph = {
        GI_comp = @WinnerGlyph1,
                  @WinnerWinGlyph,
                  @WinnerGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerGlyph1 = {
        GI_visMoniker = "CONGRATULATIONS!" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerWinGlyph = {
        GI_visMoniker = list { @WinMoniker } ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass WinnerGlyph2 = {
        GI_visMoniker = "You win!" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass HiHoCompletedBox = {
        GI_visMoniker   = "We have a winner!" ;
        GII_visibility  = GIV_DIALOG ;
        GII_type        = GIT_NOTIFICATION ;
        GII_attrs       = @default                         |
                          GIA_INITIATED_VIA_USER_DO_DIALOG |
                          GIA_MODAL                        |
                          GIA_NOT_USER_INITIATABLE         ;
        GI_comp         = @WinnerGlyph ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
	 }
	 /*---------------------------------------------------------------------*/
@end InterfaceDialog1


/*=========================================================================*/



@start InterfaceDialog2 ;
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass LoserGlyph = {
        GI_comp = @LoserLoseGlyph,
                  @LoserGlyph2 ;
        HINT_CENTER_CHILDREN_HORIZONTALLY ;
        HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass LoserLoseGlyph = {
        GI_visMoniker = list { @LoseMoniker } ;
    }
    /*---------------------------------------------------------------------*/
    @object GenGlyphClass LoserGlyph2 = {
        GI_visMoniker = "Sorry, try again" ;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass HiHoWrongCompletionBox = {
        GI_visMoniker   = "Oooops!" ;
        GII_visibility  = GIV_DIALOG ;
        GII_type        = GIT_NOTIFICATION ;
        GII_attrs       = @default                         |
                          GIA_INITIATED_VIA_USER_DO_DIALOG |
                          GIA_MODAL                        |
                          GIA_NOT_USER_INITIATABLE         ;
        GI_comp         = @LoserGlyph ;
        HINT_ORIENT_CHILDREN_HORIZONTALLY ;
        HINT_CENTER_CHILDREN_VERTICALLY ;
    }
    /*---------------------------------------------------------------------*/
@end InterfaceDialog2



/*=========================================================================*/



@start InterfaceOptions ;
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass HiHoNewOption = {
        GI_visMoniker   = 'N', "New Game" ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_VIEW_HIHO_NEW ;
    }
	 /*---------------------------------------------------------------------*/
	 @object GenInteractionClass HiHoSizeOption = {
		  GI_visMoniker   = 'L', "Level" ;
		  GII_visibility  = GIV_POPUP ;
        GI_comp         = @HiHoSizeGroup ;
    }
	 /* jfh changed size to level per Jackie (but left all the var names
	  * the same to keep things confusing ;-)   */

	 /*---------------------------------------------------------------------*/
    @object GenItemGroupClass HiHoSizeGroup = {
        GI_comp          = @HiHoSizeSmall, @HiHoSizeMedium, @HiHoSizeLarge ;
        GIGI_selection   = HIHO_SIZE_SMALL ;
        GIGI_destination = process ;
        GIGI_applyMsg = MSG_HIHO_SIZE_CHANGED;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass HiHoSizeSmall = {
		  GI_visMoniker = '1', "1. Beginner" ;
        GII_identifier = HIHO_SIZE_SMALL;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass HiHoSizeMedium = {
		  GI_visMoniker = '2', "2. Intermediate" ;
        GII_identifier = HIHO_SIZE_MEDIUM;
    }
    /*---------------------------------------------------------------------*/
    @object GenItemClass HiHoSizeLarge = {
		  GI_visMoniker = '3', "3. Advanced" ;
        GII_identifier = HIHO_SIZE_LARGE;
    }
    /*---------------------------------------------------------------------*/
    @object GenInteractionClass HiHoRotateMenu = {
        GI_visMoniker   = 'R', "Rotate" ;
        GI_comp = @HiHoRotateLeftTrigger,
                  @HiHoRotateRightTrigger ;
        GII_visibility = GIV_POPUP ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass HiHoRotateRightTrigger = {
        GI_visMoniker   = 'R', "Rotate Right" ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_HIHO_ROTATE_RIGHT ;
    }
    /*---------------------------------------------------------------------*/
    @object GenTriggerClass HiHoRotateLeftTrigger = {
        GI_visMoniker   = 'L', "Rotate Left" ;
        GTI_destination = process ;
        GTI_actionMsg   = MSG_HIHO_ROTATE_LEFT ;
    }
    /*---------------------------------------------------------------------*/
@end InterfaceOptions



/*=========================================================================*/



@start InterfaceView ;
    /*---------------------------------------------------------------------*/
	 @object GenTriggerClass HiHoCopyToClipboard = {
		  GI_visMoniker   = 'C', "Copy Game" ;
		  GTI_destination = process ;
        GTI_actionMsg   = MSG_META_CLIPBOARD_COPY ;
    }
@end InterfaceView



/*=========================================================================*/


@start QTipsResource;
@include "Art/qTip1.goh"

	 @object GenInteractionClass QTipsDialogBox = {
		  GI_visMoniker = "Marble Solitaire Quick Tips";
		  GI_comp = @GoalText,
						@QuickTipsGroup,
						@ShowOnStartupGroup,
						@OKTipsButton;
		  GII_visibility = GIV_DIALOG ;
		  GII_attrs = @default | GIA_MODAL | GIA_NOT_USER_INITIATABLE;
		  HINT_CENTER_CHILDREN_HORIZONTALLY ;
		  /*ATTR_GEN_HELP_CONTEXT = "TOC";*/
	 }


	 @object GenTextClass GoalText = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "The goal of the game is to clear all the marbles from the board except for one at the center of the board.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
	 }

	 @object GenBooleanGroupClass ShowOnStartupGroup = {
		  GI_comp = @ShowOnStartupBoolean;
	 }

	 @object GenBooleanClass ShowOnStartupBoolean = {
		  GI_visMoniker = 'S', "Show this Dialog box when Marble Solitaire starts";
		  GBI_identifier = SHOW_ON_STARTUP;
	 }

	 @object GenTriggerClass OKTipsButton = {
		  GI_visMoniker   = 'O', "OK";
        GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
		  HINT_SEEK_REPLY_BAR;
		  HINT_DEFAULT_DEFAULT_ACTION;
	 }


	 @object GenInteractionClass QuickTipsGroup = {
		  GI_comp = @QTip1;
	 }

	 @object GenInteractionClass QTip1 = {
		  GI_comp = @QTip1GlyphHolder, @QTip1Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }

	 @object GenInteractionClass QTip1GlyphHolder = {
		  GI_comp = @QTip1Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 60, 0,0};
        /* ^^^ is based on the width of the widest icon */
	 }

	 @object GenGlyphClass QTip1Glyph = {
		  GI_visMoniker = list { @QTip1Moniker };
	 }

	 @object GenTextClass QTip1Text = {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "To move a marble, click on it with the left mouse button. You can only move a marble if you can jump it over another marble.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 325, 0, 0};
	 }


@end QTipsResource


/*=========================================================================*/



/*=========================================================================*/



/* size_x and size_y must be odd values */

void HiHoMake(byte* hiho_field, word size)
{
    word pos = size * size;
    word posx, posy ;

    @send HiHoApp::MSG_GEN_APPLICATION_MARK_BUSY() ;

    for (pos--; pos!=(word)(-1); pos--)
        hiho_field[pos] = 0 ;

    num_pegs = 0 ;

    for (pos=posy=0; posy<size; posy++)  {
        for (posx=0; posx<size; posx++, pos++)  {
            if (((posx>=third) && (posx < two_thirds)) ||
                ((posy>=third) && (posy < two_thirds)))  {
                hiho_field[pos] = HIHO_PEG_SPOT_BIT |
                                  HIHO_PEG_THERE_BIT ;
                num_pegs++ ;
            }
        }
    }
    pos = (size>>1)*size + (size>>1) ;
    hiho_field[pos] &= ~HIHO_PEG_THERE_BIT ;
    total_pegs = --num_pegs ;

    @send HiHoApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}
/*-------------------------------------------------------------------------*/
void HiHoDraw(GStateHandle gstate,
              RectDWord *rect)
{
    word start_x, start_y, end_x, end_y ;
    word x, y ;
    word pos ;
    word x_at, y_at ;
    byte value ;

    start_x = ((word)(rect->RD_left)) / SQUARE_SIZE ;
    start_y = ((word)(rect->RD_top)) / SQUARE_SIZE ;
    end_x = (((word)(rect->RD_right)) / SQUARE_SIZE) ;
    end_y = (((word)(rect->RD_bottom)) / SQUARE_SIZE) ;

    if (start_x != 0)
       start_x-- ;
    if (start_y != 0)
       start_y-- ;
    if (end_x >= size)
       end_x = size-1 ;
    if (end_y >= size)
       end_y = size-1 ;

    y_at = SQUARE_SIZE * start_y ;
    for (y=start_y; y<=end_y; y++, y_at += SQUARE_SIZE)  {
        x_at = SQUARE_SIZE * start_x ;
        pos = quick_hiho(start_x, y) ;
        for (x=start_x;x<=end_x; x++, pos++, x_at += SQUARE_SIZE)  {
            if ((value=hiho_field[pos])!=0)  {
					 MemLock(OptrToHandle(@MarbleMoniker));
					 if (value&HIHO_PEG_THERE_BIT)  {
						  if (value & HIHO_PEG_INVERT_BIT)  {
								GrDrawBitmap(gstate,
											x_at,
											y_at,
											(Bitmap*)LMemDeref(@CMarbleMoniker),
											NULL) ;
						  } else {
								GrDrawBitmap(gstate,
                                 x_at,
                                 y_at,
											(Bitmap*)LMemDeref(@MarbleMoniker),
											NULL) ;
						  }
                } else {
						  if (value & HIHO_PEG_INVERT_BIT)  {
								GrDrawBitmap(gstate,
											x_at,
											y_at,
											(Bitmap*)LMemDeref(@CHoleMoniker),
											NULL) ;
						  } else {
						  GrDrawBitmap(gstate,
                                 x_at,
                                 y_at,
											(Bitmap*)LMemDeref(@HoleMoniker),
											NULL) ;
						  }
                }
					 MemUnlock(OptrToHandle(@MarbleMoniker));
				}
        }
    }
}
/*-------------------------------------------------------------------------*/
void HiHoPlaySound(MemHandle soundHandle)
{
 word 		tempo = 8;


	 if (g_sound == SOUND_SYSTEM)
		 /* this routine abides by syst sound setting */
		 UserStandardSound(SST_CUSTOM_SOUND, soundHandle, 1);
	 else if (g_sound == SOUND_OFF)  return;
	 else {
		 /* this routine doesn't check syst sound setting -
		  * but we need to supply the tempo */
		 SoundPlayMusic(soundHandle, SP_GAME, tempo, EOSF_UNLOCK);
		 }
}

/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
	 FileHandle fhandle ;
	 Boolean		initError, tips;

    @callsuper() ;

    @call HiHoApp::MSG_GEN_APPLICATION_INSTALL_TOKEN() ;

	 SoundAllocMusic(jumpSoundBuf, 3, &jumpSound);
	 SoundAllocMusic(noMoveSoundBuf, 1, &noMoveSound);
	 SoundAllocMusic(winSoundBuf, 1, &winSound);
	 SoundAllocMusic(loseSoundBuf, 1, &loseSound);

	 /* check for quick tips */
	 initError = InitFileReadBoolean("HiHo", "showTips", &tips);
	 if (initError) tips = TRUE;
	 if (tips) {
		 @send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 TRUE);
		 @send QTipsDialogBox::MSG_GEN_INTERACTION_INITIATE();
		 }
	 else
		 @send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 FALSE);
	 /* check for sound */
	 initError = InitFileReadInteger("HiHo", "sound", &g_sound);
	 if (initError) g_sound = SOUND_SYSTEM;
	 @call SoundGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(g_sound, FALSE) ;

	 FilePushDir() ;
    FileSetCurrentPath(hiho_drive, hiho_relativePath) ;
    FileCreateDir(hiho_path) ;
    FileSetCurrentPath(hiho_drive, hiho_path) ;


    fhandle = FileOpen(hiho_state_file, FILE_ACCESS_R|FILE_DENY_W) ;

    if (fhandle!=NullHandle)  {
        /* Make sure file at beginning */
        FilePos(fhandle, 0, FILE_POS_START) ;
        FileRead(fhandle, &size, sizeof(word), FALSE) ;
        FileRead(fhandle, hiho_field, sizeof(byte)*size*size, FALSE) ;
        FileRead(fhandle, &game_mode, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_sec, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_min, sizeof(byte), FALSE) ;
        FileRead(fhandle, &time_hour, sizeof(byte), FALSE) ;
        FileRead(fhandle, &num_pegs, sizeof(word), FALSE) ;
        FileRead(fhandle, &total_pegs, sizeof(word), FALSE) ;
        FileRead(fhandle, &player_score, sizeof(word), FALSE) ;
		  FileRead(fhandle, &selection_size, sizeof(byte), FALSE) ;
        FileClose(fhandle, FALSE) ;
//		  third = size_table[selection_size][0] ;
//		  two_thirds = size_table[selection_size][1] ;

		  @call HiHoView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
                            (size*SQUARE_SIZE),
                            (size*SQUARE_SIZE),
                            0,
                            0) ;
		  @call HiHoSizeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection_size, FALSE) ;
	 }

		  third = size_table[selection_size][0] ;
		  two_thirds = size_table[selection_size][1] ;
	 @send process::MSG_VIEW_HIHO_NEW() ;

	 FilePopDir() ;

}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
	 FileHandle fhandle ;
    Boolean		tips;

    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    timer_going = FALSE ;

	 SoundStopMusic(jumpSound);
	 SoundFreeMusic(jumpSound);
	 SoundStopMusic(noMoveSound);
	 SoundFreeMusic(noMoveSound);
	 SoundStopMusic(winSound);
	 SoundFreeMusic(winSound);
	 SoundStopMusic(loseSound);
	 SoundFreeMusic(loseSound);

	 FilePushDir() ;
    FileSetCurrentPath(hiho_drive, hiho_relativePath) ;
    FileCreateDir(hiho_path) ;
    FileSetCurrentPath(hiho_drive, hiho_path) ;
    FileDelete(hiho_state_file) ;

    fhandle = FileCreate(hiho_state_file,
              FILE_CREATE_TRUNCATE |
              FILE_ACCESS_RW |
              FILE_DENY_NONE,
              FILE_ATTR_NORMAL) ;

    if (fhandle!=NullHandle)  {
        /* Make sure file at beginning */
        FilePos(fhandle, 0, FILE_POS_START) ;
        FileWrite(fhandle, &size, sizeof(word), FALSE) ;
        FileWrite(fhandle, hiho_field, sizeof(byte)*size*size, FALSE) ;
        FileWrite(fhandle, &game_mode, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_sec, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_min, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &time_hour, sizeof(byte), FALSE) ;
        FileWrite(fhandle, &num_pegs, sizeof(word), FALSE) ;
        FileWrite(fhandle, &total_pegs, sizeof(word), FALSE) ;
        FileWrite(fhandle, &player_score, sizeof(word), FALSE) ;
		  FileWrite(fhandle, &selection_size, sizeof(byte), FALSE) ;
		  FileClose(fhandle, FALSE) ;
    }
    FilePopDir() ;

	 /* set the quick tips if not default */
	 tips = @call ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(
																	 SHOW_ON_STARTUP);
	 InitFileWriteBoolean("HiHo", "showTips", tips);
	 InitFileWriteInteger("HiHo", "sound", g_sound);

	 return (@callsuper()) ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_SOUND_CHANGED
{
	 g_sound = selection ;
}

/*-------------------------------------------------------------------------*/
@method HiHoContentClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    RectDWord    rect ;

    @call HiHoView::MSG_GEN_VIEW_GET_VISIBLE_RECT(&rect) ;
    gstate = GrCreateState(win);
    GrBeginUpdate(gstate);

    HiHoDraw(gstate,&rect);

    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_VIEW_INVALIDATE
{
    WindowHandle win ;
    GStateHandle gstate ;

    win = @call HiHoView::MSG_GEN_VIEW_GET_WINDOW() ;
    gstate = GrCreateState(win) ;
    GrInvalRect(gstate, 0, 0, 2000,2000) ;
    GrDestroyState(gstate) ;
    @call HiHoContent::MSG_VIS_INVALIDATE();
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_VIEW_HIHO_NEW
{
    HiHoMake(hiho_field, size) ;
    @call process::MSG_VIEW_INVALIDATE() ;
    @call HiHoView::MSG_GEN_UPDATE_VISUAL(VUM_NOW) ;
    game_mode = 0 ;
    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    @call HiHoTimer::MSG_HIHO_RESET_TIMER() ;
    player_score = (word)0x7FFF ;
    @call process::MSG_HIHO_UPDATE_SCORE() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_SIZE_CHANGED
{
    word answer = IC_YES ;

    if (selection!=selection_size) {
        if (game_mode == 1)  {
            answer = UserStandardDialogOptr(
                NullOptr,
                NullOptr,
                NullOptr,
                NullOptr,
		        @HiHoNewGameMsg,
		        (CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
		        (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET));
        }

        if (answer == IC_YES)  {
            selection_size = selection ;
            third = size_table[selection][0] ;
            two_thirds = size_table[selection][1] ;
            size = third+two_thirds ;

            @send process::MSG_VIEW_HIHO_NEW() ;
            @send HiHoView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
                                (size*SQUARE_SIZE),
                                (size*SQUARE_SIZE),
                                0,
                                0) ;
        } else {
            @call HiHoSizeGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selection_size, FALSE) ;
        }
    }
}
/*-------------------------------------------------------------------------*/
void RemoveSelectAndChoices()
{
    sword pos ;
    word pos_x, pos_y ;

    for (pos=0, pos_y=0; pos_y<size; pos_y++)  {
        for (pos_x=0; pos_x<size; pos_x++, pos++)  {
            if (hiho_field[pos] & HIHO_PEG_INVERT_BIT)  {
                hiho_field[pos] &= ~(HIHO_PEG_INVERT_BIT) ;
                @call process::MSG_HIHO_REDRAW_SQUARE(pos_x, pos_y) ;
            }
        }
    }
}
/*-------------------------------------------------------------------------*/
byte TrySelection(word posx, word posy, word posx2, word posy2)
{
    word pos ;
    byte value ;

    if ((posx < size) && (posy < size))  {
        pos = quick_hiho(posx2, posy2) ;
        value = hiho_field[pos] ;
        if (value & HIHO_PEG_THERE_BIT)  {
            pos = quick_hiho(posx, posy) ;
            value = hiho_field[pos] ;
            if ((value & HIHO_PEG_SPOT_BIT) &&
                (!(value & HIHO_PEG_THERE_BIT)))  {
                hiho_field[pos] |= HIHO_PEG_INVERT_BIT ;
                @call process::MSG_HIHO_REDRAW_SQUARE(posx, posy) ;
                return((byte)-1) ;
            }
        }
    }
    return(0) ;
}
/*-------------------------------------------------------------------------*/
Boolean CheckSelection(word posx, word posy, word posx2, word posy2)
{
    word pos ;
    byte value ;

    if ((posx < size) && (posy < size))  {
        pos = quick_hiho(posx2, posy2) ;
        value = hiho_field[pos] ;
        if (value & HIHO_PEG_THERE_BIT)  {
            pos = quick_hiho(posx, posy) ;
            value = hiho_field[pos] ;
            if ((value & HIHO_PEG_SPOT_BIT) &&
                (!(value & HIHO_PEG_THERE_BIT)))  {
                return(TRUE) ;
            }
        }
    }
    return(FALSE) ;
}
/*-------------------------------------------------------------------------*/
Boolean CheckNotAbleToMove()
{
    word posx, posy, pos ;
    word size_sqr = size*size ;
    word count ;

    for (posx=posy=pos=0; pos<size_sqr; pos++)  {
        if (hiho_field[pos] & HIHO_PEG_THERE_BIT)  {
            count = 0;
            if (CheckSelection(posx-2, posy,
                             posx-1, posy))  {
                count++ ;
            }
            if (CheckSelection(posx+2, posy,
                             posx+1, posy))  {
                count++ ;
            }
            if (CheckSelection(posx, posy-2,
                             posx, posy-1))  {
                count++ ;
            }
            if (CheckSelection(posx, posy+2,
                             posx, posy+1))  {
                count++ ;
            }
            if (count)
                return FALSE ;
        }
        posx++ ;
        if (posx==size)  {
            posx = 0 ;
            posy++ ;
        }
    }

    return TRUE ;
}
/*-------------------------------------------------------------------------*/
@method HiHoContentClass, MSG_META_START_SELECT
{
    word pos ;
    byte value ;
    word count ;
    word jump_x, jump_y ;

    if (game_mode < 2)  {
        if (game_mode == 0)  {
    /*
            if (timedBoolean)  {
    */
                @call HiHoTimer::MSG_HIHO_RESET_TIMER() ;
                timer_handle = TimerStart(TIMER_EVENT_CONTINUAL,
                                      @HiHoTimer,
                                      80,
                                      MSG_HIHO_TIMER_CHANGE,
                                      60,
                                      &timer_id) ;
                timer_going = TRUE ;
    /*
            }
    */
            game_mode = 1 ;
        }
        xPosition /= SQUARE_SIZE ;
        yPosition /= SQUARE_SIZE ;

        pos = quick_hiho(xPosition, yPosition) ;
        value = hiho_field[pos] ;
        /* Is the player clicking on a legal square? */
        count = 0 ;
        if (value & HIHO_PEG_SPOT_BIT)  {
            RemoveSelectAndChoices() ;
				if ((value & HIHO_PEG_THERE_BIT) && (inputState&BI_B0_DOWN))  {
					 if (TrySelection(xPosition-2, yPosition,
											xPosition-1, yPosition))  {
						  jump_x = xPosition-2 ;
						  jump_y = yPosition ;
						  count++ ;
					 }
					 if (TrySelection(xPosition+2, yPosition,
											xPosition+1, yPosition))  {
						  jump_x = xPosition+2 ;
						  jump_y = yPosition ;
						  count++ ;
					 }
					 if (TrySelection(xPosition, yPosition-2,
											xPosition, yPosition-1))  {
						  jump_x = xPosition ;
						  jump_y = yPosition-2 ;
						  count++ ;
					 }
					 if (TrySelection(xPosition, yPosition+2,
											xPosition, yPosition+1))  {
						  jump_x = xPosition ;
						  jump_y = yPosition+2 ;
						  count++ ;
					 }
					 if (count)  {
						  hiho_field[pos] |= HIHO_PEG_INVERT_BIT ;
						  @call process::MSG_HIHO_REDRAW_SQUARE(xPosition, yPosition) ;
						  select_x = xPosition ;
						  select_y = yPosition ;
						  if (count==1)  {
								value = HIHO_PEG_INVERT_BIT|HIHO_PEG_SPOT_BIT ;
								xPosition = jump_x ;
								yPosition = jump_y ;
								RemoveSelectAndChoices() ;
						  }
					 } else {
						  select_y = select_x = 0xFF ;
					 }
				}
				if (!(value & HIHO_PEG_THERE_BIT))  {
					 if ((select_x < size) && (value & HIHO_PEG_INVERT_BIT))  {
						  HiHoPlaySound(jumpSound);
						  jump_x = (select_x+xPosition)>>1 ;
						  jump_y = (select_y+yPosition)>>1 ;
						  pos = quick_hiho(select_x, select_y) ;
						  hiho_field[pos] &= (~HIHO_PEG_THERE_BIT) ;
						  @call process::MSG_HIHO_REDRAW_SQUARE(select_x, select_y) ;
						  pos = quick_hiho(jump_x, jump_y) ;
						  hiho_field[pos] &= (~HIHO_PEG_THERE_BIT) ;
						  @call process::MSG_HIHO_REDRAW_SQUARE(jump_x, jump_y) ;
						  pos = quick_hiho(xPosition, yPosition) ;
						  hiho_field[pos] |= HIHO_PEG_THERE_BIT ;
						  @call process::MSG_HIHO_REDRAW_SQUARE(xPosition, yPosition) ;
						  num_pegs-- ;
						  if (num_pegs==1)  {
								pos = quick_hiho(size>>1, size>>1) ;
								if (hiho_field[pos] & HIHO_PEG_THERE_BIT)  {
									 @call process::MSG_HIHO_COMPLETED() ;
								} else {
									 @call process::MSG_HIHO_DID_NOT_WIN() ;
								}
						  } else {
								if (CheckNotAbleToMove())
									 @call process::MSG_HIHO_DID_NOT_WIN() ;
						  }
					 }
                else HiHoPlaySound(noMoveSound);
				}
            else HiHoPlaySound(noMoveSound);
		  }
        else HiHoPlaySound(noMoveSound);

	 }
	 retVal->flags = MRF_PROCESSED ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_META_CLIPBOARD_COPY
{
	 ClipboardItemHeader *headerMem ;
	 MemHandle           headerMemHandle ;
	 VMFileHandle        transferVMFile ;
	 VMBlockHandle       dataVMBlock ;
    VMBlockHandle       headerVMBlock ;
    GStateHandle        gstate;
    RectDWord           rect = {0,0,2000,2000} ;

    @send HiHoApp::MSG_GEN_APPLICATION_MARK_BUSY() ;
    transferVMFile = ClipboardGetClipboardFile() ;

    gstate = GrCreateGString(transferVMFile, GST_VMEM, &dataVMBlock);
    HiHoDraw(gstate,&rect);
    GrEndGString(gstate);

    headerVMBlock = VMAlloc(transferVMFile, sizeof(ClipboardItemHeader), 1111) ;
    headerMem = (ClipboardItemHeader *)VMLock(
                 transferVMFile, headerVMBlock, &headerMemHandle) ;
    headerMem->CIH_owner = ConstructOptr(GeodeGetProcessHandle(), 0) ;
    headerMem->CIH_flags = 0 ;
    headerMem->CIH_name[0] = 'H' ;
    headerMem->CIH_name[1] = 'i' ;
    headerMem->CIH_name[2] = 'h' ;
    headerMem->CIH_name[3] = 'o' ;
    headerMem->CIH_name[4] = '\0' ;
    headerMem->CIH_formatCount = 1;
    headerMem->CIH_sourceID = 0 ;
    headerMem->CIH_formats[0].CIFI_format =
        FormatIDFromManufacturerAndType(
             MANUFACTURER_ID_GEOWORKS,
             CIF_GRAPHICS_STRING) ;
    headerMem->CIH_formats[0].CIFI_vmChain =
        (VMChain)(((dword)(dataVMBlock))<<16L) ;
    headerMem->CIH_formats[0].CIFI_extra1 = 0 ;
    headerMem->CIH_formats[0].CIFI_extra2 = 0 ;
    VMUnlock(headerMemHandle) ;
    ClipboardRegisterItem(BlockIDFromFileAndBlock(transferVMFile,
        headerVMBlock),
        0) ;
    @send HiHoApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_COMPLETED
{
    word id ;

    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    game_mode = 2 ;
    TimerStart(
        TIMER_EVENT_ONE_SHOT,
        oself,
        5,
        MSG_HIHO_COMPLETED2,
        0,
        &id) ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_COMPLETED2
{

	 HiHoPlaySound(winSound);

	 UserDoDialog(@HiHoCompletedBox) ;

	 @send HighScoreControl::MSG_HIGH_SCORE_ADD_SCORE(
												  (dword) player_score, 0);

}

/*-------------------------------------------------------------------------*/
@method HiHoTimerClass, MSG_HIHO_CHANGE_TIME
{
	 char new_time[10] ;

	 new_time[0] = '0'+time_hour/10;
	 new_time[1] = '0'+time_hour%10;
	 new_time[2] = ':';

	 new_time[3] = '0'+time_min/10;
	 new_time[4] = '0'+time_min%10;
	 new_time[5] = ':';

	 new_time[6] = '0'+time_sec/10;
	 new_time[7] = '0'+time_sec%10;
	 new_time[8] = 0;

	 @call HiHoTimer::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(new_time, VUM_NOW) ;
}
/*-------------------------------------------------------------------------*/
@method HiHoTimerClass, MSG_HIHO_TIMER_CHANGE
{
    time_sec++ ;
    if (time_sec==60)  {
        time_sec = 0 ;
        time_min++ ;
        if (time_min==60)  {
            time_min = 0 ;
            time_hour++ ;
            if (time_hour == 100)  {
                time_hour = 0 ;
            }
        }
    }
    @send HiHoTimer::MSG_HIHO_CHANGE_TIME() ;
    @send process::MSG_HIHO_UPDATE_SCORE() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoTimerClass, MSG_HIHO_RESET_TIMER
{
    time_sec = time_min = time_hour = 0 ;
    @send HiHoTimer::MSG_HIHO_CHANGE_TIME() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_REDRAW_SQUARE
{
    WindowHandle win ;
    GStateHandle gstate ;
    RectDWord    rect = {0,0,2000,2000} ;

    rect.RD_left = SQUARE_SIZE*pos_x ;
    rect.RD_top = SQUARE_SIZE*pos_y ;
    rect.RD_right = SQUARE_SIZE*(pos_x+1) ;
    rect.RD_bottom = SQUARE_SIZE*(pos_y+1) ;

    win = @call HiHoView::MSG_GEN_VIEW_GET_WINDOW() ;
    gstate = GrCreateState(win) ;

	 GrInvalRectDWord(gstate, &rect) ;

	 GrDestroyState(gstate) ;
}
/*-------------------------------------------------------------------------*/
char *convert_word_to_str(char *buffer, word value)
{
    word power = 10000 ;
    byte flag = 0 ;
    word digit = 0 ;

    while (power)  {
        digit = '0' + (value/power) ;
        if ((digit!='0')||(power==1))
            flag |= 1 ;

        if (flag)  {
            *(buffer++) = digit ;
            value %= power ;
        }
        power /= 10 ;
    }
    *buffer = '\0' ;

    return buffer ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_UPDATE_SCORE
{
    char buffer[30] ;
    sword score_time ;

    score_time = ((sword)time_hour)*360 + ((sword)time_min)*6 + (((sword)time_sec/10)) ;
    score_time = total_pegs - score_time ;
    if (score_time > 0)  {
        if (score_time < player_score)  {
            player_score = score_time ;
				sprintf(buffer, "%d", player_score);
				@call HiHoScore::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buffer, VUM_NOW) ;
        }
    }
}

/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_DID_NOT_WIN
{
    word id ;

    if (timer_going)  {
        TimerStop(timer_handle, timer_id) ;
        timer_going = FALSE ;
    }
    TimerStart(
        TIMER_EVENT_ONE_SHOT,
        oself,
        5,
        MSG_HIHO_DID_NOT_WIN2,
        0,
        &id) ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_DID_NOT_WIN2
{
	 HiHoPlaySound(loseSound);
	 UserDoDialog(@HiHoWrongCompletionBox) ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_ROTATE_LEFT
{
    byte hiho_copy[441] ;
    word posx, posy, pos, pos_copy ;

    for (pos=posy=0; posy<size; posy++)  {
        for (posx=0; posx<size; posx++, pos++)  {
            pos_copy = quick_hiho(posy, (size-posx-1)) ;
            hiho_copy[pos_copy] = hiho_field[pos] ;
        }
    }
    memcpy(hiho_field, hiho_copy, 441) ;
    @call process::MSG_VIEW_INVALIDATE() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoProcessClass, MSG_HIHO_ROTATE_RIGHT
{
    byte hiho_copy[441] ;
    word posx, posy, pos, pos_copy ;

    for (pos=posy=0; posy<size; posy++)  {
        for (posx=0; posx<size; posx++, pos++)  {
            pos_copy = quick_hiho((size-posy-1), posx) ;
            hiho_copy[pos_copy] = hiho_field[pos] ;
        }
    }
    memcpy(hiho_field, hiho_copy, 441) ;
    @call process::MSG_VIEW_INVALIDATE() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoPauseInterClass, MSG_VIS_DRAW
{
    Rectangle rect;

    @call oself::MSG_VIS_GET_BOUNDS(&rect) ;
    GrSaveState(gstate) ;
    GrSetLineWidth(gstate, MakeWWFixed(1.0)) ;
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0) ;
    GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrDrawRect(gstate,
        rect.R_left-1,
        rect.R_top-1,
        rect.R_right+2,
        rect.R_bottom+2) ;
    GrFillRect(gstate,
        rect.R_left-2,
        rect.R_top-2,
        rect.R_right+1,
        rect.R_bottom+1) ;
    GrDrawRect(gstate,
        rect.R_left-2,
        rect.R_top-2,
        rect.R_right+1,
        rect.R_bottom+1) ;
    GrRestoreState(gstate) ;

    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoAppClass, MSG_META_LOST_TARGET_EXCL
{
    if (timer_going)
        TimerStop(timer_handle, timer_id) ;
    timer_going = FALSE ;
    if (game_mode == 1)  {
        @call HiHoView::MSG_GEN_SET_NOT_USABLE(VUM_NOW) ;
        @call HiHoLostFocusGlyph::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    }
    @callsuper() ;
}
/*-------------------------------------------------------------------------*/
@method HiHoAppClass, MSG_META_GAINED_TARGET_EXCL
{
    if (game_mode==1)  {
        if (timer_going == FALSE)  {
            timer_handle = TimerStart(TIMER_EVENT_CONTINUAL,
                                  @HiHoTimer,
                                  120,
                                  MSG_HIHO_TIMER_CHANGE,
                                  60,
                                  &timer_id) ;
            timer_going = TRUE ;
        }
    }
    @call HiHoLostFocusGlyph::MSG_GEN_SET_NOT_USABLE(VUM_NOW) ;
    @call HiHoView::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE) ;
    @callsuper() ;
}
/*-------------------------------------------------------------------------*/



