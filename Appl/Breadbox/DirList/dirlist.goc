/********************************************************************
 *
 *	Copyright (c) Geoworks 1998 -- All Rights Reserved
 *
 * PROJECT:	New Deal
 * MODULE:	Directory Lister
 * FILE:	dirlist.goc
 *
 * AUTHOR:	
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *
 *
 * DESCRIPTION:
 *
 *
 * RCS STAMP:
 *	$Id: dirlist.goc,v 1.2 98/06/11 23:49:25 joon Exp $
 *
 *******************************************************************/

/***********************************************************************
 *
 *
 * PROJECT:	Directory Lister
 * FILE:	dirls11.goc
 * AUTHOR:	John F. Howard 2/95
 *
 * DESCRIPTION:
 *	This file is source code for the Directory/File List application.
 * NEW FROM PREVIOUS:
 *	This is V1.1 for registered owners of V1.0
 *    Edit & Print menus plus 100% faster screen draws
 *		V1.1.1
 *		3/31/98	eliminate fax button
 *		3/31/98	limit to 500 files
 *		3/31/98	mark busy during listing
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <Ansi/string.h>
#include <fileEnum.h>   /* FileEnum() needs this include */
#include <gstring.h>    /* Need this for the file icon  */
#include <print.h>      /* These two for printing  */
@include <spool.goh>
@include <dirlistIcon.goh>   /* The icon information  */
#include <timedate.h>

/*
 ***************************************************************************
 *		Constants  & Global Variables
 ***************************************************************************
 */

 #define FEDOSINFO_SIZE 47        /* size of record returned by FileEnum() */
 #define DATE_AND_TIME_OFFSET 1   /* offsets to various info therein... */
 #define SIZE_OFFSET 5
 #define NAME_OFFSET 9
 int lastPage;   /* last page to print  */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


@class	DirListProcessClass, GenProcessClass;
@message void MSG_DIRLIST_LIST();
@endc
@classdecl	DirListProcessClass, neverSaved;

/* need this class for printing */
@class PrintGenTextClass, GenTextClass;
@endc
@classdecl	PrintGenTextClass;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */


/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/

@start AppResource ;

@object GenApplicationClass DirListApp = {
    GI_visMoniker = list {
    	@DLTextMoniker,
	@DLLCMoniker,		/* VGA color  */
	@DLLMMoniker,           /* VGA momo  */
	@DLCGAMoniker,          /* CGA  */
	@DLSCMoniker,           /* Small color  */
	@DLSMMoniker,           /* Small mono  */
	@DLTCMoniker,		/* Tiny color */
	@DLTMMoniker,		/* Tiny mono */
	@DLTCGAMoniker		/* Tiny CGA */
	}
    GI_comp = @DirListPrimary;		
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @DirListPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) = @DLEditControl,
                                             @DLPrintControl;

    ATTR_GEN_APPLICATION_PRINT_CONTROL = @DLPrintControl;

}

@visMoniker DLTextMoniker = "Directory Lister";

@end AppResource

/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/

@start Display ;

@object GenPrimaryClass DirListPrimary = {
    GI_visMoniker = "Directory Lister";
	 GI_comp = @DirListDialogBox, @DLFileMenu, @DLEditControl,
				  /*@DLPrintControl,*/ @DirListText;
    ATTR_GEN_HELP_CONTEXT = "TOC";    /* the help file Entry Point */
}

@object GenInteractionClass DLFileMenu = {
	 GI_comp = @DLPrintControl;
	 GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

@object PrintGenTextClass DirListText = {                  /* the main text window */
    GTXI_attrs = @default & ~GTA_USE_TAB_FOR_NAVIGATION   /* let TABs paste in */
			  | GTA_INIT_SCROLLING;
    GI_attrs = @default | GA_TARGETABLE;      /* for controllers & mouse selection */
    ATTR_GEN_TEXT_CHAR_ATTR = (ChunkHandle) @DLTextCharAttrs;   /* use mono font */
    HINT_EXPAND_WIDTH_TO_FIT_PARENT ;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT ;
    HINT_TEXT_WHITE_WASH_COLOR ;
}

@chunk VisTextCharAttr DLTextCharAttrs =
	CHAR_ATTR_FONT_SIZE(FID_DTC_URW_SANS, 12);


@end Display



@start	Interface ;

@object GenEditControlClass DLEditControl = {              /* the Edit menu */
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = GIGT_EDIT_MENU;
	 ATTR_GEN_CONTROL_PROHIBIT_UI = GECF_UNDO | GECF_CLIP_ART | GECF_CHAR_MAP; 
	 ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI = GECTF_UNDO ;
}
/* Amended from princ sample */
@object PrintControlClass DLPrintControl = {
    GI_states = (@default | GS_ENABLED);
    PCI_attrs = (@default & ~PCA_PAGE_CONTROLS);
//    GII_visibility = GIV_POPUP;

    ATTR_GEN_INTERACTION_GROUP_TYPE = GIGT_PRINT_GROUP;

    PCI_output = @DirListText;
    PCI_docNameOutput = @DirListText;
    PCI_docSizeInfo   = {(8*72),   /* width */
			 (10.5*72),    /* height */
			 PT_PAPER,    /* layout */
			 {(.25)*72, (.25)*72, (.25)*72, (.25)*72}};  /* margins */
    ATTR_GEN_CONTROL_PROHIBIT_UI = PRINTCF_FAX_TRIGGER;
}


@object GenInteractionClass DirListDialogBox = {
    GI_visMoniker = "Select a Directory";
    GI_comp = @DirListFileSelector, @DirListReplyBar;
    GII_visibility = (GIV_DIALOG);
}


@object GenFileSelectorClass DirListFileSelector = {
    /*eb disable ability to select files. */
    GFSI_attrs = (@default | FSA_SHOW_FILES_DISABLED);
    HINT_FILE_SELECTOR_NUMBER_OF_FILES_TO_SHOW = 7;   /* 12 is too many for CGA */
    HINT_FILE_SELECTOR_FILE_LIST_WIDTH = 40;
}

@object GenInteractionClass DirListReplyBar = {
    GI_comp = @DirListListTrigger;
    HINT_MAKE_REPLY_BAR;
}

@object GenTriggerClass DirListListTrigger = {
    GI_visMoniker = "List";
    GTI_destination = process;
    GTI_actionMsg = MSG_DIRLIST_LIST;
    GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE; /* to close DB
							     on click*/
}

@chunk char TooManyMsg[] = "Too many files. Not all files will be listed." ;

@end Interface

/*
 ***************************************************************************
 *		Code for DirListProcessClass
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_DIRLIST_LIST for DirListProcessClass
 *
 * DESCRIPTION:	Handle notification from File Selector that user has selected
 *		to list a directory (BIG assist from Ed Ballot)
 *
 ***********************************************************************/
@method DirListProcessClass, MSG_DIRLIST_LIST
{
/* declarations for getting the selected path */
    char *relativePath,
	 *standardPath,
	 *endOfFullPath;
     /* eb   I set bufSize to 2*Path_length + file long name
	because that is an appropriate size.  (I double Path_length
	since there is a chance that your app will find directories that
	are nestled more than five directories deep.)  These two
	constants can be found in file.h */
    word bufSize = (2*PATH_LENGTH) + FILE_LONGNAME_BUFFER_SIZE;
    MemHandle mh;
    ChunkHandle chRelative,
		chStandard;
    DiskHandle dhStandard;
    dword relativePathInfo;

/* declarations for FileEnum() */
    MemHandle bufCreated;
    word numNoFit;
    FileEnumParams params = {
		      (FESF_DIRS |
		      FESF_NON_GEOS |
		      FESF_GEOS_EXECS |
		      FESF_GEOS_NON_EXECS),	/* all files and dirs */
		      (FileExtAttrDesc *)FESRT_DOS_INFO,	/* DOS Info */
		      sizeof(FEDosInfo),
		      NULL,
		      FE_BUFSIZE_UNLIMITED,
		      0,
		      NULL,
		      NULL,
		      NULL,
		      NULL,
		      NULL
	}; 

    word numFiles;  /* for FileEnum()'s return value */
                    /* and to get # of pages to print */

/* declarations for getting the FileEnum info to the TextObj  */
    char *bufBaseAddress;  /* pointer derived from the MemHandle  */
    word count = 0;
    char fileSizeString[20];     /* for the UtilHex32ToAscii routine */
    dword *fileSizeDWordAddr;
    dword fileSizeDWord;
    char *fileSizePtr;
    UtilHexToAsciiFlags flags = 0 | UHTAF_NULL_TERMINATE;
    char *fileAttribsAddr;
    byte fileAttribs;
    byte passNum = 0;
    char lineBuffer[80];   /* one line for each dir or file */

 /* Declarations to get the file modification date and time   ----------  */
    FileDateAndTime *modifStuffAddr;

/* declarations to set the file size tab */
Tab DLTab = {
	  8 * 4 * PIXELS_PER_INCH, /* not sure why mpy by 8 but it works! */
	  TL_NONE | TT_RIGHT,
	  SDM_100,
	  0,
	  0,
	  NULL
	};

/*char nfStr[11];
char noStr[11];
dword textSize;


    /* mark app busy */
    @send DirListApp::MSG_GEN_APPLICATION_MARK_BUSY();
	 @send DirListText::MSG_META_SUSPEND();



/* I don't think this really does anything */
@call DirListText::MSG_VIS_TEXT_CLEAR_ALL_TABS(TEXT_ADDRESS_PAST_END, 0);

/* Sets the file size tab - thanx to Eric Weber */
@call DirListText::MSG_VIS_TEXT_SET_TAB(DLTab, TEXT_ADDRESS_PAST_END, 0);


/* Get the path of the current selection and put it in a buffer */

   /*   This section of code is compliments of Ed Ballot at Geoworks:

    /*
     * Allocate a single block that will contain two chunks which will
     * hold the pathname strings for the relative and the standard.
     * Since we want to use it right away, make it already MemLocked
     * with HF_LOCK.
     */
    mh = MemAlloc((2*bufSize), HF_SWAPABLE, HAF_LOCK);

    LMemInitHeap(mh, LMEM_TYPE_GENERAL, 0, sizeof(LMemBlockHeader),
		 2, STD_INIT_HEAP);

    chRelative = LMemAlloc(mh, bufSize);
    chStandard = LMemAlloc(mh, bufSize);

    /*
     * The block is already locked, so we can get pointers to the
     * two chunks.
     */
    relativePath = LMemDeref(ConstructOptr(mh, chRelative));
    standardPath = LMemDeref(ConstructOptr(mh, chStandard));

    /*
     * Get the path info as it relates to the nearest StandardPath.
     * Also get the StandardPath and other stuff in relativePathInfo.
     */
    relativePathInfo = @call DirListFileSelector::
	     MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(relativePath);

    /*
     * Now use construct the full path by converting the StandardPath
     * (which is a DiskHandle) to its string equivalent and tack on
     * the relative path.  Since FileConstructFullPath returns a pointer
     * to the end of the string, we will save standardPath to point to
     * the start of the string and pass endOfFullPath, to wind up pointing
     * to the end of the string.
     */
    dhStandard = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(relativePathInfo);
    endOfFullPath = standardPath;
    FileConstructFullPath(&endOfFullPath, bufSize, dhStandard,
			  relativePath, TRUE);

/*  Now put the selection path info into the text object*/

    @call DirListText::MSG_VIS_TEXT_REPLACE_ALL_PTR(standardPath, 0);
    @call DirListText::MSG_VIS_TEXT_APPEND_PTR("\r  ", 3); /* add a CR and 2 spaces */

   /* THANKS ED! */

/*  ------------------------------------------------------------------- */
/* Since changing the dir/sub-dir in FileSel does NOT change the
   current path we need do do this ourselves...
   Tell Directory Lister which dir/sub-dir has been selected */

    FileSetCurrentPath(dhStandard, relativePath);

    MemUnlock(mh);   /*now unlock & free the block  */
    MemFree(mh);

/* get the file DOS information using FileEnum()...
 * FileEnum returns the number of files enumerated  */

  numFiles = FileEnum(&params, &bufCreated, &numNoFit);

/*  and put them into the Text Object  */

    /* TESTING ==== put up a notification box */
/*    UtilHex32ToAscii(nfStr, (dword) numFiles, flags);
    UtilHex32ToAscii(noStr, (dword) numNoFit, flags);


    UserStandardDialog((char*)0,
			  (char*)0,
			  noStr,
			  nfStr,
			  "Total files:\001  not enumd: \002 ",
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));

  /* try this */
  if (numFiles > 500)  {
    MemLock(OptrToHandle(@TooManyMsg));
    UserStandardDialog((char*)0,
			  (char*)0,
			  (char*)0,
			  (char*)0,
			  LMemDeref(@TooManyMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
    MemUnlock(OptrToHandle(@TooManyMsg));
	numFiles = 500;
	}




  /* first lock the buffer created by FileEnum() */
  bufBaseAddress = (char *)MemLock(bufCreated);

  /* grab the DOS info from the buffer created by FileEnum()
      * the structure is:
      *   a ByteFlag of DOS attributes
      *   a DwordFlag of mod date and time
      *   a Dword of file size
      *   36 bytes of file name (null term'd)
      *   a word of path info
      * for a total record length of 47 bytes.  */

  while (count < numFiles) {

	/* we'll do this in 2 passes...
	   on the first pass we'll get the directories
	   on the second pass we'll get the files */

	/* initialize the line buffer */
	*lineBuffer = NULL;

	/* check the file attributes  */
	fileAttribsAddr = bufBaseAddress + (count * FEDOSINFO_SIZE);
        fileAttribs = *fileAttribsAddr;

	/* if it is a subdirectory on the subdir pass */
	if ((fileAttribs & FA_SUBDIR) && (passNum == 0))
	   {  
	   /* buffer the directory name  */
	   strcat(lineBuffer, ((bufBaseAddress + NAME_OFFSET)+(count * FEDOSINFO_SIZE)));
           strcat(lineBuffer, "\t<DIR>\t");   /* add DIR descriptor */
	   fileSizePtr = fileSizeString;  /* to init fSP for use in
					     mod date&time section */
	   }

        /* if it is a file and on the file pass */
	if (((fileAttribs & FA_SUBDIR) == 0) && (passNum == 1))
	   {
	   /* buffer the file name  */
	   strcat(lineBuffer, ((bufBaseAddress + NAME_OFFSET)+(count * FEDOSINFO_SIZE)));
	   strcat(lineBuffer, "\t"); /* add tab */
	   /* get the file size and buffer it */
	   fileSizeDWordAddr = (dword *)((bufBaseAddress + SIZE_OFFSET)+(count * FEDOSINFO_SIZE));
	   fileSizeDWord = *fileSizeDWordAddr;
	   fileSizePtr = fileSizeString;
	   UtilHex32ToAscii(fileSizePtr, fileSizeDWord, flags);
	   strcat(lineBuffer, fileSizePtr);
	   strcat(lineBuffer, "\t"); /* add tab */
	   }

        /* if it is a file on the subdir pass */
	if (((fileAttribs & FA_SUBDIR) == 0) && (passNum == 0))
	   {
	   count++;     /* increment the counter */
           /* see if we need to increment the pass counter */
	   if ((count == numFiles) && (passNum == 0))
	      {
	      count = 0;  /* reset count to do files */
	      passNum = 1;  /* done with sub-directories */
              }
	   continue;  /* don't do anything else - go to next entry */
           }

	/* if it is a subdir on the file pass */
	if ((fileAttribs & FA_SUBDIR) && (passNum == 1))
	   {
	   count++;
	   continue;
           }

  /*  Get the file's modification date and time...   */

	modifStuffAddr = (FileDateAndTime*)((bufBaseAddress + DATE_AND_TIME_OFFSET)+(count * FEDOSINFO_SIZE));

      LocalFormatFileDateTime( fileSizePtr, DTF_ZERO_PADDED_SHORT, modifStuffAddr);

	strcat(lineBuffer, fileSizePtr);
	strcat(lineBuffer, "\t");

      LocalFormatFileDateTime( fileSizePtr, DTF_HMS, modifStuffAddr);
	if (fileSizePtr[1] == ':')
          strcat(lineBuffer, "0");
       
	strcat(lineBuffer, fileSizePtr);
	strcat(lineBuffer, "\t");

  /*  Convert to ASCII and put after file size...  */


  /*  Get the file's DOS attributes (A,S,H,R ...   */
	if (fileAttribs & FA_ARCHIVE)              /* doess it require back-up? */
	    strcat(lineBuffer, "A ");

	if (fileAttribs & FA_SYSTEM)               /* is it a system file? */
	    strcat(lineBuffer, "S ");

	if (fileAttribs & FA_HIDDEN)               /* is it a hidden file? */
	    strcat(lineBuffer, "H ");

	if (fileAttribs & FA_RDONLY)               /* is it a read only? */
	    strcat(lineBuffer, "R ");

	strcat(lineBuffer, "\r  "); /* add a CR & spaces */

  /* print the line */
	   @call DirListText::MSG_VIS_TEXT_APPEND_PTR(lineBuffer, 0);


  /* do we have room for more ? */
/*  textSize = @call DirListText::MSG_VIS_TEXT_GET_TEXT_SIZE();
  if ((32767 - textSize) < 80)  {
	/* out of room */
/*	count = numFiles;

    UserStandardDialog((char*)0,
			  (char*)0,
			  (char*)0,
			  (char*)0,
			  "Text Obj has gotten too big.  Gotta stop.",
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));

	} */



	count++;     /* increment the counter */
        /* see if we need to increment the pass counter */
	if ((count == numFiles) && (passNum == 0))
	    {
	    count = 0;  /* reset count to do files */
	    passNum = 1;  /* done with sub-directories */
            }

	}

  /* unlock and free the block */
  MemUnlock(bufCreated);
  MemFree(bufCreated);

    /* mark app not busy */
	 @send DirListApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
  	 @send DirListText::MSG_META_UNSUSPEND();


  /* tell print controller how many pages */
  lastPage = 1 + (numFiles / 62);
  @call DLPrintControl::MSG_PRINT_CONTROL_SET_TOTAL_PAGE_RANGE(1, lastPage);

}

/************************************************************************/
@method PrintGenTextClass, MSG_PRINT_START_PRINTING
{
    word curPage;

    /* this loop is from concepts code display 23-1 */
    for (curPage=0; curPage < lastPage; curPage++)
    {
       GrSaveState(gstate);
       GrApplyTranslation(gstate, 0, -MakeWWFixed(curPage *((sdword)(10.5*72))));

	/* Draw current page */
       @call self::MSG_VIS_DRAW(DF_PRINT, gstate);

       GrRestoreState(gstate);
       GrNewPage(gstate, PEC_FORM_FEED);
    }

    @send DLPrintControl::MSG_PRINT_CONTROL_PRINTING_COMPLETED();
}

/***********************************************************************/
@method PrintGenTextClass, MSG_PRINT_GET_DOC_NAME
{
  char *string = "Directory List";
  @call printCtrlOD::MSG_PRINT_CONTROL_SET_DOC_NAME(string);
}
