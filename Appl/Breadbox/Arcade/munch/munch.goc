/***********************************************************************
 *
 * PROJECT:       Muncher's TNT
 * MODULE:        Muncher's TNT
 * FILE:          munch.goc
 *
 * DESCRIPTION:
 *      This file implements the "Muncher's TNT"-game for GEOS.
 *      (Single player game; mixture of Pacman and Dynablaster)
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *              Include files & general variables
 ***************************************************************************
 */

@include <stdapp.goh>
/*#include <stdlib.h>*/
#include <gstring.h>
#include <graphics.h>
#include <sound.h>
#include <math.h> 
#include <file.h>
#include <time.h>
#include <timedate.h>
#include <localize.h>
#include <sem.h>
#include <initfile.h>
@include "max.goh"
//@include "mysound.goh"
@include "sprites.goh"
//@include "grafdata.goh"
@include "topten.goh"
@include "bGegner.goh"
@include <Objects/colorC.goh>
@include <Objects/gViewCC.goh>
@include "monikers.goh"
@include "toolarge.goh"
@include <game.goh>

/* ******************* */

word  pillenzahl=1; /* Number of pills to be eaten */
byte  geldzahl=0; 	/* Number of collected coins */
GStateHandle myGstate;
Boolean bew=TRUE,nachLinks=TRUE,bewG=TRUE,stillFirst=TRUE;
Boolean schuss=FALSE,indestructable=FALSE,pause=FALSE,skipInput=FALSE;
Boolean joy=FALSE,gestartet=TRUE;
unsigned int centerX=0, centerY=0;

byte laby[20*11]; /* In the labyrinth there are 20 squares a row,
					 and 14 rows */
				  /* The sizes are only changed for testing purpose
					 The levels are still 20 * 14 and thus not well playable for now */

TimerHandle        HTimer;  /* fuer den Animations-Timer */
word               timerid;
TimerHandle        MTimer;  /* fuer den "indestructable"-Timer */
word               Mtimerid;
TimerHandle        EHTimer; /* fuer den Expl-Timer */
word               Etimerid;
TimerHandle        THTimer; /* fuer den TNT-Timer */
word               Ttimerid;
TimerHandle        H1Timer; /* fuer den Gegner1-Timer */
word               timerid1;
TimerHandle        H2Timer; /* fuer den Gegner2-Timer */
word               timerid2;
TimerHandle        H3Timer; /* fuer den Gegner3-Timer */
word               timerid3;
TimerHandle        H4Timer; /* fuer den Gegner4-Timer */
word               timerid4;

#define SHOW_ON_STARTUP   1

#define SOUND_ON 1
#define SOUND_OFF 2
#define SOUND_SYSTEM 3

#define STIMME1 0
#define STIMME2 1
#define STIMME3 2
#define STIMME4 3

#define LIFE1 1
#define LIFE2 2
#define LIFE3 3
#define LIFE4 4
#define LIFE5 5



const word pilleSongBuf[] = {
	SSE_CHANGE,             STIMME1, IP_TRUMPET, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME2, IP_DRAWBAR_ORGAN, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME1, HIGH_E, DYNAMIC_FFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, HIGH_E, DYNAMIC_FFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME1, HIGH_D, DYNAMIC_FFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, HIGH_D, DYNAMIC_FFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME1, HIGH_E, DYNAMIC_FFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, HIGH_E, DYNAMIC_FFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME1, HIGH_G, DYNAMIC_FFFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, HIGH_G, DYNAMIC_FFFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_OFF,          STIMME2,
	SSE_VOICE_OFF,          STIMME1,
	SSDTT_TICKS,            10,
	SSE_GENERAL,            GE_END_OF_SONG};

const word totSongBuf[] = {
	SSE_CHANGE,             STIMME1, IP_CHOIR_AAHS, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME2, IP_VOICE_OOHS, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	/*SSDTT_TICKS,            5,*/
	SSE_VOICE_ON,           STIMME1, LOW_E, DYNAMIC_FF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME2, LOW_E, DYNAMIC_FFFF,
	SSDTT_TICKS,            20,
	SSE_VOICE_ON,           STIMME1, LOW_D, DYNAMIC_FFFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME2, LOW_C, DYNAMIC_FF,
	SSDTT_TICKS,            40,
	SSE_VOICE_OFF,          STIMME2,
	SSE_VOICE_OFF,          STIMME1,
	SSDTT_TICKS,            10,
	SSE_GENERAL,            GE_END_OF_SONG};

const word gegSongBuf[] = {
	SSE_CHANGE,             STIMME1, IP_FX_CRYSTAL, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME2, IP_FX_SCI_FI, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	/*SSDTT_TICKS,            5,*/
	SSE_VOICE_ON,           STIMME1, MIDDLE_C, DYNAMIC_FFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME2, MIDDLE_C, DYNAMIC_FFFF,
	SSDTT_TICKS,            20,
	SSE_VOICE_ON,           STIMME1, LOW_E, DYNAMIC_FFFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_ON,           STIMME2, LOW_E, DYNAMIC_FFF,
	SSDTT_TICKS,            10,
	SSE_VOICE_OFF,          STIMME2,
	SSE_VOICE_OFF,          STIMME1,
	SSDTT_TICKS,            10,
	SSE_GENERAL,            GE_END_OF_SONG};

const word explSongBuf[] = {
	SSE_CHANGE,             STIMME1, IP_GUNSHOT, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME2, IP_BREATH_NOISE, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME3, IP_SEASHORE, IT_STANDARD_TABLE,
	SSE_CHANGE,             STIMME4, IP_HAND_CLAP, IT_STANDARD_TABLE,
	SSE_GENERAL,            GE_SET_PRIORITY, SP_GAME,
	SSDTT_TICKS,            0,
	SSE_VOICE_ON,           STIMME4, FR_HAND_CLAP, DYNAMIC_FFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME1, LOW_E, DYNAMIC_FFFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, LOW_D, DYNAMIC_FF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME3, HIGH_D, DYNAMIC_F,
	SSDTT_TICKS,            2,
	SSE_VOICE_ON,           STIMME1, MIDDLE_E, DYNAMIC_FFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME2, HIGH_E, DYNAMIC_FFF,
	SSDTT_TICKS,            3,
	SSE_VOICE_ON,           STIMME1, HIGH_G, DYNAMIC_FFFF,
	SSDTT_TICKS,            1,
	SSE_VOICE_ON,           STIMME4, FR_HAND_CLAP, DYNAMIC_FFFF,
	SSDTT_TICKS,            5,
	SSE_VOICE_OFF,          STIMME4,
	SSE_VOICE_OFF,          STIMME3,
	SSE_VOICE_OFF,          STIMME2,
	SSE_VOICE_OFF,          STIMME1,
	SSDTT_TICKS,            10,
	SSE_GENERAL,            GE_END_OF_SONG};


/* These are some vars I added or changed. Peter */

MemHandle pilleSong, totSong, explSong, gegSong;
word g_sound;
ColorQuad munchcolor/* = {C_LIGHT_CYAN, CF_INDEX, 0, 0}*/;
Boolean colorChanged = FALSE;
Boolean gameStarted = FALSE;
Boolean showpills = FALSE;
byte levelhigh;
/***************************************************************************
 *              Class & Message Definitions
 ***************************************************************************/

@class  MunchProcessClass, GenProcessClass;
	@message void MSG_START_TIMER();
	@message void MSG_TIMER_RANG();
	@message void MSG_START_INDES_TIMER();
	@message void MSG_INDES_TIMER_RANG();
	@message void MSG_EXPL_TIMER_RANG();
	@message void MSG_START_TNT_TIMER();
	@message void MSG_TNT_TIMER_RANG();
	@message void MSG_STOP_TIMER();
	@message void MSG_REDRAW_GAMEBOARD();
	@message void MSG_MUNCH_NEW_GAME();
	@message void MSG_MUNCH_OPT_ACK();
	@message void MSG_1_TIMER_RANG();
	@message void MSG_2_TIMER_RANG();
	@message void MSG_3_TIMER_RANG();
	@message void MSG_4_TIMER_RANG();
	@message void MSG_MUNCH_PAUSE();
	@message void MSG_MUNCH_CONT();
	@message void MSG_MUNCH_ENDE_ACK();
	@message void MSG_MUNCH_NAME_ACK();
	@message void MSG_MUNCH_SOUND_ACK();
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MUNCH_SOUND_CHANGED;
	@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MUNCH_LIVES_CHANGED;
	@message void MSG_MUNCH_LEVEL_CHANGED();
@endc   /* end of class definition */

@classdecl      MunchProcessClass, neverSaved;

/***************************************************************************
 *              UI Objects
 ***************************************************************************/
@start  AppResource;
/*-------------------------------------------------------------------------*/
@object GenApplicationClass MunchApp =
{
	GI_visMoniker = list { @MunchTextMoniker,@Moniker0,@Moniker1,@Moniker2 }
	GI_comp = @MunchPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @MunchPrimary;
	gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) = @MunchHelp,
														   @MunchColorControl,
														   @HighScoreControl;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) = @MunchColorControl;
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_STARTUP_LOAD_OPTIONS)= @MunchColorControl ;
	HINT_APP_IS_ENTERTAINING;
}
/*----------------------------------------------*/
@visMoniker MunchTextMoniker = "Muncher's TNT";
/*----------------------------------------------*/
@end    AppResource;
/*======================================================================*/
@start  Interface;
/*----------------------------------------------*/
@object GenPrimaryClass MunchPrimary  =
{
	GI_comp = @MunchMainGroup, @MunchGameMenu, @MunchOptionsMenu,
			  @MunchQTipsDialog, @MunchVerloren, @MunchGewonnen, @MunchEnde;
	HINT_SIZE_WINDOW_AS_DESIRED;
	HINT_DISPLAY_NOT_RESIZABLE;
	HINT_KEEP_INITIALLY_ONSCREEN;
	HINT_KEEP_ENTIRELY_ONSCREEN;
	HINT_CENTER_CHILDREN_HORIZONTALLY;
	HINT_CENTER_CHILDREN_VERTICALLY;
	HINT_CENTER_WINDOW;
	/*ATTR_GEN_HELP_CONTEXT = "TOC";*/
	HINT_PRIMARY_NO_HELP_BUTTON;
}
	/*----------------------------------------------*/
	@object GenInteractionClass MunchMainGroup =
	{
		GI_comp = @MunchPunkte, @MunchView;
		HINT_ORIENT_CHILDREN_VERTICALLY;
		HINT_CENTER_CHILDREN_HORIZONTALLY;
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY;
		HINT_MINIMUM_SIZE = {SST_PIXELS | maxX, SST_PIXELS | maxY + 30};
	}
		/*----------------------------------------------*/
		@object GenInteractionClass MunchPunkte =
		{
			GI_comp =  @MunchLeftGroup, @PunkteVal, @LebenVal, @LevelVal;
			HINT_ORIENT_CHILDREN_HORIZONTALLY;
			HINT_EXPAND_WIDTH_TO_FIT_PARENT;
			HINT_CENTER_CHILDREN_VERTICALLY;
		}
			/*----------------------------------------------*/
			@object GenInteractionClass MunchLeftGroup =
			{
				GI_comp = @MunchNewGameTrigger;
				HINT_EXPAND_WIDTH_TO_FIT_PARENT;
			}
				/*----------------------------------------------*/
				@object GenTriggerClass MunchNewGameTrigger =
				{
					GI_visMoniker = 'N',"New";
					GTI_actionMsg = MSG_MUNCH_OPT_ACK;
					GTI_destination = process;
				}
			/*----------------------------------------------*/
			@object GenValueClass PunkteVal =
			{
				GI_visMoniker = "Score:";
				GI_attrs = @default | GA_READ_ONLY;
				GVLI_displayFormat = GVDF_INTEGER;
				GVLI_value = MakeWWFixed(0.0);
				HINT_VALUE_NOT_INCREMENTABLE;
				HINT_VALUE_DIGITAL_DISPLAY;
				HINT_VALUE_NOT_DIGITALLY_EDITABLE;
			}
			/*----------------------------------------------*/
			@object GenValueClass LebenVal =
			{
				GI_visMoniker = "Lives:";
				GI_attrs = @default | GA_READ_ONLY;
				GVLI_displayFormat = GVDF_INTEGER;
				GVLI_value = MakeWWFixed(0.0);
				HINT_VALUE_NOT_INCREMENTABLE;
				HINT_VALUE_DIGITAL_DISPLAY;
				HINT_VALUE_NOT_DIGITALLY_EDITABLE;
			}
			/*----------------------------------------------*/
			@object GenValueClass LevelVal =
			{
				GI_visMoniker = "Level:";
				GI_attrs= @default | GA_READ_ONLY;
				GVLI_displayFormat = GVDF_INTEGER;
				GVLI_value = MakeWWFixed(1.0);
				HINT_VALUE_NOT_INCREMENTABLE;
				HINT_VALUE_DIGITAL_DISPLAY;
				HINT_VALUE_NOT_DIGITALLY_EDITABLE;
			}
		/*----------------------------------------------*/
		@object GenViewClass MunchView =
		{
			GVI_horizAttrs = (@default | GVDA_NO_LARGER_THAN_CONTENT) |
			 (GVDA_NO_SMALLER_THAN_CONTENT | GVDA_KEEP_ASPECT_RATIO);
			GVI_vertAttrs  = (@default | GVDA_NO_LARGER_THAN_CONTENT) |
			 (GVDA_NO_SMALLER_THAN_CONTENT | GVDA_KEEP_ASPECT_RATIO);
			GVI_color = {C_LIGHT_GRAY, CF_INDEX, 0, 0};
			GVI_content = process;
			GVI_docBounds = {0, 0, maxX, maxY};
			GI_attrs= @default | GA_READ_ONLY;
			GVI_attrs= (@default) | (GVA_DONT_SEND_PTR_EVENTS | GVA_DONT_SEND_KBD_RELEASES) ;
			HINT_SIZE_WINDOW_AS_DESIRED;
			ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
			HINT_PRESERVE_FOCUS;
		}
	/*----------------------------------------------*/
	@object GenInteractionClass MunchGameMenu =
	{
		GI_attrs = @default | GA_KBD_SEARCH_PATH ;
		GI_visMoniker = 'G', "Game" ;
		GI_comp        = @MunchNewGame,
						 @MunchQuickTips,
						 @MunchPauseTrigger,
						 @MunchContinueTrigger,
						 @HighScoreControl;
		GII_visibility = GIV_POPUP ;
		ATTR_GEN_INTERACTION_GROUP_TYPE
								  = (GIGT_FILE_MENU) ;
	}
		/*----------------------------------------------*/
		@object GenTriggerClass MunchNewGame =
		{
			GI_visMoniker = 'N',"New Game";
			GTI_actionMsg = MSG_MUNCH_OPT_ACK;
			GTI_destination = process;
		}
		/*----------------------------------------------*/
		@object GenTriggerClass MunchQuickTips =
		{
			GI_visMoniker   = 'Q', "Quick Tips" ;
			GTI_destination = @MunchQTipsDialog;
			GTI_actionMsg   = MSG_GEN_INTERACTION_INITIATE ;
			HINT_TRIGGER_BRINGS_UP_WINDOW;
		}
			/*----------------------------------------------*/
			@object GenInteractionClass MunchQTipsDialog =
			{
				  GI_visMoniker = "Muncher's TNT Quick Tips";
				  /* Onderstaande objecten bevinden zich in QTipsResource */
				  GI_comp = @GoalText,
							@QuickTipsGroup,
							@ShowOnStartupGroup,
							@OKTipsButton;
				  GII_visibility = GIV_DIALOG ;
				  GII_attrs = @default | GIA_MODAL | GIA_NOT_USER_INITIATABLE;
				  HINT_CENTER_CHILDREN_HORIZONTALLY ;
			}
		/*----------------------------------------------*/
		@object GenTriggerClass MunchPauseTrigger =
		{
			GI_visMoniker = 'P',"Pause";
			GI_kbdAccelerator = control 'p';
			GI_attrs = @default | GA_KBD_SEARCH_PATH;
			GTI_actionMsg = MSG_MUNCH_PAUSE;
			GTI_destination = process;
			GI_states = @default & ~GS_ENABLED;
		}
		/*----------------------------------------------*/
		@object GenTriggerClass MunchContinueTrigger =
		{
			GI_visMoniker = 'C',"Continue";
			GI_kbdAccelerator = control 'c';
			GI_attrs = @default | GA_KBD_SEARCH_PATH;
			GTI_actionMsg = MSG_MUNCH_CONT;
			GTI_destination = process;
			GI_states = @default & ~GS_ENABLED;
		}
		/*----------------------------------------------*/
		@object HighScoreClass HighScoreControl =
		{
			HSI_fileName = "Munch High Scores";
			HSI_creator = {"Mun1", 16431};
			HSI_highScoreTitle = "Muncher's TNT High Scores";
		}
	/*----------------------------------------------*/
	@object GenInteractionClass MunchOptionsMenu =
	{
		GI_attrs = @default | GA_KBD_SEARCH_PATH ;
		GI_comp = @MunchLevelTrigger,
				  @MunchLives,
				  @ColorChange,
				  @MunchSoundOpts,
				  @MunchBooleans;
		GII_visibility = GIV_POPUP ;
		ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_OPTIONS_MENU) ;
	}
		/*----------------------------------------------*/
			@object GenInteractionClass MunchLives =
			{
				GI_visMoniker = 'L',"Lives";
				GI_comp = @LivesGroup;
				GII_visibility = GIV_POPUP;
			}
				/*--------------------------------------------------*/
				@object GenItemGroupClass LivesGroup =
				{
					GI_comp = @Lives1,
							  @Lives2,
							  @Lives3,
							  @Lives4,
							  @Lives5;
					GIGI_selection = LIFE3;
					GIGI_destination = process;
					GIGI_applyMsg = MSG_MUNCH_LIVES_CHANGED;
				}
				/*----------------------------------------------*/
				@object GenItemClass Lives1 =
				{
					GI_visMoniker = '1', "1";
					GII_identifier = LIFE1;
				}
				/*----------------------------------------------*/
				@object GenItemClass Lives2 =
				{
					GI_visMoniker = '2', "2";
					GII_identifier = LIFE2;
				}
				/*----------------------------------------------*/
				@object GenItemClass Lives3 =
				{
					GI_visMoniker = '3', "3";
					GII_identifier = LIFE3;
				}
				/*----------------------------------------------*/
				@object GenItemClass Lives4 =
				{
					GI_visMoniker = '4', "4";
					GII_identifier = LIFE4;
				}
				/*----------------------------------------------*/
				@object GenItemClass Lives5 =
				{
					GI_visMoniker = '5', "5";
					GII_identifier = LIFE5;
				}
		/*----------------------------------------------*/
		@object GenInteractionClass MunchLevelTrigger =
		{
			GI_visMoniker = 'e', "Level";
			GI_attrs = @default | GA_KBD_SEARCH_PATH;
			GI_comp = @MunchLevel, @OkMunchLevel;
			GII_visibility = GIV_DIALOG;
		}
			/*----------------------------------------------*/
			@object GenValueClass MunchLevel =
			{
				GI_visMoniker = "Level:";
				GVLI_displayFormat = GVDF_INTEGER;
				GVLI_value = MakeWWFixed(1.0);
				GVLI_minimum = MakeWWFixed(1.0);
				GVLI_maximum = MakeWWFixed(20.0);
				HINT_VALUE_DIGITAL_DISPLAY;
			}
			/*----------------------------------------------*/
			@object GenTriggerClass OkMunchLevel =
			{
					GI_visMoniker = 'O',"OK";
					GTI_destination = process;
					GTI_actionMsg = MSG_MUNCH_LEVEL_CHANGED;
					GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
					ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_OK };
					HINT_SEEK_REPLY_BAR;
			}
		/*----------------------------------------------*/
		@object GenInteractionClass ColorChange =
		{
			GI_visMoniker   = 'o', "Color Change" ;
			GII_visibility  = GIV_DIALOG ;
			GI_comp         = @MunchColorControl;
		}
			/*----------------------------------------------*/
			@object ColorSelectorClass MunchColorControl =
			{
				GCI_output = process;
		      ATTR_GEN_CONTROL_PROHIBIT_UI = (CSF_RGB |
													 CSF_OTHER |
													 CSF_PATTERN |
													 CSF_OTHER |
													 CSF_DRAW_MASK);
			}
		/*----------------------------------------------*/
		@object GenBooleanGroupClass MunchBooleans =
		{
			GI_comp = @EatenPills;
		}
			/*----------------------------------------------*/
			@object GenBooleanClass EatenPills =
			{
				GI_visMoniker='S', "Show Eaten Pills";
				GI_attrs= @default;
				GBI_identifier = 1;
			}
		/*----------------------------------------------*/
		@object GenInteractionClass MunchSoundOpts =
		{
		  GI_visMoniker = 'S', "Sound" ;
		  GI_comp = @SoundGroup;
		  GII_visibility = GIV_POPUP;
		}
			/*----------------------------------------------*/
			@object GenItemGroupClass SoundGroup =
				{
					GI_comp = @SoundOn,
							  @SoundOff,
							  @SystemPref;
					GIGI_selection = SOUND_SYSTEM;
					GIGI_destination = process;
					GIGI_applyMsg = MSG_MUNCH_SOUND_CHANGED;
				}
				/*----------------------------------------------*/
				@object GenItemClass SoundOn =
				{
					GI_visMoniker = 'S', "Sound On";
					GII_identifier = SOUND_ON;
				}
				/*----------------------------------------------*/
				@object GenItemClass SoundOff =
				{
					GI_visMoniker = 'O', "Sound Off";
					GII_identifier = SOUND_OFF;
				}
				/*----------------------------------------------*/
				@object GenItemClass SystemPref =
				{
					GI_visMoniker = 'P', "Use System Preference";
					GII_identifier = SOUND_SYSTEM;
				}
	/*----------------------------------------------*/
	@object HelpControlClass MunchHelp =
	{
		GII_visibility = GIV_POPUP;
		ATTR_HELP_INITIAL_HELP = "TOC";
		HINT_SEEK_MENU_BAR;
	}
	/*----------------------------------------------*/
	@object GenInteractionClass MunchEnde =
	{
		GI_comp= @EndeGlyph, @EndeOK;
		GI_visMoniker = "The End";
		GII_type = GIT_NOTIFICATION;
		GII_visibility = GIV_DIALOG;
		GII_attrs = GIA_NOT_USER_INITIATABLE | GIA_MODAL;
		HINT_INTERACTION_POPOUT_HIDDEN_ON_STARTUP;
		HINT_INTERACTION_INFREQUENT_USAGE;
		HINT_SIZE_WINDOW_AS_DESIRED;
		HINT_CENTER_CHILDREN_HORIZONTALLY;
	}
/*----------------------------------------------*/
@object GenGlyphClass EndeGlyph = {
	GI_visMoniker = "Can't load level file.";
	HINT_SIZE_WINDOW_AS_DESIRED;
	HINT_CENTER_MONIKER;
}
/*----------------------------------------------*/
@object GenTriggerClass EndeOK = {
	GI_visMoniker = 'O',"OK";
	GTI_destination = process;
	GTI_actionMsg = MSG_MUNCH_ENDE_ACK;
	GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_OK };
	HINT_SEEK_REPLY_BAR;
}
/*----------------------------------------------*/
	@chunk char MunchPaused[] = "Paused";

@end Interface;
/*========================================================================*/
@start MuellInterface;
/*----------------------------------------------*/
@object GenTriggerClass VerlorenOK =
{
	GI_visMoniker = 'O',"OK";
	GTI_destination = process;
	GTI_actionMsg = MSG_MUNCH_ENDE_ACK;
	GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_OK };
	HINT_SEEK_REPLY_BAR;
}
/*----------------------------------------------*/
@object GenTriggerClass GewonnenOK =
{
	GI_visMoniker = 'O',"OK";
	GTI_destination = process;
	GTI_actionMsg = MSG_MUNCH_ENDE_ACK;
	GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE;
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND = { IC_OK };
	HINT_SEEK_REPLY_BAR;
}
/*----------------------------------------------*/
@end MuellInterface;
/*========================================================================*/
@start QTipsResource;
@include "Art/QTip1.goh"
@include "Art/QTip2.goh"
@include "Art/QTip3.goh"

	 /*----------------------------------------------*/
	 @object GenTextClass GoalText =
	 {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "The goal of the game is to control the Muncher and eat all the yellow pills before the ghosts eat you.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
	 }
	 /*----------------------------------------------*/
	 @object GenBooleanGroupClass ShowOnStartupGroup =
	 {
		  GI_comp = @ShowOnStartupBoolean;
	 }
	 /*----------------------------------------------*/
	 @object GenBooleanClass ShowOnStartupBoolean =
	 {
		  GI_visMoniker = 'S', "Show this Dialog box when Muncher's TNT starts";
		  GBI_identifier = SHOW_ON_STARTUP;
	 }
	 /*----------------------------------------------*/
	 @object GenTriggerClass OKTipsButton =
	 {
		  GI_visMoniker   = 'O', "OK";
		  GI_attrs = @default | GA_SIGNAL_INTERACTION_COMPLETE ;
		  HINT_SEEK_REPLY_BAR;
		  HINT_DEFAULT_DEFAULT_ACTION;
	 }
	 /*----------------------------------------------*/
	 @object GenInteractionClass QuickTipsGroup = {
		  GI_comp = @QTip1,
						@QTip2,
						@QTip3;
	 }
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip1 =
	 {
		  GI_comp = @QTip1GlyphHolder, @QTip1Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip1GlyphHolder =
	 {
		  GI_comp = @QTip1Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 80, 0,0};
	 }
	 /*----------------------------------------------*/
	 @object GenGlyphClass QTip1Glyph =
	 {
		  GI_visMoniker = list { @QTip1Moniker };
	 }
	 /*----------------------------------------------*/
	 @object GenTextClass QTip1Text =
	 {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "Use the arrow keys on your keyboard to control the Muncher.";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 400, 0, 0};
	 }
	 /*----------------------------------------------*/
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip2 =
	 {
		  GI_comp = @QTip2GlyphHolder, @QTip2Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip2GlyphHolder =
	 {
		  GI_comp = @QTip2Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 80, 0,0};
	 }
	 /*----------------------------------------------*/
	 @object GenGlyphClass QTip2Glyph =
	 {
		  GI_visMoniker = list { @QTip2Moniker };
	 }
	 /*----------------------------------------------*/
	 @object GenTextClass QTip2Text =
	 {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "The Muncher must avoid the ghosts. Each time a ghost catches the Muncher you lose a life. Press the spacebar to use the TNT against the ghosts. But watch out -- the ghosts will reappear in a few seconds!";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 400, 0, 0};
	 }
	 /*----------------------------------------------*/
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip3 =
	 {
		  GI_comp = @QTip3GlyphHolder, @QTip3Text ;
		  HINT_ORIENT_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
	 }
	 /*----------------------------------------------*/
	 @object GenInteractionClass QTip3GlyphHolder =
	 {
		  GI_comp = @QTip3Glyph;
		  HINT_CENTER_CHILDREN_HORIZONTALLY;
		  HINT_CENTER_CHILDREN_VERTICALLY;
		  HINT_FIXED_SIZE = {SST_PIXELS | 80, 0,0};
	 }
	 /*----------------------------------------------*/
	 @object GenGlyphClass QTip3Glyph =
	 {
		  GI_visMoniker = list { @QTip3Moniker };
	 }
	 /*----------------------------------------------*/
	 @object GenTextClass QTip3Text =
	 {
		  GI_attrs = @default | GA_READ_ONLY;
		  GTXI_text = "To get to the yellow pills that are behind steel and wooden walls, you must blow up the wooden walls. Move the Muncher to the wall and press the spacebar to place a stick of TNT. Move your Muncher away before the TNT explodes!";
		  ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
		  HINT_MINIMUM_SIZE = {SST_PIXELS | 400, 0, 0};
	 }
	 /*----------------------------------------------*/
@end QTipsResource;
/*========================================================================*/



/*-------------------------------------------------------------------------*/
void MunchPlaySound(MemHandle soundHandle)
{
	word 		tempo = 8;

	if (g_sound == SOUND_SYSTEM)
	   /* this routine abides by syst sound setting */
	   UserStandardSound(SST_CUSTOM_SOUND, soundHandle, 1);
	else
		if (g_sound == SOUND_OFF)
			return;
	else
	{
		 /* this routine doesn't check syst sound setting -
		  * but we need to supply the tempo */
		 SoundPlayMusic(soundHandle, SP_GAME, tempo, EOSF_UNLOCK);
	}
}



void drawHindernis(int x, int y)
/* WICHTIG: x,y sind laby-ARRAY-WERTE!!!!!!!!!!! */
{
	dword mcolor;
	mcolor = @call MunchView::MSG_GEN_VIEW_GET_COLOR();

	GrSetAreaColor(myGstate,
					   GVCD_FLAGS(mcolor),
					   ((GVCD_RED(mcolor)<<8) | GVCD_INDEX(mcolor)),
					   GVCD_BLUE(mcolor),
					   GVCD_GREEN(mcolor));

	GrFillRect(myGstate,
			   x*31,
			   y*29,
			   (x+1)*31,
			   (y+1)*29);

	if ((x<20) && (y<11))
	{
		switch(laby[x+y*20])
		{
			case istHolz:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Kasten);break;
			case istPille:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Pille);break;
			case istStahl:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Stahl);break;
			case istAbfall:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &PilleWeg);break;
			case istTNT:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &TNT);break;
			case istExpl:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Expl);break;
			case istAnanas:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Ananas);break;
			case istBluete:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Bluete);break;
			case istGeld:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Geld);break;
			case istKirsche:GrDrawImage(myGstate,x*31,y*29,IBS_1, (Bitmap*) &Kirsche);break;
		}/*switch*/
	}
}

void restoreBild(int x, int y)
{
	drawHindernis(x/31,y/29);
	if ((x % 31)!=0)
		drawHindernis((x/31)+1,y/29);
	if ((y % 29)!=0)
		drawHindernis(x/31,(y/29)+1);
}


void drawAll(GStateHandle gstate)          /* GState to draw to */
{
	byte x,y;
	pillenzahl=0;

	for (y=0;y<11;y++)
		for (x=0;x<20;x++)
		{
			drawHindernis(x,y);
			if (laby[x+y*20]==istPille)
				pillenzahl++;
		}

  /*Spieler*/
	if (nachLinks)
		if (bew)
			GrDrawImage(gstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMl1);
		else
			GrDrawImage(gstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMl2);
	else
		if (bew)
			GrDrawImage(gstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMr1);
		else
			GrDrawImage(gstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMr2);

  /*Gegner*/
	if (geg1Act)
	{
		if (bewG)
			GrDrawImage(gstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(gstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg2Act)
	{
		if (bewG)
			GrDrawImage(gstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(gstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	if (geg3Act)
	{
		if (bewG)
			GrDrawImage(gstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(gstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg4Act)
	{
		if (bewG)
			GrDrawImage(gstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(gstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	/*Draw the "Paused"-text*/
	if (pause)
	{
		GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
		GrSetFont(gstate, FID_DTC_URW_ROMAN, MakeWWFixed(36));
		MemLock(OptrToHandle(@MunchPaused));
		GrDrawText(gstate, 285, 115, LMemDeref(@MunchPaused), 0);
 //		GrDrawText(gstate, munchX+3, munchY+3, "Paused", 0);
		GrSetTextColor(gstate, CF_INDEX, C_WHITE, 0, 0);
		GrDrawText(gstate, 282, 112, LMemDeref(@MunchPaused), 0);
 //		GrDrawText(gstate, munchX, munchY, "Paused", 0);
		MemUnlock(OptrToHandle(@MunchPaused));
	}
}



/*
 ***************************************************************************
 *              Code for MunchProcessClass
 ***************************************************************************
 */

/***********************************************************************
 *              MSG_META_EXPOSED for MunchProcessClass
 ***********************************************************************
 * SYNOPSIS:        Redraw the recently-exposed portion of the View
 * PARAMETERS:      void (WindowHandle win)
 * SIDE EFFECTS:    the invalid region of the window is cleared out
 *
 * STRATEGY:        This message is sent by the windowing system when a
 *                  portion of the GenView has become invalid, either
 *                  because a window that was obscuring it has been moved,
 *                  or because some called GrInvalRect.
 *
 *                  We redraw the entire document, after telling the
 *                  graphics system we're drawing to the invalid portion
 *                  of the window.
 *
 ***********************************************************************/
@method MunchProcessClass, MSG_META_EXPOSED
{
	GrBeginUpdate(myGstate);
	drawAll(myGstate);
	GrEndUpdate(myGstate);

	if (gestartet)
	{
		gestartet=FALSE;
		@call self::MSG_MUNCH_NEW_GAME();
	}
}

@method MunchProcessClass, MSG_META_COLORED_OBJECT_SET_COLOR
{
	FileHandle fhandle;
	colorChanged = TRUE;
	munchcolor = colorQuad;

	@call MunchView::MSG_GEN_VIEW_SET_COLOR(
		munchcolor.CQ_redOrIndex,
		munchcolor.CQ_info,
		((word)(((word)munchcolor.CQ_blue)<<8)|
		((word)munchcolor.CQ_green)));

	/* save background color */
	FilePushDir();
	FileSetCurrentPath(SP_USER_DATA, "MunchData");
	fhandle = FileCreate("Color.dat", FILE_CREATE_TRUNCATE |
									  FILE_ACCESS_RW |
									  FILE_DENY_RW,
									  0);

	if (fhandle)
	{
		FilePos(fhandle, 0, FILE_POS_START);
		FileWrite(fhandle, &munchcolor, sizeof(ColorQuad), FALSE);
		FileClose(fhandle, FALSE);
	}

	FilePopDir();
}

@method MunchProcessClass, MSG_REDRAW_GAMEBOARD
{
	if (myGstate) GrInvalRect(myGstate, 0, 0, maxX, maxY);
}

/********************************************************
 * Keyboard(and other input)-related methods
 ********************************************************/
void tot(void)
{
	if (indestructable)
		return;
	MunchPlaySound(totSong);
	leben--;
	@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);
	munchX=startX; munchY=startY;
	@call process::MSG_REDRAW_GAMEBOARD();
	@call process::MSG_START_INDES_TIMER();
}

void eatIt(byte was)
{
	showpills = @call MunchBooleans::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1);
	MunchPlaySound(pilleSong);
	if ((was==istPille) && (showpills))
			laby[labyPos(munchX,munchY)]=istAbfall;
	else
		laby[labyPos(munchX,munchY)]=istLeer;

	drawHindernis(munchX/31, munchY/29);
	punkte+=was;
	if (was==istPille)
	{
		pillenzahl--;
	}
	if (was==istGeld)
	{
		geldzahl++;
		if (geldzahl>=10)
		{
			geldzahl=0;
			leben++;
			@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);
		}
	}
	@call PunkteVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(punkte,FALSE);
}

void munchTNT(void)
{
	if (!schuss)
	{
		schuss=TRUE;
		tntX=munchX; tntY=munchY;
		laby[labyPos(tntX,tntY)]=istTNT;
		GrInvalRect(myGstate,tntX,tntY,tntX+30,tntY+28);
		@call process::MSG_START_TNT_TIMER();
	}
}

@method MunchProcessClass, MSG_META_KBD_CHAR
{
	byte myscancode=state>>8;

	if ((character=='s') && (flags & CF_FIRST_PRESS))
		ton=!(ton);

	if ((character=='+') && (flags & CF_FIRST_PRESS))
	{
		if ((pause) && (leben<9))
			@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(++leben,FALSE);
	}

	if (pause)
		return;
	if (skipInput)
		return;

	bew=!(bew);

	oldMunchX=munchX; oldMunchY=munchY;
	if (gameStarted)
	switch(myscancode)
	{
		case 0x48:
			munchUp();
			break;
		case 0x50:
			munchDown();
			break;
		case 0x4b:
			munchLeft();
			break;
		case 0x4d:
			munchRight();
			break;
	}
//	if (((character=='z')||(character=='Z')) && (flags & CF_FIRST_PRESS))
	if ((character==C_SPACE) && (flags & CF_FIRST_PRESS))
		munchTNT();
	if ((oldMunchX!=munchX) || (oldMunchY!=munchY))
		drawHindernis(oldMunchX/31, oldMunchY/29);
}

@method MunchProcessClass, MSG_MUNCH_PAUSE
{
	pause = TRUE;
	@call MunchPauseTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call MunchContinueTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call self::MSG_REDRAW_GAMEBOARD();
}

@method MunchProcessClass, MSG_MUNCH_CONT
{
	pause = FALSE;
	@call MunchContinueTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call MunchPauseTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call self::MSG_REDRAW_GAMEBOARD();
}

@method MunchProcessClass, MSG_MUNCH_ENDE_ACK
{
byte testLevel;

	if(punkte)
		@send HighScoreControl::MSG_HIGH_SCORE_ADD_SCORE((dword) punkte, 0);
	gameStarted = FALSE;
	@call MunchLevel::MSG_GEN_VALUE_SET_INTEGER_VALUE(1,FALSE);
	/*@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(1,FALSE);*/
//	restartLevel = @call LevelVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
	testLevel = @call LevelVal::MSG_GEN_VALUE_GET_INTEGER_VALUE();
	if (testLevel > restartLevel)
      restartLevel = testLevel;
	@call MunchLevel::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(restartLevel - 1));
	level = 1;
}

/***************************************************************
 * Start- & Endemethoden
 ***************************************************************/
@method MunchProcessClass, MSG_META_CONTENT_VIEW_WIN_OPENED
{
//	optr block=@myPointer;
	WindowHandle winHan;

	winHan = viewWindow;
	myGstate = GrCreateState(winHan);

//	MemLock(OptrToHandle(block)) ;
//	@call MunchView::MSG_GEN_VIEW_SET_PTR_IMAGE(block,PIL_WINDOW);
//	MemUnlock(OptrToHandle(block)) ;
}

@method MunchProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
	Boolean initError, tips;
	FileHandle fhandle;

	@callsuper();
	FloatRandomize(RGIF_GENERATE_SEED,0);
	@call MunchApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

	SoundAllocMusic(pilleSongBuf, 2, &pilleSong);
	SoundAllocMusic(totSongBuf, 2, &totSong);
	SoundAllocMusic(explSongBuf, 4, &explSong);
	SoundAllocMusic(gegSongBuf, 2, &gegSong);

	/* check for quick tips */
	initError = InitFileReadBoolean("Munch", "showTips", &tips);
	if (initError)
		tips = TRUE;
	if (tips)
	{
		@send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 TRUE);
		@send MunchQTipsDialog::MSG_GEN_INTERACTION_INITIATE();
	}
	else
		@send ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 SHOW_ON_STARTUP,
														 FALSE);
	/* check for sound */
	initError = InitFileReadInteger("Munch", "sound", &g_sound);
	if (initError)
		g_sound = SOUND_SYSTEM;
	@call SoundGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(g_sound, FALSE);

	/* check for lives */
	initError = InitFileReadInteger("Munch", "lives", &leben);
	if (initError)
		leben = LIFE3;
	@call LivesGroup::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(leben, FALSE);
	@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);

	/* check for level */
	initError = InitFileReadInteger("Munch", "level", &restartLevel);
	if (initError)
		restartLevel = 1;
	@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(1, FALSE);
	@call MunchLevel::MSG_GEN_VALUE_SET_INTEGER_VALUE(1, FALSE);
	if (restartLevel < 1)
		restartLevel = 1;
	@call MunchLevel::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(restartLevel - 1));
	levelhigh = restartLevel;
	/* check for show eaten pills */
	initError = InitFileReadBoolean("Munch", "pills", &showpills);
	if (initError)
		showpills = TRUE;
	if (showpills)
		@call MunchBooleans::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 1,
														 TRUE);
	else
		@call MunchBooleans::MSG_GEN_BOOLEAN_GROUP_SET_BOOLEAN_STATE(
														 1,
														 FALSE);

	/* check for background color */
	FilePushDir();
	FileSetCurrentPath(SP_USER_DATA, "MunchData");

	fhandle = FileOpen("Color.dat", FILE_ACCESS_RW | FILE_DENY_RW);

	if (fhandle != NullHandle)
	{
		FilePos(fhandle, 0, FILE_POS_START);
		FileRead(fhandle, &munchcolor, sizeof(ColorQuad), FALSE);
		@send MunchColorControl::MSG_COLOR_SELECTOR_SET_COLOR(munchcolor, FALSE);
		FileClose(fhandle, FALSE);
	}

	FilePopDir();

	@call MunchView::MSG_GEN_VIEW_SET_COLOR(
		munchcolor.CQ_redOrIndex,
		munchcolor.CQ_info,
		((word)(((word)munchcolor.CQ_blue)<<8)|
		((word)munchcolor.CQ_green)));


	level = 1;
	initSprites();
	@send MunchColorControl::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
}

@method MunchProcessClass, MSG_MUNCH_NEW_GAME
{
	maxLevel=numOfLevel();
	@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(level,FALSE);
	if (loadLevel(level))
	{
		pause=FALSE;
		skipInput=FALSE;
		leben=@call LivesGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
		@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);
		@call self::MSG_REDRAW_GAMEBOARD();
		@call self::MSG_START_TIMER();
		@call self::MSG_START_INDES_TIMER();
	}
	else
	{
		@call MunchEnde::MSG_GEN_INTERACTION_INITIATE();
	}/*loadLevel else*/

	@call self::MSG_STOP_TIMER();
	punkte=0;
	leben = @call LivesGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	schuss=FALSE;
	geldzahl=0;
	@call PunkteVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(punkte,FALSE);
	@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);
	@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(level,FALSE);

/*	FloatRandomize(RGIF_GENERATE_SEED,0);
	moved to sprites.goc in the randon num generator jfh */
}


@method MunchProcessClass, MSG_MUNCH_OPT_ACK
{
	maxLevel=numOfLevel();

	punkte = 0;
	geldzahl = 0;
	@call MunchContinueTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call MunchPauseTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	@call PunkteVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(punkte,FALSE);
	@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(level,FALSE);
	leben = @call LivesGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);

	if (loadLevel(level))
	{
		gameStarted = TRUE;
		pause = FALSE;
		skipInput=FALSE;
 //		@call MunchPauseTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Pause", VUM_NOW);
		@call self::MSG_REDRAW_GAMEBOARD();
		@call self::MSG_START_TIMER();
		@call self::MSG_START_INDES_TIMER();
	}
	else
	{
		@call MunchEnde::MSG_GEN_INTERACTION_INITIATE();
	}/*loadLevel else*/
}

@method MunchProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
	Boolean		tips;


	SoundStopMusic(pilleSong);
	SoundFreeMusic(pilleSong);
	SoundStopMusic(totSong);
	SoundFreeMusic(totSong);
	SoundStopMusic(explSong);
	SoundFreeMusic(explSong);
	SoundStopMusic(gegSong);
	SoundFreeMusic(gegSong);

	clearTimerAndGstate();

	/* set the quick tips if not default */
	tips = @call ShowOnStartupGroup::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(
																	 SHOW_ON_STARTUP);
	g_sound = @call SoundGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	leben = @call LivesGroup::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	showpills = @call MunchBooleans::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(1);
	InitFileWriteBoolean("Munch", "showTips", tips);
	InitFileWriteInteger("Munch", "sound", g_sound);
	InitFileWriteInteger("Munch", "lives", leben);
	if(restartLevel <= 1)
		restartLevel = 1;
	InitFileWriteInteger("Munch", "level", restartLevel);
	InitFileWriteBoolean("Munch", "pills", showpills);
   InitFileCommit();

	return(@callsuper());
}

/*************************************************************
 * Timer methods and methods called by Timer
 *************************************************************/

@method MunchProcessClass, MSG_START_INDES_TIMER
{
	if (!MTimer)
	{
		MTimer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 180,
			 MSG_INDES_TIMER_RANG, 3, &Mtimerid);
	}
	indestructable=TRUE;
}

@method MunchProcessClass, MSG_INDES_TIMER_RANG
{
	if(MTimer)
	{
		TimerStop (MTimer, Mtimerid);
		MTimer = NullHandle;
	}
	indestructable=FALSE;
}

@method MunchProcessClass, MSG_START_TNT_TIMER
{
	if (!THTimer)
	{
	THTimer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 60,
			 MSG_TNT_TIMER_RANG, 3, &Ttimerid);
	}
}

@method MunchProcessClass, MSG_TNT_TIMER_RANG
{
	if(THTimer)
	{
		TimerStop (THTimer, Ttimerid);
		THTimer = NullHandle;
	}
	/*Visualize*/
	drawExpl();
	if (!EHTimer)
		EHTimer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 15,
			 MSG_EXPL_TIMER_RANG, 3, &Etimerid);
	MunchPlaySound(explSong);
}

@method MunchProcessClass, MSG_EXPL_TIMER_RANG
{
	byte erg=0;
	if(EHTimer)
	{
		TimerStop (EHTimer, Etimerid);
		EHTimer = NullHandle;
	}
	erg=explode();
	if (((erg & 1)==1) && (!H1Timer))
	H1Timer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 120,
					   MSG_1_TIMER_RANG, 3, &timerid1);
	if (((erg & 2)==2) && (!H2Timer))
	H2Timer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 120,
					   MSG_2_TIMER_RANG, 3, &timerid2);
	if (((erg & 4)==4) && (!H3Timer))
	H3Timer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 120,
					   MSG_3_TIMER_RANG, 3, &timerid3);
	if (((erg & 8)==8) && (!H4Timer))
	H4Timer=TimerStart(TIMER_EVENT_ONE_SHOT, oself, 120,
					   MSG_4_TIMER_RANG, 3, &timerid4);
}

@method MunchProcessClass, MSG_1_TIMER_RANG
{
	geg1Act=TRUE;
	MunchPlaySound(gegSong);
	if(H1Timer)
	{
		TimerStop (H1Timer, timerid1);
		H1Timer = NullHandle;
	}
}

@method MunchProcessClass, MSG_2_TIMER_RANG
{
	geg2Act=TRUE;
	MunchPlaySound(gegSong);
	if(H2Timer)
	{
		TimerStop (H2Timer, timerid2);
		H2Timer = NullHandle;
	}
}

@method MunchProcessClass, MSG_3_TIMER_RANG
{
	geg3Act=TRUE;
	MunchPlaySound(gegSong);
	if(H3Timer)
	{
		TimerStop (H3Timer, timerid3);
		H3Timer = NullHandle;
	}
}

@method MunchProcessClass, MSG_4_TIMER_RANG
{
	geg4Act=TRUE;
	MunchPlaySound(gegSong);
	if(H4Timer)
	{
		TimerStop (H4Timer, timerid4);
		H4Timer = NullHandle;
	}
}

@method MunchProcessClass, MSG_START_TIMER
{
   if (!HTimer)
   {
	HTimer=TimerStart(TIMER_EVENT_CONTINUAL, oself, 10,
			 MSG_TIMER_RANG, 3, &timerid);
   }
}

@method MunchProcessClass, MSG_STOP_TIMER
{
   if(HTimer)
   {
		TimerStop (HTimer, timerid);
		HTimer = NullHandle;
   }
}

@method MunchProcessClass, MSG_TIMER_RANG
{

	if (pause) return;


	oldGeg1X=geg1X;oldGeg1Y=geg1Y;
	oldGeg2X=geg2X;oldGeg2Y=geg2Y;
	oldGeg3X=geg3X;oldGeg3Y=geg3Y;
	oldGeg4X=geg4X;oldGeg4Y=geg4Y;

	bewegeGegner();

	bewG=!(bewG);

	/*tdliche Kollisionen*/
	if (geg1Act)
		if ((munchX>=geg1X) && (munchX<=geg1X+30))
			if ((munchY>=geg1Y) && (munchY<=geg1Y+28))
				tot();

	if (geg2Act)
		if ((munchX>=geg2X) && (munchX<=geg2X+30))
			if ((munchY>=geg2Y) && (munchY<=geg2Y+28))
				tot();

	if (geg3Act)
		if ((munchX>=geg3X) && (munchX<=geg3X+30))
			if ((munchY>=geg3Y) && (munchY<=geg3Y+28))
				tot();

	if (geg4Act)
		if ((munchX>=geg4X) && (munchX<=geg4X+30))
			if ((munchY>=geg4Y) && (munchY<=geg4Y+28))
				tot();

	if (geg1Act)
		if ((munchX+30>=geg1X) && (munchX<=geg1X))
			if ((munchY+28>=geg1Y) && (munchY<=geg1Y))
				tot();

	if (geg2Act)
		if ((munchX+30>=geg2X) && (munchX<=geg2X))
			if ((munchY+28>=geg2Y) && (munchY<=geg2Y))
				tot();

	if (geg3Act)
		if ((munchX+30>=geg3X) && (munchX<=geg3X))
			if ((munchY+28>=geg3Y) && (munchY<=geg3Y))
				tot();

	if (geg4Act)
		if ((munchX+30>=geg4X) && (munchX<=geg4X))
			if ((munchY+28>=geg4Y) && (munchY<=geg4Y))
				tot();

	if (geg1Act)
	{
		restoreBild(oldGeg1X,oldGeg1Y);
		if (bewG)
			GrDrawImage(myGstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(myGstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg2Act)
	{
		restoreBild(oldGeg2X,oldGeg2Y);
		if (bewG)
			GrDrawImage(myGstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(myGstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	if (geg3Act)
	{
		restoreBild(oldGeg3X,oldGeg3Y);
		if (bewG)
			GrDrawImage(myGstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(myGstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg4Act)
	{
		restoreBild(oldGeg4X,oldGeg4Y);
		if (bewG)
			GrDrawImage(myGstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(myGstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	/*berlappungen*/
	if (geg1Act)
	{
		if (bewG)
			GrDrawImage(myGstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(myGstate,geg1X,geg1Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg2Act)
	{
		if (bewG)
			GrDrawImage(myGstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(myGstate,geg2X,geg2Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	if (geg3Act)
	{
		if (bewG)
			GrDrawImage(myGstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[0]);
		else
			GrDrawImage(myGstate,geg3X,geg3Y,IBS_1, (Bitmap*) &TestBMg[1]);
	}

	if (geg4Act)
	{
		if (bewG)
			GrDrawImage(myGstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[2]);
		else
			GrDrawImage(myGstate,geg4X,geg4Y,IBS_1, (Bitmap*) &TestBMg[3]);
	}

	if (nachLinks)
		if (bew)
			GrDrawImage(myGstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMl1);
		else
			GrDrawImage(myGstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMl2);
	else
		if (bew)
			GrDrawImage(myGstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMr1);
		else
			GrDrawImage(myGstate,munchX,munchY,IBS_1, (Bitmap*) &TestBMr2);

	/*end game*/
	if ((leben<=0) || (pillenzahl<=0))
	{
		@call self::MSG_STOP_TIMER();
		skipInput=TRUE;
	 /*	if (level-1>restartLevel)
			restartLevel=level-1;
		if (restartLevel==0)
			restartLevel=1;*/

		if (leben<=0)
		{
			@call MunchVerloren::MSG_GEN_INTERACTION_INITIATE();
		}
		else
		{
			@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(++level,FALSE);
			restartLevel++;
	      @call MunchLevel::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(restartLevel - 1));
			if (level>maxLevel)
			{
				@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(--level,FALSE);
            restartLevel--;
			   @call MunchLevel::MSG_GEN_VALUE_SET_MAXIMUM(MakeWWFixed(restartLevel - 1));
				@call MunchGewonnen::MSG_GEN_INTERACTION_INITIATE();
			}
			else
			{
				/*n. Level laden*/
				if (loadLevel(level))
				{
					pause=FALSE;
					skipInput=FALSE;
					@call self::MSG_REDRAW_GAMEBOARD();
					@call self::MSG_START_TIMER();
					@call self::MSG_START_INDES_TIMER();
				}
				else
				{
				   @call MunchEnde::MSG_GEN_INTERACTION_INITIATE();
				}/*loadLevel else*/
			}/*gewonnen oder n. Level*/
		}/*Levelende*/
  }/*Ende*/
}/*TimerRang*/


@method MunchProcessClass, MSG_MUNCH_SOUND_CHANGED
{
	g_sound = selection;
}

@method MunchProcessClass, MSG_MUNCH_LIVES_CHANGED
{
	leben = selection;
	@call LebenVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(leben,FALSE);
}

@method MunchProcessClass, MSG_MUNCH_LEVEL_CHANGED
{
	level = @call MunchLevel::MSG_GEN_VALUE_GET_INTEGER_VALUE();
	@call LevelVal::MSG_GEN_VALUE_SET_INTEGER_VALUE(level,FALSE);
	loadLevel(level);
	pause = FALSE;
	gameStarted = FALSE;
	@call self::MSG_REDRAW_GAMEBOARD();
	@call self::MSG_STOP_TIMER();
}
