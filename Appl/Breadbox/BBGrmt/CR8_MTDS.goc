/*
 **************************************************************************
 *  FILE:		cr8_mtds.goc
 *  PROJECT:		Breadbox Gourmet
 *  DESCRIPTION:	This file has methods for the create...
 *			dialog box
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "rbox.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/* Declare UI object references to those in rboxui.GOC */
@extern object CreateDialogBoxGroup ;
@extern visMoniker CreateMoniker;
@extern object TextWindow ;
@extern object RecipeNameGroup ;
@extern object GenInfoGroup ;
@extern object IngredGroup ;
@extern object DirectionsGroup ;
@extern object ReplyGroup ;
@extern object RecipeDList;
@extern object RecipeName ;
@extern object IngredDList ;
@extern object IngredName ;
@extern object IUSQuantity ;
@extern object IMetQuantity ;
@extern object IUSUnits ;
@extern object IMUnits ;
@extern object IAddTrigger ;
@extern object IEditTrigger ;
@extern object IDeleteTrigger;
@extern object ServingsValue ;
@extern object CatList ;
@extern object Author ;
@extern object PrepTime ;
@extern object DirectionsBox ;
@extern object ModifyRecipeTrigger;
@extern object CancelModifyTrigger;
@extern object ServingsRecalcBox;
@extern object ListButton;
@extern chunk RBTextCharAttrs;
@extern object canrec;
@extern object chaing;
@extern object deling;

/****************************************************************************
 *		Code for RBoxProcessClass Create Recipe
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_CREATE_RECIPE for RBoxProcessClass
 *
 * DESCRIPTION:	Calls the dialog box when the menu
 *              item is selected 
 *     
 *              
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_OPEN_CREATE_RECIPE
{
    @send self::MSG_GOURMET_SCREEN();

    /* disable list and recalc */
    @send ServingsRecalcBox::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send ListButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* enable the name entry box and disable the rest */
    @send RecipeNameGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    @send GenInfoGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send IngredGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send DirectionsGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send ReplyGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* Make Modify triggers Not Usable */
    @call ModifyRecipeTrigger::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call CancelModifyTrigger::MSG_GEN_SET_NOT_USABLE(VUM_NOW);

    /* set measurement system drop down list */
    if (measSystem == USA) {
       @call IMUnits::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
       @call IUSUnits::MSG_GEN_SET_USABLE(VUM_NOW);
      }
    else {
       @call IUSUnits::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
       @call IMUnits::MSG_GEN_SET_USABLE(VUM_NOW);
      }

    /* set quantity filter based on meas system */
    if (measSystem == USA) {
       @call IUSQuantity::MSG_GEN_SET_USABLE(VUM_NOW);
       @call IMetQuantity::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
      }
    else {
       @call IMetQuantity::MSG_GEN_SET_USABLE(VUM_NOW);
       @call IUSQuantity::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
      }

    /* put the right moniker up */
    @call CreateDialogBoxGroup::MSG_GEN_USE_VIS_MONIKER(
		OptrToChunk(@CreateMoniker), VUM_NOW);

    /* Open the dialog box for Create/Enter */
    @call CreateDialogBoxGroup::MSG_GEN_INTERACTION_INITIATE();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_RECIPE for RBoxProcessClass
 *
 * DESCRIPTION:	Creates a new DB group.
 *
 * STRATEGY:    Creates the new group and writes out the appropriate
 *              data structures. Done here so that ingreds have
 *              someplace to go as they're added in.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_CREATE_RECIPE
{
    RecipeStruct        *recipe;
    DBGroupAndItem    mapitem;
    DBMapStruct*      mapPtr;
    word              numRecipes;
    char              name[NAME_SIZE];

    /*
     * Retrieve the name of the new recipe from the name field.
     */
    @call RecipeName::MSG_VIS_TEXT_GET_ALL_PTR(name);

    /* Exit if recipe is unnamed. */
    if (*name == 0)
        return;

    /* Lock the map ingred, read the array size, and unlock it */
    mapitem = DBGetMap(rBoxFile);
    mapPtr = DBLockUngrouped(rBoxFile, mapitem);
    numRecipes = mapPtr->MS_numRecipes;
    DBUnlock(mapPtr);

    /* expand the map item */
    DBReAllocUngrouped(rBoxFile, mapitem,
		sizeof(DBMapStruct) + ((numRecipes + 1) * sizeof(RecipeStruct)));

    /* Lock the map again */
    mapPtr = DBLockUngrouped(rBoxFile, mapitem);

    /* Get the beginning of the array of recipe structures */
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));

    /* Initialize the new structure (remember numRecipes is old array size) */
    strcpy(recipe[numRecipes].RS_name, name);
    recipe[numRecipes].RS_head = NULL;
    recipe[numRecipes].RS_size = 0;
    recipe[numRecipes].RS_system = measSystem;

    /* Create the new DB group */
    recipe[numRecipes].RS_group = DBGroupAlloc(rBoxFile);

    /* Increase the array size (number of recipes)*/
    (mapPtr->MS_numRecipes)++;
    numRecipes++;

    /* and set the current recipe variable */
    currentRecipe = numRecipes-1;

    /* Mark the map ingred as dirty */
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* disable the name entry box and enable the rest */
    @send RecipeNameGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send GenInfoGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    @send IngredGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    @send DirectionsGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    @send ReplyGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
    /* except the ingred edit & delete triggers */
    @send IEditTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @send IDeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_ENTER_RECIPE for RBoxProcessClass
 *
 * DESCRIPTION:	adds the non-ingred info to the recipe
 *               
 *     
 *              
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_ENTER_RECIPE
{
    RecipeStruct        *recipe;
    DBGroupAndItem    mapitem;
    DBMapStruct*      mapPtr;
  /*  IngredStruct       *ingred;
    DBItem            ingreditem;
    DBGroup           recipegroup; */
    char              author[NAME_SIZE], prep[NUM_DATA_SIZE];
    word		servings, category;
    dword		dirsSize;
    VMBlockHandle	dirBlkHandle;
    MemHandle		mh;


    /* get non-ingredient info */
    servings = @call ServingsValue::MSG_GEN_VALUE_GET_INTEGER_VALUE();
    category = @call CatList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    @call Author::MSG_VIS_TEXT_GET_ALL_PTR(author);
    @call PrepTime::MSG_VIS_TEXT_GET_ALL_PTR(prep);

    /* if there are blanks - insert a space (to avoid crash) */
    if (*author == 0)
      strcpy(author, " ");
    if (*prep == 0)
      strcpy(prep, " ");

    /* Do our standard setup */
    mapitem = DBGetMap(rBoxFile);
    mapPtr = DBLockUngrouped(rBoxFile, mapitem);
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));

    /* enter the info */
    recipe[currentRecipe].RS_serves = servings;
    recipe[currentRecipe].RS_cat = category;
    strcpy(recipe[currentRecipe].RS_author, author);
    strcpy(recipe[currentRecipe].RS_prepTime, prep);

    /* add the index number... */
    recipe[currentRecipe].RS_index = currentRecipe;
    /* the shopping list marker... */
    recipe[currentRecipe].RS_list = FALSE;

    /* and the main ingredient. */
    /* ingredient setup */
  /*  recipegroup = recipe[currentRecipe].RS_group;
    ingreditem = recipe[currentRecipe].RS_head;
    ingred = DBLock(rBoxFile, recipegroup, ingreditem);
    /* copy the 1st ingred */
    strcpy(recipe[currentRecipe].RS_mainIngred, " ");
    /* unlock ingred item */
  /*  DBUnlock(ingred);

    /* mark recipe dirty and unlock */
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* get the number of chars in the directions */
    dirsSize = @call DirectionsBox::MSG_VIS_TEXT_GET_TEXT_SIZE();
    dirsSize++;  /* inc for null term */

    /* now create the directions VMBlock */
    dirBlkHandle = VMAlloc(rBoxFile, (word) dirsSize, currentRecipe);

    /* lock it */
    VMLock(rBoxFile, dirBlkHandle, &mh);

    /* and store the text */
    @call DirectionsBox::MSG_VIS_TEXT_GET_ALL_VM_BLOCK(
			 rBoxFile,
			 dirBlkHandle);

    VMDirty(mh);
    VMUnlock(mh);

    /* initialize the ingred list... */
    @send IngredDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

    /* clean things out... */
    /*currentRecipe = GIGS_NONE;*/
    @call RecipeName::MSG_VIS_TEXT_DELETE_ALL();
    @call IngredName::MSG_VIS_TEXT_DELETE_ALL();
    @call IUSQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call IMetQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call Author::MSG_VIS_TEXT_DELETE_ALL();
    @call PrepTime::MSG_VIS_TEXT_DELETE_ALL();
    @call DirectionsBox::MSG_VIS_TEXT_DELETE_ALL();

    /* reset servings, category & units... */
    @call ServingsValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(4, FALSE);
    @call CatList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        APTZ, FALSE);

    if (measSystem == USA) {
       @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        USUN, FALSE);
      }
    else {
       @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        MUN, FALSE);
      }

    /* and close the create box... */
    @call CreateDialogBoxGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* put the recipe in the text window */
    @send process::MSG_DISPLAY_RECIPE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CANCEL_RECIPE for RBoxProcessClass
 *
 * DESCRIPTION:	Cancels the newly entered recipe.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_CANCEL_RECIPE
{
    RecipeStruct        *recipe;
    DBGroupAndItem    mapitem;
    DBMapStruct*      mapPtr;


    /* put up an Are you sure box */
         if 	((UserStandardDialogOptr(
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    @canrec,
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                            ) == IC_YES))  {

    /* Do our standard setup */
    mapitem = DBGetMap(rBoxFile);
    mapPtr = DBLockUngrouped(rBoxFile, mapitem);
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));

    /* delete the current recipe's DBGroup */
    DBGroupFree(rBoxFile, recipe[currentRecipe].RS_group);

    /* Now decrement size of map array */
    --(mapPtr->MS_numRecipes);

    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* Now we contract the map item.  DBDeleteAt removes bytes from
       within the specified ingred, moving bytes after it downwards. */
    DBDeleteAtUngrouped(rBoxFile, mapitem,
	 sizeof(word) + (currentRecipe * sizeof(RecipeStruct)),
	 sizeof(RecipeStruct));

    /* Let the lists in on what's going on... */
    @send IngredDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

    /* clean things out... */
    currentRecipe = GIGS_NONE;
    @call RecipeName::MSG_VIS_TEXT_DELETE_ALL();
    @call IngredName::MSG_VIS_TEXT_DELETE_ALL();
    @call IUSQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call IMetQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call Author::MSG_VIS_TEXT_DELETE_ALL();
    @call PrepTime::MSG_VIS_TEXT_DELETE_ALL();
    @call DirectionsBox::MSG_VIS_TEXT_DELETE_ALL();

    /* reset the servings, units and category... */
    @call ServingsValue::MSG_GEN_VALUE_SET_INTEGER_VALUE(4, FALSE);
    @call CatList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
			APTZ, FALSE);

    if (measSystem == USA) {
       @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        USUN, FALSE);
      }
    else {
       @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        MUN, FALSE);
      }

    /* and close the create box... */
    @send CreateDialogBoxGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
    } /* end of Are you sure if stmt */

}

/***********************************************************************
 *
 * MESSAGE:	MSG_ADD_INGRED for RBoxProcessClass
 *
 * DESCRIPTION:	Creates a new DB item.
 *
 * STRATEGY:    Allocate the new item and fill it in with an IngredStruct.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_ADD_INGRED
{
    RecipeStruct        *recipe;
    IngredStruct       *ingred, *tmp;
    DBItem            ingreditem, previtem;
    DBGroup           recipegroup;
    DBGroupAndItem    mapitem;
    DBMapStruct*      mapPtr;
    char              name[NAME_SIZE], quantity[NUM_DATA_SIZE];
    word	      numIngreds, units, i, recipeSystem;

    /* Retrieve the name of the new ingred */
    @call IngredName::MSG_VIS_TEXT_GET_ALL_PTR(name);

    /* Exit if ingred is unnamed. */
    if (*name == 0)
        return;

    /* Do our standard setup */
    mapitem = DBGetMap(rBoxFile);
    mapPtr = DBLockUngrouped(rBoxFile, mapitem);
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));

    /* Get the recipe's DBGroup */
    recipegroup = recipe[currentRecipe].RS_group;

    /* Add the new ingredient to the end of the list !!new from HInv+ */
    numIngreds = recipe[currentRecipe].RS_size;

    /* if first ingred - put at head */
    if (numIngreds == 0) {
       
       /* create the new ingred DBItem */
       ingreditem = DBAlloc(rBoxFile, recipegroup, sizeof(IngredStruct));

       /* Lock new ingred DBItem */
       ingred = DBLock(rBoxFile, recipegroup, ingreditem);

       /* put it in... */
       ingred->IS_next = recipe[currentRecipe].RS_head;
       recipe[currentRecipe].RS_head = ingreditem;

       /* Mark the ingred item as dirty and unlock it. */
       DBDirty(ingred);
       DBUnlock(ingred);

       }  /* end of numIngred = 0 if */

      else {  /* otherwise at the end */

       /* if second ingredient */
       if (numIngreds == 1) {

	  /* get the first ingred record */
	  previtem = recipe[currentRecipe].RS_head;

          }

	 else {   /* third or greater */

	  /* find the last ingred record */
	  ingreditem = recipe[currentRecipe].RS_head;
	  ingred = DBLock(rBoxFile, recipegroup, ingreditem);

	  /* loop into linked list */
	  for (i = 0; i < (numIngreds-1); i++) {

	     ingreditem = ingred->IS_next;
	     tmp = DBLock(rBoxFile, recipegroup, ingreditem);
	     DBUnlock(ingred);
	     ingred = tmp;
	     previtem = ingreditem;
	     }
	  }  /* end looping else */

       /* create the new ingred DBItem */
       ingreditem = DBAlloc(rBoxFile, recipegroup, sizeof(IngredStruct));

       /* Lock new ingred DBItem */
       ingred = DBLock(rBoxFile, recipegroup, ingreditem);

       /* Relock previous (in previtem) */
       tmp = DBLock(rBoxFile, recipegroup, previtem);

       /* fix next pointer */
       tmp->IS_next = ingreditem;

       /* mark previous item as dirty and unlock it */
       DBDirty(tmp);
       DBUnlock(tmp);

       /* Mark the ingred item as dirty and unlock it. */
       DBDirty(ingred);
       DBUnlock(ingred);

    }  /* end of "otherwise at the end" else */

    /* Increase the recipe size (number of ingreds) */
    recipe[currentRecipe].RS_size++;

    /* get the recipe's meas system */
    recipeSystem = recipe[currentRecipe].RS_system;

    /* Mark the map item as dirty */
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* get the new ingred info */
    if(recipeSystem == USA) {
       @call IUSQuantity::MSG_VIS_TEXT_GET_ALL_PTR(quantity);
       units = @call IUSUnits::MSG_GEN_ITEM_GROUP_GET_SELECTION();
      }
    else {
       @call IMetQuantity::MSG_VIS_TEXT_GET_ALL_PTR(quantity);
       units = @call IMUnits::MSG_GEN_ITEM_GROUP_GET_SELECTION();
      }

    /* Lock new ingred DBItem */
    ingred = DBLock(rBoxFile, recipegroup, ingreditem);

    /* put ingred info into database*/
    strcpy(ingred->IS_ingred, name);
    strcpy(ingred->IS_quant, quantity);
    ingred->IS_units = units;

    /* Mark the ingred item as dirty and unlock it. */
    DBDirty(ingred);
    DBUnlock(ingred);

    /* Let the list know about the whole deal */
    @send IngredDList::MSG_GEN_DYNAMIC_LIST_ADD_ITEMS(numIngreds,1);
    /* and scroll to the newest ingred if needed */
    @send IngredDList::MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(numIngreds);

    /* clear the text from the fields when done */
    @call IngredName::MSG_VIS_TEXT_DELETE_ALL();
    @call IUSQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call IMetQuantity::MSG_VIS_TEXT_DELETE_ALL();
    if (recipeSystem == USA) {
       @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        USUN, FALSE);
      }
    else {
       @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        MUN, FALSE);
      }

    /* send the focus back to quantity */
    if (recipeSystem == USA) {
       @send IUSQuantity::MSG_META_GRAB_FOCUS_EXCL();
      }
    else {
       @send IMetQuantity::MSG_META_GRAB_FOCUS_EXCL();
      }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_EDIT_INGRED for RBoxProcessClass
 *
 * DESCRIPTION:	allows user to edit selected ingred.
 *
 * STRATEGY:    Since the ingred DBItems are in a linked list, the
 *              list must be traversed to edit the ingred.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_EDIT_INGRED
{
    RecipeStruct        *recipe;
    IngredStruct       *ingred, *tmp;
    DBItem            ingreditem;
    DBGroup           recipegroup;
    DBMapStruct*      mapPtr;
    char              name[NAME_SIZE], quantity[NUM_DATA_SIZE];
    word	      units, i, recipeSystem;

    /* Exit if no ingred selected */
    if (currentIngred == GIGS_NONE)
        return;

    /* put up an Are you sure box */
       if 	((UserStandardDialogOptr(
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    @chaing,
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                            ) == IC_YES))  {
       /* Standard setup */
       mapPtr = DBLockMap(rBoxFile);
       recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));
       recipegroup = recipe[currentRecipe].RS_group;

       /* Find the ingred record, starting with head of list */
       ingreditem = recipe[currentRecipe].RS_head;
       ingred = DBLock(rBoxFile, recipegroup, ingreditem);
       recipeSystem = recipe[currentRecipe].RS_system;
       DBUnlock(mapPtr);

       /* Scan forward to selected ingredient */
       for ( i=0; i < currentIngred; i++ ) {
	   tmp = DBLock(rBoxFile, recipegroup, ingred->IS_next);
	   DBUnlock(ingred);
	   ingred = tmp;
       }

       /* get the new ingred info... */
       @call IngredName::MSG_VIS_TEXT_GET_ALL_PTR(name);
       if (recipeSystem == USA) {
          @call IUSQuantity::MSG_VIS_TEXT_GET_ALL_PTR(quantity);
	  units = @call IUSUnits::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 }
       else {
	  @call IMetQuantity::MSG_VIS_TEXT_GET_ALL_PTR(quantity);
	  units = @call IMUnits::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 }

       /* put it in the database... */
       strcpy(ingred->IS_ingred, name);
       strcpy(ingred->IS_quant, quantity);
       ingred->IS_units = units;

       /* Mark the ingred item as dirty and unlock it. */
       DBDirty(ingred);
       DBUnlock(ingred);

       /* update the list */
       @send IngredDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(GDLI_NO_CHANGE);

       /* clear the text from the fields when done */
       @call IngredName::MSG_VIS_TEXT_DELETE_ALL();
       @call IUSQuantity::MSG_VIS_TEXT_DELETE_ALL();
       @call IMetQuantity::MSG_VIS_TEXT_DELETE_ALL();
      if (recipeSystem == USA) {
          @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        USUN, FALSE);
         }
       else {
          @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        MUN, FALSE);
         }

       /* send the focus back to ingred name */
       @send IngredName::MSG_META_GRAB_FOCUS_EXCL();

    } /* end of Are You sure if stmt */
}

/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_INGRED for RBoxProcessClass
 *
 * DESCRIPTION:	Deletes selected ingred (DBItem).
 *
 * STRATEGY:    Since the ingred DBItems are in a linked list, the
 *              list must be traversed to remove the ingred.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_DELETE_INGRED
{
    RecipeStruct        *recipe;
    IngredStruct       *ingred, *tmp;
    DBItem            ingreditem, previngred;
    DBGroup           recipegroup;
    DBMapStruct*      mapPtr;
    word              i, recipeSystem;

    /* Exit if no ingred selected */
    if (currentIngred == GIGS_NONE)
        return;


    /* put up an Are you sure box */
       if 	((UserStandardDialogOptr(
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    NullOptr,
			    @deling,
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
                            ) == IC_YES))  {

    /* Standard setup */
    mapPtr = DBLockMap(rBoxFile);
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));
    recipegroup = recipe[currentRecipe].RS_group;

    /* Find the ingred record, starting with head of list */
    ingreditem = recipe[currentRecipe].RS_head;
    ingred = DBLock(rBoxFile, recipegroup, ingreditem);

    /* If ingred is first, recipe record must be modified (new list head) */
    if (currentIngred == 0) {
	recipe[currentRecipe].RS_head = ingred->IS_next;
    }
    else {
        /* Loop into linked list */
	for (i=0; i < currentIngred; i++) {
	    previngred = ingreditem;
	    ingreditem = ingred->IS_next;
	    tmp = DBLock(rBoxFile, recipegroup, ingreditem);
	    DBUnlock(ingred);
	    ingred = tmp;
        }
	/* Relock previous (in previngred) */
	tmp = DBLock(rBoxFile, recipegroup, previngred);

	/* Fix next pointer in previous ingred */
	tmp->IS_next = ingred->IS_next;

	/* Mark previous ingred as dirty and unlock */
        DBDirty(tmp);
        DBUnlock(tmp);
    }

    /* We no longer need access to the ingred to be deleted */
    DBUnlock(ingred);

    /* Now linked list is patched up, we merely need to delete ingred */
    DBFree(rBoxFile, recipegroup, ingreditem);

    /* Decrease the recipe size (number of ingreds) */
    recipe[currentRecipe].RS_size--;

    /* get the recip meas system */
    recipeSystem = recipe[currentRecipe].RS_system;

    /* Unlock map ingred */
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* Inform the list of changes. */
    @send IngredDList::MSG_GEN_DYNAMIC_LIST_REMOVE_ITEMS(currentIngred,1);

    currentIngred = GIGS_NONE;

    @call IngredName::MSG_VIS_TEXT_DELETE_ALL();
    @call IUSQuantity::MSG_VIS_TEXT_DELETE_ALL();
    @call IMetQuantity::MSG_VIS_TEXT_DELETE_ALL();
    if (recipeSystem == USA) {
       @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        USUN, FALSE);
      }
    else {
       @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
                        MUN, FALSE);
      }

    } /* end of Are You sure if stmt */
}

/***********************************************************************
 *
 * MESSAGE:	MSG_INGRED_DLIST_MONIKER_QUERY for RBoxProcessClass
 *
 * DESCRIPTION:	Queries for monikers for ingred list.
 *
 * PARAMETERS:  void (optr list, word item)
 *
 * STRATEGY:
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_INGRED_DLIST_MONIKER_QUERY
{
    RecipeStruct        *recipe;
    IngredStruct       *ingred, *tmp;
    DBGroup            recipegroup;
    word               i;
    DBMapStruct*       mapPtr;
    DBItem             head;
    char	    ingredBuffer[80];   /* holds ingred info */
    int		       units;

    /* Lock the map item. */
    mapPtr = DBLockMap(rBoxFile);

    /* Get the beginning of the array of structures. */
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));
    recipegroup = recipe[currentRecipe].RS_group;

    /* We merely need to extract the iem handle for the first ingred. */
    head = recipe[currentRecipe].RS_head;

    /* Now we are done with the map ingred. */
    DBUnlock(mapPtr);

    /* Lock down the head of the ingred list. */
    ingred = DBLock(rBoxFile, recipegroup, head);

    /* Loop over linked list of ingreds to get to ingred'th one.
     * We are assuming it is impossible to have an illegal index.
     */

    for (i=0; i < item; i++) {

	/* Lock next ingred and unlock current one. */
	tmp = DBLock(rBoxFile, recipegroup, ingred->IS_next);
	DBUnlock(ingred);
	ingred = tmp;
    }

    /* collect the ingred poop in the buffer */
    /* initialize the ingred buffer */
    *ingredBuffer = NULL;

    strcat(ingredBuffer, ingred->IS_quant);
    strcat(ingredBuffer, "  ");

    units = (int) ingred->IS_units;
    if (recipe[currentRecipe].RS_system == USA) {
       switch (units) {
	  case USUN:
          strcat(ingredBuffer,"    ");
          break;
	  case PNCH:
          strcat(ingredBuffer,"pinch(es)");
          break;
	  case TSP:
          strcat(ingredBuffer,"tsp");
          break;
	  case TBSP:
          strcat(ingredBuffer,"tbsp");
          break;
	  case CUP:
          strcat(ingredBuffer,"cup(s)");
          break;
	  case FLOZ:
          strcat(ingredBuffer,"fl oz");
          break;
	  case PINT:
          strcat(ingredBuffer,"pint(s)");
          break;
	  case QT:
          strcat(ingredBuffer,"qt");
          break;
	  case GAL:
          strcat(ingredBuffer,"gal");
          break;
	  case OZ:
          strcat(ingredBuffer,"oz");
          break;
	  case LB:
          strcat(ingredBuffer,"lb");
          break;
	  case EACH:
          strcat(ingredBuffer,"each");
          break;
	  case CAN:
          strcat(ingredBuffer,"can(s)");
          break;
	  case PKG:
	  strcat(ingredBuffer,"pkg");
          break;
	  case STK:
	  strcat(ingredBuffer,"stick(s)");
          break;
	}
       }
    else {
       switch (units) {
	  case MUN:
          strcat(ingredBuffer,"    ");
          break;
	  case MPNCH:
          strcat(ingredBuffer,"pinch(es)");
          break;
	  case MTSP:
          strcat(ingredBuffer,"tsp");
          break;
	  case MTBSP:
          strcat(ingredBuffer,"tbsp");
          break;
	  case MLS:
          strcat(ingredBuffer,"ml");
	  break;
	  case DLS:
	  strcat(ingredBuffer,"dl");
          break;
	  case LTRS:
          strcat(ingredBuffer,"liter(s)");
          break;
	  case GRMS:
          strcat(ingredBuffer,"gram(s)");
          break;
	  case KILO:
	  strcat(ingredBuffer,"kilo(s)");
          break;
	  case MEACH:
	  strcat(ingredBuffer,"each");
          break;
	  case MCAN:
          strcat(ingredBuffer,"can(s)");
          break;
	  case MPKG:
	  strcat(ingredBuffer,"pkg");
          break;
       }
    }

    strcat(ingredBuffer, "  ");
    strcat(ingredBuffer, ingred->IS_ingred);


    /* Set the text in the list ingred. */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
                    item, ingredBuffer);

    DBUnlock(ingred);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_INGRED_DLIST_APPLY for RBoxProcessClass
 *
 * DESCRIPTION:	Handles an apply of user changes to the ingred list.
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * STRATEGY:    Enable various UI ingreds and set values in the text fields.
 *
 ***********************************************************************/

@extern method RBoxProcessClass, MSG_INGRED_DLIST_APPLY
{
    RecipeStruct        *recipe;
    IngredStruct       *ingred, *tmp;
    DBGroup           recipegroup;
    DBMapStruct*      mapPtr;
    word              i, recipeSystem;

    /* (Perform the same setup procedure as above.) */
    mapPtr = DBLockMap(rBoxFile);
    recipe = (RecipeStruct *) (mapPtr + sizeof(DBMapStruct));
    recipegroup = recipe[currentRecipe].RS_group;
    recipeSystem = recipe[currentRecipe].RS_system;
    ingred = DBLock(rBoxFile, recipegroup, recipe[currentRecipe].RS_head);
    DBUnlock(mapPtr);

    /* Set the current ingred global variable. */
    currentIngred = selection;

    /* Scan to new ingred, starting from list head. */
    for ( i=0; i < currentIngred; i++ ) {
	tmp = DBLock(rBoxFile, recipegroup, ingred->IS_next);
	DBUnlock(ingred);
	ingred = tmp;
    }

    /* Now we set up fields based on new ingred. */
    @call IngredName::MSG_VIS_TEXT_REPLACE_ALL_PTR(
		ingred->IS_ingred, 0);
    if (recipeSystem == USA) {
       @call IUSQuantity::MSG_VIS_TEXT_REPLACE_ALL_PTR(
		ingred->IS_quant, 0);
       @call IUSUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
			ingred->IS_units, FALSE);
      }
    else {
       @call IMetQuantity::MSG_VIS_TEXT_REPLACE_ALL_PTR(
		ingred->IS_quant, 0);
       @call IMUnits::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
			ingred->IS_units, FALSE);
      }


    /* enable edit & delete triggers */
    @send IEditTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
    @send IDeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);

    DBUnlock(ingred);
}

