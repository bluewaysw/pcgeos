/**************************************************************************
 *	File:		View.goc
 *			Routinen und Methoden zum einsehen von dateien
 *      Copyright:      (c) by RABE-Soft 2/99
 *      Sonstiges:      -
 *
 **************************************************************************/


@include <stdapp.goh>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <file.h>
#include <system.h>
#include <chunkarr.h>
#include <initfile.h>

@include "geozip.goh"
@include "process.goh"
@include "zipui.goh"
@include "extract.goh"
@include "view.goh"
#include "DEBUG/debuginf.h"

/* Globale Variablen, die nur in VIEW.GOC verwendet werden */

MemHandle 	dosFileList = 0;	// Block f�rs Array
optr            dosFileArray = 0;	// chunkArray mit DosFileEntrys

/*--------------------- MSG_GZIP_DOC_SHOW_INFO ---------------------
 *      Aufgabe:        Anzeige der Datei-Informationen
 *      Zusammenhang:
 *      Strategie:
 *      Parameter:
 ---------------------------------------------------------------------------*/
/*@extern method GZipDocumentClass, MSG_GZIP_DOC_SHOW_INFO {
word entry;
int entryType, err;
FileInZip * fizp;
dword index,v;
optr txt;
GeosHeader gHeader;
char attributes[34] = "      ";

	entry = @call @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	entryType = IndexArrayLockEntry(pself->GZDI_tempFile, pself->GZDI_indexArray,
		pself->GZDI_entryArray, pself->GZDI_currentIndex, entry, (void**)&fizp, &index);


	if ( entryType != IA_ET_FILE )
		{
		HugeArrayUnlock(fizp);
		UserStandardSound(SST_ERROR);
		return;
		}
	v = (((dword)fizp->versionMadeBy & 0xFF)<<16)/10;
	@send DetailVersionMadeBy::MSG_GEN_VALUE_SET_VALUE( v,FALSE);
	v = (((dword)fizp->versionNeed & 0xFF)<<16)/10;
	@send DetailVersionNeed::MSG_GEN_VALUE_SET_VALUE( v,FALSE);

	if (fizp->sizeComment >0)
		@send DetailKomentarTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	else
		@send DetailKomentarTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	switch (fizp->compressionMethod ) {
		case 0:   txt = @ZipMethod0;break;
		case 1:   txt = @ZipMethod1;break;
		case 2:   txt = @ZipMethod2;break;
		case 3:   txt = @ZipMethod3;break;
		case 4:   txt = @ZipMethod4;break;
		case 5:   txt = @ZipMethod5;break;
		case 6:   txt = @ZipMethod6;break;
		case 7:   txt = @ZipMethod7;break;
		case 8:   txt = @ZipMethod8;break;
		case 9:   txt = @ZipMethod9;break;
		case 10:  txt = @ZipMethod10;break;
		default : txt =  @ZipMethodX;break;
		}

	if (fizp->fileAttrs & FA_HIDDEN ) attributes [0] = 'H';
	if (fizp->fileAttrs & FA_SYSTEM ) attributes [1] = 'S';
	if (fizp->fileAttrs & FA_ARCHIVE ) attributes [2] = 'A';
	if (fizp->fileAttrs & FA_RDONLY ) attributes [3] = 'R';
	if (fizp->fileAttrs & FA_SUBDIR ) attributes [4] = 'D';
	if (fizp->isEncrypted ) strcat(attributes," Passwortgesch�tzt");
	@send DetailAttributeInfo::MSG_VIS_TEXT_REPLACE_ALL_PTR(attributes,0);

	/* attributes missbrauchen... :) */
/*	sprintf(attributes,"%lu Byte",fizp->compressedSize);
	@send DetailCompressedSize::MSG_VIS_TEXT_REPLACE_ALL_PTR(attributes,0);
	sprintf(attributes,"%lu Byte",fizp->uncompressedSize);
	@send DetailUncompressedSize::MSG_VIS_TEXT_REPLACE_ALL_PTR(attributes,0);

	sprintf(attributes,"%u Byte",fizp->sizeLocalExtraField);
	@send DetailExtraFiledSize::MSG_VIS_TEXT_REPLACE_ALL_PTR(attributes,0);
	sprintf(attributes,"%u Byte",fizp->sizeComment);
	@send DetailCommetSize::MSG_VIS_TEXT_REPLACE_ALL_PTR(attributes,0);

	@send DetailCompressionMethod::MSG_VIS_TEXT_REPLACE_ALL_OPTR(txt,0);
	@call DetailFileNameInfo::MSG_VIS_TEXT_REPLACE_ALL_PTR(&(fizp->name[fizp->pathLen]),0);

	/* Testen ob GEOS-File */
 /*	err =  ViewReadGeosHeader(pself->GZDI_unzDesc, fizp, &gHeader);
	if ( !err && (gHeader.Kennung == GEOS_HEADER_MAGIC ) ) {
		ViewToolUpdateGeodeInfo(&gHeader,fizp);
		memcpy(attributes,gHeader.Name,32);	/* Noch ein Mi�brauch :) */
 /*		attributes[32]=0;
		@call GeosInfoBox::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(attributes,VUM_NOW);
		@send DetailGeosInfoTrigger::MSG_GEN_SET_USABLE(VUM_NOW);
		}
	else @send DetailGeosInfoTrigger::MSG_GEN_SET_NOT_USABLE(VUM_NOW);

	HugeArrayUnlock(fizp);
	err = UserDoDialog(@GZipFileDetailInfoBox);	/*err == ret !*/
/* 	if ( err == IC_DETAIL ) UserDoDialog(@GeosInfoBox);
	}

/*--------------------- MSG_GZIP_DOC_VIEW_FILE ---------------------
 *      Aufgabe:        startet die Anzeige einer Text-Datei
 *      Zusammenhang:
 *      Strategie:
 *      Parameter:
 ---------------------------------------------------------------------------*/
@extern method GZipDocumentClass, MSG_GZIP_DOC_VIEW_FILE {
word entry;
int entryType;
Boolean err;
FileInZip * fizp;
dword index;

	entry = @call @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	entryType = IndexArrayLockEntry(pself->GZDI_tempFile, pself->GZDI_indexArray,
		pself->GZDI_entryArray, pself->GZDI_currentIndex, entry, (void**)&fizp, &index);
	if ( entryType == IA_ET_FILE )
	   {
	   err = ViewStartViewFile(pself->GZDI_unzDesc, fizp);

	   if ( err ) ErrorBox(@ErrorText);
/*
	   if ( !ok ) 	@send ViewText::MSG_VIS_TEXT_REPLACE_ALL_OPTR(,0);
	   @call ViewWindow::MSG_GEN_SET_ENABLED(VUM_NOW);
hier sollte nut eine Info-Box gher: Fehler beim laden!
*/
	   }
	else UserStandardSound(SST_ERROR);

	HugeArrayUnlock(fizp);
	}


/*--------------------- ViewStartViewFile ---------------------
 *      Aufgabe:        Kopfroutine zur Dateianzeige
 *      Strategie:	Datei anlesen, f�r Entscheidung ob Geos oder nicht
 *			bei Dos-Dateien: evt. Ini-Eintr�ge suchen
 *                      In Abh�ngigkeit vom Ergebnis den entprechenden
 *			Anzeige-Handler (ViewExex...) rufen
 *      Params/Return:	True, wenn fehler
 ---------------------------------------------------------------------------*/
extern Boolean ViewStartViewFile(MemHandle unzDesc, FileInZip * fizp) {
  int err;
  GeosHeader gHeader;
  DosAppInfo info;
  word flags;

//    flags = @call GZipViewFilesSelector::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
    flags = GZOPT_VIEW_START_GEODES |
				   GZOPT_VIEW_OPEN_DOCUMENTS |
				   GZOPT_VIEW_OPEN_DOS_DOCUMENTS;

    err =  ViewReadGeosHeader(unzDesc, fizp, &gHeader);
    if ( err ) return TRUE;

    if  ( gHeader.Kennung != GEOS_HEADER_MAGIC )
	{  // DOS-Datei gefunden
	char * p;
	p = fizp->name;
	DirListParseNameFromPath(&p);
	ViewGetDosAppInfo(p, &info);
	if ( info.type == DFT_BAT )
			err = ViewExecBatFile(unzDesc, fizp,&info,flags);
	else if (info.type == DFT_COM_EXE )
			err = ViewExecComExeFile(unzDesc, fizp,&info,flags);
		else 	{
			if ( !info.found ) ViewShowLocatedFile(unzDesc, fizp);
			else err = ViewExecDosDataFile(unzDesc, fizp,&info,flags);
			}
	}

    else
	{ // Geos-Datei gefunden
	if   (gHeader.fileType == GFT_EXECUTABLE )
			err = ViewExecGeode(unzDesc, fizp,&gHeader,flags);
	else 	err = ViewExecGeosDataFile(unzDesc, fizp,&gHeader,flags);

	}
  return err;
  }


// oberes Level - Ausagelagerte Routinen zur �bersicht und Main-Handler

/*--------------------- ViewExecBatFile ---------------------
 *      Aufgabe:        Start der Anzeige einer Dos-BAT-Datei
 *	Strategie:	Bat Dateien anders als COM / EXE behandeln
 *			Die eigentlichen Handler sind noch mal ausgelagert
 *      Params/Return:	Boolean, wenn Fehler
 ---------------------------------------------------------------------------*/
Boolean ViewExecBatFile(MemHandle unzDesc, FileInZip * fizp,
				DosAppInfo * info, word flags)
   {
   int ret;
   char * p;

   if ( flags & GZOPT_VIEW_SHOW_BAT ) ret = IC_VIEW;
	else 	{
		MemLock(HandleOf(@ViewAskBatFileText));
		p = LMemDeref(@ViewAskBatFileText);
		ret = UserStandardDialog(0,(char*)&viewBatResponseTable,
			0, fizp->name, p,
			(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
			| (GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) );
		MemUnlock(HandleOf(@ViewAskBatFileText));
		}

   if ( ret == IC_VIEW ) ViewShowLocatedFile(unzDesc, fizp);
   else if ( ret == IC_EXECUTE ) ViewExecuteLocatedDosFile(unzDesc, fizp);

	info++;

   return FALSE;
   }

/*--------------------- ViewExecComExeFile ---------------------
 *      Aufgabe:        Start der Anzeige einer COM oder EXE Datei
 *      Strategie:      Die eigentlichen Handler sind noch mal ausgelagert
 *			Behandlung von Com/ Exe ist getrennt von Bat
 *      Params/Return:	TRUE, Wenn Fehler
 ---------------------------------------------------------------------------*/
Boolean ViewExecComExeFile(MemHandle unzDesc, FileInZip * fizp,
				DosAppInfo * info, word flags)
   {
   int ret;
   char * p;

   if ( flags & GZOPT_VIEW_START_COM_EXE ) ret = IC_EXECUTE;
	else 	{
		MemLock(HandleOf(@ViewAskComExeFileText));
		p = LMemDeref(@ViewAskComExeFileText);
		ret = UserStandardDialog(0,(char*)&viewComExeResponseTable,
			0, fizp->name, p,
			(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
			| (GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) );
		MemUnlock(HandleOf(@ViewAskComExeFileText));
		}

   if ( ret == IC_VIEW ) ViewShowLocatedFile(unzDesc, fizp);
   else if ( ret == IC_EXECUTE ) ViewExecuteLocatedDosFile(unzDesc, fizp);

	info++;

   return FALSE;
   }

/*--------------------- ViewExecDosDataFile ---------------------
 *      Aufgabe:	Start der Anzeige einer Dos-Data-File
 *      Strategie:	Mainprogramm f�r die eigentlichen Handler
 *      Params/Return:	True wenn Fehler
 ---------------------------------------------------------------------------*/
Boolean ViewExecDosDataFile(MemHandle unzDesc, FileInZip * fizp,
				DosAppInfo * info, word flags)
   {
   int ret;
   char * p, * n;

   if ( flags & GZOPT_VIEW_OPEN_DOS_DOCUMENTS ) ret = IC_OPEN;
	else 	{
		MemLock(HandleOf(@ViewAskDosDataFileText));
		p = LMemDeref(@ViewAskDosDataFileText);
		n = fizp->name;
		DirListParseNameFromPath(&n);
		ret = UserStandardDialog(0,(char*)&viewDosDataResponseTable,
			0, n, p,
			(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
			| (GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) );
		MemUnlock(HandleOf(@ViewAskDosDataFileText));
		}

   if ( ret == IC_VIEW ) ViewShowLocatedFile(unzDesc, fizp);
   else if ( ret == IC_OPEN ) ViewStartLocatedDosDataFile(unzDesc, fizp,info, flags);

   return FALSE;
   }

/*--------------------- ViewGetDosAppInfo ---------------------
 *      Aufgabe:        Auslesen der INI-Informationen f�r eine DOS-Datei,
 *			die mit einer Geode verk�pft ist
 *      Strategie:	Liefert alle Infos, die N�tig sind eine DOS-Datei
 *			so zu starten, wie dies us dem Manager auch w�re
 *      Params/Return:	void ( Dateiname, return-Struktur)
 ---------------------------------------------------------------------------*/
void ViewGetDosAppInfo(char * name, DosAppInfo * info)
   {
   char body[10], ext[6];
   Boolean err;

   if ( !dosFileList) 	err = ViewToolCreateDosFileList();
	else err = 0;

   if ( err ) {	// kein Eintrag in der INI gefunden
	info->found = FALSE;
	}
	else ViewToolFindTokenInfo(info, name);

// Check ob Bat / COM oder EXE - Datei
   ViewToolSplitDosFileName(name, body, ext);

   if (!strcmp(ext,"BAT"))	{
			info->type = DFT_BAT;
			return;
			}
   if (!strcmp(ext,"COM"))	{
			info->type = DFT_COM_EXE;
			return;
			}
   if (!strcmp(ext,"EXE"))	{
			info->type = DFT_COM_EXE;
			return;
			}
   info->type = DFT_DATA;
   }


/*--------------------- ViewExecGeosDataFile ---------------------
 *      Aufgabe:        Anzeige einer Geos-Daten-Datei
 *      Strategie:	Die Datei wird (falls nicht Text-Ansicht gew�nscht)
 *			In eine tempor�res Verzeichnis entpackt und mit
 *			der zugeh�rigen Applikation gestartet
 *      Params/Return:	True wenn Fehler
 ---------------------------------------------------------------------------*/
Boolean ViewExecGeosDataFile(MemHandle unzDesc, FileInZip * fizp,
				GeosHeader * header, word flags)
{
word count, ctok;
MemHandle mh;
GeodeToken t;
AppLaunchBlock  *albPtr;
int err, cmd;
char *p;


    if ( flags & GZOPT_VIEW_OPEN_DOCUMENTS ) cmd = IC_OPEN;
	else    cmd = ViewDisplayGeodeInfo(header, fizp);

    if ( cmd == IC_VIEW )
	{
	ViewShowLocatedFile(unzDesc, fizp);
	return FALSE;
	}

    if (cmd != IC_OPEN ) return FALSE;

    err = ViewExtractLocatedFileToTemp(unzDesc, fizp);
    if ( err ) return TRUE; /* ?? TRUE OK? */

   t = header->creatorToken;
   mh = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);
   albPtr = MemLock(mh);

   MemLock(HandleOf(@ViewTempDirName));
   strcpy(albPtr->ALB_path,LMemDeref(@ViewTempDirName));
   MemUnlock(HandleOf(@ViewTempDirName));

/* Alte version, Zeigtr DOS-Name an
   p = fizp->name;
   DirListParseNameFromPath(&p);
   strcpy(albPtr->ALB_dataFile,p); */

/* neue version, Zeigt GEOS-Name an */
   p = header->Name;
   memcpy(albPtr->ALB_dataFile,header->Name,32);
   albPtr->ALB_dataFile[32] =0;

   albPtr->ALB_diskHandle = SP_DOCUMENT;
   MemUnlock(mh);
   ctok = IACPConnect(&t, IACPSM_USER_INTERACTIBLE | IACPCF_FIRST_ONLY
				, mh, NullOptr, &count);
   if ( ctok == 0 ) {
	if ( *p != '@' ) {	/* @dirname, @nd_sonstwas mit DOS-Namen anzeigen */
		FileLongName	fName;
		memcpy(fName,header->Name,32);
		fName[32]=0;
		p = fName;
		}
	DisplayErrorBox(p,GZIP_APP_NOT_FOUND_ERROR);
	}
   else IACPShutdown(ctok,NullOptr);

   return FALSE;
   }

/*--------------------- ViewExecGeode ---------------------
 *      Aufgabe:        Starten einer Ausf�hrbaeren Datei
 *      Strategie:	Die Datei wird in ein tempor�res Verzeichnis
 *			entpackt und gestartet (Falls nicht Text-Ansicht
 *			gew�nscht wurde)
 *      Params/Return:	True wenn Fehler
 ---------------------------------------------------------------------------*/
Boolean ViewExecGeode(MemHandle unzDesc, FileInZip * fizp, GeosHeader * header, word flags)
   {
word count, ctok;
MemHandle mh;
GeodeToken t;
AppLaunchBlock  *albPtr;
int err, cmd;
FileLongName	appName;

    if ( flags & GZOPT_VIEW_START_GEODES ) cmd = IC_EXECUTE;
	else    cmd = ViewDisplayGeodeInfo(header, fizp);

    if ( cmd == IC_VIEW )
	{
	ViewShowLocatedFile(unzDesc, fizp);
	return FALSE;
	}

    if (cmd != IC_EXECUTE ) return FALSE;

    err = ViewExtractLocatedFileToTemp(unzDesc, fizp);
    if ( err ) return TRUE; /* ?? TRUE OK? */

   t = header->fileToken;
   mh = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);
   albPtr = MemLock(mh);


   MemLock(HandleOf(@ViewTempDirName));
   strcpy(albPtr->ALB_appRef.AIR_fileName,LMemDeref(@ViewTempDirName));
   MemUnlock(HandleOf(@ViewTempDirName));

   strcat(albPtr->ALB_appRef.AIR_fileName,"\\");
   memcpy(appName,header->Name,32);
   appName[32] =0;
   strcat(albPtr->ALB_appRef.AIR_fileName,appName);
   albPtr->ALB_appRef.AIR_diskHandle = SP_DOCUMENT;

   MemUnlock(mh);
   ctok = IACPConnect(&t, IACPSM_USER_INTERACTIBLE | IACPCF_FIRST_ONLY
			, mh, NullOptr, &count);
   if ( ctok == 0 ) {
	DisplayErrorBox(appName,GZIP_APP_NOT_EXECUTABLE_ERROR);
	}
   else IACPShutdown(ctok,NullOptr);

   return FALSE;



}




// Unterstes Level - Toolroutine

/*--------------------- ViewExtractLocatedFileToTemp ---------------------
 *      Aufgabe:        Auspacken der aktuellen Datei in ein tempor�res
 *			Verzeichnis. Das Temp-Verzeichnis wird bei Bedarf
 *			angelegt.
 ---------------------------------------------------------------------------*/
int ViewExtractLocatedFileToTemp(MemHandle unzDesc, FileInZip * fizp)
{
int err = 0, err2 = 0;

 // jfh   if ( isShare ) { DisplayShareBox(@ShareWareText,@shareHct); }

    @send ExtractArchiveInfo::MSG_EAI_INITIATE
			(0,fizp->uncompressedSize);
    cancelExtract = FALSE;
    FilePushDir();
    FileSetStandardPath(SP_DOCUMENT);
    MemLock(HandleOf(@ViewTempDirName));
    err = FileCreateDir(LMemDeref(@ViewTempDirName));
    MemUnlock(HandleOf(@ViewTempDirName));
    if ( (err != 0) && ( err != ERROR_FILE_EXISTS ) )
	{
	ErrorBox(@ErrorCreateTempDir);
	}
    else
	{
	MemLock(HandleOf(@ViewTempDirName));
	FileSetCurrentPath(0,LMemDeref(@ViewTempDirName));
	MemUnlock(HandleOf(@ViewTempDirName));

	cancelExtract = FALSE;
	globalExtractFlags = GEF_DIRNAME_IGNORE
			| GEF_USE_OLD_DOS_NAME_FOR_GEOS_FILES;
			/* das ist der sinnvollste Wert */
			/* die Flags werden nicht von den Selektoren geholt,
			   weil zB. Dirname_Overwrite oder Diname_cancel
			   Missverst�ndnisse hervorrufen kann
			   Wird versucht die Dirname einzusehen, dann ignoriert
			   er sie beim auspacken, startet dann die vorhandene
			   (mir dem Namen des Temp-Dirs) und meldet den geeigneten
			   Fehler: Applikation nicht gefunden 	   */

	err = UnzOpenCurrentFile(unzDesc);
	if ( err == UNZ_OK )
		{
		err = GZipExtractOpenedFile(unzDesc, fizp);
		err2 = UnzCloseCurrentFile(unzDesc);
		}
	if ( err ) DisplayErrorBox(fizp->name,err);
	else if ( err2 ) DisplayErrorBox(fizp->name,err2);
	}
    FilePopDir();
    @send ExtractArchiveInfo::MSG_EAI_ENDE();
    return ( err | err2 | cancelExtract);
    }

/*--------------------- ViewReadGeosHeader ---------------------
 *      Aufgabe:        Auslesen der ersten Bytes in eine GeosHeader-Struktur
 *			Ohne Pr�fung ob es wirlich eine Geos-Datei ist
 *	Return:		TRUE: 	Lesefehhler
 *			FALSE:  OK
 ---------------------------------------------------------------------------*/
extern Boolean ViewReadGeosHeader(MemHandle unzDesc, FileInZip * fizp, GeosHeader *gHeader) {
int err, read;
    /* Datei �ffnen und Geos-Header lesen */
    err = UnzGoToFileAt(unzDesc, &fizp->quickLocateParams);
    if( err != UNZ_OK) return TRUE;

    err = UnzOpenCurrentFile(unzDesc);
    if( err != UNZ_OK) return TRUE;

    read = UnzReadCurrentFile(unzDesc, gHeader, sizeof(GeosHeader));
    if (read < 0 ) 	return TRUE;
    UnzCloseCurrentFile(unzDesc);
    return FALSE;
    }


/* ausgelagerte Tool-Routinen, um Das Anzeigen der Geos-Informationen im
	Detail-Dialog zu erleichtern */

/*--------------------- ViewToolFileDateToTimeDate ---------------------
 *      Aufgabe:        Konvertieren der GeosDatenStrukturen
 *      Params/Return:	void ( Zielstruktur, Quellstruktur)
 ---------------------------------------------------------------------------*/
void ViewToolFileDateToTimeDate( TimerDateAndTime *tdat, FileDateAndTime fdat) {
  tdat->TDAT_year = FDATExtractYearAD(fdat);
  tdat->TDAT_month = FDATExtractMonth(fdat);
  tdat->TDAT_day = FDATExtractDay(fdat);
  tdat->TDAT_hours = FDATExtractHour(fdat);
  tdat->TDAT_minutes= FDATExtractMinute(fdat);
  tdat->TDAT_seconds = FDATExtractSecond(fdat);
  }

/*--------------------- ViewToolShowDate ---------------------
 *      Aufgabe:        Ein Datum als VisMoniker an ein Objekt senden
 ---------------------------------------------------------------------------*/
void ViewToolShowDate(optr glyph, FileDateAndTime fdat ) {
char date[16];
TimerDateAndTime tdat;

  ViewToolFileDateToTimeDate( &tdat, fdat);
  LocalFormatDateTime(date, DTF_ZERO_PADDED_SHORT, &tdat);
  @call glyph::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(date,VUM_NOW);
  }

/*--------------------- ViewToolShowDate ---------------------
 *      Aufgabe:        Eine Uhrzeit als VisMoniker an ein Objekt senden
 ---------------------------------------------------------------------------*/
void ViewToolShowTime(optr glyph, FileDateAndTime fdat ) {
  char time[16];
TimerDateAndTime tdat;

  ViewToolFileDateToTimeDate( &tdat, fdat);
  LocalFormatDateTime(time, DTF_HMS, &tdat);
  @call glyph::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(time,VUM_NOW);
  }


/*--------------------- ViewToolShowIconID ---------------------
 *      Aufgabe:        Eine Icon-ID als VisMoniker an ein Objekt senden
 ---------------------------------------------------------------------------*/
void ViewToolShowIconID(optr glyph, GeodeToken t ) {
char icon[16];

   memcpy(icon,t.GT_chars,4);
   icon[4]=',';
   UtilHex32ToAscii(&icon[5],t.GT_manufID, UHTAF_NULL_TERMINATE);
   @call glyph::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(icon,VUM_NOW);
  }

/*--------------------- ViewToolAddNumber ---------------------
 *      Aufgabe:        Ene Nummer an eine String h�ngen
 ---------------------------------------------------------------------------*/
void ViewToolAddNumber(char * st, dword num ) {
char *p;
  p = strchr(st,0);	// Zeiger auf die Null
  UtilHex32ToAscii(p,num, UHTAF_NULL_TERMINATE);
  }

/*--------------------- ViewToolUpdateGeodeInfo ---------------------
 *      Aufgabe:        Geode-Informationen aus dem Header und fizp lesen
 *			und an den daf�r vorgesehenen AnzeigeDialog senden
 *      Strategie:	Der Dialog wird ge�ndert, aber nicht gestartet
 ---------------------------------------------------------------------------*/
void	ViewToolUpdateGeodeInfo(GeosHeader *header, FileInZip * fizp) {
char hilfstext[100];
char * p;

   ViewToolShowDate(@InfoCreateDateText,header->createDate);
   ViewToolShowTime(@InfoCreateTimeText,header->createDate);
   ViewToolShowIconID(@InfoCreatorText,header->creatorToken);

   p = fizp->name;
   DirListParseNameFromPath(&p);
   @call InfoDosNameText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(p,VUM_NOW);

   UtilHex32ToAscii(hilfstext,fizp->uncompressedSize, UHTAF_NULL_TERMINATE);
   @call InfoFileSizeText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(hilfstext,VUM_NOW);

   ViewToolShowIconID(@InfoIconIDText,header->fileToken);

   ViewToolShowDate(@InfoModifiedDateText,fizp->modDate);
   ViewToolShowTime(@InfoModifiedTimeText,fizp->modDate);

   hilfstext[0]=0;
   ViewToolAddNumber(hilfstext,header->protocolNumber.PN_major);
   strcat(hilfstext,".");
   ViewToolAddNumber(hilfstext,header->protocolNumber.PN_minor);
   @call InfoProtocolText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(hilfstext,VUM_NOW);

   hilfstext[0]=0;
   ViewToolAddNumber(hilfstext,header->releaseNumber.RN_major);
   strcat(hilfstext,".");
   ViewToolAddNumber(hilfstext,header->releaseNumber.RN_minor);
   strcat(hilfstext,"  ");
   ViewToolAddNumber(hilfstext,header->releaseNumber.RN_change);
   strcat(hilfstext,"-");
   ViewToolAddNumber(hilfstext,header->releaseNumber.RN_engineering);
   @call InfoReleaseText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(hilfstext,VUM_NOW);

   if ( *(header->password) ) {	/* Passwort gesetzt */
	@call InfoPasswordText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Yes",VUM_NOW);
	}
   else {
	@call InfoPasswordText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("No",VUM_NOW);
	}

   memcpy(hilfstext,header->copyright,32);
   hilfstext[33]=0;
   @call InfoCopyrightText::MSG_VIS_TEXT_REPLACE_ALL_PTR(hilfstext,0);

   memcpy(hilfstext,header->notiz,99);
   hilfstext[99]=0;
   @call GeosInfoUserNotes::MSG_VIS_TEXT_REPLACE_ALL_PTR(hilfstext,0);

   if (fizp->fileAttrs & FA_HIDDEN ) hilfstext [0] = 'H'; else hilfstext [0] = ' ';
   if (fizp->fileAttrs & FA_SYSTEM ) hilfstext [1] = 'S'; else hilfstext [1] = ' ';
   if (fizp->fileAttrs & FA_ARCHIVE ) hilfstext [2] = 'A';else hilfstext [2] = ' ';
   if (fizp->fileAttrs & FA_RDONLY ) hilfstext [3] = 'R'; else hilfstext [3] = ' ';
   if (fizp->fileAttrs & FA_SUBDIR ) hilfstext [4] = 'D'; else hilfstext [4] = ' ';
   hilfstext[5]=0;
   @call InfoAttributeText::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(hilfstext,VUM_NOW);

   }

// Holen von Infos �ber DOS-Dateien aus der geos.ini
/*--------------------- ViewToolCreateDosFileList ---------------------
 *      Aufgabe:        Einlesen der Geos.ini und Anlegen einer Liste mit
 *			allen DOS-DAtei-Typen, die mit Geos-Applikationen
 *			verkn�pft sind
 *	Return:		TRUE; wenn Error (z.B. kein Eintrag in der INI )
 ---------------------------------------------------------------------------*/
Boolean ViewToolCreateDosFileList(void)
  {
  MemHandle mh;
  word size;
  char * iniStr, *p, * txt;
  DosFileEntry	fileEntry, *fep;
  int err;


// chunkArray erzeugen
  dosFileList = MemAllocLMem(LMEM_TYPE_GENERAL, 0 );
  MemLock(dosFileList);
  dosFileArray =ConstructOptr(dosFileList,
		ChunkArrayCreate(dosFileList,sizeof(DosFileEntry),0,OCF_DIRTY));

// Init-String lesen
  MemLock(HandleOf(@FileManagerKategory));
  err = InitFileReadStringBlock(LMemDeref(@FileManagerKategory),
		LMemDeref(@FileManagerKey), &mh, 0, &size);
  MemUnlock(HandleOf(@FileManagerKategory));

  if ( err || ( mh == 0 ) ) return TRUE;

  iniStr = MemLock(mh);

// String durchsuchen
  do {
     txt = iniStr;              // Zeiger auf akktuelle Zeile
     p = strchr(txt, '\r');	// Zeiger auf Ende der Zeile, Null falls letzte Z.
     iniStr = p+1;		// Zeiger auf n�chste Zeile, f�r n�chste Runde
				// ung�ltig wenn txt auf letzte Zeile zeigt!
     while ( (*iniStr== 0x0A) || (*iniStr== 0x0D) ) iniStr ++;

     if ( p ) {			// Wenn es nicht die letzte Zeile war
	      *p = 0;		// Terminator f�r aktuelle Zeile setzen
	      if ( !ViewToolReadFileEntry(&fileEntry, txt) ) {
		    // Element hinzuf�gen
			fep = ChunkArrayAppend(dosFileArray,sizeof(DosFileEntry));
			*fep = fileEntry;
			}
	      }
     } while (p);
  // letzte Zeile bearbeiten
  if ( !ViewToolReadFileEntry(&fileEntry, txt) ) {
	    // Element hinzuf�gen
		fep = ChunkArrayAppend(dosFileArray,sizeof(DosFileEntry));
		*fep = fileEntry;
		}

  MemFree(mh);
  MemUnlock(dosFileList);
  return FALSE;
  }
/*--------------------- ViewToolReadFileEntry ---------------------
 *      Aufgabe:        Erzeugen eines DosFileEntry aus einem �bergebenen Text
 *      Params/Return:	Return TRUE, wenn keine Applikation zugeordnet ist
 *	Wichtig:	dfep->body und dfep->ext werden in jedem Fall belegt
 ---------------------------------------------------------------------------*/
Boolean ViewToolReadFileEntry(DosFileEntry * dfep, char * text )
  {
  char name[16], *p;


  while ( (*text == ' ') || (*text == '\t') ) text++;
  memcpy(name,text,14);
  name[14] = 0;

  ViewToolSplitDosFileName(name, dfep->body, dfep->ext);

// Position der Sterne bestimmen und merken ( -1 == kein Stern )
  p = strchr(dfep->body, '*' );
  if (p) {	dfep->bodyStar = p - dfep->body;
		*p = 0;
		}
	else {  dfep->bodyStar = -1 ;
		}
  p = strchr(dfep->ext, '*' );
  if (p) {	dfep->extStar = p - dfep->ext;
		*p = 0;
		}
	else {  dfep->extStar = -1 ;
		}

// Applikation-Token holen
  p = strchr(text,'=');
  if (!p)	return TRUE;	// eintrag ung�ltig

  return ViewToolReadAppToken(&(dfep->tok), p);
  }

/*--------------------- ViewToolReadAppToken ---------------------
 *      Aufgabe:        TokenID der zugeordneten Applikation holen
 *      Params/Return:	Return TRUE, wenn keine Applikation zugeordnet ist
 ---------------------------------------------------------------------------*/
Boolean ViewToolReadAppToken( GeodeToken *t, char * text)
  {
  char * p, zahl[8];
  int n;
  sdword z;

// GeodeTokenChars lesen. Applikation ist der zweite Eintrag,
// beginnt also mit dem dritten '"'
  p = strchr(text,'"');
  if (!p) return TRUE;
  p++;
  p = strchr(p,'"');
  if (!p) return TRUE;
  p++;
  p = strchr(p,'"');
  if (!p) return TRUE;
  p++;			// p zeigt nach das dritte '"'

  if ( strlen(p) < 7 ) return TRUE;	// mind: 'TOKN",1' => 7 Zeichen
  memcpy(t->GT_chars, p, 4);

// Manufacturer ID holen
  p = strchr(p,',');
  if (!p) return TRUE;
  p++;
  while ( (*p == ' ') || (*p == '\t') ) p++;	// p zeigt auf Ziffernfolge

// Zahlenstring kopieren
  n = 0;
  while ( (*p >= '0') && (*p <= '9') && (n<5) ) {
	zahl[n] = *p;
	p++; n++;
	}
  zahl[n] = 0;

// bl�dsinnige Type-konvertiererei
  n = UtilAsciiToHex32(zahl, &z );
  t->GT_manufID = (word)z;
  return n;		// TRUE == FEHLER
  }

/*--------------------- ViewToolSplitDosFileName ---------------------
 *      Aufgabe:        Aufteilen eines DOS-Dateinamens in Body und Extension
 *			Inclusive Leerzeichenskipping und Umwandlung in
 *			Gro�buchstaben
 ---------------------------------------------------------------------------*/
void ViewToolSplitDosFileName(char * fName, char * body, char * ext)
  {
  char name[16], * p, *p0;

  strcpy(name,fName);		// String soll evt. modifiziert werden
  p0 = name;
  while ( (*p0 == ' ') || (*p0 == '\t') ) p0++;

  p = strchr(p0,'.');
  if ( !p ) { strcat(p0,".");
	  p = strchr(p0,'.');
	  }
  *p = 0;
  p++;			// erstes Zeichen Extension
  strcpy(body,p0);      // body kopiert

  memcpy(ext,p,3);	// Extension (maximal)
  ext[3] = 0;

  p = strchr(ext, ' '); // ung�ltige Zeichen am Ende streichen
  if (p) *p = 0;
  p = strchr(ext, '\t');
  if (p) *p = 0;
  p = strchr(ext, '=');
  if (p) *p = 0;

  LocalUpcaseString(body,0);
  LocalUpcaseString(ext,0);
  }

/*--------------------- ViewToolCompareFileName ---------------------
 *      Aufgabe:        Vergleich eines Dateinamens mit einer
 *			DosFileEntry-Struktur
 *	Strategie:	Die DosFileentry-Struktur enth�lt Infos �ber die
 *			evt. vorhandenen WildCards '*' -> Werden ber�cksichtigt
 *      Params/Return:	TRUE wenn die Namen �bereinstimmen
 ---------------------------------------------------------------------------*/
Boolean ViewToolCompareFileName(DosFileEntry * dfep, char * name)
  {
  char body[16], ext[8], *p;
  int n;

  ViewToolSplitDosFileName(name, body, ext);

// Wildcard '*' beachten
  if ( dfep->bodyStar != (-1) ) body[dfep->bodyStar] = 0;
  if ( dfep->extStar != (-1) ) ext[dfep->extStar] = 0;

// Wildcard '?' beachten
  p = dfep->body; n= -1;
  while ( *p != 0 ) { n++; if ( *p == '?' ) body[n] = '?'; p++; }
  p = dfep->ext; n= -1;
  while ( *p != 0 ) { n++; if ( *p == '?' ) ext[n] = '?'; p++; }

// Vergleich ausf�hren
  if ( strcmp(ext,dfep->ext) ) return FALSE;
  if ( strcmp(body,dfep->body) ) return FALSE;
  return TRUE;
  }

/*--------------------- ViewToolFindTokenInfo ---------------------
 *      Aufgabe:        DosAppInfo.Applicaton  mit GeodeToken der
 *			dazugeh�rigen Applikation belegen
 *      Params/Return:	wenn gefunden:  info->found == TRUE,
 *					info->Application mit Token der App belegt
 *			wenn nicht gefunden: info->found == FALSE
 ---------------------------------------------------------------------------*/
void ViewToolFindTokenInfo(DosAppInfo * info, char * name)
  {
  int count, n;
  DosFileEntry	dfe;

  MemLock(dosFileList);
  count = ChunkArrayGetCount(dosFileArray);
  if ( ! count ) {
		  info->found = FALSE;
		  MemUnlock(dosFileList);
		  return;
		  }

  for ( n= 0; n < count ; n++ )
	{
	ChunkArrayGetElement(dosFileArray,n, & dfe);
	if ( ViewToolCompareFileName( &dfe, name) ) {
		  info->Application = dfe.tok;
		  info->found = TRUE;
		  MemUnlock(dosFileList);
		  return;
		  }
	}
  info->found = FALSE;
  MemUnlock(dosFileList);
  return;
  }


// Mittleres Level - Eigentliche Handler
/*
 *	ViewDisplayGeodeInfo
 *
 *	Anzeige der Geos-Informationen einer Datei - falld die flags das zulassen
 *
 *	Return: IC_CANCEL | IC_VIEW | IC_OPEN | IC_EXECUTE
 */
/*--------------------- ViewDisplayGeodeInfo ---------------------
 *      Aufgabe:        Informationen dar�ber anzeigen , das es sich um eine
 *			Geos-Datei handelt.
 *      Zusammenhang:   Wird vor dem Start einer Applikation  oder dem �ffnen
 *			eines Dokuments aufgerufen
 *      Strategie:	zun�chst wird ein kleines Info-Fenster angezeigt, da�
 *			�ber den Typ und die m�glichen Reaktionen Auskunft gibt.
 *			Bei bedarf erfolgt eine Detailansicht
 *      Params/Return:	void ( void)
 ---------------------------------------------------------------------------*/
int ViewDisplayGeodeInfo(GeosHeader * header, FileInZip * fizp)
{
   int ret;
   optr askText;
   FileLongName name;
   char * p;
   void * responsetable;

   if ( header->fileType == GFT_EXECUTABLE )
		{
		askText = @ViewAskGeodeFileText;
		responsetable = &viewGeodeResponseTable;
		}
   else 	{
		askText = @ViewAskGeosDocumentFileText;
		responsetable = &viewDocumentResponseTable;
		}

   memcpy(name,header->Name,32);
   name[32] =0;

   MemLock(HandleOf(askText));
   p = LMemDeref(askText);
   ret = UserStandardDialog(0,(char*)responsetable, 0, name, p,
			(CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET)
			| (GIT_MULTIPLE_RESPONSE << CDBF_INTERACTION_TYPE_OFFSET) );
   if ( ret == IC_DETAIL ) {
		@call GeosInfoBox::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(name,VUM_NOW);
		ViewToolUpdateGeodeInfo(header,fizp);
		UserDoDialog(@GeosInfoBox);
		}
 
   MemUnlock(HandleOf(askText));


   return ret;

}

/*--------------------- ViewShowLocatedFile ---------------------
 *      Aufgabe:        Textansicht der aktuellen Datei
 *      Strategie:	Universelle, wenn auch nicht immer ideale
 *			Anzeigevariante
 ---------------------------------------------------------------------------*/
void ViewShowLocatedFile(MemHandle unzDesc, FileInZip * fizp)
{
    register byte c;
    word size=0;
    int read, i, j;
    byte *buf, c2;
//    Boolean ret = FALSE;
    int err;

    @send ViewText::MSG_VIS_TEXT_REPLACE_ALL_OPTR(@BlankText,0);
    @call ViewWindow::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    @call ViewWindow::MSG_GEN_INTERACTION_INITIATE();

    err = UnzOpenCurrentFile(unzDesc);
    if( err != UNZ_OK) {
	@send ViewText::MSG_VIS_TEXT_REPLACE_ALL_OPTR(@ErrorText,0);
	@call ViewWindow::MSG_GEN_SET_ENABLED(VUM_NOW);
	return;
	}
      do {                              /* ensure UnzCloseCurrentFile() */

	/* allocate a buffer for the decompressed data */
	buf = malloc(READ_BUF_SIZE);
	if(!buf) {
	  DisplayErrorBox(fizp->name,GZIP_COMMON_FILE_ERROR);
	  break;
	  }
	c2 = 0;
	do {                            /* ensure free() */

	  while( ((read = UnzReadCurrentFile(unzDesc, buf, READ_BUF_SIZE)) > 0) &&
		 (size < MAX_VIEW_SIZE))
	  {

	    for(i=0,j=0; i<read; i++)         /* remove weird characters */
	    {
	      c = buf[i];
	      if(c>=' ' || c=='\t' ||
		(c=='\r' && c2!='\n') || (c=='\n' && c2!='\r'))
		buf[j++] = (c=='\n')?'\r':c;
	      c2 = c;                   /* one-character look-back */
	    }
	    LocalDosToGeos((char*)buf, j, '_');/* convert the rest to Geos */
	    /* append text to text object */
	    @call ViewText::MSG_VIS_TEXT_APPEND_PTR((char*)buf, j);

	    size += j;                  /* add up the bytes we've added */
	  }
	if (read < 0 )
		{
		DisplayErrorBox(fizp->name,GZIP_COMMON_FILE_ERROR);
		break;
		}
	  if (fizp->uncompressedSize > MAX_VIEW_SIZE )
				DisplayErrorBox(fizp->name,GZIP_SHORT_VIEW);

//	  ret = TRUE;                   /* ok */

	} while(0);
	free(buf);

      } while(0);
      err = UnzCloseCurrentFile(unzDesc);
      if ( err || (size > fizp->uncompressedSize ))
				DisplayErrorBox(fizp->name,GZIP_COMMON_FILE_ERROR);

   @call ViewWindow::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/*--------------------- ViewExecuteLocatedDosFile ---------------------
 *      Aufgabe:        Starten einer ausf�hrbaren DOS-Datei
 *      Strategie:	Die Datei wird ins tempor�re Verzeichnis entpackt
 *			und dort gestartet. ( mit DosExec() )
 *			Die �bergabe von Parametern ist nicht (noch) implementiert
 ---------------------------------------------------------------------------*/
void ViewExecuteLocatedDosFile(MemHandle unzDesc, FileInZip * fizp)
{
char path[50];  /* 33 f�r Geos-Verzeichnis-Name + 13 f�r DOS Datei + Reserve*/
int err;

    err = ViewExtractLocatedFileToTemp(unzDesc, fizp);
    if ( err ) return;

    FilePushDir();
    FileSetStandardPath(SP_DOCUMENT);
    MemLock(HandleOf(@ViewTempDirName));
    FileSetCurrentPath(0,LMemDeref(@ViewTempDirName));

    strcpy(path,LMemDeref(@ViewTempDirName));
    strcat(path,"\\");
    strcat(path,fizp->name);
    isTryingStartDos = TRUE;		// leave temp Dir undeleted
    err = DosExec(path,SP_DOCUMENT,"",LMemDeref(@ViewTempDirName),SP_DOCUMENT,DEF_PROMPT);

@if @debugFlag
DebugInfo1("\rExecReturn %d ",err);
DebugInfo1("\rExecThreadError %d ",ThreadGetError());
@endif

    MemUnlock(HandleOf(@ViewTempDirName));

    FilePopDir();
}

/*--------------------- ViewStartLocatedDosDataFile ---------------------
 *      Aufgabe:        �ffnen einer DOS-Datei mit einer Geode
 *      Strategie:	Die Datei wird ins Temp-verzeichnis entpackt und
 *			die Geode mit dieser Datei als Datendatei gestartet,
 *			so als h�tte man im Manager einen Doppelklick auf
 *			die entpackte Datei gemacht.
 ---------------------------------------------------------------------------*/
void ViewStartLocatedDosDataFile(MemHandle unzDesc, FileInZip * fizp,
				DosAppInfo * info, word flags)
{
word count, ctok;
MemHandle mh;
GeodeToken t;
AppLaunchBlock  *albPtr;
int err;
char *p;

    err = ViewExtractLocatedFileToTemp(unzDesc, fizp);
    if ( err ) return ;

   t = info->Application;
   mh = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);
   albPtr = MemLock(mh);

   MemLock(HandleOf(@ViewTempDirName));
   strcpy(albPtr->ALB_path,LMemDeref(@ViewTempDirName));
   MemUnlock(HandleOf(@ViewTempDirName));

   p = fizp->name;
   DirListParseNameFromPath(&p);

   strcpy(albPtr->ALB_dataFile,p);
   albPtr->ALB_diskHandle = SP_DOCUMENT;
   MemUnlock(mh);
   ctok = IACPConnect(&t, IACPSM_USER_INTERACTIBLE | IACPCF_FIRST_ONLY
				, mh, NullOptr, &count);
   if ( ctok == 0 ) {
	DisplayErrorBox(p,GZIP_APP_NOT_FOUND_ERROR);
	}
   else IACPShutdown(ctok,NullOptr);

	flags++;
}


/*--------------------- m ---------------------
 *      Aufgabe:        N
 *      Zusammenhang:   .
 *      Strategie:	.
 *      Params/Return:	void ( void)
 ---------------------------------------------------------------------------*/
