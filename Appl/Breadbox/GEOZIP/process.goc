/**************************************************************************
 *      GEODE-File f�r Geos Zip Manager
 *
 *      Beschreibung:
 *
 *      Copyright:      (c) by RABE-Soft 8/97
 *                      Freeware
 *      Sonstiges:      -
 *
 **************************************************************************/

/*  Standard include files */

@include <stdapp.goh>
@include <initfile.h>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <vm.h>
#include <hugearr.h>
#include <gstring.h>
#include <graphics.h>
#include <uDialog.h>
#include <ctype.h>

#include "unzip.h"
@include <ExtUI/Utils.goh>


@include "geozip.goh"
@include "process.goh"
@include "zipui.goh"
@include "extract.goh"
@include "ART/FSart1.goh"

/*###########################################################################
	Global variables
/*###########################################################################*/
Boolean cancelExtract= FALSE;	// TRUE wenn Stop-Trigger gedr�ckt
Boolean cancelOpenNew= FALSE;	// TRUE wenn Stop-Trigger gedr�ckt
word	globalExtractFlags = 0;	// nimmt GEF_xx Flags auf
Boolean isTryingStartDos = FALSE;

StandardDialog4ResponseTriggerTable overwriteResponseTable = { 4,
	{@overwriteYesMoniker, IC_DEL},
	{@overwriteNoMoniker , IC_SKIP},
	{@overwriteAllMoniker, IC_ALL},
	{@overwriteCancelMoniker, IC_CANCEL} };

StandardDialog2ResponseTriggerTable win95ResponseTable = { 2,
	{@win95OKMoniker, IC_DEL},
	{@win95DetailMoniker, IC_DETAIL} };

StandardDialog3ResponseTriggerTable viewBatResponseTable = { 3,
	{@viewExecMoniker, IC_EXECUTE},
	{@viewShowMoniker, IC_VIEW},
	{@viewCancelMoniker , IC_CANCEL} };

StandardDialog3ResponseTriggerTable viewComExeResponseTable = { 3,
	{@viewExecMoniker, IC_EXECUTE},
	{@viewShowTextMoniker, IC_VIEW},
	{@viewCancelMoniker , IC_CANCEL} };

StandardDialog3ResponseTriggerTable viewDosDataResponseTable = { 3,
	{@viewOpenMoniker, IC_OPEN},
	{@viewShowTextMoniker, IC_VIEW},
	{@viewCancelMoniker , IC_CANCEL} };

StandardDialog4ResponseTriggerTable viewGeodeResponseTable = { 4,
	{@viewExecMoniker, IC_EXECUTE},
	{@viewShowTextMoniker, IC_VIEW},
	{@viewDetailsMoniker, IC_DETAIL},
	{@viewCancelMoniker , IC_CANCEL} };

StandardDialog4ResponseTriggerTable viewDocumentResponseTable = {4,
	{@viewOpenMoniker, IC_OPEN},
	{@viewShowTextMoniker, IC_VIEW},
	{@viewDetailsMoniker, IC_DETAIL},
	{@viewCancelMoniker , IC_CANCEL} };



//indentIconBitmap	label	byte
//	Bitmap <16, GFS_ICON_HEIGHT, 0, BMF_MONO>
	
	
const byte indentIconBitmap[] = {
		16, 0, 12, 0, 0, BMF_MONO,
		0, 0,	// 0b00000000, 0b00000000,
		1, 0,	// 0b00000001, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000,
		1, 0,	// 0b00000001, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000,
		1, 0,	// 0b00000001, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000,
		1, 0x54,// 0b00000001, 0b01010100,
		0, 0,	// 0b00000000, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000,
		0, 0,	// 0b00000000, 0b00000000
	};

/*TimerHandle sWareTimerHandle;
word sWareTimerID;
Boolean isShare = TRUE;
*/



@classdecl GZipProcessClass, neverSaved;

@if @debugFlag
@include "debug\debugInf.inc"
@endif

/*###########################################################################
	CODE f�r GZipProcessClass
/*###########################################################################*/

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/* Unterst�tzung der DialogBox zum Auspacken der Dateien	     */
/* Methoden sind in Extract.goc implementiert
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

@extern method GZipProcessClass, MSG_GZIP_EXTRACT_DIR_SELECTED;
@extern method GZipProcessClass, MSG_GZIP_EXTRACT_CREATE_SUBDIR;
//@extern method GZipProcessClass, MSG_GZIP_EXTRACT_FLAGS_CHANGED;


@method GZipProcessClass, MSG_GZIP_SELECTED_COUNT_CHANGED {
/* Parameter : (int count, int curFileCount) */
	if ( count != 0 )@send TriggerGroup::MSG_GEN_SET_ENABLED(VUM_NOW);
	else @send TriggerGroup::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

	if (curFileCount == 1)
		{
		@send ViewButton::MSG_GEN_SET_ENABLED(VUM_NOW);
	//	@send InfoButton::MSG_GEN_SET_ENABLED(VUM_NOW);
		}
	else 	{
		@send ViewButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	//	@send InfoButton::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		}
	}

/*@method GZipProcessClass, MSG_GZIP_TEST {
	optr target,docu;

	UserStandardSound(SST_WARNING);
	@call GZipDisplayGroup::MSG_META_GET_TARGET_EXCL(&target);
	docu = @call target::MSG_GEN_DISPLAY_GET_DOCUMENT();
	@send docu::MSG_GZIP_DOC_TEST_FILES();

	}

*/
/***********************************************************************
 *	Methoden in OpenClose.goc
/***********************************************************************/

@extern method GZipProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION;
/*@extern method GZipProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN;  */
@extern method GZipProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION;
@extern method GZipProcessClass, MSG_GZIP_SAVE_OPTIONS;
@extern method GZipProcessClass, MSG_GZIP_LOAD_OPTIONS;


/*--------------------- GZipGetTotalAndSelectedSize ---------------------
 *      Aufgabe:	Totale unkomprimierte Gr��e und unkomprimierte
 *			Gr��e der selektierten Dateien berechnen
 *      Zusammenhang:
 *      Strategie:
 *      Parameter:
 ---------------------------------------------------------------------------*/
void GZipGetSelectedSizeAndCount(
	optr list,			/* anzeigende GenDynamicList */
	VMFileHandle tempFile, 		/* Datei mit HugeArray */
	VMBlockHandle indexArray, 	/* das IndexArray */
	VMBlockHandle entryArray, 	/* das EntryArray */
	dword currentIndex,		/* Index des momentanen Levels */
	dword *size, word *count, 	/* Returnwerte */
	word * curFileCount
	)
    {
    word n, n_dir;
    dword index;
    void * p;
    FileInZip *fizp;
    IndexArrayBlockHeader * iPtr;
    int type;

    n_dir = @call list::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() ;

    *size = 0;   *count = 0; *curFileCount = 0;

    /* total up uncompressed sizes of all the files */
    /* is selected: count selected size */
    for(n=0; n<n_dir; n++)
      {
      if ( @call list::MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(n) )
	  {
	  type = IndexArrayLockEntry(tempFile, indexArray,entryArray,
			currentIndex, n, &p, &index);
	  switch ( type ) {
		case IA_ET_FILE:        fizp=p;
					*count += 1;
					*curFileCount += 1;
					*size += fizp->uncompressedSize;
					break;
		case IA_ET_DIR:		iPtr=p;
					*count += iPtr->filesAtLevel;
					*size += iPtr->fileSizeAtLevel;
		}
	  HugeArrayUnlock(p);
	  }
      }
    }



@classdecl	GZipDocumentControlClass;
@method GZipDocumentControlClass, MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR {
	@call fileSelector::MSG_GEN_FILE_SELECTOR_SET_MASK("*.ZIP");
	@callsuper();
	}

@method GZipDocumentControlClass, MSG_GZDC_TEST {
    pself->GDCI_attrs |= (GDCT_NEW << GDCA_CURRENT_TASK_OFFSET);
    }

/* Intercept this in the CUI so that we can get the New/Open dbox instead
 * of the CUI forcing us to create a new doc */
@method GZipDocumentControlClass, MSG_GEN_DOCUMENT_CONTROL_INITIATE_NEW_DOC
{
ApplicationStates	states;

    if (UserGetDefaultUILevel() == UIIL_INTRODUCTORY)  {
	  states = @call GZipApp::MSG_GEN_APPLICATION_GET_STATE();
	  if (states & AS_ATTACHING) {
		/* don't init a new doc - show New/Open dbox */
		@send self::MSG_GEN_DOCUMENT_CONTROL_DISPLAY_DIALOG();
		return;
		}
	  }

    @callsuper();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_SAVE_AS_CANCELLED for GZipDocumentClass
 *                 ()
 *
 * RETURN:         nothing
 *
 *
 * DESCRIPTION:      10/17/00 - jfh
 *				 delete temp file
 *                   can't get this puppy to work :-(
 *
 ***********************************************************************/
@method GZipDocumentControlClass, MSG_GEN_DOCUMENT_CONTROL_SAVE_AS_CANCELLED {
//word		error;
//DiskHandle	dh;
//char		buffer[100];

optr		docOptr, target;

	@callsuper();

    if (pself->GDCI_docFileHandle) {
	  /* delete the file*/
 	  @call GZipDisplayGroup::MSG_META_GET_TARGET_EXCL(&target);
	  docOptr = @call target::MSG_GEN_DISPLAY_GET_DOCUMENT();

	  if(!@call docOptr::MSG_GZIP_GET_SAVE_ONCE())
	  {
//		@send ,forceQueue+ docOptr::MSG_GEN_DOCUMENT_CLOSE(0);
		@send ,forceQueue+ target::MSG_GEN_DISPLAY_CLOSE();
	  }


 /*	  @call GZipDisplayGroup::MSG_META_GET_TARGET_EXCL(&target);
	  docOptr = @call target::MSG_GEN_DISPLAY_GET_DOCUMENT();
	  @send docOptr::MSG_GEN_DOCUMENT_PHYSICAL_CLOSE();
	  @send docOptr::MSG_GEN_DOCUMENT_PHYSICAL_DELETE();
	  /* with CLOSE & PHYSICAL_DELETE I get a fatal error saying "cannot delete
	   * file just closed.
	   * I get the same fatal when I don't do the CLOSE */

	  /* so let's try it this way...  */
 /*	  error = FileClose(pself->GDCI_docFileHandle, FALSE);
	  dh = @call oself::MSG_GEN_PATH_GET_DISK_HANDLE();
	  @call oself::MSG_GEN_PATH_GET(buffer, 100);
	  FilePushDir();
	  FileSetCurrentPath(dh, buffer);
	  pself = ObjDerefGen(oself);
	  error = FileDelete(pself->GDCI_targetDocName);
	  FilePopDir();
	  /* the above deletes the file OK but it is still on the screen, and
	   * the GenDocCtrl still thinks it is a valid file.  So on Close or
	   * Exit, I get the do you wanna save or delete and then a crash with
	   * either answer since the file is already deleted. */


	  }

}



@classdecl	GZipDisplayClass;
@classdecl	GZipDisplayGroupClass;
@method GZipDisplayClass, MSG_META_GRAB_TARGET_EXCL {
optr docu;
	docu = @call oself::MSG_GEN_DISPLAY_GET_DOCUMENT();
	@send, forceQueue  docu::MSG_GZIP_DOC_NOTIFY_PROCESS();
	@callsuper();
	}

@if 0
@method GZipDisplayGroupClass, MSG_GEN_DISPLAY_GROUP_SET_NUM_ITEMS {
	
	word childCount;

	@callsuper();

	childCount = @call oself::MSG_GEN_COUNT_CHILDREN();

	if(childCount > 1)
	{
		@call GZipWindowMenu::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
		@call GZipWindowMenu::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
	}
	else
	{
		@send oself::MSG_GEN_DISPLAY_GROUP_SET_FULL_SIZED();
		@call GZipWindowMenu::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
		@call GZipWindowMenu::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_UI_QUEUE);
	}
}
@endif

@classdecl	GZipDocumentGroupClass;

/*--------------------- MSG_GZIP_DOCGROUP_NEW_DISPLAY_FLAGS ---------------------
 *      Aufgabe:	Verteilen der neuen Anzeigebedingunen an die Documente
 *	Strategie: 	Beide Einsteller werden abgefragt und die Flags kombiniert
 *			das Ergebnis wird an alle Children (Documente) verteilt
 *      Parameter: 	void	GEN_BOOLEAN_GROUP_APPLY_MSG(
 *		word	selectedBooleans,word	indeterminateBooleans,
 *		word	modifiedBooleans);
 ---------------------------------------------------------------------------*/
@method GZipDocumentGroupClass, MSG_GZIP_DOCGROUP_NEW_DISPLAY_FLAGS {
word flags;

	flags = GZOPT_DISP_LONGNAME_1ST | GZOPT_DISP_DIR_LONGNAME_1ST;
	flags |= @call  GZipFileInfoSelector::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
	flags |= @call  GZipDirInfoSelector::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
	@send @genChildren::MSG_GZIP_DOC_SET_DISPLAY_FLAGS(flags);
	}

/*--------------------- MSG_GZIP_DOCGROUP_START_RESCAN ---------------------
 *      Aufgabe:	Aul�sen des neu Einlesens aller Documente
 *	Strategie:	Verteilt eine entsprechende Message an die Dokumente
 *      Parameter: 	void	(void)
 ---------------------------------------------------------------------------*/
/*@method GZipDocumentGroupClass, MSG_GZIP_DOCGROUP_START_RESCAN {
	@send, forceQueue @genChildren::MSG_GZIP_DOC_RESCAN_NOW();
	}

*/



@classdecl	GZipDocumentClass ;


@extern method GZipDocumentClass, MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED;
@extern method GZipDocAttach, GZipDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT;
@extern method GZipDocumentClass, MSG_GEN_DOCUMENT_SAVE_AS;
@extern method GZipDocumentClass, MSG_GZIP_DOC_INVALID_ARCHIV;
@extern method GZipDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT;
@extern method GZipDocumentClass, MSG_GZIP_SET_SAVE_ONCE;
@extern method GZipDocumentClass, MSG_GZIP_GET_SAVE_ONCE;


/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*
 * Anzeige der Liste und Auswahl einzelner Dateien zum auspacken
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/*--------------------- MSG_GZIP_DOC_FILE_SELECTED ---------------------
 *      Aufgabe:	Notification-Handler der Mainliste
 *      Parameter:      (GEN_ITEM_GROUP_APPLY_MSG)
 *                      void ( word selection, word numSelections, byte stateFlags)
 ---------------------------------------------------------------------------*/
@method GZipDocumentClass, MSG_GZIP_DOC_FILE_SELECTED {
dword size;
word count,curFileCount = 0;
char buf[64];
char buf2[UHTA_NULL_TERM_BUFFER_SIZE];

/* Anzahl der selektierten Dateien und Dateigr��e anzeigen */
	if ( numSelections == 0 ) {
		  count = pself->GZDI_totalFilesAtLevel;
		  size = pself->GZDI_totalSizeAtLevel;
		}
	 else {
		GZipGetSelectedSizeAndCount(@GetDocUIOptr(@FileList),
			pself->GZDI_tempFile,pself->GZDI_indexArray,
			pself->GZDI_entryArray,pself->GZDI_currentIndex,
			&size, &count,&curFileCount);
		}

	pself->GZDI_selectedSize = size;	// merken f�r Extract-Info-Box
	pself->GZDI_selectedCount = count;	// merken f�r Info an Prozess
	pself->GZDI_curFileCount = curFileCount;

	@send, forceQueue oself::MSG_GZIP_DOC_NOTIFY_PROCESS();

	@send @GetDocUIOptr(@InfoCounter)::MSG_GEN_VALUE_SET_INTEGER_VALUE
				( count ,FALSE);

	MemLock(OptrToHandle(@fileSizeDummy));
        size+=50;	/* Rundung f�r Anzeige * */
	UtilHex32ToAscii(buf2, size>>10, UHTAF_NULL_TERMINATE|UHTAF_THOUSANDS_SEPARATORS);  
	sprintf(buf, LMemDeref(@fileSizeDummy),buf2,((int)size&0x3ff)/100);
	@call @GetDocUIOptr(@InfoSize)::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(buf,VUM_NOW);
	MemUnlock(OptrToHandle(@fileSizeDummy));

	}

/*--------------------- MSG_GZIP_DOC_QUERY_FILE_FOR_LIST ---------------------
 *      Aufgabe:	Query-Handler der Datieliste
 *      Parameter:      (GEN_DYNAMIC_LIST_QUERY_MSG) void(optr list, word item)
 ---------------------------------------------------------------------------*/


@method GZipDocumentClass, MSG_GZIP_DOC_QUERY_FILE_FOR_LIST {
int entryType, iconType, width, i;
dword index;
//char * s;
char name[EXTRA_STRING_MAX_LEN];
char size[25], dName[25];
char dateOrFiles[25], tempStr[25];
char timeOrSubs[25];
void * p;

GStateHandle	gsState;
ChunkHandle 	gsChunk;
optr		gsOptr;
MemHandle 	gsMh;

optr bmpOptr;
Bitmap *ptrIconBmp;
word		flag = 0;
optr itemChild;
Rectangle rect;
word col2, col3, col4, allwidth, allheight;
char *size2;
//word subdirs;
word iconwidth;


	itemChild = @call list::MSG_GEN_ITEM_GROUP_GET_ITEM_OPTR(item);
	@call itemChild::MSG_VIS_GET_BOUNDS(&rect);
	
	allwidth = rect.R_right - rect.R_left - 5;
	allheight = rect.R_bottom - rect.R_top;

//   s = malloc(FILE_LIST_MAX_TEXT_SIZE);
   dName[0] = 0;

   entryType = IndexArrayLockEntry(pself->GZDI_tempFile, pself->GZDI_indexArray,
	pself->GZDI_entryArray, pself->GZDI_currentIndex, item, &p, &index);

   switch (entryType) {
   case IA_ET_FILE:     iconType = GZipDocGetFileString(pself->GZDI_tempFile,
				pself->GZDI_textArray, p, name, size, dateOrFiles, timeOrSubs,
				dName, pself->GZDI_displayFlags);
			break;
   case IA_ET_PARENT:	iconType = GZipDocGetParentString(pself->GZDI_tempFile,
				pself->GZDI_textArray, p,name);
			break;
   case IA_ET_DIR:	
//				subdirs = ((IndexArrayBlockHeader *) p)->dirCount;
				iconType = GZipDocGetDirString(pself->GZDI_tempFile,
				pself->GZDI_textArray, p, name, size, dateOrFiles, timeOrSubs,
				pself->GZDI_displayFlags);
			break;
			}
   HugeArrayUnlock(p);


   /* jfh - this is a temp fix for not showing @ files */
   if (dName[0] == '@') flag = RIMF_NOT_ENABLED;

   gsMh = MemAllocLMem(LMEM_TYPE_GENERAL,0);
   MemLock(gsMh);
/*
   gsState = GrCreateGString( OptrToHandle(oself), GST_CHUNK, &gsChunk);
   gsOptr = ConstructOptr(OptrToHandle(oself),gsChunk);
  */
   gsState = GrCreateGString( gsMh, GST_CHUNK, (word*)&gsChunk);
   gsOptr = ConstructOptr(gsMh,gsChunk);

	/* for englisch only */
//	col4 = allwidth - GrTextWidth(gsState, "00/00/00", 0);
//	if(pself->GZDI_displayFlags & GZOPT_DISP_SUBDIRS && subdirs)
//	{
		col4 = allwidth - GrTextWidth(gsState, "100 subdirectories", 0);
//	}
	col3 = col4 - GrTextWidth(gsState, "100 files", 0) - 15;
	if((col4 - GrTextWidth(gsState, "00:00:00 PM", 0) - 15) < col3)
	{
		col3 = col4 - GrTextWidth(gsState, "00:00:00 PM", 0) - 15;
	}
	col2 = col3 - GrTextWidth(gsState, "0012124123", 0) - 15;

   /* get GPC bitmaps instead of Rainer's */
   if (iconType == DL_ICON_TYPE_PARENT)
	 bmpOptr = @FSOFoldBitmap1;
   else if (iconType == DL_ICON_TYPE_DIR)
	 bmpOptr = @FSCFoldBitmap1;
   else
	 bmpOptr = @FSFileBitmap1;
  //	 bmpOptr = DirListGetIconOptr(iconType);

   /* do our own string writing instead of Rainer's */
 //  DirListWriteIconizedString(gsState, bmpOptr, s, FID_BISON, -3, TRUE);

   MemLock(HandleOf(bmpOptr));
    ptrIconBmp = LMemDeref(bmpOptr);

	if((entryType != IA_ET_PARENT) && (pself->GZDI_hasParent))
	{
		GrMoveTo(gsState,0,1);
		GrFillBitmapAtCP(gsState,(Bitmap*)indentIconBitmap, 0);
		GrMoveTo(gsState,16,1);
		GrDrawBitmapAtCP(gsState,ptrIconBmp, 0);
		iconwidth = 18 + 16;
	}
	else
	{
		GrMoveTo(gsState,0,1);
		GrDrawBitmapAtCP(gsState,ptrIconBmp, 0);
		iconwidth = 18;
	}
   MemUnlock(HandleOf(bmpOptr));

   /* generate the file display data */
   if (iconType == DL_ICON_TYPE_PARENT) 
	 {
	 GrSetClipRect(gsState, PCT_REPLACE,0, 0, allwidth, allheight);
	 ExtUIUtilsDrawTextLimited(gsState, iconwidth, 0, name, allwidth - iconwidth, FALSE);
	 }
   else if (iconType == DL_ICON_TYPE_DIR)  {
//	 GrDrawText(gsState,20,0,name,0);
	 width = 0;
	 if (pself->GZDI_displayFlags & GZOPT_DISP_DIR_SIZE) {
	    width = GrTextWidth(gsState, size, strlen(size));
	 }

	 GrSetClipRect(gsState, PCT_REPLACE,0, 0, col3 - width - iconwidth, allheight);
	 ExtUIUtilsDrawTextLimited(gsState, iconwidth, 0, name, col3 - iconwidth - width - 20, FALSE);

	 if (pself->GZDI_displayFlags & GZOPT_DISP_FILES) {
	    width = GrTextWidth(gsState, dateOrFiles, strlen(dateOrFiles));
//	    GrDrawText(gsState, col4 - width - 15, 0, dateOrFiles, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE,col3, 0, col4, allheight);
		ExtUIUtilsDrawTextLimited(gsState, col3, 0, dateOrFiles, col4 - col3 - 15, TRUE);
	    }
	 if (pself->GZDI_displayFlags & GZOPT_DISP_DIR_SIZE) {
	    width = GrTextWidth(gsState, size, strlen(size));
//	    GrDrawText(gsState, col3 - width - 15, 0, size, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE, col2, 0, col3 , allheight);
		ExtUIUtilsDrawTextLimited(gsState, col2, 0, size, col3 - col2 - 15, TRUE);
	    }
	 if (pself->GZDI_displayFlags & GZOPT_DISP_SUBDIRS) {
	    width = GrTextWidth(gsState, timeOrSubs, strlen(timeOrSubs));
//	    GrDrawText(gsState, col4, 0, timeOrSubs, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE,col4, 0, allwidth, allheight);
		ExtUIUtilsDrawTextLimited(gsState, col4, 0, timeOrSubs, allwidth - col4, FALSE);
	    }
	 }  /* end of folder else if */
   else {  /* it's a file */
//	 GrDrawText(gsState,20,0,name,0);
	 width = 0;
	 size2 = size;
	 while(*size2 == ' ') size2++;
	 if (pself->GZDI_displayFlags & GZOPT_DISP_SIZE) {
	    width = GrTextWidth(gsState, size2, strlen(size2));
	 }
	 GrSetClipRect(gsState, PCT_REPLACE,0, 0, col3 - 15 - width, allheight);
	 ExtUIUtilsDrawTextLimited(gsState, iconwidth, 0, name, col3 - iconwidth - width - 20, FALSE);

	 if (pself->GZDI_displayFlags & GZOPT_DISP_SIZE) {
	    width = GrTextWidth(gsState, size2, strlen(size2));
//	    GrDrawText(gsState, col3 - width - 15, 0, size2, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE,col2, 0, col3, allheight);
		ExtUIUtilsDrawTextLimited(gsState, col3 - width - 15, 0, size2, col3 - col2, FALSE);
	    }
	 if (pself->GZDI_displayFlags & GZOPT_DISP_TIME) {
	    /* Rainer put 2 spaces at the start of the time string
	     * and single digit hours are not 0 padded */
	    strcpy(tempStr, &timeOrSubs[2]);
	    timeOrSubs[0] = 0;
	    if (strlen(tempStr) < 11) {
		  for (i = strlen(tempStr); i < 11; i++) {
			strcat(timeOrSubs, "0");
			}
		  }
	    strcat(timeOrSubs, tempStr);
//	    GrDrawText(gsState, col3, 0, timeOrSubs, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE,col3, 0, col4, allheight);
		ExtUIUtilsDrawTextLimited(gsState, col3, 0, timeOrSubs, col4 - col3, FALSE);
	    }
	 size2 = dateOrFiles;
	 while(*size2 == ' ') size2++;
	 if (pself->GZDI_displayFlags & GZOPT_DISP_DATE) {
//	    GrDrawText(gsState, col4, 0, dateOrFiles + 2, 0) ;
		GrSetClipRect(gsState, PCT_REPLACE,col4, 0, allwidth, allheight);
		ExtUIUtilsDrawTextLimited(gsState, col4, 0, size2, allwidth - col4, FALSE);
	    }
	 }  /* end of file else */
   GrEndGString(gsState);

   /* and tell the list */
//   @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(item,flag,12,120,0,
//				VMDT_GSTRING,VMST_OPTR,gsOptr);
   @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(item,flag,0,0,0,
				VMDT_GSTRING,VMST_OPTR,gsOptr);

//   free(s);
   GrDestroyGString(gsState,0,GSKT_KILL_DATA);
   MemFree(gsMh);
   }


@method GZipDocumentClass, MSG_GZIP_DOC_FILE_DOUBLE_CLICKED
  {
  int typ;
  void * p;
  dword index, parent;

  typ = IndexArrayLockEntry(pself->GZDI_tempFile, pself->GZDI_indexArray,
	pself->GZDI_entryArray, pself->GZDI_currentIndex, selection, &p, &index);
  if ( typ == IA_ET_PARENT ) parent = ( (IndexArrayBlockHeader*)p )->parentLink;
  HugeArrayUnlock(p);

  if ( typ == IA_ET_DIR ) @send, forceQueue oself::MSG_GZIP_DOC_DISPLAY_LEVEL(index);
  if ( (typ == IA_ET_PARENT) && (parent != IA_NO_PARENT) )
		@send, forceQueue oself::MSG_GZIP_DOC_DISPLAY_LEVEL(parent);
  if ( typ == IA_ET_FILE) @send, forceQueue oself::MSG_GZIP_DOC_VIEW_FILE();
  }

@method GZipDocumentClass, MSG_GZIP_DOC_NOTIFY_PROCESS {
/* Info an Process, wenn sich irgendetwas wichtiges getan hat */
	@send, forceQueue process::MSG_GZIP_SELECTED_COUNT_CHANGED
			(pself->GZDI_selectedCount, pself->GZDI_curFileCount);
	}

/*--------------------- MSG_GZIP_DOC_DISPLAY_LIST ---------------------
 *      Aufgabe:	Document-interne Liste zur Anzeige bringen
 *      Parameter: 	void (void)
 ---------------------------------------------------------------------------*/

@method GZipDocumentClass, MSG_GZIP_DOC_DISPLAY_LIST {
word count, n, size;
VMFileHandle tempFile;
VMBlockHandle indexArray;
IndexArrayBlockHeader * iPtr;

  tempFile = pself->GZDI_tempFile;
  indexArray = pself->GZDI_indexArray;

// Index-Eintrag mit dem Root-Dir Finden
  count = HugeArrayGetCount(tempFile, indexArray);

  HugeArrayLock(tempFile,indexArray,0,(void**)&iPtr,&size);

  n = 0;
  do {
     if ( iPtr->parentLink == IA_NO_PARENT ) break;
     n++;
     if (count ==n) break;
     HugeArrayUnlock(iPtr);
     HugeArrayLock(tempFile,indexArray,n,(void**)&iPtr,&size);
     } while ( 1 );

  HugeArrayUnlock(iPtr);
  if (count == n) n--;		/* sollte aber eingentlich nicht vorkommen */

  @call oself::MSG_GZIP_DOC_DISPLAY_LEVEL(n);
  }


/*--------------------- MSG_GZIP_DOC_DISPLAY_LEVEL ---------------------
 *      Aufgabe:	Eintr�ge zur Anzeige bringen, die dem �bergeben
 *			index im indexArray entsprechen
 *      Parameter: 	void (dword index);
 ---------------------------------------------------------------------------*/

@method GZipDocumentClass, MSG_GZIP_DOC_DISPLAY_LEVEL
  {
  IndexArrayBlockHeader * iPtr;
  word size, count;
//  FileInZip *p;
//  Boolean parent = FALSE;

  pself->GZDI_currentIndex = index;

  HugeArrayLock(pself->GZDI_tempFile,pself->GZDI_indexArray,index,(void**)&iPtr,&size);
  pself->GZDI_totalSizeAtLevel = iPtr->fileSizeAtLevel;
  pself->GZDI_totalFilesAtLevel = iPtr->filesAtLevel;
  count = iPtr->dirCount + iPtr->fileCount - iPtr->fileHiddenCount;	// Anzahl der Eintr�ge
  pself->GZDI_hasParent = FALSE;


  if ( iPtr->parentLink != IA_NO_PARENT ) {
//		parent = TRUE;
	    pself->GZDI_hasParent = TRUE;
		count++;			// parent braucht 1 Eintrag
		}
  HugeArrayUnlock(iPtr);

  @send @GetDocUIOptr(@FileList)::MSG_DCDL_SET_DCLICK_DESTINATION(oself);

  @send @GetDocUIOptr(@FileList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE( count );
  if ( count >0 )
	@send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_MAKE_ITEM_VISIBLE(0);
  @send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
  @send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
  @send @GetDocUIOptr(@FileList)::MSG_GEN_APPLY();
  }


/*--------------------- MSG_GZIP_DOC_SET_DISPLAY_FLAGS ---------------------
 *      Aufgabe:        Setzt die Anzeigeflags eines Documents und startet
 *			das visuelle update der Liste
 *      Parameter: 	void	( word flags )
 ---------------------------------------------------------------------------*/
@method GZipDocumentClass, MSG_GZIP_DOC_SET_DISPLAY_FLAGS {
int count;
  pself->GZDI_displayFlags = flags;
  count = @call @GetDocUIOptr(@FileList)::MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS() ;
  @send @GetDocUIOptr(@FileList)::MSG_GEN_DYNAMIC_LIST_INITIALIZE( count );
  }


/*@method GZipDocumentClass, MSG_GZIP_DOC_SELECT_ALL	{
	@send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	@call oself::MSG_GZIP_DOC_REVERSE_SELECTIONS();
	}
@method GZipDocumentClass, MSG_GZIP_DOC_SELECT_NONE	{
	@send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	@send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
	@send @GetDocUIOptr(@FileList)::MSG_GEN_APPLY();
	}
@method GZipDocumentClass, MSG_GZIP_DOC_REVERSE_SELECTIONS	{
int maxFiles,currentFile;
Boolean state;
    maxFiles = @call @GetDocUIOptr(@FileList)::
					MSG_GEN_DYNAMIC_LIST_GET_NUM_ITEMS();

    for (currentFile = 0; currentFile < maxFiles; currentFile++)
      {
      state = ! @call @GetDocUIOptr(@FileList)::
			MSG_GEN_ITEM_GROUP_IS_ITEM_SELECTED(currentFile);
      @call @GetDocUIOptr(@FileList)::
				MSG_GEN_ITEM_GROUP_SET_ITEM_STATE(currentFile,state);
      }
    @send @GetDocUIOptr(@FileList)::MSG_GEN_ITEM_GROUP_SET_MODIFIED_STATE(TRUE);
    @send @GetDocUIOptr(@FileList)::MSG_GEN_APPLY();
    }
*/

/*@method GZipDocumentClass, MSG_GZIP_DOC_RESCAN_NOW {
word op;
	op = @call oself::MSG_GEN_DOCUMENT_GET_OPERATION();
	if ( op != GDO_NORMAL ) {
		ErrorBox(@OperationNotApplicable);
		return;
		}
	@send , forceQueue oself::MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT();
	@send , forceQueue oself::MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT();
	}
*/
@extern method GZipDocumentClass, MSG_GZIP_DOC_START_EXTRACT;
//@extern method GZipDocumentClass, MSG_GZIP_DOC_REQUEST_HOME;
@extern method GZipDocumentClass, MSG_GZIP_DOC_DO_EXTRACT;
//@extern method GZipDocumentClass, MSG_GZIP_DOC_TEST_FILES;
@extern method GZipDocumentClass, MSG_GZIP_DOC_BUILD_NEW_ARCHIVE;
//@extern method GZipDocumentClass, MSG_GZIP_CREATE_DIRK_BUG_STUFF;
@extern method GZipDocumentClass, MSG_GZIP_DOC_VIEW_FILE;
//@extern method GZipDocumentClass, MSG_GZIP_DOC_SHOW_INFO;

@extern method GZipDocumentClass, MSG_GEN_DOCUMENT_GENERATE_NAME_FOR_NEW;
@extern method GZipDocumentClass, MSG_GEN_DOCUMENT_PHYSICAL_SAVE_AS_FILE_HANDLE;
@extern method  GZipDocumentClass, MSG_GZIP_DOC_CREATE_FILE_LIST;


/*--------------------- GZipDocGetEntryPath ---------------------
 *      Aufgabe:	Kompletten Name mit Pfad eines Eintrages im Zip-File
 *			holen. Zum Zugriff auf das Zip-File
 ---------------------------------------------------------------------------*/
void GZipDocGetEntryPath ( dword entry, char * pathStr,
		VMFileHandle tempFile,
		VMBlockHandle entryArray)

  {
  FileInZip * fizp;
  word size;

  HugeArrayLock(tempFile,
	entryArray,
	entry,
	(void**)&fizp,
	&size);
  strcpy(pathStr,fizp->name);
  HugeArrayUnlock(fizp);
  }


int GZipDocGetParentString(FileHandle tempFile, VMBlockHandle textArray,
				IndexArrayBlockHeader * iPtr,char * name)
  {
  ListStringHeader * hPtr;
  word size;

  HugeArrayLock(tempFile, textArray,iPtr->extraBlock,(void**)&hPtr,&size);
  if ( *(hPtr->extraStr) )
		strcpy(name,hPtr->extraStr);
	else
		strcpy(name,hPtr->dosName);
  HugeArrayUnlock(hPtr);

  return DL_ICON_TYPE_PARENT;
  }

int GZipDocGetFileString(FileHandle tempFile, VMBlockHandle textArray,
				FileInZip * fizp , char * name, char * size,
				char * dateOrFiles, char * timeOrSubs, char *dName,
				word flags)
  {
  ListStringHeader * hPtr;
  word sizeWord;
  Boolean reverseFlag;

  HugeArrayLock(tempFile, textArray,fizp->textIndex,(void**)&hPtr,&sizeWord);
  reverseFlag = (flags & GZOPT_DISP_LONGNAME_1ST ) && (*(hPtr->extraStr) != 0);

  if ( reverseFlag )  {
	strcpy(name,hPtr->extraStr);
 //	while ( strlen(s) < 13) { strcat(s," "); }
	}
  else strcpy(name,hPtr->dosName);
  strcpy(dName,hPtr->dosName);

  if ( flags & GZOPT_DISP_SIZE ) {
	strcpy(size, hPtr->sizeStr);
  /*	char *cp;
	cp = hPtr->sizeStr;
	if ( reverseFlag && (strlen(s) > 13) )
	   {
	   int soll;
	   soll = 13+ strlen(cp) - strlen(s);
	   do	{
		if ( cp[1] != ' ' ) break;
		cp++;
		} while ( strlen(cp) > soll );
	   }
	strcat(s,cp);  */
	}

  if ( flags & GZOPT_DISP_DATE )   strcpy(dateOrFiles,hPtr->dateStr);
  if ( flags & GZOPT_DISP_TIME )   strcpy(timeOrSubs,hPtr->timeStr);
//  if ( flags & GZOPT_DISP_ATTRS )   strcat(s,hPtr->attrStr);

/*  if ( *(hPtr->extraStr) ) strcat(s," - ");

  if ( reverseFlag )  strcat(s,hPtr->dosName);
	else strcat(s,hPtr->extraStr);
*/
  HugeArrayUnlock(hPtr);

  return DirListGetDosIconType(&(fizp->name[fizp->pathLen]), DLESF_ZIP2FOLDER | DLESF_ALL);
  }


int GZipDocGetDirString( FileHandle tempFile, VMBlockHandle textArray,
			IndexArrayBlockHeader * iPtr, char * name, char * size,
				char * dateOrFiles, char * timeOrSubs, word flags)
  {
  ListStringHeader * hPtr;
  word sizeWord/*, mainlen*/;
  Boolean reverseFlag;
  char * dosName/*, *buf, *cp*/;
  char buf2[UHTA_NULL_TERM_BUFFER_SIZE];

  dosName = iPtr->pathName;
  DirListParseNameFromPath(&dosName);

  /*------------------------------------------------------------------------
   * Dieser Puffer mu� vergr��ert werden, wenn die unten erzeugte Texte l�nger
   * als sizeof(ListStringHeader) {derzeit 4*16+8+4 = 76 Byte} werden
   *------------------------------------------------------------------------*/
 // buf = malloc(FILE_LIST_MAX_TEXT_SIZE);
 // *buf = 0;

  HugeArrayLock(tempFile, textArray,iPtr->extraBlock,(void**)&hPtr,&sizeWord);
  reverseFlag = (flags & GZOPT_DISP_DIR_LONGNAME_1ST ) && (*(hPtr->extraStr) != 0);

// Anzuzeigenden Hauptnamen konstruieren
  if ( reverseFlag )  	strcpy(name,hPtr->extraStr);
	else 	strcpy(name,dosName);
/*  if (flags & GZOPT_DISP_DIR_LONGNAME_1ST) mainlen = 20;
	else mainlen = 13;
  while ( strlen(s) < mainlen) { strcat(s," "); }
*/
// zweiten Teil des Strings im internen Buffer anlegen
// ACHTUNG: MAXIMALGR�SSE: 70 Byte!
  MemLock(OptrToHandle(@filesCount));
  if ( flags & GZOPT_DISP_FILES ) {
	//	sprintf(strchr(buf,0),LMemDeref(@filesCount),iPtr->filesAtLevel);
		sprintf(dateOrFiles,LMemDeref(@filesCount),iPtr->filesAtLevel);
		}
  if ( flags & GZOPT_DISP_DIR_SIZE ) {
		dword sizeWord;
		sizeWord = iPtr->fileSizeAtLevel + 50;	/* Rundung f�r Anzeige * */
		UtilHex32ToAscii(buf2, sizeWord>>10, UHTAF_NULL_TERMINATE|UHTAF_THOUSANDS_SEPARATORS);  
		sprintf(size,LMemDeref(@dirSizeDummy),buf2,((int)sizeWord&0x3ff)/100);
		}
  if ( flags & GZOPT_DISP_SUBDIRS ) {
		if (!iPtr->dirCount) timeOrSubs[0] = 0;
		else sprintf(timeOrSubs,LMemDeref(@subdirsCount),iPtr->dirCount);
		}
  MemUnlock(OptrToHandle(@filesCount));

// beide Strings kombinieren -  mit Platzausnutung, wenn m�glich
/*  cp = buf;
  if ( reverseFlag && (strlen(s) > mainlen) )
     {
     int soll;
     soll = mainlen + strlen(cp) - strlen(s);
     do	{
	if ( cp[1] != ' ' ) break;
	cp++;
	} while ( strlen(cp) > soll );
     }
  strcat(s,cp);

// dritten Teil anh�ngen: wenn Longname und DOSName verschieden sind
/*  if ( *(hPtr->extraStr) ) strcat(s," - ");
  if ( reverseFlag )  strcat(s,dosName);
	else strcat(s,hPtr->extraStr);
*/
  HugeArrayUnlock(hPtr);

//  free(buf);
  return DL_ICON_TYPE_DIR;
  }


/* FileToolRoutinen - ausgelagerte Pfad-Bearbeitung */

/*--------------------- FileToolDropBackslash ---------------------
   FileToolDropBackslash: Schneidet den am Ende befindelichen
   Backslash (oder Slash, falls gefordert) ab. Aber nur, wenn dort
   auch einer ist.
   Return: Neu Pfadl�nge
 ---------------------------------------------------------------------------*/
int FileToolDropBackslash(char * path, Boolean slashAlso )
  {
  int n;

  n = strlen(path);
  if ( n==0) return 0;
  n--;

  if ( path[n] == '\\' )
	{
	path[n] = 0;
	return (n);
	}
  if ( !slashAlso) return (n+1);

  if ( path[n] == '/' )
	{
	path[n] = 0;
	return (n);
	}
  return (n+1);
  }

/*--------------------- FileToolDropBackslash ---------------------
   K�rzt einen Pfad auf den Parentpath ein.
   Return: TRUE wenn kein Parent m�glich ist (i.a. Leerstrung oder "\")
	   FALSE wenn OK
   "PAUL" oder "PAUL\" liefert Leersring und OK (FALSE)
 ---------------------------------------------------------------------------*/
Boolean FileToolMakeParentPath(char * path, Boolean slashAlso )
  {
  int n, k;
  char c;

  n = FileToolDropBackslash(path,slashAlso);
  if ( n==0) return TRUE;

  for ( n=0, k=0; n<strlen(path); n++)
	{
	c = path[n];
	if ( (c=='\\') || ( slashAlso && (c=='/') ) ) k=n;
	}
  path[k] = 0;
  return FALSE;
  }



/*
@classdecl SharewareGlyphClass;


@method SharewareGlyphClass, MSG_SWARE_SWITCH_TEXT {
optr moniker;

	pself->SWGI_count++;
	if ( (pself->SWGI_count) > 4 ) pself->SWGI_count=1;

	switch (pself->SWGI_count) {
	case 1: moniker = @ShareWareMoniker1;
		break;
	case 2: moniker = @ShareWareMoniker2;
		break;
	case 3: moniker = @ShareWareMoniker3;
		break;
	case 4: moniker = @ShareWareMoniker4;
		break;
	default: moniker = @ShareWareMoniker1;
	}

	@send GZipShareWareTextGlyph::MSG_GEN_USE_VIS_MONIKER(ChunkOf(moniker),VUM_NOW);
	}


//@extern method GZipProcessClass, MSG_GZIP_REGISTER;

/* end of file */

