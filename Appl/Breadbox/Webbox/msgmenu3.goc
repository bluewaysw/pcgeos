/* ***************************
 * Copyright (C) 1995 Clemens Kochinke d/b/a FuzzyLogicTM
 * PROJECT:  Jupiter 2Web Editor
 * MODULE:   Methods for Document Class
 * FILE:     msgmenu3.goc
 * AUTHOR:   Clemens Kochinke: December 29, 1995
 * REVISION HISTORY:
 *      CK     12/29/95  Completion
 *      CK      1/ 1/96  Separate button from menu functions
 *      CK      4/25/97  Add tag wrap as per Marcus' suggestions
 *      CK      5/3/97   Add functions for HR box with sliders and pickers
 * DESCRIPTION:
 *      Method definitions for the document object - 3rd menu segment
*********************************/
/* INDEX:  @extern method HTMDocumentClass, MSG_TAG_THREE  */
/**********************************
 *                 Headers
 **********************************/
@include "app.goh"    /* Includes classes and constants. */
@include "global.goh" /* Must be after app.goh.
                       * Includes globals, objects, prototypes. */
#include <heap.h>     /* For strings and memory relocations */
@include "men2str.goh" /* Strings for this message. */
/**********************************/
@extern object HRAligns ;
@extern object HRSize ;
@extern object HRShade ;
@extern object HRHeight ;
@extern object HRPixelSlider ;
@extern object HRPercentSlider ;
@extern object HRSizeSlider;

@extern method HTMDocumentClass, MSG_TAG_THREE
{
  optr ourText, textOD;  char * tagBufPtr, *tagFront, *tagEnd;
/*  VisTextRange vtr; */
  word hrarg;
/* for sliders:  */  char cwidth[10];  

 @callsuper();

  pself = ObjDerefGen( oself );
  if ( pself->HTMDI_textHandle != NullHandle )  {
    ourText = /*GeodeGetOptrNS(*/ @HTMText/* )*/;
    textOD = ConstructOptr( pself->HTMDI_textHandle, OptrToChunk( ourText ) );
(void) MemLock(OptrToHandle(@M3Tag1));

        switch (whichTag)        {
case 1:
    tagBufPtr = LMemDeref(@M3Tag1);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 2:
    tagBufPtr = LMemDeref(@M3Tag2);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 3:
    tagBufPtr = LMemDeref(@M3Tag3);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 4:
    tagBufPtr = LMemDeref(@M3Tag4);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 5:
    tagBufPtr = LMemDeref(@M3Tag5);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

/********** Begin Simple Horizontal Rule ***********************/
case 600:
    tagBufPtr = LMemDeref(@M3Tag6a);  /* <hr>  */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 7:
    tagBufPtr = LMemDeref(@M3Tag7);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 8:
    tagBufPtr = LMemDeref(@M3Tag8);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 9:
    tagBufPtr = LMemDeref(@M3Tag9); /*  <CENTER>  */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 10:
    tagBufPtr = LMemDeref(@M3Tag10);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 11:
    tagBufPtr = LMemDeref(@M3Tag11);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 12:
    tagBufPtr = LMemDeref(@M3Tag12);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    tagBufPtr = LMemDeref(@M3Tag12a);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 13:
    tagBufPtr = LMemDeref(@M3Tag13);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
/********** End Simple Horizontal Rule ***********************/

/********** Begin Horizontal Rule Box *****************/
case 130:
    tagBufPtr = LMemDeref(@M3Tag6);    /* <hr */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

      hrarg = 1;  /* default for first selector */
      /******************* Height = Thickness +++++++++++++++*/

hrarg = @call /*GeodeGetOptrNS(@*/HRHeight/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
      if (hrarg != (GIGS_NONE)  || hrarg!=1 )      
	{
         /* switch((int)hrarg){ */
         /* case 1: / * user has selected "default" - nothing to be done * /
         strcpy(rule,"1");
         tagBufPtr = LMemDeref(@M3Tag10);
         @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
         @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(&rule,0);
         break; 
         */
         /* case 2:     User selects height with slider */
         if (hrarg==2)   {  
         tagBufPtr = LMemDeref(@M3Tag10);
         @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
         @call /*GeodeGetOptrNS(@*/HRSizeSlider/*)*/::\
                    MSG_GEN_VALUE_GET_VALUE_TEXT(cwidth, GVT_VALUE);
         @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(cwidth,0);
                          }
         /* break;
                } */
         }
         else { hrarg = 3; } /* default for next selection */
      /******************* Width +++++++++++++++*/
      /* Let's see if the user wants to set the width
         as pixels (1), percent(2) or not at all(3) */
hrarg = @call /*GeodeGetOptrNS(@*/HRSize/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (hrarg != (GIGS_NONE) || hrarg !=3 )
        {
        if (hrarg==1)      { tagBufPtr = LMemDeref(@M3Tag11);
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

        /*  Now, if the user selected pixels, get the value from slider: */
        @call /*GeodeGetOptrNS(@*/HRPixelSlider/*)*/::\
                    MSG_GEN_VALUE_GET_VALUE_TEXT(cwidth, GVT_VALUE);
        /*  Add the value to the text and add a closing " : */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(cwidth,0);
						} /* Pixels */

        else if (hrarg==2) { tagBufPtr = LMemDeref(@M3Tag12);
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
        /*  Now, if the user selected percent, get the value from slider: */
        @call /*GeodeGetOptrNS(@*/HRPercentSlider/*)*/::\
                    MSG_GEN_VALUE_GET_VALUE_TEXT(cwidth, GVT_VALUE);
        /*  Add the value to the text and add a closing " : */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(cwidth,0);
                 tagBufPtr = LMemDeref(@M3Tag12a); 	/* %" */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
						} /* Percent */
        }
                        /* Do nothing if user selected nothing or default */
        else { hrarg=30; } /* default for next selector */
      /******************* ALIGNMENT +++++++++++++++*/
      /* What selection has the user made at 3 alignment buttons? */
hrarg = @call /*GeodeGetOptrNS(@*/HRAligns/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (hrarg != (GIGS_NONE) )
        {
        if (hrarg==29)      { tagBufPtr = LMemDeref(@M3Tag7);} /* Left */
        else if (hrarg==31) { tagBufPtr = LMemDeref(@M3Tag8);} /* Right */
        else                { tagBufPtr = LMemDeref(@M3Tag9);} /* Center */
        /* Enter the selected tag */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
        }
                        /* set default for next selector */
	else { hrarg=1; }

      /******************* Shade +++++++++++++++*/
      /* What selection has the user made for shade? */
hrarg = @call /*GeodeGetOptrNS(@*/HRShade/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (hrarg != (GIGS_NONE) || hrarg != 1)
        {
        if (hrarg==2)
          {
	  tagBufPtr = LMemDeref(@M3Tag13); /* No shade */
	  /* Shade is default */
          @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
          /* no else{} because there's no tag for shade */
          }
        }
         /******* End with closing > ********/
    tagBufPtr = LMemDeref(@M3Tag13a);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
/********** End Horizontal Rule Box *******************/

case 14:
    tagFront = LMemDeref(@M3Tag14);
    tagEnd = LMemDeref(@M3Tag14a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 15:
    tagBufPtr = LMemDeref(@M3Tag15);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 16:  /* <p></p> */
/* This works fine 4/22/1997
    tagBufPtr = LMemDeref(@M3Tag16);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
*/
    tagFront = LMemDeref(@M3Tag1); /* same as 16 */
    tagEnd = LMemDeref(@M3Tag16a);
InsertTags(textOD, tagFront, tagEnd);
break;

case 160:
    tagBufPtr = LMemDeref(@M3Tag160);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
/*
case 17:
    tagBufPtr = LMemDeref(@M3Tag17);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 18:
    tagBufPtr = LMemDeref(@M3Tag==);
=@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 19:
    tagBufPtr = LMemDeref(@M3Tag==);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 20:
    tagBufPtr = LMemDeref(@M3Tag==);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
*/
/* ------------ Lists ------------ */
case 21:
/*
    tagBufPtr = LMemDeref(@M3Tag21);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag21);
    tagEnd = LMemDeref(@M3Tag21a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 22:
    tagBufPtr = LMemDeref(@M3Tag22);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 23:
    tagBufPtr = LMemDeref(@M3Tag23);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 24:
    tagBufPtr = LMemDeref(@M3Tag24);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 25:
    tagBufPtr = LMemDeref(@M3Tag25);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 250:
/*
    tagBufPtr = LMemDeref(@M3Tag250);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag250);
    tagEnd = LMemDeref(@M3Tag250a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 26:
    tagBufPtr = LMemDeref(@M3Tag26);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 27:
    tagBufPtr = LMemDeref(@M3Tag27);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 28:
    tagBufPtr = LMemDeref(@M3Tag28);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 29:
/*
    tagBufPtr = LMemDeref(@M3Tag29);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag29);
    tagEnd = LMemDeref(@M3Tag29a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 290:
/*    tagBufPtr = LMemDeref(@M3Tag290);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag290);
    tagEnd = LMemDeref(@M3Tag290a);
InsertTags(textOD, tagFront, tagEnd);
    break;
/*new 2/10 compact tags */
case 291:
/*
    tagBufPtr = LMemDeref(@M3Tag291);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag291);
    tagEnd = LMemDeref(@M3Tag291a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 292:
/*
    tagBufPtr = LMemDeref(@M3Tag292);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag292);
    tagEnd = LMemDeref(@M3Tag292a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 293:
/*
    tagBufPtr = LMemDeref(@M3Tag293);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag293);
    tagEnd = LMemDeref(@M3Tag34a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 294:
/*
    tagBufPtr = LMemDeref(@M3Tag294);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag294);
    tagEnd = LMemDeref(@M3Tag35a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 30:
    tagBufPtr = LMemDeref(@M3Tag30);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 31:
    tagBufPtr = LMemDeref(@M3Tag31);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 32:
    tagBufPtr = LMemDeref(@M3Tag32);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 33:
/*
    tagBufPtr = LMemDeref(@M3Tag33);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag33);
    tagEnd = LMemDeref(@M3Tag33a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 34:
/*
    tagBufPtr = LMemDeref(@M3Tag34);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag34);
    tagEnd = LMemDeref(@M3Tag34a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 35:
/*
    tagBufPtr = LMemDeref(@M3Tag35);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
*/
    tagFront = LMemDeref(@M3Tag35);
    tagEnd = LMemDeref(@M3Tag35a);
InsertTags(textOD, tagFront, tagEnd);
    break;
/* ======>> 36-40 reserved for future use <<===== */

/*--------------- Backgrounds and Colors ---------*/
case 41:
    tagBufPtr = LMemDeref(@M3Tag41);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 42:
    tagBufPtr = LMemDeref(@M3Tag42);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 43:
    tagBufPtr = LMemDeref(@M3Tag43);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 44:
    tagBufPtr = LMemDeref(@M3Tag44);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 45:
    tagBufPtr = LMemDeref(@M3Tag45);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 46:
    tagBufPtr = LMemDeref(@M3Tag46);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
/* ======>> 47-50 reserved for future use <<===== */
        }
MemUnlock(OptrToHandle(@M3Tag1));
        }
@call textOD::MSG_META_TEXT_USER_MODIFIED(textOD);
}

