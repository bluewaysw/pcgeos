/* ***************************
 * Copyright (C) 1995 Clemens Kochinke d/b/a FuzzyLogicTM
 * Portions:
 * Portions Copyright (c) Geoworks 1992 -- All Rights Reserved
 * PROJECT:  Jupiter 2Web Editor
 * MODULE:   Methods for Document Class
 * FILE:     msgmenu2.goc
 * AUTHOR:   Clemens Kochinke: December 29, 1995
 * REVISION HISTORY:
 *      Name   Date      Description
 *      ----   ----      -----------
 *      CK     12/29/95  Completion
 *      CK      1/ 1/96  Separate button from menu functions
 * DESCRIPTION:
 *      These are the function definitions and method definitions
 *      for the document object - only menu functions
*********************************/

/* INDEX:
@extern method HTMDocumentClass, MSG_TAG_FOUR
*/

/* @extern object ImageAligns ; */
/* @extern object HAligns ; */
/* @extern object HSize ; */

/**********************************
 *                 Headers
 **********************************/
@include "app.goh"    /* Includes classes and constants. */
@include "global.goh" /* Must be after app.goh.
                           * Includes globals, objects, prototypes. */

#include <heap.h>      /* for strings and memory relocations */
@include "men2str.goh" /* the strings for these messages */
@include <Objects/Text/tCommon.h>
/**********************************/


void InsertTags (optr textOD, char *tagFront, char *tagEnd)
{
VisTextRange vtr;
/* ColorQuad redColor={C_RED,CF_INDEX,0,0};
ColorQuad blackColor={C_BLACK,CF_INDEX,0,0};
FontID mainFont, boldFont;
WWFixed miniPoint, mainPoint;
miniPoint.WWF_int=9;
mainPoint.WWF_int=12;
miniPoint.WWF_fract=0;
mainPoint.WWF_fract=0;
boldFont=FID_CHICAGO;
mainFont=FID_DTC_URW_MONO;
*/

@call textOD::MSG_VIS_TEXT_GET_SELECTION_RANGE(&vtr);
@call textOD::MSG_META_SUSPEND();

/* (1)  after tag */

/* Change text, font, color, size */
/*@call textOD::MSG_VIS_TEXT_SET_FONT_ID(\
        boldFont, vtr.VTR_end+strlen(tagEnd)-1, vtr.VTR_end+1);
@call textOD::MSG_VIS_TEXT_SET_POINT_SIZE(\
        miniPoint, vtr.VTR_end, vtr.VTR_end+strlen(tagEnd)-1);
@call textOD::MSG_VIS_TEXT_SET_COLOR(\
        redColor, vtr.VTR_end+strlen(tagEnd)-1, vtr.VTR_end);
*/
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end, vtr.VTR_end);

@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagEnd,0);

/* Return to standard font
        @call textOD::MSG_VIS_TEXT_SET_FONT_ID(\
                mainFont, TEXT_ADDRESS_PAST_END,vtr.VTR_end+strlen(tagEnd));
        @call textOD::MSG_VIS_TEXT_SET_POINT_SIZE(\
                mainPoint, TEXT_ADDRESS_PAST_END,vtr.VTR_end+strlen(tagEnd));
        @call textOD::MSG_VIS_TEXT_SET_COLOR(\
                blackColor, TEXT_ADDRESS_PAST_END,vtr.VTR_end+strlen(tagEnd));
*/
/* (2)  before tag */
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_start, vtr.VTR_start);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagFront,0);

/* (3)  Reinsert old range, compensating for insertion from first tag */
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end+strlen(tagFront),
        vtr.VTR_start+strlen(tagFront));

@call textOD::MSG_META_UNSUSPEND();
/*      Remove highlight of marked text and
        place cursor at end of highlighted segment.
        It goes to end because cursor usually goes to end with
        any new text entry; placing it at the beginning was
        confusing! */
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end+strlen(tagEnd)+strlen(tagFront),
        vtr.VTR_end+strlen(tagEnd)+strlen(tagFront));

}


/*************************************************/
@extern method HTMDocumentClass, MSG_TAG_FOUR
{
/* For #9, IMG SCR */
/* char                 buffer[256];*/
char            seltext[256]="";
VisTextRange    range, vtr;
/*dword           selectStart, selectEnd, textSize;*/

char            header[1];
char            * tagBufPtr, *tagFront, *tagEnd;
optr            ourText;
optr            textOD, textEntry;

word imgarg;    /* image alignment argument from GenItemGroup */

  @callsuper();
  pself = ObjDerefGen( oself );
  if ( pself->HTMDI_textHandle != NullHandle )  {
    ourText = /*GeodeGetOptrNS(*/ @HTMText/* )*/;
    textOD = ConstructOptr( pself->HTMDI_textHandle,
                             OptrToChunk( ourText ) );

(void)  MemLock(OptrToHandle(@M4Tag1));

switch (whichTag)
        {
case 11: /* HEADINGS TAG *************************************************/
/*********** STEP 1 Get Heading selection ****************/

imgarg = @call /*GeodeGetOptrNS(@*/HSize/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
if (imgarg != (GIGS_NONE))      {
/*              strcpy(header,(char)imgarg); */
/*header = imgarg;*/

switch((int)imgarg){
case 1:
strcpy(header,"1");
break;
case 2:
strcpy(header,"2");
break;
case 3:
strcpy(header,"3");
break;
case 4:
strcpy(header,"4");
break;
case 5:
strcpy(header,"5");
break;
case 6:
strcpy(header,"6");
break;
}
/* tried and true:
    tagBufPtr = LMemDeref(@M4Tag11);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;*/

@call textOD::MSG_VIS_TEXT_GET_SELECTION_RANGE(&vtr);
@call textOD::MSG_META_SUSPEND();
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end, vtr.VTR_end);

    tagBufPtr = LMemDeref(@M4Tag11end); /* 11end = "</H" */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(&header,0); /* number */

    tagBufPtr = LMemDeref(@M4Tag11z); /* 11z  = ">" */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_start, vtr.VTR_start);

    tagBufPtr = LMemDeref(@M4Tag11 ); /* "</H" */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

  @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(&header,0);
/* tagBufPtr = (char*)imgarg;*/
/* or @call textOD::MSG_TAG_FOUR(imgarg); */
/*  imgarg = NULL;*/            }

/******************* STEP 2 ALIGNMENT +++++++++++++++*/

 imgarg = @call /*GeodeGetOptrNS(@*/HAligns/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
if (imgarg != (GIGS_NONE)){
        if (imgarg==29)     tagBufPtr = LMemDeref(@M4Tag29); /* Left */
        else if (imgarg==31)     tagBufPtr = LMemDeref(@M4Tag31); /* Right */
        else                tagBufPtr = LMemDeref(@M4Tag30); /* Center */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
                        }

/* STEP 3 CLOSE INITIAL TAG, OPEN CLOSE TAG */
/*    tagBufPtr = LMemDeref(@M4Tag36close);  36 close = " border=0>" */
    tagBufPtr = LMemDeref(@M4Tag11z); /* 11z  = ">" */
/*@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    tagBufPtr = LMemDeref(@M4Tag11end);  11end= "<"/ */
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

/* STEP 4 ADD SIZE AND CLOSE TAG
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(&header,0);
*/
/* Reinsert old text */
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end+4 /*strlen(tagFront)*/ ,
        vtr.VTR_start+4 /* strlen(tagFront) */ );

@call textOD::MSG_META_UNSUSPEND();
/*      Remove highlight of marked text and
        place cursor at end of highlighted segment.
        It goes to end because cursor usually goes to end with
        any new text entry; placing it at the beginning was
        confusing! */
@call textOD::MSG_VIS_TEXT_SELECT_RANGE(vtr.VTR_end+5 /*strlen(tagEnd) */ + 4 /* strlen(tagFront) */,
        vtr.VTR_end+5+4 /*strlen(tagEnd)+strlen(tagFront)*/ );
break;


/* "Main" Menu */
case 1:
    tagFront = LMemDeref(@M4Tag1);
    tagEnd = LMemDeref(@M4Tag1a);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 110:
    tagFront = LMemDeref(@M4Tag110);
    tagEnd = LMemDeref(@M4Tag110a);
InsertTags(textOD, tagFront, tagEnd);
break;
case 111:
    tagFront = LMemDeref(@M4Tag111);
    tagEnd = LMemDeref(@M4Tag111a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 2: /* HEAD */
    tagFront = LMemDeref(@M4Tag2);
    tagEnd = LMemDeref(@M4Tag2end);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 3:  /*TITLE */
    tagFront = LMemDeref(@M4Tag3);
    tagEnd = LMemDeref(@M4Tag3end);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 3000:  /* BANNER */
    tagFront = LMemDeref(@M4Tag3000);
    tagEnd = LMemDeref(@M4Tag3000end);
InsertTags(textOD, tagFront, tagEnd);
    break;
case 3001:  /* BYLINE */
/* Tried and true
    tagBufPtr = LMemDeref(@M4Tag3001);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
NEW with action on highlighted text */
/* seltext = ""; */
@call textOD::MSG_VIS_TEXT_GET_SELECTION_RANGE(&range);
@call textOD::MSG_VIS_TEXT_GET_SELECTION_PTR(seltext);

    tagBufPtr = LMemDeref(@M4Tag3001);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(seltext, strlen(seltext)) ;
    tagBufPtr = LMemDeref(@M4Tag3001end);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
case 4:
    tagFront = LMemDeref(@M4Tag4);
    tagEnd = LMemDeref(@M4Tag4a);
InsertTags(textOD, tagFront, tagEnd);
    break;

/* "Format" Menu */
case 5:
    tagFront = LMemDeref(@M4Tag5);
    tagEnd = LMemDeref(@M4Tag5a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 6:
    tagFront = LMemDeref(@M4Tag6);
    tagEnd = LMemDeref(@M4Tag6a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 7:
    tagFront = LMemDeref(@M4Tag7);
    tagEnd = LMemDeref(@M4Tag7a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 8:
    tagFront = LMemDeref(@M4Tag8);
    tagEnd = LMemDeref(@M4Tag8a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 9:
    tagFront = LMemDeref(@M4Tag9);
    tagEnd = LMemDeref(@M4Tag9a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 10:
    tagFront = LMemDeref(@M4Tag10);
    tagEnd = LMemDeref(@M4Tag10a);
InsertTags(textOD, tagFront, tagEnd);
    break;

/* new */

case 100:
    tagFront = LMemDeref(@M4Tag100);
    tagEnd = LMemDeref(@M4Tag100a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 101:
    tagFront = LMemDeref(@M4Tag101);
    tagEnd = LMemDeref(@M4Tag101a);
InsertTags(textOD, tagFront, tagEnd);
break;

 /* Soft Formatting Tags */


case 12:
    tagFront = LMemDeref(@M4Tag12);
    tagEnd = LMemDeref(@M4Tag12a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 120:
    tagFront = LMemDeref(@M4Tag120);
    tagEnd = LMemDeref(@M4Tag120a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 13:
    tagFront = LMemDeref(@M4Tag13);
    tagEnd = LMemDeref(@M4Tag13a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 14:
    tagFront = LMemDeref(@M4Tag14);
    tagEnd = LMemDeref(@M4Tag14a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 15:
    tagFront = LMemDeref(@M4Tag15);
    tagEnd = LMemDeref(@M4Tag15a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 16:
    tagFront = LMemDeref(@M4Tag16);
    tagEnd = LMemDeref(@M4Tag16a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 17:
    tagFront = LMemDeref(@M4Tag17);
    tagEnd = LMemDeref(@M4Tag17a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 18:
    tagFront = LMemDeref(@M4Tag18);
    tagEnd = LMemDeref(@M4Tag18a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 19:
    tagFront = LMemDeref(@M4Tag19);
    tagEnd = LMemDeref(@M4Tag19a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 20:
    tagFront = LMemDeref(@M4Tag20);
    tagEnd = LMemDeref(@M4Tag20a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 21:
    tagFront = LMemDeref(@M4Tag21);
    tagEnd = LMemDeref(@M4Tag21a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 210:
    tagFront = LMemDeref(@M4Tag210);
    tagEnd = LMemDeref(@M4Tag210a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 211:
    tagFront = LMemDeref(@M4Tag211);
    tagEnd = LMemDeref(@M4Tag211a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 212:
    tagFront = LMemDeref(@M4Tag212);
    tagEnd = LMemDeref(@M4Tag212a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 213:
    tagFront = LMemDeref(@M4Tag213);
    tagEnd = LMemDeref(@M4Tag213a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 22:
    tagFront = LMemDeref(@M4Tag22);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

/* new */
case 220:
    tagFront = LMemDeref(@M4Tag220);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 221:
    tagFront = LMemDeref(@M4Tag221);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 222:
    tagFront = LMemDeref(@M4Tag222);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 223:
    tagFront = LMemDeref(@M4Tag223);
    tagEnd = LMemDeref(@M4Tag223a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 224:
    tagFront = LMemDeref(@M4Tag224);
    tagEnd = LMemDeref(@M4Tag224a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 225:
    tagFront = LMemDeref(@M4Tag225);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 226:
    tagFront = LMemDeref(@M4Tag226);
    tagEnd = LMemDeref(@M4Tag22a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 227:
    tagFront = LMemDeref(@M4Tag227);
    tagEnd = LMemDeref(@M4Tag227a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 228:
    tagFront = LMemDeref(@M4Tag228);
    tagEnd = LMemDeref(@M4Tag227a);
InsertTags(textOD, tagFront, tagEnd);
break;

case 229:
    tagFront = LMemDeref(@M4Tag229);
    tagEnd = LMemDeref(@M4Tag227a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 230:
    tagBufPtr = LMemDeref(@M4Tag230);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 231:
    tagBufPtr = LMemDeref(@M4Tag231);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 232:
    tagBufPtr = LMemDeref(@M4Tag232);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 233:
    tagBufPtr = LMemDeref(@M4Tag233);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 234:
    tagBufPtr = LMemDeref(@M4Tag234);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 23:
    tagBufPtr = LMemDeref(@M4Tag23);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
/************* ALIGNMENT ***************/

case 24:
    tagFront = LMemDeref(@M4Tag24);
    tagEnd = LMemDeref(@M4Tag24a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 25:
    tagFront = LMemDeref(@M4Tag25);
    tagEnd = LMemDeref(@M4Tag25end);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 26:
    tagFront = LMemDeref(@M4Tag26);
    tagEnd = LMemDeref(@M4Tag26a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 27:
    tagFront = LMemDeref(@M4Tag27);
    tagEnd = LMemDeref(@M4Tag26a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 28:
    tagFront = LMemDeref(@M4Tag28);
    tagEnd = LMemDeref(@M4Tag26a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 29:
    tagBufPtr = LMemDeref(@M4Tag29);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 30:
    tagBufPtr = LMemDeref(@M4Tag30);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 31:
    tagBufPtr = LMemDeref(@M4Tag31);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

/* LINKS & GRAPHICS */
case 32:
    tagFront = LMemDeref(@M4Tag32);
    tagEnd = LMemDeref(@M4Tag32a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 33:
    tagFront = LMemDeref(@M4Tag33);
    tagEnd = LMemDeref(@M4Tag32a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 34:
    tagFront = LMemDeref(@M4Tag34);
    tagEnd = LMemDeref(@M4Tag32a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 340:
    tagFront = LMemDeref(@M4Tag340);
    tagEnd = LMemDeref(@M4Tag32a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 35:
    tagFront = LMemDeref(@M4Tag35);
    tagEnd = LMemDeref(@M4Tag32a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 36: /* <IMG SCR = "URL"> */

                /* Tried and true:
    tagBufPtr = LMemDeref(@M4Tag36);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
                But now we'll try something else:  */

    tagBufPtr = LMemDeref(@M4Tag36);
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

    textEntry = /*GeodeGetOptrNS(*/ @NText2/* )*/;
    @call textEntry::MSG_VIS_TEXT_GET_ALL_PTR(seltext);
    @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(seltext, strlen(seltext));

    tagBufPtr = LMemDeref(@M4Tag36end);  /*  "   */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

        @call textEntry::MSG_VIS_TEXT_DELETE_ALL();

    tagBufPtr = LMemDeref(@M4Tag36alt);  /*  ALT="   */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

    textEntry = /*GeodeGetOptrNS(*/ @NText3 /*)*/;
    @call textEntry::MSG_VIS_TEXT_GET_ALL_PTR(seltext);
    @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(seltext, strlen(seltext));
        @call textEntry::MSG_VIS_TEXT_DELETE_ALL();

    tagBufPtr = LMemDeref(@M4Tag36end);  /*  "  */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
/* Test for GenItemGroup usage: 38-45 are alignment items */
        imgarg = @call /*GeodeGetOptrNS(@*/ImageAligns/*)*/::MSG_GEN_ITEM_GROUP_GET_SELECTION();
        if (imgarg != (GIGS_NONE)) @call self::MSG_TAG_FOUR(imgarg);

    tagBufPtr = LMemDeref(@M4Tag36close);  /* " BORDER=0> */
        @call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);

break;

case 37:
    tagBufPtr = LMemDeref(@M4Tag37);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 38:
    tagBufPtr = LMemDeref(@M4Tag38);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 39:
    tagBufPtr = LMemDeref(@M4Tag39);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 40:
    tagBufPtr = LMemDeref(@M4Tag40);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 41:
    tagBufPtr = LMemDeref(@M4Tag41);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 42:
    tagBufPtr = LMemDeref(@M4Tag42);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 43:
    tagBufPtr = LMemDeref(@M4Tag43);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 44:
    tagBufPtr = LMemDeref(@M4Tag44);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 45:
    tagBufPtr = LMemDeref(@M4Tag45);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 46:
    tagBufPtr = LMemDeref(@M4Tag46);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 47:
    tagBufPtr = LMemDeref(@M4Tag47);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

/* new */
case 470:
    tagBufPtr = LMemDeref(@M4Tag470);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 471:
    tagFront = LMemDeref(@M4Tag471);
    tagEnd = LMemDeref(@M4Tag471a);
InsertTags(textOD, tagFront, tagEnd);
    break;

case 472:
    tagBufPtr = LMemDeref(@M4Tag472);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 473:
    tagBufPtr = LMemDeref(@M4Tag473);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 48:
    tagBufPtr = LMemDeref(@M4Tag48);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 49:
    tagBufPtr = LMemDeref(@M4Tag49);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 50:
    tagBufPtr = LMemDeref(@M4Tag50);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 501:
    tagBufPtr = LMemDeref(@M4Tag501);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 51:
    tagBufPtr = LMemDeref(@M4Tag51);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 52:
    tagBufPtr = LMemDeref(@M4Tag52);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 53:
    tagBufPtr = LMemDeref(@M4Tag53);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;

case 54:
    tagBufPtr = LMemDeref(@M4Tag54);
@call textOD::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(tagBufPtr,0);
    break;
        }
MemUnlock(OptrToHandle(@M4Tag1));
        }
strcpy(seltext,"");

@call textOD::MSG_META_TEXT_USER_MODIFIED(textOD);

/* seltext = NULL; Doesn't work: Empty content of variable */
}

