
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			rpt_mtds.goc
 *  PROJECT:		GPCBase
 *  DESCRIPTION:	This file has methods for the reports
 *			functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "gpcbase.goh"
@include "externs.goh"
#include <math.h>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */



/****************************************************************************
 *		Code for GPCBaseProcessClass Reports
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ChangeCharAttr 
 *
 * CALLED BY:	MSG_CREATE_REPORT
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/
void ChangeCharAttr(optr whichAttrs)
{
 dword		rangeStart;
 VisTextCharAttr     *attr;


    rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
    MemLock(OptrToHandle(whichAttrs));
    attr = LMemDeref(whichAttrs);
    @call TextWindow::MSG_VIS_TEXT_SET_CHAR_ATTR(
		      attr,
			 TEXT_ADDRESS_PAST_END,
			 rangeStart);
    MemUnlock(OptrToHandle(whichAttrs));

}

/***********************************************************************
 *
 * FUNCTION:	ChangeParaAttr
 *
 * CALLED BY:	MSG_CREATE_REPORT
 *
 * STRATEGY:    
 *		
 *
 ***********************************************************************/
void ChangeParaAttr(optr whichAttrs)
{
    dword		rangeStart;
    VisTextParaAttr     *attr;


    rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
    MemLock(OptrToHandle(whichAttrs));
    attr = LMemDeref(whichAttrs);
    @call TextWindow::MSG_VIS_TEXT_SET_PARA_ATTR(
		      attr,
		      TEXT_ADDRESS_PAST_END,
		      rangeStart);
    MemUnlock(OptrToHandle(whichAttrs));

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_CREATE_REPORT_DB for GPCBaseProcessClass
 *
 * PARAMETERS:
 *
 *
 * DESCRIPTION:  gets the Create a Report DB ready to open
 *               and opens it
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_OPEN_CREATE_REPORT_DB
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 word		i;
 char		fileName[33];
 Boolean		numeric = FALSE;


    /* put the file name in the title entry box */
    @call GPCBDoc::MSG_GEN_DOCUMENT_GET_FILE_NAME(fileName);
    @call CRDBTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(fileName, 0);

    /* see if there are any numeric fields */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);
    for (i = 0; i < numFields; i++)  {
	  if (VMmapPtr->VMS_fieldType[i] == T_NUM) {
		numeric = TRUE;
		i = numFields;  /* no need to look any further */
		}
	  }
    VMUnlock(mh);

    if (numeric)
	  @call CRDBNumericSubGroup::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
	  @call CRDBNumericSubGroup::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    @call CRDBRecords::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(R_ALL, FALSE);

    /* now open the dialog box */
    @send CreateReportDBox::MSG_GEN_INTERACTION_INITIATE();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_REPORT for GPCBaseProcessClass
 *
 * DESCRIPTION:	Fills in the report text object based on the dbox
 *              selections.
 *     
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_CREATE_REPORT
{
 char		reportBuffer[300];
 char		strBuffer[(10 * DATA_LEN)];
 char		fileName[FILE_LONGNAME_BUFFER_SIZE];
 char		sumBuffer[FLOAT_TO_ASCII_HUGE_BUF_LEN + 1]; 
 word		i, fieldSelect, sumSelect, recordsToShow, showFields;
 Boolean		dateSelect, nameSelect, isChecked, firstShownField;
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		bufCount, fieldCount;
 char		fieldString[DATA_LEN + 2];
 word		j, k, sumFields;
 char		dateString[DATE_TIME_BUFFER_SIZE + 1];
 TimerDateAndTime	date;
 VMBlockHandle	vmbh;
 VMMapStruct		*VMmapPtr;
 MemHandle		mh, smh;
 SortStruct		*sortArrayElement;
 WWFixed		size;
 dword		rangeStart;
 FloatNum		sumValue[MAX_FIELDS] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 FloatNum		fieldValue;
 char		charBuffer[2];
 char		numOnlyString[DATA_LEN];
 Tab Rpt1Tab = {
	  1.5 * 8 * PIXELS_PER_INCH, /* a 1.5" left tab */
	  TL_NONE | TT_LEFT,
	  SDM_100,
	  0,
	  0,
	  NULL
	};
 VMFileHandle fileHan;


    /* add the text window and do some opening set-up */
    @call TextContent::MSG_VIS_ADD_CHILD(@TextWindow, CCO_FIRST);
    fileHan = ClipboardGetClipboardFile();
    @call TextWindow::MSG_VIS_TEXT_SET_VM_FILE(fileHan);
    @call TextWindow::MSG_VIS_LARGE_TEXT_CREATE_DATA_STRUCTURES();
    @call TextWindow::MSG_VIS_TEXT_CREATE_STORAGE(
		   VTSF_MULTIPLE_CHAR_ATTRS | VTSF_MULTIPLE_PARA_ATTRS,
			    FALSE);
  	 @call TextWindow::MSG_VIS_NOTIFY_GEOMETRY_VALID();
	 @send GPCCopyButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

	 /* Open the report window */
	 @call ReportGroup::MSG_GEN_INTERACTION_INITIATE();

	 /* set the print controller usable - had to set ~USABLE for NT */
  /*	 @send GPCBasePrintControl::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);

    /* and grab the focus & target */
//    @send TextWindow::MSG_META_GRAB_FOCUS_EXCL();
//    @send TextWindow::MSG_META_GRAB_TARGET_EXCL();

    /* so the draws don't take forever */
    @call TextWindow::MSG_META_SUSPEND();

    /* set the starting attributes */
    ChangeCharAttr(@GPCBTextCharAttrs);
    ChangeParaAttr(@GPCBTitleParaAttrs);

    /* mark app busy */
    @send GPCBaseApp::MSG_GEN_APPLICATION_MARK_BUSY();

    /* set size and font */
    size.WWF_int  = 12;
    size.WWF_frac = 0;
    @call TextWindow::MSG_VIS_TEXT_SET_POINT_SIZE(
                size, TEXT_ADDRESS_PAST_END, 0);
    @call TextWindow::MSG_VIS_TEXT_SET_FONT_ID(
                FID_DTC_URW_MONO, TEXT_ADDRESS_PAST_END, 0); 

    /* see if we're to use date in title... */
    dateSelect = @call CRDBDate::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(R_DATE);
    /* see what records we're to show ... */
    recordsToShow = @call CRDBRecords::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /* see if we're to show field names... */
    nameSelect = @call CRDBFNames::MSG_GEN_BOOLEAN_GROUP_IS_BOOLEAN_SELECTED(R_NAME);
    /* see what field(s) to show... */
    fieldSelect = @call CRDBFields::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    if (fieldSelect == R_SELECTED)
	  showFields = @call RSFFields::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
    /* see what field(s) to total... */
    sumSelect = @call CRDBNumeric::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    if (sumSelect == R_SELECTED)
	  sumFields = @call RSNFFields::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();

    /* make text bold */
    @call TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
				0xffff, TS_BOLD, TEXT_ADDRESS_PAST_END, 0);

    /* display the title */
    reportBuffer[0] = 0;
    if (@call CRDBTitle::MSG_VIS_TEXT_GET_ALL_PTR(fileName))  {;
	  strcat(reportBuffer, fileName);
	  strcat(reportBuffer, "\r");
	  @call TextWindow::MSG_VIS_TEXT_REPLACE_ALL_PTR(reportBuffer, 0);
	  reportBuffer[0] = 0;
	  /* back to plain */
	  rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
	  @call TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
					0xffff, 0, TEXT_ADDRESS_PAST_END, rangeStart);
       }

    if (dateSelect)  {
       /* put in the system date */
	  TimerGetDateAndTime(&date);
	  LocalFormatDateTime(dateString, DTF_LONG_NO_WEEKDAY_CONDENSED, &date);
	  strcat(reportBuffer, dateString);
	  strcat(reportBuffer, "\r");
	  }
    @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
    reportBuffer[0] = 0;
    /* done with title stuff */
    ChangeParaAttr(@GPCBDocParaAttrs);
    rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
    @call TextWindow::MSG_VIS_TEXT_SET_TAB(Rpt1Tab, TEXT_ADDRESS_PAST_END, rangeStart);


    /* now go for the data */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);
    for (i = 0; i < numRecords; i++)  {
	  if (recordsToShow == R_SELECTED) {
		/* do we want this record? */
		sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
		VMLock(GPCBFile, sortListVMBHandle ,&smh);
		sortArrayElement = ChunkArrayElementToPtrHandles(
				  smh,
				  sortListChunkArray,
				  i,
				  0);
		isChecked = sortArrayElement->SS_check;
		VMUnlock(smh);
		}
	  if ((recordsToShow == R_ALL) || (isChecked))  {  /* yes we do */
		/* get the record struct address */
		GetGroupAndItem (&groupGroup, &recordItem, i);
		record = DBLock(GPCBFile, groupGroup, recordItem);
		/* copy the record to the buffer */
		strcpy(strBuffer, record->RS_data);
		DBUnlock(record);

		/* and each field data */
		bufCount = 0;
		firstShownField = TRUE;
		for (j = 0; j < numFields; j++)  {
		   /* add blank line between records */
		   if (!j) strcat(reportBuffer, "\r");
		   /* do we show this field? */
		   if (((fieldSelect == R_SELECTED) && ((showFields >> j) & 1))
						   || (fieldSelect != R_SELECTED)) {
			 /* did user want field names? */
			 if (nameSelect)  {
			    /* make it bold */
			    rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
			    @send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
					    0xffff, TS_BOLD, TEXT_ADDRESS_PAST_END, rangeStart);
			    /* insert the field name */
			    strcat(reportBuffer, VMmapPtr->VMS_fieldName[j]);
			    strcat(reportBuffer, ":");
			    strcat(reportBuffer, "\t");
			    @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
			    reportBuffer[0] = 0;
			    /* back to plain */
			    rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
			    @send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
					    0xffff, 0, TEXT_ADDRESS_PAST_END, rangeStart);
			    }  /* end of insert field name if */

			 /* now the data */
			 for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
			    if (strBuffer[bufCount] != (char) FIELD_SEP)  {  /* fill fieldStr */
				  fieldString[fieldCount] = strBuffer[bufCount];
				  bufCount++;
				  }
			    else  {   /* end of field */
				  fieldString[fieldCount] = NULL;
				  bufCount++;

				  /* do we need to show a date? */
				  if (VMmapPtr->VMS_fieldType[j] == T_DAT)  {
					ConvFromDateNum (fieldString, dateString);
					/* show the date */
					strcpy(fieldString, dateString);
					}
				  /* bold first entry */
				  if ((!nameSelect) && firstShownField)  {
					/* make it bold */
					rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
					@send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
						  0xffff, TS_BOLD, TEXT_ADDRESS_PAST_END, rangeStart);
					}
				  strcat (reportBuffer, fieldString);
				  strcat (reportBuffer, "\r");
				  @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
				  reportBuffer[0] = 0;
				  /* and back to plain */
				  if ((!nameSelect) && firstShownField)  {
					rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
					@send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
						  0xffff, 0, TEXT_ADDRESS_PAST_END, rangeStart);
					firstShownField = FALSE;
					}

				  /* are we summing this field? */
				  if (((sumSelect == R_SELECTED) && ((sumFields >> j) & 1))
					  || ((sumSelect == R_ALL) && (VMmapPtr->VMS_fieldType[j] == T_NUM))) {
					numOnlyString[0] = 0;
					/* cycle through string stripping non number stuff */
					for (k = 0; k <= (strlen(fieldString)); k++) {
					   /* test the kth char */
					   if (LocalIsNumChar((word)fieldString[k]))  {
						 /* add the char to number string */
						 charBuffer[0] = fieldString[k];
						 charBuffer[1] = '\000';
						 strcat(numOnlyString, charBuffer);
						 }
					   }
					/* convert to a value */
					FloatAsciiToFloat(FAF_STORE_NUMBER,
								   strlen(numOnlyString),
								   numOnlyString,
								   &fieldValue);
					// Under Watcom, FloatNum is not the same type as long double. 
					// So we cannot use operands like +,-,*,/ on FloatNum anymore.
					// sumValue[j] += fieldValue; 
					FloatPushNumber(&fieldValue);
					FloatPushNumber(&sumValue[j]);
					FloatAdd();
					FloatPopNumber(&sumValue[j]);

					} /* end of are we summing */

				  fieldCount = DATA_LEN; /* force exit loop */
				  }  /* end field else */
			    } /* end this field data for */
			 } /* end of show this field if */
		   else {  /* suck up the data for that field */
			 for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
			    if (strBuffer[bufCount] != (char) FIELD_SEP)  bufCount++;
			    else  {   /* end of field */
				  bufCount++;
				  fieldCount = DATA_LEN; /* force exit loop */
				  }
			    }
			 }  /* end of suck up data else */
		   /* bail if first field only */
		   if (fieldSelect == R_FIRST)  j = numFields;
		   } /* end of field data for (j loop) */
          }  /* end of show this record if */
	  } /* end of loop thru records for (i loop) */

    /* show sums if selected */
    if (sumSelect != R_NONE) {
	  /* make totals bold */
	  rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
	  @send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
				0xffff, TS_BOLD, TEXT_ADDRESS_PAST_END, rangeStart);
	  strcpy(reportBuffer, "\r");
	  MemLock (OptrToHandle(@TotalString));
	  strcat(reportBuffer, LMemDeref(@TotalString));
	  MemUnlock (OptrToHandle(@TotalString));
	  @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
	  for (k = 0; k < numFields; k++)  {
		if (((sumSelect == R_SELECTED) && ((sumFields >> k) & 1))
			|| ((sumSelect == R_ALL) && (VMmapPtr->VMS_fieldType[k] == T_NUM)
			   && (((fieldSelect == R_SELECTED) && ((showFields >> k) & 1))
						   || (fieldSelect != R_SELECTED)))) {
		   strcpy(reportBuffer, "\r  ");
		   strcat(reportBuffer, VMmapPtr->VMS_fieldName[k]);
		   MemLock (OptrToHandle(@IsString));
		   strcat(reportBuffer, LMemDeref(@IsString));
		   MemUnlock (OptrToHandle(@IsString));
		   @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
		   rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
		   @send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
						  0xffff, 0, TEXT_ADDRESS_PAST_END, rangeStart);
		   /* buffer the number */
		   FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
						 NullHandle,
						 NullHandle,
						 &sumValue[k],
						 sumBuffer);
		   strcpy(reportBuffer, sumBuffer);
		   @call TextWindow::MSG_VIS_TEXT_APPEND_PTR(reportBuffer, 0);
		   rangeStart = @call TextWindow::MSG_VIS_TEXT_GET_TEXT_SIZE();
		   @send TextWindow::MSG_VIS_TEXT_SET_TEXT_STYLE(0xffff, 0,
				    0xffff, TS_BOLD, TEXT_ADDRESS_PAST_END, rangeStart);
		   } /* end of summing field if */
		}  /* end of k for */
       }  /* end of some summing if */
    VMUnlock(mh);

    @send GPCBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    @call TextWindow::MSG_META_UNSUSPEND();

    /* disable report menu item so user can't open another window */
    @send CreateReportItem::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);

    /* and make the text obj the target abd scroll to the top */
    @send TextWindow::MSG_META_GRAB_TARGET_EXCL();
    @send TextWindow::MSG_VIS_TEXT_SELECT_START();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_REPORT_SHOW_RECORDS_LIST_APPLY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - if selection is "Selected Records..." then open that db -
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_REPORT_SHOW_RECORDS_LIST_APPLY
{


    if(selection == R_SELECTED) {
	  /* initialize the records list */
	  @call RSRRecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);
	  @send ReportSelectRecordsDBox::MSG_GEN_INTERACTION_INITIATE();
	  }

} 

/***********************************************************************
 *
 * MESSAGE:	MSG_REPORT_SHOW_FIELDS_LIST_APPLY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - if selection is "Selected Fields..." then open that db -
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_REPORT_SHOW_FIELDS_LIST_APPLY
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 word		i;
optr fNameOptr[MAX_FIELDS] = {
    @RSF1,
    @RSF2,
    @RSF3,
    @RSF4,
    @RSF5,
    @RSF6,
    @RSF7,
    @RSF8,
    @RSF9,
    @RSF10
} ;


    if(selection == R_SELECTED) {
	  /* before opening the db need to set bool items usable
	   * and give them the right monikers
	   */
	  /* get our VMmap block */
	  vmbh = VMGetMapBlock(GPCBFile);
	  VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);

	  for (i = 0; i < numFields; i++)  {
		/* set it usable */
		@call fNameOptr[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		/* show the field name */
		@call fNameOptr[i]::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
		    VMmapPtr->VMS_fieldName[i],
		    VUM_DELAYED_VIA_APP_QUEUE);
		}
	  VMUnlock(mh);

	  /* set the rest unusable */
	  for (i = numFields; i < MAX_FIELDS; i++)  {
		@call fNameOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}

	  @send ReportSelectFieldsDBox::MSG_GEN_INTERACTION_INITIATE();

	  }  /* end of selection is R_SELECTED if */

} 

/***********************************************************************
 *
 * MESSAGE:	MSG_REPORT_SHOW_NUM_FIELDS_LIST_APPLY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - if selection is "Selected Num. Fields..." then open that db -
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_REPORT_SHOW_NUM_FIELDS_LIST_APPLY
{
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 MemHandle	mh;
 word		i;
optr fNameOptr[MAX_FIELDS] = {
    @RSNF1,
    @RSNF2,
    @RSNF3,
    @RSNF4,
    @RSNF5,
    @RSNF6,
    @RSNF7,
    @RSNF8,
    @RSNF9,
    @RSNF10
} ;


    if(selection == R_SELECTED) {
	  /* before opening the db need to set bool items usable
	   * and give them the right monikers
	   */
	  /* get our VMmap block */
	  vmbh = VMGetMapBlock(GPCBFile);
	  VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);

	  for (i = 0; i < numFields; i++)  {
		if (VMmapPtr->VMS_fieldType[i] == T_NUM) {
		   /* set it usable */
		   @call fNameOptr[i]::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		   /* show the field name */
		   @call fNameOptr[i]::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			  VMmapPtr->VMS_fieldName[i],
			  VUM_DELAYED_VIA_APP_QUEUE);
		   }
		else  /* set it not usable */
		   @call fNameOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}
	  VMUnlock(mh);

	  /* set the rest unusable */
	  for (i = numFields; i < MAX_FIELDS; i++)  {
		@call fNameOptr[i]::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
		}

	  @send ReportSelectNumFieldsDBox::MSG_GEN_INTERACTION_INITIATE();

	  }  /* end of selection is R_SELECTED if */

} 

/***********************************************************************
 *
 * MESSAGE:	MSG_SELECT_RECORDS_DLIST_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - toggles check marks -
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SELECT_RECORDS_DLIST_STATUS
{
 MemHandle		mh;
 SortStruct		*sortArrayElement;


    /* toggle the checked status */
    sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
    VMLock(GPCBFile, sortListVMBHandle ,&mh);
    sortArrayElement = ChunkArrayElementToPtrHandles(
			 mh,
			 sortListChunkArray,
			 selection,
			 0);
    if (sortArrayElement->SS_check)  {
	  sortArrayElement->SS_check = FALSE;
	  numChecks--;
	  if (!numChecks)
		@send RSRClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else  {
	  sortArrayElement->SS_check = TRUE;
	  numChecks++;
	  if (numChecks == 1)
		@send RSRClear::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
  /*  VMDirty(mh);  don't dirty and it never gets saved */
    VMUnlock(mh);

    /* and redraw the selection */
    @send self::MSG_RECORDS_DLIST_MONIKER_QUERY(@RSRRecordsDList, selection);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SELECT_RECORDS_CLEAR_CHECKS for GPCBaseProcessClass
 *
 * PARAMETERS:  void (void)
 *
 *
 * DESCRIPTION:	turns all checkmarks off
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SELECT_RECORDS_CLEAR_CHECKS
{
 MemHandle		mh;
 SortStruct		*sortArrayElement;
 word			i;


    sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
    VMLock(GPCBFile, sortListVMBHandle ,&mh);
    for (i = 0; i < numRecords; i++)  {
	  sortArrayElement = ChunkArrayElementToPtrHandles(
			 mh,
			 sortListChunkArray,
			 i,
			 0);
	  sortArrayElement->SS_check = FALSE;
	  }
  /*  VMDirty(mh);  don't dirty and it never gets saved */
    VMUnlock(mh);

    numChecks = 0;
    @send RSRClear::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* re - initialize the records list */
    @call RSRRecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE for GPCReportInteractionClass
 *
 * PARAMETERS:
 *
 *
 * DESCRIPTION:	does some closing stuff
 *
 *
 *
 ***********************************************************************/
@classdecl	GPCReportInteractionClass;

@method GPCReportInteractionClass, MSG_VIS_CLOSE
{

    @call TextWindow::MSG_VIS_TEXT_FREE_ALL_STORAGE(TRUE);
    @call TextWindow::MSG_VIS_TEXT_SET_VM_FILE(NullHandle);
    /* needed in NT SDK */
    @send TextWindow::MSG_VIS_CLOSE();
    @call TextContent::MSG_VIS_REMOVE_CHILD(@TextWindow, CCO_FIRST);

  //  @send ReportGroup::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* re-enable report menu item */
    @send CreateReportItem::MSG_GEN_SET_ENABLED(VUM_NOW);

    @callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_DO_SELECT_ALL for GPCBaseProcessClass
 *
 * PARAMETERS:  void (void)
 *
 *
 * DESCRIPTION:	enables copy button and selects all
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_DO_SELECT_ALL
{

    @send TextWindow::MSG_META_SELECT_ALL();
    @send GPCCopyButton::MSG_GEN_SET_ENABLED(VUM_NOW);

}


