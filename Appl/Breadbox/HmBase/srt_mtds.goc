
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			srt_mtds.goc
 *  PROJECT:		Breadbox GPCBase
 *  DESCRIPTION:	This file has methods for sorting
 *
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "gpcbase.goh"
@include "externs.goh"


/*
 ***************************************************************************
 *		Code for HBaseProcessClass   sorting
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	compareRoutine ()
 *
 * CALLED BY:  MSG_OPEN_SORT
 *
 *
 * STRATEGY:    compares the provided strings based on sort type
 *
 *
 ***********************************************************************/
sdword compareRoutine(char *field, char *test,
				  Boolean *num,
				  word type, char *sep)
{
 word			length;
 word			ii;
 sdword			compVal;
 Boolean			couldntConvNum;
 FloatNum			fieldFloatVal, testFloatVal;//, compFloatVal;
 Boolean			testFloat, fieldFloat;
 char			string[DATA_LEN];
 Boolean			foundSep;


    /* get the longer string length */
    if (strlen(test) > strlen(field))  length = strlen(test);
    else length = strlen(field);
    /* now compare the strings...
	* is the new one before the one in the jth element?
	*/
    couldntConvNum = FALSE;
    if (type == SO_NUM)  {
	  fieldFloat = TRUE;
	  testFloat = TRUE;
	  /* add a dec sep? The float routine returns TRUE when there
	   * is no decimal separator so we'll add it if we need to.
	   * And the float routine rtns true on non-nums except thou and
	   * dec separators */
	  foundSep = FALSE;
	  ii = 0;
	  strcpy(string, field);
	  while (!foundSep)  {
		if (string[ii] == sep[0]) foundSep = TRUE;
		if (string[ii] == 0) {
		   strcat(string, sep);
		   strcat(string, "0\0");
		   foundSep = TRUE;
		   }
		ii++;
		}
	  fieldFloat = FloatAsciiToFloat(FAF_STORE_NUMBER,
						    strlen(string),
						    string,
						    &fieldFloatVal);

	  /* add a dec sep? */
	  foundSep = FALSE;
	  ii = 0;
	  strcpy(string, test);
	  while (!foundSep)  {
		if (string[ii] == sep[0]) foundSep = TRUE;
		if (string[ii] == 0) {
		   strcat(string, sep);
		   strcat(string, "0\0");
		   foundSep = TRUE;
		   }
		ii++;
		}
	  testFloat = FloatAsciiToFloat(FAF_STORE_NUMBER,
						    strlen(string),
						    string,
						    &testFloatVal);

	  if (!fieldFloat && !testFloat)  {
		/* compare the floats */
		FloatPushNumber(&fieldFloatVal);
		FloatPushNumber(&testFloatVal);
		// Under Watcom, FloatNum is not the same type as long double. 
		// So we cannot use operands like <,>,== on FloatNum anymore.
		// FloatSub();
		// FloatPopNumber(&compFloatVal);
		// if (compFloatVal < 0) compVal = -1;
		// else if (compFloatVal > 0) compVal = 1;
		// else compVal = 0;
		compVal = FloatCompAndDrop();
		}
	  else  {
		/* compare alphabetically */
		couldntConvNum = TRUE;
		*num = TRUE;
		}
	  } /* end of num sort if */
    /* default to an alpha sort */
    if ((type == SO_ALFA) || couldntConvNum)
		   compVal = (sdword) LocalCmpStrings(field, test, length);

    return (compVal);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_SORT for GPCBaseProcessClass
 *              
 *
 * DESCRIPTION:	Calls the dialog box when the menu item
 *              	is clicked
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_OPEN_SORT
{


    /* check for changes in displayed data */
    if (CheckForChanges()) return;

    /* initialize the lists */
    @call SDBViewList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numFields);
    @call SDBViewList::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(viewField, FALSE);
    @call SDBSortFirstList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numFields);
    @call SDBSortFirstList::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sortField, FALSE);
    @call SDBSortFirstOrder::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sortDir, FALSE);
    @call SDBSortSecondList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numFields + 1);
    @call SDBSortSecondList::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sortField2, FALSE);
    @call SDBSortThirdList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numFields + 1);
    @call SDBSortThirdList::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(sortField3, FALSE);

    @send SDBChange::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    /* Open the dialog box */
    @call SortDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_SET_SORT_PARAMS for GPCBaseProcessClass
 *              
 *
 * DESCRIPTION:     sets all the sort globals then calls the sort routine
 *
 *              
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SET_SORT_PARAMS
{
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
 MemHandle		mh;
 word			newViewField;


    sortField = @call SDBSortFirstList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    sortField2 = @call SDBSortSecondList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    sortField3 = @call SDBSortThirdList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    sortDir = @call SDBSortFirstOrder::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    sortDir2 = @call SDBSortSecondOrder::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    sortDir3 = @call SDBSortThirdOrder::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    newViewField = @call SDBViewList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* save the params */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = (VMMapStruct *) VMLock(GPCBFile, vmbh, &mh);
    VMmapPtr->VMS_sortField = sortField;
    VMmapPtr->VMS_sortField2 = sortField2;
    VMmapPtr->VMS_sortField3 = sortField3;
    VMmapPtr->VMS_sortDir = sortDir;
    VMmapPtr->VMS_sortDir2 = sortDir2;
    VMmapPtr->VMS_sortDir3 = sortDir3;
    /* only change if we need to */
    if(newViewField != viewField) VMmapPtr->VMS_viewField = newViewField;
    VMDirty(mh);
    VMUnlock(mh);


    /* dismiss the sort dbox */
    @send SortDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    @call process::MSG_SORT_DATA();

    /* only change if we need to */
    if(newViewField != viewField) {
	  @call process::MSG_CHANGE_VIEW_FIELD();
	  viewField = newViewField;
	  }
	  
}

/***********************************************************************
 *
 * MESSAGE:	MSG_SORT_DATA for GPCBaseProcessClass
 *
 *
 * DESCRIPTION:    called when new or changed data is entered and when
 *                 user does a new sort from the dialog box
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SORT_DATA
{
 word			i, j, sortType, field, dir, begin, end, middle;
 Boolean			closeEnough, inserted;
 MemHandle		sortedListHeapHandle;
 ChunkHandle		sortedListChunkArray;
 SortStruct		*sortArrayElement, *sortedArrayElement;
 SortStruct		*newInsertSortArrayElement;
 MemHandle		mh;
 RecordStruct		*record, *srecord;
 GroupStruct		*group, *sgroup;
 DBItem			*index, *sindex;
 DBMapStruct* 		mapPtr;
 DBMapStruct* 		smapPtr;
 DBItem			recordItem, indexItem, srecordItem, sindexItem;
 DBGroup			groupGroup, sgroupGroup;
 word		    	currentGroup, currentGroupRec, scurrentGroup, scurrentGroupRec;
 word			bufCount, fieldCount, fieldNumCount;
 word			sortedRecords;
 char			fieldString[DATA_LEN], testString[DATA_LEN];
 sdword			compVal;
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
 LocalNumericFormat	numFormat;
 char			dSep[2];
 Boolean			showCouldntConvNum;
 word* sortFieldGlobal[3] = {
    &sortField,
    &sortField2,
    &sortField3};
 word* sortDirGlobal[3] = {
    &sortDir,
    &sortDir2,
    &sortDir3};
 word			whichSort, numSorts, revSort;
 Boolean			isCurRec = FALSE;
 Boolean			pastCurRec = FALSE;


    /* mark app busy */
    @send GPCBaseApp::MSG_GEN_APPLICATION_MARK_BUSY();

    showCouldntConvNum = FALSE;

    /* how many sorts do we need to do? */
    numSorts = 1;
    if (sortField2)  {
	  numSorts++;
	  if (sortField3) numSorts++;
	  }

    /* do the sorts */
    for (whichSort = 0; whichSort < numSorts; whichSort++)  {
	  /* to make things look right we need to do our actual sorting
	   * in the reverse order of that specified by the user
	   */
	  revSort = numSorts - 1 - whichSort;

	  /* which field do we sort on? */
	  field = *sortFieldGlobal[revSort];
	  if (revSort) field--; /* compensate for the (None) dlist entry */

	  /* which direction do we sort? */
	  dir = *sortDirGlobal[revSort];

	  /* which type of sort? */
	  vmbh = VMGetMapBlock(GPCBFile);
	  VMmapPtr = VMLock(GPCBFile, vmbh, &mh);
	  if ((VMmapPtr->VMS_fieldType[field]) == T_GEN)  sortType = SO_ALFA;
	  else  sortType = SO_NUM;
	  VMUnlock(mh);

	  if (sortType == SO_NUM)  {
		/* grab the decimal separator */
		LocalGetNumericFormat(&numFormat);
		dSep[0] = (char) numFormat.decimalSeparator;
		dSep[1] = NULL;
		}

	  /* set up an array for the sorted pointers */
	  sortedListHeapHandle = MemAlloc(
			    512,
			    HF_SWAPABLE,
			    HAF_LOCK);
	  LMemInitHeap(sortedListHeapHandle,
			    LMEM_TYPE_GENERAL,
			    0,
			    sizeof(LMemBlockHeader),
			    STD_INIT_HANDLES,
			    STD_INIT_HEAP);
	  /* create the chunk array  */
	  sortedListChunkArray = ChunkArrayCreate(
				sortedListHeapHandle,
				sizeof(SortStruct),
				0,
				0);
	  MemUnlock(sortedListHeapHandle);

	  /* let's sort */
	  sortedRecords = 0;
	  sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
	  VMLock(GPCBFile, sortListVMBHandle ,&mh);
	  for (i = 0; i < numRecords; i ++)  {
		/* get the ith element of the unsorted array */
		sortArrayElement = ChunkArrayElementToPtrHandles(
			 mh,
			 sortListChunkArray,
			 i,
			 0);
		currentGroup = sortArrayElement->SS_group;
		currentGroupRec = sortArrayElement->SS_index;
		if (i == currentRecord)  isCurRec = TRUE;

		/* Get the record info */
		mapPtr = DBLockMap(GPCBFile);
		group = (GroupStruct *) (mapPtr + 1);
		groupGroup = group[currentGroup].GS_group;
		/* Extract the item handle for the record. */
		indexItem = group[currentGroup].GS_indexStart;
		DBUnlock(mapPtr);
		/* get the index array address */
		index = DBLock(GPCBFile, groupGroup, indexItem);
		recordItem = index[currentGroupRec];
		DBUnlock(index);

		/* get the record struct address */
		record = DBLock(GPCBFile, groupGroup, recordItem);

		/* now grab the selected field data */
		bufCount = 0;
		fieldNumCount = 0;
		/* skip over fields before the one we want */
		while (fieldNumCount < field)  {
		   if (record->RS_data[bufCount] != (char) FIELD_SEP)  {
			 bufCount++;
			 }
		   else  {
			 fieldNumCount++;
			 bufCount++;
			 }
		   } /* end of skip over while */
		/* now buffer our field */
		for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		   if (record->RS_data[bufCount] != (char) FIELD_SEP)  {
			 fieldString[fieldCount] = record->RS_data[bufCount];
			 bufCount++;
			 }
		   else  {
			 fieldString[fieldCount] = NULL;
			 fieldCount = DATA_LEN; /* force exit loop */
			 }
		   } /* end of buffer for */
		DBUnlock(record);

		/* OK - we have our string to compare */
		begin = 0;
		middle = 0;
		if (!sortedRecords) end = 0;
		else end = sortedRecords - 1;
		closeEnough = FALSE;
		inserted = FALSE;
		MemLock(sortedListHeapHandle);
		/* ascending sort - for descending we'll just reverse the order */

		/* we'll do a binary sort until we reach our threshold (4)*/
		if (end < 4) closeEnough = TRUE;
		while (!closeEnough)  {
		   middle = (end - begin)/2 + begin;
		   /* Get the middle element of the sorted array */
		   sortedArrayElement = ChunkArrayElementToPtrHandles(
				   sortedListHeapHandle,
				   sortedListChunkArray,
				   middle,
				   0);
		   scurrentGroup = sortedArrayElement->SS_group;
		   scurrentGroupRec = sortedArrayElement->SS_index;
		   /* Get the record info */
		   smapPtr = DBLockMap(GPCBFile);
		   sgroup = (GroupStruct *) (smapPtr + 1);
		   sgroupGroup = sgroup[scurrentGroup].GS_group;
		   /* Extract the item handle for the record. */
		   sindexItem = sgroup[scurrentGroup].GS_indexStart;
		   DBUnlock(smapPtr);
		   /* get the index array address */
		   sindex = DBLock(GPCBFile, sgroupGroup, sindexItem);
		   srecordItem = sindex[scurrentGroupRec];
		   DBUnlock(sindex);
		   /* get the record struct address */
		   srecord = DBLock(GPCBFile, sgroupGroup, srecordItem);

		   /* now grab the selected field data */
		   bufCount = 0;
		   fieldNumCount = 0;
		   /* skip over fields before the one we want */
		   while (fieldNumCount < field)  {
			 if (srecord->RS_data[bufCount] != (char) FIELD_SEP)  {
			    bufCount++;
			    }
			 else  {
			    fieldNumCount++;
			    bufCount++;
			    }
			 } /* end of skip over while */
		   /* now buffer our field */
		   for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
			 if (srecord->RS_data[bufCount] != (char) FIELD_SEP)  {
			    testString[fieldCount] = srecord->RS_data[bufCount];
			    bufCount++;
			    }
			 else  {
			    testString[fieldCount] = NULL;
			    fieldCount = DATA_LEN; /* force exit loop */
			    }
			 } /* end of buffer for */
		   DBUnlock(srecord);

		   /* now we can test */
		   compVal = compareRoutine(fieldString,
							testString,
							&showCouldntConvNum,
							sortType,
							dSep);
		   if (compVal >= 0)  {
			 begin = middle + 1;
			 if ((end - begin) < 4) closeEnough =TRUE;
			 }
		   else  {
			 end = middle - 1;
			 if ((end - begin) < 4) closeEnough =TRUE;
			 }
		   } /* end of !closeEnough while */

		/* now just brute force thru the remaining range */
		if (sortedRecords) {
		   for (j = begin; j <= end; j++)  {
			 /* Get the jth element of the sorted array */
			 sortedArrayElement = ChunkArrayElementToPtrHandles(
					sortedListHeapHandle,
					sortedListChunkArray,
					j,
					0);
			 scurrentGroup = sortedArrayElement->SS_group;
			 scurrentGroupRec = sortedArrayElement->SS_index;
			 /* Get the record info */
			 smapPtr = DBLockMap(GPCBFile);
			 sgroup = (GroupStruct *) (smapPtr + 1);
			 sgroupGroup = sgroup[scurrentGroup].GS_group;
			 /* Extract the item handle for the record. */
			 sindexItem = sgroup[scurrentGroup].GS_indexStart;
			 DBUnlock(smapPtr);
			 /* get the index array address */
			 sindex = DBLock(GPCBFile, sgroupGroup, sindexItem);
			 srecordItem = sindex[scurrentGroupRec];
			 DBUnlock(sindex);
			 /* get the record struct address */
			 srecord = DBLock(GPCBFile, sgroupGroup, srecordItem);

			 /* now grab the selected field data */
			 bufCount = 0;
			 fieldNumCount = 0;
			 /* skip over fields before the one we want */
			 while (fieldNumCount < field)  {
			    if (srecord->RS_data[bufCount] != (char) FIELD_SEP)  {
				  bufCount++;
				  }
			    else  {
				  fieldNumCount++;
				  bufCount++;
				  }
			    } /* end of skip over while */
			 /* now buffer our field */
			 for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
			    if (srecord->RS_data[bufCount] != (char) FIELD_SEP)  {
				  testString[fieldCount] = srecord->RS_data[bufCount];
				  bufCount++;
				  }
			    else  {
				  testString[fieldCount] = NULL;
				  fieldCount = DATA_LEN; /* force exit loop */
				  }
			    } /* end of buffer for */
			 DBUnlock(srecord);


			 /* now we have both strings */
			 compVal = compareRoutine(fieldString,
							testString,
							&showCouldntConvNum,
							sortType,
							dSep);

			 if (compVal < 0) {
			    /* yes - insert it here! */
			    sortedArrayElement = ChunkArrayElementToPtrHandles(
						  sortedListHeapHandle,
						  sortedListChunkArray,
						  j,
						  0);
			    newInsertSortArrayElement = ChunkArrayInsertAtHandle(
						    sortedListChunkArray,
						    sortedArrayElement,
						    0);
			    newInsertSortArrayElement->SS_group = currentGroup;
			    newInsertSortArrayElement->SS_index = currentGroupRec;
			    if (isCurRec)  currentRecord = j;
			    if (pastCurRec && (currentRecord >= j))  currentRecord++;
			    inserted = TRUE;
			    /* get out of loop by... */
			    j = end + 1;
			    }  /* end of insert at if */
			 }  /* end of comparison (j) for loop */
		   }  /* end of sortedRecords if */

		if ((!inserted) || !sortedRecords)  {  /* then we didn't put it in yet... */
		   /* that means it is either the only field to enter so far, or
		    * the end of the range */
		   if (end == (sortedRecords - 1))  {
			 /* we can just append it */
			 sortedArrayElement = ChunkArrayAppendHandles(
							sortedListHeapHandle,
							sortedListChunkArray,
							0);
			 sortedArrayElement->SS_group = currentGroup;
			 sortedArrayElement->SS_index = currentGroupRec;
			 if (isCurRec)  currentRecord = sortedRecords;
			 }
		   else  {
			 /* it goes at the end of the range */
			 sortedArrayElement = ChunkArrayElementToPtrHandles(
						  sortedListHeapHandle,
						  sortedListChunkArray,
						  end + 1,
						  0);
			 newInsertSortArrayElement = ChunkArrayInsertAtHandle(
						    sortedListChunkArray,
						    sortedArrayElement,
						    0);
			 newInsertSortArrayElement->SS_group = currentGroup;
			 newInsertSortArrayElement->SS_index = currentGroupRec;
			 if (isCurRec && end)  currentRecord = end + 1;
			 if (pastCurRec && (currentRecord >= (end + 1)))  currentRecord++;
			 }
		   } /* end of not in yet if */
		MemUnlock(sortedListHeapHandle);
		sortedRecords++;

		if (isCurRec)  {
		   isCurRec = FALSE;
		   pastCurRec = TRUE;
		   }
		   
		}  /* end of sort for (i) */
	  VMUnlock(mh);
	  pastCurRec = FALSE;

	  /* finish things up */
	  if (dir == S_UP)  {  /* just clean up */
		/* delete and free the old array */
		sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
		mh = VMDetach(GPCBFile, sortListVMBHandle, 0);
		MemFree(mh);
		/* and attach the new sorted pointer array where the old was */
		VMAttach(GPCBFile, sortListVMBHandle, sortedListHeapHandle);
		}
	  else  {  /* reverse the order in the array */
		sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
		VMLock(GPCBFile, sortListVMBHandle ,&mh);
		MemLock(sortedListHeapHandle);
		for (i = 0; i < numRecords; i ++)  {
		   sortedArrayElement = ChunkArrayElementToPtrHandles(
						    sortedListHeapHandle,
						    sortedListChunkArray,
						    i,
						    0);
		   sortArrayElement = ChunkArrayElementToPtrHandles(
						  mh,
						  sortListChunkArray,
						  numRecords - 1 - i,
						  0);
		   sortArrayElement->SS_group = sortedArrayElement->SS_group;
		   sortArrayElement->SS_index = sortedArrayElement->SS_index;
		   }
		MemUnlock(sortedListHeapHandle);
		VMUnlock(mh);
		currentRecord = numRecords - 1 - currentRecord;
		/* since I've just refilled the old array I can just... */
		/* free the newly created index */
		MemFree(sortedListHeapHandle);
		} /* end of reverse else */

       }  /* end of the three sorts for loop */

    /* mark app unbusy */
    @send GPCBaseApp::MSG_GEN_APPLICATION_MARK_NOT_BUSY();

    /* tell user we had a problem */
    if (showCouldntConvNum) NotifyDBox(0, @NumNotConvMsg);

    @call RecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);
    if(isImport) currentRecord = 0;

    ShowData();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CHANGE_VIEW_FIELD for GPCBaseProcessClass
 *
 * PARAMETERS:
 *
 * DESCRIPTION:	shows selected field in records dlist
 *
 *
 *
 ***********************************************************************/

@extern method GPCBaseProcessClass, MSG_CHANGE_VIEW_FIELD
{

    @call RecordsDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numRecords);
    @call RecordsDList::
			MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(currentRecord, FALSE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIEW_SORT_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	enables/disables sort  and default buttons
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_VIEW_SORT_STATUS
{


    @send SDBChange::MSG_GEN_SET_ENABLED(VUM_NOW);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_FIRST_SORT_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	enables/disables sort and default buttons
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_FIRST_SORT_STATUS
{

    @send SDBChange::MSG_GEN_SET_ENABLED(VUM_NOW);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_SECOND_SORT_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	enables/disables sort dir selectors
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SECOND_SORT_STATUS
{

    if (!selection)
	  @send SDBSortSecondOrder::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else
	  @send SDBSortSecondOrder::MSG_GEN_SET_ENABLED(VUM_NOW);


    @send SDBChange::MSG_GEN_SET_ENABLED(VUM_NOW);


}

/***********************************************************************
 *
 * MESSAGE:	MSG_THIRD_SORT_STATUS for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	enables/disables sort dir selectors
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_THIRD_SORT_STATUS
{

    if (!selection)
	  @send SDBSortThirdOrder::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else
	  @send SDBSortThirdOrder::MSG_GEN_SET_ENABLED(VUM_NOW);


    @send SDBChange::MSG_GEN_SET_ENABLED(VUM_NOW);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_SORT_ORDER_CHANGED for GPCBaseProcessClass
 *
 * PARAMETERS:   	word		selection
 *                  word		numSelections
 *				byte		stateFlags
 *
 * DESCRIPTION:	activates the change button
 *
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_SORT_ORDER_CHANGED
{

    @send SDBChange::MSG_GEN_SET_ENABLED(VUM_NOW);

}



