
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			nav_mtds.goc
 *  PROJECT:		Breadbox GPCBase
 *  DESCRIPTION:	This file has methods for record navigation
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include "gpcbase.goh"
@include "externs.goh"


 optr fieldOptr[MAX_FIELDS] = {
    @Field1,
    @Field2,
    @Field3,
    @Field4,
    @Field5,
    @Field6,
    @Field7,
    @Field8,
    @Field9,
    @Field10
} ;
/*
 ***************************************************************************
 *		Code for GPCBaseProcessClass   record navigation
 ***************************************************************************
 */

/***********************************************************************
 *
 * FUNCTION:	ShowData
 *
 * CALLED BY:
 *      	MSG_NAV_RECORDS, MSG_ENTER_DATA, MSG_DELETE_DATA,
 *		MSG_CHANGE_ATTR, MSG_SEARCH_FIELDS, MSG_RECORDS_DLIST_APPLY
 *
 * STRATEGY:
 *		
 *
 ***********************************************************************/

void ShowData (void)
{
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		i;
 word		bufCount, fieldCount;
 char		fieldString[DATA_LEN];
 char		dateString[DATA_LEN];
 char		strBuffer[(MAX_FIELDS * DATA_LEN)];
 MemHandle		mh;
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;


    /* don't bother if we're closing the doc */
    if (closing) return;
    
    /* check for no records */
    if (numRecords == 0) return;

    /* get the group and item  */
    GetGroupAndItem (&groupGroup, &recordItem, currentRecord);

    /* get the record struct address */
    record = DBLock(GPCBFile, groupGroup, recordItem);
    /* copy the record to the buffer */
    strcpy(strBuffer, record->RS_data);
    DBUnlock(record);

    /* now cycle the data into the fields */
    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = VMLock(GPCBFile, vmbh, &mh);
    bufCount = 0;
    for (i = 0; i < numFields; i++)  {
	  for (fieldCount = 0; fieldCount < DATA_LEN; fieldCount++)  {
		if (strBuffer[bufCount] != (char) FIELD_SEP)  {
		   fieldString[fieldCount] = strBuffer[bufCount];
		   bufCount++;
		   }
		else  {
		   fieldString[fieldCount] = NULL;
		   bufCount++;
		   /* do we nedd to show a date? */
		   if ((VMmapPtr->VMS_fieldType[i] == T_DAT) && strlen(fieldString)) {
			 ConvFromDateNum (fieldString, dateString);
			 /* show the date */
			 @call fieldOptr[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						dateString, 0);
			 }
		   else {/* show the text */
			 @call fieldOptr[i]::MSG_VIS_TEXT_REPLACE_ALL_PTR(
						fieldString, 0);
                }
		   @call fieldOptr[i]::MSG_VIS_TEXT_SELECT_START();
		   fieldCount = DATA_LEN; /* force exit loop */
		   }  /* end show it else */
		} /* end this field for */
	  } /* end cycle thru fields for */
    VMUnlock(mh);

    /* set the buttons */
    if (currentRecord == (numRecords - 1))  { /* this is last rec */
	  @send NextButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send LastButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else  {
	  @send NextButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send LastButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    if (currentRecord == 0) { /* this is first rec */
	  @send FirstButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send PrevButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @send FirstButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send PrevButton::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    if (numRecords < 2)  {
	  @send NextButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send LastButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send FirstButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  @send PrevButton::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    @call RecordsDList::
		    MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(currentRecord, FALSE);

    @send Field1::MSG_META_GRAB_FOCUS_EXCL();
    @send Field1::MSG_META_GRAB_TARGET_EXCL();

    /* update the current record display */
    UpdateCurRecord();


}

/***********************************************************************
 *
 * FUNCTION:	ClearData
 *
 * CALLED BY:	
 *
 * STRATEGY:    Clears the screen of data
 *
 *
 ***********************************************************************/

void ClearData (void)
{
word		i = 0;

    while (i < numFields)  {
	  @call fieldOptr[i]::MSG_VIS_TEXT_DELETE_ALL();
	  i++;
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_NAV_RECORDS for GPCBaseProcessClass
 *              (word whichWay)
 *
 * DESCRIPTION:	Displays the selected record.
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_NAV_RECORDS
{
 Boolean		OKtoNav = TRUE;
 word		savedRecord;


    /* check for changes in displayed data */
    if(checkMod)  {
	  savedRecord = currentRecord;
	  if (CheckForChanges()) return;
	  /* since we want a next/prev to take the user to the record
	   * after/before the one we changed (and might have resorted)
	   * we'll save the old position then put it back here */
	  else currentRecord = savedRecord;
	  }
    else checkMod = TRUE;

    /* check for new record on screen and if PREV was selected,
     * change whichWay to LAST since that's the record to show
     */
    if ((currentRecord == numRecords) && (whichWay == PREV))
		whichWay = LAST;

    switch (whichWay) {
	  case PREV:
		   if (currentRecord == 0) OKtoNav = FALSE;
		   else currentRecord--;
		break;
	  case NEXT:
		   if (currentRecord >= (numRecords - 1)) /* to acct for new rec on scrn */
			 OKtoNav = FALSE;
		   else currentRecord++;
		break;
	  case FIRST:
		currentRecord = 0;
		break;
	  case LAST:
		currentRecord = numRecords - 1;
		break;
       }  /* end switch */


    if (OKtoNav)  ShowData();  

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECORDS_DLIST_MONIKER_QUERY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (optr list, word item)
 *
 * DESCRIPTION:	shows entries in the lists.
 *
 *
 *
 ***********************************************************************/

@extern method GPCBaseProcessClass, MSG_RECORDS_DLIST_MONIKER_QUERY
{
 RecordStruct	*record;
 DBItem		recordItem;
 DBGroup		groupGroup;
 word		i, j;
 char		fieldString[DATA_LEN], dateString[11];
 SortStruct		*sortArrayElement;
 MemHandle		mh;
 VMBlockHandle	vmbh;
 VMMapStruct	*VMmapPtr;
 Boolean		check;
 word			chunk ;	/* ChunkHandle */
 MemHandle			mem ;
 GStateHandle			gstate ;
 Point		checkPoints[5] =  {{2,6},
						   {5,10},
						   {9,1},
						   {5,7},
						   {2,6}};


    /* don't bother if we're closing the doc */
    if (closing) return;

    /* get the record struct address */
    GetGroupAndItem (&groupGroup, &recordItem, item);
    record = DBLock(GPCBFile, groupGroup, recordItem);

    /* and read the selected field info */
    i = 0;
    for (j=0; j < viewField; j++) {
       /* pass over prior fields */
	  while (record->RS_data[i] != (char) FIELD_SEP) i++;
	  i++;  /* to get past ~ */
	  }
    j = 0;
    while ((record->RS_data[i] != (char) FIELD_SEP) || !(record->RS_data[i])) {
	  fieldString[j] = record->RS_data[i];
	  i++;
	  j++;
	  }
    fieldString[j] = NULL;
    DBUnlock(record);

    /* do we need to show a date? */
    vmbh = VMGetMapBlock(GPCBFile);
    VMmapPtr = VMLock(GPCBFile, vmbh, &mh);
    if (VMmapPtr->VMS_fieldType[viewField] == T_DAT)  {
	  ConvFromDateNum (fieldString, dateString);
	  strcpy(fieldString, dateString);
	  }
    VMUnlock(mh);


    /* see what we need to show... */
    if (list == @RSRRecordsDList)  {
       /* the list with checkmarks for the report DB*/
	  /* set up the mem and gstate */
	  mem = MemAllocLMem(LMEM_TYPE_GENERAL, 0) ;
	  gstate = GrCreateGString(mem, GST_CHUNK, &chunk);

	  /* get the check status  */
	  sortListVMBHandle = VMFind(GPCBFile, NullHandle, SORTLIST);
	  VMLock(GPCBFile, sortListVMBHandle ,&mh);
	  sortArrayElement = ChunkArrayElementToPtrHandles(
			    mh,
			    sortListChunkArray,
			    item,
			    0);
	  check = sortArrayElement->SS_check;
	  VMUnlock(mh);

	  /* show the check mark if we need to */
	  if (check) {
	  /*	GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0, 0); */
		GrFillPolygon(gstate, ODD_EVEN, checkPoints, 5);
		}
	  /* and the record */
	  GrDrawText(gstate, 18, 0, fieldString, 0) ;
	  GrEndGString(gstate) ;
	  /* and tell the DList */
	  @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  12,				/* height */
				  240,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

	  /* and 86 the gstate and mem */
	  GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
	  MemFree(mem) ;
	  }
    else  {
	  /* Show the field's data in the list item. */
	  @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_TEXT(
			  item, fieldString);
	  }

}


/***********************************************************************
 *
 * MESSAGE:	MSG_RECORDS_DLIST_APPLY for GPCBaseProcessClass
 *
 * PARAMETERS:  void (word selection, word numSelections,
 *                    byte stateFlags)
 *
 * DESCRIPTION:	takes action when user selects entry
 *               - Shows data in fields -
 *
 *
 ***********************************************************************/
@extern method GPCBaseProcessClass, MSG_RECORDS_DLIST_APPLY
{

    /* check for changes in displayed data */
    if (CheckForChanges())  {
	  @call RecordsDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
								  currentRecord, FALSE);
	  return;
	  }
	  
    currentRecord = selection;
    
    ShowData();

} 

/***********************************************************************
 *
 * MESSAGE:	MSG_META_START_SELECT for RepeatingTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	sets instance data in RepeatingTriggerClass to get ready
 *		for a possibly held down button
 *
 *
 *
 ***********************************************************************/
@extern method RepeatingTriggerClass, MSG_META_START_SELECT
{
    pself->RTI_wait = 20 ;  /* could set this in .goh */
    pself->RTI_held = TRUE ;
    @send oself::MSG_REPEATING_TRIGGER_CLICK() ;
    @callsuper() ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_REPEATING_TRIGGER_CLICK for RepeatingTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	repeats trigger action if button held down
 *
 *
 *
 ***********************************************************************/
@extern method RepeatingTriggerClass, MSG_REPEATING_TRIGGER_CLICK
{

    /* bail if PrevButton and first record */
    if ((currentRecord == 0) && (oself == @PrevButton))
       return; 

    /* bail if NextButton and last record */
    if ((currentRecord == numRecords - 1) && (oself == @NextButton))
       return; 

    /* sends the button action MSG every 20/60s of a second */
    if (pself->RTI_held == TRUE)  {
       /* this adds a delay so a single click reacts right */
	  if (pself->RTI_wait != 20)
          @send oself::MSG_GEN_TRIGGER_SEND_ACTION(FALSE) ;
	  if (pself->RTI_wait != 19)
	  pself->RTI_wait-- ;
	  pself->RTI_timer = TimerStart(
                                TIMER_EVENT_ONE_SHOT,
                                oself,
						  pself->RTI_wait,
						  MSG_REPEATING_TRIGGER_CLICK,
						  pself->RTI_wait,
						  &pself->RTI_timerId);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_LOST_MOUSE_EXCL for RepeatingTriggerClass
 *
 * PARAMETERS:  
 *                    
 *
 * DESCRIPTION:	resets instance data in RepeatingTriggerClass
 *
 *
 *
 ***********************************************************************/
@extern method RepeatingTriggerClass, MSG_META_LOST_MOUSE_EXCL
{
    pself->RTI_held = FALSE ;
    @callsuper() ;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_TEXT_SET_USER_MODIFIED for GPCBaseDisplayTextClass
 *
 * PARAMETERS:   	
 *
 * DESCRIPTION:	sets global on change in entry
 *                  and traps for para symbol - which is the
 *                      field separator
 *
 ***********************************************************************/
@extern method GPCBaseDisplayTextClass, MSG_VIS_TEXT_SET_USER_MODIFIED
{
word		length, i;
char		fieldString[DATA_LEN];
Boolean	changed = FALSE;


    dataMayHaveChanged = TRUE;
    @send GPCBaseDocumentGroup::MSG_GEN_DOCUMENT_GROUP_MARK_DIRTY(0);
    @callsuper();

    length = @call self::MSG_VIS_TEXT_GET_ALL_PTR(fieldString);
    for (i = 0; i < length; i++) {
	  if (fieldString[i] == (char) FIELD_SEP) {
		fieldString[i] = '-';
		changed = TRUE;
		}
	  }
    if (changed) @call self::MSG_VIS_TEXT_REPLACE_ALL_PTR(fieldString, 0);
    @send self::MSG_GEN_TEXT_SET_MODIFIED_STATE(FALSE);
}


