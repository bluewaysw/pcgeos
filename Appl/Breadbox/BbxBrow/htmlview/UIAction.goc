/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
*/
/**************************************************************************
 *      Include files
 **************************************************************************/

@include <stdapp.goh>
@include <Objects/Text/tCtrlC.goh>

#include <initfile.h>
#include <fileEnum.h>
#include <sysstats.h>
#include <sem.h>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>
#include <geoMisc.h>

@include "htmlview.goh"
@ifdef COMPILE_OPTION_BOOKMARKS
@include "bookmark.goh"
@endif
@ifdef COMPILE_OPTION_FAVORITES
@include "favorite.goh"
@endif
@include "urlfetch.goh"
@include "importg.goh"
@include "stattext.goh"

@ifdef COMPILE_OPTION_AUTO_BROWSE
@extern object AutoBrowseOptions ;
@endif

@ifdef COMPILE_OPTION_PROGRESS_INDICATOR
/* TRUE if we are using the progress indicator to show download status */
extern Boolean G_progressStatus;
@extern object ProgressIndicator ;
@endif


@extern object CurrentURLText ;
@extern object HTMLSettingsBoolGroup ;
@extern object SimpleURLToolbar ;
@extern object StatusBar ;
@extern object HTMLVApp ;
@extern object MsgBlank;
@extern object HTMLVPrimary ;
@extern object LinkStatus;
@extern object NavigateBack ;
@extern object NavigateBackBut ;
@extern object NavigateBackBut2 ;
@extern object NavigateForward ;
@extern object NavigateFwdBut ;
@extern object NavigateFwdBut2 ;
@extern object NavigateReload ;
@extern object NavigateStop ;
@extern object NavigateStopBut ;
@extern object NavigateStopBut2 ;
@extern object NavigateHome ;
@extern object NavigateHomeBut ;
@extern object newHomeTrigger ;
@extern object EditTrigger ;
@extern object EditTriggerBut ;
@extern object NavigateReloadBut ;
@extern object NavigateLoadGraphicsNow ;
@extern object NavigateLoadGraphicsBut ;
@extern object HistoryList ;
@extern object HistoryList2 ;
@extern object PrintControl ;

@ifdef COMPILE_OPTION_JUMP_FEATURE
@extern object JumpEntry ;
@endif

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
@extern object SimpleToolbarGoto ;
@extern object SimpleToolbarBack ;
@extern object SimpleToolbarNext ;
@extern object SimpleToolbarReload ;
@extern object SimpleToolbarHome ;
@extern object SimpleToolbarStop ;
@extern object SimpleToolbar ;
@extern object SimpleToolbarPrint ;
@extern object GotoEntry ;
@ifdef COMPILE_OPTION_NAVIGATION_MENU
@extern object NavigateMenu ;
@endif
@endif

@ifdef COMPILE_OPTION_LOCAL_PAGES
@extern object LocalSaveTrigger;
@endif

@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
@extern object MainToolbar;
@endif

@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
@extern object IconBarBack;
@extern object IconBarForward;
@extern object IconBarReload;
@extern object IconBarPrint;
@extern object IconBarHome;
@extern object IconBarHistory;
@extern object IconBar;
@extern object IconBarStop;
@endif

@ifdef COMPILE_OPTION_DOWNLOAD_PROGRESS_DIALOG
@extern @object DownloadProgressDialog;
@endif

@ifdef JAVASCRIPT_SUPPORT
@extern @object WindowOpenWindow;
@endif

@ifndef COMPILE_OPTION_TURN_OFF_LOGO
@extern @object SpinningLogo;
@endif

@ifdef COMPILE_OPTION_PARENTAL_CONTROL
@extern @object ParentalControlStatus;
@extern @object PCMenu;
@extern @object PCToggleOffDlg;
@extern @object PCToggleOnDlg;
@extern @object PCSiteAlreadyAddedDlg;
@extern @object PCSiteNotInListDlg;
@endif

@extern object CustomFileSel;
@extern object CFSOpen;
@extern object CustomFileSelDBox;

void LOCAL EnabledOrNot(optr obj, word enable)
{
    if(enable)
        @send obj::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else
        @send obj::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
}

void LOCAL UsableOrNot(optr obj, word enable)
{
    if(enable)
        @send obj::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    else
        @send obj::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
}

void UpdateNavigation(WordFlags flags)
{
    word num;

    num = HistoryGetEntryNum();

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarBack,    (flags & HTML_HIST_BACK)) ;
    EnabledOrNot(@SimpleToolbarNext,    (flags & HTML_HIST_FORWARD)) ;
    EnabledOrNot(@SimpleToolbarReload,  (flags & HTML_HIST_CURRENT)) ;
    EnabledOrNot(@SimpleToolbarHome,    (flags & HTML_HIST_HOME)) ;
@endif

@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarBack,          (flags & HTML_HIST_BACK));
    EnabledOrNot(@IconBarForward,       (flags & HTML_HIST_FORWARD));
    EnabledOrNot(@IconBarReload,        (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@IconBarPrint,         (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@IconBarHome,          (flags & HTML_HIST_HOME));
    EnabledOrNot(@IconBarHistory,       num);
    EnabledOrNot(@HistoryList2,         num);
    @send HistoryList2::MSG_GEN_DYNAMIC_LIST_INITIALIZE( num?num:1 );
    if(num)                             /* first entry reflects current page */
    {
        @send HistoryList2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    }
@endif

@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
    EnabledOrNot(@NavigateBackBut,      (flags & HTML_HIST_BACK));
    EnabledOrNot(@NavigateBackBut2,     (flags & HTML_HIST_BACK));
    EnabledOrNot(@NavigateFwdBut,       (flags & HTML_HIST_FORWARD));
    EnabledOrNot(@NavigateFwdBut2,      (flags & HTML_HIST_FORWARD));
    EnabledOrNot(@NavigateReloadBut,    (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@NavigateHomeBut,      (flags & HTML_HIST_HOME));
@ifdef COMPILE_OPTION_HTML_EDITOR
    EnabledOrNot(@EditTriggerBut,       (flags & HTML_HIST_CURRENT));
@endif
    EnabledOrNot(@NavigateLoadGraphicsBut, (flags & HTML_HIST_LOAD_GR));
    EnabledOrNot(@HistoryList2,         num);
    @send HistoryList2::MSG_GEN_DYNAMIC_LIST_INITIALIZE( num?num:1 );
    if(num)                             /* first entry reflects current page */
    {
        @send HistoryList2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    }
@endif

/*
 * Navigate Menu - use with COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
 * to enable / disable the navigate menu when showing/hiding the
 * navigation toolbar
 */
@ifdef COMPILE_OPTION_NAVIGATION_MENU
    EnabledOrNot(@NavigateBack,         (flags & HTML_HIST_BACK));
    EnabledOrNot(@NavigateForward,      (flags & HTML_HIST_FORWARD));
    EnabledOrNot(@NavigateReload,       (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@NavigateHome,         (flags & HTML_HIST_HOME));
    EnabledOrNot(@newHomeTrigger,       (flags & HTML_HIST_CURRENT));
@endif

@ifdef COMPILE_OPTION_HTML_EDITOR
    EnabledOrNot(@EditTrigger,          (flags & HTML_HIST_CURRENT));
@endif

@ifdef COMPILE_OPTION_LOCAL_PAGES
    EnabledOrNot(@LocalSaveTrigger,     (flags & HTML_HIST_CURRENT));
@endif

    EnabledOrNot(@PrintControl,         (flags & HTML_HIST_CURRENT));
    EnabledOrNot(@NavigateLoadGraphicsNow, (flags & HTML_HIST_LOAD_GR));
    EnabledOrNot(@HistoryList,          num);
    @send HistoryList::MSG_GEN_DYNAMIC_LIST_INITIALIZE( num?num:1 );

    if(num)                             /* first entry reflects current page */
    {
        @send HistoryList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(0, FALSE);
    }
}

void UpdateToolbar(Boolean enabled)
{
@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
    UsableOrNot(@MainToolbar,          enabled);
@endif
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    UsableOrNot(@IconBar,              enabled);
@endif
@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    UsableOrNot(@SimpleToolbar, enabled);
@ifdef COMPILE_OPTION_NAVIGATION_MENU
    UsableOrNot(@NavigateMenu, !enabled);
@endif
@endif
}

void UpdateStatusbar(Boolean enabled)
{
    UsableOrNot(@StatusBar, enabled);
}

void UpdateUrlbar(Boolean enabled)
{
    UsableOrNot(@SimpleURLToolbar, enabled);
    UsableOrNot(@SimpleToolbarGoto, !enabled);
}

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
void UpdatePrintButtonInSimpleToolbar(Boolean enabled)
{
    UsableOrNot(@SimpleToolbarPrint, enabled);
}
@endif

@ifndef COMPILE_OPTION_TURN_OFF_LOGO
void UpdateGlobeInSimpleButtonToolbar(Boolean enabled)
{
    UsableOrNot(@SpinningLogo, enabled);
}
@endif

@ifdef COMPILE_OPTION_PARENTAL_CONTROL
void UpdateParentalControls(Boolean enabled)
{
    UsableOrNot(@ParentalControlStatus, enabled);
    UsableOrNot(@PCMenu, enabled);
    UsableOrNot(@PCToggleOffDlg, enabled);
    UsableOrNot(@PCToggleOnDlg, enabled);
    UsableOrNot(@PCSiteAlreadyAddedDlg, enabled);
    UsableOrNot(@PCSiteNotInListDlg, enabled);
}
@endif

@extern method HTMLVProcessClass, MSG_HMLVP_NOTIFY_NAVIGATION_CHANGE
{
    UpdateNavigation(flags);
}

@ifdef COMPILE_OPTION_JUMP_FEATURE
Boolean HandleJumpword(TCHAR *url)
{
    Boolean handled = FALSE;

    if (!strchr(url, ':') && !strchr(url, '/') &&
    !strchr(url, '.')) {
        @call JumpEntry::MSG_VIS_TEXT_REPLACE_ALL_PTR(url, 0);
        @call process::MSG_HMLVP_JUMP();
        handled = TRUE;
    } else {
        TCHAR *p = url, *q = url;

        /* strip all spaces */
        while (p && *p) {
            if (*p != C_SPACE) {
                *q++ = *p++;
            } else {
                p++;
            }
        }
        *q = C_NULL;
    }
    return handled;
}
@endif

/***********************************************************************
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_CUSTOM_OPEN_SELECTOR_ACTION
 *                              for HTMLVProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:	checks for dbl click on file to open
 *
 * UPDATES:		jfh - 10/11/02
 ***********************************************************************/
@extern method HTMLVProcessClass, MSG_CUSTOM_OPEN_SELECTOR_ACTION
{

    // was it a double click?
    if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_OPEN) {
        if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)  {
            @send, forceQueue process::MSG_CUSTOM_OPEN_HTML_DOC();
        }
    }
    else
    { // if not dbl click see if we're on a file
        if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
            @send CFSOpen::MSG_GEN_SET_ENABLED(VUM_NOW);
        else
            @send CFSOpen::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
}

/***********************************************************************
 * MESSAGE:	 MSG_CUSTOM_OPEN_HTML_DOC
 *                              for HTMLVProcessClass
 *
 * DESCRIPTION:	This is a work-around to avoid having the GenDoc stuff
 *						try and open an .HTM file.  That has been giving us fits
 *						since we de-GPCed the browser.  But opening a doc when
 *						the user types in file:///<etc> on the URL line works
 *						fine so this simulates that.
 *
 * UPDATES:		jfh - 10/11/02
 ***********************************************************************/
@extern method HTMLVProcessClass, MSG_CUSTOM_OPEN_HTML_DOC
{
 char			*relativePath, *standardPath, *endOfFullPath;
 word			bufSize = (2*PATH_LENGTH) + FILE_LONGNAME_BUFFER_SIZE;
 MemHandle		mh;
 ChunkHandle	chRelative, chStandard;
 DiskHandle		dhStandard;
 dword			relativePathInfo;

    // enter the file stuff
    @call CurrentURLText::MSG_VIS_TEXT_REPLACE_ALL_PTR("FILE:///", 8);

    // put together the drive ltr, path and file name stuff
    mh = MemAlloc((2*bufSize), HF_SWAPABLE, HAF_LOCK);
    LMemInitHeap(mh, LMEM_TYPE_GENERAL, 0, sizeof(LMemBlockHeader),
                                        2, STD_INIT_HEAP);
    chRelative = LMemAlloc(mh, bufSize);
    chStandard = LMemAlloc(mh, bufSize);

    relativePath = LMemDeref(ConstructOptr(mh, chRelative));
    standardPath = LMemDeref(ConstructOptr(mh, chStandard));

    relativePathInfo = @call CustomFileSel::MSG_GEN_FILE_SELECTOR_GET_FULL_SELECTION_PATH(relativePath);

    dhStandard = GFS_GET_FULL_SELECTION_PATH_DISK_HANDLE(relativePathInfo);
    endOfFullPath = standardPath;
    FileConstructFullPath(&endOfFullPath, bufSize, dhStandard, relativePath, TRUE);

    // and put it in the entry field
    @call CurrentURLText::MSG_VIS_TEXT_APPEND_PTR(standardPath, 0);

    MemUnlock(mh);   //now unlock & free the block
    MemFree(mh);

    // dismiss the file selector box
    @send CustomFileSelDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    // and send the text apply message simulating the user pressing Enter
    @send process::MSG_HMLVP_URL_CHANGED(GTSF_MODIFIED);

} // MSG_CUSTOM_OPEN_HTML_DOC

@extern method HTMLVProcessClass, MSG_HMLVP_URL_CHANGED
{
    TCHAR *urlP;
    MemHandle urlH;
    NameToken url;
    EventHandle evt;

    HWChecksumCheck() ;
    urlH = @call CurrentURLText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    urlP = MemLock(urlH);
    /* clear mod state so we can detect user changes during operation */
    @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
    HWChecksumCheck() ;
@ifdef COMPILE_OPTION_JUMP_FEATURE
    if (HandleJumpword(urlP)) {
        MemFree(urlH);
        return;
    }
@endif
    url = NamePoolTokenize(namePool, urlP, TRUE);
    MemFree(urlH);
    evt = @record
      URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
    HWChecksumCheck() ;
    @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
                                        /* load new URL */
    HWChecksumCheck() ;
}

@extern method HTMLVProcessClass, MSG_HMLVP_HOME_TRIGGER
{
    MemHandle homeH;
    TCHAR *homeP;
    NameToken url;
    EventHandle evt;

    HWChecksumCheck() ;
    if(NavigateGetHome(&homeH))
    {
        HWChecksumCheck() ;
        homeP = MemLock(homeH);
        /* clear mod state so we'll update URL with current page */
        @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();
        url = NamePoolTokenize(namePool, homeP, TRUE);
        MemFree(homeH);
        evt = @record
          URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
        @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
                                                /* load home URL if defined */
    }
    HWChecksumCheck() ;
}

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
@extern method HTMLVProcessClass, MSG_HMLVP_GOTO
{
    MemHandle gotoH;
    TCHAR *gotoP;
    NameToken url;
    EventHandle evt;

    gotoH = @call GotoEntry::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    gotoP = MemLock(gotoH);
    if (!(*gotoP)) {
        MemFree(gotoH);
        return;
    }
@ifdef COMPILE_OPTION_JUMP_FEATURE
    if (HandleJumpword(gotoP)) {
        MemFree(gotoH);
        return;
    }
    /* update with space-stripped version */
    @call GotoEntry::MSG_VIS_TEXT_REPLACE_ALL_PTR(gotoP, 0);
@endif
    url = NamePoolTokenize(namePool, gotoP, TRUE);
    MemFree(gotoH);
    evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
    @send application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
}
@endif

@ifdef COMPILE_OPTION_JUMP_FEATURE
@extern method HTMLVProcessClass, MSG_HMLVP_JUMP
{
    MemHandle jumpBlk, jumpArgs;
    word jumpSize, jumpURLLen;
    TCHAR *jumpURL, *jumpArgP;
    NameToken url;
    EventHandle evt;
#ifdef SECURE_INI_URLS
    word secureFlag = 0;
    static TCHAR defJumpURL[] = SECURE_INI_JUMP;
#endif

    if (!(InitFileReadStringBlock(HTMLVIEW_CATEGORY, "jumpURL",
				  &jumpBlk, 0, &jumpSize)) && jumpBlk) {
#ifdef SECURE_INI_URLS
        InitFileReadInteger(HTMLVIEW_CATEGORY, SECURE_INI_KEY, &secureFlag);
        if (secureFlag != SECURE_INI_FLAG) {
            MemFree(jumpBlk);
            jumpBlk = 0;
        }
    }
    /* if none or not valid, use default */
    if (!jumpBlk) {
        jumpBlk = MemAlloc((strlen(defJumpURL)+1)*sizeof(TCHAR), HF_DYNAMIC, HAF_STANDARD);
        if (jumpBlk) {
            jumpURL = MemLock(jumpBlk);
            strcpy(jumpURL, defJumpURL);
            jumpSize = strlen(jumpURL);
            MemUnlock(jumpBlk);
        }
    }
    /* process */
    if (jumpBlk) {
#endif
    if (jumpSize) {
        int jLen;
        jLen = @call JumpEntry::MSG_VIS_TEXT_GET_TEXT_SIZE();
        MemReAlloc(jumpBlk, jumpSize+((jLen+1)*sizeof(TCHAR)), HAF_STANDARD);
        jumpURL = MemLock(jumpBlk);
        jumpURLLen = strlen(jumpURL);
        /* append jumpword to jump URL, temporarily */
        @call JumpEntry::MSG_VIS_TEXT_GET_ALL_PTR(
        jumpURL+jumpURLLen);
        /* URL-encode jumpword, if any */
        if (*(jumpURL+jumpURLLen)) {
            jumpArgs = FormStringCreate();
            FormStringConvertAndAppend(jumpArgs, jumpURL+jumpURLLen);
            jumpArgP = MemLock(jumpArgs);
            if (jumpArgP) {
                jumpArgP = FormStringDerefData(jumpArgs);
                /* append URL-encoded jumpword */
                strcpy(jumpURL+jumpURLLen, jumpArgP);
                url = NamePoolTokenize(namePool, jumpURL, TRUE);
                evt = @record URLDocumentClass::
                MSG_URL_DOCUMENT_LOAD_URL(url, DIR_GO);
                @send application::MSG_META_SEND_CLASSED_EVENT(
                    evt, TO_APP_MODEL);
            }
            MemFree(jumpArgs);
        }
    }
    MemFree(jumpBlk);
    }
}
@endif

@ifdef COMPILE_OPTION_SEARCH_MENU
@extern method HTMLVProcessClass, MSG_HMLVP_SEARCH
{
    MemHandle searchBlk;
    word searchSize;
    TCHAR *searchURL;
    NameToken url;
    EventHandle evt;
    char searchKey[20];

@ifdef DO_DBCS
    sprintfsbcs(searchKey, SEARCH_URL_TEMPLATE, type);
@else
    sprintf(searchKey, SEARCH_URL_TEMPLATE, type);
@endif
    if (!(InitFileReadStringBlock(HTMLVIEW_CATEGORY, searchKey,
                &searchBlk, 0, &searchSize)) && searchBlk) {
        if (searchSize) {
            searchURL = MemLock(searchBlk);
            if (searchURL) {
                url = NamePoolTokenize(namePool, searchURL, TRUE);
                evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(
                    url, DIR_GO);
                @send application::MSG_META_SEND_CLASSED_EVENT(evt,
                                            TO_APP_MODEL);
            }
        }
        MemFree(searchBlk);
    }
}
@endif

@ifdef COMPILE_OPTION_IGNORE_INPUT_DURING_LOADING
@extern method HTMLVApplicationClass, MSG_HMLVA_IGNORE_INPUT
{
    pself->HVAI_ignoreInput = TRUE;
}
@extern method HTMLVApplicationClass, MSG_HMLVA_ACCEPT_INPUT
{
    pself->HVAI_ignoreInput = FALSE;
}
@extern method HTMLVApplicationClass, MSG_HMLVA_IGNORING_INPUT
{
    extern Boolean G_ignoreInput;

    return (G_ignoreInput && pself->HVAI_ignoreInput);
}
@endif

void MarkBusy(HTMLVApplicationInstance *p, optr app)
{
@ifdef JAVASCRIPT_SUPPORT
    if (@call WindowOpenWindow::MSG_VIS_GET_ATTRS() & VA_VISIBLE) {
        @call app::MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY();
        p->HVAI_busy |= BF_COMPLETELY;
    } else {
        @call app::MSG_GEN_APPLICATION_MARK_BUSY();
    }
@else
    @call app::MSG_GEN_APPLICATION_MARK_BUSY();
@endif
}

void MarkNotBusy(HTMLVApplicationInstance *p, optr app)
{
@ifdef JAVASCRIPT_SUPPORT
    if (p->HVAI_busy & BF_COMPLETELY) {
        @call app::MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY();
        p->HVAI_busy &= ~BF_COMPLETELY;
    } else {
        @call app::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
    }
@else
    @call app::MSG_GEN_APPLICATION_MARK_NOT_BUSY();
@endif
}

@extern method HTMLVApplicationClass, MSG_HMLVA_MARK_BUSY
{
    if (!(pself->HVAI_busy & BF_BUSY)) {
        if (!(pself->HVAI_busy & BF_OVERRIDE)) {
            MarkBusy(pself, oself);
        }
        pself->HVAI_busy |= BF_BUSY;
    } else {
        if (pself->HVAI_busy & BF_OVERRIDE) {
            MarkBusy(pself, oself);
        }
    }
    pself->HVAI_busy &= ~BF_OVERRIDE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_MARK_NOT_BUSY
{
    if (pself->HVAI_busy & BF_BUSY) {
        if (!(pself->HVAI_busy & BF_OVERRIDE)) {
            MarkNotBusy(pself, oself);
        }
        pself->HVAI_busy &= ~BF_BUSY;
    }
    pself->HVAI_busy &= ~BF_OVERRIDE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_OVERRIDE_BUSY
{
    if ((pself->HVAI_busy & BF_BUSY) && !(pself->HVAI_busy & BF_OVERRIDE)) {
        MarkNotBusy(pself, oself);
        pself->HVAI_busy |= BF_OVERRIDE;
    }
}

@extern method HTMLVApplicationClass, MSG_HMLVA_RESTORE_BUSY
{
    if ((pself->HVAI_busy & BF_BUSY) && (pself->HVAI_busy & BF_OVERRIDE)) {
        MarkBusy(pself, oself);
        pself->HVAI_busy &= ~BF_OVERRIDE;
    }
}

void UserAbortStart(void)
{
    extern Boolean G_stopped ;
    G_stopped = TRUE;
}

void UserAbortEnd(void)
{
    extern Boolean G_stopped ;
    G_stopped = FALSE;
}

@extern method HTMLVApplicationClass, MSG_HMLVA_STOP_TRIGGER
{
@ifdef COMPILE_OPTION_AUTO_BROWSE
    IBM = 0;                          /* signal termination to auto browser */
@endif
    /* clear mod state so we'll update URL with current page */
    @call CurrentURLText::MSG_VIS_TEXT_SET_NOT_USER_MODIFIED();

@ifdef COMPILE_OPTION_DOWNLOAD_PROGRESS_DIALOG
    /* ensure download progress dialog is closed */
    @send DownloadProgressDialog::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
@endif

    /* disable Stop trigger for feedback */
    UpdateStop(FALSE);

    @AbortOperation(FALSE, FALSE, 0);             /* abort current operation */
}

void UpdateStop(Boolean enabled)
{
    EnabledOrNot(@NavigateStop,      enabled);
@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    EnabledOrNot(@SimpleToolbarStop, enabled);
@endif
@ifdef COMPILE_OPTION_BIG_BUTTON_TOOLBAR
    EnabledOrNot(@IconBarStop,       enabled);
@endif
@ifdef COMPILE_OPTION_LITTLE_BUTTON_TOOLBAR
    EnabledOrNot(@NavigateStopBut,   enabled);
    EnabledOrNot(@NavigateStopBut2,  enabled);
@endif
}

@extern method HTMLVProcessClass, MSG_HMLVP_OPTIONS_CHANGED
{
    HWChecksumCheck() ;

    if(modifiedBooleans & HTMLV_ENABLE_TOOLBAR)
      UpdateToolbar(selectedBooleans & HTMLV_ENABLE_TOOLBAR);

    if(modifiedBooleans & HTMLV_ENABLE_STATUSBAR)
      UpdateStatusbar(selectedBooleans & HTMLV_ENABLE_STATUSBAR);

    if(modifiedBooleans & HTMLV_ENABLE_URLBAR)
      UpdateUrlbar(selectedBooleans & HTMLV_ENABLE_URLBAR);

@ifdef COMPILE_OPTION_SIMPLE_BUTTON_TOOLBAR
    if(modifiedBooleans & HTMLV_ENABLE_TOOLBAR_PRINT)
      UpdatePrintButtonInSimpleToolbar(selectedBooleans & HTMLV_ENABLE_TOOLBAR_PRINT);
@endif

@ifndef COMPILE_OPTION_TURN_OFF_LOGO
    if(modifiedBooleans & HTMLV_SHOW_GLOBE)
      UpdateGlobeInSimpleButtonToolbar(selectedBooleans & HTMLV_SHOW_GLOBE);
@endif

@ifdef COMPILE_OPTION_PARENTAL_CONTROL
    if(modifiedBooleans & HTMLV_ENABLE_PARENTAL_CONTROL)
      UpdateParentalControls(selectedBooleans & HTMLV_ENABLE_PARENTAL_CONTROL);
@endif

    HWChecksumCheck() ;
}

