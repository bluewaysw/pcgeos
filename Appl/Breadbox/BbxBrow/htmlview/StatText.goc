/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
*/
/***************************************************************************
 *  FILE:  STATTEXT.GOC
 ***************************************************************************/

/*-------------------------------------------------------------------------
 | Module:   TestStatusClass
 |           Copyright (c) 1998 Breadbox Computer Company
 *-----------------------------------------------------------------------*/

@include <stdapp.goh>
@include <Ansi/string.h>
@include "stattext.goh"
@include "htmlview.goh"

typedef struct {
    StatusTextPriority STM_priority ;
    ChunkHandle        STM_next ;
    TCHAR               STM_string[] ;
} StatusTextMessage ;

/*=========================================================================*
 *  METHODS FOR CLASS:  StatusTextClass
 *=========================================================================*/


    @classdecl StatusTextClass ;


/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_INITIALIZE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This routine initializes this text status class by allocating an
 |    LMem block to hold all the messages
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_INITIALIZE
{
    HWChecksumCheck() ;
    EC_ERROR_IF(pself->STI_messageBlock != NULL, -1) ;
    pself->STI_messageBlock = MemAllocLMem(LMEM_TYPE_GENERAL, 0);
    /* lazarus fix */
    pself->STI_currentMessage = pself->STI_firstMessage = STATUS_TEXT_ID_BAD;
    pself->STI_numMessages = 0;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_DEINITIALIZE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    This routine deinitializes this text status class by freeing the
 |    message block.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_DEINITIALIZE
{
    HWChecksumCheck() ;
    EC_ERROR_IF(pself->STI_messageBlock == NULL, -1) ;
    EC_WARNING_IF(pself->STI_numMessages != 0, -1) ;
    MemFree(pself->STI_messageBlock) ;
    pself->STI_messageBlock = NULL;
    /* lazarus fix */
    pself->STI_currentMessage = pself->STI_firstMessage = STATUS_TEXT_ID_BAD;
    pself->STI_numMessages = 0;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_CREATE_MESSAGE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Create a new message to store into the list.
 |
 | Inputs:
 |    char *p_message             -- Message to create
 |    StatusTextPriority priority -- What level of priority
 |
 | Outputs:
 |    StatusTextID                -- Newly created message
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_CREATE_MESSAGE
{
    word len ;
    ChunkHandle newItem ;
    MemHandle messageBlock ;
    StatusTextMessage *p_newMessage ;
    StatusTextMessage *p_prev ;
    StatusTextMessage *p_current ;
    StatusTextID current ;

    if(pself->STI_messageBlock == NULL)
      return STATUS_TEXT_ID_BAD;

    HWChecksumCheck() ;
    len = 1+strlen(p_message) ;

    /* Create a new string */
    messageBlock = pself->STI_messageBlock ;
    MemLock(messageBlock) ;
    newItem = LMemAlloc(
                  pself->STI_messageBlock,
                  len*sizeof(TCHAR) +
                  sizeof(StatusTextMessage));

    /* Fill the structure */
    p_newMessage = LMemDerefHandles(messageBlock, newItem) ;
    p_newMessage->STM_priority = priority ;
    p_newMessage->STM_next = NullHandle ;
    strcpy(p_newMessage->STM_string, p_message) ;

    /* Now find where we go in the list */
    pself = LMemDeref(oself) ;
    p_prev = NULL ;
    current = pself->STI_firstMessage ;
    while (current != STATUS_TEXT_ID_BAD)  {
        p_current = LMemDerefHandles(messageBlock, current) ;
        if (p_current->STM_priority <= priority)
            break ;
        p_prev = p_current ;
        current = p_current->STM_next ;
    }

    /* Record the next one (or bad id) */
    p_newMessage->STM_next = current ;

    /* Fix up the previous one (if there is one) */
    if (p_prev)  {
        p_prev->STM_next = newItem ;
    } else {
        pself->STI_firstMessage = newItem ;
    }

    pself->STI_numMessages++ ;

    MemUnlock(messageBlock) ;

    @send ,forceQueue ,checkDuplicate oself::MSG_STATUS_TEXT_UPDATE_TEXT(FALSE) ;

    HWChecksumCheck() ;

    return (StatusTextID)newItem ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_CREATE_MESSAGE_OPTR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Create a new message to store into the list.
 |
 | Inputs:
 |    optr o_message              -- Message to create
 |    StatusTextPriority priority -- What level of priority
 |
 | Outputs:
 |    StatusTextID                -- Newly created message
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_CREATE_MESSAGE_OPTR
{
    StatusTextID id ;

    HWChecksumCheck() ;
    MemLock(OptrToHandle(o_message)) ;
    id = @call oself::MSG_STATUS_TEXT_CREATE_MESSAGE(
              LMemDeref(o_message),
              priority) ;
    MemUnlock(OptrToHandle(o_message)) ;

    return id ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_CHANGE_MESSAGE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Changes the text of a previous message.
 |
 | Inputs:
 |    StatusTextID textID         -- TextID of message to change
 |    TCHAR *p_message             -- New message to use.
 |
 | Outputs:
 |    Boolean                     -- TRUE if the message was changed,
 |                                   else FALSE.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_CHANGE_MESSAGE
{
    Boolean didChange = FALSE ;
    StatusTextMessage *p_messageData ;
    MemHandle block ;
    word len ;
    optr item ;

    HWChecksumCheck() ;
    /* Don't process unless the id is valid */
    if (textID != STATUS_TEXT_ID_BAD && pself->STI_messageBlock != NULL)  {
        block = pself->STI_messageBlock ;
        len = 1+strlen(p_message) ;
        MemLock(block) ;
        item = ConstructOptr(block, textID) ;
        p_messageData = LMemDeref(item) ;
        /* Only do something if its different */
        if (strcmp(p_messageData->STM_string, p_message) != 0)  {
            LMemReAlloc(item, len*sizeof(TCHAR) + sizeof(StatusTextMessage));
            p_messageData = LMemDeref(item) ;
            strcpy(p_messageData->STM_string, p_message) ;
            didChange = TRUE ;

            pself = LMemDeref(oself) ;
            if (pself->STI_currentMessage == textID)  {
                /* Update if the currently shown item. */
                /* Wipe out the old one to force an update */
                pself->STI_currentMessage = STATUS_TEXT_ID_BAD ;
                @send ,forceQueue ,checkDuplicate
                    oself::MSG_STATUS_TEXT_UPDATE_TEXT(FALSE) ;
            }
        }
        MemUnlock(block) ;
    }
    HWChecksumCheck() ;

    return didChange ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_CHANGE_MESSAGE_OPTR
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Changes the text of a previous message.
 |
 | Inputs:
 |    StatusTextID textID         -- TextID of message to change
 |    optr o_message              -- New message to use.
 |
 | Outputs:
 |    Boolean                     -- TRUE if the message was changed,
 |                                   else FALSE.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_CHANGE_MESSAGE_OPTR
{
    Boolean didChange ;

    HWChecksumCheck() ;
    MemLock(OptrToHandle(o_message)) ;
    didChange = @call oself::MSG_STATUS_TEXT_CHANGE_MESSAGE(
              textID,
              LMemDeref(o_message)) ;
    MemUnlock(OptrToHandle(o_message)) ;

    return didChange ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_DESTROY_MESSAGE
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Gets rid of an old message and determines what to show next.
 |
 | Inputs:
 |    StatusTextID textID         -- TextID of message to destroy
 |
 | Outputs:
 |    Boolean                     -- TRUE if the message was destroyed,
 |                                   else FALSE.
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_DESTROY_MESSAGE
{
    Boolean didDestroy = FALSE ;
    MemHandle block ;
    StatusTextMessage *p_prev ;
    StatusTextID current ;
    StatusTextMessage *p_current ;

    HWChecksumCheck() ;
    /* Don't process unless the id is valid */
    if (textID != STATUS_TEXT_ID_BAD && pself->STI_messageBlock != NULL)  {
        block = pself->STI_messageBlock ;
        MemLock(block);

        /* Find the previous link */
        p_prev = NULL ;
        current = pself->STI_firstMessage ;
        while (current != STATUS_TEXT_ID_BAD)  {
            p_current = LMemDerefHandles(block, current) ;
            if (current == textID)
                break ;
            p_prev = p_current ;
            current = p_current->STM_next ;
        }

        /* Unlink the previous one */
        if (p_prev)
            p_prev->STM_next = p_current->STM_next ;
        else
            pself->STI_firstMessage = p_current->STM_next ;

        /* Ok, we are unlinked.  Now delete */
        LMemFreeHandles(block, textID) ;
        pself->STI_numMessages-- ;

        @send ,forceQueue ,checkDuplicate
            oself::MSG_STATUS_TEXT_UPDATE_TEXT(FALSE) ;

        MemUnlock(block) ;
    }
    HWChecksumCheck() ;

    return didDestroy ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_UPDATE_TEXT
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Updates the text associated with this status (if there is a change)
 |
 | Inputs:
 |    Boolean forceOutput         -- Cause an update to occur
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  03/18/98  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_UPDATE_TEXT
{
    MemHandle block ;
    StatusTextMessage *p_msg ;

    HWChecksumCheck() ;
    EC_ERROR_IF(pself->STI_textLink == NullHandle, -1) ;

    /* Different message or a new message? */
    if ((pself->STI_firstMessage != pself->STI_currentMessage) ||
            (forceOutput))
    {
        pself->STI_currentMessage = pself->STI_firstMessage ;
        if (pself->STI_textLink)  {
            /* Send out an update */
            if (pself->STI_currentMessage != STATUS_TEXT_ID_BAD)  {
                MemLock(block = pself->STI_messageBlock) ;
                p_msg = LMemDerefHandles(block, pself->STI_currentMessage) ;
                @call (pself->STI_textLink)::MSG_FAST_STATUS_SET_TEXT(
                  p_msg->STM_string);
                MemUnlock(block) ;
            } else {
                @call (pself->STI_textLink)::MSG_FAST_STATUS_SET_TEXT(NULL);
            }
        }
    }
    HWChecksumCheck() ;
}

/*-------------------------------------------------------------------------
 | Method:  StatusTextClass::MSG_STATUS_TEXT_GET
 *-------------------------------------------------------------------------
 |
 | Description:
 |    Fetches the text stored for a message
 |
 | Inputs:
 |    StatusTextID textID         -- Previously created text id
 |    TCHAR *p_message             -- Returned message
 |    word limit                  -- Number of bytes in message
 |
 | Revision History:
 |    Who  Date:     Comments:
 |    ---  --------  ---------
 |    LES  09/14/00  Created
 |
 *-----------------------------------------------------------------------*/
@method StatusTextClass, MSG_STATUS_TEXT_GET
{
    MemHandle block ;
    StatusTextMessage *p_oldMsg ;

    /* Lock and copy to the limit */
    if (textID != STATUS_TEXT_ID_BAD)  {
        MemLock(block = pself->STI_messageBlock) ;
        p_oldMsg = LMemDerefHandles(block, textID) ;
        strncpy(p_message, &p_oldMsg->STM_string, limit) ;
        MemUnlock(block) ;
    } else {
        /* Empty otherwise */
        p_oldMsg->STM_string[0] = '\0' ;
    }
}


/*=========================================================================*
 *  METHODS FOR CLASS:  FastStatusClass
 *=========================================================================*/


    @classdecl FastStatusClass ;


@method FastStatusClass, MSG_VIS_RECALC_SIZE
{
    word retHeight, retWidth;

    if(height & RSA_CHOOSE_OWN_SIZE)
      retHeight = 10;
    else
      retHeight = height & RSA_SUGGESTED_SIZE;

    if(width & RSA_CHOOSE_OWN_SIZE)
      retWidth = 10;
    else
      retWidth = width & RSA_SUGGESTED_SIZE;

    return MAKE_SIZE_DWORD(retWidth, retHeight);
}

@method FastStatusClass, MSG_META_START_SELECT
{
    if (pself->FSI_destination && (inputState & BI_DOUBLE_PRESS))
    {
      @send, forceQueue (pself->FSI_destination)::
        {MSG_META_NULL}(pself->FSI_dblClickMsg)();
    }
    @callsuper();
}

@method FastStatusClass, MSG_FAST_STATUS_SET_PROGRESS
{
    /* Update percentage and redraw if there really was a change */
    if(perct != pself->FSI_perct)
    {
      pself->FSI_perct = perct;         // store percentage
      @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
    }
}

@method FastStatusClass, MSG_FAST_STATUS_SET_TEXT
{
    ChunkHandle ch;

    /* Update text and redraw if there really was a change */
    if( (pself->FSI_text && !text) || (!pself->FSI_text && text) || (text &&
        strcmp(text, LMemDerefHandles(OptrToHandle(oself), pself->FSI_text))) )
    {
      if(pself->FSI_text)               // release old text chunk, if any
        LMemFreeHandles(OptrToHandle(oself), pself->FSI_text);

      if(text)                          // next text provided?
      {                                 // yes: store it in new chunk
        ch = LMemAlloc(OptrToHandle(oself), (strlen(text)+1)*sizeof(TCHAR));
        strcpy(LMemDerefHandles(OptrToHandle(oself), ch), text);
        pself = ObjDerefGen(oself);
      }
      else
        ch = 0;                         // no text

      pself->FSI_text = ch;             // update text chunk
      @send self::MSG_VIS_REDRAW_ENTIRE_OBJECT();
    }
}

@method FastStatusClass, MSG_VIS_DRAW
{
    DisplayScheme ds;
    VisInstance *vself;
    word width;
    word b = 0;

    GrSaveState(gstate);
    vself = ObjDerefVis(oself);

    if(pself->FSI_boxed)
    {
      b = 1;				// Inset by one pixel (for border)

      /* draw "lowered" one-pixel border */
      GrSetLineColor(gstate, CF_INDEX, C_DARK_GREY, 0, 0);
      GrDrawVLine(gstate, vself->VI_bounds.R_left, vself->VI_bounds.R_top,
	vself->VI_bounds.R_bottom-1);
      GrDrawHLine(gstate, vself->VI_bounds.R_left, vself->VI_bounds.R_top,
	vself->VI_bounds.R_right-1);

      GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0);
      GrDrawVLine(gstate, vself->VI_bounds.R_right-1, vself->VI_bounds.R_top,
	vself->VI_bounds.R_bottom-1);
      GrDrawHLine(gstate, vself->VI_bounds.R_left, vself->VI_bounds.R_bottom-1,
	vself->VI_bounds.R_right-1);
    }

    /* width of progress bar */
    width = (word) ((vself->VI_bounds.R_right-1 - vself->VI_bounds.R_left - 2*b)
      * pself->FSI_perct / 100);

    if(width)                           // Draw progress bar, if any
    {
        if (pself->FSI_perct < 100)
        {
            GrSetAreaColor(gstate, CF_INDEX, C_BLUE, 0, 0);
        }
        else
        {
            @call application::MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME(&ds);            
            GrSetAreaColor(gstate, CF_INDEX, ds.DS_darkColor, 0, 0);
        }
        GrFillRect(gstate,
            vself->VI_bounds.R_left+b, vself->VI_bounds.R_top+b,
            vself->VI_bounds.R_left+b + width, vself->VI_bounds.R_bottom-1-b);
    }

    /* fill rest of field with background */
    @call application::MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME(&ds);
    GrSetAreaColor(gstate, CF_INDEX, ds.DS_lightColor, 0, 0);
    GrFillRect(gstate, vself->VI_bounds.R_left+b+width, vself->VI_bounds.R_top+b,
      vself->VI_bounds.R_right-1-b, vself->VI_bounds.R_bottom-1-b);

    if(pself->FSI_text)                 // Draw text, if any (from top)
    {
      GrSetClipRect(gstate, PCT_INTERSECTION,
	vself->VI_bounds.R_left+b, vself->VI_bounds.R_top+b,
	vself->VI_bounds.R_right-1-b, vself->VI_bounds.R_bottom-1-b);
      GrDrawText(gstate,
        vself->VI_bounds.R_left+b, vself->VI_bounds.R_top+b-1,
        LMemDerefHandles(OptrToHandle(oself), pself->FSI_text), 0);
    }

    GrRestoreState(gstate);
}

/***************************************************************************
 *  END OF FILE:  STATTEXT.GOC
 ***************************************************************************/
