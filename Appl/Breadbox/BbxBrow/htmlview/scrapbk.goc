@include <stdapp.goh>
@include <Objects/Text/tCtrlC.goh>

#include <initfile.h>
#include <fileEnum.h>
#include <sysstats.h>
#include <sem.h>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>
#include <geoMisc.h>

@include "htmlview.goh"
@ifdef COMPILE_OPTION_BOOKMARKS
@include "bookmark.goh"
@endif
@ifdef COMPILE_OPTION_FAVORITES
@include "favorite.goh"
@endif
@include "urlfetch.goh"
@include "importg.goh"
@include "expire.goh"
@include "stattext.goh"

@ifdef COMPILE_OPTION_AUTO_BROWSE
Boolean didAutoTest = FALSE ;
sdword bulkTestCount;
word bulkTestType;
word abTimerID;
@extern object AutoBrowseOptions ;
@extern object CurrentURLText ;
@extern object SimpleToolbarHome ;
@extern object HTMLDisplayGroup ;
@endif

@ifdef COPY_TO_SCRAPBOOK
/* current page title */
TCHAR G_curTitle[80];
@extern object CopyToScrapbookTrigger ;
@endif


@ifdef COMPILE_OPTION_AUTO_BROWSE
#include <timer.h>

dword IBM = 0;

void ABLog(char *fmt, ...)
{
    static char buf[1024];  /* not thread-safe, but saves stack usage */
    va_list arg;
    TimerDateAndTime tdat;
    static FileHandle abLog = NullHandle;
@ifdef DO_DBCS
    char *bP;
    TCHAR dateBuf[20], *dP;
@endif

    if (!abLog) {
	FilePushDir();
	FileSetStandardPath(SP_TOP);
	abLog = FileCreate(_TEXT("browse.log"),
			   FILE_CREATE_NO_TRUNCATE | FCF_NATIVE |
			   FILE_ACCESS_W | FILE_DENY_RW, 0 );
	FilePopDir();
	if (abLog) {
	    FilePos(abLog, 0, FILE_POS_END);
	}
    }
    if (abLog) {
	buf[0] = '(';
      	TimerGetDateAndTime(&tdat);
@ifdef DO_DBCS
	LocalFormatDateTime(dateBuf, DTF_ZERO_PADDED_SHORT, &tdat);
        dP = dateBuf; bP = buf+1;
	while (*dp) *bP++ = *dP++;
	*bP = 0;
	strcatsbcs(buf, " ");
	LocalFormatDateTime(dateBuf, DTF_HMS_24HOUR, &tdat);
        dP = dateBuf; bP = buf+strlen(buf);
	while (*dp) *bP++ = *dP++;
	*bP = 0;
	strcatsbcs(buf, ") ");
	FileWrite(abLog, buf, strlensbcs(buf), FALSE);
	va_start(arg, fmt);
	vsprintfsbcs(buf, fmt, arg);
	va_end(arg);
	FileWrite(abLog, buf, strlensbcs(buf), FALSE);
@else
	LocalFormatDateTime(buf+1, DTF_ZERO_PADDED_SHORT, &tdat);
	strcat(buf, " ");
	LocalFormatDateTime(buf+strlen(buf), DTF_HMS_24HOUR, &tdat);
	strcat(buf, ") ");
	FileWrite(abLog, buf, strlen(buf), FALSE);
	va_start(arg, fmt);
	vsprintf(buf, fmt, arg);
	va_end(arg);
	FileWrite(abLog, buf, strlen(buf), FALSE);
@endif
	FileCommit(abLog, TRUE);
    }
}

@extern method HTMLVProcessClass, MSG_HMLVP_BULK_TEST_INDEX_FILE_TRIGGER
{
    bulkTestType = 1 ;
    bulkTestCount = 0;
    IBM = 3;
    InitFileReadInteger("wm_debug", "bulkTestStart", (word*)&bulkTestCount);
    @send,forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
}

@extern method HTMLVProcessClass, MSG_HMLVP_BULK_TEST_TRIGGER
{
    bulkTestCount = 0;
    InitFileReadInteger("wm_debug", "bulkTestStart", (word*)&bulkTestCount);
    IBM = 3;
    @send,forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
}

@extern method HTMLVProcessClass, MSG_HMLVP_AUTO_BROWSE_TRIGGER
{
    bulkTestType = 0;
    bulkTestCount = -1;
    IBM = 3;
    @send,forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
}

extern Boolean CheckConnected();

@extern method HTMLVProcessClass, MSG_HMLVP_DO_AUTO_BROWSE
{
    word n,max;
    EventHandle evt;
    PathName path;
    TCHAR pathurl[(PATH_BUFFER_SIZE+40)/2];
    NameToken url;
    MemHandle mh;
    word found,notHandled;
    struct {
      FileLongName FHR_name;
    } *findHTMRet;
    FileHandle file ;
    char c ;
    Boolean gotLine;

    static FileEnumParams findHTMFEP=
      {FESF_NON_GEOS | FESF_CALLBACK,
       (void *)FESRT_NAME,
       FILE_LONGNAME_BUFFER_SIZE,
       NULL,
       1,
       0,
       (void *)FESC_WILDCARD,
       NULL, (dword)_TEXT("*.HTM"), TRUE,
       0};

#ifdef HEAP_LEAK_CHECKING
//    HLFUpdate() ;
//    HLFReport(1) ;
#endif

    if(!IBM)                            /* IBM = 0: signals termination */
    {
      didAutoTest = FALSE ;
      return;
    }

    HWChecksumCheck() ;
    didAutoTest = TRUE ;

    if(bulkTestCount>=0)
    {
      HWChecksumCheck() ;
      InitFileWriteInteger("wm_debug", "bulkTestCount", bulkTestCount);
      InitFileCommit();                 /* make it survive a crash */
      if (bulkTestCount == 0) {
	  ABLog("starting auto-browse\r\n");
      }
      if (@call AutoBrowseOptions::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS() & AB_OPTION_CLEAR_CACHE) {
	  SrcCacheClear() ;
	  ObjCacheClear() ;
      }
      if (bulkTestType == 0)  {
          /* look for n-th matching file in directory */
          findHTMFEP.FEP_skipCount = bulkTestCount++;

          strcpy(path,_TEXT("C:\\HTMLTEST"));      /* default path */
          InitFileReadStringBuffer(
            "wm_debug", "bulkTestPath", path, PATH_BUFFER_SIZE, &n);
          FileSetCurrentPath(0, path);

          found = FileEnum(&findHTMFEP,&mh,&notHandled);
          if(found)
          {
            findHTMRet = MemLock(mh);
            strcpy(pathurl, _TEXT("FILE:///"));
            strcat(pathurl, path);
            strcat(pathurl, _TEXT("\\"));
            strcat(pathurl, findHTMRet[0].FHR_name);
            MemUnlock(mh);
            MemFree(mh);

            url = NamePoolTokenize(namePool, pathurl, TRUE);
            evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url,
              DIR_GO);
            @call application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
          }
          else
          {
            bulkTestCount = -1;
            return;
          }
      } else {
          FilePushDir() ;
          FileSetStandardPath(SP_DOCUMENT) ;
          file = FileOpen(_TEXT("testlist.txt"), FILE_DENY_NONE|FILE_ACCESS_R);
          FilePopDir() ;

          if (!file)  {
              bulkTestCount = -1;
              return ;
          }

          /* Find the nth line of text */
          for (n=0; n < bulkTestCount;)  {
              if (!FileRead(file, &c, 1, FALSE))
                  break ;
              if (c == '\n')
		  n++ ;
          }

          /* Pull out one line of text */
          n = 0 ;
          c = '\n' ;
	  gotLine = FALSE;
          while (FileRead(file, &c, 1, FALSE))  {
	      gotLine = TRUE;
              if ((c == '\r') || (c == '\n'))
                  break ;
              pathurl[n++] = c ;
              if (n >= (sizeof(pathurl)/sizeof(TCHAR)-1))
                  break ;
              c = '\n' ;
          }
          pathurl[n] = '\0' ;

          FileClose(file, FALSE) ;

	  /* skip blank lines and comment lines */
	  if (gotLine &&
	      ((pathurl[0] == C_NULL) ||
	       (pathurl[0] == '/' && pathurl[1] == '/'))) {
	      bulkTestCount++;
	      @send, forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
	      return;
	  }

          /* If we got something, tokenize the list and request it */
          /* Otherwise we are done */
          if (gotLine)  {
              @call CurrentURLText::MSG_VIS_TEXT_REPLACE_ALL_PTR(pathurl, 0) ;
              @call CurrentURLText::MSG_VIS_TEXT_APPEND_PTR(_TEXT("  (AUTO)"), 0) ;
              url = NamePoolTokenize(namePool, pathurl, TRUE);
	      if (!CheckConnected()) {
		  ABLog("NOT CONNECTED\r\n");
	      }
@ifdef DO_DBCS
	      ABLog("loading: %S\r\n", pathurl);
@else
	      ABLog("loading: %s\r\n", pathurl);
@endif
              evt = @record URLDocumentClass::MSG_URL_DOCUMENT_LOAD_URL(url,
                DIR_GO);
              @call application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
          } else {
            /* Loop if we ever got one thing */
            if (bulkTestCount > 0)  {
                bulkTestCount = 0 ;
                @send,forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
            } else {
                bulkTestType = 0 ;
                bulkTestCount = -1 ;
            }
            return ;
          }
          bulkTestCount++;
      }
    }
    else
    {
      HWChecksumCheck() ;
      IBM = IBM * 65531L;
      n = (IBM>>16) & 0x7;
      switch(n)
      {
      case 0:
	if (@call SimpleToolbarHome::MSG_GEN_GET_ENABLED()) {
	    ABLog("back\r\n");
	    evt = @record URLDocumentClass::MSG_URL_DOCUMENT_BACK();
	    @call application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
	} else {
	    ABLog("no back\r\n");
	    @send, forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
	}
        break;
      case 1:
	if (@call SimpleToolbarHome::MSG_GEN_GET_ENABLED()) {
	    ABLog("forward\r\n");
	    evt = @record URLDocumentClass::MSG_URL_DOCUMENT_FORWARD();
	    @call application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);
	} else {
	    ABLog("no forward\r\n");
	    @send, forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
	}
        break;
      case 2:
        max = HistoryGetEntryNum();
        if(max) {
          do {
            IBM = IBM * 65531L;
            n = (IBM>>16) & 0x07;
          } while(n>=max);

          if(n==0) {                      /* go home? */
	    if (@call SimpleToolbarHome::MSG_GEN_GET_ENABLED()) {
		ABLog("home\r\n");
		@call self::MSG_HMLVP_HOME_TRIGGER();
	    } else {
		ABLog("no home\r\n");
		@send, forceQueue self::MSG_HMLVP_DO_AUTO_BROWSE();
	    }
          } else {                         /* no: go to a previous entry */
	    ABLog("history %d\r\n", n);
            @call self::MSG_HMLVP_HISTORY_SELECT(n,1,0);
	  }
          break;
        }
      default:
        IBM = IBM * 65531L;
        evt = @record URLTextClass::
          MSG_HTML_TEXT_EXEC_NTH_HOTSPOT((word)((IBM>>16)&0xFF));
	/* make HTML area active */
	@call HTMLDisplayGroup::MSG_META_GRAB_TARGET_EXCL();
        @call application::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_TARGET);
      }
    }
    HWChecksumCheck() ;
}
@endif

@ifdef COPY_TO_SCRAPBOOK

@extern method HTMLVProcessClass, MSG_HMLVP_COPY_TO_SCRAPBOOK
{
    MemHandle alb, fileInfo;
    FileInfo *fileInfoP;
    static IACPConnection iacp;
    GeodeToken scrapBookToken = {{"Scrp"},0};
    word numServers;
    EventHandle ev, completion;
    ClipboardQueryArgs clipInfo;
    ClipboardItemHeader *cih;
    MemHandle cihMem;

    switch (func) {
    case CTS_COPY:
	iacp = 0;
	/* do a copy */
	ev = @record URLTextClass::MSG_META_CLIPBOARD_COPY();
	@call application::MSG_META_SEND_CLASSED_EVENT(ev, TO_TARGET);
	@send, forceQueue process::MSG_HMLVP_COPY_TO_SCRAPBOOK(CTS_LAUNCH);
	break;
    case CTS_LAUNCH:
	/* launch scrapbook and paste */
	alb = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_ENGINE);
	if (alb) {
	    iacp = IACPConnect(&scrapBookToken,
			       IACPCF_FIRST_ONLY |
			       IACPSM_NOT_USER_INTERACTIBLE,
			       alb,
			       NullOptr,
			       &numServers);
	    if (iacp) {
		/* send dummy message to trigger next step */
		ev = @record MetaClass::MSG_META_DUMMY();
		completion = @record oself::MSG_HMLVP_COPY_TO_SCRAPBOOK(
		    CTS_PASTE);
		(void)IACPSendMessage(iacp, ev, TO_PROCESS,
				      completion, IACPS_CLIENT);
	    }
	}
	break;
    case CTS_PASTE:
	/* stuff page name into clipboard item, if any */
	ClipboardQueryItem(TIF_NORMAL, &clipInfo);
	if (clipInfo.CQA_header) {
	    cih = VMLock(ClipboardGetClipboardFile(), clipInfo.CQA_header, &cihMem);
	    strncpy(cih->CIH_name, G_curTitle, CLIPBOARD_ITEM_NAME_LENGTH);
	    cih->CIH_name[CLIPBOARD_ITEM_NAME_LENGTH] = C_NULL;
	    VMDirty(cihMem);
	    VMUnlock(cihMem);
	    ClipboardDoneWithItem(clipInfo.CQA_header);
	}
	if (iacp) {
	    fileInfo = MemAlloc(sizeof(FileInfo), HF_DYNAMIC, HAF_NO_ERR);
	    fileInfoP = MemLock(fileInfo);
	    strcpy(fileInfoP->name, _TEXT("Browser Scrapbook"));
	    fileInfoP->diskHandle = SP_DOCUMENT;
@ifdef PRODUCT_NDO2000
	    fileInfoP->path[0] = NULL;
@else
	    strcpy(fileInfoP->path, _TEXT("Clip Art"));
@endif
	    MemUnlock(fileInfo);
	    ev = @record GenProcessClass::MSG_SCRAPBOOK_PASTE_APPEND_TO_FILE(
		fileInfo);
	    (void)IACPSendMessage(iacp, ev, TO_PROCESS, 0, IACPS_CLIENT);
	    /* all done */
	    IACPShutdown(iacp, NullOptr);
	    iacp = 0;
	}
	break;
    }
}

@endif

@ifdef COPY_TO_SCRAPBOOK

@extern method HTMLVApplicationClass, MSG_META_NOTIFY_WITH_DATA_BLOCK
{
    NotifySelectStateChange *nssc;

    if (notificationType == GWNT_SELECT_STATE_CHANGE &&
	manufID == MANUFACTURER_ID_GEOWORKS &&
	data) {
	nssc = MemLock(data);
	if (nssc) {
	    if (nssc->NSSC_clipboardableSelection) {
		@call CopyToScrapbookTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
	    } else {
		@call CopyToScrapbookTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	    }
	    MemUnlock(data);
	}
    }
    @callsuper();
}

@endif
