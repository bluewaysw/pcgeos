/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
*/

@include <stdapp.goh>
@include "options.goh"

@ifndef COMPILE_OPTION_TURN_OFF_LOGO

@include "glbanim.goh"

@classdecl GlobeAnimClass;

@start GlobeResource1, data ;
@include "globeart/globe1.goh"
@end GlobeResource1 ;

@start GlobeResource2, data ;
@include "globeart/globe2.goh"
@end GlobeResource2 ;

@start GlobeResource3, data ;
@include "globeart/globe3.goh"
@end GlobeResource3 ;

@start GlobeResource4, data ;
@include "globeart/globe4.goh"
@end GlobeResource4 ;

@start GlobeResource5, data ;
@include "globeart/globe5.goh"
@end GlobeResource5 ;

@start GlobeResource6, data ;
@include "globeart/globe6.goh"
@end GlobeResource6 ;

@start GlobeResource7, data ;
@include "globeart/globe7.goh"
@end GlobeResource7 ;

@start GlobeResource8, data ;
@include "globeart/globe8.goh"
@end GlobeResource8 ;

@start GlobeResource9, data ;
@include "globeart/globe9.goh"
@end GlobeResource9 ;

@start GlobeResource10, data ;
@include "globeart/globe10.goh"
@end GlobeResource10 ;

@start GlobeResource11, data ;
@include "globeart/globe11.goh"
@end GlobeResource11 ;

@start GlobeResource12, data ;
@include "globeart/globe12.goh"
@end GlobeResource12 ;

@start GlobeResource13, data ;
@include "globeart/globe13.goh"
@end GlobeResource13 ;

@start GlobeResource14, data ;
@include "globeart/globe14.goh"
@end GlobeResource14 ;

@start GlobeResource15, data ;
@include "globeart/globe15.goh"
@end GlobeResource15 ;

@method GlobeAnimClass, MSG_GLBANIM_DATA_RECEIVED
{
    pself->GAI_current += count;

    if(pself->GAI_current > pself->GAI_limit)
        @send oself::MSG_GLBANIM_NEXT_STATE();
}

@method GlobeAnimClass, MSG_GLBANIM_NEXT_STATE
{
    if (!(pself->GAI_state & GLOBE_ANIM_STATE_OFF))  {
        pself->GAI_state++;

        if(pself->GAI_state == 15)
            pself->GAI_state = 0;

        pself->GAI_current = 0;
    }

    @send oself::MSG_VIS_REDRAW_ENTIRE_OBJECT();
}

@method GlobeAnimClass, MSG_GLBANIM_SET_LIMIT
{
    pself->GAI_limit = limit;
}

@method GlobeAnimClass, MSG_GLBANIM_GET_LIMIT
{
    return(pself->GAI_limit);
}

@method GlobeAnimClass, MSG_GLBANIM_AUTO_RUN
{
    word id ;
    pself->GAI_autoRun = autorun;

    if(pself->GAI_autoRun)
    {
        if(pself->GAI_timerID == 0)
        {
            // start timer here
            pself->GAI_state &= ~GLOBE_ANIM_STATE_OFF ;
            pself->GAI_timerHandle = TimerStart(
                TIMER_EVENT_CONTINUAL,
                oself,
                40,
                MSG_GLBANIM_NEXT_STATE,
                40,
                &id);
            pself->GAI_timerID = id ;
        }
    }
    else
    {
        if(pself->GAI_timerHandle)
        {
            // stop timer here
            TimerStop(pself->GAI_timerHandle, pself->GAI_timerID);
            pself->GAI_timerID = 0;
            pself->GAI_timerHandle = 0;
            pself->GAI_state = GLOBE_ANIM_STATE_OFF ;
            pself->GAI_current = 0 ;
            @call oself::MSG_GLBANIM_NEXT_STATE() ;
        }
    }
}

@method GlobeAnimClass, MSG_VIS_RECALC_SIZE
{
    return(MAKE_SIZE_DWORD(38, 38));
}

@method GlobeAnimClass, MSG_VIS_DRAW
{
    static optr globeArtArray[15] = {
        @Globe24_1,
        @Globe24_2,
        @Globe24_3,
        @Globe24_4,
        @Globe24_5,
        @Globe24_6,
        @Globe24_7,
        @Globe24_8,
        @Globe24_9,
        @Globe24_10,
        @Globe24_11,
        @Globe24_12,
        @Globe24_13,
        @Globe24_14,
        @Globe24_15
    } ;
    Rectangle rect;
    optr globe ;
    Bitmap *p_bitmap ;

    @call oself::MSG_VIS_GET_BOUNDS(&rect);

    GrSetLineColor(gstate, CF_INDEX, C_WHITE, 0, 0) ;
    GrDrawRect(gstate, rect.R_left, rect.R_top, rect.R_right-1, rect.R_bottom-1);
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0) ;
    GrDrawRect(gstate, rect.R_left+1, rect.R_top+1, rect.R_right-2, rect.R_top+2) ;
    GrDrawRect(gstate, rect.R_left+1, rect.R_bottom-3, rect.R_right-2, rect.R_bottom-2) ;
    GrDrawRect(gstate, rect.R_left+1, rect.R_top+1, rect.R_left+2, rect.R_bottom-2) ;
    GrDrawRect(gstate, rect.R_right-3, rect.R_top+1, rect.R_right-2, rect.R_bottom-2) ;
    globe = globeArtArray[pself->GAI_state & ~GLOBE_ANIM_STATE_OFF] ;
    MemLock(OptrToHandle(globe)) ;
    p_bitmap = LMemDeref(globe) ;
    GrDrawImage(gstate, rect.R_left+3, rect.R_top+3, IBS_1, p_bitmap) ;
    MemUnlock(OptrToHandle(globe)) ;
}

@method GlobeAnimClass, MSG_VIS_OPEN /*MSG_META_CONTENT_VIEW_WIN_OPENED*/
{
    pself->GAI_current = 0;
    pself->GAI_state |= GLOBE_ANIM_STATE_OFF ;

    @callsuper();

    @send oself::MSG_GLBANIM_AUTO_RUN(pself->GAI_autoRun);
}

@method GlobeAnimClass, MSG_VIS_CLOSE /*MSG_META_CONTENT_VIEW_WIN_CLOSED*/
{
    if(pself->GAI_timerID)
    {
        // stop timer here
        if(pself->GAI_timerHandle)
            TimerStop(pself->GAI_timerHandle, pself->GAI_timerID);
        pself->GAI_timerID = 0;
        pself->GAI_timerHandle = 0;
    }

    @callsuper();
}

@endif
