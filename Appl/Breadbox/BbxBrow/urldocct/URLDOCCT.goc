/*
 *                          ==CONFIDENTIAL INFORMATION==
 *
 * COPYRIGHT 1994-99 BREADBOX COMPUTER COMPANY -- ALL RIGHTS RESERVED  --
 * THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER
 * A NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 * RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 * NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 * CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 * AGREEMENT.
 *
*/
/***********************************************************************
 *
 * PROJECT:       HTMLView
 * FILE:          URLDocCt.goc
 *
 * AUTHOR:        Marcus Gr√∂ber
 *
 ***********************************************************************/

/**************************************************************************
 *		Include files
 **************************************************************************/

@include <stdapp.goh>
#include <geoMisc.h>                    /* various unix-like goodies */
#include <initfile.h>

#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>

@include "htmlview.goh"


/***************************************************************************
 * URL document controller class
 ***************************************************************************/

@classdecl URLDocumentControlClass;

@method URLDocumentControlClass, MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR
{
    @call fileSelector::MSG_GEN_FILE_SELECTOR_SET_MASK(_TEXT("*.HTM"));
    @callsuper();
}

@method URLDocumentControlClass, MSG_URL_DOC_CONTROL_CLOSE_AND_OPEN
{
    EventHandle evt ;

    evt = @record URLDocumentClass::MSG_GEN_DOCUMENT_CLOSE(NullHandle) ;
    @call oself::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL); // orginally: //@call application::...
    @send oself::MSG_GEN_DOCUMENT_CONTROL_INITIATE_OPEN_DOC() ;
}

@ifdef COMPILE_OPTION_NO_NEW_OPEN_DIALOG
@method URLDocumentControlClass, MSG_GEN_DOCUMENT_CONTROL_DISPLAY_DIALOG
{
    EventHandle evt ;
    TempGenControlInstance tempData;

    // make sure we dont't have a dialog when starting up, we want
    // a webpage immediately.
    if ((@call oself::MSG_META_GET_VAR_DATA(TEMP_GEN_CONTROL_INSTANCE,
                                            sizeof(tempData),
                                            &tempData) == 0xffff) ||
                                            !(tempData.TGCI_interactableFlags & GCIF_CONTROLLER))
    {
        // this closes the doc already in the process of being opened.
        // However MSG_GEN_DOCUMENT_GROUP_NEW_DOC is called in
        // MSG_META_SEND_CLASSED_EVENT, so we have a doc in the end...
        // (see below)
        // (meyerk 12/2024)
        evt = @record URLDocumentClass::MSG_GEN_DOCUMENT_CLOSE(NullHandle) ;
        @call oself::MSG_META_SEND_CLASSED_EVENT(evt, TO_APP_MODEL);

        // not calling @callsuper will prevent the New/Open dialog
        return;
    }
//  else
//  {
//      // if the browser is not just starting up, we want the New/Open dialog
//      @callsuper();
//  }
}
@endif

/***************************************************************************
 *              URL document group class
 ***************************************************************************/
@classdecl URLDocumentGroupClass;

@method URLDocumentGroupClass, MSG_META_SEND_CLASSED_EVENT
{

    ClassStruct *eventClass;
    DocumentCommonParams dcp;

    if ((ObjGetMessageInfo(event, (dword*)&eventClass)==MSG_URL_DOCUMENT_LOAD_URL) && (eventClass == &URLDocumentClass))
    {
        // ensure we have a document
        if (@call oself::MSG_GEN_FIND_CHILD_AT_POSITION(0) == NullOptr) {
            dcp.DCP_flags = 0;
            dcp.DCP_diskHandle = 0;
            dcp.DCP_docAttrs = GDA_UNTITLED;
            dcp.DCP_connection = 0;
            @call oself::MSG_GEN_DOCUMENT_GROUP_NEW_DOC(&dcp);
        }
    }

    @callsuper();
}
