/********************************************************************
 *
 *	Testapp für das Rendern von TTF-Fonts
 *
 *******************************************************************/
@include <stdapp.goh>
#include <geos.h>
#include <stdlib.h>
#include <graphics.h>
#include <string.h>
#include <file.h>
#include "FreeType/freetype.h"


#define FONT_SIZE 16

TT_Engine   engine;

/* Umstellung auf LMemBlock */
MemHandle       trueTypeHandle;
ChunkHandle     engineChunk;
void*           enginePtr; //nur temprär bis die Umstellung abgeschlossen ist

typedef struct {
  Bitmap b;
  char data[24 * 3];
} Bmp;

@class TtfProcessClass, GenProcessClass;
@endc;
@classdecl TtfProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/
@start AppResource;

@object GenApplicationClass TtfApp = {
    GI_visMoniker = list { @TtfTextMoniker };
    GI_comp = @TtfPrimary;

    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TtfPrimary;
}

@visMoniker TtfTextMoniker = "TTF Test";

@end AppResource;


@start Interface;

@object GenPrimaryClass TtfPrimary  = {
    GI_comp = @TtfView,
              @LogText;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object GenViewClass TtfView = {
    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_content = process;
    GVI_docBounds = { 0, 0, 400, 450 };

    ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@object GenTextClass LogText = {
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	  HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@end Interface;

/********************************************************************
 * Zeichensatz rendern
 ********************************************************************/

void testRendering(GStateHandle gstate) {
    char                tmpStr[40];
    word                charIndex;
    TT_Face_Properties  props;
    TT_Instance         instance;
    TT_Glyph            glyph;
    TT_UShort           charMapId;
    TT_Glyph_Metrics    metrics;
    TT_CharMap          charMap;
    TT_Face             face;
    FileHandle          fHandle;
    TT_Error            error;


    ECCheckLMemHandle( trueTypeHandle );

    error = TT_Init_FreeType(&engine);
    if(error) {
        _log("Fehler bei Initialisierung\r");
        goto Fail;
    }

    //temporär bis die Umstellung abgeschlossen ist
    enginePtr = LMemDerefHandles( trueTypeHandle, engine );
 
 /*   error = TT_Init_Kerning_Extension(engine);
    if(error) {
        _log("Fehler bei der Initialisierung des Kernings\r");
        goto Fail;
    } */

    fHandle = FileOpen("DejaVu.ttf", FILE_ACCESS_R | FILE_DENY_W);
    ECCheckFileHandle( fHandle );
    error = TT_Open_Face(engine, fHandle, &face);
    if(error) {
         _log("Fehler beim laden des Fonts\r");
         goto Fail;
    }

    error = TT_Get_Face_Properties(face, &props);
    if(error) {
        _log("Fehler beim laden der Properties\r");
        goto Fail;
    }
 
    sprintf(tmpStr, "num glyphs:\t%d\r", props.num_Glyphs); _log(tmpStr);
    sprintf(tmpStr, "num faces:\t%d\r", props.num_Faces); _log(tmpStr);
    sprintf(tmpStr, "num names:\t%d\r", props.num_Names); _log(tmpStr);
    sprintf(tmpStr, "num charMaps:\t%d\r", props.num_CharMaps); _log(tmpStr);
    sprintf(tmpStr, "max points:\t%d\r", props.max_Points); _log(tmpStr);
    sprintf(tmpStr, "max contours:\t%d\r", props.max_Contours); _log(tmpStr);

    error = TT_New_Instance(face, &instance);
    if(error) {
        _log("Fehler beim erzeugen einer Instance\r");
        goto Fail;
    }

    error = TT_Set_Instance_CharSize(instance, FONT_SIZE * 64);
    if(error) {
        _log("Fehler beim setzen der Pointsize\r");
        goto Fail;
    }

    error = TT_New_Glyph(face, &glyph);
    if(error) {
        _log("Fehler beim anlegen eines Glyphs\r");
        goto Fail;
    }
 
    TT_Get_CharMap(face, 0, &charMap);
    charIndex = TT_Char_Index(charMap, 84); //T
    DrawRegion( gstate, instance, glyph, charIndex, 60);
    charIndex = TT_Char_Index(charMap, 101); //e
    DrawRegion( gstate, instance, glyph, charIndex, 80);
    charIndex = TT_Char_Index(charMap, 115); //s
    DrawRegion( gstate, instance, glyph, charIndex, 100);
    charIndex = TT_Char_Index(charMap, 116); //t
    DrawRegion( gstate, instance, glyph, charIndex, 120);

    DrawBitmap( gstate, instance, glyph);


Fail:
    TT_Done_FreeType(engine);
    return;
}

void DrawBitmap( GStateHandle gstate, TT_Instance instance, TT_Glyph glyph ) {
    word characterId;
    TT_Glyph_Metrics metrics;
    TT_Raster_Map bitmap;
    TT_Outline outline;
    int offsetY = 0;
    Bmp bmp;

    // Zeichensatz durchlaufen in einer 16 x 16 Matrix
    for(characterId = 1; characterId <= 200; characterId++ ) {
       TT_Error error;
       int posX = ( characterId % 16 ) * FONT_SIZE + FONT_SIZE/2;
       int posY = ( characterId / 16 ) * 2 * FONT_SIZE + 100;

        memset(&bmp, 0, sizeof(Bmp));
        bmp.b.B_compact = BMC_UNCOMPACTED;
        bmp.b.B_type = BMF_MONO;
        bmp.b.B_width = 24;
        bmp.b.B_height = 24;

        bitmap.flow = TT_Flow_Down;
        bitmap.rows = 24;
        bitmap.cols = 3;
        bitmap.width = 24;
        bitmap.size = 3*24;
        bitmap.bitmap = &bmp.data;
        
        error = TT_Load_Glyph( instance, glyph, characterId, TTLOAD_DEFAULT | TTLOAD_PEDANTIC );
        if(error)
            continue;

        error = TT_Get_Glyph_Metrics(glyph, &metrics);
        if(error)
            continue;

        offsetY = metrics.bbox.yMin;

        error = TT_Get_Glyph_Bitmap(glyph, &bitmap, 0, -offsetY);
        if(error)
            continue;

        GrDrawImage(gstate, posX, posY - (offsetY>>6), IBS_1, (Bitmap *) &bmp);
    }
}

void DrawRegion( GStateHandle gstate, TT_Instance instance, TT_Glyph glyph, word characterId, word x ) {
    char tmpStr[40];
    TT_Raster_Map regionmap;
    TT_Glyph_Metrics metrics;

    Region*  region = calloc(sizeof(Region), 400);

    regionmap.flow = TT_Flow_Down;
    regionmap.bitmap = &region[4];
        
    if( TT_Load_Glyph( instance, glyph, characterId, TTLOAD_DEFAULT | TTLOAD_PEDANTIC ) )
        return;
 
    if( TT_Get_Glyph_Metrics( glyph, &metrics ) )
        return;

    regionmap.rows = ( metrics.bbox.yMax - metrics.bbox.yMin ) >> 6;
    regionmap.cols = ( metrics.bbox.xMax - metrics.bbox.yMin ) >> 6;
    regionmap.width = regionmap.cols;

    region[0] = 0;
    region[1] = 0;
    region[2] = regionmap.rows;
    region[3] = regionmap.cols;

    if( TT_Get_Glyph_Region( glyph, &regionmap, 0, 0 ) )
        return;
 
    GrDrawRegion(gstate, x, 40, region, 0, 0);

    free(region);
}

@method TtfProcessClass, MSG_META_EXPOSED {
    GStateHandle gstate = GrCreateState( win );
    Init();
    GrBeginUpdate( gstate );
    testRendering( gstate );
    GrEndUpdate( gstate );
    Free();
    GrDestroyState( gstate );
}

void Init() {
    trueTypeHandle = MemAlloc( 2048, HF_SWAPABLE, HAF_ZERO_INIT | HAF_LOCK );
    LMemInitHeap(trueTypeHandle, LMEM_TYPE_GENERAL, 0, 
        sizeof(LMemBlockHeader), STD_INIT_HANDLES, STD_INIT_HEAP);
    ECCheckLMemHandle( trueTypeHandle );
}

void Free() {
    MemUnlock(trueTypeHandle);
    MemFree(trueTypeHandle);
}

void _log(char * message) {
   @call LogText::MSG_VIS_TEXT_APPEND_PTR(message, 0);
}

void clear_log() {
  @call LogText::MSG_VIS_TEXT_DELETE_ALL();
}
