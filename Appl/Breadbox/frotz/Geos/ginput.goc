/***********************************************************************

       Copyright (c) Gerd Boerrigter 1998 -- All Rights Reserved

  PROJECT:      FROTZ for GEOS - an interpreter for all Infocom games.
  MODULE:       input functions / FrotzInputTextClass
  FILE:         gInput.goc

  AUTHOR:       Gerd Boerrigter

  RCS STAMP:
    $Id: $

  DESCRIPTION:
    This file contains the GEOS front end, input functions.

  REVISION HISTORY:
    Date       Name      Description
    --------   --------  -----------
    98-06-06   GerdB     Initial Version.
    2024-01-02 RainerB	Fix a lot of compiler warnings. 

***********************************************************************/

@include <stdapp.goh>
#include <sem.h>
#include <Ansi/string.h>
#include <Ansi/stdio.h>

#include "frotz.h"
@include "Geos/frotz.goh"


#ifndef HISTORY_BUFSIZE
#define HISTORY_BUFSIZE 500
#endif

extern SemaphoreHandle waitForInputSem;

@extern object @FrotzInput;
@extern object @FrotzText;


extern bool is_terminator (zchar);

extern bool read_yes_or_no (const char *);
extern void read_string (int, zchar *);

extern int completion (const zchar *, zchar *);

static long limit = 0;

/* static struct {
    zchar buffer[HISTORY_BUFSIZE];
    int latest;
    int current;
    int prefix_len;
} history; */

static struct {
    zchar *buffer;
    int pos;
    int length;
    int max_length;
    int width;
    int max_width;
} input;

// static bool overwrite = FALSE;

int current_key;

/*
 * get_current_time
 *
 * Return the current system time in 1/10 seconds.
 *
 */
static long get_current_time (void)
{
    dword time;

    time = TimerGetCount();
    return time / 6;

}/* get_current_time */

/*
 * set_timer
 *
 * Set a time limit of timeout/10 seconds if timeout is not zero;
 * otherwise clear the time limit.
 *
 */
static void set_timer (int timeout)
{

    limit = (timeout != 0) ? get_current_time () + timeout : 0;

}/* set_timer */

/*
 * time_limit_hit
 *
 * Return true if a previously set time limit has been exceeded.
 *
 */
static bool out_of_time (void)
{

    if (limit != 0) {

    long now = get_current_time ();

    if (now < 1L * 3600 * 10 && limit > 23L * 3600 * 10)
        now += 24L * 3600 * 10;

    return now >= limit;

    } else return FALSE;

}/* out_of_time */

/*
 * get_key
 *
 * Read a keypress or a mouse click. Returns...
 *
 *  ZC_TIME_OUT = time limit exceeded,
 *  ZC_BACKSPACE = the backspace key,
 *  ZC_RETURN = the return key,
 *  ZC_HKEY_MIN...ZC_HKEY_MAX = a hot key,
 *  ZC_ESCAPE = the escape key,
 *  ZC_ASCII_MIN...ZC_ASCII_MAX = ASCII character,
 *  ZC_ARROW_MIN...ZC_ARROW_MAX = an arrow key,
 *  ZC_FKEY_MIN...ZC_FKEY_MAX = a function key,
 *  ZC_NUMPAD_MIN...ZC_NUMPAD_MAX = a number pad key,
 *  ZC_SINGLE_CLICK = single mouse click,
 *  ZC_DOUBLE_CLICK = double mouse click,
 *  ZC_LATIN1_MIN+1...ZC_LATIN1_MAX = ISO Latin-1 character,
 *  SPECIAL_KEY_MIN...SPECIAL_KEY_MAX = a special editing key.
 *
 */

static int get_key (bool cursor)
{
    int key = 0;		// <- avoid compiler warning 'referd but not assigned'; 0 is equal to ZC_TIME_OUT
    cursor = out_of_time ();	// <- has not a function, but avoid some other compiler warnings.

#if 0			/* <-- routine is disabled. why? */
    static byte arrow_key_map[] = {
    0x48, 0x50, 0x4b, 0x4d
    };
    static byte special_key_map[] = {
    0x47, 0x4f, 0x73, 0x74, 0x53, 0x52, 0x49, 0x51, 0x0f
    };
    static byte hot_key_map[] = {
    0x13, 0x19, 0x1f, 0x16, 0x31, 0x2d, 0x20, 0x23
    };

    /* Loop until a key was pressed */

    if (cursor)
    switch_cursor (TRUE);

    if (h_flags & MOUSE_FLAG) {
    asm mov ax,1
    asm int 0x33
    }

    do {

    if (_bios_keybrd (_KEYBRD_READY)) {

        word code = _bios_keybrd (_KEYBRD_READ);

        if (byte0 (code) != 0 && byte0 (code) != 9) {

        for (key = ZC_NUMPAD_MIN; key <= ZC_NUMPAD_MAX; key++)
            if (byte0 (code) == key - ZC_NUMPAD_MIN + '0' && byte1 (code) >= 0x10)
            goto exit_loop;

        for (key = ZC_LATIN1_MIN + 1; key <= ZC_LATIN1_MAX; key++)
            if (byte0 (code) == latin1_to_ibm[key - ZC_LATIN1_MIN])
            goto exit_loop;

        key = byte0 (code);

        if (key == ZC_BACKSPACE)
            goto exit_loop;
        if (key == ZC_RETURN)
            goto exit_loop;
        if (key == ZC_ESCAPE)
            goto exit_loop;
        if (key >= ZC_ASCII_MIN && key <= ZC_ASCII_MAX)
            goto exit_loop;

        } else {

        for (key = ZC_ARROW_MIN; key <= ZC_ARROW_MAX; key++)
            if (byte1 (code) == arrow_key_map[key - ZC_ARROW_MIN])
            goto exit_loop;

        for (key = ZC_FKEY_MIN; key <= ZC_FKEY_MAX - 2; key++)
           if (byte1 (code) == key - ZC_FKEY_MIN + 0x3b)
            goto exit_loop;

        for (key = ZC_HKEY_MIN; key <= ZC_HKEY_MAX; key++)
            if (byte1 (code) == hot_key_map[key - ZC_HKEY_MIN])
            goto exit_loop;

        for (key = SPECIAL_KEY_MIN; key <= SPECIAL_KEY_MAX; key++)
            if (byte1 (code) == special_key_map[key - SPECIAL_KEY_MIN])
            goto exit_loop;

        }

    } else {

        int clicks = read_mouse ();

        if (clicks == 1)
        { key = ZC_SINGLE_CLICK; goto exit_loop; }
        if (clicks == 2)
        { key = ZC_DOUBLE_CLICK; goto exit_loop; }

    }

    key = ZC_TIME_OUT;

    } while (!out_of_time ());

exit_loop:

    if (h_flags & MOUSE_FLAG) {
    asm mov ax,2
    asm int 0x33
    }

    if (cursor)
    switch_cursor (FALSE);
#endif
    return key;

}/* get_key */

#if 0
/*
 * cursor_left
 *
 * Move the cursor one character to the left.
 *
 */

static void cursor_left (void)
{

    if (input.pos > 0)
    cursor_x -= os_char_width (input.buffer[--input.pos]);

}/* cursor_left */

/*
 * cursor_right
 *
 * Move the cursor one character to the right.
 *
 */

static void cursor_right (void)
{

    if (input.pos < input.length)
    cursor_x += os_char_width (input.buffer[input.pos++]);

}/* cursor_right */

/*
 * first_char
 *
 * Move the cursor to the beginning of the input line.
 *
 */

static void first_char (void)
{

    while (input.pos > 0)
    cursor_left ();

}/* first_char */

/*
 * last_char
 *
 * Move the cursor to the end of the input line.
 *
 */

static void last_char (void)
{

    while (input.pos < input.length)
    cursor_right ();

}/* last_char */

/*
 * prev_word
 *
 * Move the cursor to the start of the previous word.
 *
 */

static void prev_word (void)
{

    do {

    cursor_left ();

    if (input.pos == 0)
        return;

    } while (input.buffer[input.pos] == ' ' || input.buffer[input.pos - 1] != ' ');

}/* prev_word */

/*
 * next_word
 *
 * Move the cursor to the start of the next word.
 *
 */

static void next_word (void)
{

    do {

    cursor_right ();

    if (input.pos == input.length)
        return;

    } while (input.buffer[input.pos] == ' ' || input.buffer[input.pos - 1] != ' ');

}/* next_word */

/*
 * input_move
 *
 * Helper function to move parts of the input buffer:
 *
 *    newc != 0, oldc == 0: INSERT
 *    newc != 0, oldc != 0: OVERWRITE
 *    newc == 0, oldc != 0: DELETE
 *    newc == 0, oldc == 0: NO OPERATION
 *
 */

#define H(x) (x ? 1 : 0)

static void input_move (zchar newc, zchar oldc)
{
    int newwidth = (newc != 0) ? os_char_width (newc) : 0;
    int oldwidth = (oldc != 0) ? os_char_width (oldc) : 0;

    zchar *p = input.buffer + input.pos;

    int saved_x = cursor_x;

    int updated_width = input.width + newwidth - oldwidth;
    int updated_length = input.length + H (newc) - H (oldc);

    if (updated_width > input.max_width)
    return;
    if (updated_length > input.max_length)
    return;

    input.width = updated_width;
    input.length = updated_length;

    if (oldc != 0 && newc == 0)
    memmove (p, p + 1, updated_length - input.pos + 1);
    if (newc != 0 && oldc == 0)
    memmove (p + 1, p, updated_length - input.pos);

    if (newc != 0)
    *p = newc;

    os_display_string (p);

    switch_scrn_attr (TRUE);

    if (oldwidth > newwidth)

    os_erase_area (
        cursor_y + 1,
        cursor_x + 1,
        cursor_y + h_font_height,
        cursor_x + oldwidth - newwidth);

    switch_scrn_attr (FALSE);

    cursor_x = saved_x;

    if (newc != 0)
    cursor_right ();

}/* input_move */

#undef H(x)

/*
 * delete_char
 *
 * Delete the character below the cursor.
 *
 */

static void delete_char (void)
{

    input_move (0, input.buffer[input.pos]);

}/* delete_char */

/*
 * delete_left
 *
 * Delete the character to the left of the cursor.
 *
 */

static void delete_left (void)
{

    if (input.pos > 0) {
    cursor_left ();
    delete_char ();
    }

}/* delete_left */

/*
 * truncate_line
 *
 * Truncate the input line to n characters.
 *
 */

static void truncate_line (int n)
{

    last_char ();

    while (input.length > n)
    delete_left ();

}/* truncate_line */

/*
 * insert_char
 *
 * Insert a character into the input buffer.
 *
 */

static void insert_char (zchar newc)
{
    zchar oldc = 0;

    if (overwrite)
    oldc = input.buffer[input.pos];

    input_move (newc, oldc);

} /* insert_char */

/*
 * insert_string
 *
 * Add a string of characters to the input line.
 *
 */

static void insert_string (const zchar *s)
{

    while (*s != 0) {

    if (input.length + 1 > input.max_length)
        break;
    if (input.width + os_char_width (*s) > input.max_width)
        break;

    insert_char (*s++);

    }

}/* insert_string */

/*
 * tabulator_key
 *
 * Complete the word at the end of the input line, if possible.
 *
 */

static void tabulator_key (void)
{
    int status;

    if (input.pos == input.length) {

    zchar extension[10];

    status = completion (input.buffer, extension);
    insert_string (extension);

    } else status = 2;

    /* Beep if the completion was impossible or ambiguous */

    if (status != 0)
    os_beep (status);

}/* tabulator_key */

/*
 * store_input
 *
 * Copy the current input line to the history buffer.
 *
 */

static void store_input (void)
{

    if (input.length >= HISTORY_MIN_ENTRY) {

    const zchar *ptr = input.buffer;

    do {

        if (history.latest++ == HISTORY_BUFSIZE - 1)
        history.latest = 0;

        history.buffer[history.latest] = *ptr;

    } while (*ptr++ != 0);

    }

}/* store_input */

/*
 * fetch_entry
 *
 * Copy the current history entry to the input buffer and check if it
 * matches the prefix in the input buffer.
 *
 */

static bool fetch_entry (zchar *buf, int entry)
{
    int i = 0;

    zchar c;

    do {

    if (entry++ == HISTORY_BUFSIZE - 1)
        entry = 0;

    c = history.buffer[entry];

    if (i < history.prefix_len && input.buffer[i] != c)
        return FALSE;

    buf[i++] = c;

    } while (c != 0);

    return (i > history.prefix_len) && (i > 1);

}/* fetch_entry */

/*
 * get_prev_entry
 *
 * Copy the previous history entry to the input buffer.
 *
 */

static void get_prev_entry (void)
{
    zchar buf[INPUT_BUFFER_SIZE];

    int i = history.current;

    do {

    do {

        if (i-- == 0)
        i = HISTORY_BUFSIZE - 1;

        if (i == history.latest)
        return;

    } while (history.buffer[i] != 0);

    } while (!fetch_entry (buf, i));

    truncate_line (history.prefix_len);

    insert_string (buf + history.prefix_len);

    history.current = i;

}/* get_prev_entry */

/*
 * get_next_entry
 *
 * Copy the next history entry to the input buffer.
 *
 */

static void get_next_entry (void)
{
    zchar buf[INPUT_BUFFER_SIZE];

    int i = history.current;

    truncate_line (history.prefix_len);

    do {

    do {

        if (i == history.latest)
        return;

        if (i++ == HISTORY_BUFSIZE - 1)
        i = 0;

    } while (history.buffer[i] != 0);

    if (i == history.latest)
        goto no_further;

    } while (!fetch_entry (buf, i));

    insert_string (buf + history.prefix_len);

no_further:

    history.current = i;

}/* get_next_entry */

#endif

/*
 * os_read_line
 *
 * Read a line of input from the keyboard into a buffer. The buffer
 * may already be primed with some text. In this case, the "initial"
 * text is already displayed on the screen. After the input action
 * is complete, the function returns with the terminating key value.
 * The length of the input should not exceed "max" characters plus
 * an extra 0 terminator.
 *
 * Terminating keys are the return key (13) and all function keys
 * (see the Specification of the Z-machine) which are accepted by
 * the is_terminator function. Mouse clicks behave like function
 * keys except that the mouse position is stored in global variables
 * "mouse_x" and "mouse_y" (top left coordinates are (1,1)).
 *
 * Furthermore, Frotz introduces some special terminating keys:
 *
 *     ZC_HKEY_PLAYBACK (Alt-P)
 *     ZC_HKEY_RECORD (Alt-R)
 *     ZC_HKEY_SEED (Alt-S)
 *     ZC_HKEY_UNDO (Alt-U)
 *     ZC_HKEY_RESTART (Alt-N, "new game")
 *     ZC_HKEY_QUIT (Alt-X, "exit game")
 *     ZC_HKEY_DEBUGGING (Alt-D)
 *     ZC_HKEY_HELP (Alt-H)
 *
 * If the timeout argument is not zero, the input gets interrupted
 * after timeout/10 seconds (and the return value is 0).
 *
 * The complete input line including the cursor must fit in "width"
 * screen units.
 *
 * The function may be called once again to continue after timeouts,
 * misplaced mouse clicks or hot keys. In this case the "continued"
 * flag will be set. This information can be useful if the interface
 * implements input line history.
 *
 * The screen is not scrolled after the return key was pressed. The
 * cursor is at the end of the input line when the function returns.
 *
 * Since Inform 2.2 the helper function "completion" can be called
 * to implement word completion (similar to tcsh under Unix).
 *
 */

#define new_history_search() \
    { history.prefix_len = input.pos; history.current = history.latest; }

/*
  TODO:
    - time out
    - countinue
    - word completion
    - allow editing in normal text screen
    - support width
    - mouse
 */
zchar os_read_line (int max, zchar *buf, int timeout, int width, int continued)
{
    int key = continued ? 9999 : 0;
    key = key;	// <- avoid compiler warnings

    /* Initialise input variables */

    input.buffer = buf;
    input.pos = strlen ((char *) buf);
    input.length = strlen ((char *) buf);
    input.max_length = max;
    input.width = os_string_width (buf);
    input.max_width = width - os_char_width (' ');

    /* XXX: Can go, if we have no seperate input line */
    @call FrotzInput::MSG_VIS_TEXT_REPLACE_ALL_PTR( buf, 0 );

    /* Calculate time limit */

    set_timer (timeout);

    /* Try to grab the semaphore.  If we cannot, then the user has
       not finished an input and this thread blocks until the user
       presses a terminating key in the FrotzInput object. */
    ThreadPSem( waitForInputSem );

    /* Get the text from the FrotzInput object. */
    @call FrotzInput::MSG_VIS_TEXT_GET_ALL_PTR( buf );

    /* Copy input in current window. */
//    os_display_string( buf );

    if ( ZC_RETURN == current_key ) {
//                store_input ();
    }

//    last_char ();

    /* Return terminating key */
    return current_key;

} /* os_read_line */

//#undef new_history_search()

/*
 * os_read_key
 *
 * Read a single character from the keyboard (or a mouse click) and
 * return it. Input aborts after timeout/10 seconds.
 *
 */

zchar os_read_key (int timeout, bool cursor)
{
    int key;

    set_timer (timeout);

    do {

    key = get_key (cursor);

    } while (key > 0xff);

    return key;

}/* os_read_key */






@classdecl FrotzInputTextClass;


/***********************************************************************
    MSG_META_KBD_CHAR
------------------------------------------------------------------------

REVISION HISTORY:
    Date      Name      Description
    --------  --------  -----------
    98-06-06  GerdB     Initial version.

***********************************************************************/
@method FrotzInputTextClass, MSG_META_KBD_CHAR
/*  void
    (
    word character
    word flags
    word state
    ) */
{
    Boolean handled = FALSE;
    byte key = (byte) character;

    // VisTextKeyFunction keyFunc = 0;
    // word               data = 0;

    /* Don't do anything if the key is released. */
    if ( ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) & flags ) {
        /* Handle keystrokes. */
        switch( 0x00ff & character )
        {
          case VC_UP:
          case VC_PREVIOUS:
            @call FrotzText::MSG_VIS_TEXT_SCROLL_PAGE_UP();
            handled = TRUE;             /* Don't send to superclass. */
            break;

          case VC_DOWN:
          case VC_NEXT:
            @call FrotzText::MSG_VIS_TEXT_SCROLL_PAGE_DOWN();
            handled = TRUE;             /* Don't send to superclass. */
            break;

          case VC_TAB:
            handled = TRUE;             /* Eat TAB. */
            break;
        }
    }

    if (!handled) {
        @callsuper();
    }

    /* Translate GEOS characters to Zmachine characters. */
    current_key = key;

    /* Don't do anything if the key is released. */
    if ( ( CF_FIRST_PRESS | CF_REPEAT_PRESS ) & flags ) {

        if ( is_terminator( key ) ) {
            /* Release the semaphore. */
            ThreadVSem( waitForInputSem );
        }
    }

} /* MSG_META_KBD_CHAR */


