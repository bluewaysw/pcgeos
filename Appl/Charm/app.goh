/********************************************************************
 *
 * PROJECT:     Character Map
 * MODULE:      Application Header
 * FILE:        app.goh
 *
 * AUTHOR:      Nathan Fiedler
 *
 * REVISION HISTORY:
 *      Name    	Date            Description
 *      ----    	----            -----------
 *      NF      	9/23/96         Initial version
 *	NF?		11/13/96 	Version 1.0
 *	NF? 		2/8/97 		Version 1.0.1
 *					- Made font size larger on desktop and Zoomer versions.
 *	Derrick	Renaud 	2/15/97 	Version 1.0.2
 *					- added the double-click feature.
 *	Derrick Renaud 	2/22/97 	Version 1.1.0
 *					- added the drag-and-drop feature.
 *					- added the icon for the desktop.
 * 	Derrick Renaud 	11/4/97 	Version 1.12.0 (11/4/97)
 *					- added icons for all formats.
 *					- Derrick Renaud fixed minor bugs.
 *					- Derrick Renaud added help context.
 *	RainerB		11/11/2023 	Version 2.0 (11/11/2023)
 *					- added some new features:
 *					    + Settings menu to switch on and off the new features.
 *					    + Reactivate the multiple character mode with double-click feature.
 *					    + Modified characters may be drawn in bold.
 *					    + Display character codes (dec, hex, okt).
 *					    + Three different character box sizes.
 *					    + Allow setting an initial font other than mono spaced.
 *					    + ...
 *					 - fixes some bugs.
 * 	RainerB		12/05/2023	Some changes for FreeGEOS 6.0 release.
 *
 * DESCRIPTION:
 *      This file is the application header file. It contains the
 *      constants, data type definitions, and class definitions.
 *
 *******************************************************************/

#ifndef __APP_GOH
#define __APP_GOH

  /*
   * Search other files for "platform" to find code that
   * cannot be conditionally compiled.
   */
#define DESKTOP
@define DESKTOP

   /*
    * Disable some UI fetures if (UserGetDefaultUILevel() == UIIL_INTRODUCTORY)
    * But this is in contradiction to the help file. Therefore it is set to zero.
    */
@define SUPPORT_CHECK_INTRODUCTORY_LEVEL	0
	

/*
#define ZOOMER
@define ZOOMER
#define OMNIGO
@define OMNIGO
*/

/********************************************************************
 *              Constants
 *******************************************************************/
      /* Box height and width in points. */
      /* Initial values are written with _I_ and correspond to 
       * the smallest box size. They are managed in global variables. */
#ifdef DESKTOP
    #define CHARM_I_BOX_WIDTH  18
    #define CHARM_I_BOX_HEIGHT 18
#endif
#ifdef ZOOMER
    #define CHARM_I_BOX_WIDTH  14
    #define CHARM_I_BOX_HEIGHT 15
#endif
#ifdef OMNIGO
    #define CHARM_I_BOX_WIDTH  14
    #define CHARM_I_BOX_HEIGHT 12
#endif

      /* Magnified character size. */
    #define CHARM_I_MAG_HEIGHT 34
    #define CHARM_I_MAG_WIDTH  34

      /* Default point size of map text. */
#ifdef DESKTOP
    #define CHARM_I_MAP_TEXT_POINT_SIZE 14
#endif
#ifdef ZOOMER
    #define CHARM_I_MAP_TEXT_POINT_SIZE 12
#endif
#ifdef OMNIGO
    #define CHARM_I_MAP_TEXT_POINT_SIZE 9
#endif
    #define CHARM_I_MAP_MAG_TEXT_SIZE   27

      /* Map height and width in boxes. */
    #define CHARM_MAP_HEIGHT 14
    #define CHARM_MAP_WIDTH  16

      /* Boundaries of the map. */
    #define CHARM_MAP_LEFT   0	
    #define CHARM_MAP_TOP    0	
    #define CHARM_I_MAP_RIGHT  ( CHARM_I_BOX_WIDTH * CHARM_MAP_WIDTH)
    #define CHARM_I_MAP_BOTTOM ( CHARM_I_BOX_HEIGHT * CHARM_MAP_HEIGHT)

      /* Size of map in points. */
    #define CHARM_I_MAP_PT_HEIGHT   ( CHARM_I_MAP_BOTTOM - CHARM_MAP_TOP )
    #define CHARM_I_MAP_PT_WIDTH    ( CHARM_I_MAP_RIGHT - CHARM_MAP_LEFT )    




      /* Identifer for Settings menu - values are also stored in settings_g variable */
    #define CHARM_MAP_SMALL_BOX		1
    #define CHARM_MAP_MEDIUM_BOX	2
    #define CHARM_MAP_LARGE_BOX		3
    #define CHARM_DEFAULT_BOX_SIZE	(CHARM_MAP_MEDIUM_BOX)
    #define CHARM_MAP_BOX_SIZE_MASK	0x0F
    
    #define CHARM_SHOW_FONT_MENU	0x010
    #define CHARM_SHOW_CHAR_CODES	0x020
    #define CHARM_MAG_CHARS_BOLD	0x040
    #define CHARM_ALLOW_MULTIPLE_CHARS	0x080
    #define CHARM_COPY_ALWAYS_12PT	0x100
    #define CHARM_AUTO_COPY_TO_CLIPBOARD	0x200
    #define CHARM_DEFAULT_MORE_OPTIONS ( CHARM_SHOW_FONT_MENU | CHARM_SHOW_CHAR_CODES | CHARM_COPY_ALWAYS_12PT)
    #define CHARM_MORE_OPTIONS_MASK	0xFF0
	    

/********************************************************************
 *              Data Types
 *******************************************************************/
      /* Shortcut character type. Used to show the keystroke
       * used to generate a particular character. */
    typedef struct {
        ShiftState    CMCT_states;
        unsigned char CMCT_accent;
        unsigned char CMCT_char;
    } CMCharType;

/********************************************************************
 *              Class Definitions
 *******************************************************************/
      /* This does some startup and shutdown stuff and handles the menu triggers. */
    @class CMProcessClass, GenProcessClass;
    @message (GEN_ITEM_GROUP_APPLY_MSG) MSG_CM_PROCESS_BOX_SIZE_CHANGED;
    @message (GEN_BOOLEAN_GROUP_APPLY_MSG) MSG_CM_PROCESS_MORE_OPTIONS_CHANGED;
    @message void MSG_CM_PROCESS_RESIZE_WIN();    
    @message void MSG_CM_PROCESS_SET_DEFAULT_FONT(word fid);    
    @endc;

    @class CMGenPrimaryClass, GenPrimaryClass;
    @endc;

      /* Need to intercept a couple of messages. */
    @class CMTextClass, GenTextClass;
      /* Copy text object to clipboard. */
    @message void MSG_CM_TEXT_COPY_TEXT();
    @endc;

      /* Map class - Manages character map and
       * does most of the work. */
    @class CMMapClass, VisContentClass;
      /* Changes the font used to draw with. */
    @message void MSG_CM_MAP_CHANGE_FONT( FontID fid );
    @message FontID MSG_CM_MAP_GET_CUR_FONT();
      /* Returns the font used to draw with. */
    @message void MSG_CM_MAP_REDRAW();
      /* Forces redraw of two magchar regions. */
    @message void MSG_CM_MAP_REDRAW_MAG_CHAR();
      /* Copy selected character to text object. */
    @message void MSG_CM_MAP_SELECT_CHAR(Boolean single_char_mode_only);
      /* Create/destroy the pointer definition table. */
    @message void MSG_CM_MAP_CREATE_POINTER_DEF();
    @message void MSG_CM_MAP_DESTROY_POINTER_DEF();
      /* Mouse pointer image manipulation messages. */
    @message void MSG_CM_MAP_SET_POINTER_IMAGE();
    @message void MSG_CM_MAP_RESET_POINTER_IMAGE();
    @message void MSG_CM_MAP_COPY_TO_CLIPBOARD();
    
    
          /* Current and previous characters. */
        @instance unsigned char CMMI_crCurrent;
        @instance unsigned char CMMI_crPrevious;
          /* Current font ID to draw with. */
        @instance FontID CMMI_curFont = FID_DTC_URW_MONO;
          /* TRUE if user is dragging mouse or cursoring around. */
        @instance Boolean CMMI_bDragging;
        @instance Boolean CMMI_bCursoring;
          /* Mouse pointer image definition. */
        @instance optr CMMI_odPtrDef;
    @endc;

      /* Optimize drawing by creating row objects. */
    @class CMRowClass, VisClass;
          /* Character at start of row. */
        @instance unsigned char CMRI_crStart;
    @endc;

#endif

