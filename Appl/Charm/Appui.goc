/********************************************************************
 *
 * PROJECT:     Character Map
 * MODULE:      Primary static objects
 * FILE:        appUI.goc
 *
 * AUTHOR:      Nathan Fiedler
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      9/23/96         Initial version
 *	RainerB	11/11/2023	Add some new features, in particular 
 *				allow different character box sizes
 *				ans a settings menu.
 *
 * DESCRIPTION:
 *      This program is very much like the Windows program which
 *      allows you to see and copy characters, particularly the
 *      extended characters. Often times you want to type an
 *      extended character but can't remember the keyboard key
 *      sequence to create the character. Character Map makes this
 *      task much easier by letting you see all of the characters
 *      and showing you what the key sequence is. You can also
 *      copy the selected characters to the clipboard to be pasted
 *      into your favorite GEOS application.
 *
 *      This module contains all the primary static objects. That
 *      includes the map and row objects. Also included is the
 *      table that defines the keystrokes for all of the characters
 *      from 32 up to 255.
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
@include <stdapp.goh>
@include <Objects/Text/tCtrlC.goh>
#include <gstring.h>
@include "app.goh"


/********************************************************************
 *              AppMonikerResource Resource
 *******************************************************************/
@ifdef DESKTOP
@start AppMonikerResource, data;
@include "Art/appicon.goh"  /* Platform: DESKTOP only */
@end AppMonikerResource;
@endif

/********************************************************************
 *              DataResource Resource - localizable strings
 *******************************************************************/
@start DataResource, data;

    @chunk char InfoBoldChars[] = "Please note that some fonts do not support the 'bold' text style.";
    @localize "This info is given to the user when he selects bold magnified characters";
    
    @chunk char InfoMultipleChars[] = "Use the \"Select\" button in the menu bar to copy the selected character \
to the \"Characters to copy\" field.\rYou may also double-click on a character or simply press Enter to do that.";
    @localize "This info is given to the user when he switches to allow multiple characters.";
    
    @chunk char InfoDynamicPointSize[] = "The point size of the text copied to the clipboard now depends on the character box size.";
    
    @chunk char CMTextMonikerCallerNotSys[] = "Insert Special character";
    @localize "Name of application when called from another application, such as GeoWrite.";

    @chunk char CMInsertTriggerMonikerNotSys[] = "Insert into Document";
    @localize "Caption for Insert into Document trigger.";
    
    @visMoniker CMCopyToClipboardMoniker = 'o',"Copy to Clipboard";
    
@end DataResource;


/********************************************************************
 *              Class Declarations
 *******************************************************************/
    @classdecl CMProcessClass, neverSaved;
    @classdecl CMMapClass;
    @classdecl CMRowClass;
    @classdecl CMTextClass;
    @classdecl CMGenPrimaryClass;


/********************************************************************
 *              Method Declarations
 *******************************************************************/
    @extern method CMProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION;
    @extern method CMProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION;
    @extern method CMProcessClass, MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE;
    @extern method CMProcessClass, MSG_NOTIFY_APP_EXITED;
    @extern method CMProcessClass, MSG_CM_PROCESS_BOX_SIZE_CHANGED;
    @extern method CMProcessClass, MSG_CM_PROCESS_MORE_OPTIONS_CHANGED;
    @extern method CMProcessClass, MSG_CM_PROCESS_RESIZE_WIN;
    @extern method CMProcessClass, MSG_CM_PROCESS_SET_DEFAULT_FONT;
    @extern method CMMapClass, MSG_META_START_SELECT;
    @extern method CMMapClass, MSG_META_START_MOVE_COPY;
    @extern method CMMapClass, MSG_META_DRAG_SELECT;
    @extern method CMMapClass, MSG_META_PTR;
    @extern method CMMapClass, MSG_META_END_SELECT;
    @extern method CMMapClass, MSG_META_KBD_CHAR;
/*    @extern method CMMapClass, MSG_META_GAINED_TARGET_EXCL; */
    @extern method CMMapClass, MSG_VIS_DRAW;
    @extern method CMMapClass, MSG_CM_MAP_CHANGE_FONT;
    @extern method CMMapClass, MSG_CM_MAP_GET_CUR_FONT;
    @extern method CMMapClass, MSG_CM_MAP_REDRAW;
    @extern method CMMapClass, MSG_CM_MAP_REDRAW_MAG_CHAR;
    @extern method CMMapClass, MSG_CM_MAP_SELECT_CHAR;
    @extern method CMMapClass, MSG_CM_MAP_CREATE_POINTER_DEF;
    @extern method CMMapClass, MSG_CM_MAP_DESTROY_POINTER_DEF;
    @extern method CMMapClass, MSG_CM_MAP_SET_POINTER_IMAGE;
    @extern method CMMapClass, MSG_CM_MAP_RESET_POINTER_IMAGE;
    @extern method CMMapClass, MSG_CM_MAP_COPY_TO_CLIPBOARD;

    @extern method CMRowClass, MSG_VIS_DRAW;

    @extern method CMTextClass, MSG_VIS_TEXT_SET_FONT_ID;
    @extern method CMTextClass, MSG_CM_TEXT_COPY_TEXT;

    @extern method CMGenPrimaryClass, MSG_META_GAINED_TARGET_EXCL;

/********************************************************************
 *              Global Variable Definitions
 *******************************************************************/
      /*
       * acrShortcut_g - Shortcut keystroke text string.
       * settings_g - Currently used settings.
       */
    char acrShortcut_g[30];
    word settings_g;
      /* 
       * To make the box size variable, we need some global variables.
       */
    word charm_box_width_g = CHARM_I_BOX_WIDTH;	/* box size */
    word charm_box_height_g = CHARM_I_BOX_HEIGHT;	
    word charm_mag_width_g = CHARM_I_MAG_WIDTH;	
    word charm_mag_height_g = CHARM_I_MAG_HEIGHT;	
    word charm_map_text_point_size_g = CHARM_I_MAP_TEXT_POINT_SIZE;	/* Text font size in point */
    word charm_map_mag_text_point_size_g = CHARM_I_MAP_MAG_TEXT_SIZE;
    word charm_map_right_g = CHARM_I_MAP_RIGHT;		/* right/bottom border of the whole map (top/left == 0) */
    word charm_map_bottom_g = CHARM_I_MAP_BOTTOM;
    word charm_map_pt_height_g = CHARM_I_MAP_PT_HEIGHT;		/* map size in points */
    word charm_map_pt_width_g = CHARM_I_MAP_PT_WIDTH;
    

/********************************************************************
 *              Static Object Resources
 *******************************************************************/


/********************************************************************
 *              Application Resource
 *******************************************************************/
@start Application;

  /* Application object */
@object GenApplicationClass CMApplication = {
@ifdef DESKTOP
    GI_visMoniker = list { @CMTextMoniker,
			   @CharmSCMoniker,
			   @CharmSMMoniker,
			   @CharmSCGAMoniker,
			   @CharmTCMoniker,
			   @CharmTMMoniker,
			   @CharmTCGAMoniker};
@else
    GI_visMoniker = list { @CMTextMoniker };
@endif
    GI_comp = @CMPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
	@CMPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS ) =
	@CMFontControl,@CMFontControl2;
	/* We set the help file name in the application class, otherwise the
	 * help-contents trigger will look for the wrong help file. */
    ATTR_GEN_HELP_FILE = "map";
}

@visMoniker CMTextMoniker = "Character Map";
@localize { "Name of the application when launched by the GeoManager." };

@end Application;

/********************************************************************
 *              Interface Resource
 *******************************************************************/
@start Interface;

@object GenPrimaryClass CMPrimary = 
{
    GI_comp = @CMFontControl2,
    	      @CMFontControlDB,
    	      @CMMessageBox,
              @CMSelectTrigger,
              @CMOptionsMenu,
	      @CMTopGroup,
	      @CMView,
	      @CMBottomGroup,
	      @TriggerGroup;
    GI_states = @default & ~ GS_USABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    HINT_CENTER_CHILDREN_HORIZONTALLY;
@ifdef OMNIGO
    HINT_MINIMIZE_CHILD_SPACING;
@endif
@ifdef DESKTOP
    ATTR_GEN_DISPLAY_NOT_MAXIMIZABLE; 
@endif
    ATTR_GEN_HELP_CONTEXT = "TOC";
    /*
    HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT = { SWSS_RATIO | PCT_25,
						SWSS_RATIO | PCT_5 };
    */
    ATTR_GEN_HELP_FILE = "map";
}

/*
 ************* TopGroup and related objetcs ************* 
 */
@object GenInteractionClass CMTopGroup = {
    GI_comp = @CMCharsToCopyText,
    	      @CMTopSpacer,
	      @CMFontContainer;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object CMTextClass CMCharsToCopyText = {
    GI_visMoniker = "Characters to copy:";
    @localize { "Name of text field for copying characters to clipboard." };
    HINT_PLACE_MONIKER_ABOVE;
    GTXI_text = "";
    GI_attrs = @default | GA_TARGETABLE;
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    ATTR_GEN_TEXT_MULTIPLE_CHAR_ATTR_RUNS = OptrToChunk(@ParaCharAttrRuns);
    HINT_INITIAL_SIZE = {
	SST_AVG_CHAR_WIDTHS | 20,
	SST_LINES_OF_TEXT | 1,
	0
    };
    HINT_TEXT_WHITE_WASH_COLOR;
@ifdef OMNIGO
    HINT_TEXT_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;
@endif
}

@CHAR_ATTR_ELEMENT_ARRAY_HEADER ParaCharAttrElements = {
    CHAR_ATTR_FONT_SIZE( FID_DTC_URW_MONO, 12 )
};
@RUN_ARRAY_HEADER(ParaCharAttrElements) ParaCharAttrRuns = {
    TRAE_ALL( 0 ),
    TRAE_END
};

@object GenGlyphClass CMTopSpacer = {
    GI_visMoniker = "    ";
}

@object GenToolGroupClass CMFontContainer = {
    HINT_PLACE_MONIKER_ABOVE;
    GI_visMoniker = 'S', "Select Font:";
    GTGI_controller = @CMFontControl;
    HINT_SAME_ORIENTATION_AS_PARENT;
}
	/*
	 * We have the main FontControl in a hidden dialog box so that the 
	 * FontControlTool (CMFontContainer) always remains usable.
	 * A 2nd FontControl is located in the menu bar. This can be marked 
	 * as 'not visible' via the settings menu without affecting the 
	 * CMFontContainer.
	 */
@object GenInteractionClass CMFontControlDB = {
    GI_comp = @CMFontControl;
    GI_attrs = @default | GA_TARGETABLE;
    GII_visibility = GIV_DIALOG;
    GII_attrs = GIA_NOT_USER_INITIATABLE;
}
@object FontControlClass CMFontControl = {
    GI_states = @default | GS_ENABLED;
    GII_visibility = GIV_POPUP;
    GCI_output = @CMCharsToCopyText;
    }; 
@object FontControlClass CMFontControl2 = {
    GI_states = @default | GS_ENABLED;
    GI_visMoniker = 'o', "Font";
    @localize { "Menu to let user select different fonts." };
    GII_visibility = GIV_POPUP;
    GCI_output = @CMCharsToCopyText;
    }; 

/*
 ************* Menu stuff ************* 
 */

@object GenTriggerClass CMSelectTrigger = {
    GI_visMoniker = 'S', "Select";
    @localize { "Button to copy the current character to the \
text field." };
    GTI_destination = @CMMap;
    GTI_actionMsg = MSG_CM_MAP_SELECT_CHAR;
    ATTR_GEN_TRIGGER_ACTION_DATA = FALSE;
    HINT_SEEK_MENU_BAR;
}

@object GenInteractionClass CMOptionsMenu = {
    GI_visMoniker = 't',"Settings";
    GI_comp = @CMMoreOptionsGroup, @CMOptionsSubGroup;
    GII_visibility = GIV_POPUP;
}
@object GenInteractionClass CMOptionsSubGroup = {
    GI_comp = @CMBoxSizeGroup,@CMDefaultFontGroup;
}
@object GenInteractionClass CMBoxSizeGroup = {
    GI_visMoniker = 'S', "Character Box Size";
    GII_visibility = GIV_POPUP;
    GI_comp = @CMBoxSizeSelector;
}
@object GenItemGroupClass CMBoxSizeSelector = {
    GI_comp = @SmallBoxSize,@MediumBoxSize,@LargeBoxSize;
    GIGI_selection = CHARM_DEFAULT_BOX_SIZE;
    GIGI_destination = process;
    GIGI_applyMsg = MSG_CM_PROCESS_BOX_SIZE_CHANGED;
}
@object GenItemClass SmallBoxSize = {
    GI_visMoniker = 'S', "Small Box";
    GII_identifier = CHARM_MAP_SMALL_BOX;
}
@object GenItemClass MediumBoxSize = {
    GI_visMoniker = 'M', "Medium Box";
    GII_identifier = CHARM_MAP_MEDIUM_BOX;
}
@object GenItemClass LargeBoxSize = {
    GI_visMoniker = 'L', "Large Box";
    GII_identifier = CHARM_MAP_LARGE_BOX;
}

@object GenBooleanGroupClass CMMoreOptionsGroup = {
    GI_comp = 	@CMFontMenuBoolean, @CMCodeGroupBoolean,
    		@CMBigCharsBoolean,@CMAllowMultipleBoolean,
    		@CMAllways12PtBoolean,@CMAutoCopyBoolean;
    GBGI_selectedBooleans = CHARM_DEFAULT_MORE_OPTIONS;
    GBGI_destination = process;
    GBGI_applyMsg = MSG_CM_PROCESS_MORE_OPTIONS_CHANGED;
}
@object GenBooleanClass CMFontMenuBoolean = {
    GI_visMoniker = 'F',"Show Font Menu Item";
    GBI_identifier = CHARM_SHOW_FONT_MENU;
}
@object GenBooleanClass CMCodeGroupBoolean = {
    GI_visMoniker = 'C',"Show Character Codes";
    GBI_identifier = CHARM_SHOW_CHAR_CODES;
}
@object GenBooleanClass CMBigCharsBoolean = {
    GI_visMoniker = 'B',"Magnified Characters Bold";
    GBI_identifier = CHARM_MAG_CHARS_BOLD;
}
@object GenBooleanClass CMAllowMultipleBoolean = {
    GI_visMoniker = 'A',"Allow Multiple Characters";
    GBI_identifier = CHARM_ALLOW_MULTIPLE_CHARS;
}
@object GenBooleanClass CMAllways12PtBoolean = {
    GI_visMoniker = 'T',"Always Copy Text in 12pt Size";
    GBI_identifier = CHARM_COPY_ALWAYS_12PT;
}
@object GenBooleanClass CMAutoCopyBoolean = {
    GI_visMoniker = 'o',"Automatically Copy Characters to Clipboard";
    GBI_identifier = CHARM_AUTO_COPY_TO_CLIPBOARD;
}

@object GenInteractionClass CMDefaultFontGroup = {
    GI_visMoniker = 'D', "Default Font at Startup";
    GII_visibility = GIV_POPUP;
    GI_comp = @CMDefaultMonoFont,@CMDefaultSymbolFont,@CMDefaultCurrentFont;
}

@object GenTriggerClass @CMDefaultMonoFont = {
    GI_visMoniker = 'M', "Mono Spaced Font";
    GTI_destination = process;
    GTI_actionMsg = MSG_CM_PROCESS_SET_DEFAULT_FONT;
    ATTR_GEN_TRIGGER_ACTION_DATA = FID_DTC_URW_MONO;
}
@object GenTriggerClass @CMDefaultSymbolFont = {
    GI_visMoniker = 'S', "Symbol Font";
    GTI_destination = process;
    GTI_actionMsg = MSG_CM_PROCESS_SET_DEFAULT_FONT;
    ATTR_GEN_TRIGGER_ACTION_DATA = FID_DTC_URW_SYMBOLPS;
}
@object GenTriggerClass @CMDefaultCurrentFont = {
    GI_visMoniker = 'C', "Currently Selected Font";
    GTI_destination = process;
    GTI_actionMsg = MSG_CM_PROCESS_SET_DEFAULT_FONT;
    ATTR_GEN_TRIGGER_ACTION_DATA = 0;
}


/*
 ************* Replybar and triggers ************* 
 */
@object GenInteractionClass TriggerGroup = {
    GI_comp = @CMCopyTrigger, @CMDoneTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_MAKE_REPLY_BAR;
}

@object GenTriggerClass CMCopyTrigger = {
    GI_visMoniker = 'o', "Copy to Clipboard";
    GI_states = @default & ~GS_ENABLED;
    @localize { "Button to copy text in text field to the clipboard." };
    GTI_destination = @CMMap; 			/* @CMCharsToCopyText; */
    GTI_actionMsg = MSG_CM_MAP_COPY_TO_CLIPBOARD; /*MSG_CM_TEXT_COPY_TEXT;*/
}

@object GenTriggerClass CMDoneTrigger = {
    GI_visMoniker = 'C', "Close";
    /* GI_states = @default & ~GS_USABLE; */
    GTI_destination = @CMApplication;
    GTI_actionMsg = MSG_META_QUIT;
}

/*
 ************* Main View ************* 
 */
@object GenViewClass CMView = {
	GI_attrs = (@default) & ~GA_TARGETABLE;
	GVI_content = @CMMap;
	GVI_horizAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT
			     | GVDA_NO_LARGER_THAN_CONTENT;
	GVI_vertAttrs = @default | GVDA_NO_SMALLER_THAN_CONTENT
			    | GVDA_NO_LARGER_THAN_CONTENT;
}

/*
 ************* BottomGroup and related objetcs ************* 
 */
@object GenInteractionClass CMBottomGroup = {
    GI_comp = @CMKeystrokeText,@CMCharCodesText;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}
@object GenTextClass CMKeystrokeText = {
    GI_visMoniker = "Character Keystroke:";
    @localize { "Text field that shows the key sequence used to \
generate the selected character." };
    GI_attrs = (@default | GA_READ_ONLY) & ~GA_TARGETABLE;
    GTXI_text = "";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    HINT_FIXED_SIZE = {
	SST_AVG_CHAR_WIDTHS | 22,
	0,
	0
    };
    HINT_TEXT_FRAME;
    HINT_TEXT_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;
}
@object GenTextClass CMCharCodesText = {
    GI_visMoniker = "Character Codes:";
    @localize { "Text field that shows the ASCII and other codes of the selected character." };
    GI_attrs = (@default | GA_READ_ONLY) & ~GA_TARGETABLE;
    GTXI_text = "";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    HINT_TEXT_FRAME;
    HINT_TEXT_DO_NOT_MAKE_LARGER_ON_PEN_SYSTEMS;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
}

/*
 ************* Message Box ************* 
 */
@object GenInteractionClass CMMessageBox = {
    GI_comp = @CMMessageText;
    GII_visibility = GIV_DIALOG;
    GII_type = GIT_NOTIFICATION;
    GII_attrs = GIA_NOT_USER_INITIATABLE;
    HINT_POSITION_WINDOW_AT_MOUSE;
}
@object GenTextClass CMMessageText = {
    GI_attrs = (@default | GA_READ_ONLY);
    ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE;
HINT_MINIMUM_SIZE = { 
	SST_AVG_CHAR_WIDTHS | 40,
	SST_LINES_OF_TEXT | 2,
	0    
    }; 
}

@end Interface;

/********************************************************************
 *              Content Resource
 * Contains the character map object and it's row children.
 *******************************************************************/
@start Content;

  /* Map object - Manages the character map. */
@object CMMapClass CMMap = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP,
	CHARM_I_MAP_RIGHT,
	CHARM_I_MAP_BOTTOM
    };
    VCI_comp = @CMRow1,
	       @CMRow2,
	       @CMRow3,
	       @CMRow4,
	       @CMRow5,
	       @CMRow6,
	       @CMRow7,
	       @CMRow8,
	       @CMRow9,
	       @CMRow10,
	       @CMRow11,
	       @CMRow12,
	       @CMRow13,
	       @CMRow14;
    VCI_geoAttrs = @default | VCGA_CUSTOM_MANAGE_CHILDREN
			    | VCGA_ONE_PASS_OPTIMIZATION;
    VCI_geoDimensionAttrs = @default | HJ_TOP_JUSTIFY_CHILDREN;
    VCNI_view = @CMView;
    CMMI_crCurrent = 0;
    CMMI_crPrevious = 0;
}

@object CMRowClass CMRow1 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 0 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 1 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 32;
}

@object CMRowClass CMRow2 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 1 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 2 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 48;
}

@object CMRowClass CMRow3 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 2 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 3 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 64;
}

@object CMRowClass CMRow4 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 3 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 4 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 80;
}

@object CMRowClass CMRow5 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 4 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 5 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 96;
}

@object CMRowClass CMRow6 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 5 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 6 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 112;
}

@object CMRowClass CMRow7 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 6 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 7 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 128;
}

@object CMRowClass CMRow8 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 7 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 8 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 144;
}

@object CMRowClass CMRow9 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 8 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 9 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 160;
}

@object CMRowClass CMRow10 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 9 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 10 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 176;
}

@object CMRowClass CMRow11 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 10 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 11 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 192;
}

@object CMRowClass CMRow12 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 11 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 12 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 208;
}

@object CMRowClass CMRow13 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 12 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 13 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 224;
}

@object CMRowClass CMRow14 = {
    VI_bounds = {
	CHARM_MAP_LEFT,
	CHARM_MAP_TOP + 13 * CHARM_I_BOX_HEIGHT,
	CHARM_I_MAP_RIGHT,
	CHARM_MAP_TOP + ( 14 * CHARM_I_BOX_HEIGHT ) - 1
    };
    CMRI_crStart = 240;
}

  /* The key sequence table for characters 32 to 255. */
@chunkArray CMCharType CMShortcuts = {
    { 0,                              ' ',  0   },
    { 0,                              '!',  0   },
    { 0,                              '\"', 0   },
    { 0,                              '#',  0   },
    { 0,                              '$',  0   },
    { 0,                              '\%', 0   },
    { 0,                              '&',  0   },
    { 0,                              '\'', 0   },
    { 0,                              '(',  0   },
    { 0,                              ')',  0   },
    { 0,                              '*',  0   },
    { 0,                              '+',  0   },
    { 0,                              ',',  0   },
    { 0,                              '-',  0   },
    { 0,                              '.',  0   },
    { 0,                              '/',  0   },
    { 0,                              '0',  0   },
    { 0,                              '1',  0   },
    { 0,                              '2',  0   },
    { 0,                              '3',  0   },
    { 0,                              '4',  0   },
    { 0,                              '5',  0   },
    { 0,                              '6',  0   },
    { 0,                              '7',  0   },
    { 0,                              '8',  0   },
    { 0,                              '9',  0   },
    { 0,                              ':',  0   },
    { 0,                              ';',  0   },
    { 0,                              '<',  0   },
    { 0,                              '=',  0   },
    { 0,                              '>',  0   },
    { 0,                              '?',  0   },
    { 0,                              '@',  0   },
    { 0,                              'A',  0   },
    { 0,                              'B',  0   },
    { 0,                              'C',  0   },
    { 0,                              'D',  0   },
    { 0,                              'E',  0   },
    { 0,                              'F',  0   },
    { 0,                              'G',  0   },
    { 0,                              'H',  0   },
    { 0,                              'I',  0   },
    { 0,                              'J',  0   },
    { 0,                              'K',  0   },
    { 0,                              'L',  0   },
    { 0,                              'M',  0   },
    { 0,                              'N',  0   },
    { 0,                              'O',  0   },
    { 0,                              'P',  0   },
    { 0,                              'Q',  0   },
    { 0,                              'R',  0   },
    { 0,                              'S',  0   },
    { 0,                              'T',  0   },
    { 0,                              'U',  0   },
    { 0,                              'V',  0   },
    { 0,                              'W',  0   },
    { 0,                              'X',  0   },
    { 0,                              'Y',  0   },
    { 0,                              'Z',  0   },
    { 0,                              '[',  0   },
    { 0,                              '\\', 0   },
    { 0,                              ']',  0   },
    { 0,                              '^',  0   },
    { 0,                              '_',  0   },
    { 0,                              '`',  0   },
    { 0,                              'a',  0   },
    { 0,                              'b',  0   },
    { 0,                              'c',  0   },
    { 0,                              'd',  0   },
    { 0,                              'e',  0   },
    { 0,                              'f',  0   },
    { 0,                              'g',  0   },
    { 0,                              'h',  0   },
    { 0,                              'i',  0   },
    { 0,                              'j',  0   },
    { 0,                              'k',  0   },
    { 0,                              'l',  0   },
    { 0,                              'm',  0   },
    { 0,                              'n',  0   },
    { 0,                              'o',  0   },
    { 0,                              'p',  0   },
    { 0,                              'q',  0   },
    { 0,                              'r',  0   },
    { 0,                              's',  0   },
    { 0,                              't',  0   },
    { 0,                              'u',  0   },
    { 0,                              'v',  0   },
    { 0,                              'w',  0   },
    { 0,                              'x',  0   },
    { 0,                              'y',  0   },
    { 0,                              'z',  0   },
    { 0,                              '{',  0   },
    { 0,                              '|',  0   },
    { 0,                              '}',  0   },
    { 0,                              '~',  0   },
      /* Delete character */
    { 0,                              0x7F, 0   },
    { SS_LCTRL | SS_LALT,             'u',  'A' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'a',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'c',  0   },
    { SS_LCTRL | SS_LALT,             'e',  'E' },
    { SS_LCTRL | SS_LALT,             'n',  'N' },
    { SS_LCTRL | SS_LALT,             'u',  'O' },
    { SS_LCTRL | SS_LALT,             'u',  'U' },
    { SS_LCTRL | SS_LALT,             'e',  'a' },
    { SS_LCTRL | SS_LALT,             '`',  'a' },
    { SS_LCTRL | SS_LALT,             'i',  'a' },
    { SS_LCTRL | SS_LALT,             'u',  'a' },
    { SS_LCTRL | SS_LALT,             'n',  'a' },
    { SS_LCTRL | SS_LALT,             'a',  0   },
    { SS_LCTRL | SS_LALT,             'c',  0   },
    { SS_LCTRL | SS_LALT,             'e',  'e' },
    { SS_LCTRL | SS_LALT,             '`',  'e' },
    { SS_LCTRL | SS_LALT,             'i',  'e' },
    { SS_LCTRL | SS_LALT,             'u',  'e' },
    { SS_LCTRL | SS_LALT,             'e',  'i' },
    { SS_LCTRL | SS_LALT,             '`',  'i' },
    { SS_LCTRL | SS_LALT,             'i',  'i' },
    { SS_LCTRL | SS_LALT,             'u',  'i' },
    { SS_LCTRL | SS_LALT,             'n',  'n' },
    { SS_LCTRL | SS_LALT,             'e',  'o' },
    { SS_LCTRL | SS_LALT,             '`',  'o' },
    { SS_LCTRL | SS_LALT,             'i',  'o' },
    { SS_LCTRL | SS_LALT,             'u',  'o' },
    { SS_LCTRL | SS_LALT,             'n',  'o' },
    { SS_LCTRL | SS_LALT,             'e',  'u' },
    { SS_LCTRL | SS_LALT,             '`',  'u' },
    { SS_LCTRL | SS_LALT,             'i',  'u' },
    { SS_LCTRL | SS_LALT,             'u',  'u' },
    { SS_LCTRL | SS_LALT,             't',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '8',  0   },
    { SS_LCTRL | SS_LALT,             '4',  0   },
    { SS_LCTRL | SS_LALT,             '3',  0   },
    { SS_LCTRL | SS_LALT,             '6',  0   },
    { SS_LCTRL | SS_LALT,             '8',  0   },
    { SS_LCTRL | SS_LALT,             '7',  0   },
    { SS_LCTRL | SS_LALT,             's',  0   },
    { SS_LCTRL | SS_LALT,             'r',  0   },
    { SS_LCTRL | SS_LALT,             'g',  0   },
    { SS_LCTRL | SS_LALT,             '2',  0   },
    { SS_LCTRL | SS_LALT,             'e',  ' ' },
    { SS_LCTRL | SS_LALT,             'u',  ' ' },
    { SS_LCTRL | SS_LALT,             '=',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '\'', 0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'o',  0   },
    { SS_LCTRL | SS_LALT,             '5',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '=',  0   },
    { SS_LCTRL | SS_LALT,             ',',  0   },
    { SS_LCTRL | SS_LALT,             '.',  0   },
    { SS_LCTRL | SS_LALT,             'y',  0   },
    { SS_LCTRL | SS_LALT,             'm',  0   },
    { SS_LCTRL | SS_LALT,             'd',  0   },
    { SS_LCTRL | SS_LALT,             'w',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'p',  0   },
    { SS_LCTRL | SS_LALT,             'p',  0   },
    { SS_LCTRL | SS_LALT,             'b',  0   },
    { SS_LCTRL | SS_LALT,             '9',  0   },
    { SS_LCTRL | SS_LALT,             '0',  0   },
    { SS_LCTRL | SS_LALT,             'z',  0   },
    { SS_LCTRL | SS_LALT,             '\'', 0   },
    { SS_LCTRL | SS_LALT,             'o',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '/',  0   },
    { SS_LCTRL | SS_LALT,             '1',  0   },
    { SS_LCTRL | SS_LALT,             'l',  0   },
    { SS_LCTRL | SS_LALT,             'v',  0   },
    { SS_LCTRL | SS_LALT,             'f',  0   },
    { SS_LCTRL | SS_LALT,             'x',  0   },
    { SS_LCTRL | SS_LALT,             'j',  0   },
    { SS_LCTRL | SS_LALT,             '\\', 0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '\\', 0   },
    { SS_LCTRL | SS_LALT,             ';',  0   },
    { SS_LALT,                        ' ',  0   },
    { SS_LCTRL | SS_LALT,             '`',  'A' },
    { SS_LCTRL | SS_LALT,             'n',  'A' },
    { SS_LCTRL | SS_LALT,             'n',  'O' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'q',  0   },
    { SS_LCTRL | SS_LALT,             'q',  0   },
    { SS_LCTRL | SS_LALT,             '-',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '-',  0   },
    { SS_LCTRL | SS_LALT,             '[',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '[',  0   },
    { SS_LCTRL | SS_LALT,             ']',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, ']',  0   },
    { SS_LCTRL | SS_LALT,             '/',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'v',  0   },
    { SS_LCTRL | SS_LALT,             'u',  'y' },
    { SS_LCTRL | SS_LALT,             'u',  'Y' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '3',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '4',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '<',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '>',  0   },
    { SS_LCTRL | SS_LALT,             'e',  'y' },
    { SS_LCTRL | SS_LALT,             'e',  'Y' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 't',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '0',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'l',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, ';',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, '5',  0   },
    { SS_LCTRL | SS_LALT,             'i',  'A' },
    { SS_LCTRL | SS_LALT,             'i',  'E' },
    { SS_LCTRL | SS_LALT,             'e',  'A' },
    { SS_LCTRL | SS_LALT,             'u',  'E' },
    { SS_LCTRL | SS_LALT,             '`',  'E' },
    { SS_LCTRL | SS_LALT,             'e',  'I' },
    { SS_LCTRL | SS_LALT,             'i',  'I' },
    { SS_LCTRL | SS_LALT,             'u',  'I' },
    { SS_LCTRL | SS_LALT,             '`',  'I' },
    { SS_LCTRL | SS_LALT,             'e',  'O' },
    { SS_LCTRL | SS_LALT,             'i',  'O' },
      /* Seemingly undefined character in GEOS. */
    { 0,                              0x80, 0   },
    { SS_LCTRL | SS_LALT,             '`',  'O' },
    { SS_LCTRL | SS_LALT,             'e',  'U' },
    { SS_LCTRL | SS_LALT,             'i',  'U' },
    { SS_LCTRL | SS_LALT,             '`',  'U' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'i',  0   },
    { SS_LCTRL | SS_LALT,             'i',  ' ' },
    { SS_LCTRL | SS_LALT,             'n',  ' ' },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'w',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'z',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'd',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'r',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'e',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'u',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 'y',  0   },
    { SS_LSHIFT | SS_LCTRL | SS_LALT, 's',  0   },
};

@end Content;

