/********************************************************************
 *
 * PROJECT:     Character Map
 * MODULE:      Process Methods
 * FILE:        process.goc
 *
 * AUTHOR:      Nathan Fiedler
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      9/23/96         Initial version
 *
 * DESCRIPTION:
 *      This file contains all the process methods. Mostly we just
 *      handle the open and close messages for the application. We
 *      want to handle the open message so we can change the font
 *      that is used by default. In the close we make sure the mouse
 *      pointer definition table is freed.
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
    @include <stdapp.goh>
    #include <Ansi/string.h>
    @include <Objects/Text/tCtrlC.goh>
    @include "app.goh"
    @include "global.goh"

/********************************************************************
 *              Code for CMProcessClass
 *******************************************************************/
void CMPChangeUIForCaller(void);
void CMPCopyCallerApp(AppLaunchBlock *launchB);
void CMPAddGCNList(void);
void CMPRemoveGCNList(void);
extern char callerAppName[];
extern GeodeHandle callerAppGeodeHandle;

@extern chunk CMTextMonikerCallerNotSys;
@extern chunk CMInsertTriggerMonikerNotSys;

/********************************************************************
 *              MSG_GEN_PROCESS_OPEN_APPLICATION
 ********************************************************************
 * SYNOPSIS:     Start up the application. We'll also do some extra
 *               work to prepare the UI.
 * PARAMETERS:   AppAttachFlags attachFlags
 *               MemHandle      launchBlock
 *               MemHandle      extraState
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Call the superclass to get default start-up
 *               behavior. Then tell the text object to set the
 *               font to the URW Symbol PS font. Also have the map
 *               object create the pointer image definition.
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      NF     9/23/96          Initial Version
 *******************************************************************/
@extern method CMProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION {
      /*
       * ptSize - Point size to change text to.
       */
    AppLaunchBlock *launchB;
    optr obj;

    @callsuper();
    /*
     *  Check to see if the char map app is launched with other callerp
     *  application.
     */
    if (launchBlock) {
	launchB = MemLock(launchBlock);
	if (!launchB->ALB_dataFile[0] && launchB->ALB_dataFile[1]) {
	    CMPCopyCallerApp(launchB);
	    CMPChangeUIForCaller();
	    CMPAddGCNList();
	}
	MemUnlock(launchBlock);
    }
    @send CMPrimary::MSG_GEN_SET_USABLE(VUM_NOW);

    if (UserGetDefaultUILevel() == UIIL_INTRODUCTORY) {
	@send CMKeystrokeText::MSG_GEN_SET_NOT_USABLE
	     (VUM_DELAYED_VIA_UI_QUEUE);
    }

    @send CMMap::MSG_CM_MAP_CREATE_POINTER_DEF();

    @send CMCharsToCopyTextDB::MSG_GEN_INTERACTION_INITIATE();
    @send CMCharsToCopyTextDB::MSG_META_GRAB_TARGET_EXCL();
    @send CMCharsToCopyTextDB::MSG_GEN_SET_WIN_POSITION
	 (GET_MM_AND_TYPE(VUM_NOW, WPT_AT_SPECIFIC_POSITION), 1000, 1000);
    @send CMPrimary::MSG_META_GRAB_FOCUS_EXCL();
    /*    @send CMFontControl::MSG_GEN_CONTROL_NOTIFY_INTERACTABLE
	  (GCIF_CONTROLLER|GCIF_TOOLBOX_UI|GCIF_NORMAL_UI); */
} /* MSG_GEN_PROCESS_OPEN_APPLICATION */

/********************************************************************
 *              MSG_GEN_PROCESS_CLOSE_APPLICATION
 ********************************************************************
 * SYNOPSIS:     Close down the application. We have to cleanup
 *               a little before leaving.
 * PARAMETERS:   void
 * RETURNS:      MemHandle - Extra state block.
 * SIDE EFFECTS: none
 * STRATEGY:     First have the map object destroy the pointer
 *               image definition. Then call the superclass to
 *               shutdown the application.
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      NF     10/14/96         Initial Version
 *******************************************************************/
@extern method CMProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION {

    @call CMMap::MSG_CM_MAP_DESTROY_POINTER_DEF();
    CMPRemoveGCNList();

    return( @callsuper() );
} /* MSG_GEN_PROCESS_CLOSE_APPLICATION */

/********************************************************************
 *              MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE
 ********************************************************************
 * SYNOPSIS:     System wants us to create a new state file and
 *               return a memblock
 * PARAMETERS:   MemHandle appInstanceReference
 * RETURNS:      word (VMFileHandle) - State file
 * SIDE EFFECTS: none
 * STRATEGY:     Simply return a NullHandle so we don't create a
 *               new state file.
 *               For some strange reason the app would crash on the
 *               OmniGo when the user pressed Ctrl-F3 to exit. By
 *               intercepting this message we prevent the crash.
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      NF     11/14/96         Initial Version
 *******************************************************************/
@extern method CMProcessClass, MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE {

    return( NullHandle );
} /* MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE */


/********************************************************************
 *              MSG_NOTIFY_APP_EXITED
 ********************************************************************
 * SYNOPSIS:     Get notified when the caller application quits
 * PARAMETERS:   
 * RETURNS:      
 * SIDE EFFECTS: none
 * STRATEGY:     
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/18/99          Initial Version
 *******************************************************************/
@extern method CMProcessClass, MSG_NOTIFY_APP_EXITED 
{
    if (appExited == callerAppGeodeHandle) {
	CMPRemoveGCNList();
	@send CMCopyTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	     ("Copy to Clipboard", VUM_DELAYED_VIA_UI_QUEUE);
	callerAppGeodeHandle = 0;
    }
    return;
} /* MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE */



/********************************************************************
 *              MSG_META_GAINED_TARGET_EXCL
 ********************************************************************
 * SYNOPSIS:     Program has changed the target to us.
 * PARAMETERS:   void
 * RETURNS:      void
 * SIDE EFFECTS: none
 * STRATEGY:     Lets send the target back to the text object. This
 *               will keep the font controller active. If we didn't
 *               do this, the font control would become disabled
 *               when the target changed to the map object.
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/19/99          Initial Version
 *******************************************************************/
@extern method CMGenPrimaryClass, MSG_META_GAINED_TARGET_EXCL
{
    @callsuper();
    @send CMCharsToCopyText::MSG_META_GRAB_TARGET_EXCL();
    @send, forceQueue CMCharsToCopyTextDB::MSG_META_GRAB_TARGET_EXCL();
}


/********************************************************************
 *              CMPCopyCallerApp
 ********************************************************************
 * SYNOPSIS:     Record the caller application's information
 * PARAMETERS:   launchBlock *
 * RETURNS:      none
 * SIDE EFFECTS: none
 * STRATEGY:     
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/18/99          Initial Version
 *******************************************************************/
void CMPCopyCallerApp (AppLaunchBlock *launchB)
{
    strcpy(callerAppName, (launchB->ALB_dataFile)+1);
    callerAppGeodeHandle = GeodeFind
	(callerAppName, (GEODE_NAME_SIZE + GEODE_NAME_EXT_SIZE),0,0);
    return;
}


/********************************************************************
 *              CMPChangeUIForCaller
 ********************************************************************
 * SYNOPSIS:     Change the UI's look accordingly.
 * PARAMETERS:   none
 * RETURNS:      none
 * SIDE EFFECTS: none
 * STRATEGY:     
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/18/99          Initial Version
 *******************************************************************/
void CMPChangeUIForCaller(void)
{
    /*
     *  Change the moniker of the app.
     */
    MemLock(OptrToHandle(@CMTextMonikerCallerNotSys));
    @send CMCopyTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	 (LMemDeref(@CMInsertTriggerMonikerNotSys), VUM_DELAYED_VIA_UI_QUEUE);
    @send CMPrimary::MSG_GEN_REPLACE_VIS_MONIKER_TEXT
	 (LMemDeref(@CMTextMonikerCallerNotSys), VUM_NOW);
    MemUnlock(OptrToHandle(@CMTextMonikerCallerNotSys));
    MemLock(OptrToHandle(@CMPrimary));
    /*    ObjLockObjBlock(OptrToHandle(@CMPrimary)); */
    ObjVarAddData(@CMPrimary, ATTR_GEN_DISPLAY_NOT_MINIMIZABLE, 0);
    MemUnlock(OptrToHandle(@CMPrimary));

    return;
}

/********************************************************************
 *              GMPAddGCNList
 ********************************************************************
 * SYNOPSIS:     Add the app to a GCNList
 * PARAMETERS:   none
 * RETURNS:      none
 * SIDE EFFECTS: none
 * STRATEGY:     
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/18/99          Initial Version
 *******************************************************************/
void CMPAddGCNList(void)
{
    optr procObj;

    procObj = ConstructOptr( GeodeGetProcessHandle(), NullChunk );
    GCNListAdd( procObj,
                MANUFACTURER_ID_GEOWORKS,
                GCNSLT_APPLICATION);
    return;
}


/********************************************************************
 *              CMPRemoveGCNList
 ********************************************************************
 * SYNOPSIS:     Remove from GCNList
 * PARAMETERS:   none
 * RETURNS:      none
 * SIDE EFFECTS: none
 * STRATEGY:     
 * REVISION HISTORY:
 *      Name   Date             Description
 *      ----   ----             -----------
 *      edwin  1/18/99          Initial Version
 *******************************************************************/
void CMPRemoveGCNList(void)
{
    optr procObj;

    procObj = ConstructOptr( GeodeGetProcessHandle(), NullChunk );
    GCNListRemove( procObj,
		MANUFACTURER_ID_GEOWORKS,
		GCNSLT_APPLICATION);

    return;
}


