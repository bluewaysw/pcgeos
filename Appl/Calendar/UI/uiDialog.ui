/****************************************************************************

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		Calendar/UI
FILE:		uiDialog.ui

AUTHOR:		Don Reeves, 2-23-91

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Don	2/23/91		Initial revsion - moved from calendar.ui
	Richard 4/12/95		Responder changes

DESCRIPTION:
	Contains all the dialog box definitions for the GeoPlanner application
		
	$Id: uiDialog.ui,v 1.3 97/09/10 14:08:01 newdeal Exp $

*****************************************************************************/

/*****************************************************************************
 *                     Interface Levels Dialog Box                           *
 *****************************************************************************/

#define	RESOURCE_FOR_STRINGS			ErrorBlock
#define RESOURCE_FOR_USER_LEVEL_DIALOG_TOP	OptionsBlock
#define RESOURCE_FOR_USER_LEVEL_DIALOG_INSIDES	OptionsBlock

#define USER_LEVEL_APPLICATION_OBJECT		Calendar
#define USER_LEVEL_SET_USER_LEVEL_MSG		MSG_CALENDAR_APP_SET_USER_LEVEL
#define USER_LEVEL_INITIATE_FINE_TUNE_MSG	MSG_CALENDAR_APP_FINE_TUNE_INIT
#define USER_LEVEL_FINE_TUNE_MSG		MSG_CALENDAR_APP_FINE_TUNE
#define USER_LEVEL_CHANGE_USER_LEVEL_MSG	MSG_CALENDAR_APP_CHANGE_USER_LEVEL
#define USER_LEVEL_CANCEL_USER_LEVEL_MSG	MSG_CALENDAR_APP_CANCEL_USER_LEVEL
#define USER_LEVEL_STATUS_MSG			MSG_CALENDAR_APP_USER_LEVEL_STATUS
#define USER_LEVEL_FINE_TUNE_TEXT		"Fine Tune Calendar Features"
#define	USER_LEVEL_NO_ADVANCED_LEVEL		TRUE

#define	USER_LEVEL_INTRODUCTORY_TEXT \
	"Introductory calendar with view-by-month and basic event planning."

#define	USER_LEVEL_BEGINNING_TEXT	\
	"Intermediate calendar with alarms, multiple views and searching."

#define	USER_LEVEL_INTERMEDIATE_TEXT	\
	"Full-featured calendar with shortcuts, repeating events, and a dynamic link to Contacts."

#include "usrLevel.uih"

start OptionsBlock;

FeaturesList = GenBooleanGroup {
	children =
		MultipleDayEntry,
		PageSetupEntry,
		AlarmsEntry,
		ViewBothEntry,
		ViewDataEntry,
		PreferencesEntry,
		QuickPreviousEntry,
		RepeatEventsEntry,
#ifdef DO_PIZZA /* Pizza */
		SetHolidayEntry,
#endif
		SearchEntry,
		GeoDexEntry;
	selectedBooleans = "DEFAULT_FEATURES";
        hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

MultipleDayEntry = GenBoolean {
	moniker = 'M', "Select Multiple Days";
	identifier = "mask CF_SELECTION";
}

PageSetupEntry = GenBoolean {
	moniker = 'S', "Page Size";
	identifier = "mask CF_PAGE_SETUP";
}

AlarmsEntry = GenBoolean {
	moniker = 'A', "Alarms";
	identifier = "mask CF_ALARMS";
}

ViewBothEntry = GenBoolean {
	moniker = 'B', "View Both At Once";
	identifier = "mask CF_VIEW_BOTH";
}

ViewDataEntry = GenBoolean {
	moniker = 'D', "Different Month Views";
	identifier = "mask CF_VIEW_DATA";
}

PreferencesEntry = GenBoolean {
	moniker = 'P', "Preference Settings";
	identifier = "mask CF_PREFERENCES";
}

QuickPreviousEntry = GenBoolean {
	moniker = 'Q', "Quick Go Back";
	identifier = "mask CF_QUICK_PREVIOUS";
}

RepeatEventsEntry = GenBoolean {
	moniker = 'R', "Repeating Events";
	identifier = "mask CF_REPEAT_EVENTS";
}

#ifdef DO_PIZZA /* Pizza */
SetHolidayEntry = GenBoolean {
	moniker = 'H', "Set Holidays";
	identifier = "mask CF_SET_HOLIDAY";
}
#endif

SearchEntry = GenBoolean {
	moniker = 'F', "Find";
	identifier = "mask CF_DO_SEARCH";
}

GeoDexEntry = GenBoolean {
	moniker = 'L', "Address Lookup";
	identifier = "mask CF_GEODEX_LOOKUP";
}

end	OptionsBlock;



/*****************************************************************************
 *                        Preferences Dialog Box                             *
 *****************************************************************************/

start	PrefBlock;

PreferencesBox	= GenInteraction {
	moniker = 'P', "Change Preferences";
	children =
		EventWindowChoices,
		PrecedeValues,
		StartUpChoices,
		PreferenceOKTrigger,
		PreferenceCancelTrigger;
	type = properties;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
		HINT_CENTER_WINDOW,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbPref", 0
		}
	}
}

/**************************************
 * Event Window Choices
 **************************************/

EventWindowChoices = GenInteraction {
	moniker = "Event Window Preferences";
	children = 
		DisplayChoicesList,
		DayTemplateValues;
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

DisplayChoicesList = GenBooleanGroup {
	moniker = 'C', "Display Choices:";
	applyMsg = MSG_PREF_SET_EVENT_CHOICES;
	destination = DayPlanObject;
	children =
		TemplateEntry,
		HeadersEntry;
	selectedBooleans = "PF_TEMPLATE";
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_KEY {char "eventChoices", 0},
		ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG {
			word MSG_PREF_UPDATE_EVENT_CHOICES
		}
	}
}

TemplateEntry = GenBoolean {
	moniker = "Day Template";
	identifier = "PF_TEMPLATE";
}
	
HeadersEntry = GenBoolean {
	moniker = "Show Empty Days";
	identifier = "PF_HEADERS";
}

DayTemplateValues = GenInteraction {
	children = 
		StartDayTime,
		EndDayTime,
		DayInterval;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

StartDayTime = GenText {
	moniker = 'S', "Start Time: ";
	maxLength = 32;
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		  HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 80>
			SpecHeight <>
		  }
	}
}

EndDayTime = GenText {
	moniker = 'E', " End Time: ";
	maxLength = 32;
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		  HINT_FIXED_SIZE {
			SpecWidth <SST_PIXELS, 80>
			SpecHeight <>
		  }
	}
}

DayInterval = GenValue {
	moniker = 'I', " Interval:";
	value = 30;
	minimum = 5;				/* 5 minutes should be fine */
	maximum = 60;
	applyMsg = MSG_PREF_SET_INTERVAL;
	destination = DayPlanObject;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "interval",0}
	}
}

/**************************************
 * Reminder Precede Values
 **************************************/

PrecedeValues = GenInteraction {
	moniker = "Reminder Precedes Event Time By";
	children = 
#ifdef DO_PIZZA
		PrecedeDays,
		PrecedeHours,
		PrecedeMinutes;
#else
		PrecedeMinutes,
		PrecedeHours,
		PrecedeDays;
#endif
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

PrecedeMinutes = GenValue {
	moniker = 'M', "Minutes:";
	minimum = 0;
	maximum = 59;
	applyMsg = MSG_PREF_SET_PRECEDE_MINUTE;
	destination = DayPlanObject;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "precedeMinutes",0}
	}
}

PrecedeHours = GenValue {
	moniker = 'H', " Hours:";
	minimum = 0;
	maximum = 23;
	applyMsg = MSG_PREF_SET_PRECEDE_HOUR;
	destination = DayPlanObject;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "precedeHours",0}
	}
}

PrecedeDays = GenValue {
	moniker = 'D', " Days:";
	minimum = 0;
	maximum = 365;
	applyMsg = MSG_PREF_SET_PRECEDE_DAY;
	destination = DayPlanObject;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {char "precedeDays",0}
	}
}


/**************************************
 * Start Up Choices
 **************************************/

StartUpChoices = GenInteraction {
	moniker = "General Preferences";
	children = 
		ViewModeChoices,
		DateChangeChoices;
	hints = {
		HINT_DRAW_IN_BOX,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN
	}
}

ViewModeChoices	= GenItemGroup {
	moniker = 'V', "View On Start-Up:";
	applyMsg = MSG_PREF_SET_STARTUP_CHOICES;
	destination = DayPlanObject;
#if	_TODO
	selection = "VT_CALENDAR_AND_EVENTS shl offset VI_TYPE";
#else
	selection = "mask VI_BOTH";
#endif
	numSelections = 1;
	children =
#if	_TODO
		StartUpCalEvents,
		StartUpCalToDo,
#endif
		StartUpCalendar,
		StartUpEvents,
#if	_TODO
		StartUpToDoList;
#else
		StartUpBoth;
#endif
	hints = {
#if	_TODO
		HINT_ORIENT_CHILDREN_VERTICALLY,
#else
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
#endif
		ATTR_GEN_INIT_FILE_KEY {char "viewChoices",0}
	}
}

StartUpCalendar = GenItem {
	moniker = "Calendar Only";
	identifier = "VT_CALENDAR shl offset VI_TYPE";
}

StartUpEvents = GenItem {
	moniker = "Events Only";
	identifier = "VT_EVENTS shl offset VI_TYPE";
}

#if	_TODO

StartUpToDoList = GenItem {
	moniker = "To Do List Only";
	identifier = "VT_TODO shl offset VI_TYPE";
}

StartUpCalEvents = GenItem {
	moniker = "Calendar/Events";
	identifier = "VT_CALENDAR_AND_EVENTS shl offset VI_TYPE";
}

StartUpCalToDo = GenItem {
	moniker = "Calendar/To Do List";
	identifier = "VT_CALENDAR_AND_TODO_LIST shl offset VI_TYPE";
}
#else

StartUpBoth = GenItem {
	moniker = "Both";
	identifier = "mask VI_BOTH";
}
#endif

DateChangeChoices = GenBooleanGroup {
	applyMsg = MSG_PREF_SET_DATE_CHOICES;
	destination = DayPlanObject;
	children =
		AlwaysEntry,
		ChangeEntry;
	selectedBooleans = "PF_ALWAYS_TODAY or PF_DATE_CHANGE";
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INIT_FILE_KEY {char "dateChoices", 0}
	}
}

AlwaysEntry = GenBoolean {
	moniker = "Always Show Today's Date on Start-Up";
	identifier = "PF_ALWAYS_TODAY";
}

ChangeEntry = GenBoolean {
	moniker = "At Midnight, Automatically Switch to New Day";
	identifier = "PF_DATE_CHANGE";
}


/**************************************
 * Preference Response Group
 **************************************/

PreferenceOKTrigger = GenTrigger {
	/* Moniker set by specific UI */
	action = MSG_PREF_VERIFY_OPTIONS, DayPlanObject;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

PreferenceCancelTrigger = GenTrigger {
	/* moniker set by specific UI */
	action = MSG_PREF_RESET_OPTIONS, DayPlanObject;
	genAttributes = signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

end	PrefBlock;



/***************************************************************************
 *                          Set Alarm Dialog Box                           *
 ***************************************************************************/

start	SetAlarmBlock;

SetAlarmBox = GenInteraction {
	moniker = "Alarm Settings";
	attributes = default +modal;
	type = properties;
	visibility = dialog;
	children =
		SetAlarmEventGroup,
		SetAlarmAlarmGroup,
		SetAlarmOKTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbAlarm", 0
		}
	}		
}	


/**************************************
 * Set Alarm Event group (display)
 **************************************/

SetAlarmEventGroup = GenInteraction {
	moniker = "Event Information";
	children = 
		SetAlarmGroup,
		SetAlarmEventText;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

SetAlarmGroup = GenInteraction {
	children =
		SetAlarmEventDate,
		SetAlarmEventTime;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

SetAlarmEventDate = GenText {
	moniker = "Date: ";
	text = "";
	textDisplayAttributes =
		singleLineText,
		noWordWrapping;
	genAttributes = readOnly;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		}
	}
}

SetAlarmEventTime = GenText {
	moniker = "Time: ";
	maxLength = 32;
	text = "";
	textDisplayAttributes =
		singleLineText,
		noWordWrapping;
	genAttributes = readOnly;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
		}
	}
}

SetAlarmEventText = GenText {
	moniker = "Event:";
	text = "";
	genAttributes = readOnly;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_MAXIMUM_SIZE {
			SpecWidth <>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		}
	}
}


/**************************************
 * Set Alarm group (changeable)
 **************************************/

SetAlarmAlarmGroup = GenInteraction {
	moniker = "Alarm Information";
	children =
		SetAlarmNewGroup,
		SetAlarmSound,
		SetAlarmSwitch;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_PLACE_MONIKER_ABOVE,
		HINT_DRAW_IN_BOX,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

SetAlarmNewGroup = GenInteraction {
	children =
		SetAlarmNewDate,
		SetAlarmNewTime;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

SetAlarmNewDate = GenText {
	moniker = 'D', "Date: ";
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		}
	}
}

SetAlarmNewTime = GenText {
	moniker = 'T', "Time: ";
	maxLength = 32;
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
		}
	}
}

SetAlarmSound = GenInteraction {
	moniker = 'S', "Alarm Sound:";
	children =
		SetAlarmSoundList;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

SetAlarmSoundList = GenItemGroup {
	children =
		AlarmSilentEntry,
		AlarmQuietEntry,
		AlarmNormalEntry,
		AlarmPanicEntry;
	selection = "AS_NORMAL shl offset EIF_ALARM_SOUND";
	numSelections = 1;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION
	}
}

AlarmSilentEntry = GenItem {
	moniker = "Silent";
	identifier = "AS_SILENT shl offset EIF_ALARM_SOUND";
}

AlarmQuietEntry = GenItem {
	moniker = "Quiet";
	identifier = "AS_QUIET shl offset EIF_ALARM_SOUND";
}

AlarmNormalEntry = GenItem {
	moniker = "Normal";
	identifier = "AS_NORMAL shl offset EIF_ALARM_SOUND";
}

AlarmPanicEntry = GenItem {
	moniker = "Panic";
	identifier = "AS_PANIC shl offset EIF_ALARM_SOUND";
}


SetAlarmSwitch = GenItemGroup {
	moniker = 'A', "Alarm Is:";
	children =
		OnAlarmSetting,
		OffAlarmSetting;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

OnAlarmSetting = GenItem {
	moniker = "On";
	identifier = "mask EIF_ALARM_ON";
}

OffAlarmSetting = GenItem {
	moniker = "Off";
	identifier = "0";
}


/**************************************
 * Alarm response bar
 **************************************/

SetAlarmOKTrigger = GenTrigger {
	/* Moniker set by specific UI */
	action = MSG_DE_EXTRACT_ALARM, null;
	/* action OD set dynamically */
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

end	SetAlarmBlock;



/*****************************************************************************
 *                          GeoPlanner Print Options                         *
 *****************************************************************************/

start	PrintBlock;

CalendarPrintOptions = MyPrint {
	genStates = default -usable;
	moniker = "Calendar Options";
	printAttrs = "MPOT_GR_MONTH or mask MPA_INCLUDE_EVENTS";
#ifdef DO_PIZZA
	fontID = "FID_BITSTREAM_KANJI_HON_MINCHO";
#else
	fontID = "FID_DTC_URW_ROMAN";
#endif
	genAttributes = default
		+notifyVisibility;
	children =
		PrintOutputChoices,
		PrintOutputData;
	hints = {
		ATTR_GEN_VISIBILITY_DATA {word 0, mask VUIG_PRINT_DIALOG_BOX},
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX,
	}
}

PrintOutputChoices = GenInteraction {
	moniker = "Content:";
	children =
		PrintOutputType,
		IncludeEventsList;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

PrintOutputType = GenItemGroup {
	children =
		EventsEntry,
		MonthEntry,
		YearEntry;
	selection = "MPOT_GR_MONTH";
	numSelections = 1;
	applyMsg = MSG_MY_PRINT_SET_OUTPUT_TYPE;
	destination = CalendarPrintOptions;
	hints = {
		HINT_ITEM_GROUP_MINIMIZE_SIZE,
		HINT_ITEM_GROUP_DISPLAY_CURRENT_SELECTION,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word MSG_MY_PRINT_SET_OUTPUT_TYPE
		}
	}
}

EventsEntry = GenItem {
	moniker = "Events Window";
	identifier = "MPOT_EVENTS";
	genStates = default -enabled;
}

MonthEntry = GenItem {
	moniker = "Month";
	identifier = "MPOT_GR_MONTH";
}

YearEntry = GenItem {
	moniker = "Year";
	identifier = "MPOT_GR_YEAR";
}


IncludeEventsList = GenBooleanGroup {
	children =
		IncludeEventsEntry;
	applyMsg = MSG_MY_PRINT_SET_INCLUDE_EVENTS;
	destination = CalendarPrintOptions;
	selectedBooleans = "mask MPA_INCLUDE_EVENTS";
	genStates = default -enabled;
}

IncludeEventsEntry = GenBoolean {
	moniker = "Include Events";
	identifier = "mask MPA_INCLUDE_EVENTS";
}
	

/**************************************
 * The data line 
 **************************************/

PrintOutputData = GenInteraction {
	children =
		DataEvents,
		DataMonthYear;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}	

DataEvents = GenText {
	moniker = "Events:";
	text = "";
	genAttributes = readOnly;
	textDisplayAttributes =
		singleLineText,
		noWordWrapping;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
	genStates = default -usable;
}

DataMonthYear = GenInteraction {
	children =
		DataMonth,
		DataYear;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

DataMonth = MonthValue {
	moniker = 'M', "Month:";
	hints = {
		HINT_VALUE_NOT_DIGITALLY_EDITABLE,
		HINT_VALUE_FRAME,
		HINT_VALUE_WRAP
	}
}

DataYear = GenValue {
	moniker = 'Y', "Year:";
	value = 1980;
	minimum = LOW_YEAR;
	maximum = HIGH_YEAR;
}

end	PrintBlock;



/***************************************************************************
 *                          Repeating Events Box                           *
 ***************************************************************************/

start	RepeatBlock;

RepeatBox = GenInteraction {
	moniker = 'R', "Repeating Events";
	children =
		RepeatDynamicList,
		RepeatTriggerGroup;
	type = command;
	visibility = dialog;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbRepeatMain", 0
		}
	}
}

RepeatTriggerGroup = GenInteraction {
	children =
		RepeatNewTrigger,
		RepeatChangeTrigger,
		RepeatDeleteTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_HEIGHT_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING
	}
}

/**************************************
 * Repeat Dynamic List
 **************************************/

RepeatDynamicList = GenDynamicList {
	applyMsg = MSG_REPEAT_SELECT_EVENT;	
	queryMsg = MSG_REPEAT_GET_EVENT_MONIKER;
	destination = process;
	genAttributes = default
		+notifyVisibility;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {word MSG_REPEAT_SELECT_EVENT},
		ATTR_GEN_VISIBILITY_DATA {word 0, mask VUIG_REPEAT_DIALOG_BOX},
		HINT_ITEM_GROUP_SCROLLABLE,
		HINT_FIXED_SIZE {
			SpecWidth	<SST_WIDE_CHAR_WIDTHS, 28>
			SpecHeight	<SST_LINES_OF_TEXT, 5>
			word	5
		}
	}
}

/**************************************
 * Repeat Box Action Triggers
 **************************************/

RepeatNewTrigger = GenTrigger {
	moniker = 'e', "Create";
	action = MSG_REPEAT_NEW_EVENT, process;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		HINT_CENTER_MONIKER
	}
}

RepeatChangeTrigger = GenTrigger {
	moniker = 'a', "Change";
	action = MSG_REPEAT_CHANGE_EVENT, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_TRIGGER_BRINGS_UP_WINDOW,
		HINT_CENTER_MONIKER
	}
}

RepeatDeleteTrigger = GenTrigger {
	moniker = 'D', "Delete";
	action = MSG_REPEAT_DELETE_EVENT, process;
	genStates = default -enabled;
	genAttributes = default +initiatesInputHoldUp;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_CENTER_MONIKER
	}
}


/**************************************
 * The Repeat Add or Change Box
 **************************************/

visMoniker	NewRepeatMoniker	= "Create Repeating Event";
visMoniker	ChangeRepeatMoniker	= "Change Repeating Event";

RepeatAddBox = GenInteraction {
	children =
		RepeatTypeGroup,
		RepeatWhenGroup,
		RepeatGeneralGroup,
#ifdef GPC_ONLY
		RepeatOKTrigger,
		RepeatCancelTrigger;
#else
		RepeatOKTrigger;
#endif
	type = command;
	visibility = dialog;
	attributes = default +modal;
	hints = {
		HINT_PRESERVE_FOCUS,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbRepeatEvent", 0
		}
	}
}


/**************************************
 * Type of repeating event
 **************************************/

RepeatTypeGroup = GenInteraction {
	moniker = "Type of Event";
	children =
		RepeatFrequencyList,
		RepeatSpecifyList;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX
	}
}

RepeatFrequencyList = GenItemGroup {
	moniker = 'F', "Frequency:";
	children =
		FrequencyWeek,
		FrequencyMonth,
		FrequencyYear;
	selection = "RET_WEEKLY";
	numSelections = 1;
	destination = process;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_REPEAT_SET_FREQUENCY
		}
	}
}

FrequencyWeek = GenItem {
	moniker = "Weekly";
	identifier = "RET_WEEKLY";
}

FrequencyMonth = GenItem {
	moniker = "Monthly";
	identifier = "RET_MONTHLY_DATE";
}

FrequencyYear = GenItem {
	moniker = "Yearly";
	identifier = "RET_YEARLY_DATE";
}


RepeatSpecifyList = GenItemGroup {
	moniker = 'S', "Specify by:";
	children = 
		SpecifyDate,
		SpecifyDay;
	selection = 0;
	numSelections = 1;
	destination = process;
	genStates = default -enabled;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_REPEAT_SET_SPECIFY
		}
	}
}

SpecifyDate = GenItem {
	moniker = "Date";
	identifier = 0;
}

SpecifyDay = GenItem {
	moniker = "Week of Month";
	identifier = 1;
}



/**************************************
 * Repeat "When" Group
 **************************************/

RepeatWhenGroup = GenInteraction {
	moniker = "Event Will Occur";
	children =
		RepeatLongDOW,
		RepeatInfoPart1,
		RepeatInfoPart2;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_DRAW_IN_BOX
	}
}


/**************************************
 * Day of Week choices
 **************************************/

RepeatLongDOW = GenBooleanGroup {
	moniker = 'D', "Select Day(s):";
	children =
		SunEntry,
		MonEntry,
		TueEntry,
		WedEntry,
		ThuEntry,
		FriEntry,
		SatEntry;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

SunEntry = GenBoolean {
	moniker = "Sun";
	identifier = "DOWF_SUNDAY";
}
MonEntry = GenBoolean {
	moniker = "Mon";
	identifier = "DOWF_MONDAY";
}
TueEntry = GenBoolean {
	moniker = "Tues";
	identifier = "DOWF_TUESDAY";
}
WedEntry = GenBoolean {
	moniker = "Wed";
	identifier = "DOWF_WEDNESDAY";
}
ThuEntry = GenBoolean {
	moniker = "Thu";
	identifier = "DOWF_THURSDAY";
}
FriEntry = GenBoolean {
	moniker = "Fri";
	identifier = "DOWF_FRIDAY";
}
SatEntry = GenBoolean {
	moniker = "Sat";
	identifier = "DOWF_SATURDAY";
}


/**************************************
 * Repeat Info Group Part 1
 **************************************/

RepeatInfoPart1 = GenInteraction {
	children =
		RepeatDateGroup,
		RepeatMonthValue;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

RepeatMonthValue = MonthValue {
	genStates = default -enabled;
	moniker = " Month:";
	hints = {
		HINT_VALUE_NOT_DIGITALLY_EDITABLE,
		HINT_VALUE_FRAME,
		HINT_VALUE_WRAP
	}
}

RepeatDateGroup = GenInteraction {
	genStates = default -enabled;
	children =
		RepeatDateList,
		RepeatDateValue;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

RepeatDateList = GenItemGroup {
	moniker = 'M', "Day of Month:";
	children =
		LastDateEntry,
		OtherDateEntry;
	selection = MSG_GEN_SET_ENABLED;
	numSelections = 1;
	destination = process;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_REPEAT_SET_DATE_EXCL
		}
	}
}

LastDateEntry = GenItem {
	moniker = "Last";
	identifier = MSG_GEN_SET_NOT_ENABLED;
}	

OtherDateEntry = GenItem {
	moniker ="Date:";
	identifier = MSG_GEN_SET_ENABLED;
}

RepeatDateValue = GenValue {	
	value = 1;
	minimum = 1;
	maximum = 31;
}


/**************************************
 * Repeat Info Group Part 2
 **************************************/

RepeatInfoPart2 = GenInteraction {
	children =
		RepeatOccurrence,
		RepeatShortDOW,
		RepeatTimeText;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

RepeatShortDOW = CustomSpin {
	genStates = default -enabled;
	moniker = " Day:";
	value = 0;
	maximum = 6;
	maxTextLen = 3;
	firstMoniker = SunMoniker;
	hints = {
		HINT_VALUE_NOT_DIGITALLY_EDITABLE,
		HINT_VALUE_FRAME,
		HINT_VALUE_WRAP,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 4>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
}

chunk	SunMoniker	= "Sun";
chunk	MonMoniker	= "Mon";
chunk	TueMoniker	= "Tue";
chunk	WedMoniker	= "Wed";
chunk	ThuMoniker	= "Thu";
chunk	FriMoniker	= "Fri";
chunk	SatMoniker	= "Sat";


RepeatOccurrence = CustomSpin {
	genStates = default -enabled;
	moniker = 'W', "Week:";
	value = 0;
	maximum = 5;			/* MUST match LAST_DOW_OF_MONTH */
	maxTextLen = 6;
	firstMoniker = FirstMoniker;
	hints = {
		HINT_VALUE_NOT_DIGITALLY_EDITABLE,
		HINT_VALUE_FRAME,
		HINT_VALUE_WRAP,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 10>
			SpecHeight <SST_LINES_OF_TEXT, 1>
		}
	}
}

chunk	FirstMoniker	= "First";
chunk	SecondMoniker	= "Second";
chunk	ThirdMoniker	= "Third";
chunk	FourthMoniker	= "Fourth";
chunk	FifthMoniker	= "Fifth";
chunk	LastMoniker	= "Last";

RepeatTimeText = GenText {
	moniker = 'T', " Time:";
	maxLength = 32;
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
		}
	}
}


/**************************************
 * The general event information
 **************************************/

RepeatGeneralGroup = GenInteraction {
	moniker = "General Information";
	children =
		RepeatEventText,
		RepeatDurationGroup;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX
	}
}


/**************************************
 * Repeat Event Text
 **************************************/

RepeatEventText = GenText {
	moniker = 'E', "Event:";
	maxLength = "0x2000";			/* Max 8K text field */
	text = "";
	textDisplayAttributes =
		singleLineText,
		useTabForNavigation;
	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}


/**************************************
 * Repeat Duration Group
 **************************************/

RepeatDurationGroup = GenInteraction {
	moniker = 'R', "Repeat:";
	children =
		RepeatDurationList,
		RepeatStartText,
		RepeatEndText;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

RepeatDurationList = GenItemGroup {
	children =
		ForeverListEntry,
		SpecifiedListEntry;
	selection = MSG_GEN_SET_NOT_ENABLED;
	numSelections = 1;
	destination = process;
	hints = {
		ATTR_GEN_ITEM_GROUP_STATUS_MSG {
			word	MSG_REPEAT_SET_DURATION_EXCL
		}
	}
}

ForeverListEntry = GenItem {
	moniker = "Forever";
	identifier = MSG_GEN_SET_NOT_ENABLED;
}

SpecifiedListEntry = GenItem {
	moniker = "From:";
	identifier = MSG_GEN_SET_ENABLED;
}

RepeatStartText = GenText {
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	genStates = default -enabled;
	hints = {
		  ATTR_GEN_TEXT_SELECTABLE,
		  HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		  }
	}
}

RepeatEndText = GenText {
	moniker = " To:";
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	genStates = default -enabled;
	hints = {
		  HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		  }
	}
}


/**************************************
 * Repeat Action Group
 **************************************/

RepeatOKTrigger = GenTrigger {
	/* moniker set depending upon use of dialog box */
	action = MSG_META_DUMMY, process;
	/* action set dynamically */
	genAttributes = default
		+initiatesInputHoldUp;
	hints = { 
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

#ifdef GPC_ONLY
visMoniker RepeatOKCreateMoniker = 'C', "Create";
visMoniker RepeatOKChangeMoniker = 'C', "Change";

RepeatCancelTrigger = GenTrigger {
	/* moniker set depending upon use of dialog box */
	genAttributes = default
		+initiatesInputHoldUp;
	hints = { 
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_DISMISS}
	}
}

visMoniker RepeatCancelCreateMoniker = "Don't Create";
visMoniker RepeatCancelChangeMoniker = "Don't Change";
#endif

end	RepeatBlock;



/***************************************************************************
 *                           Alarm Dialog Box                              *
 ***************************************************************************/

start	AlarmTemplate;

AlarmBox = Reminder {
	moniker = "Alarm";
	children =
		AlarmDateTime,
		AlarmMessage,
		AlarmSnoozeTrigger,
#if	_TODO
		AlarmToDoTrigger,
#endif
		AlarmOffTrigger;
	genStates = default -usable;		/* template is not usable */
	type = multipleResponse;
	visibility = dialog;
	attributes =
		default
		+notUserInitiatable;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_WINDOW_CUSTOM_LAYER_ID {
			UN_HPTR	AlarmTemplate
		},
		ATTR_GEN_WINDOW_CUSTOM_LAYER_PRIORITY {
			byte	LAYER_PRIO_ON_TOP - 1
		},
		ATTR_GEN_HELP_CONTEXT {
			char	"dbReminder", 0
		}
	}
}

AlarmDateTime = GenInteraction {
	moniker = "Event occurs:";
	children = 
		AlarmDate,
		AlarmTime;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

AlarmDate = GenText {
	text = "";
	genAttributes = readOnly;
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 24>
			SpecHeight <>
		}
	}
}

AlarmTime = GenText {
	text = "";
	genAttributes = readOnly;
	maxLength = 32;
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 9>
			SpecHeight <>
		}
	}
}

AlarmMessage = GenText {
	text = "";
	genAttributes = readOnly;
	moniker = "Event: ";
	hints = {
		ATTR_GEN_TEXT_SELECTABLE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_MAXIMUM_SIZE {
			SpecWidth <>
			SpecHeight <SST_LINES_OF_TEXT, 5>
			word	5
		}
	}
}

AlarmSnoozeTrigger = GenTrigger {
	moniker = 'S', "Snooze";
	genAttributes =
		signalInteractionComplete;
	action = MSG_REMINDER_SNOOZE, AlarmBox;
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

AlarmOffTrigger = GenTrigger {
	moniker = 'O', "Off";
	genAttributes =
		signalInteractionComplete;
	hints = { HINT_SEEK_REPLY_BAR }
}

#if	_TODO
AlarmToDoTrigger = GenTrigger {
	moniker = 'T', "Place in To Do list";
	genAttributes =
		signalInteractionComplete;
	action = MSG_REMINDER_TODO, AlarmBox; 
	hints = { HINT_SEEK_REPLY_BAR }
}
#endif
end	AlarmTemplate;



/***************************************************************************
 *                          Merge File Dialog Box                          *
 ***************************************************************************/

#if	0
start	MergeBlock;

MergeFileDialogBox = GenInteraction {
	moniker = "Merge File";
	children =
		MergeFileTitle,
		MergeFileFileSelector,
		MergeFileOK;
	attributes = default
		+modal,
		+notUserInitiatable;
	type = command;
	visibility = dialog;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW
	}
}

MergeFileTitle = GenGlyph {
	moniker = "Select File to Merge";
}

MergeFileFileSelector = GenFileSelector {
      	fileCriteria = dirs, geosNonExecutables;
      	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION,
		ATTR_GEN_FILE_SELECTOR_TOKEN_MATCH {
			GeodeToken <<"plnr">, MANUFACTURER_ID_GEOWORKS>
		},
		ATTR_GEN_PATH_DATA { GenFilePath <SP_PRIVATE_DATA,> }
	}
}		

MergeFileOK = GenTrigger {
	/* moniker set by specific UI */
	/* action = MSG_CALENDAR_MERGE_FILE, process; */
	/* no signalInteractionComplete */
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

end	MergeBlock;
#endif


/***************************************************************************
 *                         Extract File Dialog Box                         *
 ***************************************************************************/

#if	0
start	ExtractBlock;

ExtractFileDialogBox = GenInteraction {
	moniker = "Extract File";
	attributes = default
		+modal,
		+notUserInitiatable;
	type = command;
	visibility = dialog;
	children =
		ExtractFileTitle,
		ExtractFileFileGroup,
		ExtractFileDateGroup,
		ExtractFileOK;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW
	}
}

ExtractFileTitle = GenGlyph {
	moniker = "Select Dates to Extract";
}

ExtractFileFileGroup = GenInteraction {
	children =
		ExtractFileFileSelector,
		ExtractFileFileName;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY
	}
}

ExtractFileFileSelector = GenFileSelector {
	fileCriteria = dirs, geosNonExecutables;
	hints = {
		HINT_FILE_SELECTOR_SINGLE_ACTION,
		ATTR_GEN_FILE_SELECTOR_TOKEN_MATCH {
			GeodeToken <<"plnr">,MANUFACTURER_ID_GEOWORKS>
		},
		ATTR_GEN_PATH_DATA { GenFilePath <SP_PRIVATE_DATA,> }
	}
}		

ExtractFileFileName = GenText {
	moniker = "Filename:";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	text = "Sample Extraction";
	hints = {
		ATTR_GEN_TEXT_SELECTABLE,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

ExtractFileDateGroup = GenInteraction {
	children =
		ExtractFileDateStart,
		ExtractFileDateEnd;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

ExtractFileDateStart = GenText {
	moniker = "Starting Date:";
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		ATTR_GEN_TEXT_SELECTABLE
	}
}

ExtractFileDateEnd = GenText {
	moniker = "Ending Date:";
	text = "";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	hints = {
		ATTR_GEN_TEXT_SELECTABLE
	}
}

ExtractFileOK = GenTrigger {
	/* moniker set by specific UI */
	/* action = ?, process; */
	/* no signalInteractionComplete */
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

end	ExtractBlock;
#endif


/***************************************************************************
 *                         Purge Events Dialog Box                         *
 ***************************************************************************/

#if	0
start	PurgeBlock;

PurgeEventsDialogBox = GenInteraction {
	moniker = "Purge Events";
	attributes = default
		+modal,
		+notUserInitiatable;
	type = command;
	visibility = dialog;
	children =
		PurgeEventsTitle,
		PurgeEventsDateGroup,
		PurgeEventsOK;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_CENTER_WINDOW
	}
}

PurgeEventsTitle = GenGlyph {
	moniker = "Purge Events";
}

PurgeEventsDateGroup = GenInteraction {
	children =
		PurgeEventsDateStart,
		PurgeEventsDateEnd;
	hints = {
		HINT_CENTER_CHILDREN_ON_MONIKERS
	}
}

PurgeEventsDateStart = GenText {
	moniker = "From:";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	text = "1/1/92";
	hints = {
		ATTR_GEN_TEXT_SELECTABLE,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		}
	}
}

PurgeEventsDateEnd = GenText {
	moniker = "To:";
	textDisplayAttributes = default
		+singleLineText,
		+noWordWrapping;
	text = "3/31/92";
	hints = {
		ATTR_GEN_TEXT_SELECTABLE,
		HINT_FIXED_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
			SpecHeight <>
		}
	}
}

PurgeEventsOK = GenTrigger {
	/* moniker set by specific UI */
	/* action = MSG_META_DUMMY process; */
	/* no signalInteractionComplete */
	hints = {
		HINT_SEEK_REPLY_BAR
	}
}

end	PurgeBlock;
#endif

#ifdef DO_PIZZA /* Pizza */
/***************************************************************************
 *                         Set Holiday Dialog Box                          *
 ***************************************************************************/
start	HolidayBlock;

SetHoliday = SetHolidayInteraction {
	moniker = 'S',"Set Holidays";
	children =
		RepeatHolidayGroup,
		PersonalHolidayGroup,
		HolidayResetTrigger,
		HolidayCloseTrigger;
	visibility = dialog;
	hints = {
		HINT_PRESERVE_FOCUS,
		HINT_CENTER_WINDOW,
		ATTR_GEN_HELP_CONTEXT {
			char	"dbSetHoliday", 0
		}
	}
}

/*---------------------------------------------
	Repeat Holiday
---------------------------------------------*/
RepeatHolidayGroup = GenInteraction {
	children =
		RepeatHolidayList;

	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX
	}
}

RepeatHolidayList = GenBooleanGroup {
	children = 
		RHSunEntry,
		RHMonEntry,
		RHTueEntry,
		RHWedEntry,
		RHThuEntry,
		RHFriEntry,
		RHSatEntry;
	moniker = "Repeating Holiday:";
	destination = SetHoliday;
	applyMsg = MSG_JC_SHIC_RHL_APPLY;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT
	}
}

RHSunEntry = GenBoolean {
	moniker = "Sun";
	identifier = "RHF_SUNDAY";
}
RHMonEntry = GenBoolean {
	moniker = "Mon";
	identifier = "RHF_MONDAY";
}
RHTueEntry = GenBoolean {
	moniker = "Tue";
	identifier = "RHF_TUESDAY";
}
RHWedEntry = GenBoolean {
	moniker = "Wed";
	identifier = "RHF_WEDNESDAY";
}
RHThuEntry = GenBoolean {
	moniker = "Thu";
	identifier = "RHF_THURSDAY";
}
RHFriEntry = GenBoolean {
	moniker = "Fri";
	identifier = "RHF_FRIDAY";
}
RHSatEntry = GenBoolean {
	moniker = "Sat";
	identifier = "RHF_SATURDAY";
}


/*---------------------------------------------
	Personal Holiday
---------------------------------------------*/
PersonalHolidayGroup = GenInteraction {
	children =
		PersonalHolidaySet;

	hints = {
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_DRAW_IN_BOX
	}
}

PersonalHolidaySet = GenGlyph {
	moniker = "Personal Holiday / WeekDay: Click the calendar directly.";
}


/*---------------------------------------------
	Bottun
---------------------------------------------*/
HolidayResetTrigger = GenTrigger {
	moniker = "Reset";
	action = MSG_JC_SHIC_RESET,	SetHoliday;
	hints = { 
		HINT_SEEK_REPLY_BAR
	}
}

HolidayCloseTrigger = GenTrigger {
	genAttributes = default + signalInteractionComplete;
	action = MSG_JC_SHIC_CLOSE,	SetHoliday;
	hints = { 
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {
			word	IC_DISMISS
		},
		HINT_SEEK_REPLY_BAR
	}
}

end	HolidayBlock;
#endif
