/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	GeoDex
MODULE:		UI		
FILE:		uiStrings.ui

AUTHOR:		Ted H. Kim, March 3, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	ted	3/3/92		Initial revision

DESCRIPTION:
        Contains the string resources for the GeoDex.

	$Id: uiStrings.ui,v 1.2 97/07/02 09:40:31 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

start TextResource, data ;

	/* table of pointers to error strings */

chunk ErrorArray = data {
	nptr	NoMatchText
	nptr	TooManyText
	nptr	NoModemText
	nptr	NoMemoryText
	nptr	NoCalendarText
	nptr	NoRecordText
	nptr	NoDataFileText
	nptr	BrowseModeErrorText
	nptr	PortInUseText
	nptr	SerialLoadErrorText
	nptr	NoSerialText
	nptr	NoIndexText
	nptr	TextTooLargeText
	nptr	NoPhoneEntryText
	nptr	ResortWarningText
	nptr	NoIndexImpexText
	nptr	SearchAtEndText
	nptr	SearchAtBegText
#ifdef GPC
	nptr    NoEmailText
	nptr    ConfirmDeleteText
#endif
}

/***************************************************************************
 *		Error strings					 	   *
 ***************************************************************************/

chunk NoMatchText = "Find complete.  No match was found.";

chunk NoModemText = "Your modem has not been configured.  Check to see that your modem preferences have been set.\\\r\\\rError Code: DX-01";

chunk NoMemoryText = "There is not enough memory available to continue.  Try closing some applications.\\\r\\\rError Code: DX-02";

chunk NoCalendarText = "Unable to connect with Calendar.\\\r\\\rError Code: DX-03";

chunk NoRecordText = "The Contacts document is empty.\\\r\\\rError Code: DX-04";

chunk NoDataFileText = "An Contacts document must be open before you can search for text.\\\r\\\rError Code: DX-05";

chunk BrowseModeErrorText = "New entries cannot be created in Browse View.  Use the Card View for this task.\\\r\\\rError Code: DX-06";

#ifdef GPC
chunk NoIndexText = "Please enter a name in the \\\"Name\\\" field, so it can be properly filed.";
#else
chunk NoIndexText = "You must enter a name in the Index field before Contacts can insert the card.  Do you wish to continue editing the card?";
#endif

chunk TextTooLargeText = "The address field for this entry is getting too big.  Some text at the end of the address field may not be saved.\\\r\\\rError Code: DX-07";

chunk NoPhoneEntryText = "There is no telephone number to dial.\\\r\\\rError Code: DX-08";

chunk ResortWarningText = "This will cause the current Contacts document to be resorted.  Do you wish to continue?";

chunk TooManyText = "Cannot create another phone name.  Use an existing name or leave the field blank.\\\r\\\rError Code: DX-09";

chunk NoSerialText = "Could not dial.  The system serial driver was not loaded.\\\r\\\rError Code: DX-10";

chunk SerialLoadErrorText = "Unable to load the system serial driver.  You will not be able to dial for Contacts.\\\r\\\rError Code: DX-11";

chunk PortInUseText = "Couldn't dial.  The port is currently in use.\\\r\\\rError Code: DX-12";

chunk DialingText = "Dialing ... ";

chunk ModemErrorText = "The modem is not responding.  Check the modem connections.  Verify that the modem preferences are set correctly.  Try dialing again.\\\r\\\rError Code: DX-13";

chunk InstructionText = "Hit Talk to start talking and Cancel to hang up.";

chunk NoIndexImpexText = "There were some records that did not have any data in the index fields.  These records have not been imported.\\\r\\\rError Code: DX-14";

chunk SearchAtEndText = "Find has reached the end of the list of cards. Continue finding from the beginning?";
chunk SearchAtBegText = "Find has reached the beginning of the list of cards. Continue finding from the end?";

#ifdef GPC
chunk NoEmailText = "Unable to start Email.";

chunk UpdateEmailAddrText = "The name you are trying to add is already listed in your Contacts with a different email address. Would you like to change it to use the new email address?  If not, you can go back and change the card.";

chunk NewEntryAlreadyExistsText = "Your contact list already has that name listed. Would you like to create this card anyway, or would you like to go back and change the card?";

chunk MultipleEntriesDiffEmailText = "Your contact list has multiple cards with the name you are trying to add, but with different email address.  Would you like to create a new entry, or would you like to go back and change the card?";

chunk NewRecordBadEmailText = "Please use a valid email address for the Email field.";

visMoniker NewEntryWarningCreate = 'r', "Create Card";
visMoniker NewEntryWarningChange = 'C', "Change Card";

/* include list's note icon here */
#include "Art/gpcListNoteIcon.ui"

chunk ConfirmDeleteText = "Are you sure you want to delete this card?";
#endif

/***************************************************************************
 *		Custome Trigger Moniker Strings			 	   *
 ***************************************************************************/
#ifdef GPC
visMoniker CustomYes = "OK";  /* always continue editing */
#else
visMoniker CustomYes = 'C', "Continue Editing";
visMoniker CustomNo = 'E', "Erase Card and Go On";
#endif

/***************************************************************************
 *		print output header strings			 	   *
 ***************************************************************************/
/*
chunk PrintNameHeaderText = "Name";

chunk PrintAddressHeaderText = "Address & Phone Numbers";

chunk PrintPhonesHeaderText = "Phone Numbers";
*/

/***************************************************************************
 * 		default phone number type name strings			   *
 ***************************************************************************/

chunk PhoneHomeString = "HOME";
chunk PhoneWorkString = "OFFICE";
chunk PhoneCarString = "MOBILE";
chunk PhoneFaxString = "FAX";
chunk PhonePagerString = "PAGER";
chunk EmailString = "EMAIL";

#ifdef GPC
chunk PhoneHomeDisplayString = "Home:";
chunk PhoneWorkDisplayString = "Work:";
chunk PhoneCarDisplayString = "Mobile:";
chunk PhoneFaxDisplayString = "Fax:";
chunk PhonePagerDisplayString = "Pager:";
chunk PhoneEmailDisplayString = "Email:";
#endif

chunk ExtensionString = "EeXx";

/* these need to match TextEditFieldIndex in geodexConstant.def */
chunk DexListArray = data {
	nptr	DexListString1
	nptr	DexListString2
	nptr	DexListString3
#ifdef DO_PIZZA
	nptr	DexListString18
	nptr	DexListString19	
#endif
	nptr	DexListString4
	nptr	DexListString5
	nptr	DexListString6
	nptr	DexListString7
	nptr	DexListString8
	nptr	DexListString9
	nptr	DexListString10
	nptr	DexListString11
	nptr	DexListString12
	nptr	DexListString13
	nptr	DexListString14
	nptr	DexListString15
	nptr	DexListString16
	nptr	DexListString17
}

chunk DexListString1 = "Index_Field";
chunk DexListString2 = "Addr_Field";
chunk DexListString3 = "Note_Field";
chunk DexListString4 = "Home";
chunk DexListString5 = "Office";
chunk DexListString6 = "Car";
chunk DexListString7 = "Fax";
chunk DexListString8 = "Pager";
chunk DexListString9 = "Email";
chunk DexListString10 = "Phone_7";
chunk DexListString11 = "Home_Name";
chunk DexListString12 = "Office_Name";
chunk DexListString13 = "Car_Name";
chunk DexListString14 = "Fax_Name";
chunk DexListString15 = "Pager_Name";
chunk DexListString16 = "Email_Name";
chunk DexListString17 = "Phone_7_Name";
#ifdef DO_PIZZA
chunk DexListString18 = "Phonetic_Field";
chunk DexListString19 = "ZipCode_Field";
#endif

/************************************************************************
 * 		Character Sets on the Letter Tabs			*
 *									*
 *   System	Set #1			Set #2				*
 *   -------	------------		-------------			*
 *   SBCS	Latin + "*"		Blank				*
 *   Pizza/J	Hiragana + "A" + "*" 	Blank				*
 *   DBCS	Latin + "*"		Blank				*
 *									*
 ************************************************************************/

chunk NumberOfCharSet = "1";

chunk LetterTabCharSetTable = data {
	nptr	LetterTabCharSet1
	nptr	LetterTabCharSet2
}

chunk LetterTabCharSet1 = data {
	nptr	Set1Char1
	nptr	Set1Char2
	nptr	Set1Char3
	nptr	Set1Char4
	nptr	Set1Char5
	nptr	Set1Char6
	nptr	Set1Char7
	nptr	Set1Char8
	nptr	Set1Char9
	nptr	Set1Char10
	nptr	Set1Char11
	nptr	Set1Char12
	nptr	Set1Char13
	nptr	Set1Char14
	nptr	Set1Char15
	nptr	Set1Char16
	nptr	Set1Char17
	nptr	Set1Char18
	nptr	Set1Char19
	nptr	Set1Char20
	nptr	Set1Char21
	nptr	Set1Char22
	nptr	Set1Char23
	nptr	Set1Char24
	nptr	Set1Char25
	nptr	Set1Char26
	nptr	Set1Char27
	nptr	Set1Char28
	nptr	Set1Char29
}

#ifdef DO_PIZZA		/**** KANA LETTER TABS for Pizza ****/
chunk Set1Char1 = data { wchar C_HIRAGANA_LETTER_A, 0 }
chunk Set1Char2 = data { wchar C_HIRAGANA_LETTER_KA, 0 }
chunk Set1Char3 = data { wchar C_HIRAGANA_LETTER_SA, 0 }
chunk Set1Char4 = data { wchar C_HIRAGANA_LETTER_TA, 0 }
chunk Set1Char5 = data { wchar C_HIRAGANA_LETTER_NA, 0 }
chunk Set1Char6 = data { wchar C_HIRAGANA_LETTER_HA, 0 }
chunk Set1Char7 = data { wchar C_HIRAGANA_LETTER_MA, 0 }
chunk Set1Char8 = data { wchar C_HIRAGANA_LETTER_YA, 0 }
chunk Set1Char9 = data { wchar C_HIRAGANA_LETTER_RA, 0 }
chunk Set1Char10 = data { wchar C_HIRAGANA_LETTER_WA, 0 }
chunk Set1Char11 = "A";
chunk Set1Char12 = "*";
chunk Set1Char13 = " ";
chunk Set1Char14 = " ";
chunk Set1Char15 = " ";
chunk Set1Char16 = " ";
chunk Set1Char17 = " ";
chunk Set1Char18 = " ";
chunk Set1Char19 = " ";
chunk Set1Char20 = " ";
chunk Set1Char21 = " ";
chunk Set1Char22 = " ";
chunk Set1Char23 = " ";
chunk Set1Char24 = " ";
chunk Set1Char25 = " ";
chunk Set1Char26 = " ";
chunk Set1Char27 = " ";
chunk Set1Char28 = " ";
chunk Set1Char29 = " ";
#else
chunk Set1Char1 = "A";		/****  LATIN ALPHABET  ****/
chunk Set1Char2 = "B";
chunk Set1Char3 = "C";
chunk Set1Char4 = "D";
chunk Set1Char5 = "E";
chunk Set1Char6 = "F";
chunk Set1Char7 = "G";
chunk Set1Char8 = "H";
chunk Set1Char9 = "I";
chunk Set1Char10 = "J";
chunk Set1Char11 = "K";
chunk Set1Char12 = "L";
chunk Set1Char13 = "M";
chunk Set1Char14 = "N";
chunk Set1Char15 = "O";
chunk Set1Char16 = "P";
chunk Set1Char17 = "Q";
chunk Set1Char18 = "R";
chunk Set1Char19 = "S";
chunk Set1Char20 = "T";
chunk Set1Char21 = "U";
chunk Set1Char22 = "V";
chunk Set1Char23 = "W";
chunk Set1Char24 = "X";
chunk Set1Char25 = "Y";
chunk Set1Char26 = "Z";
chunk Set1Char27 = "*";
chunk Set1Char28 = " ";
chunk Set1Char29 = " ";
#endif


chunk LetterTabCharSet2 = data {
	nptr	Set2Char1
	nptr	Set2Char2
	nptr	Set2Char3
	nptr	Set2Char4
	nptr	Set2Char5
	nptr	Set2Char6
	nptr	Set2Char7
	nptr	Set2Char8
	nptr	Set2Char9
	nptr	Set2Char10
	nptr	Set2Char11
	nptr	Set2Char12
	nptr	Set2Char13
	nptr	Set2Char14
	nptr	Set2Char15
	nptr	Set2Char16
	nptr	Set2Char17
	nptr	Set2Char18
	nptr	Set2Char19
	nptr	Set2Char20
	nptr	Set2Char21
	nptr	Set2Char22
	nptr	Set2Char23
	nptr	Set2Char24
	nptr	Set2Char25
	nptr	Set2Char26
	nptr	Set2Char27
	nptr	Set2Char28
	nptr	Set2Char29
}

chunk Set2Char1 = " ";
chunk Set2Char2 = " ";
chunk Set2Char3 = " ";
chunk Set2Char4 = " ";
chunk Set2Char5 = " ";
chunk Set2Char6 = " ";
chunk Set2Char7 = " ";
chunk Set2Char8 = " ";
chunk Set2Char9 = " ";
chunk Set2Char10 = " ";
chunk Set2Char11 = " ";
chunk Set2Char12 = " ";
chunk Set2Char13 = " ";
chunk Set2Char14 = " ";
chunk Set2Char15 = " ";
chunk Set2Char16 = " ";
chunk Set2Char17 = " ";
chunk Set2Char18 = " ";
chunk Set2Char19 = " ";
chunk Set2Char20 = " ";
chunk Set2Char21 = " ";
chunk Set2Char22 = " ";
chunk Set2Char23 = " ";
chunk Set2Char24 = " ";
chunk Set2Char25 = " ";
chunk Set2Char26 = " ";
chunk Set2Char27 = " ";
chunk Set2Char28 = " ";
chunk Set2Char29 = " ";

/***************************************************************************
 * 		strings for no record
 ***************************************************************************/

#ifdef GPC
chunk NoRecordString = "No entries";
chunk NoRecordInstruction = "Click the \\\"New\\\" button to create a new entry";
#endif

/***************************************************************************
 * 		Last name explanation string
 ***************************************************************************/

#ifdef GPC
chunk LastNameString = "(Last name, First name)";
#endif

/***************************************************************************
 * 		SearchList width string for VGA or smaller systems
 ***************************************************************************/

#ifdef GPC
chunk SearchListVGAWidthString = "14";
localize "This chunk holds the width of the SearchList (the right-hand side of the Contacts) as measured in full-width characters. Make this number smaller if the translated text for the buttons on the spine (e.g. Email, Find, etc.) become too long.";
#endif

end TextResource ;
