@include <stdapp.goh>
@include "Main/grafcalc.goh"
@include "UI/appui.goh"

extern char ergebnis[100];
extern double digits;
extern int  f_fehler;
extern byte farbindex[5];
extern WWFixedAsDWord dicke[6];
extern word muster[6];
extern double xfaktor;
extern double yfaktor;
extern double deltax;
extern double deltay;
extern int fvonx[321];

@extern method GCalcProcessClass, MSG_FUNKTIONSWERTE_BERECHNEN
{
     double x;
     //long double y;
     char fterm[100];
     char termkopie[100];
     /*char ystring[15];*/
     char x_str[10];
     word auswahl;
     int laenge,i,j;
     char fl[5];

     auswahl=@call F_Check::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
     if (auswahl & 1) fl[0]='1';else fl[0]='0';
     if (auswahl & 2) fl[1]='1';else fl[1]='0';
     if (auswahl & 4) fl[2]='1';else fl[2]='0';
     if (auswahl & 8) fl[3]='1';else fl[3]='0';
     if (auswahl & 16) fl[4]='1';else fl[4]='0';
     @call X_Eingabe::MSG_VIS_TEXT_GET_ALL_PTR(x_str);
     FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(x_str),x_str,0);
     //FloatPopNumber(&x);
     FloatGeos80ToIEEE64(&x);
     @call Funktionsterm1::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
      laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      termkopie[j]=fterm[i];
                      j++;
                      termkopie[j]='*';
                      j++;
                 }
                else
                {
                      termkopie[j]=fterm[i];
                      j++;
                }
           }
           termkopie[j]='\0';
           strcpy(fterm,termkopie);
           strcpy(termkopie,"");

     if ((strlen(fterm)>0) & (fl[0]=='1'))
     {
         funktionswert_berechnen(fterm, x,digits);
         /*if (nd!=5)
             @call y1_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
         else */
             @call y1_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
     }
     @call Funktionsterm2::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
     laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      termkopie[j]=fterm[i];
                      j++;
                      termkopie[j]='*';
                      j++;
                 }
                else
                {
                      termkopie[j]=fterm[i];
                      j++;
                }
           }
           termkopie[j]='\0';
           strcpy(fterm,termkopie);
           strcpy(termkopie,"");
     if ((strlen(fterm)>0) & (fl[1]=='1'))
     {
         funktionswert_berechnen(fterm, x,digits);
         /*if (nd!=5)
             LocalFixedToAscii(ystring,MakeWWFixed(y),4);
         else
             strcpy(ystring,"Error");*/
        @call y2_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
      }
     @call Funktionsterm3::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
     laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      termkopie[j]=fterm[i];
                      j++;
                      termkopie[j]='*';
                      j++;
                 }
                else
                {
                      termkopie[j]=fterm[i];
                      j++;
                }
           }
           termkopie[j]='\0';
           strcpy(fterm,termkopie);
           strcpy(termkopie,"");
     if ((strlen(fterm)>0) & (fl[2]=='1'))
     {
        funktionswert_berechnen(fterm, x,digits);
         /*if (nd!=5)
             LocalFixedToAscii(ystring,MakeWWFixed(y),4);
         else
             strcpy(ystring,"Error");*/
        @call y3_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
     }
     @call Funktionsterm4::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
     laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      termkopie[j]=fterm[i];
                      j++;
                      termkopie[j]='*';
                      j++;
                 }
                else
                {
                      termkopie[j]=fterm[i];
                      j++;
                }
           }
           termkopie[j]='\0';
           strcpy(fterm,termkopie);
           strcpy(termkopie,"");
     if ((strlen(fterm)>0) & (fl[3]=='1'))
     {
         funktionswert_berechnen(fterm, x,digits);
         /*if (nd!=5)
             LocalFixedToAscii(ystring,MakeWWFixed(y),4);
         else
             strcpy(ystring,"Error");*/
        @call y4_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
     }
     @call Funktionsterm5::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
     laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      termkopie[j]=fterm[i];
                      j++;
                      termkopie[j]='*';
                      j++;
                 }
                else
                {
                      termkopie[j]=fterm[i];
                      j++;
                }
           }
           termkopie[j]='\0';
           strcpy(fterm,termkopie);
           strcpy(termkopie,"");
     if ((strlen(fterm)>0) & (fl[4]=='1'))
       {
         funktionswert_berechnen(fterm, x,digits);
         /*if (nd!=5)
             LocalFixedToAscii(ystring,MakeWWFixed(y),4);
         else
             strcpy(ystring,"Error");*/
        @call y5_von_x::MSG_VIS_TEXT_REPLACE_ALL_PTR(ergebnis, 0);
       }
}
double funktionswert_berechnen(char term[100], double x, byte stellenzahl)
{
   int laenge, kopielaenge,i;
   char txt[10]="";
   char termkopie[100]="";
   double ist;

   i=0;kopielaenge=0;
   laenge=strlen(term);

   while (i<=laenge)
   {
        if (term[i]=='x')
        {
           LocalFixedToAscii(txt,MakeWWFixed(x),4);
           strcat(termkopie,txt);
           kopielaenge=strlen(termkopie)-1;
        }
        else termkopie[kopielaenge]=term[i];
        i++;kopielaenge++;
   }
   /*termkopie[i+1]='\0';*/    /*darf offensichtlich nicht angefügt werden*/
   strcpy(term,termkopie);/*z=0;*/

  f_fehler=Parser_anwenden(term, stellenzahl);

   //FloatAsciiToFloat(FAF_STORE_NUMBER,strlen(ergebnis),ergebnis, &ist);
   /*oder:*/

   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(ergebnis),ergebnis,0);
   //FloatPopNumber(&ist);
   FloatGeos80ToIEEE64(&ist);
//MessageNumberBox(ist);
   return ist;
}
void Grafen_zeichnen(GStateHandle gstate)
{
   int i,j,laenge,k;
   byte n;
   sword y;
   double x,funktionswert;
   char fterm[100];
   char ftermkopie[100]="";
   char term[100];
   optr F_Name[6];
   word auswahl;
   char fl[5];
   char n_string[2];
   char fehlermeldung[22];
   word grafmode[5];
   double breite;
   char dicke_str[2];

//MessageBox("Grafen zeichnen");

    /*@call ColorSelector1::MSG_COLOR_SELECTOR_GET_COLOR(&farbe );	funktioniert nicht
    lineColor[0]=farbe.CQ_redOrIndex;*/
    farbindex[0]=@call Farbauswahl1::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    farbindex[1]=@call Farbauswahl2::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    farbindex[2]=@call Farbauswahl3::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    farbindex[3]=@call Farbauswahl4::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    farbindex[4]=@call Farbauswahl5::MSG_GEN_ITEM_GROUP_GET_SELECTION();
    /*PatchColorSelectorGetColor(@ColorSelector2, &farbe );
    rot[1]=farbe.CQ_redOrIndex; gruen[1]=farbe.CQ_green;blau[1]=farbe.CQ_blue;*/

   F_Name[0]=@Funktionsterm1;F_Name[1]=@Funktionsterm2;F_Name[2]=@Funktionsterm3;F_Name[3]=@Funktionsterm4;F_Name[4]=@Funktionsterm5;
   auswahl=@call F_Check::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
   grafmode[0]=@call DotConnected1::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   grafmode[1]=@call DotConnected2::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   grafmode[2]=@call DotConnected3::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   grafmode[3]=@call DotConnected4::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   grafmode[4]=@call DotConnected5::MSG_GEN_ITEM_GROUP_GET_SELECTION();
//MessageBox("Hier");
   @call LinienDicke1::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
//MessageBox(dicke_str);
   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
   //FloatPopNumber(&breite);
   FloatGeos80ToIEEE64(&breite);
//MessageNumberBox(breite);
//InfoBox("Breite:",breite,"");
   dicke[0]=MakeWWFixed(breite);
   @call LinienDicke2::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
   //FloatPopNumber(&breite);
   FloatGeos80ToIEEE64(&breite);
   dicke[1]=MakeWWFixed(breite);

   @call LinienDicke3::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
   //FloatPopNumber(&breite);
   FloatGeos80ToIEEE64(&breite);
   dicke[2]=MakeWWFixed(breite);

   @call LinienDicke4::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
   //FloatPopNumber(&breite);
   FloatGeos80ToIEEE64(&breite);
   dicke[3]=MakeWWFixed(breite);

   @call LinienDicke5::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
   FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
   //FloatPopNumber(&breite);
   FloatGeos80ToIEEE64(&breite);
   dicke[4]=MakeWWFixed(breite);

   muster[0] = @call LinienMuster1::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   muster[1] = @call LinienMuster2::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   muster[2] = @call LinienMuster3::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   muster[3] = @call LinienMuster4::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   muster[4] = @call LinienMuster5::MSG_GEN_ITEM_GROUP_GET_SELECTION();
   if (auswahl & 1) fl[0]='1';else fl[0]='0';
   if (auswahl & 2) fl[1]='1';else fl[1]='0';
   if (auswahl & 4) fl[2]='1';else fl[2]='0';
   if (auswahl & 8) fl[3]='1';else fl[3]='0';
   if (auswahl & 16) fl[4]='1';else fl[4]='0';

   n=0;
   while (n<5)
   {
        //MessageNumberBox(selection);
        /*if (auswahl & (2^n)) InfoBox("\01 ist aktiviert",n+1,"");*/
        if (fl[n]=='1')
        {
           @call F_Name[n]::MSG_VIS_TEXT_GET_ALL_PTR(fterm);
/*----------------------------------------------------------------------------------------------------------*/
           laenge=strlen(fterm);j=0;		// aus z.B. 2x  2*x machen
           for (i=0;i<laenge;i++)
            {
                 if ((fterm[i]>47) && (fterm[i]<58) && (fterm[i+1]=='x'))
                 {
                      ftermkopie[j]=fterm[i];
                      j++;
                      ftermkopie[j]='*';
                      j++;
                 }
                else
                {
                      ftermkopie[j]=fterm[i];
                      j++;
                }
           }
           ftermkopie[j]='\0';
           strcpy(fterm,ftermkopie);
           strcpy(ftermkopie,"");
/*----------------------------------------------------------------------------------------------------------*/
           if (strlen(fterm)>0)
           {
                GrSetLineColor(gstate,CF_INDEX,farbindex[n],0,0);   /*Reihenfolge gegenüber ColorQuad verändert*/
                if (grafmode[n]==MODUS_DOT)
                {
                   GrSetLineWidth(gstate,0);	//Zurücksetzung muss sein, da sonst möglicherweise nicht gezeichnet wird
                   for (i=0;i<320;i++)
                       {

                           strcpy(term,fterm); f_fehler=0;
	       		   x =dividiere(i-160 + deltax,25*xfaktor);

           /*                x=i-160+deltax;
	       x=x/25;x=x*xfaktor;*/

                           funktionswert = funktionswert_berechnen(term, x,4);

                           if (f_fehler==5) y=-32000;	//Wenn der Funktionswert nicht definiert ist
                           else
	           					y =80 - deltay - round(funktionswert*25*yfaktor,0);
                           if ((y>=0) && (y<=160))
	         					GrDrawLine(gstate,i,y,i,y);	//mit Point gibt es keine Farbe
                       }
                }
                else 	/*connected*/
                {
                    f_fehler=0;
      
      //MessageNumberBox(dicke[n].WWF_int);
                    GrSetLineWidth(gstate,dicke[n]);
               
           
                    GrSetLineStyle(gstate,muster[n],0,0,0);
                    GrSetLineColor(gstate,CF_INDEX,farbindex[n],0,0);
                    for (i=0;i<=320;i++)                    /*322 Punkte werden berechnet*/
                    {
                           strcpy(term,fterm);
	       		   x =dividiere(i-160 + deltax,25*xfaktor);
                           funktionswert = funktionswert_berechnen(term, x,4);
                           if (f_fehler==5) fvonx[i]=-32000;	/*Wenn der Funktionswert nicht definiert ist*/
                           else
	            		      fvonx[i] =80 - deltay - round(funktionswert*25*yfaktor,0);
                    }
	i=0;
	while (sub(i,320)<0)
                    {    k=0;
	     while (((fvonx[i] > 160) || (fvonx[i] < 0)) && (i<320))
	     /*über zusammenhängende außenliegende Punkte hinweggehen*/
                         {
                             i++;k++;
                          }
                          j=0;	      
                          /*Grafen vom oberen bzw. unteren Rand aus zeichnen*/
                          if ((fvonx[i]<160) && (fvonx[i]>0) && (i>0) && (i<320) /*&& (k!=0)*/)	//nur wenn Punkte übersprungen wurden
                          {
//MessageBox("von draußen");
                               if ((fvonx[i]<fvonx[i+1]) && (fvonx[i-1]!=-32000))	//Anschluss vom oberen Rand aus zeichnen
                                   GrDrawLine(gstate,i,0,i,fvonx[i]);
                               if ((fvonx[i]>fvonx[i+1]) && (fvonx[i-1]!=-32000))	//Anschluss vom unteren Rand aus zeichnen
                                   GrDrawLine(gstate,i,160,i,fvonx[i]);
                          }
	      GrDrawLine(gstate,i,fvonx[i],i,fvonx[i]);		//den ersten Punkte innerhalb als Startpunkt setzen
                          while ((fvonx[i]<160) && (fvonx[i]>0) && (i<=320) && !(  (i>1) && (abs(fvonx[i-1]-fvonx[i-2])<abs(fvonx[i]-fvonx[i-1])) && ((fvonx[i-1]-fvonx[i-2])*(fvonx[i]-fvonx[i-1])<0)  ))
                           /*Punkte müssen drinnen liegen*/   /*und Graf muss stetig sein?*/
                          {
                               GrDrawLineTo(gstate,i,fvonx[i]);
                               i++;
                           }
                               /*Grafen bis zum oberen bzw. unteren Rand durchzeichnen*/
                           if (((fvonx[i]>160) || (fvonx[i]<0)) && (i<320))
                           {
//MessageBox("nach draußen");
                                   if ((fvonx[i-1]<fvonx[i]) && !((fvonx[i-2]-fvonx[i-1])*(fvonx[i-1]-fvonx[i])<0) && (fvonx[i+1]!=-32000))	//Anschluss zum unteren Rand für wachsende i
                                      GrDrawLineTo(gstate,i,160);
                                   if ((fvonx[i-1]>fvonx[i]) && !((fvonx[i-2]-fvonx[i-1])*(fvonx[i-1]-fvonx[i])<0) && (fvonx[i+1]!=-32000))	//Anschluss zum oberen Rand für wachsende i
                                      GrDrawLineTo(gstate,i,0);
                           }
                           i++;
                     }
                }
           }
        }
        if (f_fehler!=0 && f_fehler!=5)
	{
		if (fl[n]=='1')
		{
	      strcpy(fehlermeldung,ergebnis);
	      strcat(fehlermeldung, " y");
	      LocalFixedToAscii(n_string,MakeWWFixed(n+1),2);
	      strcat(fehlermeldung,n_string);
	      GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(12));
	      GrDrawText(gstate,5,5+10*n,fehlermeldung,22);
	 	}
	}

        n++;
   }
}

