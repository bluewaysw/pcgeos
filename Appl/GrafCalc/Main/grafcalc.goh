@include <stdapp.goh>
#include <Ansi/stdio.h>
#include <Ansi/string.h>
#include <parse.h>
#include <gstring.h>
#include <initfile.h>
#include <graphics.h>
@include <Objects/colorC.goh>

typedef WordFlags selections;
#define F1_EIN 0x0001
#define F2_EIN 0x0002
#define F3_EIN 0x0004
#define F4_EIN 0x0008
#define F5_EIN 0x0010

typedef struct {
        TextElementArrayHeader header;
        word		elementOffset;
        VisTextParaAttr element1;
    } ParaAttrElementArray;
typedef struct {    	//sowohl für Ziffern als auch für Shift-Richtung verwendet
    char MS_ziffer[6];
    char sprachauswahl;
} MyStruct;

#define CALCULATOR 1
#define Y_EDITOR 2
#define GRAPH 3
#define TABLE 4

#define GRADMASS 1
#define BOGENMASS 2
#define PUNKT_IN_BILDMITTE 1

#define MODUS_DOT 1
#define MODUS_CONNECTED 0

#define MUSTER_DURCHGEZEICHNET 	0
#define MUSTER_GEPUNKTET 	2
#define MUSTER_GESTRICHELT 	4

#define RASTER_EIN 1
#define ACHSEN_EIN 2
#define ACHSENTEILUNG_EIN 4

#define NORMAL 1
#define SCIENTIFIC 2

#define ENGLISCH 0
#define DEUTSCH 1

#define KS_PHYSICAL     0x8000	/* TRUE: match key, not character   */
#define KS_ALT   	0x4000	/* TRUE: <ALT> must be pressed	    */
#define KS_CTRL  	0x2000	/* TRUE: <CTRL> must be pressed	    */
#define KS_SHIFT  	0x1000	/* TRUE: <SHIFT> must be pressed    */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/* Process class */
@class	GCalcProcessClass, GenProcessClass;

@message void MSG_GCALC_PROCESS_CALCULATE();

/*@message void MSG_CUSTOM_MESSAGE(char term[5]);*/
	/* Define the structure you wish to pass with the message. If the
	 * message will pass parameters on the stack (as in this case), you
	 * must define your structure to pass its elements in reverse order. */
@message void MSG_SPRACHE_EINSTELLEN(byte sprachwahl);
@message void MSG_DISPLAY_LOESCHEN();
@message void MSG_ZIFFERN( MyStruct ms);
@message void MSG_CURSOR_AN_ZEILENANFANG();
@message void MSG_CURSOR_SCHRITT_LINKS(word editmode);
@message void MSG_CURSOR_SCHRITT_RECHTS(word editmode);
@message void MSG_CURSOR_ANS_ENDE();
/*@message void MSG_CURSOR_LOESCHT_LINKS();*/
/*@message void MSG_CURSOR_LOESCHT_RECHTS();*/
@message void MSG_ERGEBNIS_EINGEBEN();
@message void MSG_EINGABE_EINGEBEN();
@message void MSG_WINKELMASS_EINSTELLEN(int mass);
@message void MSG_ZAHLDARSTELLUNG_EINSTELLEN(byte zahlenformat);
@message void MSG_KEHRWERT_VOM_ERGEBNIS();
@message void MSG_OPTIONEN_SPEICHERN();
@message void MSG_OPTIONEN_LADEN();
@message void MSG_SPEICHERN();
@message void MSG_RECALL();
@message void MSG_ARBEITSBEREICH_EINSTELLEN(word selection);
@message void MSG_VERGROESSERNX();
@message void MSG_VERGROESSERNY();
@message void MSG_VERGROESSERNXY();
@message void MSG_VERKLEINERNX();
@message void MSG_VERKLEINERNY();
@message void MSG_VERKLEINERNXY();
@message void MSG_ZOOM_FACTOR_X();
@message void MSG_ZOOM_FACTOR_Y();
@message void MSG_NORMALGROESSE();
@message void MSG_URSPRUNGIMZENTRUM();
@message void MSG_INVALIDATE_VIEW();
@message void MSG_ENDISABLE_TRIGGERS();
@message void MSG_PUNKT_IN_BILDMITTE_SETZEN();
@message void MSG_SHIFT_VIEW(MyStruct ms);
@message void MSG_DOT_CONNECTED_1();
@message (GEN_BOOLEAN_GROUP_STATUS_MSG) MSG_F_CHECK_CHANGED;
@message void MSG_SHOW_F1_MODE_INTERACTION();
@message void MSG_SHOW_F2_MODE_INTERACTION();
@message void MSG_SHOW_F3_MODE_INTERACTION();
@message void MSG_SHOW_F4_MODE_INTERACTION();
@message void MSG_SHOW_F5_MODE_INTERACTION();
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GRAFIK_MODI_1_AKTIVIEREN_DEAKTIVIEREN;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GRAFIK_MODI_2_AKTIVIEREN_DEAKTIVIEREN;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GRAFIK_MODI_3_AKTIVIEREN_DEAKTIVIEREN;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GRAFIK_MODI_4_AKTIVIEREN_DEAKTIVIEREN;
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_GRAFIK_MODI_5_AKTIVIEREN_DEAKTIVIEREN;
@message void MSG_DELTAX_XEINGABE_EINSTELLEN();
@message void MSG_FUNKTIONSWERTE_BERECHNEN();
@message void MSG_TABLE_X_INCREMENTIEREN(word increment);
@message void MSG_TABLE_DX_INCREMENTIEREN(word increment);
@message void MSG_LINIENDICKE_INCREMENTIEREN(byte nr, word increment);
@message void MSG_DIAGRAM_CHANGED();
@message void MSG_GRAPH_COLOR_1();
@message void MSG_GRAPH_COLOR_2();
@message void MSG_GRAPH_COLOR_3();
@message void MSG_GRAPH_COLOR_4();
@message void MSG_GRAPH_COLOR_5();
@message void MSG_NACHKOMMASTELLEN_EINSTELLEN(word anzahl);
@message void MSG_APPLIKATION_VERLASSEN();


@endc;

int TextGetCursorPosition(void);
double div(double, double);
void Diagramm_zeichnen(GStateHandle gstate);
double round(double,sword);
double abs(double);
int Parser_anwenden(char buf[100], /*char resultat[100], */byte nachkommastellen);
double funktionswert_berechnen(char term[100], double x,  byte stellenzahl);
void Grafen_zeichnen(GStateHandle gstate);
void _pascal ParserCallback (C_CallbackStruct *cbStruct);
double dividiere(double,double);
double sub(double minuend,double subtrahend);
FloatNum mod(FloatNum zahl1,FloatNum zahl2);
int zoomfaktor_out_bestimmen(int faktor);
int zoomfaktor_in_bestimmen(int faktor);
double FixedToFloatingpointnumber(WWFixedAsDWord);
void Text_incrementieren(char zahl_str[2], double increment, double min, double max, word fracDigits);

@class	TriggerDataTriggerClass, GenTriggerClass ;

/*typedef struct {    	//sowohl für Ziffern als auch für Shift-Richtung verwendet
    char MS_ziffer[6];
    char sprachauswahl;
} MyStruct;*/

	/* Use @vardataAlias to define your own attribute (ATTR_MY_STRUCT_TO_PASS)
	 * to store the custom structure. */
@vardataAlias (ATTR_GEN_TRIGGER_ACTION_DATA) MyStruct ATTR_MY_STRUCT_TO_PASS;

@endc

@class GCalcTextClass, GenTextClass ;
@endc

@class GCalcInteractionClass, GenInteractionClass;
@endc

