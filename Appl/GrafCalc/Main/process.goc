@include <stdapp.goh>
#include <Ansi/stdlib.h>
#include <Ansi/stdio.h>
#include <Ansi/string.h>
@include "Main/grafcalc.goh"
@include "UI/appui.goh"
@include <Objects/clipbrd.goh>
@include <Objects/gViewCC.goh>
#include <initfile.h>
@include <math.goh>

@classdecl GCalcProcessClass, neverSaved;

@extern method GCalcProcessClass, MSG_SPRACHE_EINSTELLEN;
@extern method GCalcProcessClass, MSG_SHIFT_VIEW;
@extern method GCalcProcessClass, MSG_VERGROESSERNX;
@extern method GCalcProcessClass, MSG_VERKLEINERNX;
@extern method GCalcProcessClass, MSG_VERGROESSERNY;
@extern method GCalcProcessClass, MSG_VERKLEINERNY;
@extern method GCalcProcessClass, MSG_VERKLEINERNXY;
@extern method GCalcProcessClass, MSG_VERGROESSERNXY;
@extern method GCalcProcessClass, MSG_ZIFFERN;
@extern method GCalcProcessClass, MSG_URSPRUNGIMZENTRUM;
@extern method GCalcProcessClass, MSG_NORMALGROESSE;
@extern method GCalcProcessClass, MSG_PUNKT_IN_BILDMITTE_SETZEN;
@extern method GCalcProcessClass, MSG_META_START_SELECT;
@extern method GCalcProcessClass, MSG_META_MOUSE_PTR;
@extern method GCalcProcessClass, MSG_F_CHECK_CHANGED;
@extern method GCalcProcessClass, MSG_GRAFIK_MODI_1_AKTIVIEREN_DEAKTIVIEREN;
@extern method GCalcProcessClass, MSG_GRAFIK_MODI_2_AKTIVIEREN_DEAKTIVIEREN;
@extern method GCalcProcessClass, MSG_GRAFIK_MODI_3_AKTIVIEREN_DEAKTIVIEREN;
@extern method GCalcProcessClass, MSG_GRAFIK_MODI_4_AKTIVIEREN_DEAKTIVIEREN;
@extern method GCalcProcessClass, MSG_GRAFIK_MODI_5_AKTIVIEREN_DEAKTIVIEREN;
@extern method GCalcProcessClass, MSG_DELTAX_XEINGABE_EINSTELLEN;
@extern method GCalcProcessClass, MSG_FUNKTIONSWERTE_BERECHNEN;
@extern method GCalcProcessClass, MSG_TABLE_X_INCREMENTIEREN;
@extern method GCalcProcessClass, MSG_TABLE_DX_INCREMENTIEREN;
@extern method GCalcProcessClass, MSG_LINIENDICKE_INCREMENTIEREN;
@extern method GCalcProcessClass, MSG_NACHKOMMASTELLEN_EINSTELLEN;
@extern method GCalcProcessClass, MSG_ZAHLDARSTELLUNG_EINSTELLEN;
@extern method GCalcProcessClass, MSG_DIAGRAM_CHANGED;
@extern method GCalcProcessClass, MSG_GRAPH_COLOR_1;
@extern method GCalcProcessClass, MSG_GRAPH_COLOR_2;
@extern method GCalcProcessClass, MSG_GRAPH_COLOR_3;
@extern method GCalcProcessClass, MSG_GRAPH_COLOR_4;
@extern method GCalcProcessClass, MSG_GRAPH_COLOR_5;
@extern method GCalcProcessClass, MSG_WINKELMASS_EINSTELLEN;
@extern method GCalcProcessClass, MSG_OPTIONEN_SPEICHERN;
@extern method GCalcProcessClass, MSG_OPTIONEN_LADEN;
@extern method GCalcProcessClass, MSG_CURSOR_SCHRITT_LINKS;
@extern method GCalcProcessClass, MSG_CURSOR_SCHRITT_RECHTS;
@extern method GCalcProcessClass, MSG_CURSOR_ANS_ENDE;
@extern method GCalcProcessClass, MSG_CURSOR_AN_ZEILENANFANG;
/*@extern method GCalcProcessClass, MSG_CURSOR_LOESCHT_RECHTS;*/
@extern method GCalcProcessClass, MSG_DISPLAY_LOESCHEN;
@extern method GCalcProcessClass, MSG_ARBEITSBEREICH_EINSTELLEN;
@extern method GCalcProcessClass, MSG_SHOW_F1_MODE_INTERACTION;
@extern method GCalcProcessClass, MSG_SHOW_F2_MODE_INTERACTION;
@extern method GCalcProcessClass, MSG_SHOW_F3_MODE_INTERACTION;
@extern method GCalcProcessClass, MSG_SHOW_F4_MODE_INTERACTION;
@extern method GCalcProcessClass, MSG_SHOW_F5_MODE_INTERACTION;
@extern method GCalcProcessClass, MSG_ENDISABLE_TRIGGERS;
@extern method GCalcProcessClass, MSG_APPLIKATION_VERLASSEN;

@classdecl TriggerDataTriggerClass;
@classdecl GCalcInteractionClass;

C_CallbackStruct cbStruct;
/*byte result[100] ={ 0 };*/
char ergebnis[100];
char entry[100];
int winkelmass;
double digits;
char speicher[100];
//char wurzel[3];
word arbeitsbereich=1;
word arbeitsbereich_vorher=1;
optr aktives_Textobjekt;
WindowHandle ourWindow = NullHandle;
double xfaktor=1;
double yfaktor=1;
double deltax=0;
double deltay=0;
int fvonx[321];
/*Point punkt[321];*/
WWFixedAsDWord dicke[5];
word muster[5];
byte farbindex[5];
byte hintergrund;
byte x_achsen_teilung;
byte ko_achsen;
byte zeilenzahl;
LocalNumericFormat  *dez_format;
wchar dez_zeichen;
FloatFloatToAsciiFormatFlags format;
byte z_format;
int f_fehler; /*Fehler bei der Funktionswertberechnung*/

static void
SysNotifyWithData(void *Ptr,word size,word notificationType,word listType);
static void
SelectItem(void);

int TextGetCursorPosition()
{
  int retVal = 0;
  VisTextRange textRange;

  @call aktives_Textobjekt::MSG_VIS_TEXT_GET_SELECTION_RANGE (&textRange);
  retVal = textRange.VTR_start;
  return retVal;
}





/***********************************************************************
 *		MSG_GCALC_PROCESS_CALCULATE for GCalcProcessClass
 ***********************************************************************
 * SYNOPSIS:	    calculates text field
 * PARAMETERS:	    none
 * SIDE EFFECTS:    updates the result text field with the result of
 *                  evaluating the formula
 *
 * STRATEGY: get the formula string, send it through the parser,
 *           display the result
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CP	4/15/94   	Initial Revision
 *	EB	3/18/96		made eElement correctly point to result &
 *				fixed vType to check for ESAT_NUMBER.
 *
 ***********************************************************************/
@method GCalcProcessClass, MSG_GCALC_PROCESS_CALCULATE
{
    char buf[500];
    int laenge,i;
    char *rPtr;
    VisTextRange		range;
    VisTextGetAttrFlags 	flags;
    VisTextParaAttrDiffs	diffs;
    VisTextMaxParaAttr	attrs;
    dword lineNumber;


    if (arbeitsbereich==TABLE)
        @call self::MSG_FUNKTIONSWERTE_BERECHNEN();
    else
    {
   
       flags = 0;
       @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_END_OF_TEXT,0);
       @call Rechenfenster::MSG_VIS_TEXT_GET_ALL_PTR(buf);
//MessageBox(buf);       
       rPtr =strrchr(buf, '\r'); //die physikalische Entertaste erzeugt ein '\r', darf aber nur ein '\n' erzeugen, sonst bleibt buf leer
       if (rPtr!=NULL) {	//nur den Teilstring nach dem letzten \r übernehmen
            rPtr++;
           strcpy(buf,rPtr);
       }
  //MessageBox(buf);  //buf enthält jetzt den zu berechnenden Term
       strcpy(entry,buf); 		//Eingabe für Entry-Button kopieren
//MessageBox(entry);
       laenge=strlen(buf);
       if (laenge != 0)		// Nur wenn wirklich eine Eingabe erfolgt ist
       {
          @call Rechenfenster::MSG_VIS_TEXT_APPEND_PTR("\r",0);
          Parser_anwenden(buf,/*ergebnis, */digits);

          /*@call Rechenfenster::MSG_VIS_TEXT_ADD_PARA_ATTR(J_RIGHT << VTDPA_JUSTIFICATION_OFFSET);*/

          @call Rechenfenster::MSG_VIS_TEXT_GET_SELECTION_RANGE(&range);

          @call Rechenfenster::MSG_VIS_TEXT_GET_PARA_ATTR(flags,&diffs,&attrs,range.VTR_end,range.VTR_start);

          attrs.VTMPA_paraAttr.VTPA_attributes = (J_RIGHT << VTDPA_JUSTIFICATION_OFFSET);
          @call Rechenfenster::MSG_VIS_TEXT_SET_PARA_ATTR(&attrs.VTMPA_paraAttr,range.VTR_end,range.VTR_start);

          @call Rechenfenster::MSG_VIS_TEXT_APPEND_PTR(ergebnis, 0);
          @call Rechenfenster::MSG_VIS_TEXT_APPEND_PTR("\r",0);
          @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_END_OF_TEXT,0);

          @call Rechenfenster::MSG_VIS_TEXT_GET_SELECTION_RANGE(&range);
          @call Rechenfenster::MSG_VIS_TEXT_GET_PARA_ATTR(flags,&diffs,&attrs,range.VTR_end,range.VTR_start);
          attrs.VTMPA_paraAttr.VTPA_attributes = (J_LEFT << VTDPA_JUSTIFICATION_OFFSET);
          @call Rechenfenster::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
          @call Rechenfenster::MSG_VIS_TEXT_SET_PARA_ATTR(&attrs.VTMPA_paraAttr,range.VTR_end,range.VTR_start);
          @call Rechenfenster::MSG_GEN_SET_USABLE(VUM_NOW);

          /*Wie viele Zeilen sind schon beschrieben?*/
          lineNumber = @call Rechenfenster::MSG_VIS_TEXT_GET_TEXT_SIZE()-1;
          /*InfoBox("MSG_VIS_TEXT_GET_TEXT_SIZE()-1 \01",lineNumber,""); */
          lineNumber = @call Rechenfenster::MSG_VIS_TEXT_GET_LINE_FROM_OFFSET(lineNumber)+1;
          /*InfoBox("MSG_VIS_TEXT_GET_LINE_FROM_OFFSET \01",lineNumber,"");           */

          if (lineNumber>=6)		//Text mindestens 2 Zeilen nach oben scrollen
          {
                 for (i=1;i<=lineNumber-6;i++)
                 {
		    @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_START_OF_TEXT,0);
                    @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_DELETE_LINE,0);
		    @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_DELETE_CHAR,0);
                 }
                 @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_START_OF_TEXT,0);
          }
           @call Rechenfenster::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_END_OF_TEXT,0);
       }
     }
}


@method GCalcProcessClass, MSG_ERGEBNIS_EINGEBEN
{
     @call Rechenfenster::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ergebnis, 0);
     @call Rechenfenster:: MSG_META_GRAB_FOCUS_EXCL();
}
@method GCalcProcessClass, MSG_EINGABE_EINGEBEN
{
     @call Rechenfenster::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(entry, 0);
     @call Rechenfenster:: MSG_META_GRAB_FOCUS_EXCL();
}
@method GCalcProcessClass, MSG_KEHRWERT_VOM_ERGEBNIS
{
     char ans[100];

     strcpy(ans,"1/");
     strcat(ans,ergebnis);
     @call Rechenfenster::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ans,0);
     @call Rechenfenster:: MSG_META_GRAB_FOCUS_EXCL();
}

@method GCalcProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
     word groesse;
     Boolean err;
     char term[100];
     selections selectionCheck;
     selections selectionDotCon;
     word selectionLinienMuster;
     word selectionLM[5];
     word selectionLinienDicke;
     double zahl;
     char zahl_str[2];
     //word sprache;

@callsuper();

      LocalGetNumericFormat(dez_format);
/*typedef struct {
    byte	numberFormatFlags;
    byte	decimalDigits;
    wchar	thousandsSeparator;
    wchar	decimalSeparator;
    wchar	listSeparator;
} LocalNumericFormat;*/
     
     dez_zeichen=dez_format->decimalSeparator;		/*Anpassung an lokales Dezimaltrennzeichen*/
     //MessageNumberBox(dez_zeichen);
     //MessageNumberBox(dez_format->decimalSeparator);
     if (dez_zeichen==46)
     {
     @call Taste_Dezimalpunkt::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@Dezimalpunkt),VUM_NOW);
     //MessageBox("Punkt");
     }
     else @call Taste_Dezimalpunkt::MSG_GEN_USE_VIS_MONIKER(OptrToChunk(@Dezimalkomma),VUM_NOW);
     

     err = InitFileReadStringBuffer("gcalc","Function1",term,100,&groesse);	
     if (!err)@call Funktionsterm1::MSG_VIS_TEXT_REPLACE_ALL_PTR(term,0);
     err = InitFileReadStringBuffer("gcalc","Function2",term,100,&groesse);
     if (!err)@call Funktionsterm2::MSG_VIS_TEXT_REPLACE_ALL_PTR(term,0);
     err = InitFileReadStringBuffer("gcalc","Function3",term,100,&groesse);
     if (!err)@call Funktionsterm3::MSG_VIS_TEXT_REPLACE_ALL_PTR(term,0);
     err = InitFileReadStringBuffer("gcalc","Function4",term,100,&groesse);
     if (!err)@call Funktionsterm4::MSG_VIS_TEXT_REPLACE_ALL_PTR(term,0);
     err = InitFileReadStringBuffer("gcalc","Function5",term,100,&groesse);
     if (!err)@call Funktionsterm5::MSG_VIS_TEXT_REPLACE_ALL_PTR(term,0);

     /*err = InitFileReadStringBuffer("gcalc","memory", speicher , 100, &groesse);
     if (err) strcpy(speicher,"0");
     if (strlen(speicher)>0)
     
         @call InfotextSpeicher::MSG_VIS_TEXT_REPLACE_ALL_PTR("M",0);
     else
         @call InfotextSpeicher::MSG_VIS_TEXT_DELETE_ALL();*/

      err = InitFileReadInteger("gcalc","F_active",&selectionCheck);
      if (err) selectionCheck=0;
      @call F_Check::MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(selectionCheck,0);

      err = InitFileReadInteger("Gcalc","Dot_Connected",&selectionDotCon);
      if (err) selectionDotCon = 0;
      else
      {
          if (selectionDotCon & 1) @call DotConnected1::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(MODUS_DOT,0);
          if (selectionDotCon & 2) @call DotConnected2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(MODUS_DOT,0);
          if (selectionDotCon & 4) @call DotConnected3::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(MODUS_DOT,0);
          if (selectionDotCon & 8) @call DotConnected4::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(MODUS_DOT,0);
          if (selectionDotCon & 16) @call DotConnected5::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(MODUS_DOT,0);
       }
      err = InitFileReadInteger("Gcalc","pattern",&selectionLinienMuster);
      if (err) selectionLinienMuster = 0;
      else
      {
           selectionLM[4]=div(selectionLinienMuster,10000);
           @call LinienMuster5::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selectionLM[4],0);
           selectionLinienMuster = selectionLinienMuster - 10000*selectionLM[4];
           selectionLM[3]=div(selectionLinienMuster,1000);
           @call LinienMuster4::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selectionLM[3],0);
           selectionLinienMuster = selectionLinienMuster - 1000*selectionLM[3];
           selectionLM[2]=div(selectionLinienMuster,100);
           @call LinienMuster3::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selectionLM[2],0);
           selectionLinienMuster = selectionLinienMuster - 100*selectionLM[2];
           selectionLM[1]=div(selectionLinienMuster,10);
           @call LinienMuster2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selectionLM[1],0);
           selectionLinienMuster = selectionLinienMuster - 10*selectionLM[1];
           selectionLM[0]=selectionLinienMuster ;
           @call LinienMuster1::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selectionLM[0],0);
       }
       err = InitFileReadInteger("Gcalc","width",&selectionLinienDicke);
       if (err)
       {
            selectionLinienDicke=0;
            strcpy(zahl_str,"0");
            @call LinienDicke5::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            @call LinienDicke4::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            @call LinienDicke3::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            @call LinienDicke2::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            @call LinienDicke1::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
       }
       else
       {
            zahl = div(selectionLinienDicke,10000);
            LocalFixedToAscii(zahl_str,MakeWWFixed(zahl),0);
            @call LinienDicke5::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            selectionLinienDicke = selectionLinienDicke - 10000*zahl;
            zahl = div(selectionLinienDicke,1000);
            LocalFixedToAscii(zahl_str,MakeWWFixed(zahl),0);
            @call LinienDicke4::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            selectionLinienDicke = selectionLinienDicke - 1000*zahl;
            zahl = div(selectionLinienDicke,100);
            LocalFixedToAscii(zahl_str,MakeWWFixed(zahl),0);
            @call LinienDicke3::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            selectionLinienDicke = selectionLinienDicke - 100*zahl;
            zahl = div(selectionLinienDicke,10);
            LocalFixedToAscii(zahl_str,MakeWWFixed(zahl),0);
            @call LinienDicke2::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
            selectionLinienDicke = selectionLinienDicke - 10*zahl;
            zahl = selectionLinienDicke;
            LocalFixedToAscii(zahl_str,MakeWWFixed(zahl),0);
            @call LinienDicke1::MSG_VIS_TEXT_REPLACE_ALL_PTR(zahl_str,0);
       }
       //err = InitFileReadInteger("gcalc","col1",&farbindex[0]);
        err = InitFileReadInteger("gcalc","col3", (unsigned short *) &farbindex[2]);
       if (err) farbindex[0]=0;
       @call Farbauswahl1::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(farbindex[0],0);

       //err = InitFileReadInteger("gcalc","col2",&farbindex[1]);
       err = InitFileReadInteger("gcalc","col2",(unsigned short *) &farbindex[1]);
       if (err) farbindex[1]=2;
       @call Farbauswahl2::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(farbindex[1],0);

       //err = InitFileReadInteger("gcalc","col3",&farbindex[2]);
       err = InitFileReadInteger("gcalc","col3", (unsigned short *) &farbindex[2]);
       if (err) farbindex[2]=3;
       @call Farbauswahl3::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(farbindex[2],0);

       //err = InitFileReadInteger("gcalc","col4",&farbindex[3]);
       err = InitFileReadInteger("gcalc","col4",(unsigned short *) &farbindex[3]);
       if (err)farbindex[3]=9;
       @call Farbauswahl4::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(farbindex[3],0);

       //err = InitFileReadInteger("gcalc","col5",&farbindex[4]);
       err = InitFileReadInteger("gcalc","col5", (unsigned short *) &farbindex[4]);
       if (err) farbindex[4]=12;
       @call Farbauswahl5::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(farbindex[4],0);

       //err = InitFileReadInteger("gcalc","memory", &zahl);
      /* err = InitFileReadInteger("gcalc","memory", (unsigned short *) &zahl);
       
       if ((err) || (zahl==0))
           @call InfotextSpeicher::MSG_VIS_TEXT_DELETE_ALL();*/
       @call EditControl::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
       //@call Rechenfenster::MSG_META_GRAB_FOCUS_EXCL();

      @call self::MSG_OPTIONEN_LADEN();
      
}
@method GCalcProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{
       char term[100];
       selections selectionCheck;
       selections selectionDotCon;
       word selectionDC[5];
       word selectionLinienMuster;
       word selectionLM[5];
       word selectionLinienDicke;
       char dicke_str[2];
       long double breite;

        arbeitsbereich=CALCULATOR;
        //Funktionsterme sichern
        selectionDotCon = 0;
         @call Funktionsterm1::MSG_VIS_TEXT_GET_ALL_PTR(term);
         if (strlen(term)>0)
             InitFileWriteString("gcalc","Function1",term);
         else
             InitFileWriteString("gcalc","Function1","");
         selectionDC[0]=@call DotConnected1::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         if (selectionDC[0]==1) selectionDotCon=selectionDotCon + 1;
         selectionLM[0] = @call LinienMuster1::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         selectionLinienMuster=selectionLM[0];

         @call Funktionsterm2::MSG_VIS_TEXT_GET_ALL_PTR(term);
         if (strlen(term)>0)
              InitFileWriteString("gcalc","Function2",term);
         else
              InitFileWriteString("gcalc","Function2","");
         selectionDC[1]=@call DotConnected2::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         if (selectionDC[1]==1) selectionDotCon=selectionDotCon + 2;
         selectionLM[1] = @call LinienMuster2::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         selectionLinienMuster=selectionLinienMuster + 10*selectionLM[1];
        @call LinienDicke1::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
         FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
         //FloatPopNumber(&breite);
         FloatGeos80ToIEEE64(&breite);
         selectionLinienDicke = (int)breite;
         @call LinienDicke2::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
         FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
         //FloatPopNumber(&breite);
         FloatGeos80ToIEEE64(&breite);
         selectionLinienDicke=selectionLinienDicke + (int)10*breite;
         @call Funktionsterm3::MSG_VIS_TEXT_GET_ALL_PTR(term);
         if (strlen(term)>0)
              InitFileWriteString("gcalc","Function3",term);
         else
              InitFileWriteString("gcalc","Function3","");
         selectionDC[2]=@call DotConnected3::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         if (selectionDC[2]==1) selectionDotCon=selectionDotCon + 4;
         selectionLM[2] = @call LinienMuster3::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         selectionLinienMuster=selectionLinienMuster + 100*selectionLM[2];
         @call LinienDicke3::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
         FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
         //FloatPopNumber(&breite);
         FloatGeos80ToIEEE64(&breite);
         selectionLinienDicke=selectionLinienDicke + (int)100*breite;
         @call Funktionsterm4::MSG_VIS_TEXT_GET_ALL_PTR(term);
         if (strlen(term)>0)
              InitFileWriteString("gcalc","Function4",term);
         else
              InitFileWriteString("gcalc","Function4","");
         selectionDC[3]=@call DotConnected4::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         if (selectionDC[3]==1) selectionDotCon=selectionDotCon + 8;
         selectionLM[3] = @call LinienMuster4::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         selectionLinienMuster=selectionLinienMuster + 1000*selectionLM[3];
         @call LinienDicke4::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
         FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
         //FloatPopNumber(&breite);
         FloatGeos80ToIEEE64(&breite);
         selectionLinienDicke=selectionLinienDicke + (int)1000*breite;
         @call Funktionsterm5::MSG_VIS_TEXT_GET_ALL_PTR(term);
         if (strlen(term)>0)
               InitFileWriteString("gcalc","Function5",term);
         else
               InitFileWriteString("gcalc","Function5","");
         selectionDC[4]=@call DotConnected5::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         if (selectionDC[4]==1) selectionDotCon=selectionDotCon + 16;
         selectionLM[4] = @call LinienMuster5::MSG_GEN_ITEM_GROUP_GET_SELECTION();
         selectionLinienMuster=selectionLinienMuster + 10000*selectionLM[4];
         @call LinienDicke5::MSG_VIS_TEXT_GET_ALL_PTR(dicke_str);
         FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(dicke_str),dicke_str,0);
         //FloatPopNumber(&breite);
         FloatGeos80ToIEEE64(&breite);
         selectionLinienDicke=selectionLinienDicke + (int)10000*breite;
         selectionCheck=@call F_Check::MSG_GEN_BOOLEAN_GROUP_GET_SELECTED_BOOLEANS();
         InitFileWriteInteger("gcalc","F_active",selectionCheck);
         InitFileWriteInteger("gcalc","Dot_Connected",selectionDotCon);
         InitFileWriteInteger("gcalc","pattern",selectionLinienMuster);
         InitFileWriteInteger("gcalc","width",selectionLinienDicke);
         InitFileWriteInteger("gcalc","col1",farbindex[0]);
         InitFileWriteInteger("gcalc","col2",farbindex[1]);
         InitFileWriteInteger("gcalc","col3",farbindex[2]);
         InitFileWriteInteger("gcalc","col4",farbindex[3]);
         InitFileWriteInteger("gcalc","col5",farbindex[4]);
         InitFileSave();
         InitFileCommit();
     @callsuper();
     return 0;
}
@method GCalcProcessClass, MSG_SPEICHERN
{
      double wert;
      word sprache;
      
      strcpy(speicher,ergebnis);
      FloatAsciiToFloat( FAF_PUSH_RESULT,strlen(speicher),speicher,0);
      FloatGeos80ToIEEE64(&wert);
      if (wert==0) strcpy(speicher,"0");
      InitFileWriteString("gcalc","memory",speicher);
      InitFileSave();
      InitFileCommit();

      //if (wert==0) MessageBox(zahl);
      if (wert==0)
          @call InfotextSpeicher::MSG_VIS_TEXT_DELETE_ALL();
      else
      {
      	  sprache = @call Sprachen::MSG_GEN_ITEM_GROUP_GET_SELECTION();	
      	  if (sprache==ENGLISCH)
             @call InfotextSpeicher::MSG_VIS_TEXT_REPLACE_ALL_PTR("M",0);
          else
             @call InfotextSpeicher::MSG_VIS_TEXT_REPLACE_ALL_PTR("S",0);
      }
}
@method GCalcProcessClass, MSG_RECALL
{
      switch (arbeitsbereich)
      {
           case CALCULATOR:
                    @call Rechenfenster::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(speicher, 0);
                     break;
           case Y_EDITOR:
                     @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(speicher, 0);
                      break;
      }
}
@method GCalcProcessClass, MSG_META_TEXT_GAINED_FOCUS
{
     @callsuper();
     /*if (arbeitsbereich!=CALCULATOR)
        aktives_Textobjekt = @Rechenfenster;
     else*/
     aktives_Textobjekt = obj;
}

@method GCalcProcessClass, MSG_META_CONTENT_VIEW_WIN_OPENED
 {
    ourWindow = viewWindow;
    @callsuper();
 }

@method GCalcProcessClass, MSG_INVALIDATE_VIEW
{
     GStateHandle gstate;

     gstate = GrCreateState(ourWindow);
     GrInvalRect(gstate,0,0,322,160);
     GrDestroyState(gstate);
     @callsuper();
}
@method GCalcProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;

    //ourWindow=win;			//sind win und ourWindow irgendwo definiert?
    gstate = GrCreateState(ourWindow);  //warum nicht win?
    GrBeginUpdate(gstate);
//MessageBox("Grafen zeichnen");
    Diagramm_zeichnen(gstate);
    Grafen_zeichnen(gstate);
//MessageBox("Grafen_zeichnen beendet");
    SelectItem();
    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}

static void
SysNotifyWithData(void *Ptr,word size,word notificationType,word listType)
{
    MemHandle data;                     // Extra data block sent along with the
					// notification.
    void *dataPtr;                      // The extra data block, locked
    EventHandle notifyEvent;            // Recorded notification event for
					// the GCN list

    data = MemAlloc(size, HF_DYNAMIC | HF_SHARABLE, 0);
					// allocate space for data item
    dataPtr = (void *) MemLock(data);
    memcpy(dataPtr,Ptr,size);           // transfer data into shared memory
    MemUnlock(data);

    MemInitRefCount(data, 1);

    notifyEvent = @record null::MSG_META_NOTIFY_WITH_DATA_BLOCK
			(MANUFACTURER_ID_GEOWORKS,notificationType,
			 data);
    @call application::MSG_META_GCN_LIST_SEND
	(GCNLSF_SET_STATUS,
	 notifyEvent,
	 data,
	 listType,
	 MANUFACTURER_ID_GEOWORKS);
}

static void
SelectItem(void)
{
    NotifySelectStateChange nssc;
    // inform the world if we have a graphics item waiting for "Cut"
    nssc.NSSC_selectionType = SDT_GRAPHICS;
    nssc.NSSC_clipboardableSelection = 1;
    nssc.NSSC_deleteableSelection = TRUE;
    nssc.NSSC_selectAllAvailable = TRUE;
    nssc.NSSC_pasteable = FALSE;
    SysNotifyWithData(&nssc,sizeof(nssc),
		      GWNT_SELECT_STATE_CHANGE,
		      GAGCNLT_APP_TARGET_NOTIFY_SELECT_STATE_CHANGE);
}
/***********************************************************************
 *                               CopyCommon
 ***********************************************************************/
static void CopyCommon(ClipboardItemFlags flags)
{
    VMFileHandle      transferVMFile;  // VM file handle of Transfer VM File
    VMBlockHandle     dataVMBlock;     // VM handle of attached data block
    VMBlockHandle     headerVMBlock;   // VM handle of attached header block
    ClipboardItemHeader *headerMem;    // ClipboardItemHeader for the VM file
    MemHandle         headerMemHandle; // handle of ClipboardItemHeader block
    GStateHandle      gstate;          // graphics state for gstring

    // Now get the transfer VM file.
    transferVMFile = ClipboardGetClipboardFile();

    // create graphics string
    gstate = GrCreateGString(transferVMFile, GST_VMEM, &dataVMBlock);
    Diagramm_zeichnen(gstate);
    Grafen_zeichnen(gstate);
    GrEndGString(gstate);
    GrDestroyGString(gstate, 0, GSKT_LEAVE_DATA);

    // Now, allocate and fill in the transfer item header block.

    headerVMBlock = VMAlloc(transferVMFile, sizeof(ClipboardItemHeader), 1111);
    headerMem = (ClipboardItemHeader *)VMLock(transferVMFile, headerVMBlock,
							&headerMemHandle);
    headerMem->CIH_owner = (optr) (((dword)GeodeGetProcessHandle()<<16) | 0);
    //headerMem->CIH_owner = (optr) ((GeodeGetProcessHandle()<<16) | 0);
    headerMem->CIH_flags = 0;           // Normal transfer; no flags.
    headerMem->CIH_sourceID = 0;
    strncpy(headerMem->CIH_name, "Test", CLIPBOARD_ITEM_NAME_LENGTH);
    headerMem->CIH_name[CLIPBOARD_ITEM_NAME_LENGTH]=0;

    headerMem->CIH_formatCount = 1;     // only one format

    // describe format
    headerMem->CIH_formats[0].CIFI_format =
		FormatIDFromManufacturerAndType(MANUFACTURER_ID_GEOWORKS,
						CIF_GRAPHICS_STRING);
    headerMem->CIH_formats[0].CIFI_vmChain =
				VMCHAIN_MAKE_FROM_VM_BLOCK(dataVMBlock);
    headerMem->CIH_formats[0].CIFI_extra1 = 0;
    headerMem->CIH_formats[0].CIFI_extra2 = 0;
    VMUnlock(headerMemHandle);

    // Now register the transfer item with the Clipboard. This will actually
    // put the transfer item and its header into the Clipboard.

    ClipboardRegisterItem(BlockIDFromFileAndBlock(transferVMFile,headerVMBlock),
			  flags);
}
@method GCalcProcessClass, MSG_META_CLIPBOARD_COPY
{
    CopyCommon(TIF_NORMAL);             // copy object to clipboard
}

@method GCalcProcessClass, MSG_APPLIKATION_VERLASSEN
{
	@call GCalcApp::MSG_META_QUIT();
}
@method GCalcProcessClass, MSG_META_KBD_CHAR
{
	//MessageBox("proccess");
	@send FensterwechselBlock::MSG_META_GRAB_FOCUS_EXCL();
	@callsuper();
}
@method GCalcInteractionClass, MSG_META_KBD_CHAR
{
	EventHandle event;
	
	//MessageBox("Inter");
	if(character==-229)	//Escape
	{
         event = @record null:: MSG_GEN_GUP_INTERACTION_COMMAND( IC_DISMISS);	
    	 @call GCalcApp::MSG_META_SEND_CLASSED_EVENT(event, TO_FOCUS);     	 
	 @call Menu2::MSG_META_GRAB_FOCUS_EXCL();	 
    	}
    	@callsuper();
}

@method TriggerDataTriggerClass, MSG_META_KBD_CHAR
{
	//MessageBox("Trig");
	if (character==-229) @send FensterwechselBlock::MSG_META_GRAB_FOCUS_EXCL();
	@callsuper();
}

