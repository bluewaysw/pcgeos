@include <stdapp.goh>
@include "Main/grafcalc.goh"
@include "UI/appui.goh"
#include <parse.h>


extern word arbeitsbereich=1;
extern optr aktives_Textobjekt;
extern char ergebnis[100];
extern wchar dez_zeichen;
extern int winkelmass;
extern FloatFloatToAsciiFormatFlags format;
extern byte z_format;

@extern method GCalcProcessClass, MSG_ZIFFERN
{
    int pos,i;
    char *rPtr;
    char buf[200];
    char str_zahl[20];
    byte dezimalzeichen_vorhanden=0;

//MessageBox(ms.MS_ziffer);
    if ((arbeitsbereich==CALCULATOR) || (arbeitsbereich==Y_EDITOR))
    {
    //MessageBox(ms.MS_ziffer);
    	pos=TextGetCursorPosition();
    	@call aktives_Textobjekt::MSG_VIS_TEXT_GET_ALL_PTR(buf);
    	rPtr =strrchr(buf, '\r');	//Zeiger auf das letzte gefundene \r
    	// Eingaben nur in der aktuellen Eingabezeile

        if ((strchr(ms.MS_ziffer,'E')) || (strchr(ms.MS_ziffer,'.')) || (strchr(ms.MS_ziffer,',')))
        {
	    if  (strchr(ms.MS_ziffer,'E'))  	/*E nur zulassen, wenn vorher Ziffer eingegeben*/
            {
                 if ((buf[pos-1]>47) && (buf[pos-1]<58))	//nur Ziffern
                      @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
            }
            else		/*Dezimalzeichen nur zulassen, wenn in der aktuellen Zahl noch keines gesetzt ist*/
            {
		dezimalzeichen_vorhanden=0;
                ms.MS_ziffer[0]=dez_zeichen;		/*Anpassung an lokales Dezimaltrennzeichen*/
		i=pos;	/* Zahl nach links durchlaufen*/
                while ((i>0) && (buf[i-1]>47) && (buf[i-1]<58))
		{
                    i--;
		}
		if (buf[i-1]==dez_zeichen) dezimalzeichen_vorhanden=1;
                i=pos;	/*Zahl nach rechts durchlaufen*/
		while ((buf[i]>47) && (buf[i]<58))
		{
                    i++;
		}
		if (buf[i]==dez_zeichen) dezimalzeichen_vorhanden=1;
                if (dezimalzeichen_vorhanden==0)
	            @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
             }
        }
        else
	    @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
	//@call Entertaste:: MSG_META_GRAB_FOCUS_EXCL(); 
       }
       if (arbeitsbereich==TABLE)
       {
             @call aktives_Textobjekt::MSG_VIS_TEXT_GET_ALL_PTR(str_zahl);
             if (strchr(ms.MS_ziffer,dez_zeichen))
             {
   	         rPtr = strchr(str_zahl,dez_zeichen);	//Dezimalpunkt schon vorhanden?
                 if (rPtr==NULL)		//wenn nicht, dann Punkt setzen, sonst verwerfen
                     @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
	     }
                      else
	     if (strchr(ms.MS_ziffer,'-'))
             {
	         rPtr = strchr(str_zahl,'-');
                 if (rPtr==NULL)		//wenn nicht, dann Minuszeichen setzen, sonst verwerfen
                    @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
	         @call aktives_Textobjekt::MSG_VIS_TEXT_GET_ALL_PTR(str_zahl);
	         if (strchr(str_zahl,'-')!=str_zahl)
                    @call aktives_Textobjekt::MSG_VIS_TEXT_DO_KEY_FUNCTION(VTKF_DELETE_BACKWARD_CHAR,0);
	      }
              else                         
              {
                  if ((strchr(ms.MS_ziffer,'.')) || (strchr(ms.MS_ziffer,','))) ms.MS_ziffer[0]=dez_zeichen;
                  @call aktives_Textobjekt::MSG_VIS_TEXT_REPLACE_SELECTION_PTR(ms.MS_ziffer, 0);
              }
         }
}

void _pascal
ParserCallback (C_CallbackStruct *cbStruct)
{
    byte callbacktyp;

    callbacktyp=cbStruct->C_callbackType;

    switch (callbacktyp)
    {
        case 0:				/*CT_FUNCTION_TO_TOKEN*/
 		cbStruct->C_u.CT_ftt.isFunctionName=0;
    		cbStruct->C_u.CT_ftt.funcID=0;
		break;
        case 1:				/*CT_NAME_TO_TOKEN*/
		cbStruct->C_u.CT_ntt.nameID=0;
    		cbStruct->C_u.CT_ntt.errorOccurred=1;
   		cbStruct->C_u.CT_ntt.error=10;
		break;
        case 2:				/*CT_CHECK_NAME_EXISTS*/
		cbStruct->C_u.CT_cne.nameExists=0;
			/*cbStruct->C_u.CT_cne.length=0;
			cbStruct->C_u.CT_cne.text=NULL;*/
		break;
        case 4:				/*CT_EVAL_FUNCTION*/
		cbStruct->C_u.CT_ef.errorOccurred=1;
    		cbStruct->C_u.CT_ef.error=10;
		break;
        case 14:				/*CT_SPECIAL_FUNCTION*/
    		cbStruct->C_u.CT_sf.newArgStack=NULL;
    		cbStruct->C_u.CT_sf.errorOccurred=1;
    		cbStruct->C_u.CT_sf.error=10;
     }
}
int Parser_anwenden(char buf[100], byte nachkommastellen)
{
    char bufh[100];
    char bufkopie[100];
    byte token[100];
    byte scratch[100];
    byte result[100];
    //byte result_eval[100];
    CParserStruct pParams;
    CParserReturnStruct rVal;
    char *rPtr;
    int laenge;
    int i,j,gefunden,klammer_auf;
    char wert[2];
    char fehlercode[] = "Fehlercode: ";
    //int parserfunktionswert=0;
    byte fehlernr=0;
    int err,fehler;
    double ergebniszahl;
    word sprache;

    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    laenge=strlen(buf);j=0;
    for (i=0;i<laenge;i++) 				/*Mal-Zeichen einsetzen, z.B. 2x wird zu 2*x, damit der Parser 2x versteht*/
    {
      if (
            ( 
                 ( (buf[i]>47) && (buf[i]<58) || (buf[i]==')') || (buf[i]==185) || (buf[i]=='e') )	//0 bis 9 oder ) oder pi oder e
              && ( (buf[i+1]=='e') || (buf[i+1]=='a') || (buf[i+1]=='c') || (buf[i+1]=='f') || (buf[i+1]=='s') || (buf[i+1]=='t') || (buf[i+1]=='(') || (buf[i+1]=='l') || (buf[i+1]==185) )
            )
              || ( ((buf[i]==')') || (buf[i]=='e') || (buf[i]==185)) && ((buf[i+1]>47) && (buf[i+1]<58) || (buf[i+1]=='(')) )  
         )           /*pi entspricht dem Code 185*/
      {   
	      bufh[j]=buf[i];
              j++;
              bufh[j]='*';
              j++;
         }
         else
         {
          //MessageBox("Hi");
              bufh[j]=buf[i];
              j++;
         }
    }
    bufh[j]='\0';
    strcpy(buf,bufh);
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
	       if (strchr(buf,'e'))
                           {
                               j=0;					//Eulersche Zahl e
	          gefunden=0;
                              laenge=strlen(buf);
	          for (i=0;i<laenge;i++)
	          {
	               if (buf[i]=='e')
	               {
	                  gefunden=1;
	                  bufh[j]='(';j++;bufh[j]='e';j++;bufh[j]='x';j++;bufh[j]='p';j++;bufh[j]='(';j++;bufh[j]='1';j++;bufh[j]=')';j++;bufh[j]=')';
	                }
	               else
	                  bufh[j]=buf[i];
	               j++;
	           }
	           bufh[j]='\0';
	           if (gefunden==1) strcpy(buf,bufh);
	           strcpy(bufh,"");
                           }
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	       j=0;					//Ans durch Ergebnis ersetzen

	       laenge=strlen(buf);
	      strcpy(bufkopie,buf);
	      if (strchr(bufkopie,'A')!=NULL)
	      {
	        while (strchr(bufkopie,'A') != NULL)
	        {
	          rPtr=strchr(bufkopie,'A');
	          if (rPtr!=bufkopie)
	           {
	               strncpy(bufh,bufkopie,rPtr-bufkopie);     //Zeichen vor Ans kopieren
	               //MessageBox(bufh);
	               strcat(bufh,(char *) result);     //Ergebnis für Ans anhängen
	               if (strlen(bufkopie)>rPtr-buf+3)         //Wenn vorhanden, Resttext anhängen
	               {
	                   rPtr++;rPtr++;rPtr++;
	                   strcat(bufh,rPtr);
	                   strcpy(bufkopie,rPtr);
	                }
	             }
	             else    // Ans steht am Anfang von bufkopie
	               {
	                  strcat(bufh,(char *) result);
	                  rPtr++;rPtr++;rPtr++;
	                  if (strlen(bufkopie)>3)
	                      strcpy(bufkopie,rPtr);
	               }
	          }  //End While
	          strcpy(buf,bufh);
	        }  //End if

    //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	     while (strchr(buf,185) != NULL)        		//Zeichen fr pi durch 'PI()' ersetzen
	      {
	            rPtr=strchr(buf,185);
	            if (rPtr!=buf)		   //pi steht nicht am Zeilenanfang
	            {
	             strncpy(bufh,buf,rPtr-buf); //Teilstring vor 185 kopieren
	             bufh[rPtr-buf] = '\0';               //Stringterminierung setzen (notwendig? Ja!)
	             strcat(bufh,"PI()");                 //185 ersetzen durch PI()
	             if (strlen(buf)>rPtr-buf)          //Wenn buf nach 185 noch nicht zu Ende, dann Reststring anhängen*
	               strcat(bufh,++rPtr);
	              strcpy(buf,bufh);                   //Rückkopie
	             }
	             else
	              {
	                  strcpy(bufh,"PI()");
	                  if (buf[1]!='\0') {rPtr++;strcat(bufh,rPtr);};
	                  strcpy(buf,bufh);
	               }
	             //LocalFixedToAscii(stringlaenge,MakeWWFixed(strlen(buf)),0);
	      }

    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	      if (winkelmass == GRADMASS)		//Trigonometrische Funktionen sin, cos, tan
	      {
	           strcpy(bufh,"");
	           laenge=strlen(buf);
	           j=0;i=0;
	           while (i<=laenge)
	           {
	                 if ((buf[i]=='s' && buf[i+1]=='i' && !(i>0 && buf[i-1]=='a')) ||  (buf[i]=='c' && buf[i+1]=='o' && !(i>0 && buf[i-1]=='a')) || (buf[i]=='t' && buf[i+1]=='a' && !(i>0 && buf[i-1]=='a')))
	                 {
	                      switch (buf[i])
	                      {
	                          case 's':
	                                   bufh[j]='s';j++;bufh[j]='i';j++;bufh[j]='n';j++;bufh[j]='(';
	                                   break;
	                          case 'c':
	                                   bufh[j]='c';j++;bufh[j]='o';j++;bufh[j]='s';j++;bufh[j]='(';
	                                   break;
	                          case 't':
	                                   bufh[j]='t';j++;bufh[j]='a';j++;bufh[j]='n';j++;bufh[j]='(';
	                                   break;
	                      }
	                      i++;i++;i++;
	                      j++;bufh[j]='r';j++;bufh[j]='a';j++;bufh[j]='d';j++;bufh[j]='i';j++;bufh[j]='a';j++;bufh[j]='n';j++;bufh[j]='s';j++;bufh[j]='(';
	                      klammer_auf=1;
	                      while (klammer_auf>0 && i<=laenge)
	                      {
	                           i++;j++;
	                           if (buf[i]=='(') klammer_auf++;
	                           if (buf[i]==')') klammer_auf--;
	                           bufh[j]=buf[i];
	                       }
	                       j++;bufh[j]=')';
	                 }
	                 else
	                     bufh[j]=buf[i];
	                 j++;
	                 i++;
	           }
	           bufh[j]='\0';
	           strcpy(buf,bufh);
    //-------------------------------------------------------------------------------------------------------------------------------------
	           strcpy(bufh,"");			//Trigonometrische Funktionen asin,acos,atan
	           laenge=strlen(buf);
	           j=0;i=0;
	           while (i<=laenge)
	           {
	                 if ((buf[i]=='a' && buf[i+1]=='s' ) ||  (buf[i]=='a' && buf[i+1]=='c' && buf[i+2] == 'o') || (buf[i]=='a' && buf[i+1]=='t' ))
	                 {    // Übereinstimmung von f_ac_t und ac_os vermeiden (ac)
	                      bufh[j]='d';j++;bufh[j]='e';j++;bufh[j]='g';j++;bufh[j]='r';j++;bufh[j]='e';j++;bufh[j]='e';j++;bufh[j]='s';j++;bufh[j]='(';j++;

	                      bufh[j]=buf[i];i++;j++;bufh[j]=buf[i];i++;j++;bufh[j]=buf[i];i++;j++;bufh[j]=buf[i];

	                      klammer_auf=1;
	                      while (klammer_auf>0 && i<laenge)
	                      {
	                           i++;j++;
	                           if (buf[i]=='(') klammer_auf++;
	                           if (buf[i]==')') klammer_auf--;
	                           bufh[j]=buf[i];
	                       }
	                       bufh[j]=')';

	                 }
	                 else
	                     bufh[j]=buf[i];
	                 j++;
	                 i++;
	           }
	           bufh[j]='\0';
	           strcpy(buf,bufh);
	      }
    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	      //Initialize the parameters that are sent to ParserParseString:			//Parser
	      //Since this routine is used mainly in spreadsheet objects it
	      //requires the use of row, columns, and cells.  We null them out,
	      //so that the function won't get confused and tries to look at
	      //non-existent cells.

	    pParams.C_parameters.PP_common.CP_row = 0;
	    pParams.C_parameters.PP_common.CP_column = 0;
	    pParams.C_parameters.PP_common.CP_maxRow = 0;
	    pParams.C_parameters.PP_common.CP_maxColumn = 0;
	    pParams.C_parameters.PP_common.CP_cellParams = NULL;
	    pParams.C_parameters.PP_parserBufferSize = 500;	/*100 ist zu wenig, führt schnell auf Fehler 7: "Too many Tokens"*/
	    pParams.C_parameters.PP_flags = PF_OPERATORS | PF_NUMBERS | PF_FUNCTIONS ;

	      // It also needs a callback function that never actually gets called,
	      // unless the string contains symbols that the parser doesn''t understand

	    pParams.C_callbackPtr = ParserCallback;
	    /*pParams.C_callbackPtr = NULL;*/ /*funktioniert nicht*/


	     // parse the string and check for an error
                        //MessageBox("vor dem erstenParseraufruf");
                        //MessageBox(buf);

	    err = ParserParseString(buf, token, &pParams, &rVal);


	    if (!(err))		//Kein Fehler beim Parsen
	    {
	         CEvalStruct eParams;

	         //  Initialize the parameters for ParserEvalExpression in a similar way
	         //MessageBox("Kein Fehler");
	         eParams.CE_parameters.EP_common.CP_row = 0;
	         eParams.CE_parameters.EP_common.CP_column = 0;
	         eParams.CE_parameters.EP_common.CP_maxRow = 0;
	         eParams.CE_parameters.EP_common.CP_maxColumn = 0;
	         eParams.CE_parameters.EP_common.CP_cellParams = NULL;
	         eParams.CE_parameters.EP_flags = 0;
	         eParams.CE_callbackPtr = ParserCallback;


                            fehler=ParserEvalExpression(token, scratch, result, 100, &eParams);


	        if (fehler)  strcpy(ergebnis,"Error occured!");
	        else
	        {
	            //    No error, so let''s get the result

	            FloatNum dummy;
	            EvalStackArgumentType vType;

	            ArgumentStackElement *eElement;

	            //  We think that the result is on the fp stack, but we should
	            //  make sure it is.  Do this by checking that the returned
	            //  result is numeric (ESAT_NUMBER) and is of type NT_VALUE.
	            //  Note that result is re-used to contain the ascii string
	            //  from the float to ascii conversion.

	            eElement = (ArgumentStackElement *)result;
	            vType = eElement->ASE_type;

	            if( (vType & ESAT_NUMBER) && ((vType & ESAT_NUM_TYPE) == NT_VALUE))
	            {
	                 //for (i=0;i<99;i++) result_eval[i]=result[i];	//Sicherung von result
                                     //Umwandlung von result in den Ergebnisstring
    	                 FloatFloatToAscii_StdFormat((char *)result, &dummy, format, 15, nachkommastellen);	//15: Anzahl der Vorkommastellen
	                 strcpy(ergebnis,(char *)result);
	                 /*Umwandlung des Ergebnisstrings in Dezimalzahl*/
//MessageBox("Ergebnis umwandeln");
	                 FloatAsciiToFloat(FAF_PUSH_RESULT, strlen(ergebnis),ergebnis,0);   	                 
   	                 FloatGeos80ToIEEE64(&ergebniszahl);

//MessageBox("Ergebnis umgewandelt");
                         fehler=ParserEvalExpression(token, scratch, result, 100, &eParams);	//2.Aufruf, um result wieder auf den Stack zu bringen, sonst funktioniert die Konvertierung nicht.
	                 if (((ergebniszahl>(1E+13)) || (ergebniszahl<-(1E+13)) || ((ergebniszahl<0.0001) && (ergebniszahl>-0.0001))) && (z_format==NORMAL))
                              format=FFAF_DONT_USE_SCIENTIFIC;
                         else
	                 {
                              if (z_format==SCIENTIFIC) //format=FFAF_DONT_USE_SCIENTIFIC;
                                  format=FFAF_SCIENTIFIC;
                              else format=FFAF_DONT_USE_SCIENTIFIC;
	                      FloatFloatToAscii_StdFormat((char *)result, &dummy, format, 15, nachkommastellen);	//15: Anzahl der Gesamtstellen
	                      strcpy(ergebnis,(char *)result);
			 }
	            }
	            else

	                 //    If the type is not a numeric value, then we wont
	                 //    handle it; instead displaying an error.  Note that
	                 //    if vType is ESAT_STRING or _RANGE, the data resides
	                 //    just after the ArgumentStackElement.  I.E., it can be
	                 //    found at result+sizeof(ArgumentStackElement).

	                 // sprintf((char *)result, "Error: result is not a number\n");
	                 //@call Rechenfenster::MSG_VIS_TEXT_APPEND_PTR("Error: result is not a number\r", 0);
	                 {strcpy(ergebnis,"Operation not defined");fehlernr=5;}
	          }
                        }
	    else
	    {
	       // Fehler beim Parsen aufgetreten

	       fehlernr = rVal.PRS_errorCode;
	       LocalFixedToAscii(wert,MakeWWFixed(fehlernr),0);
	       strcat(fehlercode,wert);
	       sprache = @call Sprachen::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	       if (sprache==ENGLISCH)
	          strcpy(ergebnis,"Error in expression");
	       else
	          strcpy(ergebnis,"Ausdrucksfehler");
            }

            if (fehlernr) return fehlernr;else return 0;
}
