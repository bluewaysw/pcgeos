/********************************************************************
 *
 *	Copyright (c) Geoworks 1991-96 -- All Rights Reserved.
 *
 * PROJECT:	  Watcom Float integration test
 * MODULE:	  WatcomC
 * FILE:	  wccfloat.goc
 *
 * AUTHOR:	  Tony Requist: April 1, 1991
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	4/1/91	  tony	    Initial version
 *
 * DESCRIPTION:
 *	This file implements a Hello World-type application for GEOS.
 *	It is processed by GOC, compiled by your favorite C compiler,
 *	and linked by Glue to produce a runnable .geo file.
 *
 * RCS STAMP:
 *	$Id: hello.goc,v 1.1 97/04/04 16:36:02 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include files
 *******************************************************************/
    @include <stdapp.goh>
    #include <float.h>
    #include <Ansi/stdio.h>
    #include <Ansi/string.h>

/********************************************************************
 *		Constants
 *******************************************************************/
    /* These constants are used in the HelloDraw function. */
    #define TEXT_POINT_SIZE  16.0 /* point size */
    #define TEXT_ROTATION     0   /* angle of rotation (degrees) */
    #define TEXT_X_POSITION  30   /* x position, in document coords */
    #define TEXT_Y_POSITION   0   /* y position, in document coords */


/********************************************************************
 *		Class Definitions
 *******************************************************************/

    /* 
     * Here we define "HelloProcessClass" as a subclass of the
     * system provided "GenProcessClass". As this application is
     * launched, an instance of this class will be created, and will
     * handle all application-related events (messages). The application
     * thread will be responsible for running this object, meaning that
     * whenever this object handles a message, we will be executing
     * in the application thread.
     *
     * You will find no object in this file declared to be of this class.
     * Instead, it is specified as the class for the application thread
     * in "hello.gp".
     */
    @class HelloProcessClass, GenProcessClass;

    /* Define messages for this class here. Most commonly, UI objects
     * will send these messages to the application thread when they've
     * been activated by the user. */

    @endc;   /* end of class definition */

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    /*
     * Each object class requires a "class record" be stored in fixed
     * memory for it. The class record is used by the GEOS message
     * system for the delivery of messages sent to an object of the class.
     * The class record needs to be defined in the file where the objects
     * of that class are defined. The @classdecl GOC directive tells GOC
     * to create the class record here.
     *
     * The neverSaved flag is necessary because ProcessClass objects are
     * hybrid objects. It tells the system that no object of this class
     * will ever be loaded from or stored to a file.
     */
    @classdecl HelloProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/*
 *		Application Object
 *
 * The very top-level generic object of an application MUST be a
 * GenApplication object. The hello.gp file contains "appobj"
 * statement which indicates that this "HelloApp" object is in fact
 * the top-level UI object.
 *
 * This object should be in its own resource, as it is all that need
 * be in memory when the application is iconified. As such, its
 * resource should be as small as possible.
 */
@start AppResource;

@object GenApplicationClass HelloApp = {
    /*
     * While the application object isn't shown on the screen, it
     * has a list of VisMonikers for three purposes:
     *	1) the GenPrimary (see below) inherits the moniker when
     *	   it comes up on screen.
     *	2) when GeoManager needs to display an icon for the application,
     *	   and there's none for it in the Token Database, it launches
     *	   the app and sends a message to the application object to
     *	   install its list of monikers in the token database under
     *     the application's token.
     *	3) when the GenPrimary is minimized, it uses the most appropriate
     *	   graphical moniker from this list for the application's icon.
     *	   if there's an abbreviated-text moniker in the list, that's used
     *	   as the icon title. else any regular-text moniker is used.
     */
    GI_visMoniker = list { @HelloTextMoniker };

    /*
     * The GenApplication object has at least one child:
     * the main application window.
     */
    GI_comp = @HelloPrimary;

    /*
     * The main window should appear on-screen when the application
     * is launched, so place it on the GAGCNLT_WINDOWS GCN list.
     * This causes the application object to bring it on-screen at
     * the appropriate time.
     */
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @HelloPrimary;
}

@visMoniker HelloTextMoniker = "Watcom C Float Test";

@end AppResource;

/*
 * This resource is for miscellaneous UI objects.
 */
@start Interface;

/*
 *		Primary window
 *
 * Every application has at least one GenPrimary object.
 * This object serves as the main window of the application.
 * Inside this window, various UI components, such as menus
 * or lists, can be placed.
 */
@object GenPrimaryClass HelloPrimary  = {
    /*
     * This window has one child: the GenView object (see below).
     */
    GI_comp = @HelloView;

    /*
     * The window may not be iconified.
     */
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
}

/*
 *		GenView object
 *
 * This GenView object creates a window where the application can
 * display portions of the document as necessary. As we want this
 * window to be scrollable, the specific UI (Motif) will create
 * scroll bars with which the user can interact. Whenever a portion
 * of the window needs to be redrawn, the GenView object will
 * invalidate a portion of the window, causing a MSG_META_EXPOSED
 * to be sent to the application. The application will draw the
 * document into the window as requested. The window keeps track of
 * a mask, which is used to clip the application's drawing operations,
 * so that only the invalid portion of the window is drawn to.
 */
@object GenViewClass HelloView = {
    /*
     * Make view scrollable in X and Y and ensure that it never
     * gets larger than the thing being displayed within it.
     */
    GVI_horizAttrs = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE
                              | GVDA_NO_LARGER_THAN_CONTENT;

    /*
     * When the contents of this view (i.e. the document) must be
     * updated, the UI should send a MSG_META_EXPOSED to the
     * HelloProcessClass object.
     */
    GVI_content = process;

    /*
     * Specify the dimensions of the document being displayed
     * within the view.
     */
    GVI_docBounds = { 0, 0, 1000, 1000 };

    /*
     * This view will not take text input, so specify that no floating
     * keyboard should come up. Otherwise, we would get a floating
     * keyboard by default on pen-based systems.
     */
     ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

@end Interface;

/********************************************************************
 *		Function Definitions
 *******************************************************************/

void
HelloDrawResultLine(
        GStateHandle    gstate,
        word*            line,
        TCHAR*          testName,
        Boolean         result,
        TCHAR*          resultText,
        word*           errorCount,
        word*           testCount
) 
{
    word yPos = TEXT_Y_POSITION + (*line) * 20;
    GrDrawText( gstate, TEXT_X_POSITION, yPos, testName, 0);
    GrDrawText( gstate, TEXT_X_POSITION + 100, yPos, result ? _T("OK") : _T("FAILED"), 0);
    GrDrawText( gstate, TEXT_X_POSITION + 200, yPos, resultText, 0);

    (*line)++;
    if(!result) {
        (*errorCount)++;
    }
    (*testCount)++;
}

/********************************************************************
 *              HelloDraw
 ********************************************************************
 * SYNOPSIS:	 Redraws the entire document, given a graphics state
 *		 through which to draw.
 * CALLED BY:	 (INTERNAL) HelloProcess::MSG_META_EXPOSED
 * RETURNS:      void
 * SIDE EFFECTS: Various aspects of the gstate are altered.
 * STRATEGY:     First set the font used by this gstate. Then
 *               set the text color. Using the constant angle lets
 *               rotate the gstate. To finish up, draw the text
 *               text to the gstate.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	3/91		Initial Revision
 *      NF      10/4/96         Added Strategy
 *******************************************************************/
void
HelloDraw( GStateHandle gstate )
  /*
   * gstate - GState to draw to.
   */
{
    TCHAR outBuffer[FLOAT_TO_ASCII_HUGE_BUF_LEN+1];
    const double value = 5.3;
    double value2 = 3;
    double value3 = 4200000000;
    float value4 = 4200000000;
    double result;
    dword resultU4;
    sdword resultI4;
    FloatNum resultFN;
    word line = 1;
    word errorCount = 0;
    word testCount = 0;
    float fresult;
    sdword swvalue = -5;
    dword wvalue = 4200000000;
    float fvalue = 5.5;
    float fvalue2 = 3;

    /*
     * First change some of the default GState values, such as font.
     */
    GrSetFont( gstate, FID_DTC_URW_SANS, MakeWWFixed( TEXT_POINT_SIZE ) );

    /*
     * Set the text color to something nice
     * (Light Blue is Nice, by definition).
     */
    GrSetTextColor( gstate, CF_INDEX, C_LIGHT_BLUE, 0, 0 );

    /*
     * Apply a rotation to the transformation matrix, so the text
     * will be drawn at an angle.
     */
    GrApplyRotation( gstate, MakeWWFixed( TEXT_ROTATION ) );

    result = value * value2;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FDM"), 
        strcmp(outBuffer, _T("15.90"))==0, outBuffer, 
        &errorCount, &testCount);

    resultU4 = value3;
    sprintf(outBuffer, "%lu", resultU4);

    HelloDrawResultLine(gstate, &line, _T("__FDU4"), 
        strcmp(outBuffer, _T("4200000000"))==0, outBuffer, 
        &errorCount, &testCount);

    result = value / value2;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);


    HelloDrawResultLine(gstate, &line, _T("__FDD"), 
        strcmp(outBuffer, _T("1.77"))==0, outBuffer, 
        &errorCount, &testCount);

    result = value + value2;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FDA"), 
        strcmp(outBuffer, _T("8.30"))==0, outBuffer, 
        &errorCount, &testCount);

    result = value - value2;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FDS"), 
        strcmp(outBuffer, _T("2.30"))==0, outBuffer, 
        &errorCount, &testCount);

    resultI4 = -value;
    sprintf(outBuffer, "%ld", resultI4);

    HelloDrawResultLine(gstate, &line, _T("__FDI4"), 
        strcmp(outBuffer, _T("-5"))==0, outBuffer, 
        &errorCount, &testCount);

    result = -value;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FDN"), 
        strcmp(outBuffer, _T("-5.30"))==0, outBuffer, 
        &errorCount, &testCount);

    HelloDrawResultLine(gstate, &line, _T("__FDC"), 
        (value > value2) && (value2 < value) && (value == (value2+2.3)), 
        _T(""), 
        &errorCount, &testCount);

    result = value2+7.5;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__EDA"), 
        10.5 == result, 
        outBuffer, 
        &errorCount, &testCount);

    result = value2-7.5;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__EDS"), 
        -4.5 == result, 
        outBuffer, 
        &errorCount, &testCount);

    result = value2*2.1;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__EDM"), 
        strcmp(outBuffer, _T("6.30"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    result = value/3;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__EDD"), 
        strcmp(outBuffer, _T("1.77"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    HelloDrawResultLine(gstate, &line, _T("__EDC"), 
        (5.3 > value2) && (value2 < 5.3) && (5.3 == (value2+2.3)), 
        _T(""), 
        &errorCount, &testCount);

    fresult = value;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FDSD"), 
        strcmp(outBuffer, _T("5.30"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    result = swvalue;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__I4FD"), 
        strcmp(outBuffer, _T("-5.00"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    result = wvalue;
    FloatIEEE64ToGeos80(&result);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__U4FD"), 
        strcmp(outBuffer, _T("4200000000.00"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    fresult = fvalue2*fvalue;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FSM"), 
        strcmp(outBuffer, _T("16.50"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    fresult = fvalue + fvalue2;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FSA"), 
        strcmp(outBuffer, _T("8.50"))==0, outBuffer, 
        &errorCount, &testCount);

    fresult = fvalue / fvalue2;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);


    HelloDrawResultLine(gstate, &line, _T("__FSD"), 
        strcmp(outBuffer, _T("1.83"))==0, outBuffer, 
        &errorCount, &testCount);

    fresult = fvalue - fvalue2;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FSS"), 
        strcmp(outBuffer, _T("2.50"))==0, outBuffer, 
        &errorCount, &testCount);

    HelloDrawResultLine(gstate, &line, _T("__FSC"), 
        (fvalue > fvalue2) && (fvalue2 < fvalue) && (fvalue == (fvalue2+2.5f)), 
        _T(""), 
        &errorCount, &testCount);

    fresult = -fvalue;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__FSN"), 
        strcmp(outBuffer, _T("-5.50"))==0, outBuffer, 
        &errorCount, &testCount);

    fresult = swvalue;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__I4FS"), 
        strcmp(outBuffer, _T("-5.00"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    fresult = wvalue;
    FloatIEEE32ToGeos80(&fresult);
    FloatPopNumber(&resultFN);

    FloatFloatToAscii_StdFormat(outBuffer,
							&resultFN,
							FFAF_FROM_ADDR,
							14,
							2);

    HelloDrawResultLine(gstate, &line, _T("__U4FS"), 
        strcmp(outBuffer, _T("4200000000.00"))==0, 
        outBuffer, 
        &errorCount, &testCount);

    resultU4 = value4;
    sprintf(outBuffer, "%lu", resultU4);
    HelloDrawResultLine(gstate, &line, _T("__FSU4"), 
        strcmp(outBuffer, _T("4200000000"))==0, outBuffer, 
        &errorCount, &testCount);

    resultI4 = -fvalue;
    sprintf(outBuffer, "%ld", resultI4);

    HelloDrawResultLine(gstate, &line, _T("__FSI4"), 
        strcmp(outBuffer, _T("-5"))==0, outBuffer, 
        &errorCount, &testCount);

    /*
     * Draw some text onto the document.
     */
    if (errorCount == 0) {
        GrSetTextColor( gstate, CF_INDEX, C_GREEN, 0, 0 );
    } else {
        GrSetTextColor( gstate, CF_INDEX, C_RED, 0, 0 );
    }
    sprintf(outBuffer, "errors: %d, total executed: %d,...  of 26 test cases", 
                            errorCount, testCount);
    GrDrawText( gstate, TEXT_X_POSITION, TEXT_Y_POSITION,
                outBuffer, 0 );

} /* HelloDraw */

/********************************************************************
 *		Code for HelloProcessClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_EXPOSED
 ********************************************************************
 * SYNOPSIS:	 Redraw the recently-exposed portion of the View.
 * PARAMETERS:	 WindowHandle win
 * RETURNS:      void
 * SIDE EFFECTS: The invalid region of the window is cleared out.
 * STRATEGY:	 This message is sent by the windowing system when a
 *	    	 portion of the GenView has become invalid, either
 *	    	 because a window that was obscuring it has been moved,
 *	    	 or because some called GrInvalRect.
 *	    	 We redraw the entire document, after telling the
 *		 graphics system we're drawing to the invalid portion
 *		 of the window.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	4/91		Initial Revision
 *******************************************************************/
@method HelloProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;

    /*
     * Get a default graphics state that we can use while drawing.
     */
    gstate = GrCreateState( win );
    /*
     * Start a window update. This tells the windowing system
     * that we are in the process of drawing to the invalid portion
     * of this window. GrBeginUpdate/GrEndUpdate are necessary only
     * when handling MSG_META_EXPOSED. For drawing at other times,
     * all you need do is create a graphics state and draw through it.
     */
    GrBeginUpdate( gstate );

    /*
     * Draw the pattern into the window (pass the GState). Breaking
     * the exposure and general drawing into two routines allows the
     * display to be updated by other routines without having to
     * invalidate the window.
     */
    HelloDraw( gstate );

    /*
     * Now indicate that we are done drawing to the invalid area
     * and free the gstate.
     */
    GrEndUpdate( gstate );
    GrDestroyState( gstate );
} /* MSG_META_EXPOSED */

