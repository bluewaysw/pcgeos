/***********************************************************************
 *
 *	Copyright (c) Geoworks 1993 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  lwpref.goc
 * FILE:	  lwpref.goc
 *
 * AUTHOR:  	  Jeremy Dashe : Apr 27, 1993
 *
 *      7/30/02   jfh - replaced the GenColorController which didn't work
 *                with a GenItemList which does (essentially copied from
 *                the circles saver).
 *
 * DESCRIPTION:
 *	Code and UI definitions for the lwpref library.
 *
 * RCS STAMP:
 *	$Id: lwpref.goc,v 1.1 97/04/04 16:49:29 newdeal Exp $
 *
 ***********************************************************************/

@include <stdapp.goh>
@include <saver.goh>
@include <lwpref.goh>
@include <Objects/clipbrd.goh>
@include <../LastWords/lastwords.goh>
@include <Objects/Text/tCtrlC.goh>
#include <color.h>
@include <Objects/colorC.goh>
#include <initfile.h>
#include <file.h>
#include <gstring.h>
#include <Ansi/string.h>


/***********************************************************************
  	    	    	Class Declarations
 ***********************************************************************/

@classdecl LWPrefInteractionClass;
 
/***********************************************************************
  	    	    	Function Prototypes
 ***********************************************************************/

optr LWPrefGetPrefUITree(void);
FontID LWPUpdateFontController(void);
word LWPUpdateSizeController(void);
word LWPUpdateColorList(optr colorList);
void LWPUpdateAController(GeoWorksNotificationType gwntListType,
			  GeoWorksGenAppGCNListType gagListType,
			  MemHandle dataBlock);
LWPrefClipboardType LWPrefClipboardTest(void);
Boolean LWPVMFileExists(void);
VMFileHandle LWPVMOpen(void);
Boolean LWPLoadGraphicsFromClipboard(VMFileHandle file);

/***********************************************************************
  	    	    	UI Definitions
 ***********************************************************************/

@start LWPrefUIResource;

@object LWPrefInteractionClass RootObject = {
    GI_comp = @LWFontsAndSizes,
    	      @LWMessageTypeInteraction,
	      @LWAngleInteraction,
    	      @LWMotion,
    	      @LWColorInteraction,
    	      @LWSpeed;
    GI_states = @default & ~GS_USABLE;
    HINT_CENTER_CHILDREN_ON_MONIKERS;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    ATTR_GEN_INIT_FILE_CATEGORY = "lastwords";
};

@object PrefInteractionClass LWFontsAndSizes = {
    GI_visMoniker = "Features:";
    GI_comp = @LWFonts,
    	      @LWSizes;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object FontControlClass LWFonts = {
    GI_visMoniker = 'n', "Fonts";
    GII_visibility = GIV_POPUP;
    GCI_output = @RootObject;
    ATTR_GEN_CONTROL_REQUIRE_UI = (word) FCF_SHORT_LIST;
    ATTR_GEN_CONTROL_PROHIBIT_UI = (word) FCF_LONG_LIST;
}

@object PointSizeControlClass LWSizes = {
    GI_visMoniker = 'z', "Sizes";
    GII_visibility = GIV_POPUP;
    GCI_output = @RootObject;
    ATTR_GEN_CONTROL_REQUIRE_UI =  (word) PSCF_9  |
	    	    	    	    	  PSCF_10 |
					  PSCF_12 |
					  PSCF_14 |
					  PSCF_18 |
					  PSCF_24 |
					  PSCF_36 |
					  PSCF_54 |
					  PSCF_72;
    ATTR_GEN_CONTROL_PROHIBIT_UI = (word) PSCF_SMALLER |
	    	    	    	    	  PSCF_LARGER  |
					  PSCF_CUSTOM_SIZE;
}


@object PrefInteractionClass LWMessageTypeInteraction = {
    GI_visMoniker = "Last Words:";
    GI_comp = @LWTypeList,
    	      @LWTextEntryAndPasteTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object PrefItemGroupClass LWTypeList = {
    GI_comp = @LWTextType,
    	      @LWGraphicsType,
    	      @LWTimeType,
    	      @LWDateType;
    GIGI_selection = LWFT_TEXT;
    GIGI_numSelections = 1;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GIGI_destination = @RootObject;
    HINT_ORIENT_CHILDREN_VERTICALLY;
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_TYPE;
}

@object GenItemClass LWTextType = {
    GI_visMoniker = "Text";
    GII_identifier = LWFT_TEXT;
}
    
@object GenItemClass LWGraphicsType = {
    GI_states = @default & ~GS_ENABLED;
    GI_visMoniker = "Graphic";
    GII_identifier = LWFT_GRAPHIC;
/*    HINT_ALIGN_TOP_EDGE_WITH_OBJECT = @LWPasteTrigger; */
}
    
@object GenItemClass LWTimeType = {
    GI_visMoniker = "Time";
    GII_identifier = LWFT_TIME;
}
    
@object GenItemClass LWDateType = {
    GI_visMoniker = "Date";
    GII_identifier = LWFT_DATE;
}


@object PrefInteractionClass LWTextEntryAndPasteTrigger = {
    GI_comp = @LWTextEntry,
    	      @LWPasteTrigger;
    HINT_ORIENT_CHILDREN_VERTICALLY;
}

#define LW_TEXT_ENTRY_SIZE 32
@object PrefTextClass LWTextEntry = {
	 GTXI_text = "PC/GEOS Ensemble";
    GTXI_attrs = @default | GTA_SINGLE_LINE_TEXT;
    GTXI_maxLength = LW_MAX_LENGTH;
    HINT_FIXED_SIZE =
    {
    	SST_AVG_CHAR_WIDTHS | LW_TEXT_ENTRY_SIZE, 0, 0 
    }; 
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_MESSAGE;
}
    
@object GenTriggerClass LWPasteTrigger = {
    GI_visMoniker = "Paste graphic from Clipboard";
    GTI_actionMsg = MSG_LWPI_PASTE_GRAPHIC;
    GTI_destination = @RootObject;
}

@object PrefInteractionClass LWAngleInteraction = {
    GI_visMoniker = "Angle:";
    GI_comp = @LWAngle,
    	      @LWAngleRandomList;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

@object PrefValueClass LWAngle = {
    GVLI_value     = MakeWWFixed(0);
    GVLI_minimum   = MakeWWFixed(0);
    GVLI_increment = MakeWWFixed(1.0);
    GVLI_maximum   = MakeWWFixed(360);
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_ANGLE;
}

#define LWAR_RANDOM  0x0001
@object PrefBooleanGroupClass LWAngleRandomList = {
    GI_comp = @LWAngleRandom;
    GBGI_destination = @RootObject;
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_RANDOM_ANGLE;
    ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG = MSG_LWPI_RANDOM_ANGLE;
}

@object GenBooleanClass LWAngleRandom = {
    GI_visMoniker = "Random";
    GBI_identifier = LWAR_RANDOM;
}

@object PrefItemGroupClass LWMotion = {
    GI_comp = @LWMotionBounce,
    	      @LWMotionRandom;
    GI_visMoniker = "Motion:";
    GIGI_selection = SVRT_BOUNCE;
    GIGI_numSelections = 1;
    GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GIGI_destination = @RootObject;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_MOTION;
}

@object GenItemClass LWMotionBounce = {
    GI_visMoniker = "Bounce";
    GII_identifier = SVRT_BOUNCE;
}
    
@object GenItemClass LWMotionRandom = {
    GI_visMoniker = "Random";
    GII_identifier = SVRT_STOCHASTIC;
}

@object PrefInteractionClass LWColorInteraction = {
    GI_visMoniker = "Color:";
	 GI_comp = @LWColorList, @LWColorRandomList;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
}

#define LWCR_RANDOM  0x0001
@object PrefBooleanGroupClass LWColorRandomList = {
	 GI_comp = @LWColorRandom;
    GBGI_destination = @RootObject;
    ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_RANDOM_COLOR;
    ATTR_GEN_BOOLEAN_GROUP_STATUS_MSG = MSG_LWPI_RANDOM_COLOR;
}

@object GenBooleanClass LWColorRandom = {
    GI_visMoniker = "Random";
    GBI_identifier = LWCR_RANDOM;
}

@object PrefItemGroupClass LWColorList = {
	 GI_comp = 		@LWBlackEntry,
		@LWDarkBlueEntry,
		@LWDarkGreenEntry,
		@LWDarkCyanEntry,
		@LWDarkRedEntry,
		@LWDarkVioletEntry,
		@LWBrownEntry,
		@LWLightGrayEntry,
		@LWDarkGrayEntry,
		@LWLightBlueEntry,
		@LWLightGreenEntry,
		@LWLightCyanEntry,
		@LWLightRedEntry,
		@LWLightVioletEntry,
		@LWYellowEntry,
		@LWWhiteEntry;
	 GIGI_selection = C_BLUE;
	 ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_COLOR;
	 HINT_ORIENT_CHILDREN_HORIZONTALLY;
	 HINT_TOOLBOX;

}    

@define COLOR_ENTRY(NAME, COLOR) \
@object GenItemClass NAME = { \
	GI_visMoniker = { \
		size = tiny;  \
		color = color4;  \
		aspectRatio = normal;  \
		cachedSize = 14,14;  \
		gstring { \
			GSSetAreaColorMap(CMT_DITHER), \
			GSSetAreaColorIndex(COLOR), \
			GSFillRect(0, 0, 13, 13), \
			GSEndString() \
	    } \
	} \
	GII_identifier = COLOR; \
}

@COLOR_ENTRY(LWBlackEntry, C_BLACK)
@COLOR_ENTRY(LWDarkBlueEntry, C_BLUE)
@COLOR_ENTRY(LWDarkGreenEntry, C_GREEN)
@COLOR_ENTRY(LWDarkCyanEntry, C_CYAN)
@COLOR_ENTRY(LWDarkRedEntry, C_RED)
@COLOR_ENTRY(LWDarkVioletEntry, C_VIOLET)
@COLOR_ENTRY(LWBrownEntry, C_BROWN)
@COLOR_ENTRY(LWLightGrayEntry, C_LIGHT_GRAY)
@COLOR_ENTRY(LWDarkGrayEntry, C_DARK_GRAY)
@COLOR_ENTRY(LWLightBlueEntry, C_LIGHT_BLUE)
@COLOR_ENTRY(LWLightGreenEntry, C_LIGHT_GREEN)
@COLOR_ENTRY(LWLightCyanEntry, C_LIGHT_CYAN)
@COLOR_ENTRY(LWLightRedEntry, C_LIGHT_RED)
@COLOR_ENTRY(LWLightVioletEntry, C_LIGHT_VIOLET)
@COLOR_ENTRY(LWYellowEntry, C_YELLOW)
@COLOR_ENTRY(LWWhiteEntry, C_WHITE)

/*@object ColorSelectorClass LWColorController = {
    GI_states = @default | GS_ENABLED;
    GCI_output = @RootObject;
    ATTR_GEN_CONTROL_REQUIRE_UI =  (word) CSF_INDEX;
    ATTR_GEN_CONTROL_PROHIBIT_UI = (word) CSF_FILLED_LIST |
	    	    	    	    	  CSF_RGB         |
					  CSF_DRAW_MASK   |
					  CSF_PATTERN|CSF_OTHER;
}*/

@object PrefItemGroupClass LWSpeed = {
	 GI_comp = @LWSpeedSlugLike,
				@LWSpeedSlow,
				@LWSpeedMedium,
    	      @LWSpeedFast;
	 GI_visMoniker = "Speed:";
	 GIGI_selection = LW_MEDIUM_SPEED;
	 GIGI_numSelections = 1;
	 GIGI_behaviorType = GIGBT_EXCLUSIVE;
    GIGI_destination = @RootObject;
	 HINT_ORIENT_CHILDREN_HORIZONTALLY;
	 ATTR_GEN_INIT_FILE_KEY = LW_INI_KEY_SPEED;
}    

@object GenItemClass LWSpeedSlugLike = {
	 GI_visMoniker = "Slug-like";
	 GII_identifier = LW_SLUG_SPEED;
}

@object GenItemClass LWSpeedSlow = {
    GI_visMoniker = "Slow";
    GII_identifier = LW_SLOW_SPEED;
}

@object GenItemClass LWSpeedMedium = {
    GI_visMoniker = "Medium";
    GII_identifier = LW_MEDIUM_SPEED;
}

@object GenItemClass LWSpeedFast = {
    GI_visMoniker = "Fast";
    GII_identifier = LW_FAST_SPEED;
}

@end LWPrefUIResource;


/***********************************************************************
  	    	    	Code-o-rama
 ***********************************************************************/

/***********************************************************************
 *
 * FUNCTION:	LWPrefGetPrefUITree
 *
 * DESCRIPTION:	This routine returns an optr to the root UI object.
 *
 * PARAMETERS:	(none)
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
optr
LWPrefGetPrefUITree(void)
{
    return (@RootObject);
}


/***********************************************************************
 *
 * MESSAGE:	MSG_PREF_INIT for LWPrefInteractionClass
 *
 * DESCRIPTION:	Hook up the various controllers to the active list,
 *	    	and otherwise set things up.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_PREF_INIT
{
    MemHandle ourBlock;
	 optr fontController, sizeController, colorList;
    optr graphicsItem;
    FontID newFont;
	 word newSize, newColor;

    optr app = GeodeGetAppObject(0);

    /*
     * Get the optrs to the various controllers.
     */
	 ourBlock = HandleOf(oself);
	 fontController  = ConstructOptr(ourBlock, (ChunkHandle) @LWFonts);
	 sizeController  = ConstructOptr(ourBlock, (ChunkHandle) @LWSizes);
	 colorList = ConstructOptr(ourBlock,(ChunkHandle) @LWColorList);
	 graphicsItem    = ConstructOptr(ourBlock,(ChunkHandle) @LWGraphicsType);

    /*
     * Hook up the font, color, and size controllers to the active list.
     */
	 @call app::MSG_META_GCN_LIST_ADD(fontController,
					  GAGCNLT_SELF_LOAD_OPTIONS,
					  MANUFACTURER_ID_GEOWORKS);
	 @call app::MSG_META_GCN_LIST_ADD(fontController,
					  MGCNLT_ACTIVE_LIST,
					  MANUFACTURER_ID_GEOWORKS);
	 @call fontController::MSG_META_ATTACH();

//	 @call colorController::MSG_META_ATTACH();

    @call app::MSG_META_GCN_LIST_ADD(sizeController,
				     GAGCNLT_SELF_LOAD_OPTIONS,
				     MANUFACTURER_ID_GEOWORKS);
    @call app::MSG_META_GCN_LIST_ADD(sizeController,
				     MGCNLT_ACTIVE_LIST,
				     MANUFACTURER_ID_GEOWORKS);
    @call sizeController::MSG_META_ATTACH();

    /*
     * Grab the current values from the .ini file, tell the respective
     * controllers what they are, and remember ourselves (in instance data)
     * for later use.
     */
    newFont  = LWPUpdateFontController();
    newSize  = LWPUpdateSizeController();
	 newColor = LWPUpdateColorList(colorList);

    pself = ObjDerefPref(oself);
    pself->LWPI_font  = newFont;
	 pself->LWPI_size  = newSize;
	 pself->LWPI_color  = newColor;

    /*
     * Add ourself to the clipboard notification list.
     */
    ClipboardAddToNotificationList(oself);

    /*
     * If there's a VM file we can display, set the "graphics" type
     * enabled.  Otherwise, set it not enabled.
     */
    if (LWPVMFileExists()) {
	@call graphicsItem::MSG_GEN_SET_ENABLED(VUM_NOW);
    } else {
	@call graphicsItem::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }

    /*
     * Call the superclass, mark ourself not applyable (yet), and leave.
     */
    @callsuper();

    @call oself::MSG_GEN_MAKE_NOT_APPLYABLE();
}


/***********************************************************************
 *
 * FUNCTION:	LWPUpdateFontController
 *
 * DESCRIPTION:	This function reads the .ini value for the font controller,
 *	    	alerts the controller, and returns the value.
 *
 * PARAMETERS:	none
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
FontID
LWPUpdateFontController(void)
{
    MemHandle fontChangeBlock;
    NotifyFontChange *fc;
    FontID font;
    
    /*
     * Grab the font from the .ini file.  If it's not there, use a nice
     * default.
     */
	 font = FID_DTC_URW_SANS;
    InitFileReadInteger(LW_INI_CATEGORY, LW_INI_KEY_FONT, &font);
    
    fontChangeBlock = MemAlloc(sizeof(NotifyFontChange),
			       HF_SWAPABLE | HF_SHARABLE,
			       HAF_STANDARD | HAF_NO_ERR);

    fc = MemLock(fontChangeBlock);
    fc->NFC_fontID = font;
    fc->NFC_diffs = 0;

    MemUnlock(fontChangeBlock);
    
    /*
     * Send off the data block to the gcn list.  It's given an init
     * count within the call.
     */
    LWPUpdateAController(GWNT_FONT_CHANGE,
			 GAGCNLT_APP_TARGET_NOTIFY_FONT_CHANGE,
			 fontChangeBlock);

    return font;
}


/***********************************************************************
 *
 * FUNCTION:	LWPUpdateSizeController
 *
 * DESCRIPTION:	This function reads the .ini value for the size controller,
 *	    	alerts the controller, and returns the value.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
word
LWPUpdateSizeController(void)
{
    MemHandle sizeChangeBlock;
    NotifyPointSizeChange *sc;
    word size_int;
    
    /*
     * Grab the font from the .ini file.  If it's not there, use a nice
     * default.
     */
	 size_int = 72;
    InitFileReadInteger(LW_INI_CATEGORY, LW_INI_KEY_SIZE, &size_int);

    sizeChangeBlock = MemAlloc(sizeof(NotifyPointSizeChange),
			       HF_SWAPABLE | HF_SHARABLE,
			       HAF_STANDARD | HAF_NO_ERR);

    sc = MemLock(sizeChangeBlock);
    sc->NPSC_pointSize = MakeWWFixed(size_int);
    sc->NPSC_diffs = 0;

    MemUnlock(sizeChangeBlock);
    
    /*
     * Send off the data block to the gcn list.  It's given an init
     * count within the call.
     */
    LWPUpdateAController(GWNT_POINT_SIZE_CHANGE,
			 GAGCNLT_APP_TARGET_NOTIFY_POINT_SIZE_CHANGE,
			 sizeChangeBlock);

    return size_int;
}


/***********************************************************************
 *
 * FUNCTION:	LWPUpdateColorController
 *
 * DESCRIPTION:	This function reads the .ini value for the color controller,
 *	    	and alerts the controller.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *  jfh		7/30/02		now a GenItemList
 ***********************************************************************/
word
LWPUpdateColorList(optr colorList)
{
    word color;
//    ColorQuad cq;
    
    /*
     * Grab the color from the .ini file.  If it's not there, use a nice
     * default.
     */
	 color = C_BLUE;
    InitFileReadInteger(LW_INI_CATEGORY, LW_INI_KEY_COLOR, &color);

    /*
     * Send off the data block to the gcn list.  It's given an init
     * count within the call.
     */
//    cq.CQ_info = CF_INDEX;
//    cq.CQ_redOrIndex = color;
	 @send colorList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(color, FALSE);

	 return (color);

}


/***********************************************************************
 *
 * FUNCTION:	LWPUpdateAController
 *
 * DESCRIPTION:	Sends off a notification block to a gcn list.
 *
 * PARAMETERS:	gwntListType - the GWNT_ list type.
 *	    	gagListType - the GAGCNLT_ list type.
 *	    	dataBlock - the handle to the data block.  This will
 *	    	    	    be given an init ref ount of 1.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
void
LWPUpdateAController(GeoWorksNotificationType gwntListType,
		     GeoWorksGenAppGCNListType gagListType,
		     MemHandle dataBlock)
{
    EventHandle	msg;

    /*
     * Give the mem handle an initial ref count, then send the pup.
     */
    MemInitRefCount(dataBlock, (word) 1);
    
    msg = @record (optr) NullClass::MSG_META_NOTIFY_WITH_DATA_BLOCK(
                      MANUFACTURER_ID_GEOWORKS, /* Manufacturer's ID */
                      gwntListType, 	    	/* Manufacturer's list type*/
                      dataBlock);	    	/* Handle of data block */

    @call GeodeGetAppObject(0)::MSG_META_GCN_LIST_SEND(
                      (word) GCNLSF_SET_STATUS,
                                              /* GCNListSendFlags */
                      (EventHandle) msg,      /* Handle to classed event */
                      (MemHandle) dataBlock,
                                              /* Handle of extra data block */
		      (word) gagListType,
                                              /* Manufacturer's list type */
                      (word) MANUFACTURER_ID_GEOWORKS);
                                              /* Manufacturer's ID */
    
}


/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_TEXT_SET_FONT_ID for LWPrefInteractionClass
 *
 * DESCRIPTION:	Intercept the font controller's spouting of which
 *	    	font we're using now.
 *
 * PARAMETERS:
 *	void (FontID fid, dword rangeEnd, dword rangeStart)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/29/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_VIS_TEXT_SET_FONT_ID
{
    pself->LWPI_font = fid;

    @call oself::MSG_GEN_MAKE_APPLYABLE();

    @callsuper();
}


/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_TEXT_SET_POINT_SIZE for LWPrefInteractionClass
 *
 * DESCRIPTION:	Intercept the size controller's spouting of our new
 *	    	point size.
 *
 * PARAMETERS:
 *	void (WWFixed pointSize, dword rangeEnd, dword rangeStart)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/29/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_VIS_TEXT_SET_POINT_SIZE
{
    pself->LWPI_size = pointSize.WWF_int;

    @call oself::MSG_GEN_MAKE_APPLYABLE();

    @callsuper();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_LWPI_RANDOM_ANGLE for LWPrefInteractionClass
 *
 * DESCRIPTION:	This message is called when the user toggles the
 *	    	random angle boolean trigger.
 *
 *	    	We'll enable or disable the angle gadget accordingly.
 *
 * PARAMETERS:
 *	void (word selectedBooleans,
 *	      word indeterminateBooleans,
 *	      word modifiedBooleans)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/30/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_LWPI_RANDOM_ANGLE
{
    /*
     * Since we only have one item in the group, just see if there is
     * anything selected to determine if the boolean is selected.
     */
    if (selectedBooleans) {
	/*
	 * Random it is.  Set the angle gadget not enabled.
	 */
	@call HandleOf(oself), (ChunkHandle)@LWAngle::
	    MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    } else {
	/*
	 * It's not set to be random.  Enable the gadget.
	 */
	@call HandleOf(oself), (ChunkHandle)@LWAngle::
	    MSG_GEN_SET_ENABLED(VUM_NOW);
    }	
}

/***********************************************************************
 *
 * MESSAGE:	MSG_LWPI_RANDOM_COLOR for LWPrefInteractionClass
 *
 * DESCRIPTION:	This message is called when the user toggles the
 *	    	random color boolean trigger.
 *
 *	    	We'll enable or disable the color gadget accordingly.
 *
 * PARAMETERS:
 *	void (word selectedBooleans,
 *	      word indeterminateBooleans,
 *	      word modifiedBooleans)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/30/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_LWPI_RANDOM_COLOR
{
    /*
     * Since we only have one item in the group, just see if there is
     * anything selected to determine if the boolean is selected.
     */
    if (selectedBooleans) {
	/*
	 * Random it is.  Set the angle gadget not enabled.
	 */
	@call ConstructOptr(HandleOf(oself), (ChunkHandle)@LWColorList)::
	    MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    } else {
	/*
	 * It's not set to be random.  Enable the gadget.
	 */
	@call ConstructOptr(HandleOf(oself), (ChunkHandle)@LWColorList)::
	    MSG_GEN_SET_ENABLED(VUM_NOW);
    }	
}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_BLOCK_FREE for LWPrefInteractionClass
 *
 * DESCRIPTION:	Detach our controllers from the active and self-
 *	    	load lists.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/29/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_META_BLOCK_FREE
{
    optr fontController, sizeController;
    MemHandle ourBlock;
    optr app = GeodeGetAppObject(0);

    /*
     * Get the optrs to the various controllers.
     */
    ourBlock = HandleOf(oself);
    fontController  = ConstructOptr(ourBlock, (ChunkHandle) @LWFonts);
    sizeController  = ConstructOptr(ourBlock, (ChunkHandle) @LWSizes);

    /*
     * Detach up the font and size controllers from the active list.
     */
    @call app::MSG_META_GCN_LIST_REMOVE(fontController,
					GAGCNLT_SELF_LOAD_OPTIONS,
					MANUFACTURER_ID_GEOWORKS);
    @call app::MSG_META_GCN_LIST_REMOVE(fontController,
					MGCNLT_ACTIVE_LIST,
					MANUFACTURER_ID_GEOWORKS);

    @call app::MSG_META_GCN_LIST_REMOVE(sizeController,
					GAGCNLT_SELF_LOAD_OPTIONS,
					MANUFACTURER_ID_GEOWORKS);
    @call app::MSG_META_GCN_LIST_REMOVE(sizeController,
					MGCNLT_ACTIVE_LIST,
					MANUFACTURER_ID_GEOWORKS);
    
    /*
     * Remove ourself from the clipboard notification list.
     */
    ClipboardRemoveFromNotificationList(oself);
}


/***********************************************************************
 *
 * MESSAGE:	MSG_META_SAVE_OPTIONS for LWPrefInteractionClass
 *
 * DESCRIPTION: We intercept this to set the .ini keys to whatever
 *	    	values the controllers told us about.  We've kept the
 *	    	values saved away in instance data.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	4/28/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_META_SAVE_OPTIONS
{
	 MemHandle ourBlock;
	 optr colorList;
	 char lwpIniCategory[] = LW_INI_CATEGORY;
//    ColorQuad cq;
	 word color;

    InitFileWriteInteger(lwpIniCategory, LW_INI_KEY_FONT, pself->LWPI_font);
	 InitFileWriteInteger(lwpIniCategory, LW_INI_KEY_SIZE, pself->LWPI_size);

	 ourBlock = HandleOf(oself);
	 colorList = ConstructOptr(ourBlock,(ChunkHandle) @LWColorList);
	 color = @call colorList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
/*	 @call ConstructOptr(HandleOf(oself),
			 (ChunkHandle)@LWColorController)::MSG_COLOR_SELECTOR_GET_COLOR(&cq);
	 InitFileWriteInteger(lwpIniCategory, LW_INI_KEY_COLOR, cq.CQ_redOrIndex);
*/	 InitFileWriteInteger(lwpIniCategory, LW_INI_KEY_COLOR, color);

    @callsuper();
}


/***********************************************************************
 *
 * MESSAGE:	MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED for
 *	    	LWPrefInteractionClass
 *
 * DESCRIPTION:	This message gets called when something gets pasted into
 *	    	the clipboard.  We'll check to see if it's a type we
 *	    	support.
 *
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/12/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass,
    MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED
{
    optr pasteTrigger;

    pasteTrigger = ConstructOptr(HandleOf(oself), (ChunkHandle)@LWPasteTrigger);

    if (LWPrefClipboardTest() != LWPCT_NOT_SUPPORTED) {
	/*
	 * It's a transfer we can deal with!  Highlight the Paste
	 * trigger.
	 */
	@call pasteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
    } else {
	/*
	 * It's some other kind of transfer.  Can't paste this.
	 */
	@call pasteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    }
}


/***********************************************************************
 *
 * FUNCTION:	LWPrefClipboardTest
 *
 * DESCRIPTION:	This function checks the clipboard to see if it contains
 *	    	a normal transfer item we can deal with.
 *
 *	    	If there is nothing we like there, a LWPCT_NOT_SUPPORTED is
 *	    	returned.  Otherwise, the specific type is returned.
 *
 * PARAMETERS:	nothing
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/12/93		Initial version
 *
 ***********************************************************************/
LWPrefClipboardType
LWPrefClipboardTest(void)
{
    ClipboardQueryArgs query;
    LWPrefClipboardType ret = LWPCT_NOT_SUPPORTED;

    /*
     * See what type just got pasted.  We support normal TEXT and GRAPHICS.
     */
    ClipboardQueryItem(0, &query);

    if (query.CQA_numFormats) {
	/*
	 * Something was transfered.  Was it something we can deal with?
	 */
	if (ClipboardTestItemFormat(query.CQA_header, GRAPHICS_FORMAT)) {
	    ret = LWPCT_GRAPHICS;
	}
    }

    ClipboardDoneWithItem(query.CQA_header);

    return ret;
}


/***********************************************************************
 *
 * MESSAGE:	MSG_LWPI_PASTE_GRAPHIC for LWPrefInteractionClass
 *
 * DESCRIPTION:	This message is called when the Paste trigger is hit.
 *	    	Attempt to open the clipboard, grab its contents,
 *	    	stuff 'em into a gstring, then save the gstring in a
 *	    	VM file.
 *	    	
 * PARAMETERS:
 *	void ()
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/12/93		Initial version
 *
 ***********************************************************************/
@method LWPrefInteractionClass, MSG_LWPI_PASTE_GRAPHIC
{
    LWPrefClipboardType type;
    VMFileHandle file;

    optr typeList = ConstructOptr(HandleOf(oself), (ChunkHandle)@LWTypeList);
    optr graphicsItem = ConstructOptr(HandleOf(oself),
				     (ChunkHandle)@LWGraphicsType);

    type = LWPrefClipboardTest();
    if (type == LWPCT_NOT_SUPPORTED) {
	return;
    }
	
    /*
     * It's a type we support!  Create a VM file, and have the critter
     * drawn in.
     */
    file = LWPVMOpen();
    if (!file) {
	return;			/* File error.  Bail. */
    }
    
    switch (type) {
    	case LWPCT_GRAPHICS:
	    if (!LWPLoadGraphicsFromClipboard(file)) {
		/*
		 * Something went wrong when pasting in the graphic.
		 * Delete the file and leave.
		 */
		VMClose(file, FILE_NO_ERRORS);
		FileDelete(LW_VM_FILE_NAME);
		@call typeList::
		    MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(LWFT_TEXT, 0);
		@call graphicsItem::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		return;
	    }

	    /*
	     * Success! Select the appropriate item from the list.
	     */
	    @call typeList::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(LWFT_GRAPHIC, 0);
	    @call graphicsItem::MSG_GEN_SET_ENABLED(VUM_NOW);
	    break;
    }

    VMClose(file, FILE_NO_ERRORS);

    @call oself::MSG_GEN_MAKE_APPLYABLE();
}


/***********************************************************************
 *
 * FUNCTION:	LWPVMOpen
 *
 * DESCRIPTION:	Here we open a file in the PRIVDATA directory.  If the file
 *	    	cannot be created, a 0 is returned.  Otherwise, the VMFile
 *	    	handle is returned.
 *
 * PARAMETERS:	nothing
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/12/93		Initial version
 *
 ***********************************************************************/
VMFileHandle
LWPVMOpen(void)
{
    VMFileHandle file;
    VMBlockHandle mapBlockHandle;
    MemHandle mh;
    GeodeToken fileToken;

    fileToken.GT_manufID = MANUFACTURER_ID_GEOWORKS;
    strncpy(fileToken.GT_chars, LW_FEARLESS_TOKEN, TOKEN_CHARS_LENGTH);
    
    /*
     * Open the file in privdata.
     */
    FileSetStandardPath(SP_PRIVATE_DATA);

    file = VMOpen(LW_VM_FILE_NAME, 0, VMO_CREATE_TRUNCATE, 0);
    if (!file) {
	return file;		/* Couldn't open file, so bail. */
    }

    /*
     * Set the file's token attributes.
     */
    FileSetHandleExtAttributes(file, FEA_TOKEN, &fileToken, sizeof(GeodeToken));

    /*
     * Create the map block.
     */
    mapBlockHandle = VMAlloc(file, sizeof(LWGStringHeader), 0);
    VMSetMapBlock(file, mapBlockHandle);

    /*
     * Lock down the map block, mark it dirty, and unlock it.  We'll actually
     * place something in it later.
     */
    (void) VMLock(file, mapBlockHandle, &mh);
    VMDirty(mh);
    VMUnlock(mh);

    /*
     * Success!  Return the file handle.
     */
    return file;
}


/***********************************************************************
 *
 * FUNCTION:	LWPVMFileExists
 *
 * DESCRIPTION:	This function checks to see if we have a valid graphics
 *	    	file to display.
 *
 *	    	TRUE is returned if such a file exists; FALSE, otherwise.
 *
 * PARAMETERS:	nothing
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/13/93		Initial version
 *
 ***********************************************************************/
Boolean
LWPVMFileExists(void)
{
    GeodeToken token;

    /*
     * The file should exist in privdata.
     */
    FileSetStandardPath(SP_PRIVATE_DATA);

    if (FileGetPathExtAttributes(LW_VM_FILE_NAME,
				 FEA_TOKEN,
				 &token,
				 sizeof(GeodeToken))) {
	/*
	 * The file could not be found.  Bail.
	 */
	return FALSE;
    }

    /*
     * Does the file have the correct token?  If not, return FALSE.  Otherwise,
     * return TRUE.
     */
    return (strncmp(token.GT_chars, LW_FEARLESS_TOKEN, TOKEN_CHARS_LENGTH) ?
	    FALSE : TRUE);
}


/***********************************************************************
 *
 * FUNCTION:	LWPLoadGraphicsFromClipboard
 *
 * DESCRIPTION:	This function is called when there is a GRAPHIC_STRING
 *	    	type in the clipboard.  It duplicates it, and places it
 *	    	in the passed VMFile.
 *
 * PARAMETERS:	file - the VMFile handle in which to place the graphic.
 *
 * CALLED BY:	INTERNAL
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jeremy	5/12/93		Initial version
 *
 ***********************************************************************/
Boolean
LWPLoadGraphicsFromClipboard(VMFileHandle file)
{
    ClipboardQueryArgs query;
    ClipboardRequestArgs attrs;
    GStateHandle gs_source, gs_dest;
    VMBlockHandle vmBlockHandle, mapBlockHandle;
    LWGStringHeader *mapBlock;
    MemHandle mh;

    optr app = GeodeGetAppObject(0);

    ClipboardQueryItem(0, &query);

    if (!query.CQA_numFormats) {
	/*
	 * Nothing in the clipboard.  Leave.
	 */
	ClipboardDoneWithItem(query.CQA_header);
	return FALSE;
    }
    
    /*
     * Something was transfered.  Was it a graphics string?
     */
    if (!ClipboardTestItemFormat(query.CQA_header, GRAPHICS_FORMAT)) {
	/*
	 * No, it wasn't a gstring.  Leave with an error.
	 */
	ClipboardDoneWithItem(query.CQA_header);
	return FALSE;
    }

    @call app::MSG_GEN_APPLICATION_MARK_APP_COMPLETELY_BUSY();

    /*
     * It's a graphics string.  Get the clipboard file.
     */
    ClipboardRequestItemFormat(GRAPHICS_FORMAT, query.CQA_header, &attrs);

    /*
     * Regard the clipboard as a gstring.
     */
    gs_source = GrLoadGString(attrs.CRA_file,
			      GST_VMEM,
			      (attrs.CRA_data >> 16));
    
    /*
     * Now regard the just-created file as the destination gstring.
     */
    gs_dest = GrCreateGString(file, GST_VMEM, &vmBlockHandle);
    
    /*
     * Save the width, height, and vmBlock in the map block of the file.
     */
    mapBlockHandle = VMGetMapBlock(file);
    mapBlock = VMLock(file, mapBlockHandle, &mh);
    mapBlock->LWGS_data = vmBlockHandle;
    mapBlock->LWGS_width = attrs.CRA_extra1;
    mapBlock->LWGS_height = attrs.CRA_extra2;
    VMDirty(mh);
    VMUnlock(mh);

    /*
     * Now copy the clipboard's gstring into the VMFile's.  After that's done,
     * nuke the gstring overhead for the destination, since it's saved
     * away in the VMFile at that point.
     */
    GrCopyGString(gs_source, gs_dest, 0);
    GrEndGString(gs_dest);
    GrDestroyGString(gs_dest, 0, GSKT_LEAVE_DATA);

    /*
     * Nuke the overhead for the source gstring, and close its clipboard
     * item.
     */
    GrDestroyGString(gs_source, 0, GSKT_LEAVE_DATA);
    ClipboardDoneWithItem(query.CQA_header);

    @call app::MSG_GEN_APPLICATION_MARK_APP_NOT_COMPLETELY_BUSY();

    return TRUE;		/* Signal success! */
}
