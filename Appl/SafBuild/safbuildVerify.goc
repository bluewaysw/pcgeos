/***********************************************************************
 *
 *	Copyright (c) NewDeal 1999 -- All Rights Reserved
 *
 * PROJECT:	  GeoSafari Builder
 *
 * AUTHOR:  	  Gene Anderson
 *
 *	$Id$
 *
 ***********************************************************************/

@include "safbuild.goh"
@include "global.goh"
@include <Ansi/stdio.h>

#ifdef __BORLANDC__
#pragma codeseg DocCode
#endif
#ifdef __WATCOMC__
#pragma code_seg("DocCode")
#endif

void
VfyAppendChunk(optr textCh)
{
    @call VerifyText::MSG_VIS_TEXT_APPEND_OPTR(textCh, 0);
}

void
VfyAppendStr(TCHAR *textStr)
{
    @call VerifyText::MSG_VIS_TEXT_APPEND_PTR(textStr, 0);
}

void
VfySetColor(Color col)
{
    ColorQuad cq;

    cq.CQ_redOrIndex = col;
    cq.CQ_info = CF_INDEX;
    @call VerifyText::MSG_VIS_TEXT_SET_COLOR(cq,
					     TEXT_ADDRESS_PAST_END,
					     VIS_TEXT_RANGE_SELECTION);
}

void
VfyAppendErrorChunk(optr textCh)
{
    VfySetColor(C_LIGHT_RED);
    VfyAppendChunk(textCh);
    VfySetColor(C_BLACK);
}

word
VfyGraphicsFile(TCHAR *filename, optr fileStr)
{
    word err;
    dword fSize;

    VfyAppendChunk(fileStr);
    VfyAppendStr(filename);
    if (filename[0]) {
	err = FileGetPathExtAttributes(filename, FEA_SIZE,
				       &fSize, sizeof(dword));
	if (err) {
	    err = 1;
	    VfyAppendErrorChunk(@vfyMissing);
	} else {
	    VfyAppendChunk(@vfyOK);
	}
    } else {
	err = 1;
	VfyAppendErrorChunk(@vfyMissing);
    }
    return(err);
}


word
VfyGraphics256File(TCHAR *filename, optr fileStr)
{
    word err = 0;
    dword fSize;

    VfyAppendChunk(fileStr);
    VfyAppendStr(filename);
    if (filename[0]) {
	err = FileGetPathExtAttributes(filename, FEA_SIZE, &fSize, sizeof(dword));
	if (err) {
	    err = 1;
	    VfyAppendErrorChunk(@vfyMissing);
	} else {
	    VfyAppendChunk(@vfyOK);
	}
    } else {
	VfyAppendChunk(@vfy256ColorWarning);
    }
    return(err);
}

void
VfyAppendIfOK(word errs)
{
    VfySetColor(C_BLACK);
    if (errs) {
	VfyAppendStr("\r");
    } else {
	VfyAppendChunk(@vfyOK);
    }
}


/**************************************************************
 *          
 * FUNCTION:        VfyDuplicateLEDs
 * DESCRIPTION:     check for duplicate LEDs
 *
 * PASS:            arr - optr of chunk array
 *                  noLEDs - TRUE if no LEDs
 * RETURN:          word - # of errors
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      4/28/99     Initial Revision
***************************************************************/

word
VfyDuplicateLEDs(optr arr, Boolean noLEDs)
{
    word count, i, j, eSize, ind, errs = 0;
    SafariQuestionStruct *qs;
    TCHAR buf[128];

    VfyAppendChunk(@vfyLEDs);
    VfySetColor(C_LIGHT_RED);

    if (!noLEDs) {
	count = ChunkArrayGetCount(arr);
	for (i = 0; i < count-1; i++) {
	    qs = ChunkArrayElementToPtr(arr, i, &eSize);
	    ind = qs->SQS_indicator;
	    for (j = i+1; j < count; j++) {
		qs = ChunkArrayElementToPtr(arr, j, &eSize);
		if (qs->SQS_indicator == ind) {
		    errs++;
		    sprintf(buf, LMemDeref(@vfyDupLED), ind, i+1, j+1);
		    VfyAppendStr(buf);
		}
	    }
	}
    }
    VfyAppendIfOK(errs);
    return(errs);
}


/**************************************************************
 *          
 * FUNCTION:        VfyZeroBounds
 * DESCRIPTION:     check for (0,0,0,0) bounds
 *
 * PASS:            arr - optr of chunk array
 * RETURN:          word - # of errors
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      4/28/99     Initial Revision
***************************************************************/

word
VfyZeroBounds(optr arr)
{
    word count, i, eSize, errs = 0;
    SafariQuestionStruct *qs;
    TCHAR buf[128];

    VfyAppendChunk(@vfyBounds);
    VfySetColor(C_LIGHT_RED);

    count = ChunkArrayGetCount(arr);
    for (i = 0; i < count; i++) {
	qs = ChunkArrayElementToPtr(arr, i, &eSize);
	if (!(qs->SQS_bounds.R_left &&
	      qs->SQS_bounds.R_top &&
	      qs->SQS_bounds.R_right &&
	      qs->SQS_bounds.R_bottom)) {
	    errs++;
	    sprintf(buf, LMemDeref(@vfyZero), i+1);
	    VfyAppendStr(buf);
	}
    }
    VfySetColor(C_BLACK);
    VfyAppendIfOK(errs);
    return(errs);
}



/**************************************************************
 *          
 * FUNCTION:        VfyMissingText
 * DESCRIPTION:     check for missing question or answer text
 *
 * PASS:            arr - optr of chunk array
 *                  qerrs - ptr to error return value
 *                  noLEDs - TRUE if no LEDs
 *                  filterType - SafariFilterType
 * RETURN:          word - # of warnings
 *                  *qerrs - # of errors
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      4/28/99     Initial Revision
***************************************************************/

word
VfyMissingText(optr arr, word *qerrs, Boolean noLEDs, SafariFilterType filterType)
{
    word count, i, eSize, warns = 0, qSize, aSize, mq = 0, ma = 0;
    SafariQuestionStruct *qs;
    TCHAR buf[128], *strP;

    VfyAppendChunk(@vfyText);

    *qerrs = 0;
    count = ChunkArrayGetCount(arr);
    for (i = 0; i < count; i++) {
	qs = ChunkArrayElementToPtr(arr, i, &eSize);
	strP = (TCHAR *)((byte *)qs + sizeof(SafariQuestionStruct));
	qSize = strlen(strP);
	strP += qSize+1;
	aSize = strlen(strP);
	if (!qSize) {
	    mq++;
	}
	if (!aSize) {
	    ma++;
	}
    }
    /*
     * emit warning or error as is appropriate
     */
    if (noLEDs) {
	VfySetColor(C_LIGHT_RED);
	if (mq) {
	    VfyAppendChunk(@vfyError);
	    VfyAppendChunk(@vfyEmptyQ);
	}
    /*} else if (filterType != SFT_NORMAL) { */
	if (ma) {
	    VfySetColor(C_LIGHT_RED);
	    VfyAppendChunk(@vfyError);
	    switch (filterType) {
	    case SFT_ALPHABETIC:
		VfyAppendChunk(@vfyEmptyAlphabetic);
		break;
	    case SFT_NUMERIC:
		VfyAppendChunk(@vfyEmptyNumeric);
		break;
	    }
	}
    } else {
	VfySetColor(C_GREEN);
	if (mq && ma) {
	    VfyAppendChunk(@vfyWarning);
	    VfyAppendChunk(@vfyEmptyQA);
	} else if (mq) {
	    VfyAppendChunk(@vfyWarning);
	    VfyAppendChunk(@vfyEmptyQ);
	} else if (ma) {
	    VfyAppendChunk(@vfyWarning);
	    VfyAppendChunk(@vfyEmptyA);
	}
    }

    for (i = 0; i < count; i++) {
	qs = ChunkArrayElementToPtr(arr, i, &eSize);
	strP = (TCHAR *)((byte *)qs + sizeof(SafariQuestionStruct));
	qSize = strlen(strP);
	strP += qSize+1;
	aSize = strlen(strP);
	if ((noLEDs && !qSize) || (/*filterType != SFT_NORMAL && */!aSize) || (/*filterType == SFT_NORMAL && */(!qSize || !aSize))) {
	    sprintf(buf, "%d ", i+1);
	    VfyAppendStr(buf);
	    if (noLEDs) {
		*qerrs = *qerrs + 1;
	   /* } else if (filterType != SFT_NORMAL) {  */
		*qerrs = *qerrs + 1;
	    } else {
		warns++;
	    }
	}
    }
    if (warns+*qerrs) {
	VfyAppendChunk(@vfyMissing);
    }
    VfySetColor(C_BLACK);
    VfyAppendIfOK(warns+*qerrs);
    return(warns);
}



/**************************************************************
 *          
 * FUNCTION:        VfySequentialLEDs
 * DESCRIPTION:     check for sequential LEDs
 *
 * PASS:            arr - optr of chunk array
 *                  noLEDs - TRUE if no LEDs
 * RETURN:          word - # of warnings
 *
 * REVISION HISTORY:
 *         Name      Date        Description
 *         ----      ----        -----------
 *         gene      4/28/99     Initial Revision
***************************************************************/

word
VfySequentialLEDs(optr arr, Boolean noLEDs)
{
    word count, i, eSize, start, startS;
    word lStart, lEnd, slStart, slEnd;
    SafariQuestionStruct *qs, *qs1;
    TCHAR buf[128];

    VfyAppendChunk(@vfyLEDs2);
    /*
     * not a problem if LEDs are not used
     */
    count = ChunkArrayGetCount(arr);
    if (noLEDs || !count) {
	VfyAppendChunk(@vfyOK);
	return(0);
    }
    start = startS = lStart = lEnd = slStart = slEnd = 0;
    for (i = 1; i < count; i++) {
	qs = ChunkArrayElementToPtr(arr, i, &eSize);
	qs1 = ChunkArrayElementToPtr(arr, i-1, &eSize);
	if (qs->SQS_indicator != qs1->SQS_indicator+1) {
	    if (i - 1 - startS > slEnd - slStart) {
		slStart = startS;
		slEnd = i-1;
	    }
	    startS = i;
	}
	if (qs->SQS_indicator < qs1->SQS_indicator) {
	    if (i - 1 - start > lEnd - lStart) {
		lStart = start;
		lEnd = i-1;
	    }
	    start = i;
	}
    }
    if (lEnd - lStart  >= 8 || slEnd - slStart >= 2) {
	/*
	 * return error
	 */
	VfySetColor(C_LIGHT_RED);
	if (slEnd - slStart >= 2) {
	    sprintf(buf, LMemDeref(@vfySeqLEDs1), slStart+1, slEnd+1);
	} else {
	    sprintf(buf, LMemDeref(@vfySeqLEDs1), lStart+1, lEnd+1);
	}
	VfyAppendStr(buf);
	VfyAppendChunk(@vfySeqLEDs2);
	VfySetColor(C_BLACK);
	return(1);
    }
    /*
     * made it all the way through
     */
    VfyAppendChunk(@vfyOK);
    return(0);
}
