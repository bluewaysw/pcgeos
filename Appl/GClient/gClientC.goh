/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Gopher Client App.
MODULE:		GClientClass definitions	
FILE:		gClientC.goh

AUTHOR:		Alvin Cham, Sep 14, 1994

ROUTINES:
	Name			Description
	----			-----------

	MSG_GC_ADD_BOOKMARK_ENTRY
				- add an entry to the bookmark 

	MSG_GC_REMOVE_BOOKMARK_ENTRY
				- remove an entry to the bookmark 

	MSG_GC_DISPLAY_BOOKMARK_ITEMS
				- display the bookmark

	MSG_GC_SET_HLIST_ELEMENT_CHUNK
				- set the chunk for the history element
				structre

	MSG_GC_GET_HLIST_ELEMENT_CHUNK
				- get the chunk for the history element
				structre

	MSG_GC_SET_UPDATE_HLIST
				- set the flag for updating history list
				status

	MSG_GC_GET_UPDATE_HLIST
				- get the flag for updating history list
				status

	MSG_GC_OPEN_CONNECTION
				- open the connection to the server, 
				triggered by 'Connect'
				
	MSG_GC_FETCH_NEXT_MENU
				- fetch the next menu, triggered by 'open'

	MSG_GC_CONNECTION_TOOLS
				- open the connection tools menu, triggered
				by 'Connection Tools'

	MSG_GC_EDIT_CONNECTION
				- edit an item under the connection tools 
				menu, triggered by 'Edit'
	
	MSG_GC_EDIT_CHANGE
				- change an item under the connection tools 
				menu, triggered by 'Change'

	MSG_GC_OK_CHANGE
				- confirm a change, triggered by 'OK'

	MSG_GC_EDIT_CLOSE
				- quit the editing session under the 
				connection tools menu, triggered by 'Close'

	MSG_GC_CREATE_CONNECTION	
				- create a connection settings under the
				connection tools menu, triggered by 'Create'

	MSG_GC_DELETE_CONNECTION	
				- delete a connection settings under the
				connection tools menu, triggered by 'Delete'

	MSG_GC_OK_DELETE_CONNECTION	
				- confirm to delete a connection settings 
				under the, triggered by 'Delete'

	MSG_GC_CANCEL_DELETE_CONNECTION	
				- cancel to delete a connection settings 
				under the, triggered by 'Cancel'
			
	MSG_GC_CLOSE_CONNECTION
				- close the server connection

	MSG_GC_END_CONNECTION
				- end the connection

	MSG_GC_UPDATE_HISTORY_LIST
				- update the history list	

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	9/14/94   	Initial version.

DESCRIPTION:
	This file contains the GClientClass class definitions and 
	some class procedure prototypes. 	

	$Id: gClientC.goh,v 1.1 97/04/04 15:10:17 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@define __GCLIENT_CLASS_GOH
@include "gclient.goh"

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Function prototypes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/* utility */

/* ui */
extern void GCUpdateDisplayScreenUI(optr);
extern void GCRemoveOptions();
extern void GCAddOptions(optr, optr, optr, optr);
extern void GCWriteToTextObj(optr, char *);

extern void GCFetchMenu(GopherParseItemType, word, optr);

/* gopher plus attributes */
extern void GCConstructModifyDateString(GopherPlusItemAttrDateInfo);
extern word GCPadMonth(char *, word);
extern word GCPadDayOrHourOrYear(char *, word);
extern word GCPadMinuteOrSecond(char *, word);
extern word GCPadChar(char *, char);
extern void GCDisplayViewSize(optr);
extern Boolean GCLanguageMatch(char *, optr);
extern void GCWriteSizeToTextObj(char *);

/* connection tools parameters */
extern void GCDisplayAttributesToTextObj(char *);
extern void GCExtractItemType(char);
extern word GCExtractAttribute(char *, optr);
extern word GCFindNextTabOrNewLine(char *);
extern void GCFillConTextObjWithDefaults();
extern void GCCreateNewConnectionItem();
extern MemHandle GCBuildItemFromParameters();
extern word GCBuildItemType(char *);
extern word GCBuildItemAttribute(optr, char *);
extern word GCBuildGopherPlus(char *);
extern void GCEditConnectionItem(word, Boolean);

/* history list */
void GCUpdateHistElementItemInfo(GopherItem *, word, optr);
void GCUpdateHistElementFileNameInfo(FileLongName, const char*);
void GCUpdateHistElementFileIDInfo(word *, optr);
ChunkHandle GCAllocHistElementChunk(MemHandle);



/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		GClientClass
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@class	GClientClass, GopherSocketClass;
/*@class	GClientClass, GopherSerialClass;*/

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Messages
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * adding an entry to the bookmark display
 *
 * Context:		bookmark feature
 * Source:		a gopher object
 * Destination:		a gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_ADD_BOOKMARK_ENTRY();

/*
 * removing an entry to the bookmark display
 *
 * Context:		bookmark feature
 * Source:		a gopher object
 * Destination:		a gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_REMOVE_BOOKMARK_ENTRY();

/*
 * displaying the bookmark item page
 *
 * Context:		bookmark feature
 * Source:		a gopher object
 * Destination:		a gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_DISPLAY_BOOKMARK_ITEMS();

/* get's and set's */

/*
 * set/save the history list element chunk
 *
 * Context:		history list feature
 * Source:		a gopher object
 * Destination:		a gopher object
 * Interception:	none
 */
@message	void
	MSG_GC_SET_HLIST_ELEMENT_CHUNK(ChunkHandle hListElementChunk);

/*
 * get the history list element chunk
 *
 * Context:		history list feature
 * Source:		a gopher object
 * Destination:		a gopher object
 * Interception:	none
 */
@message	ChunkHandle
	MSG_GC_GET_HLIST_ELEMENT_CHUNK();

/*
 * set the flag for updating the history list
 *
 * Context:		history list update status
 * Source:		a gopher object
 * Destination:		a gopher object
 * Interception:	none
 */
@message	void
	MSG_GC_SET_UPDATE_HLIST(Boolean flag);

/*
 * set the flag for updating the history list
 *
 * Context:		history list update status 
 * Source:		a gopher object
 * Destination:		a gopher object
 * Interception:	none
 */
@message	Boolean
	MSG_GC_GET_UPDATE_HLIST();

/* method handling */

/*
 * Open a connection to the server.  
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_OPEN_CONNECTION();

/*
 * Fetching the next menu by building a client request to the server.
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_FETCH_NEXT_MENU();

/*
 * Connection tools. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_CONNECTION_TOOLS();

/*
 * Edit connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_EDIT_CONNECTION();

/*
 * Edit an entry within the edit/create option 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_EDIT_CHANGE();

/*
 * Confirm an entry within the edit/create option 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_OK_CHANGE();

/*
 * close the editing session
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_EDIT_CLOSE();

/*
 * Create a connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_CREATE_CONNECTION();

/*
 * Delete connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_DELETE_CONNECTION();

/*
 * OK to delete connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_OK_DELETE_CONNECTION();

/*
 * Cancel to delete connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_CANCEL_DELETE_CONNECTION();

/*
 * Close connection. 
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_CLOSE_CONNECTION();

/*
 * End connection.
 *
 * Context:		menu options
 * Source:		App UI
 * Destination:		the gopher object 
 * Interception:	none
 */
@message	void
	MSG_GC_END_CONNECTION();

/*
 * Update the links of a history list
 *
 * Context:	history list
 * Source:	any object, but usually a gopher object	
 * Destination: a gopher object	
 * Interception:unlikely
 */
@message void MSG_GC_UPDATE_HISTORY_LIST
	(GCHistoryListElement *element, word chunk);


/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		Instance data + default
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*
 * Context:	Stores the current selection number from a menu item.
 * Usage:	We would know which element of the chunk array to look to
 *		find the information about that item.
 */
	@instance	sword	GCI_selection = -1;

/*
 * Context:	A flag to see if we are getting the first response from the 
 *		server.
 * Usage:	It is needed because the sequence of handling the response is 
 *		different in the first response than the rest.
 */

	/* DO NOT CHANGE THIS */
	@instance	Boolean	GCI_justConnected = TRUE;

/*
 * Context:	Saving the information of the last history list element.
 * Usage:	This needs to be saved because we only want to insert this
 *		information into the history list after we have successfully
 *		parsed the item.
 */

	@instance	ChunkHandle	GCI_hListElementChunk = 0;

/*
 * Context:	Saving the information of the last history list element.
 * Usage:	This needs to be saved because we only want to insert this
 *		information into the history list after we have successfully
 *		parsed the item.
 */

	@instance	Boolean		GCI_updateHList = TRUE;

@endc	/* GClientClass */


