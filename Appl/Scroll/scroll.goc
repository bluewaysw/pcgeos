/********************************************************************
 *
 *      Copyright (c) Geoworks 1996 -- All Rights Reserved.
 *
 * PROJECT:     GEOS Sample Applications
 * MODULE:      GenContent
 * FILE:        gcont.goc
 *
 * AUTHOR:      Nathan Fiedler: November 13, 1996
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      NF      11/13/96        Initial version
 *
 * DESCRIPTION:
 *      This sample illustrates how to have a lot of Gen objects
 *      on the screen at once. Although they can't all physically
 *      fit on the screen at once, we can have the user scroll the
 *      objects up and down to make them visible.
 *
 *      This sample uses a GenView and GenContent to provide the
 *      scrolling. By using the scrolling behavior of the GenView
 *      you can scroll up or down to make different Gen objects
 *      visible on the screen. To actually implement the scrolling
 *      we'll need to intercept the PgUp and PgDn keys to make the
 *      view scroll up and down. We do that by intercepting the
 *      MSG_META_KBD_CHAR message at the GenView level. There we
 *      can check which key was pressed and either scroll up,
 *      scroll down, or send the keypress to another object to be
 *      handled in the appropriate manner.
 *
 * RCS STAMP:
 *      $Id: gcont.goc,v 1.1 97/04/04 16:41:45 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *              Headers
 *******************************************************************/
    @include <stdapp.goh>
    //@include <lmacros.goh>

/********************************************************************
 *              Class Definitions
 *******************************************************************/
    @class ScrollProcessClass, GenProcessClass;
    @endc;

      /*
       * Subclass this so we can intercept the
       * keyboard presses and respond properly to
       * the PgUp and PgDn keys.
       */
    @class ScrollViewClass, GenViewClass;
    @endc;

    @class ScrollViewAppClass, GenApplicationClass;
    @endc;

/********************************************************************
 *              Class Declarations
 *******************************************************************/
    @classdecl ScrollProcessClass, neverSaved;
    @classdecl ScrollViewClass;
    @classdecl ScrollViewAppClass;

/********************************************************************
 *              UI Object Resources
 *******************************************************************/

/********************************************************************
 *              AppResource Resource
 *******************************************************************/
@start AppResource;

@object ScrollViewAppClass ScrollApp = {
    GI_visMoniker = list { @GContTextMoniker };
    GI_comp = @GContPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @GContPrimary;
}

@visMoniker GContTextMoniker = "Mouse Wheel API";

@end AppResource;

/********************************************************************
 *              Interface Resource
 *******************************************************************/
@start Interface;

@object GenPrimaryClass GContPrimary = {
    GI_comp = @GContView;
}

  /*
   * To have Gen objects in a scrolling "area"
   * we'll need to use a GenView. It's content
   * will be the GenContent below, which contains
   * all of the Gen objects we want to be scrollable.
   */
@object ScrollViewClass GContView = {
    GVI_content = @GContContent;
      /*
       * Set the flag for "generic contents" since we have
       * Gen objects as the content of this view.
       * Also set the flag so the view will be the same
       * color as the primary window, for appearances only.
       */
    GVI_attrs = @default | GVA_GENERIC_CONTENTS
                         | GVA_SAME_COLOR_AS_PARENT_WIN;
    GVI_vertAttrs = @default;
    // GVDA_SCROLLABLE
}

  /*
   * This is the content object which contains
   * all of the Gen objects that will be displayed
   * in the GenView.
   */
@object GenContentClass GContContent = {
    GI_comp = @GContValue1,
              @GContValue2,
              @GContWheelDirection,
              @GContModifierKey;
    GCI_genView = @GContView;
}

@object GenValueClass GContValue1 = {
    GI_visMoniker = "Mouse X Position:";
}

@object GenValueClass GContValue2 = {
    GI_visMoniker = "Mouse Y Position:";
}

@object GenGlyphClass GContWheelDirection = {
    GI_visMoniker = "Wheel Direction:";
}

@object GenGlyphClass GContModifierKey = {
    GI_visMoniker = "Modifier Key:";
}

@end Interface;

/********************************************************************
 *              Code for GContViewClass
 *******************************************************************/

/********************************************************************
 *              MSG_META_MOUSE_WHEEL
 *******************************************************************/

@method ScrollViewClass, MSG_META_MOUSE_WHEEL
{

    @send GContValue1::MSG_GEN_VALUE_SET_INTEGER_VALUE(xPosition, 0);
    @send GContValue2::MSG_GEN_VALUE_SET_INTEGER_VALUE(yPosition, 0);

    if (GET_BUTTON_INFO(inputState) > 128)
    {
        @call GContWheelDirection::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Wheel Direction: Up.", VUM_NOW);
    }
    else
    {
        @call GContWheelDirection::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Wheel Direction: Down.", VUM_NOW);
    }


    if (GET_SHIFT_STATE(inputState) & (SS_LSHIFT))
    {
        @call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Left Shift.", VUM_NOW);
    }

    if (GET_SHIFT_STATE(inputState) & (SS_RSHIFT))
    {
        @call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Right Shift.", VUM_NOW);
    }

    if (GET_SHIFT_STATE(inputState) & (SS_LALT))
    {
    	@call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Left Alt.", VUM_NOW);
    }

    if (GET_SHIFT_STATE(inputState) & (SS_RALT))
    {
    	@call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Right Alt.", VUM_NOW);
    }

    if (GET_SHIFT_STATE(inputState) & (SS_LCTRL))
    {
        @call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Left Ctrl.", VUM_NOW);
    }

    if (GET_SHIFT_STATE(inputState) & (SS_RCTRL))
    {
        @call GContModifierKey::MSG_GEN_REPLACE_VIS_MONIKER_TEXT("Modifier Key: Right Ctrl.", VUM_NOW);
    }


    retVal->flags = MRF_PROCESSED;
}
