/***********************************************************************
 *
 *
 * PROJECT: Breadbox GeoPoint
 * FILE:      functs.goc
 * AUTHOR:  John F. Howard,   08/03
 *
 * DESCRIPTION:
 *  This file has various functions
 *
 *
 *
 ***********************************************************************/

 @include "geopoint.goh"

 @extern object ScrapNameList;
 @extern object NextTool;
 @extern object PrevTool;
 @extern object ScrapListDBox;
 @extern object GoToTool;
 @extern object ScrapName;
 @extern object ScrapNumber;
 @extern object CutTrigger;
 @extern object DeleteTrigger;
 @extern object CopyTrigger;
 @extern object PasteTrigger;
 @extern object PasteAtEndTrigger;
 @extern object CutTool;
 @extern object DeleteTool;
 @extern object CopyTool;
 @extern object PasteTool;
 @extern object PasteEndTool;
 @extern object ScrapBody;
 @extern object ScrapUIDocControl;
 @extern object ScrapView;
 @extern object StartShowTrigger;
 @extern object StartShowTool;
 @extern object SlideColorControl;
 @extern object SlideTransTrigger;
 @extern object ReorderSlidesTrigger;
 @extern object TransTool;
 @extern object ReorderTool;

 @extern chunk EmptyScrapbookString;
 @extern chunk PageString;
 @extern chunk OfString;
 @extern chunk NoPasteErrorString;
 @extern chunk UnsupportedScrapFormatString;


/***********************************************************************
 *
 * FUNCTION: DisableScrapBook
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void DisableScrapBook (void)
{

	/* disable stuff */
	g_canPaste = FALSE;
	@send NextTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send PrevTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapListDBox::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send GoToTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapName::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapNumber::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send CutTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send DeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send CopyTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send PasteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send PasteAtEndTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send CutTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send DeleteTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send CopyTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send PasteTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send PasteEndTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send StartShowTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send StartShowTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapBody::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
//	@send SlideColorControl::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send SlideTransTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ReorderSlidesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send TransTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ReorderTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

}

/***********************************************************************
 *
 * FUNCTION: EnableScrapBook
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void EnableScrapBook (void)
{
 word		numScraps;


	/* enable stuff */
	g_canPaste = TRUE;
	numScraps =	GetNumScraps();
	@send ScrapBody::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
//	@send SlideColorControl::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapNumber::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapName::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	@send ScrapListDBox::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	if (numScraps) {
		@send NextTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send PrevTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GoToTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send SlideTransTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ReorderSlidesTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send TransTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ReorderTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	else  { /* no scraps */
		@send DeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send PrevTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send NextTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GoToTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send SlideTransTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ReorderSlidesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send TransTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send ReorderTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

	/* enable paste button if there is something to paste */
	@send process::MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED();

}

/***********************************************************************
 *
 * FUNCTION: GetNumScraps
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
word GetNumScraps (void)
{
 VMBlockHandle		vmbh;
 MemHandle			mh;
 ScrapBookIndexHeader	*header;
 word					numScraps;


	 vmbh = VMGetMapBlock(g_currentScrapFile);
	 header = VMLock(g_currentScrapFile, vmbh, &mh);
	 numScraps = header->SBIH_numScraps;
	 VMUnlock(mh);
	 return (numScraps);
	 
}

/***********************************************************************
 *
 * FUNCTION: ClearScrapView
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void ClearScrapView (void)
{



	/* clear gstring view  */
	InvalViewWindow();

	/* clear scrap number */
	MemLock(OptrToHandle(@EmptyScrapbookString));
	@call ScrapNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(
								  LMemDeref(@EmptyScrapbookString), 0);
	MemUnlock(OptrToHandle(@EmptyScrapbookString));

	/* clear scrap name area */
	@send ScrapName::MSG_VIS_TEXT_DELETE_ALL();
	@send ScrapName::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

	/* clear scrap name list */
	@send ScrapNameList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(0);

}

/***********************************************************************
 *
 * FUNCTION: InvalViewWindow
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void InvalViewWindow (void)
{


	if (g_gStringWindow) {
		WinInvalReg(g_gStringWindow, 0, 0, 0, MAX_COORD, MAX_COORD);
		/* not sure why I need this, but I do when I open the app then
			a doc.  I don't need it when I dbl click a doc.  Go figure */
		@send process::MSG_META_EXPOSED(g_gStringWindow);
		}

}

/***********************************************************************
 *
 * FUNCTION: ResetScrapNameList
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void ResetScrapNameList (void)
{

	@send ScrapNameList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(GetNumScraps());

	if (g_currentScrap != GIGS_NONE)
		@send ScrapNameList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(
	                             g_currentScrap, FALSE);

}

/***********************************************************************
 *
 * FUNCTION: PasteCommon (Boolean atEnd)
 *
 *
 * DESCRIPTION:	Called by PASTE & PASTE_AT_END
 *                atEnd = TRUE if from PASTE_AT_END
 *
 ***********************************************************************/
void PasteCommon (Boolean atEnd)
{
 ClipboardQueryArgs	query;
 VMBlockHandle			scrapBlockHan;
 MemHandle				mh;
 ClipboardItemHeader	*clipItemHeaderPtr;
 VMChain					chainCopy;
 word						i;
 Boolean					error;
 ClipboardItemFormatID	formatID;
 GeodeToken				nullToken = {"", 0};


	SaveCurrentScrapName();

	/* get current transfer item */
	ClipboardQueryItem(TIF_NORMAL, &query);

	/* trap some bad situations */
	if (!query.CQA_numFormats)  return;
	if (!g_currentScrapFile) return;

	/* copy the transfer item header to our doc file */
	scrapBlockHan = VMCopyVMBlock(FileFromTransferBlockID(query.CQA_header),
										  BlockFromTransferBlockID(query.CQA_header),
										  g_currentScrapFile);

	/* snag the transfer item header */
	clipItemHeaderPtr = VMLock(g_currentScrapFile, scrapBlockHan, &mh);

	/* copy the transfer item formats to our doc file */
	for (i = 0; i < clipItemHeaderPtr->CIH_formatCount; i++)  {
		/* Save only the CIF_GRAPHICS_STRING format to save space in the
			doc file.  But I gotta be nice and clean up the formats stuff
			since I have a cut/copy capability.  So we'll put the G_S
			info in the first slot and zero out the rest. */
		formatID = clipItemHeaderPtr->CIH_formats[i].CIFI_format;
		if (formatID == FormatIDFromManufacturerAndType(
						MANUFACTURER_ID_GEOWORKS, CIF_GRAPHICS_STRING))  {
			chainCopy = VMCopyVMChain(FileFromTransferBlockID(query.CQA_header),
									 clipItemHeaderPtr->CIH_formats[i].CIFI_vmChain,
									 g_currentScrapFile);
			clipItemHeaderPtr->CIH_formats[i].CIFI_vmChain = chainCopy;
			if (i != 0) {
				/* then move the G_S data to the 0 slot */
				clipItemHeaderPtr->CIH_formats[0].CIFI_format =
											clipItemHeaderPtr->CIH_formats[i].CIFI_format;
				clipItemHeaderPtr->CIH_formats[0].CIFI_extra1 =
											clipItemHeaderPtr->CIH_formats[i].CIFI_extra1;
				clipItemHeaderPtr->CIH_formats[0].CIFI_extra2 =
											clipItemHeaderPtr->CIH_formats[i].CIFI_extra2;
				clipItemHeaderPtr->CIH_formats[0].CIFI_vmChain =
										clipItemHeaderPtr->CIH_formats[i].CIFI_vmChain;
				clipItemHeaderPtr->CIH_formats[0].CIFI_renderer =
										clipItemHeaderPtr->CIH_formats[i].CIFI_renderer;
				/* and clear this one */
				clipItemHeaderPtr->CIH_formats[i].CIFI_format = 0;
				clipItemHeaderPtr->CIH_formats[i].CIFI_extra1 = 0;
				clipItemHeaderPtr->CIH_formats[i].CIFI_extra2 = 0;
				clipItemHeaderPtr->CIH_formats[i].CIFI_vmChain = 0;
				clipItemHeaderPtr->CIH_formats[i].CIFI_renderer = nullToken;
				}
			} /* end of found GRAPHICS_STRING if */
		else {
			/* not our G_S format, so if we're not in the 0 slot clear it */
			clipItemHeaderPtr->CIH_formats[i].CIFI_format = 0;
			clipItemHeaderPtr->CIH_formats[i].CIFI_extra1 = 0;
			clipItemHeaderPtr->CIH_formats[i].CIFI_extra2 = 0;
			clipItemHeaderPtr->CIH_formats[i].CIFI_vmChain = 0;
			clipItemHeaderPtr->CIH_formats[i].CIFI_renderer = nullToken;
			}
		}
	clipItemHeaderPtr->CIH_formatCount = 1;
	VMDirty(mh);
	VMUnlock(mh);

	/* add transfer item to map block */
	error = AddItemToMapBlock(scrapBlockHan, atEnd);

	/* finish with transfer item */
	ClipboardDoneWithItem(query.CQA_header);

	/* and clean things up */
	PostPaste(error);

}

/***********************************************************************
 *
 * FUNCTION: AddItemToMapBlock (VMBlockHandle scrapBlockHan, Boolean atEnd)
 *
 *
 * DESCRIPTION:	returns TRUE if there was an error
 *
 *
 ***********************************************************************/
Boolean AddItemToMapBlock (VMBlockHandle scrapBlockHan, Boolean atEnd)
{
 VMBlockHandle		vmbh;
 MemHandle			mh, rmh;
 ScrapBookIndexHeader	*headerPtr;
 word					numScraps, offset, i;
 ScrapBookIndexEntry		*entryPtr, *movePtr;
 ScrapBookIndexEntry		entry;
// ColorQuad					color;

	/* grab the map info */
	vmbh = VMGetMapBlock(g_currentScrapFile);
	headerPtr = VMLock(g_currentScrapFile, vmbh, &mh);
	numScraps = headerPtr->SBIH_numScraps;

	/* make space for new entry - if successfull rmh = mh */
	rmh = MemReAlloc(mh, (numScraps * sizeof(ScrapBookIndexEntry)
								 + sizeof(ScrapBookIndexHeader)
								 + sizeof(ScrapBookIndexEntry)), 0);

	/*	if we had a problem cleanup & bail */
	if (!rmh) {
		FreeTransferItem(scrapBlockHan);
		VMUnlock(mh);
		return(TRUE);
		}

	/* Realloc may have moved things... */
	headerPtr = MemDeref(rmh);
	entryPtr = headerPtr + 1;

	/* are we pasting at the end or inserting before the selection */
	offset = numScraps;
	if (!atEnd)  {
		for (i = numScraps; i > g_currentScrap; i--) {
			/* make room for new scrap - start at the last and move each
				entry down till we've moved the current scrap */
			movePtr = entryPtr + i - 1;
			entry = *movePtr;
			movePtr++;
			movePtr->SBIE_vmBlock = entry.SBIE_vmBlock;
			movePtr->SBIE_trans = entry.SBIE_trans;
			movePtr->SBIE_wipe = entry.SBIE_wipe;
			movePtr->SBIE_fadeSpeed = entry.SBIE_fadeSpeed;
			movePtr->SBIE_delayTime = entry.SBIE_delayTime;
			}
		offset = g_currentScrap;
		}
	else {
      /* put the selection on the new last item */
		g_currentScrap = numScraps;
		}

	/* store new scrap's entry info */
/*	color.CQ_info = C_BLACK;
	color.CQ_redOrIndex = CF_INDEX;
	color.CQ_green = 0;
	color.CQ_blue = 0;
*/
	headerPtr->SBIH_numScraps++;
	entryPtr += offset;
	entryPtr->SBIE_vmBlock = scrapBlockHan;
	entryPtr->SBIE_trans = TRANS_TYPE_NONE;
	entryPtr->SBIE_wipe = WIPE_RIGHT;
	entryPtr->SBIE_fadeSpeed = TRANS_FAST;
	entryPtr->SBIE_delayTime = 0;

	VMDirty(rmh);
	VMUnlock(rmh);

	return (FALSE);
}

/***********************************************************************
 *
 * FUNCTION: FreeTransferItem (VMBlockHandle scrapBlockHan)
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void FreeTransferItem (VMBlockHandle scrapBlockHan)
{
 MemHandle			mh;
 ClipboardItemHeader	*header;
 word					i, dummy = 0;


	/* lock the scrapBlock */
	header = VMLock(g_currentScrapFile, scrapBlockHan, &mh);

	/* free the chains */
	for (i = 0; i < header->CIH_formatCount; i++) {
		VMFreeVMChain(g_currentScrapFile, header->CIH_formats[i].CIFI_vmChain);
      /* the compiler doesn't like one step for loops */
		dummy++;
		}

	/*	free the scrap block  */
	VMUnlock(mh);
	VMFree(g_currentScrapFile, scrapBlockHan);

}

/***********************************************************************
 *
 * FUNCTION: PostPaste (Boolean error)
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void PostPaste	(Boolean error)
{

	if (error)  {
		/* if error, not pasted, so no need to update */
		NotifyDBox (0, @NoPasteErrorString);
		return;
		}

	/* We are now asynchronous update - to shrink the window in which the
		document on disk is in an inconsistent state, we do an autosave after
		each paste... (9/13/93 - atw) */
	@send ScrapUIDocControl::MSG_GEN_DOCUMENT_AUTO_SAVE();

	/* display newly pasted in scrap */
	ShowCurrentScrap();

	/* reset scrap name list */
	ResetScrapNameList();

	/* re-set the UI */
	@send ScrapName::MSG_GEN_SET_ENABLED(VUM_NOW);
	@send ScrapName::MSG_VIS_TEXT_SELECT_ALL();
	@send ScrapName::MSG_META_GRAB_FOCUS_EXCL();

	if (GetNumScraps() == 1) {
		@send DeleteTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send CutTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send CopyTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send DeleteTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send CutTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send CopyTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send StartShowTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send StartShowTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send SlideTransTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send TransTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

}

/***********************************************************************
 *
 * FUNCTION: ShowCurrentScrap
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void ShowCurrentScrap (void)
{
 VMBlockHandle		vmbh, evmbh;
 MemHandle			mh, emh;
 ScrapBookIndexHeader	*headerPtr;
 ScrapBookIndexEntry		*entryPtr;
 ClipboardItemHeader		*clipHeaderPtr;
 word					numScraps, i, formatNum, width, height;
 char					pageNumStr[33], numStr[13];
 Boolean				foundFormat = FALSE;
 XYValueAsDWord			bitmapSize;
 ClipboardItemFormatID	formatID;


	/*	grab the map info */
	vmbh = VMGetMapBlock(g_currentScrapFile);
	headerPtr = VMLock(g_currentScrapFile, vmbh, &mh);
	numScraps = headerPtr->SBIH_numScraps;
	entryPtr = headerPtr + 1;

	/*	 nothing to draw  */
	if (!numScraps) {
		VMUnlock(mh);
		return;
		}

	/*	deal with bogus scrap numbers */
	if (g_currentScrap >= numScraps) g_currentScrap = 0;

	/* entry for current scrap in index block  */
	entryPtr += g_currentScrap;

	/*	get scrap from index block */
	evmbh = entryPtr->SBIE_vmBlock;
	VMUnlock(mh);
	clipHeaderPtr = VMLock(g_currentScrapFile, evmbh, &emh);

	/*	 show scrap number  */
	MemLock(OptrToHandle(@PageString));
	strcpy(pageNumStr, LMemDeref(@PageString));
	UtilHex32ToAscii(numStr, (dword)(g_currentScrap + 1), UHTAF_NULL_TERMINATE);
	strcat(pageNumStr, numStr);
	strcat(pageNumStr, LMemDeref(@OfString));
	MemUnlock(OptrToHandle(@PageString));
	UtilHex32ToAscii(numStr, (dword)numScraps, UHTAF_NULL_TERMINATE);
	strcat(pageNumStr, numStr);
	@call ScrapNumber::MSG_VIS_TEXT_REPLACE_ALL_PTR(pageNumStr, 0);

	/* enable or disable the previous and next triggers based on the
		current scrap shown. */
	ScrapbookSetPreviousAndNext();

	/* show name of scrap */
	@call ScrapName::MSG_VIS_TEXT_REPLACE_ALL_PTR(clipHeaderPtr->CIH_name, 0);
	@call ScrapName::MSG_VIS_TEXT_SELECT_START();

	/* find a format to show the scrap */
	for (i = 0; i < clipHeaderPtr->CIH_formatCount; i++)  {
		formatID = clipHeaderPtr->CIH_formats[i].CIFI_format;
/*		if (formatID == FormatIDFromManufacturerAndType(
						MANUFACTURER_ID_GEOWORKS, CIF_BITMAP))  {
			foundFormat = TRUE;
			g_currentFormat = CIF_BITMAP;
			formatNum = i;
			break;
			}
		else */if (formatID == FormatIDFromManufacturerAndType(
						MANUFACTURER_ID_GEOWORKS, CIF_GRAPHICS_STRING))  {
			foundFormat = TRUE;
			g_currentFormat = CIF_GRAPHICS_STRING;
			formatNum = i;
			break;
			}
		}

	/* no gstring found - report error */
	if (!foundFormat) {
		NotifyDBox (0, @UnsupportedScrapFormatString);
		VMUnlock(emh);
		return;
		}
		
	/* show the scrap */
	@send ScrapView::MSG_META_GRAB_TARGET_EXCL();
	@send ScrapView::MSG_META_GRAB_FOCUS_EXCL();
	InvalViewWindow();

	/* grab the bitmap size poop */
	if (g_currentFormat == CIF_BITMAP) {
		bitmapSize = GrGetHugeBitmapSize(g_currentScrapFile,
		  VMCHAIN_GET_VM_BLOCK(clipHeaderPtr->CIH_formats[formatNum].CIFI_vmChain));
		width = DWORD_X(bitmapSize);
		height = DWORD_Y(bitmapSize);
		}
		
	/* or the gstring size poop */
	if (g_currentFormat == CIF_GRAPHICS_STRING) {
		width = clipHeaderPtr->CIH_formats[formatNum].CIFI_extra1;
		height = clipHeaderPtr->CIH_formats[formatNum].CIFI_extra2;
		}

	/* checkSizes */
	if (width > 0x7fff) width = 0x7fff;
	if (height > 0x7fff) height = 0x7fff;
	@send ScrapView::MSG_GEN_VIEW_SET_DOC_BOUNDS(
								  (sdword)height, (sdword)width, 0, 0);

	/*	unlock transfer item block */
	VMUnlock(emh);

}

/***********************************************************************
 *
 * FUNCTION:
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void DrawScrap(WindowHandle win)
{
 GStateHandle	gstate, gstring;
 VMBlockHandle		vmbh, evmbh, cvmbh;
 MemHandle			mh, emh;
 ScrapBookIndexHeader	*headerPtr;
 ScrapBookIndexEntry		*entryPtr;
 ClipboardItemHeader		*clipHeaderPtr;
 ClipboardItemFormatID	formatID;
 word					i, formatNum;
 Boolean				foundFormat = FALSE;
 Rectangle			rect, winRect;
 sword				left = 0, top = 0;
 XYValueAsDWord			bitmapSize;


	if (!g_currentScrapFile) return;
	if (g_currentScrap >= GetNumScraps()) return;

	gstate = GrCreateState(win);
	GrBeginUpdate(gstate);

	/*	get the map stuff */
	vmbh = VMGetMapBlock(g_currentScrapFile);
	headerPtr = VMLock(g_currentScrapFile, vmbh, &mh);
	entryPtr = headerPtr + 1;
	entryPtr += g_currentScrap;

	evmbh = entryPtr->SBIE_vmBlock;
	VMUnlock(mh);

	clipHeaderPtr = VMLock(g_currentScrapFile, evmbh, &emh);

	/*	grab the clip formats */
	for (i = 0; i < clipHeaderPtr->CIH_formatCount; i++)  {
		formatID = clipHeaderPtr->CIH_formats[i].CIFI_format;
/*		if (formatID == FormatIDFromManufacturerAndType(
						MANUFACTURER_ID_GEOWORKS, CIF_BITMAP))  {
			foundFormat = TRUE;
			g_currentFormat = CIF_BITMAP;
			formatNum = i;
			break;
			}
		else */if (formatID == FormatIDFromManufacturerAndType(
						MANUFACTURER_ID_GEOWORKS, CIF_GRAPHICS_STRING))  {
			foundFormat = TRUE;
			g_currentFormat = CIF_GRAPHICS_STRING;
			formatNum = i;
			break;
			}
		}

	if (foundFormat) {
		/* get our graphic block */
		cvmbh = VMCHAIN_GET_VM_BLOCK(
							  clipHeaderPtr->CIH_formats[formatNum].CIFI_vmChain);
		VMUnlock(emh);

		if (g_showInProg)  // to center graphic
			WinGetWinScreenBounds(win, &winRect);

		/* draw the bitmap */
		if (g_currentFormat == CIF_BITMAP)  {
			if (g_showInProg) {
				/* center the bitmap */
				bitmapSize = GrGetHugeBitmapSize(g_currentScrapFile, cvmbh);
				left = (winRect.R_right - DWORD_X(bitmapSize))/2;
				top = (winRect.R_bottom - DWORD_Y(bitmapSize))/2;
				}
			GrDrawHugeBitmap(gstate, left, top, g_currentScrapFile, cvmbh);
			}
		
		/* draw the gstring */
		if (g_currentFormat == CIF_GRAPHICS_STRING)  {
			gstring = GrLoadGString(g_currentScrapFile, GST_VMEM, cvmbh);
			GrGetGStringBounds(gstring, gstate, 0, &rect);
			GrSetGStringPos(/*gstate*/gstring, GSSPT_BEGINNING, 0);
			/* .goh and docs are wrong!! ^^^^ 1st arg is gstring NOT gstate! */

			/* deal with GeoDraw TIF_GSTRING scraps that are centered on 0,0 */
			if (!g_showInProg) {
            /* show at top left */
				if (rect.R_left) left = rect.R_right;
				if (rect.R_top) top = rect.R_bottom;
				}
			else {
				/* center the gstring */
				if (!rect.R_left) {
					/* for gstrings starting at 0,0... */
					left = (winRect.R_right - rect.R_right)/2;
					top = (winRect.R_bottom - rect.R_bottom)/2;
					}
				else  {
					/* for those CENTERED on 0,0... */
					left = winRect.R_right/2;
					top = winRect.R_bottom/2;
					}
				}
			GrDrawGString(gstate, gstring, left, top, 0, 0);
			GrDestroyGString(gstring, gstate, GSKT_LEAVE_DATA);
			}
		} /* end of foundFormat if */
	else  VMUnlock(emh);

	GrEndUpdate(gstate);
	GrDestroyState(gstate);

}

/***********************************************************************
 *
 * FUNCTION: ScrapbookSetPreviousAndNext
 *
 *
 * DESCRIPTION:
 *
 *
 ***********************************************************************/
void ScrapbookSetPreviousAndNext (void)
{


	if(GetNumScraps() >= 2) {
		@send GoToTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send PrevTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send NextTool::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send ReorderSlidesTrigger::MSG_GEN_SET_ENABLED(VUM_NOW);
		@send ReorderTool::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}
	/* If there is only one (or 0) scrap, then disable the previous and
		next triggers and the "Go To Page" trigger. */
	else {
		@send GoToTool::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send PrevTool::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send NextTool::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send ReorderSlidesTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		@send ReorderTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

}

/***********************************************************************
 *
 * FUNCTION: SaveCurrentScrapName ()
 *
 *
 * DESCRIPTION:	returns TRUE if name unchanged and nothing saved (but
 *                _WRITE_CACHED_DATA_ is the only routine that cares
 *                about the return value)
 *
 *
 *
 ***********************************************************************/
Boolean SaveCurrentScrapName(void)
{
 char		nameStr[CLIPBOARD_ITEM_NAME_LENGTH];
 VMBlockHandle		vmbh, evmbh;
 MemHandle			mh, emh;
 ScrapBookIndexHeader	*headerPtr;
 ScrapBookIndexEntry		*entryPtr;
 ClipboardItemHeader		*clipHeaderPtr;


	/* check if any scraps; if none, no name to save */
	if (!GetNumScraps() || !g_nameMayHaveChanged) return(TRUE);

	/* get scrap name, if any  */
	@call ScrapName::MSG_VIS_TEXT_GET_ALL_PTR(nameStr);

	/* name changed, save in scrap block
	/*	grab the map info */
	vmbh = VMGetMapBlock(g_currentScrapFile);
	headerPtr = VMLock(g_currentScrapFile, vmbh, &mh);
	entryPtr = headerPtr + 1;

	/* entry for current scrap in index block  */
	entryPtr += g_currentScrap;

	/*	get scrap from index block */
	evmbh = entryPtr->SBIE_vmBlock;
	VMUnlock(mh);
	clipHeaderPtr = VMLock(g_currentScrapFile, evmbh, &emh);
	/* if nameStr is blank, put the old name back */
	if (!strlen(nameStr))
		@call ScrapName::MSG_VIS_TEXT_REPLACE_ALL_PTR(clipHeaderPtr->CIH_name, 0);
	else {
		strcpy(clipHeaderPtr->CIH_name, nameStr);
		VMDirty(emh);
      }
	VMUnlock(emh);

	/* mark text as being clean again  */
	g_nameMayHaveChanged = FALSE;

	/* reset scrap name list */
	if (!g_closing)
		@send process::MSG_SCRAPBOOK_SCRAP_DLIST_MONIKER_QUERY(
		                             @ScrapNameList, g_currentScrap);

	return(FALSE);

}

/***********************************************************************
 *
 * FUNCTION: DeleteCutCommon (Boolean saveToClip)
 *
 *
 * DESCRIPTION:	Called by CUT & DELETE
 *                saveToClip = TRUE if from CUT
 *
 ***********************************************************************/
void DeleteCutCommon(Boolean saveToClip)
{
 VMBlockHandle		vmbh, delVMBlock;
 MemHandle			mh;
 ScrapBookIndexHeader	*headerPtr;
 word					numScraps, i;
 ScrapBookIndexEntry		*entryPtr, *movePtr;
 ScrapBookIndexEntry		entry;


	/* check if any scraps */
	if (!GetNumScraps) return;

	/* copy current scrap to system clipboard item, if needed  */
	if (saveToClip) @send process::MSG_META_CLIPBOARD_COPY();

	/* delete current scrap from scrapbook */
	/* grab the map info */
	vmbh = VMGetMapBlock(g_currentScrapFile);
	headerPtr = VMLock(g_currentScrapFile, vmbh, &mh);
	numScraps = headerPtr->SBIH_numScraps;
	entryPtr = headerPtr + 1;
	movePtr = entryPtr + g_currentScrap;
	delVMBlock = movePtr->SBIE_vmBlock;

	/* remove transfer item from map block */
	if (g_currentScrap != numScraps - 1)  {
		/* we gotta move out later entries down to fill in for
			the removed entry */
		for (i = g_currentScrap + 1; i < numScraps; i++) {
			movePtr = entryPtr + i;
			entry = *movePtr;
			movePtr--;
			movePtr->SBIE_vmBlock = entry.SBIE_vmBlock;
			movePtr->SBIE_trans = entry.SBIE_trans;
			movePtr->SBIE_wipe = entry.SBIE_wipe;
			movePtr->SBIE_fadeSpeed = entry.SBIE_fadeSpeed;
			movePtr->SBIE_delayTime = entry.SBIE_delayTime;
			}
		}
	else {
		/* we're deleting the last scrap, reset the selection */
      g_currentScrap--;
		}

	/* remove space taken by deleted scrap */
	numScraps--;
	MemReAlloc(mh, (numScraps * sizeof(ScrapBookIndexEntry)
								 + sizeof(ScrapBookIndexHeader)), 0);
	/* shouldn't have any probs making it smaller */

	/* update the map */
	headerPtr->SBIH_numScraps--;
	VMDirty(mh);
	VMUnlock(mh);

	/* now that its unhooked, free transfer item */
	FreeTransferItem(delVMBlock);

	/* show the new current scrap */
	if(numScraps) {
		ShowCurrentScrap();
		ResetScrapNameList();
		}
	else {
		ClearScrapView();
		@send ScrapName::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send DeleteTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CutTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send CopyTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send PrevTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send NextTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send StartShowTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		@send GoToTool::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
		}

}

/***********************************************************************
 *
 * FUNCTION:	StopTransition  (void)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
Boolean StopTransition (void)
{
 Boolean		aborted = FALSE;


	/* Is the procedural thread still running? */
	if (ThreadPTimedSem(g_transThreadIsRunning, 1) == SE_TIMEOUT) {
		/*
		 * Yes, a procedural thread is running!
		 * Tell the new thread it's time to go!
		 */
		ThreadPSem(g_transThreadShouldExit);

		/* Wait for the thread to say it's done! */
		ThreadPSem(g_transThreadIsRunning);
		/*
		 * When we get ThreadExited, then the thread is done:
		 * release the semaphores
		 */
		ThreadVSem(g_transThreadShouldExit);
		aborted = TRUE;
		}

	/* Release the ThreadIsRunning semaphore that we grabbed */
	ThreadVSem(g_transThreadIsRunning);

   return (aborted);

}

/***********************************************************************
 *
 * FUNCTION:	NotifyDBox  (char* string1, optr notifyMsg)
 *
 * CALLED BY:
 *
 *
 * STRATEGY:    Puts up selected notification box
 *
 *
 ***********************************************************************/
void NotifyDBox (char* string1, optr notifyMsg)
{

	 /* put up a notification box */
	 MemLock (OptrToHandle(notifyMsg));
	 UserStandardDialog(0, 0, 0, string1,
			  LMemDeref(notifyMsg),
			  ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
			  (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
	 MemUnlock (OptrToHandle(notifyMsg));

}


