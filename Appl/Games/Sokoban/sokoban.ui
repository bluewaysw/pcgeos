/*
 * Project:	PC/GEOS
 * Module:	Sokoban
 * File:	sokoban.ui
 *
 * Author:	Steve Yegge
 *
 *	This file contains the user Interface description for this
 * application.
 *
 * RCS STAMP:
 *
 *	$Id: sokoban.ui,v 1.1 97/04/04 15:13:02 newdeal Exp $
 *
 */

/*----------------------------------------------------------------------------
		Product constants
-----------------------------------------------------------------------------*/

#define	_JEDI	0


#define	LEVEL_EDITOR		-1
#define	SET_BACKGROUND_COLOR	-1
#define	EXTERNAL_LEVELS		-1
#define	HIGH_SCORES		-1
#define	PLAY_SOUNDS		-1
#define	DOCUMENT_CONTROL	-1
#define	COLOR_MONIKERS		-1


/*----------------------------------------------------------------------------
		Include files
-----------------------------------------------------------------------------*/

#include "generic.uih"

#if HIGH_SCORES
#include "game.uih"
#endif

#if SET_BACKGROUND_COLOR
#include "Objects/colorC.uih"
#endif

#include "screens.ui"

#if LEVEL_EDITOR
#include "sokobanStrings.ui"
#include "sokobanEditor.ui"
#endif

/*#include "Art/mkrSokoban.ui"
*/
#include "Art/mksok.ui"
#include "Art/mkrSokobanDoc.ui"

/*-----------------------------------------------------------------------------
			MapClass
-----------------------------------------------------------------------------*/

class	MapContent = VisContent {
}

class	MapView = GenView {
	default viewAttributes = default +sendAllKbdChars;
	default horizAttributes = default +noLargerThanContent, +scrollable;
	default vertAttributes = default +noLargerThanContent, +scrollable;
}

class	SokobanApplication = GenApplication {
}

#if HIGH_SCORES
class	SokobanHighScore = HighScore {
}
#endif

/*----------------------------------------------------------------------------
			  Application Object
-----------------------------------------------------------------------------*/

start	AppResource;

SokobanApp = SokobanApplication vardataReloc {
	/* The geoManager uses this token information to store this
	 * application's icon in a database. */

					/* four letters used as index to
					 * refer to this application in the
					 * token database. */

					/* manufacturer ID number. Also used
					 * for accessing database, to ensure
					 * uniqueness. */

	children = SokobanPrimary;	/* The GenApplication object only
					 * has one child: the main application
					 * window. */

	/* Windows list */

	gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS) = 
		SokobanPrimary;

	/* App Startup list */

#if DOCUMENT_CONTROL
	gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) =
		SokobanDocumentControl;
#endif

	/* 
	 *  Active list - if you want to add more objects,
	 *  have fun :-)  Actually, having one object that
	 *  could never be conditionally compiled out would
	 *  simplify things somewhat.
	 */

#if LEVEL_EDITOR || DOCUMENT_CONTROL || HIGH_SCORES
	gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) =
#if LEVEL_EDITOR
		EditorContent
#endif

#if HIGH_SCORES
#if LEVEL_EDITOR
		,
#endif
		SokobanHighScoreControl
#endif /* HIGH_SCORES */

#if DOCUMENT_CONTROL

#if HIGH_SCORES || LEVEL_EDITOR
		,
#endif
		SokobanDocumentControl
#endif	/* DOCUMENT_CONTROL */
		;
#endif	/* LEVEL_EDITOR || DOCUMENT_CONTROL || HIGH_SCORES */

	/* Self-load-options list */

#if DOCUMENT_CONTROL
	gcnList(MANUFACTURER_ID_GEOWORKS, GAGCNLT_SELF_LOAD_OPTIONS) =
		SokobanDocumentControl;
#endif

	moniker = list {
/*#if COLOR_MONIKERS
		SokobanLCMoniker,
		SokobanSCMoniker,
		SokobanYCMoniker,
#endif
		SokobanLMMoniker,
		SokobanSMMoniker,
		SokobanSCGAMoniker,
		SokobanYMMoniker,
		SokobanTMMoniker,
		SokobanTCGAMoniker,
*/
		SokobanTextMoniker,
		SokAppMoniker,
		SokTinyMoniker
	}
	hints = {
	  /*	ATTR_GEN_APPLICATION_SAVE_OPTIONS_TRIGGER {
			UN_OPTR SaveOptionsTrigger
		}, */
		ATTR_GEN_HELP_FILE { char "sokoban", 0 }
	}
}

visMoniker SokobanTextMoniker = "Sokoban";

end	AppResource;

start AppSCMonikerResource, notDetachable;

visMoniker SokobanDatafileMonikerList = list {
		SokobanDocLCMoniker,
		SokobanDocLMMoniker,
		SokobanDocSCMoniker,
		SokobanDocSMMoniker,
		SokobanDocYCMoniker,
		SokobanDocYMMoniker,
		SokobanDocSCGAMoniker,
		SokobanDocTMMoniker,
		SokobanDocTCGAMoniker,
		SokTinyMoniker   /* use the app's tiny icon for the docs too -jfh */
}

end AppSCMonikerResource;



/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
/* Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed. */

start	Interface;		/* this resource is for misc UI objects */

SokobanPrimary = GenPrimary {
	children =	FileMenu,
			OptionsMenu,
			TheView,
			GenValuesGroup,
#if HIGH_SCORES
			EnterNameDialog,
			CongratsDialog,
#endif
#if LEVEL_EDITOR
			LevelMenu,
			EditorDialog,
#endif
			WonGameDialog;
	hints = {
		  HINT_SIZE_WINDOW_AS_DESIRED,
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		HINT_FULL_JUSTIFY_CHILDREN_VERTICALLY,
		ATTR_GEN_HELP_CONTEXT {
			char	"TOC", 0
		},
		HINT_CENTER_WINDOW
	}
}

/*----------------------------------------------------------------------------
			File Menu
-----------------------------------------------------------------------------*/

FileMenu = GenInteraction {
	moniker = 'G', "Game";
	visibility = popup;
	children = 
#if DOCUMENT_CONTROL
SokobanDocumentControl, 
#endif
		   PositionGroup,
		   UndoGroup,
#if HIGH_SCORES
		   SokobanHighScoreControl,
#endif
#if EXTERNAL_LEVELS
		   ExternalLevelGroup,
#endif
		   ReplayLevelDialog;
	hints = {
		ATTR_GEN_INTERACTION_GROUP_TYPE {
			 GenInteractionGroupType GIGT_FILE_MENU
		}
	}
}

#if DOCUMENT_CONTROL
SokobanDocumentControl = GenDocumentControl {
	documentTokenChars = "'S', 'O', 'K', 'd'";
	noNameText = "No Current Game";
	features = default -readOnlySupportsSaveAsRevert, -supportsTemplates,
				    -supportsUserSettableEmptyDocument,
				    -supportsUserMakingSharedDocuments;
	appDC	= MyDocumentGroup;
	dialogNewText = "Start a new game.";
	dialogOpenText = "Play a saved game.";
	hints = {
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	not (mask GDCF_NEW or \
				    mask GDCF_SAVE or \
				    mask GDCF_SAVE_AS or \
				    mask GDCF_OPEN_CLOSE)

		},
	}
}

end Interface;

start DocUI;

MyDocumentGroup = GenDocumentGroup {
    /*	defaultName = "Sokoban";  */
	defaultName = "unsaved game";
	output = process;
	uiDC = SokobanDocumentControl;
	attributes = default -applicationThread, -supportsAutoSave;
	protocolMajor = SOKOBAN_DOCUMENT_PROTO_MAJOR;
	protocolMinor = SOKOBAN_DOCUMENT_PROTO_MINOR;
}

end DocUI;

start	Interface;

#endif	/* DOCUMENT_CONTROL */

OptionsMenu = GenInteraction {
	visibility = popup;
	moniker = 'O', "Options";
	children = ViewControl,
#if PLAY_SOUNDS
		   SoundOptions,
#endif
#if SET_BACKGROUND_COLOR
		   BackgroundColorGroup,
#endif
		   SaveOptionsTrigger;
	hints = { ATTR_GEN_INTERACTION_GROUP_TYPE {
			GenInteractionGroupType GIGT_OPTIONS_MENU
		}
	}
}

SaveOptionsTrigger = GenTrigger {
	moniker = 'O', "Save Options";
	action = MSG_META_SAVE_OPTIONS, SokobanApp;
}

/*-----------------------------------------------------------------------------
			Sound options
-----------------------------------------------------------------------------*/

#if PLAY_SOUNDS
SoundOptions = GenInteraction {
	visibility = popup;
	moniker = 'S', "Sound";
	children = SoundItemGroup;
	hints = {
		ATTR_GEN_INIT_FILE_PROPAGATE_TO_CHILDREN,
	}
}

SoundItemGroup = GenItemGroup {	
	behaviorType = exclusive;
	numSelections = 1;
	selection = SSO_USE_DEFAULT;
	children = SoundOnEntry, SoundOffEntry, SoundDefaultEntry;
	applyMsg = MSG_SOKOBAN_SET_SOUND;
	destination = process;
	hints = {
		ATTR_GEN_INIT_FILE_KEY {
			char	"sound",0
		}
	}
}

SoundOnEntry = GenItem {
	moniker = 'S', "Sound On";
	identifier = SSO_SOUND_ON;
}

SoundOffEntry = GenItem {
	moniker = 'O', "Sound Off";
	identifier = SSO_SOUND_OFF;
}

SoundDefaultEntry = GenItem {
	moniker = 'U', "Use System Default";
	identifier = SSO_USE_DEFAULT;
}

#endif	/* PLAY_SOUNDS */

/*-----------------------------------------------------------------------------
			Background options
-----------------------------------------------------------------------------*/

#if SET_BACKGROUND_COLOR
BackgroundColorGroup = GenInteraction {
	type = properties;
	visibility = dialog;
	moniker = 'B', "Background Color";
	children = BackgroundColorSelector;
}

BackgroundColorSelector = GenItemGroup {
	behaviorType = exclusive;
	numSelections = 1;
	selection = C_WHITE;
	applyMsg = MSG_MAP_SET_BACK_COLOR;
	destination = TheMap;
	children = BlackItem,
		   DarkBlueItem,
		   DarkGreenItem,
		   DarkCyanItem,
		   DarkRedItem,
		   DarkVioletItem,
		   BrownItem, 
		   LightGrayItem,
		   DarkGrayItem,
		   LightBlueItem,
		   LightGreenItem,
		   LightCyanItem,
		   LightRedItem,
		   LightVioletItem,
		   YellowItem, 
		   WhiteItem;
	hints = {
		HINT_TOOLBOX,
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
	}
}

#define COLOR_WIDTH 14
#define COLOR_HEIGHT 14

#define COLOR_ENTRY(name, color) \
name = GenItem ignoreDirty { \
	moniker = { \
	    cachedSize = COLOR_WIDTH, COLOR_HEIGHT; \
	    gstring { \
		GSBeginString | \
		GSSetLineWidth <0,0> | \
		GSSetAreaColorIndex	color | \
		GSSetAreaColorMap CMT_DITHER | \
		GSFillRect	0, 0, <COLOR_WIDTH>, <COLOR_HEIGHT> | \
		GSEndString \
	    } \
	} \
	identifier = #color; \
}

COLOR_ENTRY(BlackItem, C_BLACK)
COLOR_ENTRY(DarkBlueItem, C_BLUE)
COLOR_ENTRY(DarkGreenItem, C_GREEN)
COLOR_ENTRY(DarkCyanItem, C_CYAN)
COLOR_ENTRY(DarkRedItem, C_RED)
COLOR_ENTRY(DarkVioletItem, C_VIOLET)
COLOR_ENTRY(BrownItem, C_BROWN)
COLOR_ENTRY(LightGrayItem, C_LIGHT_GRAY)
COLOR_ENTRY(DarkGrayItem, C_DARK_GRAY)
COLOR_ENTRY(LightBlueItem, C_LIGHT_BLUE)
COLOR_ENTRY(LightGreenItem, C_LIGHT_GREEN)
COLOR_ENTRY(LightCyanItem, C_LIGHT_CYAN)
COLOR_ENTRY(LightRedItem, C_LIGHT_RED)
COLOR_ENTRY(LightVioletItem, C_LIGHT_VIOLET)
COLOR_ENTRY(YellowItem, C_YELLOW)
COLOR_ENTRY(WhiteItem, C_WHITE)

#endif	/* SET_BACKGROUND_COLOR */

end	Interface;

/*-----------------------------------------------------------------------------
			More file menu stuff
-----------------------------------------------------------------------------*/

start Interface;

PositionGroup = GenInteraction {
	type = organizational;
	children = SavePositionTrigger,
		   RestorePositionTrigger;
}

UndoGroup = GenInteraction {
	type = organizational;
	children = UndoLevelTrigger,
		   UndoMoveTrigger;
}

/*-----------------------------------------------------------------------------
			PositionGroup
-----------------------------------------------------------------------------*/
SavePositionTrigger = GenTrigger {
	moniker = 'P', "Save Position";
	action = MSG_MAP_SAVE_POSITION, TheMap;
}

RestorePositionTrigger = GenTrigger {
	genStates = default - enabled;
	moniker = 'R', "Restore Position";
	action = MSG_MAP_RESTORE_POSITION, TheMap;
}

/*-----------------------------------------------------------------------------
			UndoGroup
-----------------------------------------------------------------------------*/
UndoLevelTrigger = GenTrigger {
	moniker = 'U', "Undo Level";
	action = MSG_MAP_UNDO_LEVEL, TheMap;
}

UndoMoveTrigger = GenTrigger {
	genStates = default - enabled;
	moniker = 'd', "Undo Push";
	action = MSG_MAP_UNDO_MOVE, TheMap;
}

/*-----------------------------------------------------------------------------
			TheView
-----------------------------------------------------------------------------*/
ViewControl = GenViewControl {
	maxZoom = 400;
	viewControlAttrs = default -applyToAll;
	visibility = subGroup;
	hints = {
		/*HINT_SAME_CATEGORY_AS_PARENT,*/
		ATTR_GEN_CONTROL_PROHIBIT_UI {
			word	mask GVCF_ZOOM_IN or mask GVCF_ZOOM_OUT or mask GVCF_APPLY_TO_ALL \
				or mask GVCF_MAIN_100 or mask GVCF_MAIN_SCALE_TO_FIT 	\
				or mask GVCF_ADJUST_ASPECT_RATIO or mask GVCF_SHOW_HORIZONTAL \
				or mask GVCF_SHOW_VERTICAL or mask GVCF_SCALE_TO_FIT 
		}
	}
}


TheView = MapView {
	output = TheMap;
	horizAttributes = default +noLargerThanContent, +scrollable;
	vertAttributes = default +noLargerThanContent, +scrollable;
	genAttributes = default +targetable;
	viewAttributes = default  +controlled;

	hints = {
		HINT_DEFAULT_TARGET,
		HINT_VIEW_REMOVE_SCROLLERS_WHEN_NOT_SCROLLABLE,
		ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT,
		HINT_INITIAL_SIZE {
			SpecWidth <SST_PIXELS, MAX_COLUMNS*VGA_BITMAP_WIDTH>
			SpecHeight<SST_PIXELS, MAX_ROWS*VGA_BITMAP_HEIGHT>
		},
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_PIXELS, MAX_COLUMNS*VGA_BITMAP_WIDTH>
			SpecHeight<SST_PIXELS, MAX_ROWS*VGA_BITMAP_HEIGHT>
		},
	}
}

end Interface;

start	MapResource;

TheMap = MapContent {
	view = TheView;
	visCompGeoAttrs = customManageChildren;
	left = 0;
	top = 0;
	right = 320;
	bottom = 256;
}

end	MapResource;


start Interface;

/*-----------------------------------------------------------------------------
			GenValuesGroup
-----------------------------------------------------------------------------*/

GenValuesGroup = GenInteraction {
	type = organizational;
	children = 	LevelValue,
		   	BagsValue,
			SavedValue,
			MovesValue,
			PushesValue;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_INCLUDE_ENDS_IN_CHILD_SPACING,
		HINT_ALLOW_CHILDREN_TO_WRAP,
	}
}

LevelValue = GenValue {
	moniker = "Level:";
	genAttributes = readOnly;
	maximum = MAX_LEVELS;
}

BagsValue = GenValue {
	moniker = "Bags:";
	genAttributes = readOnly;
}

SavedValue = GenValue {
	moniker = "Saved:";
	genAttributes = readOnly;
}

MovesValue = GenValue {
	moniker = "Moves:";
	genAttributes = readOnly;
}

PushesValue = GenValue {
	moniker = "Pushes:";
	genAttributes = readOnly;
}

/*-----------------------------------------------------------------------------
			Enter-name dialog
-----------------------------------------------------------------------------*/

#if HIGH_SCORES

EnterNameDialog = GenInteraction {
	type = command;
	visibility = dialog;
       	attributes = default +modal, +initiatedViaUserDoDialog;
	children = EnterNameGlyph,
		   EnterNameText,
		   EnterNameOKTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_INTERACTION_SINGLE_USAGE,
	}
}

EnterNameGlyph = GenText {
	genAttributes = readOnly;
	text = "Please enter your name for the new game.  This is the name that will be used on the high score list, and cannot be changed later.";
}

EnterNameText = GenText {
	maxLength = MAX_USER_NAME_LENGTH;
	textDisplayAttributes = singleLineText, useTabForNavigation;
	hints = {
		HINT_DEFAULT_FOCUS,
	}
}

EnterNameOKTrigger = GenTrigger {
	moniker = "OK";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_OK}
	}
}

CongratsDialog	= GenInteraction {
       	attributes = default +modal, +initiatedViaUserDoDialog;
	visibility = dialog;
	children = CongratsTextGroup,
		   CongratsOKTrigger;
}

CongratsTextGroup = GenInteraction {
	type = organizational;
	children = CongratsText1, CongratsText2;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
	}
}

CongratsText1 = GenGlyph {
	moniker = "Congratulations!";
}

CongratsText2 = GenGlyph {
	moniker = "You made the high score list.";
}

CongratsOKTrigger = GenTrigger {
	moniker = "VMO_CANCEL", "OK";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_OK}
	}
}

#endif	/* HIGH_SCORES */


WonGameDialog = GenInteraction {
       	attributes = default +modal, +initiatedViaUserDoDialog;
	visibility = dialog;
	children = WonGameTextGroup,
		   WonGameOKTrigger;
}

WonGameTextGroup = GenInteraction {
	type = organizational;
	children = WonGameText1, WonGameText2;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
	}
}

WonGameText1 = GenGlyph {
	moniker = "Congratulations!";
}

WonGameText2 = GenGlyph {
	moniker = "You have completed the last level.";
}

WonGameOKTrigger = GenTrigger {
	moniker = "VMO_CANCEL", "OK";
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_DEFAULT_DEFAULT_ACTION,
		HINT_SEEK_REPLY_BAR,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_OK}
	}
}

/*-----------------------------------------------------------------------------
			high-score controller
-----------------------------------------------------------------------------*/

#if HIGH_SCORES

SokobanHighScoreControl = SokobanHighScore vardataReloc {
	fileName = "Sokoban High Scores";
	creator = {
		<'SOKO'>, MANUFACTURER_ID_GEOWORKS;
	}
	highScoreTitle = "Sokoban Hall of Fame";
	attrs = default +oneScorePerName;
	hints = {
		ATTR_HIGH_SCORE_EXTRA_TITLE_MONIKER {
			lptr	ExtraDataString
		},
		ATTR_GEN_CONTROL_REQUIRE_UI {
			word	mask HSF_EXTRA_DATA
		}/*,
		ATTR_GEN_CONTROL_DO_NOT_USE_LIBRARY_NAME_FOR_HELP,
		ATTR_GEN_HELP_CONTEXT {
			char "high score", 0
		} */
	}
}

chunk	ExtraDataString = {Level/Moves/Pushes}

#endif	/* HIGH_SCORES */

/*-----------------------------------------------------------------------------
			external level group
-----------------------------------------------------------------------------*/

#if EXTERNAL_LEVELS

ExternalLevelGroup = GenInteraction {
	children = ExternalLevelDialog, InternalLevelTrigger;
}

InternalLevelTrigger = GenTrigger {
	moniker = 'I',"Return to Internal Level";
	action = MSG_SOKOBAN_PLAY_INTERNAL_LEVEL, process;
}

ExternalLevelDialog = GenInteraction {
	moniker = 'P',"Play External Level";
	children = ExternalLevelValue, ExternalLevelOKTrigger;
	visibility = dialog;
	type = command;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
	}	
}

ExternalLevelValue = GenValue {
	moniker = "Level to play:";
	minimum = 1;
	maximum = 999;
	value = 1;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_DEFAULT_FOCUS,
	}
}

ExternalLevelOKTrigger = GenTrigger {
	genAttributes = default +signalInteractionComplete;
	action = MSG_SOKOBAN_PLAY_EXTERNAL_LEVEL, process;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

#endif	/* EXTERNAL_LEVELS */

ReplayLevelDialog = GenInteraction {
	visibility = dialog;
	type = command;
	moniker = 'L', "Replay Level";
	children = ReplayLevelValue,
		   ReplayLevelOKTrigger;
	hints = {
		HINT_INTERACTION_SINGLE_USAGE,
	}
}

ReplayLevelValue = GenValue {
	moniker = "Level to Replay:";
	minimum = 1;
	maximum = MAX_LEVELS;
	value = 1;
	applyMsg = MSG_SOKOBAN_REPLAY_LEVEL;
	destination = process;
	hints = {
		HINT_PLACE_MONIKER_TO_LEFT,
		HINT_DEFAULT_FOCUS,
	}
}

ReplayLevelOKTrigger = GenTrigger {
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_APPLY}
	}
}

end Interface;


