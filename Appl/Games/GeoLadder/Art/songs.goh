/*
 ***************************************************************************
 * Copyright 2024 Andreas Bollhalder
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************
 */


/*
 ***************************************************************************
 * Copyright (c) 2010-2024 by YoYu-Productions
 *
 * PROJECT:     GeoLadder
 * MODULE:      GOC definition file
 * FILE:        Art\songs.goh
 *
 * AUTHOR:      Andreas Bollhalder
 ***************************************************************************
 */


/*
 ***************************************************************************
 *                  DEFINITIONS
 ***************************************************************************
 */

#define IP_LEAD_0 IP_ELECTRIC_PIANO_1
#define LN_LEAD_0 DYNAMIC_FFF
#define IP_LEAD_1 IP_ELECTRIC_PIANO_1
#define LN_LEAD_1 DYNAMIC_FF

#define IP_BASS_2 IP_ACOUSTIC_BASS
#define LN_BASS_2 DYNAMIC_FF

#define IP_DRUM_3 IP_BASS_DRUM_1
#define FR_DRUM_3 FR_BASS_DRUM_1
#define LN_DRUM_3 DYNAMIC_FFF

#define IP_SNARE_3 IP_SPLASH_CYMBAL
#define FR_SNARE_3 FR_SPLASH_CYMBAL
#define LN_SNARE_3 DYNAMIC_FFF

#define IP_HHAT_3 IP_OPEN_HI_HAT
#define FR_HHAT_3 FR_OPEN_HI_HAT
#define LN_HHAT_3 DYNAMIC_FFF

#define IP_STICK_3 IP_SIDE_STICK
#define FR_STICK_3 FR_SIDE_STICK
#define LN_STICK_3 DYNAMIC_FFF


/*
 ***************************************************************************
 *                  RESOURCE Menu Song
 ***************************************************************************
 */

@start SONG_MENU, data;

@chunkArray optr MenuSong =
{
  @MenuSongP1
};


@chunk word MenuSongP1[] = {
// MENU - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 1.15,

// MENU - P 1 - T 1 - BRIDGE
  SSE_VOICE_ON, 0, LOW_E / 2, LN_LEAD_0,  // E3: LOW_E / 2
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,

// MENU - P 5 - T 1+ - BRIDGE
  SSE_VOICE_ON, 1, LOW_G / 2, LN_LEAD_1,  // G3: LOW_G / 2
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 1,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSDTT_TEMPO, THIRTYSECOND,

// MENU - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};

@end SONG_MENU;


/*
 ***************************************************************************
 *                  RESOURCE High Song
 ***************************************************************************
 */

@start SONG_HIGH, data;

@chunkArray optr HighSong =
{
  @HighSongP1
};


@chunk word HighSongP1[] = {
// HIGH - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_1, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 0.75,


/* ------------------------- HIGH - OFFBEAT -------------------------- */

// HIGH - P 1 - T 1 - OFFBEAT
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSDTT_TEMPO, HALF - THIRTYSECOND,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 2, LOW_A_SH / 2, LN_BASS_2,  // A#1: LOW_A_SH / 4
  SSDTT_TEMPO, HALF - THIRTYSECOND,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,


/* -------------------------- HIGH - INTRO --------------------------- */

// HIGH - P 2 - T 1 - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 1+ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 1++ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 1+++ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 2 - INTRO
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 2+ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 2++ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, MIDDLE_C_SH, LN_LEAD_1,  // C#5: MIDDLE_C_SH
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, MIDDLE_D, LN_LEAD_1,  // D5: MIDDLE_D
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 2+++ - INTRO
  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, MIDDLE_C_SH, LN_LEAD_1,  // C#5: MIDDLE_C_SH
  SSE_VOICE_ON, 2, LOW_A_SH / 2, LN_BASS_2,  // A#2: LOW_A_SH / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_F_SH / 2, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_B, LN_LEAD_1,  // B4: LOW_B
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// HIGH - P 2 - T 3 - INTRO
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // B2: LOW_B / 4
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, HALF - THIRTYSECOND,
  SSE_VOICE_OFF, 2,

// HIGH - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};

@end SONG_HIGH;


/*
 ***************************************************************************
 *                  RESOURCE Done Song
 ***************************************************************************
 */

@start SONG_DONE, data;

@chunkArray optr DoneSong =
{
  @DoneSongP1,
  @DoneSongP2_1, @DoneSongP2_2, @DoneSongP2_2,
  @DoneSongP2_1, @DoneSongP2_2, @DoneSongP2_2,
  @DoneSongP2_1, @DoneSongP2_3
};


/* ------------------------- DONE - OFFBEAT -------------------------- */

@chunk word DoneSongP1[] = {
// DONE - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_1, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 1.15,

// DONE - P 1 - T 1 - OFFBEAT
  SSE_CHANGE, 3, IP_STICK_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_STICK_3, LN_STICK_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,

// DONE - P 1 - T 1+ - OFFBEAT
  SSE_VOICE_ON, 3, FR_STICK_3, LN_STICK_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,

// DONE - P 1 - T 1++ - OFFBEAT
  SSE_VOICE_ON, 3, FR_STICK_3, LN_STICK_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,

// DONE - P 1 - T 1+++ - OFFBEAT
  SSE_VOICE_ON, 3, FR_STICK_3, LN_STICK_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - THIRTYSECOND,

// DONE - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};


/* -------------------------- DONE - VERSE --------------------------- */

@chunk word DoneSongP2_1[] = {
// DONE - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_1, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 1.15,

// DONE - P 2-1 - T 1,4,7 - VERSE
  SSE_VOICE_ON, 0, LOW_E, LN_LEAD_0,  // E3: LOW_E / 2
  SSE_VOICE_ON, 1, LOW_G, LN_LEAD_1,  // G3: LOW_G / 2
  SSE_VOICE_ON, 2, LOW_E, LN_BASS_2,  // E2: LOW_E / 4
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-1 - T 1,4,7+ - VERSE
  SSE_VOICE_ON, 0, LOW_E, LN_LEAD_0,  // E3: LOW_E / 2
  SSE_VOICE_ON, 1, LOW_G, LN_LEAD_1,  // G3: LOW_G / 2
  SSE_VOICE_ON, 2, LOW_E, LN_BASS_2,  // E2: LOW_E / 4
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_A / 2, LN_LEAD_0,  // A2: LOW_A / 4
  SSE_VOICE_ON, 2, LOW_E / 2, LN_BASS_2,  // E2: LOW_E / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-1 - T 1,4,7++ - VERSE
  SSE_VOICE_ON, 0, LOW_F_SH, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_G, LN_LEAD_1,  // G3: LOW_G / 2
  SSE_VOICE_ON, 2, LOW_D, LN_BASS_2,  // D3: LOW_D / 2
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, QUARTER - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-1 - T 1,4,7+++ - VERSE
  SSE_VOICE_ON, 0, LOW_F_SH, LN_LEAD_0,  // F#3: LOW_F_SH / 2
  SSE_VOICE_ON, 1, LOW_G, LN_LEAD_1,  // G3: LOW_G / 2
  SSE_VOICE_ON, 2, LOW_D, LN_BASS_2,  // D3: LOW_D / 2
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_A / 2, LN_LEAD_0,  // A2: LOW_A / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};


@chunk word DoneSongP2_2[] = {
// DONE - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_1, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 1.15,

// DONE - P 2-2 - T 2,3,5,6 - VERSE
  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A3: LOW_A / 2
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A3: LOW_A / 2
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-2 - T 2,3,5,6+ - VERSE
  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A3: LOW_A / 2
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A3: LOW_A / 2
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-2 - T 2,3,5,6++ - VERSE
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,

  SSE_VOICE_ON, 0, LOW_B, LN_LEAD_0,  // B3: LOW_B / 2
  SSE_VOICE_ON, 1, LOW_D, LN_LEAD_1,  // D4: LOW_D
  SSE_VOICE_ON, 2, LOW_B / 2, LN_BASS_2,  // A2: LOW_B / 4
  SSDTT_TEMPO, EIGHTH - THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

// DONE - P 2-2 - T 2,3,5,6+++ - VERSE
  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A3: LOW_A / 2
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSE_CHANGE, 3, IP_HHAT_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_HHAT_3, LN_HHAT_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, EIGHTH - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,
  SSDTT_TEMPO, THIRTYSECOND,

  SSDTT_TEMPO, EIGHTH,

// DONE - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};


@chunk word DoneSongP2_3[] = {
// DONE - INIT
  SSE_CHANGE, 0, IP_LEAD_0, IT_STANDARD_TABLE,
  SSE_CHANGE, 1, IP_LEAD_1, IT_STANDARD_TABLE,
  SSE_CHANGE, 2, IP_BASS_2, IT_STANDARD_TABLE,
//  CHANNEL 3  : IP_ACOUSTIC_BASS_DRUM, IP_SPLASH_CYMBAL or IP_HI_TIMBALE
  SSE_GENERAL, GE_SET_TEMPO, EIGHTH * 1.15,

// DONE - P 2-3  - T 8 - VERSE
  SSE_VOICE_ON, 0, LOW_A, LN_LEAD_0,  // A4: LOW_A
  SSE_VOICE_ON, 1, LOW_C, LN_LEAD_1,  // C4: LOW_C
  SSE_VOICE_ON, 2, LOW_A / 2, LN_BASS_2,  // A2: LOW_A / 4
  SSE_CHANGE, 3, IP_DRUM_3, IT_STANDARD_TABLE,
  SSE_VOICE_ON, 3, FR_DRUM_3, LN_DRUM_3,
  SSDTT_TEMPO, THIRTYSECOND,
  SSE_VOICE_OFF, 3,
  SSDTT_TEMPO, WHOLE - 2 * THIRTYSECOND,
  SSE_VOICE_OFF, 0,
  SSE_VOICE_OFF, 1,
  SSE_VOICE_OFF, 2,

// DONE - END
  SSE_GENERAL, GE_SEND_NOTIFICATION, 0, 0, 0,
  SSE_GENERAL, GE_END_OF_SONG
};

@end SONG_DONE;

