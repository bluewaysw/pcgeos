/*
 ***************************************************************************
 * Copyright 2019 Andreas Bollhalder
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************
 */


/*
 ***************************************************************************
 * Copyright (c) 2010-2024 by YoYu-Productions
 *
 * PROJECT:     GeoLadder
 * MODULE:      GOC definition file
 * FILE:        ladder.goh
 *
 * AUTHOR:      Andreas Bollhalder
 ***************************************************************************
 */


/*
 ***************************************************************************
 *                  INCLUDE FILES
 ***************************************************************************
 */

@include <stdapp.goh>


/*
 ***************************************************************************
 *                  DEFINITIONS
 ***************************************************************************
 */

// Fixed boolean
#define L_FALSE             0  // False value used for functions
#define L_TRUE              1  // True value used for functions

// PC/GEOS system
#define GEOS_TICKS_P_SEC   60  // Ticks per second

// Application name
#define APP_NAME            "GeoLadder"  // Application name

// Execution states
// Used for generic handling after coming back from state
#define EXE_S_NONE          0  // Execution state none
#define EXE_S_MENU          1  // Execution state menu
#define EXE_S_HELP          2  // Execution state help
#define EXE_S_DEMO          3  // Execution state demo
#define EXE_S_PLAY          4  // Execution state play

// Font commands
// Used for changing font size
#define FNT_C_SET           0  // Font command set size
#define FNT_C_DEC           1  // Font command decrease size
#define FNT_C_INC           2  // Font command increase size
#define FNT_C_MAX           3  // Font command maximum size

// Font results
// Returned if no suitable font found
#define FNT_R_NONE        255  // Font result none

// Window states
// Used for keeping track of user interface
#define WIN_S_NORM          0  // Window state normal
#define WIN_S_MINI          1  // Window state minimized
#define WIN_S_MAXI          2  // Window state window state
#define WIN_S_FULL          3  // Window state fullscreen state

// Focus states
// Used for keeping track of user interface
#define FOC_S_GAIN          0  // Focus state gained
#define FOC_S_LOST          1  // Focus state lost

// Input states
// Used for keyboard input handling
#define INP_S_NONE          0  // Input state none
#define INP_S_MENU          1  // Input state menu
#define INP_S_HELP          2  // Input state instruction
#define INP_S_DEMO          3  // Input state demo
#define INP_S_PLAY          4  // Input state play
#define INP_S_EXEC          5  // Input state play execution
#define INP_S_HOLD          6  // Input state play hold
#define INP_S_DONE          7  // Input state done (the end)
#define INP_S_OVER          8  // Input state over
#define INP_S_HIGH          9  // Input state high score

// INI file entries
#define INI_CAT_APP         APP_NAME  // Category in the GEOS.INI
#define INI_KEY_FONT        "font"    // Key to save the font size
#define INI_KEY_DIFF        "diff"    // Key to save the difficulty level
#define INI_KEY_SOUND       "sound"   // Key to save the sound output

#define INI_CAT_UI          "ui"  // Category in the GEOS.INI
#define INI_KEY_PRODUCT     "productName"  // Key of the product name

// Screen
#define SCN_COLS           79  // Number of screen columns
#define SCN_ROWS           24  // Number of screen rows
#define SCN_MID_COL        39  // Number of middle screen column

// Delay
#define DLY_T_MENU        600  // Delay ticks for the menu auto tasks first start
#define DLY_T_MENU_MIN    151  // Delay ticks for the menu auto tasks minimum time
#define DLY_T_MENU_RND    113  // Delay ticks for the menu auto tasks random time
#define DLY_T_BORED       120  // Delay ticks for the menu bored message
#define DLY_T_READY_GO     90  // Delay ticks for the ready go message
#define DLY_T_EXIT         75  // Delay ticks for the exit message
#define DLY_T_LOAD        150  // Delay ticks for the level load message
#define DLY_T_SAVE         75  // Delay ticks for the high score save message
#define DLY_B_READY        15  // Base delay ticks for the get ready message (will combined with game delay)
#define DLY_B_HOOKA         8  // Base delay ticks for the Hooka message (will combined with game delay)
#define DLY_B_DIES          4  // Base delay ticks for the Lad dies (will combined with game delay)

// Count down
#define CNT_S_MENU         11  // Menu count down start value
                               // 0 = demo, 1 = clear, 2 = bored, 3,5,7,9 = clear, 4,6,8,10 = joke, 11 = wait
#define CNT_S_READY         7  // Ready count down start value
                               // 0 = done, 2,4,6 = clear, 1 = go, 3,5,7 = show

// Rank
#define RNK_NAME_LEN       20  // Length of rank name

#define RNKS                5  // Number of ranks
#define RNKS_P_TOP          SP_USER_DATA  // Top path of rank file
#define RNKS_P_SUB          "Game"        // Sub path of rank file
#define RNKS_F_NAME         "GeoLadder Scores"  // Name of rank file
#define RNKS_M_ID      0xAB8C  // Magic ID of the rank file

// Play sound states
#define CFG_SND_OFF         0  // Play sound state off
#define CFG_SND_NOISE       1  // Play sound state noise only
#define CFG_SND_BOTH        2  // Play sound state noise and music

// Game difficulties
#define CFG_DIFF_MIN        1  // Game difficulty minimum
#define CFG_DIFF_MAX        5  // Game difficulty maximum

// Point
#define PNT_GOLD           30  // Points for earning gold statue
#define PNT_TIME            1  // Points for remaining bonus time
#define PNT_DER             2  // Points for jumping over Der
#define PNT_LAD           100  // Points needed for new Lad

// Score
#define PNTS_MAX        65535  // Maximum score

// Text string bit masks
#define TSC_M            0xF0  // Command mask
#define TSL_M            0x0F  // Length mask
#define TSA_M            0x03  // Alignment mask
#define TSO_M            0x0C  // Orientation mask
#define TSP_M_HI         0x07  // Position high bits
#define TSP_M_LO         0xFF  // Position low bits

// Text string drawing types
#define TSD_T_TEXT       0xA0  // Draw text
#define TSD_T_CHAR       0xB0  // Draw character
#define TSD_T_CHNK       0xC0  // Draw text from chunk

// Text string attributes
#define TSD_A_LEFT       0x00  // Draw text alignment left
#define TSD_A_CENTER     0x01  // Draw text alignment center
#define TSD_A_RIGHT      0x02  // Draw text alignment right

// Text string position types
#define TSP_T_MOVE       0xD0  // Move cursor in current orientation
#define TSP_T_SET        0xE0  // Set cursor orientation and position

// Text string end of data marker
#define TSP_T_END        0xF0  // End of text string data

// Level
#define LVL_COLS     SCN_COLS  // Number of level columns
#define LVL_ROWS           20  // Number of level rows
#define LVL_M_SIZE   LVL_COLS * LVL_ROWS  // Memory size of level

// Level string bit masks
#define LSC_M            0xF0  // Command
#define LSL_M            0x0F  // Length
#define LSO_M            0x08  // Orientation
#define LSP_M_HI         0x07  // Position high bits
#define LSP_M_LO         0xFF  // Position low bits

// Level string drawing types
#define LSD_T_BASE       0x00  // Draw base floor
#define LSD_T_BASE2      0x10  // Draw disapearing base floor
#define LSD_T_LADDER     0x20  // Draw ladder
#define LSD_T_WALL       0x30  // Draw wall
#define LSD_T_EXIT       0x40  // Draw exit
#define LSD_T_EMIT       0x50  // Draw Der emitter
#define LSD_T_RECV       0x60  // Draw Der receiver
#define LSD_T_GOLD       0x70  // Draw gold statue
#define LSD_T_BALL       0x80  // Draw rubber ball
#define LSD_T_TRAP       0x90  // Draw fire trap
#define LSD_T_TEXT       0xA0  // Draw text
#define LSD_T_CHAR       0xB0  // Draw character

// Level string orientation types
#define LSO_T_H          0x00  // Orientation horizontal
#define LSO_T_V          0x08  // Orientation vertical

// Level string position types
#define LSP_T_MOVE       0xC0  // Move cursor in current orientation
#define LSP_T_SET        0xD0  // Set cursor orientation and position

// Level string position type combined with drawing a single character
#define LSP_T_SET_AND_DRAW  0xE0  // Set cursor orientation and position and draw character

// Level string end of data marker
#define LSP_T_END        0xF0  // End of level string data

// Level characters
#define LSD_C_BASE        '='  // Level character fixed floor
#define LSD_C_BASE2       '-'  // Level character disappearing floor
#define LSD_C_LADDER      'H'  // Level character ladder
#define LSD_C_WALL        '|'  // Level character wall
#define LSD_C_EXIT        '$'  // Level character exit (treasure, end of level)
#define LSD_C_EMIT        'V'  // Level character Der emitter
#define LSD_C_RECV        '*'  // Level character Der eater
#define LSD_C_GOLD        '&'  // Level character gold statue
#define LSD_C_BALL        '.'  // Level character rubber ball
#define LSD_C_TRAP        '^'  // Level character trap
#define LSD_C_SPACE       ' '  // Level character space

// Emitter
#define EMTS_MAX            3  // Maximum number of Emitters

// Actor
#define ACTS_MAX    (DERS_MAX + 2) * 2  // Maximum number of changes to draws (Ders, Lad and level elements)
#define ACTS_M_SIZE  ACTS_MAX * sizeof(GLActor)  // Memory size of actors

// Der
#define DER_C             'o'  // Der character
#define DERS_MAX            8  // Maximum number of Ders

// Der states
#define DER_S_ARMED         3  // Der state arm to leave an emitter
#define DER_S_READY         2  // Der state ready to leave an emitter
#define DER_S_LEAVE         1  // Der state leave an emitter
#define DER_S_MOVE          0  // Der state move
#define DER_S_RECYCLE      -1  // Der state recycle

// Lad
#define LAD_D_LIVES         5  // Lad default lives
#define LADS_MAX           99  // Maximum number of Lads

// Lad characters
#define LAD_C_START       'P'  // Lad character not moving
#define LAD_C_STAY        'g'  // Lad character not moving
#define LAD_C_RIGHT       'p'  // Lad character moving right
#define LAD_C_LEFT        'q'  // Lad character moving left
#define LAD_C_FALL        'b'  // Lad character falling down

// Position
#define POS_NONE       0xFFFF  // Position out of screen

// Direction
#define DIR_NONE            0      // Direction none
#define DIR_N       -LVL_COLS      // Direction north (up)
#define DIR_NE      -LVL_COLS + 1  // Direction north east (up right)
#define DIR_E               1      // Direction east (right)
#define DIR_SE       LVL_COLS + 1  // Direction south east (down right)
#define DIR_S        LVL_COLS      // Direction south (down)
#define DIR_SW       LVL_COLS - 1  // Direction south west (down left)
#define DIR_W              -1      // Direction west (left)
#define DIR_NW      -LVL_COLS - 1  // Direction north west (up left)


/*
 ***************************************************************************
 *                  TYPE DEFINITIONS
 ***************************************************************************
 */
 
 // Alignment of struct members is always 16-bit

typedef struct                 // Font data
{
  word type;                   //   2B+0 - Font type
  WWFixedAsDWord size;         //   4B+0 - Font size
  word width;                  //   2B+0 - Character width
  word height;                 //   2B+0 - Character height
} GLFont;                      //  10B+0 = 10 bytes used

typedef struct                 // Game data
{
  word lads;                   //   2B+0 - Remaining lads
  word round;                  //   2B+0 - Round
  word level;                  //   2B+0 - Level
  word score;                  //   2B+0 - Score
  word time;                   //   2B+0 - Remaining bonus time
  word ticks;                  //   2B+0 - Executed ticks
  word delay;                  //   2B+0 - Ticks per frame
} GLGame;                      //  20B+0 = 18 bytes used

typedef struct                 // Emitter data
{
  word num;                    //   2B+0 - Number of Emitters
  word pos[EMTS_MAX];          //   6B+0 - Positions of Emitters
} GLEmitter;                   //   8B+0 = 8 bytes used

typedef struct                 // Level data
{
  ChunkHandle name;            //   2B+0 - Name
  word time;                   //   2B+0 - Bonus time
  word spos;                   //   2B+0 - Lad start position
  GLEmitter emts;              //   8B+0 - Number of emitters
  word ders;                   //   2B+0 - Number of Ders
  ChunkHandle data;            //   2B+0 - Level data
} GLLevel;                     //  18B+0 = 18 bytes used

typedef struct                 // Rank entry
{
  word score;                  //   2B+0 - Score
  char name[RNK_NAME_LEN];     //  20B+0 - Name
} GLRankEntry;                 //  22B+0 = 22 bytes used

typedef struct                 // Ranks file
{
  word id;                     //   2B+0 - Identification
  GLRankEntry ranks[RNKS];     // 110B+0 - Ranks
  word lastScore;              //   2B+0 - Last score
} GLRankFile;                  // 114B+0 = 114 bytes used

typedef struct                 // Font data
{
  word points;                 //   2B+0 - Points
  optr compliment;             //   4B+0 - Font size
} GLRate;                      //   6B+0 = 6 bytes used

typedef struct                 // Der data
{
  word cpos;                   //   2B+0 - Current position
  word lpos;                   //   2B+0 - Last position
  sbyte dir;                   //   1B+0 - Current direction
  sbyte state;                 //   1B+0 - State, < -1: Undefined, -1: Recycle, 0: Move, 1: Leave, 2: Ready, 3: Armed, > 3: Wait to leave
} GLDer;                       //   6B+0 = 6 bytes used

typedef struct                 // Lad data
{
  word cpos;                   //   2B+0 - Current position
  word lpos;                   //   2B+0 - Last position
  sbyte cdir;                  //   1B+0 - Current direction
  sbyte ndir;                  //   1B+0 - Next direction from user input
  byte cjump;                  //   1B+0 - Jump value
  byte njump;                  //   1B+0 - Start a new jump
  char face;                   //   1B+1 - Current character (face)
  word die;                    //   2B+0 - Die counter
} GLLad;                       //  11B+1 = 12 bytes used

typedef struct                 // Actor data
{
  word pos;                    //   2B+0 - Coordinate
  char face;                   //   1B+1 - Character (face)
} GLActor;                     //   3B+1 = 4 bytes used

typedef struct                 // Lad demo move
{
  word tpos;                   //   2B+0 - Trigger position
  sbyte ndir;                  //   1B+0 - Next direction
  byte njump;                  //   1B+0 - Start a new jump
} GLMove;                      //   4B+0 = 4 bytes used

typedef struct                 // Demo data
{
  word round;                  //   2B+0 - Round
  word level;                  //   2B+0 - Level
  ChunkHandle moves;           //   2B+0 - Moves data
} GLDemo;                      //   6B+0 = 6 bytes used

// All global data which does not need to be saved into the state
typedef struct                 // No save state structure
{
  word startupError;           //   2B+0 - Startup error used in open and close application
  Rectangle screen;            //   4B+0 - Screen size
  GStateHandle gstateHandle;   //   2B+0 - GState handle
  word textColor;              //   2B+0 - Text foreground color
  word areaColor;              //   2B+0 - Text background color
  GLFont font;                 //  10B+0 - Font data
  word fontWinMin;             //   2B+0 - Minimum font index window mode
  word fontWinMax;             //   2B+0 - Maximum font index window mode
  word fontFull;               //   2B+0 - Font index fullscreen mode
  word fontSaved;              //   2B+0 - Saved font index of window mode
  TimerHandle timerHandle;     //   2B+0 - Timer handle
  word timerId;                //   2B+0 - Timer id
  word menuCount;              //   2B+0 - Menu counter
  word readyCount;             //   2B+0 - Get ready counter
  word readyTicks;             //   2B+0 - Get ready ticks
  char *levelBuffer;           //   4B+0 - Pointer to the level buffer
  word moveIndex;              //   2B+0 - Current demo move
  ChunkHandle moves;           //   2B+0 - Demo moves chunk handle
} GLNoState;                   //  84B+0 = 84 bytes used

// All global data which is saved to the INI file
typedef struct                 // INI state structure
{
  word fontCurrent;            //   2B+0 - Current font index
  word diff;                   //   2B+0 - Difficulty value
  word sound;                  //   2B+0 - Sound state
} GLIniState;                  //   6B+0 = 6 bytes used

// All global data which must be saved into the extra state
typedef struct                 // Save state structure
{
  word executionState;         //   2B+0 - Execution state
  word cancelExecution;        //   2B+0 - Request cancel of execution
  word inputState;             //   2B+0 - Input state (keyboard)
  word focusState;             //   2B+0 - Focus state
  word windowState;            //   2B+0 - Window state
  Message restorePoint;        //   2B+0 - Restart point (from state file)
  GLGame game;                 //  18B+0 - Game data
  GLLevel level;               //  20B+0 - Level data
  GLDer ders[DERS_MAX];        //  48B+0 - Der data
  GLLad lad;                   //  12B+0 - Lad data
  word hookaState;             //   2B+0 - Hooka state
} GLSaveState;                 // 112B+0 = 112 bytes used

// The global data used everywhere
typedef struct                 // Global structure
{
  GLNoState ns;                //  88B+0 - Unsaved global data
  GLIniState is;               //   6B+0 - INI state global data
  GLSaveState ss;              // 112B+0 - Save state global data
} GLGlobals;                   // 206B+0 = 206 bytes used

// This is used for saving to and restoring from state
typedef struct                 // Extra state structure
{
  GLSaveState saveState;       //   108B - Save state global data
  char buffer[LVL_M_SIZE];     //  1896B - Level buffer
} GLExtraState;                //  2004B = 2002 bytes used


/*
 ***************************************************************************
 *                  DEFINITION of LadderProcessClass
 ***************************************************************************
 */

@class LadderProcessClass, GenProcessClass;
  @prototype void MSG_LAD_PROTO();
  @message (MSG_LAD_PROTO) MSG_LAD_MENU;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_SOUND;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_DIFF;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_EXEC;
  @message (MSG_LAD_PROTO) MSG_LAD_MENU_STOP;
  @message (MSG_LAD_PROTO) MSG_LAD_EXIT;
  @message (MSG_LAD_PROTO) MSG_LAD_HELP;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_LOAD_HEAD;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_LOAD_DATA;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_INIT;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_START;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_EXEC;
  @message (MSG_LAD_PROTO) MSG_LAD_DEMO_STOP;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_LOAD_HEAD;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_LOAD_SHOW;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_LOAD_DATA;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_INIT;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_READY;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_READY_EXEC;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_START;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_EXEC;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_HOLD;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_FAIL;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_DIES;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_CLEAR;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_HOOKA;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_NEXT;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_STOP;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_DONE;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_OVER;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_HIGH;
  @message (MSG_LAD_PROTO) MSG_LAD_PLAY_SAVE;
  @message void MSG_LAD_FONT_SET_SIZE(word index);
  @message void MSG_LAD_FONT_DEC_SIZE();
  @message void MSG_LAD_FONT_INC_SIZE();
  @message (MSG_LAD_PROTO) MSG_LAD_RESIZE_WINDOW;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderApplicationClass
 ***************************************************************************
 */

@class LadderApplicationClass, GenApplicationClass;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderPrimaryClass
 ***************************************************************************
 */

@class LadderPrimaryClass, GenPrimaryClass;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderScreenClass
 ***************************************************************************
 */

@class LadderScreenClass, VisContentClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @default VCI_geoAttrs = VCGA_CUSTOM_MANAGE_CHILDREN;
  @instance optr LSI_screen = NullOptr;
  @instance optr LSI_chunks = NullOptr;
  @message void MSG_SCN_MARK_DIRTY();
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderTextClass
 ***************************************************************************
 */

@class LadderTextClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LTI_position = 0;
  @instance word LTI_length = 0;
  @instance byte LTI_alignment = TSD_A_LEFT;
  @instance optr LTI_text = NullOptr;
  @prototype void MSG_TXT_PROTO(optr text);
  @message (MSG_TXT_PROTO) MSG_TXT_SET_TEXT;
  @message (MSG_TXT_PROTO) MSG_TXT_UPDATE_TEXT;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderValueClass
 ***************************************************************************
 */

@class LadderValueClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LVI_position = 0;
  @instance word LVI_length = 0;
  @instance word LVI_value = 0;
  @instance word LVI_suffix = L_FALSE;
  @prototype void MSG_VAL_PROTO(word value);
  @message (MSG_VAL_PROTO) MSG_VAL_SET_VALUE;
  @message (MSG_VAL_PROTO) MSG_VAL_UPDATE_VALUE;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderRankClass
 ***************************************************************************
 */

@class LadderRankClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LRI_positionHigh = 0;
  @instance word LRI_positionLast = 0;
  @instance optr LRI_noname = NullOptr;
  @instance GLRankFile LRI_file = 0;
  @message word MSG_RNK_IS_NEW_RANK(word score);
  @message void MSG_RNK_LOAD();
  @message void MSG_RNK_SAVE_HIGH(word score, void *name);
  @message void MSG_RNK_SAVE_LAST(word score);
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderLevelClass
 ***************************************************************************
 */

@class LadderLevelClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance optr LLI_buffer = NullOptr;
  @prototype void MSG_LVL_PROTO(optr level);
  @message (MSG_LVL_PROTO) MSG_LVL_LOAD_LEVEL;
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderActorsClass
 ***************************************************************************
 */

@class LadderActorsClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LAI_count = 0;
  @instance GLActor LAI_actors[ACTS_MAX] = {
    { POS_NONE, C_SPACE }
  };
  @message void MSG_ACT_DRAW();
  @message void MSG_ACT_ADD(word lpos, char lface, word cpos, char cface);
  @message void MSG_ACT_RESET();
@endc


/*
 ***************************************************************************
 *                  DEFINITION of LadderInputClass
 ***************************************************************************
 */

@class LadderInputClass, VisClass;
  @default VI_attrs = (@default) & ~(VA_DETECTABLE | VA_MANAGED | VA_OLD_BOUNDS_SAVED);
  @default VI_geoAttrs = (@default)
    | VGA_NO_SIZE_HINTS
    | VGA_ONLY_RECALC_SIZE_WHEN_INVALID;
  @instance word LII_position = 0;
  @instance word LII_cursor = 0;
  @instance char LII_text[RNK_NAME_LEN] = "";
  @message void MSG_INP_ADD_CHAR(char character);
  @message void MSG_INP_DEL_CHAR();
  @message void MSG_INP_GET_INPUT(void *buffer);
  @message void MSG_INP_RESET();
@endc


/* End of 'ladder.goh' */
