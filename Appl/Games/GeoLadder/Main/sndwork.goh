/*
 ***************************************************************************
 * Copyright 2024 Andreas Bollhalder
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************
 */


/*
 ***************************************************************************
 * Copyright (c) 2010-2024 by YoYu-Productions
 *
 * PROJECT:     GeoLadder
 * MODULE:      GOC definition file
 * FILE:        Main\sndwork.goh
 *
 * AUTHOR:      Andreas Bollhalder
 ***************************************************************************
 */


/*
 ***************************************************************************
 *                  DEFINITIONS
 ***************************************************************************
 */

#define SW_CAPABILITY_NONE   0
#define SW_CAPABILITY_NOISE  1
#define SW_CAPABILITY_MUSIC  2

#define SW_MODE_OFF   0
#define SW_MODE_NOISE 1
#define SW_MODE_MUSIC 2

#define SW_MUSIC_MIN_VOICES          4
#define SW_NOISE_MAX_SIMULTAN_NOISES 3


/*
 ***************************************************************************
 *                  TYPE DEFINITIONS
 ***************************************************************************
 */
 
typedef struct
{
  word instrument;
  word frequency;
  word loudness;
  word priority;
  word duration;
} SWNoise;

typedef struct
{
  MemHandle soundHandle;
  word state;
  word noise;
  dword startTicks;
} SWNoiseVoice;


/*
 ***************************************************************************
 *                  DEFINITION of SoundWorkerClass
 ***************************************************************************
 */

@class SoundWorkerClass, MetaClass;
  @instance word SWI_availableVoices = 0;
  @instance word SWI_capabilities = SW_CAPABILITY_NONE;
  @instance word SWI_modes = SW_MODE_OFF;
  @instance MemHandle SWI_musicHandle = NullHandle;
  @instance optr SWI_musicData = NullOptr;
  @instance word SWI_musicPartCount = 0;
  @instance word SWI_musicPartIndex = 0;
  @instance word SWI_numNoiseVoices = 0;
  @instance SWNoiseVoice SWI_noiseVoices[SW_NOISE_MAX_SIMULTAN_NOISES];
  @message word MSG_SOUND_WORKER_GET_CAPABILITIES();
  @message void MSG_SOUND_WORKER_INIT_MODES(word modes);
  @message void MSG_SOUND_WORKER_MUSIC_PLAY(optr music);
  @message void MSG_SOUND_WORKER_MUSIC_PLAY_EXEC();
  @message void MSG_SOUND_WORKER_MUSIC_STOP();
  @message void MSG_SOUND_WORKER_NOISE_INIT_VOICES();
  @message void MSG_SOUND_WORKER_NOISE_FREE_VOICES();
  @message void MSG_SOUND_WORKER_NOISE_ADD_MULTI(word noise);
  @message void MSG_SOUND_WORKER_NOISE_PLAY_MULTI();
  @message void MSG_SOUND_WORKER_NOISE_PLAY_SINGLE(word noise);
@endc;

