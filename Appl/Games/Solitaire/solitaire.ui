/*
 * Project:	PC GEOS
 * Module:	Solitaire
 * File:	cards.ui
 *
 * Author:	Jon Witort
 *
 *	This file contains the user Interface description for this
 * application.
 *
 * RCS STAMP: $Id: solitaire.ui,v 1.2 98/04/28 17:23:30 joon Exp $
 */

#include "generic.uih"
#include "cards.uih"

#define	_JEDI	0

#ifdef	NIKE_EUROPE
#define	_NIKE_EUROPE	-1
#else
#define	_NIKE_EUROPE	0
#endif

#include "Art/mkrSolitaire.ui"
#include "Art/mkrSolitaireTiny.ui"
#include "Art/mkrReaper.ui"

class	Solitaire = Game {
	drawNumber = enumComp byte {
		drawZero, drawOne, drawTwo, drawThree
	} : drawThree;

	scoringType = enumComp byte {
		standardTimed, standardUntimed, vegas, countdown, none
	} : standardTimed;

	cash = wordComp : 0;
	totalCountdownTime = wordComp : 0;
	time = wordComp : 0;
	countdownTime = wordComp : 0;
	timerHandle = wordComp : 0;
	timeStatus = enumComp byte {
			on, off
	} : on;

	nTimesThru = wordComp : 0;
	nFaceDownCardsInTableau = wordComp : 0;
        muteSound = byteComp : 0;
}


class	SolitaireHand = Hand {
	talon = optrComp : null;
}

class	SolitaireTalon = Deck {
	default deckAttrs = dragWhichCards topOnly, ignoreExpressDrag;

	default markerColor = C_LIGHT_GREEN;
	default noCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;


	default downCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;


	default upCardAcceptanceConditions =	suitConditions anySuit,
						rankConditions absolute,
						absoluteRank none;
	default offsetFromUpCardX = 20;
	default offsetFromUpCardY = 0;

	hand = optrComp : null;
}

class   SolitaireDeck = Deck {}

/* ----------------------------------------------------------------------------
	Application Object
-----------------------------------------------------------------------------*/
start	AppResource;

SolitaireApp = GenApplication vardataReloc {
	moniker = list {
		SolitaireLCMoniker,
		SolitaireLMMoniker, 
		SolitaireSCMoniker,
		SolitaireSMMoniker, 
		SolitaireSCGAMoniker,
		SolitaireYCMoniker,
		SolitaireYMMoniker,
		SolitaireTinyTCMoniker,
		SolitaireTinyTMMoniker,
		SolitaireTinyTCGAMoniker,
		"Solitaire";
	}
	children = SolitairePrimary;	/* only one child for now */
	gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) =
			SolitairePrimary;
	gcnList (MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
			SolitaireCardBackSelector;
}

end	AppResource;

/* ----------------------------------------------------------------------------
	 Primary window.
-----------------------------------------------------------------------------*/
start	Interface;

SolitairePrimary = GenPrimary {
	children = 
		GameMenu,
		OptionsMenu, 
		SolitaireView, 
		StatusBar, 
		ResetGameConfirmBox, 
		CountdownBox, 
		OutOfTimeBox,
		TipsInteraction;
	hints = {
		HINT_PRIMARY_FULL_SCREEN,
		HINT_PRIMARY_NO_FILE_MENU,
		/*
		 * Motif will automatically add a help trigger and
		 * place it in the title bar if ATTR_GEN_HELP_CONTEXT is
		 * placed on the GenPrimary.
		 */
		ATTR_GEN_HELP_CONTEXT {
			char "TOC", 0
		},
		ATTR_GEN_WINDOW_KBD_OVERRIDE {
			word	KO_NO_KEYBOARD
		},
		HINT_DISPLAY_MENU_BAR_HIDDEN_ON_STARTUP,
		ATTR_GEN_DISPLAY_MENU_BAR_POPPED_OUT
	}
}


CountdownBox = GenInteraction {
	moniker = "Set Countdown Time";
	visibility = dialog;
	/* edwdig - changed from properties so that the ok can always be enabled */
	type = command;
	children = TooEasyInteraction, CountdownTitle, CountdownSpaceGlyph,
			CountdownInteraction, CountdownOkButton;
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog, +modal;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_HELP_CONTEXT {
			char "dbCountTime", 0
		}
	}
}

TooEasyInteraction = GenInteraction {
	genStates = default -usable;
	children = TooEasyReaperGlyph, TooEasyText;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

TooEasyReaperGlyph = GenGlyph {
	moniker = list {
			LCReaperMoniker,
			LMReaperMoniker,
			CGAReaperMoniker,
			"Zero Seconds?";
	}
}

TooEasyText = GenGlyph {
	moniker = "   You're making this too easy for me...";
}

CountdownTitle = GenGlyph {
	moniker = "Please set the countdown time";
}

CountdownSpaceGlyph = GenGlyph {
	moniker = " ";
}

CountdownInteraction = GenInteraction {
	children = MinuteRange, SecondRange;
	hints = {HINT_ORIENT_CHILDREN_HORIZONTALLY}
}

MinuteRange = GenValue {
	moniker = "minutes";
	value = 7;
	maximum = 59;
}

SecondRange = GenValue {
	moniker = "seconds";
	value = 0;
	maximum = 59;
}

/* added by edwdig */

CountdownOkButton = GenTrigger {
    genAttributes = default +signalInteractionComplete;
    hints = {
	HINT_SEEK_REPLY_BAR,
	ATTR_GEN_TRIGGER_INTERACTION_COMMAND {word IC_OK}
    }
}

/* end edwdig */


OutOfTimeBox = GenInteraction {
	visibility = dialog;
	type = notification;
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog, +modal;
	children = OutOfTimeGroup, OutOfTimeReplyBar;
	hints = {
		HINT_CENTER_CHILDREN_HORIZONTALLY
	}
}

OutOfTimeGroup = GenInteraction {
	children = ReaperGlyph, OutOfTimeSpaceGlyph, OutOfTimeText;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

ReaperGlyph = GenGlyph {
	moniker = list {
			LCReaperMoniker,
			LMReaperMoniker,
			CGAReaperMoniker,
			"Tough Luck.";
	}
}

OutOfTimeSpaceGlyph = GenGlyph {
	moniker = "           ";
}

OutOfTimeText = GenText {
	genAttributes = default +readOnly;
	text = "You are out of time...";
}

OutOfTimeReplyBar = GenInteraction {
	children = OutOfTimeRedeal, OutOfTimeKeepPlaying;
	hints = { HINT_MAKE_REPLY_BAR }
}
OutOfTimeRedeal = GenTrigger {
	moniker = 'N', "New Game";
	action = MSG_SOLITAIRE_REDEAL, MyPlayingTable;
	genAttributes = signalInteractionComplete;
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND { word IC_OK }
	}
}

OutOfTimeKeepPlaying = GenTrigger {
	moniker = 'C', "Continue Playing This Game";
	genAttributes = signalInteractionComplete;
	hints = {
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND { word IC_DISMISS }
	}
}


end Interface;


/*-----------------------------------------------------------------------------
	UI Objects within Primary window
-----------------------------------------------------------------------------*/

/******************************************************************************
				Deck
******************************************************************************/
start	Interface;

ResetGameConfirmBox = GenInteraction {
	visibility = dialog;
	type = affirmation;
	children = ResetGameText;
	attributes = default +notUserInitiatable, +initiatedViaUserDoDialog, +modal;
	hints = {HINT_ORIENT_CHILDREN_VERTICALLY, HINT_CENTER_CHILDREN_HORIZONTALLY}
}

ResetGameText = GenText {
	genAttributes = default +readOnly;
	text = {Changing this option will end the current game and begin a new one. Are you sure you want to do this?}
}

StatusBar = GenInteraction {
	children = ScoreDisplay, TimeDisplay, NewGameTrigger, AutoFinishTrigger;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_EXPAND_WIDTH_TO_FIT_PARENT,
		HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

ScoreDisplay = GenInteraction ignoreDirty {
	children = ScoreLabel, ScoreValue;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}

ScoreLabel = GenText ignoreDirty {
	text = "Score: ";
	genAttributes = default +readOnly;
	textDisplayAttributes = default +singleLineText;
	hints = {
		HINT_MINIMUM_SIZE {
		SpecWidth <SST_AVG_CHAR_WIDTHS, 7>
		SpecHeight <>
		},
	}
}

ScoreValue = GenText ignoreDirty {
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;
	hints = {
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 7>
			SpecHeight <>
		},
	}
}

TimeDisplay = GenInteraction ignoreDirty {
	children = TimeLabel, TimeValue;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY
	}
}


TimeLabel = GenText ignoreDirty {
	textDisplayAttributes = default +singleLineText;
	text = "Time: ";
	genAttributes = default +readOnly;

	hints = {
		HINT_MINIMUM_SIZE {
			SpecWidth <SST_AVG_CHAR_WIDTHS, 6>
			SpecHeight <>
		},
	}
}

TimeValue = GenText ignoreDirty {
	textDisplayAttributes = default +singleLineText;
	genAttributes = default +readOnly;

	hints = {
		HINT_MINIMUM_SIZE {
#if _NIKE_EUROPE
			SpecWidth <SST_AVG_CHAR_WIDTHS, 11>
#else
			SpecWidth <SST_AVG_CHAR_WIDTHS, 7>
#endif
			SpecHeight <>
		},
#if _NIKE_EUROPE
		HINT_SHOW_ENTIRE_MONIKER,
#endif
	}
}

GameMenu = GenInteraction {
	moniker = 'G', "Game";

	children = GameSubMenu;
	visibility = popup;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		ATTR_GEN_INTERACTION_GROUP_TYPE {		
			GenInteractionGroupType	GIGT_FILE_MENU
		},
	}
}
GameSubMenu = GenInteraction {
	children = RedealTrigger, QuickTipButton, UndoTrigger;
}

chunk   NewGameHelp = "Throw away this game and deal new cards";

NewGameTrigger = GenTrigger {
	moniker = 'N', "New Game";
	genAttributes = default +initiatesInputIgnore;
	action = MSG_SOLITAIRE_NEW_GAME, MyPlayingTable;
	hints = {
	    ATTR_GEN_FOCUS_HELP {
		optr NewGameHelp
	    }
	}
}

AutoFinishTrigger = GenTrigger {
	moniker = 'A', "Auto Finish";
	genStates = default -usable;
	action = MSG_SOLITAIRE_AUTO_FINISH, MyPlayingTable;
}

#if 0
ShowHighScoresTrigger = GenTrigger {
	moniker = 'H', "Show High Scores";
	action = MSG_SOLITAIRE_SHOW_HIGH_SCORES, process;
}

CashOutTrigger = GenTrigger {
	moniker = 'C', "Cash Out";
	action = MSG_SOLITAIRE_CASH_OUT, MyPlayingTable;
}

#endif



RedealTrigger = GenTrigger {
	moniker = 'N', "New Game";
	kbdAccelerator = ctrl 'N';
	genAttributes = default +initiatesInputIgnore;
	action = MSG_SOLITAIRE_NEW_GAME, MyPlayingTable;
}

/* jfh - marked not usable until I get the graphics */
QuickTipButton = GenTrigger {
	moniker = 'Q', "Quick Tips...";
/*	genStates = default -usable; */
	action = MSG_GEN_INTERACTION_INITIATE, TipsInteraction;
}


UndoTrigger = GenTrigger {
	moniker = 'U', "Undo Last Move";
	kbdAccelerator = ctrl 'Z';
	genAttributes = default +initiatesInputIgnore;
	action = MSG_SOLITAIRE_UNDO, MyPlayingTable;
}


OptionsMenu = GenInteraction {
	visibility = popup;
	moniker = 'O', "Options";
	children = SolitaireCardBackSelector,
		   DrawInteraction, UserModeInteraction, 
		   ScoringMenu,
		   ResetScoreTrigger,
		   SetCountdownTrigger,
#if _NDO2000
		   DragInteraction,
#endif
		   FadeInteraction, 
                   SoundInteraction,
                   SaveOptionsTrigger;
}

ScoringMenu = GenInteraction {
	visibility = popup;
	moniker = 'S', "Scoring";
	children = ScoringList;
}

ResetScoreTrigger = GenTrigger {
	moniker = 'R', "Reset Score";
	action = MSG_SOLITAIRE_RESET_SCORE, MyPlayingTable;
	genStates = default -usable;
}	

SetCountdownTrigger = GenTrigger {
	moniker = 'T', "Set Countdown Time";
	action = MSG_SOLITAIRE_SET_COUNTDOWN_TIME, MyPlayingTable;
	hints = {
		HINT_TRIGGER_BRINGS_UP_WINDOW
	}
}

FadeInteraction = GenInteraction {
	children = FadeList;
}

FadeList = GenBooleanGroup {
	children = FadeEntry;
	applyMsg = MSG_SOLITAIRE_SET_FADE_STATUS;
	destination = MyPlayingTable;
	selectedBooleans = 1;
}

FadeEntry = GenBoolean {
	moniker = 'F', "Fade Cards";
	identifier = 1;
}

SoundInteraction = GenInteraction {
        children = SoundList;
}

SoundList = GenBooleanGroup {
        children = SoundEntry;
        applyMsg = MSG_SOLITAIRE_SET_SOUND_STATUS;
        destination = MyPlayingTable;
}

SoundEntry = GenBoolean {
        moniker = 'M', "Mute Sound";
        identifier = 1;
}
	
SaveOptionsTrigger = GenTrigger {
	moniker = 'O', "Save Options";
	action = MSG_META_SAVE_OPTIONS, process;
}


DrawInteraction = GenInteraction {
	moniker = 'D', "Draw How Many Cards?";
	visibility = popup;
	children = DrawList;
}

DrawList = GenItemGroup {
	children =	Draw1Entry,
			Draw2Entry,
			Draw3Entry;
	numSelections = 1;
	selection = 3;
	applyMsg = MSG_SOLITAIRE_USER_REQUESTS_DRAW_NUMBER_CHANGE;
	destination = MyPlayingTable;
}

Draw1Entry = GenItem {
	moniker = '1', "Draw one card at a time (1)";
	identifier = 1;
}

Draw2Entry = GenItem {
	moniker = '2', "Draw two cards at a time (2)";
	identifier = 2;
}

Draw3Entry = GenItem {
	moniker = '3', "Draw three cards at a time (3)";
	identifier = 3;
}

ScoringList = GenItemGroup {
	children =	StandardTimedScoringEntry,
			StandardUntimedScoringEntry,
			VegasScoringEntry,
			CountdownScoringEntry,
			NoneScoringEntry;
	numSelections = 1;
	selection = "ST_STANDARD_TIMED";
	applyMsg = MSG_SOLITAIRE_USER_REQUESTS_SCORING_TYPE_CHANGE;
	destination = MyPlayingTable;
}

StandardTimedScoringEntry = GenItem {
	moniker = 'T', "Standard (Timed)";
	identifier = "ST_STANDARD_TIMED";
}

StandardUntimedScoringEntry = GenItem {
	moniker = 'U', "Standard (Untimed)";
	identifier = "ST_STANDARD_UNTIMED";
}

VegasScoringEntry = GenItem {
	moniker = 'V', "Vegas";
	identifier = "ST_VEGAS";
}

CountdownScoringEntry = GenItem {
	moniker = 'C', "Countdown";
	identifier = "ST_COUNTDOWN";
}

NoneScoringEntry = GenItem {
	moniker = 'N', "No Scoring";
	identifier = "ST_NONE";
}

#if _NDO2000
DragInteraction = GenInteraction {
	moniker = 'M',"Card Drag Mode";
	children = DragList;
}

DragList = GenItemGroup {
	children =	OutlineDragEntry,
			FullDragEntry;
	numSelections = 1;
	selection = "DRAG_FULL";  /* edwdig */
	applyMsg = MSG_GAME_SET_DRAG_TYPE;
	destination = MyPlayingTable;
	hints = {
	    HINT_ORIENT_CHILDREN_VERTICALLY

	}
}

OutlineDragEntry = GenItem {
	moniker = 'u', "Outline Dragging";
	identifier = "DRAG_OUTLINE";
}

FullDragEntry = GenItem {
	moniker = 'g', "Full Card Dragging";
	identifier = "DRAG_FULL";
}
#endif

UserModeInteraction = GenInteraction {
	moniker = 'L', "Level of Play";
	children = UserModeList;
	visibility = popup;
}

UserModeList = GenItemGroup {
	children =	BeginnerModeEntry,
			IntermediateModeEntry,
			AdvancedModeEntry;
	numSelections = 1;
	selection = "BEGINNER_MODE";
	applyMsg = MSG_SOLITAIRE_USER_REQUESTS_USER_MODE_CHANGE;
	destination = MyPlayingTable;
	
}

BeginnerModeEntry = GenItem {
	moniker = 'B', "Beginner";
	identifier = "BEGINNER_MODE";
}

IntermediateModeEntry = GenItem {
	moniker = 'I', "Intermediate";
	identifier = "INTERMEDIATE_MODE";
}

AdvancedModeEntry = GenItem {
	moniker = 'A', "Advanced";
	identifier = "ADVANCED_MODE";
}

end	Interface;

start	Interface;
SolitaireView = GenView {
	output = MyPlayingTable;
	hints = {
		HINT_DEFAULT_TARGET
	}
/*	viewAttributes = default +isolatedContents;	*/
/*	horizAttributes = noMaxSize;	*/
/*	vertAttributes	= noMaxSize;	*/
}

SolitaireCardBackSelector = CardBackSelector {
	moniker = 'C', "Choose a Card Back";
	type = properties;
	visibility = dialog;
}

end Interface;

start StuffResource;

MyPlayingTable = Solitaire {
	view = SolitaireView;
	children = 	MyHand,
			MyTalon,
			Foundation1,
			Foundation2,
			Foundation3,
			Foundation4,
			TE1, TE2, TE3, TE4, TE5, TE6, TE7;

	hand = MyHand;
	scoreOutput = ScoreValue;

	left = 0;
	top = 0;
	visCompGeoAttrs = default +customManageChildren;

	undoTrigger = UndoTrigger;

	cash = "INITIAL_VEGAS_SCORE";

	totalCountdownTime = 420;	/* matches MinuteRange:SecondRange */

#if !(_NDO2000)
	dragType = full;
#endif
}

MyHand = SolitaireHand {
	talon = MyTalon;
	markerColor = C_YELLOW;
}

MyTalon = SolitaireTalon {
	hand = MyHand;
}

Foundation1 = Deck {
	deckAttrs = dragWhichCards none, ignoreDoubleClicks;
	markerColor = C_WHITE;
	noCardAcceptanceConditions = 	singleCardOnly,
					suitConditions anySuit,
					rankConditions absolute,
					absoluteRank ace;

	upCardAcceptanceConditions =	singleCardOnly,
					suitConditions sameSuit,
					rankConditions oneGreater;
	offsetFromUpCardY = 0;

}

Foundation2 = Deck {
	deckAttrs = dragWhichCards none, ignoreDoubleClicks;
	markerColor = C_WHITE;
	noCardAcceptanceConditions = 	singleCardOnly,
					suitConditions anySuit,
					rankConditions absolute,
					absoluteRank ace;

	upCardAcceptanceConditions =	singleCardOnly,
					suitConditions sameSuit,
					rankConditions oneGreater;
	offsetFromUpCardY = 0;

}

Foundation3 = Deck {
	deckAttrs = dragWhichCards none, ignoreDoubleClicks;
	markerColor = C_WHITE;
	noCardAcceptanceConditions = 	singleCardOnly,
					suitConditions anySuit,
					rankConditions absolute,
					absoluteRank ace;

	upCardAcceptanceConditions =	singleCardOnly,
					suitConditions sameSuit,
					rankConditions oneGreater;
	offsetFromUpCardY = 0;

}

Foundation4 = Deck {
	deckAttrs = dragWhichCards none, ignoreDoubleClicks;
	markerColor = C_WHITE;
	noCardAcceptanceConditions = 	singleCardOnly,
					suitConditions anySuit,
					rankConditions absolute,
					absoluteRank ace;

	upCardAcceptanceConditions =	singleCardOnly,
					suitConditions sameSuit,
					rankConditions oneGreater;
	offsetFromUpCardY = 0;

}

TE1 = SolitaireDeck {
}

TE2 = SolitaireDeck {
}

TE3 = SolitaireDeck {
}

TE4 = SolitaireDeck {
}

TE5 = SolitaireDeck {
}

TE6 = SolitaireDeck {
}

TE7 = SolitaireDeck {
}

end StuffResource;


start	StringBlock, data;

/***********************************************************************
 * 		Solitaire Strings
 ***********************************************************************/

chunk	WinningString		= "Congratulations, you've won!";

end	StringBlock;

/***********************************************************************
 * 		Solitaire Quick Tips
 ***********************************************************************/

start	SolQuickTipsResource, notDetachable;
#include "Art/QTHint.ui"
#include "Art/QTDraw.ui"
#include "Art/QTSave.ui"

TipsInteraction = GenInteraction {
	moniker = "Solitaire Quick Tips";
	attributes	= default +notUserInitiatable, +modal;	
  /*	type		= multipleResponse;  */
	visibility	= dialog;
	children =     GoalText,
				QuickTipsGroup,
				ShowOnStartupGroup,
				OKTipsButton/*,
				LetsPlayButton*/;
	hints = {
		HINT_ORIENT_CHILDREN_VERTICALLY,
		HINT_CENTER_CHILDREN_HORIZONTALLY,
		ATTR_GEN_HELP_CONTEXT {
		    char	"TOC", 0
		}
	}
}

GoalText = GenText {
	text = "The goal of the game is to stack the cards of each suit in numerical order (Ace,2,3,...,King) in the four upper slots.  Click Help for more details.";
	textDisplayAttributes = default -useTabForNavigation;
	genAttributes = default +readOnly;
	hints = {
		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE
	}
}

ShowOnStartupGroup = GenBooleanGroup {
    children = ShowOnStartupBoolean;
}

ShowOnStartupBoolean = GenBoolean {
    moniker = 'S', "Show this Dialog box when Solitaire starts";
    identifier = SHOW_ON_STARTUP;
}

/*LetsPlayButton = GenTrigger {
	moniker = "Let's Play";
	action = MSG_SOLITAIRE_NEW_GAME, process;
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {WORD IC_OK}
	}
}
*/
OKTipsButton = GenTrigger {
	moniker = 'O', "OK";
  /*	genStates = default -usable; */
	genAttributes = default +signalInteractionComplete;
	hints = {
		HINT_SEEK_REPLY_BAR,
		HINT_DEFAULT_DEFAULT_ACTION/*,
		ATTR_GEN_TRIGGER_INTERACTION_COMMAND {WORD IC_DISMISS} */
	}
}

QuickTipsGroup = GenInteraction {
	children =	BeginnerDefault,
			DrawCards,
			SaveChanges;
	type	= organizational;
}

BeginnerDefault = GenInteraction {
	children = BeginnerDefaultGlyph,BeginnerDefaultText;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

BeginnerDefaultGlyph = GenGlyph {
	moniker = list {
		HintMoniker
	}
	hints = {

	    HINT_FIXED_SIZE {
		SpecWidth < SST_PIXELS, 65 >
		SpecHeight<>
	    }
	}
}

BeginnerDefaultText = GenText {
	text = "To turn off the automatic hints, open the Options menu and click on Level of Play.  Select any level above Beginner to remove the hints.";
	textDisplayAttributes = default -useTabForNavigation;
	genAttributes = default +readOnly;
	hints = {
   /*		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE, */
	    HINT_MINIMUM_SIZE {
		SpecWidth < SST_PIXELS, 325 >
		SpecHeight<>
	    }
	}
}


DrawCards = GenInteraction {
	children = DrawCardsGlyph,DrawCardsText;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

DrawCardsGlyph = GenGlyph {
	moniker = list {
		DrawMoniker
	}
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth < SST_PIXELS, 65 >
		SpecHeight<>
	    }
	}
}

DrawCardsText = GenText {
	text = "You can choose to draw 1, 2 or 3 cards at a time.  Open the Options menu and click on Draw How Many Cards? to set this.";
	textDisplayAttributes = default -useTabForNavigation;
	genAttributes = default +readOnly;
	hints = {
   /*		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE, */
	    HINT_MINIMUM_SIZE {
		SpecWidth < SST_PIXELS, 325 >
		SpecHeight<>
	    }
	}
}

SaveChanges = GenInteraction {
	children = SaveChangesGlyph,SaveChangesText;
	hints = {
		HINT_ORIENT_CHILDREN_HORIZONTALLY,
		HINT_CENTER_CHILDREN_VERTICALLY
	}
}

SaveChangesGlyph = GenGlyph {
	moniker = list {
		SaveMoniker
	}
	hints = {
	    HINT_FIXED_SIZE {
		SpecWidth < SST_PIXELS, 65 >
		SpecHeight<>
	    }
	}
}

SaveChangesText = GenText {
	text = "To save your changes, click on Save Options in the Options menu.";
	textDisplayAttributes = default -useTabForNavigation;
	genAttributes = default +readOnly;
	hints = {
   /*		ATTR_GEN_TEXT_NEVER_MAKE_SCROLLABLE, */
	    HINT_MINIMUM_SIZE {
		SpecWidth < SST_PIXELS, 325 >
		SpecHeight<>
	    }
	}
}


end	SolQuickTipsResource;

