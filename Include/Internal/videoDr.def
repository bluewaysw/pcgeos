COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		videoDr.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines structures and routines intended for video drivers.

	$Id: videoDr.def,v 1.1 97/04/04 14:16:28 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__VIDEODR

include driver.def
include graphics.def
include hugearr.def
include win.def

StartKernel

global GrCopyDrawMask:far
global GrMapColorToGrey:far
global GrCalcLuminance:far

global WinValClipLine:far
global WinGenLineMask:far
global WinMaskOutSaveUnder:far

EndKernel

;----------------------------------------------------------------------------
;		Video driver calls
;----------------------------------------------------------------------------

StartDriver	video

;
; Protocol number for this interface description.
;
VIDEO_PROTO_MAJOR	equ DRIVER_EXT_PROTO_MAJOR+2
VIDEO_PROTO_MINOR	equ DRIVER_EXT_PROTO_MAJOR+0

VIDMEM_VERSION_MAJOR	equ	2
VIDMEM_VERSION_MINOR	equ	0

VidFunction 		etype word, DriverExtendedFunction, 2

;----------------------------------------------------------------------------
; 		Functions that do not require exclusive access to the driver
;----------------------------------------------------------------------------

DR_VID_INFO		enum VidFunction	; return ptr to info blk
;       PASS:           es	- locked window segment
;       RETURN:         dx:si	- pointer to DriverInfo block
;       DESTROYS:       nothing
;
;	This function returns a pointer to the DeviceInfo table for the
;	driver

DR_VID_GET_EXCLUSIVE	enum VidFunction	; get current exclusive
;       PASS:           nothing
;       RETURN:         bx	- graphics state
;       DESTROYS:       nothing
;
;	This function returns the handle of the GState with the current 
;	exclusive.
;

DR_VID_START_EXCLUSIVE	enum VidFunction	; start exclusive
;       PASS:           bx	- graphics state
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;	This function sets a flag that aborts all output operations other than
;	those involving the passed graphics state.
;

DR_VID_END_EXCLUSIVE	enum VidFunction	; end exclusive
;       PASS:           bx	- gstate that supposedly had the exclusive
;       RETURN:         ax...dx	- non-zero if some output operation was
;			si,di,cx,dx - left/top/right/bottom coords of rectangle
;				      that represents the bounds of the items
;				      whose drawing was aborted because of the
;				      exclusive.  
;       DESTROYS:       nothing
;
;	This function clears the flag set by DR_VID_START_EXCLUSIVE. If any
;	output operation was aborted because that flag was set, the caller
;	should invalidate the rectangle returned in si,di,cx,dx.

;----------------------------------------------------------------------------
; 		Functions that do not require the driver exclusive
;----------------------------------------------------------------------------

DR_VID_GETPIXEL		enum VidFunction	; get a single pixel value
;	PASS:		ax, bx	- pixel position 
;	RETURN:		ah	- raw pixel value (except 24bit devices)
;			al	- pixel color (red component)
;			bl	- pixel color (green component)
;			bh	- pixel color (blue component)
;	DESTROYS:	nothing
;
;	This function is used to determine the color of a pixel on the device.

DR_VID_GETBITS		enum VidFunction	; get a block o' bits
;       PASS:           ax, bx	- source position
;			cx, dx	- width, height (pixels)
;			ds:bp	- pointer to destination block
;			si	- size of block
;			es	- window
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	This function fills the passed block with the bitmap specified by the
;	position/size arguments.  The format of the bitmap is the same as
;	the video device.

DR_VID_SETPTR		enum VidFunction	; set pointer pic
;       PASS:           ds:si	- far pointer to PointerDef structure
;				  if si = -1, use default pointer shape
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp,ds
;
;	This function sets a new picture for the mouse cursor

DR_VID_HIDEPTR		enum VidFunction	; hide pointer
;       PASS:           nothing
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp,es
;
;	This function hides the mouse cursor

DR_VID_SHOWPTR		enum VidFunction	; show pointer
;       PASS:           nothing
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	This function redisplays the mouse cursor

DR_VID_MOVEPTR		enum VidFunction	; move pointer
;       PASS:           ax,bx	- new pointer position
;       RETURN:         al	- mask of save-under areas that pointer hot-spot
;			  	  overlaps with
;       DESTROYS:       ah,bx,cx,dx,si,di,bp
;
;	This function updates the position of the mouse cursor

DR_VID_SAVE_UNDER	enum VidFunction	; set save under area
;       PASS:           es	- window
;			ax, bx, cx, dx - bounds to save under -OR-
;					 ax = 0x8000 for window bounds
;       RETURN:         carry	- clear if save under supplied
;				- set if save under not possible
;			al	- flags for window saved
;       DESTROYS:       ah,bx,cx,dx,si,di,bp,ds,es
;
;	This function sets a new save under area

DR_VID_RESTORE_UNDER	enum VidFunction	; reset save under area
;       PASS:           es	- window
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp,ds,es
;
;	Restore a save under area

DR_VID_NUKE_UNDER	enum VidFunction	; nuke save under area
;       PASS:           es	- window
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp,ds,es
;
;	This function resets a save under area

DR_VID_REQUEST_UNDER	enum VidFunction	; request save under
;       PASS:           ax,bx	- width,height for requested save under area
;       RETURN:         carry	- set if save under area needs to be removed
;			ax	- flags to save under to remove
;			bx	- handle of window of save under to remove
;       DESTROYS:       cx,dx
;
;	This function is used to determine whether an existing save under area
;	needs to be removed for a new save under area to be created

DR_VID_CHECK_UNDER	enum VidFunction	; check save under
;       PASS:           ax,bx	- left,top
;			cx,dx	- right,bottom
;       RETURN:         al	- flags for all save under areas hit
;       DESTROYS:       ah
;
;	This function checks a rectangular region against all the current save
;	under areas

DR_VID_INFO_UNDER	enum VidFunction	; get save under info
;       PASS:           al	- bitmask of single save under area to get
;				  info for
;       RETURN:         ax,bx	- left,top
;			cx,dx	- right,bottom
;			di	- window (0 if no save under area in use here)
;       DESTROYS:       si,bp,ds,es
;
;	Thus function returns size information about a specific save under area

DR_VID_COLLIDE_UNDER	enum VidFunction	; check collision w/save under
;       PASS:           ax,bx	- left,top	
;			cx,dx	- right,bottom
;			es	- window
;       RETURN:         es	- window (may have changed)
;       DESTROYS:       nothing
;
;	This function checks a rectangular region against current save under
;	areas and removes all save under areas that collide with the region.

DR_VID_SET_XOR		enum VidFunction	; set the xor region
;       PASS:           ax,bx	- region position 
;			dx:cx	- handle/offset to region definition block.
;				  block MUST be in memory
;			si	- VisXORFlags:
;				  VXF_X_POS_FOLLOWS_MOUSE - x pos follow mouse 
;				  VXF_Y_POS_FOLLOWS_MOUSE - y pos follow mouse 
;				  VXF_AX_PARAM_FOLLOWS_MOUSE - PARAM_0 
;				      definition follows mouse X
;				  VXF_BX_PARAM_FOLLOWS_MOUSE - PARAM_1 
;				      definition follows mouse Y
;				  VXF_CX_PARAM_FOLLOWS_MOUSE - PARAM_2 
;				      definition follows mouse X
;				  VXF_DX_PARAM_FOLLOWS_MOUSE - PARAM_3 
;				      definition follows mouse Y
;			ss:bp	- VisXORParams:
;				  ss:[bp].VXO_ax - region parameter PARAM_0
;				  ss:[bp].VXO_bx - region parameter PARAM_1
;				  ss:[bp].VXO_cx - region parameter PARAM_2
;				  ss:[bp].VXO_dx - region parameter PARAM_3
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di
;
;	This function sets up an XOR region designed to follow mouse movement

DR_VID_CLEAR_XOR	enum VidFunction	; clear the xor region
;       PASS:           nothing
;       RETURN:         ax	- new AX param
;                	bx	- new BX param
;                	cx	- new CX param
;                	dx	- new DX param
;			si	- new x position
;			di	- new y position
;       DESTROYS:       nothing
;
;	Thus function clears the current XOR region

;----------------------------------------------------------------------------
; 		Functions that require the driver exclusive
;----------------------------------------------------------------------------

DR_VID_RECT		enum VidFunction	; rectangle
;       PASS:           ax,bx	- left,top coordinate
;			cx,dx	- right,bottom coordinate
;			si	- offset into GState to CommonAttr struct
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have moved)
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	This function fills a rectangular area on the device

DR_VID_PUTSTRING	enum VidFunction	; draw string
;       PASS:           ax.dl	- x position (WBFixed coordinate)
;			bx.dh	- y position (WBFixed coordinate)
;			cx	- segment address of font
;			ss:bp	- ptr to VPS_params structure on stack
;				  VPS_numChars - max #chars to draw
;				  VPS_stringSeg - segment of string to draw
;			si	- offset into VPS_stringSeg to character string
;			ds	- gstate
;			es	- window
;       RETURN:         ax.dl	- x position for next character
;			bx.dh	- y position for next character
;			bp	- segment address of font (may have moved)
;			es	- window (may have moved)
;       DESTROYS:       cx,di
;
;	This function draws a text string in the current font,style, etc.

DR_VID_MOVBITS		enum VidFunction	; mov a block o' bits
;       PASS:           ax, bx	- source position
;        	        cx, dx	- destination position
;			si,bp	- width, height (pixels)
;			ds	- gstate
;			es	- window
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	This function performs a bit boundary block transfer from one part
;	of the screen to another


;	These is the structure of the information passed to PUTBITS

	; bitmap palette type
	;  for CMYK and 24-bit devices, only BMPT_RGB is passed.
	;  for 4- and 8-bit devices, the kernel may do the mapping to 
	;  the closest index (if ColorMapMode is set to COLOR_MAP_CLOSEST, for 
	;  example).  If CMT_DITHER is set, the passed palette will
	;  probably be passed as RGB values (unless there are exact matches
	;  to current palette colors, where an indexed palette can be used).
BMPalType	etype	byte, 0
BMPT_RGB	enum	BMPalType	; passed palette has 3-byte RGB entry
					;  for each index
BMPT_INDEX	enum	BMPalType	; passed palette maps bitmap indices
					;  to frame buffer (1-byte) values

	; record passed as part of PutBitsArgs struct
PutBitsFlags	record
    :13,				; for future use
    PBF_ALLOC_PALETTE:1,		; set if we had to alloc space for pal
    PBF_FILL_MASK:1,			; set if called from GrFillBitmap
    PBF_PAL_TYPE BMPalType:1		; palette type (only significant if
					;  BMT_PALETTE bit is set in the passed
					;  bitmap structure PBA_bm)
PutBitsFlags	end

	; structure passed to DR_VID_PUTBITS
PutBitsArgs	struct
    PBA_bm	Bitmap <>		; bitmap struct for this slice
    PBA_flags	PutBitsFlags		; options for PutBits
    PBA_data	fptr			; far pointer to first data byte
    PBA_size	word			; #bytes per scan line of the bitmap
    PBA_pal	fptr			; far pointer to palette (if necc)
PutBitsArgs	ends

DR_VID_PUTBITS		enum VidFunction	; put a block o' bits
;       PASS:           ax,bx	- position to draw bitmap
;			ds	- gstate
;			es	- window
;			ss:bp	- inherits PutBitsArgs structure 
;				  (defined above)
;       RETURN:         nothing
;       DESTROYS:       ax,bx,cx,dx,si,di
;
;	This function draws a bitmap.  The bitmap header is passed on the stack
; 	along with a pointer to the data.  The header is always for a simple
;	bitmap, so complex bitmaps will have to be broken up over a few calls
;	to this function.

DR_VID_LINE		enum VidFunction	; draw line
;       PASS:           ax,bx	- x,y coordinates of 1st point
;			cx,dx	- x,y coordinates of 2nd point
;			si	- offset into gstate to CommonAttr 
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have moved)
;       DESTROYS:       ax,bx,cx,dx,si,di
;
;	Thus function draws a one-pixel wide line 

DR_VID_REGION		enum VidFunction	; draw a parameterized region
;       PASS:           ax	- amt to offset region in x to get screen crds
;			bx	- amt to offset region in y to get screen crds
;			dx.cx	- segment/offset to region definition
;			ss:bp	- pointer to region parameters
;				  ss:bp+0 - PARAM_0
;				  ss:bp+2 - PARAM_1
;				  ss:bp+4 - PARAM_2
;				  ss:bp+6 - PARAM_3
;			si	- offset in gstate to CommonAttr struct
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have moved)
;       DESTROYS:       ax.,bx,cx,dx,si,di,bp
;

DR_VID_PUTLINE		enum VidFunction	; put bits along line
;       PASS:           ax,bx	- coordinates of point 1
;			cx,dx	- coordinates of point 2
;			ss:bp	- inherits PutBitsArgs structure 
;				  (defined above)
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have changed)
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	Draw one line of a bitmap along an arbitrary line

DR_VID_POLYGON		enum VidFunction	; draw convex polygon
;       PASS:           bx:dx	- fptr to point buffer
;			cx	- #points in buffer
;			ds	- gstate
;			si	- offset to attributes in gstate
;			al	- clockwise flag (0=draw always, 1=draw only
;				  if points passed are clockwise)
;			es	- window
;       RETURN:         es	- window (may have moved)
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	Draw a convex polygon

DR_VID_SCREEN_ON	enum VidFunction	; enable video output
;       PASS:           nothing
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;	Enable video output

DR_VID_SCREEN_OFF	enum VidFunction	; disable video output
;       PASS:           nothing
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;	Disable video output

DR_VID_POLYLINE		enum VidFunction	; draw brushed polyline
;       PASS:           bx:si	- fptr to disjoint polyline block
;			ds	- gstate
;			es	- window
;			ah	- width of brush, pixels
;			al	- height of brush, pixels
;       RETURN:         es	- window (may have moved)
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	Draw a connected polyline with a rectangular brush.  
;	NOTE: This will not work correctly with MM_INVERT or MM_XOR if 
;	      the brush is larger than 1x1 pixel

		; structure passed to both VID_DASH_LINE and VID_DASH_FILL
DashInfo	struct
    DI_pt1	Point <>		; 1st endpoint
    DI_pt2	Point <>		; 2nd endpoint
    DI_patt	fptr.WWFixed		; dash pattern definition (pixels)
    DI_pattIdx	word			; offset into pattern
    DI_nPairs	word			; number of pairs in dash array
DashInfo	ends

DR_VID_DASH_LINE	enum VidFunction	; draw a 1-pixel dashed line 
;       PASS:           bx:dx	- fptr to DashInfo
;			al	- flag to include the first pixel or not 
;				   (0 = include it.  1 = don't include it)
;			si	- offset into GState to CommonAttr
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have moved)
;			In addition, the DI_pattIdx field is modified to 
;			reflect where the dashing code left off at the end
;			of the line.
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	Draw a single pixel dashed line.

DR_VID_DASH_FILL	enum VidFunction	; fill a 1-pixel dashed line 
;       PASS:           bx:dx	- fptr to DashInfo
;			si	- offset into GState to CommonAttr
;			ax	- x displacement to other corner
;			cx	- y displacement to other corner
;			ds	- gstate
;			es	- window
;       RETURN:         es	- window (may have moved)
;			In addition, the DI_pattIdx field is modified to 
;			reflect where the dashing code left off at the end
;			of the line.
;       DESTROYS:       ax,bx,cx,dx,si,di,bp
;
;	Draw a fat dashed line.  Each "dash" is a 4-point polygon constructed
;	by the 2 endpoints of the 1-pixel dashed line (same as in DASH_LINE),
;	plus the two points constructed by applying the passed 
;	x/y displacements to both the dash endpoints.

;	Last function in the driver that can be done when not in
;	exclusive mode

DR_VID_SET_PALETTE	enum VidFunction	; set the hardware palette
;	PASS:		dx:si	- fptr to array of RGBValues
;			al	- palette register to start with
;			ah	- 0 for custom palette
;				  1 if default palette
;			cx	- count of palette registers to change
;	RETURN:		nothing
;	DESTROYS:	nothing

DR_VID_GET_PALETTE	enum VidFunction	; set the hardware palette
;	PASS:		dx:si	- fptr to buffer to fill
;			al	- palette register to start with
;			cx	- count of palette registers to return
;	RETURN:		nothing
;	DESTROYS:	nothing
DR_VID_LAST_NON_SEMAPHORE =	DR_VID_END_EXCLUSIVE
DR_VID_LAST_NON_EXCLUSIVE =	DR_VID_INFO_UNDER
DR_VID_LAST_FUNCTION 	  =	DR_VID_GET_PALETTE

;---------------------------------------------------------------------------
;		Video driver standard escapes
;---------------------------------------------------------------------------

	; codes from 0x8000-0x80ff are standard escape codes common
	; to all drivers (see geode.def)

	;     standard video escapes range from 0x8100 to 0xbfff
	; user-defined video escapes range from 0xc000 to 0xffff

VidEscCode 		etype word, 8100h, 1

VID_ESC_SET_COLOR_TRANSFER	enum VidEscCode	; set transfer function
;       PASS:           ax	- block handle to transfer function tables
;       RETURN:         nothing
;       DESTROYS:       nothing
;
;	Set a color transfer function via tables.  Most useful for vidmem.

VID_ESC_ROTATE_SCREEN		enum VidEscCode ; twist screen +/- 90 deg.
;	PASS:		ax	-> -1 if landscape
;				    0 if toggle
;				    1 if portrait
;	RETURN:		nothing
;	DESTROYS:	nothing
;
;	On screens that support 2 orientations, rotate the screen
;	90 deg. so it is in portrait (or landscape) mode
;

VID_ESC_INVERT_SCREEN		enum VidEscCode ; invert screen on fly
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYS:	nothing
;
;	Invert the display, and continue drawing in the inverted
;	mode.  To "reset to normal", merely call this function again.
;

VID_ESC_CHECK_IF_FORMAT_IS_SUPPORTED	enum	VidEscCode
;	PASS:		ax	- BMFormat
;	RETRUN:		carry	- clear (supported)
;				- set (not supported)
;	DESTROYS:	nothing
;
;	This is used to tell whether the bitmap format passed in ax is
;	supported by the system or not.
;

VID_ESC_CHANGE_VID_MODE			enum	VidEscCode
;	PASS:		ax	- requested DisplayMode
;	RETURN:		carry	- set if mode not supported
;			ax	- DisplayMode as actually set
;
;	DESTROYS:	nothing
;
;	Set the display to the requested mode (DisplayMode is defined
;	in win.def).  It is not necessary to turn the display off before
;	calling this function; the video driver will do so if necessary.
;


ContrastChangeType	etype	byte
	CCT_SET		enum	ContrastChangeType, 0
	CCT_INCREASE	enum	ContrastChangeType, 1
	CCT_DECREASE	enum	ContrastChangeType, -1
	
VID_ESC_SET_CONTRAST			enum	VidEscCode
;	PASS:		ah	- ContrastChangeType
;			al	- change level
;	RETURN:		al	- actual contrast set
;			carry set if not supported
;	DESTROYS:	nothing
;
;	Sets or modifies the contrast level of the display, if
;	possible.  The available contrasts are represented as a set of
;	values between 0 and 255 where 0 is minimum contrast and 255
;	is maximum contrast.
;
;	If ah is CCT_SET, the contrast level will be set to the nearest
;	level to al supported by the hardware.  If ah is CCT_INCREASE or
;	CCT_DECREASE, al is the number of steps by which to increase or
;	decrease the contrast.  For example, if the hardware supports
;	contrast levels 0, 64, 128, 192 and 255, and the current contrast
;	is 64:
;		VID_ESC_SET_CONTRAST(CCT_SET, 150) -> 128
;		VID_ESC_SET_CONTRAST(CCT_INCREASE, 2) -> 192
;		VID_ESC_SET_CONTRAST(CCT_DECREASE, 2) -> 0
;
;	To get the current contrast use ah=CCT_INCREASE, al=0.
;

VID_ESC_UNSET_DEVICE			enum	VidEscCode
;	PASS:		nothing
;	RETURN:		nothing
;	DESTROYS:	nothing
;
;	Resets the driver to having no device selected.  One use for
;	this is to allow the driver to exit without attempting to
;	reset the device or return to text mode.
;

VID_ESC_GET_HORIZ_POS_PARAMS		enum	VidEscCode
;	Get parameters for horizontal image position preference setting (ie.
;	centering).  Currently only max value is returned.
;
;	PASS:		nothing
;	RETURN:		di	- unchanged if supported
;				dx	- max value
;			di	- 0 if not supported
;	DESTROYS:	nothing

VID_ESC_GET_VERT_POS_PARAMS		enum	VidEscCode
;	Get parameters for vertical image position preference setting (ie.
;	centering).  Currently only max value is returned.
;
;	PASS:		nothing
;	RETURN:		di	- unchanged if supported
;				dx	- max value
;			di	- 0 if not supported
;	DESTROYS:	nothing

VID_ESC_SET_HORIZ_POS			enum	VidEscCode
;	Set horizontal image position (centering).
;
;	PASS:		ax	- new value
;	RETURN:		di	- unchanged if supported
;			di	- 0 if not supported
;	DESTROYS:	ax

VID_ESC_SET_VERT_POS			enum	VidEscCode
;	Set vertical image position (centering).
;
;	PASS:		ax	- new value
;	RETURN:		di	- unchanged if supported
;			di	- 0 if not supported
;	DESTROYS:	ax

VID_ESC_SET_TV_SUBCARRIER_FREQ	enum	VidEscCode
;	Set which TV subcarrier frequency to use.  Drivers can support an
;	alternate frequency which may improve image quality on some TVs.
;
;	PASS:		ax	- zero if use default freq, non-zero if use
;				  alternate freq.
;	RETURN:		di	- unchanged if supported
;			di	- 0 if not supported
;	DESTROYS:	ax

VID_ESC_SET_BLACK_WHITE		enum	VidEscCode
;	Turns the display into black & white.  This may improve image clarity
;	on some displays.
;
;	PASS:		ax	- zero if display color, non-zero if display
;				  B&W.
;	RETURN:		di	- unchanged if supported
;			di	- 0 if not supported
;	DESTROYS:	ax

VID_ESC_UPDATE_DEVICE		enum	VidEscCode
;	Reinit the current device, to apply changed host resolution for 
;       instance.
;
;	PASS:		nothing
;	RETURN:		di	- unchanged if supported
;			di	- 0 if not supported
;	DESTROYS:	nothing



;
; These are the flags for video functions that are set via Preference options.
; Used both by video drivers and Video Module in Preferences (Prefvid).
;
VidPrefOptionFlags	record
	:14
	VPOF_SET_BLACK_WHITE:1		; VID_ESC_SET_BLACK_WHITE
	VPOF_SET_TV_SUBCARRIER_FREQ:1	; VID_ESC_SET_TV_SUBCARRIER_FREQ
VidPrefOptionFlags	end

;---------------------------------------------------------------------------
;		Video driver info block
;---------------------------------------------------------------------------

;	Constants used in the structure


;------------------------------------------
;	device technology
;------------------------------------------

DeviceTech 		etype word
DT_RASTER_DISPLAY		enum DeviceTech
DT_RASTER_PRINTER		enum DeviceTech
DT_RASTER_CAMERA		enum DeviceTech
DT_VECTOR_PLOTTER		enum DeviceTech
DT_MEMORY		enum DeviceTech

;------------------------------------------
;	Device Info structure
;------------------------------------------

	; define an enum type to use internally

VideoDevice	etype	word, 0, 2


;	NOTE:	the default values provided are for a simple raster graphics
;		display
VideoDriverInfo	struct

    VDI_common	DriverExtendedInfoStruct <>

    ; general info, version number

    VDI_tech		DeviceTech DT_RASTER_DISPLAY	; device technology 
    VDI_verMaj		byte			; driver major version number
    VDI_verMin		byte			; driver minor version number

    ; resolution information

    VDI_pageH		word			; page height, in pixels 
    VDI_pageW		word			; page width, in pixels 
    VDI_vRes		word			; vertical res, in dots/inch
    VDI_hRes		word			; horizontal res, in dots/inch
    VDI_bpScan		word			; bytes per scan line

    ; color information

    VDI_nColors		byte	1		; #bits of color (nPlanes*nBits)
    VDI_nPlanes		byte	1		; # color planes
    VDI_nBits		byte	1		; # adj bits/pixel 
    VDI_wColTab		byte			; Color table entry width,bits
    VDI_bmFormat	BMType BMF_MONO		; We need the MASK bit too

    ; other information

    VDI_displayType 	DisplayType		; general type of display
    VDI_device		word			; currently in-use device
VideoDriverInfo	ends

;---------------------------------------------------------------------------
;		Flags to VID_SET_XOR
;---------------------------------------------------------------------------

VisXORFlags	record
    VXF_X_POS_FOLLOWS_MOUSE:1		;X position follows mouse X
    VXF_Y_POS_FOLLOWS_MOUSE:1		;Y position follows mouse Y
    VXF_AX_PARAM_FOLLOWS_MOUSE:1	;AX param position follows mouse X
    VXF_BX_PARAM_FOLLOWS_MOUSE:1	;BX param position follows mouse Y
    VXF_CX_PARAM_FOLLOWS_MOUSE:1	;CX param position follows mouse X
    VXF_DX_PARAM_FOLLOWS_MOUSE:1	;DX param position follows mouse Y
    :10
VisXORFlags	end

VisXORParams	struct
    VXP_ax		word			;ax region parameter
    VXP_bx		word			;bx region parameter
    VXP_cx		word			;cx region parameter
    VXP_dx		word			;dx region parameter
    VXP_mousePos	Point			;mouse pos for initial xor
VisXORParams	ends
;---------------------------------------------------------------------------
;		Stucture for passing stuff to VidPutString
;---------------------------------------------------------------------------

VPS_params	struct
    VPS_numChars	word		;seg addr of font
    VPS_stringSeg	word		;seg addr of text string
VPS_params	ends


	; structure used by GrCreateBitmap and vidmem
EditableBitmap	struct
    EB_header	HugeArrayDirectory <>		; HugeArray header
    EB_bm	CBitmap <>			; Complex Bitmap structure
    EB_flags	BitmapMode			; one-word record
    EB_color	hptr.ColorTransfer		; color correction table
    EB_device	VideoDriverInfo <>		; device info
EditableBitmap	ends

EndDriver	video
