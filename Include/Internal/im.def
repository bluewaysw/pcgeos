COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		im.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines the interface to the IM module of the kernel.

	$Id: im.def,v 1.1 97/04/04 14:15:36 newdeal Exp $

------------------------------------------------------------------------------@

SetDef	__IM

StartKernel

include Internal/semInt.def
include Objects/processC.def

;-----------------------------------------------------------------------------
;	Exported routines
;-----------------------------------------------------------------------------

global	ImAddMonitor:far
global	ImRemoveMonitor:far

global	ImInfoInputProcess:far

global	ImGrabInput:far
global	ImReleaseInput:far

global	ImSetDoubleClick:far
global	ImInfoDoubleClick:far

global	ImSetPtrMode:far
global	ImForcePtrMethod:far

global	ImSetPtrWin:far
global	ImGetPtrWin:far

global	ImPtrJump:far
global	ImStartMoveResize:far
global	ImStopMoveResize:far
global	ImConstrainMouse:far
global	ImUnconstrainMouse:far

global	ImBumpMouse:far
global	ImGetMousePos:far
global	ImGetButtonState:far

; Removed as INPUT_MESSAGE_RECEIPT in imConstant.def is set to FALSE
;global	ImMethodButtonReceipt:far
;global	ImGetButtonBacklog:far
;global	ImMethodKbdCharReceipt:far
;global	ImGetKbdCharBacklog:far

global	ImSetPtrImage:far

global	ImStartPenMode:far
global	ImEndPenMode:far
global	ImInkReply:far

global	ImSetPtrFlags:far
global	ImGetPtrFlags:far

global	ImSetMouseBuffer:far

;---------------------------------------------------------------------------
;	Defaults
;---------------------------------------------------------------------------

;
; Initial location for mouse (As video driver sees it, before UI kicks
; it someplace)
;
IM_DEFAULT_MOUSE_X_POS =	0
IM_DEFAULT_MOUSE_Y_POS =	0
;
; Time/Distance tolerance for user to do a Press-Release-Press, & still
; be considered "double click"
;
IM_DEFAULT_DOUBLE_CLICK_TIME = 20	; initial double-click time (1/60ths)
					; (Currently 1/3 of a second)
IM_DEFAULT_DOUBLE_CLICK_DISTANCE = 12	; initial distance tolerance for
					;	double clicks in X & Y

;
; Time/Distance tolerance for user to do a Press-Release, & still be
; considered just a "Click", & not a "Drag select" operation.
; NOTE:  Current values are set at aprox. 2/3 of those for the DOUBLE_CLICK
; criteria.  This for the simple reason that there are 2/3 of the # of
; button changes required from the user (2 instead of 3 to "Click" -vs-
; "Double-click" -- Doug
;
IM_DEFAULT_DRAG_TIME = 14		; initial drag time (1/60ths)

IM_DEFAULT_DRAG_DISTANCE = 10		; initial distance tolerance for
					;	 drags in X & Y

;
; Default screen saver blank delay
;
IM_DEFAULT_SCREEN_SAVER_COUNT  =       15  ; set to 15 minutes initially


;---------------------------------------------------------------------------
;	Limits
;---------------------------------------------------------------------------

IM_IM_MAX_BUTTONS		= 4	; max # of buttons we can support
					; NOTE: this is fixed, & can't be
					; changed w/o modifying code &
					; input structures


;------------------------------------------------------------------------------
;	Monitors
;------------------------------------------------------------------------------

;
; Standard Monitor Levels
;
ML_DRIVER	=	20	; For extra processing by driver
ML_COMBINE	=	40	; For input combination
ML_PTR_PERTURB	=	60	; For pointer perturbations
ML_INK		=	80	; For ink capture
ML_OUTPUT	=	100	; For final output

;
; Flags passed to & from monitors
;
MonitorFlags	record
	MF_REMOVE_WHEN_EMPTY:1
	MF_REMOVE_IMMEDIATE:1
	:3
	MF_IN_MONITOR:1		; Flag set if in monitor currently
	MF_MORE_TO_DO:1		; Flag indicating Monitor has more data to be
				; passed along (Initially returned by Monitor)
	MF_DATA:1		; Flag indicating Monitor is returning data.
MonitorFlags	end

Monitor	struct
    M_monRoutine	fptr.far	; Address to call
    M_priority		sbyte		; priority in chain
    M_flags		MonitorFlags	; internal flags
    M_prevMonitor	fptr.Monitor	; Address of prev mon
    M_nextMonitor	fptr.Monitor	; Address of next mon
    M_semMonitor	Semaphore	; Semaphore for access to monitor code
					; (held by IM until fully unlinked)
Monitor	ends

;------------------------------------------------------------------------------
; 	Ptr mode/flags
;------------------------------------------------------------------------------

; Flags passed to ImSetPtrMode in si:

PtrMode	record
	PM_ON_ENTER_LEAVE:1		; if set, then ptr events will only be
					; sent when mouse crosses inside or
					; outside of the rectangle passed.  If
					; clear, ptr events are always sent.
	:15
PtrMode	end


; Record passed to ImSetPtrFlags in al & ah:

PtrFlags	record
	PF_DISEMBODIED_PTR:1
	; Non-zero if mouse ptr image shouldn't follow
	; the mouse.  Used for keyboard-only & pen
	; systems where mouse isn't normally shown,
	; except to show busy status in center of
	; screen.

	PF_HIDE_PTR_IF_NOT_OF_ALWAYS_SHOW_TYPE:1
	; Set if IM code should call video driver to HIDE mouse ptr image
	; except while showing BUSY cursor.  (Actually allows any PointerDer
	;having PDW_ALWAYS_SHOW_PTR set to be seen)

	:6

PtrFlags	end

;------------------------------------------------------------------------------
;	Screen XOR
;------------------------------------------------------------------------------


;
; Screen Xor flags
;
XorFlags record
	XF_RESIZE_LEFT:1	;set if resizing the left edge
	XF_RESIZE_TOP:1		;set if resizing the top edge
	XF_RESIZE_RIGHT:1	;set if resizing the right edge
	XF_RESIZE_BOTTOM:1	;set if resizing the bottom edge
	XF_FLIP_HORIZONTAL:1	;set if horizontal flipping is allowed when
				;resizing
	XF_FLIP_VERTICAL:1	;set if vertical flipping is allowed when
				;resizing
	XF_END_MATCH_ACTION:1	;set if screen xor should end on matching
				;button action
	XF_PTR_OFF_LEFT:1	;set if initial left edge is relative to
				;pointer
	XF_PTR_OFF_RIGHT:1	;set if initial top edge is relative to pointer
	XF_PTR_OFF_TOP:1	;set if initial right edge is relative to
				;pointer
	XF_PTR_OFF_BOTTOM:1	;set if initial bottom edge is relative to
				;pointer
	XF_RESIZE_PENDING:1	;set if waiting for user to indicate which
				;	direction to resize in (ignores mouse)
				;set if button action doesn't stop XOR
	XF_NO_END_MATCH_ACTION:1
	:3
XorFlags end

XOR_RESIZE_ALL		equ	mask XF_RESIZE_LEFT or mask XF_RESIZE_RIGHT \
				or mask XF_RESIZE_TOP or mask XF_RESIZE_BOTTOM

;------------------------------------------------------------------------------
;	Input Backlog
;------------------------------------------------------------------------------

InputBacklog	record
	:10
	IB_BUTTON_3:1
	IB_BUTTON_2:1
	IB_BUTTON_1:1
	IB_BUTTON_0:1
	IB_KBD_PRESSES:1
	IB_KBD_RELEASES:1
InputBacklog	end

;------------------------------------------------------------------------------
; Input Manager process class
;------------------------------------------------------------------------------

IMClass		class	ProcessClass

;------------------------------------------------------------------------------
; Mouse/Kbd/Other raw input methods
;------------------------------------------------------------------------------

MSG_IM_BUTTON_CHANGE		message
;
; Sent from pointer drivers to indicate a button has changed state.
; Transformed in the input-monitor chain to the appropriate MSG_META_BUTTON
;
; Pass:		cx:dx = time stamp
;		bp low = button info
;		bp high = unused
;

MSG_IM_PTR_CHANGE		message
;
; Sent from pointer drivers to indicate a pointer-position change.
; Transformed in the input-monitor chain to the appropriate MSG_META_PTR
;
; Pass: 	cx = x info
;		dx = y info
;		bp = PtrInfo
;
PtrInfo	record
	PI_absX:1			;set if x pos is absolute
	PI_absY:1			;set if y pos is absolute
	PI_time:14			;low 14 bits of count when
PtrInfo	end


MSG_IM_PRESSURE_CHANGE		message
;
; Reserved for future use

MSG_IM_DIRECTION_CHANGE		message
;
; Reserved for future use

MSG_IM_KBD_SCAN			message
;
; Sent from keyboard drivers to indicate a state change in a key
; Transformed in the input-monitor chain to the appropriate
; MSG_META_KBD_CHAR
;
; Pass: 	cx = scan code
;		dx = BW_TRUE (press) or BW_FALSE (release)
;		bp = unused

;------------------------------------------------------------------------------
; Internal
;------------------------------------------------------------------------------

MSG_IM_STOP_XOR		message	private
;
; Method sent internally to turn off the screen XOR image
;

MSG_IM_EXIT_PEN_MODE	message	private
;
; Method sent to exit from pen mode on the IM thread
;

;------------------------------------------------------------------------------
; Screen saver
;------------------------------------------------------------------------------

MSG_IM_ENABLE_SCREEN_SAVER		message
;
; This method is provided to enable screen blanking support
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_IM_DISABLE_SCREEN_SAVER		message
;
; This method is provided to disable screen blanking support
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_IM_INSTALL_SCREEN_SAVER		message
;
; This method is provided to change the action taken when the screen
; blank delay has expired.  A new OD is passed, along with the method number
; to use.  When screen blank is enabled and SAVER_DELAY minutes have expired
; since the last user input, the passed message "begin method" is sent
; to the passed OD.  The method "end method" is sent when the display
; is re-enabled.  Use MSG_FLOW_REMOVE_SCREEN_SAVER to remove the OD reference
; when it will no longer be available.
;
;	Pass:	cx:dx	- OD of screen saver to install
;		si	- begin method
;		bp	- end method
;
;	Return:	nothing
;

MSG_IM_REMOVE_SCREEN_SAVER		message
;
; This method is provided to change the action taken when the screen
; blank delay has expired to the default action (blank the screen).
;
;	Pass:	cx:dx	- OD of screen saver to remove
;	Return:	nothing
;

MSG_IM_GET_SCREEN_SAVER_DELAY		message
;
; This method is provided to fetch the current screen saver delay
;
;	Pass:	nothing
;	Return:	ax	- count, in minutes
;	[Responder:]
;		if ax == 0,
;		   cx = count in 3.75 sec units( so for 1 min, cx = 16 )
;

MSG_IM_SET_SCREEN_SAVER_DELAY		message
;
; This method is provided to change the delay between the last user
; input and the screen blanking action.
;
;	Pass:	cx	- new count, in minutes, must be 2 or larger
;			  ( A time-out of 1 will blank every minute regardless
;			    of user activity)
;	[Responder:]
;		if cx == 0,
;		   dx = count in 3.75 sec units( so for 1 min, cx = 16 )
;	Return:	nothing
;	[Responder:]
;		dx	- previous value in 3.75 sec units
;

MSG_IM_SCREEN_SAVER_COUNTDOWN		message
;
; This method is invoked by the countdown timer that is used to time
; the delay before blanking the screen.
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_IM_SCREEN_SAVER_COUNTDOWN_REACHED_ZERO	message
;
; This method is called from the MSG_IM_SCREEN_SAVER_COUNTDOWN handler when
; the count has reached zero.  Activates screen saver or power management.
;
;	Pass:	nothing
;	Return:	nothing
;


MSG_IM_ACTIVATE_SCREEN_SAVER			message
;
; Causes timer to be zero'd out & screen saver immediately activated.
; Handy for testing screen savers.
;
;	Pass:	nothing
;	Return:	nothing
;

MSG_IM_DEACTIVATE_SCREEN_SAVER			message
;
; Cause screen to be unblanked, etc., if screen saver decides it shouldn't
; have been activated.
;
; 	Pass:	nothing
; 	Return:	nothing
;

;-----------------------------------------------------------------------------
;	Pen messages
;-----------------------------------------------------------------------------

MSG_IM_INK_REPLY_NEGATIVE			message private
;
;	Message sent to the IM to tell it that the current START_SELECT
;	stream should be ink
;
;	PASS: nothing
;

MSG_IM_INK_REPLY_POSITIVE			message private
;
;	Message sent to the IM to tell it that the current START_SELECT
;	stream should be ink
;
;	PASS: cx:dx - gesture callback (or 0 if none)
;	      bp - gstate to draw through (or 0 if none)
;	      si - width/height of brush
;

MSG_IM_INK_TIMEOUT			message private
;
;	Message sent to the IM to tell it that the ink timeout timer has
;	expired.
;

MSG_IM_REDRAW_AREA		message private
;
;	Message sent to the im to redraw the screen via the queue.
;
;	Pass: ss:[bp] - Inval rect in screen coords
;


;-----------------------------------------------------------------------------
;	Messages added later
;-----------------------------------------------------------------------------

MSG_IM_START_XOR		message	private
;
; Method to start screen XOR image
;
; Pass:		cx:dx	- ptr to StartMoveResizeParams
; Return:	carry	- clear of screen xor started OK
;			 set if nothing done (since xor=already in progress)
;

MSG_IM_READ_DIGITIZER_COORDS	message
;
; Sent from pointer drivers to indicate that the InkInputMonitor should
; read some digitizer coordinates from the shared circular buffer.
;
; Pass:		bp = ReadDigitizerCoordsFlags
;		     If RDCF_STROKE_DROPPED is clear:
;			cx = number of coordinates to read (may be zero)
; Return:	nothing
;

;-----------------------------------------------------------------------------
;	Mouse Wheel messages
;-----------------------------------------------------------------------------

MSG_IM_MOUSE_WHEEL_VERTICAL message
; Mouse wheel change message, sent from the Mouse Driver to the IM.
; PASS: wheel data in DH
;

ReadDigitizerCoordsFlags	record
	RDCF_STROKE_TRUNCATED:1
	; set if the circular buffer filled up during a stroke and the
	; stroke data was terminated early

	RDCF_STROKE_DROPPED:1
	; set if the circular buffer was full when a stroke started which
	; means no coordinates were stored for this stroke

	:14
ReadDigitizerCoordsFlags	end

IMClass		endc




;
;	HardIconBarFunction is passed with MSG_META_NOTIFY with
;	GWNT_HARD_ICON_BAR_FUNCTION
;

HardIconBarFunction	etype	word
HIBF_TOGGLE_EXPRESS_MENU			enum HardIconBarFunction

HIBF_TOGGLE_MENU_BAR				enum HardIconBarFunction

HIBF_DISPLAY_FLOATING_KEYBOARD			enum HardIconBarFunction

HIBF_DISPLAY_HELP				enum HardIconBarFunction

HIBF_ROTATE_DISPLAY				enum HardIconBarFunction

HIBF_POWER_ON_OFF				enum HardIconBarFunction

HIBF_UP_ARROW					enum HardIconBarFunction

HIBF_DOWN_ARROW					enum HardIconBarFunction


EndKernel
