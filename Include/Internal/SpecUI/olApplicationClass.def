COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1994 -- All Rights Reserved

PROJECT:	SPUI
MODULE:		
FILE:		olApplicationClass.def

AUTHOR:		David Litwin, Oct  6, 1994

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	dlitwin	10/ 6/94		Initial revision


DESCRIPTION:
	Definition of OLApplicationClass.


	OLApplication is the OPEN LOOK Application object.  Besides
	being a generic container for other generic objects in the
	application UI, the OL specific version has a major role in
	orchestrating the overall application's interaction with the
	system & in managing the windows under the application.
		
	$Id: olApplicationClass.def,v 1.2 98/07/10 10:53:10 joon Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


OLApplicationClass	class	VisContentClass
	uses	GenApplicationClass

MSG_OL_APP_NAVIGATE_TO_NEXT_WINDOW	message
;
; Navigation function to move to "Next" window of the application.
; If there is a modal dialog box up, no action is taken.   Otherwise, 
; switch to next available window (see code for details).
;

MSG_OL_APP_DO_DIALOG_RESPONSE		message
;
; Sent to us when a MSG_GEN_APPLICATION_DO_STANDARD_DIALOG finishes.
;

MSG_OL_APP_TIMED_DIALOG_TIMER_EXPIRED	message
;
; Sent to us when a timeout occurs for a
; MSG_GEN_APPLICATION_DO_STANDARD_TIMED_DIALOG.
;
; Pass:		bp	= timer ID
; Return:	nothing
; Destroyed:	ax, cx, dx, bp
;

MSG_OL_APP_UPDATE_TASK_ENTRY		method

;----------------------------------------------------
;		Timer utility methods
;----------------------------------------------------


MSG_OL_APP_START_TIMER		message
;
; Allows an object that has the gadget exclusive to start up a timer for
; whatever purpose it might want.  Application will send a MSG_TIMER_EXPIRED
; to the OD passed.   If at some point the calling object loses the gadget
; exclusive, it MUST call MSG_OL_APP_STOP_TIMER to clear out its timer.
; This is actually a one-shot; it will not cycle continuously.  
;
; Pass:		cx:dx -- OD to send MSG_TIMER_EXPIRED
;		bp    -- number of ticks to wait until sending 
;			 MSG_TIMER_EXPIRED, or zero to use the standard
;			 olGadgetRepeatDelay (set in the .ini file)
;		
; Return:	nothing
;
; (For commented out IM-queue version only:  The calling
; object must also have the active grab, and must handle a MSG_GADGET_
; REPEAT_PRESS method, sending it back to the application object.  It sounds
; complicated but isn't too bad -- see the scrollbar code as an example (avert
; your eyes from the rest of the scrollbar code, though :).
;
	
MSG_OL_APP_STOP_TIMER		message
;
; Turns off the current timer.  Must be sent by the object that started the
; timer if it loses the gadget exclusive.
;
; Pass:		cx:dx -- OD of timer to stop
; Return:	nothing
;
	
MSG_TIMER_EXPIRED	message	MetaUIMessages
;
; Notification sent to the OD when a previously timer has run out. 
;
; Pass:		nothing
; Return:	nothing
;
	
MSG_OL_APPLICATION_GEOS_TASKS_LIST_ITEM_CREATED	message
;
; Response message for our invocation of
; MSG_EXPRESS_MENU_CONTROL_CREATE_ITEM.
;
; Pass:		ss:bp = CreateExpressMenuControlItemResponseParams
; Return:	nothing
;

MSG_OL_APPLICATION_ADD_TO_FIELD_TASK_LIST	message
;
; Used to add GEOS Tasks Lists entry to Express Menu Controls associated with
; the passed field.
;
; Pass:		^lcx:dx = field
; Return:	nothing
;

MSG_OL_APPLICATION_QUIT				message
;
; Handle F3 by quitting application (in UILM_TRANSPARENT mode, just shutdown).
;
; Pass:		nothing
; Return:	nothing
;

MSG_OL_APP_NAVIGATE_TO_NEXT_APP			message
;
; Navigation function to move to "Next" application in field.
;
; Pass:	^hbp = event to dispatch when app to navigate to is found
;

MSG_OL_APP_TRY_NAVIGATE_TO_APP			message
;
; Try to navigate to this app.  Will navigate to next app if this
; app isn't focus/interactable.
;
; Pass:	^hbp = event to dispatch when app to navigate to is found
;


if _PRINT_SCREEN
MSG_OL_APP_PRINT_SCREEN				message
;
; Does a Screen dump to the printer
;
; Pass: nothing
; Return: nothing
; Destroy: ax, cx, dx, bp
;
endif


if ANIMATED_BUSY_CURSOR
MSG_OL_APP_UPDATE_PTR_IMAGE			message
;
; Used to animate busy cursor.
;
endif


if TOOL_AREA_IS_TASK_BAR
MSG_OL_APP_UPDATE_WINDOWS_FOR_TASK_BAR		message
;
; Update windows to account for change in taskbar position
;
; Pass:		nothing
; Return:	nothing
; Destroyed:	ax, cx, dx, bp
;
endif

MSG_OL_APP_GET_IMPLIED_WIN			message
;
; Get implied window.
;
; Pass:		nothing
; Return:	^lcx:dx = implied win OD
;		bp = implied win
; Destroyed:	ax
;

MSG_OL_APP_APPLY_FIELD_SIZE_CHANGE		message
;
; Make alls apps of a field apply field size change.
;
; Pass:		cx - new field width
;               dx - new field height
; Return:	nothing
; Destroyed:	ax
;

;----------------------------------------------------
;	hints
;----------------------------------------------------


;----------------------------------------------------
;	Vardata
;----------------------------------------------------

;----------------------------------------------------
;	Constants & Structures
;----------------------------------------------------

AppFlowFlags	record
	AFF_FLOW_HOLDING_INPUT_FOR_APP:1
	; Set if we've called FlowHoldUpInput, but not FlowRestoreInput yet.
	; Used exclusively by the routine OLAppUpdateFlowHoldUpState

	AFF_FOCUS_APP:1
	; Set if this is the current active application

	AFF_OVERRIDE_INPUT_RESTRICTIONS:1
	; Set if current active/implied window requests that input hold up,
	; ignore & busy states be overriden, so that the user can interact
	; with it.

	:5
AppFlowFlags	end

;----------------------------------------------------
;	OLApplication Instance structure
;----------------------------------------------------

    OLAI_impliedWin		MouseGrab
    ; Window of application that mouse is over

    OLAI_modalWin		optr
    ; InputOD of current modal window within application, if any, whether
    ; system or app modal.  0 if none.
    ; PLEASE NOTE that an OD may have the modal window exclusive while
    ; its window is not on screen.  This allows a window to cleanly close,
    ; & then transfer the modal exclusive to a different window.
    ; If APP MODAL, the window must have priority WIN_PRIO_MODAL & be 
    ; placed on the field that the application resides on.
    ; If SYS MODAL, the window must also have priority WIN_PRIO_MODAL, but
    ; must additionally have it's own LAYER_ID, & have a layer priority
    ; of LAYER_PRIO_MODEL.  It must be placed on the system default screen.

    OLAI_fieldWin		hptr
    ; Handle of field win this app is placed on

    OLAI_screenWin		hptr
    ; Handle of default screen window, where any system-modal dialogs that
    ; this app has should be placed.

    OLAI_flowFlags		AppFlowFlags
    ; Flags used to moniter input flow

    OLAI_busyCount		word
    ; # of outstanding requests for the application to be marked as "Busy",
    ; which causes only a cursor change while over the application.

if ANIMATED_BUSY_CURSOR
    OLAI_busyTimer		hptr.HandleTimer
    OLAI_busyTimerID		word
endif

    OLAI_holdUpInputCount	word
    ; # of outstanding requests for the application to be marked as requiring
    ; all input for it to be held up.

    OLAI_ignoreInputCount	word
    ; # of outstanding requests for the application to EAT all input (i.e.,
    ; enter a fake modal state, in which the application blocks input to
    ; all windows, even though there is no active window

    OLAI_completelyBusyCount	byte
    ; # of outstanding requests for any modal window to be marked as "Busy",
    ; which causes only a cursor change while over an app modal window

    OLAI_nonModalFocus	optr
    ; Optr of last object to have or request the focus exclusive, that was
    ; not for the implementation of a modal window state.

;   OLAI_focusExcl	FTVMCGrab <>
;   Re-use VCNI_focusExcl
    ; Top node within application for Focus hiearchy.  OD holds
    ; the window within the application which is the focus window -
    ; that is, it modifies it's appearance to the user to indicate that
    ; it is the place that it is active, & allows 1 of the text objects
    ; within it to grab the keyboard, & display a text insertion point, &
    ; any selected area within the text.

;   OLAI_targetExcl	FTVMCGrab <>
;   Re-use VCNI_targetExcl
    ; Top node within the application for Target hiearchy.  OD holds
    ; the window within the application which the user has selected, or made
    ; a selection in, for making some operation.

    OLAI_modelExcl	FTVMCGrab <>
    ; Override hierarchy for MSG_META_SEND_CLASSED_EVENT "TO_MODEL" option.
    ; Such messages are normally sent down the Target hierarchy, but if an
    ; object has grabbed this exclusive, such messages will be sent here 
    ; instead.  Should only be grabbed by legitimate current "Model" objects
    ; if they can't be on the Target hiearchy for some reason.
    ; Objects gaining this exclusive will receive
    ; "MSG_META_GAINED_MODEL_EXCL", & those losing it
    ; "MSG_META_LOST_MODEL_EXCL".

    OLAI_appMenuItems 		lptr
    ; ChunkArray of CreateExpressMenuControlItemResponseParams structures which
    ; holds the GEOS tasks list items we've created along with the Express Menu
    ; Control objects for which we've created them.

OLAStdDialog	struct
    OLASD_next		lptr.OLAStdDialog
    OLASD_response	ActionDescriptor
    OLASD_summons	optr
    OLASD_timerHandle	word
    OLASD_timerId	word		; 0 if dialog not timed
OLAStdDialog	ends

    OLAI_stdDialogs		lptr.OLAStdDialog
    ; Chain of MSG_GEN_APPLICATION_DO_STANDARD_DIALOG dialog box summons,
    ; destination OD and method
    
    OLAI_timerOD		optr	
    OLAI_timerID		word
    OLAI_timerHandle		word
    ; Instance data used by timer methods.  

    OLAI_units			AppMeasurementType
    ; Current units used by applications

OLApplicationClass	endc

;------------------------------------------------------------------------------
;	OLAppTaskItemClass
;------------------------------------------------------------------------------
;
; This is the class we pass to the Field when creating a Task Item to
; represent us in the Express menu.  Running under the global UI thread,
; it will immediately be able to raise us to the top, give us higher CPU
; priority, etc.
;
OLAppTaskItemClass	class	GenItemClass

MSG_OL_APP_TASK_ITEM_SET_OPERATING_PARAMS	message
; Pass:         ^lcx:dx	- app object
;               bp      - parent window
; Return:	nothing
; Detroyed:	ax, cx, dx, bp

MSG_OL_APP_TASK_ITEM_SET_MONIKER		message
; Pass:		^hcx - block containing text vis moniker
;		(block is freed afterwards)
; Return:	nothing
; Destroyed:	ax, cx, dx, bp

MSG_OL_APP_TASK_ITEM_SET_EXCLUSIVE		message
; Pass:		cx - TRUE to set exclusive
; Return:	nothing
; Destroyed:	ax, cx, dx, bp


	OLATI_appObj		optr
	OLATI_parentWin		hptr.Window

OLAppTaskItemClass	endc
