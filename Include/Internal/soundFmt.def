COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC/GEOS Sound System	
MODULE:		Sound Device Driver
FILE:		soundFmt.def

AUTHOR:		Todd Stumpf, Sep 14, 1992

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TS	9/14/92		Initial revision
	RainerB	09/15/2024	Some missing comments added

DESCRIPTION:
	This file contains the structure and record declarations for
	the envelope formats supported by the PC/GEOS library.  For
	more information look at soundDrv.def or the sound library
	itself.
			
	$Id: soundFmt.def,v 1.1 97/04/04 14:16:25 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@
;-----------------------------------------------------------------------------
;	Sound Blaster Instrument Description Data Structures
;-----------------------------------------------------------------------------
	;
	;  The timbre setting contains the information to generate
	;  the color of the sound.
	;	TS_AM = amplitude modulation enabled (tremelo affect)
	;	TS_VIB = vimbrato modulation enabled (vibrato affect)
	;       TS_ET = envelope type 0 = diminishing (bell)
	;			      1 = continuing  (organ)
	;	TS_KSR = envelope shortening
	;	TS_MULTIPLE = multiplies basic frequency of mod/car
	;		 0 = x.5	1 = x1		2 = x2
	;		 3 = x3		4 = x4		5 = x5
	;		 6 = x6		7 = x7		8 = x8
	;		 9 = x9		a = x10		b = x10
	;		 c = x12	d = x12		e = x15
	;		 f = x15
TimbreSetting	record
	TS_AM		:1 = 0
	TS_VIB		:1 = 0
	TS_ET		:1 = 0
	TS_KSR		:1 = 0
	TS_MULTIPLE	:4 = 0
TimbreSetting	end

TS_ET_CONTINUING	equ 0x20
TS_ET_DIMINISHING	equ 0	


	;  The output setting contains information about the volume
	;  of the note.
	;	OS_KSL	= Sets the rate at which higher notes get
	;			there volume diminished.
	;			0 = volume decreases slowly as notes
	;				rise in pitch
	;			1, 2 .. decreases faster ..
	;		  	3 = volume descreases rapidly as notes
	;				rise in pitch
	;
	;       OS_TOTAL_LEVEL = The attenuation level of maximum output.
	;		This is an attenuation level, not a volume level,
	; 		so the larger the number, the quieter the voice.
	;		The total level is the value which is reached
	;		at the end of the attack, and the sustain level
	;		is a fraction of the this level.
	;		Carrier total level dictates the amplitude of
	;		the sound, and the modulator output indicates
	;		the amound of warble.
OutputSetting	record
	OS_KSL		:2 = 0
	OS_TOTAL_LEVEL  :6 = 0
OutputSetting	end


	;  The Attack/Decay/Sustain/Release is the standard way of
	;  describing a sound envelope.  The greater the value the
	;  steaper the slant of that section of the envelope
AttackDecaySetting	record
	ADS_ATTACK	:4 = 0
	ADS_DECAY	:4 = 0
AttackDecaySetting	end


	;  The sustian value is either the decibel level where a
	;  diminishing sound turns from decay to release or 
	;  level of the sound that decay turns into sustain.
	;  Therefore, the higher the value of sustain, the lower
	;  the volume it will sustain at, or the quieter it will
	;  be before it enters the release
SustainReleaseSetting	record
	SRS_SUSTAIN	:4 = 0
	SRS_RELEASE	:4 = 0
SustainReleaseSetting	end


	;  The feedback setting describes how the signals of
	;  the two waves (the carrier and the modulator) are
	;  connected.
	;	FBS_FEEDBACK = modulation of modular wave which gets
	;			added to the incoming signal of the
	;			modulator wave.  clear as mud.
	;
	;
	;	FBDS_CONNECTION = 1
	;	-------------------
	;
	;	mod --->(+)----> [modulator] ------>(+)--->[carrier]-->out
	;      freq.	 ^                     |     ^
	;		 |                     |     |
	;		 |_____________________|    car
	;					   freq.
	;
	;
	;	FBDS_CONNECTION = 0
	;	-------------------
	;
	;	mod --->(+)----> [modulator] -----
	;      freq.     ^                    |  |
	;		 |                    |  |
	;		 |____________________|  |
	;					 |
	;					(+)----> out
	;					 |
	;	car -----------> [carrier]--------	
	;      freq.
	;
FeedBackSetting		record
	:4
	FBS_FEEDBACK	:3 = 0
	FBS_CONNECTION	:1 = 0
FeedBackSetting		end


	;  The Wave select setting determines the form of the signal
	;  that gets generated.
	;
	;   FSS_WAVE 0 = normal sin wave
	;
	;   FSS_WAVE 1 ={ sin(x)    if sin(x) > 0    
	;		{   0       if sin(x) < 0
	;
	;   FSS_WAVE 2 = | sin(x) |
	;
	;   FSS_WAVE 3 ={ |sin(x)|  if 0 < x < pi/2 or pi < x < 3pi/2
	;		{  0        otherwise
	;
WaveSelectSetting	record
	:6
	FSS_WAVE	:2 = 0
WaveSelectSetting	end

FSS_WAVE_SINE		equ 0
FSS_WAVE_POS_SINE	equ 1
FSS_WAVE_ABS_SINE	equ 2
FSS_WAVE_1ST_SINE	equ 3


	;
	;  Creative labs defines what it calls a Sound Blaster Instrument
	;  file.  This is the layout of all the necessary information to
	;  configure a SB voice to sound like a specific instrument.
	;  These constants were taken from the Sound Blaster development
	;  kit.
	;  The actual voice envelope information takes up 11 bytes of
	;  space.  Each byte is just the value that should be loaded into
	;  a specific register of the board.  This makes it very easy
	;  to use for the Sound Blaster, but somewhat obscure.  As each
	;  byte contains much information, the corropsonding register
	;  records are included here to allow the production of your own
	;  voice envelopes.

SBIEnvelopeFormat		struct
	SBIEF_modTimbre	  TimbreSetting		; modulator timbre value
	SBIEF_carTimbre	  TimbreSetting		; carrer timbre value
	SBIEF_modScaling  OutputSetting		; modulator scaling cell value
	SBIEF_carScaling  OutputSetting		; carrier scaling cell value
	SBIEF_modAttack	  AttackDecaySetting	; modulator attack/decay value
	SBIEF_carAttack	  AttackDecaySetting	; carrier attack/decay value
	SBIEF_modSustain  SustainReleaseSetting	; modulator sustain/release
	SBIEF_carSustain  SustainReleaseSetting	; carrier sustain/release value
	SBIEF_modWave	  WaveSelectSetting	; modulator wave form
	SBIEF_carWave	  WaveSelectSetting	; carrier wave form
	SBIEF_feedback	  FeedBackSetting	; feedback for modulator
SBIEnvelopeFormat	ends


;-----------------------------------------------------------------------------
;		Casio/Tandy Sound Envelope Information
;-----------------------------------------------------------------------------

	;
	;  Both the FM chip in the Casio Palm-top and the FM chip
	;  in the TANDY 1000 computers are remarkably similar.
	;  Each has three tone generators, with attenuation, and
	;  each has a noise generator.  Neither has internal support
	;  for envelopes, and they both formats for their sounds are
	;  remarkably similar.
	;
	;  In order to get the best sound possible, we will allow
	;  an instrument to define the proportional intensity of the
	;  1st, 2nd and 3rd partials (that is, the intensity of the
	;  base frequency to the specified volume, as well as the
	;  proportion of the 2nd and 3rd harmonics in comparison to
	;  the specified volume.)
	;  This should produce a well colored tone out of the chip
	;  when only one voice is sounding at a time.  The more voices
	;  which get used, however, the more bland the notes will sound.
	;  The intensity of each partial will be determined by first
	;  multiplying the basic volume by the setting, then dividing
	;  the result by the maximum possible setting.
	;
	;  Each instrument is also allowed to specify the type and
	;  intensity of the noise that is to be generated.
	;

NoiseType			etype	byte, 0, 1
	NT_NO_NOISE		enum NoiseType
	NT_WHITE_NOISE		enum NoiseType	; cymbal crash
	NT_METAL_NOISE		enum NoiseType	; snare drum hit

NoiseSetting	record
	NS_type		NoiseType :2		; metal type
	NS_partialLevel		  :6		; fraction for metal level
NoiseSetting	end
	
CTIEnvelopeFormat		struct
	CTIEF_fundamental	byte		; fraction for primary
	CTIEF_secondPartial	byte		; fraction for 2nd intensity
	CTIEF_thirdPartial	byte		; fraction for 3rd intensity
	CTIEF_noise		NoiseSetting	; intensity of noise
CTIEnvelopeFormat		ends


;-----------------------------------------------------------------------------
;		Sound Driver Envelope Structure
;-----------------------------------------------------------------------------

	;
	;  Each hardware device has its own capabilities.  It does little
	;  good to tell a device driver to set itself up with too little or
	;  too much information about the sound envelope.  Therefore, there
	;  are multiple formats that can be passed to and from the sound
	;  device.  A device should always try to do the best it can, but
	;  don't expect great things out of a device if you don't give it
	;  the information it wants.
SupportedInstrumentFormat	etype	word, 0, 1
SEF_NO_FORMAT		enum	SupportedInstrumentFormat
SEF_SBI_FORMAT		enum	SupportedInstrumentFormat
SEF_CTI_FORMAT		enum	SupportedInstrumentFormat



