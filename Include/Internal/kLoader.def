COMMENT @----------------------------------------------------------------------

	Copyright (c) GeoWorks 1989 -- All Rights Reserved

PROJECT:	PC GEOS
FILE:		kLoader.def

DECLARER:	Kernel

DESCRIPTION:
	This file defines constants for communication between the loader and
	the kernel

	NOTE: If you add fields to the KernelLoaderVars structure, you must
	      add them to the *end*, or you will mess swat up. If you are
	      adding in fields that swat will look at, add them before the
	      conditionally compiled stuff.

	$Id: kLoader.def,v 1.1 97/04/04 14:14:58 newdeal Exp $

------------------------------------------------------------------------------@
SetDef	__K_LOADER

ifndef	HARDWARE_TYPE
HARDWARE_TYPE	equ	<PC>	
endif
ifndef	FULL_EXECUTE_IN_PLACE
FULL_EXECUTE_IN_PLACE	equ	FALSE
endif
ifndef	EMM_XIP
EMM_XIP	equ	FALSE
endif

ifidn	HARDWARE_TYPE, <BULLETXIP>
	_KL_BULL	equ	1
endif
include file.def

ifdef	_KL_BULL
include	Internal/bullemm.def
include	Internal/bullbios.def
endif

;-----------------------------------------------------------------------------
;		Structure of the dir path block
;-----------------------------------------------------------------------------

; The path offsets point to the path for each standard directory.  The path
; consists of a series of null terminated strings.  The last string is
; followed by additional null-terminator to mark the end of the path.

; Paths are stored in order.  If the offset for a path is the same as the
; offset for the next path, then no entries exist for the given path.

; The block size is stored after the array so that an array element can be
; compared to the next word to determine if the array element is empty

StdDirPaths	struct
    SDP_pathOffsets	nptr	(StandardPath/2) dup (?) ;one for each std path
							 ;(except SP_NONE)
    SDP_blockSize	word
StdDirPaths	ends

;-----------------------------------------------------------------------------
;		Variables passed from the loader to the kernel
;-----------------------------------------------------------------------------

MAX_INI_FILES		= 4		; Maximum number of .ini files

DANGER_LEVEL		= (32 * 1024)	; Size of boundary block (bytes) below
					;  which the scrub thread is activated

KernelLoaderVars	struct
    KLV_pspSegment		sptr.ProgramSegmentPrefix
    KLV_envSegment		sptr.char
    KLV_bootDrive		byte	-1	;0 based drive number
    KLV_bootupPath		char	"A:\\", 0, PATH_BUFFER_SIZE-4 dup (?)
    KLV_topLevelPath		PathName

    KLV_handleFreeCount		word
    KLV_heapStart		sptr
    KLV_heapEnd			sptr
    KLV_origHeapEnd		sptr
    KLV_lastHandle		word		;last valid handle + 0010h
    KLV_heapDesiredSize		word
    KLV_handleBottomBlock	hptr
    KLV_kernelHandle		hptr.GeodeHeader
    KLV_heapFreeSize		word
    KLV_handleFreePtr		hptr
    KLV_handleTableStart	hptr

    KLV_initFileBufHan		hptr	MAX_INI_FILES dup (0)
    KLV_initFileHan		hptr
    KLV_initFileSize		word

    KLV_stdDirPaths		hptr.StdDirPaths;0 if no paths
ifdef   PRODUCT_GEOS32
    KLV_swatKcode		sptr		;swat stub code selector,
						; used to identify its IRQ
						; handlers
endif
    KLV_swatKcodePtr		fptr.sptr 0	;0 if not running under
						; stub, else far pointer to
						; place at which to store
						; kcode for stub to use.

    ; these next two are required owing to NetWare's evil in not returning
    ; the proper drive number for a file opened on a remote drive when
    ; queried with the MSDOS_IOCTL_GET_DEV_INFO call.

    KLV_kernelFileDrive		byte		;drive number on which kernel
						; file resides
    KLV_initFileDrive		byte		;drive number on which writable
						; ini file resides

    KLV_initialTextMode		SysInitialTextMode

    ;The value stored here is interpreted as follows:
    ;	SITM_UNKNOWN		- The initial text mode could not be determined,
    ;				or is not applicable on this machine type.
    ;	SITM_TEXT_80_25_16_COLOR  - That is the initial text mode, according
    ;								to BIOS.
    ;	SITM_TEXT_80_25_MONO
    ;	SITM_TEXT_40_25_MONO


    KLV_defSimpleGraphicsMode	SysSimpleGraphicsMode

    ;The value stored here is interpreted as follows:
    ;	SSGM_NONE		- No simple graphics mode could be determined
    ;				by the loader. Unless one is specified in the
    ;				GEOS.INI file, PC/GEOS will have to exit.
    ;
    ;   SSGM_VGA...SSGM_CGA	- The loader suggests this as a default
    ;				graphics mode, should there be none specified
    ;				in the GEOS.INI file.
    ;
    ;   SSGM_SPECIAL		- (Handled as SSGM_NONE is.)


    KLV_curSimpleGraphicsMode	SysSimpleGraphicsMode

    ;The value stored here is interpreted as follows:
    ;   SSGM_NONE		- The loader DID NOT switch screens. The initial
    ;				text mode display is still visible. (The kernel
    ;				needs to know this when exiting prematurely.)
    ;
    ;	SSGM_VGA...SSGM_CGA	- The loader DID switch to a graphics screen,
    ;				and display the splash screen text & graphics.
    ;
    ;	SSGM_SPECIAL		- The loader detected an "exotic" video mode,
    ;				and was able to switch to it and display
    ;				a splash screen in that mode. The video driver
    ;				will have to detect that its mode is already
    ;				active, to avoid re-setting the mode again,
    ;				which would most likely nuke the splash screen.

    KLV_dgroupSegment		sptr		;kdata segment
    KLV_dgroupHandle		hptr		;kdata handle

    ;
    ; The segment where the FullXIPHeader structure is located
    ;
ifdef	FULL_EXECUTE_IN_PLACE
if	FULL_EXECUTE_IN_PLACE
    KLV_xipHeader		sptr.FullXIPHeader
else
    KLV_xipHeader		sptr
endif
else
    KLV_xipHeader		sptr
endif

    ;
    ; The segment address of the map page
    ;
    KLV_mapPageAddr		sptr

ifdef	_KL_BULL	
    ;
    ; Where the BIOS keeps its 5K buffer in conventional memory.
    ;
    KLV_xbiosPointer		word
    KLV_geosXbiosPointer	word

    ;
    ; The list of the original 16K page mappings.
    ;
    KLV_originalPages		BulletPageMap	BULLET_NUM_16K_PAGES dup(<>)

    ;
    ; Number of RAM pages initially allocated by the EMM driver
    ;
    KLV_emmPages		word 	

    ;
    ; The bullet loader will stuff the emm page map here so the
    ; kernel can reset the map on exit.
    ;
    KLV_emmMap			word 	BULLET_EMM_FRAME_COUNT dup (?)
    KLV_emmMapEnd		label 	word		

endif

if	EMM_XIP
    ;
    ; The EMM handle is stored here.
    ;
    KLV_emmHandle		word

    ;
    ; The physical page number of the map page
    ;
    KLV_mapPage			byte

endif

ifdef   PRODUCT_GEOS32
    ; Pointer to GPMIVector table (passed on to the Kernel)
    KLV_GPMIVectorTable		fptr
endif

KernelLoaderVars	ends
