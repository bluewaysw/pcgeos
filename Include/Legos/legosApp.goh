/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:        Legos
MODULE:         Legos application class; both viewer and builder
                are instances of this class, and use the sole
		message to identify each other...
FILE:           legosapp.goh

AUTHOR:         Roy Goldman, Oct 25, 1994

REVISION HISTORY:
	Name    Date            Description
	----    ----            -----------
	roy       10/25/94           Initial version.

DESCRIPTION:
	
        $Id: legosApp.goh,v 1.1 97/12/05 12:16:26 gene Exp $
	$Revision: 1.1 $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@ifndef _LEGOSAPP_GOH_
@define _LEGOSAPP_GOH_
@include <legos/ent.goh>

@class LegosAppClass, EntAppClass;
@uses GenApplicationClass;


/* Builder sends this to viewer, viewer sends it back */
@message void MSG_LA_HANDSHAKE(optr callerObject);

/* sent by gandalf to cleanup a program that we are done with */
@message void MSG_LA_END_PROGRAM();

/* sent by gandalf to indicate we have stopped the current task */
@message void MSG_LA_STOP();

/*
 * Return the last window that was passed via MSG_META_IMPLIED_WIN_CHANGE.
 * This is needed for a hack in BentWindowClass.
 * It is only needed at build time, but defined here to put in a place
 * readable by Bent.  Note, you must handle this, there is no LegosAppCode
 * to do this for you.
 */
@message optr MSG_LA_GET_IMPLIED_WINDOW();


/* lview sends this to gandalf when once it has had a chance to finish
 * all the cleanup
 */
@message optr MSG_LA_STOP_COMPLETE();

/* Store the implied window as hack so BentWindows know if
   they should be on the pre-passive list. Nice play to store
   data for MSG_LA_GET_IMPLIED_WINDOW. Probably should be moved
   to subclass's instance data, oh well.
   */
@instance optr LAI_impliedWindow;


/* The API for forms, dialogs and floaters (windows) describes an
 * "activeChanged" event, generated when a window becomes active or
 * inactive within its "category."  There are three categories:
 * the active form, the active non-modal window, and active modal
 * window.  To simplify the mechanism, the application object keeps
 * track of the active window within each category and causes the
 * activeChanged events to be generated when appropriate (by responding
 * to MSG_META_MUP_ALTER_FTVMC_EXCL).
 */

@vardata void HINT_TEMP_LA_IGNORE_GRABS;
/* MSG_LA_STOP adds this vardata to the app object so that any
 * further MAEF_GRABs received by MSG_META_MUP_... will be
 * ignored (not recorded to instance data.  The hint is removed
 * by MUP if the grabber is the app object itself, because: (1) the
 * app object doesn't grab after an LA_STOP; (2) the app object does
 * grab on a fresh run of an app.  These two points were empirically
 * determined.
 */

@instance optr LAI_activeForm;
@instance optr LAI_activeNonModal;
@instance optr LAI_activeModal;

@endc



@endif

