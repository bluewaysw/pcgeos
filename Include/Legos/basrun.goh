/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

PROJECT:	
MODULE:		
FILE:		basrun.goh

AUTHOR:		Ronald Braunstein, Jul 26, 1995

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	RON	 7/26/95		Initial version.

DESCRIPTION:
	Basrun stuff that depends on Ent and needs a .goh file.

	$Id: basrun.goh,v 1.1 97/12/05 12:16:07 gene Exp $
	$Revision: 1.1 $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
#ifndef _BASRUN_GOH_
#define _BASRUN_GOH_
@include <legos/ent.goh>


/* the InterpClass will describe the Interp object which is used by
 * the leogs library to keep track of the state of the interpreter for
 * each Visual GEOS app running. 
 */

@class	InterpClass, MetaClass;


 	/* MSG_INTERP_GET_STATE gets the MemHandle that represents the
	 * interpreter's program task
	 */
@message    MemHandle 	MSG_INTERP_GET_STATE() = ax;

 	/* MSG_INTERP_SET_STATE sets the interpreter's program task
	 */
@message    void    	MSG_INTERP_SET_STATE(MemHandle state);
 	/* IC_state contains ALL state for an interpreter
	 */

        /* Creates a program task, and a default run task using
	   the given vmfile
	*/
@message    MemHandle        MSG_INTERP_INIT_PROGRAM(VMFileHandle vmfile);

        /* Load a compiled module */
@message RTaskHan MSG_INTERP_LOAD_COMPILED_MODULE(TCHAR *url, 
						       optr uiParent);

/* Sets the system module.
   This should only be sent when lview is started up.
   When system: is incountered in .bas code the interpreter will be asked
   what the System module is.
   */
@message void MSG_INTERP_SET_SYSTEM_MODULE(RTaskHan system);

/* Retrieves stored system module */
@message RTaskHan MSG_INTERP_GET_SYSTEM_MODULE();

@message void MSG_INTERP_FREE_OBJ_BLOCK(MemHandle objBlock);

@message void MSG_INTERP_DESTROY_COMPONENTS
    (optr compArray, optr uiBlockArray,
     optr fidoModuleArray, Message notifyMessage);

@message void MSG_INTERP_SET_ALARM_SERVER(optr alarmServer);
@message optr MSG_INTERP_GET_ALARM_SERVER() = cx:dx;

/* Not used -- provided as a convenient message to pass to
 * RunUnloadModule() */
@message void MSG_INTERP_UNLOAD_COMPLETE();

@instance   MemHandle	IC_state;
@instance   RTaskHan	IC_system;		/* rtask of system module */
@instance optr	IC_alarmServer	= 0;
@endc

typedef enum
{
	LCBT_STRING,
	LCBT_INTEGER,
	LCBT_LONG,
	LCBT_FLOAT,
	LCBT_ARRAY,
	LCBT_GRAPHIC,
	LCBT_FAX,
	LCBT_SOUND,
	LCBT_SPREADSHEET
} LegosClipboardableType;


RunHeapInfo *	RunComponentLockHeap(EntObjectBlockHeader *block);
void		RunComponentUnlockHeap(EntObjectBlockHeader *block);
void 		RunComponentCopyString(TCHAR *buffer, RunHeapToken tok,
				       optr component);


#endif
