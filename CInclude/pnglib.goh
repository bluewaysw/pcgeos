#include <geos.h>
#include <stdio.h>
#include <Ansi/stdlib.h>
#include <Ansi/string.h>
#include <graphics.h>
#include <vm.h>
#include <hugearr.h>
#include <zlib.h>
#include <file.h>
#include <heap.h>

// PNG-Chunks
#define CHUNK_IHDR 0x49484452  // "IHDR"
#define CHUNK_IDAT 0x49444154  // "IDAT"
#define CHUNK_IEND 0x49454E44  // "IEND"
#define CHUNK_PLTE 0x504C5445  // "PLTE"

// buffers for ZLIB
#define CHUNK_SIZE_IN  2048     // 2048 4096
#define CHUNK_SIZE_OUT 4096     // 4096 8192

// PNG signature
const unsigned char PNG_SIGNATURE[8] = {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A};

// max palette entries
#define MAX_PALETTE_ENTRIES 256

// max IDAT chunk entries
#define MAX_IDAT_CHUNKS 100

// mximum scanline size
// 8192 = 8KB limit, equals 2048px width in RGBA and 1024px in 16-bit RGBA.
// 6144 = 6KB limit, equals 1536px width in RGBA and 768px in 16-bit RGBA.
#define MAX_SCANLINE_SIZE 6144

// Struktur für die IHDR-Daten
typedef struct {
    unsigned long width;
    unsigned long height;
    unsigned char bitDepth;
    unsigned char colorType;
    unsigned char compressionMethod;
    unsigned char filterMethod;
    unsigned char interlaceMethod;
} IHDRData;

// Struktur für den ChunkHeader
typedef struct {
    unsigned long length;
    unsigned long type;
} ChunkHeader;

// IDAT Chunk entry
typedef struct {
    unsigned long length;
    unsigned long chunkPos;
} IDATChunkEntry;

// IDAT parsing state struct
typedef struct {
    z_stream strm;
    MemHandle inHan;
    unsigned char *in;
    word inOff;
    MemHandle outHan;
    unsigned char *out;
    word outOff;
    unsigned long rowBufferOffset;
    MemHandle currentRowHan;
    unsigned char *currentRow;
    MemHandle previousRowHandle;
    unsigned char *previousRow;
    unsigned long lineNo;
    unsigned long rowBytes;
    unsigned long bytesPerPixel;
    unsigned long bytesToRead;
    unsigned long length;
    unsigned long have;
    unsigned long outBufferPos;

    MemHandle idatChunksHan;
    int idatNumChunks;
    int idatChunkIdx;

    FileHandle file;
    IHDRData ihdr;
} IDATState;

// PLTE Chunk entry
typedef struct {
    unsigned long length;
    unsigned long chunkPos;
} PLTEChunkEntry;

// Filtertypen gemäß PNG-Spezifikation
#define FILTER_NONE    0
#define FILTER_SUB     1
#define FILTER_UP      2
#define FILTER_AVERAGE 3
#define FILTER_PAETH   4

// Color Types
#define PNG_COLOR_TYPE_GREY        0   /* Grayscale */
#define PNG_COLOR_TYPE_RGB         2   /* Truecolor */
#define PNG_COLOR_TYPE_PALETTE     3   /* Indexed-color */
#define PNG_COLOR_TYPE_GREY_ALPHA  4   /* Grayscale with alpha */
#define PNG_COLOR_TYPE_RGBA        6   /* Truecolor with alpha */

// Bit depths
#define PNG_BIT_DEPTH_1   1   /* 1-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_2   2   /* 2-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_4   4   /* 4-bit depth, used in grayscale and palette images */
#define PNG_BIT_DEPTH_8   8   /* 8-bit depth, used in grayscale, palette, truecolor, and grayscale-alpha images */
#define PNG_BIT_DEPTH_16  16  /* 16-bit depth, used in grayscale, truecolor, and grayscale-alpha images */

/* API */
VMBlockHandle   _pascal _export pngImportConvertFile(FileHandle fileHan, VMFileHandle vmFile);

int             _pascal _export pngImportCheckHeader(FileHandle file);
int             _pascal _export pngImportProcessChunks(FileHandle file, IHDRData* ihdrData, MemHandle* idatChunksHan, int *idatNumChunks, PLTEChunkEntry* plteChunk);
BMFormat        _pascal _export pngImportWhatOutputFormat(unsigned char colorType, unsigned char bitDepth);
VMBlockHandle   _pascal _export pngImportInitiateOutputBitmap(VMFileHandle vmFile, IHDRData ihdrData, BMFormat fmt);
void            _pascal _export pngImportHandlePalette(FileHandle file, PLTEChunkEntry plteChunk, VMFileHandle vmFile, VMBlockHandle vmBlock, unsigned char colorType, unsigned char bitDepth);
void            _pascal _export pngImportInitIDATProcessingState(IDATState* state, FileHandle file, MemHandle idatChunksHan, int idatNumChunks, IHDRData ihdr);
int             _pascal _export pngImportGetNextIDATScanline(IDATState* state);
void            _pascal _export pngImportPauseIDATProcessing(IDATState* state);
void            _pascal _export pngImportApplyGEOSFormatTransformations(IDATState* state, RGBValue pngBlendColor);
void            _pascal _export pngImportWriteScanlineToBitmap(VMFileHandle vmFile, VMBlockHandle bitmapHandle, unsigned long lineNo, unsigned char* rowData);
void            _pascal _export pngImportResumeIDATProcessing(IDATState* state);
void            _pascal _export pngImportCleanupIDATProcessingState(IDATState* state);

/* Internal */
int nextIDATChunk(IDATState* state);
unsigned long calcBytesPerRow(unsigned long width, unsigned char colorType, unsigned char bitDepth);
unsigned long calcBytesPerPixel(unsigned char colorType, unsigned char bitDepth);
void removeAlphaChannel(unsigned char *data, unsigned long width, int colorType, RGBValue blendColor);
void convert16BitLineTo8Bit(unsigned char *line, unsigned long width, unsigned char colorType, unsigned char bitDepth);
void pad_1bit_to_4bit(unsigned char *input, unsigned int width, unsigned char colorType, unsigned char bitDepth);
void pad_2bit_to_4bit(unsigned char *input, unsigned int width, unsigned char colorType, unsigned char bitDepth);
static void unfilterRow(unsigned char *data, unsigned char *previousRow, unsigned long bytesPerPixel, unsigned long rowBytes);
static inline unsigned char paethPredictor(int a, int b, int c);
static inline int abs(int x);
static inline unsigned long swapEndian(unsigned long val);
