/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	ui.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines generic UI stuff
 *
 *	$Id: ui.goh,v 1.1 97/04/04 15:56:30 newdeal Exp $
 *
 ***********************************************************************/
@optimize
@deflib ui

@include <Objects/metaC.goh>
@include <Objects/inputC.goh>
#include <disk.h>
@include <Objects/clipbrd.goh>
#include <win.h>

/*
 * Constants
 */

#define UI_STACK_SPACE_REQUIREMENT_FOR_RECURSE_ITERATION	 600
#define UI_MAXIMUM_THREAD_BORROW_STACK_SPACE_AMOUNT		1200
#define INTERFACE_THREAD_MINIMUM_STACK_SIZE			1500
#define INTERFACE_THREAD_DEF_STACK_SIZE				2000


/*
 * Utility routines (in User/userUtils.asm)
 */

typedef ByteFlags AppLaunchFlags;
#define ALF_SEND_LAUNCH_REQUEST_TO_UI_TO_HANDLE	0x80
#define ALF_OPEN_IN_BACK			0x40
#define ALF_DESK_ACCESSORY			0x20
#define ALF_DO_NOT_OPEN_ON_TOP			0x10
#define ALF_OVERRIDE_MULTIPLE_INSTANCE		0x08
#define ALF_LAUNCHED_FOR_PRINTING_ONLY		0x04

typedef Boolean _pascal GestureCallback (Point *arrayOfInkPoints, word numPoints, word numStrokes);

extern MemHandle _pascal
    UserCreateInkDestinationInfo(optr dest,
				 GStateHandle gs,
				 word brushSize,
				 GestureCallback *callback);

extern GeodeHandle _pascal
    UserGetHWRLibraryHandle(void);

extern void _pascal
    UserRegisterForTextContext(optr obj);
extern void _pascal
    UserUnregisterForTextContext(optr obj);

extern Boolean _pascal
    UserCheckIfContextUpdateDesired(void);

extern void _pascal
    UserGetInitFileCategory(char *buf);

extern GeodeHandle _pascal
    UserLoadApplication(AppLaunchFlags alf,
			Message attachMethod,
			MemHandle appLaunchBlock,
			char *filename,
			StandardPath sPath,
			GeodeLoadError *err);

extern MemHandle _pascal
    UserAllocObjBlock (ThreadHandle threadHandle);

/*
 * Interface Level
 */

typedef enum /* word */ {
	UIIL_INTRODUCTORY,
	UIIL_BEGINNING,
	UIIL_INTERMEDIATE,
	UIIL_ADVANCED,
	UIIL_GURU
#define UIIL_MAX_LEVEL	UIIL_GURU
} UIInterfaceLevel;

extern UIInterfaceLevel
    _pascal UserGetDefaultLaunchLevel(void);	/* XXX */

extern UIInterfaceLevel
    _pascal UserGetDefaultUILevel(void);	/* XXX */

typedef WordFlags UIInterfaceOptions;
#define UIIO_OPTIONS_MENU			0x8000
#define UIIO_DISABLE_POPOUTS			0x4000
#define UIIO_ALLOW_INITIALLY_HIDDEN_MENU_BARS	0x2000
#define UIIO_MODAL_MASK                         0x1000

typedef enum {
    UILM_TRANSPARENT,
    UILM_SINGLE_INSTANCE,
    UILM_MULTIPLE_INSTANCES,
    UILM_GURU
} UILaunchModel;

extern UILaunchModel
    _pascal UserGetLaunchModel(void);		/* XXX */

typedef WordFlags UILaunchOptions;
#define UILO_DESK_ACCESSORIES		0x8000
#define UILO_CLOSABLE_APPS		0x4000

extern UILaunchOptions
    _pascal UserGetLaunchOptions(void);		/* XXX */

typedef enum {
    UIEP_NONE,
    UIEP_TOP_PRIMARY,
    UIEP_LOWER_LEFT
} UIExpressPositions;

typedef WordFlags UIExpressOptions;
#define UIEO_RETURN_TO_DEFAULT_LAUNCHER	0x0800
#define UIEO_GEOS_TASKS_LIST		0x0400
#define UIEO_DESK_ACCESSORY_LIST	0x0200
#define UIEO_MAIN_APPS_LIST		0x0100
#define UIEO_OTHER_APPS_LIST		0x0080
#define UIEO_CONTROL_PANEL		0x0040
#define UIEO_DOS_TASKS_LIST		0x0020
#define UIEO_UTILITIES_PANEL		0x0010
#define UIEO_EXIT_TO_DOS		0x0008
#define UIEO_POSITION			0x0007

typedef ByteFlags UIWindowOptions;
#define UIWO_MAXIMIZE_ON_STARTUP	0x40
#define UIWO_COMBINE_HEADER_AND_MENU_IN_MAXIMIZED_WINDOWS	0x20
#define UIWO_PRIMARY_MIN_MAX_RESTORE_CONTROLS		0x10
#define UIWO_WINDOW_MENU				0x08
#define UIWO_PINNABLE_MENUS				0x04
#define UIWO_KBD_NAVIGATION				0x02
#define UIWO_POPOUT_MENU_BAR				0x01

typedef WordFlags UIWindowOptionsInteger;
#define UIWOI_MASK	0xff00
#define UIWOI_OPTIONS	0x00ff

typedef WordFlags UIHelpOptions;
#define UIHO_HIDE_HELP_BUTTONS	0x0001


extern UIInterfaceOptions
    _pascal UserGetInterfaceOptions(void);	/* XXX */

/*
 * extern DisplayTypeAndFlags
 *     _pascal UserGetDisplayType()
 *
 * Get the DisplayType (see win.h)
 */
typedef WordFlags DisplayTypeAndFlag;
#define DTAF_DISPLAY_TYPE 0xff00
#define DTAF_INITIALIZED  0x00ff
#define DTAF_DISPLAY_TYPE_OFFSET 8

/*
 * Add/remove an application from the list of those, like Welcome, started up
 * by the UI when it loads. To be used only for system applications, such
 * as Lights Out...
 */
extern void _pascal UserAddAutoExec(const char *appName);
extern void _pascal UserRemoveAutoExec(const char *appName);

/*
 * Combine icon and text moniker into a single combination moniker.
 */
typedef WordFlags CreateIconTextMonikerFlags;
#define CITMF_POSITION_ICON_ABOVE_TEXT	0x8000
#define CITMF_TEXT_IS_FPTR		0x4000
#define CITMF_CREATE_CHUNK		0x2000
#define CITMF_SWAP_ICON_TEXT            0x1000

#define CITMF_POSITION_ICON_BELOW_TEXT 0x9000
#define CITMF_POSITION_ICON_RIGHT_OF_TEXT 0x1000

extern optr
    _pascal UserCreateIconTextMoniker(optr textMoniker,
				      optr iconMoniker,
				      Handle destinationBlock,
				      word spacing,
				      CreateIconTextMonikerFlags flags);

/*
 * Sound support
 */
typedef enum /* word */ {
	SST_ERROR, 		    /* Sound produced when an Error box comes
				     * up. */
	SST_WARNING,		    /* General warning beep sound */
	SST_NOTIFY,		    /* General notify beep */
	SST_NO_INPUT,		    /* Sound produced when the user's
				     * keystrokes/mouse presses are not going
				     * anywhere (if he clicks off a modal
				     * dialog box, or clicks on the field or
				     * something) */
	SST_KEY_CLICK,		    /* Sound produced when a floating
				     * keyboard has a key pressed */
	SST_ALARM,		    /* Sound produced as a standard
				     * Alarm noise. */
	SST_NO_HELP,		    /* Sound produced when no help is
				     * available. */
	SST_CUSTOM_SOUND=0xfffd,    /* Allows the playing of a simple sound
				     * buffer while taking care of the system
				     * sound on/off selection
	    			     */
	SST_CUSTOM_BUFFER=0xfffe,   /* Allows applications to play a custom
				     * note buffer and does all the checking
				     * for sound being off, etc. */

		/* NOTE:  When using SST_CUSTOM_BUFFER in systems where the
		 sound library has a protocol number of 4.0 or earlier, it is
		 necessary for the calling thread to worry about
		 synchronisation issues.  The calling thread must allocate a
		 semaphre via ThreadAllocSem, and add sound events at the end
		 of the buffers being played via SST_CUSTOM_BUFFER that V()
		 this semaphore.  In the CLOSE_APPLICATION handler for the
		 app, the app must P() this semaphore the same number of times
		 it used SST_CUSTOM_BUFFER.  This will ensure that the app
		 does not exit until all buffers played by SST_CUSTOM_BUFFER
		 are completed.  Failure to do so introduces a race condition
		 which can cause the system to crash.  You have been warned.

		 If your app depends upon having sound library v4.1 or
		 newer, this is no longer a consideration.
				-- todd 12/29/93 */

	SST_CUSTOM_NOTE=0xffff	    /* Allows applications to play a custom
				     * note and does all the checking for sound
				     * being off, etc. */
} StandardSoundType;

#define SST_IGNORE_SOUND_OFF 0x8000
/*
 * if SST_????? is OR'd with SST_IGNORE_SOUND_OFF, the sound will be
 * played regardless of [ui]sound or soundMask. Note that this doesn't
 * work with SST_CUSTOM_???
 *
 * This feature supported in 3.0 or later.
 */

/*
 *  StandardSoundFlags
 *
 *    These flags are used in the [ui]:soundMask = <integer> INI key
 *  to turn individual StandardSoundTypes on and off.
 *  A StandardSoundType will be played by UserStandardSound if the
 *  corresponding bit is set in the soundMask key.  Note that the
 *  SST_CUSTOM_xxx "standard" sounds are not supported by this
 *  mechanism.
 */

typedef WordFlags StandardSoundFlags;
#define	SSF_ALARM       0x0020
#define	SSF_KEY_CLICK   0x0010
#define	SSF_NO_INPUT    0x0008
#define	SSF_NOTIFY      0x0004
#define	SSF_WARNING     0x0002
#define	SSF_ERROR       0x0001

#define SOUND_MASK_ALL  0xffff

/*
 * SST_ERROR, SST_WARNING, SST_NOTIFY, and SST_NO_INPUT, SST_KEY_CLICK,
 * and SST_ALARM require no additional arguments. Others:
 *	UserStandardSound(SST_CUSTOM_BUFFER, &SoundNoteBuffer, word size);
 *	UserStandardSound(SST_CUSTOM_NOTE, word frequency, word duration);
 *	UserStandardSound(SST_CUSTOM_SOUND, MemHandle SoundHandle, word tempo);
 *
 * Returns countID for the standard sound that is needed for
 * UserStopStandardSound. Returns zero if no sound is played, or
 * SST_CUSTOM... is played.
 */
extern word _cdecl UserStandardSound(StandardSoundType type, ...);


/*
 * Stop the standard sound being played.
 *
 * Will NOT stop SST_CUSTOM_... sounds because the sound handle could
 * possibly be destroyed, and because we don't know what the custom
 * handles are.
 *
 * The routine handles soundType that has the SST_IGNORE_SOUND_OFF bit
 * set, however.
 */
extern void _far _pascal UserStopStandardSound(StandardSoundType soundType,
					       word		 countID);


/*
 * Front-end for DiskRestore. Returns 0 and *diskHandlePtr if successfully
 * restored, else returns DiskRestoreError.
 */
extern word _pascal UserDiskRestore(void *savedData, word *diskHandlePtr);

/*
 * Utility routine to encrypt a string
 *
 * Returns TRUE if a non-null string is passed
 */
extern Boolean _pascal UserEncryptPassword(const char *string, char *dest);

#define PASSWORD_ENCRYPTED_SIZE 8
#define MAX_PASSWORD_SOURCE_SIZE 32

/*
 * Get system shutdown status.
 */
extern Boolean _pascal UserGetSystemShutdownStatus(void);


/*
 * Utility routine used for changing fields
 */
typedef enum /* word */ {
    CFCT_BEGIN_FIELD_CHANGE,
    CFCT_CONFIRM_START,
    CFCT_CONFIRM_COMPLETE
} ConfirmFieldChangeType;

/*
 * Description:	Used to initiate notification of a field change and to
 *		respond positively or negatively to that change.  Since
 *		all apps are detached when a field change occurs, those
 *		on the GSNSLT_FIELD_CHANGE_NOTIFICATIONS gcn list can
 *		chose to abort the field change if they desire.
 *
 * Pass:	call structure depends upon type argument:
 *
 *	UserConfirmFieldChange( CFCT_BEGIN_FIELD_CHANGE,
 *					optr ackOD, word ackMsg );
 *		Returns: TRUE on error
 *
 *	UserConfirmFieldChange( CFCT_CONFIRM_START );
 *		Returns: FALSE if caller has exclusive right to query
 *			 user.
 *			 TRUE if caller should do nothing else.
 *
 *	UserConfirmFieldChange( CFCT_CONFIRM_COMPLETE, word allow );
 *		allow = TRUE to allow change, FALSE to deny it.
 *		Returns: Ignored
 *
 * See definition in ui.def for more explanation.
 */
extern Boolean _cdecl UserConfirmFieldChange(ConfirmFieldChangeType type,
					     ...);


/*
 *		Imported methods
 */

/* genC.goh */

/*
 * target levels for MSG_GET_TARGET_AT_TARGET_LEVEL (defined in
 * Objects/metaC.goh)
 */

typedef enum /* word */ {
    TL_TARGET=			0,
    TL_CONTENT,
    TL_GENERIC_OBJECTS=  	1000,
    TL_GEN_SYSTEM,
    TL_GEN_FIELD,
    TL_GEN_APPLICATION,
    TL_GEN_PRIMARY,
    TL_GEN_DISPLAY_CTRL,
    TL_GEN_DISPLAY,
    TL_GEN_VIEW,
    TL_LIBRARY_LEVELS=  	2000,
    TL_APPLICATION_OBJECTS=  	3000,
} TargetLevel;

/* clipbrd.goh */

@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_FEEDBACK(QuickTransferCursor quickTransferCursor = bp);	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_NOTIFY_QUICK_TRANSFER_CONCLUDED(ClipboardQuickNotifyFlags flags = bp);	/* XXX */
@reserveMessages	MetaUIMessages, 1;


@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_CUT();
@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_COPY();
@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_PASTE();
@importMessage	MetaUIMessages, void MSG_META_UNDO(UndoActionStruct *undoData = ss:bp);
@importMessage	MetaUIMessages, void MSG_META_UNDO_FREEING_ACTION(
						AddUndoActionStruct *data = ss:bp);

@importMessage	MetaUIMessages, void MSG_META_SELECT_ALL();
@importMessage	MetaUIMessages, void MSG_META_DELETE();
@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_NOTIFY_TRANSFER_ITEM_FREED(VMFileHandle itemFile = cx, VMBlockHandle itemBlock = dx);	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_CLIPBOARD_NOTIFY_NORMAL_TRANSFER_ITEM_CHANGED();	/* XXX */

/* gViewC.goh */

@importMessage MetaUIMessages, void MSG_META_CONTENT_SET_VIEW(optr view = cx:dx);   /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_OPENING(optr view =
								cx:dx); /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_CLOSING();   /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_WIN_OPENED(
					word viewWidth = cx,
					word viewHeight = dx,
					WindowHandle viewWindow = bp);  /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_WIN_CLOSED(WindowHandle viewWindow = bp);   /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_ORIGIN_CHANGED(@stack WindowHandle viewWindow,	sdword yOrigin, sdword xOrigin);  /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_SCALE_FACTOR_CHANGED(
				@stack WindowHandle viewWindow,
				WWFixedAsDWord yScaleFactor,
				WWFixedAsDWord xScaleFactor);  /***/

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_SIZE_CHANGED(
				word viewWidth = cx, word viewHeight = dx,
				WindowHandle viewWindow = bp);   /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_TRACK_SCROLLING(
				TrackScrollingParams *args = ss:bp);

@importMessage MetaUIMessages, void MSG_META_CONTENT_VIEW_LOST_GADGET_EXCL(WindowHandle
				viewWindow = bp);  /*XXX*/

@importMessage MetaUIMessages, void MSG_META_CONTENT_NAVIGATION_QUERY(
    	    	    	    	optr queryOrigin = cx:dx,
    	    	    	    	NavigateFlags navFlags = bp);  /***/
@importMessage MetaUIMessages, void MSG_META_CONTENT_APPLY_DEFAULT_FOCUS();  /***/

@importMessage MetaUIMessages, void MSG_META_CONTENT_ENTER(optr view =
							cx:dx); /*XXX*/
@importMessage MetaUIMessages, void MSG_META_CONTENT_LEAVE(optr view =
							cx:dx); /*XXX*/


/* gDocGrpC.goh */

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_INITIALIZE_DOCUMENT_FILE(
			         optr document = cx:dx, FileHandle file = bp)
					= carry;

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_CREATE_UI_FOR_DOCUMENT(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_DESTROY_UI_FOR_DOCUMENT(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_ATTACH_UI_TO_DOCUMENT(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_DETACH_UI_FROM_DOCUMENT(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_READ_CACHED_DATA_FROM_FILE(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_WRITE_CACHED_DATA_TO_FILE(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_DOCUMENT_HAS_CHANGED(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_PHYSICAL_SAVE(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_PHYSICAL_UPDATE(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_PHYSICAL_SAVE_AS_FILE_HANDLE(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_PHYSICAL_REVERT(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_UPDATE_EARLIER_COMPATIBLE_DOCUMENT(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_UPDATE_EARLIER_INCOMPATIBLE_DOCUMENT(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_SAVE_AS_COMPLETED(
			         optr document = cx:dx, FileHandle file = bp);

@importMessage MetaUIMessages, void MSG_META_DOC_OUTPUT_ATTACH_FAILED(
			         optr document = cx:dx, FileHandle file = bp);


@importMessage MetaUIMessages, Boolean MSG_META_DOC_OUTPUT_PHYSICAL_REVERT_TO_AUTO_SAVE(
			    	 word *error = multipleax,
			         optr document = cx:dx,
				 FileHandle file = bp) = carry;

@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_11();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_12();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_13();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_14();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_15();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_16();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_17();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_18();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_19();
@importMessage	MetaUIMessages, void MSG_META_UNUSED_META_UI_20();


/* gCtrlC.goh */

@importMessage MetaUIMessages, void MSG_META_UI_FORCE_CONTROLLER_UPDATE(
					ManufacturerID manufID = cx,
					word changeID = dx);

/* genC.goh (again) */
typedef struct {
    word    	    	GPDRA_pathType;	    	/* vardata tag holding path */
    word    	    	GPDRA_savedDiskType;	/* vardata tag holding saved
						 * disk handle */
    char    	    	*GPDRA_driveName;   	/* drive name, null-terminated
						 * with trailing ':' */
    char    	    	*GPDRA_diskName;    	/* disk name, null-terminated */
    DiskRestoreError	GPDRA_errorCode;    	/* error code that would be
						 * returned by DiskRestore if
						 * this method weren't being
						 * called */
} GenPathDiskRestoreArgs;

@importMessage MetaUIMessages, Boolean MSG_META_GEN_PATH_RESTORE_DISK_PROMPT(
	DiskRestoreError *error = multipleax,
	GenPathDiskRestoreArgs *args = ss:bp) = carry;	/* always return TRUE */

@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_GOTO_PAGE(word page = cx);
@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_NEXT_PAGE();
@importMessage MetaUIMessages, void MSG_META_PAGED_OBJECT_PREVIOUS_PAGE();

@importMessage MetaUIMessages, void MSG_META_NOTIFY_TASK_SELECTED();


/* In various include files for ui.def in the asm version */

@importMessage	MetaUIMessages, void MSG_META_GAINED_MOUSE_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_MOUSE_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_KBD_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_KBD_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_PRESSURE_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_PRESSURE_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_DIRECTION_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_DIRECTION_EXCL();   /* XXX */

/*** Focus and Target Methods ***/

@importMessage	MetaUIMessages, void MSG_META_GRAB_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_RELEASE_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, Boolean MSG_META_GET_FOCUS_EXCL(  /* XXX */
				optr *focusObject = dxcx) = carry;
@importMessage	MetaUIMessages, void MSG_META_GRAB_TARGET_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_RELEASE_TARGET_EXCL();   /* XXX */
@importMessage	MetaUIMessages, Boolean MSG_META_GET_TARGET_EXCL(   /* XXX */
				optr *targetObject = dxcx) = carry;
@importMessage	MetaUIMessages, void MSG_META_GRAB_MODEL_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_RELEASE_MODEL_EXCL();   /* XXX */
@importMessage	MetaUIMessages, Boolean MSG_META_GET_MODEL_EXCL(
				optr *modelObject = dxcx) = carry;   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_RELEASE_FT_EXCL();   /* XXX */

@importMessage	MetaUIMessages, void MSG_META_MUP_ALTER_FTVMC_EXCL(   /* XXX */
					optr objectWantingControl = cx:dx,
					MetaAlterFTVMCExclFlags flags = bp);

@importMessage	MetaUIMessages, void MSG_META_GAINED_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_SYS_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_SYS_FOCUS_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_TARGET_EXCL();
@importMessage	MetaUIMessages, void MSG_META_LOST_TARGET_EXCL();
@importMessage	MetaUIMessages, void MSG_META_GAINED_SYS_TARGET_EXCL();
@importMessage	MetaUIMessages, void MSG_META_LOST_SYS_TARGET_EXCL();
@importMessage	MetaUIMessages, void MSG_META_GAINED_MODEL_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_MODEL_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_GAINED_SYS_MODEL_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_SYS_MODEL_EXCL();   /* XXX */
@importMessage  MetaUIMessages, void MSG_META_QUERY_SAVE_DOCUMENTS();
@importMessage  MetaUIMessages, void MSG_META_BROADCAST_RETURNING_TO_WELCOME();

@importMessage	MetaUIMessages, void MSG_META_GAINED_DEFAULT_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_LOST_DEFAULT_EXCL();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_MOUSE_BUMP_NOTIFICATION(
				sword xBump = cx, sword yBump = dx);   /* XXX */
@importMessage	MetaUIMessages, Boolean MSG_META_FUP_KBD_CHAR(
				word character = cx,
				word flags = dx,
				word state = bp) = carry;   /* XXX */

typedef WordFlags KbdReturnFlags;
#define KRF_PREVENT_PASS_THROUGH	0x8000

@importMessage	MetaUIMessages, KbdReturnFlags MSG_META_PRE_PASSIVE_KBD_CHAR(
				word character = cx,
				word flags = dx,
				word state = bp) = ax;   /* XXX */
@importMessage	MetaUIMessages, KbdReturnFlags MSG_META_POST_PASSIVE_KBD_CHAR(
				word character = cx,
				word flags = dx,
				word state = bp) = ax;   /* XXX */

/*
 * InkReturnParams are defined in Objects/uiInputC.goh.
 */
@importMessage	MetaUIMessages, void MSG_META_QUERY_IF_PRESS_IS_INK(
				InkReturnParams *retVal = bpaxdxcx,
				sword xPosition=cx, sword yPosition=dx);

@importMessage	MetaUIMessages, void MSG_META_LARGE_QUERY_IF_PRESS_IS_INK(
				InkReturnParams *retVal = bpaxdxcx,
				LargeMouseData *largeMouseDataStruct = ss:bp);

/*
 * 16-bit coordinate button events.
 *
 * MSG_META_PTR is part of this functional grouping, but for compilation reasons
 * is declared in Objects/inputC.goh.
 *
 * MouseReturnParams is defined in Objects/uiInputC.goh.
 *  "inputState" for MSG_META_PTR & the following messages is
 * ButtonInfo in the low byte, UIFunctionsActive in the high byte --
 * use GET_BUTTON_INFO and GET_UI_FUNCTIONS_ACTIVE to extract.
 */
@prototype void MSG_UI_BUTTON(MouseReturnParams *retVal = bpaxdxcx,
			      sword xPosition = cx,
			      sword yPosition = dx,
			      word inputState = bp);
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_START_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_END_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_START_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_END_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_START_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_END_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_START_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_END_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_DRAG_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_DRAG_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_DRAG_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_DRAG_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_BUTTON;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_BUTTON;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_START_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_END_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_START_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_END_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_START_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_END_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_START_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_PRE_PASSIVE_END_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_START_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_END_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_START_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_END_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_START_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_END_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_START_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_BUTTON)MSG_META_POST_PASSIVE_END_OTHER;

/*
 * 32-bit coordinate pointer events.
 * MouseReturn Params, LargeMouseData are defined in Objects/uiInputC.goh.
 */
@prototype void MSG_UI_LARGE_BUTTON(MouseReturnParams *retVal = bpaxdxcx,
				    LargeMouseData *largeMouseDataStruct=ss:bp);

@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_PTR;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_START_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_END_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_START_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_END_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_START_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_END_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_START_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_END_OTHER;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_DRAG_SELECT;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_DRAG_MOVE_COPY;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_DRAG_FEATURES;
@importMessage	MetaUIMessages, (MSG_UI_LARGE_BUTTON)MSG_META_LARGE_DRAG_OTHER;


@importMessage	MetaUIMessages, MouseReturnFlags MSG_META_ENSURE_MOUSE_NOT_ACTIVELY_TRESPASSING() = ax;   /* XXX */


typedef struct {
    word		ENMISUMP_menuCount;	/* # of menus released so far */
} EnsureNoMenusInStayUpModeParams;

@importMessage	MetaUIMessages, MouseReturnFlags MSG_META_ENSURE_NO_MENUS_IN_STAY_UP_MODE(EnsureNoMenusInStayUpModeParams *params = cx:dx) = ax;   /* XXX */

@importMessage	MetaUIMessages, void MSG_META_ENSURE_ACTIVE_FT();   /* XXX */
@importMessage	MetaUIMessages, void MSG_META_NOTIFY_NO_FOCUS_WITHIN_NODE();   /* XXX */

@importMessage	MetaUIMessages, void MSG_META_DOC_OUTPUT_IMPORT_FILE();	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_DOC_OUTPUT_EXPORT_FILE();	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_GRAB_KBD();	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_FORCE_GRAB_KBD();	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_RELEASE_KBD();	/* XXX */
@importMessage	MetaUIMessages, void MSG_META_VIEW_COMMAND_CHANGE_SCALE(); /* XXX */

@importMessage	MetaUIMessages, void MSG_META_FIELD_NOTIFY_DETACH(optr field = cx:dx, word shutdownFlag = bp);
@importMessage	MetaUIMessages, void MSG_META_FIELD_NOTIFY_NO_FOCUS(optr field = cx:dx, word shutdownFlag = bp);
@importMessage	MetaUIMessages, void MSG_META_FIELD_NOTIFY_START_LAUNCHER_ERROR(optr field = cx:dx);
@importMessage	MetaUIMessages, void MSG_META_DELETE_RANGE_OF_CHARS(@stack
					    VisTextRange rangeToDelete);
@importMessage	MetaUIMessages,  Boolean MSG_META_TEST_WIN_INTERACTIBILITY(optr inputOD = cx:dx, WindowHandle window = bp) = carry; /* XXX */
@importMessage	MetaUIMessages,	 Boolean MSG_META_CHECK_IF_INTERACTABLE_OBJECT(optr obj=cx:dx) = carry; /* XXX */
@importMessage	MetaUIMessages,	 void MSG_META_GAINED_FULL_SCREEN_EXCL(); /* XXX */
@importMessage	MetaUIMessages,	 void MSG_META_LOST_FULL_SCREEN_EXCL(); /* XXX */

/*
 * Mouse Wheel message
 * "inputState" for MSG_META_SCROLL_VERTICAL is wheel Info in the low byte,
 * ShiftState in the high byte -- use GET_WHEEL_INFO and GET_SHIFT_STATE.
 * wheel is > 0 for down and < 0 for up.
 */

@importMessage	MetaUIMessages, void MSG_META_SCROLL_VERTICAL(
		MouseReturnParams *retVal = bpaxdxcx,
		word xPosition = cx,
		word yPosition = dx,
		word inputState = bp);


#if defined(__HIGHC__)
pragma Alias(UserStandardSound, "_UserStandardSound");
pragma Alias(UserStopStandardSound, "USERSTOPSTANDARDSOUND");
pragma Alias(UserAddAutoExec, "USERADDAUTOEXEC");
pragma Alias(UserRemoveAutoExec, "USERREMOVEAUTOEXEC");
pragma Alias(UserGetHWRLibraryHandle, "USERGETHWRLIBRARYHANDLE");
pragma Alias(UserRegisterForTextContext, "USERREGISTERFORTEXTCONTEXT");
pragma Alias(UserUnregisterForTextContext, "USERUNREGISTERFORTEXTCONTEXT");
pragma Alias(UserCheckIfContextUpdateDesired,"USERCHECKIFCONTEXTUPDATEDESIRED");
pragma Alias(UserGetDefaultUILevel, "USERGETDEFAULTUILEVEL");
pragma Alias(UserGetDefaultLaunchLevel, "USERGETDEFAULTLAUNCHLEVEL");
pragma Alias(UserGetInterfaceOptions, "USERGETINTERFACEOPTIONS");
pragma Alias(UserGetLaunchModel, "USERGETLAUNCHMODEL");
pragma Alias(UserGetLaunchOptions, "USERGETLAUNCHOPTIONS");
pragma Alias(UserCreateInkDestinationInfo, "USERCREATEINKDESTINATIONINFO");
pragma Alias(UserGetInitFileCategory, "USERGETINITFILECATEGORY");
pragma Alias(UserLoadApplication, "USERLOADAPPLICATION");
pragma Alias(UserAllocObjBlock, "USERALLOCOBJBLOCK");
pragma Alias(UserEncryptPassword, "USERENCRYPTPASSWORD");
pragma Alais(UserConfirmFieldChange, "_UserConfirmFieldChange");
#endif

extern word _pascal UserGetRecentDocFileName(MemHandle *mh, word *start, char *buffer);

typedef struct {
    FileLongName DE_name;
    word         DE_diskHandle;
    PathName     DE_path;
} DocumentEntry;

#define NUM_OF_DOCUMENT_ENTRIES 10

@endlib
