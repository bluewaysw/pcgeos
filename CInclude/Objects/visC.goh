/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	visC.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines VisClass
 *
 *	$Id: visC.goh,v 1.1 97/04/04 15:51:53 newdeal Exp $
 *
 ***********************************************************************/

@optimize

@deflib ui

#include <graphics.h>
#include <win.h>
@include <object.goh>
@include <Objects/metaC.goh>
@include <Objects/uiInputC.goh>

extern void _pascal
    	VisObjectHandlesInkReply();

@class	VisClass, MetaClass, master;

@define visParent @parent word_offsetof(VisBase, Vis_offset), word_offsetof(VisInstance, VI_link)

@define visChildren @children word_offsetof(VisBase, Vis_offset), word_offsetof(VisCompInstance, VCI_comp), word_offsetof(VisInstance, VI_link)

#define ObjDerefVis(obj) ObjDeref1(obj)

@exportMessages	VisSpecMessages, @DEFAULT_EXPORTED_MESSAGES;
@exportMessages	VisAppMessages, @DEFAULT_EXPORTED_MESSAGES;

typedef ByteFlags DrawFlags;
#define DF_EXPOSED		0x80
#define DF_OBJECT_SPECIFIC	0x40
#define DF_PRINT		0x20
#define DF_DONT_DRAW_CHILDREN	0x10
#define DF_DISPLAY_TYPE		0x0f

/* Drawing */

@message void MSG_VIS_DRAW(DrawFlags drawFlags = cl, 
			   GStateHandle gstate = bp); 

@message void MSG_VIS_REDRAW_ENTIRE_OBJECT();  

@message GStateHandle MSG_VIS_VUP_CREATE_GSTATE() = bp;	

/* MSG_VIS_VUP_QUERY */

@message void MSG_VIS_VUP_QUERY();	/*XXX*/

typedef ByteFlags ColorScheme;
#define CS_lightColor		0xf0
#define CS_darkColor		0x0f
#define CS_lightColor_OFFSET	4
/*
 * NOTE: use DS_lightColor and DS_darkColor instead of DS_colorScheme
 */

typedef struct {
	byte DS_colorScheme;
	byte DS_displayType;
        byte DS_lightColor;
        byte DS_darkColor;
	FontID DS_fontID;
	sword DS_pointSize;
} DisplayScheme;


@message optr MSG_VIS_VUP_FIND_OBJECT_OF_CLASS(ClassStruct *class = cx:dx) = cx:dx;  


typedef enum {
    TO_VIS_PARENT=_FIRST_VisClass
} VisTravelOption;

/*
 * VisUpdateMode - Used for specifying when a visual update should happen:
 */
typedef ByteEnum VisUpdateMode;
#define VUM_MANUAL 0
#define VUM_NOW 1
#define VUM_DELAYED_VIA_UI_QUEUE 2
#define VUM_DELAYED_VIA_APP_QUEUE 3

typedef ByteFlags VisAttrs;
#define VA_VISIBLE			0x80
#define VA_FULLY_ENABLED		0x40
#define VA_MANAGED			0x20
#define VA_DRAWABLE			0x10
#define VA_DETECTABLE			0x08
#define VA_BRANCH_NOT_MINIMIZABLE	0x04
#define VA_OLD_BOUNDS_SAVED		0x02
#define VA_REALIZED			0x01

typedef ByteFlags VisOptFlags;
#define VOF_GEOMETRY_INVALID	0x80
#define VOF_GEO_UPDATE_PATH	0x40
#define VOF_IMAGE_INVALID	0x20
#define VOF_IMAGE_UPDATE_PATH	0x10
#define VOF_WINDOW_INVALID	0x08
#define VOF_WINDOW_UPDATE_PATH	0x04
#define VOF_UPDATE_PENDING	0x02
#define VOF_EC_UPDATING		0x01

typedef ByteFlags VisGeoAttrs;
#define VGA_GEOMETRY_CALCULATED			0x80
#define VGA_NO_SIZE_HINTS			0x40
#define VGA_NOTIFY_GEOMETRY_VALID		0x20
#define VGA_DONT_CENTER				0x10
#define VGA_USE_VIS_SET_POSITION		0x08
#define VGA_USE_VIS_CENTER			0x04
#define VGA_ONLY_RECALC_SIZE_WHEN_INVALID	0x02
#define VGA_ALWAYS_RECALC_SIZE			0x01

typedef ByteFlags VisTypeFlags;
#define VTF_IS_COMPOSITE	0x80
#define VTF_IS_WINDOW		0x40
#define VTF_IS_PORTAL		0x20
#define VTF_IS_WIN_GROUP	0x10
#define VTF_IS_CONTENT		0x08
#define VTF_IS_INPUT_NODE	0x04
#define VTF_IS_GEN		0x02
#define VTF_CHILDREN_OUTSIDE_PORTAL_WIN	0x01

typedef ByteFlags SpecAttrs;
#define SA_ATTACHED			0x80
#define SA_REALIZABLE			0x40
#define SA_BRANCH_MINIMIZED		0x20
#define SA_USES_DUAL_BUILD		0x10
#define SA_CUSTOM_VIS_PARENT		0x08
#define SA_SIMPLE_GEN_OBJ		0x04
#define SA_CUSTOM_VIS_PARENT_FOR_CHILD	0x02
#define SA_TREE_BUILT_BUT_NOT_REALIZED	0x01

@message void MSG_VIS_VUP_CALL_OBJECT_OF_CLASS(EventHandle event = cx);  

@message void MSG_VIS_VUP_SEND_TO_OBJECT_OF_CLASS(EventHandle event = cx); 

@message Boolean MSG_VIS_VUP_TEST_FOR_OBJECT_OF_CLASS(
    	    	    	    	ClassStruct *class = cx:dx) = carry;  

@message void MSG_VIS_VUP_CALL_WIN_GROUP(EventHandle event = cx);  

@message void MSG_VIS_VUP_SEND_TO_WIN_GROUP(EventHandle event = cx);  

/* Get/Set attributes */

@message void MSG_VIS_SET_ATTRS(VisAttrs attrsToSet = cl, 
				VisAttrs attrsToClear = ch, 
				VisUpdateMode updateMode = dl);	

@message void MSG_VIS_SET_GEO_ATTRS(VisGeoAttrs attrsToSet = cl, 
				    VisGeoAttrs attrsToClear = ch, 
				    VisUpdateMode updateMode = dl);	

@message VisGeoAttrs MSG_VIS_GET_GEO_ATTRS() = cl;

@message VisOptFlags MSG_VIS_GET_OPT_FLAGS() = cl;	 

@message void MSG_VIS_SET_TYPE_FLAGS(VisTypeFlags flagsToSet = cl, 
				     VisTypeFlags flagsToClear = ch);	

@message VisTypeFlags MSG_VIS_GET_TYPE_FLAGS() = cl;	

@message VisAttrs MSG_VIS_GET_ATTRS() = cl;	

/* Geometry messages */

/* Use DWORD_X and DWORD_Y to get x, y positions */
@message XYValueAsDWord MSG_VIS_GET_POSITION() = dx.cx;  

@message void MSG_VIS_SET_POSITION(int xOrigin = cx, int yOrigin = dx);	

@message void MSG_VIS_GET_BOUNDS(Rectangle *retValue = axbpcxdx);	

/* Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value */
@message SizeAsDWord MSG_VIS_GET_SIZE() = dx.cx;	

@message void MSG_VIS_SET_SIZE(int width = cx, int height = dx);	

typedef struct {
	word	GCP_aboveCenter;
	word	GCP_belowCenter;
	word	GCP_leftOfCenter;
	word	GCP_rightOfCenter;
} GetCenterParams;

@message void MSG_VIS_GET_CENTER(GetCenterParams *retValue = axbpcxdx);	/*XXX*/

/*
 * Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value.
 */
@message SizeAsDWord MSG_VIS_RECALC_SIZE(
    	    	    	    	RecalcSizeArgs width = cx, 
				RecalcSizeArgs height = dx) = dx.cx;

@message void MSG_VIS_POSITION_BRANCH(int xOrigin = cx, int yOrigin = dx);	/*XXX*/

@message void MSG_VIS_NOTIFY_GEOMETRY_VALID();	

@message void MSG_VIS_BOUNDS_CHANGED(@stack word bottom, word right, 
				     word top, word left);   /*XXX*/


@message void MSG_VIS_RESET_TO_INITIAL_SIZE(VisUpdateMode updateMode = dl);	/*XXX*/

/*
 * Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value.
 */
@message SizeAsDWord MSG_VIS_RECALC_SIZE_AND_INVAL_IF_NEEDED(
    	    	    	    	RecalcSizeArgs width = cx, 
				RecalcSizeArgs height = dx) = dx.cx;  /*XXX*/

@message Boolean MSG_VIS_POSITION_AND_INVAL_IF_NEEDED(word xPosition = cx, 
				word yPosition = dx) = carry;  /*XXX*/


/* Update mechanism */

@message void MSG_VIS_MARK_INVALID(VisOptFlags flagsToSet = cl, 
				   VisUpdateMode updateMode = dl);	
		
@message Boolean MSG_VIS_VUP_UPDATE_WIN_GROUP(
    	    	    	    	VisUpdateMode updateMode = dl) = carry;	

@message void MSG_VIS_UPDATE_WIN_GROUP(VisUpdateMode updateMode = dl);	

@message void MSG_VIS_UPDATE_GEOMETRY();	

typedef ByteFlags VisUpdateImageFlags;
#define	VUIF_ALREADY_INVALIDATED  0x80
#define VUIF_SEND_TO_ALL_CHILDREN 0x40
#define VUIF_JUST_OPENED          0x20    /* INTERNAL */
/* 
 * For backwards compatibility:
 */
#define VUIF_ALREADY_INVALID VUIF_ALREADY_INVALIDATED
#define VUIF_ALWAYS_INVALIDATE VUIF_SEND_TO_ALL_CHILDREN

@message void MSG_VIS_UPDATE_WINDOWS_AND_IMAGE(VisUpdateImageFlags 	\
						  updateImageFlags = cl); /*XXX*/

@message void MSG_VIS_INVALIDATE();	

@message void MSG_VIS_ADD_RECT_TO_UPDATE_REGION(@stack byte unused, 
			VisAddRectFlags addRectFlags, word bottom, word right, 
	 		word top, word left);   /*XXX*/

typedef ByteFlags VisAddRectFlags;
#define VARF_NOT_IF_ALREADY_INVALID	0x80
#define VARF_ONLY_REDRAW_MARGINS	0x40

@message void MSG_VIS_INVAL_TREE();	


/* Open/Close messages */

@message void MSG_VIS_OPEN(WindowHandle window = bp);	/*XXX*/
@message void MSG_VIS_CLOSE();	
@message void MSG_VIS_DESTROY(VisUpdateMode updateMode = dl);	/*XXX*/
@message void MSG_VIS_REMOVE(VisUpdateMode updateMode = dl);	/*XXX*/

@message WindowHandle MSG_VIS_QUERY_WINDOW() = cx;  /*XXX*/
@message void MSG_VIS_OPEN_WIN(WindowHandle parentWindow = bp);	
@message void MSG_VIS_CLOSE_WIN();	
@message void MSG_VIS_WIN_ABOUT_TO_BE_CLOSED(); 
@message void MSG_VIS_MOVE_RESIZE_WIN();	

/* Vis tree manipulation */

@message void MSG_VIS_ADD_CHILD(optr child = cx:dx, CompChildFlags flags = bp);

@message void MSG_VIS_REMOVE_CHILD(optr child = cx:dx, 
				   CompChildFlags flags = bp);	

@message void MSG_VIS_MOVE_CHILD(optr child = cx:dx, 
				 CompChildFlags flags = bp) ;  /*XXX*/
@message word MSG_VIS_FIND_CHILD(optr object = cx:dx) = bp;	
@message optr MSG_VIS_FIND_CHILD_AT_POSITION(word position = cx) = cx:dx; 
@message word MSG_VIS_COUNT_CHILDREN() = dx;	/*XXX*/
@message optr MSG_VIS_FIND_PARENT() = cx:dx;	

@message void MSG_VIS_CALL_PARENT(EventHandle event = cx);   
@message void MSG_VIS_SEND_TO_PARENT(EventHandle event = cx);   
@message void MSG_VIS_SEND_TO_CHILDREN(EventHandle event = cx);   /*XXX*/

/* Grab messages */

@message void MSG_VIS_GRAB_MOUSE(); 
@message void MSG_VIS_FORCE_GRAB_MOUSE(); 
@message void MSG_VIS_GRAB_LARGE_MOUSE(); 
@message void MSG_VIS_FORCE_GRAB_LARGE_MOUSE(); 
@message void MSG_VIS_RELEASE_MOUSE(); 

@message void MSG_VIS_ADD_BUTTON_PRE_PASSIVE();  
@message void MSG_VIS_REMOVE_BUTTON_PRE_PASSIVE();  
@message void MSG_VIS_ADD_BUTTON_POST_PASSIVE();  
@message void MSG_VIS_REMOVE_BUTTON_POST_PASSIVE();  


/* Focus/target messages */

@message void MSG_VIS_TAKE_GADGET_EXCL(optr child = cx:dx);	
@message void MSG_VIS_RELEASE_GADGET_EXCL(optr child = cx:dx);	
@message void MSG_VIS_LOST_GADGET_EXCL();	
@reserveMessages 2;

typedef struct	{
	HierarchicalGrabFlags	OAGP_grabFlags;
	word			OAGP_unused;
	optr			OAGP_object;
} ObjectAndGrabParams;

@message void MSG_VIS_VUP_QUERY_FOCUS_EXCL(
    	    	    	ObjectAndGrabParams *retValue = bpaxdxcx); /*XXX*/

@message void MSG_VIS_FUP_QUERY_FOCUS_EXCL(
    	    	    	ObjectAndGrabParams *retValue = bpaxdxcx); /*XXX*/


typedef ByteFlags VisInputFlowGrabFlags;
#define		VIFGF_NOT_HERE	0x80
#define		VIFGF_FORCE	0x20
#define		VIFGF_GRAB	0x10
#define		VIFGF_KBD	0x08
#define 	VIFGF_MOUSE	0x04
#define		VIFGF_LARGE	0x02
#define		VIFGF_PTR	0x01

typedef ByteEnum VisInputFlowGrabType;
#define VIFGT_ACTIVE 0
#define VIFGT_PRE_PASSIVE 1
#define VIGFT_POST_PASSIVE 2

typedef WordFlags VisInputFlowGrabTypeAndFlags;

@message void MSG_VIS_VUP_ALTER_INPUT_FLOW(
    	    	    	@stack PointDWord translation, 
			WindowHandle window,
			optr object, 
			VisInputFlowGrabTypeAndFlags grabTypeAndFlags);

@message void MSG_VIS_VUP_SET_MOUSE_INTERACTION_BOUNDS(
    	    	    	@stack int bottom, int right, int top, int left);

@message word MSG_VIS_VUP_GET_MOUSE_STATUS() = bp;	/*XXX*/

@message void MSG_VIS_VUP_TERMINATE_ACTIVE_MOUSE_FUNCTION();  

@message void MSG_VIS_VUP_BUMP_MOUSE(word xBump = cx, word yBump = dx);  

/* Miscellaneous */

@message void MSG_VIS_VUP_ALLOW_GLOBAL_TRANSFER();	

@message void MSG_VIS_CALL_ROUTINE(); /* Do not use */

/* MF_monikerFlags */

typedef ByteFlags DrawMonikerFlags;
#define DMF_TEXT_ONLY			0x80
#define	DMF_UNDERLINE_ACCELERATOR	0x40
#define DMF_CLIP_TO_MAX_WIDTH		0x20
#define DMF_NONE			0x10
#define	DMF_Y_JUST_MASK			0x0c	/* Justification */
#define DMF_X_JUST_MASK			0x03    /* Justification */

#define DMF_Y_JUST_OFFSET		2
#define DMF_X_JUST_OFFSET		0

typedef WordFlags VisMonikerSearchFlags;
#define VMSF_STYLE		0xf000
#define VMSF_COPY_CHUNK		0x0400
#define VMSF_REPLACE_LIST	0x0200
#define VMSF_GSTRING		0x0100

#define VMSF_STYLE_OFFSET	12

@message void MSG_VIS_DRAW_MONIKER(@stack 
				   DrawMonikerFlags monikerFlags, 
				   ChunkHandle visMoniker,
				   word textHeight, GStateHandle gstate, 
				   word yMaximum, word xMaximum, word yInset,
				   word xInset);

/* Use DWORD_X and DWORD_Y to get x, y position */
@message XYValueAsDWord MSG_VIS_GET_MONIKER_POS(@stack
				   DrawMonikerFlags monikerFlags, 
				   ChunkHandle visMoniker,
				   word textHeight, GStateHandle gstate, 
				   word yMaximum, word xMaximum, word yInset,
				   word xInset) = dx.cx;

/* Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value */
@message SizeAsDWord MSG_VIS_GET_MONIKER_SIZE(@stack
				   DrawMonikerFlags monikerFlags, 
				   ChunkHandle visMoniker,
				   word textHeight, GStateHandle gstate, 
				   word yMaximum, word xMaximum, word yInset,
				   word xInset) = dx.cx;

@message optr MSG_VIS_FIND_MONIKER(@stack 
				    VisMonikerSearchFlags searchFlags,
				    MemHandle destBlock, 
				    ChunkHandle monikerList, 
				    DisplayType displayType) = cx:dx;  /*XXX*/

@message ChunkHandle MSG_VIS_CREATE_VIS_MONIKER(@stack
				CreateVisMonikerFlags flags,
				word height, word width, word length,
				VisMonikerDataType dataType,
				VisMonikerSourceType sourceType,
				dword source) = ax;

/* Error checking */

@message void MSG_VIS_VUP_EC_ENSURE_WINDOW_NOT_REFERENCED(WindowHandle window = cx); 

@message void MSG_VIS_VUP_EC_ENSURE_OBJ_BLOCK_NOT_REFERENCED(MemHandle objBlock = cx); 

@message void MSG_VIS_VUP_EC_ENSURE_OD_NOT_REFERENCED(optr object = cx:dx); 


/* Messages, Structures used for specific UI implementation */

/*
 * Specific Size specification structures
 */

typedef WordFlags SpecSizeSpec;
#define SSS_TYPE	0x8c00
#define	SSS_DATA	0x03ff

typedef WordFlags SpecWidth;
#define SW_TYPE		0x8c00
#define	SW_DATA		0x03ff

typedef WordFlags SpecHeight;
#define SH_TYPE		0x8c00
#define	SH_DATA		0x03ff

#define SSS_TYPE_OFFSET	10
#define SSS_DATA_OFFSET	0

typedef ByteEnum SpecSizeType;
#define SST_PIXELS				  0x0000
#define SST_COUNT				  0x0400
#define SST_PCT_OF_FIELD_WIDTH	  0x0800
#define SST_PCT_OF_FIELD_HEIGHT	  0x0c00
#define SST_AVG_CHAR_WIDTHS	  0x1000
#define SST_WIDE_CHAR_WIDTHS	  0x1400
#define SST_LINES_OF_TEXT		  0x1800


#define PCT_0	0x000
#define PCT_5	0x033
#define PCT_10	0x066
#define PCT_15	0x099
#define PCT_20	0x0cc
#define PCT_25	0x100
#define PCT_30	0x133
#define PCT_35	0x166
#define PCT_40	0x199
#define PCT_45	0x1cc
#define PCT_50	0x200
#define PCT_55	0x233
#define PCT_60	0x266
#define PCT_65	0x299
#define PCT_70	0x2cc
#define PCT_75	0x300
#define PCT_80	0x333
#define PCT_85	0x366
#define PCT_90	0x399
#define PCT_95	0x3cc
#define PCT_100	0x3ff

typedef WordFlags SpecWinSizeSpec;
#define SWSS_RATIO	0x8000
#define SWSS_SIGN	0x4000
#define SWSS_MANTISSA	0x3c00
#define SWSS_FRACTION	0x03ff

typedef WordFlags RecalcSizeArgs;
#define RSA_CHOOSE_OWN_SIZE 	0x8000
#define RSA_SUGGESTED_SIZE	0x7fff

typedef struct {
    SpecWinSizeSpec	SWSP_x;
    SpecWinSizeSpec	SWSP_y;
} SpecWinSizePair;

typedef ByteEnum WinPositionType;
#define WPT_AT_RATIO 0
#define WPT_STAGGER 1
#define WPT_CENTER 2
#define WPT_TILED 3
#define WPT_AT_MOUSE_POSITION 4
#define WPT_AS_REQUIRED 5
#define WPT_AT_SPECIFIC_POSITION 6


typedef ByteEnum WinSizeType;
#define WST_AS_RATIO_OF_PARENT 0
#define WST_AS_RATIO_OF_FIELD 1
#define WST_AS_DESIRED 2
#define WST_EXTEND_TO_BOTTOM_RIGHT 3
#define WST_EXTEND_NEAR_BOTTOM_RIGHT 4

typedef ByteEnum WinConstrainType;
#define WCT_NONE 0
#define WCT_KEEP_PARTIALLY_VISIBLE 1
#define WCT_KEEP_VISIBLE 2
#define WCT_KEEP_VISIBLE_WITH_MARGIN 3


typedef WordFlags WinPosSizeFlags;
#define WPSF_PERSIST		0x8000
#define WPSF_HINT_FOR_ICON	0x4000
#define WPSF_NEVER_SAVE_STATE	0x2000
#define WPSF_SHRINK_DESIRED_SIZE_TO_FIT_IN_PARENT	0x1000
#define WPSF_CONSTRAIN_TYPE	0x00c0
#define WPSF_POSITION_TYPE	0x0038
#define WPSF_SIZE_TYPE		0x0007

/*
 * Size values are often returned from functions.  To allow their easy return,
 * the type SizeAsDWord is returned.  The DWORD_WIDTH() and DWORD_HEIGHT() 
 * macros can be used to access the x and y components.
 */
typedef dword SizeAsDWord;

#define DWORD_WIDTH(val)	((word) (val))
#define DWORD_HEIGHT(val) 	((word) ((val) >> 16))

#define MAKE_SIZE_DWORD(width,height) ((((dword) (height)) << 16) | (word)(width))

/*
 *	VisMonikers
 */

typedef ByteEnum VMStyle;
#define VMS_TEXT 0
#define VMS_ABBREV_TEXT 1
#define VMS_GRAPHIC_TEXT 2
#define VMS_ICON 3
#define VMS_TOOL 4

typedef WordFlags VisMonikerListEntryType;
#define VMLET_GS_SIZE 		0x3000	/* DisplaySize */
#define VMLET_STYLE		0x0f00  /* VMStyle */
#define VMLET_MONIKER_LIST	0x0080
#define VMLET_GSTRING		0x0040
#define VMLET_GS_ASPECT_RATIO	0x0030	/* DisplayAspectRatio */
#define VMLET_GS_COLOR		0x000f	/* DisplayClass */

#define VMLET_GS_SIZE_OFFSET 12
#define VMLET_STYLE_OFFSET 8
#define VMLET_GS_ASPECT_RATIO_OFFSET 4
#define VMLET_GS_COLOR_OFFSET 0

typedef ByteFlags VisMonikerType;
#define VMT_MONIKER_LIST	0x80
#define VMT_GSTRING		0x40
#define VMT_GS_ASPECT_RATIO	0x30	/* VMAspectRatio */
#define VMT_GS_COLOR		0x0f	/* DisplayClass */

#define VMT_GS_ASPECT_RATIO_OFFSET 4
#define VMT_GS_COLOR_OFFSET 0

typedef struct {
     word		VMLE_type;
     optr		VMLE_moniker;
} VisMonikerListEntry;

typedef WordFlags VisMonikerCachedWidth;
#define VMCW_HINTED		0x8000
#define VMCW_BERKELEY_9		0x7f00
#define VMCW_BERKELEY_10	0x00ff

#define VMCW_BERKELEY_9_OFFSET	8
#define VMCW_BERKELEY_10_OFFSET	0

typedef struct {
    byte		VM_type;
    word		VM_width;
} VisMoniker;


typedef struct {
    VisMoniker		VMWGS_common;
    word		VMWGS_height;
} VisMonikerWithGString;

#define VMWGS_gString	(sizeof(VisMonikerWithGString))   /* Start of gstring */


typedef struct {
    VisMoniker		VMWT_common;
    char		VMWT_mnemonicOffset;
} VisMonikerWithText;

#define VMWT_text	(sizeof(VisMonikerWithText))  /* Start of text */

@define VMO_CANCEL			0xfd
@define VMO_MNEMONIC_NOT_IN_MKR_TEXT	0xfe
@define VMO_NO_MNEMONIC			0xff

typedef ByteFlags CreateVisMonikerFlags;
#define CVMF_DIRTY		0x80

typedef ByteEnum VisMonikerSourceType;
#define VMST_FPTR 0
#define VMST_OPTR 1
#define VMST_HPTR 2

typedef ByteEnum VisMonikerDataType;
#define VMDT_NULL 0
#define VMDT_VIS_MONIKER 1
#define VMDT_TEXT 2
#define VMDT_GSTRING 3
#define VMDT_TOKEN 4

/* Spec build/unbuild messages */

typedef WordFlags SpecBuildFlags;
#define SBF_IN_UPDATE_WIN_GROUP			0x8000
#define SBF_WIN_GROUP				0x4000
#define SBF_TREE_BUILD				0x2000
#define SBF_VIS_PARENT_WITHIN_SCOPE_OF_TREE_BUILD 0x1000
#define SBF_SKIP_CHILD				0x0800
#define SBF_FIND_LAST				0x0400
#define SBF_VIS_PARENT_UNBUILDING		0x0200
#define SBF_VIS_PARENT_FULLY_ENABLED		0x0100
#define SBF_UPDATE_MODE				0x0003

@message void MSG_SPEC_BUILD(SpecBuildFlags flags = bp);	/*XXX*/
@message void MSG_SPEC_BUILD_BRANCH(SpecBuildFlags flags = bp);	/*XXX*/
@message void MSG_SPEC_UNBUILD_BRANCH(SpecBuildFlags flags = bp);	/*XXX*/
@message void MSG_SPEC_UNBUILD(SpecBuildFlags flags = bp);	/*XXX*/
@message optr MSG_SPEC_GET_VIS_PARENT(SpecBuildFlags flags = bp) = cx:dx;	/*XXX*/

@message optr MSG_SPEC_DETERMINE_VIS_PARENT_FOR_CHILD(optr child = cx:dx) = cx:dx;	/*XXX*/

@message optr MSG_SPEC_GUP_QUERY_VIS_PARENT(word parentType = cx) = cx:dx;	/*XXX*/
@message optr MSG_SPEC_GET_SPECIFIC_VIS_OBJECT(word flags = bp) = cx:dx;	/*XXX*/




@message void MSG_SPEC_ADD_CHILD_RELATIVE_TO_GEN(@stack word buildFlags, 
						 optr parent, 
						 optr child);  /*XXX*/

@message void MSG_SPEC_RESOLVE_MONIKER_LIST(ChunkHandle monikerList = cx);
@message void MSG_SPEC_RESOLVE_TOKEN_MONIKER(ChunkHandle monikerChunk = cx);

/* Get/Set attributes */

@message void MSG_SPEC_SET_ATTRS(SpecAttrs attrsToSet = cl, 
				 SpecAttrs attrsToClear = ch, 
			 	 VisUpdateMode updateMode = dl);	/*XXX*/

@message SpecAttrs MSG_SPEC_GET_ATTRS() = cl;	

/* Set usable, enabled, vis moniker */

@message void MSG_SPEC_SET_USABLE(byte updateMode = dl);	

@message void MSG_SPEC_SET_NOT_USABLE(byte updateMode = dl);	

@message Boolean MSG_SPEC_NOTIFY_ENABLED(byte updateMode = dl, 
					 byte flags = dh) = carry;	

@message Boolean MSG_SPEC_NOTIFY_NOT_ENABLED(byte updateMode = dl, 
					     byte flags = dh) = carry;	

@message void MSG_SPEC_UPDATE_VIS_MONIKER(byte updateMode = dl, 
				       word oldMonikerWidth = cx, 
				       word oldMonikerHeight = bp);	

@message void MSG_SPEC_UPDATE_VISUAL(byte updateMode = dl);	

/* Specific UI geometry related messages */

typedef struct {
	word		ESP_extraWidth;
	word		ESP_extraHeight;
	word		ESP_leftoverChildren;
	word		ESP_unused;
} ExtraSizeParams;

@message void MSG_SPEC_GET_EXTRA_SIZE(ExtraSizeParams *retValue = cxdxbpax,
				      word childCount = bp);	/*XXX*/

/* Use DWORD_WIDTH and DWORD_HEIGHT to get width, height from return value */
@message SizeAsDWord MSG_SPEC_CONVERT_DESIRED_SIZE_HINT(
    	    	    	    	    	word desiredWidth = cx,
				 	word desiredHeight = dx,
	 				word childCount = bp) = dx.cx;	/*XXX*/

@message word MSG_SPEC_CONVERT_SIZE(word specSize = cx, 
				    GStateHandle gstate = bp) = cx;  /*XXX*/

typedef struct {
	word		WSIP_windowWidth;
	word		WSIP_windowHeight;
	byte		WSIP_bottomArea;
	byte		WSIP_rightArea;
	word		WSIP_unused;
} WinSizeInfoParams;

@message void MSG_SPEC_VUP_GET_WIN_SIZE_INFO(WinSizeInfoParams *retValue = cxdxbpax); /*XXX*/

/* Keyboard navigation messages */

@message void MSG_SPEC_NAVIGATE_TO_NEXT_FIELD();	/*XXX*/

@message void MSG_SPEC_NAVIGATE_TO_PREVIOUS_FIELD();	/*XXX*/

typedef WordFlags NavigationFlags;
#define NF_COMPLETED_CIRCUIT		0x8000
#define NF_REACHED_ROOT			0x4000
#define NF_NAV_MENU_BAR			0x0020
#define NF_INITIATE_QUERY		0x0008
#define NF_SKIP_NODE			0x0004
#define NF_TRAVEL_CIRCUIT		0x0002
#define NF_BACKTRACK_AFTER_TRAVELING	0x0001
/*
 * For those used to the .def name, NavigateFlags:
 */
typedef NavigationFlags NavigateFlags;

typedef ByteFlags NavigateCommonFlags;
#define NCF_IS_COMPOSITE	0x80
#define NCF_IS_FOCUSABLE	0x40
#define NCF_IS_MENU_RELATED	0x20
#define NCF_IS_INPUT_NODE	0x10

typedef struct {
    optr		NCP_object;
    NavigationFlags	NCP_navFlags;
    NavigateCommonFlags	NCP_navCommonFlags;
    ChunkHandle		NCP_genPart;
    byte		NCP_backtrackFlag;
} NavigateCommonParams;

@message Boolean MSG_SPEC_NAVIGATE_COMMON(
    	    	    	NavigateCommonParams *navCommonParams = ss:bp) = carry;  /*XXX*/

@message Boolean MSG_SPEC_ACTIVATE_INTERACTION_DEFAULT() = carry; /*XXX*/

@message optr MSG_SPEC_NAVIGATE(word navigateFlags = bp) = cx:dx;  /*XXX*/

typedef struct {
	word	NQP_navFlags;
	byte	NQP_backtrackFlag;
	byte	NQP_unused;
	optr	NQP_nextObject;
} NavigationQueryParams;

@message Boolean MSG_SPEC_NAVIGATION_QUERY(
			NavigationQueryParams *retValue = bpaxdxcx,
			optr queryOrigin = cx:dx, 
		 	NavigationFlags navFlags = bp) = carry;	/*XXX*/

@message void MSG_SPEC_NOTIFY_NAVIGATION_COMPLETE(NavigationFlags
					navigateFlags = bp); /*XXX*/

@message Boolean MSG_SPEC_ACTIVATE_OBJECT_WITH_MNEMONIC(word character = cx, 
			byte flags = dx, word state = bp) = carry;	/*XXX*/

@message Boolean MSG_SPEC_CHECK_MNEMONIC(word character = cx, 
					 byte flags = dx, 
					 word state = bp) = carry;   /*XXX*/

typedef ByteFlags MenuSepFlags;
#define MSF_SEP		0x80
#define MSF_USABLE	0x40
#define MSF_FROM_CHILD	0x20

@message byte MSG_SPEC_MENU_SEP_QUERY(byte flags = ch) = ch;	/*XXX*/

@message void MSG_SPEC_UPDATE_MENU_SEPARATORS();	/*XXX*/

/* Broadcast for default focus */

@message optr MSG_SPEC_START_BROADCAST_FOR_DEFAULT_FOCUS() = cx:dx; /*XXX*/

@message void MSG_SPEC_BROADCAST_FOR_DEFAULT_FOCUS(ObjectAndGrabParams *retValue = bpaxdxcx); /*XXX*/

@message void MSG_VIS_LAYER_SET_DOC_BOUNDS(@stack long bottom, long right,
				           long top, long left);  /*XXX*/

@message void MSG_VIS_LAYER_GET_DOC_BOUNDS(RectDWord *retValue = cx:dx);  /*XXX*/

typedef struct {
    word    	VCCIBF_data1;
    word    	VCCIBF_data2;
    word    	VCCIBF_data3;
    word    	VCCIBF_data4;
    word    	VCCIBF_data5;
    Rectangle	VCCIBF_bounds;
} VisCallChildrenInBoundsFrame;

@message void MSG_VIS_QUERY_IF_OBJECT_HANDLES_INK(VisCallChildrenInBoundsFrame *data = ss:bp);

@message void MSG_SPEC_SCAN_GEOMETRY_HINTS();  /*XXX*/
@message void MSG_SPEC_RESCAN_GEO_AND_UPDATE(VisUpdateMode updateMode = dl);  /*XXX*/
@message void MSG_SPEC_UPDATE_SPECIFIC_OBJECT();  
@message void MSG_VIS_RECREATE_CACHED_GSTATES();  

typedef word InsertDeleteSpaceTypes;
#define IDST_MOVE_OBJECTS_INSIDE_DELETED_SPACE_BY_AMOUNT_DELETED    0x0010
#define IDST_MOVE_OBJECTS_INTERSECTING_DELETED_SPACE	    	    0x0008
#define IDST_RESIZE_OBJECTS_INTERSECTING_SPACE	    	    	    0x0004
#define IDST_DELETE_OBJECTS_SHRUNK_TO_ZERO_SIZE	    	    	    0x0002
#define IDST_MOVE_OBJECTS_BELOW_AND_RIGHT_OF_INSERT_POINT_OR_DELETED_SPACE \
    	    	    	    	    	    	    	    	    0x0001
@message void MSG_VIS_LAYER_INSERT_OR_DELETE_SPACE(@stack
				InsertDeleteSpaceTypes type,
				DWFixed spaceY,
				DWFixed spaceX,
				DWFixed positionY,
				DWFixed positionX);

@message void MSG_VIS_CREATE_CACHED_GSTATES();
@message void MSG_VIS_DESTROY_CACHED_GSTATES();
@message void MSG_SPEC_VIS_OPEN_NOTIFY();
@message void MSG_SPEC_VIS_CLOSE_NOTIFY();
@message dword MSG_SPEC_GET_MENU_CENTER() = cx.dx;
@message void MSG_SPEC_UPDATE_KBD_ACCELERATOR(VisUpdateMode updateMode = dl);
@message void MSG_VIS_ADD_NON_DISCARDABLE_VM_CHILD(optr child = cx:dx, 
						   CompChildFlags flags = bp);

@message void MSG_VIS_REMOVE_NON_DISCARDABLE_VM_CHILD(optr child = cx:dx);
@message void MSG_VIS_REMOVE_NON_DISCARDABLE(VisUpdateMode updateMode = dl);

@message void MSG_VIS_INVAL_ALL_GEOMETRY(VisUpdateMode updateMode = dl);
@message void MSG_SPEC_GUP_QUERY();	/* Internal spui message */
@message void MSG_SPEC_RESET_SIZE_TO_STAY_ONSCREEN(VisUpdateMode updateMode = dl);

@protominor LegosLooksSupport
@message void MSG_SPEC_SET_LEGOS_LOOK(char legosLook = cl);
@message char MSG_SPEC_GET_LEGOS_LOOK() = cl;
@protoreset

@protominor UINoInputDestination
@message void MSG_SPEC_NO_INPUT_DESTINATION(word xPos = cx, word yPos = dx,
					    Message inputMessage = bp);
@protoreset


typedef WordFlags GenBranchInfo;
#define GBI_USABLE		0x8000
#define GBI_BRANCH_MINIMIZED	0x4000

/* Variable data */

typedef struct {
	word VGD_lineWidth;
	word VGD_centerOffset;
	word VGD_secondWidth;
} VarGeoData;


    @vardata Rectangle TEMP_VIS_OLD_BOUNDS;
    @vardata VarGeoData ATTR_VIS_GEOMETRY_DATA;
    @vardata word TEMP_VIS_INVAL_REGION;

@protoreset
@protominor	UINewForResponder
    @vardata PointDWord ATTR_SPEC_POSITION;	/* Responder-only, currently. */
    @vardata sword ATTR_SPEC_POSITION_X;
    @vardata sword ATTR_SPEC_POSITION_Y;
@protoreset



/*	Instance Variables */


    @instance Rectangle	VI_bounds = {0, 0, 0, 0};
    @instance VisTypeFlags VI_typeFlags = 0;
    @instance VisAttrs VI_attrs =
		(VA_MANAGED|VA_DRAWABLE|VA_DETECTABLE|VA_FULLY_ENABLED);
    @instance VisOptFlags VI_optFlags =
			(VOF_GEOMETRY_INVALID|VOF_GEO_UPDATE_PATH|
			 VOF_WINDOW_INVALID|VOF_WINDOW_UPDATE_PATH|
			 VOF_IMAGE_INVALID|VOF_IMAGE_UPDATE_PATH);
    @instance VisGeoAttrs VI_geoAttrs = 0;
    @instance SpecAttrs VI_specAttrs = 0;
    @instance @link VI_link;
@endc

#if defined (__HIGHC__)
pragma Alias(VisObjectHandlesInkReply, "VISOBJECTHANDLESINKREPLY");
#endif

@endlib
