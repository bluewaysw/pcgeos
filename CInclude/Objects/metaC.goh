/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	metaC.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	Kernel
 *
 * DESCRIPTION:
 *	This file defines MetaClass
 *
 *	$Id: metaC.goh,v 1.1 97/04/04 15:51:50 newdeal Exp $
 *
 ***********************************************************************/

@optimize
@deflib ui

#include <chunkarr.h>
@include <object.goh>
#include <object.h>
#include <geode.h>
#include <Objects/helpCC.h>

/***/

/*
 * Base structure defined so goc can build on it for all other classes. It
 * *must* be defined before the class is declared.
 */

typedef struct {
    ClassStruct	*MB_class;
} MetaBase;

typedef struct {
    word	ax;
    word	cx;
    word	dx;
    word	bp;
} AsmPassReturn;

/*
 ****************************************************************************
 *			MetaClass Declaration
 ****************************************************************************
 */

@class	MetaClass, meta;

@instance MetaBase	MI_base;

/*
 *		Messages
 */

@message void MSG_META_NULL();

@message void MSG_META_INITIALIZE();

@message void MSG_META_RESERVED_1();

@message void MSG_META_DUMMY();

@message void MSG_META_APP_STARTUP(MemHandle appLaunchBlock);

@message void MSG_META_ATTACH();	/* XXX */
@alias(MSG_META_ATTACH)
  void MSG_META_ATTACH_PROCESS(word value1 = cx, word value2 = dx);

@alias(MSG_META_ATTACH)
  void MSG_META_ATTACH_GENPROCESSCLASS(MemHandle appLaunchBlock = dx);

@alias(MSG_META_ATTACH)
  void MSG_META_ATTACH_OBJECT(word flags = cx, MemHandle appLaunchBlock = dx,
			      MemHandle extraState = bp);
@alias(MSG_META_ATTACH)
  void MSG_META_ATTACH_THREAD();

@message void MSG_META_DETACH(word callerID = cx, optr caller = dx:bp);

@message void MSG_META_DETACH_COMPLETE();

@message void MSG_META_DETACH_ABORT();

@message void MSG_META_ACK(word callerID = cx, optr caller = dx:bp);

@message void MSG_META_APP_SHUTDOWN(word callerID = cx, optr ackOD = dx:bp);
@message void MSG_META_SHUTDOWN_COMPLETE();
@message void MSG_META_SHUTDOWN_ACK(word callerID = cx, optr ackOD = dx:bp);

@message ClassStruct * MSG_META_GET_CLASS() = cx:dx;

@message Boolean MSG_META_IS_OBJECT_IN_CLASS(ClassStruct *class = cx:dx) = carry;

@message void MSG_META_BLOCK_FREE();

@message void MSG_META_OBJ_FREE();

@message void MSG_META_FINAL_OBJ_FREE();	/* PRIVATE */

@message void MSG_META_DEC_BLOCK_REF_COUNT(MemHandle block1 = cx,
	 				   MemHandle block2 = dx);

/*
 *		Object management methods
 */

@message ClassStruct * MSG_META_RESOLVE_VARIANT_SUPERCLASS( \
  word MasterOffset = cx) = cx:dx;  /* XXX */

@message Boolean MSG_META_RELOCATE(word vmRelocType = dx, \
			           word frame = bp) = carry;  /* XXX */

@message Boolean MSG_META_UNRELOCATE(word vmRelocType = dx, \
			             word frame = bp) = carry;  /* XXX */
/*
 *		UI/IM Messages
 */
@message void MSG_META_LEAVE_CONSTRAIN();	/* INTERNAL */

#define PTR_LEAVE_LEFT		0x01
#define PTR_LEAVE_TOP		0x02
#define PTR_LEAVE_RIGHT		0x04
#define PTR_LEAVE_BOTTOM	0x08

@message void MSG_META_SET_FLAGS(ChunkHandle objChunk = cx,
				ObjChunkFlags bitsToSet = dl,
				ObjChunkFlags bitsToClear = dh);

@message word MSG_META_GET_FLAGS(ChunkHandle ch = cx) = ax;

@message void MSG_META_VM_FILE_DIRTY(FileHandle file = cx);

@message void MSG_META_QUIT();
/*
 * if quitLevel = QL_AFTER_DETACH
 *      SI:CX = Ack OD to be passed on to MSG_META_QUIT_ACK.   This is legal
 *              because this message is being sent to a process so SI can
 *              used for extra data.  SI must me set up by the programmer.
 */
@alias(MSG_META_QUIT) \
  void MSG_META_QUIT_PROCESS(word quitLevel = dx, ChunkHandle ackODChunk = cx);

@alias(MSG_META_QUIT) \
  void MSG_META_QUIT_OBJECT(optr obj = cx:dx);

@message void MSG_META_QUIT_ACK(word quitLevel = dx, word abortFlag = cx);

typedef enum /* word */ {
    QL_BEFORE_UI,
    QL_UI,
    QL_AFTER_UI,
    QL_DETACH,
    QL_AFTER_DETACH
} QuitLevel;

/*
ObjMessageParams	struct
	OMP_destination	optr
	OMP_messageFlags	word		; Flags for ObjMessage
	OMP_message	word
	OMP_eventWord0	word	; cx data
	OMP_eventWord1	word	; dx data
	OMP_eventWord2	word	; bp data
ObjMessageParams	ends
*/

/* Note: unlike in Assembly, one cannot use MF_CALL and receive any
 *       return values. But at least it works now.  -Don 10/28/00   */
@message void MSG_META_DISPATCH_EVENT(EventHandle eventHandle = cx,
				      MessageFlags msgFlags = dx);

typedef enum {
    TO_NULL,
    TO_SELF,
    TO_OBJ_BLOCK_OUTPUT,
    TO_PROCESS
} TravelOption;

@message void MSG_META_SEND_CLASSED_EVENT(EventHandle event = cx,
					  TravelOption whereTo = dx);	/* XXX */

@message optr MSG_META_GET_OPTR() = cx:dx;	/* XXX */

typedef struct {
    ClassStruct		*GTP_class;
    optr		GTP_target;
} GetTargetParams;

@message void MSG_META_GET_TARGET_AT_TARGET_LEVEL(
			GetTargetParams *retValue = bpaxdxcx,
			TargetLevel level = cx);	/* XXX */

@message void MSG_META_ADD_VAR_DATA(@stack word dataType, word dataSize,
			void *data);

@message Boolean MSG_META_DELETE_VAR_DATA(word dataType = cx) = carry;

@message word MSG_META_INITIALIZE_VAR_DATA(word dataType = cx) = ax; /* XXX */


/*
 * General purpose notification messages
 */

/* Custom change types passed in MSG_META_NOTIFY and MSG_META_NOTIFY_WITH_DATA_BLOCK */

typedef struct {
	ManufacturerID	NT_manuf;
	word		NT_type;
} NotificationType;


@message void MSG_META_NOTIFY(ManufacturerID manufID = cx,
				word notificationType = dx,
				word data = bp);

@message void MSG_META_NOTIFY_WITH_DATA_BLOCK(ManufacturerID manufID = cx,
				word notificationType = dx,
				MemHandle data = bp);


/*
 *-------------------------------------------------------------------
 * General Notification System --
 * Common structures & equates (Used by MetaClass & Kernel GCN routines)
 *------------------------------------------------------------------------------
 * /

/* List types used with GCN routines & messages */
typedef	struct {
    word	GCNLT_manuf;
    word	GCNLT_type;
} GCNListType;

/* Flag used with GCNLT_type */
typedef WordFlags GCNListTypeFlags;
#define GCNLTF_SAVE_TO_STATE	0x0001

/* Structure of an element in a GCN list */
typedef struct {
	optr	GCNLE_item;
} GCNListElement;

/* Structure of a single GCN list (resides in a chunk) */
typedef struct {
	ChunkArrayHeader	GCNLH_meta;
	word			GCNLH_statusEvent;
	MemHandle		GCNLH_statusData;
	word			GCNLH_statusCount;
	/* Start of GCNListOfListElement's */
} GCNListHeader;

/* Structure of an element in the list of GCN Lists */
typedef struct {
	GCNListType		GCNLOLE_ID;
	ChunkHandle		GCNLOLE_list;
} GCNListOfListsElement;


/* Structure of the GCN list of lists (resides in a chunk) */

typedef struct {
	ChunkArrayHeader	GCNLOL_meta;
	/* Start of GCNListOfListsElement's */
} GCNListOfListsHeader;

/*
 *-------------------------------------------------------------------
 * General Notification System --
 * MetaClass structures & constants
 *------------------------------------------------------------------------------
 * /

/* Variable data storage area required for GCN implementation within
   MetaClass objects */

typedef ByteFlags TempMetaGCNFlags;
#define TMGCNF_RELOCATED	0x80

typedef	struct {
	ChunkHandle		TMGCND_listOfLists;
	TempMetaGCNFlags	TMGCND_flags;
} TempMetaGCNData;

@vardata TempMetaGCNData TEMP_META_GCN;
@vardata ChunkHandle TEMP_META_QUIT_LIST;



/* Stack structure passed to MSG_META_GCN_LIST_ADD & REMOVE */
typedef	struct {
    GCNListType		GCNLP_ID;
    optr		GCNLP_optr;
} GCNListParams;

@message Boolean MSG_META_GCN_LIST_ADD(@stack optr dest,
			word listType, ManufacturerID listManuf
			) = carry; 				 /* XXX */
@message Boolean MSG_META_GCN_LIST_REMOVE(@stack optr dest,
			word listType, ManufacturerID listManuf
			) = carry;  				/* XXX */

/* GCNListSendFlags, passed to all "Send" routines */

typedef WordFlags GCNListSendFlags;
#define GCNLSF_SET_STATUS			0x8000
#define GCNLSF_IGNORE_IF_STATUS_TRANSITIONING	0x4000
#define GCNLSF_FORCE_QUEUE			0x2000

@message void MSG_META_GCN_LIST_SEND(@stack GCNListSendFlags flags,
			EventHandle event, MemHandle block,
			word listType, ManufacturerID listManuf); /* XXX */

@message void MSG_META_GCN_LIST_DESTROY();


@message void MSG_META_SAVE_OPTIONS();

#define INI_CATEGORY_BUFFER_SIZE 64

@message void MSG_META_GET_INI_CATEGORY(char *buf = cx:dx);

@message void MSG_META_SUSPEND();
@message void MSG_META_UNSUSPEND();

@message void MSG_META_LOAD_OPTIONS();

@message word MSG_META_GET_VAR_DATA(@stack word dataType, word bufSize,
			void *buf) = ax;	/* XXX */

@message void MSG_META_NOTIFY_OBJ_BLOCK_INTERACTIBLE(MemHandle objBlock = cx);
@message void MSG_META_NOTIFY_OBJ_BLOCK_NOT_INTERACTIBLE(MemHandle objBlock = cx); /* XXX */

typedef enum {
    OFIQNS_SYSTEM_INPUT_OBJ=0,
    OFIQNS_INPUT_OBJ_OF_OWNING_GEODE=2,
    OFIQNS_PROCESS_OF_OWNING_GEODE=4,
    OFIQNS_DISPATCH=6
} ObjFlushInputQueueNextStop;

@message void MSG_META_OBJ_FLUSH_INPUT_QUEUE(EventHandle event = cx,
			ObjFlushInputQueueNextStop nextStop = bp,
			MemHandle objBlock = dx);	/* XXX */

@message void MSG_META_WIN_DEC_REF_COUNT(MemHandle win = cx);

typedef WordFlags UpdateWindowFlags;
#define UWF_ATTACHING			0x8000;
#define UWF_DETACHING			0x4000;
#define UWF_RESTORING_FROM_STATE	0x2000;
#define UWF_TOP_LEVEL_WINDOW		0x1000;

@message void MSG_META_UPDATE_WINDOW(UpdateWindowFlags updateFlags = cx,
					VisUpdateMode updateMode = dl);

@message void MSG_META_FINISH_QUIT(Boolean abortFlag = cx);

@message void MSG_META_SET_OBJ_BLOCK_OUTPUT(optr output = cx:dx);

@message Boolean MSG_META_GET_HELP_FILE(char *buf = cx:dx) = carry;

typedef struct {
    HelpType	HTR_helpType;
    byte    	HTR_unused1;
    word    	HTR_unused2;
} HelpTypeReturn;

@message Boolean MSG_META_GET_HELP_TYPE (
    	    	    	HelpTypeReturn *retValue = dxcx) = carry;

@message optr MSG_META_GET_OBJ_BLOCK_OUTPUT() = cx:dx;

@message void MSG_META_RESET_OPTIONS();

@message void MSG_META_BRING_UP_HELP();

@message void MSG_META_SET_HELP_FILE(char *buf = cx:dx);

@message Boolean MSG_META_GCN_LIST_FIND_ITEM(@stack optr dest,
			word listType, ManufacturerID listManuf
			) = carry; 				 /* XXX */

@message void MSG_META_TRANSPARENT_DETACH();

@message void MSG_META_REMOVING_DISK(DiskHandle disk = cx);

@message void MSG_META_VM_FILE_SET_INITIAL_DIRTY_LIMIT(FileHandle fh = cx);

@message void MSG_META_VM_FILE_AUTO_SAVE(FileHandle fh = cx);

/*
 *	Buffer to allow easy adding of
 *	methods to MetaClass. DECREASE
 *	IF YOU ADD A NEW MESSAGE.
 */
@reserveMessages	4; // was 4

/*
 * 	Messages exported for other uses
 */

/* Window methods */

@exportMessages	MetaWindowMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Input-related methods */

@exportMessages	MetaInputMessages, @DEFAULT_EXPORTED_MESSAGES;

/* UI-related methods (give 200) */

@exportMessages	MetaUIMessages, @DEFAULT_EXPORTED_MESSAGES_4;

/* Specific-UI related methods */

@exportMessages	MetaSpecificUIMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Application related methods */

@exportMessages	MetaApplicationMessages, @DEFAULT_EXPORTED_MESSAGES_3;

/* Messages for Graphic-Object library */

@exportMessages	MetaGrObjMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Spool/PrintControl library */

@exportMessages	MetaPrintMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Search/Replace/SpellCheck library */

@exportMessages	MetaSearchSpellMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for General Change Notification mechanism */

@exportMessages	MetaGCNMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Text Object Library */

@exportMessages	MetaTextMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Styles Library */

@exportMessages	MetaStylesMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Color Library */

@exportMessages	MetaColorMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Float Library */

@exportMessages	MetaFloatMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for Spreadsheet Library */

@exportMessages	MetaSpreadsheetMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for IACP */

@exportMessages MetaIACPMessages, @DEFAULT_EXPORTED_MESSAGES;

/* Messages for system inbox/outbox (Mailbox Library) */

@exportMessages MetaMailboxMessages, @DEFAULT_EXPORTED_MESSAGES;


/* Variable data storage area required detach within MetaClass objects */
typedef	struct {
	word		DDE_ackCount;
	word		DDE_callerID;
	optr		DDE_ackOD;
	word		DDE_completeMsg;
} DetachDataEntry;
@vardata DetachDataEntry DETACH_DATA;
@vardata word TEMP_EC_IN_USE_COUNT;
@vardata word TEMP_EC_INTERACTIBLE_COUNT;

					/* INTERNAL */
typedef struct {
	word	EAFTPPD_priority;
	optr	EAFTPPD_avoidOptr;
} EnsureActiveFTPriorityPreferenceData;
@vardata EnsureActiveFTPriorityPreferenceData TEMP_META_ENSURE_ACTIVE_FT_LAYER_PRIORITY_PREFERENCE;

typedef struct {
        char            DODRI_tempOwner[GEODE_NAME_SIZE];
        word            DODRI_tempResource;
} DebugObjDuplicateResourceInfo;
@vardata DebugObjDuplicateResourceInfo DEBUG_META_OBJ_DUPLICATE_RESOURCE_INFO;

@endc

/*
 *		Detach
 */

extern void	/*XXX*/
    _pascal ObjInitDetach(MetaMessages msg, optr obj, word callerID, optr ackOD);

/***/

extern void	/*XXX*/
    _pascal ObjIncDetach(optr obj);

/***/

extern void	/*XXX*/
    _pascal ObjEnableDetach(optr obj);

/*
 *		Linkable
 */

typedef struct {
    optr	LP_next;	/* Low bit: clear for sibling optr, */
				/* 	    set for parent optr. */
				/*	    0 = object not in composite */
} LinkPart;

#define LP_IS_PARENT	1		/* low bit is parent flag */

/***/

extern optr
    _pascal ObjLinkFindParent(optr obj, word masterOffset, word linkOffset);

/*
 *		Composite Routines and Constants
 */

typedef struct {
    optr	CP_firstChild;
} CompPart;

typedef WordFlags CompChildFlags;
#define CCF_MARK_DIRTY	0x8000
#define CCF_REFERENCE	0x7fff

#define CCO_FIRST	0x0000
#define CCO_LAST	0x7FFF

#define CCF_REFERENCE_OFFSET 0

typedef ByteEnum InsertChildOption;
#define ICO_FIRST 0
#define ICO_LAST 1
#define ICO_BEFORE_REFERENCE 2
#define ICO_AFTER_REFERENCE 3

typedef WordFlags InsertChildFlags;
#define ICF_MARK_DIRTY	0x8000
#define ICF_OPTIONS	0x0003

/***/

extern word		/* -1 if not found */	/*XXX*/
    _pascal ObjCompFindChildByOptr(optr obj, optr childToFind, word masterOffset,
			   word compOffset, word linkOffset);

extern optr	/*XXX*/
    _pascal ObjCompFindChildByNumber(optr obj, word childToFind, word masterOffset,
			     word compOffset, word linkOffset);

/***/

extern void	/*XXX*/
    _pascal ObjCompAddChild(optr obj, optr objToAdd, word flags, word masterOffset,
		    word compOffset, word linkOffset);

/***/

extern void	/*XXX*/
    _pascal ObjCompRemoveChild(optr obj, optr objToRemove, word flags,
		       word masterOffset, word compOffset, word linkOffset);

/***/

extern void	/*XXX*/
    _pascal ObjCompMoveChild(optr obj, optr objToMove, word flags, word masterOffset,
		     word compOffset, word linkOffset);

/***/

typedef enum /* word */ {
    OCCT_SAVE_PARAMS_TEST_ABORT=0,
    OCCT_SAVE_PARAMS_DONT_TEST_ABORT=2,
    OCCT_DONT_SAVE_PARAMS_TEST_ABORT=4,
    OCCT_DONT_SAVE_PARAMS_DONT_TEST_ABORT=6,
    OCCT_ABORT_AFTER_FIRST=8,
    OCCT_COUNT_CHILDREN=10
} ObjCompCallType;

extern Boolean		/* TRUE if ended in the middle */	/*XXX*/
    _pascal ObjCompProcessChildren(optr obj, optr firstChild,
			   ObjCompCallType stdCallback,
			   void *cbData, word masterOffset,
			   word compOffset, word linkOffset,
			   PCB(Boolean, callback, (optr parent, optr child,
						void *cbData)));


#ifdef __HIGHC__
pragma Alias(ObjInitDetach, "OBJINITDETACH");
pragma Alias(ObjIncDetach, "OBJINCDETACH");
pragma Alias(ObjEnableDetach, "OBJENABLEDETACH");
pragma Alias(ObjLinkFindParent, "OBJLINKFINDPARENT");
pragma Alias(ObjCompFindChildByOptr, "OBJCOMPFINDCHILDBYOPTR");
pragma Alias(ObjCompFindChildByNumber, "OBJCOMPFINDCHILDBYNUMBER");
pragma Alias(ObjCompAddChild, "OBJCOMPADDCHILD");
pragma Alias(ObjCompRemoveChild, "OBJCOMPREMOVECHILD");
pragma Alias(ObjCompMoveChild, "OBJCOMPMOVECHILD");
pragma Alias(ObjCompProcessChildren, "OBJCOMPPROCESSCHILDREN");
#endif

@endlib
