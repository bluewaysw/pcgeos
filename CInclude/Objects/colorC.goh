/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1991 -- All Rights Reserved
 *
 * PROJECT:	PC GEOS
 * FILE:	colorC.goh
 * AUTHOR:	Tony Requist: February 12, 1991
 *
 * DECLARER:	UI
 *
 * DESCRIPTION:
 *	This file defines classes for the color library
 *
 *	$Id: colorC.goh,v 1.1 97/04/04 15:52:02 newdeal Exp $
 *
 ***********************************************************************/
@optimize

@deflib color

@class	ColorSelectorClass, GenControlClass ;


typedef struct {
	word 		CAFR_unused;
	Boolean 	CAFR_indeterminate;
	ColorQuad	CAFR_color;
} ColorAndFlagReturn;

/*
 * Returns non-zero if objects of different colors are selected.
 */
@message void MSG_COLOR_SELECTOR_GET_COLOR(
    	    	    	    	ColorAndFlagReturn *retValue = axbpcxdx);

/*
 * The indeterminateFlag should be non-zero if objects of different
 * colors are selected.
 */
@message void MSG_COLOR_SELECTOR_UPDATE_COLOR(
    	    	    	    	ColorQuad colorQuad = dx.cx,
    	    	    	    	Boolean indeterminateFlag = bp);

@message void MSG_COLOR_SELECTOR_SET_COLOR(
    	    	    	    	ColorQuad colorQuad = dx.cx,
    	    	    	    	Boolean indeterminateFlag = bp);

@message void MSG_COLOR_SELECTOR_APPLY_COLOR(ColorQuad colorQuad = dx.cx);

/*
 * The indeterminateFlag should be non-zero if objects of different
 * colors are selected.
 */
@message void MSG_COLOR_SELECTOR_UPDATE_FILLED_STATUS(
    	    	    	    	SystemDrawMask drawMask = cl,
    	    	    	    	Boolean indeterminateFlag = dx,
    	    	    	    	word updateToolboxFlag = bp);

/*
 * Returns optr that is invalid if handle part is 0 otherwise usable.
 */
@message optr MSG_COLOR_SELECTOR_GET_FILLED_MONIKER() = cx:dx;

/*
 * Returns optr that is invalid if handle part is 0 otherwise usable.
 */
@message optr MSG_COLOR_SELECTOR_GET_UNFILLED_MONIKER() = cx:dx;

/*
 * The indeterminateFlag should be non-zero if objects with different
 * draw masks are selected.
 */
@message void MSG_COLOR_SELECTOR_UPDATE_DRAW_MASK(
    	    	    	    	SystemDrawMask drawMask = cl,
    	    	    	    	Boolean indeterminateFlag = dx);

/*
 * Returns non-zero if objects with different draw masks are selected.
 */
typedef dword DrawMaskAndFlagAsDWord;

@message DrawMaskAndFlagAsDWord MSG_COLOR_SELECTOR_GET_DRAW_MASK() = cx:dx;

/*
 * The indeterminateFlag should be non-zero if objects with different
 * draw masks are selected.
 */
@message void MSG_COLOR_SELECTOR_SET_DRAW_MASK(
    	    	    	    	SystemDrawMask drawMask = cl,
    	    	    	    	Boolean indeterminateFlag = dx);

@message void MSG_COLOR_SELECTOR_APPLY_DRAW_MASK(
    	    	    	    	SystemDrawMask drawMask = cl);

/*
 * The indeterminateFlag should be non-zero if objects with different
 * patterns are selected.
 */
@message void MSG_COLOR_SELECTOR_UPDATE_PATTERN(
    	    	    	    	GraphicPattern pattern = cx,
    	    	    	    	Boolean indeterminateFlag = dx);

/*
 * Returns non-zero if objects with different patterns are selected.
 */
typedef dword PatternAndFlagAsDWord;
@message PatternAndFlagAsDWord MSG_COLOR_SELECTOR_GET_PATTERN() = cx:dx;

/*
 * The indeterminateFlag should be non-zero if objects with different
 * patterns are selected.
 */
@message void MSG_COLOR_SELECTOR_SET_PATTERN(
    	    	    	    	GraphicPattern pattern = cx,
    	    	    	    	Boolean indeterminateFlag = dx);

@message void MSG_COLOR_SELECTOR_APPLY_PATTERN(
    	    	    	    	GraphicPattern pattern = cx);

@message void MSG_CS_SET_FILLED_STATUS();   /* INTERNAL */
@message void MSG_CS_SET_CF_INDEX();   	    /* INTERNAL */
@message void MSG_CS_SET_CF_RGB_RED();      /* INTERNAL */
@message void MSG_CS_SET_CF_RGB_GREEN();    /* INTERNAL */
@message void MSG_CS_SET_CF_RGB_BLUE();     /* INTERNAL */
@message void MSG_CS_SET_DRAW_MASK();       /* INTERNAL */
@message void MSG_CS_SET_PATTERN();   	    /* INTERNAL */


@importMessage MetaColorMessages, void MSG_META_COLORED_OBJECT_SET_COLOR(
    	    	    	    	ColorQuad colorQuad = dx.cx);
@importMessage MetaColorMessages, void MSG_META_COLORED_OBJECT_SET_DRAW_MASK(
    	    	    	    	SystemDrawMask drawMask = cl);
@importMessage MetaColorMessages, void MSG_META_COLORED_OBJECT_SET_PATTERN(
    	    	    	    	GraphicPattern pattern = cx);



typedef WordFlags CSFeatures;
#define CSF_OTHER	0x20
#define CSF_FILLED_LIST	0x10
#define CSF_INDEX	0x08
#define CSF_RGB		0x04
#define CSF_DRAW_MASK	0x02
#define CSF_PATTERN	0x01

typedef WordFlags CSToolboxFeatures;
#define CSTF_INDEX	0x04
#define CSTF_DRAW_MASK	0x02
#define CSTF_PATTERN	0x01

#define CS_DEFAULT_FEATURES \
    (CSF_FILLED_LIST | CSF_INDEX | CSF_RGB | CSF_DRAW_MASK | CSF_PATTERN)

#define CS_DEFAULT_TOOLBOX_FEATURES \
    (CSTF_INDEX | CSTF_DRAW_MASK | CSTF_PATTERN)


typedef ByteFlags ColorModifiedStates;
#define CMS_COLOR_CHANGED	0x04
#define CMS_DRAW_MASK_CHANGED	0x02
#define CMS_PATTERN_CHANGED	0x01

typedef ByteEnum ColoredObjectOrientation;
#define     COO_AREA_ORIENTED 0
#define     COO_TEXT_ORIENTED 1
#define     COO_LINE_ORIENTED 2

typedef ByteFlags ColorToolboxPreferences;
#define CTP_INDEX_ORIENTATION		0x30
#define CTP_DRAW_MASK_ORIENTATION	0x0c
#define CTP_PATTERN_ORIENTATION		0x02
#define CTP_IS_POPUP			0x01

#define CTP_INDEX_ORIENTATION_OFFSET		4
#define CTP_DRAW_MASK_ORIENTATION_OFFSET	2
#define CTP_PATTERN_ORIENTATION_OFFSET		1

    @instance ColorQuad			CSI_color = {0, 0, 0, 0};
    @instance byte			CSI_colorIndeterminate;
    @instance SystemDrawMask		CSI_drawMask = SDM_0;
    @instance byte			CSI_drawMaskIndeterminate;
    @instance GraphicPattern		CSI_pattern = {0, 0};
    @instance byte			CSI_patternIndeterminate;
    @instance ColorModifiedStates	CSI_states = 0;
    @instance ColorToolboxPreferences	CSI_toolboxPrefs = CTP_IS_POPUP;

    @vardata optr	ATTR_COLOR_SELECTOR_DISABLE_OBJECT;
        @reloc ATTR_COLOR_SELECTOR_DISABLE_OBJECT, 0, optr;

@endc

@endlib

