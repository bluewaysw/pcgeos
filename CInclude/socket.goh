/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved
 *
 * PROJECT:	  Socket
 * MODULE:	  socket library
 * FILE:	  socket.goh
 *
 * AUTHOR:  	  Eric Weber: Dec  5, 1994
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EW	12/ 5/94   	Initial version
 *
 * DESCRIPTION:
 *	Socket library C interface
 *
 *
 * 	$Id: socket.goh,v 1.1 97/04/04 15:56:26 newdeal Exp $
 *
 ***********************************************************************/
#ifndef _SOCKET_GOH_
#define _SOCKET_GOH_

#include <medium.h>

#ifndef SOCKET_C_API
@deflib	socket
#endif

/* ############################################################################
 * 		       Socket data types
 * ##########################################################################*/

typedef	word	Socket; /* 16-bit handle for socket */

/*
 *  A port identifies a source or destination for a packet within a machine
 */
typedef struct {
    word		SP_port;	/*  16-bit port number */
    ManufacturerID	SP_manuf;	/*  16-bit manufacturer's ID */
} SocketPort;

/*
 *  Some domains only allow the use of 16 bit port numbers.  For these domains
 *  the SP_manuf field should be set to the value
 *  MANUFACTURER_ID_SOCKET_16BIT_PORT
 */

/*
 *  A SocketAddress identifies a particular remote machine
 * 
 *  SA_domainSize need be initialized only if the library will write to the
 *  buffer pointed to by SA_domain (i.e. when a domain name is a return value)
 *  It is ignored otherwise.
 *
 *  The actual address follows this structure.
 */

typedef struct {
    SocketPort	SA_port;	

/*  size in bytes of SA_domain buffer */
    word	SA_domainSize;	

/*  null terminated domain name */
    TCHAR	*SA_domain;	

/*  size in bytes of address data */
    word	SA_addressSize;	

} SocketAddress;

/*
 *  A SocketCondition indicates either the current or desired state of
 *  a socket, for use with SocketCheckReady
 */
typedef ByteEnum SocketCondition;
#define SC_READ	0x0				/*  data arrived */
#define SC_WRITE	0x1			/*  data can be written */
#define SC_ACCEPT	0x2			/*  connect request arrived */
#define SC_EXCEPTION	0x3			/*  an exception occurred */
#define SC_URGENT	0x4			/*  urgent data arrived */

/*
 *  A SocketCheckRequest indicates a desired condition on some socket
 */
typedef struct {
    word		SCR_socket;
    SocketCondition	SCR_condition;
    byte                SCR_reserved;
} SocketCheckRequest;

/*
 *  Sockets can use either of two different conventions for delivering data:
 *    datagram sockets give high performance, but may be delivered out of
 * 	order or not delivered at all, without the user's knowledge
 *    stream sockets guarantee that all data will be delivered in order
 * 	and correctly, but doesn't preserve packet boundries
 */
typedef ByteEnum SocketDeliveryType;
#define SDT_DATAGRAM	0x0		/*  unreliable packets */
#define SDT_SEQ_PACKET	0x1		/*  reliable packets */
#define SDT_STREAM	0x2		/*  reliable bytes */

/*
 *  SocketLoadType controls how geodes are loaded when invoked via
 *  LoadOnMsg
 */
/* enum SocketLoadType */
typedef enum {
    SLT_USER_LOAD_APPLICATION = 0x0,
    SLT_GEODE_LOAD,
} SocketLoadType;

/*
 *  The SocketBindFlags influence the behavior of SocketBind
 */
typedef WordFlags SocketBindFlags;
#define SBF_REUSE_PORT	(0x8000) /* allow bind even if port is already bound */
/* 15 bits unused */

/*
 *  SocketSendFlags control options for sending
 */
typedef WordFlags SocketSendFlags;
#define SSF_ADDRESS	(0x8000)	/*  an address is supplied in es:di */
#define SSF_URGENT	(0x4000)	/*  this is urgent data */
#define	SSF_OPEN_LINK	(0x2000)    	/*  this datagram should open the */
                                        /*    link, if it is closed       */
/* 13 bits unused */

/*
 *  SocketRecvFlags control options for receiving
 */
typedef WordFlags SocketRecvFlags;		
#define SRF_ADDRESS	(0x8000)	/*  return source address of data */
#define SRF_URGENT	(0x4000)	/*  return urgent data, if any */
#define SRF_PEEK	(0x2000)	/*  leave data in socket */
/* 13 bits unused */

/*
 * Options which can be set for sockets 
 */
typedef enum {	
    SO_RECV_BUF = 0x0,                   /* receive buffer size     */
    SO_SEND_BUF = 0x2,                   /* send buffer size        */
    SO_INLINE = 0x4,                     /* inline urgent data      */
    SO_NODELAY = 0x6,                    /* send data immediately   */
    SO_OWNER = 0x8,                      /* which app owns socket   */
    SO_LINGER = 0xA,                     /* block waiting for close */
    SO_CONNECTION_HDL = 0xC              /* connection handle       */
} SocketOption;

/*
 *  Functions which expect timeout values can be passed -1, which causes them
 *  to wait forever.
 */
#define SOCKET_NO_TIMEOUT	(-1)

/* ############################################################################
 * 			     Error Codes
 * ##########################################################################*/

/*
 * Functions defined as returning type SocketError actually return a word
 * whose low byte is one the SocketError enum values defined below, and
 * the high byte is a SpecSocketDrError defined in sockmisc.h, or possibly
 * something else specific to the driver being used.
 */

#define SOCKET_GENERIC_ERROR(ecode)  ((ecode)&0x00ff)
#define SOCKET_SPECIFIC_ERROR(ecode) ((ecode)&0xff00)

typedef enum {
    SE_NORMAL = 0x0,
/*  operation completed successfully */

    SE_OUT_OF_MEMORY,
/*
 *  the net library was unable to allocate memory
 *  either there is no more system memory available, or a net-library
 *  specific upper bound on memory usage has been exceeded
 */

    SE_PORT_IN_USE,
/*
 *  Another socket is already bound to this port, and the SBF_REUSE_PORT
 *  flag was not set.
 */

    SE_PORT_ALREADY_LISTENING,
/*  Another socket is already listening on this port. */

    SE_SOCKET_IN_USE,
/*
 *  The socket is already being used in a way inconsistent with the
 *  requested operation
 */

    SE_SOCKET_ALREADY_BOUND,
/*  The socket is already bound to a port. */

    SE_SOCKET_NOT_BOUND,
/*  The socket must be bound to a port for the requested operation. */

    SE_SOCKET_NOT_LISTENING,
/*  The socket must be listening on a port for the requested operation. */

    SE_SOCKET_LISTENING,
/*  A listening socket cannot be used for outgoing connections */

    SE_CONNECTION_REFUSED,
/*  Nobody is listening on the remote port. */

    SE_CONNECTION_FAILED,
/*  The connection is no longer valid, probably due to a link failure. */

    SE_CONNECTION_CLOSED,
/*  The connection has been closed from the other end. */

    SE_NON_UNIQUE_CONNECTION,
/*  Another connection with the same endpoint addresses and ports exists. */

    SE_TIMED_OUT,
/*
 *  The timeout period expired before the operation completed.  In some
 *  cases the protocol may enforce a shorter timeout then the user-specified
 *  value, so this is possible even where SOCKET_NO_TIMEOUT is used.
 */

    SE_CANT_LOAD_DRIVER,
/*  A driver required to establish the connection could not be loaded. */

    SE_UNKNOWN_DOMAIN,
/*  The requested domain is not known to the libarary. */

    SE_SYSTEM_SHUTDOWN,
/*  The operation was aborted because GEOS is exiting */

    SE_SOCKET_NOT_CONNECTED,
/*  The operation requires a connected socket */

    SE_SOCKET_ALREADY_CLOSED,
/*  The send side of the socket is already closed */

    SE_SOCKET_BUSY,
/*  Another thread is operating on the socket */

    SE_IMPROPER_CONDITION,
/*
 *  The requested condition for SocketCheckReady is not valid
 *  for a socket in the current state
 */

    SE_INFO_NOT_AVAILABLE,
/*  The driver could not provide the requested information */

    SE_DOMAIN_REQUIRES_16BIT_PORTS,
/*
 *  The requested domain only allows 16 bit port numbers.  The SP_manuf field
 *  must be set to MANUFACTURER_ID_SOCKET_16BIT_PORT
 */

    SE_CONNECTION_ERROR,
/*
 *  The connection was not made for some reason which does not have
 *  it's own specific SocketError
 */

    SE_MEDIUM_BUSY,
/*  The medium required for the connection is not available */

    SE_DESTINATION_UNREACHABLE,
/*  The requested destination is not available */

    SE_LINK_FAILED,
/*
 *  The low level link used for this connection failed or could not be
 *  established
 */

    SE_INTERNAL_ERROR,
/*
 *  The socket library received an impossible error code from the driver.
 *  Either the library or the driver has a bug.
 */

    SE_CLOSE_SEND_NOT_SUPPORTED,
/*
 *  It is not possible to close only the send side of a socket in this
 *  domain.  Use SocketClose instead.
 */

    SE_BIND_CONFLICT,
/*
 *  The same port cannot have both domain restricted and domain unrestricted
 *  bindings.
 */

    SE_ALL_PORTS_BUSY,
/*
 *  SocketConnect attempted to implicitly bind a socket, but failed because
 *  all port numbers in the range used by implicit binds were in use
 */

    SE_SOCKET_NOT_INTERRUPTIBLE,
/*
 *  An operation which cannot be interrupted is in in progress on the
 *  socket
 */

    SE_INTERRUPT,
/*  The operation was interrupted with SocketInterrupt */

    SE_PORT_NOT_LISTENING,
/* No listening socket or LoadOnMsg request exists for this port */

    SE_LISTEN_QUEUE_EMPTY,
/* No connections are pending for this port */

    SE_SOCKET_CLOSED,
/* The socket must be open for sending to call either SocketGetSocketName
   or SocketGetPeerName */

    SE_BUFFER_TOO_SMALL,
/* Returned by SocketResolve to mean that buffer for resolved address is 
   too small */

    SE_TEMPORARY_ERROR,
/* Returned by SocketResolve to indicate that address resolution is temporarily
   unavailable for external reasons( such as network down or server failure )*/

    SE_EXCEPTION,
    SE_URGENT = SE_EXCEPTION,
/* Returned by SocketRecv to indicate that some urgent data arrived on
   a reliable socket or an exception was received for a datagram socket */

    SE_NOT_IMPLEMENTED,
/* Returned by API functions which are not yet implemented */
    
    SE_CONNECTION_RESET
/* The connection was reset by the peer, by the local driver (perhaps in 
 * response to SocketCloseDomainMedium, or by the socket library because
 * the socket is about to be freed when it's owner exits.
 */
} SocketError;

/* ############################################################################
 * 			       User API
 * ##########################################################################*/


/* create and return a  socket */
/* delivery is the type of socket to create */
/* socket will be owned by app whose thread calls SocketCreate  */
extern Socket 
    _pascal SocketCreate(SocketDeliveryType delivery);

/* bind a socket s to a port p */
extern SocketError 
    _pascal SocketBind(Socket s, 
		       SocketPort p, 
		       SocketBindFlags flags);

/* bind a socket s to a port p, but only for connections in domain */
extern SocketError 
    _pascal SocketBindInDomain(Socket s, 
			       SocketPort p, 
			       SocketBindFlags flags, 
			       TCHAR *domain);

/* allow up to qSize incoming connections to be queued for socket s */
extern SocketError 
    _pascal SocketListen(Socket s, 
			 int qSize);

/* when a connection request is made to port p, invoke the program at
   disk:path using the method of slt.  See also UserLoadApplication and 
   GeodeLoad. */
extern SocketError
    _pascal SocketAddLoadOnMsg(SocketPort p,
			      SocketLoadType slt,
			      word disk,
			      TCHAR *path);


/* same as above, but only for connections in one domain */
extern SocketError
    _pascal SocketAddLoadOnMsgInDomain(SocketPort p,
				       SocketLoadType slt,
				       word disk,
				       TCHAR *path,
				       TCHAR *domain);

/* cancel a general LoadOnMsg */
extern SocketError
    _pascal SocketRemoveLoadOnMsg(SocketPort p);

/* cancel a domain-specific LoadOnMsg */
extern SocketError
    _pascal SocketRemoveLoadOnMsgInDomain(SocketPort p,
					  TCHAR *domain);

/* interrupt a socket operation (connect, send, recv, accept) */
extern SocketError
	_pascal	SocketInterrupt(Socket s);

/* 
 * interrupt resolution of the specified address 
 *
 * WARNING:	This function is unreliable.  It may not interrupt
 *		the desired resolve call,if it executes before the
 *		resolve call has begun to be processed.  If may also
 *		cause other, parallel resolve in the same domain
 *		to also be interrupted.
 */
extern SocketError
	_pascal	SocketInterruptResolve(TCHAR *domain,
					byte *address,
					int  addrSize);

/* connect to a remote machine */
extern SocketError
    _pascal SocketConnect(Socket s, 
			  SocketAddress *addr,
			  int timeout);

/* set an option on the socket */
extern void
    _pascal SocketSetIntSocketOption(Socket skt,
				     SocketOption opt,
				     int newval);

/* read an option from a socket */
extern int
    _pascal SocketGetIntSocketOption(Socket skt,
				     SocketOption opt);

/* set up a queue for incoming connection requests on this socket */
extern int
    _pascal SocketCheckListen(SocketPort p, 
			      TCHAR *domain,
			      int bufsize);
				  
/* take first connect request out of queue and assign it to a new
   socket, which will be returned */
/* if return value is 0, error is in TPD_error */
extern Socket
    _pascal SocketAccept(Socket s,
			 int timeout);

/* get the address of the remote side of the connection on a socket */
/* addr must be pointing to a pre-allocated structure with SA_domainSize
   and SA_addressSize initialized.  If SA_domainSize is nonzero, SA_domain
   must point to another pre-allocted buffer.  On return from this call,
   SA_domainSize and SA_addressSize will be set to the original size of the 
   domain and address, and as much data as will fit will be copied into
   the domain buffer and address buffer. */
extern SocketError
    _pascal SocketGetPeerName(Socket s,
			      SocketAddress *addr);


/* get the address another machine would use to connect to a socket */
/* see above for notes on addr parameter */
extern SocketError
    _pascal SocketGetSocketName(Socket s,
				SocketAddress *addr);


/* send some data over a socket */
/* If the socket is of type SDT_SEQ_PACKET or SDT_STREAM it must already
   be connected, and the addr parameter is ignored.
   If the socket is of type SDT_DATAGRAM the addr parameter will be used
   if SSF_ADDRESS is set in the flags, otherwise the address to which
   the socket was connected (if any) will be used.
*/
extern SocketError
    _pascal SocketSend(Socket s,
		       void *buffer,
		       int bufSize,
		       SocketSendFlags flags,
		       SocketAddress *addr);

/* read some data from a socket */
/* buffer must point to a buffer of at lesat bufSize bytes */
/* If SRF_PEEK is set, the data is read nondestructively, and the return
   value is the total number of bytes available for reading.  Otherwise
   any data read is removed from the queue and the return value is the
   number of bytes actually read.   If the return value is 0, an error
   may have occured; if ThreadGetError reports SE_NORMAL, then there was
   no error but there was a zero sized packet in the queue. */
/* If SRF_ADDRESS is set, addr will be set to the address from which
   the data originated.  The parameter is handled in the manner described
   under SocketGetPeerName */
extern int
    _pascal SocketRecv(Socket s,
		       void *buffer,
		       int bufSize,
		       int timeout,
		       SocketRecvFlags flags,
		       SocketAddress *addr);

/* signal that no more data will be sent over this socket */
extern SocketError
    _pascal SocketCloseSend(Socket s);

/* completely close and destroy a socket */
/* No further data can be sent, and any unread data will be destroyed.  This
   function may wait for the remote application to close it's socket also. */
extern SocketError
    _pascal SocketClose(Socket s);

/* close a connection with extreme predjudice */
/* Bypasses all normal protocol-level handshaking and unilaterally kills
   the connection.  Use with caution. */
/* you should still call SocketClose to free the socket data structures 
   and flush unread data */
extern SocketError
    _pascal SocketReset(Socket s);


/* 
 * Ask a domain to stop using a medium.
 *
 * The domain will close the desired medium if there are no connect
ions
 * using it, or if "force" is nonzero.
 *
 * The return value is nonzero if an error ocurred.  This could either be
 * that there is no link in the given domain and medium, or that the
 * link was not closed because it was in use.
 */

extern int
	_pascal SocketCloseDomainMedium(char *domain, 
					MediumAndUnit *mau, 
					Boolean force);

/*
 * Ask a domain to connect a medium.
 *
 * The precise interpretation of this depends on the medium and protocols
 * being used.  For example, in the TCPIP domain, the physical phone
 * line connection will be made, and so will the PPP connection, but
 * no TCP connection will be made.
 */
extern SocketError
    _pascal SocketOpenDomainMedium(SocketAddress *addr,
				   int timeout);


/* see if any socket meets a condition */
/* if return value is negative, error is in TPD_error */
/* otherwise return value is index of some socket meeting condition */
extern int
    _pascal SocketCheckReady(SocketCheckRequest *requests,
			     int numRequests,
			     int timeout);

/* return a chunk array of domain names known to the socket library */
/* error is in TPD_error if return value is zero */
extern ChunkHandle
    _pascal SocketGetDomains(optr domainList);

/* return a chunk array of MediumType with the media supported by
   this domain */
/* error is in TPD_error if return value is zero */
extern ChunkHandle
    _pascal SocketGetDomainMedia(char *domain, 
				 optr mediaList);

/* store into mau the medium which would be used to establish a connection
   to a given address */
extern SocketError
    _pascal SocketGetAddressMedium(SocketAddress *sa,
				   MediumAndUnit *mau);

/*
 * Check if there is an active connection through the 
 * specified unit of the medium.  If a point-to-point connection
 * exists (e.g., an IRLAP connection), then return the address
 * to which the connection exists.  If the connection is not
 * to a specific address (e.g., TCP/IP), then return a null 
 * address (zero-sized.)
 * 
 * PASS:
 *      domain = domain name (null-terminated string)
 *      buffer = buffer for address, large enough to accomodate
 * 			  the expected address.  
 *      bufsize = size of address buffer, in bytes.
 *      mau     = medium of interest
 * 
 * RETURN:
 *      SocketError of the operation (SE_NORMAL if none)
 *      buffer filled in with as much of the address as possible
 *      bufsize set to the total size of the address.  If this is
 *        larger then the passed value, the address was truncated to
 *        fit into the buffer
 */
extern SocketError 
     _pascal SocketCheckMediumConnection(char *domain,
					 byte *buffer,
					 int *bufsize,
					 MediumAndUnit *mau);
	
/*
 * Get the local address of the connection using a particular medium.  
 * This is the address another machine would use to connect to us
 * via that medium.
 *
 * PASS:
 *      domain = domain name (null-terminated string)
 *      buffer = buffer for address, large enough to accomodate
 * 			  the expected address.  
 *      bufsize = size of address buffer, in bytes.
 *      mau     = medium of interest
 * 
 * RETURN:
 *      SocketError of the operation (SE_NORMAL if none)
 *      buffer filled in with as much of the address as possible
 *      bufsize set to the total size of the address.  If this is
 *        larger then the passed value, the address was truncated to
 *        fit into the buffer
 */
extern SocketError 
     _pascal SocketGetMediumAddress(char *domain,
				    byte *buffer,
				    int *bufsize,
				    MediumAndUnit *mau);
	
/* get the class of a controller which can be used to have the user
   enter an address in the correct format for some domain */
/* error in TPD_error if return val is 0 */
extern ClassStruct * 
    _pascal SocketGetAddressController(char *domain);

/* get the maximum size of an address which could be returned from
   SocketGetSocketName or SocketGetPeerName for a socket connected
   in this domain */
/* error in TPD_error if return value is negative */			       
extern int
    _pascal SocketGetAddressSize(char *domain);

/* 
 * Transform an address as returned by the address controller or constructed
 * according to the rules published for a domain, into an internal form
 * which can be used as part of a SocketAddress.
 * 
 * Return value is the actual size of the resolved address.  If this
 * exceeds the size of the output buffer, the contents of output buffer
 * are undefined and the required size is returned.  If some other error
 * occurs, the return value is 0 and TPD_error has the SocketError.
 */
extern int
    _pascal SocketResolve( TCHAR *domainName,
			   byte *rawAddr,
			   int addrSize,
			   byte *result,
			   int resultBuffSize );

/*
 * SocketCreateResolvedAddress is a convenience function that performs
 * a SocketResolve, and builds a complete SocketAddress into a temporary 
 * block.  
 */
extern MemHandle
    _pascal SocketCreateResolvedAddress(const TCHAR *domainName,
			   byte *rawAddr,
			   int addrSize);

/*
 * SocketSetMediumBusy sets whether the medium should appear busy 
 * even when there are no active connections.  Medium should be
 * restored to normal as soon as medium may be allowed to close.
 *
 * NOTES: 
 *	Should only be used by applications wishing to prevent
 *	non-forcing SocketCloseDomainMedium from closing the
 *	medium when there are no active connections.  An
 *	example would be an application which makes a series
 *	of connections with pauses between each connection
 *	and doesn't want the medium closed during a pause.
 * 
 * Returns false if error.  This could be because there is 
 * no link in the given domain and medium.
 */
extern Boolean
    _pascal SocketSetMediumBusy(char *domain,
				MediumAndUnit *mau,
				Boolean busy);

/*
 * Converts an address usable by the socket library (i.e. ip address)
 * into the address the link driver delivers it to (i.e. ethernet mac
 * address). Most link drivers won't support this. If supported, then
 * on return bufSize will be the size of the address.
 */
extern SocketError
   _pascal SocketResolveLinkLevelAddress(SocketAddress *saddr,
                                         byte *buffer,
					 word *bufSize);

#ifdef __HIGHC__
pragma Alias(SocketCreate, "SOCKETCREATE");
pragma Alias(SocketBind, "SOCKETBIND");
pragma Alias(SocketBindInDomain, "SOCKETBINDINDOMAIN");
pragma Alias(SocketListen, "SOCKETLISTEN");
pragma Alias(SocketAddLoadOnMsg, "SOCKETADDLOADONMSG");
pragma Alias(SocketAddLoadOnMsgInDomain, "SOCKETADDLOADONMSGINDOMAIN");
pragma Alias(SocketRemoveLoadOnMsg, "SOCKETREMOVELOADONMSG");
pragma Alias(SocketRemoveLoadOnMsgInDomain, "SOCKETREMOVELOADONMSGINDOMAIN");
pragma Alias(SocketInterrupt, "SOCKETINTERRUPT");
pragma Alias(SocketConnect, "SOCKETCONNECT");
pragma Alias(SocketCheckListen, "SOCKETCHECKLISTEN");
pragma Alias(SocketAccept, "SOCKETACCEPT");
pragma Alias(SocketGetPeerName, "SOCKETGETPEERNAME");
pragma Alias(SocketGetSocketName, "SOCKETGETSOCKETNAME");
pragma Alias(SocketSend, "SOCKETSEND");
pragma Alias(SocketRecv, "SOCKETRECV");
pragma Alias(SocketCloseSend, "SOCKETCLOSESEND");
pragma Alias(SocketClose, "SOCKETCLOSE");
pragma Alias(SocketReset, "SOCKETRESET");
pragma Alias(SocketCloseDomainMedium, "SOCKETCLOSEDOMAINMEDIUM");
pragma Alias(SocketCheckReady, "SOCKETCHECKREADY");
pragma Alias(SocketGetDomains, "SOCKETGETDOMAINS");
pragma Alias(SocketGetDomainMedia, "SOCKETGETDOMAINMEDIA");
pragma Alias(SocketGetAddressMedium, "SOCKETGETADDRESSMEDIUM");
pragma Alias(SocketCheckMediumConnection, "SOCKETCHECKMEDIUMCONNECTION");
pragma Alias(SocketGetAddressController, "SOCKETGETADDRESSCONTROLLER");
pragma Alias(SocketGetAddressSize, "SOCKETGETADDRESSSIZE");
pragma Alias(SocketResolve, "SOCKETRESOLVE");
pragma Alias(SocketCreateResolvedAddress, "SOCKETCREATERESOLVEDADDRESS");
pragma Alias(SocketGetIntSocketOption, "SOCKETGETINTSOCKETOPTION");
pragma Alias(SocketSetIntSocketOption, "SOCKETSETINTSOCKETOPTION");
pragma Alias(SocketInterruptResolve, "SOCKETINTERRUPTRESOLVE");
pragma Alias(SocketOpenDomainMedium, "SOCKETOPENDOMAINMEDIUM");
pragma Alias(SocketGetMediumAddress, "SOCKETGETMEDIUMADDRESS");
pragma Alias(SocketSetMediumBusy, "SOCKETSETMEDIUMBUSY");
pragma Alias(SocketResolveLinkLevelAddress, "SOCKETRESOLVELINKLEVELADDRESS");
#endif

/* ############################################################################
 * 			  Error Checking
 * ##########################################################################*/


#ifndef SOCKET_C_API
@endlib
#endif

#endif /* _SOCKET_GOH_ */
