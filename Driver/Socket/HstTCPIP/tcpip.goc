@include <stdapp.goh>
#include <sem.h>

extern void
	_pascal TcpipReceiveStart(word link);



@class	TcpipProcessClass, ProcessClass;

/*
 * Start the process required to open a connection.
 */
@message void MSG_TCPIP_OPEN_CONNECTION(word connection = cx);

/*
 * Start the process to close a connection.
 */
@message void MSG_TCPIP_CLOSE_CONNECTION(word connection = cx);

/*
 * Start the process to reset a connection.
 */
@message void MSG_TCPIP_RESET_CONNECTION(word connection = cx, word error = dx);

/*
 * Start the process to open a connection requested by the peer.
 */
@message void MSG_TCPIP_ACCEPT_CONNECTION(word connection = cx);

/*
 * Process outgoing data for a connection.
 */
@message word MSG_TCPIP_SEND_DATA(word connection = cx, word mode = dx) = ax;

/*
 * Send datagram.
 */
@message word MSG_TCPIP_SEND_DATAGRAM(word link = cx, optr buffer = dx:bp) = ax;

/*
 * Process incoming data from the network.
 */
@message void MSG_TCPIP_RECEIVE_DATA();

/*
 * Process a timeout.
 */
@message void MSG_TCPIP_TIMEOUT_OCCURRED ();

/*
 * Delete a link.
 */
@message void MSG_TCPIP_DELETE_LINK (word link = cx);

/*
 * Destroy all Tcp connections.
 */
@message void MSG_TCPIP_DESTROY_CONNECTIONS ();

/*
 * Send a raw ip packet.
 */
@message word MSG_TCPIP_SEND_RAW_IP(word link = cx, optr buffer = dx:bp) = ax;

/*
 * DHCP lease renewal messages
 */
@message void MSG_TCPIP_DHCP_RENEW_TIMER();
@message void MSG_TCPIP_DHCP_RENEW_NOW();

@message void MSG_TCPIP_START_RECEIVE();
@message void MSG_TCPIP_ASYNC_UNLOCK(word sem = cx);

@endc;




@classdecl	TcpipProcessClass, neverSaved;

@method TcpipProcessClass, MSG_TCPIP_START_RECEIVE {

	TcpipReceiveStart(0);
}

@method TcpipProcessClass, MSG_TCPIP_ASYNC_UNLOCK {

    ThreadVSem(sem);
}
