COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1995 -- All Rights Reserved

PROJECT:	Socket
MODULE:		DHCP
FILE:		dhcpConstant.def

AUTHOR:		Eric Weber, Jun 26, 1995

MACROS:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	EW	6/26/95   	Initial revision


DESCRIPTION:
	Internal constants for DHCP support in TCPIP. File taken from the
	DHCP library code as most of it is useful here, altho the comments
	may be off (referring to DHCP library & how it worked).

	$Id: dhcpConstant.def,v 1.1 97/04/04 17:53:01 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@

;
; maximum length of a dotted decimal address in chars, with or without
; a trailing null
;
; e.g. "255.255.255.255"
;
MAX_IP_DECIMAL_ADDR_LENGTH	equ	15
MAX_IP_DECIMAL_ADDR_LENGTH_ZT	equ	16
NUM_DOTS_IN_DECIMAL_IP_ADDR		equ	3

; IP_PHYSICAL_BROADCAST_ADDR	equ	"255.255.255.255"

DHCP_SERVER_PORT		equ	67
DHCP_CLIENT_PORT		equ	68

;
; stack space for work thread
;
DHCP_THREAD_STACK_SIZE		equ	1024

;
; maximum wait between requests before thread will exit
;
DHCP_THREAD_TIMEOUT		equ	600	; 10 seconds

;
; parameters for retransmission loop
;
NEC< DHCP_QUERY_TIMEOUT_BASE	equ	480	; first timeout 8 seconds... >
EC< DHCP_QUERY_TIMEOUT_BASE	equ	2400	; first timeout 40 seconds... >
DHCP_QUERY_TIMEOUT_DELTA	equ	60	; ... +- random(1 sec)
DHCP_QUERY_TIMEOUT_MAX		equ	3840	; timeout not to exceed 64 secs

;
; hardware type for serial
;
HTYPE_SERIAL		equ	14h
HTYPE_SERIAL_SIZE	equ	6

;
; types of information which DHCP can retrieve
;
NUM_DHCP_INFO_TYPES	equ	3	; used for size computations below
DHCPInfo	record
	DI_NETMASK:1
	DI_NAMESERVER:1
	DI_GATEWAY:1
	:13
DHCPInfo	end

BootOperation	etype	byte,1,1
	BO_REQUEST	enum	BootOperation	; msg from client to server
	BO_REPLY	enum	BootOperation	; msg from server to client

DHCPMessageFlags	record
	DMF_BROADCAST:1		; set if server should broadcast reply
	:15
DHCPMessageFlags	end

;
; this is the format of the fixed part of a DHCP message
; it is followed by any options which are present
;
; Note that there is no defined hardware address type appropriate to
; serial line operation.  For lack of a better alternative, the library
; will use hardware type 0, which is invalid.
;
DHCPMessage	struct
	DM_op		BootOperation
	DM_htype	byte			; hardware address type
	DM_hlen		byte			; length of hardware address
	DM_hops		byte			; used by relay agents
	DM_xid		dword			; transaction ID
	DM_secs		word			; elapsed seconds
	DM_flags	DHCPMessageFlags	; message flags
	DM_ciaddr	dword			; client IP address
	DM_yiaddr	dword			; your (client) IP address
	DM_siaddr	dword			; server IP address
	DM_giaddr	dword			; relay IP address
	DM_chaddr	byte	16 dup (?)	; client hardware address
	DM_sname	char	64 dup (?)	; server host name
	DM_file		char	128 dup (?)	; boot file name
	DM_options	label	byte		; DHCP options field
DHCPMessage	ends

;
; when we allocate messages internally, we put a header at the top of
; the block for bookkeping purposes, followed by the real message
; which will be sent out in the datagram
;
DHCPBlockHeader		struct
	DBH_block	hptr		; block containing this struct
	DBH_size	word		; size of the message and options
DHCPBlockHeader		ends

;
; The options section starts with a four-byte 'magic cookie' that
; indicates what the format of the section is.  For DHCP and BOOTP
; standard options, the cookie value is 63.82.53.63 (hex).  Because it
; will be transmitted in Network byte order, which is opposite of
; Intel byte order, we reverse the bytes in the constant to make it
; easier to read and write.
;
DHCP_PERMUTED_COOKIE	equ	63538263h
SIZEOF_DHCP_COOKIE	equ	4

;
; Following the cookie are the individual options, as defined in RFC
; 1533 and extended in subsequent draft standards. This list of option
; values is derived from the May 1995 draft DHCP specification, and is
; listed in the order defined in that document.
;
; Very few of these are supported in any way by this DHCP implementation
;
DHCPMessageOption	etype	byte,0,1
	;
	; bootp vendor options
	;
	DMO_PAD                                 enum DHCPMessageOption, 0
	DMO_END                                 enum DHCPMessageOption, 255
	DMO_SUBNET_MASK                         enum DHCPMessageOption, 1
	DMO_TIME_OFFSET                         enum DHCPMessageOption, 2
	DMO_ROUTER                              enum DHCPMessageOption, 3
	DMO_TIME_SERVER                         enum DHCPMessageOption, 4
	DMO_NAME_SERVER                         enum DHCPMessageOption, 5
	DMO_DNS                                 enum DHCPMessageOption, 6
	DMO_LOG_SERVER                          enum DHCPMessageOption, 7
	DMO_COOKIE_SERVER                       enum DHCPMessageOption, 8
	DMO_LPR_SERVER                          enum DHCPMessageOption, 9
	DMO_IMPRESS_SERVER                      enum DHCPMessageOption, 10
	DMO_RESOURCE_LOCATION_SERVER            enum DHCPMessageOption, 11
	DMO_HOSTNAME                            enum DHCPMessageOption, 12
	DMO_BOOTFILE_SIZE                       enum DHCPMessageOption, 13
	DMO_DUMPFILE                            enum DHCPMessageOption, 14
	DMO_DOMAIN_NAME                         enum DHCPMessageOption, 15
	DMO_SWAP_SERVER                         enum DHCPMessageOption, 16
	DMO_ROOT_PATH                           enum DHCPMessageOption, 17
	DMO_EXTENSIONS_PATH                     enum DHCPMessageOption, 18
	;
	; IP Layer Parameters per host
	;
	DMO_FORWARDING                          enum DHCPMessageOption, 19
	DMO_SOURCE_ROUTING                      enum DHCPMessageOption, 20
	DMO_POLICY_FILTER                       enum DHCPMessageOption, 21
	DMO_MAX_DATAGRAM_SIZE                   enum DHCPMessageOption, 22
	DMO_DEFAULT_IP_TTL                      enum DHCPMessageOption, 23
	DMO_MTU_AGING_TIMEOUT                   enum DHCPMessageOption, 24
	DMO_MTU_PLATEAU                         enum DHCPMessageOption, 25
	;
	; IP layer parameters per interface
	;
	DMO_MTU                                 enum DHCPMessageOption, 26
	DMO_ALL_SUBNETS_LOCAL                   enum DHCPMessageOption, 27
	DMO_BROADCAST_ADDR                      enum DHCPMessageOption, 28
	DMO_MASK_DISCOVERY                      enum DHCPMessageOption, 29
	DMO_MASK_SUPPLIER                       enum DHCPMessageOption, 30
	DMO_ROUTER_DISCOVERY                    enum DHCPMessageOption, 31
	DMO_ROUTER_SOLICITATION                 enum DHCPMessageOption, 32
	DMO_STATIC_ROUTE                        enum DHCPMessageOption, 33
	;
	; Link layer parameters per interface
	;
	DMO_TRAILER_ENCAPSULATION               enum DHCPMessageOption, 34
	DMO_ARP_TIMEOUT                         enum DHCPMessageOption, 35
	DMO_ETHERNET_ENCAPSULATION              enum DHCPMessageOption, 36
	;
	; TCP parameters per interface
	;
	DMO_DEFAULT_TCP_TTL                     enum DHCPMessageOption, 37
	DMO_KEEPALIVE                           enum DHCPMessageOption, 38
	DMO_KEEPALIVE_GARBAGE                   enum DHCPMessageOption, 39
	;
	; Application and service parameters
	;
	DMO_NIS_DOMAIN                          enum DHCPMessageOption, 40
	DMO_NIS_ADDR                            enum DHCPMessageOption, 41
	DMO_NTP_ADDR                            enum DHCPMessageOption, 42
	DMO_VENDOR_SPECIFIC                     enum DHCPMessageOption, 43
	DMO_NETBIOS_NAMESERVER                  enum DHCPMessageOption, 44
	DMO_NETBIOS_DISTRIBUTION                enum DHCPMessageOption, 45
	DMO_NETBIOS_NODE_TYPE                   enum DHCPMessageOption, 46
	DMO_NETBIOS_SCOPE                       enum DHCPMessageOption, 47
	DMO_XWINDOW_FONT_ADDR                   enum DHCPMessageOption, 48
	DMO_XWINDOW_XDM_ADDR                    enum DHCPMessageOption, 49
	DMO_NISPLUS_DOMAIN                      enum DHCPMessageOption, 64
	DMO_NISPLUS_ADDR                        enum DHCPMessageOption, 65
	DMO_MOBILE_IP_HOME                      enum DHCPMessageOption, 68
	;
	; DHCP specific options
	;
	DMO_REQUESTED_IP                        enum DHCPMessageOption, 50
	DMO_LEASE_TIME                          enum DHCPMessageOption, 51
	DMO_OPTION_OVERLOAD                     enum DHCPMessageOption, 52
	DMO_TFTP_SERVER                         enum DHCPMessageOption, 66
	DMO_BOOTFILE                            enum DHCPMessageOption, 67
	DMO_DHCP_MESSAGE_TYPE                   enum DHCPMessageOption, 53
	DMO_DHCP_SERVER_ID                      enum DHCPMessageOption, 54
	DMO_PARAMETER_REQUEST                   enum DHCPMessageOption, 55
	DMO_ERROR_MESSAGE                       enum DHCPMessageOption, 56
	DMO_MAX_DHCP_MESSAGE_SIZE               enum DHCPMessageOption, 57
	DMO_RENEWAL_TIME                        enum DHCPMessageOption, 58
	DMO_REBINDING_TIME                      enum DHCPMessageOption, 59
	DMO_CLASS_ID                            enum DHCPMessageOption, 60
	DMO_CLIENT_ID                           enum DHCPMessageOption, 61


; The DMO_PAD and DMO_END options consist only of the opcode and have
; a fixed length of 1 byte.
;
; All other options are variable length, and begin with the 1 byte opcode
; followed by the length in bytes of the option.  The length does not
; include the opcode or length byte, however.
;
DHCPOptionCommon	struct
	DOC_opcode	DHCPMessageOption
	DOC_length	byte	; size of data following this structure
DHCPOptionCommon	ends

;
; DMO_DHCP_MESSAGE_TYPE is always length 1, and the datum is a member of
; the DHCPMessageType enumeration
;
SIZEOF_DMO_DHCP_MESSAGE_TYPE		equ	(size DHCPOptionCommon + 1)
DHCPMessageType		etype	byte,1,1
	DMT_DISCOVER	enum	DHCPMessageType
	DMT_OFFER	enum	DHCPMessageType
	DMT_REQUEST	enum	DHCPMessageType
	DMT_DECLINE	enum	DHCPMessageType
	DMT_ACK		enum	DHCPMessageType
	DMT_NAK		enum	DHCPMessageType
	DMT_RELEASE	enum	DHCPMessageType
	DMT_INFORM	enum	DHCPMessageType

;
; DMO_PARAMTER_REQUEST data are a list of DHCPMessageOption values which
; the client wishes the server to provide
;
; We compute the maximum length if all DHCPInfoType flags are selected
;
SIZEOF_DMO_PARAMETER_REQUEST	equ	(size DHCPOptionCommon + NUM_DHCP_INFO_TYPES)

;
; Our INFORM query will have fixed fields, a cookies, and three options:
;  DMO_MESSAGE_TYPE, DMO_PARAMETER_REQUEST, and DMO_END
;
; However, the real size we use is 300 bytes because that's the minimum
;
SIZEOF_DMT_INFORM	equ (size DHCPMessage + SIZEOF_DHCP_COOKIE +  SIZEOF_DMO_DHCP_MESSAGE_TYPE + SIZEOF_DMO_PARAMETER_REQUEST + 1)

SIZEOF_DMT_REQUEST	equ 300
SIZEOF_DMT_DECLINE	equ 300
SIZEOF_DMT_RENEWAL	equ 300

.assert	SIZEOF_DMT_REQUEST ge SIZEOF_DMT_INFORM
;
; A minimal response has the fixed fields, the cookie, the message type
; option, and DMO_END.
;
SIZEOF_DHCP_MINIMAL_MESSAGE equ (size DHCPMessage + SIZEOF_DHCP_COOKIE +  SIZEOF_DMO_DHCP_MESSAGE_TYPE + 1)

MIN_DHCP_PACKET_SIZE		equ 300
MAX_DHCP_PACKET_SIZE		equ 576
MAX_DHCP_RETRIES		equ 3
DHCP_TIMER_FREQUENCY_SECS	equ (15*60)
DHCP_TIMER_FREQUENCY_TICKS	equ (DHCP_TIMER_FREQUENCY_SECS*60)
DHCP_LEASE_PANIC_TIME_SECS	equ (1*60)
DHCP_LEASE_PANIC_TIME_TICKS	equ (DHCP_LEASE_PANIC_TIME_SECS*60)
SIZEOF_DHCP_LEASE_TIME		equ 4

DHCPRenewPhase		etype	word,0,1
	DRP_RENEW	enum	DHCPRenewPhase
	DRP_REBIND	enum	DHCPRenewPhase
	DRP_EXPIRE	enum	DHCPRenewPhase
