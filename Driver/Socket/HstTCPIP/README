$Id: README,v 1.4.11.1 97/03/29 08:05:43 canavese Exp $

Table of Contents:
	* Implementation notes
	* INI settings
	* IP Options
	* It would be nice if...
	* Disclaimer

---------------------------------------------------------------------------

Implementaion notes:

HugeLMem block is used for allocating data buffers and TCBs only.  
All hugeLMem chunks must be locked and unlocked with HugeLMemLock/Unlock 
and their ptrs are guaranteed to be valid as long as the chunks are locked.
This guarantee only applies if the hugeLMem chunks are NOT resized during 
use.  Downsizing is fine.

(This means, don't allocate any chunk arrays or anything else that 
may be resized during its lifetime in hugeLMem chunks.)

The socket info, the link table, output queues and input queues for link
connections are allocated in their own LMem blocks because these use chunk 
arrays which is a BAD thing with hugeLMems.  This also allows 
MemLockExcl/MemUnlockExcl to be used to provide exclusive access to the data
for socket and link info.

Only the driver's thread will be accessing the TCBs so synchronizing access
is not necessary here.  Same goes for link input queues.

The output queue stores the data buffers in the order they are received from 
the socket library.  As bytes are acked, they are dropped from the output 
queue.

The TCP/IP driver can only be registered once for each kind of driver.  When
the TCP/IP driver is no longer registered by any clients, the thread and timer
in the driver will be destroyed.

---------------------------------------------------------------------------
INI:
-----
See /staff/pcgeos/Installed/geosec.ini for most up-to-date settings along 
with more detailed description of each.


[TCPIP]
link = <name of link driver to use>
linkDomain = <domain name of link driver>

[UDP]
useChecksum = <boolean>		

[SLIP]
port = <SerialPortNum value>
addr = <local IP address in dotted decimal notation>
baud = <SerialBaud value>
maxFrame = <max bytes per SLIP frame>
portDriver = <name of special serial driver>

Configuring the TCP driver at the protocol level:

   [TCPIP]
   maxTTL = <integer>		; 1 - 255
   defaultMss = <integer>	; 512 - 4096 bytes
   maxWin = <integer>		; 4096 - 65535, deflt: 65535
   maxRexmt = <integer>		; 0 - 12
   maxIdle = <# of minutes>	; 0 - 540 mins
   maxProbes = <integer>	; 0 - 10
   compatBSD42 = <boolean>  	; true if compatible with BSD 4.2 host
   rtt = <integer>		
   rttShift = <integer>		; 0 - 10
   rttvarShift = <integer>	; 0 - 10

---------------------------------------------------------------------------

IP Options:
-----------

The checksum computation requires the IP header immediately preceding the 
TCP (or UDP...) header.  That's why the IP options cannot be inserted into
the data buffer before calling IpOuput.

Sending IP options are currently not implemented.  To implement, do this:

Add 2 parameters to IpOutput:
	fptr to IP options data
	size of IP options
   
Option 1)  IpOutput allocates a new buffer big enough to include the 
		options and copies the contents of the original buffer
		to the new buffer.  (Remember, hugeLmem chunks CANNOT
		be resized.)

Option 2)  If TCP (or UDP...) can detect when IP options will be used,
		it can call TcpipAllocDataBuffer passing a size which
		includes room for the options.
	   IpOutput will then scoot the IP header forward in the buffer
		and then copy the IP options into the space between
		the IP header and the TCP (or UDP...) header.

Define some way for TCP (or UDP...) to know what/if IP options are used
and an API to the socket library for the user to specify IP options.


---------------------------------------------------------------------------
It would be nice if...

Multiple TCP links for outgoing connections:
	Would be nice if we could do away with the notion of 
	"main" link driver and allow TCP to select SLIP or PPP
	dynamically.  May do this by combining SLIP into the PPP
	driver (Morningstar does this) and specifying the link
	protocol in the access point information.  Alternative is
	to make TCP support multiple outgoing link drivers.  This 
	would require TCP's LinkTable data structure to be redesigned.

===========================================================================
In the interest of minimizing implementation time over cleanliness of code, 
the code ported from BSD is left unchanged in most places.  While this 
violates almost all GEOS naming conventions, it greatly simplifies porting.  





